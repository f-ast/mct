head	1.27;
access;
symbols
	v20080910-1520:1.27
	v20070403-1500:1.26
	v20070330-1300:1.26
	v20060330-1300:1.26
	v20070322-1100:1.26
	v20060316-0600:1.26
	v20070307-0700:1.25
	v20070228-2000:1.23
	v20070221-1500:1.22
	v20070208-1800:1.22
	v20070103-0300:1.19
	M4_20:1.19
	v20061222-1800:1.19
	v20061214-0000:1.19
	v20061120-1300:1.18
	M3_20:1.18
	v20061117-0800:1.18
	v20061013-1330:1.13
	v20061005-1700:1.7.2.1
	M1_20:1.11
	v20060904-1500:1.11
	v20060824-1600:1.7.2.1
	v20060713-1700:1.7.2.1
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.7
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.4
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.27
date	2007.04.04.11.04.49;	author bblajer;	state dead;
branches;
next	1.26;
commitid	18c54613864d4567;

1.26
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.25;
commitid	617845f977b04567;

1.25
date	2007.03.05.12.58.41;	author bblajer;	state Exp;
branches;
next	1.24;
commitid	437c45ec14004567;

1.24
date	2007.03.03.23.45.11;	author bblajer;	state Exp;
branches;
next	1.23;
commitid	2e3145ea08814567;

1.23
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.22;
commitid	496945df14164567;

1.22
date	2007.02.02.17.14.33;	author bblajer;	state Exp;
branches;
next	1.21;
commitid	78d445c371764567;

1.21
date	2007.01.19.17.15.18;	author bblajer;	state Exp;
branches;
next	1.20;
commitid	781645b0fca44567;

1.20
date	2007.01.11.19.16.11;	author bblajer;	state Exp;
branches;
next	1.19;
commitid	6c2845a68cf94567;

1.19
date	2006.12.12.12.54.44;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	355b457ea6574567;

1.18
date	2006.11.09.18.15.42;	author bblajer;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.18.16.29.03;	author bblajer;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.18.14.22.07;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.18.09.56.59;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.17.13.08.27;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.11.15.45.01;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.04.15.44.10;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.03.17.42.27;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.19.19.14.13;	author ashatalin;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.06.05.13.35.59;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.29.12.27.00;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.25.14.26.26;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;

1.7.2.1
date	2006.07.04.15.54.41;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.27
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@package org.eclipse.gmf.codegen.templates.lite.parts;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.emf.ecore.*;
import java.util.*;

public class LinkEditPartGenerator
{
  protected static String nl;
  public static synchronized LinkEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    LinkEditPartGenerator result = new LinkEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " implements ";
  protected final String TEXT_7 = ", ";
  protected final String TEXT_8 = ", ";
  protected final String TEXT_9 = " {";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_12 = ";";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_14 = " myDecorationManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_15 = "(";
  protected final String TEXT_16 = " view) {" + NL + "\t\tassert view instanceof ";
  protected final String TEXT_17 = ";" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_18 = " getDiagramEdge() {" + NL + "\t\treturn (";
  protected final String TEXT_19 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_20 = " getDecorationManager() {" + NL + "\t\treturn myDecorationManager;" + NL + "\t}" + NL;
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_23 = " view = (";
  protected final String TEXT_24 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_25 = " view = (";
  protected final String TEXT_26 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_27 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_30 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_31 = "());";
  protected final String TEXT_32 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_33 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_34 = "());" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_35 = ".CONNECTION_BENDPOINTS_ROLE, new ";
  protected final String TEXT_36 = "());";
  protected final String TEXT_37 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_38 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_39 = "());";
  protected final String TEXT_40 = NL;
  protected final String TEXT_41 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_42 = "\", new ";
  protected final String TEXT_43 = "()); //$NON-NLS-1$";
  protected final String TEXT_44 = NL;
  protected final String TEXT_45 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_46 = ".OPEN_ROLE";
  protected final String TEXT_47 = " + \"";
  protected final String TEXT_48 = "\" ";
  protected final String TEXT_49 = ", new ";
  protected final String TEXT_50 = "());";
  protected final String TEXT_51 = NL + "\t}" + NL;
  protected final String TEXT_52 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_53 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_54 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_55 = " nextChild = (";
  protected final String TEXT_56 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_57 = ".getVisualID(nextChild) == ";
  protected final String TEXT_58 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_59 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_60 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_61 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_62 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_63 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_64 = NL;
  protected final String TEXT_65 = "if (";
  protected final String TEXT_66 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_67 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_68 = " getLabelEditPart(";
  protected final String TEXT_69 = " req) {" + NL + "\t\t";
  protected final String TEXT_70 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_71 = " view = (";
  protected final String TEXT_72 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_73 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_74 = NL + "\t\t\t\tcase ";
  protected final String TEXT_75 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_76 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_78 = NL;
  protected final String TEXT_79 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_80 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_81 = " feature, ";
  protected final String TEXT_82 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_83 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL;
  protected final String TEXT_84 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_85 = NL;
  protected final String TEXT_86 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_87 = " domainModelRefresher = new ";
  protected final String TEXT_88 = "(this);" + NL;
  protected final String TEXT_89 = NL;
  protected final String TEXT_90 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_91 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_92 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_93 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_94 = NL;
  protected final String TEXT_95 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_96 = " externalRefreshers = new ";
  protected final String TEXT_97 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_98 = " getExternalRefreshers() {" + NL + "\t\treturn externalRefreshers;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addExternalRefresher(";
  protected final String TEXT_99 = ".ExternalRefresher externalRefresher) {" + NL + "\t\tif (externalRefresher != null && !externalRefreshers.contains(externalRefresher)) {" + NL + "\t\t\texternalRefreshers.add(externalRefresher);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeExternalRefresher(";
  protected final String TEXT_100 = ".ExternalRefresher externalRefresher) {" + NL + "\t\texternalRefreshers.remove(externalRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_101 = NL;
  protected final String TEXT_102 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_103 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_104 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_105 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_106 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_107 = NL;
  protected final String TEXT_108 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_109 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_110 = NL;
  protected final String TEXT_111 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_112 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_113 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_114 = " bendpoints = (";
  protected final String TEXT_115 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_116 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_117 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_118 = " figureConstraint = new ";
  protected final String TEXT_119 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_120 = " wbp = (";
  protected final String TEXT_121 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_122 = " rbp = new ";
  protected final String TEXT_123 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_124 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_125 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_126 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_127 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_128 = " result = primCreateFigure();" + NL + "\t\tmyDecorationManager = createDecorationManager(result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_129 = " createDecorationManager(";
  protected final String TEXT_130 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_131 = "(connection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_132 = " primCreateFigure() {";
  protected final String TEXT_133 = NL + "\t\treturn new ";
  protected final String TEXT_134 = "();";
  protected final String TEXT_135 = NL + "\t\treturn ";
  protected final String TEXT_136 = ";";
  protected final String TEXT_137 = NL + " \t\treturn new ";
  protected final String TEXT_138 = "();";
  protected final String TEXT_139 = NL + "\t}" + NL;
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = NL;
  protected final String TEXT_142 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_143 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_144 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramEdge(), ";
  protected final String TEXT_145 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_146 = NL;
  protected final String TEXT_147 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_148 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_149 = "()";
  protected final String TEXT_150 = " {" + NL + "\t\t\tprotected ";
  protected final String TEXT_151 = " getGraphicalEditPart() {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_152 = ".this;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_153 = ");";
  protected final String TEXT_154 = NL;
  protected final String TEXT_155 = "\t\tinstallEditPolicy(";
  protected final String TEXT_156 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_157 = "());";
  protected final String TEXT_158 = NL + "\t\t}" + NL;
  protected final String TEXT_159 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_160 = " createLabelTextDisplayer() {" + NL + "\t\t\t";
  protected final String TEXT_161 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelTextDisplayer();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.createLabelTextDisplayer();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_162 = " getImage() {" + NL + "\t\t\t";
  protected final String TEXT_163 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelIcon();" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_164 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_165 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_166 = " nextChild = (";
  protected final String TEXT_167 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_168 = ".getVisualID(nextChild) == ";
  protected final String TEXT_169 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_170 = ") ";
  protected final String TEXT_171 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_172 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_173 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_174 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_175 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenLink genLink = (GenLink) ((Object[]) argument)[0];
final GenCommonBase genElement = genLink;
GenDiagram genDiagram = genLink.getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("TreeEditPartAdapter");

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    
importManager.emitPackageStatement(stringBuffer);
importManager.addImport("java.util.List");
importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_4);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.AbstractConnectionEditPart"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart"));
    stringBuffer.append(TEXT_9);
    {
GenCommonBase genCommonBase = genLink;
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_12);
    }
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_26);
    
GenLinkLabel primaryLabel = null;
for(Iterator it = genLink.getLabels().iterator(); it.hasNext(); ) {
	GenLinkLabel next = (GenLinkLabel)it.next();
	if (!next.isReadOnly()) {
		primaryLabel = next;
		break;
	}
}

    stringBuffer.append(TEXT_27);
    stringBuffer.append(TEXT_28);
    
{
	/*See xpt::diagram::policies::ClassNames.ext#getComponentEditPolicyClassName(GenCommonBase)*/
	String editPolicyClassName = genElement.getEditPartClassName();
	if (editPolicyClassName.endsWith(GenCommonBase.EDIT_PART_SUFFIX)) {
		editPolicyClassName = editPolicyClassName.substring(0, editPolicyClassName.length() - GenCommonBase.EDIT_PART_SUFFIX.length());
	}
	editPolicyClassName += "ComponentEditPolicy";

    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPoliciesPackageName() + "." + editPolicyClassName));
    stringBuffer.append(TEXT_31);
    
}

    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ConnectionEndpointEditPolicy"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.BendpointEditPolicy"));
    stringBuffer.append(TEXT_36);
    
if (primaryLabel != null) {

    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.DelegatingDirectEditPolicy"));
    stringBuffer.append(TEXT_39);
    
}

    {
GenCommonBase genCommonBase = genLink;
    stringBuffer.append(TEXT_40);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_41);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_43);
    }
    stringBuffer.append(TEXT_44);
    
{
	List<OpenDiagramBehaviour> behaviours = genCommonBase.getBehaviour(OpenDiagramBehaviour.class);
	for(int i = 0, iMax = behaviours.size(); i < iMax; i++) {
	/*doesn't make sense to install more than one policy for the same role*/ 
		OpenDiagramBehaviour next = behaviours.get(i);

    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.EditPolicyRoles"));
    stringBuffer.append(TEXT_46);
    if (i > 0) {
    stringBuffer.append(TEXT_47);
    stringBuffer.append(i+1);
    stringBuffer.append(TEXT_48);
    }
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName(genCommonBase.getBehaviour(OpenDiagramBehaviour.class).get(0).getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_50);
    
	}
}

    }
    stringBuffer.append(TEXT_51);
    
if (primaryLabel != null) {

    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(TEXT_64);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_73);
    
		for (Iterator it = genLink.getLabels().iterator(); it.hasNext(); ) {
			GenLinkLabel genLabel = (GenLinkLabel) it.next();
			if (genLabel.isReadOnly()) {
				continue;
			}

    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName(genLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_75);
    
		}

    stringBuffer.append(TEXT_76);
    
}	//if (primaryLabel != null, i.e., there are editable labels)

    stringBuffer.append(TEXT_77);
    stringBuffer.append(TEXT_78);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.TreeEditPart"));
    stringBuffer.append(TEXT_83);
    
if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
	//Otherwise, there's no element associated with the element

    stringBuffer.append(TEXT_84);
    stringBuffer.append(TEXT_85);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_88);
    
}

    stringBuffer.append(TEXT_89);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(TEXT_94);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(TEXT_101);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(TEXT_107);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(TEXT_110);
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.BendpointConnectionRouter"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.ConnectionDecorationManager"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
    stringBuffer.append(TEXT_132);
    
Viewmap viewmap = genLink.getViewmap();
if (viewmap instanceof FigureViewmap) {
	String figureQualifiedClassName = null;
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.gmf.runtime.draw2d.PolylineConnection";
	}

    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
    stringBuffer.append(TEXT_134);
    } // instanceof FigureViewmap
	else if (viewmap instanceof SnippetViewmap) {
    stringBuffer.append(TEXT_135);
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_136);
    } // instanceof SnippetViewmap 
	else if (viewmap instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_137);
    stringBuffer.append(((InnerClassViewmap) viewmap).getClassName());
    stringBuffer.append(TEXT_138);
    }
    stringBuffer.append(TEXT_139);
    
if (genLink.getViewmap() instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) genLink.getViewmap()).getClassBody();

    stringBuffer.append(TEXT_140);
    stringBuffer.append(classBody);
    stringBuffer.append(TEXT_141);
    
if (classBody.indexOf("DPtoLP") != -1) {

    stringBuffer.append(TEXT_142);
    
}

    
}

    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(TEXT_146);
    
{
	/*See xpt::diagram::policies::ClassNames.ext#getComponentEditPolicyClassName(GenCommonBase)*/
	String editPolicyClassName = genElement.getEditPartClassName();
	if (editPolicyClassName.endsWith(GenCommonBase.EDIT_PART_SUFFIX)) {
		editPolicyClassName = editPolicyClassName.substring(0, editPolicyClassName.length() - GenCommonBase.EDIT_PART_SUFFIX.length());
	}
	editPolicyClassName += "ComponentEditPolicy";

    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPoliciesPackageName() + "." + editPolicyClassName));
    stringBuffer.append(TEXT_149);
    
		if (genElement instanceof GenNode) {
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(genElement.getEditPartClassName());
    stringBuffer.append(TEXT_152);
    }
    stringBuffer.append(TEXT_153);
    
}

    
if (primaryLabel != null && genLink.getModelFacet() instanceof TypeLinkModelFacet) {

    stringBuffer.append(TEXT_154);
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.LabelDirectEditPolicy"));
    stringBuffer.append(TEXT_157);
    
}

    stringBuffer.append(TEXT_158);
    
if (primaryLabel != null) {

    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_171);
    
}

    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_174);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_175);
    return stringBuffer.toString();
  }
}
@


1.26
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.25
log
@[176362]: ClassCastException while selecting items in tree outline of the generated diagram + test to reproduce;
ComponentEditPolicy.xpt: replace int constant with a reference thereto to facilitate readability
@
text
@d28 138
a165 138
  protected final String TEXT_8 = " {";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_11 = ";";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_13 = " myDecorationManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_14 = "(";
  protected final String TEXT_15 = " view) {" + NL + "\t\tassert view instanceof ";
  protected final String TEXT_16 = ";" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_17 = " getDiagramEdge() {" + NL + "\t\treturn (";
  protected final String TEXT_18 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_19 = " getDecorationManager() {" + NL + "\t\treturn myDecorationManager;" + NL + "\t}" + NL;
  protected final String TEXT_20 = NL;
  protected final String TEXT_21 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_22 = " view = (";
  protected final String TEXT_23 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_24 = " view = (";
  protected final String TEXT_25 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_29 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_30 = "());";
  protected final String TEXT_31 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_32 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_33 = "());" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_34 = ".CONNECTION_BENDPOINTS_ROLE, new ";
  protected final String TEXT_35 = "());";
  protected final String TEXT_36 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_37 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_38 = "());";
  protected final String TEXT_39 = NL;
  protected final String TEXT_40 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_41 = "\", new ";
  protected final String TEXT_42 = "()); //$NON-NLS-1$";
  protected final String TEXT_43 = NL;
  protected final String TEXT_44 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_45 = ".OPEN_ROLE";
  protected final String TEXT_46 = " + \"";
  protected final String TEXT_47 = "\" ";
  protected final String TEXT_48 = ", new ";
  protected final String TEXT_49 = "());";
  protected final String TEXT_50 = NL + "\t}" + NL;
  protected final String TEXT_51 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_52 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_53 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_54 = " nextChild = (";
  protected final String TEXT_55 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_56 = ".getVisualID(nextChild) == ";
  protected final String TEXT_57 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_58 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_59 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_60 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_61 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_62 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_63 = NL;
  protected final String TEXT_64 = "if (";
  protected final String TEXT_65 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_66 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_67 = " getLabelEditPart(";
  protected final String TEXT_68 = " req) {" + NL + "\t\t";
  protected final String TEXT_69 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_70 = " view = (";
  protected final String TEXT_71 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_72 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_73 = NL + "\t\t\t\tcase ";
  protected final String TEXT_74 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_75 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_76 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_79 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_80 = " feature, ";
  protected final String TEXT_81 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_82 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL;
  protected final String TEXT_83 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_86 = " domainModelRefresher = new ";
  protected final String TEXT_87 = "(this);" + NL;
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_90 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_91 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_92 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_93 = NL;
  protected final String TEXT_94 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_95 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_96 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_97 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_98 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_99 = NL;
  protected final String TEXT_100 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_101 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_102 = NL;
  protected final String TEXT_103 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_104 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_105 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_106 = " bendpoints = (";
  protected final String TEXT_107 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_108 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_109 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_110 = " figureConstraint = new ";
  protected final String TEXT_111 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_112 = " wbp = (";
  protected final String TEXT_113 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_114 = " rbp = new ";
  protected final String TEXT_115 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_116 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_117 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_118 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_119 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_120 = " result = primCreateFigure();" + NL + "\t\tmyDecorationManager = createDecorationManager(result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_121 = " createDecorationManager(";
  protected final String TEXT_122 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_123 = "(connection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_124 = " primCreateFigure() {";
  protected final String TEXT_125 = NL + "\t\treturn new ";
  protected final String TEXT_126 = "();";
  protected final String TEXT_127 = NL + "\t\treturn ";
  protected final String TEXT_128 = ";";
  protected final String TEXT_129 = NL + " \t\treturn new ";
  protected final String TEXT_130 = "();";
  protected final String TEXT_131 = NL + "\t}" + NL;
  protected final String TEXT_132 = NL;
  protected final String TEXT_133 = NL;
  protected final String TEXT_134 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_135 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_136 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramEdge(), ";
  protected final String TEXT_137 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_140 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_141 = "()";
  protected final String TEXT_142 = " {" + NL + "\t\t\tprotected ";
  protected final String TEXT_143 = " getGraphicalEditPart() {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_144 = ".this;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_145 = ");";
d167 29
a195 100
  protected final String TEXT_147 = "\t\tinstallEditPolicy(";
  protected final String TEXT_148 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_149 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_150 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_151 = NL;
  protected final String TEXT_152 = "\t\t\t\t\tprotected ";
  protected final String TEXT_153 = " getDirectEditCommand(";
  protected final String TEXT_154 = " request) {";
  protected final String TEXT_155 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_156 = ".INSTANCE;";
  protected final String TEXT_157 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_158 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_159 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_160 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_161 = "(";
  protected final String TEXT_162 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_163 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_164 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_165 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_166 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_167 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_168 = " editingDomain = ";
  protected final String TEXT_169 = ".getEditingDomain(";
  protected final String TEXT_170 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_171 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_172 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_173 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_174 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_175 = " createDomainModelCommand(";
  protected final String TEXT_176 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_177 = " element = ";
  protected final String TEXT_178 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_179 = " result = new ";
  protected final String TEXT_180 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_181 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_182 = " ";
  protected final String TEXT_183 = "feature = (";
  protected final String TEXT_184 = ") ";
  protected final String TEXT_185 = ".eINSTANCE.get";
  protected final String TEXT_186 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_187 = ".parseValue(feature, values[";
  protected final String TEXT_188 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_189 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_190 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_191 = " ";
  protected final String TEXT_192 = "values = new ";
  protected final String TEXT_193 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_194 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_195 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_196 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_197 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_198 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_199 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_200 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_201 = NL + "\t\t\t\t});";
  protected final String TEXT_202 = NL + "\t\t}" + NL;
  protected final String TEXT_203 = NL;
  protected final String TEXT_204 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_205 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_206 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_207 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_208 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_209 = "(this, ";
  protected final String TEXT_210 = ".class, new ";
  protected final String TEXT_211 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_212 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_213 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_214 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_215 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_216 = NL;
  protected final String TEXT_217 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_218 = NL;
  protected final String TEXT_219 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_220 = " domainModelRefresher = new ";
  protected final String TEXT_221 = "(this);" + NL;
  protected final String TEXT_222 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_223 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_224 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_225 = ".eINSTANCE.get";
  protected final String TEXT_226 = "(), labelRefresher);";
  protected final String TEXT_227 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_228 = ".eINSTANCE.get";
  protected final String TEXT_229 = "(), labelRefresher);";
  protected final String TEXT_230 = NL + "\t\t}" + NL;
  protected final String TEXT_231 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_232 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_233 = " getImage() {" + NL + "\t\t\t";
  protected final String TEXT_234 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelIcon();" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_235 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_236 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_237 = " nextChild = (";
  protected final String TEXT_238 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_239 = ".getVisualID(nextChild) == ";
  protected final String TEXT_240 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_241 = ") ";
  protected final String TEXT_242 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_243 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_244 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_245 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_246 = NL;
d228 2
d231 1
a231 1
    stringBuffer.append(TEXT_8);
a233 1
    stringBuffer.append(TEXT_9);
d235 1
d237 1
a237 1
    stringBuffer.append(TEXT_11);
d239 1
a239 1
    stringBuffer.append(TEXT_12);
d241 1
a241 1
    stringBuffer.append(TEXT_13);
d243 1
a243 1
    stringBuffer.append(TEXT_14);
a244 2
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d250 2
a252 1
    stringBuffer.append(TEXT_19);
a254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d262 2
a273 1
    stringBuffer.append(TEXT_26);
d275 1
d285 1
a285 1
    stringBuffer.append(TEXT_28);
d287 1
a287 1
    stringBuffer.append(TEXT_29);
d289 1
a289 1
    stringBuffer.append(TEXT_30);
d293 1
a293 1
    stringBuffer.append(TEXT_31);
d295 1
a295 1
    stringBuffer.append(TEXT_32);
d297 1
a297 1
    stringBuffer.append(TEXT_33);
d299 1
a299 1
    stringBuffer.append(TEXT_34);
d301 1
a301 1
    stringBuffer.append(TEXT_35);
d305 1
a305 1
    stringBuffer.append(TEXT_36);
d307 1
a307 1
    stringBuffer.append(TEXT_37);
d309 1
a309 1
    stringBuffer.append(TEXT_38);
d315 1
a315 1
    stringBuffer.append(TEXT_39);
d319 1
a319 1
    stringBuffer.append(TEXT_40);
d321 1
a321 1
    stringBuffer.append(TEXT_41);
d323 1
a323 1
    stringBuffer.append(TEXT_42);
d325 1
a325 1
    stringBuffer.append(TEXT_43);
d333 1
a333 1
    stringBuffer.append(TEXT_44);
d335 1
a335 1
    stringBuffer.append(TEXT_45);
d337 1
a337 1
    stringBuffer.append(TEXT_46);
d339 1
a339 1
    stringBuffer.append(TEXT_47);
d341 1
a341 1
    stringBuffer.append(TEXT_48);
d343 1
a343 1
    stringBuffer.append(TEXT_49);
d349 1
a349 1
    stringBuffer.append(TEXT_50);
d353 1
a353 1
    stringBuffer.append(TEXT_51);
d355 1
a355 1
    stringBuffer.append(TEXT_52);
a356 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d360 2
d363 1
a363 1
    stringBuffer.append(TEXT_56);
d365 1
a365 1
    stringBuffer.append(TEXT_57);
d367 1
a367 1
    stringBuffer.append(TEXT_58);
d369 1
a369 1
    stringBuffer.append(TEXT_59);
a370 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d374 1
d377 1
d379 1
a379 1
    stringBuffer.append(TEXT_65);
d381 1
a381 1
    stringBuffer.append(TEXT_66);
d383 1
a383 1
    stringBuffer.append(TEXT_67);
d385 1
a385 1
    stringBuffer.append(TEXT_68);
a386 2
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d390 2
d393 1
a393 1
    stringBuffer.append(TEXT_72);
d401 1
a401 1
    stringBuffer.append(TEXT_73);
d403 1
a403 1
    stringBuffer.append(TEXT_74);
d407 1
a407 1
    stringBuffer.append(TEXT_75);
a410 1
    stringBuffer.append(TEXT_76);
d413 1
d415 1
a415 1
    stringBuffer.append(TEXT_79);
d417 1
a417 1
    stringBuffer.append(TEXT_80);
d419 1
a419 1
    stringBuffer.append(TEXT_81);
d421 1
a421 1
    stringBuffer.append(TEXT_82);
a425 1
    stringBuffer.append(TEXT_83);
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d431 2
a435 1
    stringBuffer.append(TEXT_88);
a436 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d442 1
a444 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d446 1
a446 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d448 1
a448 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d450 1
a450 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d452 1
d454 1
a455 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d458 1
d464 12
d477 1
a477 1
    stringBuffer.append(TEXT_106);
d479 1
a479 1
    stringBuffer.append(TEXT_107);
d481 1
a481 1
    stringBuffer.append(TEXT_108);
d483 1
a483 1
    stringBuffer.append(TEXT_109);
d485 1
a485 1
    stringBuffer.append(TEXT_110);
d487 1
a487 1
    stringBuffer.append(TEXT_111);
d489 1
a489 1
    stringBuffer.append(TEXT_112);
d491 1
a491 1
    stringBuffer.append(TEXT_113);
d493 1
a493 1
    stringBuffer.append(TEXT_114);
d495 1
a495 1
    stringBuffer.append(TEXT_115);
d497 1
a497 1
    stringBuffer.append(TEXT_116);
d499 1
a499 1
    stringBuffer.append(TEXT_117);
d501 1
a501 1
    stringBuffer.append(TEXT_118);
d503 1
a503 1
    stringBuffer.append(TEXT_119);
d505 1
a505 1
    stringBuffer.append(TEXT_120);
d507 1
a507 1
    stringBuffer.append(TEXT_121);
d509 1
a509 1
    stringBuffer.append(TEXT_122);
d511 1
a511 1
    stringBuffer.append(TEXT_123);
d513 1
a513 1
    stringBuffer.append(TEXT_124);
d523 1
a523 1
    stringBuffer.append(TEXT_125);
d525 1
a525 1
    stringBuffer.append(TEXT_126);
d528 1
a528 1
    stringBuffer.append(TEXT_127);
d530 1
a530 1
    stringBuffer.append(TEXT_128);
d533 1
a533 1
    stringBuffer.append(TEXT_129);
d535 1
a535 1
    stringBuffer.append(TEXT_130);
d537 1
a537 1
    stringBuffer.append(TEXT_131);
d542 1
a542 1
    stringBuffer.append(TEXT_132);
d544 1
a544 1
    stringBuffer.append(TEXT_133);
d548 1
a548 1
    stringBuffer.append(TEXT_134);
d555 1
a555 1
    stringBuffer.append(TEXT_135);
d557 1
a557 1
    stringBuffer.append(TEXT_136);
d559 2
a560 2
    stringBuffer.append(TEXT_137);
    stringBuffer.append(TEXT_138);
d570 1
a570 1
    stringBuffer.append(TEXT_139);
d572 1
a572 1
    stringBuffer.append(TEXT_140);
d574 1
a574 1
    stringBuffer.append(TEXT_141);
d577 1
a577 1
    stringBuffer.append(TEXT_142);
d579 1
a579 1
    stringBuffer.append(TEXT_143);
d581 1
a581 1
    stringBuffer.append(TEXT_144);
d583 1
a583 1
    stringBuffer.append(TEXT_145);
a588 6
		String editPatternCode = importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()) + ".EDIT_PATTERN";
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		String primaryView = "getDiagramEdge()";
		String resolvedSemanticElement = "(" + importManager.getImportedName(typeLinkModelFacet.getMetaClass().getQualifiedInterfaceName()) + ") getDiagramEdge().getElement()";
		LabelModelFacet labelModelFacet = primaryLabel.getModelFacet();
		GenClass underlyingMetaClass = typeLinkModelFacet.getMetaClass();
a589 13
    stringBuffer.append(TEXT_146);
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
a590 3
    
if (labelModelFacet instanceof FeatureLabelModelFacet == false) {

d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d594 2
d597 1
a597 3
} else {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = featureLabelModelFacet.getMetaFeatures();
a598 2
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d601 1
a601 1
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {
d604 1
a604 3
    
	}

d606 1
a606 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d608 1
a608 1
    stringBuffer.append(editPatternCode);
d610 1
a610 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d612 1
a612 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d616 1
a616 3
    
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {

d618 1
a618 3
    
	}

d620 1
a620 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d622 1
a622 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d624 1
a624 1
    stringBuffer.append(primaryView);
d626 1
a626 1
    stringBuffer.append(metaFeatures.size());
a627 74
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_179);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_180);
    
	boolean haveDeclaredValues = false;
	for(int i = 0; i < metaFeatures.size(); i++) {
		GenFeature nextFeatureToSet = (GenFeature) metaFeatures.get(i);
		EStructuralFeature nextEcoreFeature = nextFeatureToSet.getEcoreFeature();

    stringBuffer.append(TEXT_181);
    if (i == 0) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_182);
    }
    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_184);
    stringBuffer.append(importManager.getImportedName(nextFeatureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_185);
    stringBuffer.append(nextFeatureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_186);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_187);
    stringBuffer.append(i);
    stringBuffer.append(TEXT_188);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_189);
    
		if (nextEcoreFeature.isMany()) {

    stringBuffer.append(TEXT_190);
    if (!haveDeclaredValues) { haveDeclaredValues = true;
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_191);
    }
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_193);
    stringBuffer.append(nextFeatureToSet.getAccessorName());
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_196);
    
		} else {

    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_199);
    
		}

    
	}

    stringBuffer.append(TEXT_200);
d631 1
a631 119
    stringBuffer.append(TEXT_201);
    
}

    stringBuffer.append(TEXT_202);
    
if (primaryLabel != null && genLink.getModelFacet() instanceof TypeLinkModelFacet) {

    stringBuffer.append(TEXT_203);
    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
    stringBuffer.append(TEXT_210);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_215);
    
}

    stringBuffer.append(TEXT_216);
    
if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
	//Otherwise, there's no element associated with the element

    stringBuffer.append(TEXT_217);
    stringBuffer.append(TEXT_218);
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_221);
    
}

    stringBuffer.append(TEXT_222);
    
if (genLink.getModelFacet() instanceof TypeLinkModelFacet || primaryLabel != null) {
	//Otherwise, an empty string will be returned, and it will not change no matter what.

    stringBuffer.append(TEXT_223);
    
	if (primaryLabel != null) {
		LabelModelFacet labelModelFacet = primaryLabel.getModelFacet();
		if (labelModelFacet instanceof FeatureLabelModelFacet) {
			FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
			for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
				GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_225);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_226);
    
			}
		}
	} else {
		GenClass metaClass = ((TypeLinkModelFacet) genLink.getModelFacet()).getMetaClass();
		List labelNotifyFeatures = metaClass.getLabelNotifyFeatures();
		for(Iterator it = labelNotifyFeatures.iterator(); it.hasNext(); ) {
			GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_228);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_229);
    
		}
	}
}

    stringBuffer.append(TEXT_230);
    
if (primaryLabel != null) {

    stringBuffer.append(TEXT_231);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_233);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_236);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_237);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_239);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_240);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_241);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_242);
    
}

    stringBuffer.append(TEXT_243);
d633 1
a633 1
    stringBuffer.append(TEXT_244);
d635 1
a635 1
    stringBuffer.append(TEXT_245);
d637 1
a637 1
    stringBuffer.append(TEXT_246);
@


1.24
log
@Images should be reused across the editparts that represent same model element types (prevent SWTErrors when opening huge diagrams)
@
text
@d161 106
a266 102
  protected final String TEXT_141 = "());";
  protected final String TEXT_142 = NL;
  protected final String TEXT_143 = "\t\tinstallEditPolicy(";
  protected final String TEXT_144 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_145 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_146 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_147 = NL;
  protected final String TEXT_148 = "\t\t\t\t\tprotected ";
  protected final String TEXT_149 = " getDirectEditCommand(";
  protected final String TEXT_150 = " request) {";
  protected final String TEXT_151 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_152 = ".INSTANCE;";
  protected final String TEXT_153 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_154 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_155 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_156 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_157 = "(";
  protected final String TEXT_158 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_159 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_160 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_161 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_162 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_163 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_164 = " editingDomain = ";
  protected final String TEXT_165 = ".getEditingDomain(";
  protected final String TEXT_166 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_167 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_168 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_169 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_170 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_171 = " createDomainModelCommand(";
  protected final String TEXT_172 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_173 = " element = ";
  protected final String TEXT_174 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_175 = " result = new ";
  protected final String TEXT_176 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_177 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_178 = " ";
  protected final String TEXT_179 = "feature = (";
  protected final String TEXT_180 = ") ";
  protected final String TEXT_181 = ".eINSTANCE.get";
  protected final String TEXT_182 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_183 = ".parseValue(feature, values[";
  protected final String TEXT_184 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_185 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_186 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_187 = " ";
  protected final String TEXT_188 = "values = new ";
  protected final String TEXT_189 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_190 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_191 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_192 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_193 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_194 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_195 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_196 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_197 = NL + "\t\t\t\t});";
  protected final String TEXT_198 = NL + "\t\t}" + NL;
  protected final String TEXT_199 = NL;
  protected final String TEXT_200 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_201 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_202 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_203 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_204 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_205 = "(this, ";
  protected final String TEXT_206 = ".class, new ";
  protected final String TEXT_207 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_208 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_209 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_210 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_211 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_212 = NL;
  protected final String TEXT_213 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_216 = " domainModelRefresher = new ";
  protected final String TEXT_217 = "(this);" + NL;
  protected final String TEXT_218 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_219 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_220 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_221 = ".eINSTANCE.get";
  protected final String TEXT_222 = "(), labelRefresher);";
  protected final String TEXT_223 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_224 = ".eINSTANCE.get";
  protected final String TEXT_225 = "(), labelRefresher);";
  protected final String TEXT_226 = NL + "\t\t}" + NL;
  protected final String TEXT_227 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_228 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_229 = " getImage() {" + NL + "\t\t\t";
  protected final String TEXT_230 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelIcon();" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_231 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_232 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_233 = " nextChild = (";
  protected final String TEXT_234 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_235 = ".getVisualID(nextChild) == ";
  protected final String TEXT_236 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_237 = ") ";
  protected final String TEXT_238 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_239 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_240 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_241 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_242 = NL;
d633 9
a652 7
    stringBuffer.append(TEXT_142);
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d655 1
d657 1
a657 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d661 6
d670 1
a670 1
    stringBuffer.append(TEXT_151);
d672 1
a672 1
    stringBuffer.append(TEXT_152);
d678 1
a678 1
    stringBuffer.append(TEXT_153);
d680 1
a680 1
    stringBuffer.append(TEXT_154);
d684 1
a684 1
    stringBuffer.append(TEXT_155);
d688 1
a688 1
    stringBuffer.append(TEXT_156);
d690 1
a690 1
    stringBuffer.append(TEXT_157);
d692 1
a692 1
    stringBuffer.append(TEXT_158);
d694 1
a694 1
    stringBuffer.append(TEXT_159);
d696 1
a696 1
    stringBuffer.append(TEXT_160);
d698 1
a698 1
    stringBuffer.append(TEXT_161);
d702 1
a702 1
    stringBuffer.append(TEXT_162);
d706 1
a706 1
    stringBuffer.append(TEXT_163);
d708 1
a708 1
    stringBuffer.append(TEXT_164);
d710 1
a710 1
    stringBuffer.append(TEXT_165);
d712 1
a712 1
    stringBuffer.append(TEXT_166);
d714 1
a714 1
    stringBuffer.append(TEXT_167);
d716 1
a716 1
    stringBuffer.append(TEXT_168);
d718 1
a718 1
    stringBuffer.append(TEXT_169);
d720 1
a720 1
    stringBuffer.append(TEXT_170);
d722 1
a722 1
    stringBuffer.append(TEXT_171);
d724 1
a724 1
    stringBuffer.append(TEXT_172);
d726 1
a726 1
    stringBuffer.append(TEXT_173);
d728 1
a728 1
    stringBuffer.append(TEXT_174);
d730 1
a730 1
    stringBuffer.append(TEXT_175);
d732 1
a732 1
    stringBuffer.append(TEXT_176);
d739 1
a739 1
    stringBuffer.append(TEXT_177);
d742 1
a742 1
    stringBuffer.append(TEXT_178);
d744 1
a744 1
    stringBuffer.append(TEXT_179);
d746 1
a746 1
    stringBuffer.append(TEXT_180);
d748 1
a748 1
    stringBuffer.append(TEXT_181);
d750 1
a750 1
    stringBuffer.append(TEXT_182);
d752 1
a752 1
    stringBuffer.append(TEXT_183);
d754 1
a754 1
    stringBuffer.append(TEXT_184);
d756 1
a756 1
    stringBuffer.append(TEXT_185);
d760 1
a760 1
    stringBuffer.append(TEXT_186);
d763 1
a763 1
    stringBuffer.append(TEXT_187);
d765 1
a765 1
    stringBuffer.append(TEXT_188);
d767 1
a767 1
    stringBuffer.append(TEXT_189);
d769 1
a769 1
    stringBuffer.append(TEXT_190);
d771 1
a771 1
    stringBuffer.append(TEXT_191);
d773 1
a773 1
    stringBuffer.append(TEXT_192);
d777 1
a777 1
    stringBuffer.append(TEXT_193);
d779 1
a779 1
    stringBuffer.append(TEXT_194);
d781 1
a781 1
    stringBuffer.append(TEXT_195);
d788 1
a788 1
    stringBuffer.append(TEXT_196);
d792 1
a792 1
    stringBuffer.append(TEXT_197);
d796 1
a796 1
    stringBuffer.append(TEXT_198);
d800 2
a801 2
    stringBuffer.append(TEXT_199);
    stringBuffer.append(TEXT_200);
d803 1
a803 1
    stringBuffer.append(TEXT_201);
d805 1
a805 1
    stringBuffer.append(TEXT_202);
d807 1
a807 1
    stringBuffer.append(TEXT_203);
d809 1
a809 1
    stringBuffer.append(TEXT_204);
d811 1
a811 1
    stringBuffer.append(TEXT_205);
d813 1
a813 1
    stringBuffer.append(TEXT_206);
d815 1
a815 1
    stringBuffer.append(TEXT_207);
d817 1
a817 1
    stringBuffer.append(TEXT_208);
d819 1
a819 1
    stringBuffer.append(TEXT_209);
d821 1
a821 1
    stringBuffer.append(TEXT_210);
d823 1
a823 1
    stringBuffer.append(TEXT_211);
d827 1
a827 1
    stringBuffer.append(TEXT_212);
d832 3
a834 3
    stringBuffer.append(TEXT_213);
    stringBuffer.append(TEXT_214);
    stringBuffer.append(TEXT_215);
d836 1
a836 1
    stringBuffer.append(TEXT_216);
d838 1
a838 1
    stringBuffer.append(TEXT_217);
d842 1
a842 1
    stringBuffer.append(TEXT_218);
d847 1
a847 1
    stringBuffer.append(TEXT_219);
d856 1
a856 1
    stringBuffer.append(TEXT_220);
d858 1
a858 1
    stringBuffer.append(TEXT_221);
d860 1
a860 1
    stringBuffer.append(TEXT_222);
d870 1
a870 1
    stringBuffer.append(TEXT_223);
d872 1
a872 1
    stringBuffer.append(TEXT_224);
d874 1
a874 1
    stringBuffer.append(TEXT_225);
d880 1
a880 1
    stringBuffer.append(TEXT_226);
d884 1
a884 1
    stringBuffer.append(TEXT_227);
d886 1
a886 1
    stringBuffer.append(TEXT_228);
d888 1
a888 1
    stringBuffer.append(TEXT_229);
d890 1
a890 1
    stringBuffer.append(TEXT_230);
d892 1
a892 1
    stringBuffer.append(TEXT_231);
d894 1
a894 1
    stringBuffer.append(TEXT_232);
d896 1
a896 1
    stringBuffer.append(TEXT_233);
d898 1
a898 1
    stringBuffer.append(TEXT_234);
d900 1
a900 1
    stringBuffer.append(TEXT_235);
d902 1
a902 1
    stringBuffer.append(TEXT_236);
d904 1
a904 1
    stringBuffer.append(TEXT_237);
d906 1
a906 1
    stringBuffer.append(TEXT_238);
d910 1
a910 1
    stringBuffer.append(TEXT_239);
d912 1
a912 1
    stringBuffer.append(TEXT_240);
d914 1
a914 1
    stringBuffer.append(TEXT_241);
d916 1
a916 1
    stringBuffer.append(TEXT_242);
@


1.23
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@d248 15
a262 13
  protected final String TEXT_228 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_229 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_230 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_231 = " nextChild = (";
  protected final String TEXT_232 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_233 = ".getVisualID(nextChild) == ";
  protected final String TEXT_234 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_235 = ") ";
  protected final String TEXT_236 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_237 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_238 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_239 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_240 = NL;
d874 4
d879 1
a879 1
    stringBuffer.append(TEXT_229);
d881 1
a881 1
    stringBuffer.append(TEXT_230);
d883 1
a883 1
    stringBuffer.append(TEXT_231);
d885 1
a885 1
    stringBuffer.append(TEXT_232);
d887 1
a887 1
    stringBuffer.append(TEXT_233);
d889 1
a889 1
    stringBuffer.append(TEXT_234);
d891 1
a891 1
    stringBuffer.append(TEXT_235);
d893 1
a893 1
    stringBuffer.append(TEXT_236);
d897 1
a897 1
    stringBuffer.append(TEXT_237);
d899 1
a899 1
    stringBuffer.append(TEXT_238);
d901 1
a901 1
    stringBuffer.append(TEXT_239);
d903 1
a903 1
    stringBuffer.append(TEXT_240);
@


1.22
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@d48 1
a48 1
  protected final String TEXT_28 = "\t\tinstallEditPolicy(";
d50 9
a58 9
  protected final String TEXT_30 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_31 = " createDeleteCommand(";
  protected final String TEXT_32 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_33 = " editingDomain = ";
  protected final String TEXT_34 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_35 = " cc = new ";
  protected final String TEXT_36 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_37 = "(source.getDiagram(), edgeToRemove));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_38 = "(editingDomain, cc);" + NL + "\t\t\t}";
d60 102
a161 102
  protected final String TEXT_40 = NL + "\t\t\tprivate ";
  protected final String TEXT_41 = " createDomainModelRemoveCommand(";
  protected final String TEXT_42 = " editingDomain) {";
  protected final String TEXT_43 = NL + "\t\t\t\t";
  protected final String TEXT_44 = " result = new ";
  protected final String TEXT_45 = "();";
  protected final String TEXT_46 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_47 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_48 = ".getElement().eContainer(), ";
  protected final String TEXT_49 = ".eINSTANCE.get";
  protected final String TEXT_50 = "(), ";
  protected final String TEXT_51 = ".getElement()));";
  protected final String TEXT_52 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_53 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_54 = ".getElement().eContainer(), ";
  protected final String TEXT_55 = ".eINSTANCE.get";
  protected final String TEXT_56 = "(), ";
  protected final String TEXT_57 = ".UNSET_VALUE));";
  protected final String TEXT_58 = NL + "\t\t\t\treturn ";
  protected final String TEXT_59 = ".INSTANCE;";
  protected final String TEXT_60 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_61 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_62 = ".getElement().eContainer(), ";
  protected final String TEXT_63 = ".eINSTANCE.get";
  protected final String TEXT_64 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_65 = ".getElement()));";
  protected final String TEXT_66 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_67 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_68 = ".getElement().eContainer(), ";
  protected final String TEXT_69 = ".eINSTANCE.get";
  protected final String TEXT_70 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_71 = ".UNSET_VALUE));";
  protected final String TEXT_72 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_73 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_74 = ".getElement(), ";
  protected final String TEXT_75 = ".eINSTANCE.get";
  protected final String TEXT_76 = "(), ";
  protected final String TEXT_77 = ".getSource().getElement()));";
  protected final String TEXT_78 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_79 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_80 = ".getElement(), ";
  protected final String TEXT_81 = ".eINSTANCE.get";
  protected final String TEXT_82 = "(), ";
  protected final String TEXT_83 = ".UNSET_VALUE));";
  protected final String TEXT_84 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_85 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_86 = ".getElement(), ";
  protected final String TEXT_87 = ".eINSTANCE.get";
  protected final String TEXT_88 = "(), ";
  protected final String TEXT_89 = ".getTarget().getElement()));";
  protected final String TEXT_90 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_91 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_92 = ".getElement(), ";
  protected final String TEXT_93 = ".eINSTANCE.get";
  protected final String TEXT_94 = "(), ";
  protected final String TEXT_95 = ".UNSET_VALUE));";
  protected final String TEXT_96 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_97 = NL + "\t\t\t\treturn ";
  protected final String TEXT_98 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_99 = ".getSource().getElement(), ";
  protected final String TEXT_100 = ".eINSTANCE.get";
  protected final String TEXT_101 = "(), ";
  protected final String TEXT_102 = ".getTarget().getElement());";
  protected final String TEXT_103 = NL + "\t\t\t\treturn ";
  protected final String TEXT_104 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_105 = ".getSource().getElement(), ";
  protected final String TEXT_106 = ".eINSTANCE.get";
  protected final String TEXT_107 = "(), ";
  protected final String TEXT_108 = ".UNSET_VALUE);";
  protected final String TEXT_109 = NL + "\t\t\t}";
  protected final String TEXT_110 = NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_111 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_112 = "());" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_113 = ".CONNECTION_BENDPOINTS_ROLE, new ";
  protected final String TEXT_114 = "());";
  protected final String TEXT_115 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_116 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_117 = "());";
  protected final String TEXT_118 = NL;
  protected final String TEXT_119 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_120 = "\", new ";
  protected final String TEXT_121 = "()); //$NON-NLS-1$";
  protected final String TEXT_122 = NL;
  protected final String TEXT_123 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_124 = ".OPEN_ROLE";
  protected final String TEXT_125 = " + \"";
  protected final String TEXT_126 = "\" ";
  protected final String TEXT_127 = ", new ";
  protected final String TEXT_128 = "());";
  protected final String TEXT_129 = NL + "\t}" + NL;
  protected final String TEXT_130 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_131 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_132 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_133 = " nextChild = (";
  protected final String TEXT_134 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_135 = ".getVisualID(nextChild) == ";
  protected final String TEXT_136 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_137 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_138 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_139 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_140 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_141 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
d163 69
a231 69
  protected final String TEXT_143 = "if (";
  protected final String TEXT_144 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_145 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_146 = " getLabelEditPart(";
  protected final String TEXT_147 = " req) {" + NL + "\t\t";
  protected final String TEXT_148 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_149 = " view = (";
  protected final String TEXT_150 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_151 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_152 = NL + "\t\t\t\tcase ";
  protected final String TEXT_153 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_154 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_155 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_158 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_159 = " feature, ";
  protected final String TEXT_160 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_161 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL;
  protected final String TEXT_162 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_163 = NL;
  protected final String TEXT_164 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_165 = " domainModelRefresher = new ";
  protected final String TEXT_166 = "(this);" + NL;
  protected final String TEXT_167 = NL;
  protected final String TEXT_168 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_169 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_170 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_171 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_172 = NL;
  protected final String TEXT_173 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_174 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_175 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_176 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_177 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_178 = NL;
  protected final String TEXT_179 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_180 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_181 = NL;
  protected final String TEXT_182 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_183 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_184 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_185 = " bendpoints = (";
  protected final String TEXT_186 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_187 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_188 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_189 = " figureConstraint = new ";
  protected final String TEXT_190 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_191 = " wbp = (";
  protected final String TEXT_192 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_193 = " rbp = new ";
  protected final String TEXT_194 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_195 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_196 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_197 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_198 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_199 = " result = primCreateFigure();" + NL + "\t\tmyDecorationManager = createDecorationManager(result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_200 = " createDecorationManager(";
  protected final String TEXT_201 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_202 = "(connection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_203 = " primCreateFigure() {";
  protected final String TEXT_204 = NL + "\t\treturn new ";
  protected final String TEXT_205 = "();";
  protected final String TEXT_206 = NL + "\t\treturn ";
  protected final String TEXT_207 = ";";
  protected final String TEXT_208 = NL + " \t\treturn new ";
  protected final String TEXT_209 = "();";
  protected final String TEXT_210 = NL + "\t}" + NL;
  protected final String TEXT_211 = NL;
d233 28
a260 187
  protected final String TEXT_213 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_214 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_215 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramEdge(), ";
  protected final String TEXT_216 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_217 = NL;
  protected final String TEXT_218 = "\t\tinstallEditPolicy(";
  protected final String TEXT_219 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_220 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_221 = " createDeleteCommand(";
  protected final String TEXT_222 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_223 = " editingDomain = ";
  protected final String TEXT_224 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_225 = " cc = new ";
  protected final String TEXT_226 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_227 = "(source.getDiagram(), edgeToRemove));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_228 = "(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_229 = NL;
  protected final String TEXT_230 = NL + "\t\t\tprivate ";
  protected final String TEXT_231 = " createDomainModelRemoveCommand(";
  protected final String TEXT_232 = " editingDomain) {";
  protected final String TEXT_233 = NL + "\t\t\t\t";
  protected final String TEXT_234 = " result = new ";
  protected final String TEXT_235 = "();";
  protected final String TEXT_236 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_237 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_238 = ".getElement().eContainer(), ";
  protected final String TEXT_239 = ".eINSTANCE.get";
  protected final String TEXT_240 = "(), ";
  protected final String TEXT_241 = ".getElement()));";
  protected final String TEXT_242 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_243 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_244 = ".getElement().eContainer(), ";
  protected final String TEXT_245 = ".eINSTANCE.get";
  protected final String TEXT_246 = "(), ";
  protected final String TEXT_247 = ".UNSET_VALUE));";
  protected final String TEXT_248 = NL + "\t\t\t\treturn ";
  protected final String TEXT_249 = ".INSTANCE;";
  protected final String TEXT_250 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_251 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_252 = ".getElement().eContainer(), ";
  protected final String TEXT_253 = ".eINSTANCE.get";
  protected final String TEXT_254 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_255 = ".getElement()));";
  protected final String TEXT_256 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_257 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_258 = ".getElement().eContainer(), ";
  protected final String TEXT_259 = ".eINSTANCE.get";
  protected final String TEXT_260 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_261 = ".UNSET_VALUE));";
  protected final String TEXT_262 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_263 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_264 = ".getElement(), ";
  protected final String TEXT_265 = ".eINSTANCE.get";
  protected final String TEXT_266 = "(), ";
  protected final String TEXT_267 = ".getSource().getElement()));";
  protected final String TEXT_268 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_269 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_270 = ".getElement(), ";
  protected final String TEXT_271 = ".eINSTANCE.get";
  protected final String TEXT_272 = "(), ";
  protected final String TEXT_273 = ".UNSET_VALUE));";
  protected final String TEXT_274 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_275 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_276 = ".getElement(), ";
  protected final String TEXT_277 = ".eINSTANCE.get";
  protected final String TEXT_278 = "(), ";
  protected final String TEXT_279 = ".getTarget().getElement()));";
  protected final String TEXT_280 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_281 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_282 = ".getElement(), ";
  protected final String TEXT_283 = ".eINSTANCE.get";
  protected final String TEXT_284 = "(), ";
  protected final String TEXT_285 = ".UNSET_VALUE));";
  protected final String TEXT_286 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_287 = NL + "\t\t\t\treturn ";
  protected final String TEXT_288 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_289 = ".getSource().getElement(), ";
  protected final String TEXT_290 = ".eINSTANCE.get";
  protected final String TEXT_291 = "(), ";
  protected final String TEXT_292 = ".getTarget().getElement());";
  protected final String TEXT_293 = NL + "\t\t\t\treturn ";
  protected final String TEXT_294 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_295 = ".getSource().getElement(), ";
  protected final String TEXT_296 = ".eINSTANCE.get";
  protected final String TEXT_297 = "(), ";
  protected final String TEXT_298 = ".UNSET_VALUE);";
  protected final String TEXT_299 = NL + "\t\t\t}";
  protected final String TEXT_300 = NL + "\t\t});";
  protected final String TEXT_301 = NL;
  protected final String TEXT_302 = "\t\tinstallEditPolicy(";
  protected final String TEXT_303 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_304 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_305 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_306 = NL;
  protected final String TEXT_307 = "\t\t\t\t\tprotected ";
  protected final String TEXT_308 = " getDirectEditCommand(";
  protected final String TEXT_309 = " request) {";
  protected final String TEXT_310 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_311 = ".INSTANCE;";
  protected final String TEXT_312 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_313 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_314 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_315 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_316 = "(";
  protected final String TEXT_317 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_318 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_319 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_320 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_321 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_322 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_323 = " editingDomain = ";
  protected final String TEXT_324 = ".getEditingDomain(";
  protected final String TEXT_325 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_326 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_327 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_328 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_329 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_330 = " createDomainModelCommand(";
  protected final String TEXT_331 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_332 = " element = ";
  protected final String TEXT_333 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_334 = " result = new ";
  protected final String TEXT_335 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_336 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_337 = " ";
  protected final String TEXT_338 = "feature = (";
  protected final String TEXT_339 = ") ";
  protected final String TEXT_340 = ".eINSTANCE.get";
  protected final String TEXT_341 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_342 = ".parseValue(feature, values[";
  protected final String TEXT_343 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_344 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_345 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_346 = " ";
  protected final String TEXT_347 = "values = new ";
  protected final String TEXT_348 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_349 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_350 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_351 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_352 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_353 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_354 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_355 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_356 = NL + "\t\t\t\t});";
  protected final String TEXT_357 = NL + "\t\t}" + NL;
  protected final String TEXT_358 = NL;
  protected final String TEXT_359 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_360 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_361 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_362 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_363 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_364 = "(this, ";
  protected final String TEXT_365 = ".class, new ";
  protected final String TEXT_366 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_367 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_368 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_369 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_370 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_371 = NL;
  protected final String TEXT_372 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_373 = NL;
  protected final String TEXT_374 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_375 = " domainModelRefresher = new ";
  protected final String TEXT_376 = "(this);" + NL;
  protected final String TEXT_377 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_378 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_379 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_380 = ".eINSTANCE.get";
  protected final String TEXT_381 = "(), labelRefresher);";
  protected final String TEXT_382 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_383 = ".eINSTANCE.get";
  protected final String TEXT_384 = "(), labelRefresher);";
  protected final String TEXT_385 = NL + "\t\t}" + NL;
  protected final String TEXT_386 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_387 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_388 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_389 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_390 = " nextChild = (";
  protected final String TEXT_391 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_392 = ".getVisualID(nextChild) == ";
  protected final String TEXT_393 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_394 = ") ";
  protected final String TEXT_395 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_396 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_397 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_398 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_399 = NL;
d267 1
d339 9
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
a352 16
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_38);
d354 1
a354 2
{
	String _edge = "getDiagramEdge()";
d356 1
a356 213
    stringBuffer.append(TEXT_39);
    
	//input: _edge : String

    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_42);
    
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();
		GenFeature targetFeature = modelFacet.getTargetMetaFeature();
		//See creation of links in NodeEditPart

		boolean removeSource = sourceFeature != null;
		boolean removeTarget = targetFeature != null;
		boolean removeChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
		if (containmentFeature != null) {
			if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
				EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
				if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeSource = false;
				}
			}
			if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
				EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
				if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeTarget = false;
				}
			}

    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_45);
    
			if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_50);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_51);
    
			} else {

    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_57);
    
			}
		} else {

    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_59);
    
		}
		if (removeChild) {
			if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_64);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_65);
    
			} else {

    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_71);
    
			}
		}
		if (removeSource) {
			if (sourceFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_76);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_77);
    
			} else {

    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_83);
    
			}
		}
		if (removeTarget) {
			if (targetFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_88);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_89);
    
			} else {

    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_95);
    
			}
		}

    stringBuffer.append(TEXT_96);
    
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		if (metaFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_101);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_102);
    
		} else {

    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_108);
    
		}

    
	}

    stringBuffer.append(TEXT_109);
    
}	//local declarations

    stringBuffer.append(TEXT_110);
d358 1
a358 1
    stringBuffer.append(TEXT_111);
d360 1
a360 1
    stringBuffer.append(TEXT_112);
d362 1
a362 1
    stringBuffer.append(TEXT_113);
d364 1
a364 1
    stringBuffer.append(TEXT_114);
d368 1
a368 1
    stringBuffer.append(TEXT_115);
d370 1
a370 1
    stringBuffer.append(TEXT_116);
d372 1
a372 1
    stringBuffer.append(TEXT_117);
d378 1
a378 1
    stringBuffer.append(TEXT_118);
d382 1
a382 1
    stringBuffer.append(TEXT_119);
d384 1
a384 1
    stringBuffer.append(TEXT_120);
d386 1
a386 1
    stringBuffer.append(TEXT_121);
d388 1
a388 1
    stringBuffer.append(TEXT_122);
d396 1
a396 1
    stringBuffer.append(TEXT_123);
d398 1
a398 1
    stringBuffer.append(TEXT_124);
d400 1
a400 1
    stringBuffer.append(TEXT_125);
d402 1
a402 1
    stringBuffer.append(TEXT_126);
d404 1
a404 1
    stringBuffer.append(TEXT_127);
d406 1
a406 1
    stringBuffer.append(TEXT_128);
d412 1
a412 1
    stringBuffer.append(TEXT_129);
d416 1
a416 1
    stringBuffer.append(TEXT_130);
d418 1
a418 1
    stringBuffer.append(TEXT_131);
d420 1
a420 1
    stringBuffer.append(TEXT_132);
d422 1
a422 1
    stringBuffer.append(TEXT_133);
d424 1
a424 1
    stringBuffer.append(TEXT_134);
d426 1
a426 1
    stringBuffer.append(TEXT_135);
d428 1
a428 1
    stringBuffer.append(TEXT_136);
d430 1
a430 1
    stringBuffer.append(TEXT_137);
d432 1
a432 1
    stringBuffer.append(TEXT_138);
d434 1
a434 1
    stringBuffer.append(TEXT_139);
d436 1
a436 1
    stringBuffer.append(TEXT_140);
d438 3
a440 3
    stringBuffer.append(TEXT_141);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(TEXT_143);
d442 1
a442 1
    stringBuffer.append(TEXT_144);
d444 1
a444 1
    stringBuffer.append(TEXT_145);
d446 1
a446 1
    stringBuffer.append(TEXT_146);
d448 1
a448 1
    stringBuffer.append(TEXT_147);
d450 1
a450 1
    stringBuffer.append(TEXT_148);
d452 1
a452 1
    stringBuffer.append(TEXT_149);
d454 1
a454 1
    stringBuffer.append(TEXT_150);
d456 1
a456 1
    stringBuffer.append(TEXT_151);
d464 1
a464 1
    stringBuffer.append(TEXT_152);
d466 1
a466 1
    stringBuffer.append(TEXT_153);
d470 1
a470 1
    stringBuffer.append(TEXT_154);
d474 3
a476 3
    stringBuffer.append(TEXT_155);
    stringBuffer.append(TEXT_156);
    stringBuffer.append(TEXT_157);
d478 1
a478 1
    stringBuffer.append(TEXT_158);
d480 1
a480 1
    stringBuffer.append(TEXT_159);
d482 1
a482 1
    stringBuffer.append(TEXT_160);
d484 1
a484 1
    stringBuffer.append(TEXT_161);
d489 3
a491 3
    stringBuffer.append(TEXT_162);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(TEXT_164);
d493 1
a493 1
    stringBuffer.append(TEXT_165);
d495 1
a495 1
    stringBuffer.append(TEXT_166);
d499 2
a500 2
    stringBuffer.append(TEXT_167);
    stringBuffer.append(TEXT_168);
d502 1
a502 1
    stringBuffer.append(TEXT_169);
d504 1
a504 1
    stringBuffer.append(TEXT_170);
d506 3
a508 3
    stringBuffer.append(TEXT_171);
    stringBuffer.append(TEXT_172);
    stringBuffer.append(TEXT_173);
d510 1
a510 1
    stringBuffer.append(TEXT_174);
d512 1
a512 1
    stringBuffer.append(TEXT_175);
d514 1
a514 1
    stringBuffer.append(TEXT_176);
d516 3
a518 3
    stringBuffer.append(TEXT_177);
    stringBuffer.append(TEXT_178);
    stringBuffer.append(TEXT_179);
d520 3
a522 3
    stringBuffer.append(TEXT_180);
    stringBuffer.append(TEXT_181);
    stringBuffer.append(TEXT_182);
d524 1
a524 1
    stringBuffer.append(TEXT_183);
d526 1
a526 1
    stringBuffer.append(TEXT_184);
d528 1
a528 1
    stringBuffer.append(TEXT_185);
d530 1
a530 1
    stringBuffer.append(TEXT_186);
d532 1
a532 1
    stringBuffer.append(TEXT_187);
d534 1
a534 1
    stringBuffer.append(TEXT_188);
d536 1
a536 1
    stringBuffer.append(TEXT_189);
d538 1
a538 1
    stringBuffer.append(TEXT_190);
d540 1
a540 1
    stringBuffer.append(TEXT_191);
d542 1
a542 1
    stringBuffer.append(TEXT_192);
d544 1
a544 1
    stringBuffer.append(TEXT_193);
d546 1
a546 1
    stringBuffer.append(TEXT_194);
d548 1
a548 1
    stringBuffer.append(TEXT_195);
d550 1
a550 1
    stringBuffer.append(TEXT_196);
d552 1
a552 1
    stringBuffer.append(TEXT_197);
d554 1
a554 1
    stringBuffer.append(TEXT_198);
d556 1
a556 1
    stringBuffer.append(TEXT_199);
d558 1
a558 1
    stringBuffer.append(TEXT_200);
d560 1
a560 1
    stringBuffer.append(TEXT_201);
d562 1
a562 1
    stringBuffer.append(TEXT_202);
d564 1
a564 1
    stringBuffer.append(TEXT_203);
d574 1
a574 1
    stringBuffer.append(TEXT_204);
d576 1
a576 1
    stringBuffer.append(TEXT_205);
d579 1
a579 1
    stringBuffer.append(TEXT_206);
d581 1
a581 1
    stringBuffer.append(TEXT_207);
d584 1
a584 1
    stringBuffer.append(TEXT_208);
d586 1
a586 1
    stringBuffer.append(TEXT_209);
d588 1
a588 1
    stringBuffer.append(TEXT_210);
d593 1
a593 1
    stringBuffer.append(TEXT_211);
d595 1
a595 1
    stringBuffer.append(TEXT_212);
d599 1
a599 1
    stringBuffer.append(TEXT_213);
d606 1
a606 1
    stringBuffer.append(TEXT_214);
d608 1
a608 1
    stringBuffer.append(TEXT_215);
d610 2
a611 23
    stringBuffer.append(TEXT_216);
    stringBuffer.append(TEXT_217);
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_228);
d614 4
a617 208
	String _edge = "getDiagramEdge()";

    stringBuffer.append(TEXT_229);
    
	//input: _edge : String

    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_232);
    
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();
		GenFeature targetFeature = modelFacet.getTargetMetaFeature();
		//See creation of links in NodeEditPart

		boolean removeSource = sourceFeature != null;
		boolean removeTarget = targetFeature != null;
		boolean removeChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
		if (containmentFeature != null) {
			if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
				EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
				if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeSource = false;
				}
			}
			if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
				EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
				if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeTarget = false;
				}
			}

    stringBuffer.append(TEXT_233);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_235);
    
			if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_236);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_237);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_239);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_240);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_241);
    
			} else {

    stringBuffer.append(TEXT_242);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_243);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_244);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_245);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_246);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_247);
    
			}
		} else {

    stringBuffer.append(TEXT_248);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_249);
    
		}
		if (removeChild) {
			if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_250);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_251);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_252);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_253);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_254);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_255);
    
			} else {

    stringBuffer.append(TEXT_256);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_257);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_258);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_259);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_260);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_261);
    
			}
		}
		if (removeSource) {
			if (sourceFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_263);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_264);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_265);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_266);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_267);
    
			} else {

    stringBuffer.append(TEXT_268);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_269);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_270);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_271);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_272);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_273);
    
			}
		}
		if (removeTarget) {
			if (targetFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_274);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_275);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_276);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_277);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_278);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_279);
    
			} else {

    stringBuffer.append(TEXT_280);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_281);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_282);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_283);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_284);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_285);
    
			}
		}

    stringBuffer.append(TEXT_286);
    
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		if (metaFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_287);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_288);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_289);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_290);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_291);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_292);
    
		} else {

    stringBuffer.append(TEXT_293);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_294);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_295);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_296);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_297);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_298);
    
		}

    
d619 1
d621 5
a625 1
    stringBuffer.append(TEXT_299);
d627 1
a627 1
}	//local declarations
a628 1
    stringBuffer.append(TEXT_300);
d638 2
a639 2
    stringBuffer.append(TEXT_301);
    stringBuffer.append(TEXT_302);
d641 1
a641 1
    stringBuffer.append(TEXT_303);
d643 1
a643 1
    stringBuffer.append(TEXT_304);
d645 3
a647 3
    stringBuffer.append(TEXT_305);
    stringBuffer.append(TEXT_306);
    stringBuffer.append(TEXT_307);
d649 1
a649 1
    stringBuffer.append(TEXT_308);
d651 1
a651 1
    stringBuffer.append(TEXT_309);
d655 1
a655 1
    stringBuffer.append(TEXT_310);
d657 1
a657 1
    stringBuffer.append(TEXT_311);
d663 1
a663 1
    stringBuffer.append(TEXT_312);
d665 1
a665 1
    stringBuffer.append(TEXT_313);
d669 1
a669 1
    stringBuffer.append(TEXT_314);
d673 1
a673 1
    stringBuffer.append(TEXT_315);
d675 1
a675 1
    stringBuffer.append(TEXT_316);
d677 1
a677 1
    stringBuffer.append(TEXT_317);
d679 1
a679 1
    stringBuffer.append(TEXT_318);
d681 1
a681 1
    stringBuffer.append(TEXT_319);
d683 1
a683 1
    stringBuffer.append(TEXT_320);
d687 1
a687 1
    stringBuffer.append(TEXT_321);
d691 1
a691 1
    stringBuffer.append(TEXT_322);
d693 1
a693 1
    stringBuffer.append(TEXT_323);
d695 1
a695 1
    stringBuffer.append(TEXT_324);
d697 1
a697 1
    stringBuffer.append(TEXT_325);
d699 1
a699 1
    stringBuffer.append(TEXT_326);
d701 1
a701 1
    stringBuffer.append(TEXT_327);
d703 1
a703 1
    stringBuffer.append(TEXT_328);
d705 1
a705 1
    stringBuffer.append(TEXT_329);
d707 1
a707 1
    stringBuffer.append(TEXT_330);
d709 1
a709 1
    stringBuffer.append(TEXT_331);
d711 1
a711 1
    stringBuffer.append(TEXT_332);
d713 1
a713 1
    stringBuffer.append(TEXT_333);
d715 1
a715 1
    stringBuffer.append(TEXT_334);
d717 1
a717 1
    stringBuffer.append(TEXT_335);
d724 1
a724 1
    stringBuffer.append(TEXT_336);
d727 1
a727 1
    stringBuffer.append(TEXT_337);
d729 1
a729 1
    stringBuffer.append(TEXT_338);
d731 1
a731 1
    stringBuffer.append(TEXT_339);
d733 1
a733 1
    stringBuffer.append(TEXT_340);
d735 1
a735 1
    stringBuffer.append(TEXT_341);
d737 1
a737 1
    stringBuffer.append(TEXT_342);
d739 1
a739 1
    stringBuffer.append(TEXT_343);
d741 1
a741 1
    stringBuffer.append(TEXT_344);
d745 1
a745 1
    stringBuffer.append(TEXT_345);
d748 1
a748 1
    stringBuffer.append(TEXT_346);
d750 1
a750 1
    stringBuffer.append(TEXT_347);
d752 1
a752 1
    stringBuffer.append(TEXT_348);
d754 1
a754 1
    stringBuffer.append(TEXT_349);
d756 1
a756 1
    stringBuffer.append(TEXT_350);
d758 1
a758 1
    stringBuffer.append(TEXT_351);
d762 1
a762 1
    stringBuffer.append(TEXT_352);
d764 1
a764 1
    stringBuffer.append(TEXT_353);
d766 1
a766 1
    stringBuffer.append(TEXT_354);
d773 1
a773 1
    stringBuffer.append(TEXT_355);
d777 1
a777 1
    stringBuffer.append(TEXT_356);
d781 1
a781 1
    stringBuffer.append(TEXT_357);
d785 2
a786 2
    stringBuffer.append(TEXT_358);
    stringBuffer.append(TEXT_359);
d788 1
a788 1
    stringBuffer.append(TEXT_360);
d790 1
a790 1
    stringBuffer.append(TEXT_361);
d792 1
a792 1
    stringBuffer.append(TEXT_362);
d794 1
a794 1
    stringBuffer.append(TEXT_363);
d796 1
a796 1
    stringBuffer.append(TEXT_364);
d798 1
a798 1
    stringBuffer.append(TEXT_365);
d800 1
a800 1
    stringBuffer.append(TEXT_366);
d802 1
a802 1
    stringBuffer.append(TEXT_367);
d804 1
a804 1
    stringBuffer.append(TEXT_368);
d806 1
a806 1
    stringBuffer.append(TEXT_369);
d808 1
a808 1
    stringBuffer.append(TEXT_370);
d812 1
a812 1
    stringBuffer.append(TEXT_371);
d817 3
a819 3
    stringBuffer.append(TEXT_372);
    stringBuffer.append(TEXT_373);
    stringBuffer.append(TEXT_374);
d821 1
a821 1
    stringBuffer.append(TEXT_375);
d823 1
a823 1
    stringBuffer.append(TEXT_376);
d827 1
a827 1
    stringBuffer.append(TEXT_377);
d832 1
a832 1
    stringBuffer.append(TEXT_378);
d841 1
a841 1
    stringBuffer.append(TEXT_379);
d843 1
a843 1
    stringBuffer.append(TEXT_380);
d845 1
a845 1
    stringBuffer.append(TEXT_381);
d855 1
a855 1
    stringBuffer.append(TEXT_382);
d857 1
a857 1
    stringBuffer.append(TEXT_383);
d859 1
a859 1
    stringBuffer.append(TEXT_384);
d865 1
a865 1
    stringBuffer.append(TEXT_385);
d869 1
a869 1
    stringBuffer.append(TEXT_386);
d871 1
a871 1
    stringBuffer.append(TEXT_387);
d873 1
a873 1
    stringBuffer.append(TEXT_388);
d875 1
a875 1
    stringBuffer.append(TEXT_389);
d877 1
a877 1
    stringBuffer.append(TEXT_390);
d879 1
a879 1
    stringBuffer.append(TEXT_391);
d881 1
a881 1
    stringBuffer.append(TEXT_392);
d883 1
a883 1
    stringBuffer.append(TEXT_393);
d885 1
a885 1
    stringBuffer.append(TEXT_394);
d887 1
a887 1
    stringBuffer.append(TEXT_395);
d891 1
a891 1
    stringBuffer.append(TEXT_396);
d893 1
a893 1
    stringBuffer.append(TEXT_397);
d895 1
a895 1
    stringBuffer.append(TEXT_398);
d897 1
a897 1
    stringBuffer.append(TEXT_399);
@


1.21
log
@Default label text should be displayed instead of the "null" string when the corresponding feature is not set;
It should be possible to unset the value of a feature using a diagram label;
Fixed compilation errors when a label is not feature-based
@
text
@d27 107
a133 107
  protected final String TEXT_7 = " {";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_10 = ";";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_12 = "(";
  protected final String TEXT_13 = " view) {" + NL + "\t\tassert view instanceof ";
  protected final String TEXT_14 = ";" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_15 = " getDiagramEdge() {" + NL + "\t\treturn (";
  protected final String TEXT_16 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_19 = " view = (";
  protected final String TEXT_20 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_21 = " view = (";
  protected final String TEXT_22 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_23 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = "\t\tinstallEditPolicy(";
  protected final String TEXT_26 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_27 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_28 = " createDeleteCommand(";
  protected final String TEXT_29 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_30 = " editingDomain = ";
  protected final String TEXT_31 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_32 = " cc = new ";
  protected final String TEXT_33 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_34 = "(source.getDiagram(), edgeToRemove));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_35 = "(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_36 = NL;
  protected final String TEXT_37 = NL + "\t\t\tprivate ";
  protected final String TEXT_38 = " createDomainModelRemoveCommand(";
  protected final String TEXT_39 = " editingDomain) {";
  protected final String TEXT_40 = NL + "\t\t\t\t";
  protected final String TEXT_41 = " result = new ";
  protected final String TEXT_42 = "();";
  protected final String TEXT_43 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_44 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_45 = ".getElement().eContainer(), ";
  protected final String TEXT_46 = ".eINSTANCE.get";
  protected final String TEXT_47 = "(), ";
  protected final String TEXT_48 = ".getElement()));";
  protected final String TEXT_49 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_50 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_51 = ".getElement().eContainer(), ";
  protected final String TEXT_52 = ".eINSTANCE.get";
  protected final String TEXT_53 = "(), ";
  protected final String TEXT_54 = ".UNSET_VALUE));";
  protected final String TEXT_55 = NL + "\t\t\t\treturn ";
  protected final String TEXT_56 = ".INSTANCE;";
  protected final String TEXT_57 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_58 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_59 = ".getElement().eContainer(), ";
  protected final String TEXT_60 = ".eINSTANCE.get";
  protected final String TEXT_61 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_62 = ".getElement()));";
  protected final String TEXT_63 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_64 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_65 = ".getElement().eContainer(), ";
  protected final String TEXT_66 = ".eINSTANCE.get";
  protected final String TEXT_67 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_68 = ".UNSET_VALUE));";
  protected final String TEXT_69 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_70 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_71 = ".getElement(), ";
  protected final String TEXT_72 = ".eINSTANCE.get";
  protected final String TEXT_73 = "(), ";
  protected final String TEXT_74 = ".getSource().getElement()));";
  protected final String TEXT_75 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_76 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_77 = ".getElement(), ";
  protected final String TEXT_78 = ".eINSTANCE.get";
  protected final String TEXT_79 = "(), ";
  protected final String TEXT_80 = ".UNSET_VALUE));";
  protected final String TEXT_81 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_82 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_83 = ".getElement(), ";
  protected final String TEXT_84 = ".eINSTANCE.get";
  protected final String TEXT_85 = "(), ";
  protected final String TEXT_86 = ".getTarget().getElement()));";
  protected final String TEXT_87 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_88 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_89 = ".getElement(), ";
  protected final String TEXT_90 = ".eINSTANCE.get";
  protected final String TEXT_91 = "(), ";
  protected final String TEXT_92 = ".UNSET_VALUE));";
  protected final String TEXT_93 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_94 = NL + "\t\t\t\treturn ";
  protected final String TEXT_95 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_96 = ".getSource().getElement(), ";
  protected final String TEXT_97 = ".eINSTANCE.get";
  protected final String TEXT_98 = "(), ";
  protected final String TEXT_99 = ".getTarget().getElement());";
  protected final String TEXT_100 = NL + "\t\t\t\treturn ";
  protected final String TEXT_101 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_102 = ".getSource().getElement(), ";
  protected final String TEXT_103 = ".eINSTANCE.get";
  protected final String TEXT_104 = "(), ";
  protected final String TEXT_105 = ".UNSET_VALUE);";
  protected final String TEXT_106 = NL + "\t\t\t}";
  protected final String TEXT_107 = NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_108 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_109 = "());" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_110 = ".CONNECTION_BENDPOINTS_ROLE, new ";
  protected final String TEXT_111 = "());";
  protected final String TEXT_112 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_113 = ".DIRECT_EDIT_ROLE, new ";
d135 63
a197 63
  protected final String TEXT_115 = NL;
  protected final String TEXT_116 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_117 = "\", new ";
  protected final String TEXT_118 = "()); //$NON-NLS-1$";
  protected final String TEXT_119 = NL;
  protected final String TEXT_120 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_121 = ".OPEN_ROLE";
  protected final String TEXT_122 = " + \"";
  protected final String TEXT_123 = "\" ";
  protected final String TEXT_124 = ", new ";
  protected final String TEXT_125 = "());";
  protected final String TEXT_126 = NL + "\t}" + NL;
  protected final String TEXT_127 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_128 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_129 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_130 = " nextChild = (";
  protected final String TEXT_131 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_132 = ".getVisualID(nextChild) == ";
  protected final String TEXT_133 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_134 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_135 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_136 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_137 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_138 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_139 = NL;
  protected final String TEXT_140 = "if (";
  protected final String TEXT_141 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_142 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_143 = " getLabelEditPart(";
  protected final String TEXT_144 = " req) {" + NL + "\t\t";
  protected final String TEXT_145 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_146 = " view = (";
  protected final String TEXT_147 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_148 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_149 = NL + "\t\t\t\tcase ";
  protected final String TEXT_150 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_151 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_152 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_153 = NL;
  protected final String TEXT_154 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_155 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_156 = " feature, ";
  protected final String TEXT_157 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_158 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL;
  protected final String TEXT_159 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_160 = NL;
  protected final String TEXT_161 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_162 = " domainModelRefresher = new ";
  protected final String TEXT_163 = "(this);" + NL;
  protected final String TEXT_164 = NL;
  protected final String TEXT_165 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_166 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_167 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_168 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_169 = NL;
  protected final String TEXT_170 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_171 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_172 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_173 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_174 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_175 = NL;
  protected final String TEXT_176 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_177 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
d199 63
a261 63
  protected final String TEXT_179 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_180 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_181 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_182 = " bendpoints = (";
  protected final String TEXT_183 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_184 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_185 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_186 = " figureConstraint = new ";
  protected final String TEXT_187 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_188 = " wbp = (";
  protected final String TEXT_189 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_190 = " rbp = new ";
  protected final String TEXT_191 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_192 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_193 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_194 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_195 = " createFigure() {";
  protected final String TEXT_196 = NL + "\t\treturn new ";
  protected final String TEXT_197 = "();";
  protected final String TEXT_198 = NL + "\t\treturn ";
  protected final String TEXT_199 = ";";
  protected final String TEXT_200 = NL + " \t\treturn new ";
  protected final String TEXT_201 = "();";
  protected final String TEXT_202 = NL + "\t}" + NL;
  protected final String TEXT_203 = NL;
  protected final String TEXT_204 = NL;
  protected final String TEXT_205 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_206 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_207 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramEdge(), ";
  protected final String TEXT_208 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_209 = NL;
  protected final String TEXT_210 = "\t\tinstallEditPolicy(";
  protected final String TEXT_211 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_212 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_213 = " createDeleteCommand(";
  protected final String TEXT_214 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_215 = " editingDomain = ";
  protected final String TEXT_216 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_217 = " cc = new ";
  protected final String TEXT_218 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_219 = "(source.getDiagram(), edgeToRemove));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_220 = "(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_221 = NL;
  protected final String TEXT_222 = NL + "\t\t\tprivate ";
  protected final String TEXT_223 = " createDomainModelRemoveCommand(";
  protected final String TEXT_224 = " editingDomain) {";
  protected final String TEXT_225 = NL + "\t\t\t\t";
  protected final String TEXT_226 = " result = new ";
  protected final String TEXT_227 = "();";
  protected final String TEXT_228 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_229 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_230 = ".getElement().eContainer(), ";
  protected final String TEXT_231 = ".eINSTANCE.get";
  protected final String TEXT_232 = "(), ";
  protected final String TEXT_233 = ".getElement()));";
  protected final String TEXT_234 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_235 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_236 = ".getElement().eContainer(), ";
  protected final String TEXT_237 = ".eINSTANCE.get";
  protected final String TEXT_238 = "(), ";
  protected final String TEXT_239 = ".UNSET_VALUE));";
  protected final String TEXT_240 = NL + "\t\t\t\treturn ";
  protected final String TEXT_241 = ".INSTANCE;";
d266 154
a419 146
  protected final String TEXT_246 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_247 = ".getElement()));";
  protected final String TEXT_248 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_249 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_250 = ".getElement().eContainer(), ";
  protected final String TEXT_251 = ".eINSTANCE.get";
  protected final String TEXT_252 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_253 = ".UNSET_VALUE));";
  protected final String TEXT_254 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_255 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_256 = ".getElement(), ";
  protected final String TEXT_257 = ".eINSTANCE.get";
  protected final String TEXT_258 = "(), ";
  protected final String TEXT_259 = ".getSource().getElement()));";
  protected final String TEXT_260 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_261 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_262 = ".getElement(), ";
  protected final String TEXT_263 = ".eINSTANCE.get";
  protected final String TEXT_264 = "(), ";
  protected final String TEXT_265 = ".UNSET_VALUE));";
  protected final String TEXT_266 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_267 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_268 = ".getElement(), ";
  protected final String TEXT_269 = ".eINSTANCE.get";
  protected final String TEXT_270 = "(), ";
  protected final String TEXT_271 = ".getTarget().getElement()));";
  protected final String TEXT_272 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_273 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_274 = ".getElement(), ";
  protected final String TEXT_275 = ".eINSTANCE.get";
  protected final String TEXT_276 = "(), ";
  protected final String TEXT_277 = ".UNSET_VALUE));";
  protected final String TEXT_278 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_279 = NL + "\t\t\t\treturn ";
  protected final String TEXT_280 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_281 = ".getSource().getElement(), ";
  protected final String TEXT_282 = ".eINSTANCE.get";
  protected final String TEXT_283 = "(), ";
  protected final String TEXT_284 = ".getTarget().getElement());";
  protected final String TEXT_285 = NL + "\t\t\t\treturn ";
  protected final String TEXT_286 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_287 = ".getSource().getElement(), ";
  protected final String TEXT_288 = ".eINSTANCE.get";
  protected final String TEXT_289 = "(), ";
  protected final String TEXT_290 = ".UNSET_VALUE);";
  protected final String TEXT_291 = NL + "\t\t\t}";
  protected final String TEXT_292 = NL + "\t\t});";
  protected final String TEXT_293 = NL;
  protected final String TEXT_294 = "\t\tinstallEditPolicy(";
  protected final String TEXT_295 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_296 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_297 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_298 = NL;
  protected final String TEXT_299 = "\t\t\t\t\tprotected ";
  protected final String TEXT_300 = " getDirectEditCommand(";
  protected final String TEXT_301 = " request) {";
  protected final String TEXT_302 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_303 = ".INSTANCE;";
  protected final String TEXT_304 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_305 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_306 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_307 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_308 = "(";
  protected final String TEXT_309 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_310 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_311 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_312 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_313 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_314 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_315 = " editingDomain = ";
  protected final String TEXT_316 = ".getEditingDomain(";
  protected final String TEXT_317 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_318 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_319 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_320 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_321 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_322 = " createDomainModelCommand(";
  protected final String TEXT_323 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_324 = " element = ";
  protected final String TEXT_325 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_326 = " result = new ";
  protected final String TEXT_327 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_328 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_329 = " ";
  protected final String TEXT_330 = "feature = (";
  protected final String TEXT_331 = ") ";
  protected final String TEXT_332 = ".eINSTANCE.get";
  protected final String TEXT_333 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_334 = ".parseValue(feature, values[";
  protected final String TEXT_335 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_336 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_337 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_338 = " ";
  protected final String TEXT_339 = "values = new ";
  protected final String TEXT_340 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_341 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_342 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_343 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_344 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_345 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_346 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_347 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_348 = NL + "\t\t\t\t});";
  protected final String TEXT_349 = NL + "\t\t}" + NL;
  protected final String TEXT_350 = NL;
  protected final String TEXT_351 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_352 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_353 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_354 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_355 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_356 = "(this, ";
  protected final String TEXT_357 = ".class, new ";
  protected final String TEXT_358 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_359 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_360 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_361 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_362 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_363 = NL;
  protected final String TEXT_364 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_365 = NL;
  protected final String TEXT_366 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_367 = " domainModelRefresher = new ";
  protected final String TEXT_368 = "(this);" + NL;
  protected final String TEXT_369 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_370 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_371 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_372 = ".eINSTANCE.get";
  protected final String TEXT_373 = "(), labelRefresher);";
  protected final String TEXT_374 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_375 = ".eINSTANCE.get";
  protected final String TEXT_376 = "(), labelRefresher);";
  protected final String TEXT_377 = NL + "\t\t}" + NL;
  protected final String TEXT_378 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_379 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_380 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_381 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_382 = " nextChild = (";
  protected final String TEXT_383 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_384 = ".getVisualID(nextChild) == ";
  protected final String TEXT_385 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_386 = ") ";
  protected final String TEXT_387 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_388 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_389 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_390 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_391 = NL;
d451 2
a454 1
    stringBuffer.append(TEXT_8);
d456 1
d458 1
a458 1
    stringBuffer.append(TEXT_10);
a459 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genLink.getEditPartClassName());
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d463 1
a463 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d465 1
a465 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d469 1
d471 1
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a474 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a475 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d479 6
d495 3
a497 3
    stringBuffer.append(TEXT_23);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(TEXT_25);
d499 1
a499 1
    stringBuffer.append(TEXT_26);
d501 1
a501 1
    stringBuffer.append(TEXT_27);
d503 1
a503 1
    stringBuffer.append(TEXT_28);
d505 1
a505 1
    stringBuffer.append(TEXT_29);
d507 1
a507 1
    stringBuffer.append(TEXT_30);
d509 1
a509 1
    stringBuffer.append(TEXT_31);
d511 1
a511 1
    stringBuffer.append(TEXT_32);
d513 1
a513 1
    stringBuffer.append(TEXT_33);
d515 1
a515 1
    stringBuffer.append(TEXT_34);
d517 1
a517 1
    stringBuffer.append(TEXT_35);
d522 1
a522 1
    stringBuffer.append(TEXT_36);
d526 1
a526 1
    stringBuffer.append(TEXT_37);
d528 1
a528 1
    stringBuffer.append(TEXT_38);
d530 1
a530 1
    stringBuffer.append(TEXT_39);
d557 1
a557 1
    stringBuffer.append(TEXT_40);
d559 1
a559 1
    stringBuffer.append(TEXT_41);
d561 1
a561 1
    stringBuffer.append(TEXT_42);
d565 1
a565 1
    stringBuffer.append(TEXT_43);
d567 1
a567 1
    stringBuffer.append(TEXT_44);
d569 1
a569 1
    stringBuffer.append(TEXT_45);
d571 1
a571 1
    stringBuffer.append(TEXT_46);
d573 1
a573 1
    stringBuffer.append(TEXT_47);
d575 1
a575 1
    stringBuffer.append(TEXT_48);
d579 1
a579 1
    stringBuffer.append(TEXT_49);
d581 1
a581 1
    stringBuffer.append(TEXT_50);
d583 1
a583 1
    stringBuffer.append(TEXT_51);
d585 1
a585 1
    stringBuffer.append(TEXT_52);
d587 1
a587 1
    stringBuffer.append(TEXT_53);
d589 1
a589 1
    stringBuffer.append(TEXT_54);
d594 1
a594 1
    stringBuffer.append(TEXT_55);
d596 1
a596 1
    stringBuffer.append(TEXT_56);
d602 1
a602 1
    stringBuffer.append(TEXT_57);
d604 1
a604 1
    stringBuffer.append(TEXT_58);
d606 1
a606 1
    stringBuffer.append(TEXT_59);
d608 1
a608 1
    stringBuffer.append(TEXT_60);
d610 1
a610 1
    stringBuffer.append(TEXT_61);
d612 1
a612 1
    stringBuffer.append(TEXT_62);
d616 1
a616 1
    stringBuffer.append(TEXT_63);
d618 1
a618 1
    stringBuffer.append(TEXT_64);
d620 1
a620 1
    stringBuffer.append(TEXT_65);
d622 1
a622 1
    stringBuffer.append(TEXT_66);
d624 1
a624 1
    stringBuffer.append(TEXT_67);
d626 1
a626 1
    stringBuffer.append(TEXT_68);
d633 1
a633 1
    stringBuffer.append(TEXT_69);
d635 1
a635 1
    stringBuffer.append(TEXT_70);
d637 1
a637 1
    stringBuffer.append(TEXT_71);
d639 1
a639 1
    stringBuffer.append(TEXT_72);
d641 1
a641 1
    stringBuffer.append(TEXT_73);
d643 1
a643 1
    stringBuffer.append(TEXT_74);
d647 1
a647 1
    stringBuffer.append(TEXT_75);
d649 1
a649 1
    stringBuffer.append(TEXT_76);
d651 1
a651 1
    stringBuffer.append(TEXT_77);
d653 1
a653 1
    stringBuffer.append(TEXT_78);
d655 1
a655 1
    stringBuffer.append(TEXT_79);
d657 1
a657 1
    stringBuffer.append(TEXT_80);
d664 1
a664 1
    stringBuffer.append(TEXT_81);
d666 1
a666 1
    stringBuffer.append(TEXT_82);
d668 1
a668 1
    stringBuffer.append(TEXT_83);
d670 1
a670 1
    stringBuffer.append(TEXT_84);
d672 1
a672 1
    stringBuffer.append(TEXT_85);
d674 1
a674 1
    stringBuffer.append(TEXT_86);
d678 1
a678 1
    stringBuffer.append(TEXT_87);
d680 1
a680 1
    stringBuffer.append(TEXT_88);
d682 1
a682 1
    stringBuffer.append(TEXT_89);
d684 1
a684 1
    stringBuffer.append(TEXT_90);
d686 1
a686 1
    stringBuffer.append(TEXT_91);
d688 1
a688 1
    stringBuffer.append(TEXT_92);
d693 1
a693 1
    stringBuffer.append(TEXT_93);
d699 1
a699 1
    stringBuffer.append(TEXT_94);
d701 1
a701 1
    stringBuffer.append(TEXT_95);
d703 1
a703 1
    stringBuffer.append(TEXT_96);
d705 1
a705 1
    stringBuffer.append(TEXT_97);
d707 1
a707 1
    stringBuffer.append(TEXT_98);
d709 1
a709 1
    stringBuffer.append(TEXT_99);
d713 1
a713 1
    stringBuffer.append(TEXT_100);
d715 1
a715 1
    stringBuffer.append(TEXT_101);
d717 1
a717 1
    stringBuffer.append(TEXT_102);
d719 1
a719 1
    stringBuffer.append(TEXT_103);
d721 1
a721 1
    stringBuffer.append(TEXT_104);
d723 1
a723 1
    stringBuffer.append(TEXT_105);
d730 1
a730 1
    stringBuffer.append(TEXT_106);
d734 1
a734 1
    stringBuffer.append(TEXT_107);
d736 1
a736 1
    stringBuffer.append(TEXT_108);
d738 1
a738 1
    stringBuffer.append(TEXT_109);
d740 1
a740 1
    stringBuffer.append(TEXT_110);
d742 1
a742 1
    stringBuffer.append(TEXT_111);
d746 1
a746 1
    stringBuffer.append(TEXT_112);
d748 1
a748 1
    stringBuffer.append(TEXT_113);
d750 1
a750 1
    stringBuffer.append(TEXT_114);
d756 1
a756 1
    stringBuffer.append(TEXT_115);
d760 1
a760 1
    stringBuffer.append(TEXT_116);
d762 1
a762 1
    stringBuffer.append(TEXT_117);
d764 1
a764 1
    stringBuffer.append(TEXT_118);
d766 1
a766 1
    stringBuffer.append(TEXT_119);
d774 1
a774 1
    stringBuffer.append(TEXT_120);
d776 1
a776 1
    stringBuffer.append(TEXT_121);
d778 1
a778 1
    stringBuffer.append(TEXT_122);
d780 1
a780 1
    stringBuffer.append(TEXT_123);
d782 1
a782 1
    stringBuffer.append(TEXT_124);
d784 1
a784 1
    stringBuffer.append(TEXT_125);
d790 1
a790 1
    stringBuffer.append(TEXT_126);
d794 1
a794 1
    stringBuffer.append(TEXT_127);
d796 1
a796 1
    stringBuffer.append(TEXT_128);
d798 1
a798 1
    stringBuffer.append(TEXT_129);
d800 1
a800 1
    stringBuffer.append(TEXT_130);
d802 1
a802 1
    stringBuffer.append(TEXT_131);
d804 1
a804 1
    stringBuffer.append(TEXT_132);
d806 1
a806 1
    stringBuffer.append(TEXT_133);
d808 1
a808 1
    stringBuffer.append(TEXT_134);
d810 1
a810 1
    stringBuffer.append(TEXT_135);
d812 1
a812 1
    stringBuffer.append(TEXT_136);
d814 1
a814 1
    stringBuffer.append(TEXT_137);
d816 3
a818 3
    stringBuffer.append(TEXT_138);
    stringBuffer.append(TEXT_139);
    stringBuffer.append(TEXT_140);
d820 1
a820 1
    stringBuffer.append(TEXT_141);
d822 1
a822 1
    stringBuffer.append(TEXT_142);
d824 1
a824 1
    stringBuffer.append(TEXT_143);
d826 1
a826 1
    stringBuffer.append(TEXT_144);
d828 1
a828 1
    stringBuffer.append(TEXT_145);
d830 1
a830 1
    stringBuffer.append(TEXT_146);
d832 1
a832 1
    stringBuffer.append(TEXT_147);
d834 1
a834 1
    stringBuffer.append(TEXT_148);
d842 1
a842 1
    stringBuffer.append(TEXT_149);
d844 1
a844 1
    stringBuffer.append(TEXT_150);
d848 1
a848 1
    stringBuffer.append(TEXT_151);
d852 3
a854 3
    stringBuffer.append(TEXT_152);
    stringBuffer.append(TEXT_153);
    stringBuffer.append(TEXT_154);
d856 1
a856 1
    stringBuffer.append(TEXT_155);
d858 1
a858 1
    stringBuffer.append(TEXT_156);
d860 1
a860 1
    stringBuffer.append(TEXT_157);
d862 1
a862 1
    stringBuffer.append(TEXT_158);
d867 3
a869 3
    stringBuffer.append(TEXT_159);
    stringBuffer.append(TEXT_160);
    stringBuffer.append(TEXT_161);
d871 1
a871 1
    stringBuffer.append(TEXT_162);
d873 1
a873 1
    stringBuffer.append(TEXT_163);
a876 5
    stringBuffer.append(TEXT_164);
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d878 1
a879 1
    stringBuffer.append(TEXT_168);
d881 1
d883 1
a883 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a884 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a885 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d889 1
d891 1
d899 2
d902 3
a904 1
    stringBuffer.append(TEXT_181);
d906 1
a906 1
    stringBuffer.append(TEXT_182);
d908 1
a908 1
    stringBuffer.append(TEXT_183);
d910 1
a910 1
    stringBuffer.append(TEXT_184);
d912 1
a912 1
    stringBuffer.append(TEXT_185);
d914 1
a914 1
    stringBuffer.append(TEXT_186);
d916 1
a916 1
    stringBuffer.append(TEXT_187);
d918 1
a918 1
    stringBuffer.append(TEXT_188);
d920 1
a920 1
    stringBuffer.append(TEXT_189);
d922 1
a922 1
    stringBuffer.append(TEXT_190);
d924 1
a924 1
    stringBuffer.append(TEXT_191);
d926 1
a926 1
    stringBuffer.append(TEXT_192);
d928 1
a928 1
    stringBuffer.append(TEXT_193);
d930 1
a930 1
    stringBuffer.append(TEXT_194);
d932 11
a942 1
    stringBuffer.append(TEXT_195);
d952 1
a952 1
    stringBuffer.append(TEXT_196);
d954 1
a954 1
    stringBuffer.append(TEXT_197);
d957 1
a957 1
    stringBuffer.append(TEXT_198);
d959 1
a959 1
    stringBuffer.append(TEXT_199);
d962 1
a962 1
    stringBuffer.append(TEXT_200);
d964 1
a964 1
    stringBuffer.append(TEXT_201);
d966 1
a966 1
    stringBuffer.append(TEXT_202);
d971 1
a971 1
    stringBuffer.append(TEXT_203);
d973 1
a973 1
    stringBuffer.append(TEXT_204);
d977 1
a977 1
    stringBuffer.append(TEXT_205);
d984 1
a984 1
    stringBuffer.append(TEXT_206);
d986 1
a986 1
    stringBuffer.append(TEXT_207);
d988 3
a990 3
    stringBuffer.append(TEXT_208);
    stringBuffer.append(TEXT_209);
    stringBuffer.append(TEXT_210);
d992 1
a992 1
    stringBuffer.append(TEXT_211);
d994 1
a994 1
    stringBuffer.append(TEXT_212);
d996 1
a996 1
    stringBuffer.append(TEXT_213);
d998 1
a998 1
    stringBuffer.append(TEXT_214);
d1000 1
a1000 1
    stringBuffer.append(TEXT_215);
d1002 1
a1002 1
    stringBuffer.append(TEXT_216);
d1004 1
a1004 1
    stringBuffer.append(TEXT_217);
d1006 1
a1006 1
    stringBuffer.append(TEXT_218);
d1008 1
a1008 1
    stringBuffer.append(TEXT_219);
d1010 1
a1010 1
    stringBuffer.append(TEXT_220);
d1015 1
a1015 1
    stringBuffer.append(TEXT_221);
d1019 1
a1019 1
    stringBuffer.append(TEXT_222);
d1021 1
a1021 1
    stringBuffer.append(TEXT_223);
d1023 1
a1023 1
    stringBuffer.append(TEXT_224);
d1050 1
a1050 1
    stringBuffer.append(TEXT_225);
d1052 1
a1052 1
    stringBuffer.append(TEXT_226);
d1054 1
a1054 1
    stringBuffer.append(TEXT_227);
d1058 1
a1058 1
    stringBuffer.append(TEXT_228);
d1060 1
a1060 1
    stringBuffer.append(TEXT_229);
d1062 1
a1062 1
    stringBuffer.append(TEXT_230);
d1064 1
a1064 1
    stringBuffer.append(TEXT_231);
d1066 1
a1066 1
    stringBuffer.append(TEXT_232);
d1068 1
a1068 1
    stringBuffer.append(TEXT_233);
d1072 1
a1072 1
    stringBuffer.append(TEXT_234);
d1074 1
a1074 1
    stringBuffer.append(TEXT_235);
d1076 1
a1076 1
    stringBuffer.append(TEXT_236);
d1078 1
a1078 1
    stringBuffer.append(TEXT_237);
d1080 1
a1080 1
    stringBuffer.append(TEXT_238);
d1082 1
a1082 1
    stringBuffer.append(TEXT_239);
d1087 1
a1087 1
    stringBuffer.append(TEXT_240);
d1089 1
a1089 1
    stringBuffer.append(TEXT_241);
d1095 1
a1095 1
    stringBuffer.append(TEXT_242);
d1097 1
a1097 1
    stringBuffer.append(TEXT_243);
d1099 1
a1099 1
    stringBuffer.append(TEXT_244);
d1101 1
a1101 1
    stringBuffer.append(TEXT_245);
d1103 1
a1103 1
    stringBuffer.append(TEXT_246);
d1105 1
a1105 1
    stringBuffer.append(TEXT_247);
d1109 1
a1109 1
    stringBuffer.append(TEXT_248);
d1111 1
a1111 1
    stringBuffer.append(TEXT_249);
d1113 1
a1113 1
    stringBuffer.append(TEXT_250);
d1115 1
a1115 1
    stringBuffer.append(TEXT_251);
d1117 1
a1117 1
    stringBuffer.append(TEXT_252);
d1119 1
a1119 1
    stringBuffer.append(TEXT_253);
d1126 1
a1126 1
    stringBuffer.append(TEXT_254);
d1128 1
a1128 1
    stringBuffer.append(TEXT_255);
d1130 1
a1130 1
    stringBuffer.append(TEXT_256);
d1132 1
a1132 1
    stringBuffer.append(TEXT_257);
d1134 1
a1134 1
    stringBuffer.append(TEXT_258);
d1136 1
a1136 1
    stringBuffer.append(TEXT_259);
d1140 1
a1140 1
    stringBuffer.append(TEXT_260);
d1142 1
a1142 1
    stringBuffer.append(TEXT_261);
d1144 1
a1144 1
    stringBuffer.append(TEXT_262);
d1146 1
a1146 1
    stringBuffer.append(TEXT_263);
d1148 1
a1148 1
    stringBuffer.append(TEXT_264);
d1150 1
a1150 1
    stringBuffer.append(TEXT_265);
d1157 1
a1157 1
    stringBuffer.append(TEXT_266);
d1159 1
a1159 1
    stringBuffer.append(TEXT_267);
d1161 1
a1161 1
    stringBuffer.append(TEXT_268);
d1163 1
a1163 1
    stringBuffer.append(TEXT_269);
d1165 1
a1165 1
    stringBuffer.append(TEXT_270);
d1167 1
a1167 1
    stringBuffer.append(TEXT_271);
d1171 1
a1171 1
    stringBuffer.append(TEXT_272);
d1173 1
a1173 1
    stringBuffer.append(TEXT_273);
d1175 1
a1175 1
    stringBuffer.append(TEXT_274);
d1177 1
a1177 1
    stringBuffer.append(TEXT_275);
d1179 1
a1179 1
    stringBuffer.append(TEXT_276);
d1181 1
a1181 1
    stringBuffer.append(TEXT_277);
d1186 1
a1186 1
    stringBuffer.append(TEXT_278);
d1192 1
a1192 1
    stringBuffer.append(TEXT_279);
d1194 1
a1194 1
    stringBuffer.append(TEXT_280);
d1196 1
a1196 1
    stringBuffer.append(TEXT_281);
d1198 1
a1198 1
    stringBuffer.append(TEXT_282);
d1200 1
a1200 1
    stringBuffer.append(TEXT_283);
d1202 1
a1202 1
    stringBuffer.append(TEXT_284);
d1206 1
a1206 1
    stringBuffer.append(TEXT_285);
d1208 1
a1208 1
    stringBuffer.append(TEXT_286);
d1210 1
a1210 1
    stringBuffer.append(TEXT_287);
d1212 1
a1212 1
    stringBuffer.append(TEXT_288);
d1214 1
a1214 1
    stringBuffer.append(TEXT_289);
d1216 1
a1216 1
    stringBuffer.append(TEXT_290);
d1223 1
a1223 1
    stringBuffer.append(TEXT_291);
d1227 1
a1227 1
    stringBuffer.append(TEXT_292);
d1237 2
a1238 2
    stringBuffer.append(TEXT_293);
    stringBuffer.append(TEXT_294);
d1240 1
a1240 1
    stringBuffer.append(TEXT_295);
d1242 1
a1242 1
    stringBuffer.append(TEXT_296);
d1244 3
a1246 3
    stringBuffer.append(TEXT_297);
    stringBuffer.append(TEXT_298);
    stringBuffer.append(TEXT_299);
d1248 1
a1248 1
    stringBuffer.append(TEXT_300);
d1250 1
a1250 1
    stringBuffer.append(TEXT_301);
d1254 1
a1254 1
    stringBuffer.append(TEXT_302);
d1256 1
a1256 1
    stringBuffer.append(TEXT_303);
d1262 1
a1262 1
    stringBuffer.append(TEXT_304);
d1264 1
a1264 1
    stringBuffer.append(TEXT_305);
d1268 1
a1268 1
    stringBuffer.append(TEXT_306);
d1272 1
a1272 1
    stringBuffer.append(TEXT_307);
d1274 1
a1274 1
    stringBuffer.append(TEXT_308);
d1276 1
a1276 1
    stringBuffer.append(TEXT_309);
d1278 1
a1278 1
    stringBuffer.append(TEXT_310);
d1280 1
a1280 1
    stringBuffer.append(TEXT_311);
d1282 1
a1282 1
    stringBuffer.append(TEXT_312);
d1286 1
a1286 1
    stringBuffer.append(TEXT_313);
d1290 1
a1290 1
    stringBuffer.append(TEXT_314);
d1292 1
a1292 1
    stringBuffer.append(TEXT_315);
d1294 1
a1294 1
    stringBuffer.append(TEXT_316);
d1296 1
a1296 1
    stringBuffer.append(TEXT_317);
d1298 1
a1298 1
    stringBuffer.append(TEXT_318);
d1300 1
a1300 1
    stringBuffer.append(TEXT_319);
d1302 1
a1302 1
    stringBuffer.append(TEXT_320);
d1304 1
a1304 1
    stringBuffer.append(TEXT_321);
d1306 1
a1306 1
    stringBuffer.append(TEXT_322);
d1308 1
a1308 1
    stringBuffer.append(TEXT_323);
d1310 1
a1310 1
    stringBuffer.append(TEXT_324);
d1312 1
a1312 1
    stringBuffer.append(TEXT_325);
d1314 1
a1314 1
    stringBuffer.append(TEXT_326);
d1316 1
a1316 1
    stringBuffer.append(TEXT_327);
d1323 1
a1323 1
    stringBuffer.append(TEXT_328);
d1326 1
a1326 1
    stringBuffer.append(TEXT_329);
d1328 1
a1328 1
    stringBuffer.append(TEXT_330);
d1330 1
a1330 1
    stringBuffer.append(TEXT_331);
d1332 1
a1332 1
    stringBuffer.append(TEXT_332);
d1334 1
a1334 1
    stringBuffer.append(TEXT_333);
d1336 1
a1336 1
    stringBuffer.append(TEXT_334);
d1338 1
a1338 1
    stringBuffer.append(TEXT_335);
d1340 1
a1340 1
    stringBuffer.append(TEXT_336);
d1344 1
a1344 1
    stringBuffer.append(TEXT_337);
d1347 1
a1347 1
    stringBuffer.append(TEXT_338);
d1349 1
a1349 1
    stringBuffer.append(TEXT_339);
d1351 1
a1351 1
    stringBuffer.append(TEXT_340);
d1353 1
a1353 1
    stringBuffer.append(TEXT_341);
d1355 1
a1355 1
    stringBuffer.append(TEXT_342);
d1357 1
a1357 1
    stringBuffer.append(TEXT_343);
d1361 1
a1361 1
    stringBuffer.append(TEXT_344);
d1363 1
a1363 1
    stringBuffer.append(TEXT_345);
d1365 1
a1365 1
    stringBuffer.append(TEXT_346);
d1372 1
a1372 1
    stringBuffer.append(TEXT_347);
d1376 1
a1376 1
    stringBuffer.append(TEXT_348);
d1380 1
a1380 1
    stringBuffer.append(TEXT_349);
d1384 2
a1385 2
    stringBuffer.append(TEXT_350);
    stringBuffer.append(TEXT_351);
d1387 1
a1387 1
    stringBuffer.append(TEXT_352);
d1389 1
a1389 1
    stringBuffer.append(TEXT_353);
d1391 1
a1391 1
    stringBuffer.append(TEXT_354);
d1393 1
a1393 1
    stringBuffer.append(TEXT_355);
d1395 1
a1395 1
    stringBuffer.append(TEXT_356);
d1397 1
a1397 1
    stringBuffer.append(TEXT_357);
d1399 1
a1399 1
    stringBuffer.append(TEXT_358);
d1401 1
a1401 1
    stringBuffer.append(TEXT_359);
d1403 1
a1403 1
    stringBuffer.append(TEXT_360);
d1405 1
a1405 1
    stringBuffer.append(TEXT_361);
d1407 1
a1407 1
    stringBuffer.append(TEXT_362);
d1411 1
a1411 1
    stringBuffer.append(TEXT_363);
d1416 3
a1418 3
    stringBuffer.append(TEXT_364);
    stringBuffer.append(TEXT_365);
    stringBuffer.append(TEXT_366);
d1420 1
a1420 1
    stringBuffer.append(TEXT_367);
d1422 1
a1422 1
    stringBuffer.append(TEXT_368);
d1426 1
a1426 1
    stringBuffer.append(TEXT_369);
d1431 1
a1431 1
    stringBuffer.append(TEXT_370);
d1440 1
a1440 1
    stringBuffer.append(TEXT_371);
d1442 1
a1442 1
    stringBuffer.append(TEXT_372);
d1444 1
a1444 1
    stringBuffer.append(TEXT_373);
d1454 1
a1454 1
    stringBuffer.append(TEXT_374);
d1456 1
a1456 1
    stringBuffer.append(TEXT_375);
d1458 1
a1458 1
    stringBuffer.append(TEXT_376);
d1464 1
a1464 1
    stringBuffer.append(TEXT_377);
d1468 1
a1468 1
    stringBuffer.append(TEXT_378);
d1470 1
a1470 1
    stringBuffer.append(TEXT_379);
d1472 1
a1472 1
    stringBuffer.append(TEXT_380);
d1474 1
a1474 1
    stringBuffer.append(TEXT_381);
d1476 1
a1476 1
    stringBuffer.append(TEXT_382);
d1478 1
a1478 1
    stringBuffer.append(TEXT_383);
d1480 1
a1480 1
    stringBuffer.append(TEXT_384);
d1482 1
a1482 1
    stringBuffer.append(TEXT_385);
d1484 1
a1484 1
    stringBuffer.append(TEXT_386);
d1486 1
a1486 1
    stringBuffer.append(TEXT_387);
d1490 1
a1490 1
    stringBuffer.append(TEXT_388);
d1492 1
a1492 1
    stringBuffer.append(TEXT_389);
d1494 1
a1494 1
    stringBuffer.append(TEXT_390);
d1496 1
a1496 1
    stringBuffer.append(TEXT_391);
@


1.20
log
@[170248]: Beautify compartments generated for the lite version
@
text
@d321 91
a411 84
  protected final String TEXT_301 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_302 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_303 = "(";
  protected final String TEXT_304 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_305 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_306 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_307 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_308 = " editingDomain = ";
  protected final String TEXT_309 = ".getEditingDomain(";
  protected final String TEXT_310 = ".getDiagram().getElement());";
  protected final String TEXT_311 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_312 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_313 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_314 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_315 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_316 = " createDomainModelCommand(";
  protected final String TEXT_317 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_318 = " element = ";
  protected final String TEXT_319 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_320 = " result = new ";
  protected final String TEXT_321 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_322 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_323 = " ";
  protected final String TEXT_324 = "feature = (";
  protected final String TEXT_325 = ") ";
  protected final String TEXT_326 = ".eINSTANCE.get";
  protected final String TEXT_327 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_328 = ".parseValue(feature, values[";
  protected final String TEXT_329 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_330 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_331 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_332 = " ";
  protected final String TEXT_333 = "values = new ";
  protected final String TEXT_334 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_335 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_336 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_337 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_338 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_339 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_340 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_341 = NL + "\t\t\t\t});";
  protected final String TEXT_342 = NL + "\t\t}" + NL;
  protected final String TEXT_343 = NL;
  protected final String TEXT_344 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_345 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_346 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_347 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_348 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_349 = "(this, ";
  protected final String TEXT_350 = ".class, new ";
  protected final String TEXT_351 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_352 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_353 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_354 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_355 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_356 = NL;
  protected final String TEXT_357 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_358 = NL;
  protected final String TEXT_359 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_360 = " domainModelRefresher = new ";
  protected final String TEXT_361 = "(this);" + NL;
  protected final String TEXT_362 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_363 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_364 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_365 = ".eINSTANCE.get";
  protected final String TEXT_366 = "(), labelRefresher);";
  protected final String TEXT_367 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_368 = ".eINSTANCE.get";
  protected final String TEXT_369 = "(), labelRefresher);";
  protected final String TEXT_370 = NL + "\t\t}" + NL;
  protected final String TEXT_371 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_372 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_373 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_374 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_375 = " nextChild = (";
  protected final String TEXT_376 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_377 = ".getVisualID(nextChild) == ";
  protected final String TEXT_378 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_379 = ") ";
  protected final String TEXT_380 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_381 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_382 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_383 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_384 = NL;
d1227 4
a1231 2
    stringBuffer.append(TEXT_302);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d1233 5
a1237 1
    stringBuffer.append(editPatternCode);
d1241 3
a1243 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d1245 3
a1247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1249 1
a1249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1251 1
a1251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1253 1
a1253 1
    stringBuffer.append(primaryView);
d1255 8
d1264 1
a1264 3
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = featureLabelModelFacet.getMetaFeatures();
d1266 7
a1272 1
    stringBuffer.append(TEXT_311);
d1274 1
a1274 1
    stringBuffer.append(TEXT_312);
d1276 1
a1276 1
    stringBuffer.append(TEXT_313);
d1278 1
a1278 1
    stringBuffer.append(TEXT_314);
d1280 1
a1280 1
    stringBuffer.append(TEXT_315);
d1282 1
a1282 1
    stringBuffer.append(TEXT_316);
d1284 1
a1284 1
    stringBuffer.append(TEXT_317);
d1286 1
a1286 1
    stringBuffer.append(TEXT_318);
d1288 1
a1288 1
    stringBuffer.append(TEXT_319);
d1290 1
a1290 1
    stringBuffer.append(TEXT_320);
d1292 1
a1292 1
    stringBuffer.append(TEXT_321);
d1299 1
a1299 1
    stringBuffer.append(TEXT_322);
d1302 1
a1302 1
    stringBuffer.append(TEXT_323);
d1304 1
a1304 1
    stringBuffer.append(TEXT_324);
d1306 1
a1306 1
    stringBuffer.append(TEXT_325);
d1308 1
a1308 1
    stringBuffer.append(TEXT_326);
d1310 1
a1310 1
    stringBuffer.append(TEXT_327);
d1312 1
a1312 1
    stringBuffer.append(TEXT_328);
d1314 1
a1314 1
    stringBuffer.append(TEXT_329);
d1316 1
a1316 1
    stringBuffer.append(TEXT_330);
d1320 1
a1320 1
    stringBuffer.append(TEXT_331);
d1323 1
a1323 1
    stringBuffer.append(TEXT_332);
d1325 1
a1325 1
    stringBuffer.append(TEXT_333);
d1327 1
a1327 1
    stringBuffer.append(TEXT_334);
d1329 1
a1329 1
    stringBuffer.append(TEXT_335);
d1331 1
a1331 1
    stringBuffer.append(TEXT_336);
d1333 1
a1333 1
    stringBuffer.append(TEXT_337);
d1337 3
a1339 1
    stringBuffer.append(TEXT_338);
d1341 1
a1341 1
    stringBuffer.append(TEXT_339);
d1348 1
a1348 1
    stringBuffer.append(TEXT_340);
d1352 1
a1352 1
    stringBuffer.append(TEXT_341);
d1356 1
a1356 1
    stringBuffer.append(TEXT_342);
d1360 2
a1361 2
    stringBuffer.append(TEXT_343);
    stringBuffer.append(TEXT_344);
d1363 1
a1363 1
    stringBuffer.append(TEXT_345);
d1365 1
a1365 1
    stringBuffer.append(TEXT_346);
d1367 1
a1367 1
    stringBuffer.append(TEXT_347);
d1369 1
a1369 1
    stringBuffer.append(TEXT_348);
d1371 1
a1371 1
    stringBuffer.append(TEXT_349);
d1373 1
a1373 1
    stringBuffer.append(TEXT_350);
d1375 1
a1375 1
    stringBuffer.append(TEXT_351);
d1377 1
a1377 1
    stringBuffer.append(TEXT_352);
d1379 1
a1379 1
    stringBuffer.append(TEXT_353);
d1381 1
a1381 1
    stringBuffer.append(TEXT_354);
d1383 1
a1383 1
    stringBuffer.append(TEXT_355);
d1387 1
a1387 1
    stringBuffer.append(TEXT_356);
d1392 3
a1394 3
    stringBuffer.append(TEXT_357);
    stringBuffer.append(TEXT_358);
    stringBuffer.append(TEXT_359);
d1396 1
a1396 1
    stringBuffer.append(TEXT_360);
d1398 1
a1398 1
    stringBuffer.append(TEXT_361);
d1402 1
a1402 1
    stringBuffer.append(TEXT_362);
d1407 1
a1407 1
    stringBuffer.append(TEXT_363);
d1416 1
a1416 1
    stringBuffer.append(TEXT_364);
d1418 1
a1418 1
    stringBuffer.append(TEXT_365);
d1420 1
a1420 1
    stringBuffer.append(TEXT_366);
d1430 1
a1430 1
    stringBuffer.append(TEXT_367);
d1432 1
a1432 1
    stringBuffer.append(TEXT_368);
d1434 1
a1434 1
    stringBuffer.append(TEXT_369);
d1440 1
a1440 1
    stringBuffer.append(TEXT_370);
d1444 1
a1444 1
    stringBuffer.append(TEXT_371);
d1446 1
a1446 1
    stringBuffer.append(TEXT_372);
d1448 1
a1448 1
    stringBuffer.append(TEXT_373);
d1450 1
a1450 1
    stringBuffer.append(TEXT_374);
d1452 1
a1452 1
    stringBuffer.append(TEXT_375);
d1454 1
a1454 1
    stringBuffer.append(TEXT_376);
d1456 1
a1456 1
    stringBuffer.append(TEXT_377);
d1458 1
a1458 1
    stringBuffer.append(TEXT_378);
d1460 1
a1460 1
    stringBuffer.append(TEXT_379);
d1462 1
a1462 1
    stringBuffer.append(TEXT_380);
d1466 1
a1466 1
    stringBuffer.append(TEXT_381);
d1468 1
a1468 1
    stringBuffer.append(TEXT_382);
d1470 1
a1470 1
    stringBuffer.append(TEXT_383);
d1472 1
a1472 1
    stringBuffer.append(TEXT_384);
@


1.19
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d192 165
a356 165
  protected final String TEXT_172 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_173 = NL;
  protected final String TEXT_174 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_175 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_176 = NL;
  protected final String TEXT_177 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_178 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_179 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_180 = " bendpoints = (";
  protected final String TEXT_181 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_182 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_183 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_184 = " figureConstraint = new ";
  protected final String TEXT_185 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_186 = " wbp = (";
  protected final String TEXT_187 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_188 = " rbp = new ";
  protected final String TEXT_189 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_190 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_191 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_192 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_193 = " createFigure() {";
  protected final String TEXT_194 = NL + "\t\treturn new ";
  protected final String TEXT_195 = "();";
  protected final String TEXT_196 = NL + "\t\treturn ";
  protected final String TEXT_197 = ";";
  protected final String TEXT_198 = NL + " \t\treturn new ";
  protected final String TEXT_199 = "();";
  protected final String TEXT_200 = NL + "\t}" + NL;
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = NL;
  protected final String TEXT_203 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_204 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_205 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramEdge(), ";
  protected final String TEXT_206 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_207 = NL;
  protected final String TEXT_208 = "\t\tinstallEditPolicy(";
  protected final String TEXT_209 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_210 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_211 = " createDeleteCommand(";
  protected final String TEXT_212 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_213 = " editingDomain = ";
  protected final String TEXT_214 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_215 = " cc = new ";
  protected final String TEXT_216 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_217 = "(source.getDiagram(), edgeToRemove));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_218 = "(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = NL + "\t\t\tprivate ";
  protected final String TEXT_221 = " createDomainModelRemoveCommand(";
  protected final String TEXT_222 = " editingDomain) {";
  protected final String TEXT_223 = NL + "\t\t\t\t";
  protected final String TEXT_224 = " result = new ";
  protected final String TEXT_225 = "();";
  protected final String TEXT_226 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_227 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_228 = ".getElement().eContainer(), ";
  protected final String TEXT_229 = ".eINSTANCE.get";
  protected final String TEXT_230 = "(), ";
  protected final String TEXT_231 = ".getElement()));";
  protected final String TEXT_232 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_233 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_234 = ".getElement().eContainer(), ";
  protected final String TEXT_235 = ".eINSTANCE.get";
  protected final String TEXT_236 = "(), ";
  protected final String TEXT_237 = ".UNSET_VALUE));";
  protected final String TEXT_238 = NL + "\t\t\t\treturn ";
  protected final String TEXT_239 = ".INSTANCE;";
  protected final String TEXT_240 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_241 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_242 = ".getElement().eContainer(), ";
  protected final String TEXT_243 = ".eINSTANCE.get";
  protected final String TEXT_244 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_245 = ".getElement()));";
  protected final String TEXT_246 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_247 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_248 = ".getElement().eContainer(), ";
  protected final String TEXT_249 = ".eINSTANCE.get";
  protected final String TEXT_250 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_251 = ".UNSET_VALUE));";
  protected final String TEXT_252 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_253 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_254 = ".getElement(), ";
  protected final String TEXT_255 = ".eINSTANCE.get";
  protected final String TEXT_256 = "(), ";
  protected final String TEXT_257 = ".getSource().getElement()));";
  protected final String TEXT_258 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_259 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_260 = ".getElement(), ";
  protected final String TEXT_261 = ".eINSTANCE.get";
  protected final String TEXT_262 = "(), ";
  protected final String TEXT_263 = ".UNSET_VALUE));";
  protected final String TEXT_264 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_265 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_266 = ".getElement(), ";
  protected final String TEXT_267 = ".eINSTANCE.get";
  protected final String TEXT_268 = "(), ";
  protected final String TEXT_269 = ".getTarget().getElement()));";
  protected final String TEXT_270 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_271 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_272 = ".getElement(), ";
  protected final String TEXT_273 = ".eINSTANCE.get";
  protected final String TEXT_274 = "(), ";
  protected final String TEXT_275 = ".UNSET_VALUE));";
  protected final String TEXT_276 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_277 = NL + "\t\t\t\treturn ";
  protected final String TEXT_278 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_279 = ".getSource().getElement(), ";
  protected final String TEXT_280 = ".eINSTANCE.get";
  protected final String TEXT_281 = "(), ";
  protected final String TEXT_282 = ".getTarget().getElement());";
  protected final String TEXT_283 = NL + "\t\t\t\treturn ";
  protected final String TEXT_284 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_285 = ".getSource().getElement(), ";
  protected final String TEXT_286 = ".eINSTANCE.get";
  protected final String TEXT_287 = "(), ";
  protected final String TEXT_288 = ".UNSET_VALUE);";
  protected final String TEXT_289 = NL + "\t\t\t}";
  protected final String TEXT_290 = NL + "\t\t});";
  protected final String TEXT_291 = NL;
  protected final String TEXT_292 = "\t\tinstallEditPolicy(";
  protected final String TEXT_293 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_294 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_295 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_296 = NL;
  protected final String TEXT_297 = "\t\t\t\t\tprotected ";
  protected final String TEXT_298 = " getDirectEditCommand(";
  protected final String TEXT_299 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_300 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_301 = "(";
  protected final String TEXT_302 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_303 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_304 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_305 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_306 = " editingDomain = ";
  protected final String TEXT_307 = ".getEditingDomain(";
  protected final String TEXT_308 = ".getDiagram().getElement());";
  protected final String TEXT_309 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_310 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_311 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_312 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_313 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_314 = " createDomainModelCommand(";
  protected final String TEXT_315 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_316 = " element = ";
  protected final String TEXT_317 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_318 = " result = new ";
  protected final String TEXT_319 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_320 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_321 = " ";
  protected final String TEXT_322 = "feature = (";
  protected final String TEXT_323 = ") ";
  protected final String TEXT_324 = ".eINSTANCE.get";
  protected final String TEXT_325 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_326 = ".parseValue(feature, values[";
  protected final String TEXT_327 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_328 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_329 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_330 = " ";
  protected final String TEXT_331 = "values = new ";
  protected final String TEXT_332 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_333 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_334 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_335 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_336 = NL + "\t\t\t\t\t\tresult.append(";
d358 18
a375 18
  protected final String TEXT_338 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_339 = NL + "\t\t\t\t});";
  protected final String TEXT_340 = NL + "\t\t}" + NL;
  protected final String TEXT_341 = NL;
  protected final String TEXT_342 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_343 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_344 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_345 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_346 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_347 = "(this, ";
  protected final String TEXT_348 = ".class, new ";
  protected final String TEXT_349 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_350 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_351 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_352 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_353 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_354 = NL;
  protected final String TEXT_355 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
d377 28
a404 26
  protected final String TEXT_357 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_358 = " domainModelRefresher = new ";
  protected final String TEXT_359 = "(this);" + NL;
  protected final String TEXT_360 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_361 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_362 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_363 = ".eINSTANCE.get";
  protected final String TEXT_364 = "(), labelRefresher);";
  protected final String TEXT_365 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_366 = ".eINSTANCE.get";
  protected final String TEXT_367 = "(), labelRefresher);";
  protected final String TEXT_368 = NL + "\t\t}" + NL;
  protected final String TEXT_369 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_370 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_371 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_372 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_373 = " nextChild = (";
  protected final String TEXT_374 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_375 = ".getVisualID(nextChild) == ";
  protected final String TEXT_376 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_377 = ") ";
  protected final String TEXT_378 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_379 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_380 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_381 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_382 = NL;
d870 1
d872 1
a873 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d876 1
d878 2
d881 1
a881 1
    stringBuffer.append(TEXT_178);
d883 1
a883 1
    stringBuffer.append(TEXT_179);
d885 1
a885 1
    stringBuffer.append(TEXT_180);
d887 1
a887 1
    stringBuffer.append(TEXT_181);
d889 1
a889 1
    stringBuffer.append(TEXT_182);
d891 1
a891 1
    stringBuffer.append(TEXT_183);
d893 1
a893 1
    stringBuffer.append(TEXT_184);
d895 1
a895 1
    stringBuffer.append(TEXT_185);
d897 1
a897 1
    stringBuffer.append(TEXT_186);
d899 1
a899 1
    stringBuffer.append(TEXT_187);
d901 1
a901 1
    stringBuffer.append(TEXT_188);
d903 1
a903 1
    stringBuffer.append(TEXT_189);
d905 1
a905 1
    stringBuffer.append(TEXT_190);
d907 1
a907 1
    stringBuffer.append(TEXT_191);
d909 1
a909 1
    stringBuffer.append(TEXT_192);
d911 1
a911 1
    stringBuffer.append(TEXT_193);
d921 1
a921 1
    stringBuffer.append(TEXT_194);
d923 1
a923 1
    stringBuffer.append(TEXT_195);
d926 1
a926 1
    stringBuffer.append(TEXT_196);
d928 1
a928 1
    stringBuffer.append(TEXT_197);
d931 1
a931 1
    stringBuffer.append(TEXT_198);
d933 1
a933 1
    stringBuffer.append(TEXT_199);
d935 1
a935 1
    stringBuffer.append(TEXT_200);
d940 1
a940 1
    stringBuffer.append(TEXT_201);
d942 1
a942 1
    stringBuffer.append(TEXT_202);
d946 1
a946 1
    stringBuffer.append(TEXT_203);
d953 1
a953 1
    stringBuffer.append(TEXT_204);
d955 1
a955 1
    stringBuffer.append(TEXT_205);
a956 2
    stringBuffer.append(TEXT_206);
    stringBuffer.append(TEXT_207);
d958 2
d961 1
a961 1
    stringBuffer.append(TEXT_209);
d963 1
a963 1
    stringBuffer.append(TEXT_210);
d965 1
a965 1
    stringBuffer.append(TEXT_211);
d967 1
a967 1
    stringBuffer.append(TEXT_212);
d969 1
a969 1
    stringBuffer.append(TEXT_213);
d971 1
a971 1
    stringBuffer.append(TEXT_214);
d973 1
a973 1
    stringBuffer.append(TEXT_215);
d975 1
a975 1
    stringBuffer.append(TEXT_216);
d977 1
a977 1
    stringBuffer.append(TEXT_217);
d979 1
a979 1
    stringBuffer.append(TEXT_218);
d984 1
a984 1
    stringBuffer.append(TEXT_219);
d988 1
a988 1
    stringBuffer.append(TEXT_220);
d990 1
a990 1
    stringBuffer.append(TEXT_221);
d992 1
a992 1
    stringBuffer.append(TEXT_222);
d1019 1
a1019 1
    stringBuffer.append(TEXT_223);
d1021 1
a1021 1
    stringBuffer.append(TEXT_224);
d1023 1
a1023 1
    stringBuffer.append(TEXT_225);
d1027 1
a1027 1
    stringBuffer.append(TEXT_226);
d1029 1
a1029 1
    stringBuffer.append(TEXT_227);
d1031 1
a1031 1
    stringBuffer.append(TEXT_228);
d1033 1
a1033 1
    stringBuffer.append(TEXT_229);
d1035 1
a1035 1
    stringBuffer.append(TEXT_230);
d1037 1
a1037 1
    stringBuffer.append(TEXT_231);
d1041 1
a1041 1
    stringBuffer.append(TEXT_232);
d1043 1
a1043 1
    stringBuffer.append(TEXT_233);
d1045 1
a1045 1
    stringBuffer.append(TEXT_234);
d1047 1
a1047 1
    stringBuffer.append(TEXT_235);
d1049 1
a1049 1
    stringBuffer.append(TEXT_236);
d1051 1
a1051 1
    stringBuffer.append(TEXT_237);
d1056 1
a1056 1
    stringBuffer.append(TEXT_238);
d1058 1
a1058 1
    stringBuffer.append(TEXT_239);
d1064 1
a1064 1
    stringBuffer.append(TEXT_240);
d1066 1
a1066 1
    stringBuffer.append(TEXT_241);
d1068 1
a1068 1
    stringBuffer.append(TEXT_242);
d1070 1
a1070 1
    stringBuffer.append(TEXT_243);
d1072 1
a1072 1
    stringBuffer.append(TEXT_244);
d1074 1
a1074 1
    stringBuffer.append(TEXT_245);
d1078 1
a1078 1
    stringBuffer.append(TEXT_246);
d1080 1
a1080 1
    stringBuffer.append(TEXT_247);
d1082 1
a1082 1
    stringBuffer.append(TEXT_248);
d1084 1
a1084 1
    stringBuffer.append(TEXT_249);
d1086 1
a1086 1
    stringBuffer.append(TEXT_250);
d1088 1
a1088 1
    stringBuffer.append(TEXT_251);
d1095 1
a1095 1
    stringBuffer.append(TEXT_252);
d1097 1
a1097 1
    stringBuffer.append(TEXT_253);
d1099 1
a1099 1
    stringBuffer.append(TEXT_254);
d1101 1
a1101 1
    stringBuffer.append(TEXT_255);
d1103 1
a1103 1
    stringBuffer.append(TEXT_256);
d1105 1
a1105 1
    stringBuffer.append(TEXT_257);
d1109 1
a1109 1
    stringBuffer.append(TEXT_258);
d1111 1
a1111 1
    stringBuffer.append(TEXT_259);
d1113 1
a1113 1
    stringBuffer.append(TEXT_260);
d1115 1
a1115 1
    stringBuffer.append(TEXT_261);
d1117 1
a1117 1
    stringBuffer.append(TEXT_262);
d1119 1
a1119 1
    stringBuffer.append(TEXT_263);
d1126 1
a1126 1
    stringBuffer.append(TEXT_264);
d1128 1
a1128 1
    stringBuffer.append(TEXT_265);
d1130 1
a1130 1
    stringBuffer.append(TEXT_266);
d1132 1
a1132 1
    stringBuffer.append(TEXT_267);
d1134 1
a1134 1
    stringBuffer.append(TEXT_268);
d1136 1
a1136 1
    stringBuffer.append(TEXT_269);
d1140 1
a1140 1
    stringBuffer.append(TEXT_270);
d1142 1
a1142 1
    stringBuffer.append(TEXT_271);
d1144 1
a1144 1
    stringBuffer.append(TEXT_272);
d1146 1
a1146 1
    stringBuffer.append(TEXT_273);
d1148 1
a1148 1
    stringBuffer.append(TEXT_274);
d1150 1
a1150 1
    stringBuffer.append(TEXT_275);
d1155 1
a1155 1
    stringBuffer.append(TEXT_276);
d1161 1
a1161 1
    stringBuffer.append(TEXT_277);
d1163 1
a1163 1
    stringBuffer.append(TEXT_278);
d1165 1
a1165 1
    stringBuffer.append(TEXT_279);
d1167 1
a1167 1
    stringBuffer.append(TEXT_280);
d1169 1
a1169 1
    stringBuffer.append(TEXT_281);
d1171 1
a1171 1
    stringBuffer.append(TEXT_282);
d1175 1
a1175 1
    stringBuffer.append(TEXT_283);
d1177 1
a1177 1
    stringBuffer.append(TEXT_284);
d1179 1
a1179 1
    stringBuffer.append(TEXT_285);
d1181 1
a1181 1
    stringBuffer.append(TEXT_286);
d1183 1
a1183 1
    stringBuffer.append(TEXT_287);
d1185 1
a1185 1
    stringBuffer.append(TEXT_288);
d1192 1
a1192 1
    stringBuffer.append(TEXT_289);
d1196 1
a1196 1
    stringBuffer.append(TEXT_290);
a1205 3
    stringBuffer.append(TEXT_291);
    stringBuffer.append(TEXT_292);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a1206 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
d1208 1
a1208 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1210 1
d1212 1
a1213 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a1214 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1216 1
a1216 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1218 1
a1218 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d1220 1
a1220 1
    stringBuffer.append(editPatternCode);
d1222 1
a1222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1224 1
a1224 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d1228 4
d1233 1
a1233 1
    stringBuffer.append(TEXT_306);
d1235 1
a1235 1
    stringBuffer.append(TEXT_307);
d1237 1
a1237 1
    stringBuffer.append(TEXT_308);
d1243 1
a1243 1
    stringBuffer.append(TEXT_309);
d1245 1
a1245 1
    stringBuffer.append(TEXT_310);
d1247 1
a1247 1
    stringBuffer.append(TEXT_311);
d1249 1
a1249 1
    stringBuffer.append(TEXT_312);
d1251 1
a1251 1
    stringBuffer.append(TEXT_313);
d1253 1
a1253 1
    stringBuffer.append(TEXT_314);
d1255 1
a1255 1
    stringBuffer.append(TEXT_315);
d1257 1
a1257 1
    stringBuffer.append(TEXT_316);
d1259 1
a1259 1
    stringBuffer.append(TEXT_317);
d1261 1
a1261 1
    stringBuffer.append(TEXT_318);
d1263 1
a1263 1
    stringBuffer.append(TEXT_319);
d1270 1
a1270 1
    stringBuffer.append(TEXT_320);
d1273 1
a1273 1
    stringBuffer.append(TEXT_321);
d1275 1
a1275 1
    stringBuffer.append(TEXT_322);
d1277 1
a1277 1
    stringBuffer.append(TEXT_323);
d1279 1
a1279 1
    stringBuffer.append(TEXT_324);
d1281 1
a1281 1
    stringBuffer.append(TEXT_325);
d1283 1
a1283 1
    stringBuffer.append(TEXT_326);
d1285 1
a1285 1
    stringBuffer.append(TEXT_327);
d1287 1
a1287 1
    stringBuffer.append(TEXT_328);
d1291 1
a1291 1
    stringBuffer.append(TEXT_329);
d1294 1
a1294 1
    stringBuffer.append(TEXT_330);
d1296 1
a1296 1
    stringBuffer.append(TEXT_331);
d1298 1
a1298 1
    stringBuffer.append(TEXT_332);
d1300 1
a1300 1
    stringBuffer.append(TEXT_333);
d1302 1
a1302 1
    stringBuffer.append(TEXT_334);
d1304 1
a1304 1
    stringBuffer.append(TEXT_335);
d1308 1
a1308 1
    stringBuffer.append(TEXT_336);
d1310 1
a1310 1
    stringBuffer.append(TEXT_337);
d1317 1
a1317 1
    stringBuffer.append(TEXT_338);
d1321 1
a1321 1
    stringBuffer.append(TEXT_339);
d1325 1
a1325 1
    stringBuffer.append(TEXT_340);
d1329 2
a1330 2
    stringBuffer.append(TEXT_341);
    stringBuffer.append(TEXT_342);
d1332 1
a1332 1
    stringBuffer.append(TEXT_343);
d1334 1
a1334 1
    stringBuffer.append(TEXT_344);
d1336 1
a1336 1
    stringBuffer.append(TEXT_345);
d1338 1
a1338 1
    stringBuffer.append(TEXT_346);
d1340 1
a1340 1
    stringBuffer.append(TEXT_347);
d1342 1
a1342 1
    stringBuffer.append(TEXT_348);
d1344 1
a1344 1
    stringBuffer.append(TEXT_349);
d1346 1
a1346 1
    stringBuffer.append(TEXT_350);
d1348 1
a1348 1
    stringBuffer.append(TEXT_351);
d1350 1
a1350 1
    stringBuffer.append(TEXT_352);
d1352 1
a1352 1
    stringBuffer.append(TEXT_353);
d1356 1
a1356 1
    stringBuffer.append(TEXT_354);
a1360 2
    stringBuffer.append(TEXT_355);
    stringBuffer.append(TEXT_356);
d1362 2
d1365 1
a1365 1
    stringBuffer.append(TEXT_358);
d1367 1
a1367 1
    stringBuffer.append(TEXT_359);
d1371 1
a1371 1
    stringBuffer.append(TEXT_360);
d1376 1
a1376 1
    stringBuffer.append(TEXT_361);
d1385 1
a1385 1
    stringBuffer.append(TEXT_362);
d1387 1
a1387 1
    stringBuffer.append(TEXT_363);
d1389 1
a1389 1
    stringBuffer.append(TEXT_364);
d1399 1
a1399 1
    stringBuffer.append(TEXT_365);
d1401 1
a1401 1
    stringBuffer.append(TEXT_366);
d1403 1
a1403 1
    stringBuffer.append(TEXT_367);
d1409 1
a1409 1
    stringBuffer.append(TEXT_368);
d1413 1
a1413 1
    stringBuffer.append(TEXT_369);
d1415 1
a1415 1
    stringBuffer.append(TEXT_370);
d1417 1
a1417 1
    stringBuffer.append(TEXT_371);
d1419 1
a1419 1
    stringBuffer.append(TEXT_372);
d1421 1
a1421 1
    stringBuffer.append(TEXT_373);
d1423 1
a1423 1
    stringBuffer.append(TEXT_374);
d1425 1
a1425 1
    stringBuffer.append(TEXT_375);
d1427 1
a1427 1
    stringBuffer.append(TEXT_376);
d1429 1
a1429 1
    stringBuffer.append(TEXT_377);
d1431 1
a1431 1
    stringBuffer.append(TEXT_378);
d1435 1
a1435 1
    stringBuffer.append(TEXT_379);
d1437 1
a1437 1
    stringBuffer.append(TEXT_380);
d1439 1
a1439 1
    stringBuffer.append(TEXT_381);
d1441 1
a1441 1
    stringBuffer.append(TEXT_382);
@


1.18
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d54 1
a54 1
  protected final String TEXT_34 = "() {" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\treturn new ";
d132 1
a132 1
  protected final String TEXT_112 = NL + "\t\t//This edit part understands the direct edit request and delegates it to the appropriate label, so no command is needed here." + NL + "\t\tinstallEditPolicy(";
d134 62
a195 62
  protected final String TEXT_114 = "() {" + NL + "\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_115 = " request) {" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_116 = " getDirectEditCommand(";
  protected final String TEXT_117 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_118 = NL;
  protected final String TEXT_119 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_120 = "\", new ";
  protected final String TEXT_121 = "()); //$NON-NLS-1$";
  protected final String TEXT_122 = NL;
  protected final String TEXT_123 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_124 = ".OPEN_ROLE";
  protected final String TEXT_125 = " + \"";
  protected final String TEXT_126 = "\" ";
  protected final String TEXT_127 = ", new ";
  protected final String TEXT_128 = "());";
  protected final String TEXT_129 = NL + "\t}" + NL;
  protected final String TEXT_130 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_131 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_132 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_133 = " nextChild = (";
  protected final String TEXT_134 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_135 = ".getVisualID(nextChild) == ";
  protected final String TEXT_136 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_137 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_138 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_139 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_140 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_141 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_142 = NL;
  protected final String TEXT_143 = "if (";
  protected final String TEXT_144 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_145 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_146 = " getLabelEditPart(";
  protected final String TEXT_147 = " req) {" + NL + "\t\t";
  protected final String TEXT_148 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_149 = " view = (";
  protected final String TEXT_150 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_151 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_152 = NL + "\t\t\t\tcase ";
  protected final String TEXT_153 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_154 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_155 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_158 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_159 = " feature, ";
  protected final String TEXT_160 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_161 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL;
  protected final String TEXT_162 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_163 = NL;
  protected final String TEXT_164 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_165 = " domainModelRefresher = new ";
  protected final String TEXT_166 = "(this);" + NL;
  protected final String TEXT_167 = NL;
  protected final String TEXT_168 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_169 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_170 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_171 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_172 = NL;
  protected final String TEXT_173 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_174 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_175 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d197 188
a384 188
  protected final String TEXT_177 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_178 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_179 = NL;
  protected final String TEXT_180 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_181 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_182 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_183 = " bendpoints = (";
  protected final String TEXT_184 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_185 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_186 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_187 = " figureConstraint = new ";
  protected final String TEXT_188 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_189 = " wbp = (";
  protected final String TEXT_190 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_191 = " rbp = new ";
  protected final String TEXT_192 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_193 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_194 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_195 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_196 = " createFigure() {";
  protected final String TEXT_197 = NL + "\t\treturn new ";
  protected final String TEXT_198 = "();";
  protected final String TEXT_199 = NL + "\t\treturn ";
  protected final String TEXT_200 = ";";
  protected final String TEXT_201 = NL + " \t\treturn new ";
  protected final String TEXT_202 = "();";
  protected final String TEXT_203 = NL + "\t}" + NL;
  protected final String TEXT_204 = NL;
  protected final String TEXT_205 = NL;
  protected final String TEXT_206 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_207 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_208 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramEdge(), ";
  protected final String TEXT_209 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_210 = NL;
  protected final String TEXT_211 = "\t\tinstallEditPolicy(";
  protected final String TEXT_212 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_213 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_214 = " createDeleteCommand(";
  protected final String TEXT_215 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_216 = " editingDomain = ";
  protected final String TEXT_217 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_218 = " cc = new ";
  protected final String TEXT_219 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_220 = "() {" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_221 = "(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_222 = NL;
  protected final String TEXT_223 = NL + "\t\t\tprivate ";
  protected final String TEXT_224 = " createDomainModelRemoveCommand(";
  protected final String TEXT_225 = " editingDomain) {";
  protected final String TEXT_226 = NL + "\t\t\t\t";
  protected final String TEXT_227 = " result = new ";
  protected final String TEXT_228 = "();";
  protected final String TEXT_229 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_230 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_231 = ".getElement().eContainer(), ";
  protected final String TEXT_232 = ".eINSTANCE.get";
  protected final String TEXT_233 = "(), ";
  protected final String TEXT_234 = ".getElement()));";
  protected final String TEXT_235 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_236 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_237 = ".getElement().eContainer(), ";
  protected final String TEXT_238 = ".eINSTANCE.get";
  protected final String TEXT_239 = "(), ";
  protected final String TEXT_240 = ".UNSET_VALUE));";
  protected final String TEXT_241 = NL + "\t\t\t\treturn ";
  protected final String TEXT_242 = ".INSTANCE;";
  protected final String TEXT_243 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_244 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_245 = ".getElement().eContainer(), ";
  protected final String TEXT_246 = ".eINSTANCE.get";
  protected final String TEXT_247 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_248 = ".getElement()));";
  protected final String TEXT_249 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_250 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_251 = ".getElement().eContainer(), ";
  protected final String TEXT_252 = ".eINSTANCE.get";
  protected final String TEXT_253 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_254 = ".UNSET_VALUE));";
  protected final String TEXT_255 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_256 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_257 = ".getElement(), ";
  protected final String TEXT_258 = ".eINSTANCE.get";
  protected final String TEXT_259 = "(), ";
  protected final String TEXT_260 = ".getSource().getElement()));";
  protected final String TEXT_261 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_262 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_263 = ".getElement(), ";
  protected final String TEXT_264 = ".eINSTANCE.get";
  protected final String TEXT_265 = "(), ";
  protected final String TEXT_266 = ".UNSET_VALUE));";
  protected final String TEXT_267 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_268 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_269 = ".getElement(), ";
  protected final String TEXT_270 = ".eINSTANCE.get";
  protected final String TEXT_271 = "(), ";
  protected final String TEXT_272 = ".getTarget().getElement()));";
  protected final String TEXT_273 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_274 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_275 = ".getElement(), ";
  protected final String TEXT_276 = ".eINSTANCE.get";
  protected final String TEXT_277 = "(), ";
  protected final String TEXT_278 = ".UNSET_VALUE));";
  protected final String TEXT_279 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_280 = NL + "\t\t\t\treturn ";
  protected final String TEXT_281 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_282 = ".getSource().getElement(), ";
  protected final String TEXT_283 = ".eINSTANCE.get";
  protected final String TEXT_284 = "(), ";
  protected final String TEXT_285 = ".getTarget().getElement());";
  protected final String TEXT_286 = NL + "\t\t\t\treturn ";
  protected final String TEXT_287 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_288 = ".getSource().getElement(), ";
  protected final String TEXT_289 = ".eINSTANCE.get";
  protected final String TEXT_290 = "(), ";
  protected final String TEXT_291 = ".UNSET_VALUE);";
  protected final String TEXT_292 = NL + "\t\t\t}";
  protected final String TEXT_293 = NL + "\t\t});";
  protected final String TEXT_294 = NL;
  protected final String TEXT_295 = "\t\tinstallEditPolicy(";
  protected final String TEXT_296 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_297 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_298 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_299 = NL;
  protected final String TEXT_300 = "\t\t\t\t\tprotected ";
  protected final String TEXT_301 = " getDirectEditCommand(";
  protected final String TEXT_302 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_303 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_304 = "(";
  protected final String TEXT_305 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_306 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_307 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_308 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_309 = " editingDomain = ";
  protected final String TEXT_310 = ".getEditingDomain(";
  protected final String TEXT_311 = ".getDiagram().getElement());";
  protected final String TEXT_312 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_313 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_314 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_315 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_316 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_317 = " createDomainModelCommand(";
  protected final String TEXT_318 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_319 = " element = ";
  protected final String TEXT_320 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_321 = " result = new ";
  protected final String TEXT_322 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_323 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_324 = " ";
  protected final String TEXT_325 = "feature = (";
  protected final String TEXT_326 = ") ";
  protected final String TEXT_327 = ".eINSTANCE.get";
  protected final String TEXT_328 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_329 = ".parseValue(feature, values[";
  protected final String TEXT_330 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_331 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_332 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_333 = " ";
  protected final String TEXT_334 = "values = new ";
  protected final String TEXT_335 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_336 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_337 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_338 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_339 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_340 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_341 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_342 = NL + "\t\t\t\t});";
  protected final String TEXT_343 = NL + "\t\t}" + NL;
  protected final String TEXT_344 = NL;
  protected final String TEXT_345 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_346 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_347 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_348 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_349 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_350 = "(this, ";
  protected final String TEXT_351 = ".class, new ";
  protected final String TEXT_352 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_353 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_354 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_355 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_356 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_357 = NL;
  protected final String TEXT_358 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_359 = NL;
  protected final String TEXT_360 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_361 = " domainModelRefresher = new ";
  protected final String TEXT_362 = "(this);" + NL;
  protected final String TEXT_363 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_364 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
d388 15
a402 18
  protected final String TEXT_368 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_369 = ".eINSTANCE.get";
  protected final String TEXT_370 = "(), labelRefresher);";
  protected final String TEXT_371 = NL + "\t\t}" + NL;
  protected final String TEXT_372 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_373 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_374 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_375 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_376 = " nextChild = (";
  protected final String TEXT_377 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_378 = ".getVisualID(nextChild) == ";
  protected final String TEXT_379 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_380 = ") ";
  protected final String TEXT_381 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_382 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_383 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_384 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_385 = NL;
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d726 1
a726 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
a727 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_117);
d733 1
a733 1
    stringBuffer.append(TEXT_118);
d737 1
a737 1
    stringBuffer.append(TEXT_119);
d739 1
a739 1
    stringBuffer.append(TEXT_120);
d741 1
a741 1
    stringBuffer.append(TEXT_121);
d743 1
a743 1
    stringBuffer.append(TEXT_122);
d751 1
a751 1
    stringBuffer.append(TEXT_123);
d753 1
a753 1
    stringBuffer.append(TEXT_124);
d755 1
a755 1
    stringBuffer.append(TEXT_125);
d757 1
a757 1
    stringBuffer.append(TEXT_126);
d759 1
a759 1
    stringBuffer.append(TEXT_127);
d761 1
a761 1
    stringBuffer.append(TEXT_128);
d767 1
a767 1
    stringBuffer.append(TEXT_129);
d771 6
d778 1
a778 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d780 1
a780 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d782 1
a782 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d784 1
a784 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d786 1
a786 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d788 1
a788 1
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
d790 1
a790 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d792 1
a792 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
a793 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a794 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d796 1
a796 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d798 1
d800 1
d802 1
a802 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d804 1
a804 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d806 1
a806 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d808 1
a808 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d810 1
a810 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a811 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_151);
d819 1
a819 1
    stringBuffer.append(TEXT_152);
d821 1
a821 1
    stringBuffer.append(TEXT_153);
d825 1
a825 1
    stringBuffer.append(TEXT_154);
d829 4
d834 1
d836 1
d838 1
a838 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a839 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.TreeEditPart"));
    stringBuffer.append(TEXT_161);
d844 4
d849 1
d851 3
a854 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d856 1
a856 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d858 1
a858 3
    
}

d860 1
a861 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a862 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d864 1
a864 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d866 1
a868 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d876 1
d878 1
d880 1
a880 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d882 1
a882 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d884 1
a884 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints"));
d886 1
a886 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints"));
d888 1
a888 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d890 1
a890 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d892 1
a892 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d894 1
a894 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d896 1
a896 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint"));
d898 1
a898 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint"));
d900 1
a900 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint"));
d902 1
a902 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint"));
d904 1
a904 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
a905 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.BendpointConnectionRouter"));
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_196);
d915 1
a915 1
    stringBuffer.append(TEXT_197);
d917 1
a917 1
    stringBuffer.append(TEXT_198);
d920 1
a920 1
    stringBuffer.append(TEXT_199);
d922 1
a922 1
    stringBuffer.append(TEXT_200);
d925 1
a925 1
    stringBuffer.append(TEXT_201);
d927 1
a927 1
    stringBuffer.append(TEXT_202);
d929 1
a929 1
    stringBuffer.append(TEXT_203);
d934 1
a934 1
    stringBuffer.append(TEXT_204);
d936 1
a936 1
    stringBuffer.append(TEXT_205);
d940 1
a940 1
    stringBuffer.append(TEXT_206);
d947 5
a952 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
d954 1
a954 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d956 1
d958 1
d960 1
a960 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d962 1
a962 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
d964 1
a964 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d966 1
a966 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
d968 1
a968 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d970 1
a970 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d972 1
a972 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
a973 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_221);
d978 1
a978 1
    stringBuffer.append(TEXT_222);
d982 1
a982 1
    stringBuffer.append(TEXT_223);
d984 1
a984 1
    stringBuffer.append(TEXT_224);
d986 1
a986 1
    stringBuffer.append(TEXT_225);
d1013 1
a1013 1
    stringBuffer.append(TEXT_226);
d1015 1
a1015 1
    stringBuffer.append(TEXT_227);
d1017 1
a1017 1
    stringBuffer.append(TEXT_228);
d1021 1
a1021 1
    stringBuffer.append(TEXT_229);
d1023 1
a1023 1
    stringBuffer.append(TEXT_230);
d1025 1
a1025 1
    stringBuffer.append(TEXT_231);
d1027 1
a1027 1
    stringBuffer.append(TEXT_232);
d1029 1
a1029 1
    stringBuffer.append(TEXT_233);
d1031 1
a1031 1
    stringBuffer.append(TEXT_234);
d1035 1
a1035 1
    stringBuffer.append(TEXT_235);
d1037 1
a1037 1
    stringBuffer.append(TEXT_236);
d1039 1
a1039 1
    stringBuffer.append(TEXT_237);
d1041 1
a1041 1
    stringBuffer.append(TEXT_238);
d1043 1
a1043 1
    stringBuffer.append(TEXT_239);
d1045 1
a1045 1
    stringBuffer.append(TEXT_240);
d1050 1
a1050 1
    stringBuffer.append(TEXT_241);
d1052 1
a1052 1
    stringBuffer.append(TEXT_242);
d1058 1
a1058 1
    stringBuffer.append(TEXT_243);
d1060 1
a1060 1
    stringBuffer.append(TEXT_244);
d1062 1
a1062 1
    stringBuffer.append(TEXT_245);
d1064 1
a1064 1
    stringBuffer.append(TEXT_246);
d1066 1
a1066 1
    stringBuffer.append(TEXT_247);
d1068 1
a1068 1
    stringBuffer.append(TEXT_248);
d1072 1
a1072 1
    stringBuffer.append(TEXT_249);
d1074 1
a1074 1
    stringBuffer.append(TEXT_250);
d1076 1
a1076 1
    stringBuffer.append(TEXT_251);
d1078 1
a1078 1
    stringBuffer.append(TEXT_252);
d1080 1
a1080 1
    stringBuffer.append(TEXT_253);
d1082 1
a1082 1
    stringBuffer.append(TEXT_254);
d1089 1
a1089 1
    stringBuffer.append(TEXT_255);
d1091 1
a1091 1
    stringBuffer.append(TEXT_256);
d1093 1
a1093 1
    stringBuffer.append(TEXT_257);
d1095 1
a1095 1
    stringBuffer.append(TEXT_258);
d1097 1
a1097 1
    stringBuffer.append(TEXT_259);
d1099 1
a1099 1
    stringBuffer.append(TEXT_260);
d1103 1
a1103 1
    stringBuffer.append(TEXT_261);
d1105 1
a1105 1
    stringBuffer.append(TEXT_262);
d1107 1
a1107 1
    stringBuffer.append(TEXT_263);
d1109 1
a1109 1
    stringBuffer.append(TEXT_264);
d1111 1
a1111 1
    stringBuffer.append(TEXT_265);
d1113 1
a1113 1
    stringBuffer.append(TEXT_266);
d1120 1
a1120 1
    stringBuffer.append(TEXT_267);
d1122 1
a1122 1
    stringBuffer.append(TEXT_268);
d1124 1
a1124 1
    stringBuffer.append(TEXT_269);
d1126 1
a1126 1
    stringBuffer.append(TEXT_270);
d1128 1
a1128 1
    stringBuffer.append(TEXT_271);
d1130 1
a1130 1
    stringBuffer.append(TEXT_272);
d1134 1
a1134 1
    stringBuffer.append(TEXT_273);
d1136 1
a1136 1
    stringBuffer.append(TEXT_274);
d1138 1
a1138 1
    stringBuffer.append(TEXT_275);
d1140 1
a1140 1
    stringBuffer.append(TEXT_276);
d1142 1
a1142 1
    stringBuffer.append(TEXT_277);
d1144 1
a1144 1
    stringBuffer.append(TEXT_278);
d1149 1
a1149 1
    stringBuffer.append(TEXT_279);
d1155 1
a1155 1
    stringBuffer.append(TEXT_280);
d1157 1
a1157 1
    stringBuffer.append(TEXT_281);
d1159 1
a1159 1
    stringBuffer.append(TEXT_282);
d1161 1
a1161 1
    stringBuffer.append(TEXT_283);
d1163 1
a1163 1
    stringBuffer.append(TEXT_284);
d1165 1
a1165 1
    stringBuffer.append(TEXT_285);
d1169 1
a1169 1
    stringBuffer.append(TEXT_286);
d1171 1
a1171 1
    stringBuffer.append(TEXT_287);
d1173 1
a1173 1
    stringBuffer.append(TEXT_288);
d1175 1
a1175 1
    stringBuffer.append(TEXT_289);
d1177 1
a1177 1
    stringBuffer.append(TEXT_290);
d1179 1
a1179 1
    stringBuffer.append(TEXT_291);
d1186 1
a1186 1
    stringBuffer.append(TEXT_292);
d1190 1
a1190 1
    stringBuffer.append(TEXT_293);
d1200 5
d1206 1
a1207 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a1208 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
d1210 2
a1212 1
    stringBuffer.append(TEXT_298);
d1214 1
d1216 1
a1216 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1218 1
a1218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1222 1
a1222 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d1224 1
a1224 1
    stringBuffer.append(editPatternCode);
d1226 1
a1226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1228 1
a1228 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d1230 1
a1230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
a1231 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_309);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_310);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_311);
d1237 1
a1237 1
    stringBuffer.append(TEXT_312);
d1239 1
a1239 1
    stringBuffer.append(TEXT_313);
d1241 1
a1241 1
    stringBuffer.append(TEXT_314);
d1243 1
a1243 1
    stringBuffer.append(TEXT_315);
d1245 1
a1245 1
    stringBuffer.append(TEXT_316);
d1247 1
a1247 1
    stringBuffer.append(TEXT_317);
d1249 1
a1249 1
    stringBuffer.append(TEXT_318);
d1251 1
a1251 1
    stringBuffer.append(TEXT_319);
d1253 1
a1253 1
    stringBuffer.append(TEXT_320);
d1255 1
a1255 1
    stringBuffer.append(TEXT_321);
d1257 1
a1257 1
    stringBuffer.append(TEXT_322);
d1264 1
a1264 1
    stringBuffer.append(TEXT_323);
d1267 1
a1267 1
    stringBuffer.append(TEXT_324);
d1269 1
a1269 1
    stringBuffer.append(TEXT_325);
d1271 1
a1271 1
    stringBuffer.append(TEXT_326);
d1273 1
a1273 1
    stringBuffer.append(TEXT_327);
d1275 1
a1275 1
    stringBuffer.append(TEXT_328);
d1277 1
a1277 1
    stringBuffer.append(TEXT_329);
d1279 1
a1279 1
    stringBuffer.append(TEXT_330);
d1281 1
a1281 1
    stringBuffer.append(TEXT_331);
d1285 1
a1285 1
    stringBuffer.append(TEXT_332);
d1288 1
a1288 1
    stringBuffer.append(TEXT_333);
d1290 1
a1290 1
    stringBuffer.append(TEXT_334);
d1292 1
a1292 1
    stringBuffer.append(TEXT_335);
d1294 1
a1294 1
    stringBuffer.append(TEXT_336);
d1296 1
a1296 1
    stringBuffer.append(TEXT_337);
d1298 1
a1298 1
    stringBuffer.append(TEXT_338);
d1302 1
a1302 1
    stringBuffer.append(TEXT_339);
d1304 1
a1304 1
    stringBuffer.append(TEXT_340);
d1311 1
a1311 1
    stringBuffer.append(TEXT_341);
d1315 1
a1315 1
    stringBuffer.append(TEXT_342);
d1319 1
a1319 1
    stringBuffer.append(TEXT_343);
d1323 5
d1329 1
d1333 1
a1333 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d1335 1
a1335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d1337 1
a1337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
d1339 1
a1339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
d1341 1
a1341 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
d1343 1
a1343 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
d1345 1
a1345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
a1346 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
    stringBuffer.append(TEXT_354);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
    stringBuffer.append(TEXT_355);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_356);
d1350 1
a1350 1
    stringBuffer.append(TEXT_357);
d1355 4
d1360 1
a1361 5
    stringBuffer.append(TEXT_360);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_361);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_362);
d1365 1
a1365 1
    stringBuffer.append(TEXT_363);
d1370 1
a1370 1
    stringBuffer.append(TEXT_364);
d1379 1
a1379 1
    stringBuffer.append(TEXT_365);
d1381 1
a1381 1
    stringBuffer.append(TEXT_366);
d1383 1
a1383 1
    stringBuffer.append(TEXT_367);
d1393 1
a1393 1
    stringBuffer.append(TEXT_368);
d1395 1
a1395 1
    stringBuffer.append(TEXT_369);
d1397 1
a1397 1
    stringBuffer.append(TEXT_370);
d1403 1
a1403 1
    stringBuffer.append(TEXT_371);
d1407 1
a1407 1
    stringBuffer.append(TEXT_372);
d1409 1
a1409 1
    stringBuffer.append(TEXT_373);
d1411 1
a1411 1
    stringBuffer.append(TEXT_374);
d1413 1
a1413 1
    stringBuffer.append(TEXT_375);
d1415 1
a1415 1
    stringBuffer.append(TEXT_376);
d1417 1
a1417 1
    stringBuffer.append(TEXT_377);
d1419 1
a1419 1
    stringBuffer.append(TEXT_378);
d1421 1
a1421 1
    stringBuffer.append(TEXT_379);
d1423 1
a1423 1
    stringBuffer.append(TEXT_380);
d1425 1
a1425 1
    stringBuffer.append(TEXT_381);
d1429 1
a1429 1
    stringBuffer.append(TEXT_382);
d1431 1
a1431 1
    stringBuffer.append(TEXT_383);
d1433 1
a1433 1
    stringBuffer.append(TEXT_384);
d1435 1
a1435 1
    stringBuffer.append(TEXT_385);
@


1.17
log
@Fix compilation problems introduced by recent fix of https://bugs.eclipse.org/bugs/show_bug.cgi?id=161380
@
text
@d138 226
a363 226
  protected final String TEXT_118 = NL + "\t}" + NL;
  protected final String TEXT_119 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_120 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_121 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_122 = " nextChild = (";
  protected final String TEXT_123 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_124 = ".getVisualID(nextChild) == ";
  protected final String TEXT_125 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_126 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_127 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_128 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_129 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_130 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_131 = " getLabelEditPart(";
  protected final String TEXT_132 = " req) {" + NL + "\t\t";
  protected final String TEXT_133 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_134 = " view = (";
  protected final String TEXT_135 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_136 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_137 = NL + "\t\t\t\tcase ";
  protected final String TEXT_138 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_139 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_140 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_141 = NL;
  protected final String TEXT_142 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_143 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_144 = " feature, ";
  protected final String TEXT_145 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_146 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL;
  protected final String TEXT_147 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_150 = " domainModelRefresher = new ";
  protected final String TEXT_151 = "(this);" + NL;
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_154 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_155 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_156 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_157 = NL;
  protected final String TEXT_158 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_159 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_160 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_161 = NL;
  protected final String TEXT_162 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_163 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_164 = NL;
  protected final String TEXT_165 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_166 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_167 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_168 = " bendpoints = (";
  protected final String TEXT_169 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_170 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_171 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_172 = " figureConstraint = new ";
  protected final String TEXT_173 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_174 = " wbp = (";
  protected final String TEXT_175 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_176 = " rbp = new ";
  protected final String TEXT_177 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_178 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_179 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_180 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_181 = " createFigure() {";
  protected final String TEXT_182 = NL + "\t\treturn new ";
  protected final String TEXT_183 = "();";
  protected final String TEXT_184 = NL + "\t\treturn ";
  protected final String TEXT_185 = ";";
  protected final String TEXT_186 = NL + " \t\treturn new ";
  protected final String TEXT_187 = "();";
  protected final String TEXT_188 = NL + "\t}" + NL;
  protected final String TEXT_189 = NL;
  protected final String TEXT_190 = NL;
  protected final String TEXT_191 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_192 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_193 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramEdge(), ";
  protected final String TEXT_194 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_195 = NL;
  protected final String TEXT_196 = "\t\tinstallEditPolicy(";
  protected final String TEXT_197 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_198 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_199 = " createDeleteCommand(";
  protected final String TEXT_200 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_201 = " editingDomain = ";
  protected final String TEXT_202 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_203 = " cc = new ";
  protected final String TEXT_204 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_205 = "() {" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_206 = "(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_207 = NL;
  protected final String TEXT_208 = NL + "\t\t\tprivate ";
  protected final String TEXT_209 = " createDomainModelRemoveCommand(";
  protected final String TEXT_210 = " editingDomain) {";
  protected final String TEXT_211 = NL + "\t\t\t\t";
  protected final String TEXT_212 = " result = new ";
  protected final String TEXT_213 = "();";
  protected final String TEXT_214 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_215 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_216 = ".getElement().eContainer(), ";
  protected final String TEXT_217 = ".eINSTANCE.get";
  protected final String TEXT_218 = "(), ";
  protected final String TEXT_219 = ".getElement()));";
  protected final String TEXT_220 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_221 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_222 = ".getElement().eContainer(), ";
  protected final String TEXT_223 = ".eINSTANCE.get";
  protected final String TEXT_224 = "(), ";
  protected final String TEXT_225 = ".UNSET_VALUE));";
  protected final String TEXT_226 = NL + "\t\t\t\treturn ";
  protected final String TEXT_227 = ".INSTANCE;";
  protected final String TEXT_228 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_229 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_230 = ".getElement().eContainer(), ";
  protected final String TEXT_231 = ".eINSTANCE.get";
  protected final String TEXT_232 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_233 = ".getElement()));";
  protected final String TEXT_234 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_235 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_236 = ".getElement().eContainer(), ";
  protected final String TEXT_237 = ".eINSTANCE.get";
  protected final String TEXT_238 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_239 = ".UNSET_VALUE));";
  protected final String TEXT_240 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_241 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_242 = ".getElement(), ";
  protected final String TEXT_243 = ".eINSTANCE.get";
  protected final String TEXT_244 = "(), ";
  protected final String TEXT_245 = ".getSource().getElement()));";
  protected final String TEXT_246 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_247 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_248 = ".getElement(), ";
  protected final String TEXT_249 = ".eINSTANCE.get";
  protected final String TEXT_250 = "(), ";
  protected final String TEXT_251 = ".UNSET_VALUE));";
  protected final String TEXT_252 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_253 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_254 = ".getElement(), ";
  protected final String TEXT_255 = ".eINSTANCE.get";
  protected final String TEXT_256 = "(), ";
  protected final String TEXT_257 = ".getTarget().getElement()));";
  protected final String TEXT_258 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_259 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_260 = ".getElement(), ";
  protected final String TEXT_261 = ".eINSTANCE.get";
  protected final String TEXT_262 = "(), ";
  protected final String TEXT_263 = ".UNSET_VALUE));";
  protected final String TEXT_264 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_265 = NL + "\t\t\t\treturn ";
  protected final String TEXT_266 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_267 = ".getSource().getElement(), ";
  protected final String TEXT_268 = ".eINSTANCE.get";
  protected final String TEXT_269 = "(), ";
  protected final String TEXT_270 = ".getTarget().getElement());";
  protected final String TEXT_271 = NL + "\t\t\t\treturn ";
  protected final String TEXT_272 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_273 = ".getSource().getElement(), ";
  protected final String TEXT_274 = ".eINSTANCE.get";
  protected final String TEXT_275 = "(), ";
  protected final String TEXT_276 = ".UNSET_VALUE);";
  protected final String TEXT_277 = NL + "\t\t\t}";
  protected final String TEXT_278 = NL + "\t\t});";
  protected final String TEXT_279 = NL;
  protected final String TEXT_280 = "\t\tinstallEditPolicy(";
  protected final String TEXT_281 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_282 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_283 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_284 = NL;
  protected final String TEXT_285 = "\t\t\t\t\tprotected ";
  protected final String TEXT_286 = " getDirectEditCommand(";
  protected final String TEXT_287 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_288 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_289 = "(";
  protected final String TEXT_290 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_291 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_292 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_293 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_294 = " editingDomain = ";
  protected final String TEXT_295 = ".getEditingDomain(";
  protected final String TEXT_296 = ".getDiagram().getElement());";
  protected final String TEXT_297 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_298 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_299 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_300 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_301 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_302 = " createDomainModelCommand(";
  protected final String TEXT_303 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_304 = " element = ";
  protected final String TEXT_305 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_306 = " result = new ";
  protected final String TEXT_307 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_308 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_309 = " ";
  protected final String TEXT_310 = "feature = (";
  protected final String TEXT_311 = ") ";
  protected final String TEXT_312 = ".eINSTANCE.get";
  protected final String TEXT_313 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_314 = ".parseValue(feature, values[";
  protected final String TEXT_315 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_316 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_317 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_318 = " ";
  protected final String TEXT_319 = "values = new ";
  protected final String TEXT_320 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_321 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_322 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_323 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_324 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_325 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_326 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_327 = NL + "\t\t\t\t});";
  protected final String TEXT_328 = NL + "\t\t}" + NL;
  protected final String TEXT_329 = NL;
  protected final String TEXT_330 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_331 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_332 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_333 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_334 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_335 = "(this, ";
  protected final String TEXT_336 = ".class, new ";
  protected final String TEXT_337 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_338 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_339 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_340 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_341 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_342 = NL;
  protected final String TEXT_343 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
d366 40
a405 25
  protected final String TEXT_346 = " domainModelRefresher = new ";
  protected final String TEXT_347 = "(this);" + NL;
  protected final String TEXT_348 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_349 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_350 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_351 = ".eINSTANCE.get";
  protected final String TEXT_352 = "(), labelRefresher);";
  protected final String TEXT_353 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_354 = ".eINSTANCE.get";
  protected final String TEXT_355 = "(), labelRefresher);";
  protected final String TEXT_356 = NL + "\t\t}" + NL;
  protected final String TEXT_357 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_358 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_359 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_360 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_361 = " nextChild = (";
  protected final String TEXT_362 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_363 = ".getVisualID(nextChild) == ";
  protected final String TEXT_364 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_365 = ") ";
  protected final String TEXT_366 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_367 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_368 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_369 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_370 = NL;
d740 2
d744 1
a744 1
if (primaryLabel != null) {
d747 1
a747 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d749 1
a749 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d751 1
a751 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d753 7
a759 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d761 1
a761 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d763 1
a763 1
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
d765 1
a765 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d767 1
a767 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d769 1
a769 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d771 5
a775 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d777 3
a779 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d783 1
a783 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d785 1
a785 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d789 26
d816 3
a818 1
    stringBuffer.append(TEXT_135);
d820 1
a820 1
    stringBuffer.append(TEXT_136);
d828 1
a828 1
    stringBuffer.append(TEXT_137);
d830 1
a830 1
    stringBuffer.append(TEXT_138);
d834 1
a834 1
    stringBuffer.append(TEXT_139);
d838 3
a840 3
    stringBuffer.append(TEXT_140);
    stringBuffer.append(TEXT_141);
    stringBuffer.append(TEXT_142);
d842 1
a842 1
    stringBuffer.append(TEXT_143);
d844 1
a844 1
    stringBuffer.append(TEXT_144);
d846 1
a846 1
    stringBuffer.append(TEXT_145);
d848 1
a848 1
    stringBuffer.append(TEXT_146);
d853 3
a855 3
    stringBuffer.append(TEXT_147);
    stringBuffer.append(TEXT_148);
    stringBuffer.append(TEXT_149);
d857 1
a857 1
    stringBuffer.append(TEXT_150);
d859 1
a859 1
    stringBuffer.append(TEXT_151);
d863 2
a864 2
    stringBuffer.append(TEXT_152);
    stringBuffer.append(TEXT_153);
d866 1
a866 1
    stringBuffer.append(TEXT_154);
d868 1
a868 1
    stringBuffer.append(TEXT_155);
d870 3
a872 3
    stringBuffer.append(TEXT_156);
    stringBuffer.append(TEXT_157);
    stringBuffer.append(TEXT_158);
d874 1
a874 1
    stringBuffer.append(TEXT_159);
d876 3
a878 3
    stringBuffer.append(TEXT_160);
    stringBuffer.append(TEXT_161);
    stringBuffer.append(TEXT_162);
d880 3
a882 3
    stringBuffer.append(TEXT_163);
    stringBuffer.append(TEXT_164);
    stringBuffer.append(TEXT_165);
d884 1
a884 1
    stringBuffer.append(TEXT_166);
d886 1
a886 1
    stringBuffer.append(TEXT_167);
d888 1
a888 1
    stringBuffer.append(TEXT_168);
d890 1
a890 1
    stringBuffer.append(TEXT_169);
d892 1
a892 1
    stringBuffer.append(TEXT_170);
d894 1
a894 1
    stringBuffer.append(TEXT_171);
d896 1
a896 1
    stringBuffer.append(TEXT_172);
d898 1
a898 1
    stringBuffer.append(TEXT_173);
d900 1
a900 1
    stringBuffer.append(TEXT_174);
d902 1
a902 1
    stringBuffer.append(TEXT_175);
d904 1
a904 1
    stringBuffer.append(TEXT_176);
d906 1
a906 1
    stringBuffer.append(TEXT_177);
d908 1
a908 1
    stringBuffer.append(TEXT_178);
d910 1
a910 1
    stringBuffer.append(TEXT_179);
d912 1
a912 1
    stringBuffer.append(TEXT_180);
d914 1
a914 1
    stringBuffer.append(TEXT_181);
d924 1
a924 1
    stringBuffer.append(TEXT_182);
d926 1
a926 1
    stringBuffer.append(TEXT_183);
d929 1
a929 1
    stringBuffer.append(TEXT_184);
d931 1
a931 1
    stringBuffer.append(TEXT_185);
d934 1
a934 1
    stringBuffer.append(TEXT_186);
d936 1
a936 1
    stringBuffer.append(TEXT_187);
d938 1
a938 1
    stringBuffer.append(TEXT_188);
d943 1
a943 1
    stringBuffer.append(TEXT_189);
d945 1
a945 1
    stringBuffer.append(TEXT_190);
d949 1
a949 1
    stringBuffer.append(TEXT_191);
d956 1
a956 1
    stringBuffer.append(TEXT_192);
d958 1
a958 1
    stringBuffer.append(TEXT_193);
d960 3
a962 3
    stringBuffer.append(TEXT_194);
    stringBuffer.append(TEXT_195);
    stringBuffer.append(TEXT_196);
d964 1
a964 1
    stringBuffer.append(TEXT_197);
d966 1
a966 1
    stringBuffer.append(TEXT_198);
d968 1
a968 1
    stringBuffer.append(TEXT_199);
d970 1
a970 1
    stringBuffer.append(TEXT_200);
d972 1
a972 1
    stringBuffer.append(TEXT_201);
d974 1
a974 1
    stringBuffer.append(TEXT_202);
d976 1
a976 1
    stringBuffer.append(TEXT_203);
d978 1
a978 1
    stringBuffer.append(TEXT_204);
d980 1
a980 1
    stringBuffer.append(TEXT_205);
d982 1
a982 1
    stringBuffer.append(TEXT_206);
d987 1
a987 1
    stringBuffer.append(TEXT_207);
d991 1
a991 1
    stringBuffer.append(TEXT_208);
d993 1
a993 1
    stringBuffer.append(TEXT_209);
d995 1
a995 1
    stringBuffer.append(TEXT_210);
d1022 1
a1022 1
    stringBuffer.append(TEXT_211);
d1024 1
a1024 1
    stringBuffer.append(TEXT_212);
d1026 1
a1026 1
    stringBuffer.append(TEXT_213);
d1030 1
a1030 1
    stringBuffer.append(TEXT_214);
d1032 1
a1032 1
    stringBuffer.append(TEXT_215);
d1034 1
a1034 1
    stringBuffer.append(TEXT_216);
d1036 1
a1036 1
    stringBuffer.append(TEXT_217);
d1038 1
a1038 1
    stringBuffer.append(TEXT_218);
d1040 1
a1040 1
    stringBuffer.append(TEXT_219);
d1044 1
a1044 1
    stringBuffer.append(TEXT_220);
d1046 1
a1046 1
    stringBuffer.append(TEXT_221);
d1048 1
a1048 1
    stringBuffer.append(TEXT_222);
d1050 1
a1050 1
    stringBuffer.append(TEXT_223);
d1052 1
a1052 1
    stringBuffer.append(TEXT_224);
d1054 1
a1054 1
    stringBuffer.append(TEXT_225);
d1059 1
a1059 1
    stringBuffer.append(TEXT_226);
d1061 1
a1061 1
    stringBuffer.append(TEXT_227);
d1067 1
a1067 1
    stringBuffer.append(TEXT_228);
d1069 1
a1069 1
    stringBuffer.append(TEXT_229);
d1071 1
a1071 1
    stringBuffer.append(TEXT_230);
d1073 1
a1073 1
    stringBuffer.append(TEXT_231);
d1075 1
a1075 1
    stringBuffer.append(TEXT_232);
d1077 1
a1077 1
    stringBuffer.append(TEXT_233);
d1081 1
a1081 1
    stringBuffer.append(TEXT_234);
d1083 1
a1083 1
    stringBuffer.append(TEXT_235);
d1085 1
a1085 1
    stringBuffer.append(TEXT_236);
d1087 1
a1087 1
    stringBuffer.append(TEXT_237);
d1089 1
a1089 1
    stringBuffer.append(TEXT_238);
d1091 1
a1091 1
    stringBuffer.append(TEXT_239);
d1098 1
a1098 1
    stringBuffer.append(TEXT_240);
d1100 1
a1100 1
    stringBuffer.append(TEXT_241);
d1102 1
a1102 1
    stringBuffer.append(TEXT_242);
d1104 1
a1104 1
    stringBuffer.append(TEXT_243);
d1106 1
a1106 1
    stringBuffer.append(TEXT_244);
d1108 1
a1108 1
    stringBuffer.append(TEXT_245);
d1112 1
a1112 1
    stringBuffer.append(TEXT_246);
d1114 1
a1114 1
    stringBuffer.append(TEXT_247);
d1116 1
a1116 1
    stringBuffer.append(TEXT_248);
d1118 1
a1118 1
    stringBuffer.append(TEXT_249);
d1120 1
a1120 1
    stringBuffer.append(TEXT_250);
d1122 1
a1122 1
    stringBuffer.append(TEXT_251);
d1129 1
a1129 1
    stringBuffer.append(TEXT_252);
d1131 1
a1131 1
    stringBuffer.append(TEXT_253);
d1133 1
a1133 1
    stringBuffer.append(TEXT_254);
d1135 1
a1135 1
    stringBuffer.append(TEXT_255);
d1137 1
a1137 1
    stringBuffer.append(TEXT_256);
d1139 1
a1139 1
    stringBuffer.append(TEXT_257);
d1143 1
a1143 1
    stringBuffer.append(TEXT_258);
d1145 1
a1145 1
    stringBuffer.append(TEXT_259);
d1147 1
a1147 1
    stringBuffer.append(TEXT_260);
d1149 1
a1149 1
    stringBuffer.append(TEXT_261);
d1151 1
a1151 1
    stringBuffer.append(TEXT_262);
d1153 1
a1153 1
    stringBuffer.append(TEXT_263);
d1158 1
a1158 1
    stringBuffer.append(TEXT_264);
d1164 1
a1164 1
    stringBuffer.append(TEXT_265);
d1166 1
a1166 1
    stringBuffer.append(TEXT_266);
d1168 1
a1168 1
    stringBuffer.append(TEXT_267);
d1170 1
a1170 1
    stringBuffer.append(TEXT_268);
d1172 1
a1172 1
    stringBuffer.append(TEXT_269);
d1174 1
a1174 1
    stringBuffer.append(TEXT_270);
d1178 1
a1178 1
    stringBuffer.append(TEXT_271);
d1180 1
a1180 1
    stringBuffer.append(TEXT_272);
d1182 1
a1182 1
    stringBuffer.append(TEXT_273);
d1184 1
a1184 1
    stringBuffer.append(TEXT_274);
d1186 1
a1186 1
    stringBuffer.append(TEXT_275);
d1188 1
a1188 1
    stringBuffer.append(TEXT_276);
d1195 1
a1195 1
    stringBuffer.append(TEXT_277);
d1199 1
a1199 1
    stringBuffer.append(TEXT_278);
d1209 2
a1210 2
    stringBuffer.append(TEXT_279);
    stringBuffer.append(TEXT_280);
d1212 1
a1212 1
    stringBuffer.append(TEXT_281);
d1214 1
a1214 1
    stringBuffer.append(TEXT_282);
d1216 3
a1218 3
    stringBuffer.append(TEXT_283);
    stringBuffer.append(TEXT_284);
    stringBuffer.append(TEXT_285);
d1220 1
a1220 1
    stringBuffer.append(TEXT_286);
d1222 1
a1222 1
    stringBuffer.append(TEXT_287);
d1224 1
a1224 1
    stringBuffer.append(TEXT_288);
d1226 1
a1226 1
    stringBuffer.append(TEXT_289);
d1228 1
a1228 1
    stringBuffer.append(TEXT_290);
d1230 1
a1230 1
    stringBuffer.append(TEXT_291);
d1232 1
a1232 1
    stringBuffer.append(TEXT_292);
d1234 1
a1234 1
    stringBuffer.append(TEXT_293);
d1236 1
a1236 1
    stringBuffer.append(TEXT_294);
d1238 1
a1238 1
    stringBuffer.append(TEXT_295);
d1240 1
a1240 1
    stringBuffer.append(TEXT_296);
d1246 1
a1246 1
    stringBuffer.append(TEXT_297);
d1248 1
a1248 1
    stringBuffer.append(TEXT_298);
d1250 1
a1250 1
    stringBuffer.append(TEXT_299);
d1252 1
a1252 1
    stringBuffer.append(TEXT_300);
d1254 1
a1254 1
    stringBuffer.append(TEXT_301);
d1256 1
a1256 1
    stringBuffer.append(TEXT_302);
d1258 1
a1258 1
    stringBuffer.append(TEXT_303);
d1260 1
a1260 1
    stringBuffer.append(TEXT_304);
d1262 1
a1262 1
    stringBuffer.append(TEXT_305);
d1264 1
a1264 1
    stringBuffer.append(TEXT_306);
d1266 1
a1266 1
    stringBuffer.append(TEXT_307);
d1273 1
a1273 1
    stringBuffer.append(TEXT_308);
d1276 1
a1276 1
    stringBuffer.append(TEXT_309);
d1278 1
a1278 1
    stringBuffer.append(TEXT_310);
d1280 1
a1280 1
    stringBuffer.append(TEXT_311);
d1282 1
a1282 1
    stringBuffer.append(TEXT_312);
d1284 1
a1284 1
    stringBuffer.append(TEXT_313);
d1286 1
a1286 1
    stringBuffer.append(TEXT_314);
d1288 1
a1288 1
    stringBuffer.append(TEXT_315);
d1290 1
a1290 1
    stringBuffer.append(TEXT_316);
d1294 1
a1294 1
    stringBuffer.append(TEXT_317);
d1297 1
a1297 1
    stringBuffer.append(TEXT_318);
d1299 1
a1299 1
    stringBuffer.append(TEXT_319);
d1301 1
a1301 1
    stringBuffer.append(TEXT_320);
d1303 1
a1303 1
    stringBuffer.append(TEXT_321);
d1305 1
a1305 1
    stringBuffer.append(TEXT_322);
d1307 1
a1307 1
    stringBuffer.append(TEXT_323);
d1311 1
a1311 1
    stringBuffer.append(TEXT_324);
d1313 1
a1313 1
    stringBuffer.append(TEXT_325);
d1320 1
a1320 1
    stringBuffer.append(TEXT_326);
d1324 1
a1324 1
    stringBuffer.append(TEXT_327);
d1328 1
a1328 1
    stringBuffer.append(TEXT_328);
d1332 2
a1333 2
    stringBuffer.append(TEXT_329);
    stringBuffer.append(TEXT_330);
d1335 1
a1335 1
    stringBuffer.append(TEXT_331);
d1337 1
a1337 1
    stringBuffer.append(TEXT_332);
d1339 1
a1339 1
    stringBuffer.append(TEXT_333);
d1341 1
a1341 1
    stringBuffer.append(TEXT_334);
d1343 1
a1343 1
    stringBuffer.append(TEXT_335);
d1345 1
a1345 1
    stringBuffer.append(TEXT_336);
d1347 1
a1347 1
    stringBuffer.append(TEXT_337);
d1349 1
a1349 1
    stringBuffer.append(TEXT_338);
d1351 1
a1351 1
    stringBuffer.append(TEXT_339);
d1353 1
a1353 1
    stringBuffer.append(TEXT_340);
d1355 1
a1355 1
    stringBuffer.append(TEXT_341);
d1359 1
a1359 1
    stringBuffer.append(TEXT_342);
d1364 3
a1366 3
    stringBuffer.append(TEXT_343);
    stringBuffer.append(TEXT_344);
    stringBuffer.append(TEXT_345);
d1368 1
a1368 1
    stringBuffer.append(TEXT_346);
d1370 1
a1370 1
    stringBuffer.append(TEXT_347);
d1374 1
a1374 1
    stringBuffer.append(TEXT_348);
d1379 1
a1379 1
    stringBuffer.append(TEXT_349);
d1388 1
a1388 1
    stringBuffer.append(TEXT_350);
d1390 1
a1390 1
    stringBuffer.append(TEXT_351);
d1392 1
a1392 1
    stringBuffer.append(TEXT_352);
d1402 1
a1402 1
    stringBuffer.append(TEXT_353);
d1404 1
a1404 1
    stringBuffer.append(TEXT_354);
d1406 1
a1406 1
    stringBuffer.append(TEXT_355);
d1412 1
a1412 1
    stringBuffer.append(TEXT_356);
d1416 1
a1416 1
    stringBuffer.append(TEXT_357);
d1418 1
a1418 1
    stringBuffer.append(TEXT_358);
d1420 1
a1420 1
    stringBuffer.append(TEXT_359);
d1422 1
a1422 1
    stringBuffer.append(TEXT_360);
d1424 1
a1424 1
    stringBuffer.append(TEXT_361);
d1426 1
a1426 1
    stringBuffer.append(TEXT_362);
d1428 1
a1428 1
    stringBuffer.append(TEXT_363);
d1430 1
a1430 1
    stringBuffer.append(TEXT_364);
d1432 1
a1432 1
    stringBuffer.append(TEXT_365);
d1434 1
a1434 1
    stringBuffer.append(TEXT_366);
d1438 1
a1438 1
    stringBuffer.append(TEXT_367);
d1440 1
a1440 1
    stringBuffer.append(TEXT_368);
d1442 1
a1442 1
    stringBuffer.append(TEXT_369);
d1444 1
a1444 1
    stringBuffer.append(TEXT_370);
@


1.16
log
@#161380 simplify feature model facets
@
text
@d317 74
a390 102
  protected final String TEXT_297 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_298 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_299 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_300 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_301 = " createDomainModelCommand(";
  protected final String TEXT_302 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_303 = " element = ";
  protected final String TEXT_304 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_305 = " feature = (";
  protected final String TEXT_306 = ") ";
  protected final String TEXT_307 = ".eINSTANCE.get";
  protected final String TEXT_308 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_309 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_310 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_311 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_312 = " result = new ";
  protected final String TEXT_313 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_314 = " values = new ";
  protected final String TEXT_315 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_316 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_317 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_318 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_319 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_320 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_321 = NL + "\t\t\t\t\t}";
  protected final String TEXT_322 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_323 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_324 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_325 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_326 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_327 = " createDomainModelCommand(";
  protected final String TEXT_328 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_329 = " element = ";
  protected final String TEXT_330 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_331 = " result = new ";
  protected final String TEXT_332 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_333 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_334 = " ";
  protected final String TEXT_335 = "feature = (";
  protected final String TEXT_336 = ") ";
  protected final String TEXT_337 = ".eINSTANCE.get";
  protected final String TEXT_338 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_339 = ".parseValue(feature, values[";
  protected final String TEXT_340 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_341 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_342 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_343 = " ";
  protected final String TEXT_344 = "values = new ";
  protected final String TEXT_345 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_346 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_347 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_348 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_349 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_350 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_351 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_352 = NL + "\t\t\t\t});";
  protected final String TEXT_353 = NL + "\t\t}" + NL;
  protected final String TEXT_354 = NL;
  protected final String TEXT_355 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_356 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_357 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_358 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_359 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_360 = "(this, ";
  protected final String TEXT_361 = ".class, new ";
  protected final String TEXT_362 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_363 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_364 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_365 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_366 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_367 = NL;
  protected final String TEXT_368 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_369 = NL;
  protected final String TEXT_370 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_371 = " domainModelRefresher = new ";
  protected final String TEXT_372 = "(this);" + NL;
  protected final String TEXT_373 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_374 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_375 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_376 = ".eINSTANCE.get";
  protected final String TEXT_377 = "(), labelRefresher);";
  protected final String TEXT_378 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_379 = ".eINSTANCE.get";
  protected final String TEXT_380 = "(), labelRefresher);";
  protected final String TEXT_381 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_382 = ".eINSTANCE.get";
  protected final String TEXT_383 = "(), labelRefresher);";
  protected final String TEXT_384 = NL + "\t\t}" + NL;
  protected final String TEXT_385 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_386 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_387 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_388 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_389 = " nextChild = (";
  protected final String TEXT_390 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_391 = ".getVisualID(nextChild) == ";
  protected final String TEXT_392 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_393 = ") ";
  protected final String TEXT_394 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_395 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_396 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_397 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_398 = NL;
d1186 2
a1187 2
	GenFeature featureToSet = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();
	EStructuralFeature ecoreFeature = featureToSet.getEcoreFeature();
d1190 2
d1193 1
a1193 1
    stringBuffer.append(TEXT_298);
d1195 1
a1195 1
    stringBuffer.append(TEXT_299);
d1197 1
a1197 1
    stringBuffer.append(TEXT_300);
d1199 1
a1199 1
    stringBuffer.append(TEXT_301);
d1201 1
a1201 1
    stringBuffer.append(TEXT_302);
d1203 1
a1203 1
    stringBuffer.append(TEXT_303);
a1204 2
    stringBuffer.append(TEXT_304);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d1206 1
a1206 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d1208 1
a1208 1
    stringBuffer.append(importManager.getImportedName(featureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
a1209 60
    stringBuffer.append(featureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_308);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_309);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_310);
    
	if (ecoreFeature.isMany()) {

    stringBuffer.append(TEXT_311);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_312);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_313);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_314);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_315);
    stringBuffer.append(featureToSet.getAccessorName());
    stringBuffer.append(TEXT_316);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_317);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_318);
    
	} else {

    stringBuffer.append(TEXT_319);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_320);
    
	}

    stringBuffer.append(TEXT_321);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = compositeFeatureLabelModelFacet.getMetaFeatures();

    stringBuffer.append(TEXT_322);
    stringBuffer.append(metaFeatures.size());
    stringBuffer.append(TEXT_323);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_324);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_325);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_326);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_327);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_328);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_329);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_330);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_331);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_332);
d1216 1
a1216 1
    stringBuffer.append(TEXT_333);
d1219 1
a1219 1
    stringBuffer.append(TEXT_334);
d1221 1
a1221 1
    stringBuffer.append(TEXT_335);
d1223 1
a1223 1
    stringBuffer.append(TEXT_336);
d1225 1
a1225 1
    stringBuffer.append(TEXT_337);
d1227 1
a1227 1
    stringBuffer.append(TEXT_338);
d1229 1
a1229 1
    stringBuffer.append(TEXT_339);
d1231 1
a1231 1
    stringBuffer.append(TEXT_340);
d1233 1
a1233 1
    stringBuffer.append(TEXT_341);
d1237 1
a1237 1
    stringBuffer.append(TEXT_342);
d1240 1
a1240 1
    stringBuffer.append(TEXT_343);
d1242 1
a1242 1
    stringBuffer.append(TEXT_344);
d1244 1
a1244 1
    stringBuffer.append(TEXT_345);
d1246 1
a1246 1
    stringBuffer.append(TEXT_346);
d1248 1
a1248 1
    stringBuffer.append(TEXT_347);
d1250 1
a1250 1
    stringBuffer.append(TEXT_348);
d1254 1
a1254 1
    stringBuffer.append(TEXT_349);
d1256 1
a1256 1
    stringBuffer.append(TEXT_350);
d1263 1
a1263 1
    stringBuffer.append(TEXT_351);
d1267 1
a1267 1
    stringBuffer.append(TEXT_352);
d1271 1
a1271 1
    stringBuffer.append(TEXT_353);
d1275 2
a1276 2
    stringBuffer.append(TEXT_354);
    stringBuffer.append(TEXT_355);
d1278 1
a1278 1
    stringBuffer.append(TEXT_356);
d1280 1
a1280 1
    stringBuffer.append(TEXT_357);
d1282 1
a1282 1
    stringBuffer.append(TEXT_358);
d1284 1
a1284 1
    stringBuffer.append(TEXT_359);
d1286 1
a1286 1
    stringBuffer.append(TEXT_360);
d1288 1
a1288 1
    stringBuffer.append(TEXT_361);
d1290 1
a1290 1
    stringBuffer.append(TEXT_362);
d1292 1
a1292 1
    stringBuffer.append(TEXT_363);
d1294 1
a1294 1
    stringBuffer.append(TEXT_364);
d1296 1
a1296 1
    stringBuffer.append(TEXT_365);
d1298 1
a1298 1
    stringBuffer.append(TEXT_366);
d1302 1
a1302 1
    stringBuffer.append(TEXT_367);
d1307 3
a1309 3
    stringBuffer.append(TEXT_368);
    stringBuffer.append(TEXT_369);
    stringBuffer.append(TEXT_370);
d1311 1
a1311 1
    stringBuffer.append(TEXT_371);
d1313 1
a1313 1
    stringBuffer.append(TEXT_372);
d1317 1
a1317 1
    stringBuffer.append(TEXT_373);
d1322 1
a1322 1
    stringBuffer.append(TEXT_374);
d1327 2
a1328 11
			GenFeature feature = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();

    stringBuffer.append(TEXT_375);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_376);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_377);
    
		} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
			CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
			for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
d1331 1
a1331 1
    stringBuffer.append(TEXT_378);
d1333 1
a1333 1
    stringBuffer.append(TEXT_379);
d1335 1
a1335 1
    stringBuffer.append(TEXT_380);
d1345 1
a1345 1
    stringBuffer.append(TEXT_381);
d1347 1
a1347 1
    stringBuffer.append(TEXT_382);
d1349 1
a1349 1
    stringBuffer.append(TEXT_383);
d1355 1
a1355 1
    stringBuffer.append(TEXT_384);
d1359 1
a1359 1
    stringBuffer.append(TEXT_385);
d1361 1
a1361 1
    stringBuffer.append(TEXT_386);
d1363 1
a1363 1
    stringBuffer.append(TEXT_387);
d1365 1
a1365 1
    stringBuffer.append(TEXT_388);
d1367 1
a1367 1
    stringBuffer.append(TEXT_389);
d1369 1
a1369 1
    stringBuffer.append(TEXT_390);
d1371 1
a1371 1
    stringBuffer.append(TEXT_391);
d1373 1
a1373 1
    stringBuffer.append(TEXT_392);
d1375 1
a1375 1
    stringBuffer.append(TEXT_393);
d1377 1
a1377 1
    stringBuffer.append(TEXT_394);
d1381 1
a1381 1
    stringBuffer.append(TEXT_395);
d1383 1
a1383 1
    stringBuffer.append(TEXT_396);
d1385 1
a1385 1
    stringBuffer.append(TEXT_397);
d1387 1
a1387 1
    stringBuffer.append(TEXT_398);
@


1.15
log
@#161380 move readOnly back to GenLabel
@
text
@d688 2
a689 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d1131 2
a1132 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
@


1.14
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d482 1
a482 2
	boolean labelReadOnly = next.getModelFacet() != null && next.getModelFacet().isReadOnly();
	if (!labelReadOnly) {
d795 1
a795 2
			boolean labelReadOnly = genLabel.getModelFacet() != null && genLabel.getModelFacet().isReadOnly();
			if (labelReadOnly) {
@


1.13
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d482 2
a483 1
	if (!next.isReadOnly()) {
d796 2
a797 1
			if (genLabel.isReadOnly()) {
@


1.12
log
@[156358] bblajer - Diagram overview with Lite runtime
@
text
@d66 353
a418 349
  protected final String TEXT_46 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_47 = ".getElement()));";
  protected final String TEXT_48 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_49 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_50 = ".getElement().eContainer(), ";
  protected final String TEXT_51 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_52 = ".UNSET_VALUE));";
  protected final String TEXT_53 = NL + "\t\t\t\treturn ";
  protected final String TEXT_54 = ".INSTANCE;";
  protected final String TEXT_55 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_56 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_57 = ".getElement().eContainer(), ";
  protected final String TEXT_58 = ".eINSTANCE.get";
  protected final String TEXT_59 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_60 = ".getElement()));";
  protected final String TEXT_61 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_62 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_63 = ".getElement().eContainer(), ";
  protected final String TEXT_64 = ".eINSTANCE.get";
  protected final String TEXT_65 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_66 = ".UNSET_VALUE));";
  protected final String TEXT_67 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_68 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_69 = ".getElement(), ";
  protected final String TEXT_70 = ".eINSTANCE.get";
  protected final String TEXT_71 = "(), ";
  protected final String TEXT_72 = ".getSource().getElement()));";
  protected final String TEXT_73 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_74 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_75 = ".getElement(), ";
  protected final String TEXT_76 = ".eINSTANCE.get";
  protected final String TEXT_77 = "(), ";
  protected final String TEXT_78 = ".UNSET_VALUE));";
  protected final String TEXT_79 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_80 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_81 = ".getElement(), ";
  protected final String TEXT_82 = ".eINSTANCE.get";
  protected final String TEXT_83 = "(), ";
  protected final String TEXT_84 = ".getTarget().getElement()));";
  protected final String TEXT_85 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_86 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_87 = ".getElement(), ";
  protected final String TEXT_88 = ".eINSTANCE.get";
  protected final String TEXT_89 = "(), ";
  protected final String TEXT_90 = ".UNSET_VALUE));";
  protected final String TEXT_91 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_92 = NL + "\t\t\t\treturn ";
  protected final String TEXT_93 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_94 = ".getSource().getElement(), ";
  protected final String TEXT_95 = ".eINSTANCE.get";
  protected final String TEXT_96 = "(), ";
  protected final String TEXT_97 = ".getTarget().getElement());";
  protected final String TEXT_98 = NL + "\t\t\t\treturn ";
  protected final String TEXT_99 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_100 = ".getSource().getElement(), ";
  protected final String TEXT_101 = ".eINSTANCE.get";
  protected final String TEXT_102 = "(), ";
  protected final String TEXT_103 = ".UNSET_VALUE);";
  protected final String TEXT_104 = NL + "\t\t\t}";
  protected final String TEXT_105 = NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_106 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_107 = "());" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_108 = ".CONNECTION_BENDPOINTS_ROLE, new ";
  protected final String TEXT_109 = "());";
  protected final String TEXT_110 = NL + "\t\t//This edit part understands the direct edit request and delegates it to the appropriate label, so no command is needed here." + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_111 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_112 = "() {" + NL + "\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_113 = " request) {" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_114 = " getDirectEditCommand(";
  protected final String TEXT_115 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_116 = NL + "\t}" + NL;
  protected final String TEXT_117 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_118 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_119 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_120 = " nextChild = (";
  protected final String TEXT_121 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_122 = ".getVisualID(nextChild) == ";
  protected final String TEXT_123 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_124 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_125 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_126 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_127 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_128 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_129 = " getLabelEditPart(";
  protected final String TEXT_130 = " req) {" + NL + "\t\t";
  protected final String TEXT_131 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_132 = " view = (";
  protected final String TEXT_133 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_134 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_135 = NL + "\t\t\t\tcase ";
  protected final String TEXT_136 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_137 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_138 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_139 = NL;
  protected final String TEXT_140 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_141 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_142 = " feature, ";
  protected final String TEXT_143 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_144 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL;
  protected final String TEXT_145 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_146 = NL;
  protected final String TEXT_147 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_148 = " domainModelRefresher = new ";
  protected final String TEXT_149 = "(this);" + NL;
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_152 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_153 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_154 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_155 = NL;
  protected final String TEXT_156 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_157 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_158 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_159 = NL;
  protected final String TEXT_160 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_161 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_162 = NL;
  protected final String TEXT_163 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_164 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_165 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_166 = " bendpoints = (";
  protected final String TEXT_167 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_168 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_169 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_170 = " figureConstraint = new ";
  protected final String TEXT_171 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_172 = " wbp = (";
  protected final String TEXT_173 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_174 = " rbp = new ";
  protected final String TEXT_175 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_176 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_177 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_178 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_179 = " createFigure() {";
  protected final String TEXT_180 = NL + "\t\treturn new ";
  protected final String TEXT_181 = "();";
  protected final String TEXT_182 = NL + "\t\treturn ";
  protected final String TEXT_183 = ";";
  protected final String TEXT_184 = NL + " \t\treturn new ";
  protected final String TEXT_185 = "();";
  protected final String TEXT_186 = NL + "\t}" + NL;
  protected final String TEXT_187 = NL;
  protected final String TEXT_188 = NL;
  protected final String TEXT_189 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_190 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_191 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramEdge(), ";
  protected final String TEXT_192 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_193 = NL;
  protected final String TEXT_194 = "\t\tinstallEditPolicy(";
  protected final String TEXT_195 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_196 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_197 = " createDeleteCommand(";
  protected final String TEXT_198 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_199 = " editingDomain = ";
  protected final String TEXT_200 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_201 = " cc = new ";
  protected final String TEXT_202 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_203 = "() {" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_204 = "(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_205 = NL;
  protected final String TEXT_206 = NL + "\t\t\tprivate ";
  protected final String TEXT_207 = " createDomainModelRemoveCommand(";
  protected final String TEXT_208 = " editingDomain) {";
  protected final String TEXT_209 = NL + "\t\t\t\t";
  protected final String TEXT_210 = " result = new ";
  protected final String TEXT_211 = "();";
  protected final String TEXT_212 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_213 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_214 = ".getElement().eContainer(), ";
  protected final String TEXT_215 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_216 = ".getElement()));";
  protected final String TEXT_217 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_218 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_219 = ".getElement().eContainer(), ";
  protected final String TEXT_220 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_221 = ".UNSET_VALUE));";
  protected final String TEXT_222 = NL + "\t\t\t\treturn ";
  protected final String TEXT_223 = ".INSTANCE;";
  protected final String TEXT_224 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_225 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_226 = ".getElement().eContainer(), ";
  protected final String TEXT_227 = ".eINSTANCE.get";
  protected final String TEXT_228 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_229 = ".getElement()));";
  protected final String TEXT_230 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_231 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_232 = ".getElement().eContainer(), ";
  protected final String TEXT_233 = ".eINSTANCE.get";
  protected final String TEXT_234 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_235 = ".UNSET_VALUE));";
  protected final String TEXT_236 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_237 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_238 = ".getElement(), ";
  protected final String TEXT_239 = ".eINSTANCE.get";
  protected final String TEXT_240 = "(), ";
  protected final String TEXT_241 = ".getSource().getElement()));";
  protected final String TEXT_242 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_243 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_244 = ".getElement(), ";
  protected final String TEXT_245 = ".eINSTANCE.get";
  protected final String TEXT_246 = "(), ";
  protected final String TEXT_247 = ".UNSET_VALUE));";
  protected final String TEXT_248 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_249 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_250 = ".getElement(), ";
  protected final String TEXT_251 = ".eINSTANCE.get";
  protected final String TEXT_252 = "(), ";
  protected final String TEXT_253 = ".getTarget().getElement()));";
  protected final String TEXT_254 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_255 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_256 = ".getElement(), ";
  protected final String TEXT_257 = ".eINSTANCE.get";
  protected final String TEXT_258 = "(), ";
  protected final String TEXT_259 = ".UNSET_VALUE));";
  protected final String TEXT_260 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_261 = NL + "\t\t\t\treturn ";
  protected final String TEXT_262 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_263 = ".getSource().getElement(), ";
  protected final String TEXT_264 = ".eINSTANCE.get";
  protected final String TEXT_265 = "(), ";
  protected final String TEXT_266 = ".getTarget().getElement());";
  protected final String TEXT_267 = NL + "\t\t\t\treturn ";
  protected final String TEXT_268 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_269 = ".getSource().getElement(), ";
  protected final String TEXT_270 = ".eINSTANCE.get";
  protected final String TEXT_271 = "(), ";
  protected final String TEXT_272 = ".UNSET_VALUE);";
  protected final String TEXT_273 = NL + "\t\t\t}";
  protected final String TEXT_274 = NL + "\t\t});";
  protected final String TEXT_275 = NL;
  protected final String TEXT_276 = "\t\tinstallEditPolicy(";
  protected final String TEXT_277 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_278 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_279 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_280 = NL;
  protected final String TEXT_281 = "\t\t\t\t\tprotected ";
  protected final String TEXT_282 = " getDirectEditCommand(";
  protected final String TEXT_283 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_284 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_285 = "(";
  protected final String TEXT_286 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_287 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_288 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_289 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_290 = " editingDomain = ";
  protected final String TEXT_291 = ".getEditingDomain(";
  protected final String TEXT_292 = ".getDiagram().getElement());";
  protected final String TEXT_293 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_294 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_295 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_296 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_297 = " createDomainModelCommand(";
  protected final String TEXT_298 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_299 = " element = ";
  protected final String TEXT_300 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_301 = " feature = (";
  protected final String TEXT_302 = ") ";
  protected final String TEXT_303 = ".eINSTANCE.get";
  protected final String TEXT_304 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_305 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_306 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_307 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_308 = " result = new ";
  protected final String TEXT_309 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_310 = " values = new ";
  protected final String TEXT_311 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_312 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_313 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_314 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_315 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_316 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_317 = NL + "\t\t\t\t\t}";
  protected final String TEXT_318 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_319 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_320 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_321 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_322 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_323 = " createDomainModelCommand(";
  protected final String TEXT_324 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_325 = " element = ";
  protected final String TEXT_326 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_327 = " result = new ";
  protected final String TEXT_328 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_329 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_330 = " ";
  protected final String TEXT_331 = "feature = (";
  protected final String TEXT_332 = ") ";
  protected final String TEXT_333 = ".eINSTANCE.get";
  protected final String TEXT_334 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_335 = ".parseValue(feature, values[";
  protected final String TEXT_336 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_337 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_338 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_339 = " ";
  protected final String TEXT_340 = "values = new ";
  protected final String TEXT_341 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_342 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_343 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_344 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_345 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_346 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_347 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_348 = NL + "\t\t\t\t});";
  protected final String TEXT_349 = NL + "\t\t}" + NL;
  protected final String TEXT_350 = NL;
  protected final String TEXT_351 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_352 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_353 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_354 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_355 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_356 = "(this, ";
  protected final String TEXT_357 = ".class, new ";
  protected final String TEXT_358 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_359 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_360 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_361 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_362 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_363 = NL;
  protected final String TEXT_364 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_365 = NL;
  protected final String TEXT_366 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_367 = " domainModelRefresher = new ";
  protected final String TEXT_368 = "(this);" + NL;
  protected final String TEXT_369 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();";
  protected final String TEXT_370 = NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_371 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_372 = ".eINSTANCE.get";
  protected final String TEXT_373 = "(), labelRefresher);";
  protected final String TEXT_374 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_375 = ".eINSTANCE.get";
  protected final String TEXT_376 = "(), labelRefresher);";
  protected final String TEXT_377 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_378 = ".eINSTANCE.get";
  protected final String TEXT_379 = "(), labelRefresher);";
  protected final String TEXT_380 = NL + "\t\t}" + NL;
  protected final String TEXT_381 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_382 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_383 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_384 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_385 = " nextChild = (";
  protected final String TEXT_386 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_387 = ".getVisualID(nextChild) == ";
  protected final String TEXT_388 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_389 = ") ";
  protected final String TEXT_390 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_391 = NL + NL + "\t\t/**" + NL + "\t\t * Since labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_392 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_393 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_394 = NL;
d563 1
a563 1
    stringBuffer.append(_edge);
d565 2
d568 1
a568 1
    stringBuffer.append(TEXT_47);
d572 1
a572 1
    stringBuffer.append(TEXT_48);
a573 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(_edge);
d577 4
d582 1
a582 1
    stringBuffer.append(TEXT_52);
d587 1
a587 1
    stringBuffer.append(TEXT_53);
d589 1
a589 1
    stringBuffer.append(TEXT_54);
d595 1
a595 1
    stringBuffer.append(TEXT_55);
d597 1
a597 1
    stringBuffer.append(TEXT_56);
d599 1
a599 1
    stringBuffer.append(TEXT_57);
d601 1
a601 1
    stringBuffer.append(TEXT_58);
d603 1
a603 1
    stringBuffer.append(TEXT_59);
d605 1
a605 1
    stringBuffer.append(TEXT_60);
d609 1
a609 1
    stringBuffer.append(TEXT_61);
d611 1
a611 1
    stringBuffer.append(TEXT_62);
d613 1
a613 1
    stringBuffer.append(TEXT_63);
d615 1
a615 1
    stringBuffer.append(TEXT_64);
d617 1
a617 1
    stringBuffer.append(TEXT_65);
d619 1
a619 1
    stringBuffer.append(TEXT_66);
d626 1
a626 1
    stringBuffer.append(TEXT_67);
d628 1
a628 1
    stringBuffer.append(TEXT_68);
d630 1
a630 1
    stringBuffer.append(TEXT_69);
d632 1
a632 1
    stringBuffer.append(TEXT_70);
d634 1
a634 1
    stringBuffer.append(TEXT_71);
d636 1
a636 1
    stringBuffer.append(TEXT_72);
d640 1
a640 1
    stringBuffer.append(TEXT_73);
d642 1
a642 1
    stringBuffer.append(TEXT_74);
d644 1
a644 1
    stringBuffer.append(TEXT_75);
d646 1
a646 1
    stringBuffer.append(TEXT_76);
d648 1
a648 1
    stringBuffer.append(TEXT_77);
d650 1
a650 1
    stringBuffer.append(TEXT_78);
d657 1
a657 1
    stringBuffer.append(TEXT_79);
d659 1
a659 1
    stringBuffer.append(TEXT_80);
d661 1
a661 1
    stringBuffer.append(TEXT_81);
d663 1
a663 1
    stringBuffer.append(TEXT_82);
d665 1
a665 1
    stringBuffer.append(TEXT_83);
d667 1
a667 1
    stringBuffer.append(TEXT_84);
d671 1
a671 1
    stringBuffer.append(TEXT_85);
d673 1
a673 1
    stringBuffer.append(TEXT_86);
d675 1
a675 1
    stringBuffer.append(TEXT_87);
d677 1
a677 1
    stringBuffer.append(TEXT_88);
d679 1
a679 1
    stringBuffer.append(TEXT_89);
d681 1
a681 1
    stringBuffer.append(TEXT_90);
d686 1
a686 1
    stringBuffer.append(TEXT_91);
d692 1
a692 1
    stringBuffer.append(TEXT_92);
d694 1
a694 1
    stringBuffer.append(TEXT_93);
d696 1
a696 1
    stringBuffer.append(TEXT_94);
d698 1
a698 1
    stringBuffer.append(TEXT_95);
d700 1
a700 1
    stringBuffer.append(TEXT_96);
d702 1
a702 1
    stringBuffer.append(TEXT_97);
d706 1
a706 1
    stringBuffer.append(TEXT_98);
d708 1
a708 1
    stringBuffer.append(TEXT_99);
d710 1
a710 1
    stringBuffer.append(TEXT_100);
d712 1
a712 1
    stringBuffer.append(TEXT_101);
d714 1
a714 1
    stringBuffer.append(TEXT_102);
d716 1
a716 1
    stringBuffer.append(TEXT_103);
d723 1
a723 1
    stringBuffer.append(TEXT_104);
d727 1
a727 1
    stringBuffer.append(TEXT_105);
d729 1
a729 1
    stringBuffer.append(TEXT_106);
d731 1
a731 1
    stringBuffer.append(TEXT_107);
d733 1
a733 1
    stringBuffer.append(TEXT_108);
d735 1
a735 1
    stringBuffer.append(TEXT_109);
d739 1
a739 1
    stringBuffer.append(TEXT_110);
d741 1
a741 1
    stringBuffer.append(TEXT_111);
d743 1
a743 1
    stringBuffer.append(TEXT_112);
d745 1
a745 1
    stringBuffer.append(TEXT_113);
d747 1
a747 1
    stringBuffer.append(TEXT_114);
d749 1
a749 1
    stringBuffer.append(TEXT_115);
d753 1
a753 1
    stringBuffer.append(TEXT_116);
d757 1
a757 1
    stringBuffer.append(TEXT_117);
d759 1
a759 1
    stringBuffer.append(TEXT_118);
d761 1
a761 1
    stringBuffer.append(TEXT_119);
d763 1
a763 1
    stringBuffer.append(TEXT_120);
d765 1
a765 1
    stringBuffer.append(TEXT_121);
d767 1
a767 1
    stringBuffer.append(TEXT_122);
d769 1
a769 1
    stringBuffer.append(TEXT_123);
d771 1
a771 1
    stringBuffer.append(TEXT_124);
d773 1
a773 1
    stringBuffer.append(TEXT_125);
d775 1
a775 3
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_127);
a776 2
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d782 4
d787 1
a787 1
    stringBuffer.append(TEXT_132);
d789 1
a789 1
    stringBuffer.append(TEXT_133);
d791 1
a791 1
    stringBuffer.append(TEXT_134);
d799 1
a799 1
    stringBuffer.append(TEXT_135);
d801 1
a801 1
    stringBuffer.append(TEXT_136);
d805 1
a805 1
    stringBuffer.append(TEXT_137);
a808 2
    stringBuffer.append(TEXT_138);
    stringBuffer.append(TEXT_139);
d810 2
d813 1
a813 1
    stringBuffer.append(TEXT_141);
d815 1
a815 1
    stringBuffer.append(TEXT_142);
d817 1
a817 1
    stringBuffer.append(TEXT_143);
d819 1
a819 1
    stringBuffer.append(TEXT_144);
a823 2
    stringBuffer.append(TEXT_145);
    stringBuffer.append(TEXT_146);
d825 2
d828 1
a828 1
    stringBuffer.append(TEXT_148);
d830 1
a830 1
    stringBuffer.append(TEXT_149);
a833 3
    stringBuffer.append(TEXT_150);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a834 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d838 1
d840 1
a841 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d843 1
a844 1
    stringBuffer.append(TEXT_158);
d846 1
a847 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d850 1
d852 2
d855 1
a855 1
    stringBuffer.append(TEXT_164);
d857 1
a857 1
    stringBuffer.append(TEXT_165);
d859 1
a859 1
    stringBuffer.append(TEXT_166);
d861 1
a861 1
    stringBuffer.append(TEXT_167);
d863 1
a863 1
    stringBuffer.append(TEXT_168);
d865 1
a865 1
    stringBuffer.append(TEXT_169);
d867 1
a867 1
    stringBuffer.append(TEXT_170);
d869 1
a869 1
    stringBuffer.append(TEXT_171);
d871 1
a871 1
    stringBuffer.append(TEXT_172);
d873 1
a873 1
    stringBuffer.append(TEXT_173);
d875 1
a875 1
    stringBuffer.append(TEXT_174);
d877 1
a877 1
    stringBuffer.append(TEXT_175);
d879 1
a879 1
    stringBuffer.append(TEXT_176);
d881 1
a881 1
    stringBuffer.append(TEXT_177);
d883 1
a883 1
    stringBuffer.append(TEXT_178);
d885 1
a885 1
    stringBuffer.append(TEXT_179);
d895 1
a895 1
    stringBuffer.append(TEXT_180);
d897 1
a897 1
    stringBuffer.append(TEXT_181);
d900 1
a900 1
    stringBuffer.append(TEXT_182);
d902 1
a902 1
    stringBuffer.append(TEXT_183);
d905 1
a905 1
    stringBuffer.append(TEXT_184);
d907 1
a907 1
    stringBuffer.append(TEXT_185);
d909 1
a909 1
    stringBuffer.append(TEXT_186);
d914 1
a914 1
    stringBuffer.append(TEXT_187);
d916 1
a916 1
    stringBuffer.append(TEXT_188);
d920 1
a920 1
    stringBuffer.append(TEXT_189);
d927 1
a927 1
    stringBuffer.append(TEXT_190);
d929 1
a929 1
    stringBuffer.append(TEXT_191);
a930 2
    stringBuffer.append(TEXT_192);
    stringBuffer.append(TEXT_193);
d932 2
d935 1
a935 1
    stringBuffer.append(TEXT_195);
d937 1
a937 1
    stringBuffer.append(TEXT_196);
d939 1
a939 1
    stringBuffer.append(TEXT_197);
d941 1
a941 1
    stringBuffer.append(TEXT_198);
d943 1
a943 1
    stringBuffer.append(TEXT_199);
d945 1
a945 1
    stringBuffer.append(TEXT_200);
d947 1
a947 1
    stringBuffer.append(TEXT_201);
d949 1
a949 1
    stringBuffer.append(TEXT_202);
d951 1
a951 1
    stringBuffer.append(TEXT_203);
d953 1
a953 1
    stringBuffer.append(TEXT_204);
d958 1
a958 1
    stringBuffer.append(TEXT_205);
d962 1
a962 1
    stringBuffer.append(TEXT_206);
d964 1
a964 1
    stringBuffer.append(TEXT_207);
d966 1
a966 1
    stringBuffer.append(TEXT_208);
d993 1
a993 1
    stringBuffer.append(TEXT_209);
d995 1
a995 1
    stringBuffer.append(TEXT_210);
d997 1
a997 1
    stringBuffer.append(TEXT_211);
d1001 1
a1001 1
    stringBuffer.append(TEXT_212);
a1002 4
    stringBuffer.append(TEXT_213);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_214);
    stringBuffer.append(_edge);
d1006 1
a1006 3
    
			} else {

d1008 1
a1008 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d1012 3
a1014 1
    stringBuffer.append(_edge);
d1018 8
d1030 1
a1030 1
    stringBuffer.append(TEXT_222);
d1032 1
a1032 1
    stringBuffer.append(TEXT_223);
d1038 1
a1038 1
    stringBuffer.append(TEXT_224);
d1040 1
a1040 1
    stringBuffer.append(TEXT_225);
d1042 1
a1042 1
    stringBuffer.append(TEXT_226);
d1044 1
a1044 1
    stringBuffer.append(TEXT_227);
d1046 1
a1046 1
    stringBuffer.append(TEXT_228);
d1048 1
a1048 1
    stringBuffer.append(TEXT_229);
d1052 1
a1052 1
    stringBuffer.append(TEXT_230);
d1054 1
a1054 1
    stringBuffer.append(TEXT_231);
d1056 1
a1056 1
    stringBuffer.append(TEXT_232);
d1058 1
a1058 1
    stringBuffer.append(TEXT_233);
d1060 1
a1060 1
    stringBuffer.append(TEXT_234);
d1062 1
a1062 1
    stringBuffer.append(TEXT_235);
d1069 1
a1069 1
    stringBuffer.append(TEXT_236);
d1071 1
a1071 1
    stringBuffer.append(TEXT_237);
d1073 1
a1073 1
    stringBuffer.append(TEXT_238);
d1075 1
a1075 1
    stringBuffer.append(TEXT_239);
d1077 1
a1077 1
    stringBuffer.append(TEXT_240);
d1079 1
a1079 1
    stringBuffer.append(TEXT_241);
d1083 1
a1083 1
    stringBuffer.append(TEXT_242);
d1085 1
a1085 1
    stringBuffer.append(TEXT_243);
d1087 1
a1087 1
    stringBuffer.append(TEXT_244);
d1089 1
a1089 1
    stringBuffer.append(TEXT_245);
d1091 1
a1091 1
    stringBuffer.append(TEXT_246);
d1093 1
a1093 1
    stringBuffer.append(TEXT_247);
d1100 1
a1100 1
    stringBuffer.append(TEXT_248);
d1102 1
a1102 1
    stringBuffer.append(TEXT_249);
d1104 1
a1104 1
    stringBuffer.append(TEXT_250);
d1106 1
a1106 1
    stringBuffer.append(TEXT_251);
d1108 1
a1108 1
    stringBuffer.append(TEXT_252);
d1110 1
a1110 1
    stringBuffer.append(TEXT_253);
d1114 1
a1114 1
    stringBuffer.append(TEXT_254);
d1116 1
a1116 1
    stringBuffer.append(TEXT_255);
d1118 1
a1118 1
    stringBuffer.append(TEXT_256);
d1120 1
a1120 1
    stringBuffer.append(TEXT_257);
d1122 1
a1122 1
    stringBuffer.append(TEXT_258);
d1124 1
a1124 1
    stringBuffer.append(TEXT_259);
d1129 1
a1129 1
    stringBuffer.append(TEXT_260);
d1135 1
a1135 1
    stringBuffer.append(TEXT_261);
d1137 1
a1137 1
    stringBuffer.append(TEXT_262);
d1139 1
a1139 1
    stringBuffer.append(TEXT_263);
d1141 1
a1141 1
    stringBuffer.append(TEXT_264);
d1143 1
a1143 1
    stringBuffer.append(TEXT_265);
d1145 1
a1145 1
    stringBuffer.append(TEXT_266);
d1149 1
a1149 1
    stringBuffer.append(TEXT_267);
d1151 1
a1151 1
    stringBuffer.append(TEXT_268);
d1153 1
a1153 1
    stringBuffer.append(TEXT_269);
d1155 1
a1155 1
    stringBuffer.append(TEXT_270);
d1157 1
a1157 1
    stringBuffer.append(TEXT_271);
d1159 1
a1159 1
    stringBuffer.append(TEXT_272);
d1166 1
a1166 1
    stringBuffer.append(TEXT_273);
d1170 1
a1170 1
    stringBuffer.append(TEXT_274);
a1179 7
    stringBuffer.append(TEXT_275);
    stringBuffer.append(TEXT_276);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_277);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
    stringBuffer.append(TEXT_278);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1182 1
d1184 1
a1184 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1188 6
d1195 1
a1195 1
    stringBuffer.append(TEXT_284);
d1197 1
a1197 1
    stringBuffer.append(TEXT_285);
d1199 1
a1199 1
    stringBuffer.append(TEXT_286);
d1201 1
a1201 1
    stringBuffer.append(TEXT_287);
d1203 1
a1203 1
    stringBuffer.append(TEXT_288);
d1205 1
a1205 1
    stringBuffer.append(TEXT_289);
d1207 1
a1207 1
    stringBuffer.append(TEXT_290);
d1209 1
a1209 1
    stringBuffer.append(TEXT_291);
d1211 1
a1211 1
    stringBuffer.append(TEXT_292);
d1217 1
a1217 1
    stringBuffer.append(TEXT_293);
d1219 1
a1219 1
    stringBuffer.append(TEXT_294);
d1221 1
a1221 1
    stringBuffer.append(TEXT_295);
d1223 1
a1223 1
    stringBuffer.append(TEXT_296);
d1225 1
a1225 1
    stringBuffer.append(TEXT_297);
d1227 1
a1227 1
    stringBuffer.append(TEXT_298);
d1229 1
a1229 1
    stringBuffer.append(TEXT_299);
d1231 1
a1231 1
    stringBuffer.append(TEXT_300);
d1233 1
a1233 1
    stringBuffer.append(TEXT_301);
d1235 1
a1235 1
    stringBuffer.append(TEXT_302);
d1237 1
a1237 1
    stringBuffer.append(TEXT_303);
d1239 1
a1239 1
    stringBuffer.append(TEXT_304);
d1241 1
a1241 1
    stringBuffer.append(TEXT_305);
d1243 1
a1243 1
    stringBuffer.append(TEXT_306);
d1247 1
a1247 1
    stringBuffer.append(TEXT_307);
d1249 1
a1249 1
    stringBuffer.append(TEXT_308);
d1251 1
a1251 1
    stringBuffer.append(TEXT_309);
d1253 1
a1253 1
    stringBuffer.append(TEXT_310);
d1255 1
a1255 1
    stringBuffer.append(TEXT_311);
d1257 1
a1257 1
    stringBuffer.append(TEXT_312);
d1259 1
a1259 1
    stringBuffer.append(TEXT_313);
d1261 1
a1261 1
    stringBuffer.append(TEXT_314);
d1265 1
a1265 1
    stringBuffer.append(TEXT_315);
d1267 1
a1267 1
    stringBuffer.append(TEXT_316);
d1271 1
a1271 1
    stringBuffer.append(TEXT_317);
d1277 1
a1277 1
    stringBuffer.append(TEXT_318);
d1279 1
a1279 1
    stringBuffer.append(TEXT_319);
d1281 1
a1281 1
    stringBuffer.append(TEXT_320);
d1283 1
a1283 1
    stringBuffer.append(TEXT_321);
d1285 1
a1285 1
    stringBuffer.append(TEXT_322);
d1287 1
a1287 1
    stringBuffer.append(TEXT_323);
d1289 1
a1289 1
    stringBuffer.append(TEXT_324);
d1291 1
a1291 1
    stringBuffer.append(TEXT_325);
d1293 1
a1293 1
    stringBuffer.append(TEXT_326);
d1295 1
a1295 1
    stringBuffer.append(TEXT_327);
d1297 1
a1297 1
    stringBuffer.append(TEXT_328);
d1304 1
a1304 1
    stringBuffer.append(TEXT_329);
d1307 1
a1307 1
    stringBuffer.append(TEXT_330);
d1309 1
a1309 1
    stringBuffer.append(TEXT_331);
d1311 1
a1311 1
    stringBuffer.append(TEXT_332);
d1313 1
a1313 1
    stringBuffer.append(TEXT_333);
d1315 1
a1315 1
    stringBuffer.append(TEXT_334);
d1317 1
a1317 1
    stringBuffer.append(TEXT_335);
d1319 1
a1319 1
    stringBuffer.append(TEXT_336);
d1321 1
a1321 1
    stringBuffer.append(TEXT_337);
d1325 1
a1325 1
    stringBuffer.append(TEXT_338);
d1328 1
a1328 1
    stringBuffer.append(TEXT_339);
d1330 1
a1330 1
    stringBuffer.append(TEXT_340);
d1332 1
a1332 1
    stringBuffer.append(TEXT_341);
d1334 1
a1334 1
    stringBuffer.append(TEXT_342);
d1336 1
a1336 1
    stringBuffer.append(TEXT_343);
d1338 1
a1338 1
    stringBuffer.append(TEXT_344);
d1342 1
a1342 1
    stringBuffer.append(TEXT_345);
d1344 1
a1344 1
    stringBuffer.append(TEXT_346);
d1351 1
a1351 1
    stringBuffer.append(TEXT_347);
d1355 1
a1355 1
    stringBuffer.append(TEXT_348);
d1359 1
a1359 1
    stringBuffer.append(TEXT_349);
d1363 2
a1364 2
    stringBuffer.append(TEXT_350);
    stringBuffer.append(TEXT_351);
d1366 1
a1366 1
    stringBuffer.append(TEXT_352);
d1368 1
a1368 1
    stringBuffer.append(TEXT_353);
d1370 1
a1370 1
    stringBuffer.append(TEXT_354);
d1372 1
a1372 1
    stringBuffer.append(TEXT_355);
d1374 1
a1374 1
    stringBuffer.append(TEXT_356);
d1376 1
a1376 1
    stringBuffer.append(TEXT_357);
d1378 1
a1378 1
    stringBuffer.append(TEXT_358);
d1380 1
a1380 1
    stringBuffer.append(TEXT_359);
d1382 1
a1382 1
    stringBuffer.append(TEXT_360);
d1384 1
a1384 1
    stringBuffer.append(TEXT_361);
d1386 1
a1386 1
    stringBuffer.append(TEXT_362);
d1390 1
a1390 1
    stringBuffer.append(TEXT_363);
d1395 3
a1397 3
    stringBuffer.append(TEXT_364);
    stringBuffer.append(TEXT_365);
    stringBuffer.append(TEXT_366);
d1399 1
a1399 1
    stringBuffer.append(TEXT_367);
d1401 1
a1401 1
    stringBuffer.append(TEXT_368);
d1405 1
a1405 1
    stringBuffer.append(TEXT_369);
d1410 1
a1410 1
    stringBuffer.append(TEXT_370);
d1417 1
a1417 1
    stringBuffer.append(TEXT_371);
d1419 1
a1419 1
    stringBuffer.append(TEXT_372);
d1421 1
a1421 1
    stringBuffer.append(TEXT_373);
d1428 1
a1428 1
    stringBuffer.append(TEXT_374);
d1430 1
a1430 1
    stringBuffer.append(TEXT_375);
d1432 1
a1432 1
    stringBuffer.append(TEXT_376);
d1442 1
a1442 1
    stringBuffer.append(TEXT_377);
d1444 1
a1444 1
    stringBuffer.append(TEXT_378);
d1446 1
a1446 1
    stringBuffer.append(TEXT_379);
d1452 1
a1452 1
    stringBuffer.append(TEXT_380);
d1456 1
a1456 1
    stringBuffer.append(TEXT_381);
d1458 1
a1458 1
    stringBuffer.append(TEXT_382);
d1460 1
a1460 1
    stringBuffer.append(TEXT_383);
d1462 1
a1462 1
    stringBuffer.append(TEXT_384);
d1464 1
a1464 1
    stringBuffer.append(TEXT_385);
d1466 1
a1466 1
    stringBuffer.append(TEXT_386);
d1468 1
a1468 1
    stringBuffer.append(TEXT_387);
d1470 1
a1470 1
    stringBuffer.append(TEXT_388);
d1472 1
a1472 1
    stringBuffer.append(TEXT_389);
d1474 1
a1474 1
    stringBuffer.append(TEXT_390);
d1478 1
a1478 1
    stringBuffer.append(TEXT_391);
d1480 1
a1480 1
    stringBuffer.append(TEXT_392);
d1482 1
a1482 1
    stringBuffer.append(TEXT_393);
d1484 1
a1484 1
    stringBuffer.append(TEXT_394);
@


1.11
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d42 124
a165 124
  protected final String TEXT_22 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
  protected final String TEXT_23 = NL;
  protected final String TEXT_24 = "\t\tinstallEditPolicy(";
  protected final String TEXT_25 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_26 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_27 = " createDeleteCommand(";
  protected final String TEXT_28 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_29 = " editingDomain = ";
  protected final String TEXT_30 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_31 = " cc = new ";
  protected final String TEXT_32 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_33 = "() {" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_34 = "(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = NL + "\t\t\tprivate ";
  protected final String TEXT_37 = " createDomainModelRemoveCommand(";
  protected final String TEXT_38 = " editingDomain) {";
  protected final String TEXT_39 = NL + "\t\t\t\t";
  protected final String TEXT_40 = " result = new ";
  protected final String TEXT_41 = "();";
  protected final String TEXT_42 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_43 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_44 = ".getElement().eContainer(), ";
  protected final String TEXT_45 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_46 = ".getElement()));";
  protected final String TEXT_47 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_48 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_49 = ".getElement().eContainer(), ";
  protected final String TEXT_50 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_51 = ".UNSET_VALUE));";
  protected final String TEXT_52 = NL + "\t\t\t\treturn ";
  protected final String TEXT_53 = ".INSTANCE;";
  protected final String TEXT_54 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_55 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_56 = ".getElement().eContainer(), ";
  protected final String TEXT_57 = ".eINSTANCE.get";
  protected final String TEXT_58 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_59 = ".getElement()));";
  protected final String TEXT_60 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_61 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_62 = ".getElement().eContainer(), ";
  protected final String TEXT_63 = ".eINSTANCE.get";
  protected final String TEXT_64 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_65 = ".UNSET_VALUE));";
  protected final String TEXT_66 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_67 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_68 = ".getElement(), ";
  protected final String TEXT_69 = ".eINSTANCE.get";
  protected final String TEXT_70 = "(), ";
  protected final String TEXT_71 = ".getSource().getElement()));";
  protected final String TEXT_72 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_73 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_74 = ".getElement(), ";
  protected final String TEXT_75 = ".eINSTANCE.get";
  protected final String TEXT_76 = "(), ";
  protected final String TEXT_77 = ".UNSET_VALUE));";
  protected final String TEXT_78 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_79 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_80 = ".getElement(), ";
  protected final String TEXT_81 = ".eINSTANCE.get";
  protected final String TEXT_82 = "(), ";
  protected final String TEXT_83 = ".getTarget().getElement()));";
  protected final String TEXT_84 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_85 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_86 = ".getElement(), ";
  protected final String TEXT_87 = ".eINSTANCE.get";
  protected final String TEXT_88 = "(), ";
  protected final String TEXT_89 = ".UNSET_VALUE));";
  protected final String TEXT_90 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_91 = NL + "\t\t\t\treturn ";
  protected final String TEXT_92 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_93 = ".getSource().getElement(), ";
  protected final String TEXT_94 = ".eINSTANCE.get";
  protected final String TEXT_95 = "(), ";
  protected final String TEXT_96 = ".getTarget().getElement());";
  protected final String TEXT_97 = NL + "\t\t\t\treturn ";
  protected final String TEXT_98 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_99 = ".getSource().getElement(), ";
  protected final String TEXT_100 = ".eINSTANCE.get";
  protected final String TEXT_101 = "(), ";
  protected final String TEXT_102 = ".UNSET_VALUE);";
  protected final String TEXT_103 = NL + "\t\t\t}";
  protected final String TEXT_104 = NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_105 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_106 = "());" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_107 = ".CONNECTION_BENDPOINTS_ROLE, new ";
  protected final String TEXT_108 = "());" + NL + "\t}" + NL;
  protected final String TEXT_109 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_110 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_111 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_112 = " nextChild = (";
  protected final String TEXT_113 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_114 = ".getVisualID(nextChild) == ";
  protected final String TEXT_115 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_116 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_117 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_118 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_119 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_120 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_121 = " getLabelEditPart(";
  protected final String TEXT_122 = " req) {" + NL + "\t\t";
  protected final String TEXT_123 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_124 = " view = (";
  protected final String TEXT_125 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_126 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_127 = NL + "\t\t\t\tcase ";
  protected final String TEXT_128 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_129 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_130 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_131 = NL;
  protected final String TEXT_132 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_133 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_134 = " feature, ";
  protected final String TEXT_135 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + NL;
  protected final String TEXT_136 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_137 = NL;
  protected final String TEXT_138 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " domainModelRefresher = new ";
  protected final String TEXT_140 = "(this);" + NL;
  protected final String TEXT_141 = NL;
  protected final String TEXT_142 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_143 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_144 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_145 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
d167 3
a169 3
  protected final String TEXT_147 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_148 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_149 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d171 244
a414 32
  protected final String TEXT_151 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_152 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_153 = NL;
  protected final String TEXT_154 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_155 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_156 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_157 = " bendpoints = (";
  protected final String TEXT_158 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_159 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_160 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_161 = " figureConstraint = new ";
  protected final String TEXT_162 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_163 = " wbp = (";
  protected final String TEXT_164 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_165 = " rbp = new ";
  protected final String TEXT_166 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_167 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_168 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_169 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_170 = " createFigure() {";
  protected final String TEXT_171 = NL + "\t\treturn new ";
  protected final String TEXT_172 = "();";
  protected final String TEXT_173 = NL + "\t\treturn ";
  protected final String TEXT_174 = ";";
  protected final String TEXT_175 = NL + " \t\treturn new ";
  protected final String TEXT_176 = "();";
  protected final String TEXT_177 = NL + "\t}" + NL;
  protected final String TEXT_178 = NL;
  protected final String TEXT_179 = NL;
  protected final String TEXT_180 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_181 = NL + "}";
  protected final String TEXT_182 = NL;
d423 1
d474 10
d486 1
d488 1
a488 1
    stringBuffer.append(TEXT_25);
d490 1
a490 1
    stringBuffer.append(TEXT_26);
d492 1
a492 1
    stringBuffer.append(TEXT_27);
d494 1
a494 1
    stringBuffer.append(TEXT_28);
d496 1
a496 1
    stringBuffer.append(TEXT_29);
a497 2
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d501 2
d504 1
a504 1
    stringBuffer.append(TEXT_33);
d506 1
a506 1
    stringBuffer.append(TEXT_34);
d511 1
a511 1
    stringBuffer.append(TEXT_35);
d515 1
a515 1
    stringBuffer.append(TEXT_36);
d517 1
a517 1
    stringBuffer.append(TEXT_37);
d519 1
a519 1
    stringBuffer.append(TEXT_38);
a545 2
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d549 2
d554 1
a554 1
    stringBuffer.append(TEXT_42);
a555 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(_edge);
d561 2
d566 1
a566 1
    stringBuffer.append(TEXT_47);
a567 2
    stringBuffer.append(TEXT_48);
    stringBuffer.append(_edge);
d571 2
d574 1
a574 1
    stringBuffer.append(TEXT_51);
d579 1
a579 1
    stringBuffer.append(TEXT_52);
d581 1
a581 1
    stringBuffer.append(TEXT_53);
d587 1
a587 1
    stringBuffer.append(TEXT_54);
d589 1
a589 1
    stringBuffer.append(TEXT_55);
d591 1
a591 1
    stringBuffer.append(TEXT_56);
d593 1
a593 1
    stringBuffer.append(TEXT_57);
d595 1
a595 1
    stringBuffer.append(TEXT_58);
d597 1
a597 1
    stringBuffer.append(TEXT_59);
d601 1
a601 1
    stringBuffer.append(TEXT_60);
d603 1
a603 1
    stringBuffer.append(TEXT_61);
d605 1
a605 1
    stringBuffer.append(TEXT_62);
d607 1
a607 1
    stringBuffer.append(TEXT_63);
d609 1
a609 1
    stringBuffer.append(TEXT_64);
d611 1
a611 1
    stringBuffer.append(TEXT_65);
d618 1
a618 1
    stringBuffer.append(TEXT_66);
d620 1
a620 1
    stringBuffer.append(TEXT_67);
d622 1
a622 1
    stringBuffer.append(TEXT_68);
d624 1
a624 1
    stringBuffer.append(TEXT_69);
d626 1
a626 1
    stringBuffer.append(TEXT_70);
d628 1
a628 1
    stringBuffer.append(TEXT_71);
d632 1
a632 1
    stringBuffer.append(TEXT_72);
d634 1
a634 1
    stringBuffer.append(TEXT_73);
d636 1
a636 1
    stringBuffer.append(TEXT_74);
d638 1
a638 1
    stringBuffer.append(TEXT_75);
d640 1
a640 1
    stringBuffer.append(TEXT_76);
d642 1
a642 1
    stringBuffer.append(TEXT_77);
d649 1
a649 1
    stringBuffer.append(TEXT_78);
d651 1
a651 1
    stringBuffer.append(TEXT_79);
d653 1
a653 1
    stringBuffer.append(TEXT_80);
d655 1
a655 1
    stringBuffer.append(TEXT_81);
d657 1
a657 1
    stringBuffer.append(TEXT_82);
d659 1
a659 1
    stringBuffer.append(TEXT_83);
d663 1
a663 1
    stringBuffer.append(TEXT_84);
d665 1
a665 1
    stringBuffer.append(TEXT_85);
d667 1
a667 1
    stringBuffer.append(TEXT_86);
d669 1
a669 1
    stringBuffer.append(TEXT_87);
d671 1
a671 1
    stringBuffer.append(TEXT_88);
d673 1
a673 1
    stringBuffer.append(TEXT_89);
d678 1
a678 1
    stringBuffer.append(TEXT_90);
d684 1
a684 1
    stringBuffer.append(TEXT_91);
d686 1
a686 1
    stringBuffer.append(TEXT_92);
d688 1
a688 1
    stringBuffer.append(TEXT_93);
d690 1
a690 1
    stringBuffer.append(TEXT_94);
d692 1
a692 1
    stringBuffer.append(TEXT_95);
d694 1
a694 1
    stringBuffer.append(TEXT_96);
d698 1
a698 1
    stringBuffer.append(TEXT_97);
d700 1
a700 1
    stringBuffer.append(TEXT_98);
d702 1
a702 1
    stringBuffer.append(TEXT_99);
d704 1
a704 1
    stringBuffer.append(TEXT_100);
d706 1
a706 1
    stringBuffer.append(TEXT_101);
d708 1
a708 1
    stringBuffer.append(TEXT_102);
d715 1
a715 1
    stringBuffer.append(TEXT_103);
d719 1
a719 1
    stringBuffer.append(TEXT_104);
d721 1
a721 1
    stringBuffer.append(TEXT_105);
d723 1
a723 1
    stringBuffer.append(TEXT_106);
d725 1
a725 1
    stringBuffer.append(TEXT_107);
d727 15
a741 1
    stringBuffer.append(TEXT_108);
a742 7
GenLinkLabel primaryLabel = null;
for(Iterator it = genLink.getLabels().iterator(); it.hasNext(); ) {
	GenLinkLabel next = (GenLinkLabel)it.next();
	if (!next.isReadOnly()) {
		primaryLabel = next;
		break;
	}
d744 3
d749 1
a749 1
    stringBuffer.append(TEXT_109);
d751 1
a751 1
    stringBuffer.append(TEXT_110);
d753 1
a753 1
    stringBuffer.append(TEXT_111);
d755 1
a755 1
    stringBuffer.append(TEXT_112);
d757 1
a757 1
    stringBuffer.append(TEXT_113);
d759 1
a759 1
    stringBuffer.append(TEXT_114);
d761 1
a761 1
    stringBuffer.append(TEXT_115);
d763 1
a763 1
    stringBuffer.append(TEXT_116);
d765 1
a765 1
    stringBuffer.append(TEXT_117);
d767 1
a767 1
    stringBuffer.append(TEXT_118);
d769 1
a769 1
    stringBuffer.append(TEXT_119);
d771 1
a771 1
    stringBuffer.append(TEXT_120);
d773 1
a773 1
    stringBuffer.append(TEXT_121);
d775 1
a775 1
    stringBuffer.append(TEXT_122);
d777 1
a777 1
    stringBuffer.append(TEXT_123);
d779 1
a779 1
    stringBuffer.append(TEXT_124);
d781 1
a781 1
    stringBuffer.append(TEXT_125);
d783 1
a783 1
    stringBuffer.append(TEXT_126);
d791 1
a791 1
    stringBuffer.append(TEXT_127);
d793 1
a793 1
    stringBuffer.append(TEXT_128);
d797 1
a797 1
    stringBuffer.append(TEXT_129);
d801 3
a803 3
    stringBuffer.append(TEXT_130);
    stringBuffer.append(TEXT_131);
    stringBuffer.append(TEXT_132);
d805 1
a805 1
    stringBuffer.append(TEXT_133);
d807 1
a807 1
    stringBuffer.append(TEXT_134);
d809 3
a811 1
    stringBuffer.append(TEXT_135);
d816 3
a818 3
    stringBuffer.append(TEXT_136);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(TEXT_138);
d820 1
a820 1
    stringBuffer.append(TEXT_139);
d822 1
a822 1
    stringBuffer.append(TEXT_140);
d826 2
a827 2
    stringBuffer.append(TEXT_141);
    stringBuffer.append(TEXT_142);
d829 1
a829 1
    stringBuffer.append(TEXT_143);
d831 1
a831 1
    stringBuffer.append(TEXT_144);
d833 3
a835 3
    stringBuffer.append(TEXT_145);
    stringBuffer.append(TEXT_146);
    stringBuffer.append(TEXT_147);
d837 1
a837 1
    stringBuffer.append(TEXT_148);
d839 3
a841 3
    stringBuffer.append(TEXT_149);
    stringBuffer.append(TEXT_150);
    stringBuffer.append(TEXT_151);
d843 3
a845 3
    stringBuffer.append(TEXT_152);
    stringBuffer.append(TEXT_153);
    stringBuffer.append(TEXT_154);
d847 1
a847 1
    stringBuffer.append(TEXT_155);
d849 1
a849 1
    stringBuffer.append(TEXT_156);
d851 1
a851 1
    stringBuffer.append(TEXT_157);
d853 1
a853 1
    stringBuffer.append(TEXT_158);
d855 1
a855 1
    stringBuffer.append(TEXT_159);
d857 1
a857 1
    stringBuffer.append(TEXT_160);
d859 1
a859 1
    stringBuffer.append(TEXT_161);
d861 1
a861 1
    stringBuffer.append(TEXT_162);
d863 1
a863 1
    stringBuffer.append(TEXT_163);
d865 1
a865 1
    stringBuffer.append(TEXT_164);
d867 1
a867 1
    stringBuffer.append(TEXT_165);
d869 1
a869 1
    stringBuffer.append(TEXT_166);
d871 1
a871 1
    stringBuffer.append(TEXT_167);
d873 1
a873 1
    stringBuffer.append(TEXT_168);
d875 1
a875 1
    stringBuffer.append(TEXT_169);
d877 1
a877 1
    stringBuffer.append(TEXT_170);
d887 1
a887 1
    stringBuffer.append(TEXT_171);
d889 1
a889 1
    stringBuffer.append(TEXT_172);
d892 1
a892 1
    stringBuffer.append(TEXT_173);
d894 1
a894 1
    stringBuffer.append(TEXT_174);
d897 1
a897 1
    stringBuffer.append(TEXT_175);
d899 1
a899 1
    stringBuffer.append(TEXT_176);
d901 1
a901 1
    stringBuffer.append(TEXT_177);
d906 1
a906 1
    stringBuffer.append(TEXT_178);
d908 1
a908 1
    stringBuffer.append(TEXT_179);
d912 523
a1434 1
    stringBuffer.append(TEXT_180);
d1436 2
d1440 23
d1466 5
a1470 1
    stringBuffer.append(TEXT_181);
d1472 1
a1472 1
    stringBuffer.append(TEXT_182);
@


1.10
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d26 172
a197 172
  protected final String TEXT_6 = " implements IUpdatableEditPart {";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_9 = ";";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_11 = "(";
  protected final String TEXT_12 = " view) {" + NL + "\t\tassert view instanceof ";
  protected final String TEXT_13 = ";" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_14 = " getDiagramEdge() {" + NL + "\t\treturn (";
  protected final String TEXT_15 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_16 = NL;
  protected final String TEXT_17 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_18 = " view = (";
  protected final String TEXT_19 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_20 = " view = (";
  protected final String TEXT_21 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
  protected final String TEXT_22 = NL;
  protected final String TEXT_23 = "\t\tinstallEditPolicy(";
  protected final String TEXT_24 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_25 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_26 = " createDeleteCommand(";
  protected final String TEXT_27 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_28 = " editingDomain = ";
  protected final String TEXT_29 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_30 = " cc = new ";
  protected final String TEXT_31 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_32 = "() {" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\treturn new WrappingCommand(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_33 = NL;
  protected final String TEXT_34 = NL + "\t\t\tprivate ";
  protected final String TEXT_35 = " createDomainModelRemoveCommand(";
  protected final String TEXT_36 = " editingDomain) {";
  protected final String TEXT_37 = NL + "\t\t\t\t";
  protected final String TEXT_38 = " result = new ";
  protected final String TEXT_39 = "();";
  protected final String TEXT_40 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_41 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_42 = ".getElement().eContainer(), ";
  protected final String TEXT_43 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_44 = ".getElement()));";
  protected final String TEXT_45 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_46 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_47 = ".getElement().eContainer(), ";
  protected final String TEXT_48 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_49 = ".UNSET_VALUE));";
  protected final String TEXT_50 = NL + "\t\t\t\treturn ";
  protected final String TEXT_51 = ".INSTANCE;";
  protected final String TEXT_52 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_53 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_54 = ".getElement().eContainer(), ";
  protected final String TEXT_55 = ".eINSTANCE.get";
  protected final String TEXT_56 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_57 = ".getElement()));";
  protected final String TEXT_58 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_59 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_60 = ".getElement().eContainer(), ";
  protected final String TEXT_61 = ".eINSTANCE.get";
  protected final String TEXT_62 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_63 = ".UNSET_VALUE));";
  protected final String TEXT_64 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_65 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_66 = ".getElement(), ";
  protected final String TEXT_67 = ".eINSTANCE.get";
  protected final String TEXT_68 = "(), ";
  protected final String TEXT_69 = ".getSource().getElement()));";
  protected final String TEXT_70 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_71 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_72 = ".getElement(), ";
  protected final String TEXT_73 = ".eINSTANCE.get";
  protected final String TEXT_74 = "(), ";
  protected final String TEXT_75 = ".UNSET_VALUE));";
  protected final String TEXT_76 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_77 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_78 = ".getElement(), ";
  protected final String TEXT_79 = ".eINSTANCE.get";
  protected final String TEXT_80 = "(), ";
  protected final String TEXT_81 = ".getTarget().getElement()));";
  protected final String TEXT_82 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_83 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_84 = ".getElement(), ";
  protected final String TEXT_85 = ".eINSTANCE.get";
  protected final String TEXT_86 = "(), ";
  protected final String TEXT_87 = ".UNSET_VALUE));";
  protected final String TEXT_88 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_89 = NL + "\t\t\t\treturn ";
  protected final String TEXT_90 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_91 = ".getSource().getElement(), ";
  protected final String TEXT_92 = ".eINSTANCE.get";
  protected final String TEXT_93 = "(), ";
  protected final String TEXT_94 = ".getTarget().getElement());";
  protected final String TEXT_95 = NL + "\t\t\t\treturn ";
  protected final String TEXT_96 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_97 = ".getSource().getElement(), ";
  protected final String TEXT_98 = ".eINSTANCE.get";
  protected final String TEXT_99 = "(), ";
  protected final String TEXT_100 = ".UNSET_VALUE);";
  protected final String TEXT_101 = NL + "\t\t\t}";
  protected final String TEXT_102 = NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_103 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_104 = "());" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_105 = ".CONNECTION_BENDPOINTS_ROLE, new ";
  protected final String TEXT_106 = "());" + NL + "\t}" + NL;
  protected final String TEXT_107 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_108 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_109 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_110 = " nextChild = (";
  protected final String TEXT_111 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_112 = ".getVisualID(nextChild) == ";
  protected final String TEXT_113 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_114 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_115 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_116 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_117 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_118 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_119 = " getLabelEditPart(";
  protected final String TEXT_120 = " req) {" + NL + "\t\t";
  protected final String TEXT_121 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_122 = " view = (";
  protected final String TEXT_123 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_124 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_125 = NL + "\t\t\t\tcase ";
  protected final String TEXT_126 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_127 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_128 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_129 = NL;
  protected final String TEXT_130 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_131 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_132 = " feature, ";
  protected final String TEXT_133 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + NL;
  protected final String TEXT_134 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_135 = NL;
  protected final String TEXT_136 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_137 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_138 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_139 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_142 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_143 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_144 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_145 = NL;
  protected final String TEXT_146 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_147 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_148 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_149 = NL;
  protected final String TEXT_150 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_151 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_154 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_155 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_156 = " bendpoints = (";
  protected final String TEXT_157 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_158 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_159 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_160 = " figureConstraint = new ";
  protected final String TEXT_161 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_162 = " wbp = (";
  protected final String TEXT_163 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_164 = " rbp = new ";
  protected final String TEXT_165 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_166 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_167 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_168 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_169 = " createFigure() {";
  protected final String TEXT_170 = NL + "\t\treturn new ";
  protected final String TEXT_171 = "();";
  protected final String TEXT_172 = NL + "\t\treturn ";
  protected final String TEXT_173 = ";";
  protected final String TEXT_174 = NL + " \t\treturn new ";
  protected final String TEXT_175 = "();";
  protected final String TEXT_176 = NL + "\t}" + NL;
  protected final String TEXT_177 = NL;
d199 4
a202 3
  protected final String TEXT_179 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_180 = NL + "}";
  protected final String TEXT_181 = NL;
d231 2
a234 1
    stringBuffer.append(TEXT_7);
d236 1
d238 1
a238 1
    stringBuffer.append(TEXT_9);
d240 1
a240 1
    stringBuffer.append(TEXT_10);
d242 1
a242 1
    stringBuffer.append(TEXT_11);
a243 2
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d249 1
a251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d259 1
d262 1
d264 1
a264 1
    stringBuffer.append(TEXT_24);
d266 1
a266 1
    stringBuffer.append(TEXT_25);
d268 1
a268 1
    stringBuffer.append(TEXT_26);
d270 1
a270 1
    stringBuffer.append(TEXT_27);
d272 1
a272 1
    stringBuffer.append(TEXT_28);
a273 2
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d277 2
d280 3
a282 1
    stringBuffer.append(TEXT_32);
d287 1
a287 1
    stringBuffer.append(TEXT_33);
d291 1
a291 1
    stringBuffer.append(TEXT_34);
d293 1
a293 1
    stringBuffer.append(TEXT_35);
d295 1
a295 1
    stringBuffer.append(TEXT_36);
d322 1
a322 1
    stringBuffer.append(TEXT_37);
d324 1
a324 1
    stringBuffer.append(TEXT_38);
d326 1
a326 1
    stringBuffer.append(TEXT_39);
d330 1
a330 1
    stringBuffer.append(TEXT_40);
d332 1
a332 1
    stringBuffer.append(TEXT_41);
d334 1
a334 1
    stringBuffer.append(TEXT_42);
d336 1
a336 1
    stringBuffer.append(TEXT_43);
d338 1
a338 1
    stringBuffer.append(TEXT_44);
d342 1
a342 1
    stringBuffer.append(TEXT_45);
d344 1
a344 1
    stringBuffer.append(TEXT_46);
d346 1
a346 1
    stringBuffer.append(TEXT_47);
d348 1
a348 1
    stringBuffer.append(TEXT_48);
d350 1
a350 1
    stringBuffer.append(TEXT_49);
d355 1
a355 1
    stringBuffer.append(TEXT_50);
d357 1
a357 1
    stringBuffer.append(TEXT_51);
d363 1
a363 1
    stringBuffer.append(TEXT_52);
d365 1
a365 1
    stringBuffer.append(TEXT_53);
d367 1
a367 1
    stringBuffer.append(TEXT_54);
d369 1
a369 1
    stringBuffer.append(TEXT_55);
d371 1
a371 1
    stringBuffer.append(TEXT_56);
d373 1
a373 1
    stringBuffer.append(TEXT_57);
d377 1
a377 1
    stringBuffer.append(TEXT_58);
d379 1
a379 1
    stringBuffer.append(TEXT_59);
d381 1
a381 1
    stringBuffer.append(TEXT_60);
d383 1
a383 1
    stringBuffer.append(TEXT_61);
d385 1
a385 1
    stringBuffer.append(TEXT_62);
d387 1
a387 1
    stringBuffer.append(TEXT_63);
d394 1
a394 1
    stringBuffer.append(TEXT_64);
d396 1
a396 1
    stringBuffer.append(TEXT_65);
d398 1
a398 1
    stringBuffer.append(TEXT_66);
d400 1
a400 1
    stringBuffer.append(TEXT_67);
d402 1
a402 1
    stringBuffer.append(TEXT_68);
d404 1
a404 1
    stringBuffer.append(TEXT_69);
d408 1
a408 1
    stringBuffer.append(TEXT_70);
d410 1
a410 1
    stringBuffer.append(TEXT_71);
d412 1
a412 1
    stringBuffer.append(TEXT_72);
d414 1
a414 1
    stringBuffer.append(TEXT_73);
d416 1
a416 1
    stringBuffer.append(TEXT_74);
d418 1
a418 1
    stringBuffer.append(TEXT_75);
d425 1
a425 1
    stringBuffer.append(TEXT_76);
d427 1
a427 1
    stringBuffer.append(TEXT_77);
d429 1
a429 1
    stringBuffer.append(TEXT_78);
d431 1
a431 1
    stringBuffer.append(TEXT_79);
d433 1
a433 1
    stringBuffer.append(TEXT_80);
d435 1
a435 1
    stringBuffer.append(TEXT_81);
d439 1
a439 1
    stringBuffer.append(TEXT_82);
d441 1
a441 1
    stringBuffer.append(TEXT_83);
d443 1
a443 1
    stringBuffer.append(TEXT_84);
d445 1
a445 1
    stringBuffer.append(TEXT_85);
d447 1
a447 1
    stringBuffer.append(TEXT_86);
d449 1
a449 1
    stringBuffer.append(TEXT_87);
d454 1
a454 1
    stringBuffer.append(TEXT_88);
d460 1
a460 1
    stringBuffer.append(TEXT_89);
d462 1
a462 1
    stringBuffer.append(TEXT_90);
d464 1
a464 1
    stringBuffer.append(TEXT_91);
d466 1
a466 1
    stringBuffer.append(TEXT_92);
d468 1
a468 1
    stringBuffer.append(TEXT_93);
d470 1
a470 1
    stringBuffer.append(TEXT_94);
d474 1
a474 1
    stringBuffer.append(TEXT_95);
d476 1
a476 1
    stringBuffer.append(TEXT_96);
d478 1
a478 1
    stringBuffer.append(TEXT_97);
d480 1
a480 1
    stringBuffer.append(TEXT_98);
d482 1
a482 1
    stringBuffer.append(TEXT_99);
d484 1
a484 1
    stringBuffer.append(TEXT_100);
d491 1
a491 1
    stringBuffer.append(TEXT_101);
a494 4
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ConnectionEndpointEditPolicy"));
d498 1
a498 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPoliciesPackageName() + ".BendpointEditPolicy"));
d500 4
d515 1
a515 1
    stringBuffer.append(TEXT_107);
d517 1
a517 1
    stringBuffer.append(TEXT_108);
d519 1
a519 1
    stringBuffer.append(TEXT_109);
d521 1
a521 1
    stringBuffer.append(TEXT_110);
d523 1
a523 1
    stringBuffer.append(TEXT_111);
d525 1
a525 1
    stringBuffer.append(TEXT_112);
d527 1
a527 1
    stringBuffer.append(TEXT_113);
d529 1
a529 1
    stringBuffer.append(TEXT_114);
d531 1
a531 1
    stringBuffer.append(TEXT_115);
d533 1
a533 1
    stringBuffer.append(TEXT_116);
a534 4
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d540 4
d545 1
a545 1
    stringBuffer.append(TEXT_122);
d547 1
a547 1
    stringBuffer.append(TEXT_123);
d549 1
a549 1
    stringBuffer.append(TEXT_124);
d557 1
a557 1
    stringBuffer.append(TEXT_125);
d559 1
a559 1
    stringBuffer.append(TEXT_126);
d563 1
a563 1
    stringBuffer.append(TEXT_127);
a566 2
    stringBuffer.append(TEXT_128);
    stringBuffer.append(TEXT_129);
d568 2
d571 1
a571 1
    stringBuffer.append(TEXT_131);
d573 1
a573 1
    stringBuffer.append(TEXT_132);
d575 1
a575 1
    stringBuffer.append(TEXT_133);
a579 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(TEXT_135);
a580 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
a581 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d583 1
a583 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d585 2
a589 1
    stringBuffer.append(TEXT_140);
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d596 1
a598 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d602 1
d605 1
a606 1
    stringBuffer.append(TEXT_151);
a608 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d612 1
a612 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints"));
d616 2
a618 2
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d622 2
a624 2
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint"));
d628 1
a628 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint"));
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d636 2
d639 1
a639 1
    stringBuffer.append(TEXT_168);
d641 1
a641 1
    stringBuffer.append(TEXT_169);
d651 1
a651 1
    stringBuffer.append(TEXT_170);
d653 1
a653 1
    stringBuffer.append(TEXT_171);
d656 1
a656 1
    stringBuffer.append(TEXT_172);
d658 1
a658 1
    stringBuffer.append(TEXT_173);
d661 1
a661 1
    stringBuffer.append(TEXT_174);
d663 1
a663 1
    stringBuffer.append(TEXT_175);
d665 1
a665 1
    stringBuffer.append(TEXT_176);
d670 1
a670 1
    stringBuffer.append(TEXT_177);
d672 1
a672 1
    stringBuffer.append(TEXT_178);
d676 1
a676 1
    stringBuffer.append(TEXT_179);
d683 1
a683 1
    stringBuffer.append(TEXT_180);
d685 1
a685 1
    stringBuffer.append(TEXT_181);
@


1.9
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@d35 1
a35 1
  protected final String TEXT_15 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
d37 35
a71 35
  protected final String TEXT_17 = "\t\tinstallEditPolicy(";
  protected final String TEXT_18 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_19 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_20 = " createDeleteCommand(";
  protected final String TEXT_21 = " deleteRequest) {" + NL + "\t\t\t\tfinal Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\tfinal View source = edgeToRemove.getSource();" + NL + "\t\t\t\tfinal View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t";
  protected final String TEXT_22 = " editingDomain = ";
  protected final String TEXT_23 = ".getEditingDomain(getDiagramEdge().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_24 = " cc = new ";
  protected final String TEXT_25 = "();" + NL + "\t\t\t\tcc.append(createDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_26 = "() {" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\treturn new WrappingCommand(editingDomain, cc);" + NL + "\t\t\t}";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t\t\tprivate ";
  protected final String TEXT_29 = " createDomainModelRemoveCommand(";
  protected final String TEXT_30 = " editingDomain) {";
  protected final String TEXT_31 = NL + "\t\t\t\t";
  protected final String TEXT_32 = " result = new ";
  protected final String TEXT_33 = "();";
  protected final String TEXT_34 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_35 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_36 = ".getElement().eContainer(), ";
  protected final String TEXT_37 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_38 = ".getElement()));";
  protected final String TEXT_39 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_40 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_41 = ".getElement().eContainer(), ";
  protected final String TEXT_42 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_43 = ".UNSET_VALUE));";
  protected final String TEXT_44 = NL + "\t\t\t\treturn ";
  protected final String TEXT_45 = ".INSTANCE;";
  protected final String TEXT_46 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_47 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_48 = ".getElement().eContainer(), ";
  protected final String TEXT_49 = ".eINSTANCE.get";
  protected final String TEXT_50 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_51 = ".getElement()));";
d77 1
a77 1
  protected final String TEXT_57 = ".UNSET_VALUE));";
d80 1
a80 1
  protected final String TEXT_60 = ".getElement(), ";
d82 2
a83 2
  protected final String TEXT_62 = "(), ";
  protected final String TEXT_63 = ".getSource().getElement()));";
d89 1
a89 1
  protected final String TEXT_69 = ".UNSET_VALUE));";
d95 1
a95 1
  protected final String TEXT_75 = ".getTarget().getElement()));";
d101 8
a108 8
  protected final String TEXT_81 = ".UNSET_VALUE));";
  protected final String TEXT_82 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_83 = NL + "\t\t\t\treturn ";
  protected final String TEXT_84 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_85 = ".getSource().getElement(), ";
  protected final String TEXT_86 = ".eINSTANCE.get";
  protected final String TEXT_87 = "(), ";
  protected final String TEXT_88 = ".getTarget().getElement());";
d114 35
a148 35
  protected final String TEXT_94 = ".UNSET_VALUE);";
  protected final String TEXT_95 = NL + "\t\t\t}";
  protected final String TEXT_96 = NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_97 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_98 = "());" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_99 = ".CONNECTION_BENDPOINTS_ROLE, new ";
  protected final String TEXT_100 = "());" + NL + "\t}" + NL;
  protected final String TEXT_101 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_102 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_103 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_104 = " nextChild = (";
  protected final String TEXT_105 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_106 = ".getVisualID(nextChild) == ";
  protected final String TEXT_107 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_108 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_109 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_110 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_111 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_112 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_113 = " getLabelEditPart(";
  protected final String TEXT_114 = " req) {" + NL + "\t\t";
  protected final String TEXT_115 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_116 = " view = (";
  protected final String TEXT_117 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_118 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_119 = NL + "\t\t\t\tcase ";
  protected final String TEXT_120 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_121 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_122 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_123 = NL;
  protected final String TEXT_124 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_125 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_126 = " feature, ";
  protected final String TEXT_127 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + NL;
  protected final String TEXT_128 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
d150 52
a201 46
  protected final String TEXT_130 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_131 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_132 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_133 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_134 = NL;
  protected final String TEXT_135 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_136 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_137 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_138 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_139 = NL;
  protected final String TEXT_140 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_141 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_142 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_143 = NL;
  protected final String TEXT_144 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_145 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_146 = NL;
  protected final String TEXT_147 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_148 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_149 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_150 = " bendpoints = (";
  protected final String TEXT_151 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_152 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_153 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_154 = " figureConstraint = new ";
  protected final String TEXT_155 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_156 = " wbp = (";
  protected final String TEXT_157 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_158 = " rbp = new ";
  protected final String TEXT_159 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_160 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_161 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_162 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_163 = " createFigure() {";
  protected final String TEXT_164 = NL + "\t\treturn new ";
  protected final String TEXT_165 = "();";
  protected final String TEXT_166 = NL + "\t\treturn ";
  protected final String TEXT_167 = ";";
  protected final String TEXT_168 = NL + " \t\treturn new ";
  protected final String TEXT_169 = "();";
  protected final String TEXT_170 = NL + "\t}" + NL;
  protected final String TEXT_171 = NL;
  protected final String TEXT_172 = NL;
  protected final String TEXT_173 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_174 = NL + "}";
  protected final String TEXT_175 = NL;
d250 10
d261 1
a261 1
    stringBuffer.append(TEXT_18);
d263 1
a263 1
    stringBuffer.append(TEXT_19);
d265 1
a265 1
    stringBuffer.append(TEXT_20);
d267 1
a267 1
    stringBuffer.append(TEXT_21);
d269 1
a269 1
    stringBuffer.append(TEXT_22);
d271 1
a271 1
    stringBuffer.append(TEXT_23);
d273 1
a273 1
    stringBuffer.append(TEXT_24);
d275 1
a275 1
    stringBuffer.append(TEXT_25);
d277 1
a277 1
    stringBuffer.append(TEXT_26);
d282 1
a282 1
    stringBuffer.append(TEXT_27);
d286 1
a286 1
    stringBuffer.append(TEXT_28);
d288 1
a288 1
    stringBuffer.append(TEXT_29);
d290 1
a290 1
    stringBuffer.append(TEXT_30);
d317 1
a317 1
    stringBuffer.append(TEXT_31);
d319 1
a319 1
    stringBuffer.append(TEXT_32);
d321 1
a321 1
    stringBuffer.append(TEXT_33);
d325 1
a325 1
    stringBuffer.append(TEXT_34);
d327 1
a327 1
    stringBuffer.append(TEXT_35);
d329 1
a329 1
    stringBuffer.append(TEXT_36);
d331 1
a331 1
    stringBuffer.append(TEXT_37);
d333 1
a333 1
    stringBuffer.append(TEXT_38);
d337 1
a337 1
    stringBuffer.append(TEXT_39);
d339 1
a339 1
    stringBuffer.append(TEXT_40);
d341 1
a341 1
    stringBuffer.append(TEXT_41);
d343 1
a343 1
    stringBuffer.append(TEXT_42);
d345 1
a345 1
    stringBuffer.append(TEXT_43);
d350 1
a350 1
    stringBuffer.append(TEXT_44);
d352 1
a352 1
    stringBuffer.append(TEXT_45);
d358 1
a358 1
    stringBuffer.append(TEXT_46);
d360 1
a360 1
    stringBuffer.append(TEXT_47);
d362 1
a362 1
    stringBuffer.append(TEXT_48);
d364 1
a364 1
    stringBuffer.append(TEXT_49);
d366 1
a366 1
    stringBuffer.append(TEXT_50);
d368 1
a368 1
    stringBuffer.append(TEXT_51);
d372 1
a372 1
    stringBuffer.append(TEXT_52);
d374 1
a374 1
    stringBuffer.append(TEXT_53);
d376 1
a376 1
    stringBuffer.append(TEXT_54);
d378 1
a378 1
    stringBuffer.append(TEXT_55);
d380 1
a380 1
    stringBuffer.append(TEXT_56);
d382 1
a382 1
    stringBuffer.append(TEXT_57);
d389 1
a389 1
    stringBuffer.append(TEXT_58);
d391 1
a391 1
    stringBuffer.append(TEXT_59);
d393 1
a393 1
    stringBuffer.append(TEXT_60);
d395 1
a395 1
    stringBuffer.append(TEXT_61);
d397 1
a397 1
    stringBuffer.append(TEXT_62);
d399 1
a399 1
    stringBuffer.append(TEXT_63);
d403 1
a403 1
    stringBuffer.append(TEXT_64);
d405 1
a405 1
    stringBuffer.append(TEXT_65);
d407 1
a407 1
    stringBuffer.append(TEXT_66);
d409 1
a409 1
    stringBuffer.append(TEXT_67);
d411 1
a411 1
    stringBuffer.append(TEXT_68);
d413 1
a413 1
    stringBuffer.append(TEXT_69);
d420 1
a420 1
    stringBuffer.append(TEXT_70);
d422 1
a422 1
    stringBuffer.append(TEXT_71);
d424 1
a424 1
    stringBuffer.append(TEXT_72);
d426 1
a426 1
    stringBuffer.append(TEXT_73);
d428 1
a428 1
    stringBuffer.append(TEXT_74);
d430 1
a430 1
    stringBuffer.append(TEXT_75);
d434 1
a434 1
    stringBuffer.append(TEXT_76);
d436 1
a436 1
    stringBuffer.append(TEXT_77);
d438 1
a438 1
    stringBuffer.append(TEXT_78);
d440 1
a440 1
    stringBuffer.append(TEXT_79);
d442 1
a442 1
    stringBuffer.append(TEXT_80);
d444 1
a444 1
    stringBuffer.append(TEXT_81);
d449 1
a449 1
    stringBuffer.append(TEXT_82);
d455 1
a455 1
    stringBuffer.append(TEXT_83);
d457 1
a457 1
    stringBuffer.append(TEXT_84);
d459 1
a459 1
    stringBuffer.append(TEXT_85);
d461 1
a461 1
    stringBuffer.append(TEXT_86);
d463 1
a463 1
    stringBuffer.append(TEXT_87);
d465 1
a465 1
    stringBuffer.append(TEXT_88);
d469 1
a469 1
    stringBuffer.append(TEXT_89);
d471 1
a471 1
    stringBuffer.append(TEXT_90);
d473 1
a473 1
    stringBuffer.append(TEXT_91);
d475 1
a475 1
    stringBuffer.append(TEXT_92);
d477 1
a477 1
    stringBuffer.append(TEXT_93);
d479 1
a479 1
    stringBuffer.append(TEXT_94);
d486 1
a486 1
    stringBuffer.append(TEXT_95);
d490 1
a490 1
    stringBuffer.append(TEXT_96);
d492 1
a492 1
    stringBuffer.append(TEXT_97);
d494 1
a494 1
    stringBuffer.append(TEXT_98);
d496 1
a496 1
    stringBuffer.append(TEXT_99);
d498 1
a498 1
    stringBuffer.append(TEXT_100);
d510 1
a510 1
    stringBuffer.append(TEXT_101);
d512 1
a512 1
    stringBuffer.append(TEXT_102);
d514 1
a514 1
    stringBuffer.append(TEXT_103);
d516 1
a516 1
    stringBuffer.append(TEXT_104);
d518 1
a518 1
    stringBuffer.append(TEXT_105);
d520 1
a520 1
    stringBuffer.append(TEXT_106);
d522 1
a522 1
    stringBuffer.append(TEXT_107);
d524 1
a524 1
    stringBuffer.append(TEXT_108);
d526 1
a526 1
    stringBuffer.append(TEXT_109);
d528 1
a528 1
    stringBuffer.append(TEXT_110);
d530 1
a530 1
    stringBuffer.append(TEXT_111);
d532 1
a532 1
    stringBuffer.append(TEXT_112);
d534 1
a534 1
    stringBuffer.append(TEXT_113);
d536 1
a536 1
    stringBuffer.append(TEXT_114);
d538 1
a538 1
    stringBuffer.append(TEXT_115);
d540 1
a540 1
    stringBuffer.append(TEXT_116);
d542 1
a542 1
    stringBuffer.append(TEXT_117);
d544 1
a544 1
    stringBuffer.append(TEXT_118);
d552 1
a552 1
    stringBuffer.append(TEXT_119);
d554 1
a554 1
    stringBuffer.append(TEXT_120);
d558 1
a558 1
    stringBuffer.append(TEXT_121);
a561 13
    stringBuffer.append(TEXT_122);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_127);
    
if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
	//Otherwise, there's no element associated with the element

d565 1
a565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d567 2
a569 2
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d572 2
a573 1
}
a576 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d578 1
a578 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d580 2
a582 1
    stringBuffer.append(TEXT_138);
d584 3
a587 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d589 1
a589 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d591 1
d593 1
a594 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d597 1
d601 8
d610 1
a610 1
    stringBuffer.append(TEXT_149);
d612 1
a612 1
    stringBuffer.append(TEXT_150);
d614 1
a614 1
    stringBuffer.append(TEXT_151);
d616 1
a616 1
    stringBuffer.append(TEXT_152);
d618 1
a618 1
    stringBuffer.append(TEXT_153);
d620 1
a620 1
    stringBuffer.append(TEXT_154);
d622 1
a622 1
    stringBuffer.append(TEXT_155);
d624 1
a624 1
    stringBuffer.append(TEXT_156);
d626 1
a626 1
    stringBuffer.append(TEXT_157);
d628 1
a628 1
    stringBuffer.append(TEXT_158);
d630 1
a630 1
    stringBuffer.append(TEXT_159);
d632 1
a632 1
    stringBuffer.append(TEXT_160);
d634 1
a634 1
    stringBuffer.append(TEXT_161);
d636 1
a636 1
    stringBuffer.append(TEXT_162);
d638 1
a638 1
    stringBuffer.append(TEXT_163);
d648 1
a648 1
    stringBuffer.append(TEXT_164);
d650 1
a650 1
    stringBuffer.append(TEXT_165);
d653 1
a653 1
    stringBuffer.append(TEXT_166);
d655 1
a655 1
    stringBuffer.append(TEXT_167);
d658 1
a658 1
    stringBuffer.append(TEXT_168);
d660 1
a660 1
    stringBuffer.append(TEXT_169);
d662 1
a662 1
    stringBuffer.append(TEXT_170);
d667 1
a667 1
    stringBuffer.append(TEXT_171);
d669 1
a669 1
    stringBuffer.append(TEXT_172);
d673 1
a673 1
    stringBuffer.append(TEXT_173);
d680 1
a680 1
    stringBuffer.append(TEXT_174);
d682 1
a682 1
    stringBuffer.append(TEXT_175);
@


1.8
log
@#149298 Lite Generator: Make it possible to reroute links
@
text
@d147 44
a190 44
  protected final String TEXT_127 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_128 = NL;
  protected final String TEXT_129 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_130 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_131 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_132 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_133 = NL;
  protected final String TEXT_134 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_135 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_136 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_137 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_140 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_141 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_142 = NL;
  protected final String TEXT_143 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_144 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_145 = NL;
  protected final String TEXT_146 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_147 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_148 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_149 = " bendpoints = (";
  protected final String TEXT_150 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_151 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_152 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_153 = " figureConstraint = new ";
  protected final String TEXT_154 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_155 = " wbp = (";
  protected final String TEXT_156 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_157 = " rbp = new ";
  protected final String TEXT_158 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_159 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_160 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_161 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_162 = " createFigure() {";
  protected final String TEXT_163 = NL + "\t\treturn new ";
  protected final String TEXT_164 = "();";
  protected final String TEXT_165 = NL + "\t\treturn ";
  protected final String TEXT_166 = ";";
  protected final String TEXT_167 = NL + " \t\treturn new ";
  protected final String TEXT_168 = "();";
  protected final String TEXT_169 = NL + "\t}" + NL;
  protected final String TEXT_170 = NL;
d192 4
a195 3
  protected final String TEXT_172 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_173 = NL + "}";
  protected final String TEXT_174 = NL;
d555 4
d561 1
d563 1
a563 1
    stringBuffer.append(TEXT_130);
d565 1
a565 1
    stringBuffer.append(TEXT_131);
a566 1
    stringBuffer.append(TEXT_132);
d568 3
a571 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d577 1
a579 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d583 1
d586 1
a587 1
    stringBuffer.append(TEXT_144);
a589 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d593 1
a593 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints"));
d597 2
a599 2
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d603 2
a605 2
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint"));
d609 1
a609 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint"));
d613 1
a613 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d617 2
d620 1
a620 1
    stringBuffer.append(TEXT_161);
d622 1
a622 1
    stringBuffer.append(TEXT_162);
d632 1
a632 1
    stringBuffer.append(TEXT_163);
d634 1
a634 1
    stringBuffer.append(TEXT_164);
d637 1
a637 1
    stringBuffer.append(TEXT_165);
d639 1
a639 1
    stringBuffer.append(TEXT_166);
d642 1
a642 1
    stringBuffer.append(TEXT_167);
d644 1
a644 1
    stringBuffer.append(TEXT_168);
d646 1
a646 1
    stringBuffer.append(TEXT_169);
d651 1
a651 1
    stringBuffer.append(TEXT_170);
d653 1
a653 1
    stringBuffer.append(TEXT_171);
d657 1
a657 1
    stringBuffer.append(TEXT_172);
d664 1
a664 1
    stringBuffer.append(TEXT_173);
d666 1
a666 1
    stringBuffer.append(TEXT_174);
@


1.7
log
@#146009 Lite Generator: Changes in the underlying domain model should be automatically reflected in the notational model
1,2,3 Parts commited.
@
text
@d46 23
a68 23
  protected final String TEXT_26 = "() {" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn source != null && edgeToRemove != null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\treturn new WrappingCommand(editingDomain, cc);" + NL + "\t\t\t}" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command createDomainModelRemoveCommand(";
  protected final String TEXT_27 = " editingDomain) {";
  protected final String TEXT_28 = NL + "\t\t\t\t";
  protected final String TEXT_29 = " result = new ";
  protected final String TEXT_30 = "();";
  protected final String TEXT_31 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_32 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getElement().eContainer(), getDiagramEdge().getElement().eContainmentFeature(), getDiagramEdge().getElement()));";
  protected final String TEXT_33 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_34 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getElement().eContainer(), getDiagramEdge().getElement().eContainmentFeature(), ";
  protected final String TEXT_35 = ".UNSET_VALUE));";
  protected final String TEXT_36 = NL + "\t\t\t\treturn ";
  protected final String TEXT_37 = ".INSTANCE;";
  protected final String TEXT_38 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_39 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getElement().eContainer(), ";
  protected final String TEXT_40 = ".eINSTANCE.get";
  protected final String TEXT_41 = "()," + NL + "\t\t\t\t\tgetDiagramEdge().getElement()));";
  protected final String TEXT_42 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_43 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getElement().eContainer(), ";
  protected final String TEXT_44 = ".eINSTANCE.get";
  protected final String TEXT_45 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_46 = ".UNSET_VALUE));";
  protected final String TEXT_47 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_48 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getElement(), ";
d70 125
a194 104
  protected final String TEXT_50 = "(), getDiagramEdge().getSource().getElement()));";
  protected final String TEXT_51 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_52 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getElement(), ";
  protected final String TEXT_53 = ".eINSTANCE.get";
  protected final String TEXT_54 = "(), ";
  protected final String TEXT_55 = ".UNSET_VALUE));";
  protected final String TEXT_56 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_57 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getElement(), ";
  protected final String TEXT_58 = ".eINSTANCE.get";
  protected final String TEXT_59 = "(), getDiagramEdge().getTarget().getElement()));";
  protected final String TEXT_60 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_61 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getElement(), ";
  protected final String TEXT_62 = ".eINSTANCE.get";
  protected final String TEXT_63 = "(), ";
  protected final String TEXT_64 = ".UNSET_VALUE));";
  protected final String TEXT_65 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_66 = NL + "\t\t\t\treturn ";
  protected final String TEXT_67 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getSource().getElement(), ";
  protected final String TEXT_68 = ".eINSTANCE.get";
  protected final String TEXT_69 = "(), getDiagramEdge().getTarget().getElement());";
  protected final String TEXT_70 = NL + "\t\t\t\treturn ";
  protected final String TEXT_71 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tgetDiagramEdge().getSource().getElement(), ";
  protected final String TEXT_72 = ".eINSTANCE.get";
  protected final String TEXT_73 = "(), ";
  protected final String TEXT_74 = ".UNSET_VALUE);";
  protected final String TEXT_75 = NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_76 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_77 = "());" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_78 = ".CONNECTION_BENDPOINTS_ROLE, new ";
  protected final String TEXT_79 = "());" + NL + "\t}" + NL;
  protected final String TEXT_80 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_81 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_82 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_83 = " nextChild = (";
  protected final String TEXT_84 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_85 = ".getVisualID(nextChild) == ";
  protected final String TEXT_86 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_87 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_88 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_89 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_90 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_91 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_92 = " getLabelEditPart(";
  protected final String TEXT_93 = " req) {" + NL + "\t\t";
  protected final String TEXT_94 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_95 = " view = (";
  protected final String TEXT_96 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_97 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_98 = NL + "\t\t\t\tcase ";
  protected final String TEXT_99 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_100 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_101 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_102 = NL;
  protected final String TEXT_103 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_104 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_105 = " feature, ";
  protected final String TEXT_106 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_107 = NL;
  protected final String TEXT_108 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_109 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_110 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_111 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_112 = NL;
  protected final String TEXT_113 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_114 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_115 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_116 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_117 = NL;
  protected final String TEXT_118 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_119 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_120 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_121 = NL;
  protected final String TEXT_122 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_123 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_124 = NL;
  protected final String TEXT_125 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_126 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_127 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_128 = " bendpoints = (";
  protected final String TEXT_129 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_130 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_131 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_132 = " figureConstraint = new ";
  protected final String TEXT_133 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_134 = " wbp = (";
  protected final String TEXT_135 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_136 = " rbp = new ";
  protected final String TEXT_137 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_138 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_139 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_140 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_141 = " createFigure() {";
  protected final String TEXT_142 = NL + "\t\treturn new ";
  protected final String TEXT_143 = "();";
  protected final String TEXT_144 = NL + "\t\treturn ";
  protected final String TEXT_145 = ";";
  protected final String TEXT_146 = NL + " \t\treturn new ";
  protected final String TEXT_147 = "();";
  protected final String TEXT_148 = NL + "\t}" + NL;
  protected final String TEXT_149 = NL;
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_152 = NL + "}";
  protected final String TEXT_153 = NL;
d261 11
d273 1
a273 1
    stringBuffer.append(TEXT_27);
d300 1
a300 1
    stringBuffer.append(TEXT_28);
d302 1
a302 1
    stringBuffer.append(TEXT_29);
d304 1
a304 1
    stringBuffer.append(TEXT_30);
d308 1
a308 1
    stringBuffer.append(TEXT_31);
d310 7
a316 1
    stringBuffer.append(TEXT_32);
d320 1
a320 1
    stringBuffer.append(TEXT_33);
d322 5
a326 1
    stringBuffer.append(TEXT_34);
d328 1
a328 1
    stringBuffer.append(TEXT_35);
d333 1
a333 1
    stringBuffer.append(TEXT_36);
d335 1
a335 1
    stringBuffer.append(TEXT_37);
d341 1
a341 1
    stringBuffer.append(TEXT_38);
d343 3
a345 1
    stringBuffer.append(TEXT_39);
d347 1
a347 1
    stringBuffer.append(TEXT_40);
d349 3
a351 1
    stringBuffer.append(TEXT_41);
d355 1
a355 1
    stringBuffer.append(TEXT_42);
d357 3
a359 1
    stringBuffer.append(TEXT_43);
d361 1
a361 1
    stringBuffer.append(TEXT_44);
d363 1
a363 1
    stringBuffer.append(TEXT_45);
d365 1
a365 1
    stringBuffer.append(TEXT_46);
d372 1
a372 1
    stringBuffer.append(TEXT_47);
d374 3
a376 1
    stringBuffer.append(TEXT_48);
d378 1
a378 1
    stringBuffer.append(TEXT_49);
d380 3
a382 1
    stringBuffer.append(TEXT_50);
d386 1
a386 1
    stringBuffer.append(TEXT_51);
d388 3
a390 1
    stringBuffer.append(TEXT_52);
d392 1
a392 1
    stringBuffer.append(TEXT_53);
d394 1
a394 1
    stringBuffer.append(TEXT_54);
d396 1
a396 1
    stringBuffer.append(TEXT_55);
d403 1
a403 1
    stringBuffer.append(TEXT_56);
d405 3
a407 1
    stringBuffer.append(TEXT_57);
d409 1
a409 1
    stringBuffer.append(TEXT_58);
d411 3
a413 1
    stringBuffer.append(TEXT_59);
d417 1
a417 1
    stringBuffer.append(TEXT_60);
d419 3
a421 1
    stringBuffer.append(TEXT_61);
d423 1
a423 1
    stringBuffer.append(TEXT_62);
d425 1
a425 1
    stringBuffer.append(TEXT_63);
d427 1
a427 1
    stringBuffer.append(TEXT_64);
d432 1
a432 1
    stringBuffer.append(TEXT_65);
d438 1
a438 1
    stringBuffer.append(TEXT_66);
d440 3
a442 1
    stringBuffer.append(TEXT_67);
d444 1
a444 1
    stringBuffer.append(TEXT_68);
d446 3
a448 1
    stringBuffer.append(TEXT_69);
d452 1
a452 1
    stringBuffer.append(TEXT_70);
d454 3
a456 1
    stringBuffer.append(TEXT_71);
d458 1
a458 1
    stringBuffer.append(TEXT_72);
d460 1
a460 1
    stringBuffer.append(TEXT_73);
d462 1
a462 1
    stringBuffer.append(TEXT_74);
d469 5
a473 1
    stringBuffer.append(TEXT_75);
d475 1
a475 1
    stringBuffer.append(TEXT_76);
d477 1
a477 1
    stringBuffer.append(TEXT_77);
d479 1
a479 1
    stringBuffer.append(TEXT_78);
d481 1
a481 1
    stringBuffer.append(TEXT_79);
d493 1
a493 1
    stringBuffer.append(TEXT_80);
d495 1
a495 1
    stringBuffer.append(TEXT_81);
d497 1
a497 1
    stringBuffer.append(TEXT_82);
d499 1
a499 1
    stringBuffer.append(TEXT_83);
d501 1
a501 1
    stringBuffer.append(TEXT_84);
d503 1
a503 1
    stringBuffer.append(TEXT_85);
d505 1
a505 1
    stringBuffer.append(TEXT_86);
d507 1
a507 1
    stringBuffer.append(TEXT_87);
d509 1
a509 1
    stringBuffer.append(TEXT_88);
d511 1
a511 1
    stringBuffer.append(TEXT_89);
d513 1
a513 1
    stringBuffer.append(TEXT_90);
d515 1
a515 1
    stringBuffer.append(TEXT_91);
d517 1
a517 1
    stringBuffer.append(TEXT_92);
d519 1
a519 1
    stringBuffer.append(TEXT_93);
d521 1
a521 1
    stringBuffer.append(TEXT_94);
d523 1
a523 1
    stringBuffer.append(TEXT_95);
d525 1
a525 1
    stringBuffer.append(TEXT_96);
d527 1
a527 1
    stringBuffer.append(TEXT_97);
d535 1
a535 1
    stringBuffer.append(TEXT_98);
d537 1
a537 1
    stringBuffer.append(TEXT_99);
d541 1
a541 1
    stringBuffer.append(TEXT_100);
d545 3
a547 3
    stringBuffer.append(TEXT_101);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(TEXT_103);
d549 1
a549 1
    stringBuffer.append(TEXT_104);
d551 1
a551 1
    stringBuffer.append(TEXT_105);
d553 3
a555 3
    stringBuffer.append(TEXT_106);
    stringBuffer.append(TEXT_107);
    stringBuffer.append(TEXT_108);
d557 1
a557 1
    stringBuffer.append(TEXT_109);
d559 1
a559 1
    stringBuffer.append(TEXT_110);
d561 3
a563 3
    stringBuffer.append(TEXT_111);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(TEXT_113);
d565 1
a565 1
    stringBuffer.append(TEXT_114);
d567 1
a567 1
    stringBuffer.append(TEXT_115);
d569 3
a571 3
    stringBuffer.append(TEXT_116);
    stringBuffer.append(TEXT_117);
    stringBuffer.append(TEXT_118);
d573 1
a573 1
    stringBuffer.append(TEXT_119);
d575 3
a577 3
    stringBuffer.append(TEXT_120);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(TEXT_122);
d579 3
a581 3
    stringBuffer.append(TEXT_123);
    stringBuffer.append(TEXT_124);
    stringBuffer.append(TEXT_125);
d583 1
a583 1
    stringBuffer.append(TEXT_126);
d585 1
a585 1
    stringBuffer.append(TEXT_127);
d587 1
a587 1
    stringBuffer.append(TEXT_128);
d589 1
a589 1
    stringBuffer.append(TEXT_129);
d591 1
a591 1
    stringBuffer.append(TEXT_130);
d593 1
a593 1
    stringBuffer.append(TEXT_131);
d595 1
a595 1
    stringBuffer.append(TEXT_132);
d597 1
a597 1
    stringBuffer.append(TEXT_133);
d599 1
a599 1
    stringBuffer.append(TEXT_134);
d601 1
a601 1
    stringBuffer.append(TEXT_135);
d603 1
a603 1
    stringBuffer.append(TEXT_136);
d605 1
a605 1
    stringBuffer.append(TEXT_137);
d607 1
a607 1
    stringBuffer.append(TEXT_138);
d609 1
a609 1
    stringBuffer.append(TEXT_139);
d611 1
a611 1
    stringBuffer.append(TEXT_140);
d613 1
a613 1
    stringBuffer.append(TEXT_141);
d623 1
a623 1
    stringBuffer.append(TEXT_142);
d625 1
a625 1
    stringBuffer.append(TEXT_143);
d628 1
a628 1
    stringBuffer.append(TEXT_144);
d630 1
a630 1
    stringBuffer.append(TEXT_145);
d633 1
a633 1
    stringBuffer.append(TEXT_146);
d635 1
a635 1
    stringBuffer.append(TEXT_147);
d637 1
a637 1
    stringBuffer.append(TEXT_148);
d642 1
a642 1
    stringBuffer.append(TEXT_149);
d644 1
a644 1
    stringBuffer.append(TEXT_150);
d648 1
a648 1
    stringBuffer.append(TEXT_151);
d655 1
a655 1
    stringBuffer.append(TEXT_152);
d657 1
a657 1
    stringBuffer.append(TEXT_153);
@


1.7.2.1
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@d126 48
a173 50
  protected final String TEXT_106 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + NL;
  protected final String TEXT_107 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_108 = NL;
  protected final String TEXT_109 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_110 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_111 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_112 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_113 = NL;
  protected final String TEXT_114 = NL;
  protected final String TEXT_115 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_116 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_117 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_118 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_119 = NL;
  protected final String TEXT_120 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_121 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_122 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_123 = NL;
  protected final String TEXT_124 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_125 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = "\t\tRefresher bendpointsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBendpoints();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_128 = ".eINSTANCE.getEdge_Bendpoints(), bendpointsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_129 = ".eINSTANCE.getRelativeBendpoints_Points(), bendpointsRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t\trefreshBendpoints();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBendpoints() {" + NL + "\t\t";
  protected final String TEXT_130 = " bendpoints = (";
  protected final String TEXT_131 = ") getDiagramEdge().getBendpoints();" + NL + "\t\tif (bendpoints == null) {" + NL + "\t\t\tgetConnectionFigure().setRoutingConstraint(";
  protected final String TEXT_132 = ".EMPTY_LIST);" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_133 = " modelConstraint = bendpoints.getPoints();" + NL + "\t\t";
  protected final String TEXT_134 = " figureConstraint = new ";
  protected final String TEXT_135 = "();" + NL + "\t\tfor (int i = 0; i < modelConstraint.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_136 = " wbp = (";
  protected final String TEXT_137 = ") modelConstraint.get(i);" + NL + "\t\t\t";
  protected final String TEXT_138 = " rbp = new ";
  protected final String TEXT_139 = "(getConnectionFigure());" + NL + "\t\t\trbp.setRelativeDimensions(new ";
  protected final String TEXT_140 = "(wbp.getSourceX(), wbp.getSourceY()), new ";
  protected final String TEXT_141 = "(wbp.getTargetX(), wbp.getTargetY()));" + NL + "\t\t\trbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));" + NL + "\t\t\tfigureConstraint.add(rbp);" + NL + "\t\t}" + NL + "\t\tgetConnectionFigure().setRoutingConstraint(figureConstraint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetConnectionFigure().setConnectionRouter(new ";
  protected final String TEXT_142 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_143 = " createFigure() {";
  protected final String TEXT_144 = NL + "\t\treturn new ";
  protected final String TEXT_145 = "();";
  protected final String TEXT_146 = NL + "\t\treturn ";
  protected final String TEXT_147 = ";";
  protected final String TEXT_148 = NL + " \t\treturn new ";
  protected final String TEXT_149 = "();";
  protected final String TEXT_150 = NL + "\t}" + NL;
  protected final String TEXT_151 = NL;
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_154 = NL + "}";
  protected final String TEXT_155 = NL;
a483 4
    
if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
	//Otherwise, there's no element associated with the element

d486 1
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d490 1
a490 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a492 3
    
}

d494 1
d496 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d502 1
d504 1
a505 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d507 1
a508 1
    stringBuffer.append(TEXT_122);
d511 1
a512 1
    stringBuffer.append(TEXT_125);
d514 1
d516 1
a516 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d520 1
a520 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints"));
d522 1
a522 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d526 1
a526 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d528 1
a528 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d530 1
a530 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d532 1
a532 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint"));
d534 1
a534 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint"));
d536 1
a536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint"));
d538 1
a538 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint"));
d540 1
a540 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d542 1
a542 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
a543 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.BendpointConnectionRouter"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_143);
d553 1
a553 1
    stringBuffer.append(TEXT_144);
d555 1
a555 1
    stringBuffer.append(TEXT_145);
d558 1
a558 1
    stringBuffer.append(TEXT_146);
d560 1
a560 1
    stringBuffer.append(TEXT_147);
d563 1
a563 1
    stringBuffer.append(TEXT_148);
d565 1
a565 1
    stringBuffer.append(TEXT_149);
d567 1
a567 1
    stringBuffer.append(TEXT_150);
d572 1
a572 1
    stringBuffer.append(TEXT_151);
d574 1
a574 1
    stringBuffer.append(TEXT_152);
d578 1
a578 1
    stringBuffer.append(TEXT_153);
d585 1
a585 1
    stringBuffer.append(TEXT_154);
d587 1
a587 1
    stringBuffer.append(TEXT_155);
@


1.6
log
@#145101 Lite Generator: Support bendpoints in the same format as runtime-based generated diagrams
@
text
@d133 3
a135 3
  protected final String TEXT_113 = "\tpublic void addRefresher(";
  protected final String TEXT_114 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_115 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
@


1.5
log
@[bblajer] #144180 CCE in generated diagram when trying to direct-edit an element
@
text
@d97 77
a173 58
  protected final String TEXT_77 = "());" + NL + "\t}" + NL;
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_79 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_80 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_81 = " nextChild = (";
  protected final String TEXT_82 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_83 = ".getVisualID(nextChild) == ";
  protected final String TEXT_84 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_85 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_86 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_87 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_88 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_89 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_90 = " getLabelEditPart(";
  protected final String TEXT_91 = " req) {" + NL + "\t\t";
  protected final String TEXT_92 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_93 = " view = (";
  protected final String TEXT_94 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_95 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_96 = NL + "\t\t\t\tcase ";
  protected final String TEXT_97 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_98 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_99 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_100 = NL;
  protected final String TEXT_101 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_102 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_103 = " feature, ";
  protected final String TEXT_104 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_105 = NL;
  protected final String TEXT_106 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_107 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_108 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_109 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_110 = NL;
  protected final String TEXT_111 = "\tpublic void addRefresher(";
  protected final String TEXT_112 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_113 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_114 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_115 = NL;
  protected final String TEXT_116 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_117 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_118 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_119 = NL;
  protected final String TEXT_120 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_121 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_122 = " createFigure() {";
  protected final String TEXT_123 = NL + "\t\treturn new ";
  protected final String TEXT_124 = "();";
  protected final String TEXT_125 = NL + "\t\treturn ";
  protected final String TEXT_126 = ";";
  protected final String TEXT_127 = NL + " \t\treturn new ";
  protected final String TEXT_128 = "();";
  protected final String TEXT_129 = NL + "\t}" + NL;
  protected final String TEXT_130 = NL;
  protected final String TEXT_131 = NL;
  protected final String TEXT_132 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_133 = NL + "}";
  protected final String TEXT_134 = NL;
d408 4
d423 1
a423 1
    stringBuffer.append(TEXT_78);
d425 1
a425 1
    stringBuffer.append(TEXT_79);
d427 1
a427 1
    stringBuffer.append(TEXT_80);
d429 1
a429 1
    stringBuffer.append(TEXT_81);
d431 1
a431 1
    stringBuffer.append(TEXT_82);
d433 1
a433 1
    stringBuffer.append(TEXT_83);
d435 1
a435 1
    stringBuffer.append(TEXT_84);
d437 1
a437 1
    stringBuffer.append(TEXT_85);
d439 1
a439 1
    stringBuffer.append(TEXT_86);
d441 1
a441 3
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_88);
a442 2
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d448 4
d453 1
a453 1
    stringBuffer.append(TEXT_93);
d455 1
a455 1
    stringBuffer.append(TEXT_94);
d457 1
a457 1
    stringBuffer.append(TEXT_95);
d465 1
a465 1
    stringBuffer.append(TEXT_96);
d467 1
a467 1
    stringBuffer.append(TEXT_97);
d471 1
a471 1
    stringBuffer.append(TEXT_98);
a474 2
    stringBuffer.append(TEXT_99);
    stringBuffer.append(TEXT_100);
a475 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a476 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d478 1
a478 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d480 1
d482 1
a483 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
a484 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d488 1
d490 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d496 1
d498 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d501 1
a502 1
    stringBuffer.append(TEXT_118);
d504 1
d506 6
d513 29
a541 1
    stringBuffer.append(TEXT_121);
d543 1
a543 1
    stringBuffer.append(TEXT_122);
d553 1
a553 1
    stringBuffer.append(TEXT_123);
d555 1
a555 1
    stringBuffer.append(TEXT_124);
d558 1
a558 1
    stringBuffer.append(TEXT_125);
d560 1
a560 1
    stringBuffer.append(TEXT_126);
d563 1
a563 1
    stringBuffer.append(TEXT_127);
d565 1
a565 1
    stringBuffer.append(TEXT_128);
d567 1
a567 1
    stringBuffer.append(TEXT_129);
d572 1
a572 1
    stringBuffer.append(TEXT_130);
d574 1
a574 1
    stringBuffer.append(TEXT_131);
d578 1
a578 1
    stringBuffer.append(TEXT_132);
d585 1
a585 1
    stringBuffer.append(TEXT_133);
d587 1
a587 1
    stringBuffer.append(TEXT_134);
@


1.4
log
@[bblajer] #143687 impossible to direct-edit any label except the first one
@
text
@d107 43
a149 43
  protected final String TEXT_87 = " labelToEdit = getLabelEditPart((";
  protected final String TEXT_88 = ")req);" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_89 = " getLabelEditPart(";
  protected final String TEXT_90 = " req) {" + NL + "\t\t";
  protected final String TEXT_91 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_92 = " view = (";
  protected final String TEXT_93 = ") result.getModel();" + NL + "\t\t\tif (getDiagramEdge().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_94 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_95 = NL + "\t\t\t\tcase ";
  protected final String TEXT_96 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_97 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_98 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_99 = NL;
  protected final String TEXT_100 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_101 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_102 = " feature, ";
  protected final String TEXT_103 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_104 = NL;
  protected final String TEXT_105 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_106 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_107 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_108 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = "\tpublic void addRefresher(";
  protected final String TEXT_111 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_112 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_113 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_114 = NL;
  protected final String TEXT_115 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_116 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_117 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_118 = NL;
  protected final String TEXT_119 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_120 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_121 = " createFigure() {";
  protected final String TEXT_122 = NL + "\t\treturn new ";
  protected final String TEXT_123 = "();";
  protected final String TEXT_124 = NL + "\t\treturn ";
  protected final String TEXT_125 = ";";
  protected final String TEXT_126 = NL + " \t\treturn new ";
  protected final String TEXT_127 = "();";
  protected final String TEXT_128 = NL + "\t}" + NL;
  protected final String TEXT_129 = NL;
d151 4
a154 3
  protected final String TEXT_131 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_132 = NL + "}";
  protected final String TEXT_133 = NL;
d421 2
d424 1
a424 1
    stringBuffer.append(TEXT_89);
d426 1
a426 1
    stringBuffer.append(TEXT_90);
a427 2
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d431 2
d434 1
a434 1
    stringBuffer.append(TEXT_94);
d442 1
a442 1
    stringBuffer.append(TEXT_95);
d444 1
a444 1
    stringBuffer.append(TEXT_96);
d448 1
a448 1
    stringBuffer.append(TEXT_97);
a451 1
    stringBuffer.append(TEXT_98);
d454 1
d456 1
a456 1
    stringBuffer.append(TEXT_101);
d458 1
a458 1
    stringBuffer.append(TEXT_102);
a459 1
    stringBuffer.append(TEXT_103);
d462 1
d464 1
a464 1
    stringBuffer.append(TEXT_106);
d466 1
a466 1
    stringBuffer.append(TEXT_107);
a467 1
    stringBuffer.append(TEXT_108);
a469 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d475 1
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d481 1
d484 1
d486 1
a486 1
    stringBuffer.append(TEXT_120);
d488 1
a488 1
    stringBuffer.append(TEXT_121);
d498 1
a498 1
    stringBuffer.append(TEXT_122);
d500 1
a500 1
    stringBuffer.append(TEXT_123);
d503 1
a503 1
    stringBuffer.append(TEXT_124);
d505 1
a505 1
    stringBuffer.append(TEXT_125);
d508 1
a508 1
    stringBuffer.append(TEXT_126);
d510 1
a510 1
    stringBuffer.append(TEXT_127);
d512 1
a512 1
    stringBuffer.append(TEXT_128);
d517 1
a517 1
    stringBuffer.append(TEXT_129);
d519 1
a519 1
    stringBuffer.append(TEXT_130);
d523 1
a523 1
    stringBuffer.append(TEXT_131);
d530 1
a530 1
    stringBuffer.append(TEXT_132);
d532 1
a532 1
    stringBuffer.append(TEXT_133);
@


1.3
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d7 1
d107 12
a118 12
  protected final String TEXT_87 = " primaryLabel = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabel != null) {" + NL + "\t\t\t\tprimaryLabel.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_88 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_89 = NL;
  protected final String TEXT_90 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_91 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_92 = " feature, ";
  protected final String TEXT_93 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_94 = NL;
  protected final String TEXT_95 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_96 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_97 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_98 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
d120 4
a123 4
  protected final String TEXT_100 = "\tpublic void addRefresher(";
  protected final String TEXT_101 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_102 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_103 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
d125 29
a153 19
  protected final String TEXT_105 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_106 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_107 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_108 = NL;
  protected final String TEXT_109 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_110 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_111 = " createFigure() {";
  protected final String TEXT_112 = NL + "\t\treturn new ";
  protected final String TEXT_113 = "();";
  protected final String TEXT_114 = NL + "\t\treturn ";
  protected final String TEXT_115 = ";";
  protected final String TEXT_116 = NL + " \t\treturn new ";
  protected final String TEXT_117 = "();";
  protected final String TEXT_118 = NL + "\t}" + NL;
  protected final String TEXT_119 = NL;
  protected final String TEXT_120 = NL;
  protected final String TEXT_121 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_122 = NL + "}";
  protected final String TEXT_123 = NL;
d389 9
a397 2
if (genLink.getLabels().size() > 0) {
	GenLinkLabel primaryLabel = (GenLinkLabel)genLink.getLabels().get(0);
d418 1
a418 3
    
}	//if (genLink.getLabels().size() > 0)

d420 1
d422 1
d424 1
a424 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d426 1
a426 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d428 1
a428 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d430 1
d432 7
d440 1
a440 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d442 3
a444 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d446 3
a448 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d452 1
a452 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d456 1
a456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d460 1
a460 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d462 1
a462 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d464 1
d467 9
d477 7
a483 1
    stringBuffer.append(TEXT_110);
d485 1
a485 1
    stringBuffer.append(TEXT_111);
d495 1
a495 1
    stringBuffer.append(TEXT_112);
d497 1
a497 1
    stringBuffer.append(TEXT_113);
d500 1
a500 1
    stringBuffer.append(TEXT_114);
d502 1
a502 1
    stringBuffer.append(TEXT_115);
d505 1
a505 1
    stringBuffer.append(TEXT_116);
d507 1
a507 1
    stringBuffer.append(TEXT_117);
d509 1
a509 1
    stringBuffer.append(TEXT_118);
d514 1
a514 1
    stringBuffer.append(TEXT_119);
d516 1
a516 1
    stringBuffer.append(TEXT_120);
d520 1
a520 1
    stringBuffer.append(TEXT_121);
d527 1
a527 1
    stringBuffer.append(TEXT_122);
d529 1
a529 1
    stringBuffer.append(TEXT_123);
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d40 28
a67 28
  protected final String TEXT_21 = " deleteRequest) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_22 = "() {" + NL + "\t\t\t\t\tprivate final Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\t\tprivate final View source = edgeToRemove.getSource();" + NL + "\t\t\t\t\tprivate final View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = createDomainModelRemoveCommand();" + NL + "\t\t\t\t\tprivate org.eclipse.emf.common.command.Command createDomainModelRemoveCommand() {";
  protected final String TEXT_23 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_24 = " result = new ";
  protected final String TEXT_25 = "();";
  protected final String TEXT_26 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_27 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_28 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement().eContainer(), edgeToRemove.getElement().eContainmentFeature(), edgeToRemove.getElement()));";
  protected final String TEXT_29 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_30 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_31 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement().eContainer(), edgeToRemove.getElement().eContainmentFeature(), ";
  protected final String TEXT_32 = ".UNSET_VALUE));";
  protected final String TEXT_33 = NL + "\t\t\treturn ";
  protected final String TEXT_34 = ".INSTANCE;";
  protected final String TEXT_35 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_36 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_37 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement().eContainer(), ";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "()," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement()));";
  protected final String TEXT_40 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_41 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_42 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement().eContainer(), ";
  protected final String TEXT_43 = ".eINSTANCE.get";
  protected final String TEXT_44 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_45 = ".UNSET_VALUE));";
  protected final String TEXT_46 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_47 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_48 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement(), ";
d69 22
a90 22
  protected final String TEXT_50 = "(), source.getElement()));";
  protected final String TEXT_51 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_52 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_53 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement(), ";
  protected final String TEXT_54 = ".eINSTANCE.get";
  protected final String TEXT_55 = "(), ";
  protected final String TEXT_56 = ".UNSET_VALUE));";
  protected final String TEXT_57 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_58 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_59 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement(), ";
  protected final String TEXT_60 = ".eINSTANCE.get";
  protected final String TEXT_61 = "(), target.getElement()));";
  protected final String TEXT_62 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_63 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_64 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement(), ";
  protected final String TEXT_65 = ".eINSTANCE.get";
  protected final String TEXT_66 = "(), ";
  protected final String TEXT_67 = ".UNSET_VALUE));";
  protected final String TEXT_68 = NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_69 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_70 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_71 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tsource.getElement(), ";
d92 21
a112 21
  protected final String TEXT_73 = "(), target.getElement());";
  protected final String TEXT_74 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_75 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_76 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tsource.getElement(), ";
  protected final String TEXT_77 = ".eINSTANCE.get";
  protected final String TEXT_78 = "(), ";
  protected final String TEXT_79 = ".UNSET_VALUE);";
  protected final String TEXT_80 = NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.execute();" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canUndo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.undo();" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_81 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_82 = "());" + NL + "\t}" + NL;
  protected final String TEXT_83 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_84 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_85 = " it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_86 = " nextChild = (";
  protected final String TEXT_87 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_88 = ".getVisualID(nextChild) == ";
  protected final String TEXT_89 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_90 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_91 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_92 = " primaryLabel = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabel != null) {" + NL + "\t\t\t\tprimaryLabel.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_93 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
d114 4
a117 4
  protected final String TEXT_95 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_96 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_97 = " feature, ";
  protected final String TEXT_98 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
d119 4
a122 4
  protected final String TEXT_100 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_101 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_102 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_103 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
d124 19
a142 24
  protected final String TEXT_105 = "\tpublic void addRefresher(";
  protected final String TEXT_106 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_107 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_108 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_111 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_112 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_113 = NL;
  protected final String TEXT_114 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_115 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_116 = " createFigure() {";
  protected final String TEXT_117 = NL + "\t\treturn new ";
  protected final String TEXT_118 = "();";
  protected final String TEXT_119 = NL + "\t\treturn ";
  protected final String TEXT_120 = ";";
  protected final String TEXT_121 = NL + " \t\treturn new ";
  protected final String TEXT_122 = "();";
  protected final String TEXT_123 = NL + "\t}" + NL;
  protected final String TEXT_124 = NL;
  protected final String TEXT_125 = NL;
  protected final String TEXT_126 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_127 = NL + "}";
  protected final String TEXT_128 = NL;
d199 1
a199 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d201 10
d237 1
a237 1
    stringBuffer.append(TEXT_23);
d239 1
a239 1
    stringBuffer.append(TEXT_24);
d241 1
a241 1
    stringBuffer.append(TEXT_25);
d245 1
a245 1
    stringBuffer.append(TEXT_26);
d247 1
a247 3
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_28);
d251 1
a251 1
    stringBuffer.append(TEXT_29);
d253 1
a253 3
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_31);
d255 1
a255 1
    stringBuffer.append(TEXT_32);
d260 1
a260 1
    stringBuffer.append(TEXT_33);
d262 1
a262 1
    stringBuffer.append(TEXT_34);
d268 1
a268 1
    stringBuffer.append(TEXT_35);
d270 1
a270 3
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_37);
d272 1
a272 1
    stringBuffer.append(TEXT_38);
d274 1
a274 1
    stringBuffer.append(TEXT_39);
d278 1
a278 1
    stringBuffer.append(TEXT_40);
d280 1
a280 3
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_42);
d282 1
a282 1
    stringBuffer.append(TEXT_43);
d284 1
a284 1
    stringBuffer.append(TEXT_44);
d286 1
a286 1
    stringBuffer.append(TEXT_45);
d293 1
a293 1
    stringBuffer.append(TEXT_46);
a294 2
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d306 1
a306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d310 1
a310 1
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
a311 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_56);
d318 2
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d323 1
a323 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
a324 4
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_61);
d328 1
a328 1
    stringBuffer.append(TEXT_62);
d330 1
a330 3
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_64);
d332 1
a332 1
    stringBuffer.append(TEXT_65);
d334 1
a334 1
    stringBuffer.append(TEXT_66);
d336 1
a336 1
    stringBuffer.append(TEXT_67);
d341 1
a341 1
    stringBuffer.append(TEXT_68);
d347 1
a347 1
    stringBuffer.append(TEXT_69);
d349 1
a349 3
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_71);
d351 1
a351 1
    stringBuffer.append(TEXT_72);
d353 1
a353 1
    stringBuffer.append(TEXT_73);
d357 1
a357 1
    stringBuffer.append(TEXT_74);
d359 1
a359 3
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_76);
d361 1
a361 1
    stringBuffer.append(TEXT_77);
d363 1
a363 1
    stringBuffer.append(TEXT_78);
d365 1
a365 1
    stringBuffer.append(TEXT_79);
d372 1
a372 1
    stringBuffer.append(TEXT_80);
d374 1
a374 1
    stringBuffer.append(TEXT_81);
d376 1
a376 1
    stringBuffer.append(TEXT_82);
d381 1
a381 1
    stringBuffer.append(TEXT_83);
d383 1
a383 1
    stringBuffer.append(TEXT_84);
d385 1
a385 1
    stringBuffer.append(TEXT_85);
d387 1
a387 1
    stringBuffer.append(TEXT_86);
d389 1
a389 1
    stringBuffer.append(TEXT_87);
d391 1
a391 1
    stringBuffer.append(TEXT_88);
d393 1
a393 1
    stringBuffer.append(TEXT_89);
d395 1
a395 1
    stringBuffer.append(TEXT_90);
d397 1
a397 1
    stringBuffer.append(TEXT_91);
d399 1
a399 1
    stringBuffer.append(TEXT_92);
d403 8
d414 1
a414 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d416 2
a418 2
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d422 1
a422 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d424 1
a424 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d430 1
a430 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d432 1
a432 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d436 1
d438 1
a438 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a439 8
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_116);
d449 1
a449 1
    stringBuffer.append(TEXT_117);
d451 1
a451 1
    stringBuffer.append(TEXT_118);
d454 1
a454 1
    stringBuffer.append(TEXT_119);
d456 1
a456 1
    stringBuffer.append(TEXT_120);
d459 1
a459 1
    stringBuffer.append(TEXT_121);
d461 1
a461 1
    stringBuffer.append(TEXT_122);
d463 1
a463 1
    stringBuffer.append(TEXT_123);
d468 1
a468 1
    stringBuffer.append(TEXT_124);
d470 1
a470 1
    stringBuffer.append(TEXT_125);
d474 1
a474 1
    stringBuffer.append(TEXT_126);
d481 1
a481 1
    stringBuffer.append(TEXT_127);
d483 1
a483 1
    stringBuffer.append(TEXT_128);
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d25 78
a102 78
  protected final String TEXT_6 = " implements IUpdatableEditPart {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(";
  protected final String TEXT_8 = " view) {" + NL + "\t\tassert view instanceof ";
  protected final String TEXT_9 = ";" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = " getDiagramEdge() {" + NL + "\t\treturn (";
  protected final String TEXT_11 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
  protected final String TEXT_12 = NL;
  protected final String TEXT_13 = "\t\tinstallEditPolicy(";
  protected final String TEXT_14 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_15 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_16 = " createDeleteCommand(";
  protected final String TEXT_17 = " deleteRequest) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_18 = "() {" + NL + "\t\t\t\t\tprivate final Edge edgeToRemove = getDiagramEdge();" + NL + "\t\t\t\t\tprivate final View source = edgeToRemove.getSource();" + NL + "\t\t\t\t\tprivate final View target = edgeToRemove.getTarget();" + NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = createDomainModelRemoveCommand();" + NL + "\t\t\t\t\tprivate org.eclipse.emf.common.command.Command createDomainModelRemoveCommand() {";
  protected final String TEXT_19 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_20 = " result = new ";
  protected final String TEXT_21 = "();";
  protected final String TEXT_22 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_23 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_24 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement().eContainer(), edgeToRemove.getElement().eContainmentFeature(), edgeToRemove.getElement()));";
  protected final String TEXT_25 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_26 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_27 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement().eContainer(), edgeToRemove.getElement().eContainmentFeature(), ";
  protected final String TEXT_28 = ".UNSET_VALUE));";
  protected final String TEXT_29 = NL + "\t\t\treturn ";
  protected final String TEXT_30 = ".INSTANCE;";
  protected final String TEXT_31 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_32 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_33 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement().eContainer(), ";
  protected final String TEXT_34 = ".eINSTANCE.get";
  protected final String TEXT_35 = "()," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement()));";
  protected final String TEXT_36 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_37 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_38 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement().eContainer(), ";
  protected final String TEXT_39 = ".eINSTANCE.get";
  protected final String TEXT_40 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_41 = ".UNSET_VALUE));";
  protected final String TEXT_42 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_43 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_44 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement(), ";
  protected final String TEXT_45 = ".eINSTANCE.get";
  protected final String TEXT_46 = "(), source.getElement()));";
  protected final String TEXT_47 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_48 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_49 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement(), ";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "(), ";
  protected final String TEXT_52 = ".UNSET_VALUE));";
  protected final String TEXT_53 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_54 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_55 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement(), ";
  protected final String TEXT_56 = ".eINSTANCE.get";
  protected final String TEXT_57 = "(), target.getElement()));";
  protected final String TEXT_58 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_59 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_60 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tedgeToRemove.getElement(), ";
  protected final String TEXT_61 = ".eINSTANCE.get";
  protected final String TEXT_62 = "(), ";
  protected final String TEXT_63 = ".UNSET_VALUE));";
  protected final String TEXT_64 = NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_65 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_66 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_67 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tsource.getElement(), ";
  protected final String TEXT_68 = ".eINSTANCE.get";
  protected final String TEXT_69 = "(), target.getElement());";
  protected final String TEXT_70 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_71 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_72 = ".getEditingDomainFor(edgeToRemove.getDiagram().getElement())," + NL + "\t\t\t\t\t\t\tsource.getElement(), ";
  protected final String TEXT_73 = ".eINSTANCE.get";
  protected final String TEXT_74 = "(), ";
  protected final String TEXT_75 = ".UNSET_VALUE);";
  protected final String TEXT_76 = NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.execute();" + NL + "\t\t\t\t\t\tsource.getDiagram().removeEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(null);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(null);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canUndo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.undo();" + NL + "\t\t\t\t\t\tsource.getDiagram().insertEdge(edgeToRemove);" + NL + "\t\t\t\t\t\tedgeToRemove.setSource(source);" + NL + "\t\t\t\t\t\tedgeToRemove.setTarget(target);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_77 = ".CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_78 = "());" + NL + "\t}" + NL;
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(";
  protected final String TEXT_81 = " containerView) {" + NL + "\t\t";
  protected final String TEXT_82 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_83 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
d106 37
a142 37
  protected final String TEXT_87 = ")it.next();" + NL + "\t\t\tif (getVisualID(nextChild) == ";
  protected final String TEXT_88 = ") {" + NL + "\t\t\t\treturn (EditPart) getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_89 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_90 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_91 = " primaryLabel = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabel != null) {" + NL + "\t\t\t\tprimaryLabel.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_92 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((Edge)getModel()).getChildren();" + NL + "\t}" + NL;
  protected final String TEXT_93 = NL;
  protected final String TEXT_94 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_95 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_96 = " feature, ";
  protected final String TEXT_97 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_98 = NL;
  protected final String TEXT_99 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_100 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_101 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_102 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_103 = NL;
  protected final String TEXT_104 = "\tpublic void addRefresher(";
  protected final String TEXT_105 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_106 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_107 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_108 = NL;
  protected final String TEXT_109 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_110 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_111 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_112 = NL;
  protected final String TEXT_113 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_114 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_115 = " createFigure() {";
  protected final String TEXT_116 = NL + "\t\treturn new ";
  protected final String TEXT_117 = "();";
  protected final String TEXT_118 = NL + "\t\treturn ";
  protected final String TEXT_119 = ";";
  protected final String TEXT_120 = NL + " \t\treturn new ";
  protected final String TEXT_121 = "();";
  protected final String TEXT_122 = NL + "\t}" + NL;
  protected final String TEXT_123 = NL;
d144 4
a147 3
  protected final String TEXT_125 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_126 = NL + "}";
  protected final String TEXT_127 = NL;
d176 2
a177 1
    stringBuffer.append(genLink.getEditPartClassName());
a178 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d180 1
a180 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d182 1
a182 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d184 1
a184 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d186 1
d188 1
d190 6
d197 1
a197 1
    stringBuffer.append(TEXT_14);
d199 1
a199 1
    stringBuffer.append(TEXT_15);
d201 1
a201 1
    stringBuffer.append(TEXT_16);
d203 1
a203 1
    stringBuffer.append(TEXT_17);
d205 1
a205 1
    stringBuffer.append(TEXT_18);
d232 1
a232 1
    stringBuffer.append(TEXT_19);
d234 1
a234 1
    stringBuffer.append(TEXT_20);
d236 1
a236 1
    stringBuffer.append(TEXT_21);
d240 1
a240 1
    stringBuffer.append(TEXT_22);
d242 1
a242 1
    stringBuffer.append(TEXT_23);
d244 1
a244 1
    stringBuffer.append(TEXT_24);
d248 1
a248 1
    stringBuffer.append(TEXT_25);
d250 1
a250 1
    stringBuffer.append(TEXT_26);
d252 1
a252 1
    stringBuffer.append(TEXT_27);
d254 1
a254 1
    stringBuffer.append(TEXT_28);
d259 1
a259 1
    stringBuffer.append(TEXT_29);
d261 1
a261 1
    stringBuffer.append(TEXT_30);
d267 1
a267 1
    stringBuffer.append(TEXT_31);
d269 1
a269 1
    stringBuffer.append(TEXT_32);
d271 1
a271 1
    stringBuffer.append(TEXT_33);
d273 1
a273 1
    stringBuffer.append(TEXT_34);
d275 1
a275 1
    stringBuffer.append(TEXT_35);
d279 1
a279 1
    stringBuffer.append(TEXT_36);
d281 1
a281 1
    stringBuffer.append(TEXT_37);
d283 1
a283 1
    stringBuffer.append(TEXT_38);
d285 1
a285 1
    stringBuffer.append(TEXT_39);
d287 1
a287 1
    stringBuffer.append(TEXT_40);
d289 1
a289 1
    stringBuffer.append(TEXT_41);
d296 1
a296 1
    stringBuffer.append(TEXT_42);
d298 1
a298 1
    stringBuffer.append(TEXT_43);
d300 1
a300 1
    stringBuffer.append(TEXT_44);
d302 1
a302 1
    stringBuffer.append(TEXT_45);
d304 1
a304 1
    stringBuffer.append(TEXT_46);
d308 1
a308 1
    stringBuffer.append(TEXT_47);
d310 1
a310 1
    stringBuffer.append(TEXT_48);
d312 1
a312 1
    stringBuffer.append(TEXT_49);
d314 1
a314 1
    stringBuffer.append(TEXT_50);
d316 1
a316 1
    stringBuffer.append(TEXT_51);
d318 1
a318 1
    stringBuffer.append(TEXT_52);
d325 1
a325 1
    stringBuffer.append(TEXT_53);
d327 1
a327 1
    stringBuffer.append(TEXT_54);
d329 1
a329 1
    stringBuffer.append(TEXT_55);
d331 1
a331 1
    stringBuffer.append(TEXT_56);
d333 1
a333 1
    stringBuffer.append(TEXT_57);
d337 1
a337 1
    stringBuffer.append(TEXT_58);
d339 1
a339 1
    stringBuffer.append(TEXT_59);
d341 1
a341 1
    stringBuffer.append(TEXT_60);
d343 1
a343 1
    stringBuffer.append(TEXT_61);
d345 1
a345 1
    stringBuffer.append(TEXT_62);
d347 1
a347 1
    stringBuffer.append(TEXT_63);
d352 1
a352 1
    stringBuffer.append(TEXT_64);
d358 1
a358 1
    stringBuffer.append(TEXT_65);
d360 1
a360 1
    stringBuffer.append(TEXT_66);
d362 1
a362 1
    stringBuffer.append(TEXT_67);
d364 1
a364 1
    stringBuffer.append(TEXT_68);
d366 1
a366 1
    stringBuffer.append(TEXT_69);
d370 1
a370 1
    stringBuffer.append(TEXT_70);
d372 1
a372 1
    stringBuffer.append(TEXT_71);
d374 1
a374 1
    stringBuffer.append(TEXT_72);
d376 1
a376 1
    stringBuffer.append(TEXT_73);
d378 1
a378 1
    stringBuffer.append(TEXT_74);
d380 1
a380 1
    stringBuffer.append(TEXT_75);
d387 1
a387 1
    stringBuffer.append(TEXT_76);
d389 1
a389 1
    stringBuffer.append(TEXT_77);
d391 1
a391 1
    stringBuffer.append(TEXT_78);
a395 7
    stringBuffer.append(TEXT_79);
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d405 1
a405 1
    stringBuffer.append(primaryLabel.getVisualID());
d407 2
d410 1
a410 1
    stringBuffer.append(TEXT_89);
d412 1
a412 1
    stringBuffer.append(TEXT_90);
d414 1
a414 1
    stringBuffer.append(TEXT_91);
a417 1
    stringBuffer.append(TEXT_92);
d420 1
d422 1
a422 1
    stringBuffer.append(TEXT_95);
d424 1
a424 1
    stringBuffer.append(TEXT_96);
a425 1
    stringBuffer.append(TEXT_97);
d428 1
d430 1
a430 1
    stringBuffer.append(TEXT_100);
d432 1
a432 1
    stringBuffer.append(TEXT_101);
a433 1
    stringBuffer.append(TEXT_102);
a435 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d441 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d447 1
d450 1
d452 1
a452 1
    stringBuffer.append(TEXT_114);
d454 1
a454 1
    stringBuffer.append(TEXT_115);
d464 1
a464 1
    stringBuffer.append(TEXT_116);
d466 1
a466 1
    stringBuffer.append(TEXT_117);
d469 1
a469 1
    stringBuffer.append(TEXT_118);
d471 1
a471 1
    stringBuffer.append(TEXT_119);
d474 1
a474 1
    stringBuffer.append(TEXT_120);
d476 1
a476 1
    stringBuffer.append(TEXT_121);
d478 1
a478 1
    stringBuffer.append(TEXT_122);
d483 1
a483 1
    stringBuffer.append(TEXT_123);
d485 1
a485 1
    stringBuffer.append(TEXT_124);
d489 1
a489 1
    stringBuffer.append(TEXT_125);
d496 1
a496 1
    stringBuffer.append(TEXT_126);
d498 1
a498 1
    stringBuffer.append(TEXT_127);
@

