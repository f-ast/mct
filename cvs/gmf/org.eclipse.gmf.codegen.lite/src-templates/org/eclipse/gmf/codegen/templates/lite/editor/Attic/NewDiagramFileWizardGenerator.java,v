head	1.13;
access;
symbols
	v20080910-1520:1.13
	RC3_20:1.12
	v20070614-1400:1.12
	v20070608-1300:1.12
	v20070601-1400:1.11
	v20070525-1500:1.10
	v20070520-1200:1.10
	v20070518-1300:1.9
	v20070504-1000:1.9
	v20070427-0600:1.9
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070405-1100:1.8
	v20070403-1500:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070307-0700:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.6
	v20061214-0000:1.6
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2007.06.20.10.16.10;	author bblajer;	state dead;
branches;
next	1.12;
commitid	37dd4678fe694567;

1.12
date	2007.06.04.16.20.30;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	17cf46643bca4567;

1.11
date	2007.05.29.14.55.32;	author bblajer;	state Exp;
branches;
next	1.10;
commitid	2543465c3ee24567;

1.10
date	2007.05.20.12.55.36;	author mfeldman;	state Exp;
branches;
next	1.9;
commitid	7d1d465045114567;

1.9
date	2007.04.10.14.40.10;	author bblajer;	state Exp;
branches;
next	1.8;
commitid	5b02461ba1c84567;

1.8
date	2007.03.09.17.19.35;	author bblajer;	state Exp;
branches;
next	1.7;
commitid	22ed45f197244567;

1.7
date	2006.12.25.12.00.12;	author bblajer;	state Exp;
branches;
next	1.6;
commitid	430d458fbd4b4567;

1.6
date	2006.11.29.15.23.08;	author bblajer;	state Exp;
branches;
next	1.5;
commitid	1928456da5db4567;

1.5
date	2006.11.23.18.57.16;	author bblajer;	state Exp;
branches;
next	1.4;
commitid	66934565ef0a4567;

1.4
date	2006.10.18.14.22.08;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.17.14.50.08;	author bblajer;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.02.12.29.34;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Rewrite /editor/* templates in XPand;
Use common template to generate code that creates an editing domain in various places;
OpenDiagramEditPolicy: package statement was missing.
@
text
@package org.eclipse.gmf.codegen.templates.lite.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.common.codegen.*;

public class NewDiagramFileWizardGenerator
{
  protected static String nl;
  public static synchronized NewDiagramFileWizardGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NewDiagramFileWizardGenerator result = new NewDiagramFileWizardGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " extends ";
  protected final String TEXT_5 = " {" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_6 = " myEditingDomain;" + NL + "\t\t";
  protected final String TEXT_7 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_8 = " mySelectedModelFileURI;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate DiagramURISelectorPage myDiagramURISelectorPage;" + NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_10 = " mySelectedModelFile;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_11 = " myFileCreationPage;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_12 = " myWorkbenchPage;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_13 = " mySelection;" + NL;
  protected final String TEXT_14 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_15 = " myDiagramRoot;" + NL;
  protected final String TEXT_16 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_17 = "(";
  protected final String TEXT_18 = " selectedModelFileURI, ";
  protected final String TEXT_19 = " diagramRoot, ";
  protected final String TEXT_20 = " editingDomain) {";
  protected final String TEXT_21 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_22 = "(";
  protected final String TEXT_23 = " selectedModelFile, ";
  protected final String TEXT_24 = " workbenchPage, ";
  protected final String TEXT_25 = " selection, ";
  protected final String TEXT_26 = " diagramRoot, ";
  protected final String TEXT_27 = " editingDomain) {" + NL + "\t\tassert selectedModelFile != null : \"Null selectedModelFile in ";
  protected final String TEXT_28 = " constructor\"; //$NON-NLS-1$" + NL + "\t\tassert workbenchPage != null : \"Null workbenchPage in ";
  protected final String TEXT_29 = " constructor\"; //$NON-NLS-1$" + NL + "\t\tassert selection != null : \"Null selection in ";
  protected final String TEXT_30 = " constructor\"; //$NON-NLS-1$" + NL + "\t    assert diagramRoot != null : \"Null diagramRoot in ";
  protected final String TEXT_31 = " constructor\"; //$NON-NLS-1$";
  protected final String TEXT_32 = NL + "\t    assert editingDomain != null : \"Null editingDomain in ";
  protected final String TEXT_33 = " constructor\"; //$NON-NLS-1$" + NL + "\t    ";
  protected final String TEXT_34 = NL + "\t   \tmySelectedModelFileURI = selectedModelFileURI;";
  protected final String TEXT_35 = NL + "\t   \tmySelectedModelFile = selectedModelFile;" + NL + "\t   \tmyWorkbenchPage = workbenchPage;" + NL + "\t   \tmySelection = selection;";
  protected final String TEXT_36 = NL + "\t   \tmyDiagramRoot = diagramRoot;" + NL + "\t   \tmyEditingDomain = editingDomain;" + NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_37 = ".getBundledImageDescriptor(" + NL + "\t\t\t\"icons/wizban/New";
  protected final String TEXT_38 = "Wizard.gif\")); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {";
  protected final String TEXT_39 = NL + "\t\tif (mySelectedModelFileURI == null) {" + NL + "\t\t\taddPage(new SourceURISelectorPage());" + NL + "\t\t}" + NL + "\t\tmyDiagramURISelectorPage = new DiagramURISelectorPage();" + NL + "\t\taddPage(myDiagramURISelectorPage);";
  protected final String TEXT_40 = NL + "\t\tmyFileCreationPage = new ";
  protected final String TEXT_41 = "(\"Initialize new ";
  protected final String TEXT_42 = " diagram file\", mySelection) {" + NL + "\t\t\tpublic void createControl(";
  protected final String TEXT_43 = " parent) {" + NL + "\t\t\t\tsuper.createControl(parent);" + NL + "\t\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_44 = " parentContainer = mySelectedModelFile.getParent();" + NL + "\t\t\t\tString originalFileName = mySelectedModelFile.getProjectRelativePath().removeFileExtension().lastSegment();" + NL + "\t\t\t\tString fileExtension = \".";
  protected final String TEXT_45 = "\"; //$NON-NLS-1$" + NL + "\t\t\t\tString fileName = originalFileName + fileExtension;" + NL + "\t\t\t\tfor (int i = 1; i > 0 && parentContainer.getFile(new ";
  protected final String TEXT_46 = "(fileName)).exists(); i++) {" + NL + "\t\t\t\t\tfileName = originalFileName + i + fileExtension;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (parentContainer.getFile(new ";
  protected final String TEXT_47 = "(fileName)).exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFileName(fileName);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\tmyFileCreationPage.setDescription(\"Create new diagram based on ";
  protected final String TEXT_48 = " model content\");" + NL + "\t\taddPage(myFileCreationPage);";
  protected final String TEXT_49 = NL + "\t\taddPage(new RootElementSelectorPage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\t";
  protected final String TEXT_50 = " resourceSet = myEditingDomain.getResourceSet();";
  protected final String TEXT_51 = NL + "\t\t";
  protected final String TEXT_52 = " diagramFileURI = myDiagramURISelectorPage.getNewFileURI();";
  protected final String TEXT_53 = NL + "\t\t";
  protected final String TEXT_54 = " diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\t";
  protected final String TEXT_55 = ".setCharset(diagramFile);" + NL + "\t\t";
  protected final String TEXT_56 = " diagramFileURI = ";
  protected final String TEXT_57 = ".createPlatformResourceURI(diagramFile.getFullPath().toString(), true);";
  protected final String TEXT_58 = NL + "\t\tfinal ";
  protected final String TEXT_59 = " diagramResource = resourceSet.createResource(diagramFileURI);" + NL + "\t\t";
  protected final String TEXT_60 = " command = new ";
  protected final String TEXT_61 = "(\"Initializing diagram contents\") { //$NON-NLS-1$" + NL + "\t\t\tprivate ";
  protected final String TEXT_62 = " myCreatedDiagram;" + NL + "" + NL + "\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\tint diagramVID = ";
  protected final String TEXT_63 = ".getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\t\tif (diagramVID != ";
  protected final String TEXT_64 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tpublic void execute() {" + NL + "\t\t\t\tmyCreatedDiagram = ";
  protected final String TEXT_65 = ".createDiagramFor(myDiagramRoot);" + NL + "\t\t\t\tassert myCreatedDiagram != null;" + NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram);";
  protected final String TEXT_66 = NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram.getElement());";
  protected final String TEXT_67 = NL + "\t\t\t}" + NL + "\t\t\tpublic void redo() {" + NL + "\t\t\t\texecute();" + NL + "\t\t\t}" + NL + "\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tnew ";
  protected final String TEXT_68 = "(myEditingDomain, command).execute();" + NL + "\t\t\tdiagramResource.save(";
  protected final String TEXT_69 = ".getSaveOptions());";
  protected final String TEXT_70 = NL + "\t\t\t";
  protected final String TEXT_71 = " editor = ";
  protected final String TEXT_72 = ".showView(diagramFileURI);";
  protected final String TEXT_73 = NL + "\t\t\t";
  protected final String TEXT_74 = " editor = ";
  protected final String TEXT_75 = ".openEditor(diagramFileURI);";
  protected final String TEXT_76 = NL + "\t\t\t";
  protected final String TEXT_77 = " editor = ";
  protected final String TEXT_78 = ".openEditor(myWorkbenchPage, diagramFile);";
  protected final String TEXT_79 = NL + "\t\t\tif (editor != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_80 = " layouter = (";
  protected final String TEXT_81 = ") editor.getAdapter(";
  protected final String TEXT_82 = ".class);" + NL + "\t\t\t\tif (layouter != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_83 = " graphicalViewer = (";
  protected final String TEXT_84 = ") editor.getAdapter(";
  protected final String TEXT_85 = ".class);" + NL + "\t\t\t\t\tif (graphicalViewer != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_86 = " layoutCommand = layouter.layout((";
  protected final String TEXT_87 = ") graphicalViewer.getContents());" + NL + "\t\t\t\t\t\tif (layoutCommand != null && layoutCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tgraphicalViewer.getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_88 = "(myEditingDomain, layoutCommand));";
  protected final String TEXT_89 = NL + "\t\t\t\t\t\t\tdiagramResource.save(";
  protected final String TEXT_90 = ".getSaveOptions());";
  protected final String TEXT_91 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} catch (";
  protected final String TEXT_92 = " ex) {";
  protected final String TEXT_93 = NL + "\t\t\t";
  protected final String TEXT_94 = ".getInstance().logError(\"Save operation failed for: \" + diagramFileURI.toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_95 = NL + "\t\t\t";
  protected final String TEXT_96 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_97 = NL + "\t\t} catch (";
  protected final String TEXT_98 = " ex) {" + NL + "\t\t\t";
  protected final String TEXT_99 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$";
  protected final String TEXT_100 = NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_101 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate abstract class URISelectorPage extends ";
  protected final String TEXT_102 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_103 = " fileField;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected URISelectorPage(String name) {" + NL + "\t\t\tsuper(name);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_104 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_105 = " composite = new ";
  protected final String TEXT_106 = "(parent, ";
  protected final String TEXT_107 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_108 = " layout = new ";
  protected final String TEXT_109 = "();" + NL + "\t\t\t\tlayout.numColumns = 1;" + NL + "\t\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_110 = " data = new ";
  protected final String TEXT_111 = "();" + NL + "\t\t\t\tdata.verticalAlignment = ";
  protected final String TEXT_112 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_113 = ".FILL;" + NL + "\t\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_114 = " resourceURILabel = new ";
  protected final String TEXT_115 = "(composite, ";
  protected final String TEXT_116 = ".LEFT);" + NL + "\t\t\t{" + NL + "\t\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_117 = " data = new ";
  protected final String TEXT_118 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_119 = ".FILL;" + NL + "\t\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_120 = " fileComposite = new ";
  protected final String TEXT_121 = "(composite, ";
  protected final String TEXT_122 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_123 = " data = new ";
  protected final String TEXT_124 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_125 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_126 = " layout = new ";
  protected final String TEXT_127 = "();" + NL + "\t\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\t\tlayout.numColumns = 2;" + NL + "\t\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField = new ";
  protected final String TEXT_128 = "(fileComposite, ";
  protected final String TEXT_129 = ".BORDER);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_130 = " data = new ";
  protected final String TEXT_131 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_132 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\t\tfileField.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField.addModifyListener(validator);" + NL + "\t\t\t";
  protected final String TEXT_133 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_134 = "(fileComposite," + NL + "\t\t\t\t\t";
  protected final String TEXT_135 = ".PUSH);" + NL + "\t\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "" + NL + "\t\t\tresourceURIBrowseFileSystemButton" + NL + "\t\t\t\t\t.addSelectionListener(new ";
  protected final String TEXT_136 = "() {" + NL + "\t\t\t\t\t\tpublic void widgetSelected(";
  protected final String TEXT_137 = " event) {" + NL + "\t\t\t\t\t\t\tString fileExtension = getFileExtension();" + NL + "\t\t\t\t\t\t\tString filePath = ";
  protected final String TEXT_138 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_139 = ".OPEN);" + NL + "\t\t\t\t\t\t\tif (filePath != null) {" + NL + "\t\t\t\t\t\t\t\tif (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t\t\tfilePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\tfileField.setText(filePath);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\tsetControl(composite);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_140 = " validator = new ";
  protected final String TEXT_141 = "() {" + NL + "\t\t\tpublic void modifyText(";
  protected final String TEXT_142 = " e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected final void setFile(";
  protected final String TEXT_143 = " file) {" + NL + "\t\t\tfileField.setText(file.getPath());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\t";
  protected final String TEXT_144 = " fileURI = getFileURI();" + NL + "\t\t\tif (fileURI == null || fileURI.isEmpty()) {" + NL + "\t\t\t\tsetErrorMessage(null);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (fileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_145 = " file = new ";
  protected final String TEXT_146 = "(fileURI.toFileString());" + NL + "\t\t\t\tString fileProblem = validateFile(file);" + NL + "\t\t\t\tif (fileProblem != null) {" + NL + "\t\t\t\t\tsetErrorMessage(fileProblem);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tString requiredExt = getFileExtension();" + NL + "\t\t\tString enteredExt = fileURI.fileExtension();" + NL + "\t\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Checks the given file and returns the error message if there are problems or <code>null</code> if the file is OK." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String validateFile(";
  protected final String TEXT_147 = " file);" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String getFileExtension();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_148 = " getFileURI() {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_149 = ".createFileURI(fileField.getText());" + NL + "\t\t\t} catch (Exception exception) {" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class SourceURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic SourceURISelectorPage() {" + NL + "\t\t\tsuper(\"Select source file\");" + NL + "\t\t\tsetTitle(\"Source file\");" + NL + "\t\t\tsetDescription(\"Select file with semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_150 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmySelectedModelFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_151 = " file) {" + NL + "\t\t\tif (!file.exists()) {" + NL + "\t\t\t\treturn \"Source file does not exist\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class DiagramURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_152 = " myNewFileURI;" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DiagramURISelectorPage() {" + NL + "\t\t\tsuper(\"Initialize new ";
  protected final String TEXT_153 = " diagram file\");" + NL + "\t\t\tsetTitle(\"Diagram file\");" + NL + "\t\t\tsetDescription(\"Create new diagram based on ";
  protected final String TEXT_154 = " model content\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_155 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t\tif (visible && mySelectedModelFileURI != null && getFileURI() == null && mySelectedModelFileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_156 = " originalFile = new ";
  protected final String TEXT_157 = "(mySelectedModelFileURI.toFileString());" + NL + "\t\t\t\tString originalFileName = mySelectedModelFileURI.trimFileExtension().lastSegment();" + NL + "\t\t\t\t";
  protected final String TEXT_158 = " parentFile = originalFile.getParentFile();" + NL + "\t\t\t\t";
  protected final String TEXT_159 = " newFile = new ";
  protected final String TEXT_160 = "(parentFile, originalFileName + getFileExtension());" + NL + "\t\t\t\tfor(int i = 1; i > 0 && newFile.exists(); i++) {" + NL + "\t\t\t\t\tnewFile = new ";
  protected final String TEXT_161 = "(parentFile, originalFileName + i + getFileExtension());" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (newFile.exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFile(newFile);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tmyNewFileURI = null;" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmyNewFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_162 = " getNewFileURI() {" + NL + "\t\t\treturn myNewFileURI;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_163 = " file) {" + NL + "\t\t\tif (file.exists()) {" + NL + "\t\t\t\treturn \"Diagram file already exists\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_164 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_165 = " implements ";
  protected final String TEXT_166 = " {";
  protected final String TEXT_167 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_168 = " myTreeViewer;";
  protected final String TEXT_169 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_170 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_171 = " topLevel = new ";
  protected final String TEXT_172 = "(parent, ";
  protected final String TEXT_173 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_174 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_175 = "(";
  protected final String TEXT_176 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_177 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_178 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_179 = " panel = new ";
  protected final String TEXT_180 = "(parent, ";
  protected final String TEXT_181 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_182 = "(";
  protected final String TEXT_183 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_184 = " layout = new ";
  protected final String TEXT_185 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_186 = " label = new ";
  protected final String TEXT_187 = "(panel, ";
  protected final String TEXT_188 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_189 = "(";
  protected final String TEXT_190 = ".HORIZONTAL_ALIGN_BEGINNING));";
  protected final String TEXT_191 = NL + "\t\t\t";
  protected final String TEXT_192 = " ";
  protected final String TEXT_193 = " = new ";
  protected final String TEXT_194 = "(panel, ";
  protected final String TEXT_195 = ".SINGLE | ";
  protected final String TEXT_196 = ".H_SCROLL | ";
  protected final String TEXT_197 = ".V_SCROLL | ";
  protected final String TEXT_198 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_199 = " layoutData = new ";
  protected final String TEXT_200 = "(";
  protected final String TEXT_201 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\t";
  protected final String TEXT_202 = ".getTree().setLayoutData(layoutData);" + NL + "\t\t\t";
  protected final String TEXT_203 = ".setContentProvider(new ";
  protected final String TEXT_204 = "(";
  protected final String TEXT_205 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\t";
  protected final String TEXT_206 = ".setLabelProvider(new ";
  protected final String TEXT_207 = "(";
  protected final String TEXT_208 = ".getInstance().getItemProvidersAdapterFactory()));";
  protected final String TEXT_209 = NL + "\t\t\t";
  protected final String TEXT_210 = ".setInput(myDiagramRoot.eResource());" + NL + "\t\t\t";
  protected final String TEXT_211 = ".setSelection(new ";
  protected final String TEXT_212 = "(myDiagramRoot));";
  protected final String TEXT_213 = NL + "\t\t\t";
  protected final String TEXT_214 = ".addSelectionChangedListener(this);" + NL + "\t\t}" + NL;
  protected final String TEXT_215 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tif (visible) {" + NL + "\t\t\t\t";
  protected final String TEXT_216 = ".setInput(myEditingDomain.getResourceSet().getResource(mySelectedModelFileURI, true));" + NL + "\t\t\t\tif (myDiagramRoot != null) {" + NL + "\t\t\t\t\tmyTreeViewer.setSelection(new ";
  protected final String TEXT_217 = "(myDiagramRoot));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t}" + NL;
  protected final String TEXT_218 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_219 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_220 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_221 = " selection = (";
  protected final String TEXT_222 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_223 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_224 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_225 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_226 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_227 = ") {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (";
  protected final String TEXT_228 = ") selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ";
  protected final String TEXT_229 = ".VISUAL_ID == ";
  protected final String TEXT_230 = ".getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_231 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final GenModel genModel = editorGen.getDomainGenModel();
final String pluginActivatorClass = importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName());
final boolean isRichClientPlatform = genDiagram.getEditorGen().getApplication() != null;

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
importManager.registerInnerClass("RootElementSelectorPage");
if (isRichClientPlatform) {
	importManager.registerInnerClass("URISelectorPage");
	importManager.registerInnerClass("SourceURISelectorPage");
	importManager.registerInnerClass("DiagramURISelectorPage");
}

    stringBuffer.append(TEXT_3);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.Wizard"));
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_6);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_8);
    
} else {

    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.WizardNewFileCreationPage"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPage"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_13);
    
}

    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_15);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_16);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_20);
    
} else {

    stringBuffer.append(TEXT_21);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPage"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_28);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_29);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_30);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_31);
    
}

    stringBuffer.append(TEXT_32);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_33);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_34);
    
} else {

    stringBuffer.append(TEXT_35);
    
}

    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(genDiagram.getDomainDiagramElement() == null ? "" : genDiagram.getDomainDiagramElement().getGenPackage().getPrefix());
    stringBuffer.append(TEXT_38);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_39);
    
} else {

    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.WizardNewFileCreationPage"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(genModel.getModelName());
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IContainer"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Path"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Path"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(genModel.getModelName());
    stringBuffer.append(TEXT_48);
    
}

    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
    stringBuffer.append(TEXT_50);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_52);
    
} else {

    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_57);
    
}

    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_65);
    if (editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_66);
    
}

    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_69);
    
if (!genDiagram.getEditorGen().getEditor().isEclipseEditor()) {

    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IViewPart"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_72);
    
} else {
	if (isRichClientPlatform) {

    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_75);
    
	} else {

    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ide.IDE"));
    stringBuffer.append(TEXT_78);
    
	}
}

    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_88);
    
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {

    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_90);
    
}

    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("java.io.IOException"));
    stringBuffer.append(TEXT_92);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_93);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_94);
    
} else {

    stringBuffer.append(TEXT_95);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_96);
    
	if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {

    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_99);
    
	}
}

    stringBuffer.append(TEXT_100);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionAdapter"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyEvent"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(editorGen.getDomainFileExtension());
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_153);
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
    stringBuffer.append(TEXT_154);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_163);
    
}

    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ISelectionChangedListener"));
    stringBuffer.append(TEXT_166);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
    stringBuffer.append(TEXT_168);
    
}

    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_179);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_184);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
    stringBuffer.append(TEXT_186);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_188);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_190);
    
final String treeViewer = isRichClientPlatform ? "myTreeViewer" : "treeViewer";

    stringBuffer.append(TEXT_191);
    if (!isRichClientPlatform){
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
    stringBuffer.append(TEXT_192);
    }
    stringBuffer.append(treeViewer);
    stringBuffer.append(TEXT_193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(treeViewer);
    stringBuffer.append(TEXT_202);
    stringBuffer.append(treeViewer);
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider"));
    stringBuffer.append(TEXT_204);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_205);
    stringBuffer.append(treeViewer);
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider"));
    stringBuffer.append(TEXT_207);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_208);
    
if (!isRichClientPlatform) {

    stringBuffer.append(TEXT_209);
    stringBuffer.append(treeViewer);
    stringBuffer.append(TEXT_210);
    stringBuffer.append(treeViewer);
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection"));
    stringBuffer.append(TEXT_212);
    
}

    stringBuffer.append(TEXT_213);
    stringBuffer.append(treeViewer);
    stringBuffer.append(TEXT_214);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_215);
    stringBuffer.append(treeViewer);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection"));
    stringBuffer.append(TEXT_217);
    
}

    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.SelectionChangedEvent"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_230);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_231);
    return stringBuffer.toString();
  }
}
@


1.12
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.11
log
@Rewrite some templates with XPand;
Adopt VisualIDRegistry from full RT.
@
text
@d18 1
a18 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.10
log
@Anna Karyakina's migration fix
@
text
@d81 1
a81 1
  protected final String TEXT_63 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\t\tif (diagramVID != ";
d248 1
a248 1
  protected final String TEXT_230 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
@


1.9
log
@[179970] - Adopt code generater to make use of EMF "conditional resource saving";
Correctly set charset for IFiles
@
text
@d19 231
a249 232
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = " myEditingDomain;" + NL + "\t\t";
  protected final String TEXT_8 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_9 = " mySelectedModelFileURI;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate DiagramURISelectorPage myDiagramURISelectorPage;" + NL;
  protected final String TEXT_10 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_11 = " mySelectedModelFile;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_12 = " myFileCreationPage;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_13 = " myWorkbenchPage;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_14 = " mySelection;" + NL;
  protected final String TEXT_15 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_16 = " myDiagramRoot;" + NL;
  protected final String TEXT_17 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_18 = "(";
  protected final String TEXT_19 = " selectedModelFileURI, ";
  protected final String TEXT_20 = " diagramRoot, ";
  protected final String TEXT_21 = " editingDomain) {";
  protected final String TEXT_22 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_23 = "(";
  protected final String TEXT_24 = " selectedModelFile, ";
  protected final String TEXT_25 = " workbenchPage, ";
  protected final String TEXT_26 = " selection, ";
  protected final String TEXT_27 = " diagramRoot, ";
  protected final String TEXT_28 = " editingDomain) {" + NL + "\t\tassert selectedModelFile != null : \"Null selectedModelFile in ";
  protected final String TEXT_29 = " constructor\"; //$NON-NLS-1$" + NL + "\t\tassert workbenchPage != null : \"Null workbenchPage in ";
  protected final String TEXT_30 = " constructor\"; //$NON-NLS-1$" + NL + "\t\tassert selection != null : \"Null selection in ";
  protected final String TEXT_31 = " constructor\"; //$NON-NLS-1$" + NL + "\t    assert diagramRoot != null : \"Null diagramRoot in ";
  protected final String TEXT_32 = " constructor\"; //$NON-NLS-1$";
  protected final String TEXT_33 = NL + "\t    assert editingDomain != null : \"Null editingDomain in ";
  protected final String TEXT_34 = " constructor\"; //$NON-NLS-1$" + NL + "\t    ";
  protected final String TEXT_35 = NL + "\t   \tmySelectedModelFileURI = selectedModelFileURI;";
  protected final String TEXT_36 = NL + "\t   \tmySelectedModelFile = selectedModelFile;" + NL + "\t   \tmyWorkbenchPage = workbenchPage;" + NL + "\t   \tmySelection = selection;";
  protected final String TEXT_37 = NL + "\t   \tmyDiagramRoot = diagramRoot;" + NL + "\t   \tmyEditingDomain = editingDomain;" + NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_38 = ".getBundledImageDescriptor(" + NL + "\t\t\t\"icons/wizban/New";
  protected final String TEXT_39 = "Wizard.gif\")); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {";
  protected final String TEXT_40 = NL + "\t\tif (mySelectedModelFileURI == null) {" + NL + "\t\t\taddPage(new SourceURISelectorPage());" + NL + "\t\t}" + NL + "\t\tmyDiagramURISelectorPage = new DiagramURISelectorPage();" + NL + "\t\taddPage(myDiagramURISelectorPage);";
  protected final String TEXT_41 = NL + "\t\tmyFileCreationPage = new ";
  protected final String TEXT_42 = "(\"Initialize new ";
  protected final String TEXT_43 = " diagram file\", mySelection) {" + NL + "\t\t\tpublic void createControl(";
  protected final String TEXT_44 = " parent) {" + NL + "\t\t\t\tsuper.createControl(parent);" + NL + "\t\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_45 = " parentContainer = mySelectedModelFile.getParent();" + NL + "\t\t\t\tString originalFileName = mySelectedModelFile.getProjectRelativePath().removeFileExtension().lastSegment();" + NL + "\t\t\t\tString fileExtension = \".";
  protected final String TEXT_46 = "\"; //$NON-NLS-1$" + NL + "\t\t\t\tString fileName = originalFileName + fileExtension;" + NL + "\t\t\t\tfor (int i = 1; i > 0 && parentContainer.getFile(new ";
  protected final String TEXT_47 = "(fileName)).exists(); i++) {" + NL + "\t\t\t\t\tfileName = originalFileName + i + fileExtension;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (parentContainer.getFile(new ";
  protected final String TEXT_48 = "(fileName)).exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFileName(fileName);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\tmyFileCreationPage.setDescription(\"Create new diagram based on ";
  protected final String TEXT_49 = " model content\");" + NL + "\t\taddPage(myFileCreationPage);";
  protected final String TEXT_50 = NL + "\t\taddPage(new RootElementSelectorPage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\t";
  protected final String TEXT_51 = " resourceSet = myEditingDomain.getResourceSet();";
  protected final String TEXT_52 = NL + "\t\t";
  protected final String TEXT_53 = " diagramFileURI = myDiagramURISelectorPage.getNewFileURI();";
  protected final String TEXT_54 = NL + "\t\t";
  protected final String TEXT_55 = " diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\t";
  protected final String TEXT_56 = ".setCharset(diagramFile);" + NL + "\t\t";
  protected final String TEXT_57 = " diagramFileURI = ";
  protected final String TEXT_58 = ".createPlatformResourceURI(diagramFile.getFullPath().toString(), true);";
  protected final String TEXT_59 = NL + "\t\tfinal ";
  protected final String TEXT_60 = " diagramResource = resourceSet.createResource(diagramFileURI);" + NL + "\t\t";
  protected final String TEXT_61 = " command = new ";
  protected final String TEXT_62 = "(\"Initializing diagram contents\") { //$NON-NLS-1$" + NL + "\t\t\tprivate ";
  protected final String TEXT_63 = " myCreatedDiagram;" + NL + "" + NL + "\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\tint diagramVID = ";
  protected final String TEXT_64 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\t\tif (diagramVID != ";
  protected final String TEXT_65 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tpublic void execute() {" + NL + "\t\t\t\tmyCreatedDiagram = ";
  protected final String TEXT_66 = ".createDiagramFor(myDiagramRoot);" + NL + "\t\t\t\tassert myCreatedDiagram != null;" + NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram);";
  protected final String TEXT_67 = NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram.getElement());";
  protected final String TEXT_68 = NL + "\t\t\t}" + NL + "\t\t\tpublic void redo() {" + NL + "\t\t\t\texecute();" + NL + "\t\t\t}" + NL + "\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tnew ";
  protected final String TEXT_69 = "(myEditingDomain, command).execute();" + NL + "\t\t\tdiagramResource.save(";
  protected final String TEXT_70 = ".getSaveOptions());";
  protected final String TEXT_71 = NL + "\t\t\t";
  protected final String TEXT_72 = " editor = ";
  protected final String TEXT_73 = ".showView(diagramFileURI);";
  protected final String TEXT_74 = NL + "\t\t\t";
  protected final String TEXT_75 = " editor = ";
  protected final String TEXT_76 = ".openEditor(diagramFileURI);";
  protected final String TEXT_77 = NL + "\t\t\t";
  protected final String TEXT_78 = " editor = ";
  protected final String TEXT_79 = ".openEditor(myWorkbenchPage, diagramFile);";
  protected final String TEXT_80 = NL + "\t\t\tif (editor != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_81 = " layouter = (";
  protected final String TEXT_82 = ") editor.getAdapter(";
  protected final String TEXT_83 = ".class);" + NL + "\t\t\t\tif (layouter != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_84 = " graphicalViewer = (";
  protected final String TEXT_85 = ") editor.getAdapter(";
  protected final String TEXT_86 = ".class);" + NL + "\t\t\t\t\tif (graphicalViewer != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_87 = " layoutCommand = layouter.layout((";
  protected final String TEXT_88 = ") graphicalViewer.getContents());" + NL + "\t\t\t\t\t\tif (layoutCommand != null && layoutCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tgraphicalViewer.getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_89 = "(myEditingDomain, layoutCommand));";
  protected final String TEXT_90 = NL + "\t\t\t\t\t\t\tdiagramResource.save(";
  protected final String TEXT_91 = ".getSaveOptions());";
  protected final String TEXT_92 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} catch (";
  protected final String TEXT_93 = " ex) {";
  protected final String TEXT_94 = NL + "\t\t\t";
  protected final String TEXT_95 = ".getInstance().logError(\"Save operation failed for: \" + diagramFileURI.toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_96 = NL + "\t\t\t";
  protected final String TEXT_97 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_98 = NL + "\t\t} catch (";
  protected final String TEXT_99 = " ex) {" + NL + "\t\t\t";
  protected final String TEXT_100 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$";
  protected final String TEXT_101 = NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_102 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate abstract class URISelectorPage extends ";
  protected final String TEXT_103 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_104 = " fileField;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected URISelectorPage(String name) {" + NL + "\t\t\tsuper(name);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_105 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_106 = " composite = new ";
  protected final String TEXT_107 = "(parent, ";
  protected final String TEXT_108 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_109 = " layout = new ";
  protected final String TEXT_110 = "();" + NL + "\t\t\t\tlayout.numColumns = 1;" + NL + "\t\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_111 = " data = new ";
  protected final String TEXT_112 = "();" + NL + "\t\t\t\tdata.verticalAlignment = ";
  protected final String TEXT_113 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_114 = ".FILL;" + NL + "\t\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_115 = " resourceURILabel = new ";
  protected final String TEXT_116 = "(composite, ";
  protected final String TEXT_117 = ".LEFT);" + NL + "\t\t\t{" + NL + "\t\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_118 = " data = new ";
  protected final String TEXT_119 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_120 = ".FILL;" + NL + "\t\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_121 = " fileComposite = new ";
  protected final String TEXT_122 = "(composite, ";
  protected final String TEXT_123 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_124 = " data = new ";
  protected final String TEXT_125 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_126 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_127 = " layout = new ";
  protected final String TEXT_128 = "();" + NL + "\t\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\t\tlayout.numColumns = 2;" + NL + "\t\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField = new ";
  protected final String TEXT_129 = "(fileComposite, ";
  protected final String TEXT_130 = ".BORDER);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_131 = " data = new ";
  protected final String TEXT_132 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_133 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\t\tfileField.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField.addModifyListener(validator);" + NL + "\t\t\t";
  protected final String TEXT_134 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_135 = "(fileComposite," + NL + "\t\t\t\t\t";
  protected final String TEXT_136 = ".PUSH);" + NL + "\t\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "" + NL + "\t\t\tresourceURIBrowseFileSystemButton" + NL + "\t\t\t\t\t.addSelectionListener(new ";
  protected final String TEXT_137 = "() {" + NL + "\t\t\t\t\t\tpublic void widgetSelected(";
  protected final String TEXT_138 = " event) {" + NL + "\t\t\t\t\t\t\tString fileExtension = getFileExtension();" + NL + "\t\t\t\t\t\t\tString filePath = ";
  protected final String TEXT_139 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_140 = ".OPEN);" + NL + "\t\t\t\t\t\t\tif (filePath != null) {" + NL + "\t\t\t\t\t\t\t\tif (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t\t\tfilePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\tfileField.setText(filePath);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\tsetControl(composite);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_141 = " validator = new ";
  protected final String TEXT_142 = "() {" + NL + "\t\t\tpublic void modifyText(";
  protected final String TEXT_143 = " e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected final void setFile(";
  protected final String TEXT_144 = " file) {" + NL + "\t\t\tfileField.setText(file.getPath());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\t";
  protected final String TEXT_145 = " fileURI = getFileURI();" + NL + "\t\t\tif (fileURI == null || fileURI.isEmpty()) {" + NL + "\t\t\t\tsetErrorMessage(null);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (fileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_146 = " file = new ";
  protected final String TEXT_147 = "(fileURI.toFileString());" + NL + "\t\t\t\tString fileProblem = validateFile(file);" + NL + "\t\t\t\tif (fileProblem != null) {" + NL + "\t\t\t\t\tsetErrorMessage(fileProblem);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tString requiredExt = getFileExtension();" + NL + "\t\t\tString enteredExt = fileURI.fileExtension();" + NL + "\t\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Checks the given file and returns the error message if there are problems or <code>null</code> if the file is OK." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String validateFile(";
  protected final String TEXT_148 = " file);" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String getFileExtension();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_149 = " getFileURI() {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_150 = ".createFileURI(fileField.getText());" + NL + "\t\t\t} catch (Exception exception) {" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class SourceURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic SourceURISelectorPage() {" + NL + "\t\t\tsuper(\"Select source file\");" + NL + "\t\t\tsetTitle(\"Source file\");" + NL + "\t\t\tsetDescription(\"Select file with semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_151 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmySelectedModelFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_152 = " file) {" + NL + "\t\t\tif (!file.exists()) {" + NL + "\t\t\t\treturn \"Source file does not exist\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class DiagramURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_153 = " myNewFileURI;" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DiagramURISelectorPage() {" + NL + "\t\t\tsuper(\"Initialize new ";
  protected final String TEXT_154 = " diagram file\");" + NL + "\t\t\tsetTitle(\"Diagram file\");" + NL + "\t\t\tsetDescription(\"Create new diagram based on ";
  protected final String TEXT_155 = " model content\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_156 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t\tif (visible && mySelectedModelFileURI != null && getFileURI() == null && mySelectedModelFileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_157 = " originalFile = new ";
  protected final String TEXT_158 = "(mySelectedModelFileURI.toFileString());" + NL + "\t\t\t\tString originalFileName = mySelectedModelFileURI.trimFileExtension().lastSegment();" + NL + "\t\t\t\t";
  protected final String TEXT_159 = " parentFile = originalFile.getParentFile();" + NL + "\t\t\t\t";
  protected final String TEXT_160 = " newFile = new ";
  protected final String TEXT_161 = "(parentFile, originalFileName + getFileExtension());" + NL + "\t\t\t\tfor(int i = 1; i > 0 && newFile.exists(); i++) {" + NL + "\t\t\t\t\tnewFile = new ";
  protected final String TEXT_162 = "(parentFile, originalFileName + i + getFileExtension());" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (newFile.exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFile(newFile);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tmyNewFileURI = null;" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmyNewFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_163 = " getNewFileURI() {" + NL + "\t\t\treturn myNewFileURI;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_164 = " file) {" + NL + "\t\t\tif (file.exists()) {" + NL + "\t\t\t\treturn \"Diagram file already exists\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_165 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_166 = " implements ";
  protected final String TEXT_167 = " {";
  protected final String TEXT_168 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_169 = " myTreeViewer;";
  protected final String TEXT_170 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_171 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_172 = " topLevel = new ";
  protected final String TEXT_173 = "(parent, ";
  protected final String TEXT_174 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_175 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_176 = "(";
  protected final String TEXT_177 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_178 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_179 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_180 = " panel = new ";
  protected final String TEXT_181 = "(parent, ";
  protected final String TEXT_182 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_183 = "(";
  protected final String TEXT_184 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_185 = " layout = new ";
  protected final String TEXT_186 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_187 = " label = new ";
  protected final String TEXT_188 = "(panel, ";
  protected final String TEXT_189 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_190 = "(";
  protected final String TEXT_191 = ".HORIZONTAL_ALIGN_BEGINNING));";
  protected final String TEXT_192 = NL + "\t\t\t";
  protected final String TEXT_193 = " ";
  protected final String TEXT_194 = " = new ";
  protected final String TEXT_195 = "(panel, ";
  protected final String TEXT_196 = ".SINGLE | ";
  protected final String TEXT_197 = ".H_SCROLL | ";
  protected final String TEXT_198 = ".V_SCROLL | ";
  protected final String TEXT_199 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_200 = " layoutData = new ";
  protected final String TEXT_201 = "(";
  protected final String TEXT_202 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\t";
  protected final String TEXT_203 = ".getTree().setLayoutData(layoutData);" + NL + "\t\t\t";
  protected final String TEXT_204 = ".setContentProvider(new ";
  protected final String TEXT_205 = "(";
  protected final String TEXT_206 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\t";
  protected final String TEXT_207 = ".setLabelProvider(new ";
  protected final String TEXT_208 = "(";
  protected final String TEXT_209 = ".getInstance().getItemProvidersAdapterFactory()));";
  protected final String TEXT_210 = NL + "\t\t\t";
  protected final String TEXT_211 = ".setInput(myDiagramRoot.eResource());" + NL + "\t\t\t";
  protected final String TEXT_212 = ".setSelection(new ";
  protected final String TEXT_213 = "(myDiagramRoot));";
  protected final String TEXT_214 = NL + "\t\t\t";
  protected final String TEXT_215 = ".addSelectionChangedListener(this);" + NL + "\t\t}" + NL;
  protected final String TEXT_216 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tif (visible) {" + NL + "\t\t\t\t";
  protected final String TEXT_217 = ".setInput(myEditingDomain.getResourceSet().getResource(mySelectedModelFileURI, true));" + NL + "\t\t\t\tif (myDiagramRoot != null) {" + NL + "\t\t\t\t\tmyTreeViewer.setSelection(new ";
  protected final String TEXT_218 = "(myDiagramRoot));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t}" + NL;
  protected final String TEXT_219 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_220 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_221 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_222 = " selection = (";
  protected final String TEXT_223 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_224 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_225 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_226 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_227 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_228 = ") {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (";
  protected final String TEXT_229 = ") selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ";
  protected final String TEXT_230 = ".VISUAL_ID == ";
  protected final String TEXT_231 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_232 = NL;
a261 1
    stringBuffer.append(TEXT_1);
d266 2
a268 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d280 2
d283 1
a283 1
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.Wizard"));
a286 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_7);
d290 2
a292 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_9);
d296 2
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.WizardNewFileCreationPage"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPage"));
a304 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_14);
d308 2
a310 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_16);
d314 2
d317 1
a317 1
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a322 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_21);
d326 2
d329 1
a329 1
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d333 1
a333 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPage"));
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d337 1
a337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
a346 2
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_32);
d350 2
a352 2
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_34);
d356 1
a356 1
    stringBuffer.append(TEXT_35);
d360 1
a360 1
    stringBuffer.append(TEXT_36);
d364 2
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a368 2
    stringBuffer.append(genDiagram.getDomainDiagramElement() == null ? "" : genDiagram.getDomainDiagramElement().getGenPackage().getPrefix());
    stringBuffer.append(TEXT_39);
d372 1
a372 1
    stringBuffer.append(TEXT_40);
d376 2
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.WizardNewFileCreationPage"));
d381 1
a381 1
    stringBuffer.append(genModel.getModelName());
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IContainer"));
d387 1
a387 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Path"));
a392 2
    stringBuffer.append(genModel.getModelName());
    stringBuffer.append(TEXT_49);
d396 2
a398 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
    stringBuffer.append(TEXT_51);
d402 2
a404 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_53);
d408 2
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
a416 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_58);
d420 2
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d433 1
a433 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d435 1
a435 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
a436 2
    if (editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_67);
d440 2
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
a444 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_70);
d448 2
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IViewPart"));
a452 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_73);
d457 2
d460 1
a460 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
a461 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_76);
d465 2
d468 1
a468 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
a469 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ide.IDE"));
    stringBuffer.append(TEXT_79);
d474 2
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a492 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_89);
d496 2
a498 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_91);
d502 2
a504 2
    stringBuffer.append(importManager.getImportedName("java.io.IOException"));
    stringBuffer.append(TEXT_93);
d508 2
a510 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_95);
d514 2
a516 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_97);
d520 2
d523 1
a523 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
a524 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_100);
d529 1
a529 1
    stringBuffer.append(TEXT_101);
d533 2
d536 1
a536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
d538 1
a538 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
d544 1
a544 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d546 1
a546 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d550 1
a550 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d562 1
a562 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d570 1
a570 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d576 1
a576 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d582 1
a582 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d596 1
a596 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d602 1
a602 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d604 1
a604 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionAdapter"));
d606 1
a606 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d608 1
a608 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d610 1
a610 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
d616 1
a616 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyEvent"));
d618 2
a620 2
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d626 1
a626 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d632 1
a632 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d634 1
a634 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d636 1
a636 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d638 2
a640 2
    stringBuffer.append(TEXT_154);
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
d642 1
a642 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d654 2
a656 2
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
a657 2
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_164);
d661 2
d664 1
a664 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
a665 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ISelectionChangedListener"));
    stringBuffer.append(TEXT_167);
d669 2
a671 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
    stringBuffer.append(TEXT_169);
d675 2
d682 1
a682 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d684 1
a684 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d686 1
a686 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d692 1
a692 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d698 1
a698 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d700 1
a700 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d704 1
a704 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d708 1
a708 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d712 1
a712 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d714 1
a714 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
a717 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_191);
d721 1
a721 1
    stringBuffer.append(TEXT_192);
d724 1
a724 1
    stringBuffer.append(TEXT_193);
d727 2
d730 1
a730 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d738 1
a738 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d744 1
a744 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d748 1
a748 1
    stringBuffer.append(treeViewer);
d750 1
a750 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider"));
d752 1
a752 1
    stringBuffer.append(pluginActivatorClass);
d754 1
a754 1
    stringBuffer.append(treeViewer);
d756 1
a756 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider"));
a757 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_209);
d761 2
d766 1
a766 1
    stringBuffer.append(treeViewer);
a767 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection"));
    stringBuffer.append(TEXT_213);
d771 2
a773 2
    stringBuffer.append(treeViewer);
    stringBuffer.append(TEXT_215);
d777 2
d780 1
a780 1
    stringBuffer.append(treeViewer);
a781 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection"));
    stringBuffer.append(TEXT_218);
d785 2
d788 1
a788 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.SelectionChangedEvent"));
d794 1
a794 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d798 1
a798 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d802 1
a802 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
d806 1
a806 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d808 1
a808 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d810 1
a810 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a811 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_232);
@


1.8
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@d73 41
a113 41
  protected final String TEXT_55 = " diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new ";
  protected final String TEXT_56 = "()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_57 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_58 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "" + NL + "\t\t";
  protected final String TEXT_59 = " diagramFileURI = ";
  protected final String TEXT_60 = ".createPlatformResourceURI(diagramFile.getFullPath().toString(), true);";
  protected final String TEXT_61 = NL + "\t\tfinal ";
  protected final String TEXT_62 = " diagramResource = resourceSet.createResource(diagramFileURI);" + NL + "\t\t";
  protected final String TEXT_63 = " command = new ";
  protected final String TEXT_64 = "(\"Initializing diagram contents\") { //$NON-NLS-1$" + NL + "\t\t\tprivate ";
  protected final String TEXT_65 = " myCreatedDiagram;" + NL + "" + NL + "\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\tint diagramVID = ";
  protected final String TEXT_66 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\t\tif (diagramVID != ";
  protected final String TEXT_67 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tpublic void execute() {" + NL + "\t\t\t\tmyCreatedDiagram = ";
  protected final String TEXT_68 = ".createDiagramFor(myDiagramRoot);" + NL + "\t\t\t\tassert myCreatedDiagram != null;" + NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram);";
  protected final String TEXT_69 = NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram.getElement());";
  protected final String TEXT_70 = NL + "\t\t\t}" + NL + "\t\t\tpublic void redo() {" + NL + "\t\t\t\texecute();" + NL + "\t\t\t}" + NL + "\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tnew ";
  protected final String TEXT_71 = "(myEditingDomain, command).execute();" + NL + "\t\t\tdiagramResource.save(";
  protected final String TEXT_72 = ".EMPTY_MAP);";
  protected final String TEXT_73 = NL + "\t\t\t";
  protected final String TEXT_74 = " editor = ";
  protected final String TEXT_75 = ".showView(diagramFileURI);";
  protected final String TEXT_76 = NL + "\t\t\t";
  protected final String TEXT_77 = " editor = ";
  protected final String TEXT_78 = ".openEditor(diagramFileURI);";
  protected final String TEXT_79 = NL + "\t\t\t";
  protected final String TEXT_80 = " editor = ";
  protected final String TEXT_81 = ".openEditor(myWorkbenchPage, diagramFile);";
  protected final String TEXT_82 = NL + "\t\t\tif (editor != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_83 = " layouter = (";
  protected final String TEXT_84 = ") editor.getAdapter(";
  protected final String TEXT_85 = ".class);" + NL + "\t\t\t\tif (layouter != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_86 = " graphicalViewer = (";
  protected final String TEXT_87 = ") editor.getAdapter(";
  protected final String TEXT_88 = ".class);" + NL + "\t\t\t\t\tif (graphicalViewer != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_89 = " layoutCommand = layouter.layout((";
  protected final String TEXT_90 = ") graphicalViewer.getContents());" + NL + "\t\t\t\t\t\tif (layoutCommand != null && layoutCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tgraphicalViewer.getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_91 = "(myEditingDomain, layoutCommand));";
  protected final String TEXT_92 = NL + "\t\t\t\t\t\t\tdiagramResource.save(";
  protected final String TEXT_93 = ".EMPTY_MAP);";
  protected final String TEXT_94 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} catch (";
  protected final String TEXT_95 = " ex) {";
d115 136
a250 138
  protected final String TEXT_97 = ".getInstance().logError(\"Save operation failed for: \" + diagramFileURI.toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_98 = NL + "\t\t\t";
  protected final String TEXT_99 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_100 = NL + "\t\t} catch (";
  protected final String TEXT_101 = " ex) {" + NL + "\t\t\t";
  protected final String TEXT_102 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$";
  protected final String TEXT_103 = NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_104 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate abstract class URISelectorPage extends ";
  protected final String TEXT_105 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_106 = " fileField;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected URISelectorPage(String name) {" + NL + "\t\t\tsuper(name);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_107 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_108 = " composite = new ";
  protected final String TEXT_109 = "(parent, ";
  protected final String TEXT_110 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_111 = " layout = new ";
  protected final String TEXT_112 = "();" + NL + "\t\t\t\tlayout.numColumns = 1;" + NL + "\t\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_113 = " data = new ";
  protected final String TEXT_114 = "();" + NL + "\t\t\t\tdata.verticalAlignment = ";
  protected final String TEXT_115 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_116 = ".FILL;" + NL + "\t\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_117 = " resourceURILabel = new ";
  protected final String TEXT_118 = "(composite, ";
  protected final String TEXT_119 = ".LEFT);" + NL + "\t\t\t{" + NL + "\t\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_120 = " data = new ";
  protected final String TEXT_121 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_122 = ".FILL;" + NL + "\t\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_123 = " fileComposite = new ";
  protected final String TEXT_124 = "(composite, ";
  protected final String TEXT_125 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_126 = " data = new ";
  protected final String TEXT_127 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_128 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_129 = " layout = new ";
  protected final String TEXT_130 = "();" + NL + "\t\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\t\tlayout.numColumns = 2;" + NL + "\t\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField = new ";
  protected final String TEXT_131 = "(fileComposite, ";
  protected final String TEXT_132 = ".BORDER);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_133 = " data = new ";
  protected final String TEXT_134 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_135 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\t\tfileField.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField.addModifyListener(validator);" + NL + "\t\t\t";
  protected final String TEXT_136 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_137 = "(fileComposite," + NL + "\t\t\t\t\t";
  protected final String TEXT_138 = ".PUSH);" + NL + "\t\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "" + NL + "\t\t\tresourceURIBrowseFileSystemButton" + NL + "\t\t\t\t\t.addSelectionListener(new ";
  protected final String TEXT_139 = "() {" + NL + "\t\t\t\t\t\tpublic void widgetSelected(";
  protected final String TEXT_140 = " event) {" + NL + "\t\t\t\t\t\t\tString fileExtension = getFileExtension();" + NL + "\t\t\t\t\t\t\tString filePath = ";
  protected final String TEXT_141 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_142 = ".OPEN);" + NL + "\t\t\t\t\t\t\tif (filePath != null) {" + NL + "\t\t\t\t\t\t\t\tif (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t\t\tfilePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\tfileField.setText(filePath);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\tsetControl(composite);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_143 = " validator = new ";
  protected final String TEXT_144 = "() {" + NL + "\t\t\tpublic void modifyText(";
  protected final String TEXT_145 = " e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected final void setFile(";
  protected final String TEXT_146 = " file) {" + NL + "\t\t\tfileField.setText(file.getPath());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\t";
  protected final String TEXT_147 = " fileURI = getFileURI();" + NL + "\t\t\tif (fileURI == null || fileURI.isEmpty()) {" + NL + "\t\t\t\tsetErrorMessage(null);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (fileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_148 = " file = new ";
  protected final String TEXT_149 = "(fileURI.toFileString());" + NL + "\t\t\t\tString fileProblem = validateFile(file);" + NL + "\t\t\t\tif (fileProblem != null) {" + NL + "\t\t\t\t\tsetErrorMessage(fileProblem);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tString requiredExt = getFileExtension();" + NL + "\t\t\tString enteredExt = fileURI.fileExtension();" + NL + "\t\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Checks the given file and returns the error message if there are problems or <code>null</code> if the file is OK." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String validateFile(";
  protected final String TEXT_150 = " file);" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String getFileExtension();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_151 = " getFileURI() {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_152 = ".createFileURI(fileField.getText());" + NL + "\t\t\t} catch (Exception exception) {" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class SourceURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic SourceURISelectorPage() {" + NL + "\t\t\tsuper(\"Select source file\");" + NL + "\t\t\tsetTitle(\"Source file\");" + NL + "\t\t\tsetDescription(\"Select file with semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_153 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmySelectedModelFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_154 = " file) {" + NL + "\t\t\tif (!file.exists()) {" + NL + "\t\t\t\treturn \"Source file does not exist\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class DiagramURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_155 = " myNewFileURI;" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DiagramURISelectorPage() {" + NL + "\t\t\tsuper(\"Initialize new ";
  protected final String TEXT_156 = " diagram file\");" + NL + "\t\t\tsetTitle(\"Diagram file\");" + NL + "\t\t\tsetDescription(\"Create new diagram based on ";
  protected final String TEXT_157 = " model content\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_158 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t\tif (visible && mySelectedModelFileURI != null && getFileURI() == null && mySelectedModelFileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_159 = " originalFile = new ";
  protected final String TEXT_160 = "(mySelectedModelFileURI.toFileString());" + NL + "\t\t\t\tString originalFileName = mySelectedModelFileURI.trimFileExtension().lastSegment();" + NL + "\t\t\t\t";
  protected final String TEXT_161 = " parentFile = originalFile.getParentFile();" + NL + "\t\t\t\t";
  protected final String TEXT_162 = " newFile = new ";
  protected final String TEXT_163 = "(parentFile, originalFileName + getFileExtension());" + NL + "\t\t\t\tfor(int i = 1; i > 0 && newFile.exists(); i++) {" + NL + "\t\t\t\t\tnewFile = new ";
  protected final String TEXT_164 = "(parentFile, originalFileName + i + getFileExtension());" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (newFile.exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFile(newFile);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tmyNewFileURI = null;" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmyNewFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_165 = " getNewFileURI() {" + NL + "\t\t\treturn myNewFileURI;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_166 = " file) {" + NL + "\t\t\tif (file.exists()) {" + NL + "\t\t\t\treturn \"Diagram file already exists\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_167 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_168 = " implements ";
  protected final String TEXT_169 = " {";
  protected final String TEXT_170 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_171 = " myTreeViewer;";
  protected final String TEXT_172 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_173 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_174 = " topLevel = new ";
  protected final String TEXT_175 = "(parent, ";
  protected final String TEXT_176 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_177 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_178 = "(";
  protected final String TEXT_179 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_180 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_181 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_182 = " panel = new ";
  protected final String TEXT_183 = "(parent, ";
  protected final String TEXT_184 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_185 = "(";
  protected final String TEXT_186 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_187 = " layout = new ";
  protected final String TEXT_188 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_189 = " label = new ";
  protected final String TEXT_190 = "(panel, ";
  protected final String TEXT_191 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_192 = "(";
  protected final String TEXT_193 = ".HORIZONTAL_ALIGN_BEGINNING));";
  protected final String TEXT_194 = NL + "\t\t\t";
  protected final String TEXT_195 = " ";
  protected final String TEXT_196 = " = new ";
  protected final String TEXT_197 = "(panel, ";
  protected final String TEXT_198 = ".SINGLE | ";
  protected final String TEXT_199 = ".H_SCROLL | ";
  protected final String TEXT_200 = ".V_SCROLL | ";
  protected final String TEXT_201 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_202 = " layoutData = new ";
  protected final String TEXT_203 = "(";
  protected final String TEXT_204 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\t";
  protected final String TEXT_205 = ".getTree().setLayoutData(layoutData);" + NL + "\t\t\t";
  protected final String TEXT_206 = ".setContentProvider(new ";
  protected final String TEXT_207 = "(";
  protected final String TEXT_208 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\t";
  protected final String TEXT_209 = ".setLabelProvider(new ";
  protected final String TEXT_210 = "(";
  protected final String TEXT_211 = ".getInstance().getItemProvidersAdapterFactory()));";
  protected final String TEXT_212 = NL + "\t\t\t";
  protected final String TEXT_213 = ".setInput(myDiagramRoot.eResource());" + NL + "\t\t\t";
  protected final String TEXT_214 = ".setSelection(new ";
  protected final String TEXT_215 = "(myDiagramRoot));";
  protected final String TEXT_216 = NL + "\t\t\t";
  protected final String TEXT_217 = ".addSelectionChangedListener(this);" + NL + "\t\t}" + NL;
  protected final String TEXT_218 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tif (visible) {" + NL + "\t\t\t\t";
  protected final String TEXT_219 = ".setInput(myEditingDomain.getResourceSet().getResource(mySelectedModelFileURI, true));" + NL + "\t\t\t\tif (myDiagramRoot != null) {" + NL + "\t\t\t\t\tmyTreeViewer.setSelection(new ";
  protected final String TEXT_220 = "(myDiagramRoot));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t}" + NL;
  protected final String TEXT_221 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_222 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_223 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_224 = " selection = (";
  protected final String TEXT_225 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_226 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_227 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_228 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_229 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_230 = ") {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (";
  protected final String TEXT_231 = ") selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ";
  protected final String TEXT_232 = ".VISUAL_ID == ";
  protected final String TEXT_233 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_234 = NL;
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d417 1
a417 1
    stringBuffer.append(pluginActivatorClass);
a418 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_60);
d422 1
a422 1
    stringBuffer.append(TEXT_61);
d424 1
a424 1
    stringBuffer.append(TEXT_62);
d426 1
a426 1
    stringBuffer.append(TEXT_63);
d428 1
a428 1
    stringBuffer.append(TEXT_64);
d430 1
a430 1
    stringBuffer.append(TEXT_65);
d432 1
a432 1
    stringBuffer.append(TEXT_66);
d434 1
a434 1
    stringBuffer.append(TEXT_67);
d436 1
a436 1
    stringBuffer.append(TEXT_68);
d438 1
a438 1
    stringBuffer.append(TEXT_69);
d442 4
a446 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_72);
d450 1
a450 1
    stringBuffer.append(TEXT_73);
d452 1
a452 1
    stringBuffer.append(TEXT_74);
d454 1
a454 1
    stringBuffer.append(TEXT_75);
d459 1
a459 1
    stringBuffer.append(TEXT_76);
d461 1
a461 1
    stringBuffer.append(TEXT_77);
d463 1
a463 1
    stringBuffer.append(TEXT_78);
d467 1
a467 1
    stringBuffer.append(TEXT_79);
d469 1
a469 1
    stringBuffer.append(TEXT_80);
d471 1
a471 1
    stringBuffer.append(TEXT_81);
d476 4
d483 1
a483 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
d485 1
a485 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d495 3
a497 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d502 1
a502 1
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
d505 1
a505 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d508 1
a508 1
}
d511 1
a511 1
    stringBuffer.append(importManager.getImportedName("java.io.IOException"));
d514 1
a514 1
if (isRichClientPlatform) {
d520 1
a520 1
} else {
d523 2
a525 4
    stringBuffer.append(TEXT_99);
    
	if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {

a526 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_102);
d531 1
a531 1
    stringBuffer.append(TEXT_103);
d535 4
d540 1
a540 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
d542 1
a542 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
d546 1
a546 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d548 1
a548 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d550 1
a550 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d552 1
a552 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d554 1
a554 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d560 1
a560 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d562 1
a562 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d572 1
a572 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d576 1
a576 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d578 1
a578 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d580 1
a580 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d584 1
a584 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
d594 1
a594 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d598 1
a598 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d602 1
a602 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d604 1
a604 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d606 1
a606 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d608 1
a608 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionAdapter"));
d610 1
a610 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d612 1
a612 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d616 1
a616 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
d618 1
a618 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
d620 1
a620 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyEvent"));
d624 1
a624 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d628 1
a628 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d634 2
a636 2
    stringBuffer.append(TEXT_152);
    stringBuffer.append(editorGen.getDomainFileExtension());
d638 1
a638 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d640 1
a640 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d644 1
a644 1
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
d646 1
a646 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d656 1
a656 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
a659 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
    stringBuffer.append(TEXT_166);
d663 1
a663 1
    stringBuffer.append(TEXT_167);
d665 1
a665 1
    stringBuffer.append(TEXT_168);
d667 1
a667 1
    stringBuffer.append(TEXT_169);
d671 1
a671 1
    stringBuffer.append(TEXT_170);
d673 1
a673 1
    stringBuffer.append(TEXT_171);
d677 4
d684 1
a684 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d686 1
a686 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d688 1
a688 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d690 1
a690 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d694 1
a694 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d696 1
a696 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d700 1
a700 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d702 1
a702 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d704 1
a704 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d706 1
a706 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d708 1
a708 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d710 1
a710 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d712 1
a712 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d714 1
a714 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d716 1
a716 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d718 1
a718 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
a719 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_193);
d723 1
a723 1
    stringBuffer.append(TEXT_194);
d726 1
a726 1
    stringBuffer.append(TEXT_195);
d729 4
d734 1
a734 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d740 1
a740 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d742 1
a742 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d746 1
a746 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d748 1
a748 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d750 1
a750 1
    stringBuffer.append(treeViewer);
d752 2
a754 2
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider"));
d756 2
a758 2
    stringBuffer.append(TEXT_208);
    stringBuffer.append(treeViewer);
a759 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider"));
    stringBuffer.append(TEXT_210);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_211);
d763 1
a763 1
    stringBuffer.append(TEXT_212);
d765 1
a765 1
    stringBuffer.append(TEXT_213);
d767 1
a767 1
    stringBuffer.append(TEXT_214);
d769 1
a769 1
    stringBuffer.append(TEXT_215);
d773 1
a773 1
    stringBuffer.append(TEXT_216);
d775 1
a775 1
    stringBuffer.append(TEXT_217);
d779 1
a779 1
    stringBuffer.append(TEXT_218);
d781 1
a781 1
    stringBuffer.append(TEXT_219);
d783 1
a783 1
    stringBuffer.append(TEXT_220);
d787 4
d792 1
a792 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.SelectionChangedEvent"));
d796 1
a796 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d798 1
a798 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d800 1
a800 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d802 1
a802 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d804 1
a804 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
d806 1
a806 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
d808 1
a808 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d810 1
a810 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d812 1
a812 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a813 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_233);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_234);
@


1.7
log
@[159567]: Use GenApplication element from gmfgen model to generate RCP code
Use as much of the runtime templates as possible (changes are isolated as aspects)
@
text
@d108 117
a224 117
  protected final String TEXT_90 = ") graphicalViewer.getContents());" + NL + "\t\t\t\t\t\tif (layoutCommand != null && layoutCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tnew ";
  protected final String TEXT_91 = "(myEditingDomain, layoutCommand).execute();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} catch (";
  protected final String TEXT_92 = " ex) {";
  protected final String TEXT_93 = NL + "\t\t\t";
  protected final String TEXT_94 = ".getInstance().logError(\"Save operation failed for: \" + diagramFileURI.toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_95 = NL + "\t\t\t";
  protected final String TEXT_96 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_97 = NL + "\t\t} catch (";
  protected final String TEXT_98 = " ex) {" + NL + "\t\t\t";
  protected final String TEXT_99 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$";
  protected final String TEXT_100 = NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_101 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate abstract class URISelectorPage extends ";
  protected final String TEXT_102 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_103 = " fileField;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected URISelectorPage(String name) {" + NL + "\t\t\tsuper(name);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_104 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_105 = " composite = new ";
  protected final String TEXT_106 = "(parent, ";
  protected final String TEXT_107 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_108 = " layout = new ";
  protected final String TEXT_109 = "();" + NL + "\t\t\t\tlayout.numColumns = 1;" + NL + "\t\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_110 = " data = new ";
  protected final String TEXT_111 = "();" + NL + "\t\t\t\tdata.verticalAlignment = ";
  protected final String TEXT_112 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_113 = ".FILL;" + NL + "\t\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_114 = " resourceURILabel = new ";
  protected final String TEXT_115 = "(composite, ";
  protected final String TEXT_116 = ".LEFT);" + NL + "\t\t\t{" + NL + "\t\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_117 = " data = new ";
  protected final String TEXT_118 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_119 = ".FILL;" + NL + "\t\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_120 = " fileComposite = new ";
  protected final String TEXT_121 = "(composite, ";
  protected final String TEXT_122 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_123 = " data = new ";
  protected final String TEXT_124 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_125 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_126 = " layout = new ";
  protected final String TEXT_127 = "();" + NL + "\t\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\t\tlayout.numColumns = 2;" + NL + "\t\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField = new ";
  protected final String TEXT_128 = "(fileComposite, ";
  protected final String TEXT_129 = ".BORDER);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_130 = " data = new ";
  protected final String TEXT_131 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_132 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\t\tfileField.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField.addModifyListener(validator);" + NL + "\t\t\t";
  protected final String TEXT_133 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_134 = "(fileComposite," + NL + "\t\t\t\t\t";
  protected final String TEXT_135 = ".PUSH);" + NL + "\t\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "" + NL + "\t\t\tresourceURIBrowseFileSystemButton" + NL + "\t\t\t\t\t.addSelectionListener(new ";
  protected final String TEXT_136 = "() {" + NL + "\t\t\t\t\t\tpublic void widgetSelected(";
  protected final String TEXT_137 = " event) {" + NL + "\t\t\t\t\t\t\tString fileExtension = getFileExtension();" + NL + "\t\t\t\t\t\t\tString filePath = ";
  protected final String TEXT_138 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_139 = ".OPEN);" + NL + "\t\t\t\t\t\t\tif (filePath != null) {" + NL + "\t\t\t\t\t\t\t\tif (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t\t\tfilePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\tfileField.setText(filePath);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\tsetControl(composite);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_140 = " validator = new ";
  protected final String TEXT_141 = "() {" + NL + "\t\t\tpublic void modifyText(";
  protected final String TEXT_142 = " e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected final void setFile(";
  protected final String TEXT_143 = " file) {" + NL + "\t\t\tfileField.setText(file.getPath());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\t";
  protected final String TEXT_144 = " fileURI = getFileURI();" + NL + "\t\t\tif (fileURI == null || fileURI.isEmpty()) {" + NL + "\t\t\t\tsetErrorMessage(null);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (fileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_145 = " file = new ";
  protected final String TEXT_146 = "(fileURI.toFileString());" + NL + "\t\t\t\tString fileProblem = validateFile(file);" + NL + "\t\t\t\tif (fileProblem != null) {" + NL + "\t\t\t\t\tsetErrorMessage(fileProblem);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tString requiredExt = getFileExtension();" + NL + "\t\t\tString enteredExt = fileURI.fileExtension();" + NL + "\t\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Checks the given file and returns the error message if there are problems or <code>null</code> if the file is OK." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String validateFile(";
  protected final String TEXT_147 = " file);" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String getFileExtension();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_148 = " getFileURI() {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_149 = ".createFileURI(fileField.getText());" + NL + "\t\t\t} catch (Exception exception) {" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class SourceURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic SourceURISelectorPage() {" + NL + "\t\t\tsuper(\"Select source file\");" + NL + "\t\t\tsetTitle(\"Source file\");" + NL + "\t\t\tsetDescription(\"Select file with semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_150 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmySelectedModelFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_151 = " file) {" + NL + "\t\t\tif (!file.exists()) {" + NL + "\t\t\t\treturn \"Source file does not exist\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class DiagramURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_152 = " myNewFileURI;" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DiagramURISelectorPage() {" + NL + "\t\t\tsuper(\"Initialize new ";
  protected final String TEXT_153 = " diagram file\");" + NL + "\t\t\tsetTitle(\"Diagram file\");" + NL + "\t\t\tsetDescription(\"Create new diagram based on ";
  protected final String TEXT_154 = " model content\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_155 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t\tif (visible && mySelectedModelFileURI != null && getFileURI() == null && mySelectedModelFileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_156 = " originalFile = new ";
  protected final String TEXT_157 = "(mySelectedModelFileURI.toFileString());" + NL + "\t\t\t\tString originalFileName = mySelectedModelFileURI.trimFileExtension().lastSegment();" + NL + "\t\t\t\t";
  protected final String TEXT_158 = " parentFile = originalFile.getParentFile();" + NL + "\t\t\t\t";
  protected final String TEXT_159 = " newFile = new ";
  protected final String TEXT_160 = "(parentFile, originalFileName + getFileExtension());" + NL + "\t\t\t\tfor(int i = 1; i > 0 && newFile.exists(); i++) {" + NL + "\t\t\t\t\tnewFile = new ";
  protected final String TEXT_161 = "(parentFile, originalFileName + i + getFileExtension());" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (newFile.exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFile(newFile);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tmyNewFileURI = null;" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmyNewFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_162 = " getNewFileURI() {" + NL + "\t\t\treturn myNewFileURI;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_163 = " file) {" + NL + "\t\t\tif (file.exists()) {" + NL + "\t\t\t\treturn \"Diagram file already exists\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_164 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_165 = " implements ";
  protected final String TEXT_166 = " {";
  protected final String TEXT_167 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_168 = " myTreeViewer;";
  protected final String TEXT_169 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_170 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_171 = " topLevel = new ";
  protected final String TEXT_172 = "(parent, ";
  protected final String TEXT_173 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_174 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_175 = "(";
  protected final String TEXT_176 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_177 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_178 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_179 = " panel = new ";
  protected final String TEXT_180 = "(parent, ";
  protected final String TEXT_181 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_182 = "(";
  protected final String TEXT_183 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_184 = " layout = new ";
  protected final String TEXT_185 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_186 = " label = new ";
  protected final String TEXT_187 = "(panel, ";
  protected final String TEXT_188 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_189 = "(";
  protected final String TEXT_190 = ".HORIZONTAL_ALIGN_BEGINNING));";
  protected final String TEXT_191 = NL + "\t\t\t";
  protected final String TEXT_192 = " ";
  protected final String TEXT_193 = " = new ";
  protected final String TEXT_194 = "(panel, ";
  protected final String TEXT_195 = ".SINGLE | ";
  protected final String TEXT_196 = ".H_SCROLL | ";
  protected final String TEXT_197 = ".V_SCROLL | ";
  protected final String TEXT_198 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_199 = " layoutData = new ";
  protected final String TEXT_200 = "(";
  protected final String TEXT_201 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\t";
  protected final String TEXT_202 = ".getTree().setLayoutData(layoutData);" + NL + "\t\t\t";
  protected final String TEXT_203 = ".setContentProvider(new ";
  protected final String TEXT_204 = "(";
  protected final String TEXT_205 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\t";
  protected final String TEXT_206 = ".setLabelProvider(new ";
d226 27
a252 24
  protected final String TEXT_208 = ".getInstance().getItemProvidersAdapterFactory()));";
  protected final String TEXT_209 = NL + "\t\t\t";
  protected final String TEXT_210 = ".setInput(myDiagramRoot.eResource());" + NL + "\t\t\t";
  protected final String TEXT_211 = ".setSelection(new ";
  protected final String TEXT_212 = "(myDiagramRoot));";
  protected final String TEXT_213 = NL + "\t\t\t";
  protected final String TEXT_214 = ".addSelectionChangedListener(this);" + NL + "\t\t}" + NL;
  protected final String TEXT_215 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tif (visible) {" + NL + "\t\t\t\t";
  protected final String TEXT_216 = ".setInput(myEditingDomain.getResourceSet().getResource(mySelectedModelFileURI, true));" + NL + "\t\t\t\tif (myDiagramRoot != null) {" + NL + "\t\t\t\t\tmyTreeViewer.setSelection(new ";
  protected final String TEXT_217 = "(myDiagramRoot));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t}" + NL;
  protected final String TEXT_218 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_219 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_220 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_221 = " selection = (";
  protected final String TEXT_222 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_223 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_224 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_225 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_226 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_227 = ") {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (";
  protected final String TEXT_228 = ") selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ";
  protected final String TEXT_229 = ".VISUAL_ID == ";
  protected final String TEXT_230 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_231 = NL;
d501 10
d512 1
a512 1
    stringBuffer.append(TEXT_92);
d516 1
a516 1
    stringBuffer.append(TEXT_93);
d518 1
a518 1
    stringBuffer.append(TEXT_94);
d522 1
a522 1
    stringBuffer.append(TEXT_95);
d524 1
a524 1
    stringBuffer.append(TEXT_96);
d528 1
a528 1
    stringBuffer.append(TEXT_97);
d530 1
a530 1
    stringBuffer.append(TEXT_98);
d532 1
a532 1
    stringBuffer.append(TEXT_99);
d537 1
a537 1
    stringBuffer.append(TEXT_100);
d541 1
a541 1
    stringBuffer.append(TEXT_101);
d543 1
a543 1
    stringBuffer.append(TEXT_102);
d545 1
a545 1
    stringBuffer.append(TEXT_103);
d547 1
a547 1
    stringBuffer.append(TEXT_104);
d549 1
a549 1
    stringBuffer.append(TEXT_105);
d551 1
a551 1
    stringBuffer.append(TEXT_106);
d553 1
a553 1
    stringBuffer.append(TEXT_107);
d555 1
a555 1
    stringBuffer.append(TEXT_108);
a556 6
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d560 1
a560 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d562 1
a562 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d570 2
a572 2
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d576 1
a576 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d578 1
a578 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d580 1
a580 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d582 2
a584 2
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d594 1
a594 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d596 2
a598 2
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d602 1
a602 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d604 1
a604 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionAdapter"));
d606 1
a606 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d608 1
a608 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d610 1
a610 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d612 1
a612 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
d616 1
a616 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyEvent"));
d618 1
a618 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d620 1
a620 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d622 1
a622 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d626 2
a628 2
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d632 1
a632 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d634 1
a634 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d638 1
a638 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d640 1
a640 1
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
d642 2
a644 2
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d646 1
a646 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d648 1
a648 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d656 1
a656 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d660 6
d669 1
a669 1
    stringBuffer.append(TEXT_164);
d671 1
a671 1
    stringBuffer.append(TEXT_165);
d673 1
a673 1
    stringBuffer.append(TEXT_166);
d677 1
a677 1
    stringBuffer.append(TEXT_167);
d679 1
a679 1
    stringBuffer.append(TEXT_168);
d683 1
a683 1
    stringBuffer.append(TEXT_169);
d685 1
a685 1
    stringBuffer.append(TEXT_170);
d687 1
a687 1
    stringBuffer.append(TEXT_171);
d689 1
a689 1
    stringBuffer.append(TEXT_172);
d691 1
a691 1
    stringBuffer.append(TEXT_173);
d693 1
a693 1
    stringBuffer.append(TEXT_174);
d695 1
a695 1
    stringBuffer.append(TEXT_175);
d697 1
a697 1
    stringBuffer.append(TEXT_176);
d699 1
a699 1
    stringBuffer.append(TEXT_177);
d701 1
a701 1
    stringBuffer.append(TEXT_178);
d703 1
a703 1
    stringBuffer.append(TEXT_179);
d705 1
a705 1
    stringBuffer.append(TEXT_180);
d707 1
a707 1
    stringBuffer.append(TEXT_181);
d709 1
a709 1
    stringBuffer.append(TEXT_182);
d711 1
a711 1
    stringBuffer.append(TEXT_183);
d713 1
a713 1
    stringBuffer.append(TEXT_184);
d715 1
a715 1
    stringBuffer.append(TEXT_185);
d717 1
a717 1
    stringBuffer.append(TEXT_186);
d719 1
a719 1
    stringBuffer.append(TEXT_187);
d721 1
a721 1
    stringBuffer.append(TEXT_188);
d723 1
a723 1
    stringBuffer.append(TEXT_189);
d725 1
a725 1
    stringBuffer.append(TEXT_190);
d729 1
a729 1
    stringBuffer.append(TEXT_191);
d732 1
a732 1
    stringBuffer.append(TEXT_192);
d735 1
a735 1
    stringBuffer.append(TEXT_193);
a736 6
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d740 1
a740 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d742 1
a742 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d744 2
a746 2
    stringBuffer.append(TEXT_201);
    stringBuffer.append(treeViewer);
d748 1
a748 1
    stringBuffer.append(treeViewer);
d750 1
a750 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider"));
d752 1
a752 1
    stringBuffer.append(pluginActivatorClass);
d756 1
a756 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider"));
d760 6
d769 1
a769 1
    stringBuffer.append(TEXT_209);
d771 1
a771 1
    stringBuffer.append(TEXT_210);
d773 1
a773 1
    stringBuffer.append(TEXT_211);
d775 1
a775 1
    stringBuffer.append(TEXT_212);
d779 1
a779 1
    stringBuffer.append(TEXT_213);
d781 1
a781 1
    stringBuffer.append(TEXT_214);
d785 1
a785 1
    stringBuffer.append(TEXT_215);
d787 1
a787 1
    stringBuffer.append(TEXT_216);
d789 1
a789 1
    stringBuffer.append(TEXT_217);
d793 1
a793 1
    stringBuffer.append(TEXT_218);
d795 1
a795 1
    stringBuffer.append(TEXT_219);
d797 1
a797 1
    stringBuffer.append(TEXT_220);
d799 1
a799 1
    stringBuffer.append(TEXT_221);
d801 1
a801 1
    stringBuffer.append(TEXT_222);
d803 1
a803 1
    stringBuffer.append(TEXT_223);
d805 1
a805 1
    stringBuffer.append(TEXT_224);
d807 1
a807 1
    stringBuffer.append(TEXT_225);
d809 1
a809 1
    stringBuffer.append(TEXT_226);
d811 1
a811 1
    stringBuffer.append(TEXT_227);
d813 1
a813 1
    stringBuffer.append(TEXT_228);
d815 1
a815 1
    stringBuffer.append(TEXT_229);
d817 1
a817 1
    stringBuffer.append(TEXT_230);
d819 1
a819 1
    stringBuffer.append(TEXT_231);
@


1.6
log
@[164844]: Refactor InitDiagramFileAction to be able to use it in headless mode: XyzDiagramEditorUtil.createDiagramFor(EObject diagramRoot) method is now generated;
If a node has compartments, but does not have any direct children, do not generate unused method getXyz_1234NotationalChildNodeCommand() and method createXyz_1234Children() that always returns Collections.EMPTY_LIST.
@
text
@d260 1
a260 1
final boolean isRichClientPlatform = genDiagram.getEditorGen().getDomainGenModel().isRichClientPlatform();
@


1.5
log
@[163214]: Lite runtime should support generation to a View
[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate
@
text
@a4 1
import java.util.*;
d22 91
a112 91
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = "((";
  protected final String TEXT_6 = ")";
  protected final String TEXT_7 = "((";
  protected final String TEXT_8 = ")";
  protected final String TEXT_9 = ")";
  protected final String TEXT_10 = ".eGet(";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "())";
  protected final String TEXT_13 = ")";
  protected final String TEXT_14 = "((";
  protected final String TEXT_15 = ")";
  protected final String TEXT_16 = ")";
  protected final String TEXT_17 = ".";
  protected final String TEXT_18 = "()";
  protected final String TEXT_19 = NL + NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_20 = " extends ";
  protected final String TEXT_21 = " {" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_22 = " myEditingDomain;" + NL + "\t\t";
  protected final String TEXT_23 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_24 = " mySelectedModelFileURI;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate DiagramURISelectorPage myDiagramURISelectorPage;" + NL;
  protected final String TEXT_25 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_26 = " mySelectedModelFile;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_27 = " myFileCreationPage;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_28 = " myWorkbenchPage;" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_29 = " mySelection;" + NL;
  protected final String TEXT_30 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_31 = " myDiagramRoot;" + NL;
  protected final String TEXT_32 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_33 = "(";
  protected final String TEXT_34 = " selectedModelFileURI, ";
  protected final String TEXT_35 = " diagramRoot, ";
  protected final String TEXT_36 = " editingDomain) {";
  protected final String TEXT_37 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_38 = "(";
  protected final String TEXT_39 = " selectedModelFile, ";
  protected final String TEXT_40 = " workbenchPage, ";
  protected final String TEXT_41 = " selection, ";
  protected final String TEXT_42 = " diagramRoot, ";
  protected final String TEXT_43 = " editingDomain) {" + NL + "\t\tassert selectedModelFile != null : \"Null selectedModelFile in ";
  protected final String TEXT_44 = " constructor\"; //$NON-NLS-1$" + NL + "\t\tassert workbenchPage != null : \"Null workbenchPage in ";
  protected final String TEXT_45 = " constructor\"; //$NON-NLS-1$" + NL + "\t\tassert selection != null : \"Null selection in ";
  protected final String TEXT_46 = " constructor\"; //$NON-NLS-1$" + NL + "\t    assert diagramRoot != null : \"Null diagramRoot in ";
  protected final String TEXT_47 = " constructor\"; //$NON-NLS-1$";
  protected final String TEXT_48 = NL + "\t    assert editingDomain != null : \"Null editingDomain in ";
  protected final String TEXT_49 = " constructor\"; //$NON-NLS-1$" + NL + "\t    ";
  protected final String TEXT_50 = NL + "\t   \tmySelectedModelFileURI = selectedModelFileURI;";
  protected final String TEXT_51 = NL + "\t   \tmySelectedModelFile = selectedModelFile;" + NL + "\t   \tmyWorkbenchPage = workbenchPage;" + NL + "\t   \tmySelection = selection;";
  protected final String TEXT_52 = NL + "\t   \tmyDiagramRoot = diagramRoot;" + NL + "\t   \tmyEditingDomain = editingDomain;" + NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_53 = ".getBundledImageDescriptor(" + NL + "\t\t\t\"icons/wizban/New";
  protected final String TEXT_54 = "Wizard.gif\")); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {";
  protected final String TEXT_55 = NL + "\t\tif (mySelectedModelFileURI == null) {" + NL + "\t\t\taddPage(new SourceURISelectorPage());" + NL + "\t\t}" + NL + "\t\tmyDiagramURISelectorPage = new DiagramURISelectorPage();" + NL + "\t\taddPage(myDiagramURISelectorPage);";
  protected final String TEXT_56 = NL + "\t\tmyFileCreationPage = new ";
  protected final String TEXT_57 = "(\"Initialize new ";
  protected final String TEXT_58 = " diagram file\", mySelection) {" + NL + "\t\t\tpublic void createControl(";
  protected final String TEXT_59 = " parent) {" + NL + "\t\t\t\tsuper.createControl(parent);" + NL + "\t\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_60 = " parentContainer = mySelectedModelFile.getParent();" + NL + "\t\t\t\tString originalFileName = mySelectedModelFile.getProjectRelativePath().removeFileExtension().lastSegment();" + NL + "\t\t\t\tString fileExtension = \".";
  protected final String TEXT_61 = "\"; //$NON-NLS-1$" + NL + "\t\t\t\tString fileName = originalFileName + fileExtension;" + NL + "\t\t\t\tfor (int i = 1; i > 0 && parentContainer.getFile(new ";
  protected final String TEXT_62 = "(fileName)).exists(); i++) {" + NL + "\t\t\t\t\tfileName = originalFileName + i + fileExtension;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (parentContainer.getFile(new ";
  protected final String TEXT_63 = "(fileName)).exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFileName(fileName);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\tmyFileCreationPage.setDescription(\"Create new diagram based on ";
  protected final String TEXT_64 = " model content\");" + NL + "\t\taddPage(myFileCreationPage);";
  protected final String TEXT_65 = NL + "\t\taddPage(new RootElementSelectorPage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\t";
  protected final String TEXT_66 = " resourceSet = myEditingDomain.getResourceSet();";
  protected final String TEXT_67 = NL + "\t\t";
  protected final String TEXT_68 = " diagramFileURI = myDiagramURISelectorPage.getNewFileURI();";
  protected final String TEXT_69 = NL + "\t\t";
  protected final String TEXT_70 = " diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new ";
  protected final String TEXT_71 = "()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_72 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_73 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "" + NL + "\t\t";
  protected final String TEXT_74 = " diagramFileURI = ";
  protected final String TEXT_75 = ".createPlatformResourceURI(diagramFile.getFullPath().toString(), true);";
  protected final String TEXT_76 = NL + "\t\tfinal ";
  protected final String TEXT_77 = " diagramResource = resourceSet.createResource(diagramFileURI);" + NL + "\t\t";
  protected final String TEXT_78 = " command = new ";
  protected final String TEXT_79 = "(\"Initializing diagram contents\") { //$NON-NLS-1$" + NL + "\t\t\tprivate ";
  protected final String TEXT_80 = " myCreatedDiagram;" + NL + "" + NL + "\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\tint diagramVID = ";
  protected final String TEXT_81 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\t\tif (diagramVID != ";
  protected final String TEXT_82 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tpublic void execute() {" + NL + "\t\t\t\tmyCreatedDiagram = ";
  protected final String TEXT_83 = ".eINSTANCE.createDiagram();" + NL + "\t\t\t\tmyCreatedDiagram.setElement(myDiagramRoot);" + NL + "\t\t\t\t";
  protected final String TEXT_84 = ".INSTANCE.decorateView(myCreatedDiagram);" + NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram);";
  protected final String TEXT_85 = NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram.getElement());";
  protected final String TEXT_86 = NL + "\t\t\t\tinitDiagramContents(myCreatedDiagram);" + NL + "\t\t\t}" + NL + "\t\t\tpublic void redo() {" + NL + "\t\t\t\texecute();" + NL + "\t\t\t}" + NL + "\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tnew ";
  protected final String TEXT_87 = "(myEditingDomain, command).execute();" + NL + "\t\t\tdiagramResource.save(";
  protected final String TEXT_88 = ".EMPTY_MAP);";
  protected final String TEXT_89 = NL + "\t\t\t";
  protected final String TEXT_90 = " editor = ";
  protected final String TEXT_91 = ".showView(diagramFileURI);";
  protected final String TEXT_92 = NL + "\t\t\t";
  protected final String TEXT_93 = " editor = ";
  protected final String TEXT_94 = ".openEditor(diagramFileURI);";
d114 136
a249 351
  protected final String TEXT_96 = " editor = ";
  protected final String TEXT_97 = ".openEditor(myWorkbenchPage, diagramFile);";
  protected final String TEXT_98 = NL + "\t\t\tif (editor != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_99 = " layouter = (";
  protected final String TEXT_100 = ") editor.getAdapter(";
  protected final String TEXT_101 = ".class);" + NL + "\t\t\t\tif (layouter != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_102 = " graphicalViewer = (";
  protected final String TEXT_103 = ") editor.getAdapter(";
  protected final String TEXT_104 = ".class);" + NL + "\t\t\t\t\tif (graphicalViewer != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_105 = " layoutCommand = layouter.layout((";
  protected final String TEXT_106 = ") graphicalViewer.getContents());" + NL + "\t\t\t\t\t\tif (layoutCommand != null && layoutCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tnew ";
  protected final String TEXT_107 = "(myEditingDomain, layoutCommand).execute();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} catch (";
  protected final String TEXT_108 = " ex) {";
  protected final String TEXT_109 = NL + "\t\t\t";
  protected final String TEXT_110 = ".getInstance().logError(\"Save operation failed for: \" + diagramFileURI.toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_111 = NL + "\t\t\t";
  protected final String TEXT_112 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_113 = NL + "\t\t} catch (";
  protected final String TEXT_114 = " ex) {" + NL + "\t\t\t";
  protected final String TEXT_115 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$";
  protected final String TEXT_116 = NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_117 = NL;
  protected final String TEXT_118 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void initDiagramContents(";
  protected final String TEXT_119 = " diagram) {" + NL + "\tcreate";
  protected final String TEXT_120 = "Children(diagram);";
  protected final String TEXT_121 = NL + "\tmyViewService = new ";
  protected final String TEXT_122 = "(diagram);" + NL + "\tcreate";
  protected final String TEXT_123 = "ChildLinks(diagram);";
  protected final String TEXT_124 = NL + "}" + NL;
  protected final String TEXT_125 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_126 = "Children(";
  protected final String TEXT_127 = " viewObject) {";
  protected final String TEXT_128 = NL + "\tfor(";
  protected final String TEXT_129 = " it = viewObject.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_130 = " next = (";
  protected final String TEXT_131 = ") it.next();" + NL + "\t\tint visualID = ";
  protected final String TEXT_132 = ".getVisualID(next);" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_133 = NL + "\t\tcase ";
  protected final String TEXT_134 = ".VISUAL_ID:" + NL + "\t\t\tcreate";
  protected final String TEXT_135 = "Children(next);" + NL + "\t\t\tbreak;";
  protected final String TEXT_136 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_137 = NL + "\t";
  protected final String TEXT_138 = " semanticChildren = get";
  protected final String TEXT_139 = "SemanticChildNodes(viewObject);" + NL + "\tfor(";
  protected final String TEXT_140 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_141 = " nextDescriptor = (";
  protected final String TEXT_142 = ") it.next();" + NL + "\t\t";
  protected final String TEXT_143 = " createCommand = getCreate";
  protected final String TEXT_144 = "NotationalChildNodeCommand(viewObject, nextDescriptor);" + NL + "\t\tif (createCommand != null && createCommand.canExecute()) {" + NL + "\t\t\tcreateCommand.execute();";
  protected final String TEXT_145 = NL + "\t\t\t";
  protected final String TEXT_146 = " nextChild = createCommand.getCreatedView();" + NL + "\t\t\tint childVisualID = nextDescriptor.getVisualID();" + NL + "\t\t\tswitch (childVisualID) {";
  protected final String TEXT_147 = NL + "\t\t\tcase ";
  protected final String TEXT_148 = ".VISUAL_ID:" + NL + "\t\t\t\tcreate";
  protected final String TEXT_149 = "Children(nextChild);" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_150 = NL + "\t\t\t}";
  protected final String TEXT_151 = NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_152 = " get";
  protected final String TEXT_153 = "SemanticChildNodes(";
  protected final String TEXT_154 = " parentView) {";
  protected final String TEXT_155 = NL;
  protected final String TEXT_156 = NL + "\treturn ";
  protected final String TEXT_157 = ".EMPTY_LIST;";
  protected final String TEXT_158 = NL + "\t";
  protected final String TEXT_159 = " result = new ";
  protected final String TEXT_160 = "();";
  protected final String TEXT_161 = NL + "\t";
  protected final String TEXT_162 = " viewObject = ";
  protected final String TEXT_163 = ";" + NL + "\t";
  protected final String TEXT_164 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_165 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_166 = NL + "\tfor(";
  protected final String TEXT_167 = " it = ";
  protected final String TEXT_168 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_169 = ") it.next();";
  protected final String TEXT_170 = NL + "\tnextValue = (";
  protected final String TEXT_171 = ")";
  protected final String TEXT_172 = ";";
  protected final String TEXT_173 = NL + "\tnodeVID = ";
  protected final String TEXT_174 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_175 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_176 = NL + "\tcase ";
  protected final String TEXT_177 = ".VISUAL_ID: {";
  protected final String TEXT_178 = NL + "\tif (";
  protected final String TEXT_179 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_180 = NL + "\t\tresult.add(new ";
  protected final String TEXT_181 = "(nextValue, nodeVID));";
  protected final String TEXT_182 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_183 = NL + "\t\t}";
  protected final String TEXT_184 = NL + "\t}";
  protected final String TEXT_185 = NL + "\t}";
  protected final String TEXT_186 = NL + "\treturn result;";
  protected final String TEXT_187 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_188 = " getCreate";
  protected final String TEXT_189 = "NotationalChildNodeCommand(";
  protected final String TEXT_190 = " parentView, ";
  protected final String TEXT_191 = " descriptor) {";
  protected final String TEXT_192 = NL;
  protected final String TEXT_193 = "\t\t\t";
  protected final String TEXT_194 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_195 = NL + "\t\t\tcase ";
  protected final String TEXT_196 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_197 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_198 = "(";
  protected final String TEXT_199 = ", domainElement, ";
  protected final String TEXT_200 = "new ";
  protected final String TEXT_201 = "(0, 0, ";
  protected final String TEXT_202 = ", ";
  protected final String TEXT_203 = ")";
  protected final String TEXT_204 = NL + "null";
  protected final String TEXT_205 = ", ";
  protected final String TEXT_206 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_207 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_208 = NL + "}";
  protected final String TEXT_209 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_210 = "ChildLinks(";
  protected final String TEXT_211 = " viewObject) {";
  protected final String TEXT_212 = NL + "\t";
  protected final String TEXT_213 = " semanticChildLinks = get";
  protected final String TEXT_214 = "SemanticChildLinks(viewObject);" + NL + "\tfor(";
  protected final String TEXT_215 = " it = semanticChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_216 = " nextDescriptor = (";
  protected final String TEXT_217 = ") it.next();" + NL + "\t\t";
  protected final String TEXT_218 = " createCommand = getCreate";
  protected final String TEXT_219 = "NotationalChildLinkCommand(viewObject, nextDescriptor);" + NL + "\t\tif (createCommand != null && createCommand.canExecute()) {" + NL + "\t\t\tcreateCommand.execute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_220 = NL + "\tfor(";
  protected final String TEXT_221 = " it = viewObject.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_222 = " next = (";
  protected final String TEXT_223 = ") it.next();" + NL + "\t\tint visualID = ";
  protected final String TEXT_224 = ".getVisualID(next);" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_225 = NL + "\t\tcase ";
  protected final String TEXT_226 = ".VISUAL_ID:" + NL + "\t\t\tcreate";
  protected final String TEXT_227 = "ChildLinks(next);" + NL + "\t\t\tbreak;";
  protected final String TEXT_228 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_229 = NL + "}" + NL;
  protected final String TEXT_230 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_231 = " get";
  protected final String TEXT_232 = "SemanticChildLinks(";
  protected final String TEXT_233 = " parentView) {";
  protected final String TEXT_234 = NL;
  protected final String TEXT_235 = "\t";
  protected final String TEXT_236 = " result = new ";
  protected final String TEXT_237 = "();";
  protected final String TEXT_238 = NL + "\t";
  protected final String TEXT_239 = " modelObject = ";
  protected final String TEXT_240 = ".getElement();" + NL + "\t";
  protected final String TEXT_241 = " nextValue;";
  protected final String TEXT_242 = NL + "\tint linkVID;";
  protected final String TEXT_243 = NL + "\tfor(";
  protected final String TEXT_244 = " it = ";
  protected final String TEXT_245 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_246 = ") it.next();";
  protected final String TEXT_247 = NL + "\tnextValue = (";
  protected final String TEXT_248 = ")";
  protected final String TEXT_249 = ";";
  protected final String TEXT_250 = NL + "\tlinkVID = ";
  protected final String TEXT_251 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_252 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_253 = NL + "\tcase ";
  protected final String TEXT_254 = ".VISUAL_ID: {";
  protected final String TEXT_255 = NL + "\tif (";
  protected final String TEXT_256 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_257 = NL + "\t\t";
  protected final String TEXT_258 = " source = (";
  protected final String TEXT_259 = ")";
  protected final String TEXT_260 = ";";
  protected final String TEXT_261 = NL + "\t\t";
  protected final String TEXT_262 = " source = ";
  protected final String TEXT_263 = ".getElement();";
  protected final String TEXT_264 = NL + "\t\t";
  protected final String TEXT_265 = " target = (";
  protected final String TEXT_266 = ")";
  protected final String TEXT_267 = ";";
  protected final String TEXT_268 = NL + "\t\t";
  protected final String TEXT_269 = " target = ";
  protected final String TEXT_270 = ".getElement();";
  protected final String TEXT_271 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_272 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_273 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_274 = NL + "\t}";
  protected final String TEXT_275 = NL + "\t}";
  protected final String TEXT_276 = NL + "\t}";
  protected final String TEXT_277 = NL + "\tfor(";
  protected final String TEXT_278 = " it = ";
  protected final String TEXT_279 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_280 = ") it.next();";
  protected final String TEXT_281 = NL + "\tnextValue = (";
  protected final String TEXT_282 = ")";
  protected final String TEXT_283 = ";";
  protected final String TEXT_284 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_285 = NL + "\t\tresult.add(new ";
  protected final String TEXT_286 = "(modelObject, nextValue, null, ";
  protected final String TEXT_287 = ".VISUAL_ID));";
  protected final String TEXT_288 = NL + "\t}";
  protected final String TEXT_289 = NL + "\t}";
  protected final String TEXT_290 = NL + "\treturn result;";
  protected final String TEXT_291 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_292 = " getCreate";
  protected final String TEXT_293 = "NotationalChildLinkCommand(";
  protected final String TEXT_294 = " parentView, ";
  protected final String TEXT_295 = " linkDescriptor) {";
  protected final String TEXT_296 = NL;
  protected final String TEXT_297 = "\t\t\t";
  protected final String TEXT_298 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_299 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_300 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_301 = NL + "\t\t\tcase ";
  protected final String TEXT_302 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_303 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_304 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_305 = NL + "\t\t\tcase ";
  protected final String TEXT_306 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_307 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_308 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_309 = "(";
  protected final String TEXT_310 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_311 = NL + "}";
  protected final String TEXT_312 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_313 = " myViewService;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_314 = " getViewService() {" + NL + "\treturn myViewService;" + NL + "}";
  protected final String TEXT_315 = NL;
  protected final String TEXT_316 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate abstract class URISelectorPage extends ";
  protected final String TEXT_317 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_318 = " fileField;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected URISelectorPage(String name) {" + NL + "\t\t\tsuper(name);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_319 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_320 = " composite = new ";
  protected final String TEXT_321 = "(parent, ";
  protected final String TEXT_322 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_323 = " layout = new ";
  protected final String TEXT_324 = "();" + NL + "\t\t\t\tlayout.numColumns = 1;" + NL + "\t\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_325 = " data = new ";
  protected final String TEXT_326 = "();" + NL + "\t\t\t\tdata.verticalAlignment = ";
  protected final String TEXT_327 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_328 = ".FILL;" + NL + "\t\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_329 = " resourceURILabel = new ";
  protected final String TEXT_330 = "(composite, ";
  protected final String TEXT_331 = ".LEFT);" + NL + "\t\t\t{" + NL + "\t\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_332 = " data = new ";
  protected final String TEXT_333 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_334 = ".FILL;" + NL + "\t\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_335 = " fileComposite = new ";
  protected final String TEXT_336 = "(composite, ";
  protected final String TEXT_337 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_338 = " data = new ";
  protected final String TEXT_339 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_340 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_341 = " layout = new ";
  protected final String TEXT_342 = "();" + NL + "\t\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\t\tlayout.numColumns = 2;" + NL + "\t\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField = new ";
  protected final String TEXT_343 = "(fileComposite, ";
  protected final String TEXT_344 = ".BORDER);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_345 = " data = new ";
  protected final String TEXT_346 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_347 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\t\tfileField.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField.addModifyListener(validator);" + NL + "\t\t\t";
  protected final String TEXT_348 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_349 = "(fileComposite," + NL + "\t\t\t\t\t";
  protected final String TEXT_350 = ".PUSH);" + NL + "\t\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "" + NL + "\t\t\tresourceURIBrowseFileSystemButton" + NL + "\t\t\t\t\t.addSelectionListener(new ";
  protected final String TEXT_351 = "() {" + NL + "\t\t\t\t\t\tpublic void widgetSelected(";
  protected final String TEXT_352 = " event) {" + NL + "\t\t\t\t\t\t\tString fileExtension = getFileExtension();" + NL + "\t\t\t\t\t\t\tString filePath = ";
  protected final String TEXT_353 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_354 = ".OPEN);" + NL + "\t\t\t\t\t\t\tif (filePath != null) {" + NL + "\t\t\t\t\t\t\t\tif (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t\t\tfilePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\tfileField.setText(filePath);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\tsetControl(composite);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_355 = " validator = new ";
  protected final String TEXT_356 = "() {" + NL + "\t\t\tpublic void modifyText(";
  protected final String TEXT_357 = " e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected final void setFile(";
  protected final String TEXT_358 = " file) {" + NL + "\t\t\tfileField.setText(file.getPath());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\t";
  protected final String TEXT_359 = " fileURI = getFileURI();" + NL + "\t\t\tif (fileURI == null || fileURI.isEmpty()) {" + NL + "\t\t\t\tsetErrorMessage(null);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (fileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_360 = " file = new ";
  protected final String TEXT_361 = "(fileURI.toFileString());" + NL + "\t\t\t\tString fileProblem = validateFile(file);" + NL + "\t\t\t\tif (fileProblem != null) {" + NL + "\t\t\t\t\tsetErrorMessage(fileProblem);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tString requiredExt = getFileExtension();" + NL + "\t\t\tString enteredExt = fileURI.fileExtension();" + NL + "\t\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Checks the given file and returns the error message if there are problems or <code>null</code> if the file is OK." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String validateFile(";
  protected final String TEXT_362 = " file);" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String getFileExtension();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_363 = " getFileURI() {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_364 = ".createFileURI(fileField.getText());" + NL + "\t\t\t} catch (Exception exception) {" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class SourceURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic SourceURISelectorPage() {" + NL + "\t\t\tsuper(\"Select source file\");" + NL + "\t\t\tsetTitle(\"Source file\");" + NL + "\t\t\tsetDescription(\"Select file with semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_365 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmySelectedModelFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_366 = " file) {" + NL + "\t\t\tif (!file.exists()) {" + NL + "\t\t\t\treturn \"Source file does not exist\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class DiagramURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_367 = " myNewFileURI;" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DiagramURISelectorPage() {" + NL + "\t\t\tsuper(\"Initialize new ";
  protected final String TEXT_368 = " diagram file\");" + NL + "\t\t\tsetTitle(\"Diagram file\");" + NL + "\t\t\tsetDescription(\"Create new diagram based on ";
  protected final String TEXT_369 = " model content\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_370 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t\tif (visible && mySelectedModelFileURI != null && getFileURI() == null && mySelectedModelFileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_371 = " originalFile = new ";
  protected final String TEXT_372 = "(mySelectedModelFileURI.toFileString());" + NL + "\t\t\t\tString originalFileName = mySelectedModelFileURI.trimFileExtension().lastSegment();" + NL + "\t\t\t\t";
  protected final String TEXT_373 = " parentFile = originalFile.getParentFile();" + NL + "\t\t\t\t";
  protected final String TEXT_374 = " newFile = new ";
  protected final String TEXT_375 = "(parentFile, originalFileName + getFileExtension());" + NL + "\t\t\t\tfor(int i = 1; i > 0 && newFile.exists(); i++) {" + NL + "\t\t\t\t\tnewFile = new ";
  protected final String TEXT_376 = "(parentFile, originalFileName + i + getFileExtension());" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (newFile.exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFile(newFile);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tmyNewFileURI = null;" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmyNewFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_377 = " getNewFileURI() {" + NL + "\t\t\treturn myNewFileURI;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_378 = " file) {" + NL + "\t\t\tif (file.exists()) {" + NL + "\t\t\t\treturn \"Diagram file already exists\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_379 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_380 = " implements ";
  protected final String TEXT_381 = " {";
  protected final String TEXT_382 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_383 = " myTreeViewer;";
  protected final String TEXT_384 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_385 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_386 = " topLevel = new ";
  protected final String TEXT_387 = "(parent, ";
  protected final String TEXT_388 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_389 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_390 = "(";
  protected final String TEXT_391 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_392 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_393 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_394 = " panel = new ";
  protected final String TEXT_395 = "(parent, ";
  protected final String TEXT_396 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_397 = "(";
  protected final String TEXT_398 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_399 = " layout = new ";
  protected final String TEXT_400 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_401 = " label = new ";
  protected final String TEXT_402 = "(panel, ";
  protected final String TEXT_403 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_404 = "(";
  protected final String TEXT_405 = ".HORIZONTAL_ALIGN_BEGINNING));";
  protected final String TEXT_406 = NL + "\t\t\t";
  protected final String TEXT_407 = " ";
  protected final String TEXT_408 = " = new ";
  protected final String TEXT_409 = "(panel, ";
  protected final String TEXT_410 = ".SINGLE | ";
  protected final String TEXT_411 = ".H_SCROLL | ";
  protected final String TEXT_412 = ".V_SCROLL | ";
  protected final String TEXT_413 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_414 = " layoutData = new ";
  protected final String TEXT_415 = "(";
  protected final String TEXT_416 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\t";
  protected final String TEXT_417 = ".getTree().setLayoutData(layoutData);" + NL + "\t\t\t";
  protected final String TEXT_418 = ".setContentProvider(new ";
  protected final String TEXT_419 = "(";
  protected final String TEXT_420 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\t";
  protected final String TEXT_421 = ".setLabelProvider(new ";
  protected final String TEXT_422 = "(";
  protected final String TEXT_423 = ".getInstance().getItemProvidersAdapterFactory()));";
  protected final String TEXT_424 = NL + "\t\t\t";
  protected final String TEXT_425 = ".setInput(myDiagramRoot.eResource());" + NL + "\t\t\t";
  protected final String TEXT_426 = ".setSelection(new ";
  protected final String TEXT_427 = "(myDiagramRoot));";
  protected final String TEXT_428 = NL + "\t\t\t";
  protected final String TEXT_429 = ".addSelectionChangedListener(this);" + NL + "\t\t}" + NL;
  protected final String TEXT_430 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tif (visible) {" + NL + "\t\t\t\t";
  protected final String TEXT_431 = ".setInput(myEditingDomain.getResourceSet().getResource(mySelectedModelFileURI, true));" + NL + "\t\t\t\tif (myDiagramRoot != null) {" + NL + "\t\t\t\t\tmyTreeViewer.setSelection(new ";
  protected final String TEXT_432 = "(myDiagramRoot));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t}" + NL;
  protected final String TEXT_433 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_434 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_435 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_436 = " selection = (";
  protected final String TEXT_437 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_438 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_439 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_440 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_441 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_442 = ") {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (";
  protected final String TEXT_443 = ") selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ";
  protected final String TEXT_444 = ".VISUAL_ID == ";
  protected final String TEXT_445 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_446 = NL;
d282 1
a282 13
    
class FeatureGetAccessorHelper {
	/**
	 * @@param containerName the name of the container
	 * @@param feature the feature whose value is in interest
	 * @@param containerMetaClass the <code>GenClass</code> of the container, or <code>null</code>, if the container is declared as an <code>EObject</code>.
	 * @@param needsCastToResultType whether the cast to the result type is required (this parameter is only used if the <code>EClass</code> this feature belongs to is an external interface). 
	 */
	public void appendFeatureValueGetter(String containerName, GenFeature feature, GenClass containerMetaClass, boolean needsCastToResultType) {
		if (feature.getGenClass().isExternalInterface()) {
			boolean needsCastToEObject = containerMetaClass != null && containerMetaClass.isExternalInterface();
			if (needsCastToResultType) {

d284 1
a284 1
    stringBuffer.append(importManager.getImportedName(feature.isListType() ? "java.util.Collection" : feature.getTypeGenClass().getQualifiedInterfaceName()));
d286 1
a286 4
    
			}
			if (needsCastToEObject) {

a287 58
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_8);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_9);
    
			}

    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_12);
    
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_13);
    
			}
		} else {
			boolean needsCastToFeatureGenType = containerMetaClass == null || containerMetaClass.isExternalInterface();
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_15);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_16);
    
			}

    stringBuffer.append(TEXT_17);
    stringBuffer.append(feature.getGetAccessor());
    stringBuffer.append(TEXT_18);
    
		}
	}
}
final FeatureGetAccessorHelper myFeatureGetAccessorHelper = new FeatureGetAccessorHelper();

    stringBuffer.append(TEXT_19);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.Wizard"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_22);
d291 1
a291 1
    stringBuffer.append(TEXT_23);
d293 1
a293 1
    stringBuffer.append(TEXT_24);
d297 1
a297 1
    stringBuffer.append(TEXT_25);
d299 1
a299 1
    stringBuffer.append(TEXT_26);
d301 1
a301 1
    stringBuffer.append(TEXT_27);
d303 1
a303 1
    stringBuffer.append(TEXT_28);
d305 1
a305 1
    stringBuffer.append(TEXT_29);
d309 1
a309 1
    stringBuffer.append(TEXT_30);
d311 1
a311 1
    stringBuffer.append(TEXT_31);
d315 1
a315 1
    stringBuffer.append(TEXT_32);
d317 1
a317 1
    stringBuffer.append(TEXT_33);
d319 1
a319 1
    stringBuffer.append(TEXT_34);
d321 1
a321 1
    stringBuffer.append(TEXT_35);
d323 1
a323 1
    stringBuffer.append(TEXT_36);
d327 1
a327 1
    stringBuffer.append(TEXT_37);
d329 1
a329 1
    stringBuffer.append(TEXT_38);
d331 1
a331 1
    stringBuffer.append(TEXT_39);
d333 1
a333 1
    stringBuffer.append(TEXT_40);
d335 1
a335 1
    stringBuffer.append(TEXT_41);
d337 1
a337 1
    stringBuffer.append(TEXT_42);
d339 1
a339 1
    stringBuffer.append(TEXT_43);
d341 1
a341 1
    stringBuffer.append(TEXT_44);
d343 1
a343 1
    stringBuffer.append(TEXT_45);
d345 1
a345 1
    stringBuffer.append(TEXT_46);
d347 1
a347 1
    stringBuffer.append(TEXT_47);
d351 1
a351 1
    stringBuffer.append(TEXT_48);
d353 1
a353 1
    stringBuffer.append(TEXT_49);
d357 1
a357 1
    stringBuffer.append(TEXT_50);
d361 1
a361 1
    stringBuffer.append(TEXT_51);
d365 1
a365 1
    stringBuffer.append(TEXT_52);
d367 1
a367 1
    stringBuffer.append(TEXT_53);
d369 1
a369 1
    stringBuffer.append(TEXT_54);
d373 1
a373 1
    stringBuffer.append(TEXT_55);
d377 1
a377 1
    stringBuffer.append(TEXT_56);
d379 1
a379 1
    stringBuffer.append(TEXT_57);
d381 1
a381 1
    stringBuffer.append(TEXT_58);
d383 1
a383 1
    stringBuffer.append(TEXT_59);
d385 1
a385 1
    stringBuffer.append(TEXT_60);
d387 1
a387 1
    stringBuffer.append(TEXT_61);
d389 1
a389 1
    stringBuffer.append(TEXT_62);
d391 1
a391 1
    stringBuffer.append(TEXT_63);
d393 1
a393 792
    stringBuffer.append(TEXT_64);
    
}

    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
    stringBuffer.append(TEXT_66);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_68);
    
} else {

    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_75);
    
}

    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_84);
    if (editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_85);
    
}

    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_88);
    
if (!genDiagram.getEditorGen().getEditor().isEclipseEditor()) {

    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IViewPart"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_91);
    
} else {
	if (isRichClientPlatform) {

    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_94);
    
	} else {

    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ide.IDE"));
    stringBuffer.append(TEXT_97);
    
	}
}

    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("java.io.IOException"));
    stringBuffer.append(TEXT_108);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_109);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_110);
    
} else {

    stringBuffer.append(TEXT_111);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_112);
    
	if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {

    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_115);
    
	}
}

    stringBuffer.append(TEXT_116);
    stringBuffer.append(TEXT_117);
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_120);
    
if(!genDiagram.getLinks().isEmpty()) {

    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.NaiveViewService"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_123);
    
}

    stringBuffer.append(TEXT_124);
    
final Comparator<GenContainerBase> comparator = new Comparator<GenContainerBase>() {
	public int compare(GenContainerBase o1, GenContainerBase o2) {
		return o1.getVisualID() - o2.getVisualID();
	}
};
TreeSet<GenContainerBase> containers2Generate = new TreeSet<GenContainerBase>(comparator);
for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();
	if (!nextContainer.getContainedNodes().isEmpty()) {
		containers2Generate.add(nextContainer);
		continue;
	}
	if (nextContainer instanceof GenDiagram) {
		containers2Generate.add(nextContainer);
		continue;
	}
	if (nextContainer instanceof GenNode) {
		//May need to generate if contains compartments with children
		for(Iterator compartments = ((GenNode) nextContainer).getCompartments().iterator(); compartments.hasNext(); ) {
			GenCompartment nextCompartment = (GenCompartment) compartments.next();
			if (!nextCompartment.getContainedNodes().isEmpty()) {
				containers2Generate.add(nextContainer);
				break;
			}
		}
	}
}
for (Iterator<GenContainerBase> containers = containers2Generate.iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = containers.next();

    stringBuffer.append(TEXT_125);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_127);
    
	if (nextContainer instanceof GenNode) {
		boolean shouldIterateOverCompartments = false;
		for(Iterator compartments = ((GenNode) nextContainer).getCompartments().iterator(); compartments.hasNext(); ) {
			GenCompartment nextCompartment = (GenCompartment) compartments.next();
			if (!nextCompartment.getContainedNodes().isEmpty()) {
				shouldIterateOverCompartments = true;
				break;
			}
		}
		if (shouldIterateOverCompartments) {

    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_132);
    
			for(Iterator compartments = ((GenNode) nextContainer).getCompartments().iterator(); compartments.hasNext(); ) {
				GenCompartment nextCompartment = (GenCompartment) compartments.next();
				if (nextCompartment.getContainedNodes().isEmpty()) {
					continue;
				}

    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName(nextCompartment.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(nextCompartment.getUniqueIdentifier());
    stringBuffer.append(TEXT_135);
    
			}

    stringBuffer.append(TEXT_136);
    
		}
	}

    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_144);
    
	boolean shouldIterateToGenerate = false;
	for(Iterator containedNodes = nextContainer.getContainedNodes().iterator(); containedNodes.hasNext(); ) {
		GenNode nextNode = (GenNode) containedNodes.next();
		if (containers2Generate.contains(nextNode)) {
			shouldIterateToGenerate = true;
			break;
		}
	}
	if (shouldIterateToGenerate) {

    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_146);
    
		for(Iterator containedNodes = nextContainer.getContainedNodes().iterator(); containedNodes.hasNext(); ) {
			GenNode nextNode = (GenNode) containedNodes.next();
			if (containers2Generate.contains(nextNode)) {

    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_149);
    
			}
		}

    stringBuffer.append(TEXT_150);
    
	}

    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_154);
    
	{
		String _getViewCode = "parentView";
		List childNodes = nextContainer.getContainedNodes();

    stringBuffer.append(TEXT_155);
    
if (childNodes.size() == 0) {

    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_157);
    
} else {

    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_160);
    
	Map genFeature2genNodeMap = new LinkedHashMap();
	for (int nodeIndex = 0; nodeIndex < childNodes.size(); nodeIndex++) {
		GenNode nextNode = (GenNode) childNodes.get(nodeIndex);
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (!genFeature2genNodeMap.containsKey(childMetaFeature)) {
			genFeature2genNodeMap.put(childMetaFeature, new ArrayList());
		}
		((Collection) genFeature2genNodeMap.get(childMetaFeature)).add(nextNode);
	}
	Set entrySet = genFeature2genNodeMap.entrySet();
	if (entrySet.size() > 0) {

    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_165);
    
	}
	for (Iterator entries = entrySet.iterator(); entries.hasNext();) {
		Map.Entry nextEntry = (Map.Entry) entries.next();
		GenFeature childMetaFeature = (GenFeature) nextEntry.getKey();
		Collection genNodesCollection = (Collection) nextEntry.getValue();
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_167);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, true);
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_169);
    
		} else {

    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_171);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, false);
    stringBuffer.append(TEXT_172);
    
	}

    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_174);
    
	boolean generateSwitch = genNodesCollection.size() != 1;
	if (generateSwitch) {

    stringBuffer.append(TEXT_175);
    
	}
	for (Iterator genNodesIterator = genNodesCollection.iterator(); genNodesIterator.hasNext();) {
		GenNode nextNode = (GenNode) genNodesIterator.next();
		if (generateSwitch) {

    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_177);
    
		} else {

    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_179);
    
		}

    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_181);
    
		if (generateSwitch) {

    stringBuffer.append(TEXT_182);
    
		} else {

    stringBuffer.append(TEXT_183);
    
		}
	}
	if (generateSwitch) {

    stringBuffer.append(TEXT_184);
    
	}
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_185);
    
	}
}

    stringBuffer.append(TEXT_186);
    
}

    
	}

    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_188);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_191);
    
	{
		String _parentNode = "parentView";
		List childNodes = nextContainer.getContainedNodes();
		boolean isListLayout;
		if (nextContainer instanceof GenNode) {
			isListLayout = !org.eclipse.gmf.codegen.gmfgen.util.ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions((GenNode) nextContainer);
		} else if (nextContainer instanceof GenCompartment) {
			isListLayout = ((GenCompartment) nextContainer).isListLayout(); 
		} else if (nextContainer instanceof GenDiagram) {
			isListLayout = false;
		} else {
			throw new RuntimeException("Unexpected container");
		}

    stringBuffer.append(TEXT_192);
    stringBuffer.append(TEXT_193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_194);
    
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet == null) {
		continue;
	}
	String childNodeInterfaceName = importManager.getImportedName(nextNode.getDomainMetaClass().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_196);
    stringBuffer.append(childNodeInterfaceName);
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(_parentNode);
    stringBuffer.append(TEXT_199);
    
	if (!isListLayout) {
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) nextNode.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_202);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_203);
    
	} else {

    stringBuffer.append(TEXT_204);
    
	}

    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName(nextNode.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_206);
    
}

    stringBuffer.append(TEXT_207);
    
	}

    stringBuffer.append(TEXT_208);
    
}
class LinksCollection {
	private Collection<GenLink> myTypeModelFacetLinks = new LinkedList<GenLink>();
	private Collection<GenLink> myFeatureModelFacetLinks = new LinkedList<GenLink>();
	public void add(GenLink link) {
		if (link.getModelFacet() instanceof TypeLinkModelFacet) {
			myTypeModelFacetLinks.add(link);
		} else if (link.getModelFacet() instanceof FeatureLinkModelFacet) {
			myFeatureModelFacetLinks.add(link);
		}
	}
	public Iterator<GenLink> getContainedTypeModelFacetLinks() {
		return myTypeModelFacetLinks.iterator();
	}
	public Iterator<GenLink> getContainedFeatureModelFacetLinks() {
		return myFeatureModelFacetLinks.iterator();
	}
}
class CreateChildLinkElements {
	private TreeMap<GenContainerBase, LinksCollection> myElements;
	public CreateChildLinkElements() {
		myElements = new TreeMap<GenContainerBase, LinksCollection>(comparator);
	}
	public void add(GenContainerBase o, GenLink link) {
		buildAncestors(o);
		myElements.get(o).add(link);
	}
	private void buildAncestors(GenContainerBase o) {
		if (!myElements.containsKey(o)) {
			LinksCollection elements = new LinksCollection();
			myElements.put(o, elements);
			addAncestors(o);
		}
	}
	private void addAncestors(GenContainerBase o) {
		if (o instanceof GenCompartment) {
			GenCompartment compartment = (GenCompartment) o;
			buildAncestors(compartment.getNode());
		} else if (o instanceof GenTopLevelNode) {
			GenTopLevelNode node = (GenTopLevelNode) o;
			buildAncestors(node.getDiagram());
		} else if (o instanceof GenChildNode) {
			GenChildNode node = (GenChildNode) o;
			for(Iterator it = node.getContainers().iterator(); it.hasNext(); ) {
				GenContainerBase next = (GenContainerBase) it.next();
				buildAncestors(next);
			}
		}
	}
	public boolean contains(GenContainerBase o) {
		return myElements.containsKey(o);
	}
	public Iterator<Map.Entry<GenContainerBase, LinksCollection>> iterator() {
		return myElements.entrySet().iterator();
	}
}
if (!genDiagram.getLinks().isEmpty()) {
	CreateChildLinkElements linkContainers2Generate = new CreateChildLinkElements();
	//No need to explicitly add diagram, since we build the whole hierarchy up.
	for(Iterator links = genDiagram.getLinks().iterator(); links.hasNext(); ) {
		GenLink next = (GenLink) links.next();
		GenClass containerClass;
		LinkModelFacet nextModelFacet = next.getModelFacet();
		if (nextModelFacet instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) next.getModelFacet();
			if (modelFacet.getSourceMetaFeature() == null && modelFacet.getTargetMetaFeature() == null) {
				//if one link feature is null, the element is treated as this end of the link. If both are null, we cannot do anything about such a link.
				containerClass = null;
			} else {
				containerClass = modelFacet.getContainmentMetaFeature().getGenClass();
			}
		} else if (nextModelFacet instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) next.getModelFacet()).getMetaFeature();
			containerClass = metaFeature.getGenClass();
		} else {
			continue;
		}
		for (Iterator nodes = genDiagram.getAllNodes().iterator(); nodes.hasNext(); ) {
			GenNode nextNode = (GenNode) nodes.next();
			if (containerClass.getEcoreClass().isSuperTypeOf(nextNode.getDomainMetaClass().getEcoreClass())) {
				linkContainers2Generate.add(nextNode, next);
			}
		}
	}
	for(Iterator<Map.Entry<GenContainerBase, LinksCollection>> entryIt = linkContainers2Generate.iterator(); entryIt.hasNext(); ) {
		Map.Entry<GenContainerBase, LinksCollection> next = entryIt.next();
		GenContainerBase nextContainer = next.getKey();
		LinksCollection linksCollection = next.getValue();
		Iterator<GenLink> typeModelFacetLinks = linksCollection.getContainedTypeModelFacetLinks();
		Iterator<GenLink> featureModelFacetLinks = linksCollection.getContainedFeatureModelFacetLinks();

    stringBuffer.append(TEXT_209);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_210);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_211);
    
		if (typeModelFacetLinks.hasNext() || featureModelFacetLinks.hasNext()) {

    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_218);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_219);
    
		}
		boolean shouldIterateToGenerate = false;
		Collection childElements = new ArrayList(nextContainer.getContainedNodes());
		if (nextContainer instanceof GenNode) {
			childElements.addAll(((GenNode) nextContainer).getCompartments());
		}
		for(Iterator childrenIterator = childElements.iterator(); childrenIterator.hasNext(); ) {
			GenContainerBase nextChild = (GenContainerBase) childrenIterator.next();
			if (linkContainers2Generate.contains(nextChild)) {
				shouldIterateToGenerate = true;
				break;
			}
		}
		if (shouldIterateToGenerate) {

    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_224);
    
			for(Iterator childrenIterator = childElements.iterator(); childrenIterator.hasNext(); ) {
				GenContainerBase nextChild = (GenContainerBase) childrenIterator.next();
				if (!linkContainers2Generate.contains(nextChild)) {
					continue;
				}

    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName(nextChild.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_226);
    stringBuffer.append(nextChild.getUniqueIdentifier());
    stringBuffer.append(TEXT_227);
    
			}

    stringBuffer.append(TEXT_228);
    
		}

    stringBuffer.append(TEXT_229);
    
		if (typeModelFacetLinks.hasNext() || featureModelFacetLinks.hasNext()) {

    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_233);
    
			{
				String _getViewCode = "parentView";
				List childNodes = nextContainer.getContainedNodes();
				Iterator<GenLink> _containedTypeModelFacetLinks = linksCollection.getContainedTypeModelFacetLinks();;
				Iterator<GenLink> _containedFeatureModelFacetLinks = linksCollection.getContainedFeatureModelFacetLinks();;

    stringBuffer.append(TEXT_234);
    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_236);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_237);
    
Map genFeature2genLinkMap = new LinkedHashMap();
for(Iterator it = _containedTypeModelFacetLinks; it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
	GenFeature metaFeature = modelFacet.getChildMetaFeature();
	if (!genFeature2genLinkMap.containsKey(metaFeature)) {
		genFeature2genLinkMap.put(metaFeature, new ArrayList());
	}
	((Collection) genFeature2genLinkMap.get(metaFeature)).add(genLink);
}
Map genFeature2featureGenLinkMap = new LinkedHashMap();
for(Iterator it = _containedFeatureModelFacetLinks; it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
	if (!genFeature2featureGenLinkMap.containsKey(metaFeature)) {
		genFeature2featureGenLinkMap.put(metaFeature, new ArrayList());
	}
	((Collection) genFeature2featureGenLinkMap.get(metaFeature)).add(genLink);
}
if (!genFeature2genLinkMap.isEmpty() || !genFeature2featureGenLinkMap.isEmpty()) {

    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_239);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_240);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_241);
    
}
if (!genFeature2genLinkMap.isEmpty()) {

    stringBuffer.append(TEXT_242);
    
}
for (Iterator entries = genFeature2genLinkMap.entrySet().iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature metaFeature = (GenFeature) nextEntry.getKey();
	Collection genLinksCollection = (Collection) nextEntry.getValue();
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_243);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_244);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, true);
    stringBuffer.append(TEXT_245);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_246);
    
	} else {

    stringBuffer.append(TEXT_247);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_248);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, false);
    stringBuffer.append(TEXT_249);
    
	}

    stringBuffer.append(TEXT_250);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_251);
    
	boolean generateSwitch = genLinksCollection.size() != 1;
	if (generateSwitch) {

    stringBuffer.append(TEXT_252);
    
	}
	for (Iterator genLinksIterator = genLinksCollection.iterator(); genLinksIterator.hasNext(); ) {
		GenLink nextLink = (GenLink) genLinksIterator.next();
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (generateSwitch) {

    stringBuffer.append(TEXT_253);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_254);
    
		} else {

    stringBuffer.append(TEXT_255);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_256);
    
		}
		if (modelFacet.getSourceMetaFeature() != null) {

    stringBuffer.append(TEXT_257);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_258);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_259);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("nextValue", modelFacet.getSourceMetaFeature(), null, false);
    stringBuffer.append(TEXT_260);
    
		} else {

    stringBuffer.append(TEXT_261);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_262);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_263);
    
		}
		if (modelFacet.getTargetMetaFeature() != null) {

    stringBuffer.append(TEXT_264);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_265);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_266);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("nextValue", modelFacet.getTargetMetaFeature(), null, false);
    stringBuffer.append(TEXT_267);
d395 1
a395 1
		} else {
d397 3
a399 5
    stringBuffer.append(TEXT_268);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_269);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_270);
d401 1
a401 1
		}
d403 3
a405 3
    stringBuffer.append(TEXT_271);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_272);
d407 1
a407 1
		if (generateSwitch) {
d409 13
a421 1
    stringBuffer.append(TEXT_273);
d423 1
a423 1
		} else {
d425 17
a441 1
    stringBuffer.append(TEXT_274);
d443 1
a443 1
		}
d445 5
d451 1
a451 2
	}	//iterate over genLinksCollection
	if (generateSwitch) {
d453 5
a457 1
    stringBuffer.append(TEXT_275);
d459 2
a460 2
	}
	if (metaFeature.isListType()) {
d462 5
a466 17
    stringBuffer.append(TEXT_276);
    
	}
}
for (Iterator entries = genFeature2featureGenLinkMap.entrySet().iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature metaFeature = (GenFeature) nextEntry.getKey();
	Collection genLinksCollection = (Collection) nextEntry.getValue();
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_277);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_278);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, true);
    stringBuffer.append(TEXT_279);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_280);
d470 5
a474 26
    stringBuffer.append(TEXT_281);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_282);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, false);
    stringBuffer.append(TEXT_283);
    
	}

    stringBuffer.append(TEXT_284);
    
	for (Iterator genLinksIterator = genLinksCollection.iterator(); genLinksIterator.hasNext(); ) {
		GenLink nextLink = (GenLink) genLinksIterator.next();

    stringBuffer.append(TEXT_285);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_286);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_287);
    
	}

    stringBuffer.append(TEXT_288);
    
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_289);
d479 21
a499 1
    stringBuffer.append(TEXT_290);
d501 1
a501 1
			}
d503 3
a505 38
    stringBuffer.append(TEXT_291);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_292);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_293);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_294);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_295);
    
			{
				String _diagramCode = "parentView.getDiagram()";
				Iterator<GenLink> _containedTypeModelFacetLinks = linksCollection.getContainedTypeModelFacetLinks();;
				Iterator<GenLink> _containedFeatureModelFacetLinks = linksCollection.getContainedFeatureModelFacetLinks();;

    stringBuffer.append(TEXT_296);
    stringBuffer.append(TEXT_297);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_298);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_299);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IViewDecorator"));
    stringBuffer.append(TEXT_300);
    
	for(Iterator it = _containedTypeModelFacetLinks; it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (modelFacet == null) {
			continue;
		}

    stringBuffer.append(TEXT_301);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_302);
    stringBuffer.append(importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_303);
    stringBuffer.append(importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_304);
d507 1
a507 3
	}
	for(Iterator it = _containedFeatureModelFacetLinks; it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
d509 3
a511 5
    stringBuffer.append(TEXT_305);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_306);
    stringBuffer.append(importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_307);
d513 1
a513 1
	}
d515 5
a519 9
    stringBuffer.append(TEXT_308);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_309);
    stringBuffer.append(_diagramCode);
    stringBuffer.append(TEXT_310);
    
			}

    stringBuffer.append(TEXT_311);
a520 1
		}
a522 1
if(!genDiagram.getLinks().isEmpty()) {
d524 1
a524 9
    stringBuffer.append(TEXT_312);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_313);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_314);
    
}

    stringBuffer.append(TEXT_315);
d528 1
a528 1
    stringBuffer.append(TEXT_316);
d530 1
a530 1
    stringBuffer.append(TEXT_317);
d532 1
a532 1
    stringBuffer.append(TEXT_318);
d534 1
a534 1
    stringBuffer.append(TEXT_319);
d536 1
a536 1
    stringBuffer.append(TEXT_320);
d538 1
a538 1
    stringBuffer.append(TEXT_321);
d540 1
a540 1
    stringBuffer.append(TEXT_322);
d542 1
a542 1
    stringBuffer.append(TEXT_323);
d544 1
a544 1
    stringBuffer.append(TEXT_324);
d546 1
a546 1
    stringBuffer.append(TEXT_325);
d548 1
a548 1
    stringBuffer.append(TEXT_326);
d550 1
a550 1
    stringBuffer.append(TEXT_327);
d552 1
a552 1
    stringBuffer.append(TEXT_328);
d554 1
a554 1
    stringBuffer.append(TEXT_329);
d556 1
a556 1
    stringBuffer.append(TEXT_330);
d558 1
a558 1
    stringBuffer.append(TEXT_331);
d560 1
a560 1
    stringBuffer.append(TEXT_332);
d562 1
a562 1
    stringBuffer.append(TEXT_333);
d564 1
a564 1
    stringBuffer.append(TEXT_334);
d566 1
a566 1
    stringBuffer.append(TEXT_335);
d568 1
a568 1
    stringBuffer.append(TEXT_336);
d570 1
a570 1
    stringBuffer.append(TEXT_337);
d572 1
a572 1
    stringBuffer.append(TEXT_338);
d574 1
a574 1
    stringBuffer.append(TEXT_339);
d576 1
a576 1
    stringBuffer.append(TEXT_340);
d578 1
a578 1
    stringBuffer.append(TEXT_341);
d580 1
a580 1
    stringBuffer.append(TEXT_342);
d582 1
a582 1
    stringBuffer.append(TEXT_343);
d584 1
a584 1
    stringBuffer.append(TEXT_344);
d586 1
a586 1
    stringBuffer.append(TEXT_345);
d588 1
a588 1
    stringBuffer.append(TEXT_346);
d590 1
a590 1
    stringBuffer.append(TEXT_347);
d592 1
a592 1
    stringBuffer.append(TEXT_348);
d594 1
a594 1
    stringBuffer.append(TEXT_349);
d596 1
a596 1
    stringBuffer.append(TEXT_350);
d598 1
a598 1
    stringBuffer.append(TEXT_351);
d600 1
a600 1
    stringBuffer.append(TEXT_352);
d602 1
a602 1
    stringBuffer.append(TEXT_353);
d604 1
a604 1
    stringBuffer.append(TEXT_354);
d606 1
a606 1
    stringBuffer.append(TEXT_355);
d608 1
a608 1
    stringBuffer.append(TEXT_356);
d610 1
a610 1
    stringBuffer.append(TEXT_357);
d612 1
a612 1
    stringBuffer.append(TEXT_358);
d614 1
a614 1
    stringBuffer.append(TEXT_359);
d616 1
a616 1
    stringBuffer.append(TEXT_360);
d618 1
a618 1
    stringBuffer.append(TEXT_361);
d620 1
a620 1
    stringBuffer.append(TEXT_362);
d622 1
a622 1
    stringBuffer.append(TEXT_363);
d624 1
a624 1
    stringBuffer.append(TEXT_364);
d626 1
a626 1
    stringBuffer.append(TEXT_365);
d628 1
a628 1
    stringBuffer.append(TEXT_366);
d630 1
a630 1
    stringBuffer.append(TEXT_367);
d632 1
a632 1
    stringBuffer.append(TEXT_368);
d634 1
a634 1
    stringBuffer.append(TEXT_369);
d636 1
a636 1
    stringBuffer.append(TEXT_370);
d638 1
a638 1
    stringBuffer.append(TEXT_371);
d640 1
a640 1
    stringBuffer.append(TEXT_372);
d642 1
a642 1
    stringBuffer.append(TEXT_373);
d644 1
a644 1
    stringBuffer.append(TEXT_374);
d646 1
a646 1
    stringBuffer.append(TEXT_375);
d648 1
a648 1
    stringBuffer.append(TEXT_376);
d650 1
a650 1
    stringBuffer.append(TEXT_377);
d652 1
a652 1
    stringBuffer.append(TEXT_378);
d656 1
a656 1
    stringBuffer.append(TEXT_379);
d658 1
a658 1
    stringBuffer.append(TEXT_380);
d660 1
a660 1
    stringBuffer.append(TEXT_381);
d664 1
a664 1
    stringBuffer.append(TEXT_382);
d666 1
a666 1
    stringBuffer.append(TEXT_383);
d670 1
a670 1
    stringBuffer.append(TEXT_384);
d672 1
a672 1
    stringBuffer.append(TEXT_385);
d674 1
a674 1
    stringBuffer.append(TEXT_386);
d676 1
a676 1
    stringBuffer.append(TEXT_387);
d678 1
a678 1
    stringBuffer.append(TEXT_388);
d680 1
a680 1
    stringBuffer.append(TEXT_389);
d682 1
a682 1
    stringBuffer.append(TEXT_390);
d684 1
a684 1
    stringBuffer.append(TEXT_391);
d686 1
a686 1
    stringBuffer.append(TEXT_392);
d688 1
a688 1
    stringBuffer.append(TEXT_393);
d690 1
a690 1
    stringBuffer.append(TEXT_394);
d692 1
a692 1
    stringBuffer.append(TEXT_395);
d694 1
a694 1
    stringBuffer.append(TEXT_396);
d696 1
a696 1
    stringBuffer.append(TEXT_397);
d698 1
a698 1
    stringBuffer.append(TEXT_398);
d700 1
a700 1
    stringBuffer.append(TEXT_399);
d702 1
a702 1
    stringBuffer.append(TEXT_400);
d704 1
a704 1
    stringBuffer.append(TEXT_401);
d706 1
a706 1
    stringBuffer.append(TEXT_402);
d708 1
a708 1
    stringBuffer.append(TEXT_403);
d710 1
a710 1
    stringBuffer.append(TEXT_404);
d712 1
a712 1
    stringBuffer.append(TEXT_405);
d716 1
a716 1
    stringBuffer.append(TEXT_406);
d719 1
a719 1
    stringBuffer.append(TEXT_407);
d722 1
a722 1
    stringBuffer.append(TEXT_408);
d724 1
a724 1
    stringBuffer.append(TEXT_409);
d726 1
a726 1
    stringBuffer.append(TEXT_410);
d728 1
a728 1
    stringBuffer.append(TEXT_411);
d730 1
a730 1
    stringBuffer.append(TEXT_412);
d732 1
a732 1
    stringBuffer.append(TEXT_413);
d734 1
a734 1
    stringBuffer.append(TEXT_414);
d736 1
a736 1
    stringBuffer.append(TEXT_415);
d738 1
a738 1
    stringBuffer.append(TEXT_416);
d740 1
a740 1
    stringBuffer.append(TEXT_417);
d742 1
a742 1
    stringBuffer.append(TEXT_418);
d744 1
a744 1
    stringBuffer.append(TEXT_419);
d746 1
a746 1
    stringBuffer.append(TEXT_420);
d748 1
a748 1
    stringBuffer.append(TEXT_421);
d750 1
a750 1
    stringBuffer.append(TEXT_422);
d752 1
a752 1
    stringBuffer.append(TEXT_423);
d756 1
a756 1
    stringBuffer.append(TEXT_424);
d758 1
a758 1
    stringBuffer.append(TEXT_425);
d760 1
a760 1
    stringBuffer.append(TEXT_426);
d762 1
a762 1
    stringBuffer.append(TEXT_427);
d766 1
a766 1
    stringBuffer.append(TEXT_428);
d768 1
a768 1
    stringBuffer.append(TEXT_429);
d772 1
a772 1
    stringBuffer.append(TEXT_430);
d774 1
a774 1
    stringBuffer.append(TEXT_431);
d776 1
a776 1
    stringBuffer.append(TEXT_432);
d780 1
a780 1
    stringBuffer.append(TEXT_433);
d782 1
a782 1
    stringBuffer.append(TEXT_434);
d784 1
a784 1
    stringBuffer.append(TEXT_435);
d786 1
a786 1
    stringBuffer.append(TEXT_436);
d788 1
a788 1
    stringBuffer.append(TEXT_437);
d790 1
a790 1
    stringBuffer.append(TEXT_438);
d792 1
a792 1
    stringBuffer.append(TEXT_439);
d794 1
a794 1
    stringBuffer.append(TEXT_440);
d796 1
a796 1
    stringBuffer.append(TEXT_441);
d798 1
a798 1
    stringBuffer.append(TEXT_442);
d800 1
a800 1
    stringBuffer.append(TEXT_443);
d802 1
a802 1
    stringBuffer.append(TEXT_444);
d804 1
a804 1
    stringBuffer.append(TEXT_445);
d806 1
a806 1
    stringBuffer.append(TEXT_446);
@


1.4
log
@#161380 simplify feature model facets
@
text
@d87 10
a96 10
  protected final String TEXT_68 = " diagramFileURI = myDiagramURISelectorPage.getNewFileURI();" + NL + "\t\tfinal ";
  protected final String TEXT_69 = " diagramResource = resourceSet.createResource(diagramFileURI);";
  protected final String TEXT_70 = NL + "\t\t";
  protected final String TEXT_71 = " diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new ";
  protected final String TEXT_72 = "()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_73 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_74 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "" + NL + "\t\tfinal ";
  protected final String TEXT_75 = " diagramResource = resourceSet.createResource(";
  protected final String TEXT_76 = ".createPlatformResourceURI(diagramFile.getFullPath().toString()));";
  protected final String TEXT_77 = NL + "\t\t";
d110 1
a110 1
  protected final String TEXT_91 = ".openEditor(diagramResource.getURI());";
d113 6
a118 6
  protected final String TEXT_94 = ".openEditor(myWorkbenchPage, diagramFile);";
  protected final String TEXT_95 = NL + "\t\t\tif (editor != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_96 = " layouter = (";
  protected final String TEXT_97 = ") editor.getAdapter(";
  protected final String TEXT_98 = ".class);" + NL + "\t\t\t\tif (layouter != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_99 = " graphicalViewer = (";
d120 156
a275 156
  protected final String TEXT_101 = ".class);" + NL + "\t\t\t\t\tif (graphicalViewer != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_102 = " layoutCommand = layouter.layout((";
  protected final String TEXT_103 = ") graphicalViewer.getContents());" + NL + "\t\t\t\t\t\tif (layoutCommand != null && layoutCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tnew ";
  protected final String TEXT_104 = "(myEditingDomain, layoutCommand).execute();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} catch (";
  protected final String TEXT_105 = " ex) {";
  protected final String TEXT_106 = NL + "\t\t\t";
  protected final String TEXT_107 = ".getInstance().logError(\"Save operation failed for: \" + diagramFileURI.toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_108 = NL + "\t\t\t";
  protected final String TEXT_109 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_110 = " ex) {" + NL + "\t\t\t";
  protected final String TEXT_111 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$";
  protected final String TEXT_112 = NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_113 = NL;
  protected final String TEXT_114 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void initDiagramContents(";
  protected final String TEXT_115 = " diagram) {" + NL + "\tcreate";
  protected final String TEXT_116 = "Children(diagram);";
  protected final String TEXT_117 = NL + "\tmyViewService = new ";
  protected final String TEXT_118 = "(diagram);" + NL + "\tcreate";
  protected final String TEXT_119 = "ChildLinks(diagram);";
  protected final String TEXT_120 = NL + "}" + NL;
  protected final String TEXT_121 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_122 = "Children(";
  protected final String TEXT_123 = " viewObject) {";
  protected final String TEXT_124 = NL + "\tfor(";
  protected final String TEXT_125 = " it = viewObject.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_126 = " next = (";
  protected final String TEXT_127 = ") it.next();" + NL + "\t\tint visualID = ";
  protected final String TEXT_128 = ".getVisualID(next);" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_129 = NL + "\t\tcase ";
  protected final String TEXT_130 = ".VISUAL_ID:" + NL + "\t\t\tcreate";
  protected final String TEXT_131 = "Children(next);" + NL + "\t\t\tbreak;";
  protected final String TEXT_132 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_133 = NL + "\t";
  protected final String TEXT_134 = " semanticChildren = get";
  protected final String TEXT_135 = "SemanticChildNodes(viewObject);" + NL + "\tfor(";
  protected final String TEXT_136 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_137 = " nextDescriptor = (";
  protected final String TEXT_138 = ") it.next();" + NL + "\t\t";
  protected final String TEXT_139 = " createCommand = getCreate";
  protected final String TEXT_140 = "NotationalChildNodeCommand(viewObject, nextDescriptor);" + NL + "\t\tif (createCommand != null && createCommand.canExecute()) {" + NL + "\t\t\tcreateCommand.execute();";
  protected final String TEXT_141 = NL + "\t\t\t";
  protected final String TEXT_142 = " nextChild = createCommand.getCreatedView();" + NL + "\t\t\tint childVisualID = nextDescriptor.getVisualID();" + NL + "\t\t\tswitch (childVisualID) {";
  protected final String TEXT_143 = NL + "\t\t\tcase ";
  protected final String TEXT_144 = ".VISUAL_ID:" + NL + "\t\t\t\tcreate";
  protected final String TEXT_145 = "Children(nextChild);" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_146 = NL + "\t\t\t}";
  protected final String TEXT_147 = NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_148 = " get";
  protected final String TEXT_149 = "SemanticChildNodes(";
  protected final String TEXT_150 = " parentView) {";
  protected final String TEXT_151 = NL;
  protected final String TEXT_152 = NL + "\treturn ";
  protected final String TEXT_153 = ".EMPTY_LIST;";
  protected final String TEXT_154 = NL + "\t";
  protected final String TEXT_155 = " result = new ";
  protected final String TEXT_156 = "();";
  protected final String TEXT_157 = NL + "\t";
  protected final String TEXT_158 = " viewObject = ";
  protected final String TEXT_159 = ";" + NL + "\t";
  protected final String TEXT_160 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_161 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_162 = NL + "\tfor(";
  protected final String TEXT_163 = " it = ";
  protected final String TEXT_164 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_165 = ") it.next();";
  protected final String TEXT_166 = NL + "\tnextValue = (";
  protected final String TEXT_167 = ")";
  protected final String TEXT_168 = ";";
  protected final String TEXT_169 = NL + "\tnodeVID = ";
  protected final String TEXT_170 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_171 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_172 = NL + "\tcase ";
  protected final String TEXT_173 = ".VISUAL_ID: {";
  protected final String TEXT_174 = NL + "\tif (";
  protected final String TEXT_175 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_176 = NL + "\t\tresult.add(new ";
  protected final String TEXT_177 = "(nextValue, nodeVID));";
  protected final String TEXT_178 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_179 = NL + "\t\t}";
  protected final String TEXT_180 = NL + "\t}";
  protected final String TEXT_181 = NL + "\t}";
  protected final String TEXT_182 = NL + "\treturn result;";
  protected final String TEXT_183 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_184 = " getCreate";
  protected final String TEXT_185 = "NotationalChildNodeCommand(";
  protected final String TEXT_186 = " parentView, ";
  protected final String TEXT_187 = " descriptor) {";
  protected final String TEXT_188 = NL;
  protected final String TEXT_189 = "\t\t\t";
  protected final String TEXT_190 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_191 = NL + "\t\t\tcase ";
  protected final String TEXT_192 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_193 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_194 = "(";
  protected final String TEXT_195 = ", domainElement, ";
  protected final String TEXT_196 = "new ";
  protected final String TEXT_197 = "(0, 0, ";
  protected final String TEXT_198 = ", ";
  protected final String TEXT_199 = ")";
  protected final String TEXT_200 = NL + "null";
  protected final String TEXT_201 = ", ";
  protected final String TEXT_202 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_203 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_204 = NL + "}";
  protected final String TEXT_205 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_206 = "ChildLinks(";
  protected final String TEXT_207 = " viewObject) {";
  protected final String TEXT_208 = NL + "\t";
  protected final String TEXT_209 = " semanticChildLinks = get";
  protected final String TEXT_210 = "SemanticChildLinks(viewObject);" + NL + "\tfor(";
  protected final String TEXT_211 = " it = semanticChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_212 = " nextDescriptor = (";
  protected final String TEXT_213 = ") it.next();" + NL + "\t\t";
  protected final String TEXT_214 = " createCommand = getCreate";
  protected final String TEXT_215 = "NotationalChildLinkCommand(viewObject, nextDescriptor);" + NL + "\t\tif (createCommand != null && createCommand.canExecute()) {" + NL + "\t\t\tcreateCommand.execute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_216 = NL + "\tfor(";
  protected final String TEXT_217 = " it = viewObject.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_218 = " next = (";
  protected final String TEXT_219 = ") it.next();" + NL + "\t\tint visualID = ";
  protected final String TEXT_220 = ".getVisualID(next);" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_221 = NL + "\t\tcase ";
  protected final String TEXT_222 = ".VISUAL_ID:" + NL + "\t\t\tcreate";
  protected final String TEXT_223 = "ChildLinks(next);" + NL + "\t\t\tbreak;";
  protected final String TEXT_224 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_225 = NL + "}" + NL;
  protected final String TEXT_226 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_227 = " get";
  protected final String TEXT_228 = "SemanticChildLinks(";
  protected final String TEXT_229 = " parentView) {";
  protected final String TEXT_230 = NL;
  protected final String TEXT_231 = "\t";
  protected final String TEXT_232 = " result = new ";
  protected final String TEXT_233 = "();";
  protected final String TEXT_234 = NL + "\t";
  protected final String TEXT_235 = " modelObject = ";
  protected final String TEXT_236 = ".getElement();" + NL + "\t";
  protected final String TEXT_237 = " nextValue;";
  protected final String TEXT_238 = NL + "\tint linkVID;";
  protected final String TEXT_239 = NL + "\tfor(";
  protected final String TEXT_240 = " it = ";
  protected final String TEXT_241 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_242 = ") it.next();";
  protected final String TEXT_243 = NL + "\tnextValue = (";
  protected final String TEXT_244 = ")";
  protected final String TEXT_245 = ";";
  protected final String TEXT_246 = NL + "\tlinkVID = ";
  protected final String TEXT_247 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_248 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_249 = NL + "\tcase ";
  protected final String TEXT_250 = ".VISUAL_ID: {";
  protected final String TEXT_251 = NL + "\tif (";
  protected final String TEXT_252 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_253 = NL + "\t\t";
  protected final String TEXT_254 = " source = (";
  protected final String TEXT_255 = ")";
  protected final String TEXT_256 = ";";
d277 6
a282 6
  protected final String TEXT_258 = " source = ";
  protected final String TEXT_259 = ".getElement();";
  protected final String TEXT_260 = NL + "\t\t";
  protected final String TEXT_261 = " target = (";
  protected final String TEXT_262 = ")";
  protected final String TEXT_263 = ";";
d284 36
a319 36
  protected final String TEXT_265 = " target = ";
  protected final String TEXT_266 = ".getElement();";
  protected final String TEXT_267 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_268 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_269 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_270 = NL + "\t}";
  protected final String TEXT_271 = NL + "\t}";
  protected final String TEXT_272 = NL + "\t}";
  protected final String TEXT_273 = NL + "\tfor(";
  protected final String TEXT_274 = " it = ";
  protected final String TEXT_275 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_276 = ") it.next();";
  protected final String TEXT_277 = NL + "\tnextValue = (";
  protected final String TEXT_278 = ")";
  protected final String TEXT_279 = ";";
  protected final String TEXT_280 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_281 = NL + "\t\tresult.add(new ";
  protected final String TEXT_282 = "(modelObject, nextValue, null, ";
  protected final String TEXT_283 = ".VISUAL_ID));";
  protected final String TEXT_284 = NL + "\t}";
  protected final String TEXT_285 = NL + "\t}";
  protected final String TEXT_286 = NL + "\treturn result;";
  protected final String TEXT_287 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_288 = " getCreate";
  protected final String TEXT_289 = "NotationalChildLinkCommand(";
  protected final String TEXT_290 = " parentView, ";
  protected final String TEXT_291 = " linkDescriptor) {";
  protected final String TEXT_292 = NL;
  protected final String TEXT_293 = "\t\t\t";
  protected final String TEXT_294 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_295 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_296 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_297 = NL + "\t\t\tcase ";
  protected final String TEXT_298 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_299 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_300 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
d321 113
a433 113
  protected final String TEXT_302 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_303 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_304 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_305 = "(";
  protected final String TEXT_306 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_307 = NL + "}";
  protected final String TEXT_308 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_309 = " myViewService;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_310 = " getViewService() {" + NL + "\treturn myViewService;" + NL + "}";
  protected final String TEXT_311 = NL;
  protected final String TEXT_312 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate abstract class URISelectorPage extends ";
  protected final String TEXT_313 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_314 = " fileField;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected URISelectorPage(String name) {" + NL + "\t\t\tsuper(name);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_315 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_316 = " composite = new ";
  protected final String TEXT_317 = "(parent, ";
  protected final String TEXT_318 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_319 = " layout = new ";
  protected final String TEXT_320 = "();" + NL + "\t\t\t\tlayout.numColumns = 1;" + NL + "\t\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_321 = " data = new ";
  protected final String TEXT_322 = "();" + NL + "\t\t\t\tdata.verticalAlignment = ";
  protected final String TEXT_323 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_324 = ".FILL;" + NL + "\t\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_325 = " resourceURILabel = new ";
  protected final String TEXT_326 = "(composite, ";
  protected final String TEXT_327 = ".LEFT);" + NL + "\t\t\t{" + NL + "\t\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_328 = " data = new ";
  protected final String TEXT_329 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_330 = ".FILL;" + NL + "\t\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_331 = " fileComposite = new ";
  protected final String TEXT_332 = "(composite, ";
  protected final String TEXT_333 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_334 = " data = new ";
  protected final String TEXT_335 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_336 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_337 = " layout = new ";
  protected final String TEXT_338 = "();" + NL + "\t\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\t\tlayout.numColumns = 2;" + NL + "\t\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField = new ";
  protected final String TEXT_339 = "(fileComposite, ";
  protected final String TEXT_340 = ".BORDER);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_341 = " data = new ";
  protected final String TEXT_342 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_343 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\t\tfileField.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField.addModifyListener(validator);" + NL + "\t\t\t";
  protected final String TEXT_344 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_345 = "(fileComposite," + NL + "\t\t\t\t\t";
  protected final String TEXT_346 = ".PUSH);" + NL + "\t\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "" + NL + "\t\t\tresourceURIBrowseFileSystemButton" + NL + "\t\t\t\t\t.addSelectionListener(new ";
  protected final String TEXT_347 = "() {" + NL + "\t\t\t\t\t\tpublic void widgetSelected(";
  protected final String TEXT_348 = " event) {" + NL + "\t\t\t\t\t\t\tString fileExtension = getFileExtension();" + NL + "\t\t\t\t\t\t\tString filePath = ";
  protected final String TEXT_349 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_350 = ".OPEN);" + NL + "\t\t\t\t\t\t\tif (filePath != null) {" + NL + "\t\t\t\t\t\t\t\tif (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t\t\tfilePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\tfileField.setText(filePath);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\tsetControl(composite);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_351 = " validator = new ";
  protected final String TEXT_352 = "() {" + NL + "\t\t\tpublic void modifyText(";
  protected final String TEXT_353 = " e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected final void setFile(";
  protected final String TEXT_354 = " file) {" + NL + "\t\t\tfileField.setText(file.getPath());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\t";
  protected final String TEXT_355 = " fileURI = getFileURI();" + NL + "\t\t\tif (fileURI == null || fileURI.isEmpty()) {" + NL + "\t\t\t\tsetErrorMessage(null);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (fileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_356 = " file = new ";
  protected final String TEXT_357 = "(fileURI.toFileString());" + NL + "\t\t\t\tString fileProblem = validateFile(file);" + NL + "\t\t\t\tif (fileProblem != null) {" + NL + "\t\t\t\t\tsetErrorMessage(fileProblem);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tString requiredExt = getFileExtension();" + NL + "\t\t\tString enteredExt = fileURI.fileExtension();" + NL + "\t\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Checks the given file and returns the error message if there are problems or <code>null</code> if the file is OK." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String validateFile(";
  protected final String TEXT_358 = " file);" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String getFileExtension();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_359 = " getFileURI() {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_360 = ".createFileURI(fileField.getText());" + NL + "\t\t\t} catch (Exception exception) {" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class SourceURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic SourceURISelectorPage() {" + NL + "\t\t\tsuper(\"Select source file\");" + NL + "\t\t\tsetTitle(\"Source file\");" + NL + "\t\t\tsetDescription(\"Select file with semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_361 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmySelectedModelFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_362 = " file) {" + NL + "\t\t\tif (!file.exists()) {" + NL + "\t\t\t\treturn \"Source file does not exist\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class DiagramURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_363 = " myNewFileURI;" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DiagramURISelectorPage() {" + NL + "\t\t\tsuper(\"Initialize new ";
  protected final String TEXT_364 = " diagram file\");" + NL + "\t\t\tsetTitle(\"Diagram file\");" + NL + "\t\t\tsetDescription(\"Create new diagram based on ";
  protected final String TEXT_365 = " model content\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_366 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t\tif (visible && mySelectedModelFileURI != null && getFileURI() == null && mySelectedModelFileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_367 = " originalFile = new ";
  protected final String TEXT_368 = "(mySelectedModelFileURI.toFileString());" + NL + "\t\t\t\tString originalFileName = mySelectedModelFileURI.trimFileExtension().lastSegment();" + NL + "\t\t\t\t";
  protected final String TEXT_369 = " parentFile = originalFile.getParentFile();" + NL + "\t\t\t\t";
  protected final String TEXT_370 = " newFile = new ";
  protected final String TEXT_371 = "(parentFile, originalFileName + getFileExtension());" + NL + "\t\t\t\tfor(int i = 1; i > 0 && newFile.exists(); i++) {" + NL + "\t\t\t\t\tnewFile = new ";
  protected final String TEXT_372 = "(parentFile, originalFileName + i + getFileExtension());" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (newFile.exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFile(newFile);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tmyNewFileURI = null;" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmyNewFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_373 = " getNewFileURI() {" + NL + "\t\t\treturn myNewFileURI;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_374 = " file) {" + NL + "\t\t\tif (file.exists()) {" + NL + "\t\t\t\treturn \"Diagram file already exists\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_375 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_376 = " implements ";
  protected final String TEXT_377 = " {";
  protected final String TEXT_378 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_379 = " myTreeViewer;";
  protected final String TEXT_380 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_381 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_382 = " topLevel = new ";
  protected final String TEXT_383 = "(parent, ";
  protected final String TEXT_384 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_385 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_386 = "(";
  protected final String TEXT_387 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_388 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_389 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_390 = " panel = new ";
  protected final String TEXT_391 = "(parent, ";
  protected final String TEXT_392 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_393 = "(";
  protected final String TEXT_394 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_395 = " layout = new ";
  protected final String TEXT_396 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_397 = " label = new ";
  protected final String TEXT_398 = "(panel, ";
  protected final String TEXT_399 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_400 = "(";
  protected final String TEXT_401 = ".HORIZONTAL_ALIGN_BEGINNING));";
  protected final String TEXT_402 = NL + "\t\t\t";
  protected final String TEXT_403 = " ";
  protected final String TEXT_404 = " = new ";
  protected final String TEXT_405 = "(panel, ";
  protected final String TEXT_406 = ".SINGLE | ";
  protected final String TEXT_407 = ".H_SCROLL | ";
  protected final String TEXT_408 = ".V_SCROLL | ";
  protected final String TEXT_409 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_410 = " layoutData = new ";
  protected final String TEXT_411 = "(";
  protected final String TEXT_412 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\t";
  protected final String TEXT_413 = ".getTree().setLayoutData(layoutData);" + NL + "\t\t\t";
  protected final String TEXT_414 = ".setContentProvider(new ";
d435 8
a442 8
  protected final String TEXT_416 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\t";
  protected final String TEXT_417 = ".setLabelProvider(new ";
  protected final String TEXT_418 = "(";
  protected final String TEXT_419 = ".getInstance().getItemProvidersAdapterFactory()));";
  protected final String TEXT_420 = NL + "\t\t\t";
  protected final String TEXT_421 = ".setInput(myDiagramRoot.eResource());" + NL + "\t\t\t";
  protected final String TEXT_422 = ".setSelection(new ";
  protected final String TEXT_423 = "(myDiagramRoot));";
d444 22
a465 18
  protected final String TEXT_425 = ".addSelectionChangedListener(this);" + NL + "\t\t}" + NL;
  protected final String TEXT_426 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tif (visible) {" + NL + "\t\t\t\t";
  protected final String TEXT_427 = ".setInput(myEditingDomain.getResourceSet().getResource(mySelectedModelFileURI, true));" + NL + "\t\t\t\tif (myDiagramRoot != null) {" + NL + "\t\t\t\t\tmyTreeViewer.setSelection(new ";
  protected final String TEXT_428 = "(myDiagramRoot));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t}" + NL;
  protected final String TEXT_429 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_430 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_431 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_432 = " selection = (";
  protected final String TEXT_433 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_434 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_435 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_436 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_437 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_438 = ") {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (";
  protected final String TEXT_439 = ") selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ";
  protected final String TEXT_440 = ".VISUAL_ID == ";
  protected final String TEXT_441 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_442 = NL;
a694 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_69);
d698 2
d701 1
a701 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d703 1
a703 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d705 1
a705 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d707 1
a707 1
    stringBuffer.append(pluginActivatorClass);
d709 1
a709 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
a710 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_76);
d714 2
d742 1
a742 1
if (isRichClientPlatform) {
d745 1
a745 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
d751 1
d756 8
d765 1
a765 1
    stringBuffer.append(TEXT_94);
d767 1
d770 1
a770 1
    stringBuffer.append(TEXT_95);
d772 1
a772 1
    stringBuffer.append(TEXT_96);
d774 1
a774 1
    stringBuffer.append(TEXT_97);
d776 1
a776 1
    stringBuffer.append(TEXT_98);
d778 1
a778 1
    stringBuffer.append(TEXT_99);
d780 1
a780 1
    stringBuffer.append(TEXT_100);
d782 1
a782 1
    stringBuffer.append(TEXT_101);
d784 1
a784 1
    stringBuffer.append(TEXT_102);
d786 1
a786 1
    stringBuffer.append(TEXT_103);
d788 1
a788 1
    stringBuffer.append(TEXT_104);
d790 1
a790 1
    stringBuffer.append(TEXT_105);
d794 1
a794 1
    stringBuffer.append(TEXT_106);
d796 1
a796 1
    stringBuffer.append(TEXT_107);
d800 1
a800 1
    stringBuffer.append(TEXT_108);
d802 5
a806 1
    stringBuffer.append(TEXT_109);
d808 1
a808 1
    stringBuffer.append(TEXT_110);
d810 1
a810 1
    stringBuffer.append(TEXT_111);
d812 1
d815 3
a817 3
    stringBuffer.append(TEXT_112);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(TEXT_114);
d819 1
a819 1
    stringBuffer.append(TEXT_115);
d821 1
a821 1
    stringBuffer.append(TEXT_116);
d825 1
a825 1
    stringBuffer.append(TEXT_117);
d827 1
a827 1
    stringBuffer.append(TEXT_118);
d829 1
a829 1
    stringBuffer.append(TEXT_119);
d833 1
a833 1
    stringBuffer.append(TEXT_120);
d865 1
a865 1
    stringBuffer.append(TEXT_121);
d867 1
a867 1
    stringBuffer.append(TEXT_122);
d869 1
a869 1
    stringBuffer.append(TEXT_123);
d882 1
a882 1
    stringBuffer.append(TEXT_124);
d884 1
a884 1
    stringBuffer.append(TEXT_125);
d886 1
a886 1
    stringBuffer.append(TEXT_126);
d888 1
a888 1
    stringBuffer.append(TEXT_127);
d890 1
a890 1
    stringBuffer.append(TEXT_128);
d898 1
a898 1
    stringBuffer.append(TEXT_129);
d900 1
a900 1
    stringBuffer.append(TEXT_130);
d902 1
a902 1
    stringBuffer.append(TEXT_131);
d906 1
a906 1
    stringBuffer.append(TEXT_132);
d911 1
a911 1
    stringBuffer.append(TEXT_133);
d913 1
a913 1
    stringBuffer.append(TEXT_134);
d915 1
a915 1
    stringBuffer.append(TEXT_135);
d917 1
a917 1
    stringBuffer.append(TEXT_136);
d919 1
a919 1
    stringBuffer.append(TEXT_137);
d921 1
a921 1
    stringBuffer.append(TEXT_138);
d923 1
a923 1
    stringBuffer.append(TEXT_139);
d925 1
a925 1
    stringBuffer.append(TEXT_140);
d937 1
a937 1
    stringBuffer.append(TEXT_141);
d939 1
a939 1
    stringBuffer.append(TEXT_142);
d945 1
a945 1
    stringBuffer.append(TEXT_143);
d947 1
a947 1
    stringBuffer.append(TEXT_144);
d949 1
a949 1
    stringBuffer.append(TEXT_145);
d954 1
a954 1
    stringBuffer.append(TEXT_146);
d958 1
a958 1
    stringBuffer.append(TEXT_147);
d960 1
a960 1
    stringBuffer.append(TEXT_148);
d962 1
a962 1
    stringBuffer.append(TEXT_149);
d964 1
a964 1
    stringBuffer.append(TEXT_150);
d970 1
a970 1
    stringBuffer.append(TEXT_151);
d974 1
a974 1
    stringBuffer.append(TEXT_152);
d976 1
a976 1
    stringBuffer.append(TEXT_153);
d980 1
a980 1
    stringBuffer.append(TEXT_154);
d982 1
a982 1
    stringBuffer.append(TEXT_155);
d984 1
a984 1
    stringBuffer.append(TEXT_156);
d1002 1
a1002 1
    stringBuffer.append(TEXT_157);
d1004 1
a1004 1
    stringBuffer.append(TEXT_158);
d1006 1
a1006 1
    stringBuffer.append(TEXT_159);
d1008 1
a1008 1
    stringBuffer.append(TEXT_160);
d1010 1
a1010 1
    stringBuffer.append(TEXT_161);
d1019 1
a1019 1
    stringBuffer.append(TEXT_162);
d1021 1
a1021 1
    stringBuffer.append(TEXT_163);
d1023 1
a1023 1
    stringBuffer.append(TEXT_164);
d1025 1
a1025 1
    stringBuffer.append(TEXT_165);
d1029 1
a1029 1
    stringBuffer.append(TEXT_166);
d1031 1
a1031 1
    stringBuffer.append(TEXT_167);
d1033 1
a1033 1
    stringBuffer.append(TEXT_168);
d1037 1
a1037 1
    stringBuffer.append(TEXT_169);
d1039 1
a1039 1
    stringBuffer.append(TEXT_170);
d1044 1
a1044 1
    stringBuffer.append(TEXT_171);
d1051 1
a1051 1
    stringBuffer.append(TEXT_172);
d1053 1
a1053 1
    stringBuffer.append(TEXT_173);
d1057 1
a1057 1
    stringBuffer.append(TEXT_174);
d1059 1
a1059 1
    stringBuffer.append(TEXT_175);
d1063 1
a1063 1
    stringBuffer.append(TEXT_176);
d1065 1
a1065 1
    stringBuffer.append(TEXT_177);
d1069 1
a1069 1
    stringBuffer.append(TEXT_178);
d1073 1
a1073 1
    stringBuffer.append(TEXT_179);
d1079 1
a1079 1
    stringBuffer.append(TEXT_180);
d1084 1
a1084 1
    stringBuffer.append(TEXT_181);
d1089 1
a1089 1
    stringBuffer.append(TEXT_182);
d1096 1
a1096 1
    stringBuffer.append(TEXT_183);
d1098 1
a1098 1
    stringBuffer.append(TEXT_184);
d1100 1
a1100 1
    stringBuffer.append(TEXT_185);
d1102 1
a1102 1
    stringBuffer.append(TEXT_186);
d1104 1
a1104 1
    stringBuffer.append(TEXT_187);
d1120 2
a1121 2
    stringBuffer.append(TEXT_188);
    stringBuffer.append(TEXT_189);
d1123 1
a1123 1
    stringBuffer.append(TEXT_190);
d1133 1
a1133 1
    stringBuffer.append(TEXT_191);
d1135 1
a1135 1
    stringBuffer.append(TEXT_192);
d1137 1
a1137 1
    stringBuffer.append(TEXT_193);
d1139 1
a1139 1
    stringBuffer.append(TEXT_194);
d1141 1
a1141 1
    stringBuffer.append(TEXT_195);
d1152 1
a1152 1
    stringBuffer.append(TEXT_196);
d1154 1
a1154 1
    stringBuffer.append(TEXT_197);
d1156 1
a1156 1
    stringBuffer.append(TEXT_198);
d1158 1
a1158 1
    stringBuffer.append(TEXT_199);
d1162 1
a1162 1
    stringBuffer.append(TEXT_200);
d1166 1
a1166 1
    stringBuffer.append(TEXT_201);
d1168 1
a1168 1
    stringBuffer.append(TEXT_202);
d1172 1
a1172 1
    stringBuffer.append(TEXT_203);
d1176 1
a1176 1
    stringBuffer.append(TEXT_204);
d1269 1
a1269 1
    stringBuffer.append(TEXT_205);
d1271 1
a1271 1
    stringBuffer.append(TEXT_206);
d1273 1
a1273 1
    stringBuffer.append(TEXT_207);
d1277 1
a1277 1
    stringBuffer.append(TEXT_208);
d1279 1
a1279 1
    stringBuffer.append(TEXT_209);
d1281 1
a1281 1
    stringBuffer.append(TEXT_210);
d1283 1
a1283 1
    stringBuffer.append(TEXT_211);
d1285 1
a1285 1
    stringBuffer.append(TEXT_212);
d1287 1
a1287 1
    stringBuffer.append(TEXT_213);
d1289 1
a1289 1
    stringBuffer.append(TEXT_214);
d1291 1
a1291 1
    stringBuffer.append(TEXT_215);
d1308 1
a1308 1
    stringBuffer.append(TEXT_216);
d1310 1
a1310 1
    stringBuffer.append(TEXT_217);
d1312 1
a1312 1
    stringBuffer.append(TEXT_218);
d1314 1
a1314 1
    stringBuffer.append(TEXT_219);
d1316 1
a1316 1
    stringBuffer.append(TEXT_220);
d1324 1
a1324 1
    stringBuffer.append(TEXT_221);
d1326 1
a1326 1
    stringBuffer.append(TEXT_222);
d1328 1
a1328 1
    stringBuffer.append(TEXT_223);
d1332 1
a1332 1
    stringBuffer.append(TEXT_224);
d1336 1
a1336 1
    stringBuffer.append(TEXT_225);
d1340 1
a1340 1
    stringBuffer.append(TEXT_226);
d1342 1
a1342 1
    stringBuffer.append(TEXT_227);
d1344 1
a1344 1
    stringBuffer.append(TEXT_228);
d1346 1
a1346 1
    stringBuffer.append(TEXT_229);
d1354 2
a1355 2
    stringBuffer.append(TEXT_230);
    stringBuffer.append(TEXT_231);
d1357 1
a1357 1
    stringBuffer.append(TEXT_232);
d1359 1
a1359 1
    stringBuffer.append(TEXT_233);
d1382 1
a1382 1
    stringBuffer.append(TEXT_234);
d1384 1
a1384 1
    stringBuffer.append(TEXT_235);
d1386 1
a1386 1
    stringBuffer.append(TEXT_236);
d1388 1
a1388 1
    stringBuffer.append(TEXT_237);
d1393 1
a1393 1
    stringBuffer.append(TEXT_238);
d1402 1
a1402 1
    stringBuffer.append(TEXT_239);
d1404 1
a1404 1
    stringBuffer.append(TEXT_240);
d1406 1
a1406 1
    stringBuffer.append(TEXT_241);
d1408 1
a1408 1
    stringBuffer.append(TEXT_242);
d1412 1
a1412 1
    stringBuffer.append(TEXT_243);
d1414 1
a1414 1
    stringBuffer.append(TEXT_244);
d1416 1
a1416 1
    stringBuffer.append(TEXT_245);
d1420 1
a1420 1
    stringBuffer.append(TEXT_246);
d1422 1
a1422 1
    stringBuffer.append(TEXT_247);
d1427 1
a1427 1
    stringBuffer.append(TEXT_248);
d1435 1
a1435 1
    stringBuffer.append(TEXT_249);
d1437 1
a1437 1
    stringBuffer.append(TEXT_250);
d1441 1
a1441 1
    stringBuffer.append(TEXT_251);
d1443 1
a1443 1
    stringBuffer.append(TEXT_252);
d1448 1
a1448 1
    stringBuffer.append(TEXT_253);
d1450 1
a1450 1
    stringBuffer.append(TEXT_254);
d1452 1
a1452 1
    stringBuffer.append(TEXT_255);
d1454 1
a1454 1
    stringBuffer.append(TEXT_256);
d1458 1
a1458 1
    stringBuffer.append(TEXT_257);
d1460 1
a1460 1
    stringBuffer.append(TEXT_258);
d1462 1
a1462 1
    stringBuffer.append(TEXT_259);
d1467 1
a1467 1
    stringBuffer.append(TEXT_260);
d1469 1
a1469 1
    stringBuffer.append(TEXT_261);
d1471 1
a1471 1
    stringBuffer.append(TEXT_262);
d1473 1
a1473 1
    stringBuffer.append(TEXT_263);
d1477 1
a1477 1
    stringBuffer.append(TEXT_264);
d1479 1
a1479 1
    stringBuffer.append(TEXT_265);
d1481 1
a1481 1
    stringBuffer.append(TEXT_266);
d1485 1
a1485 1
    stringBuffer.append(TEXT_267);
d1487 1
a1487 1
    stringBuffer.append(TEXT_268);
d1491 1
a1491 1
    stringBuffer.append(TEXT_269);
d1495 1
a1495 1
    stringBuffer.append(TEXT_270);
d1503 1
a1503 1
    stringBuffer.append(TEXT_271);
d1508 1
a1508 1
    stringBuffer.append(TEXT_272);
d1518 1
a1518 1
    stringBuffer.append(TEXT_273);
d1520 1
a1520 1
    stringBuffer.append(TEXT_274);
d1522 1
a1522 1
    stringBuffer.append(TEXT_275);
d1524 1
a1524 1
    stringBuffer.append(TEXT_276);
d1528 1
a1528 1
    stringBuffer.append(TEXT_277);
d1530 1
a1530 1
    stringBuffer.append(TEXT_278);
d1532 1
a1532 1
    stringBuffer.append(TEXT_279);
d1536 1
a1536 1
    stringBuffer.append(TEXT_280);
d1541 1
a1541 1
    stringBuffer.append(TEXT_281);
d1543 1
a1543 1
    stringBuffer.append(TEXT_282);
d1545 1
a1545 1
    stringBuffer.append(TEXT_283);
d1549 1
a1549 1
    stringBuffer.append(TEXT_284);
d1553 1
a1553 1
    stringBuffer.append(TEXT_285);
d1558 1
a1558 1
    stringBuffer.append(TEXT_286);
d1562 1
a1562 1
    stringBuffer.append(TEXT_287);
d1564 1
a1564 1
    stringBuffer.append(TEXT_288);
d1566 1
a1566 1
    stringBuffer.append(TEXT_289);
d1568 1
a1568 1
    stringBuffer.append(TEXT_290);
d1570 1
a1570 1
    stringBuffer.append(TEXT_291);
d1577 2
a1578 2
    stringBuffer.append(TEXT_292);
    stringBuffer.append(TEXT_293);
d1580 1
a1580 1
    stringBuffer.append(TEXT_294);
d1582 1
a1582 1
    stringBuffer.append(TEXT_295);
d1584 1
a1584 1
    stringBuffer.append(TEXT_296);
d1593 1
a1593 1
    stringBuffer.append(TEXT_297);
d1595 1
a1595 1
    stringBuffer.append(TEXT_298);
d1597 1
a1597 1
    stringBuffer.append(TEXT_299);
d1599 1
a1599 1
    stringBuffer.append(TEXT_300);
d1605 1
a1605 1
    stringBuffer.append(TEXT_301);
d1607 1
a1607 1
    stringBuffer.append(TEXT_302);
d1609 1
a1609 1
    stringBuffer.append(TEXT_303);
d1613 1
a1613 1
    stringBuffer.append(TEXT_304);
d1615 1
a1615 1
    stringBuffer.append(TEXT_305);
d1617 1
a1617 1
    stringBuffer.append(TEXT_306);
d1621 1
a1621 1
    stringBuffer.append(TEXT_307);
d1628 1
a1628 1
    stringBuffer.append(TEXT_308);
d1630 1
a1630 1
    stringBuffer.append(TEXT_309);
d1632 1
a1632 1
    stringBuffer.append(TEXT_310);
d1636 1
a1636 1
    stringBuffer.append(TEXT_311);
d1640 1
a1640 1
    stringBuffer.append(TEXT_312);
d1642 1
a1642 1
    stringBuffer.append(TEXT_313);
d1644 1
a1644 1
    stringBuffer.append(TEXT_314);
d1646 1
a1646 1
    stringBuffer.append(TEXT_315);
d1648 1
a1648 1
    stringBuffer.append(TEXT_316);
d1650 1
a1650 1
    stringBuffer.append(TEXT_317);
d1652 1
a1652 1
    stringBuffer.append(TEXT_318);
d1654 1
a1654 1
    stringBuffer.append(TEXT_319);
d1656 1
a1656 1
    stringBuffer.append(TEXT_320);
d1658 1
a1658 1
    stringBuffer.append(TEXT_321);
d1660 1
a1660 3
    stringBuffer.append(TEXT_322);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_323);
a1661 6
    stringBuffer.append(TEXT_324);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
    stringBuffer.append(TEXT_325);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
    stringBuffer.append(TEXT_326);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1665 1
a1665 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1667 1
a1667 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1669 1
a1669 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1671 1
a1671 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1673 1
a1673 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1677 1
a1677 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1679 1
a1679 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1681 1
a1681 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1683 1
a1683 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1685 1
a1685 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
d1687 1
a1687 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1689 1
a1689 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1691 1
a1691 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1693 1
a1693 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1695 1
a1695 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d1697 1
a1697 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d1699 1
a1699 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1701 1
a1701 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionAdapter"));
d1703 1
a1703 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d1705 1
a1705 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d1709 1
a1709 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
d1711 1
a1711 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
d1713 1
a1713 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyEvent"));
d1715 1
a1715 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1717 1
a1717 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d1719 1
a1719 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1721 1
a1721 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1727 1
a1727 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d1729 1
a1729 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d1735 1
a1735 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d1737 1
a1737 1
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
d1739 1
a1739 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d1741 1
a1741 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1743 1
a1743 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1745 1
a1745 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1747 1
a1747 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1753 1
a1753 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d1757 8
d1768 1
a1768 1
    stringBuffer.append(TEXT_375);
d1770 1
a1770 1
    stringBuffer.append(TEXT_376);
d1772 1
a1772 1
    stringBuffer.append(TEXT_377);
d1776 1
a1776 1
    stringBuffer.append(TEXT_378);
d1778 1
a1778 1
    stringBuffer.append(TEXT_379);
d1782 1
a1782 1
    stringBuffer.append(TEXT_380);
d1784 1
a1784 1
    stringBuffer.append(TEXT_381);
d1786 1
a1786 1
    stringBuffer.append(TEXT_382);
d1788 1
a1788 1
    stringBuffer.append(TEXT_383);
d1790 1
a1790 1
    stringBuffer.append(TEXT_384);
d1792 1
a1792 1
    stringBuffer.append(TEXT_385);
d1794 1
a1794 1
    stringBuffer.append(TEXT_386);
d1796 1
a1796 1
    stringBuffer.append(TEXT_387);
d1798 1
a1798 1
    stringBuffer.append(TEXT_388);
d1800 1
a1800 1
    stringBuffer.append(TEXT_389);
d1802 1
a1802 1
    stringBuffer.append(TEXT_390);
d1804 1
a1804 1
    stringBuffer.append(TEXT_391);
d1806 1
a1806 1
    stringBuffer.append(TEXT_392);
d1808 1
a1808 1
    stringBuffer.append(TEXT_393);
d1810 1
a1810 1
    stringBuffer.append(TEXT_394);
d1812 1
a1812 1
    stringBuffer.append(TEXT_395);
d1814 1
a1814 1
    stringBuffer.append(TEXT_396);
d1816 1
a1816 1
    stringBuffer.append(TEXT_397);
d1818 1
a1818 1
    stringBuffer.append(TEXT_398);
d1820 1
a1820 1
    stringBuffer.append(TEXT_399);
d1822 1
a1822 1
    stringBuffer.append(TEXT_400);
d1824 1
a1824 1
    stringBuffer.append(TEXT_401);
d1828 1
a1828 1
    stringBuffer.append(TEXT_402);
d1831 1
a1831 1
    stringBuffer.append(TEXT_403);
d1834 1
a1834 1
    stringBuffer.append(TEXT_404);
d1836 1
a1836 1
    stringBuffer.append(TEXT_405);
d1838 1
a1838 1
    stringBuffer.append(TEXT_406);
d1840 1
a1840 1
    stringBuffer.append(TEXT_407);
d1842 1
a1842 1
    stringBuffer.append(TEXT_408);
d1844 1
a1844 1
    stringBuffer.append(TEXT_409);
d1846 1
a1846 1
    stringBuffer.append(TEXT_410);
d1848 1
a1848 1
    stringBuffer.append(TEXT_411);
d1850 1
a1850 1
    stringBuffer.append(TEXT_412);
d1852 1
a1852 1
    stringBuffer.append(TEXT_413);
d1854 1
a1854 1
    stringBuffer.append(TEXT_414);
d1856 1
a1856 1
    stringBuffer.append(TEXT_415);
d1858 1
a1858 1
    stringBuffer.append(TEXT_416);
d1860 1
a1860 1
    stringBuffer.append(TEXT_417);
d1862 1
a1862 1
    stringBuffer.append(TEXT_418);
d1864 1
a1864 1
    stringBuffer.append(TEXT_419);
d1868 1
a1868 1
    stringBuffer.append(TEXT_420);
d1870 1
a1870 1
    stringBuffer.append(TEXT_421);
d1872 1
a1872 1
    stringBuffer.append(TEXT_422);
d1874 1
a1874 1
    stringBuffer.append(TEXT_423);
d1878 1
a1878 1
    stringBuffer.append(TEXT_424);
d1880 1
a1880 1
    stringBuffer.append(TEXT_425);
d1884 1
a1884 1
    stringBuffer.append(TEXT_426);
d1886 1
a1886 1
    stringBuffer.append(TEXT_427);
d1888 1
a1888 1
    stringBuffer.append(TEXT_428);
d1892 1
a1892 1
    stringBuffer.append(TEXT_429);
d1894 1
a1894 1
    stringBuffer.append(TEXT_430);
d1896 1
a1896 1
    stringBuffer.append(TEXT_431);
d1898 1
a1898 1
    stringBuffer.append(TEXT_432);
d1900 1
a1900 1
    stringBuffer.append(TEXT_433);
d1902 1
a1902 1
    stringBuffer.append(TEXT_434);
d1904 1
a1904 1
    stringBuffer.append(TEXT_435);
d1906 1
a1906 1
    stringBuffer.append(TEXT_436);
d1908 1
a1908 1
    stringBuffer.append(TEXT_437);
d1910 1
a1910 1
    stringBuffer.append(TEXT_438);
d1912 1
a1912 1
    stringBuffer.append(TEXT_439);
d1914 1
a1914 1
    stringBuffer.append(TEXT_440);
d1916 1
a1916 1
    stringBuffer.append(TEXT_441);
d1918 1
a1918 1
    stringBuffer.append(TEXT_442);
@


1.3
log
@Correct icons in wizards and palette: generate images, recognize relative paths, fix incorrect paths in wizard code;
Make it possible to nest palette groups
@
text
@d1231 1
a1231 1
			GenFeature metaFeature = ((FeatureModelFacet) next.getModelFacet()).getMetaFeature();
d1355 1
a1355 1
	GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
@


1.2
log
@[158023] bblajer - Diagram Layout
@
text
@d71 54
a124 54
  protected final String TEXT_52 = NL + "\t   \tmyDiagramRoot = diagramRoot;" + NL + "\t   \tmyEditingDomain = editingDomain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {";
  protected final String TEXT_53 = NL + "\t\tif (mySelectedModelFileURI == null) {" + NL + "\t\t\taddPage(new SourceURISelectorPage());" + NL + "\t\t}" + NL + "\t\tmyDiagramURISelectorPage = new DiagramURISelectorPage();" + NL + "\t\taddPage(myDiagramURISelectorPage);";
  protected final String TEXT_54 = NL + "\t\tmyFileCreationPage = new ";
  protected final String TEXT_55 = "(\"Initialize new ";
  protected final String TEXT_56 = " diagram file\", mySelection) {" + NL + "\t\t\tpublic void createControl(";
  protected final String TEXT_57 = " parent) {" + NL + "\t\t\t\tsuper.createControl(parent);" + NL + "\t\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_58 = " parentContainer = mySelectedModelFile.getParent();" + NL + "\t\t\t\tString originalFileName = mySelectedModelFile.getProjectRelativePath().removeFileExtension().lastSegment();" + NL + "\t\t\t\tString fileExtension = \".";
  protected final String TEXT_59 = "\"; //$NON-NLS-1$" + NL + "\t\t\t\tString fileName = originalFileName + fileExtension;" + NL + "\t\t\t\tfor (int i = 1; i > 0 && parentContainer.getFile(new ";
  protected final String TEXT_60 = "(fileName)).exists(); i++) {" + NL + "\t\t\t\t\tfileName = originalFileName + i + fileExtension;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (parentContainer.getFile(new ";
  protected final String TEXT_61 = "(fileName)).exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFileName(fileName);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\tmyFileCreationPage.setDescription(\"Create new diagram based on ";
  protected final String TEXT_62 = " model content\");" + NL + "\t\taddPage(myFileCreationPage);";
  protected final String TEXT_63 = NL + "\t\taddPage(new RootElementSelectorPage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\t";
  protected final String TEXT_64 = " resourceSet = myEditingDomain.getResourceSet();";
  protected final String TEXT_65 = NL + "\t\t";
  protected final String TEXT_66 = " diagramFileURI = myDiagramURISelectorPage.getNewFileURI();" + NL + "\t\tfinal ";
  protected final String TEXT_67 = " diagramResource = resourceSet.createResource(diagramFileURI);";
  protected final String TEXT_68 = NL + "\t\t";
  protected final String TEXT_69 = " diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new ";
  protected final String TEXT_70 = "()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_71 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_72 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "" + NL + "\t\tfinal ";
  protected final String TEXT_73 = " diagramResource = resourceSet.createResource(";
  protected final String TEXT_74 = ".createPlatformResourceURI(diagramFile.getFullPath().toString()));";
  protected final String TEXT_75 = NL + "\t\t";
  protected final String TEXT_76 = " command = new ";
  protected final String TEXT_77 = "(\"Initializing diagram contents\") { //$NON-NLS-1$" + NL + "\t\t\tprivate ";
  protected final String TEXT_78 = " myCreatedDiagram;" + NL + "" + NL + "\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\tint diagramVID = ";
  protected final String TEXT_79 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\t\tif (diagramVID != ";
  protected final String TEXT_80 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tpublic void execute() {" + NL + "\t\t\t\tmyCreatedDiagram = ";
  protected final String TEXT_81 = ".eINSTANCE.createDiagram();" + NL + "\t\t\t\tmyCreatedDiagram.setElement(myDiagramRoot);" + NL + "\t\t\t\t";
  protected final String TEXT_82 = ".INSTANCE.decorateView(myCreatedDiagram);" + NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram);";
  protected final String TEXT_83 = NL + "\t\t\t\tdiagramResource.getContents().add(myCreatedDiagram.getElement());";
  protected final String TEXT_84 = NL + "\t\t\t\tinitDiagramContents(myCreatedDiagram);" + NL + "\t\t\t}" + NL + "\t\t\tpublic void redo() {" + NL + "\t\t\t\texecute();" + NL + "\t\t\t}" + NL + "\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tnew ";
  protected final String TEXT_85 = "(myEditingDomain, command).execute();" + NL + "\t\t\tdiagramResource.save(";
  protected final String TEXT_86 = ".EMPTY_MAP);";
  protected final String TEXT_87 = NL + "\t\t\t";
  protected final String TEXT_88 = " editor = ";
  protected final String TEXT_89 = ".openEditor(diagramResource.getURI());";
  protected final String TEXT_90 = NL + "\t\t\t";
  protected final String TEXT_91 = " editor = ";
  protected final String TEXT_92 = ".openEditor(myWorkbenchPage, diagramFile);";
  protected final String TEXT_93 = NL + "\t\t\tif (editor != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_94 = " layouter = (";
  protected final String TEXT_95 = ") editor.getAdapter(";
  protected final String TEXT_96 = ".class);" + NL + "\t\t\t\tif (layouter != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_97 = " graphicalViewer = (";
  protected final String TEXT_98 = ") editor.getAdapter(";
  protected final String TEXT_99 = ".class);" + NL + "\t\t\t\t\tif (graphicalViewer != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_100 = " layoutCommand = layouter.layout((";
  protected final String TEXT_101 = ") graphicalViewer.getContents());" + NL + "\t\t\t\t\t\tif (layoutCommand != null && layoutCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tnew ";
  protected final String TEXT_102 = "(myEditingDomain, layoutCommand).execute();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} catch (";
  protected final String TEXT_103 = " ex) {";
  protected final String TEXT_104 = NL + "\t\t\t";
  protected final String TEXT_105 = ".getInstance().logError(\"Save operation failed for: \" + diagramFileURI.toString(), ex); //$NON-NLS-1$";
d126 163
a288 163
  protected final String TEXT_107 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_108 = " ex) {" + NL + "\t\t\t";
  protected final String TEXT_109 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$";
  protected final String TEXT_110 = NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_111 = NL;
  protected final String TEXT_112 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void initDiagramContents(";
  protected final String TEXT_113 = " diagram) {" + NL + "\tcreate";
  protected final String TEXT_114 = "Children(diagram);";
  protected final String TEXT_115 = NL + "\tmyViewService = new ";
  protected final String TEXT_116 = "(diagram);" + NL + "\tcreate";
  protected final String TEXT_117 = "ChildLinks(diagram);";
  protected final String TEXT_118 = NL + "}" + NL;
  protected final String TEXT_119 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_120 = "Children(";
  protected final String TEXT_121 = " viewObject) {";
  protected final String TEXT_122 = NL + "\tfor(";
  protected final String TEXT_123 = " it = viewObject.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_124 = " next = (";
  protected final String TEXT_125 = ") it.next();" + NL + "\t\tint visualID = ";
  protected final String TEXT_126 = ".getVisualID(next);" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_127 = NL + "\t\tcase ";
  protected final String TEXT_128 = ".VISUAL_ID:" + NL + "\t\t\tcreate";
  protected final String TEXT_129 = "Children(next);" + NL + "\t\t\tbreak;";
  protected final String TEXT_130 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_131 = NL + "\t";
  protected final String TEXT_132 = " semanticChildren = get";
  protected final String TEXT_133 = "SemanticChildNodes(viewObject);" + NL + "\tfor(";
  protected final String TEXT_134 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_135 = " nextDescriptor = (";
  protected final String TEXT_136 = ") it.next();" + NL + "\t\t";
  protected final String TEXT_137 = " createCommand = getCreate";
  protected final String TEXT_138 = "NotationalChildNodeCommand(viewObject, nextDescriptor);" + NL + "\t\tif (createCommand != null && createCommand.canExecute()) {" + NL + "\t\t\tcreateCommand.execute();";
  protected final String TEXT_139 = NL + "\t\t\t";
  protected final String TEXT_140 = " nextChild = createCommand.getCreatedView();" + NL + "\t\t\tint childVisualID = nextDescriptor.getVisualID();" + NL + "\t\t\tswitch (childVisualID) {";
  protected final String TEXT_141 = NL + "\t\t\tcase ";
  protected final String TEXT_142 = ".VISUAL_ID:" + NL + "\t\t\t\tcreate";
  protected final String TEXT_143 = "Children(nextChild);" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_144 = NL + "\t\t\t}";
  protected final String TEXT_145 = NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_146 = " get";
  protected final String TEXT_147 = "SemanticChildNodes(";
  protected final String TEXT_148 = " parentView) {";
  protected final String TEXT_149 = NL;
  protected final String TEXT_150 = NL + "\treturn ";
  protected final String TEXT_151 = ".EMPTY_LIST;";
  protected final String TEXT_152 = NL + "\t";
  protected final String TEXT_153 = " result = new ";
  protected final String TEXT_154 = "();";
  protected final String TEXT_155 = NL + "\t";
  protected final String TEXT_156 = " viewObject = ";
  protected final String TEXT_157 = ";" + NL + "\t";
  protected final String TEXT_158 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_159 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_160 = NL + "\tfor(";
  protected final String TEXT_161 = " it = ";
  protected final String TEXT_162 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_163 = ") it.next();";
  protected final String TEXT_164 = NL + "\tnextValue = (";
  protected final String TEXT_165 = ")";
  protected final String TEXT_166 = ";";
  protected final String TEXT_167 = NL + "\tnodeVID = ";
  protected final String TEXT_168 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_169 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_170 = NL + "\tcase ";
  protected final String TEXT_171 = ".VISUAL_ID: {";
  protected final String TEXT_172 = NL + "\tif (";
  protected final String TEXT_173 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_174 = NL + "\t\tresult.add(new ";
  protected final String TEXT_175 = "(nextValue, nodeVID));";
  protected final String TEXT_176 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_177 = NL + "\t\t}";
  protected final String TEXT_178 = NL + "\t}";
  protected final String TEXT_179 = NL + "\t}";
  protected final String TEXT_180 = NL + "\treturn result;";
  protected final String TEXT_181 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_182 = " getCreate";
  protected final String TEXT_183 = "NotationalChildNodeCommand(";
  protected final String TEXT_184 = " parentView, ";
  protected final String TEXT_185 = " descriptor) {";
  protected final String TEXT_186 = NL;
  protected final String TEXT_187 = "\t\t\t";
  protected final String TEXT_188 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_189 = NL + "\t\t\tcase ";
  protected final String TEXT_190 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_191 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_192 = "(";
  protected final String TEXT_193 = ", domainElement, ";
  protected final String TEXT_194 = "new ";
  protected final String TEXT_195 = "(0, 0, ";
  protected final String TEXT_196 = ", ";
  protected final String TEXT_197 = ")";
  protected final String TEXT_198 = NL + "null";
  protected final String TEXT_199 = ", ";
  protected final String TEXT_200 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_201 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_202 = NL + "}";
  protected final String TEXT_203 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_204 = "ChildLinks(";
  protected final String TEXT_205 = " viewObject) {";
  protected final String TEXT_206 = NL + "\t";
  protected final String TEXT_207 = " semanticChildLinks = get";
  protected final String TEXT_208 = "SemanticChildLinks(viewObject);" + NL + "\tfor(";
  protected final String TEXT_209 = " it = semanticChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_210 = " nextDescriptor = (";
  protected final String TEXT_211 = ") it.next();" + NL + "\t\t";
  protected final String TEXT_212 = " createCommand = getCreate";
  protected final String TEXT_213 = "NotationalChildLinkCommand(viewObject, nextDescriptor);" + NL + "\t\tif (createCommand != null && createCommand.canExecute()) {" + NL + "\t\t\tcreateCommand.execute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_214 = NL + "\tfor(";
  protected final String TEXT_215 = " it = viewObject.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_216 = " next = (";
  protected final String TEXT_217 = ") it.next();" + NL + "\t\tint visualID = ";
  protected final String TEXT_218 = ".getVisualID(next);" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_219 = NL + "\t\tcase ";
  protected final String TEXT_220 = ".VISUAL_ID:" + NL + "\t\t\tcreate";
  protected final String TEXT_221 = "ChildLinks(next);" + NL + "\t\t\tbreak;";
  protected final String TEXT_222 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_223 = NL + "}" + NL;
  protected final String TEXT_224 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_225 = " get";
  protected final String TEXT_226 = "SemanticChildLinks(";
  protected final String TEXT_227 = " parentView) {";
  protected final String TEXT_228 = NL;
  protected final String TEXT_229 = "\t";
  protected final String TEXT_230 = " result = new ";
  protected final String TEXT_231 = "();";
  protected final String TEXT_232 = NL + "\t";
  protected final String TEXT_233 = " modelObject = ";
  protected final String TEXT_234 = ".getElement();" + NL + "\t";
  protected final String TEXT_235 = " nextValue;";
  protected final String TEXT_236 = NL + "\tint linkVID;";
  protected final String TEXT_237 = NL + "\tfor(";
  protected final String TEXT_238 = " it = ";
  protected final String TEXT_239 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_240 = ") it.next();";
  protected final String TEXT_241 = NL + "\tnextValue = (";
  protected final String TEXT_242 = ")";
  protected final String TEXT_243 = ";";
  protected final String TEXT_244 = NL + "\tlinkVID = ";
  protected final String TEXT_245 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_246 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_247 = NL + "\tcase ";
  protected final String TEXT_248 = ".VISUAL_ID: {";
  protected final String TEXT_249 = NL + "\tif (";
  protected final String TEXT_250 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_251 = NL + "\t\t";
  protected final String TEXT_252 = " source = (";
  protected final String TEXT_253 = ")";
  protected final String TEXT_254 = ";";
  protected final String TEXT_255 = NL + "\t\t";
  protected final String TEXT_256 = " source = ";
  protected final String TEXT_257 = ".getElement();";
  protected final String TEXT_258 = NL + "\t\t";
  protected final String TEXT_259 = " target = (";
  protected final String TEXT_260 = ")";
  protected final String TEXT_261 = ";";
  protected final String TEXT_262 = NL + "\t\t";
  protected final String TEXT_263 = " target = ";
  protected final String TEXT_264 = ".getElement();";
  protected final String TEXT_265 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_266 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_267 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_268 = NL + "\t}";
  protected final String TEXT_269 = NL + "\t}";
d290 172
a461 170
  protected final String TEXT_271 = NL + "\tfor(";
  protected final String TEXT_272 = " it = ";
  protected final String TEXT_273 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_274 = ") it.next();";
  protected final String TEXT_275 = NL + "\tnextValue = (";
  protected final String TEXT_276 = ")";
  protected final String TEXT_277 = ";";
  protected final String TEXT_278 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_279 = NL + "\t\tresult.add(new ";
  protected final String TEXT_280 = "(modelObject, nextValue, null, ";
  protected final String TEXT_281 = ".VISUAL_ID));";
  protected final String TEXT_282 = NL + "\t}";
  protected final String TEXT_283 = NL + "\t}";
  protected final String TEXT_284 = NL + "\treturn result;";
  protected final String TEXT_285 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_286 = " getCreate";
  protected final String TEXT_287 = "NotationalChildLinkCommand(";
  protected final String TEXT_288 = " parentView, ";
  protected final String TEXT_289 = " linkDescriptor) {";
  protected final String TEXT_290 = NL;
  protected final String TEXT_291 = "\t\t\t";
  protected final String TEXT_292 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_293 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_294 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_295 = NL + "\t\t\tcase ";
  protected final String TEXT_296 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_297 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_298 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_299 = NL + "\t\t\tcase ";
  protected final String TEXT_300 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_301 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_302 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_303 = "(";
  protected final String TEXT_304 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_305 = NL + "}";
  protected final String TEXT_306 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_307 = " myViewService;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_308 = " getViewService() {" + NL + "\treturn myViewService;" + NL + "}";
  protected final String TEXT_309 = NL;
  protected final String TEXT_310 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate abstract class URISelectorPage extends ";
  protected final String TEXT_311 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_312 = " fileField;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected URISelectorPage(String name) {" + NL + "\t\t\tsuper(name);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_313 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_314 = " composite = new ";
  protected final String TEXT_315 = "(parent, ";
  protected final String TEXT_316 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_317 = " layout = new ";
  protected final String TEXT_318 = "();" + NL + "\t\t\t\tlayout.numColumns = 1;" + NL + "\t\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_319 = " data = new ";
  protected final String TEXT_320 = "();" + NL + "\t\t\t\tdata.verticalAlignment = ";
  protected final String TEXT_321 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_322 = ".FILL;" + NL + "\t\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_323 = " resourceURILabel = new ";
  protected final String TEXT_324 = "(composite, ";
  protected final String TEXT_325 = ".LEFT);" + NL + "\t\t\t{" + NL + "\t\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_326 = " data = new ";
  protected final String TEXT_327 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_328 = ".FILL;" + NL + "\t\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_329 = " fileComposite = new ";
  protected final String TEXT_330 = "(composite, ";
  protected final String TEXT_331 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_332 = " data = new ";
  protected final String TEXT_333 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_334 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_335 = " layout = new ";
  protected final String TEXT_336 = "();" + NL + "\t\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\t\tlayout.numColumns = 2;" + NL + "\t\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField = new ";
  protected final String TEXT_337 = "(fileComposite, ";
  protected final String TEXT_338 = ".BORDER);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_339 = " data = new ";
  protected final String TEXT_340 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_341 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\t\tfileField.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField.addModifyListener(validator);" + NL + "\t\t\t";
  protected final String TEXT_342 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_343 = "(fileComposite," + NL + "\t\t\t\t\t";
  protected final String TEXT_344 = ".PUSH);" + NL + "\t\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "" + NL + "\t\t\tresourceURIBrowseFileSystemButton" + NL + "\t\t\t\t\t.addSelectionListener(new ";
  protected final String TEXT_345 = "() {" + NL + "\t\t\t\t\t\tpublic void widgetSelected(";
  protected final String TEXT_346 = " event) {" + NL + "\t\t\t\t\t\t\tString fileExtension = getFileExtension();" + NL + "\t\t\t\t\t\t\tString filePath = ";
  protected final String TEXT_347 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_348 = ".OPEN);" + NL + "\t\t\t\t\t\t\tif (filePath != null) {" + NL + "\t\t\t\t\t\t\t\tif (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t\t\tfilePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\tfileField.setText(filePath);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\tsetControl(composite);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_349 = " validator = new ";
  protected final String TEXT_350 = "() {" + NL + "\t\t\tpublic void modifyText(";
  protected final String TEXT_351 = " e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected final void setFile(";
  protected final String TEXT_352 = " file) {" + NL + "\t\t\tfileField.setText(file.getPath());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\t";
  protected final String TEXT_353 = " fileURI = getFileURI();" + NL + "\t\t\tif (fileURI == null || fileURI.isEmpty()) {" + NL + "\t\t\t\tsetErrorMessage(null);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (fileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_354 = " file = new ";
  protected final String TEXT_355 = "(fileURI.toFileString());" + NL + "\t\t\t\tString fileProblem = validateFile(file);" + NL + "\t\t\t\tif (fileProblem != null) {" + NL + "\t\t\t\t\tsetErrorMessage(fileProblem);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tString requiredExt = getFileExtension();" + NL + "\t\t\tString enteredExt = fileURI.fileExtension();" + NL + "\t\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Checks the given file and returns the error message if there are problems or <code>null</code> if the file is OK." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String validateFile(";
  protected final String TEXT_356 = " file);" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String getFileExtension();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_357 = " getFileURI() {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_358 = ".createFileURI(fileField.getText());" + NL + "\t\t\t} catch (Exception exception) {" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class SourceURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic SourceURISelectorPage() {" + NL + "\t\t\tsuper(\"Select source file\");" + NL + "\t\t\tsetTitle(\"Source file\");" + NL + "\t\t\tsetDescription(\"Select file with semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_359 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmySelectedModelFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_360 = " file) {" + NL + "\t\t\tif (!file.exists()) {" + NL + "\t\t\t\treturn \"Source file does not exist\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class DiagramURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_361 = " myNewFileURI;" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DiagramURISelectorPage() {" + NL + "\t\t\tsuper(\"Initialize new ";
  protected final String TEXT_362 = " diagram file\");" + NL + "\t\t\tsetTitle(\"Diagram file\");" + NL + "\t\t\tsetDescription(\"Create new diagram based on ";
  protected final String TEXT_363 = " model content\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_364 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t\tif (visible && mySelectedModelFileURI != null && getFileURI() == null && mySelectedModelFileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_365 = " originalFile = new ";
  protected final String TEXT_366 = "(mySelectedModelFileURI.toFileString());" + NL + "\t\t\t\tString originalFileName = mySelectedModelFileURI.trimFileExtension().lastSegment();" + NL + "\t\t\t\t";
  protected final String TEXT_367 = " parentFile = originalFile.getParentFile();" + NL + "\t\t\t\t";
  protected final String TEXT_368 = " newFile = new ";
  protected final String TEXT_369 = "(parentFile, originalFileName + getFileExtension());" + NL + "\t\t\t\tfor(int i = 1; i > 0 && newFile.exists(); i++) {" + NL + "\t\t\t\t\tnewFile = new ";
  protected final String TEXT_370 = "(parentFile, originalFileName + i + getFileExtension());" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (newFile.exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFile(newFile);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tmyNewFileURI = null;" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmyNewFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_371 = " getNewFileURI() {" + NL + "\t\t\treturn myNewFileURI;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_372 = " file) {" + NL + "\t\t\tif (file.exists()) {" + NL + "\t\t\t\treturn \"Diagram file already exists\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_373 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_374 = " implements ";
  protected final String TEXT_375 = " {";
  protected final String TEXT_376 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_377 = " myTreeViewer;";
  protected final String TEXT_378 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_379 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_380 = " topLevel = new ";
  protected final String TEXT_381 = "(parent, ";
  protected final String TEXT_382 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_383 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_384 = "(";
  protected final String TEXT_385 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_386 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_387 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_388 = " panel = new ";
  protected final String TEXT_389 = "(parent, ";
  protected final String TEXT_390 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_391 = "(";
  protected final String TEXT_392 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_393 = " layout = new ";
  protected final String TEXT_394 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_395 = " label = new ";
  protected final String TEXT_396 = "(panel, ";
  protected final String TEXT_397 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_398 = "(";
  protected final String TEXT_399 = ".HORIZONTAL_ALIGN_BEGINNING));";
  protected final String TEXT_400 = NL + "\t\t\t";
  protected final String TEXT_401 = " ";
  protected final String TEXT_402 = " = new ";
  protected final String TEXT_403 = "(panel, ";
  protected final String TEXT_404 = ".SINGLE | ";
  protected final String TEXT_405 = ".H_SCROLL | ";
  protected final String TEXT_406 = ".V_SCROLL | ";
  protected final String TEXT_407 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_408 = " layoutData = new ";
  protected final String TEXT_409 = "(";
  protected final String TEXT_410 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\t";
  protected final String TEXT_411 = ".getTree().setLayoutData(layoutData);" + NL + "\t\t\t";
  protected final String TEXT_412 = ".setContentProvider(new ";
  protected final String TEXT_413 = "(";
  protected final String TEXT_414 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\t";
  protected final String TEXT_415 = ".setLabelProvider(new ";
  protected final String TEXT_416 = "(";
  protected final String TEXT_417 = ".getInstance().getItemProvidersAdapterFactory()));";
  protected final String TEXT_418 = NL + "\t\t\t";
  protected final String TEXT_419 = ".setInput(myDiagramRoot.eResource());" + NL + "\t\t\t";
  protected final String TEXT_420 = ".setSelection(new ";
  protected final String TEXT_421 = "(myDiagramRoot));";
  protected final String TEXT_422 = NL + "\t\t\t";
  protected final String TEXT_423 = ".addSelectionChangedListener(this);" + NL + "\t\t}" + NL;
  protected final String TEXT_424 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tif (visible) {" + NL + "\t\t\t\t";
  protected final String TEXT_425 = ".setInput(myEditingDomain.getResourceSet().getResource(mySelectedModelFileURI, true));" + NL + "\t\t\t\tif (myDiagramRoot != null) {" + NL + "\t\t\t\t\tmyTreeViewer.setSelection(new ";
  protected final String TEXT_426 = "(myDiagramRoot));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t}" + NL;
  protected final String TEXT_427 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_428 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_429 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_430 = " selection = (";
  protected final String TEXT_431 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_432 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_433 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_434 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_435 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_436 = ") {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (";
  protected final String TEXT_437 = ") selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ";
  protected final String TEXT_438 = ".VISUAL_ID == ";
  protected final String TEXT_439 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_440 = NL;
d651 4
d658 1
a658 1
    stringBuffer.append(TEXT_53);
d662 1
a662 1
    stringBuffer.append(TEXT_54);
d664 1
a664 1
    stringBuffer.append(TEXT_55);
d666 1
a666 1
    stringBuffer.append(TEXT_56);
d668 1
a668 1
    stringBuffer.append(TEXT_57);
d670 1
a670 1
    stringBuffer.append(TEXT_58);
d672 1
a672 1
    stringBuffer.append(TEXT_59);
d674 1
a674 1
    stringBuffer.append(TEXT_60);
d676 1
a676 1
    stringBuffer.append(TEXT_61);
d678 1
a678 1
    stringBuffer.append(TEXT_62);
d682 1
a682 1
    stringBuffer.append(TEXT_63);
d684 1
a684 1
    stringBuffer.append(TEXT_64);
d688 1
a688 1
    stringBuffer.append(TEXT_65);
d690 1
a690 1
    stringBuffer.append(TEXT_66);
d692 1
a692 1
    stringBuffer.append(TEXT_67);
d696 1
a696 1
    stringBuffer.append(TEXT_68);
d698 1
a698 1
    stringBuffer.append(TEXT_69);
d700 1
a700 1
    stringBuffer.append(TEXT_70);
d702 1
a702 1
    stringBuffer.append(TEXT_71);
d704 1
a704 1
    stringBuffer.append(TEXT_72);
d706 1
a706 1
    stringBuffer.append(TEXT_73);
d708 1
a708 1
    stringBuffer.append(TEXT_74);
d712 1
a712 1
    stringBuffer.append(TEXT_75);
d714 1
a714 1
    stringBuffer.append(TEXT_76);
d716 1
a716 1
    stringBuffer.append(TEXT_77);
d718 1
a718 1
    stringBuffer.append(TEXT_78);
d720 1
a720 1
    stringBuffer.append(TEXT_79);
d722 1
a722 1
    stringBuffer.append(TEXT_80);
d724 1
a724 1
    stringBuffer.append(TEXT_81);
d726 1
a726 1
    stringBuffer.append(TEXT_82);
d728 1
a728 1
    stringBuffer.append(TEXT_83);
d732 1
a732 1
    stringBuffer.append(TEXT_84);
d734 1
a734 1
    stringBuffer.append(TEXT_85);
d736 1
a736 1
    stringBuffer.append(TEXT_86);
d740 1
a740 1
    stringBuffer.append(TEXT_87);
d742 1
a742 1
    stringBuffer.append(TEXT_88);
d744 1
a744 1
    stringBuffer.append(TEXT_89);
d748 1
a748 1
    stringBuffer.append(TEXT_90);
d750 1
a750 1
    stringBuffer.append(TEXT_91);
d752 1
a752 1
    stringBuffer.append(TEXT_92);
a755 4
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IDiagramLayouter"));
d759 1
a759 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
d761 1
a761 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalViewer"));
d765 4
d770 1
a770 1
    stringBuffer.append(TEXT_100);
d772 1
a772 1
    stringBuffer.append(TEXT_101);
d774 1
a774 1
    stringBuffer.append(TEXT_102);
d776 1
a776 1
    stringBuffer.append(TEXT_103);
d780 1
a780 1
    stringBuffer.append(TEXT_104);
d782 1
a782 1
    stringBuffer.append(TEXT_105);
d786 1
a786 1
    stringBuffer.append(TEXT_106);
d788 1
a788 1
    stringBuffer.append(TEXT_107);
d790 1
a790 1
    stringBuffer.append(TEXT_108);
d792 1
a792 1
    stringBuffer.append(TEXT_109);
a795 2
    stringBuffer.append(TEXT_110);
    stringBuffer.append(TEXT_111);
d797 2
d800 1
a800 1
    stringBuffer.append(TEXT_113);
d802 1
a802 1
    stringBuffer.append(TEXT_114);
d806 1
a806 1
    stringBuffer.append(TEXT_115);
d808 1
a808 1
    stringBuffer.append(TEXT_116);
d810 1
a810 1
    stringBuffer.append(TEXT_117);
d814 1
a814 1
    stringBuffer.append(TEXT_118);
d846 1
a846 1
    stringBuffer.append(TEXT_119);
d848 1
a848 1
    stringBuffer.append(TEXT_120);
d850 1
a850 1
    stringBuffer.append(TEXT_121);
d863 1
a863 1
    stringBuffer.append(TEXT_122);
d865 1
a865 1
    stringBuffer.append(TEXT_123);
d867 1
a867 1
    stringBuffer.append(TEXT_124);
d869 1
a869 1
    stringBuffer.append(TEXT_125);
d871 1
a871 1
    stringBuffer.append(TEXT_126);
d879 1
a879 1
    stringBuffer.append(TEXT_127);
d881 1
a881 1
    stringBuffer.append(TEXT_128);
d883 1
a883 1
    stringBuffer.append(TEXT_129);
d887 1
a887 1
    stringBuffer.append(TEXT_130);
d892 1
a892 1
    stringBuffer.append(TEXT_131);
d894 1
a894 1
    stringBuffer.append(TEXT_132);
d896 1
a896 1
    stringBuffer.append(TEXT_133);
d898 1
a898 1
    stringBuffer.append(TEXT_134);
d900 1
a900 1
    stringBuffer.append(TEXT_135);
d902 1
a902 1
    stringBuffer.append(TEXT_136);
d904 1
a904 1
    stringBuffer.append(TEXT_137);
d906 1
a906 1
    stringBuffer.append(TEXT_138);
d918 1
a918 1
    stringBuffer.append(TEXT_139);
d920 1
a920 1
    stringBuffer.append(TEXT_140);
d926 1
a926 1
    stringBuffer.append(TEXT_141);
d928 1
a928 1
    stringBuffer.append(TEXT_142);
d930 1
a930 1
    stringBuffer.append(TEXT_143);
d935 1
a935 1
    stringBuffer.append(TEXT_144);
d939 1
a939 1
    stringBuffer.append(TEXT_145);
d941 1
a941 1
    stringBuffer.append(TEXT_146);
d943 1
a943 1
    stringBuffer.append(TEXT_147);
d945 1
a945 1
    stringBuffer.append(TEXT_148);
d951 1
a951 1
    stringBuffer.append(TEXT_149);
d955 1
a955 1
    stringBuffer.append(TEXT_150);
d957 1
a957 1
    stringBuffer.append(TEXT_151);
d961 1
a961 1
    stringBuffer.append(TEXT_152);
d963 1
a963 1
    stringBuffer.append(TEXT_153);
d965 1
a965 1
    stringBuffer.append(TEXT_154);
d983 1
a983 1
    stringBuffer.append(TEXT_155);
d985 1
a985 1
    stringBuffer.append(TEXT_156);
d987 1
a987 1
    stringBuffer.append(TEXT_157);
d989 1
a989 1
    stringBuffer.append(TEXT_158);
d991 1
a991 1
    stringBuffer.append(TEXT_159);
d1000 1
a1000 1
    stringBuffer.append(TEXT_160);
d1002 1
a1002 1
    stringBuffer.append(TEXT_161);
d1004 1
a1004 1
    stringBuffer.append(TEXT_162);
d1006 1
a1006 1
    stringBuffer.append(TEXT_163);
d1010 1
a1010 1
    stringBuffer.append(TEXT_164);
d1012 1
a1012 1
    stringBuffer.append(TEXT_165);
d1014 1
a1014 1
    stringBuffer.append(TEXT_166);
d1018 1
a1018 1
    stringBuffer.append(TEXT_167);
d1020 1
a1020 1
    stringBuffer.append(TEXT_168);
d1025 1
a1025 1
    stringBuffer.append(TEXT_169);
d1032 1
a1032 1
    stringBuffer.append(TEXT_170);
d1034 1
a1034 1
    stringBuffer.append(TEXT_171);
d1038 1
a1038 1
    stringBuffer.append(TEXT_172);
d1040 1
a1040 1
    stringBuffer.append(TEXT_173);
d1044 1
a1044 1
    stringBuffer.append(TEXT_174);
d1046 1
a1046 1
    stringBuffer.append(TEXT_175);
d1050 1
a1050 1
    stringBuffer.append(TEXT_176);
d1054 1
a1054 1
    stringBuffer.append(TEXT_177);
d1060 1
a1060 1
    stringBuffer.append(TEXT_178);
d1065 1
a1065 1
    stringBuffer.append(TEXT_179);
d1070 1
a1070 1
    stringBuffer.append(TEXT_180);
d1077 1
a1077 1
    stringBuffer.append(TEXT_181);
d1079 1
a1079 1
    stringBuffer.append(TEXT_182);
d1081 1
a1081 1
    stringBuffer.append(TEXT_183);
d1083 1
a1083 1
    stringBuffer.append(TEXT_184);
d1085 1
a1085 1
    stringBuffer.append(TEXT_185);
d1101 2
a1102 2
    stringBuffer.append(TEXT_186);
    stringBuffer.append(TEXT_187);
d1104 1
a1104 1
    stringBuffer.append(TEXT_188);
d1114 1
a1114 1
    stringBuffer.append(TEXT_189);
d1116 1
a1116 1
    stringBuffer.append(TEXT_190);
d1118 1
a1118 1
    stringBuffer.append(TEXT_191);
d1120 1
a1120 1
    stringBuffer.append(TEXT_192);
d1122 1
a1122 1
    stringBuffer.append(TEXT_193);
d1133 1
a1133 1
    stringBuffer.append(TEXT_194);
d1135 1
a1135 1
    stringBuffer.append(TEXT_195);
d1137 1
a1137 1
    stringBuffer.append(TEXT_196);
d1139 1
a1139 1
    stringBuffer.append(TEXT_197);
d1143 1
a1143 1
    stringBuffer.append(TEXT_198);
d1147 1
a1147 1
    stringBuffer.append(TEXT_199);
d1149 1
a1149 1
    stringBuffer.append(TEXT_200);
d1153 1
a1153 1
    stringBuffer.append(TEXT_201);
d1157 1
a1157 1
    stringBuffer.append(TEXT_202);
d1250 1
a1250 1
    stringBuffer.append(TEXT_203);
d1252 1
a1252 1
    stringBuffer.append(TEXT_204);
d1254 1
a1254 1
    stringBuffer.append(TEXT_205);
d1258 1
a1258 1
    stringBuffer.append(TEXT_206);
d1260 1
a1260 1
    stringBuffer.append(TEXT_207);
d1262 1
a1262 1
    stringBuffer.append(TEXT_208);
d1264 1
a1264 1
    stringBuffer.append(TEXT_209);
d1266 1
a1266 1
    stringBuffer.append(TEXT_210);
d1268 1
a1268 1
    stringBuffer.append(TEXT_211);
d1270 1
a1270 1
    stringBuffer.append(TEXT_212);
d1272 1
a1272 1
    stringBuffer.append(TEXT_213);
d1289 1
a1289 1
    stringBuffer.append(TEXT_214);
d1291 1
a1291 1
    stringBuffer.append(TEXT_215);
d1293 1
a1293 1
    stringBuffer.append(TEXT_216);
d1295 1
a1295 1
    stringBuffer.append(TEXT_217);
d1297 1
a1297 1
    stringBuffer.append(TEXT_218);
d1305 1
a1305 1
    stringBuffer.append(TEXT_219);
d1307 1
a1307 1
    stringBuffer.append(TEXT_220);
d1309 1
a1309 1
    stringBuffer.append(TEXT_221);
d1313 1
a1313 1
    stringBuffer.append(TEXT_222);
d1317 1
a1317 1
    stringBuffer.append(TEXT_223);
d1321 1
a1321 1
    stringBuffer.append(TEXT_224);
d1323 1
a1323 1
    stringBuffer.append(TEXT_225);
d1325 1
a1325 1
    stringBuffer.append(TEXT_226);
d1327 1
a1327 1
    stringBuffer.append(TEXT_227);
d1335 2
a1336 2
    stringBuffer.append(TEXT_228);
    stringBuffer.append(TEXT_229);
d1338 1
a1338 1
    stringBuffer.append(TEXT_230);
d1340 1
a1340 1
    stringBuffer.append(TEXT_231);
d1363 1
a1363 1
    stringBuffer.append(TEXT_232);
d1365 1
a1365 1
    stringBuffer.append(TEXT_233);
d1367 1
a1367 1
    stringBuffer.append(TEXT_234);
d1369 1
a1369 1
    stringBuffer.append(TEXT_235);
d1374 1
a1374 1
    stringBuffer.append(TEXT_236);
d1383 1
a1383 1
    stringBuffer.append(TEXT_237);
d1385 1
a1385 1
    stringBuffer.append(TEXT_238);
d1387 1
a1387 1
    stringBuffer.append(TEXT_239);
d1389 1
a1389 1
    stringBuffer.append(TEXT_240);
d1393 1
a1393 1
    stringBuffer.append(TEXT_241);
d1395 1
a1395 1
    stringBuffer.append(TEXT_242);
d1397 1
a1397 1
    stringBuffer.append(TEXT_243);
d1401 1
a1401 1
    stringBuffer.append(TEXT_244);
d1403 1
a1403 1
    stringBuffer.append(TEXT_245);
d1408 1
a1408 1
    stringBuffer.append(TEXT_246);
d1416 1
a1416 1
    stringBuffer.append(TEXT_247);
d1418 1
a1418 1
    stringBuffer.append(TEXT_248);
d1422 1
a1422 1
    stringBuffer.append(TEXT_249);
d1424 1
a1424 1
    stringBuffer.append(TEXT_250);
d1429 1
a1429 1
    stringBuffer.append(TEXT_251);
d1431 1
a1431 1
    stringBuffer.append(TEXT_252);
d1433 1
a1433 1
    stringBuffer.append(TEXT_253);
d1435 1
a1435 1
    stringBuffer.append(TEXT_254);
d1439 1
a1439 1
    stringBuffer.append(TEXT_255);
d1441 1
a1441 1
    stringBuffer.append(TEXT_256);
d1443 1
a1443 1
    stringBuffer.append(TEXT_257);
d1448 1
a1448 1
    stringBuffer.append(TEXT_258);
d1450 1
a1450 1
    stringBuffer.append(TEXT_259);
d1452 1
a1452 1
    stringBuffer.append(TEXT_260);
d1454 1
a1454 1
    stringBuffer.append(TEXT_261);
d1458 1
a1458 1
    stringBuffer.append(TEXT_262);
d1460 1
a1460 1
    stringBuffer.append(TEXT_263);
d1462 1
a1462 1
    stringBuffer.append(TEXT_264);
d1466 1
a1466 1
    stringBuffer.append(TEXT_265);
d1468 1
a1468 1
    stringBuffer.append(TEXT_266);
d1472 1
a1472 1
    stringBuffer.append(TEXT_267);
d1476 1
a1476 1
    stringBuffer.append(TEXT_268);
d1484 1
a1484 1
    stringBuffer.append(TEXT_269);
d1489 1
a1489 1
    stringBuffer.append(TEXT_270);
d1499 1
a1499 1
    stringBuffer.append(TEXT_271);
d1501 1
a1501 1
    stringBuffer.append(TEXT_272);
d1503 1
a1503 1
    stringBuffer.append(TEXT_273);
d1505 1
a1505 1
    stringBuffer.append(TEXT_274);
d1509 1
a1509 1
    stringBuffer.append(TEXT_275);
d1511 1
a1511 1
    stringBuffer.append(TEXT_276);
d1513 1
a1513 1
    stringBuffer.append(TEXT_277);
d1517 1
a1517 1
    stringBuffer.append(TEXT_278);
d1522 1
a1522 1
    stringBuffer.append(TEXT_279);
d1524 1
a1524 1
    stringBuffer.append(TEXT_280);
d1526 1
a1526 1
    stringBuffer.append(TEXT_281);
d1530 1
a1530 1
    stringBuffer.append(TEXT_282);
d1534 1
a1534 1
    stringBuffer.append(TEXT_283);
d1539 1
a1539 1
    stringBuffer.append(TEXT_284);
d1543 1
a1543 1
    stringBuffer.append(TEXT_285);
d1545 1
a1545 1
    stringBuffer.append(TEXT_286);
d1547 1
a1547 1
    stringBuffer.append(TEXT_287);
d1549 1
a1549 1
    stringBuffer.append(TEXT_288);
d1551 1
a1551 1
    stringBuffer.append(TEXT_289);
d1558 2
a1559 2
    stringBuffer.append(TEXT_290);
    stringBuffer.append(TEXT_291);
d1561 1
a1561 1
    stringBuffer.append(TEXT_292);
d1563 1
a1563 1
    stringBuffer.append(TEXT_293);
d1565 1
a1565 1
    stringBuffer.append(TEXT_294);
d1574 1
a1574 1
    stringBuffer.append(TEXT_295);
d1576 1
a1576 1
    stringBuffer.append(TEXT_296);
d1578 1
a1578 1
    stringBuffer.append(TEXT_297);
d1580 1
a1580 1
    stringBuffer.append(TEXT_298);
d1586 1
a1586 1
    stringBuffer.append(TEXT_299);
d1588 1
a1588 1
    stringBuffer.append(TEXT_300);
d1590 1
a1590 1
    stringBuffer.append(TEXT_301);
d1594 1
a1594 1
    stringBuffer.append(TEXT_302);
d1596 1
a1596 1
    stringBuffer.append(TEXT_303);
d1598 1
a1598 1
    stringBuffer.append(TEXT_304);
d1602 1
a1602 1
    stringBuffer.append(TEXT_305);
d1609 1
a1609 1
    stringBuffer.append(TEXT_306);
d1611 1
a1611 1
    stringBuffer.append(TEXT_307);
d1613 1
a1613 1
    stringBuffer.append(TEXT_308);
d1617 1
a1617 1
    stringBuffer.append(TEXT_309);
d1621 1
a1621 1
    stringBuffer.append(TEXT_310);
d1623 1
a1623 1
    stringBuffer.append(TEXT_311);
a1624 4
    stringBuffer.append(TEXT_312);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_313);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1628 1
a1628 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1630 1
a1630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1632 2
a1634 2
    stringBuffer.append(TEXT_318);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1636 1
a1636 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1642 1
a1642 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d1644 2
a1646 2
    stringBuffer.append(TEXT_324);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1648 1
a1648 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1650 1
a1650 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1654 1
a1654 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1656 2
a1658 2
    stringBuffer.append(TEXT_330);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1660 1
a1660 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1662 1
a1662 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1666 1
a1666 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1668 2
a1670 2
    stringBuffer.append(TEXT_336);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
d1672 1
a1672 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1674 1
a1674 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1676 1
a1676 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1680 1
a1680 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d1682 2
a1684 2
    stringBuffer.append(TEXT_343);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1686 1
a1686 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionAdapter"));
d1688 1
a1688 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d1690 1
a1690 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d1692 1
a1692 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1694 1
a1694 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyListener"));
d1696 2
a1698 2
    stringBuffer.append(TEXT_350);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.ModifyEvent"));
d1700 1
a1700 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1702 1
a1702 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d1706 1
a1706 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1710 1
a1710 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d1712 2
a1714 2
    stringBuffer.append(TEXT_358);
    stringBuffer.append(editorGen.getDomainFileExtension());
d1716 1
a1716 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1718 1
a1718 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d1720 1
a1720 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d1722 1
a1722 1
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
d1726 1
a1726 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1728 1
a1728 1
    stringBuffer.append(importManager.getImportedName("java.io.File"));
d1738 1
a1738 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d1742 4
d1749 1
a1749 1
    stringBuffer.append(TEXT_373);
d1751 1
a1751 1
    stringBuffer.append(TEXT_374);
d1753 1
a1753 1
    stringBuffer.append(TEXT_375);
d1757 1
a1757 1
    stringBuffer.append(TEXT_376);
d1759 1
a1759 1
    stringBuffer.append(TEXT_377);
a1762 4
    stringBuffer.append(TEXT_378);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_379);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1766 1
a1766 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1768 1
a1768 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1770 1
a1770 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1772 1
a1772 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1776 1
a1776 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1778 1
a1778 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1782 4
d1787 1
a1787 1
    stringBuffer.append(TEXT_390);
d1789 1
a1789 1
    stringBuffer.append(TEXT_391);
d1791 1
a1791 1
    stringBuffer.append(TEXT_392);
d1793 1
a1793 1
    stringBuffer.append(TEXT_393);
d1795 1
a1795 1
    stringBuffer.append(TEXT_394);
d1797 1
a1797 1
    stringBuffer.append(TEXT_395);
d1799 1
a1799 1
    stringBuffer.append(TEXT_396);
d1801 1
a1801 1
    stringBuffer.append(TEXT_397);
d1803 1
a1803 1
    stringBuffer.append(TEXT_398);
d1805 1
a1805 1
    stringBuffer.append(TEXT_399);
d1809 1
a1809 1
    stringBuffer.append(TEXT_400);
d1812 1
a1812 1
    stringBuffer.append(TEXT_401);
d1815 1
a1815 1
    stringBuffer.append(TEXT_402);
a1816 4
    stringBuffer.append(TEXT_403);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_404);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1822 1
a1822 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1824 1
a1824 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1828 4
d1833 1
a1833 1
    stringBuffer.append(TEXT_411);
d1835 1
a1835 1
    stringBuffer.append(TEXT_412);
d1837 1
a1837 1
    stringBuffer.append(TEXT_413);
d1839 1
a1839 1
    stringBuffer.append(TEXT_414);
d1841 1
a1841 1
    stringBuffer.append(TEXT_415);
d1843 1
a1843 1
    stringBuffer.append(TEXT_416);
d1845 1
a1845 1
    stringBuffer.append(TEXT_417);
d1849 1
a1849 1
    stringBuffer.append(TEXT_418);
d1851 1
a1851 1
    stringBuffer.append(TEXT_419);
d1853 1
a1853 1
    stringBuffer.append(TEXT_420);
d1855 1
a1855 1
    stringBuffer.append(TEXT_421);
d1859 1
a1859 1
    stringBuffer.append(TEXT_422);
d1861 1
a1861 1
    stringBuffer.append(TEXT_423);
d1865 1
a1865 1
    stringBuffer.append(TEXT_424);
d1867 1
a1867 1
    stringBuffer.append(TEXT_425);
d1869 1
a1869 1
    stringBuffer.append(TEXT_426);
d1873 1
a1873 1
    stringBuffer.append(TEXT_427);
d1875 1
a1875 1
    stringBuffer.append(TEXT_428);
d1877 1
a1877 1
    stringBuffer.append(TEXT_429);
d1879 1
a1879 1
    stringBuffer.append(TEXT_430);
d1881 1
a1881 1
    stringBuffer.append(TEXT_431);
d1883 1
a1883 1
    stringBuffer.append(TEXT_432);
d1885 1
a1885 1
    stringBuffer.append(TEXT_433);
d1887 1
a1887 1
    stringBuffer.append(TEXT_434);
d1889 1
a1889 1
    stringBuffer.append(TEXT_435);
d1891 1
a1891 1
    stringBuffer.append(TEXT_436);
d1893 1
a1893 1
    stringBuffer.append(TEXT_437);
d1895 1
a1895 1
    stringBuffer.append(TEXT_438);
d1897 1
a1897 1
    stringBuffer.append(TEXT_439);
d1899 1
a1899 1
    stringBuffer.append(TEXT_440);
@


1.1
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d107 154
a260 154
  protected final String TEXT_88 = ".openEditor(diagramResource.getURI());";
  protected final String TEXT_89 = NL + "\t\t\t";
  protected final String TEXT_90 = ".openEditor(myWorkbenchPage, diagramFile);";
  protected final String TEXT_91 = NL + "\t\t} catch (";
  protected final String TEXT_92 = " ex) {";
  protected final String TEXT_93 = NL + "\t\t\t";
  protected final String TEXT_94 = ".getInstance().logError(\"Save operation failed for: \" + diagramFileURI.toString(), ex); //$NON-NLS-1$";
  protected final String TEXT_95 = NL + "\t\t\t";
  protected final String TEXT_96 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_97 = " ex) {" + NL + "\t\t\t";
  protected final String TEXT_98 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$";
  protected final String TEXT_99 = NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_100 = NL;
  protected final String TEXT_101 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void initDiagramContents(";
  protected final String TEXT_102 = " diagram) {" + NL + "\tcreate";
  protected final String TEXT_103 = "Children(diagram);";
  protected final String TEXT_104 = NL + "\tmyViewService = new ";
  protected final String TEXT_105 = "(diagram);" + NL + "\tcreate";
  protected final String TEXT_106 = "ChildLinks(diagram);";
  protected final String TEXT_107 = NL + "}" + NL;
  protected final String TEXT_108 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_109 = "Children(";
  protected final String TEXT_110 = " viewObject) {";
  protected final String TEXT_111 = NL + "\tfor(";
  protected final String TEXT_112 = " it = viewObject.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_113 = " next = (";
  protected final String TEXT_114 = ") it.next();" + NL + "\t\tint visualID = ";
  protected final String TEXT_115 = ".getVisualID(next);" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_116 = NL + "\t\tcase ";
  protected final String TEXT_117 = ".VISUAL_ID:" + NL + "\t\t\tcreate";
  protected final String TEXT_118 = "Children(next);" + NL + "\t\t\tbreak;";
  protected final String TEXT_119 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_120 = NL + "\t";
  protected final String TEXT_121 = " semanticChildren = get";
  protected final String TEXT_122 = "SemanticChildNodes(viewObject);" + NL + "\tfor(";
  protected final String TEXT_123 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_124 = " nextDescriptor = (";
  protected final String TEXT_125 = ") it.next();" + NL + "\t\t";
  protected final String TEXT_126 = " createCommand = getCreate";
  protected final String TEXT_127 = "NotationalChildNodeCommand(viewObject, nextDescriptor);" + NL + "\t\tif (createCommand != null && createCommand.canExecute()) {" + NL + "\t\t\tcreateCommand.execute();";
  protected final String TEXT_128 = NL + "\t\t\t";
  protected final String TEXT_129 = " nextChild = createCommand.getCreatedView();" + NL + "\t\t\tint childVisualID = nextDescriptor.getVisualID();" + NL + "\t\t\tswitch (childVisualID) {";
  protected final String TEXT_130 = NL + "\t\t\tcase ";
  protected final String TEXT_131 = ".VISUAL_ID:" + NL + "\t\t\t\tcreate";
  protected final String TEXT_132 = "Children(nextChild);" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_133 = NL + "\t\t\t}";
  protected final String TEXT_134 = NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_135 = " get";
  protected final String TEXT_136 = "SemanticChildNodes(";
  protected final String TEXT_137 = " parentView) {";
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = NL + "\treturn ";
  protected final String TEXT_140 = ".EMPTY_LIST;";
  protected final String TEXT_141 = NL + "\t";
  protected final String TEXT_142 = " result = new ";
  protected final String TEXT_143 = "();";
  protected final String TEXT_144 = NL + "\t";
  protected final String TEXT_145 = " viewObject = ";
  protected final String TEXT_146 = ";" + NL + "\t";
  protected final String TEXT_147 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_148 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_149 = NL + "\tfor(";
  protected final String TEXT_150 = " it = ";
  protected final String TEXT_151 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_152 = ") it.next();";
  protected final String TEXT_153 = NL + "\tnextValue = (";
  protected final String TEXT_154 = ")";
  protected final String TEXT_155 = ";";
  protected final String TEXT_156 = NL + "\tnodeVID = ";
  protected final String TEXT_157 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_158 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_159 = NL + "\tcase ";
  protected final String TEXT_160 = ".VISUAL_ID: {";
  protected final String TEXT_161 = NL + "\tif (";
  protected final String TEXT_162 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_163 = NL + "\t\tresult.add(new ";
  protected final String TEXT_164 = "(nextValue, nodeVID));";
  protected final String TEXT_165 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_166 = NL + "\t\t}";
  protected final String TEXT_167 = NL + "\t}";
  protected final String TEXT_168 = NL + "\t}";
  protected final String TEXT_169 = NL + "\treturn result;";
  protected final String TEXT_170 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_171 = " getCreate";
  protected final String TEXT_172 = "NotationalChildNodeCommand(";
  protected final String TEXT_173 = " parentView, ";
  protected final String TEXT_174 = " descriptor) {";
  protected final String TEXT_175 = NL;
  protected final String TEXT_176 = "\t\t\t";
  protected final String TEXT_177 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_178 = NL + "\t\t\tcase ";
  protected final String TEXT_179 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_180 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_181 = "(";
  protected final String TEXT_182 = ", domainElement, ";
  protected final String TEXT_183 = "new ";
  protected final String TEXT_184 = "(0, 0, ";
  protected final String TEXT_185 = ", ";
  protected final String TEXT_186 = ")";
  protected final String TEXT_187 = NL + "null";
  protected final String TEXT_188 = ", ";
  protected final String TEXT_189 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_190 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_191 = NL + "}";
  protected final String TEXT_192 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_193 = "ChildLinks(";
  protected final String TEXT_194 = " viewObject) {";
  protected final String TEXT_195 = NL + "\t";
  protected final String TEXT_196 = " semanticChildLinks = get";
  protected final String TEXT_197 = "SemanticChildLinks(viewObject);" + NL + "\tfor(";
  protected final String TEXT_198 = " it = semanticChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_199 = " nextDescriptor = (";
  protected final String TEXT_200 = ") it.next();" + NL + "\t\t";
  protected final String TEXT_201 = " createCommand = getCreate";
  protected final String TEXT_202 = "NotationalChildLinkCommand(viewObject, nextDescriptor);" + NL + "\t\tif (createCommand != null && createCommand.canExecute()) {" + NL + "\t\t\tcreateCommand.execute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_203 = NL + "\tfor(";
  protected final String TEXT_204 = " it = viewObject.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t";
  protected final String TEXT_205 = " next = (";
  protected final String TEXT_206 = ") it.next();" + NL + "\t\tint visualID = ";
  protected final String TEXT_207 = ".getVisualID(next);" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_208 = NL + "\t\tcase ";
  protected final String TEXT_209 = ".VISUAL_ID:" + NL + "\t\t\tcreate";
  protected final String TEXT_210 = "ChildLinks(next);" + NL + "\t\t\tbreak;";
  protected final String TEXT_211 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_212 = NL + "}" + NL;
  protected final String TEXT_213 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_214 = " get";
  protected final String TEXT_215 = "SemanticChildLinks(";
  protected final String TEXT_216 = " parentView) {";
  protected final String TEXT_217 = NL;
  protected final String TEXT_218 = "\t";
  protected final String TEXT_219 = " result = new ";
  protected final String TEXT_220 = "();";
  protected final String TEXT_221 = NL + "\t";
  protected final String TEXT_222 = " modelObject = ";
  protected final String TEXT_223 = ".getElement();" + NL + "\t";
  protected final String TEXT_224 = " nextValue;";
  protected final String TEXT_225 = NL + "\tint linkVID;";
  protected final String TEXT_226 = NL + "\tfor(";
  protected final String TEXT_227 = " it = ";
  protected final String TEXT_228 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_229 = ") it.next();";
  protected final String TEXT_230 = NL + "\tnextValue = (";
  protected final String TEXT_231 = ")";
  protected final String TEXT_232 = ";";
  protected final String TEXT_233 = NL + "\tlinkVID = ";
  protected final String TEXT_234 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_235 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_236 = NL + "\tcase ";
  protected final String TEXT_237 = ".VISUAL_ID: {";
  protected final String TEXT_238 = NL + "\tif (";
  protected final String TEXT_239 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_240 = NL + "\t\t";
  protected final String TEXT_241 = " source = (";
d263 7
a269 7
  protected final String TEXT_244 = NL + "\t\t";
  protected final String TEXT_245 = " source = ";
  protected final String TEXT_246 = ".getElement();";
  protected final String TEXT_247 = NL + "\t\t";
  protected final String TEXT_248 = " target = (";
  protected final String TEXT_249 = ")";
  protected final String TEXT_250 = ";";
d271 146
a416 146
  protected final String TEXT_252 = " target = ";
  protected final String TEXT_253 = ".getElement();";
  protected final String TEXT_254 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_255 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_256 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_257 = NL + "\t}";
  protected final String TEXT_258 = NL + "\t}";
  protected final String TEXT_259 = NL + "\t}";
  protected final String TEXT_260 = NL + "\tfor(";
  protected final String TEXT_261 = " it = ";
  protected final String TEXT_262 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_263 = ") it.next();";
  protected final String TEXT_264 = NL + "\tnextValue = (";
  protected final String TEXT_265 = ")";
  protected final String TEXT_266 = ";";
  protected final String TEXT_267 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_268 = NL + "\t\tresult.add(new ";
  protected final String TEXT_269 = "(modelObject, nextValue, null, ";
  protected final String TEXT_270 = ".VISUAL_ID));";
  protected final String TEXT_271 = NL + "\t}";
  protected final String TEXT_272 = NL + "\t}";
  protected final String TEXT_273 = NL + "\treturn result;";
  protected final String TEXT_274 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_275 = " getCreate";
  protected final String TEXT_276 = "NotationalChildLinkCommand(";
  protected final String TEXT_277 = " parentView, ";
  protected final String TEXT_278 = " linkDescriptor) {";
  protected final String TEXT_279 = NL;
  protected final String TEXT_280 = "\t\t\t";
  protected final String TEXT_281 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_282 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_283 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_284 = NL + "\t\t\tcase ";
  protected final String TEXT_285 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_286 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_287 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_288 = NL + "\t\t\tcase ";
  protected final String TEXT_289 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_290 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_291 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_292 = "(";
  protected final String TEXT_293 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_294 = NL + "}";
  protected final String TEXT_295 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_296 = " myViewService;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_297 = " getViewService() {" + NL + "\treturn myViewService;" + NL + "}";
  protected final String TEXT_298 = NL;
  protected final String TEXT_299 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate abstract class URISelectorPage extends ";
  protected final String TEXT_300 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_301 = " fileField;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected URISelectorPage(String name) {" + NL + "\t\t\tsuper(name);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_302 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_303 = " composite = new ";
  protected final String TEXT_304 = "(parent, ";
  protected final String TEXT_305 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_306 = " layout = new ";
  protected final String TEXT_307 = "();" + NL + "\t\t\t\tlayout.numColumns = 1;" + NL + "\t\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_308 = " data = new ";
  protected final String TEXT_309 = "();" + NL + "\t\t\t\tdata.verticalAlignment = ";
  protected final String TEXT_310 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_311 = ".FILL;" + NL + "\t\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_312 = " resourceURILabel = new ";
  protected final String TEXT_313 = "(composite, ";
  protected final String TEXT_314 = ".LEFT);" + NL + "\t\t\t{" + NL + "\t\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_315 = " data = new ";
  protected final String TEXT_316 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_317 = ".FILL;" + NL + "\t\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_318 = " fileComposite = new ";
  protected final String TEXT_319 = "(composite, ";
  protected final String TEXT_320 = ".NONE);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_321 = " data = new ";
  protected final String TEXT_322 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_323 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\t\t";
  protected final String TEXT_324 = " layout = new ";
  protected final String TEXT_325 = "();" + NL + "\t\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\t\tlayout.numColumns = 2;" + NL + "\t\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField = new ";
  protected final String TEXT_326 = "(fileComposite, ";
  protected final String TEXT_327 = ".BORDER);" + NL + "\t\t\t{" + NL + "\t\t\t\t";
  protected final String TEXT_328 = " data = new ";
  protected final String TEXT_329 = "();" + NL + "\t\t\t\tdata.horizontalAlignment = ";
  protected final String TEXT_330 = ".FILL;" + NL + "\t\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\t\tfileField.setLayoutData(data);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfileField.addModifyListener(validator);" + NL + "\t\t\t";
  protected final String TEXT_331 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_332 = "(fileComposite," + NL + "\t\t\t\t\t";
  protected final String TEXT_333 = ".PUSH);" + NL + "\t\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "" + NL + "\t\t\tresourceURIBrowseFileSystemButton" + NL + "\t\t\t\t\t.addSelectionListener(new ";
  protected final String TEXT_334 = "() {" + NL + "\t\t\t\t\t\tpublic void widgetSelected(";
  protected final String TEXT_335 = " event) {" + NL + "\t\t\t\t\t\t\tString fileExtension = getFileExtension();" + NL + "\t\t\t\t\t\t\tString filePath = ";
  protected final String TEXT_336 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_337 = ".OPEN);" + NL + "\t\t\t\t\t\t\tif (filePath != null) {" + NL + "\t\t\t\t\t\t\t\tif (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t\t\tfilePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\tfileField.setText(filePath);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\tsetControl(composite);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_338 = " validator = new ";
  protected final String TEXT_339 = "() {" + NL + "\t\t\tpublic void modifyText(";
  protected final String TEXT_340 = " e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected final void setFile(";
  protected final String TEXT_341 = " file) {" + NL + "\t\t\tfileField.setText(file.getPath());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\t";
  protected final String TEXT_342 = " fileURI = getFileURI();" + NL + "\t\t\tif (fileURI == null || fileURI.isEmpty()) {" + NL + "\t\t\t\tsetErrorMessage(null);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (fileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_343 = " file = new ";
  protected final String TEXT_344 = "(fileURI.toFileString());" + NL + "\t\t\t\tString fileProblem = validateFile(file);" + NL + "\t\t\t\tif (fileProblem != null) {" + NL + "\t\t\t\t\tsetErrorMessage(fileProblem);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tString requiredExt = getFileExtension();" + NL + "\t\t\tString enteredExt = fileURI.fileExtension();" + NL + "\t\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Checks the given file and returns the error message if there are problems or <code>null</code> if the file is OK." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String validateFile(";
  protected final String TEXT_345 = " file);" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract String getFileExtension();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_346 = " getFileURI() {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_347 = ".createFileURI(fileField.getText());" + NL + "\t\t\t} catch (Exception exception) {" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class SourceURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic SourceURISelectorPage() {" + NL + "\t\t\tsuper(\"Select source file\");" + NL + "\t\t\tsetTitle(\"Source file\");" + NL + "\t\t\tsetDescription(\"Select file with semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_348 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmySelectedModelFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_349 = " file) {" + NL + "\t\t\tif (!file.exists()) {" + NL + "\t\t\t\treturn \"Source file does not exist\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class DiagramURISelectorPage extends URISelectorPage {" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_350 = " myNewFileURI;" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DiagramURISelectorPage() {" + NL + "\t\t\tsuper(\"Initialize new ";
  protected final String TEXT_351 = " diagram file\");" + NL + "\t\t\tsetTitle(\"Diagram file\");" + NL + "\t\t\tsetDescription(\"Create new diagram based on ";
  protected final String TEXT_352 = " model content\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFileExtension() {" + NL + "\t\t\treturn \"";
  protected final String TEXT_353 = "\";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t\tif (visible && mySelectedModelFileURI != null && getFileURI() == null && mySelectedModelFileURI.isFile()) {" + NL + "\t\t\t\t";
  protected final String TEXT_354 = " originalFile = new ";
  protected final String TEXT_355 = "(mySelectedModelFileURI.toFileString());" + NL + "\t\t\t\tString originalFileName = mySelectedModelFileURI.trimFileExtension().lastSegment();" + NL + "\t\t\t\t";
  protected final String TEXT_356 = " parentFile = originalFile.getParentFile();" + NL + "\t\t\t\t";
  protected final String TEXT_357 = " newFile = new ";
  protected final String TEXT_358 = "(parentFile, originalFileName + getFileExtension());" + NL + "\t\t\t\tfor(int i = 1; i > 0 && newFile.exists(); i++) {" + NL + "\t\t\t\t\tnewFile = new ";
  protected final String TEXT_359 = "(parentFile, originalFileName + i + getFileExtension());" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (newFile.exists()) {" + NL + "\t\t\t\t\treturn;\t//failed to set name that does not exist, just leave empty." + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFile(newFile);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean validatePage() {" + NL + "\t\t\tmyNewFileURI = null;" + NL + "\t\t\tif (super.validatePage()) {" + NL + "\t\t\t\tmyNewFileURI = getFileURI();" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_360 = " getNewFileURI() {" + NL + "\t\t\treturn myNewFileURI;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t     * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String validateFile(";
  protected final String TEXT_361 = " file) {" + NL + "\t\t\tif (file.exists()) {" + NL + "\t\t\t\treturn \"Diagram file already exists\";" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_362 = NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_363 = " implements ";
  protected final String TEXT_364 = " {";
  protected final String TEXT_365 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_366 = " myTreeViewer;";
  protected final String TEXT_367 = NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_368 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_369 = " topLevel = new ";
  protected final String TEXT_370 = "(parent, ";
  protected final String TEXT_371 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_372 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_373 = "(";
  protected final String TEXT_374 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_375 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_376 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_377 = " panel = new ";
  protected final String TEXT_378 = "(parent, ";
  protected final String TEXT_379 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_380 = "(";
  protected final String TEXT_381 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_382 = " layout = new ";
  protected final String TEXT_383 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_384 = " label = new ";
  protected final String TEXT_385 = "(panel, ";
  protected final String TEXT_386 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_387 = "(";
  protected final String TEXT_388 = ".HORIZONTAL_ALIGN_BEGINNING));";
  protected final String TEXT_389 = NL + "\t\t\t";
  protected final String TEXT_390 = " ";
  protected final String TEXT_391 = " = new ";
  protected final String TEXT_392 = "(panel, ";
  protected final String TEXT_393 = ".SINGLE | ";
  protected final String TEXT_394 = ".H_SCROLL | ";
  protected final String TEXT_395 = ".V_SCROLL | ";
  protected final String TEXT_396 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_397 = " layoutData = new ";
d418 42
a459 31
  protected final String TEXT_399 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\t";
  protected final String TEXT_400 = ".getTree().setLayoutData(layoutData);" + NL + "\t\t\t";
  protected final String TEXT_401 = ".setContentProvider(new ";
  protected final String TEXT_402 = "(";
  protected final String TEXT_403 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\t";
  protected final String TEXT_404 = ".setLabelProvider(new ";
  protected final String TEXT_405 = "(";
  protected final String TEXT_406 = ".getInstance().getItemProvidersAdapterFactory()));";
  protected final String TEXT_407 = NL + "\t\t\t";
  protected final String TEXT_408 = ".setInput(myDiagramRoot.eResource());" + NL + "\t\t\t";
  protected final String TEXT_409 = ".setSelection(new ";
  protected final String TEXT_410 = "(myDiagramRoot));";
  protected final String TEXT_411 = NL + "\t\t\t";
  protected final String TEXT_412 = ".addSelectionChangedListener(this);" + NL + "\t\t}" + NL;
  protected final String TEXT_413 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setVisible(boolean visible) {" + NL + "\t\t\tif (visible) {" + NL + "\t\t\t\t";
  protected final String TEXT_414 = ".setInput(myEditingDomain.getResourceSet().getResource(mySelectedModelFileURI, true));" + NL + "\t\t\t\tif (myDiagramRoot != null) {" + NL + "\t\t\t\t\tmyTreeViewer.setSelection(new ";
  protected final String TEXT_415 = "(myDiagramRoot));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsuper.setVisible(visible);" + NL + "\t\t}" + NL;
  protected final String TEXT_416 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_417 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_418 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_419 = " selection = (";
  protected final String TEXT_420 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_421 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_422 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_423 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_424 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_425 = ") {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (";
  protected final String TEXT_426 = ") selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ";
  protected final String TEXT_427 = ".VISUAL_ID == ";
  protected final String TEXT_428 = ".INSTANCE.getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_429 = NL;
d735 2
d738 1
a738 1
    stringBuffer.append(TEXT_88);
d742 3
a744 1
    stringBuffer.append(TEXT_89);
d746 1
a746 1
    stringBuffer.append(TEXT_90);
d750 19
a768 1
    stringBuffer.append(TEXT_91);
d770 1
a770 1
    stringBuffer.append(TEXT_92);
d774 1
a774 1
    stringBuffer.append(TEXT_93);
d776 1
a776 1
    stringBuffer.append(TEXT_94);
d780 1
a780 1
    stringBuffer.append(TEXT_95);
d782 1
a782 1
    stringBuffer.append(TEXT_96);
d784 1
a784 1
    stringBuffer.append(TEXT_97);
d786 1
a786 1
    stringBuffer.append(TEXT_98);
d790 3
a792 3
    stringBuffer.append(TEXT_99);
    stringBuffer.append(TEXT_100);
    stringBuffer.append(TEXT_101);
d794 1
a794 1
    stringBuffer.append(TEXT_102);
d796 1
a796 1
    stringBuffer.append(TEXT_103);
d800 1
a800 1
    stringBuffer.append(TEXT_104);
d802 1
a802 1
    stringBuffer.append(TEXT_105);
d804 1
a804 1
    stringBuffer.append(TEXT_106);
d808 1
a808 1
    stringBuffer.append(TEXT_107);
d840 1
a840 1
    stringBuffer.append(TEXT_108);
d842 1
a842 1
    stringBuffer.append(TEXT_109);
d844 1
a844 1
    stringBuffer.append(TEXT_110);
d857 1
a857 1
    stringBuffer.append(TEXT_111);
d859 1
a859 1
    stringBuffer.append(TEXT_112);
d861 1
a861 1
    stringBuffer.append(TEXT_113);
d863 1
a863 1
    stringBuffer.append(TEXT_114);
d865 1
a865 1
    stringBuffer.append(TEXT_115);
d873 1
a873 1
    stringBuffer.append(TEXT_116);
d875 1
a875 1
    stringBuffer.append(TEXT_117);
d877 1
a877 1
    stringBuffer.append(TEXT_118);
d881 1
a881 1
    stringBuffer.append(TEXT_119);
d886 1
a886 1
    stringBuffer.append(TEXT_120);
d888 1
a888 1
    stringBuffer.append(TEXT_121);
d890 1
a890 1
    stringBuffer.append(TEXT_122);
d892 1
a892 1
    stringBuffer.append(TEXT_123);
d894 1
a894 1
    stringBuffer.append(TEXT_124);
d896 1
a896 1
    stringBuffer.append(TEXT_125);
d898 1
a898 1
    stringBuffer.append(TEXT_126);
d900 1
a900 1
    stringBuffer.append(TEXT_127);
d912 1
a912 1
    stringBuffer.append(TEXT_128);
d914 1
a914 1
    stringBuffer.append(TEXT_129);
d920 1
a920 1
    stringBuffer.append(TEXT_130);
d922 1
a922 1
    stringBuffer.append(TEXT_131);
d924 1
a924 1
    stringBuffer.append(TEXT_132);
d929 1
a929 1
    stringBuffer.append(TEXT_133);
d933 1
a933 1
    stringBuffer.append(TEXT_134);
d935 1
a935 1
    stringBuffer.append(TEXT_135);
d937 1
a937 1
    stringBuffer.append(TEXT_136);
d939 1
a939 1
    stringBuffer.append(TEXT_137);
d945 1
a945 1
    stringBuffer.append(TEXT_138);
d949 1
a949 1
    stringBuffer.append(TEXT_139);
d951 1
a951 1
    stringBuffer.append(TEXT_140);
d955 1
a955 1
    stringBuffer.append(TEXT_141);
d957 1
a957 1
    stringBuffer.append(TEXT_142);
d959 1
a959 1
    stringBuffer.append(TEXT_143);
d977 1
a977 1
    stringBuffer.append(TEXT_144);
d979 1
a979 1
    stringBuffer.append(TEXT_145);
d981 1
a981 1
    stringBuffer.append(TEXT_146);
d983 1
a983 1
    stringBuffer.append(TEXT_147);
d985 1
a985 1
    stringBuffer.append(TEXT_148);
d994 1
a994 1
    stringBuffer.append(TEXT_149);
d996 1
a996 1
    stringBuffer.append(TEXT_150);
d998 1
a998 1
    stringBuffer.append(TEXT_151);
d1000 1
a1000 1
    stringBuffer.append(TEXT_152);
d1004 1
a1004 1
    stringBuffer.append(TEXT_153);
d1006 1
a1006 1
    stringBuffer.append(TEXT_154);
d1008 1
a1008 1
    stringBuffer.append(TEXT_155);
d1012 1
a1012 1
    stringBuffer.append(TEXT_156);
d1014 1
a1014 1
    stringBuffer.append(TEXT_157);
d1019 1
a1019 1
    stringBuffer.append(TEXT_158);
d1026 1
a1026 1
    stringBuffer.append(TEXT_159);
d1028 1
a1028 1
    stringBuffer.append(TEXT_160);
d1032 1
a1032 1
    stringBuffer.append(TEXT_161);
d1034 1
a1034 1
    stringBuffer.append(TEXT_162);
d1038 1
a1038 1
    stringBuffer.append(TEXT_163);
d1040 1
a1040 1
    stringBuffer.append(TEXT_164);
d1044 1
a1044 1
    stringBuffer.append(TEXT_165);
d1048 1
a1048 1
    stringBuffer.append(TEXT_166);
d1054 1
a1054 1
    stringBuffer.append(TEXT_167);
d1059 1
a1059 1
    stringBuffer.append(TEXT_168);
d1064 1
a1064 1
    stringBuffer.append(TEXT_169);
d1071 1
a1071 1
    stringBuffer.append(TEXT_170);
d1073 1
a1073 1
    stringBuffer.append(TEXT_171);
d1075 1
a1075 1
    stringBuffer.append(TEXT_172);
d1077 1
a1077 1
    stringBuffer.append(TEXT_173);
d1079 1
a1079 1
    stringBuffer.append(TEXT_174);
d1095 2
a1096 2
    stringBuffer.append(TEXT_175);
    stringBuffer.append(TEXT_176);
d1098 1
a1098 1
    stringBuffer.append(TEXT_177);
d1108 1
a1108 1
    stringBuffer.append(TEXT_178);
d1110 1
a1110 1
    stringBuffer.append(TEXT_179);
d1112 1
a1112 1
    stringBuffer.append(TEXT_180);
d1114 1
a1114 1
    stringBuffer.append(TEXT_181);
d1116 1
a1116 1
    stringBuffer.append(TEXT_182);
d1127 1
a1127 1
    stringBuffer.append(TEXT_183);
d1129 1
a1129 1
    stringBuffer.append(TEXT_184);
d1131 1
a1131 1
    stringBuffer.append(TEXT_185);
d1133 1
a1133 1
    stringBuffer.append(TEXT_186);
d1137 1
a1137 1
    stringBuffer.append(TEXT_187);
d1141 1
a1141 1
    stringBuffer.append(TEXT_188);
d1143 1
a1143 1
    stringBuffer.append(TEXT_189);
d1147 1
a1147 1
    stringBuffer.append(TEXT_190);
d1151 1
a1151 1
    stringBuffer.append(TEXT_191);
d1244 1
a1244 1
    stringBuffer.append(TEXT_192);
d1246 1
a1246 1
    stringBuffer.append(TEXT_193);
d1248 1
a1248 1
    stringBuffer.append(TEXT_194);
d1252 1
a1252 1
    stringBuffer.append(TEXT_195);
d1254 1
a1254 1
    stringBuffer.append(TEXT_196);
d1256 1
a1256 1
    stringBuffer.append(TEXT_197);
d1258 1
a1258 1
    stringBuffer.append(TEXT_198);
d1260 1
a1260 1
    stringBuffer.append(TEXT_199);
d1262 1
a1262 1
    stringBuffer.append(TEXT_200);
d1264 1
a1264 1
    stringBuffer.append(TEXT_201);
d1266 1
a1266 1
    stringBuffer.append(TEXT_202);
d1283 1
a1283 1
    stringBuffer.append(TEXT_203);
d1285 1
a1285 1
    stringBuffer.append(TEXT_204);
d1287 1
a1287 1
    stringBuffer.append(TEXT_205);
d1289 1
a1289 1
    stringBuffer.append(TEXT_206);
d1291 1
a1291 1
    stringBuffer.append(TEXT_207);
d1299 1
a1299 1
    stringBuffer.append(TEXT_208);
d1301 1
a1301 1
    stringBuffer.append(TEXT_209);
d1303 1
a1303 1
    stringBuffer.append(TEXT_210);
d1307 1
a1307 1
    stringBuffer.append(TEXT_211);
d1311 1
a1311 1
    stringBuffer.append(TEXT_212);
d1315 1
a1315 1
    stringBuffer.append(TEXT_213);
d1317 1
a1317 1
    stringBuffer.append(TEXT_214);
d1319 1
a1319 1
    stringBuffer.append(TEXT_215);
d1321 1
a1321 1
    stringBuffer.append(TEXT_216);
d1329 2
a1330 2
    stringBuffer.append(TEXT_217);
    stringBuffer.append(TEXT_218);
d1332 1
a1332 1
    stringBuffer.append(TEXT_219);
d1334 1
a1334 1
    stringBuffer.append(TEXT_220);
d1357 1
a1357 1
    stringBuffer.append(TEXT_221);
d1359 1
a1359 1
    stringBuffer.append(TEXT_222);
d1361 1
a1361 1
    stringBuffer.append(TEXT_223);
d1363 1
a1363 1
    stringBuffer.append(TEXT_224);
d1368 1
a1368 1
    stringBuffer.append(TEXT_225);
d1377 1
a1377 1
    stringBuffer.append(TEXT_226);
d1379 1
a1379 1
    stringBuffer.append(TEXT_227);
d1381 1
a1381 1
    stringBuffer.append(TEXT_228);
d1383 1
a1383 1
    stringBuffer.append(TEXT_229);
d1387 1
a1387 1
    stringBuffer.append(TEXT_230);
d1389 1
a1389 1
    stringBuffer.append(TEXT_231);
d1391 1
a1391 1
    stringBuffer.append(TEXT_232);
d1395 1
a1395 1
    stringBuffer.append(TEXT_233);
d1397 1
a1397 1
    stringBuffer.append(TEXT_234);
d1402 1
a1402 1
    stringBuffer.append(TEXT_235);
d1410 1
a1410 1
    stringBuffer.append(TEXT_236);
d1412 1
a1412 1
    stringBuffer.append(TEXT_237);
d1416 1
a1416 1
    stringBuffer.append(TEXT_238);
d1418 1
a1418 1
    stringBuffer.append(TEXT_239);
d1423 1
a1423 1
    stringBuffer.append(TEXT_240);
d1425 1
a1425 1
    stringBuffer.append(TEXT_241);
d1427 1
a1427 1
    stringBuffer.append(TEXT_242);
d1429 1
a1429 1
    stringBuffer.append(TEXT_243);
d1433 1
a1433 1
    stringBuffer.append(TEXT_244);
d1435 1
a1435 1
    stringBuffer.append(TEXT_245);
d1437 1
a1437 1
    stringBuffer.append(TEXT_246);
d1442 1
a1442 1
    stringBuffer.append(TEXT_247);
d1444 1
a1444 1
    stringBuffer.append(TEXT_248);
d1446 1
a1446 1
    stringBuffer.append(TEXT_249);
d1448 1
a1448 1
    stringBuffer.append(TEXT_250);
d1452 1
a1452 1
    stringBuffer.append(TEXT_251);
d1454 1
a1454 1
    stringBuffer.append(TEXT_252);
d1456 1
a1456 1
    stringBuffer.append(TEXT_253);
d1460 1
a1460 1
    stringBuffer.append(TEXT_254);
d1462 1
a1462 1
    stringBuffer.append(TEXT_255);
d1466 1
a1466 1
    stringBuffer.append(TEXT_256);
d1470 1
a1470 1
    stringBuffer.append(TEXT_257);
d1478 1
a1478 1
    stringBuffer.append(TEXT_258);
d1483 1
a1483 1
    stringBuffer.append(TEXT_259);
d1493 1
a1493 1
    stringBuffer.append(TEXT_260);
d1495 1
a1495 1
    stringBuffer.append(TEXT_261);
d1497 1
a1497 1
    stringBuffer.append(TEXT_262);
d1499 1
a1499 1
    stringBuffer.append(TEXT_263);
d1503 1
a1503 1
    stringBuffer.append(TEXT_264);
d1505 1
a1505 1
    stringBuffer.append(TEXT_265);
d1507 1
a1507 1
    stringBuffer.append(TEXT_266);
d1511 1
a1511 1
    stringBuffer.append(TEXT_267);
d1516 1
a1516 1
    stringBuffer.append(TEXT_268);
d1518 1
a1518 1
    stringBuffer.append(TEXT_269);
d1520 1
a1520 1
    stringBuffer.append(TEXT_270);
d1524 1
a1524 1
    stringBuffer.append(TEXT_271);
d1528 1
a1528 1
    stringBuffer.append(TEXT_272);
d1533 1
a1533 1
    stringBuffer.append(TEXT_273);
d1537 1
a1537 1
    stringBuffer.append(TEXT_274);
d1539 1
a1539 1
    stringBuffer.append(TEXT_275);
d1541 1
a1541 1
    stringBuffer.append(TEXT_276);
d1543 1
a1543 1
    stringBuffer.append(TEXT_277);
d1545 1
a1545 1
    stringBuffer.append(TEXT_278);
d1552 2
a1553 2
    stringBuffer.append(TEXT_279);
    stringBuffer.append(TEXT_280);
d1555 1
a1555 1
    stringBuffer.append(TEXT_281);
d1557 1
a1557 1
    stringBuffer.append(TEXT_282);
d1559 1
a1559 1
    stringBuffer.append(TEXT_283);
d1568 1
a1568 1
    stringBuffer.append(TEXT_284);
d1570 1
a1570 1
    stringBuffer.append(TEXT_285);
d1572 1
a1572 1
    stringBuffer.append(TEXT_286);
d1574 1
a1574 1
    stringBuffer.append(TEXT_287);
d1580 1
a1580 1
    stringBuffer.append(TEXT_288);
d1582 1
a1582 1
    stringBuffer.append(TEXT_289);
d1584 1
a1584 1
    stringBuffer.append(TEXT_290);
d1588 1
a1588 1
    stringBuffer.append(TEXT_291);
d1590 1
a1590 1
    stringBuffer.append(TEXT_292);
d1592 1
a1592 1
    stringBuffer.append(TEXT_293);
d1596 1
a1596 1
    stringBuffer.append(TEXT_294);
d1603 1
a1603 1
    stringBuffer.append(TEXT_295);
d1605 1
a1605 1
    stringBuffer.append(TEXT_296);
d1607 1
a1607 1
    stringBuffer.append(TEXT_297);
d1611 1
a1611 1
    stringBuffer.append(TEXT_298);
d1615 1
a1615 1
    stringBuffer.append(TEXT_299);
d1617 1
a1617 1
    stringBuffer.append(TEXT_300);
d1619 1
a1619 1
    stringBuffer.append(TEXT_301);
d1621 1
a1621 1
    stringBuffer.append(TEXT_302);
d1623 1
a1623 1
    stringBuffer.append(TEXT_303);
d1625 1
a1625 1
    stringBuffer.append(TEXT_304);
d1627 1
a1627 1
    stringBuffer.append(TEXT_305);
d1629 1
a1629 1
    stringBuffer.append(TEXT_306);
d1631 1
a1631 1
    stringBuffer.append(TEXT_307);
d1633 1
a1633 1
    stringBuffer.append(TEXT_308);
d1635 1
a1635 1
    stringBuffer.append(TEXT_309);
d1637 1
a1637 1
    stringBuffer.append(TEXT_310);
d1639 1
a1639 1
    stringBuffer.append(TEXT_311);
d1641 1
a1641 1
    stringBuffer.append(TEXT_312);
d1643 1
a1643 1
    stringBuffer.append(TEXT_313);
d1645 1
a1645 1
    stringBuffer.append(TEXT_314);
d1647 1
a1647 1
    stringBuffer.append(TEXT_315);
d1649 1
a1649 1
    stringBuffer.append(TEXT_316);
d1651 1
a1651 1
    stringBuffer.append(TEXT_317);
d1653 1
a1653 1
    stringBuffer.append(TEXT_318);
d1655 1
a1655 1
    stringBuffer.append(TEXT_319);
d1657 1
a1657 1
    stringBuffer.append(TEXT_320);
d1659 1
a1659 1
    stringBuffer.append(TEXT_321);
d1661 1
a1661 1
    stringBuffer.append(TEXT_322);
d1663 1
a1663 1
    stringBuffer.append(TEXT_323);
d1665 1
a1665 1
    stringBuffer.append(TEXT_324);
d1667 1
a1667 1
    stringBuffer.append(TEXT_325);
d1669 1
a1669 1
    stringBuffer.append(TEXT_326);
d1671 1
a1671 1
    stringBuffer.append(TEXT_327);
d1673 1
a1673 1
    stringBuffer.append(TEXT_328);
d1675 1
a1675 1
    stringBuffer.append(TEXT_329);
d1677 1
a1677 1
    stringBuffer.append(TEXT_330);
d1679 1
a1679 1
    stringBuffer.append(TEXT_331);
d1681 1
a1681 1
    stringBuffer.append(TEXT_332);
d1683 1
a1683 1
    stringBuffer.append(TEXT_333);
d1685 1
a1685 1
    stringBuffer.append(TEXT_334);
d1687 1
a1687 1
    stringBuffer.append(TEXT_335);
d1689 1
a1689 1
    stringBuffer.append(TEXT_336);
d1691 1
a1691 1
    stringBuffer.append(TEXT_337);
d1693 1
a1693 1
    stringBuffer.append(TEXT_338);
d1695 1
a1695 1
    stringBuffer.append(TEXT_339);
d1697 1
a1697 1
    stringBuffer.append(TEXT_340);
d1699 1
a1699 1
    stringBuffer.append(TEXT_341);
d1701 1
a1701 1
    stringBuffer.append(TEXT_342);
d1703 1
a1703 1
    stringBuffer.append(TEXT_343);
d1705 1
a1705 1
    stringBuffer.append(TEXT_344);
d1707 1
a1707 1
    stringBuffer.append(TEXT_345);
d1709 1
a1709 1
    stringBuffer.append(TEXT_346);
d1711 1
a1711 1
    stringBuffer.append(TEXT_347);
d1713 1
a1713 1
    stringBuffer.append(TEXT_348);
d1715 1
a1715 1
    stringBuffer.append(TEXT_349);
d1717 1
a1717 1
    stringBuffer.append(TEXT_350);
d1719 1
a1719 1
    stringBuffer.append(TEXT_351);
d1721 1
a1721 1
    stringBuffer.append(TEXT_352);
d1723 1
a1723 1
    stringBuffer.append(TEXT_353);
d1725 1
a1725 1
    stringBuffer.append(TEXT_354);
d1727 1
a1727 1
    stringBuffer.append(TEXT_355);
d1729 1
a1729 1
    stringBuffer.append(TEXT_356);
d1731 1
a1731 1
    stringBuffer.append(TEXT_357);
d1733 1
a1733 1
    stringBuffer.append(TEXT_358);
d1735 1
a1735 1
    stringBuffer.append(TEXT_359);
d1737 1
a1737 1
    stringBuffer.append(TEXT_360);
d1739 1
a1739 1
    stringBuffer.append(TEXT_361);
d1743 1
a1743 1
    stringBuffer.append(TEXT_362);
d1745 1
a1745 1
    stringBuffer.append(TEXT_363);
d1747 1
a1747 1
    stringBuffer.append(TEXT_364);
d1751 1
a1751 1
    stringBuffer.append(TEXT_365);
d1753 1
a1753 1
    stringBuffer.append(TEXT_366);
d1757 1
a1757 1
    stringBuffer.append(TEXT_367);
d1759 1
a1759 1
    stringBuffer.append(TEXT_368);
d1761 1
a1761 1
    stringBuffer.append(TEXT_369);
d1763 1
a1763 1
    stringBuffer.append(TEXT_370);
d1765 1
a1765 1
    stringBuffer.append(TEXT_371);
d1767 1
a1767 1
    stringBuffer.append(TEXT_372);
d1769 1
a1769 1
    stringBuffer.append(TEXT_373);
d1771 1
a1771 1
    stringBuffer.append(TEXT_374);
d1773 1
a1773 1
    stringBuffer.append(TEXT_375);
d1775 1
a1775 1
    stringBuffer.append(TEXT_376);
d1777 1
a1777 1
    stringBuffer.append(TEXT_377);
d1779 1
a1779 1
    stringBuffer.append(TEXT_378);
d1781 1
a1781 1
    stringBuffer.append(TEXT_379);
d1783 1
a1783 1
    stringBuffer.append(TEXT_380);
d1785 1
a1785 1
    stringBuffer.append(TEXT_381);
d1787 1
a1787 1
    stringBuffer.append(TEXT_382);
d1789 1
a1789 1
    stringBuffer.append(TEXT_383);
d1791 1
a1791 1
    stringBuffer.append(TEXT_384);
d1793 1
a1793 1
    stringBuffer.append(TEXT_385);
d1795 1
a1795 1
    stringBuffer.append(TEXT_386);
d1797 1
a1797 1
    stringBuffer.append(TEXT_387);
d1799 1
a1799 1
    stringBuffer.append(TEXT_388);
d1803 1
a1803 1
    stringBuffer.append(TEXT_389);
d1806 1
a1806 1
    stringBuffer.append(TEXT_390);
d1809 1
a1809 1
    stringBuffer.append(TEXT_391);
d1811 1
a1811 1
    stringBuffer.append(TEXT_392);
d1813 1
a1813 1
    stringBuffer.append(TEXT_393);
d1815 1
a1815 1
    stringBuffer.append(TEXT_394);
d1817 1
a1817 1
    stringBuffer.append(TEXT_395);
d1819 1
a1819 1
    stringBuffer.append(TEXT_396);
d1821 1
a1821 1
    stringBuffer.append(TEXT_397);
d1823 1
a1823 1
    stringBuffer.append(TEXT_398);
d1825 1
a1825 1
    stringBuffer.append(TEXT_399);
d1827 1
a1827 1
    stringBuffer.append(TEXT_400);
d1829 1
a1829 1
    stringBuffer.append(TEXT_401);
d1831 1
a1831 1
    stringBuffer.append(TEXT_402);
d1833 1
a1833 1
    stringBuffer.append(TEXT_403);
d1835 1
a1835 1
    stringBuffer.append(TEXT_404);
d1837 1
a1837 1
    stringBuffer.append(TEXT_405);
d1839 1
a1839 1
    stringBuffer.append(TEXT_406);
d1843 1
a1843 1
    stringBuffer.append(TEXT_407);
d1845 1
a1845 1
    stringBuffer.append(TEXT_408);
d1847 1
a1847 1
    stringBuffer.append(TEXT_409);
d1849 1
a1849 1
    stringBuffer.append(TEXT_410);
d1853 1
a1853 1
    stringBuffer.append(TEXT_411);
d1855 1
a1855 1
    stringBuffer.append(TEXT_412);
d1859 1
a1859 1
    stringBuffer.append(TEXT_413);
d1861 1
a1861 1
    stringBuffer.append(TEXT_414);
d1863 1
a1863 1
    stringBuffer.append(TEXT_415);
d1867 1
a1867 1
    stringBuffer.append(TEXT_416);
d1869 1
a1869 1
    stringBuffer.append(TEXT_417);
d1871 1
a1871 1
    stringBuffer.append(TEXT_418);
d1873 1
a1873 1
    stringBuffer.append(TEXT_419);
d1875 1
a1875 1
    stringBuffer.append(TEXT_420);
d1877 1
a1877 1
    stringBuffer.append(TEXT_421);
d1879 1
a1879 1
    stringBuffer.append(TEXT_422);
d1881 1
a1881 1
    stringBuffer.append(TEXT_423);
d1883 1
a1883 1
    stringBuffer.append(TEXT_424);
d1885 1
a1885 1
    stringBuffer.append(TEXT_425);
d1887 1
a1887 1
    stringBuffer.append(TEXT_426);
d1889 1
a1889 1
    stringBuffer.append(TEXT_427);
d1891 1
a1891 1
    stringBuffer.append(TEXT_428);
d1893 1
a1893 1
    stringBuffer.append(TEXT_429);
@

