head	1.26;
access;
symbols
	v20080910-1520:1.26
	v20070403-1500:1.25
	v20070330-1300:1.25
	v20060330-1300:1.25
	v20070322-1100:1.25
	v20060316-0600:1.25
	v20070307-0700:1.24
	v20070228-2000:1.22
	v20070221-1500:1.21
	v20070208-1800:1.21
	v20070103-0300:1.19
	M4_20:1.19
	v20061222-1800:1.19
	v20061214-0000:1.18
	v20061120-1300:1.17
	M3_20:1.17
	v20061117-0800:1.17
	v20061013-1330:1.11
	v20061005-1700:1.6
	M1_20:1.10
	v20060904-1500:1.10
	v20060824-1600:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060626-1420:1.6
	v20060620-0400:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.26
date	2007.04.04.11.04.49;	author bblajer;	state dead;
branches;
next	1.25;
commitid	18c54613864d4567;

1.25
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.24;
commitid	617845f977b04567;

1.24
date	2007.03.05.12.58.42;	author bblajer;	state Exp;
branches;
next	1.23;
commitid	437c45ec14004567;

1.23
date	2007.03.03.23.45.11;	author bblajer;	state Exp;
branches;
next	1.22;
commitid	2e3145ea08814567;

1.22
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.21;
commitid	496945df14164567;

1.21
date	2007.01.19.17.15.18;	author bblajer;	state Exp;
branches;
next	1.20;
commitid	781645b0fca44567;

1.20
date	2007.01.11.19.16.11;	author bblajer;	state Exp;
branches;
next	1.19;
commitid	6c2845a68cf94567;

1.19
date	2006.12.19.19.11.42;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	733e4588396c4567;

1.18
date	2006.12.12.12.54.43;	author bblajer;	state Exp;
branches;
next	1.17;
commitid	355b457ea6574567;

1.17
date	2006.11.09.18.15.42;	author bblajer;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.26.14.34.57;	author bblajer;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.18.16.29.04;	author bblajer;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.18.14.35.15;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.18.09.57.00;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.17.13.08.28;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.11.15.45.01;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.03.18.10.52;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.21.15.22.44;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.16.07.52.07;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.15.11.19.18;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.26
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@package org.eclipse.gmf.codegen.templates.lite.parts;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.emf.ecore.*;

public class ChildNodeEditPartGenerator
{
  protected static String nl;
  public static synchronized ChildNodeEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ChildNodeEditPartGenerator result = new ChildNodeEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL;
  protected final String TEXT_6 = "((";
  protected final String TEXT_7 = ")";
  protected final String TEXT_8 = "((";
  protected final String TEXT_9 = ")";
  protected final String TEXT_10 = ")";
  protected final String TEXT_11 = ".eGet(";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "())";
  protected final String TEXT_14 = ")";
  protected final String TEXT_15 = "((";
  protected final String TEXT_16 = ")";
  protected final String TEXT_17 = ")";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = "()";
  protected final String TEXT_20 = NL;
  protected final String TEXT_21 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_22 = " extends ";
  protected final String TEXT_23 = " implements ";
  protected final String TEXT_24 = ", ";
  protected final String TEXT_25 = ", ";
  protected final String TEXT_26 = " {";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_29 = ";";
  protected final String TEXT_30 = NL;
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_33 = " manager;" + NL;
  protected final String TEXT_34 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_35 = " LABEL_DISPLAYER = createLabelTextDisplayer();" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_36 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_37 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_38 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_39 = NL;
  protected final String TEXT_40 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_41 = " view = (";
  protected final String TEXT_42 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_43 = " view = (";
  protected final String TEXT_44 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_45 = NL;
  protected final String TEXT_46 = "\t\tinstallEditPolicy(";
  protected final String TEXT_47 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_48 = "());";
  protected final String TEXT_49 = NL;
  protected final String TEXT_50 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_51 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_52 = "());";
  protected final String TEXT_53 = NL;
  protected final String TEXT_54 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_55 = "\", new ";
  protected final String TEXT_56 = "()); //$NON-NLS-1$";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_59 = ".OPEN_ROLE";
  protected final String TEXT_60 = " + \"";
  protected final String TEXT_61 = "\" ";
  protected final String TEXT_62 = ", new ";
  protected final String TEXT_63 = "());";
  protected final String TEXT_64 = NL + "\t}" + NL;
  protected final String TEXT_65 = NL;
  protected final String TEXT_66 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_67 = " req) {";
  protected final String TEXT_68 = NL + "\t\tif (";
  protected final String TEXT_69 = ".REQ_DIRECT_EDIT.equals(req.getType()) && understandsRequest(req)) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_70 = NL;
  protected final String TEXT_71 = "if (";
  protected final String TEXT_72 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_73 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}";
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_76 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_77 = "(this, ";
  protected final String TEXT_78 = ".class, new ";
  protected final String TEXT_79 = "(getViewer(), getLabel())) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelTextDisplayer().getEditText(";
  protected final String TEXT_80 = ".getElement()));" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tif (";
  protected final String TEXT_81 = ".isReadOnly(";
  protected final String TEXT_82 = ".getElement()) || ";
  protected final String TEXT_83 = ".isReadOnly(";
  protected final String TEXT_84 = ")) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_85 = NL;
  protected final String TEXT_86 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_87 = " externalRefreshers = new ";
  protected final String TEXT_88 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_89 = " getExternalRefreshers() {" + NL + "\t\treturn externalRefreshers;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addExternalRefresher(";
  protected final String TEXT_90 = ".ExternalRefresher externalRefresher) {" + NL + "\t\tif (externalRefresher != null && !externalRefreshers.contains(externalRefresher)) {" + NL + "\t\t\texternalRefreshers.add(externalRefresher);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeExternalRefresher(";
  protected final String TEXT_91 = ".ExternalRefresher externalRefresher) {" + NL + "\t\texternalRefreshers.remove(externalRefresher);" + NL + "\t}" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_92 = NL;
  protected final String TEXT_93 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_94 = " createLabelTextDisplayer() {";
  protected final String TEXT_95 = NL + "\t\treturn new ";
  protected final String TEXT_96 = "(\"";
  protected final String TEXT_97 = "\"";
  protected final String TEXT_98 = ", \"";
  protected final String TEXT_99 = "\"";
  protected final String TEXT_100 = ", " + NL + "\t\t\tnew ";
  protected final String TEXT_101 = "[] {";
  protected final String TEXT_102 = NL + "\t\t";
  protected final String TEXT_103 = ".eINSTANCE.get";
  protected final String TEXT_104 = "()";
  protected final String TEXT_105 = ",";
  protected final String TEXT_106 = "});";
  protected final String TEXT_107 = NL + "\t\t// TODO: implement this method" + NL + "\t\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t\treturn null;";
  protected final String TEXT_108 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_109 = " getLabelTextDisplayer() {" + NL + "\t\treturn LABEL_DISPLAYER;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tgetLabel().setText(text);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_110 = " element = ";
  protected final String TEXT_111 = ".getElement();" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\tString result = getLabelTextDisplayer().getDisplayText(element);" + NL + "\t\tif (result == null || result.length() == 0) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_112 = NL;
  protected final String TEXT_113 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_114 = NL + "\t\t";
  protected final String TEXT_115 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_116 = ") ";
  protected final String TEXT_117 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_118 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_119 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_120 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_121 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_122 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_123 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_124 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_125 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_126 = "\t" + NL + "\t}";
  protected final String TEXT_127 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_128 = " createdFont;";
  protected final String TEXT_129 = "\t";
  protected final String TEXT_130 = NL;
  protected final String TEXT_131 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_132 = " style = (";
  protected final String TEXT_133 = ")  ";
  protected final String TEXT_134 = ".getStyle(";
  protected final String TEXT_135 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_136 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_137 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_138 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_140 = " getLabelIcon() {";
  protected final String TEXT_141 = NL + "\t\treturn ";
  protected final String TEXT_142 = ".getImage(getDiagramNode().getElement().eClass());";
  protected final String TEXT_143 = NL + "\t\treturn null;";
  protected final String TEXT_144 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_145 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_146 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\taddExternalRefresher(getLabelRefresher());" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tremoveExternalRefresher(getLabelRefresher());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_147 = NL;
  protected final String TEXT_148 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_149 = " domainModelRefresher = new ";
  protected final String TEXT_150 = "(this);" + NL;
  protected final String TEXT_151 = NL;
  protected final String TEXT_152 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_153 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_154 = " feature, ";
  protected final String TEXT_155 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + NL;
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_158 = ".ExternalRefresher labelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_159 = ".ExternalRefresher getLabelRefresher() {" + NL + "\t\tif (labelRefresher == null && getDiagramNode() != null) {" + NL + "\t\t\tlabelRefresher = new ";
  protected final String TEXT_160 = ".ExternalRefresherAdapter(this, getDiagramNode().getElement());" + NL + "\t\t}" + NL + "\t\treturn labelRefresher;" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_161 = NL;
  protected final String TEXT_162 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_163 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_164 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_165 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_166 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_167 = NL;
  protected final String TEXT_168 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_169 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_170 = NL;
  protected final String TEXT_171 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_173 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_175 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_176 = NL;
  protected final String TEXT_177 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_178 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_179 = NL;
  protected final String TEXT_180 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_181 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_182 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_183 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_184 = " createLabel() {";
  protected final String TEXT_185 = NL + "\t\treturn new ";
  protected final String TEXT_186 = "();";
  protected final String TEXT_187 = NL + "\t\treturn ";
  protected final String TEXT_188 = ";";
  protected final String TEXT_189 = NL + "\t\treturn new ";
  protected final String TEXT_190 = "();";
  protected final String TEXT_191 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_192 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_193 = " label = createLabel();";
  protected final String TEXT_194 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_195 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_196 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_197 = NL + NL + "\t/**";
  protected final String TEXT_198 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_199 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_200 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_201 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_202 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_203 = "(";
  protected final String TEXT_204 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_205 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_206 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_207 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_208 = NL;
  protected final String TEXT_209 = NL;
  protected final String TEXT_210 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_211 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_212 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_213 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_216 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_217 = "()";
  protected final String TEXT_218 = " {" + NL + "\t\t\tprotected ";
  protected final String TEXT_219 = " getGraphicalEditPart() {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_220 = ".this;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_221 = ");";
  protected final String TEXT_222 = NL;
  protected final String TEXT_223 = "\t\tinstallEditPolicy(";
  protected final String TEXT_224 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_225 = "());";
  protected final String TEXT_226 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_227 = " createLabelTextDisplayer() {" + NL + "\t\t\treturn ";
  protected final String TEXT_228 = ".this.getLabelTextDisplayer();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_229 = " getImage() {" + NL + "\t\t\treturn getLabelIcon();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_230 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_231 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_232 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final GenChildLabelNode genChildNode = (GenChildLabelNode)genElement;
GenNode genHost = genChildNode;
GenNode genNode = genChildNode;	/*var used by componentEditPolicy.javajetinc*/
GenClass underlyingMetaClass = genHost.getDomainMetaClass();
GenDiagram genDiagram = genChildNode.getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
LabelModelFacet labelModelFacet = genChildNode.getLabelModelFacet();
final boolean isReadOnly = genChildNode.isLabelReadOnly();

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    stringBuffer.append(TEXT_4);
    stringBuffer.append(TEXT_5);
    
class FeatureGetAccessorHelper {
	/**
	 * @@param containerName the name of the container
	 * @@param feature the feature whose value is in interest
	 * @@param containerMetaClass the <code>GenClass</code> of the container, or <code>null</code>, if the container is declared as an <code>EObject</code>.
	 * @@param needsCastToResultType whether the cast to the result type is required (this parameter is only used if the <code>EClass</code> this feature belongs to is an external interface). 
	 */
	public void appendFeatureValueGetter(String containerName, GenFeature feature, GenClass containerMetaClass, boolean needsCastToResultType) {
		if (feature.getGenClass().isExternalInterface()) {
			boolean needsCastToEObject = containerMetaClass != null && containerMetaClass.isExternalInterface();
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(feature.isListType() ? "java.util.Collection" : feature.getTypeGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_7);
    
			}
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_9);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_10);
    
			}

    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_13);
    
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_14);
    
			}
		} else {
			boolean needsCastToFeatureGenType = containerMetaClass == null || containerMetaClass.isExternalInterface();
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_16);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_17);
    
			}

    stringBuffer.append(TEXT_18);
    stringBuffer.append(feature.getGetAccessor());
    stringBuffer.append(TEXT_19);
    
		}
	}
}
final FeatureGetAccessorHelper myFeatureGetAccessorHelper = new FeatureGetAccessorHelper();

    stringBuffer.append(TEXT_20);
    importManager.emitPackageStatement(stringBuffer);
importManager.registerInnerClass("TreeEditPartAdapter");

importManager.addImport("org.eclipse.gef.EditPolicy");
importManager.addImport("org.eclipse.gef.Request");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.gmf.runtime.notation.NotationPackage");
importManager.addImport("java.util.List");

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_21);
    stringBuffer.append(genChildNode.getEditPartClassName());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelController"));
    stringBuffer.append(TEXT_26);
    {
GenCommonBase genCommonBase = genChildNode;
    stringBuffer.append(TEXT_27);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_29);
    }
    stringBuffer.append(TEXT_30);
    stringBuffer.append(TEXT_31);
    
if (!isReadOnly) {

    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_33);
    
}

    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer"));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(genChildNode.getEditPartClassName());
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_44);
    
	String resolvedSemanticElement = "(" + importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()) + ") getDiagramNode().getElement()";
	final String primaryView = "getDiagramNode()";

    
if (!isReadOnly) {

    stringBuffer.append(TEXT_45);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.LabelDirectEditPolicy"));
    stringBuffer.append(TEXT_48);
    
}

    stringBuffer.append(TEXT_49);
    
{
	/*See xpt::diagram::policies::ClassNames.ext#getComponentEditPolicyClassName(GenCommonBase)*/
	String editPolicyClassName = genElement.getEditPartClassName();
	if (editPolicyClassName.endsWith(GenCommonBase.EDIT_PART_SUFFIX)) {
		editPolicyClassName = editPolicyClassName.substring(0, editPolicyClassName.length() - GenCommonBase.EDIT_PART_SUFFIX.length());
	}
	editPolicyClassName += "ComponentEditPolicy";

    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPoliciesPackageName() + "." + editPolicyClassName));
    stringBuffer.append(TEXT_52);
    
}

    {
GenCommonBase genCommonBase = genChildNode;
    stringBuffer.append(TEXT_53);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_54);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_56);
    }
    stringBuffer.append(TEXT_57);
    
{
	List<OpenDiagramBehaviour> behaviours = genCommonBase.getBehaviour(OpenDiagramBehaviour.class);
	for(int i = 0, iMax = behaviours.size(); i < iMax; i++) {
	/*doesn't make sense to install more than one policy for the same role*/ 
		OpenDiagramBehaviour next = behaviours.get(i);

    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.EditPolicyRoles"));
    stringBuffer.append(TEXT_59);
    if (i > 0) {
    stringBuffer.append(TEXT_60);
    stringBuffer.append(i+1);
    stringBuffer.append(TEXT_61);
    }
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName(genCommonBase.getBehaviour(OpenDiagramBehaviour.class).get(0).getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_63);
    
	}
}

    }
    stringBuffer.append(TEXT_64);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_67);
    
if (!isReadOnly) {

    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_69);
    
}

    stringBuffer.append(TEXT_70);
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_73);
    
if (!isReadOnly) {

    stringBuffer.append(TEXT_74);
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.LabelCellEditorLocator"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_84);
    
}

    stringBuffer.append(TEXT_85);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer"));
    stringBuffer.append(TEXT_94);
    
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	String viewPattern = featureLabelModelFacet.getViewPattern();
	if (viewPattern == null || viewPattern.length() == 0) {
		StringBuffer patternBuffer = new StringBuffer();
		for(int i = 0; i < featureLabelModelFacet.getMetaFeatures().size(); i++) {
			patternBuffer.append("{").append(i).append("} ");
		}
		viewPattern = patternBuffer.toString().trim();
	}
	String editPattern = null;
	if (!isReadOnly) {
		editPattern = featureLabelModelFacet.getEditPattern();
		if (editPattern == null || editPattern.length() == 0) {
			StringBuffer patternBuffer = new StringBuffer();
			for(int i = 0; i < featureLabelModelFacet.getMetaFeatures().size(); i++) {
				patternBuffer.append("{").append(i).append("} ");
			}
			editPattern = patternBuffer.toString().trim();
		}
	}

    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.SimpleLabelTextDisplayer"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(viewPattern);
    stringBuffer.append(TEXT_97);
    if (!isReadOnly) {
    stringBuffer.append(TEXT_98);
    stringBuffer.append(editPattern);
    stringBuffer.append(TEXT_99);
    }
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_101);
    
	for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
		GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_104);
    if (it.hasNext()) {
    stringBuffer.append(TEXT_105);
    }

    
	}

    stringBuffer.append(TEXT_106);
    
} else {

    stringBuffer.append(TEXT_107);
    
}

    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_111);
    stringBuffer.append(TEXT_112);
    
boolean isFixedFontSetInFigure;
{
	StyleAttributes styleAttributes = (genElement.getViewmap() == null) ? null : (StyleAttributes)genElement.getViewmap().find(StyleAttributes.class);
	isFixedFontSetInFigure = styleAttributes != null && styleAttributes.isFixedFont();
}

    stringBuffer.append(TEXT_113);
    
if (!isFixedFontSetInFigure) {

    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_125);
    
}

    stringBuffer.append(TEXT_126);
    
if (!isFixedFontSetInFigure) {

    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_128);
    
}

    stringBuffer.append(TEXT_129);
    stringBuffer.append(TEXT_130);
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_133);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_140);
    
if (genChildNode.isLabelElementIcon()) {

    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_142);
    
} else {

    stringBuffer.append(TEXT_143);
    
}

    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.TreeEditPart"));
    stringBuffer.append(TEXT_145);
    /*@@ include file="adapters/propertySource.javajetinc"*/
    stringBuffer.append(TEXT_146);
    stringBuffer.append(TEXT_147);
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(TEXT_156);
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelController"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(TEXT_161);
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(TEXT_167);
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_169);
    stringBuffer.append(TEXT_170);
    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_175);
    stringBuffer.append(TEXT_176);
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_178);
    
final Viewmap viewmap = genChildNode.getViewmap();

    stringBuffer.append(TEXT_179);
    
final String figureQualifiedClassName;
if (viewmap instanceof ParentAssignedViewmap) {
	ParentAssignedViewmap parentAssignedViewmap = (ParentAssignedViewmap) viewmap;
	figureQualifiedClassName = parentAssignedViewmap.getFigureQualifiedClassName() == null ? "org.eclipse.draw2d.IFigure" : parentAssignedViewmap.getFigureQualifiedClassName();
} else if (viewmap instanceof FigureViewmap) {
	String figureQualifiedClassNameCandidate = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassNameCandidate == null || figureQualifiedClassNameCandidate.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.Label";
	} else {
		figureQualifiedClassName = figureQualifiedClassNameCandidate;
	}
} else if (viewmap instanceof SnippetViewmap) {
	figureQualifiedClassName = "org.eclipse.draw2d.IFigure";
} else if (viewmap instanceof InnerClassViewmap) {
	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();
} else {
	figureQualifiedClassName = "org.eclipse.draw2d.IFigure";
}
final String figureImportedName;
if (viewmap instanceof InnerClassViewmap) {
	figureImportedName = figureQualifiedClassName;	//do not import inner class
} else {
	figureImportedName = importManager.getImportedName(figureQualifiedClassName);
}
if (viewmap instanceof ParentAssignedViewmap) {
	final ParentAssignedViewmap parentAssignedViewmap = (ParentAssignedViewmap) viewmap;

    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_181);
    stringBuffer.append((parentAssignedViewmap.getSetterName() == null ? "setLabel" : parentAssignedViewmap.getSetterName()));
    stringBuffer.append(TEXT_182);
    } else { 
    stringBuffer.append(TEXT_183);
    stringBuffer.append(figureImportedName);
    stringBuffer.append(TEXT_184);
    
if (viewmap instanceof FigureViewmap) {

    stringBuffer.append(TEXT_185);
    stringBuffer.append(figureImportedName);
    stringBuffer.append(TEXT_186);
    } // instanceof FigureViewmap
 else if (viewmap instanceof SnippetViewmap) {
    stringBuffer.append(TEXT_187);
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_188);
    } // instanceof SnippetViewmap; FIXME : obtain figure class name to generate getter
 else if (viewmap instanceof InnerClassViewmap) {

    stringBuffer.append(TEXT_189);
    stringBuffer.append(figureImportedName);
    stringBuffer.append(TEXT_190);
    }
    stringBuffer.append(TEXT_191);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_192);
    stringBuffer.append(figureImportedName);
    stringBuffer.append(TEXT_193);
    
if ("org.eclipse.draw2d.Label".equals(figureQualifiedClassName) || viewmap instanceof InnerClassViewmap) {

    stringBuffer.append(TEXT_194);
    
} else {

    stringBuffer.append(TEXT_195);
    
}

    stringBuffer.append(TEXT_196);
    }	/*not parent-assigned*/
    stringBuffer.append(TEXT_197);
    
if (!"org.eclipse.draw2d.Label".equals(figureQualifiedClassName) && viewmap instanceof InnerClassViewmap==false) {

    stringBuffer.append(TEXT_198);
    
}

    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_201);
    
String labelSetterName = "setLabel"; // same assumption in NodeEditPart
String labelFigureClassName = "org.eclipse.draw2d.IFigure";
if (viewmap instanceof ParentAssignedViewmap) {
	ParentAssignedViewmap parentAssignedViewmap = (ParentAssignedViewmap) viewmap;
	if (parentAssignedViewmap.getSetterName() != null) {
		labelSetterName = parentAssignedViewmap.getSetterName();
	}
	if (parentAssignedViewmap.getFigureQualifiedClassName() != null) {
		labelFigureClassName = parentAssignedViewmap.getFigureQualifiedClassName();
	}
} // FIXME perhaps, there's no sense to have setLabel for any other viewmap than ParentAssigned?

    stringBuffer.append(TEXT_202);
    stringBuffer.append(labelSetterName);
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName(labelFigureClassName));
    stringBuffer.append(TEXT_204);
    
if ("org.eclipse.draw2d.Label".equals(labelFigureClassName)) {

    stringBuffer.append(TEXT_205);
    
} else {

    stringBuffer.append(TEXT_206);
    
}

    stringBuffer.append(TEXT_207);
    
if (viewmap instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) viewmap).getClassBody();

    stringBuffer.append(TEXT_208);
    stringBuffer.append(classBody);
    stringBuffer.append(TEXT_209);
    
if (classBody.indexOf("DPtoLP") != -1) {

    stringBuffer.append(TEXT_210);
    
}

    
}

    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(TEXT_214);
    
{
	/*See xpt::diagram::policies::ClassNames.ext#getComponentEditPolicyClassName(GenCommonBase)*/
	String editPolicyClassName = genElement.getEditPartClassName();
	if (editPolicyClassName.endsWith(GenCommonBase.EDIT_PART_SUFFIX)) {
		editPolicyClassName = editPolicyClassName.substring(0, editPolicyClassName.length() - GenCommonBase.EDIT_PART_SUFFIX.length());
	}
	editPolicyClassName += "ComponentEditPolicy";

    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPoliciesPackageName() + "." + editPolicyClassName));
    stringBuffer.append(TEXT_217);
    
		if (genElement instanceof GenNode) {
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(genElement.getEditPartClassName());
    stringBuffer.append(TEXT_220);
    }
    stringBuffer.append(TEXT_221);
    
}

    
if (!isReadOnly) {

    stringBuffer.append(TEXT_222);
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.LabelDirectEditPolicy"));
    stringBuffer.append(TEXT_225);
    
}

    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer"));
    stringBuffer.append(TEXT_227);
    stringBuffer.append(genChildNode.getEditPartClassName());
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_231);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_232);
    return stringBuffer.toString();
  }
}
@


1.25
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.24
log
@[176362]: ClassCastException while selecting items in tree outline of the generated diagram + test to reproduce;
ComponentEditPolicy.xpt: replace int constant with a reference thereto to facilitate readability
@
text
@d44 209
a252 328
  protected final String TEXT_24 = " {";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL;
  protected final String TEXT_30 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_31 = " manager;" + NL;
  protected final String TEXT_32 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_33 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_34 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_35 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_36 = NL;
  protected final String TEXT_37 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_38 = " view = (";
  protected final String TEXT_39 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_40 = " view = (";
  protected final String TEXT_41 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_42 = NL;
  protected final String TEXT_43 = "\t\tinstallEditPolicy(";
  protected final String TEXT_44 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_45 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_46 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_47 = NL;
  protected final String TEXT_48 = "\t\t\t\t\tprotected ";
  protected final String TEXT_49 = " getDirectEditCommand(";
  protected final String TEXT_50 = " request) {";
  protected final String TEXT_51 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_52 = ".INSTANCE;";
  protected final String TEXT_53 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_54 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_55 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_56 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_57 = "(";
  protected final String TEXT_58 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_59 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_60 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_61 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_62 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_63 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_64 = " editingDomain = ";
  protected final String TEXT_65 = ".getEditingDomain(";
  protected final String TEXT_66 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_67 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_68 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_69 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_70 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_71 = " createDomainModelCommand(";
  protected final String TEXT_72 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_73 = " element = ";
  protected final String TEXT_74 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_75 = " result = new ";
  protected final String TEXT_76 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_77 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_78 = " ";
  protected final String TEXT_79 = "feature = (";
  protected final String TEXT_80 = ") ";
  protected final String TEXT_81 = ".eINSTANCE.get";
  protected final String TEXT_82 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_83 = ".parseValue(feature, values[";
  protected final String TEXT_84 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_85 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_86 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_87 = " ";
  protected final String TEXT_88 = "values = new ";
  protected final String TEXT_89 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_90 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_91 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_92 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_93 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_94 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_95 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_96 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_97 = NL + "\t\t\t\t});";
  protected final String TEXT_98 = NL;
  protected final String TEXT_99 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_100 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_101 = "());";
  protected final String TEXT_102 = NL;
  protected final String TEXT_103 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_104 = "\", new ";
  protected final String TEXT_105 = "()); //$NON-NLS-1$";
  protected final String TEXT_106 = NL;
  protected final String TEXT_107 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_108 = ".OPEN_ROLE";
  protected final String TEXT_109 = " + \"";
  protected final String TEXT_110 = "\" ";
  protected final String TEXT_111 = ", new ";
  protected final String TEXT_112 = "());";
  protected final String TEXT_113 = NL + "\t}" + NL;
  protected final String TEXT_114 = NL;
  protected final String TEXT_115 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_116 = " req) {";
  protected final String TEXT_117 = NL + "\t\tif (";
  protected final String TEXT_118 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_119 = NL;
  protected final String TEXT_120 = "if (";
  protected final String TEXT_121 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_122 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}";
  protected final String TEXT_123 = NL;
  protected final String TEXT_124 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_125 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_126 = "(this, ";
  protected final String TEXT_127 = ".class, new ";
  protected final String TEXT_128 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_129 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_130 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\t";
  protected final String TEXT_131 = " zoomManager = (";
  protected final String TEXT_132 = ") getViewer().getProperty(";
  protected final String TEXT_133 = ".class.toString());" + NL + "\t\t\t\t\tdouble zoomLevel = zoomManager == null ? 1.0 : zoomManager.getZoom();" + NL + "\t\t\t\t\tif (zoomLevel > 1.0 && getLabel().getFont() != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_134 = "[] datas = getLabel().getFont().getFontData();" + NL + "\t\t\t\t\t\tfor(int i = 0; i < datas.length; i++) {" + NL + "\t\t\t\t\t\t\tdatas[i].height *= zoomLevel;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_135 = " font = new ";
  protected final String TEXT_136 = "(getLabel().getFont().getDevice(), datas);" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(font);" + NL + "\t\t\t\t\t\tcelleditor.getControl().addDisposeListener(new ";
  protected final String TEXT_137 = "() {" + NL + "\t\t\t\t\t\t\tpublic void widgetDisposed(";
  protected final String TEXT_138 = " e) {" + NL + "\t\t\t\t\t\t\t\tfont.dispose();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint avr = ";
  protected final String TEXT_139 = ".getFontMetrics(celleditor.getControl().getFont()).getAverageCharWidth();" + NL + "\t\t\t\t\trect.setSize(new ";
  protected final String TEXT_140 = "(celleditor.getControl().computeSize(";
  protected final String TEXT_141 = ".DEFAULT, ";
  protected final String TEXT_142 = ".DEFAULT)).expand(avr * 2, 0));" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_143 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_144 = NL;
  protected final String TEXT_145 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String VIEW_PATTERN = \"";
  protected final String TEXT_146 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_147 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_148 = " element = ";
  protected final String TEXT_149 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t\tif (result == null || result.length() == 0) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_150 = " element = ";
  protected final String TEXT_151 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn \"\";\t//$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t\tif (result == null) {" + NL + "\t\t\treturn \"\";\t//$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String buildTextByPattern(";
  protected final String TEXT_152 = " element, String pattern) {";
  protected final String TEXT_153 = NL + "\t\treturn ";
  protected final String TEXT_154 = ".format(pattern, new Object[] {";
  protected final String TEXT_155 = NL + "\t\t\tnew ";
  protected final String TEXT_156 = "(";
  protected final String TEXT_157 = ")";
  protected final String TEXT_158 = " == null ? \"\" : ";
  protected final String TEXT_159 = ",";
  protected final String TEXT_160 = NL + "\t\t});";
  protected final String TEXT_161 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn null;";
  protected final String TEXT_162 = NL + "\t}";
  protected final String TEXT_163 = NL;
  protected final String TEXT_164 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_165 = NL + "\t\t";
  protected final String TEXT_166 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_167 = ") ";
  protected final String TEXT_168 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_169 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_170 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_171 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_172 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_173 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_174 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_175 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_176 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_177 = "\t" + NL + "\t}";
  protected final String TEXT_178 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_179 = " createdFont;";
  protected final String TEXT_180 = "\t";
  protected final String TEXT_181 = NL;
  protected final String TEXT_182 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_183 = " style = (";
  protected final String TEXT_184 = ")  ";
  protected final String TEXT_185 = ".getStyle(";
  protected final String TEXT_186 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_187 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_188 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_189 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_190 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_191 = " getLabelIcon() {";
  protected final String TEXT_192 = NL + "\t\treturn ";
  protected final String TEXT_193 = ".getImage(getDiagramNode().getElement().eClass());";
  protected final String TEXT_194 = NL + "\t\treturn null;";
  protected final String TEXT_195 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_196 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_197 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_198 = NL;
  protected final String TEXT_199 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_200 = " domainModelRefresher = new ";
  protected final String TEXT_201 = "(this);" + NL;
  protected final String TEXT_202 = NL;
  protected final String TEXT_203 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_204 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_205 = " feature, ";
  protected final String TEXT_206 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_207 = NL;
  protected final String TEXT_208 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_209 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_210 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_211 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_212 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_213 = NL;
  protected final String TEXT_214 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_215 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_216 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_217 = ".eINSTANCE.get";
  protected final String TEXT_218 = "(), labelRefresher);";
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_221 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_222 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_223 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_224 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_225 = NL;
  protected final String TEXT_226 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_227 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_228 = NL;
  protected final String TEXT_229 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_230 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_231 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_232 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_233 = " createLabel() {";
  protected final String TEXT_234 = NL + "\t\treturn new ";
  protected final String TEXT_235 = "();";
  protected final String TEXT_236 = NL + "\t\treturn ";
  protected final String TEXT_237 = ";";
  protected final String TEXT_238 = NL + "\t\treturn new ";
  protected final String TEXT_239 = "();";
  protected final String TEXT_240 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_241 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_242 = " label = createLabel();";
  protected final String TEXT_243 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_244 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_245 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_246 = NL + NL + "\t/**";
  protected final String TEXT_247 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_248 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_249 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_250 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_251 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_252 = "(";
  protected final String TEXT_253 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_254 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_255 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_256 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_257 = NL;
  protected final String TEXT_258 = NL;
  protected final String TEXT_259 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_260 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_261 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_262 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_263 = NL;
  protected final String TEXT_264 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_265 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_266 = "()";
  protected final String TEXT_267 = " {" + NL + "\t\t\tprotected ";
  protected final String TEXT_268 = " getGraphicalEditPart() {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_269 = ".this;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_270 = ");";
  protected final String TEXT_271 = NL;
  protected final String TEXT_272 = "\t\tinstallEditPolicy(";
  protected final String TEXT_273 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_274 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_275 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_276 = NL;
  protected final String TEXT_277 = "\t\t\t\t\tprotected ";
  protected final String TEXT_278 = " getDirectEditCommand(";
  protected final String TEXT_279 = " request) {";
  protected final String TEXT_280 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_281 = ".INSTANCE;";
  protected final String TEXT_282 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_283 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_284 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_285 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_286 = "(";
  protected final String TEXT_287 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_288 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_289 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_290 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_291 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_292 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_293 = " editingDomain = ";
  protected final String TEXT_294 = ".getEditingDomain(";
  protected final String TEXT_295 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_296 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_297 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_298 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_299 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_300 = " createDomainModelCommand(";
  protected final String TEXT_301 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_302 = " element = ";
  protected final String TEXT_303 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_304 = " result = new ";
  protected final String TEXT_305 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_306 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_307 = " ";
  protected final String TEXT_308 = "feature = (";
  protected final String TEXT_309 = ") ";
  protected final String TEXT_310 = ".eINSTANCE.get";
  protected final String TEXT_311 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_312 = ".parseValue(feature, values[";
  protected final String TEXT_313 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_314 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_315 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_316 = " ";
  protected final String TEXT_317 = "values = new ";
  protected final String TEXT_318 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_319 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_320 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_321 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_322 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_323 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_324 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_325 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_326 = NL + "\t\t\t\t});";
  protected final String TEXT_327 = NL + "\t\t}" + NL;
  protected final String TEXT_328 = NL;
  protected final String TEXT_329 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_330 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_331 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_332 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_333 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_334 = "(this, ";
  protected final String TEXT_335 = ".class, new ";
  protected final String TEXT_336 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_337 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_338 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_339 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_340 = NL;
  protected final String TEXT_341 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_342 = " domainModelRefresher = new ";
  protected final String TEXT_343 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_344 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_345 = ".eINSTANCE.get";
  protected final String TEXT_346 = "(), labelRefresher);";
  protected final String TEXT_347 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_348 = " getImage() {" + NL + "\t\t\treturn getLabelIcon();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_349 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_350 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_351 = NL;
d370 4
a375 3
    stringBuffer.append(TEXT_25);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(genCommonBase.getVisualID());
a376 1
    }
d378 1
d380 3
d386 1
a386 1
    stringBuffer.append(TEXT_30);
d388 1
a388 1
    stringBuffer.append(TEXT_31);
a391 4
    stringBuffer.append(TEXT_32);
    stringBuffer.append(genChildNode.getEditPartClassName());
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d395 1
d397 1
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d405 6
a416 1
		String editPatternCode = "EDIT_PATTERN";	//declared in labelText.javajetinc, used in directEditCommand.jetinc.
a417 5
    stringBuffer.append(TEXT_42);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
a418 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d420 1
d422 1
a423 126
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_50);
    
if (labelModelFacet instanceof FeatureLabelModelFacet == false) {

    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_52);
    
} else {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = featureLabelModelFacet.getMetaFeatures();

    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_54);
    
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {

    stringBuffer.append(TEXT_55);
    
	}

    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(editPatternCode);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_61);
    
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {

    stringBuffer.append(TEXT_62);
    
	}

    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(metaFeatures.size());
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_76);
    
	boolean haveDeclaredValues = false;
	for(int i = 0; i < metaFeatures.size(); i++) {
		GenFeature nextFeatureToSet = (GenFeature) metaFeatures.get(i);
		EStructuralFeature nextEcoreFeature = nextFeatureToSet.getEcoreFeature();

    stringBuffer.append(TEXT_77);
    if (i == 0) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_78);
    }
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName(nextFeatureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(nextFeatureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(i);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_85);
    
		if (nextEcoreFeature.isMany()) {

    stringBuffer.append(TEXT_86);
    if (!haveDeclaredValues) { haveDeclaredValues = true;
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_87);
    }
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(nextFeatureToSet.getAccessorName());
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_92);
    
		} else {

    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_95);
    
		}

    
	}

    stringBuffer.append(TEXT_96);
d427 1
a427 5
    stringBuffer.append(TEXT_97);
    
}

    stringBuffer.append(TEXT_98);
d437 1
a437 1
    stringBuffer.append(TEXT_99);
d439 1
a439 1
    stringBuffer.append(TEXT_100);
d441 1
a441 1
    stringBuffer.append(TEXT_101);
d447 1
a447 1
    stringBuffer.append(TEXT_102);
d451 1
a451 1
    stringBuffer.append(TEXT_103);
d453 1
a453 1
    stringBuffer.append(TEXT_104);
d455 1
a455 1
    stringBuffer.append(TEXT_105);
d457 1
a457 1
    stringBuffer.append(TEXT_106);
d465 1
a465 1
    stringBuffer.append(TEXT_107);
d467 1
a467 1
    stringBuffer.append(TEXT_108);
d469 1
a469 1
    stringBuffer.append(TEXT_109);
d471 1
a471 1
    stringBuffer.append(TEXT_110);
d473 1
a473 1
    stringBuffer.append(TEXT_111);
d475 1
a475 1
    stringBuffer.append(TEXT_112);
d481 3
a483 3
    stringBuffer.append(TEXT_113);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(TEXT_115);
d485 1
a485 1
    stringBuffer.append(TEXT_116);
d489 1
a489 1
    stringBuffer.append(TEXT_117);
d491 1
a491 1
    stringBuffer.append(TEXT_118);
d495 2
a496 2
    stringBuffer.append(TEXT_119);
    stringBuffer.append(TEXT_120);
d498 1
a498 1
    stringBuffer.append(TEXT_121);
d500 1
a500 1
    stringBuffer.append(TEXT_122);
d504 2
a505 2
    stringBuffer.append(TEXT_123);
    stringBuffer.append(TEXT_124);
d507 1
a507 1
    stringBuffer.append(TEXT_125);
d509 1
a509 1
    stringBuffer.append(TEXT_126);
d511 13
a523 31
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager"));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager"));
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.DisposeListener"));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.DisposeEvent"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FigureUtilities"));
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_142);
d527 16
a542 2
    stringBuffer.append(TEXT_143);
    stringBuffer.append(TEXT_144);
a543 12
/*genFeature.getObjectType() throws NPE on primitive types. This is a workaround. */
HashMap primitiveTypeToWrapperClassName = new HashMap();
primitiveTypeToWrapperClassName.put(Boolean.TYPE, "Boolean");
primitiveTypeToWrapperClassName.put(Byte.TYPE, "Byte");
primitiveTypeToWrapperClassName.put(Character.TYPE, "Character");
primitiveTypeToWrapperClassName.put(Double.TYPE, "Double");
primitiveTypeToWrapperClassName.put(Float.TYPE, "Float");
primitiveTypeToWrapperClassName.put(Integer.TYPE, "Integer");
primitiveTypeToWrapperClassName.put(Long.TYPE, "Long");
primitiveTypeToWrapperClassName.put(Short.TYPE, "Short");
String viewPattern = null;
String editPattern = null;
d546 1
a546 1
	viewPattern = featureLabelModelFacet.getViewPattern();
d554 9
a562 5
	editPattern = featureLabelModelFacet.getEditPattern();
	if (editPattern == null || editPattern.length() == 0) {
		StringBuffer patternBuffer = new StringBuffer();
		for(int i = 0; i < featureLabelModelFacet.getMetaFeatures().size(); i++) {
			patternBuffer.append("{").append(i).append("} ");
a563 1
		editPattern = patternBuffer.toString().trim();
a564 1
}
d566 3
a568 1
    stringBuffer.append(TEXT_145);
d570 3
a572 1
    stringBuffer.append(TEXT_146);
d574 5
a578 18
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_152);
    
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;

    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
    stringBuffer.append(TEXT_154);
a581 1
		if (next.isPrimitiveType()) {
d583 9
a591 3
    stringBuffer.append(TEXT_155);
    stringBuffer.append(primitiveTypeToWrapperClassName.get(next.getTypeGenClassifier().getEcoreClassifier().getInstanceClass()));
    stringBuffer.append(TEXT_156);
d593 1
a593 3
		}
		myFeatureGetAccessorHelper.appendFeatureValueGetter("element", next, underlyingMetaClass, false);
		if (next.isPrimitiveType()) {
d595 1
a595 1
    stringBuffer.append(TEXT_157);
d597 1
a597 2
		} else {
			if (String.class.equals(next.getEcoreFeature().getEType().getInstanceClass())) {
d599 1
a599 1
    stringBuffer.append(TEXT_158);
d601 1
a601 8
				myFeatureGetAccessorHelper.appendFeatureValueGetter("element", next, underlyingMetaClass, false);
			}
		}
		if (it.hasNext()) {
    stringBuffer.append(TEXT_159);
    }
    
	}
d603 8
a610 10
    stringBuffer.append(TEXT_160);
    
} else {

    stringBuffer.append(TEXT_161);
    
}

    stringBuffer.append(TEXT_162);
    stringBuffer.append(TEXT_163);
d618 1
a618 1
    stringBuffer.append(TEXT_164);
d622 1
a622 1
    stringBuffer.append(TEXT_165);
d624 1
a624 1
    stringBuffer.append(TEXT_166);
d626 1
a626 1
    stringBuffer.append(TEXT_167);
d628 1
a628 1
    stringBuffer.append(TEXT_168);
d630 1
a630 1
    stringBuffer.append(TEXT_169);
d632 1
a632 1
    stringBuffer.append(TEXT_170);
d634 1
a634 1
    stringBuffer.append(TEXT_171);
d636 1
a636 1
    stringBuffer.append(TEXT_172);
d638 1
a638 1
    stringBuffer.append(TEXT_173);
d640 1
a640 1
    stringBuffer.append(TEXT_174);
d642 1
a642 1
    stringBuffer.append(TEXT_175);
d644 1
a644 1
    stringBuffer.append(TEXT_176);
d648 1
a648 1
    stringBuffer.append(TEXT_177);
d652 1
a652 1
    stringBuffer.append(TEXT_178);
d654 1
a654 1
    stringBuffer.append(TEXT_179);
d658 3
a660 3
    stringBuffer.append(TEXT_180);
    stringBuffer.append(TEXT_181);
    stringBuffer.append(TEXT_182);
d662 1
a662 1
    stringBuffer.append(TEXT_183);
d664 1
a664 1
    stringBuffer.append(TEXT_184);
d666 1
a666 1
    stringBuffer.append(TEXT_185);
d668 1
a668 1
    stringBuffer.append(TEXT_186);
d670 1
a670 1
    stringBuffer.append(TEXT_187);
d672 1
a672 1
    stringBuffer.append(TEXT_188);
d674 1
a674 1
    stringBuffer.append(TEXT_189);
d676 1
a676 1
    stringBuffer.append(TEXT_190);
d678 1
a678 1
    stringBuffer.append(TEXT_191);
d682 1
a682 1
    stringBuffer.append(TEXT_192);
d684 1
a684 1
    stringBuffer.append(TEXT_193);
d688 1
a688 1
    stringBuffer.append(TEXT_194);
d692 1
a692 1
    stringBuffer.append(TEXT_195);
d694 1
a694 1
    stringBuffer.append(TEXT_196);
d696 3
a698 3
    stringBuffer.append(TEXT_197);
    stringBuffer.append(TEXT_198);
    stringBuffer.append(TEXT_199);
d700 1
a700 1
    stringBuffer.append(TEXT_200);
d702 3
a704 3
    stringBuffer.append(TEXT_201);
    stringBuffer.append(TEXT_202);
    stringBuffer.append(TEXT_203);
d706 1
a706 1
    stringBuffer.append(TEXT_204);
d708 1
a708 1
    stringBuffer.append(TEXT_205);
d710 11
a720 3
    stringBuffer.append(TEXT_206);
    stringBuffer.append(TEXT_207);
    stringBuffer.append(TEXT_208);
d722 1
a722 1
    stringBuffer.append(TEXT_209);
d724 1
a724 1
    stringBuffer.append(TEXT_210);
d726 1
a726 1
    stringBuffer.append(TEXT_211);
d728 3
a730 3
    stringBuffer.append(TEXT_212);
    stringBuffer.append(TEXT_213);
    stringBuffer.append(TEXT_214);
d732 3
a734 18
    stringBuffer.append(TEXT_215);
    
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
		GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_217);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_218);
    
	}
}

    stringBuffer.append(TEXT_219);
    stringBuffer.append(TEXT_220);
d736 1
a736 1
    stringBuffer.append(TEXT_221);
d738 1
a738 1
    stringBuffer.append(TEXT_222);
d740 1
a740 1
    stringBuffer.append(TEXT_223);
d742 3
a744 3
    stringBuffer.append(TEXT_224);
    stringBuffer.append(TEXT_225);
    stringBuffer.append(TEXT_226);
d746 1
a746 1
    stringBuffer.append(TEXT_227);
d750 1
a750 1
    stringBuffer.append(TEXT_228);
d779 1
a779 1
    stringBuffer.append(TEXT_229);
d781 1
a781 1
    stringBuffer.append(TEXT_230);
d783 1
a783 1
    stringBuffer.append(TEXT_231);
d785 1
a785 1
    stringBuffer.append(TEXT_232);
d787 1
a787 1
    stringBuffer.append(TEXT_233);
d791 1
a791 1
    stringBuffer.append(TEXT_234);
d793 1
a793 1
    stringBuffer.append(TEXT_235);
d796 1
a796 1
    stringBuffer.append(TEXT_236);
d798 1
a798 1
    stringBuffer.append(TEXT_237);
d802 1
a802 1
    stringBuffer.append(TEXT_238);
d804 1
a804 1
    stringBuffer.append(TEXT_239);
d806 1
a806 1
    stringBuffer.append(TEXT_240);
d808 1
a808 1
    stringBuffer.append(TEXT_241);
d810 1
a810 1
    stringBuffer.append(TEXT_242);
d814 1
a814 1
    stringBuffer.append(TEXT_243);
d818 1
a818 1
    stringBuffer.append(TEXT_244);
d822 1
a822 1
    stringBuffer.append(TEXT_245);
d824 1
a824 1
    stringBuffer.append(TEXT_246);
d828 1
a828 1
    stringBuffer.append(TEXT_247);
d832 1
a832 1
    stringBuffer.append(TEXT_248);
d834 1
a834 1
    stringBuffer.append(TEXT_249);
d836 1
a836 1
    stringBuffer.append(TEXT_250);
d850 1
a850 1
    stringBuffer.append(TEXT_251);
d852 1
a852 1
    stringBuffer.append(TEXT_252);
d854 1
a854 1
    stringBuffer.append(TEXT_253);
d858 1
a858 1
    stringBuffer.append(TEXT_254);
d862 1
a862 1
    stringBuffer.append(TEXT_255);
d866 1
a866 1
    stringBuffer.append(TEXT_256);
d871 1
a871 1
    stringBuffer.append(TEXT_257);
d873 1
a873 1
    stringBuffer.append(TEXT_258);
d877 1
a877 1
    stringBuffer.append(TEXT_259);
d884 1
a884 1
    stringBuffer.append(TEXT_260);
d886 1
a886 1
    stringBuffer.append(TEXT_261);
d888 2
a889 2
    stringBuffer.append(TEXT_262);
    stringBuffer.append(TEXT_263);
d899 1
a899 1
    stringBuffer.append(TEXT_264);
d901 1
a901 1
    stringBuffer.append(TEXT_265);
d903 1
a903 1
    stringBuffer.append(TEXT_266);
d906 1
a906 1
    stringBuffer.append(TEXT_267);
d908 1
a908 1
    stringBuffer.append(TEXT_268);
d910 1
a910 1
    stringBuffer.append(TEXT_269);
d912 1
a912 1
    stringBuffer.append(TEXT_270);
a917 1
		String editPatternCode = "EDIT_PATTERN";	//declared in labelText.javajetinc, used in directEditCommand.jetinc.
d919 2
a920 2
    stringBuffer.append(TEXT_271);
    stringBuffer.append(TEXT_272);
d922 3
a924 133
    stringBuffer.append(TEXT_273);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
    stringBuffer.append(TEXT_274);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_275);
    stringBuffer.append(TEXT_276);
    stringBuffer.append(TEXT_277);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_278);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_279);
    
if (labelModelFacet instanceof FeatureLabelModelFacet == false) {

    stringBuffer.append(TEXT_280);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_281);
    
} else {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = featureLabelModelFacet.getMetaFeatures();

    stringBuffer.append(TEXT_282);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_283);
    
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {

    stringBuffer.append(TEXT_284);
    
	}

    stringBuffer.append(TEXT_285);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
    stringBuffer.append(TEXT_286);
    stringBuffer.append(editPatternCode);
    stringBuffer.append(TEXT_287);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_288);
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
    stringBuffer.append(TEXT_289);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_290);
    
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {

    stringBuffer.append(TEXT_291);
    
	}

    stringBuffer.append(TEXT_292);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_293);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_294);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_295);
    stringBuffer.append(metaFeatures.size());
    stringBuffer.append(TEXT_296);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_297);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_298);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_299);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_300);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_301);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_302);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_303);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_304);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_305);
    
	boolean haveDeclaredValues = false;
	for(int i = 0; i < metaFeatures.size(); i++) {
		GenFeature nextFeatureToSet = (GenFeature) metaFeatures.get(i);
		EStructuralFeature nextEcoreFeature = nextFeatureToSet.getEcoreFeature();

    stringBuffer.append(TEXT_306);
    if (i == 0) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_307);
    }
    stringBuffer.append(TEXT_308);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_309);
    stringBuffer.append(importManager.getImportedName(nextFeatureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_310);
    stringBuffer.append(nextFeatureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_311);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_312);
    stringBuffer.append(i);
    stringBuffer.append(TEXT_313);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_314);
    
		if (nextEcoreFeature.isMany()) {

    stringBuffer.append(TEXT_315);
    if (!haveDeclaredValues) { haveDeclaredValues = true;
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_316);
    }
    stringBuffer.append(TEXT_317);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_318);
    stringBuffer.append(nextFeatureToSet.getAccessorName());
    stringBuffer.append(TEXT_319);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_320);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_321);
    
		} else {

    stringBuffer.append(TEXT_322);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_323);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_324);
    
		}

    
	}

    stringBuffer.append(TEXT_325);
d928 5
a932 49
    stringBuffer.append(TEXT_326);
    
}

    stringBuffer.append(TEXT_327);
    stringBuffer.append(TEXT_328);
    stringBuffer.append(TEXT_329);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_330);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_331);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_332);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_333);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_334);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
    stringBuffer.append(TEXT_335);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
    stringBuffer.append(TEXT_336);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
    stringBuffer.append(TEXT_337);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
    stringBuffer.append(TEXT_338);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
    stringBuffer.append(TEXT_339);
    stringBuffer.append(TEXT_340);
    stringBuffer.append(TEXT_341);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_342);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_343);
    
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
		GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_344);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_345);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_346);
    
	}
}

    stringBuffer.append(TEXT_347);
d934 1
a934 1
    stringBuffer.append(TEXT_348);
d936 1
a936 1
    stringBuffer.append(TEXT_349);
d938 1
a938 1
    stringBuffer.append(TEXT_350);
d940 1
a940 1
    stringBuffer.append(TEXT_351);
@


1.23
log
@Images should be reused across the editparts that represent same model element types (prevent SWTErrors when opening huge diagrams)
@
text
@d286 86
a371 82
  protected final String TEXT_266 = "());";
  protected final String TEXT_267 = NL;
  protected final String TEXT_268 = "\t\tinstallEditPolicy(";
  protected final String TEXT_269 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_270 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_271 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_272 = NL;
  protected final String TEXT_273 = "\t\t\t\t\tprotected ";
  protected final String TEXT_274 = " getDirectEditCommand(";
  protected final String TEXT_275 = " request) {";
  protected final String TEXT_276 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_277 = ".INSTANCE;";
  protected final String TEXT_278 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_279 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_280 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_281 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_282 = "(";
  protected final String TEXT_283 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_284 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_285 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_286 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_287 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_288 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_289 = " editingDomain = ";
  protected final String TEXT_290 = ".getEditingDomain(";
  protected final String TEXT_291 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_292 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_293 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_294 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_295 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_296 = " createDomainModelCommand(";
  protected final String TEXT_297 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_298 = " element = ";
  protected final String TEXT_299 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_300 = " result = new ";
  protected final String TEXT_301 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_302 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_303 = " ";
  protected final String TEXT_304 = "feature = (";
  protected final String TEXT_305 = ") ";
  protected final String TEXT_306 = ".eINSTANCE.get";
  protected final String TEXT_307 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_308 = ".parseValue(feature, values[";
  protected final String TEXT_309 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_310 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_311 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_312 = " ";
  protected final String TEXT_313 = "values = new ";
  protected final String TEXT_314 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_315 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_316 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_317 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_318 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_319 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_320 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_321 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_322 = NL + "\t\t\t\t});";
  protected final String TEXT_323 = NL + "\t\t}" + NL;
  protected final String TEXT_324 = NL;
  protected final String TEXT_325 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_326 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_327 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_328 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_329 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_330 = "(this, ";
  protected final String TEXT_331 = ".class, new ";
  protected final String TEXT_332 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_333 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_334 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_335 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_336 = NL;
  protected final String TEXT_337 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_338 = " domainModelRefresher = new ";
  protected final String TEXT_339 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_340 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_341 = ".eINSTANCE.get";
  protected final String TEXT_342 = "(), labelRefresher);";
  protected final String TEXT_343 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_344 = " getImage() {" + NL + "\t\t\treturn getLabelIcon();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_345 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_346 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_347 = NL;
d1190 9
a1204 7
    stringBuffer.append(TEXT_267);
    stringBuffer.append(TEXT_268);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_269);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
    stringBuffer.append(TEXT_270);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1207 1
d1209 1
a1209 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1213 6
d1222 1
a1222 1
    stringBuffer.append(TEXT_276);
d1224 1
a1224 1
    stringBuffer.append(TEXT_277);
d1230 1
a1230 1
    stringBuffer.append(TEXT_278);
d1232 1
a1232 1
    stringBuffer.append(TEXT_279);
d1236 1
a1236 1
    stringBuffer.append(TEXT_280);
d1240 1
a1240 1
    stringBuffer.append(TEXT_281);
d1242 1
a1242 1
    stringBuffer.append(TEXT_282);
d1244 1
a1244 1
    stringBuffer.append(TEXT_283);
d1246 1
a1246 1
    stringBuffer.append(TEXT_284);
d1248 1
a1248 1
    stringBuffer.append(TEXT_285);
d1250 1
a1250 1
    stringBuffer.append(TEXT_286);
d1254 1
a1254 1
    stringBuffer.append(TEXT_287);
d1258 1
a1258 1
    stringBuffer.append(TEXT_288);
d1260 1
a1260 1
    stringBuffer.append(TEXT_289);
d1262 1
a1262 1
    stringBuffer.append(TEXT_290);
d1264 1
a1264 1
    stringBuffer.append(TEXT_291);
d1266 1
a1266 1
    stringBuffer.append(TEXT_292);
d1268 1
a1268 1
    stringBuffer.append(TEXT_293);
d1270 1
a1270 1
    stringBuffer.append(TEXT_294);
d1272 1
a1272 1
    stringBuffer.append(TEXT_295);
d1274 1
a1274 1
    stringBuffer.append(TEXT_296);
d1276 1
a1276 1
    stringBuffer.append(TEXT_297);
d1278 1
a1278 1
    stringBuffer.append(TEXT_298);
d1280 1
a1280 1
    stringBuffer.append(TEXT_299);
d1282 1
a1282 1
    stringBuffer.append(TEXT_300);
d1284 1
a1284 1
    stringBuffer.append(TEXT_301);
d1291 1
a1291 1
    stringBuffer.append(TEXT_302);
d1294 1
a1294 1
    stringBuffer.append(TEXT_303);
d1296 1
a1296 1
    stringBuffer.append(TEXT_304);
d1298 1
a1298 1
    stringBuffer.append(TEXT_305);
d1300 1
a1300 1
    stringBuffer.append(TEXT_306);
d1302 1
a1302 1
    stringBuffer.append(TEXT_307);
d1304 1
a1304 1
    stringBuffer.append(TEXT_308);
d1306 1
a1306 1
    stringBuffer.append(TEXT_309);
d1308 1
a1308 1
    stringBuffer.append(TEXT_310);
d1312 1
a1312 1
    stringBuffer.append(TEXT_311);
d1315 1
a1315 1
    stringBuffer.append(TEXT_312);
d1317 1
a1317 1
    stringBuffer.append(TEXT_313);
d1319 1
a1319 1
    stringBuffer.append(TEXT_314);
d1321 1
a1321 1
    stringBuffer.append(TEXT_315);
d1323 1
a1323 1
    stringBuffer.append(TEXT_316);
d1325 1
a1325 1
    stringBuffer.append(TEXT_317);
d1329 1
a1329 1
    stringBuffer.append(TEXT_318);
d1331 1
a1331 1
    stringBuffer.append(TEXT_319);
d1333 1
a1333 1
    stringBuffer.append(TEXT_320);
d1340 1
a1340 1
    stringBuffer.append(TEXT_321);
d1344 1
a1344 1
    stringBuffer.append(TEXT_322);
a1347 6
    stringBuffer.append(TEXT_323);
    stringBuffer.append(TEXT_324);
    stringBuffer.append(TEXT_325);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_326);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
a1348 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
a1349 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
d1353 1
a1353 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
d1355 1
a1355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
d1357 1
a1357 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
d1359 1
a1359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
d1361 1
a1361 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
d1363 1
d1365 1
d1367 6
d1374 1
a1374 1
    stringBuffer.append(TEXT_338);
d1376 1
a1376 1
    stringBuffer.append(TEXT_339);
d1383 1
a1383 1
    stringBuffer.append(TEXT_340);
d1385 1
a1385 1
    stringBuffer.append(TEXT_341);
d1387 1
a1387 1
    stringBuffer.append(TEXT_342);
d1392 1
a1392 1
    stringBuffer.append(TEXT_343);
d1394 1
a1394 1
    stringBuffer.append(TEXT_344);
d1396 1
a1396 1
    stringBuffer.append(TEXT_345);
d1398 1
a1398 1
    stringBuffer.append(TEXT_346);
d1400 1
a1400 1
    stringBuffer.append(TEXT_347);
@


1.22
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@d212 4
a215 4
  protected final String TEXT_192 = NL + "\t\t";
  protected final String TEXT_193 = " imageDescriptor = ";
  protected final String TEXT_194 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_195 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
d363 5
a367 4
  protected final String TEXT_343 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_344 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_345 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_346 = NL;
d957 1
a957 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d959 3
a961 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d1380 2
d1383 1
a1383 1
    stringBuffer.append(TEXT_344);
d1385 1
a1385 1
    stringBuffer.append(TEXT_345);
d1387 1
a1387 1
    stringBuffer.append(TEXT_346);
@


1.21
log
@Default label text should be displayed instead of the "null" string when the corresponding feature is not set;
It should be possible to unset the value of a feature using a diagram label;
Fixed compilation errors when a label is not feature-based
@
text
@d119 1
a119 1
  protected final String TEXT_99 = "\t\tinstallEditPolicy(";
d121 43
a163 43
  protected final String TEXT_101 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_102 = " createDeleteCommand(";
  protected final String TEXT_103 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_104 = " editingDomain = ";
  protected final String TEXT_105 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_106 = " cc = new ";
  protected final String TEXT_107 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_108 = "((";
  protected final String TEXT_109 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_110 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_111 = " editingDomain) {";
  protected final String TEXT_112 = NL + "\t\t\t\t";
  protected final String TEXT_113 = " result = new ";
  protected final String TEXT_114 = "();";
  protected final String TEXT_115 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_116 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_117 = ".eINSTANCE.get";
  protected final String TEXT_118 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_119 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_120 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_121 = ".eINSTANCE.get";
  protected final String TEXT_122 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_123 = ".UNSET_VALUE));";
  protected final String TEXT_124 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_125 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_126 = ".eINSTANCE.get";
  protected final String TEXT_127 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_128 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_129 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_130 = ".eINSTANCE.get";
  protected final String TEXT_131 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_132 = ".UNSET_VALUE));";
  protected final String TEXT_133 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_134 = NL + "\t\t\t\treturn ";
  protected final String TEXT_135 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_136 = ".eINSTANCE.get";
  protected final String TEXT_137 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_138 = NL + "\t\t\t\treturn ";
  protected final String TEXT_139 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_140 = ".eINSTANCE.get";
  protected final String TEXT_141 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_142 = ".UNSET_VALUE);";
  protected final String TEXT_143 = NL + "\t\t\t}" + NL + "\t\t});";
d165 122
a286 122
  protected final String TEXT_145 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_146 = "\", new ";
  protected final String TEXT_147 = "()); //$NON-NLS-1$";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_150 = ".OPEN_ROLE";
  protected final String TEXT_151 = " + \"";
  protected final String TEXT_152 = "\" ";
  protected final String TEXT_153 = ", new ";
  protected final String TEXT_154 = "());";
  protected final String TEXT_155 = NL + "\t}" + NL;
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_158 = " req) {";
  protected final String TEXT_159 = NL + "\t\tif (";
  protected final String TEXT_160 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_161 = NL;
  protected final String TEXT_162 = "if (";
  protected final String TEXT_163 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_164 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}";
  protected final String TEXT_165 = NL;
  protected final String TEXT_166 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_167 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_168 = "(this, ";
  protected final String TEXT_169 = ".class, new ";
  protected final String TEXT_170 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_171 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_172 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\t";
  protected final String TEXT_173 = " zoomManager = (";
  protected final String TEXT_174 = ") getViewer().getProperty(";
  protected final String TEXT_175 = ".class.toString());" + NL + "\t\t\t\t\tdouble zoomLevel = zoomManager == null ? 1.0 : zoomManager.getZoom();" + NL + "\t\t\t\t\tif (zoomLevel > 1.0 && getLabel().getFont() != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_176 = "[] datas = getLabel().getFont().getFontData();" + NL + "\t\t\t\t\t\tfor(int i = 0; i < datas.length; i++) {" + NL + "\t\t\t\t\t\t\tdatas[i].height *= zoomLevel;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_177 = " font = new ";
  protected final String TEXT_178 = "(getLabel().getFont().getDevice(), datas);" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(font);" + NL + "\t\t\t\t\t\tcelleditor.getControl().addDisposeListener(new ";
  protected final String TEXT_179 = "() {" + NL + "\t\t\t\t\t\t\tpublic void widgetDisposed(";
  protected final String TEXT_180 = " e) {" + NL + "\t\t\t\t\t\t\t\tfont.dispose();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint avr = ";
  protected final String TEXT_181 = ".getFontMetrics(celleditor.getControl().getFont()).getAverageCharWidth();" + NL + "\t\t\t\t\trect.setSize(new ";
  protected final String TEXT_182 = "(celleditor.getControl().computeSize(";
  protected final String TEXT_183 = ".DEFAULT, ";
  protected final String TEXT_184 = ".DEFAULT)).expand(avr * 2, 0));" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_185 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_186 = NL;
  protected final String TEXT_187 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String VIEW_PATTERN = \"";
  protected final String TEXT_188 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_189 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_190 = " element = ";
  protected final String TEXT_191 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t\tif (result == null || result.length() == 0) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_192 = " element = ";
  protected final String TEXT_193 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn \"\";\t//$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t\tif (result == null) {" + NL + "\t\t\treturn \"\";\t//$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String buildTextByPattern(";
  protected final String TEXT_194 = " element, String pattern) {";
  protected final String TEXT_195 = NL + "\t\treturn ";
  protected final String TEXT_196 = ".format(pattern, new Object[] {";
  protected final String TEXT_197 = NL + "\t\t\tnew ";
  protected final String TEXT_198 = "(";
  protected final String TEXT_199 = ")";
  protected final String TEXT_200 = " == null ? \"\" : ";
  protected final String TEXT_201 = ",";
  protected final String TEXT_202 = NL + "\t\t});";
  protected final String TEXT_203 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn null;";
  protected final String TEXT_204 = NL + "\t}";
  protected final String TEXT_205 = NL;
  protected final String TEXT_206 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_207 = NL + "\t\t";
  protected final String TEXT_208 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_209 = ") ";
  protected final String TEXT_210 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_211 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_212 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_213 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_214 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_215 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_216 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_217 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_218 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_219 = "\t" + NL + "\t}";
  protected final String TEXT_220 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_221 = " createdFont;";
  protected final String TEXT_222 = "\t";
  protected final String TEXT_223 = NL;
  protected final String TEXT_224 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_225 = " style = (";
  protected final String TEXT_226 = ")  ";
  protected final String TEXT_227 = ".getStyle(";
  protected final String TEXT_228 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_229 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_230 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_231 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_232 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_233 = " getLabelIcon() {";
  protected final String TEXT_234 = NL + "\t\t";
  protected final String TEXT_235 = " imageDescriptor = ";
  protected final String TEXT_236 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_237 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_238 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_239 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_242 = " domainModelRefresher = new ";
  protected final String TEXT_243 = "(this);" + NL;
  protected final String TEXT_244 = NL;
  protected final String TEXT_245 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_246 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_247 = " feature, ";
  protected final String TEXT_248 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_249 = NL;
  protected final String TEXT_250 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_251 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_252 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_253 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_254 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_255 = NL;
  protected final String TEXT_256 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_257 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_258 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_259 = ".eINSTANCE.get";
  protected final String TEXT_260 = "(), labelRefresher);";
  protected final String TEXT_261 = NL;
  protected final String TEXT_262 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_263 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_264 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_265 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_266 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d288 79
a366 163
  protected final String TEXT_268 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_269 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_270 = NL;
  protected final String TEXT_271 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_272 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_273 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_274 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_275 = " createLabel() {";
  protected final String TEXT_276 = NL + "\t\treturn new ";
  protected final String TEXT_277 = "();";
  protected final String TEXT_278 = NL + "\t\treturn ";
  protected final String TEXT_279 = ";";
  protected final String TEXT_280 = NL + "\t\treturn new ";
  protected final String TEXT_281 = "();";
  protected final String TEXT_282 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_283 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_284 = " label = createLabel();";
  protected final String TEXT_285 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_286 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_287 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_288 = NL + NL + "\t/**";
  protected final String TEXT_289 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_290 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_291 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_292 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_293 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_294 = "(";
  protected final String TEXT_295 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_296 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_297 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_298 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_299 = NL;
  protected final String TEXT_300 = NL;
  protected final String TEXT_301 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_302 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_303 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_304 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_305 = NL;
  protected final String TEXT_306 = "\t\tinstallEditPolicy(";
  protected final String TEXT_307 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_308 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_309 = " createDeleteCommand(";
  protected final String TEXT_310 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_311 = " editingDomain = ";
  protected final String TEXT_312 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_313 = " cc = new ";
  protected final String TEXT_314 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_315 = "((";
  protected final String TEXT_316 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_317 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_318 = " editingDomain) {";
  protected final String TEXT_319 = NL + "\t\t\t\t";
  protected final String TEXT_320 = " result = new ";
  protected final String TEXT_321 = "();";
  protected final String TEXT_322 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_323 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_324 = ".eINSTANCE.get";
  protected final String TEXT_325 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_326 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_327 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_328 = ".eINSTANCE.get";
  protected final String TEXT_329 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_330 = ".UNSET_VALUE));";
  protected final String TEXT_331 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_332 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_333 = ".eINSTANCE.get";
  protected final String TEXT_334 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_335 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_336 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_337 = ".eINSTANCE.get";
  protected final String TEXT_338 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_339 = ".UNSET_VALUE));";
  protected final String TEXT_340 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_341 = NL + "\t\t\t\treturn ";
  protected final String TEXT_342 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_343 = ".eINSTANCE.get";
  protected final String TEXT_344 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_345 = NL + "\t\t\t\treturn ";
  protected final String TEXT_346 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_347 = ".eINSTANCE.get";
  protected final String TEXT_348 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_349 = ".UNSET_VALUE);";
  protected final String TEXT_350 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_351 = NL;
  protected final String TEXT_352 = "\t\tinstallEditPolicy(";
  protected final String TEXT_353 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_354 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_355 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_356 = NL;
  protected final String TEXT_357 = "\t\t\t\t\tprotected ";
  protected final String TEXT_358 = " getDirectEditCommand(";
  protected final String TEXT_359 = " request) {";
  protected final String TEXT_360 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_361 = ".INSTANCE;";
  protected final String TEXT_362 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_363 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_364 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_365 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_366 = "(";
  protected final String TEXT_367 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_368 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_369 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_370 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_371 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_372 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_373 = " editingDomain = ";
  protected final String TEXT_374 = ".getEditingDomain(";
  protected final String TEXT_375 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_376 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_377 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_378 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_379 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_380 = " createDomainModelCommand(";
  protected final String TEXT_381 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_382 = " element = ";
  protected final String TEXT_383 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_384 = " result = new ";
  protected final String TEXT_385 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_386 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_387 = " ";
  protected final String TEXT_388 = "feature = (";
  protected final String TEXT_389 = ") ";
  protected final String TEXT_390 = ".eINSTANCE.get";
  protected final String TEXT_391 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_392 = ".parseValue(feature, values[";
  protected final String TEXT_393 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_394 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_395 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_396 = " ";
  protected final String TEXT_397 = "values = new ";
  protected final String TEXT_398 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_399 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_400 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_401 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_402 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_403 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_404 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_405 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_406 = NL + "\t\t\t\t});";
  protected final String TEXT_407 = NL + "\t\t}" + NL;
  protected final String TEXT_408 = NL;
  protected final String TEXT_409 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_410 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_411 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_412 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_413 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_414 = "(this, ";
  protected final String TEXT_415 = ".class, new ";
  protected final String TEXT_416 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_417 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_418 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_419 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_420 = NL;
  protected final String TEXT_421 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_422 = " domainModelRefresher = new ";
  protected final String TEXT_423 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_424 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_425 = ".eINSTANCE.get";
  protected final String TEXT_426 = "(), labelRefresher);";
  protected final String TEXT_427 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_428 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_429 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_430 = NL;
d671 9
d683 1
a683 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
a684 20
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.RemoveNotationalElementCommand"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_111);
a685 87
{
TypeModelFacet facet = genNode.getModelFacet();
GenFeature childFeature = facet.getChildMetaFeature();
GenFeature containmentFeature = facet.getContainmentMetaFeature();
if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {

    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_114);
    
	if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_118);
    
	} else {

    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_123);
    
	}

    
	if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_127);
    
	} else {

    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_132);
    
	}

    stringBuffer.append(TEXT_133);
    
} else {
	if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_137);
    
	} else {

    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_142);
    
	}
a687 4
    stringBuffer.append(TEXT_143);
    
}	/*restrict local vars used in component edit policy*/

d690 1
a690 1
    stringBuffer.append(TEXT_144);
d694 1
a694 1
    stringBuffer.append(TEXT_145);
d696 1
a696 1
    stringBuffer.append(TEXT_146);
d698 1
a698 1
    stringBuffer.append(TEXT_147);
d700 1
a700 1
    stringBuffer.append(TEXT_148);
d708 1
a708 1
    stringBuffer.append(TEXT_149);
d710 1
a710 1
    stringBuffer.append(TEXT_150);
d712 1
a712 1
    stringBuffer.append(TEXT_151);
d714 1
a714 1
    stringBuffer.append(TEXT_152);
d716 1
a716 1
    stringBuffer.append(TEXT_153);
d718 1
a718 1
    stringBuffer.append(TEXT_154);
d724 3
a726 3
    stringBuffer.append(TEXT_155);
    stringBuffer.append(TEXT_156);
    stringBuffer.append(TEXT_157);
d728 1
a728 1
    stringBuffer.append(TEXT_158);
d732 1
a732 1
    stringBuffer.append(TEXT_159);
d734 1
a734 1
    stringBuffer.append(TEXT_160);
d738 2
a739 2
    stringBuffer.append(TEXT_161);
    stringBuffer.append(TEXT_162);
d741 1
a741 1
    stringBuffer.append(TEXT_163);
d743 1
a743 1
    stringBuffer.append(TEXT_164);
d747 2
a748 2
    stringBuffer.append(TEXT_165);
    stringBuffer.append(TEXT_166);
d750 1
a750 1
    stringBuffer.append(TEXT_167);
d752 1
a752 1
    stringBuffer.append(TEXT_168);
d754 1
a754 1
    stringBuffer.append(TEXT_169);
d756 1
a756 1
    stringBuffer.append(TEXT_170);
d758 1
a758 1
    stringBuffer.append(TEXT_171);
d760 1
a760 1
    stringBuffer.append(TEXT_172);
d762 1
a762 1
    stringBuffer.append(TEXT_173);
d764 1
a764 1
    stringBuffer.append(TEXT_174);
d766 1
a766 1
    stringBuffer.append(TEXT_175);
d768 1
a768 1
    stringBuffer.append(TEXT_176);
d770 1
a770 1
    stringBuffer.append(TEXT_177);
d772 1
a772 1
    stringBuffer.append(TEXT_178);
d774 1
a774 1
    stringBuffer.append(TEXT_179);
d776 1
a776 1
    stringBuffer.append(TEXT_180);
d778 1
a778 1
    stringBuffer.append(TEXT_181);
d780 1
a780 1
    stringBuffer.append(TEXT_182);
d782 1
a782 1
    stringBuffer.append(TEXT_183);
d784 1
a784 1
    stringBuffer.append(TEXT_184);
d788 2
a789 2
    stringBuffer.append(TEXT_185);
    stringBuffer.append(TEXT_186);
d823 1
a823 1
    stringBuffer.append(TEXT_187);
d825 1
a825 1
    stringBuffer.append(TEXT_188);
d827 1
a827 1
    stringBuffer.append(TEXT_189);
d829 1
a829 1
    stringBuffer.append(TEXT_190);
d831 1
a831 1
    stringBuffer.append(TEXT_191);
d833 1
a833 1
    stringBuffer.append(TEXT_192);
d835 1
a835 1
    stringBuffer.append(TEXT_193);
d837 1
a837 1
    stringBuffer.append(TEXT_194);
d842 1
a842 1
    stringBuffer.append(TEXT_195);
d844 1
a844 1
    stringBuffer.append(TEXT_196);
d850 1
a850 1
    stringBuffer.append(TEXT_197);
d852 1
a852 1
    stringBuffer.append(TEXT_198);
d858 1
a858 1
    stringBuffer.append(TEXT_199);
d863 1
a863 1
    stringBuffer.append(TEXT_200);
d869 1
a869 1
    stringBuffer.append(TEXT_201);
d874 1
a874 1
    stringBuffer.append(TEXT_202);
d878 1
a878 1
    stringBuffer.append(TEXT_203);
d882 2
a883 2
    stringBuffer.append(TEXT_204);
    stringBuffer.append(TEXT_205);
d891 1
a891 1
    stringBuffer.append(TEXT_206);
d895 1
a895 1
    stringBuffer.append(TEXT_207);
d897 1
a897 1
    stringBuffer.append(TEXT_208);
d899 1
a899 1
    stringBuffer.append(TEXT_209);
d901 1
a901 1
    stringBuffer.append(TEXT_210);
d903 1
a903 1
    stringBuffer.append(TEXT_211);
d905 1
a905 1
    stringBuffer.append(TEXT_212);
d907 1
a907 1
    stringBuffer.append(TEXT_213);
d909 1
a909 1
    stringBuffer.append(TEXT_214);
d911 1
a911 1
    stringBuffer.append(TEXT_215);
d913 1
a913 1
    stringBuffer.append(TEXT_216);
d915 1
a915 1
    stringBuffer.append(TEXT_217);
d917 1
a917 1
    stringBuffer.append(TEXT_218);
d921 1
a921 1
    stringBuffer.append(TEXT_219);
d925 1
a925 1
    stringBuffer.append(TEXT_220);
d927 1
a927 1
    stringBuffer.append(TEXT_221);
d931 3
a933 3
    stringBuffer.append(TEXT_222);
    stringBuffer.append(TEXT_223);
    stringBuffer.append(TEXT_224);
d935 1
a935 1
    stringBuffer.append(TEXT_225);
d937 1
a937 1
    stringBuffer.append(TEXT_226);
d939 1
a939 1
    stringBuffer.append(TEXT_227);
d941 1
a941 1
    stringBuffer.append(TEXT_228);
d943 1
a943 1
    stringBuffer.append(TEXT_229);
d945 1
a945 1
    stringBuffer.append(TEXT_230);
d947 1
a947 1
    stringBuffer.append(TEXT_231);
d949 1
a949 1
    stringBuffer.append(TEXT_232);
d951 1
a951 1
    stringBuffer.append(TEXT_233);
d955 1
a955 1
    stringBuffer.append(TEXT_234);
d957 1
a957 1
    stringBuffer.append(TEXT_235);
d959 1
a959 1
    stringBuffer.append(TEXT_236);
d963 1
a963 1
    stringBuffer.append(TEXT_237);
d965 1
a965 1
    stringBuffer.append(TEXT_238);
d967 3
a969 3
    stringBuffer.append(TEXT_239);
    stringBuffer.append(TEXT_240);
    stringBuffer.append(TEXT_241);
d971 1
a971 1
    stringBuffer.append(TEXT_242);
d973 3
a975 3
    stringBuffer.append(TEXT_243);
    stringBuffer.append(TEXT_244);
    stringBuffer.append(TEXT_245);
d977 1
a977 1
    stringBuffer.append(TEXT_246);
d979 1
a979 1
    stringBuffer.append(TEXT_247);
d981 3
a983 3
    stringBuffer.append(TEXT_248);
    stringBuffer.append(TEXT_249);
    stringBuffer.append(TEXT_250);
d985 1
a985 1
    stringBuffer.append(TEXT_251);
d987 1
a987 1
    stringBuffer.append(TEXT_252);
d989 1
a989 1
    stringBuffer.append(TEXT_253);
d991 3
a993 3
    stringBuffer.append(TEXT_254);
    stringBuffer.append(TEXT_255);
    stringBuffer.append(TEXT_256);
d995 1
a995 1
    stringBuffer.append(TEXT_257);
d1002 1
a1002 1
    stringBuffer.append(TEXT_258);
d1004 1
a1004 1
    stringBuffer.append(TEXT_259);
d1006 1
a1006 1
    stringBuffer.append(TEXT_260);
d1011 2
a1012 2
    stringBuffer.append(TEXT_261);
    stringBuffer.append(TEXT_262);
d1014 1
a1014 1
    stringBuffer.append(TEXT_263);
d1016 1
a1016 1
    stringBuffer.append(TEXT_264);
d1018 1
a1018 1
    stringBuffer.append(TEXT_265);
d1020 3
a1022 3
    stringBuffer.append(TEXT_266);
    stringBuffer.append(TEXT_267);
    stringBuffer.append(TEXT_268);
d1024 1
a1024 1
    stringBuffer.append(TEXT_269);
d1028 1
a1028 1
    stringBuffer.append(TEXT_270);
d1057 1
a1057 1
    stringBuffer.append(TEXT_271);
d1059 1
a1059 1
    stringBuffer.append(TEXT_272);
d1061 1
a1061 1
    stringBuffer.append(TEXT_273);
d1063 1
a1063 1
    stringBuffer.append(TEXT_274);
d1065 1
a1065 1
    stringBuffer.append(TEXT_275);
d1069 1
a1069 1
    stringBuffer.append(TEXT_276);
d1071 1
a1071 1
    stringBuffer.append(TEXT_277);
d1074 1
a1074 1
    stringBuffer.append(TEXT_278);
d1076 1
a1076 1
    stringBuffer.append(TEXT_279);
d1080 1
a1080 1
    stringBuffer.append(TEXT_280);
d1082 1
a1082 1
    stringBuffer.append(TEXT_281);
d1084 1
a1084 1
    stringBuffer.append(TEXT_282);
d1086 1
a1086 1
    stringBuffer.append(TEXT_283);
d1088 1
a1088 1
    stringBuffer.append(TEXT_284);
d1092 1
a1092 1
    stringBuffer.append(TEXT_285);
d1096 1
a1096 1
    stringBuffer.append(TEXT_286);
d1100 1
a1100 1
    stringBuffer.append(TEXT_287);
d1102 1
a1102 1
    stringBuffer.append(TEXT_288);
d1106 1
a1106 1
    stringBuffer.append(TEXT_289);
d1110 1
a1110 1
    stringBuffer.append(TEXT_290);
d1112 1
a1112 1
    stringBuffer.append(TEXT_291);
d1114 1
a1114 1
    stringBuffer.append(TEXT_292);
d1128 1
a1128 1
    stringBuffer.append(TEXT_293);
d1130 1
a1130 1
    stringBuffer.append(TEXT_294);
d1132 1
a1132 1
    stringBuffer.append(TEXT_295);
d1136 1
a1136 1
    stringBuffer.append(TEXT_296);
d1140 1
a1140 1
    stringBuffer.append(TEXT_297);
d1144 1
a1144 1
    stringBuffer.append(TEXT_298);
d1149 1
a1149 1
    stringBuffer.append(TEXT_299);
d1151 1
a1151 1
    stringBuffer.append(TEXT_300);
d1155 1
a1155 1
    stringBuffer.append(TEXT_301);
d1162 1
a1162 1
    stringBuffer.append(TEXT_302);
d1164 1
a1164 1
    stringBuffer.append(TEXT_303);
d1166 2
a1167 27
    stringBuffer.append(TEXT_304);
    stringBuffer.append(TEXT_305);
    stringBuffer.append(TEXT_306);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_307);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
    stringBuffer.append(TEXT_308);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_309);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
    stringBuffer.append(TEXT_310);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_311);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_312);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_313);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_314);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.RemoveNotationalElementCommand"));
    stringBuffer.append(TEXT_315);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_316);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_317);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_318);
d1170 4
a1173 33
TypeModelFacet facet = genNode.getModelFacet();
GenFeature childFeature = facet.getChildMetaFeature();
GenFeature containmentFeature = facet.getContainmentMetaFeature();
if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {

    stringBuffer.append(TEXT_319);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_320);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_321);
    
	if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_322);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_323);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_324);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_325);
    
	} else {

    stringBuffer.append(TEXT_326);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_327);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_328);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_329);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_330);
    
d1175 1
d1177 5
a1182 50
	if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_331);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_332);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_333);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_334);
    
	} else {

    stringBuffer.append(TEXT_335);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_336);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_337);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_338);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_339);
    
	}

    stringBuffer.append(TEXT_340);
    
} else {
	if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_341);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_342);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_343);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_344);
    
	} else {

    stringBuffer.append(TEXT_345);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_346);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_347);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_348);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_349);
    
	}
a1184 4
    stringBuffer.append(TEXT_350);
    
}	/*restrict local vars used in component edit policy*/

d1189 2
a1190 2
    stringBuffer.append(TEXT_351);
    stringBuffer.append(TEXT_352);
d1192 1
a1192 1
    stringBuffer.append(TEXT_353);
d1194 1
a1194 1
    stringBuffer.append(TEXT_354);
d1196 3
a1198 3
    stringBuffer.append(TEXT_355);
    stringBuffer.append(TEXT_356);
    stringBuffer.append(TEXT_357);
d1200 1
a1200 1
    stringBuffer.append(TEXT_358);
d1202 1
a1202 1
    stringBuffer.append(TEXT_359);
d1206 1
a1206 1
    stringBuffer.append(TEXT_360);
d1208 1
a1208 1
    stringBuffer.append(TEXT_361);
d1214 1
a1214 1
    stringBuffer.append(TEXT_362);
d1216 1
a1216 1
    stringBuffer.append(TEXT_363);
d1220 1
a1220 1
    stringBuffer.append(TEXT_364);
d1224 1
a1224 1
    stringBuffer.append(TEXT_365);
d1226 1
a1226 1
    stringBuffer.append(TEXT_366);
d1228 1
a1228 1
    stringBuffer.append(TEXT_367);
d1230 1
a1230 1
    stringBuffer.append(TEXT_368);
d1232 1
a1232 1
    stringBuffer.append(TEXT_369);
d1234 1
a1234 1
    stringBuffer.append(TEXT_370);
d1238 1
a1238 1
    stringBuffer.append(TEXT_371);
d1242 1
a1242 1
    stringBuffer.append(TEXT_372);
d1244 1
a1244 1
    stringBuffer.append(TEXT_373);
d1246 1
a1246 1
    stringBuffer.append(TEXT_374);
d1248 1
a1248 1
    stringBuffer.append(TEXT_375);
d1250 1
a1250 1
    stringBuffer.append(TEXT_376);
d1252 1
a1252 1
    stringBuffer.append(TEXT_377);
d1254 1
a1254 1
    stringBuffer.append(TEXT_378);
d1256 1
a1256 1
    stringBuffer.append(TEXT_379);
d1258 1
a1258 1
    stringBuffer.append(TEXT_380);
d1260 1
a1260 1
    stringBuffer.append(TEXT_381);
d1262 1
a1262 1
    stringBuffer.append(TEXT_382);
d1264 1
a1264 1
    stringBuffer.append(TEXT_383);
d1266 1
a1266 1
    stringBuffer.append(TEXT_384);
d1268 1
a1268 1
    stringBuffer.append(TEXT_385);
d1275 1
a1275 1
    stringBuffer.append(TEXT_386);
d1278 1
a1278 1
    stringBuffer.append(TEXT_387);
d1280 1
a1280 1
    stringBuffer.append(TEXT_388);
d1282 1
a1282 1
    stringBuffer.append(TEXT_389);
d1284 1
a1284 1
    stringBuffer.append(TEXT_390);
d1286 1
a1286 1
    stringBuffer.append(TEXT_391);
d1288 1
a1288 1
    stringBuffer.append(TEXT_392);
d1290 1
a1290 1
    stringBuffer.append(TEXT_393);
d1292 1
a1292 1
    stringBuffer.append(TEXT_394);
d1296 1
a1296 1
    stringBuffer.append(TEXT_395);
d1299 1
a1299 1
    stringBuffer.append(TEXT_396);
d1301 1
a1301 1
    stringBuffer.append(TEXT_397);
d1303 1
a1303 1
    stringBuffer.append(TEXT_398);
d1305 1
a1305 1
    stringBuffer.append(TEXT_399);
d1307 1
a1307 1
    stringBuffer.append(TEXT_400);
d1309 1
a1309 1
    stringBuffer.append(TEXT_401);
d1313 1
a1313 1
    stringBuffer.append(TEXT_402);
d1315 1
a1315 1
    stringBuffer.append(TEXT_403);
d1317 1
a1317 1
    stringBuffer.append(TEXT_404);
d1324 1
a1324 1
    stringBuffer.append(TEXT_405);
d1328 1
a1328 1
    stringBuffer.append(TEXT_406);
d1332 3
a1334 3
    stringBuffer.append(TEXT_407);
    stringBuffer.append(TEXT_408);
    stringBuffer.append(TEXT_409);
d1336 1
a1336 1
    stringBuffer.append(TEXT_410);
d1338 1
a1338 1
    stringBuffer.append(TEXT_411);
d1340 1
a1340 1
    stringBuffer.append(TEXT_412);
d1342 1
a1342 1
    stringBuffer.append(TEXT_413);
d1344 1
a1344 1
    stringBuffer.append(TEXT_414);
d1346 1
a1346 1
    stringBuffer.append(TEXT_415);
d1348 1
a1348 1
    stringBuffer.append(TEXT_416);
d1350 1
a1350 1
    stringBuffer.append(TEXT_417);
d1352 1
a1352 1
    stringBuffer.append(TEXT_418);
d1354 3
a1356 3
    stringBuffer.append(TEXT_419);
    stringBuffer.append(TEXT_420);
    stringBuffer.append(TEXT_421);
d1358 1
a1358 1
    stringBuffer.append(TEXT_422);
d1360 1
a1360 1
    stringBuffer.append(TEXT_423);
d1367 1
a1367 1
    stringBuffer.append(TEXT_424);
d1369 1
a1369 1
    stringBuffer.append(TEXT_425);
d1371 1
a1371 1
    stringBuffer.append(TEXT_426);
d1376 1
a1376 1
    stringBuffer.append(TEXT_427);
d1378 1
a1378 1
    stringBuffer.append(TEXT_428);
d1380 1
a1380 1
    stringBuffer.append(TEXT_429);
d1382 1
a1382 1
    stringBuffer.append(TEXT_430);
@


1.20
log
@[170248]: Beautify compartments generated for the lite version
@
text
@d70 322
a391 322
  protected final String TEXT_50 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_51 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_52 = "(";
  protected final String TEXT_53 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_54 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_55 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_56 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_57 = " editingDomain = ";
  protected final String TEXT_58 = ".getEditingDomain(";
  protected final String TEXT_59 = ".getDiagram().getElement());";
  protected final String TEXT_60 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_61 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_62 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_63 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_64 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_65 = " createDomainModelCommand(";
  protected final String TEXT_66 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_67 = " element = ";
  protected final String TEXT_68 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_69 = " result = new ";
  protected final String TEXT_70 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_71 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_72 = " ";
  protected final String TEXT_73 = "feature = (";
  protected final String TEXT_74 = ") ";
  protected final String TEXT_75 = ".eINSTANCE.get";
  protected final String TEXT_76 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_77 = ".parseValue(feature, values[";
  protected final String TEXT_78 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_79 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_80 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_81 = " ";
  protected final String TEXT_82 = "values = new ";
  protected final String TEXT_83 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_84 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_85 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_86 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_87 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_88 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_89 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_90 = NL + "\t\t\t\t});";
  protected final String TEXT_91 = NL;
  protected final String TEXT_92 = "\t\tinstallEditPolicy(";
  protected final String TEXT_93 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_94 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_95 = " createDeleteCommand(";
  protected final String TEXT_96 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_97 = " editingDomain = ";
  protected final String TEXT_98 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_99 = " cc = new ";
  protected final String TEXT_100 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_101 = "((";
  protected final String TEXT_102 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_103 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_104 = " editingDomain) {";
  protected final String TEXT_105 = NL + "\t\t\t\t";
  protected final String TEXT_106 = " result = new ";
  protected final String TEXT_107 = "();";
  protected final String TEXT_108 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_109 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_110 = ".eINSTANCE.get";
  protected final String TEXT_111 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_112 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_113 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_114 = ".eINSTANCE.get";
  protected final String TEXT_115 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_116 = ".UNSET_VALUE));";
  protected final String TEXT_117 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_118 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_119 = ".eINSTANCE.get";
  protected final String TEXT_120 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_121 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_122 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_123 = ".eINSTANCE.get";
  protected final String TEXT_124 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_125 = ".UNSET_VALUE));";
  protected final String TEXT_126 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_127 = NL + "\t\t\t\treturn ";
  protected final String TEXT_128 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_129 = ".eINSTANCE.get";
  protected final String TEXT_130 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_131 = NL + "\t\t\t\treturn ";
  protected final String TEXT_132 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_133 = ".eINSTANCE.get";
  protected final String TEXT_134 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_135 = ".UNSET_VALUE);";
  protected final String TEXT_136 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_137 = NL;
  protected final String TEXT_138 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_139 = "\", new ";
  protected final String TEXT_140 = "()); //$NON-NLS-1$";
  protected final String TEXT_141 = NL;
  protected final String TEXT_142 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_143 = ".OPEN_ROLE";
  protected final String TEXT_144 = " + \"";
  protected final String TEXT_145 = "\" ";
  protected final String TEXT_146 = ", new ";
  protected final String TEXT_147 = "());";
  protected final String TEXT_148 = NL + "\t}" + NL;
  protected final String TEXT_149 = NL;
  protected final String TEXT_150 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_151 = " req) {";
  protected final String TEXT_152 = NL + "\t\tif (";
  protected final String TEXT_153 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_154 = NL;
  protected final String TEXT_155 = "if (";
  protected final String TEXT_156 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_157 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}";
  protected final String TEXT_158 = NL;
  protected final String TEXT_159 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_160 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_161 = "(this, ";
  protected final String TEXT_162 = ".class, new ";
  protected final String TEXT_163 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_164 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_165 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\t";
  protected final String TEXT_166 = " zoomManager = (";
  protected final String TEXT_167 = ") getViewer().getProperty(";
  protected final String TEXT_168 = ".class.toString());" + NL + "\t\t\t\t\tdouble zoomLevel = zoomManager == null ? 1.0 : zoomManager.getZoom();" + NL + "\t\t\t\t\tif (zoomLevel > 1.0 && getLabel().getFont() != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_169 = "[] datas = getLabel().getFont().getFontData();" + NL + "\t\t\t\t\t\tfor(int i = 0; i < datas.length; i++) {" + NL + "\t\t\t\t\t\t\tdatas[i].height *= zoomLevel;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_170 = " font = new ";
  protected final String TEXT_171 = "(getLabel().getFont().getDevice(), datas);" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(font);" + NL + "\t\t\t\t\t\tcelleditor.getControl().addDisposeListener(new ";
  protected final String TEXT_172 = "() {" + NL + "\t\t\t\t\t\t\tpublic void widgetDisposed(";
  protected final String TEXT_173 = " e) {" + NL + "\t\t\t\t\t\t\t\tfont.dispose();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint avr = ";
  protected final String TEXT_174 = ".getFontMetrics(celleditor.getControl().getFont()).getAverageCharWidth();" + NL + "\t\t\t\t\trect.setSize(new ";
  protected final String TEXT_175 = "(celleditor.getControl().computeSize(";
  protected final String TEXT_176 = ".DEFAULT, ";
  protected final String TEXT_177 = ".DEFAULT)).expand(avr * 2, 0));" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_178 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_179 = NL;
  protected final String TEXT_180 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String VIEW_PATTERN = \"";
  protected final String TEXT_181 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_182 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_183 = " element = ";
  protected final String TEXT_184 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t\tif (result == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_185 = " element = ";
  protected final String TEXT_186 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t\tif (result == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String buildTextByPattern(";
  protected final String TEXT_187 = " element, String pattern) {";
  protected final String TEXT_188 = NL + "\t\treturn ";
  protected final String TEXT_189 = ".format(pattern, new Object[] {";
  protected final String TEXT_190 = NL + "\t\t\tnew ";
  protected final String TEXT_191 = "(";
  protected final String TEXT_192 = ")";
  protected final String TEXT_193 = ",";
  protected final String TEXT_194 = NL + "\t\t});";
  protected final String TEXT_195 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn null;";
  protected final String TEXT_196 = NL + "\t}";
  protected final String TEXT_197 = NL;
  protected final String TEXT_198 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_199 = NL + "\t\t";
  protected final String TEXT_200 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_201 = ") ";
  protected final String TEXT_202 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_203 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_204 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_205 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_206 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_207 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_208 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_209 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_210 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_211 = "\t" + NL + "\t}";
  protected final String TEXT_212 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_213 = " createdFont;";
  protected final String TEXT_214 = "\t";
  protected final String TEXT_215 = NL;
  protected final String TEXT_216 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_217 = " style = (";
  protected final String TEXT_218 = ")  ";
  protected final String TEXT_219 = ".getStyle(";
  protected final String TEXT_220 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_221 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_222 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_223 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_224 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_225 = " getLabelIcon() {";
  protected final String TEXT_226 = NL + "\t\t";
  protected final String TEXT_227 = " imageDescriptor = ";
  protected final String TEXT_228 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_229 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_230 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_231 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_232 = NL;
  protected final String TEXT_233 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_234 = " domainModelRefresher = new ";
  protected final String TEXT_235 = "(this);" + NL;
  protected final String TEXT_236 = NL;
  protected final String TEXT_237 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_238 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_239 = " feature, ";
  protected final String TEXT_240 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_241 = NL;
  protected final String TEXT_242 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_243 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_244 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_245 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_246 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_247 = NL;
  protected final String TEXT_248 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_249 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_250 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_251 = ".eINSTANCE.get";
  protected final String TEXT_252 = "(), labelRefresher);";
  protected final String TEXT_253 = NL;
  protected final String TEXT_254 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_255 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_256 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_257 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_258 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_259 = NL;
  protected final String TEXT_260 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_261 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_262 = NL;
  protected final String TEXT_263 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_264 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_265 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_266 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_267 = " createLabel() {";
  protected final String TEXT_268 = NL + "\t\treturn new ";
  protected final String TEXT_269 = "();";
  protected final String TEXT_270 = NL + "\t\treturn ";
  protected final String TEXT_271 = ";";
  protected final String TEXT_272 = NL + "\t\treturn new ";
  protected final String TEXT_273 = "();";
  protected final String TEXT_274 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_275 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_276 = " label = createLabel();";
  protected final String TEXT_277 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_278 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_279 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_280 = NL + NL + "\t/**";
  protected final String TEXT_281 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_282 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_283 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_284 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_285 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_286 = "(";
  protected final String TEXT_287 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_288 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_289 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_290 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_291 = NL;
  protected final String TEXT_292 = NL;
  protected final String TEXT_293 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_294 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_295 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_296 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_297 = NL;
  protected final String TEXT_298 = "\t\tinstallEditPolicy(";
  protected final String TEXT_299 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_300 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_301 = " createDeleteCommand(";
  protected final String TEXT_302 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_303 = " editingDomain = ";
  protected final String TEXT_304 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_305 = " cc = new ";
  protected final String TEXT_306 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_307 = "((";
  protected final String TEXT_308 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_309 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_310 = " editingDomain) {";
  protected final String TEXT_311 = NL + "\t\t\t\t";
  protected final String TEXT_312 = " result = new ";
  protected final String TEXT_313 = "();";
  protected final String TEXT_314 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_315 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_316 = ".eINSTANCE.get";
  protected final String TEXT_317 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_318 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_319 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_320 = ".eINSTANCE.get";
  protected final String TEXT_321 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_322 = ".UNSET_VALUE));";
  protected final String TEXT_323 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_324 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_325 = ".eINSTANCE.get";
  protected final String TEXT_326 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_327 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_328 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_329 = ".eINSTANCE.get";
  protected final String TEXT_330 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_331 = ".UNSET_VALUE));";
  protected final String TEXT_332 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_333 = NL + "\t\t\t\treturn ";
  protected final String TEXT_334 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_335 = ".eINSTANCE.get";
  protected final String TEXT_336 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_337 = NL + "\t\t\t\treturn ";
  protected final String TEXT_338 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_339 = ".eINSTANCE.get";
  protected final String TEXT_340 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_341 = ".UNSET_VALUE);";
  protected final String TEXT_342 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_343 = NL;
  protected final String TEXT_344 = "\t\tinstallEditPolicy(";
  protected final String TEXT_345 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_346 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_347 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_348 = NL;
  protected final String TEXT_349 = "\t\t\t\t\tprotected ";
  protected final String TEXT_350 = " getDirectEditCommand(";
  protected final String TEXT_351 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_352 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_353 = "(";
  protected final String TEXT_354 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_355 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_356 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_357 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_358 = " editingDomain = ";
  protected final String TEXT_359 = ".getEditingDomain(";
  protected final String TEXT_360 = ".getDiagram().getElement());";
  protected final String TEXT_361 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_362 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_363 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_364 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_365 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_366 = " createDomainModelCommand(";
  protected final String TEXT_367 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_368 = " element = ";
  protected final String TEXT_369 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_370 = " result = new ";
  protected final String TEXT_371 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
d393 58
a450 43
  protected final String TEXT_373 = " ";
  protected final String TEXT_374 = "feature = (";
  protected final String TEXT_375 = ") ";
  protected final String TEXT_376 = ".eINSTANCE.get";
  protected final String TEXT_377 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_378 = ".parseValue(feature, values[";
  protected final String TEXT_379 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_380 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_381 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_382 = " ";
  protected final String TEXT_383 = "values = new ";
  protected final String TEXT_384 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_385 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_386 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_387 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_388 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_389 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_390 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_391 = NL + "\t\t\t\t});";
  protected final String TEXT_392 = NL + "\t\t}" + NL;
  protected final String TEXT_393 = NL;
  protected final String TEXT_394 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_395 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_396 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_397 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_398 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_399 = "(this, ";
  protected final String TEXT_400 = ".class, new ";
  protected final String TEXT_401 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_402 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_403 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_404 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_405 = NL;
  protected final String TEXT_406 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_407 = " domainModelRefresher = new ";
  protected final String TEXT_408 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_409 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_410 = ".eINSTANCE.get";
  protected final String TEXT_411 = "(), labelRefresher);";
  protected final String TEXT_412 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_413 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_414 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_415 = NL;
d625 4
a629 2
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d631 5
a635 1
    stringBuffer.append(editPatternCode);
d639 3
a641 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d643 3
a645 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d649 1
a649 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d651 1
a651 1
    stringBuffer.append(primaryView);
d653 4
d658 5
a662 3
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = featureLabelModelFacet.getMetaFeatures();
d664 7
a670 1
    stringBuffer.append(TEXT_60);
d672 1
a672 1
    stringBuffer.append(TEXT_61);
d674 1
a674 1
    stringBuffer.append(TEXT_62);
d676 1
a676 1
    stringBuffer.append(TEXT_63);
d678 1
a678 1
    stringBuffer.append(TEXT_64);
d680 1
a680 1
    stringBuffer.append(TEXT_65);
d682 1
a682 1
    stringBuffer.append(TEXT_66);
d684 1
a684 1
    stringBuffer.append(TEXT_67);
d686 1
a686 1
    stringBuffer.append(TEXT_68);
d688 1
a688 1
    stringBuffer.append(TEXT_69);
d690 1
a690 1
    stringBuffer.append(TEXT_70);
d697 1
a697 1
    stringBuffer.append(TEXT_71);
d700 1
a700 1
    stringBuffer.append(TEXT_72);
d702 1
a702 1
    stringBuffer.append(TEXT_73);
d704 1
a704 1
    stringBuffer.append(TEXT_74);
d706 1
a706 1
    stringBuffer.append(TEXT_75);
d708 1
a708 1
    stringBuffer.append(TEXT_76);
d710 1
a710 1
    stringBuffer.append(TEXT_77);
d712 1
a712 1
    stringBuffer.append(TEXT_78);
d714 1
a714 1
    stringBuffer.append(TEXT_79);
d718 1
a718 1
    stringBuffer.append(TEXT_80);
d721 1
a721 1
    stringBuffer.append(TEXT_81);
d723 1
a723 1
    stringBuffer.append(TEXT_82);
d725 1
a725 1
    stringBuffer.append(TEXT_83);
d727 1
a727 1
    stringBuffer.append(TEXT_84);
d729 1
a729 1
    stringBuffer.append(TEXT_85);
d731 1
a731 1
    stringBuffer.append(TEXT_86);
d735 3
a737 1
    stringBuffer.append(TEXT_87);
d739 1
a739 1
    stringBuffer.append(TEXT_88);
d746 1
a746 1
    stringBuffer.append(TEXT_89);
d750 1
a750 1
    stringBuffer.append(TEXT_90);
d754 2
a755 2
    stringBuffer.append(TEXT_91);
    stringBuffer.append(TEXT_92);
d757 1
a757 1
    stringBuffer.append(TEXT_93);
d759 1
a759 1
    stringBuffer.append(TEXT_94);
d761 1
a761 1
    stringBuffer.append(TEXT_95);
d763 1
a763 1
    stringBuffer.append(TEXT_96);
d765 1
a765 1
    stringBuffer.append(TEXT_97);
d767 1
a767 1
    stringBuffer.append(TEXT_98);
d769 1
a769 1
    stringBuffer.append(TEXT_99);
d771 1
a771 1
    stringBuffer.append(TEXT_100);
d773 1
a773 1
    stringBuffer.append(TEXT_101);
d775 1
a775 1
    stringBuffer.append(TEXT_102);
d777 1
a777 1
    stringBuffer.append(TEXT_103);
d779 1
a779 1
    stringBuffer.append(TEXT_104);
d787 1
a787 1
    stringBuffer.append(TEXT_105);
d789 1
a789 1
    stringBuffer.append(TEXT_106);
d791 1
a791 1
    stringBuffer.append(TEXT_107);
d795 1
a795 1
    stringBuffer.append(TEXT_108);
d797 1
a797 1
    stringBuffer.append(TEXT_109);
d799 1
a799 1
    stringBuffer.append(TEXT_110);
d801 1
a801 1
    stringBuffer.append(TEXT_111);
d805 1
a805 1
    stringBuffer.append(TEXT_112);
d807 1
a807 1
    stringBuffer.append(TEXT_113);
d809 1
a809 1
    stringBuffer.append(TEXT_114);
d811 1
a811 1
    stringBuffer.append(TEXT_115);
d813 1
a813 1
    stringBuffer.append(TEXT_116);
d820 1
a820 1
    stringBuffer.append(TEXT_117);
d822 1
a822 1
    stringBuffer.append(TEXT_118);
d824 1
a824 1
    stringBuffer.append(TEXT_119);
d826 1
a826 1
    stringBuffer.append(TEXT_120);
d830 1
a830 1
    stringBuffer.append(TEXT_121);
d832 1
a832 1
    stringBuffer.append(TEXT_122);
d834 1
a834 1
    stringBuffer.append(TEXT_123);
d836 1
a836 1
    stringBuffer.append(TEXT_124);
d838 1
a838 1
    stringBuffer.append(TEXT_125);
d842 1
a842 1
    stringBuffer.append(TEXT_126);
d847 1
a847 1
    stringBuffer.append(TEXT_127);
d849 1
a849 1
    stringBuffer.append(TEXT_128);
d851 1
a851 1
    stringBuffer.append(TEXT_129);
d853 1
a853 1
    stringBuffer.append(TEXT_130);
d857 1
a857 1
    stringBuffer.append(TEXT_131);
d859 1
a859 1
    stringBuffer.append(TEXT_132);
d861 1
a861 1
    stringBuffer.append(TEXT_133);
d863 1
a863 1
    stringBuffer.append(TEXT_134);
d865 1
a865 1
    stringBuffer.append(TEXT_135);
d870 1
a870 1
    stringBuffer.append(TEXT_136);
d876 1
a876 1
    stringBuffer.append(TEXT_137);
d880 1
a880 1
    stringBuffer.append(TEXT_138);
d882 1
a882 1
    stringBuffer.append(TEXT_139);
d884 1
a884 1
    stringBuffer.append(TEXT_140);
d886 1
a886 1
    stringBuffer.append(TEXT_141);
d894 1
a894 1
    stringBuffer.append(TEXT_142);
d896 1
a896 1
    stringBuffer.append(TEXT_143);
d898 1
a898 1
    stringBuffer.append(TEXT_144);
d900 1
a900 1
    stringBuffer.append(TEXT_145);
d902 1
a902 1
    stringBuffer.append(TEXT_146);
d904 1
a904 1
    stringBuffer.append(TEXT_147);
d910 3
a912 3
    stringBuffer.append(TEXT_148);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(TEXT_150);
d914 1
a914 1
    stringBuffer.append(TEXT_151);
d918 1
a918 1
    stringBuffer.append(TEXT_152);
d920 1
a920 1
    stringBuffer.append(TEXT_153);
d924 2
a925 2
    stringBuffer.append(TEXT_154);
    stringBuffer.append(TEXT_155);
d927 1
a927 1
    stringBuffer.append(TEXT_156);
d929 1
a929 1
    stringBuffer.append(TEXT_157);
d933 2
a934 2
    stringBuffer.append(TEXT_158);
    stringBuffer.append(TEXT_159);
d936 1
a936 1
    stringBuffer.append(TEXT_160);
d938 1
a938 1
    stringBuffer.append(TEXT_161);
d940 1
a940 1
    stringBuffer.append(TEXT_162);
d942 1
a942 1
    stringBuffer.append(TEXT_163);
d944 1
a944 1
    stringBuffer.append(TEXT_164);
d946 1
a946 1
    stringBuffer.append(TEXT_165);
d948 1
a948 1
    stringBuffer.append(TEXT_166);
d950 1
a950 1
    stringBuffer.append(TEXT_167);
d952 1
a952 1
    stringBuffer.append(TEXT_168);
d954 1
a954 1
    stringBuffer.append(TEXT_169);
d956 1
a956 1
    stringBuffer.append(TEXT_170);
d958 1
a958 1
    stringBuffer.append(TEXT_171);
d960 1
a960 1
    stringBuffer.append(TEXT_172);
d962 1
a962 1
    stringBuffer.append(TEXT_173);
d964 1
a964 1
    stringBuffer.append(TEXT_174);
d966 1
a966 1
    stringBuffer.append(TEXT_175);
d968 1
a968 1
    stringBuffer.append(TEXT_176);
d970 1
a970 1
    stringBuffer.append(TEXT_177);
d974 2
a975 2
    stringBuffer.append(TEXT_178);
    stringBuffer.append(TEXT_179);
d1009 1
a1009 1
    stringBuffer.append(TEXT_180);
d1011 1
a1011 1
    stringBuffer.append(TEXT_181);
d1013 1
a1013 1
    stringBuffer.append(TEXT_182);
d1015 1
a1015 1
    stringBuffer.append(TEXT_183);
d1017 1
a1017 1
    stringBuffer.append(TEXT_184);
d1019 1
a1019 1
    stringBuffer.append(TEXT_185);
d1021 1
a1021 1
    stringBuffer.append(TEXT_186);
d1023 1
a1023 1
    stringBuffer.append(TEXT_187);
d1028 1
a1028 1
    stringBuffer.append(TEXT_188);
d1030 1
a1030 1
    stringBuffer.append(TEXT_189);
d1036 1
a1036 1
    stringBuffer.append(TEXT_190);
d1038 1
a1038 1
    stringBuffer.append(TEXT_191);
d1044 6
a1049 1
    stringBuffer.append(TEXT_192);
d1051 2
d1055 1
a1055 1
    stringBuffer.append(TEXT_193);
d1060 1
a1060 1
    stringBuffer.append(TEXT_194);
d1064 1
a1064 1
    stringBuffer.append(TEXT_195);
d1068 2
a1069 2
    stringBuffer.append(TEXT_196);
    stringBuffer.append(TEXT_197);
d1077 1
a1077 1
    stringBuffer.append(TEXT_198);
d1081 1
a1081 1
    stringBuffer.append(TEXT_199);
d1083 1
a1083 1
    stringBuffer.append(TEXT_200);
d1085 1
a1085 1
    stringBuffer.append(TEXT_201);
d1087 1
a1087 1
    stringBuffer.append(TEXT_202);
d1089 1
a1089 1
    stringBuffer.append(TEXT_203);
d1091 1
a1091 1
    stringBuffer.append(TEXT_204);
d1093 1
a1093 1
    stringBuffer.append(TEXT_205);
d1095 1
a1095 1
    stringBuffer.append(TEXT_206);
d1097 1
a1097 1
    stringBuffer.append(TEXT_207);
d1099 1
a1099 1
    stringBuffer.append(TEXT_208);
d1101 1
a1101 1
    stringBuffer.append(TEXT_209);
d1103 1
a1103 1
    stringBuffer.append(TEXT_210);
d1107 1
a1107 1
    stringBuffer.append(TEXT_211);
d1111 1
a1111 1
    stringBuffer.append(TEXT_212);
d1113 1
a1113 1
    stringBuffer.append(TEXT_213);
d1117 3
a1119 3
    stringBuffer.append(TEXT_214);
    stringBuffer.append(TEXT_215);
    stringBuffer.append(TEXT_216);
d1121 1
a1121 1
    stringBuffer.append(TEXT_217);
d1123 1
a1123 1
    stringBuffer.append(TEXT_218);
d1125 1
a1125 1
    stringBuffer.append(TEXT_219);
d1127 1
a1127 1
    stringBuffer.append(TEXT_220);
d1129 1
a1129 1
    stringBuffer.append(TEXT_221);
d1131 1
a1131 1
    stringBuffer.append(TEXT_222);
d1133 1
a1133 1
    stringBuffer.append(TEXT_223);
d1135 1
a1135 1
    stringBuffer.append(TEXT_224);
d1137 1
a1137 1
    stringBuffer.append(TEXT_225);
d1141 1
a1141 1
    stringBuffer.append(TEXT_226);
d1143 1
a1143 1
    stringBuffer.append(TEXT_227);
d1145 1
a1145 1
    stringBuffer.append(TEXT_228);
d1149 1
a1149 1
    stringBuffer.append(TEXT_229);
d1151 1
a1151 1
    stringBuffer.append(TEXT_230);
a1152 12
    stringBuffer.append(TEXT_231);
    stringBuffer.append(TEXT_232);
    stringBuffer.append(TEXT_233);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_235);
    stringBuffer.append(TEXT_236);
    stringBuffer.append(TEXT_237);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a1153 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1156 1
d1158 1
a1158 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1159 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1160 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1162 1
a1162 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1164 1
d1166 1
d1168 4
d1173 9
a1181 1
    stringBuffer.append(TEXT_249);
d1188 1
a1188 1
    stringBuffer.append(TEXT_250);
d1190 1
a1190 1
    stringBuffer.append(TEXT_251);
d1192 1
a1192 1
    stringBuffer.append(TEXT_252);
d1197 2
a1198 2
    stringBuffer.append(TEXT_253);
    stringBuffer.append(TEXT_254);
d1200 1
a1200 1
    stringBuffer.append(TEXT_255);
d1202 1
a1202 1
    stringBuffer.append(TEXT_256);
d1204 1
a1204 1
    stringBuffer.append(TEXT_257);
d1206 3
a1208 3
    stringBuffer.append(TEXT_258);
    stringBuffer.append(TEXT_259);
    stringBuffer.append(TEXT_260);
d1210 1
a1210 1
    stringBuffer.append(TEXT_261);
d1214 1
a1214 1
    stringBuffer.append(TEXT_262);
d1243 1
a1243 1
    stringBuffer.append(TEXT_263);
d1245 1
a1245 1
    stringBuffer.append(TEXT_264);
d1247 1
a1247 1
    stringBuffer.append(TEXT_265);
d1249 1
a1249 1
    stringBuffer.append(TEXT_266);
d1251 1
a1251 1
    stringBuffer.append(TEXT_267);
d1255 1
a1255 1
    stringBuffer.append(TEXT_268);
d1257 1
a1257 1
    stringBuffer.append(TEXT_269);
d1260 1
a1260 1
    stringBuffer.append(TEXT_270);
d1262 1
a1262 1
    stringBuffer.append(TEXT_271);
d1266 1
a1266 1
    stringBuffer.append(TEXT_272);
d1268 1
a1268 1
    stringBuffer.append(TEXT_273);
d1270 1
a1270 1
    stringBuffer.append(TEXT_274);
d1272 1
a1272 1
    stringBuffer.append(TEXT_275);
d1274 1
a1274 1
    stringBuffer.append(TEXT_276);
d1278 1
a1278 1
    stringBuffer.append(TEXT_277);
d1282 1
a1282 1
    stringBuffer.append(TEXT_278);
d1286 1
a1286 1
    stringBuffer.append(TEXT_279);
d1288 1
a1288 1
    stringBuffer.append(TEXT_280);
d1292 1
a1292 1
    stringBuffer.append(TEXT_281);
d1296 1
a1296 1
    stringBuffer.append(TEXT_282);
d1298 1
a1298 1
    stringBuffer.append(TEXT_283);
d1300 1
a1300 1
    stringBuffer.append(TEXT_284);
d1314 1
a1314 1
    stringBuffer.append(TEXT_285);
d1316 1
a1316 1
    stringBuffer.append(TEXT_286);
d1318 1
a1318 1
    stringBuffer.append(TEXT_287);
d1322 1
a1322 1
    stringBuffer.append(TEXT_288);
d1326 1
a1326 1
    stringBuffer.append(TEXT_289);
d1330 1
a1330 1
    stringBuffer.append(TEXT_290);
d1335 1
a1335 1
    stringBuffer.append(TEXT_291);
d1337 1
a1337 1
    stringBuffer.append(TEXT_292);
d1341 1
a1341 1
    stringBuffer.append(TEXT_293);
d1348 1
a1348 1
    stringBuffer.append(TEXT_294);
d1350 1
a1350 1
    stringBuffer.append(TEXT_295);
d1352 3
a1354 3
    stringBuffer.append(TEXT_296);
    stringBuffer.append(TEXT_297);
    stringBuffer.append(TEXT_298);
d1356 1
a1356 1
    stringBuffer.append(TEXT_299);
d1358 1
a1358 1
    stringBuffer.append(TEXT_300);
d1360 1
a1360 1
    stringBuffer.append(TEXT_301);
d1362 1
a1362 1
    stringBuffer.append(TEXT_302);
d1364 1
a1364 1
    stringBuffer.append(TEXT_303);
d1366 1
a1366 1
    stringBuffer.append(TEXT_304);
d1368 1
a1368 1
    stringBuffer.append(TEXT_305);
d1370 1
a1370 1
    stringBuffer.append(TEXT_306);
d1372 1
a1372 1
    stringBuffer.append(TEXT_307);
d1374 1
a1374 1
    stringBuffer.append(TEXT_308);
d1376 1
a1376 1
    stringBuffer.append(TEXT_309);
d1378 1
a1378 1
    stringBuffer.append(TEXT_310);
d1386 1
a1386 1
    stringBuffer.append(TEXT_311);
d1388 1
a1388 1
    stringBuffer.append(TEXT_312);
d1390 1
a1390 1
    stringBuffer.append(TEXT_313);
d1394 1
a1394 1
    stringBuffer.append(TEXT_314);
d1396 1
a1396 1
    stringBuffer.append(TEXT_315);
d1398 1
a1398 1
    stringBuffer.append(TEXT_316);
d1400 1
a1400 1
    stringBuffer.append(TEXT_317);
d1404 1
a1404 1
    stringBuffer.append(TEXT_318);
d1406 1
a1406 1
    stringBuffer.append(TEXT_319);
d1408 1
a1408 1
    stringBuffer.append(TEXT_320);
d1410 1
a1410 1
    stringBuffer.append(TEXT_321);
d1412 1
a1412 1
    stringBuffer.append(TEXT_322);
d1419 1
a1419 1
    stringBuffer.append(TEXT_323);
d1421 1
a1421 1
    stringBuffer.append(TEXT_324);
d1423 1
a1423 1
    stringBuffer.append(TEXT_325);
d1425 1
a1425 1
    stringBuffer.append(TEXT_326);
d1429 1
a1429 1
    stringBuffer.append(TEXT_327);
d1431 1
a1431 1
    stringBuffer.append(TEXT_328);
d1433 1
a1433 1
    stringBuffer.append(TEXT_329);
d1435 1
a1435 1
    stringBuffer.append(TEXT_330);
d1437 1
a1437 1
    stringBuffer.append(TEXT_331);
d1441 1
a1441 1
    stringBuffer.append(TEXT_332);
d1446 1
a1446 1
    stringBuffer.append(TEXT_333);
d1448 1
a1448 1
    stringBuffer.append(TEXT_334);
d1450 1
a1450 1
    stringBuffer.append(TEXT_335);
d1452 1
a1452 1
    stringBuffer.append(TEXT_336);
d1456 1
a1456 1
    stringBuffer.append(TEXT_337);
d1458 1
a1458 1
    stringBuffer.append(TEXT_338);
d1460 1
a1460 1
    stringBuffer.append(TEXT_339);
d1462 1
a1462 1
    stringBuffer.append(TEXT_340);
d1464 1
a1464 1
    stringBuffer.append(TEXT_341);
d1469 1
a1469 1
    stringBuffer.append(TEXT_342);
a1476 13
    stringBuffer.append(TEXT_343);
    stringBuffer.append(TEXT_344);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_345);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
    stringBuffer.append(TEXT_346);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_347);
    stringBuffer.append(TEXT_348);
    stringBuffer.append(TEXT_349);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_350);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
a1477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1479 1
a1479 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d1481 1
a1481 1
    stringBuffer.append(editPatternCode);
d1483 1
a1483 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
a1484 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
a1485 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1487 1
a1487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1489 1
a1489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1491 3
a1493 1
    stringBuffer.append(primaryView);
d1495 2
d1498 1
a1498 1
if (labelModelFacet instanceof FeatureLabelModelFacet) {
a1501 2
    stringBuffer.append(TEXT_361);
    stringBuffer.append(metaFeatures.size());
d1505 36
d1542 1
a1542 1
    stringBuffer.append(TEXT_364);
d1544 1
a1544 1
    stringBuffer.append(TEXT_365);
d1546 1
a1546 1
    stringBuffer.append(TEXT_366);
d1548 1
a1548 1
    stringBuffer.append(TEXT_367);
d1550 1
a1550 1
    stringBuffer.append(TEXT_368);
d1552 1
a1552 1
    stringBuffer.append(TEXT_369);
d1554 1
a1554 1
    stringBuffer.append(TEXT_370);
d1556 1
a1556 1
    stringBuffer.append(TEXT_371);
d1563 1
a1563 1
    stringBuffer.append(TEXT_372);
d1566 1
a1566 1
    stringBuffer.append(TEXT_373);
d1568 1
a1568 1
    stringBuffer.append(TEXT_374);
d1570 1
a1570 1
    stringBuffer.append(TEXT_375);
d1572 1
a1572 1
    stringBuffer.append(TEXT_376);
d1574 1
a1574 1
    stringBuffer.append(TEXT_377);
d1576 1
a1576 1
    stringBuffer.append(TEXT_378);
d1578 1
a1578 1
    stringBuffer.append(TEXT_379);
d1580 1
a1580 1
    stringBuffer.append(TEXT_380);
d1584 1
a1584 1
    stringBuffer.append(TEXT_381);
d1587 1
a1587 1
    stringBuffer.append(TEXT_382);
d1589 1
a1589 1
    stringBuffer.append(TEXT_383);
d1591 1
a1591 1
    stringBuffer.append(TEXT_384);
d1593 1
a1593 1
    stringBuffer.append(TEXT_385);
d1595 1
a1595 1
    stringBuffer.append(TEXT_386);
d1597 1
a1597 1
    stringBuffer.append(TEXT_387);
d1601 3
a1603 1
    stringBuffer.append(TEXT_388);
d1605 1
a1605 1
    stringBuffer.append(TEXT_389);
d1612 1
a1612 1
    stringBuffer.append(TEXT_390);
d1616 1
a1616 1
    stringBuffer.append(TEXT_391);
d1620 3
a1622 3
    stringBuffer.append(TEXT_392);
    stringBuffer.append(TEXT_393);
    stringBuffer.append(TEXT_394);
d1624 1
a1624 1
    stringBuffer.append(TEXT_395);
d1626 1
a1626 1
    stringBuffer.append(TEXT_396);
d1628 1
a1628 1
    stringBuffer.append(TEXT_397);
d1630 1
a1630 1
    stringBuffer.append(TEXT_398);
d1632 1
a1632 1
    stringBuffer.append(TEXT_399);
d1634 1
a1634 1
    stringBuffer.append(TEXT_400);
d1636 1
a1636 1
    stringBuffer.append(TEXT_401);
d1638 1
a1638 1
    stringBuffer.append(TEXT_402);
d1640 1
a1640 1
    stringBuffer.append(TEXT_403);
d1642 3
a1644 3
    stringBuffer.append(TEXT_404);
    stringBuffer.append(TEXT_405);
    stringBuffer.append(TEXT_406);
d1646 1
a1646 1
    stringBuffer.append(TEXT_407);
d1648 1
a1648 1
    stringBuffer.append(TEXT_408);
d1655 1
a1655 1
    stringBuffer.append(TEXT_409);
d1657 1
a1657 1
    stringBuffer.append(TEXT_410);
d1659 1
a1659 1
    stringBuffer.append(TEXT_411);
d1664 1
a1664 1
    stringBuffer.append(TEXT_412);
d1666 1
a1666 1
    stringBuffer.append(TEXT_413);
d1668 1
a1668 1
    stringBuffer.append(TEXT_414);
d1670 1
a1670 1
    stringBuffer.append(TEXT_415);
@


1.19
log
@Generate support for Navigator
@
text
@d264 143
a406 143
  protected final String TEXT_244 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_245 = NL;
  protected final String TEXT_246 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_247 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_248 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_249 = ".eINSTANCE.get";
  protected final String TEXT_250 = "(), labelRefresher);";
  protected final String TEXT_251 = NL;
  protected final String TEXT_252 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_253 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_254 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_255 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_256 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_257 = NL;
  protected final String TEXT_258 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_259 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_260 = NL;
  protected final String TEXT_261 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_262 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_263 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_264 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_265 = " createLabel() {";
  protected final String TEXT_266 = NL + "\t\treturn new ";
  protected final String TEXT_267 = "();";
  protected final String TEXT_268 = NL + "\t\treturn ";
  protected final String TEXT_269 = ";";
  protected final String TEXT_270 = NL + "\t\treturn new ";
  protected final String TEXT_271 = "();";
  protected final String TEXT_272 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_273 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_274 = " label = createLabel();";
  protected final String TEXT_275 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_276 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_277 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_278 = NL + NL + "\t/**";
  protected final String TEXT_279 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_280 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_281 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_282 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_283 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_284 = "(";
  protected final String TEXT_285 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_286 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_287 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_288 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_289 = NL;
  protected final String TEXT_290 = NL;
  protected final String TEXT_291 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_292 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_293 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_294 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_295 = NL;
  protected final String TEXT_296 = "\t\tinstallEditPolicy(";
  protected final String TEXT_297 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_298 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_299 = " createDeleteCommand(";
  protected final String TEXT_300 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_301 = " editingDomain = ";
  protected final String TEXT_302 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_303 = " cc = new ";
  protected final String TEXT_304 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_305 = "((";
  protected final String TEXT_306 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_307 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_308 = " editingDomain) {";
  protected final String TEXT_309 = NL + "\t\t\t\t";
  protected final String TEXT_310 = " result = new ";
  protected final String TEXT_311 = "();";
  protected final String TEXT_312 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_313 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_314 = ".eINSTANCE.get";
  protected final String TEXT_315 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_316 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_317 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_318 = ".eINSTANCE.get";
  protected final String TEXT_319 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_320 = ".UNSET_VALUE));";
  protected final String TEXT_321 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_322 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_323 = ".eINSTANCE.get";
  protected final String TEXT_324 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_325 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_326 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_327 = ".eINSTANCE.get";
  protected final String TEXT_328 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_329 = ".UNSET_VALUE));";
  protected final String TEXT_330 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_331 = NL + "\t\t\t\treturn ";
  protected final String TEXT_332 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_333 = ".eINSTANCE.get";
  protected final String TEXT_334 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_335 = NL + "\t\t\t\treturn ";
  protected final String TEXT_336 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_337 = ".eINSTANCE.get";
  protected final String TEXT_338 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_339 = ".UNSET_VALUE);";
  protected final String TEXT_340 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_341 = NL;
  protected final String TEXT_342 = "\t\tinstallEditPolicy(";
  protected final String TEXT_343 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_344 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_345 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_346 = NL;
  protected final String TEXT_347 = "\t\t\t\t\tprotected ";
  protected final String TEXT_348 = " getDirectEditCommand(";
  protected final String TEXT_349 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_350 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_351 = "(";
  protected final String TEXT_352 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_353 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_354 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_355 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_356 = " editingDomain = ";
  protected final String TEXT_357 = ".getEditingDomain(";
  protected final String TEXT_358 = ".getDiagram().getElement());";
  protected final String TEXT_359 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_360 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_361 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_362 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_363 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_364 = " createDomainModelCommand(";
  protected final String TEXT_365 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_366 = " element = ";
  protected final String TEXT_367 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_368 = " result = new ";
  protected final String TEXT_369 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_370 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_371 = " ";
  protected final String TEXT_372 = "feature = (";
  protected final String TEXT_373 = ") ";
  protected final String TEXT_374 = ".eINSTANCE.get";
  protected final String TEXT_375 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_376 = ".parseValue(feature, values[";
  protected final String TEXT_377 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_378 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_379 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_380 = " ";
  protected final String TEXT_381 = "values = new ";
  protected final String TEXT_382 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_383 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_384 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_385 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_386 = NL + "\t\t\t\t\t\tresult.append(";
d408 28
a435 26
  protected final String TEXT_388 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_389 = NL + "\t\t\t\t});";
  protected final String TEXT_390 = NL + "\t\t}" + NL;
  protected final String TEXT_391 = NL;
  protected final String TEXT_392 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_393 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_394 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_395 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_396 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_397 = "(this, ";
  protected final String TEXT_398 = ".class, new ";
  protected final String TEXT_399 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_400 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_401 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_402 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_403 = NL;
  protected final String TEXT_404 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_405 = " domainModelRefresher = new ";
  protected final String TEXT_406 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_407 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_408 = ".eINSTANCE.get";
  protected final String TEXT_409 = "(), labelRefresher);";
  protected final String TEXT_410 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_411 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_412 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_413 = NL;
d1128 1
d1130 1
d1132 2
d1135 1
a1135 1
    stringBuffer.append(TEXT_247);
d1142 1
a1142 1
    stringBuffer.append(TEXT_248);
d1144 1
a1144 1
    stringBuffer.append(TEXT_249);
d1146 1
a1146 1
    stringBuffer.append(TEXT_250);
a1150 3
    stringBuffer.append(TEXT_251);
    stringBuffer.append(TEXT_252);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1151 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1157 1
d1159 1
d1161 2
d1164 1
a1164 1
    stringBuffer.append(TEXT_259);
d1168 1
a1168 1
    stringBuffer.append(TEXT_260);
d1197 1
a1197 1
    stringBuffer.append(TEXT_261);
d1199 1
a1199 1
    stringBuffer.append(TEXT_262);
d1201 1
a1201 1
    stringBuffer.append(TEXT_263);
d1203 1
a1203 1
    stringBuffer.append(TEXT_264);
d1205 1
a1205 1
    stringBuffer.append(TEXT_265);
d1209 1
a1209 1
    stringBuffer.append(TEXT_266);
d1211 1
a1211 1
    stringBuffer.append(TEXT_267);
d1214 1
a1214 1
    stringBuffer.append(TEXT_268);
d1216 1
a1216 1
    stringBuffer.append(TEXT_269);
d1220 1
a1220 1
    stringBuffer.append(TEXT_270);
d1222 1
a1222 1
    stringBuffer.append(TEXT_271);
d1224 1
a1224 1
    stringBuffer.append(TEXT_272);
d1226 1
a1226 1
    stringBuffer.append(TEXT_273);
d1228 1
a1228 1
    stringBuffer.append(TEXT_274);
d1232 1
a1232 1
    stringBuffer.append(TEXT_275);
d1236 1
a1236 1
    stringBuffer.append(TEXT_276);
d1240 1
a1240 1
    stringBuffer.append(TEXT_277);
d1242 1
a1242 1
    stringBuffer.append(TEXT_278);
d1246 1
a1246 1
    stringBuffer.append(TEXT_279);
d1250 1
a1250 1
    stringBuffer.append(TEXT_280);
d1252 1
a1252 1
    stringBuffer.append(TEXT_281);
d1254 1
a1254 1
    stringBuffer.append(TEXT_282);
d1268 1
a1268 1
    stringBuffer.append(TEXT_283);
d1270 1
a1270 1
    stringBuffer.append(TEXT_284);
d1272 1
a1272 1
    stringBuffer.append(TEXT_285);
d1276 1
a1276 1
    stringBuffer.append(TEXT_286);
d1280 1
a1280 1
    stringBuffer.append(TEXT_287);
d1284 1
a1284 1
    stringBuffer.append(TEXT_288);
d1289 1
a1289 1
    stringBuffer.append(TEXT_289);
d1291 1
a1291 1
    stringBuffer.append(TEXT_290);
d1295 1
a1295 1
    stringBuffer.append(TEXT_291);
d1302 1
a1302 1
    stringBuffer.append(TEXT_292);
d1304 1
a1304 1
    stringBuffer.append(TEXT_293);
a1305 2
    stringBuffer.append(TEXT_294);
    stringBuffer.append(TEXT_295);
d1307 2
d1310 1
a1310 1
    stringBuffer.append(TEXT_297);
d1312 1
a1312 1
    stringBuffer.append(TEXT_298);
d1314 1
a1314 1
    stringBuffer.append(TEXT_299);
d1316 1
a1316 1
    stringBuffer.append(TEXT_300);
d1318 1
a1318 1
    stringBuffer.append(TEXT_301);
d1320 1
a1320 1
    stringBuffer.append(TEXT_302);
d1322 1
a1322 1
    stringBuffer.append(TEXT_303);
d1324 1
a1324 1
    stringBuffer.append(TEXT_304);
d1326 1
a1326 1
    stringBuffer.append(TEXT_305);
d1328 1
a1328 1
    stringBuffer.append(TEXT_306);
d1330 1
a1330 1
    stringBuffer.append(TEXT_307);
d1332 1
a1332 1
    stringBuffer.append(TEXT_308);
d1340 1
a1340 1
    stringBuffer.append(TEXT_309);
d1342 1
a1342 1
    stringBuffer.append(TEXT_310);
d1344 1
a1344 1
    stringBuffer.append(TEXT_311);
d1348 1
a1348 1
    stringBuffer.append(TEXT_312);
d1350 1
a1350 1
    stringBuffer.append(TEXT_313);
d1352 1
a1352 1
    stringBuffer.append(TEXT_314);
d1354 1
a1354 1
    stringBuffer.append(TEXT_315);
d1358 1
a1358 1
    stringBuffer.append(TEXT_316);
d1360 1
a1360 1
    stringBuffer.append(TEXT_317);
d1362 1
a1362 1
    stringBuffer.append(TEXT_318);
d1364 1
a1364 1
    stringBuffer.append(TEXT_319);
d1366 1
a1366 1
    stringBuffer.append(TEXT_320);
d1373 1
a1373 1
    stringBuffer.append(TEXT_321);
d1375 1
a1375 1
    stringBuffer.append(TEXT_322);
d1377 1
a1377 1
    stringBuffer.append(TEXT_323);
d1379 1
a1379 1
    stringBuffer.append(TEXT_324);
d1383 1
a1383 1
    stringBuffer.append(TEXT_325);
d1385 1
a1385 1
    stringBuffer.append(TEXT_326);
d1387 1
a1387 1
    stringBuffer.append(TEXT_327);
d1389 1
a1389 1
    stringBuffer.append(TEXT_328);
d1391 1
a1391 1
    stringBuffer.append(TEXT_329);
d1395 1
a1395 1
    stringBuffer.append(TEXT_330);
d1400 1
a1400 1
    stringBuffer.append(TEXT_331);
d1402 1
a1402 1
    stringBuffer.append(TEXT_332);
d1404 1
a1404 1
    stringBuffer.append(TEXT_333);
d1406 1
a1406 1
    stringBuffer.append(TEXT_334);
d1410 1
a1410 1
    stringBuffer.append(TEXT_335);
d1412 1
a1412 1
    stringBuffer.append(TEXT_336);
d1414 1
a1414 1
    stringBuffer.append(TEXT_337);
d1416 1
a1416 1
    stringBuffer.append(TEXT_338);
d1418 1
a1418 1
    stringBuffer.append(TEXT_339);
d1423 1
a1423 1
    stringBuffer.append(TEXT_340);
a1430 3
    stringBuffer.append(TEXT_341);
    stringBuffer.append(TEXT_342);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a1431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
d1433 1
a1433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1435 1
d1437 1
a1438 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a1439 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1441 1
a1441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1443 1
a1443 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d1445 1
a1445 1
    stringBuffer.append(editPatternCode);
d1447 1
a1447 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1449 1
a1449 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d1453 4
d1458 1
a1458 1
    stringBuffer.append(TEXT_356);
d1460 1
a1460 1
    stringBuffer.append(TEXT_357);
d1462 1
a1462 1
    stringBuffer.append(TEXT_358);
d1468 1
a1468 1
    stringBuffer.append(TEXT_359);
d1470 1
a1470 1
    stringBuffer.append(TEXT_360);
d1472 1
a1472 1
    stringBuffer.append(TEXT_361);
d1474 1
a1474 1
    stringBuffer.append(TEXT_362);
d1476 1
a1476 1
    stringBuffer.append(TEXT_363);
d1478 1
a1478 1
    stringBuffer.append(TEXT_364);
d1480 1
a1480 1
    stringBuffer.append(TEXT_365);
d1482 1
a1482 1
    stringBuffer.append(TEXT_366);
d1484 1
a1484 1
    stringBuffer.append(TEXT_367);
d1486 1
a1486 1
    stringBuffer.append(TEXT_368);
d1488 1
a1488 1
    stringBuffer.append(TEXT_369);
d1495 1
a1495 1
    stringBuffer.append(TEXT_370);
d1498 1
a1498 1
    stringBuffer.append(TEXT_371);
d1500 1
a1500 1
    stringBuffer.append(TEXT_372);
d1502 1
a1502 1
    stringBuffer.append(TEXT_373);
d1504 1
a1504 1
    stringBuffer.append(TEXT_374);
d1506 1
a1506 1
    stringBuffer.append(TEXT_375);
d1508 1
a1508 1
    stringBuffer.append(TEXT_376);
d1510 1
a1510 1
    stringBuffer.append(TEXT_377);
d1512 1
a1512 1
    stringBuffer.append(TEXT_378);
d1516 1
a1516 1
    stringBuffer.append(TEXT_379);
d1519 1
a1519 1
    stringBuffer.append(TEXT_380);
d1521 1
a1521 1
    stringBuffer.append(TEXT_381);
d1523 1
a1523 1
    stringBuffer.append(TEXT_382);
d1525 1
a1525 1
    stringBuffer.append(TEXT_383);
d1527 1
a1527 1
    stringBuffer.append(TEXT_384);
d1529 1
a1529 1
    stringBuffer.append(TEXT_385);
d1533 1
a1533 1
    stringBuffer.append(TEXT_386);
d1535 1
a1535 1
    stringBuffer.append(TEXT_387);
d1542 1
a1542 1
    stringBuffer.append(TEXT_388);
d1546 1
a1546 1
    stringBuffer.append(TEXT_389);
a1549 2
    stringBuffer.append(TEXT_390);
    stringBuffer.append(TEXT_391);
a1550 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
a1551 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d1553 1
a1553 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d1555 1
a1555 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
d1557 2
a1559 2
    stringBuffer.append(TEXT_397);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
d1561 1
a1561 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
d1563 1
a1563 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
d1565 1
a1565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
d1567 2
a1569 1
    stringBuffer.append(TEXT_402);
d1571 1
d1573 2
d1576 1
a1576 1
    stringBuffer.append(TEXT_405);
d1578 1
a1578 1
    stringBuffer.append(TEXT_406);
d1585 1
a1585 1
    stringBuffer.append(TEXT_407);
d1587 1
a1587 1
    stringBuffer.append(TEXT_408);
d1589 1
a1589 1
    stringBuffer.append(TEXT_409);
d1594 1
a1594 1
    stringBuffer.append(TEXT_410);
d1596 1
a1596 1
    stringBuffer.append(TEXT_411);
d1598 1
a1598 1
    stringBuffer.append(TEXT_412);
d1600 1
a1600 1
    stringBuffer.append(TEXT_413);
@


1.18
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d200 1
a200 1
  protected final String TEXT_180 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
d204 1
a204 1
  protected final String TEXT_184 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
d206 1
a206 1
  protected final String TEXT_186 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
d215 1
a215 1
  protected final String TEXT_195 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
@


1.17
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d120 189
a308 189
  protected final String TEXT_100 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_101 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_102 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_103 = " editingDomain) {";
  protected final String TEXT_104 = NL + "\t\t\t\t";
  protected final String TEXT_105 = " result = new ";
  protected final String TEXT_106 = "();";
  protected final String TEXT_107 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_108 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_109 = ".eINSTANCE.get";
  protected final String TEXT_110 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_111 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_112 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_113 = ".eINSTANCE.get";
  protected final String TEXT_114 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_115 = ".UNSET_VALUE));";
  protected final String TEXT_116 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_117 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_118 = ".eINSTANCE.get";
  protected final String TEXT_119 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_120 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_121 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_122 = ".eINSTANCE.get";
  protected final String TEXT_123 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_124 = ".UNSET_VALUE));";
  protected final String TEXT_125 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_126 = NL + "\t\t\t\treturn ";
  protected final String TEXT_127 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_128 = ".eINSTANCE.get";
  protected final String TEXT_129 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_130 = NL + "\t\t\t\treturn ";
  protected final String TEXT_131 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_132 = ".eINSTANCE.get";
  protected final String TEXT_133 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_134 = ".UNSET_VALUE);";
  protected final String TEXT_135 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_136 = NL;
  protected final String TEXT_137 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_138 = "\", new ";
  protected final String TEXT_139 = "()); //$NON-NLS-1$";
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_142 = ".OPEN_ROLE";
  protected final String TEXT_143 = " + \"";
  protected final String TEXT_144 = "\" ";
  protected final String TEXT_145 = ", new ";
  protected final String TEXT_146 = "());";
  protected final String TEXT_147 = NL + "\t}" + NL;
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_150 = " req) {";
  protected final String TEXT_151 = NL + "\t\tif (";
  protected final String TEXT_152 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_153 = NL;
  protected final String TEXT_154 = "if (";
  protected final String TEXT_155 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_156 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}";
  protected final String TEXT_157 = NL;
  protected final String TEXT_158 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_159 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_160 = "(this, ";
  protected final String TEXT_161 = ".class, new ";
  protected final String TEXT_162 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_163 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_164 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\t";
  protected final String TEXT_165 = " zoomManager = (";
  protected final String TEXT_166 = ") getViewer().getProperty(";
  protected final String TEXT_167 = ".class.toString());" + NL + "\t\t\t\t\tdouble zoomLevel = zoomManager == null ? 1.0 : zoomManager.getZoom();" + NL + "\t\t\t\t\tif (zoomLevel > 1.0 && getLabel().getFont() != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_168 = "[] datas = getLabel().getFont().getFontData();" + NL + "\t\t\t\t\t\tfor(int i = 0; i < datas.length; i++) {" + NL + "\t\t\t\t\t\t\tdatas[i].height *= zoomLevel;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_169 = " font = new ";
  protected final String TEXT_170 = "(getLabel().getFont().getDevice(), datas);" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(font);" + NL + "\t\t\t\t\t\tcelleditor.getControl().addDisposeListener(new ";
  protected final String TEXT_171 = "() {" + NL + "\t\t\t\t\t\t\tpublic void widgetDisposed(";
  protected final String TEXT_172 = " e) {" + NL + "\t\t\t\t\t\t\t\tfont.dispose();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint avr = ";
  protected final String TEXT_173 = ".getFontMetrics(celleditor.getControl().getFont()).getAverageCharWidth();" + NL + "\t\t\t\t\trect.setSize(new ";
  protected final String TEXT_174 = "(celleditor.getControl().computeSize(";
  protected final String TEXT_175 = ".DEFAULT, ";
  protected final String TEXT_176 = ".DEFAULT)).expand(avr * 2, 0));" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_177 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_178 = NL;
  protected final String TEXT_179 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_180 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_181 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_182 = " element = ";
  protected final String TEXT_183 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_184 = " element = ";
  protected final String TEXT_185 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_186 = " element, String pattern) {";
  protected final String TEXT_187 = NL + "\t\treturn ";
  protected final String TEXT_188 = ".format(pattern, new Object[] {";
  protected final String TEXT_189 = NL + "\t\t\tnew ";
  protected final String TEXT_190 = "(";
  protected final String TEXT_191 = ")";
  protected final String TEXT_192 = ",";
  protected final String TEXT_193 = NL + "\t\t});";
  protected final String TEXT_194 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_195 = NL + "\t}";
  protected final String TEXT_196 = NL;
  protected final String TEXT_197 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_198 = NL + "\t\t";
  protected final String TEXT_199 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_200 = ") ";
  protected final String TEXT_201 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_202 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_203 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_204 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_205 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_206 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_207 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_208 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_209 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_210 = "\t" + NL + "\t}";
  protected final String TEXT_211 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_212 = " createdFont;";
  protected final String TEXT_213 = "\t";
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_216 = " style = (";
  protected final String TEXT_217 = ")  ";
  protected final String TEXT_218 = ".getStyle(";
  protected final String TEXT_219 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_220 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_221 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_222 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_223 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_224 = " getLabelIcon() {";
  protected final String TEXT_225 = NL + "\t\t";
  protected final String TEXT_226 = " imageDescriptor = ";
  protected final String TEXT_227 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_228 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_229 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_230 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_231 = NL;
  protected final String TEXT_232 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_233 = " domainModelRefresher = new ";
  protected final String TEXT_234 = "(this);" + NL;
  protected final String TEXT_235 = NL;
  protected final String TEXT_236 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_237 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_238 = " feature, ";
  protected final String TEXT_239 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_242 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_243 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_244 = NL;
  protected final String TEXT_245 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_246 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_247 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_248 = ".eINSTANCE.get";
  protected final String TEXT_249 = "(), labelRefresher);";
  protected final String TEXT_250 = NL;
  protected final String TEXT_251 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_252 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_253 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_254 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_255 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_256 = NL;
  protected final String TEXT_257 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_258 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_259 = NL;
  protected final String TEXT_260 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_261 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_262 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_263 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_264 = " createLabel() {";
  protected final String TEXT_265 = NL + "\t\treturn new ";
  protected final String TEXT_266 = "();";
  protected final String TEXT_267 = NL + "\t\treturn ";
  protected final String TEXT_268 = ";";
  protected final String TEXT_269 = NL + "\t\treturn new ";
  protected final String TEXT_270 = "();";
  protected final String TEXT_271 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_272 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_273 = " label = createLabel();";
  protected final String TEXT_274 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_275 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_276 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_277 = NL + NL + "\t/**";
  protected final String TEXT_278 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_279 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_280 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_281 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_282 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_283 = "(";
  protected final String TEXT_284 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_285 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_286 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_287 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_288 = NL;
d310 95
a404 95
  protected final String TEXT_290 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_291 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_292 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_293 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_294 = NL;
  protected final String TEXT_295 = "\t\tinstallEditPolicy(";
  protected final String TEXT_296 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_297 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_298 = " createDeleteCommand(";
  protected final String TEXT_299 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_300 = " editingDomain = ";
  protected final String TEXT_301 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_302 = " cc = new ";
  protected final String TEXT_303 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_304 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_305 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_306 = " editingDomain) {";
  protected final String TEXT_307 = NL + "\t\t\t\t";
  protected final String TEXT_308 = " result = new ";
  protected final String TEXT_309 = "();";
  protected final String TEXT_310 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_311 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_312 = ".eINSTANCE.get";
  protected final String TEXT_313 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_314 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_315 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_316 = ".eINSTANCE.get";
  protected final String TEXT_317 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_318 = ".UNSET_VALUE));";
  protected final String TEXT_319 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_320 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_321 = ".eINSTANCE.get";
  protected final String TEXT_322 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_323 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_324 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_325 = ".eINSTANCE.get";
  protected final String TEXT_326 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_327 = ".UNSET_VALUE));";
  protected final String TEXT_328 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_329 = NL + "\t\t\t\treturn ";
  protected final String TEXT_330 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_331 = ".eINSTANCE.get";
  protected final String TEXT_332 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_333 = NL + "\t\t\t\treturn ";
  protected final String TEXT_334 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_335 = ".eINSTANCE.get";
  protected final String TEXT_336 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_337 = ".UNSET_VALUE);";
  protected final String TEXT_338 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_339 = NL;
  protected final String TEXT_340 = "\t\tinstallEditPolicy(";
  protected final String TEXT_341 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_342 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_343 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_344 = NL;
  protected final String TEXT_345 = "\t\t\t\t\tprotected ";
  protected final String TEXT_346 = " getDirectEditCommand(";
  protected final String TEXT_347 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_348 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_349 = "(";
  protected final String TEXT_350 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_351 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_352 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_353 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_354 = " editingDomain = ";
  protected final String TEXT_355 = ".getEditingDomain(";
  protected final String TEXT_356 = ".getDiagram().getElement());";
  protected final String TEXT_357 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_358 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_359 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_360 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_361 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_362 = " createDomainModelCommand(";
  protected final String TEXT_363 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_364 = " element = ";
  protected final String TEXT_365 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_366 = " result = new ";
  protected final String TEXT_367 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_368 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_369 = " ";
  protected final String TEXT_370 = "feature = (";
  protected final String TEXT_371 = ") ";
  protected final String TEXT_372 = ".eINSTANCE.get";
  protected final String TEXT_373 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_374 = ".parseValue(feature, values[";
  protected final String TEXT_375 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_376 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_377 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_378 = " ";
  protected final String TEXT_379 = "values = new ";
  protected final String TEXT_380 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_381 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_382 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_383 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_384 = NL + "\t\t\t\t\t\tresult.append(";
d406 28
a433 26
  protected final String TEXT_386 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_387 = NL + "\t\t\t\t});";
  protected final String TEXT_388 = NL + "\t\t}" + NL;
  protected final String TEXT_389 = NL;
  protected final String TEXT_390 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_391 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_392 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_393 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_394 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_395 = "(this, ";
  protected final String TEXT_396 = ".class, new ";
  protected final String TEXT_397 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_398 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_399 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_400 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_401 = NL;
  protected final String TEXT_402 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_403 = " domainModelRefresher = new ";
  protected final String TEXT_404 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_405 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_406 = ".eINSTANCE.get";
  protected final String TEXT_407 = "(), labelRefresher);";
  protected final String TEXT_408 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_409 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_410 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_411 = NL;
d731 1
a731 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d733 2
d736 1
a736 1
    stringBuffer.append(TEXT_102);
d738 1
a738 1
    stringBuffer.append(TEXT_103);
a745 2
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d749 2
d754 1
a754 1
    stringBuffer.append(TEXT_107);
d756 1
a756 1
    stringBuffer.append(TEXT_108);
d758 1
a758 1
    stringBuffer.append(TEXT_109);
d760 1
a760 1
    stringBuffer.append(TEXT_110);
d764 1
a764 1
    stringBuffer.append(TEXT_111);
d766 1
a766 1
    stringBuffer.append(TEXT_112);
d768 1
a768 1
    stringBuffer.append(TEXT_113);
d770 1
a770 1
    stringBuffer.append(TEXT_114);
d772 1
a772 1
    stringBuffer.append(TEXT_115);
d779 1
a779 1
    stringBuffer.append(TEXT_116);
d781 1
a781 1
    stringBuffer.append(TEXT_117);
d783 1
a783 1
    stringBuffer.append(TEXT_118);
d785 1
a785 1
    stringBuffer.append(TEXT_119);
d789 1
a789 1
    stringBuffer.append(TEXT_120);
d791 1
a791 1
    stringBuffer.append(TEXT_121);
d793 1
a793 1
    stringBuffer.append(TEXT_122);
d795 1
a795 1
    stringBuffer.append(TEXT_123);
d797 1
a797 1
    stringBuffer.append(TEXT_124);
d801 1
a801 1
    stringBuffer.append(TEXT_125);
d806 1
a806 1
    stringBuffer.append(TEXT_126);
d808 1
a808 1
    stringBuffer.append(TEXT_127);
d810 1
a810 1
    stringBuffer.append(TEXT_128);
d812 1
a812 1
    stringBuffer.append(TEXT_129);
d816 1
a816 1
    stringBuffer.append(TEXT_130);
d818 1
a818 1
    stringBuffer.append(TEXT_131);
d820 1
a820 1
    stringBuffer.append(TEXT_132);
d822 1
a822 1
    stringBuffer.append(TEXT_133);
d824 1
a824 1
    stringBuffer.append(TEXT_134);
d829 1
a829 1
    stringBuffer.append(TEXT_135);
d835 1
a835 1
    stringBuffer.append(TEXT_136);
d839 1
a839 1
    stringBuffer.append(TEXT_137);
d841 1
a841 1
    stringBuffer.append(TEXT_138);
d843 1
a843 1
    stringBuffer.append(TEXT_139);
d845 1
a845 1
    stringBuffer.append(TEXT_140);
d853 1
a853 1
    stringBuffer.append(TEXT_141);
d855 1
a855 1
    stringBuffer.append(TEXT_142);
d857 1
a857 1
    stringBuffer.append(TEXT_143);
d859 1
a859 1
    stringBuffer.append(TEXT_144);
d861 1
a861 1
    stringBuffer.append(TEXT_145);
d863 1
a863 1
    stringBuffer.append(TEXT_146);
a868 1
    stringBuffer.append(TEXT_147);
d871 1
d873 1
a873 1
    stringBuffer.append(TEXT_150);
d877 1
a877 1
    stringBuffer.append(TEXT_151);
d879 1
a879 1
    stringBuffer.append(TEXT_152);
a882 1
    stringBuffer.append(TEXT_153);
d884 1
d886 1
a886 1
    stringBuffer.append(TEXT_155);
d888 1
a888 1
    stringBuffer.append(TEXT_156);
a891 1
    stringBuffer.append(TEXT_157);
a892 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d896 2
d899 1
a899 1
    stringBuffer.append(TEXT_161);
d901 1
a901 1
    stringBuffer.append(TEXT_162);
d903 1
a903 1
    stringBuffer.append(TEXT_163);
a904 2
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager"));
d910 2
a912 2
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d916 2
d919 1
a919 1
    stringBuffer.append(TEXT_171);
d921 1
a921 1
    stringBuffer.append(TEXT_172);
d923 1
a923 1
    stringBuffer.append(TEXT_173);
a924 2
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d928 2
a932 1
    stringBuffer.append(TEXT_177);
d934 1
d968 1
a968 1
    stringBuffer.append(TEXT_179);
d970 1
a970 1
    stringBuffer.append(TEXT_180);
d972 1
a972 1
    stringBuffer.append(TEXT_181);
d974 1
a974 1
    stringBuffer.append(TEXT_182);
d976 1
a976 1
    stringBuffer.append(TEXT_183);
d978 1
a978 1
    stringBuffer.append(TEXT_184);
d980 1
a980 1
    stringBuffer.append(TEXT_185);
d982 1
a982 1
    stringBuffer.append(TEXT_186);
d987 1
a987 1
    stringBuffer.append(TEXT_187);
d989 1
a989 1
    stringBuffer.append(TEXT_188);
d995 1
a995 1
    stringBuffer.append(TEXT_189);
d997 1
a997 1
    stringBuffer.append(TEXT_190);
d1003 1
a1003 1
    stringBuffer.append(TEXT_191);
d1007 1
a1007 1
    stringBuffer.append(TEXT_192);
d1012 1
a1012 1
    stringBuffer.append(TEXT_193);
d1016 1
a1016 1
    stringBuffer.append(TEXT_194);
a1019 1
    stringBuffer.append(TEXT_195);
d1021 1
d1029 1
a1029 1
    stringBuffer.append(TEXT_197);
a1032 2
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d1036 2
d1039 1
a1039 1
    stringBuffer.append(TEXT_201);
d1041 1
a1041 1
    stringBuffer.append(TEXT_202);
a1042 2
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1048 2
d1051 1
a1051 1
    stringBuffer.append(TEXT_207);
d1053 1
a1053 1
    stringBuffer.append(TEXT_208);
d1055 1
a1055 1
    stringBuffer.append(TEXT_209);
d1059 1
a1059 1
    stringBuffer.append(TEXT_210);
d1063 1
a1063 1
    stringBuffer.append(TEXT_211);
d1065 1
a1065 1
    stringBuffer.append(TEXT_212);
a1068 1
    stringBuffer.append(TEXT_213);
a1070 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d1074 2
d1077 1
a1077 1
    stringBuffer.append(TEXT_218);
a1078 2
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1086 2
d1089 1
a1089 1
    stringBuffer.append(TEXT_224);
d1093 1
a1093 1
    stringBuffer.append(TEXT_225);
d1095 1
a1095 1
    stringBuffer.append(TEXT_226);
d1097 1
a1097 1
    stringBuffer.append(TEXT_227);
d1101 1
a1101 1
    stringBuffer.append(TEXT_228);
d1103 1
a1103 1
    stringBuffer.append(TEXT_229);
a1104 1
    stringBuffer.append(TEXT_230);
a1106 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d1110 1
d1113 1
d1115 1
a1115 1
    stringBuffer.append(TEXT_237);
d1117 1
a1117 1
    stringBuffer.append(TEXT_238);
a1118 1
    stringBuffer.append(TEXT_239);
a1120 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1124 1
d1127 1
d1129 1
a1129 1
    stringBuffer.append(TEXT_246);
d1136 1
a1136 1
    stringBuffer.append(TEXT_247);
d1138 1
a1138 1
    stringBuffer.append(TEXT_248);
d1140 1
a1140 1
    stringBuffer.append(TEXT_249);
a1144 1
    stringBuffer.append(TEXT_250);
a1145 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1153 1
d1156 1
d1158 1
a1158 1
    stringBuffer.append(TEXT_258);
d1162 1
a1162 1
    stringBuffer.append(TEXT_259);
d1191 1
a1191 1
    stringBuffer.append(TEXT_260);
d1193 1
a1193 1
    stringBuffer.append(TEXT_261);
d1195 1
a1195 1
    stringBuffer.append(TEXT_262);
d1197 1
a1197 1
    stringBuffer.append(TEXT_263);
d1199 1
a1199 1
    stringBuffer.append(TEXT_264);
d1203 1
a1203 1
    stringBuffer.append(TEXT_265);
d1205 1
a1205 1
    stringBuffer.append(TEXT_266);
d1208 1
a1208 1
    stringBuffer.append(TEXT_267);
d1210 1
a1210 1
    stringBuffer.append(TEXT_268);
d1214 1
a1214 1
    stringBuffer.append(TEXT_269);
d1216 1
a1216 1
    stringBuffer.append(TEXT_270);
d1218 1
a1218 1
    stringBuffer.append(TEXT_271);
d1220 1
a1220 1
    stringBuffer.append(TEXT_272);
d1222 1
a1222 1
    stringBuffer.append(TEXT_273);
d1226 1
a1226 1
    stringBuffer.append(TEXT_274);
d1230 1
a1230 1
    stringBuffer.append(TEXT_275);
d1234 1
a1234 1
    stringBuffer.append(TEXT_276);
d1236 1
a1236 1
    stringBuffer.append(TEXT_277);
d1240 1
a1240 1
    stringBuffer.append(TEXT_278);
a1243 2
    stringBuffer.append(TEXT_279);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d1247 2
d1262 1
a1262 1
    stringBuffer.append(TEXT_282);
d1264 1
a1264 1
    stringBuffer.append(TEXT_283);
d1266 1
a1266 1
    stringBuffer.append(TEXT_284);
d1270 1
a1270 1
    stringBuffer.append(TEXT_285);
d1274 1
a1274 1
    stringBuffer.append(TEXT_286);
d1278 1
a1278 1
    stringBuffer.append(TEXT_287);
d1283 1
a1283 1
    stringBuffer.append(TEXT_288);
d1285 1
a1285 1
    stringBuffer.append(TEXT_289);
d1289 1
a1289 1
    stringBuffer.append(TEXT_290);
d1296 1
a1296 1
    stringBuffer.append(TEXT_291);
d1298 1
a1298 1
    stringBuffer.append(TEXT_292);
a1299 1
    stringBuffer.append(TEXT_293);
d1302 1
d1304 1
a1304 1
    stringBuffer.append(TEXT_296);
d1306 1
a1306 1
    stringBuffer.append(TEXT_297);
d1308 1
a1308 1
    stringBuffer.append(TEXT_298);
d1310 1
a1310 1
    stringBuffer.append(TEXT_299);
d1312 1
a1312 1
    stringBuffer.append(TEXT_300);
a1313 2
    stringBuffer.append(TEXT_301);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1317 1
a1317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d1319 4
d1324 1
a1324 1
    stringBuffer.append(TEXT_305);
d1326 1
a1326 1
    stringBuffer.append(TEXT_306);
d1334 1
a1334 1
    stringBuffer.append(TEXT_307);
d1336 1
a1336 1
    stringBuffer.append(TEXT_308);
d1338 1
a1338 1
    stringBuffer.append(TEXT_309);
d1342 1
a1342 1
    stringBuffer.append(TEXT_310);
d1344 1
a1344 1
    stringBuffer.append(TEXT_311);
d1346 1
a1346 1
    stringBuffer.append(TEXT_312);
d1348 1
a1348 1
    stringBuffer.append(TEXT_313);
d1352 1
a1352 1
    stringBuffer.append(TEXT_314);
d1354 1
a1354 1
    stringBuffer.append(TEXT_315);
d1356 1
a1356 1
    stringBuffer.append(TEXT_316);
d1358 1
a1358 1
    stringBuffer.append(TEXT_317);
d1360 1
a1360 1
    stringBuffer.append(TEXT_318);
d1367 1
a1367 1
    stringBuffer.append(TEXT_319);
d1369 1
a1369 1
    stringBuffer.append(TEXT_320);
d1371 1
a1371 1
    stringBuffer.append(TEXT_321);
d1373 1
a1373 1
    stringBuffer.append(TEXT_322);
d1377 1
a1377 1
    stringBuffer.append(TEXT_323);
d1379 1
a1379 1
    stringBuffer.append(TEXT_324);
d1381 1
a1381 1
    stringBuffer.append(TEXT_325);
d1383 1
a1383 1
    stringBuffer.append(TEXT_326);
d1385 1
a1385 1
    stringBuffer.append(TEXT_327);
d1389 1
a1389 1
    stringBuffer.append(TEXT_328);
d1394 1
a1394 1
    stringBuffer.append(TEXT_329);
d1396 1
a1396 1
    stringBuffer.append(TEXT_330);
d1398 1
a1398 1
    stringBuffer.append(TEXT_331);
d1400 1
a1400 1
    stringBuffer.append(TEXT_332);
d1404 1
a1404 1
    stringBuffer.append(TEXT_333);
d1406 1
a1406 1
    stringBuffer.append(TEXT_334);
d1408 1
a1408 1
    stringBuffer.append(TEXT_335);
d1410 1
a1410 1
    stringBuffer.append(TEXT_336);
d1412 1
a1412 1
    stringBuffer.append(TEXT_337);
d1417 1
a1417 1
    stringBuffer.append(TEXT_338);
a1424 3
    stringBuffer.append(TEXT_339);
    stringBuffer.append(TEXT_340);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a1425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
d1427 1
a1427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1429 1
d1431 1
a1432 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a1433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1435 1
a1435 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1437 1
a1437 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d1439 1
a1439 1
    stringBuffer.append(editPatternCode);
d1441 1
a1441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1443 1
a1443 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d1447 4
d1452 1
a1452 1
    stringBuffer.append(TEXT_354);
d1454 1
a1454 1
    stringBuffer.append(TEXT_355);
d1456 1
a1456 1
    stringBuffer.append(TEXT_356);
d1462 1
a1462 1
    stringBuffer.append(TEXT_357);
d1464 1
a1464 1
    stringBuffer.append(TEXT_358);
d1466 1
a1466 1
    stringBuffer.append(TEXT_359);
d1468 1
a1468 1
    stringBuffer.append(TEXT_360);
d1470 1
a1470 1
    stringBuffer.append(TEXT_361);
d1472 1
a1472 1
    stringBuffer.append(TEXT_362);
d1474 1
a1474 1
    stringBuffer.append(TEXT_363);
d1476 1
a1476 1
    stringBuffer.append(TEXT_364);
d1478 1
a1478 1
    stringBuffer.append(TEXT_365);
d1480 1
a1480 1
    stringBuffer.append(TEXT_366);
d1482 1
a1482 1
    stringBuffer.append(TEXT_367);
d1489 1
a1489 1
    stringBuffer.append(TEXT_368);
d1492 1
a1492 1
    stringBuffer.append(TEXT_369);
d1494 1
a1494 1
    stringBuffer.append(TEXT_370);
d1496 1
a1496 1
    stringBuffer.append(TEXT_371);
d1498 1
a1498 1
    stringBuffer.append(TEXT_372);
d1500 1
a1500 1
    stringBuffer.append(TEXT_373);
d1502 1
a1502 1
    stringBuffer.append(TEXT_374);
d1504 1
a1504 1
    stringBuffer.append(TEXT_375);
d1506 1
a1506 1
    stringBuffer.append(TEXT_376);
d1510 1
a1510 1
    stringBuffer.append(TEXT_377);
d1513 1
a1513 1
    stringBuffer.append(TEXT_378);
d1515 1
a1515 1
    stringBuffer.append(TEXT_379);
d1517 1
a1517 1
    stringBuffer.append(TEXT_380);
d1519 1
a1519 1
    stringBuffer.append(TEXT_381);
d1521 1
a1521 1
    stringBuffer.append(TEXT_382);
d1523 1
a1523 1
    stringBuffer.append(TEXT_383);
d1527 1
a1527 1
    stringBuffer.append(TEXT_384);
d1529 1
a1529 1
    stringBuffer.append(TEXT_385);
d1536 1
a1536 1
    stringBuffer.append(TEXT_386);
d1540 1
a1540 1
    stringBuffer.append(TEXT_387);
a1543 2
    stringBuffer.append(TEXT_388);
    stringBuffer.append(TEXT_389);
a1544 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
a1545 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d1547 1
a1547 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d1549 1
a1549 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
d1551 2
a1553 2
    stringBuffer.append(TEXT_395);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
d1555 1
a1555 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
d1557 1
a1557 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
d1559 1
a1559 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
d1561 2
a1563 1
    stringBuffer.append(TEXT_400);
d1565 1
d1567 2
d1570 1
a1570 1
    stringBuffer.append(TEXT_403);
d1572 1
a1572 1
    stringBuffer.append(TEXT_404);
d1579 1
a1579 1
    stringBuffer.append(TEXT_405);
d1581 1
a1581 1
    stringBuffer.append(TEXT_406);
d1583 1
a1583 1
    stringBuffer.append(TEXT_407);
d1588 1
a1588 1
    stringBuffer.append(TEXT_408);
d1590 1
a1590 1
    stringBuffer.append(TEXT_409);
d1592 1
a1592 1
    stringBuffer.append(TEXT_410);
d1594 1
a1594 1
    stringBuffer.append(TEXT_411);
@


1.16
log
@When zoom level is > 100%, font height of the inplace editor should be adjusted to match the font height of the label (when zoom level is < 100%, no scaling is performed, otherwise the text is not readable)
@
text
@d156 42
a197 42
  protected final String TEXT_136 = NL + "\t}" + NL;
  protected final String TEXT_137 = NL;
  protected final String TEXT_138 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_139 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_140 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_141 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_142 = "(this, ";
  protected final String TEXT_143 = ".class, new ";
  protected final String TEXT_144 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_145 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_146 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\t";
  protected final String TEXT_147 = " zoomManager = (";
  protected final String TEXT_148 = ") getViewer().getProperty(";
  protected final String TEXT_149 = ".class.toString());" + NL + "\t\t\t\t\tdouble zoomLevel = zoomManager == null ? 1.0 : zoomManager.getZoom();" + NL + "\t\t\t\t\tif (zoomLevel > 1.0 && getLabel().getFont() != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_150 = "[] datas = getLabel().getFont().getFontData();" + NL + "\t\t\t\t\t\tfor(int i = 0; i < datas.length; i++) {" + NL + "\t\t\t\t\t\t\tdatas[i].height *= zoomLevel;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_151 = " font = new ";
  protected final String TEXT_152 = "(getLabel().getFont().getDevice(), datas);" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(font);" + NL + "\t\t\t\t\t\tcelleditor.getControl().addDisposeListener(new ";
  protected final String TEXT_153 = "() {" + NL + "\t\t\t\t\t\t\tpublic void widgetDisposed(";
  protected final String TEXT_154 = " e) {" + NL + "\t\t\t\t\t\t\t\tfont.dispose();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint avr = ";
  protected final String TEXT_155 = ".getFontMetrics(celleditor.getControl().getFont()).getAverageCharWidth();" + NL + "\t\t\t\t\trect.setSize(new ";
  protected final String TEXT_156 = "(celleditor.getControl().computeSize(";
  protected final String TEXT_157 = ".DEFAULT, ";
  protected final String TEXT_158 = ".DEFAULT)).expand(avr * 2, 0));" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_159 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_160 = NL;
  protected final String TEXT_161 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_162 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_163 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_164 = " element = ";
  protected final String TEXT_165 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_166 = " element = ";
  protected final String TEXT_167 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_168 = " element, String pattern) {";
  protected final String TEXT_169 = NL + "\t\treturn ";
  protected final String TEXT_170 = ".format(pattern, new Object[] {";
  protected final String TEXT_171 = NL + "\t\t\tnew ";
  protected final String TEXT_172 = "(";
  protected final String TEXT_173 = ")";
  protected final String TEXT_174 = ",";
  protected final String TEXT_175 = NL + "\t\t});";
  protected final String TEXT_176 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_177 = NL + "\t}";
d199 17
a215 17
  protected final String TEXT_179 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_180 = NL + "\t\t";
  protected final String TEXT_181 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_182 = ") ";
  protected final String TEXT_183 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_184 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_185 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_186 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_187 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_188 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_189 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_190 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_191 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_192 = "\t" + NL + "\t}";
  protected final String TEXT_193 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_194 = " createdFont;";
  protected final String TEXT_195 = "\t";
d217 215
a431 197
  protected final String TEXT_197 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_198 = " style = (";
  protected final String TEXT_199 = ")  ";
  protected final String TEXT_200 = ".getStyle(";
  protected final String TEXT_201 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_202 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_203 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_204 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_205 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_206 = " getLabelIcon() {";
  protected final String TEXT_207 = NL + "\t\t";
  protected final String TEXT_208 = " imageDescriptor = ";
  protected final String TEXT_209 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_210 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_211 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_212 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_213 = NL;
  protected final String TEXT_214 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_215 = " domainModelRefresher = new ";
  protected final String TEXT_216 = "(this);" + NL;
  protected final String TEXT_217 = NL;
  protected final String TEXT_218 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_219 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_220 = " feature, ";
  protected final String TEXT_221 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_222 = NL;
  protected final String TEXT_223 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_224 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_225 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_226 = NL;
  protected final String TEXT_227 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_228 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_229 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_230 = ".eINSTANCE.get";
  protected final String TEXT_231 = "(), labelRefresher);";
  protected final String TEXT_232 = NL;
  protected final String TEXT_233 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_234 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_235 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_236 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_237 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_238 = NL;
  protected final String TEXT_239 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_240 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_241 = NL;
  protected final String TEXT_242 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_243 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_244 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_245 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_246 = " createLabel() {";
  protected final String TEXT_247 = NL + "\t\treturn new ";
  protected final String TEXT_248 = "();";
  protected final String TEXT_249 = NL + "\t\treturn ";
  protected final String TEXT_250 = ";";
  protected final String TEXT_251 = NL + "\t\treturn new ";
  protected final String TEXT_252 = "();";
  protected final String TEXT_253 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_254 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_255 = " label = createLabel();";
  protected final String TEXT_256 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_257 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_258 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_259 = NL + NL + "\t/**";
  protected final String TEXT_260 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_261 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_262 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_263 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_264 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_265 = "(";
  protected final String TEXT_266 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_267 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_268 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_269 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_270 = NL;
  protected final String TEXT_271 = NL;
  protected final String TEXT_272 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_273 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_274 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_275 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_276 = NL;
  protected final String TEXT_277 = "\t\tinstallEditPolicy(";
  protected final String TEXT_278 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_279 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_280 = " createDeleteCommand(";
  protected final String TEXT_281 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_282 = " editingDomain = ";
  protected final String TEXT_283 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_284 = " cc = new ";
  protected final String TEXT_285 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_286 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_287 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_288 = " editingDomain) {";
  protected final String TEXT_289 = NL + "\t\t\t\t";
  protected final String TEXT_290 = " result = new ";
  protected final String TEXT_291 = "();";
  protected final String TEXT_292 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_293 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_294 = ".eINSTANCE.get";
  protected final String TEXT_295 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_296 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_297 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_298 = ".eINSTANCE.get";
  protected final String TEXT_299 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_300 = ".UNSET_VALUE));";
  protected final String TEXT_301 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_302 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_303 = ".eINSTANCE.get";
  protected final String TEXT_304 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_305 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_306 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_307 = ".eINSTANCE.get";
  protected final String TEXT_308 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_309 = ".UNSET_VALUE));";
  protected final String TEXT_310 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_311 = NL + "\t\t\t\treturn ";
  protected final String TEXT_312 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_313 = ".eINSTANCE.get";
  protected final String TEXT_314 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_315 = NL + "\t\t\t\treturn ";
  protected final String TEXT_316 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_317 = ".eINSTANCE.get";
  protected final String TEXT_318 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_319 = ".UNSET_VALUE);";
  protected final String TEXT_320 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_321 = NL;
  protected final String TEXT_322 = "\t\tinstallEditPolicy(";
  protected final String TEXT_323 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_324 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_325 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_326 = NL;
  protected final String TEXT_327 = "\t\t\t\t\tprotected ";
  protected final String TEXT_328 = " getDirectEditCommand(";
  protected final String TEXT_329 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_330 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_331 = "(";
  protected final String TEXT_332 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_333 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_334 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_335 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_336 = " editingDomain = ";
  protected final String TEXT_337 = ".getEditingDomain(";
  protected final String TEXT_338 = ".getDiagram().getElement());";
  protected final String TEXT_339 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_340 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_341 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_342 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_343 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_344 = " createDomainModelCommand(";
  protected final String TEXT_345 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_346 = " element = ";
  protected final String TEXT_347 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_348 = " result = new ";
  protected final String TEXT_349 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_350 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_351 = " ";
  protected final String TEXT_352 = "feature = (";
  protected final String TEXT_353 = ") ";
  protected final String TEXT_354 = ".eINSTANCE.get";
  protected final String TEXT_355 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_356 = ".parseValue(feature, values[";
  protected final String TEXT_357 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_358 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_359 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_360 = " ";
  protected final String TEXT_361 = "values = new ";
  protected final String TEXT_362 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_363 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_364 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_365 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_366 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_367 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_368 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_369 = NL + "\t\t\t\t});";
  protected final String TEXT_370 = NL + "\t\t}" + NL;
  protected final String TEXT_371 = NL;
  protected final String TEXT_372 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_373 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_374 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_375 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_376 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_377 = "(this, ";
  protected final String TEXT_378 = ".class, new ";
  protected final String TEXT_379 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_380 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_381 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_382 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_383 = NL;
  protected final String TEXT_384 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_385 = " domainModelRefresher = new ";
  protected final String TEXT_386 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_387 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_388 = ".eINSTANCE.get";
  protected final String TEXT_389 = "(), labelRefresher);";
  protected final String TEXT_390 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_391 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_392 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_393 = NL;
d829 2
d833 1
a833 1
if (!isReadOnly) {
d836 1
d838 30
d869 12
a880 1
    stringBuffer.append(TEXT_139);
d882 8
a889 1
    stringBuffer.append(TEXT_140);
d891 1
a891 1
    stringBuffer.append(TEXT_141);
d893 1
a893 1
    stringBuffer.append(TEXT_142);
d895 1
a895 1
    stringBuffer.append(TEXT_143);
d897 1
a897 1
    stringBuffer.append(TEXT_144);
d899 1
a899 1
    stringBuffer.append(TEXT_145);
d901 1
a901 1
    stringBuffer.append(TEXT_146);
d903 1
a903 1
    stringBuffer.append(TEXT_147);
d905 1
a905 1
    stringBuffer.append(TEXT_148);
d907 1
a907 1
    stringBuffer.append(TEXT_149);
d909 1
a909 1
    stringBuffer.append(TEXT_150);
d911 1
a911 1
    stringBuffer.append(TEXT_151);
d913 1
a913 1
    stringBuffer.append(TEXT_152);
d915 1
a915 1
    stringBuffer.append(TEXT_153);
d917 1
a917 1
    stringBuffer.append(TEXT_154);
d919 1
a919 1
    stringBuffer.append(TEXT_155);
d921 1
a921 1
    stringBuffer.append(TEXT_156);
d923 1
a923 1
    stringBuffer.append(TEXT_157);
d925 1
a925 1
    stringBuffer.append(TEXT_158);
d929 2
a930 2
    stringBuffer.append(TEXT_159);
    stringBuffer.append(TEXT_160);
d964 1
a964 1
    stringBuffer.append(TEXT_161);
d966 1
a966 1
    stringBuffer.append(TEXT_162);
d968 1
a968 1
    stringBuffer.append(TEXT_163);
d970 1
a970 1
    stringBuffer.append(TEXT_164);
d972 1
a972 1
    stringBuffer.append(TEXT_165);
d974 1
a974 1
    stringBuffer.append(TEXT_166);
d976 1
a976 1
    stringBuffer.append(TEXT_167);
d978 1
a978 1
    stringBuffer.append(TEXT_168);
d983 1
a983 1
    stringBuffer.append(TEXT_169);
d985 1
a985 1
    stringBuffer.append(TEXT_170);
d991 1
a991 1
    stringBuffer.append(TEXT_171);
d993 1
a993 1
    stringBuffer.append(TEXT_172);
d999 1
a999 1
    stringBuffer.append(TEXT_173);
d1003 1
a1003 1
    stringBuffer.append(TEXT_174);
d1008 1
a1008 1
    stringBuffer.append(TEXT_175);
d1012 1
a1012 1
    stringBuffer.append(TEXT_176);
d1016 2
a1017 2
    stringBuffer.append(TEXT_177);
    stringBuffer.append(TEXT_178);
d1025 1
a1025 1
    stringBuffer.append(TEXT_179);
d1029 1
a1029 1
    stringBuffer.append(TEXT_180);
d1031 1
a1031 1
    stringBuffer.append(TEXT_181);
d1033 1
a1033 1
    stringBuffer.append(TEXT_182);
d1035 1
a1035 1
    stringBuffer.append(TEXT_183);
d1037 1
a1037 1
    stringBuffer.append(TEXT_184);
d1039 1
a1039 1
    stringBuffer.append(TEXT_185);
d1041 1
a1041 1
    stringBuffer.append(TEXT_186);
d1043 1
a1043 1
    stringBuffer.append(TEXT_187);
d1045 1
a1045 1
    stringBuffer.append(TEXT_188);
d1047 1
a1047 1
    stringBuffer.append(TEXT_189);
d1049 1
a1049 1
    stringBuffer.append(TEXT_190);
d1051 1
a1051 1
    stringBuffer.append(TEXT_191);
d1055 1
a1055 1
    stringBuffer.append(TEXT_192);
d1059 1
a1059 1
    stringBuffer.append(TEXT_193);
d1061 1
a1061 1
    stringBuffer.append(TEXT_194);
d1065 3
a1067 3
    stringBuffer.append(TEXT_195);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(TEXT_197);
d1069 1
a1069 1
    stringBuffer.append(TEXT_198);
d1071 1
a1071 1
    stringBuffer.append(TEXT_199);
d1073 1
a1073 1
    stringBuffer.append(TEXT_200);
d1075 1
a1075 1
    stringBuffer.append(TEXT_201);
d1077 1
a1077 1
    stringBuffer.append(TEXT_202);
d1079 1
a1079 1
    stringBuffer.append(TEXT_203);
d1081 1
a1081 1
    stringBuffer.append(TEXT_204);
d1083 1
a1083 1
    stringBuffer.append(TEXT_205);
d1085 1
a1085 1
    stringBuffer.append(TEXT_206);
d1089 1
a1089 1
    stringBuffer.append(TEXT_207);
d1091 1
a1091 1
    stringBuffer.append(TEXT_208);
d1093 1
a1093 1
    stringBuffer.append(TEXT_209);
d1097 1
a1097 1
    stringBuffer.append(TEXT_210);
d1099 1
a1099 1
    stringBuffer.append(TEXT_211);
d1101 3
a1103 3
    stringBuffer.append(TEXT_212);
    stringBuffer.append(TEXT_213);
    stringBuffer.append(TEXT_214);
d1105 1
a1105 1
    stringBuffer.append(TEXT_215);
d1107 3
a1109 3
    stringBuffer.append(TEXT_216);
    stringBuffer.append(TEXT_217);
    stringBuffer.append(TEXT_218);
d1111 1
a1111 1
    stringBuffer.append(TEXT_219);
d1113 1
a1113 1
    stringBuffer.append(TEXT_220);
d1115 3
a1117 3
    stringBuffer.append(TEXT_221);
    stringBuffer.append(TEXT_222);
    stringBuffer.append(TEXT_223);
d1119 1
a1119 1
    stringBuffer.append(TEXT_224);
d1121 3
a1123 3
    stringBuffer.append(TEXT_225);
    stringBuffer.append(TEXT_226);
    stringBuffer.append(TEXT_227);
d1125 1
a1125 1
    stringBuffer.append(TEXT_228);
d1132 1
a1132 1
    stringBuffer.append(TEXT_229);
d1134 1
a1134 1
    stringBuffer.append(TEXT_230);
d1136 1
a1136 1
    stringBuffer.append(TEXT_231);
d1141 2
a1142 2
    stringBuffer.append(TEXT_232);
    stringBuffer.append(TEXT_233);
d1144 1
a1144 1
    stringBuffer.append(TEXT_234);
d1146 1
a1146 1
    stringBuffer.append(TEXT_235);
d1148 1
a1148 1
    stringBuffer.append(TEXT_236);
d1150 3
a1152 3
    stringBuffer.append(TEXT_237);
    stringBuffer.append(TEXT_238);
    stringBuffer.append(TEXT_239);
d1154 1
a1154 1
    stringBuffer.append(TEXT_240);
d1158 1
a1158 1
    stringBuffer.append(TEXT_241);
d1187 1
a1187 1
    stringBuffer.append(TEXT_242);
d1189 1
a1189 1
    stringBuffer.append(TEXT_243);
d1191 1
a1191 1
    stringBuffer.append(TEXT_244);
d1193 1
a1193 1
    stringBuffer.append(TEXT_245);
d1195 1
a1195 1
    stringBuffer.append(TEXT_246);
d1199 1
a1199 1
    stringBuffer.append(TEXT_247);
d1201 1
a1201 1
    stringBuffer.append(TEXT_248);
d1204 1
a1204 1
    stringBuffer.append(TEXT_249);
d1206 1
a1206 1
    stringBuffer.append(TEXT_250);
d1210 1
a1210 1
    stringBuffer.append(TEXT_251);
d1212 1
a1212 1
    stringBuffer.append(TEXT_252);
d1214 1
a1214 1
    stringBuffer.append(TEXT_253);
d1216 1
a1216 1
    stringBuffer.append(TEXT_254);
d1218 1
a1218 1
    stringBuffer.append(TEXT_255);
d1222 1
a1222 1
    stringBuffer.append(TEXT_256);
d1226 1
a1226 1
    stringBuffer.append(TEXT_257);
d1230 1
a1230 1
    stringBuffer.append(TEXT_258);
d1232 1
a1232 1
    stringBuffer.append(TEXT_259);
d1236 1
a1236 1
    stringBuffer.append(TEXT_260);
d1240 1
a1240 1
    stringBuffer.append(TEXT_261);
d1242 1
a1242 1
    stringBuffer.append(TEXT_262);
d1244 1
a1244 1
    stringBuffer.append(TEXT_263);
d1258 1
a1258 1
    stringBuffer.append(TEXT_264);
d1260 1
a1260 1
    stringBuffer.append(TEXT_265);
d1262 1
a1262 1
    stringBuffer.append(TEXT_266);
d1266 1
a1266 1
    stringBuffer.append(TEXT_267);
d1270 1
a1270 1
    stringBuffer.append(TEXT_268);
d1274 1
a1274 1
    stringBuffer.append(TEXT_269);
d1279 1
a1279 1
    stringBuffer.append(TEXT_270);
d1281 1
a1281 1
    stringBuffer.append(TEXT_271);
d1285 1
a1285 1
    stringBuffer.append(TEXT_272);
d1292 1
a1292 1
    stringBuffer.append(TEXT_273);
d1294 1
a1294 1
    stringBuffer.append(TEXT_274);
d1296 3
a1298 3
    stringBuffer.append(TEXT_275);
    stringBuffer.append(TEXT_276);
    stringBuffer.append(TEXT_277);
d1300 1
a1300 1
    stringBuffer.append(TEXT_278);
d1302 1
a1302 1
    stringBuffer.append(TEXT_279);
d1304 1
a1304 1
    stringBuffer.append(TEXT_280);
d1306 1
a1306 1
    stringBuffer.append(TEXT_281);
d1308 1
a1308 1
    stringBuffer.append(TEXT_282);
d1310 1
a1310 1
    stringBuffer.append(TEXT_283);
d1312 1
a1312 1
    stringBuffer.append(TEXT_284);
d1314 1
a1314 1
    stringBuffer.append(TEXT_285);
d1316 1
a1316 1
    stringBuffer.append(TEXT_286);
d1318 1
a1318 1
    stringBuffer.append(TEXT_287);
d1320 1
a1320 1
    stringBuffer.append(TEXT_288);
d1328 1
a1328 1
    stringBuffer.append(TEXT_289);
d1330 1
a1330 1
    stringBuffer.append(TEXT_290);
d1332 1
a1332 1
    stringBuffer.append(TEXT_291);
d1336 1
a1336 1
    stringBuffer.append(TEXT_292);
d1338 1
a1338 1
    stringBuffer.append(TEXT_293);
d1340 1
a1340 1
    stringBuffer.append(TEXT_294);
d1342 1
a1342 1
    stringBuffer.append(TEXT_295);
d1346 1
a1346 1
    stringBuffer.append(TEXT_296);
d1348 1
a1348 1
    stringBuffer.append(TEXT_297);
d1350 1
a1350 1
    stringBuffer.append(TEXT_298);
d1352 1
a1352 1
    stringBuffer.append(TEXT_299);
d1354 1
a1354 1
    stringBuffer.append(TEXT_300);
d1361 1
a1361 1
    stringBuffer.append(TEXT_301);
d1363 1
a1363 1
    stringBuffer.append(TEXT_302);
d1365 1
a1365 1
    stringBuffer.append(TEXT_303);
d1367 1
a1367 1
    stringBuffer.append(TEXT_304);
d1371 1
a1371 1
    stringBuffer.append(TEXT_305);
d1373 1
a1373 1
    stringBuffer.append(TEXT_306);
d1375 1
a1375 1
    stringBuffer.append(TEXT_307);
d1377 1
a1377 1
    stringBuffer.append(TEXT_308);
d1379 1
a1379 1
    stringBuffer.append(TEXT_309);
d1383 1
a1383 1
    stringBuffer.append(TEXT_310);
d1388 1
a1388 1
    stringBuffer.append(TEXT_311);
d1390 1
a1390 1
    stringBuffer.append(TEXT_312);
d1392 1
a1392 1
    stringBuffer.append(TEXT_313);
d1394 1
a1394 1
    stringBuffer.append(TEXT_314);
d1398 1
a1398 1
    stringBuffer.append(TEXT_315);
d1400 1
a1400 1
    stringBuffer.append(TEXT_316);
d1402 1
a1402 1
    stringBuffer.append(TEXT_317);
d1404 1
a1404 1
    stringBuffer.append(TEXT_318);
d1406 1
a1406 1
    stringBuffer.append(TEXT_319);
d1411 1
a1411 1
    stringBuffer.append(TEXT_320);
d1419 2
a1420 2
    stringBuffer.append(TEXT_321);
    stringBuffer.append(TEXT_322);
d1422 1
a1422 1
    stringBuffer.append(TEXT_323);
d1424 1
a1424 1
    stringBuffer.append(TEXT_324);
d1426 3
a1428 3
    stringBuffer.append(TEXT_325);
    stringBuffer.append(TEXT_326);
    stringBuffer.append(TEXT_327);
d1430 1
a1430 1
    stringBuffer.append(TEXT_328);
d1432 1
a1432 1
    stringBuffer.append(TEXT_329);
d1434 1
a1434 1
    stringBuffer.append(TEXT_330);
d1436 1
a1436 1
    stringBuffer.append(TEXT_331);
d1438 1
a1438 1
    stringBuffer.append(TEXT_332);
d1440 1
a1440 1
    stringBuffer.append(TEXT_333);
d1442 1
a1442 1
    stringBuffer.append(TEXT_334);
d1444 1
a1444 1
    stringBuffer.append(TEXT_335);
d1446 1
a1446 1
    stringBuffer.append(TEXT_336);
d1448 1
a1448 1
    stringBuffer.append(TEXT_337);
d1450 1
a1450 1
    stringBuffer.append(TEXT_338);
d1456 1
a1456 1
    stringBuffer.append(TEXT_339);
d1458 1
a1458 1
    stringBuffer.append(TEXT_340);
d1460 1
a1460 1
    stringBuffer.append(TEXT_341);
d1462 1
a1462 1
    stringBuffer.append(TEXT_342);
d1464 1
a1464 1
    stringBuffer.append(TEXT_343);
d1466 1
a1466 1
    stringBuffer.append(TEXT_344);
d1468 1
a1468 1
    stringBuffer.append(TEXT_345);
d1470 1
a1470 1
    stringBuffer.append(TEXT_346);
d1472 1
a1472 1
    stringBuffer.append(TEXT_347);
d1474 1
a1474 1
    stringBuffer.append(TEXT_348);
d1476 1
a1476 1
    stringBuffer.append(TEXT_349);
d1483 1
a1483 1
    stringBuffer.append(TEXT_350);
d1486 1
a1486 1
    stringBuffer.append(TEXT_351);
d1488 1
a1488 1
    stringBuffer.append(TEXT_352);
d1490 1
a1490 1
    stringBuffer.append(TEXT_353);
d1492 1
a1492 1
    stringBuffer.append(TEXT_354);
d1494 1
a1494 1
    stringBuffer.append(TEXT_355);
d1496 1
a1496 1
    stringBuffer.append(TEXT_356);
d1498 1
a1498 1
    stringBuffer.append(TEXT_357);
d1500 1
a1500 1
    stringBuffer.append(TEXT_358);
d1504 1
a1504 1
    stringBuffer.append(TEXT_359);
d1507 1
a1507 1
    stringBuffer.append(TEXT_360);
d1509 1
a1509 1
    stringBuffer.append(TEXT_361);
d1511 1
a1511 1
    stringBuffer.append(TEXT_362);
d1513 1
a1513 1
    stringBuffer.append(TEXT_363);
d1515 1
a1515 1
    stringBuffer.append(TEXT_364);
d1517 1
a1517 1
    stringBuffer.append(TEXT_365);
d1521 1
a1521 1
    stringBuffer.append(TEXT_366);
d1523 1
a1523 1
    stringBuffer.append(TEXT_367);
d1530 1
a1530 1
    stringBuffer.append(TEXT_368);
d1534 1
a1534 1
    stringBuffer.append(TEXT_369);
d1538 3
a1540 3
    stringBuffer.append(TEXT_370);
    stringBuffer.append(TEXT_371);
    stringBuffer.append(TEXT_372);
d1542 1
a1542 1
    stringBuffer.append(TEXT_373);
d1544 1
a1544 1
    stringBuffer.append(TEXT_374);
d1546 1
a1546 1
    stringBuffer.append(TEXT_375);
d1548 1
a1548 1
    stringBuffer.append(TEXT_376);
d1550 1
a1550 1
    stringBuffer.append(TEXT_377);
d1552 1
a1552 1
    stringBuffer.append(TEXT_378);
d1554 1
a1554 1
    stringBuffer.append(TEXT_379);
d1556 1
a1556 1
    stringBuffer.append(TEXT_380);
d1558 1
a1558 1
    stringBuffer.append(TEXT_381);
d1560 3
a1562 3
    stringBuffer.append(TEXT_382);
    stringBuffer.append(TEXT_383);
    stringBuffer.append(TEXT_384);
d1564 1
a1564 1
    stringBuffer.append(TEXT_385);
d1566 1
a1566 1
    stringBuffer.append(TEXT_386);
d1573 1
a1573 1
    stringBuffer.append(TEXT_387);
d1575 1
a1575 1
    stringBuffer.append(TEXT_388);
d1577 1
a1577 1
    stringBuffer.append(TEXT_389);
d1582 1
a1582 1
    stringBuffer.append(TEXT_390);
d1584 1
a1584 1
    stringBuffer.append(TEXT_391);
d1586 1
a1586 1
    stringBuffer.append(TEXT_392);
d1588 1
a1588 1
    stringBuffer.append(TEXT_393);
@


1.15
log
@Fix compilation problems introduced by recent fix of https://bugs.eclipse.org/bugs/show_bug.cgi?id=161380
@
text
@d166 80
a245 80
  protected final String TEXT_146 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_147 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_150 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_151 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_152 = " element = ";
  protected final String TEXT_153 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_154 = " element = ";
  protected final String TEXT_155 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_156 = " element, String pattern) {";
  protected final String TEXT_157 = NL + "\t\treturn ";
  protected final String TEXT_158 = ".format(pattern, new Object[] {";
  protected final String TEXT_159 = NL + "\t\t\tnew ";
  protected final String TEXT_160 = "(";
  protected final String TEXT_161 = ")";
  protected final String TEXT_162 = ",";
  protected final String TEXT_163 = NL + "\t\t});";
  protected final String TEXT_164 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_165 = NL + "\t}";
  protected final String TEXT_166 = NL;
  protected final String TEXT_167 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_168 = NL + "\t\t";
  protected final String TEXT_169 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_170 = ") ";
  protected final String TEXT_171 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_173 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_174 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_175 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_176 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_177 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_178 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_179 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_180 = "\t" + NL + "\t}";
  protected final String TEXT_181 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_182 = " createdFont;";
  protected final String TEXT_183 = "\t";
  protected final String TEXT_184 = NL;
  protected final String TEXT_185 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_186 = " style = (";
  protected final String TEXT_187 = ")  ";
  protected final String TEXT_188 = ".getStyle(";
  protected final String TEXT_189 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_190 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_191 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_192 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_193 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_194 = " getLabelIcon() {";
  protected final String TEXT_195 = NL + "\t\t";
  protected final String TEXT_196 = " imageDescriptor = ";
  protected final String TEXT_197 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_198 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_199 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_200 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_203 = " domainModelRefresher = new ";
  protected final String TEXT_204 = "(this);" + NL;
  protected final String TEXT_205 = NL;
  protected final String TEXT_206 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_207 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_208 = " feature, ";
  protected final String TEXT_209 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_210 = NL;
  protected final String TEXT_211 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_212 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_213 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_216 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_217 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_218 = ".eINSTANCE.get";
  protected final String TEXT_219 = "(), labelRefresher);";
  protected final String TEXT_220 = NL;
  protected final String TEXT_221 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_222 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_223 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_224 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_225 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d247 144
a390 144
  protected final String TEXT_227 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_228 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_229 = NL;
  protected final String TEXT_230 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_231 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_232 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_233 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_234 = " createLabel() {";
  protected final String TEXT_235 = NL + "\t\treturn new ";
  protected final String TEXT_236 = "();";
  protected final String TEXT_237 = NL + "\t\treturn ";
  protected final String TEXT_238 = ";";
  protected final String TEXT_239 = NL + "\t\treturn new ";
  protected final String TEXT_240 = "();";
  protected final String TEXT_241 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_242 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_243 = " label = createLabel();";
  protected final String TEXT_244 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_245 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_246 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_247 = NL + NL + "\t/**";
  protected final String TEXT_248 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_249 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_250 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_251 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_252 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_253 = "(";
  protected final String TEXT_254 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_255 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_256 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_257 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_258 = NL;
  protected final String TEXT_259 = NL;
  protected final String TEXT_260 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_261 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_262 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_263 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_264 = NL;
  protected final String TEXT_265 = "\t\tinstallEditPolicy(";
  protected final String TEXT_266 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_267 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_268 = " createDeleteCommand(";
  protected final String TEXT_269 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_270 = " editingDomain = ";
  protected final String TEXT_271 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_272 = " cc = new ";
  protected final String TEXT_273 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_274 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_275 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_276 = " editingDomain) {";
  protected final String TEXT_277 = NL + "\t\t\t\t";
  protected final String TEXT_278 = " result = new ";
  protected final String TEXT_279 = "();";
  protected final String TEXT_280 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_281 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_282 = ".eINSTANCE.get";
  protected final String TEXT_283 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_284 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_285 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_286 = ".eINSTANCE.get";
  protected final String TEXT_287 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_288 = ".UNSET_VALUE));";
  protected final String TEXT_289 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_290 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_291 = ".eINSTANCE.get";
  protected final String TEXT_292 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_293 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_294 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_295 = ".eINSTANCE.get";
  protected final String TEXT_296 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_297 = ".UNSET_VALUE));";
  protected final String TEXT_298 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_299 = NL + "\t\t\t\treturn ";
  protected final String TEXT_300 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_301 = ".eINSTANCE.get";
  protected final String TEXT_302 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_303 = NL + "\t\t\t\treturn ";
  protected final String TEXT_304 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_305 = ".eINSTANCE.get";
  protected final String TEXT_306 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_307 = ".UNSET_VALUE);";
  protected final String TEXT_308 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_309 = NL;
  protected final String TEXT_310 = "\t\tinstallEditPolicy(";
  protected final String TEXT_311 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_312 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_313 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_314 = NL;
  protected final String TEXT_315 = "\t\t\t\t\tprotected ";
  protected final String TEXT_316 = " getDirectEditCommand(";
  protected final String TEXT_317 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_318 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_319 = "(";
  protected final String TEXT_320 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_321 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_322 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_323 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_324 = " editingDomain = ";
  protected final String TEXT_325 = ".getEditingDomain(";
  protected final String TEXT_326 = ".getDiagram().getElement());";
  protected final String TEXT_327 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_328 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_329 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_330 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_331 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_332 = " createDomainModelCommand(";
  protected final String TEXT_333 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_334 = " element = ";
  protected final String TEXT_335 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_336 = " result = new ";
  protected final String TEXT_337 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_338 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_339 = " ";
  protected final String TEXT_340 = "feature = (";
  protected final String TEXT_341 = ") ";
  protected final String TEXT_342 = ".eINSTANCE.get";
  protected final String TEXT_343 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_344 = ".parseValue(feature, values[";
  protected final String TEXT_345 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_346 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_347 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_348 = " ";
  protected final String TEXT_349 = "values = new ";
  protected final String TEXT_350 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_351 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_352 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_353 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_354 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_355 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_356 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_357 = NL + "\t\t\t\t});";
  protected final String TEXT_358 = NL + "\t\t}" + NL;
  protected final String TEXT_359 = NL;
  protected final String TEXT_360 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_361 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_362 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_363 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_364 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_365 = "(this, ";
  protected final String TEXT_366 = ".class, new ";
  protected final String TEXT_367 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_368 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_369 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_370 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
d393 21
a413 9
  protected final String TEXT_373 = " domainModelRefresher = new ";
  protected final String TEXT_374 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_375 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_376 = ".eINSTANCE.get";
  protected final String TEXT_377 = "(), labelRefresher);";
  protected final String TEXT_378 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_379 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_380 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_381 = NL;
d833 24
d860 2
a861 2
    stringBuffer.append(TEXT_147);
    stringBuffer.append(TEXT_148);
d895 1
a895 1
    stringBuffer.append(TEXT_149);
d897 1
a897 1
    stringBuffer.append(TEXT_150);
d899 1
a899 1
    stringBuffer.append(TEXT_151);
d901 1
a901 1
    stringBuffer.append(TEXT_152);
d903 1
a903 1
    stringBuffer.append(TEXT_153);
d905 1
a905 1
    stringBuffer.append(TEXT_154);
d907 1
a907 1
    stringBuffer.append(TEXT_155);
d909 1
a909 1
    stringBuffer.append(TEXT_156);
d914 1
a914 1
    stringBuffer.append(TEXT_157);
d916 1
a916 1
    stringBuffer.append(TEXT_158);
d922 1
a922 1
    stringBuffer.append(TEXT_159);
d924 1
a924 1
    stringBuffer.append(TEXT_160);
d930 1
a930 1
    stringBuffer.append(TEXT_161);
d934 1
a934 1
    stringBuffer.append(TEXT_162);
d939 1
a939 1
    stringBuffer.append(TEXT_163);
d943 1
a943 1
    stringBuffer.append(TEXT_164);
d947 2
a948 2
    stringBuffer.append(TEXT_165);
    stringBuffer.append(TEXT_166);
d956 1
a956 1
    stringBuffer.append(TEXT_167);
d960 1
a960 1
    stringBuffer.append(TEXT_168);
d962 1
a962 1
    stringBuffer.append(TEXT_169);
d964 1
a964 1
    stringBuffer.append(TEXT_170);
d966 1
a966 1
    stringBuffer.append(TEXT_171);
d968 1
a968 1
    stringBuffer.append(TEXT_172);
d970 1
a970 1
    stringBuffer.append(TEXT_173);
d972 1
a972 1
    stringBuffer.append(TEXT_174);
d974 1
a974 1
    stringBuffer.append(TEXT_175);
d976 1
a976 1
    stringBuffer.append(TEXT_176);
d978 1
a978 1
    stringBuffer.append(TEXT_177);
d980 1
a980 1
    stringBuffer.append(TEXT_178);
d982 1
a982 1
    stringBuffer.append(TEXT_179);
d986 1
a986 1
    stringBuffer.append(TEXT_180);
d990 1
a990 1
    stringBuffer.append(TEXT_181);
d992 1
a992 1
    stringBuffer.append(TEXT_182);
d996 3
a998 3
    stringBuffer.append(TEXT_183);
    stringBuffer.append(TEXT_184);
    stringBuffer.append(TEXT_185);
d1000 1
a1000 1
    stringBuffer.append(TEXT_186);
d1002 1
a1002 1
    stringBuffer.append(TEXT_187);
d1004 1
a1004 1
    stringBuffer.append(TEXT_188);
d1006 1
a1006 1
    stringBuffer.append(TEXT_189);
d1008 1
a1008 1
    stringBuffer.append(TEXT_190);
d1010 1
a1010 1
    stringBuffer.append(TEXT_191);
d1012 1
a1012 1
    stringBuffer.append(TEXT_192);
d1014 1
a1014 1
    stringBuffer.append(TEXT_193);
d1016 1
a1016 1
    stringBuffer.append(TEXT_194);
d1020 1
a1020 1
    stringBuffer.append(TEXT_195);
d1022 1
a1022 1
    stringBuffer.append(TEXT_196);
d1024 1
a1024 1
    stringBuffer.append(TEXT_197);
d1028 1
a1028 1
    stringBuffer.append(TEXT_198);
d1030 1
a1030 1
    stringBuffer.append(TEXT_199);
d1032 3
a1034 3
    stringBuffer.append(TEXT_200);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(TEXT_202);
d1036 1
a1036 1
    stringBuffer.append(TEXT_203);
d1038 3
a1040 3
    stringBuffer.append(TEXT_204);
    stringBuffer.append(TEXT_205);
    stringBuffer.append(TEXT_206);
d1042 1
a1042 1
    stringBuffer.append(TEXT_207);
d1044 1
a1044 1
    stringBuffer.append(TEXT_208);
d1046 3
a1048 3
    stringBuffer.append(TEXT_209);
    stringBuffer.append(TEXT_210);
    stringBuffer.append(TEXT_211);
d1050 1
a1050 1
    stringBuffer.append(TEXT_212);
d1052 3
a1054 3
    stringBuffer.append(TEXT_213);
    stringBuffer.append(TEXT_214);
    stringBuffer.append(TEXT_215);
d1056 1
a1056 1
    stringBuffer.append(TEXT_216);
d1063 1
a1063 1
    stringBuffer.append(TEXT_217);
d1065 1
a1065 1
    stringBuffer.append(TEXT_218);
d1067 1
a1067 1
    stringBuffer.append(TEXT_219);
d1072 2
a1073 2
    stringBuffer.append(TEXT_220);
    stringBuffer.append(TEXT_221);
d1075 1
a1075 1
    stringBuffer.append(TEXT_222);
d1077 1
a1077 1
    stringBuffer.append(TEXT_223);
d1079 1
a1079 1
    stringBuffer.append(TEXT_224);
d1081 3
a1083 3
    stringBuffer.append(TEXT_225);
    stringBuffer.append(TEXT_226);
    stringBuffer.append(TEXT_227);
d1085 1
a1085 1
    stringBuffer.append(TEXT_228);
d1089 1
a1089 1
    stringBuffer.append(TEXT_229);
d1118 1
a1118 1
    stringBuffer.append(TEXT_230);
d1120 1
a1120 1
    stringBuffer.append(TEXT_231);
d1122 1
a1122 1
    stringBuffer.append(TEXT_232);
d1124 1
a1124 1
    stringBuffer.append(TEXT_233);
d1126 1
a1126 1
    stringBuffer.append(TEXT_234);
d1130 1
a1130 1
    stringBuffer.append(TEXT_235);
d1132 1
a1132 1
    stringBuffer.append(TEXT_236);
d1135 1
a1135 1
    stringBuffer.append(TEXT_237);
d1137 1
a1137 1
    stringBuffer.append(TEXT_238);
d1141 1
a1141 1
    stringBuffer.append(TEXT_239);
d1143 1
a1143 1
    stringBuffer.append(TEXT_240);
d1145 1
a1145 1
    stringBuffer.append(TEXT_241);
d1147 1
a1147 1
    stringBuffer.append(TEXT_242);
d1149 1
a1149 1
    stringBuffer.append(TEXT_243);
d1153 1
a1153 1
    stringBuffer.append(TEXT_244);
d1157 1
a1157 1
    stringBuffer.append(TEXT_245);
d1161 1
a1161 1
    stringBuffer.append(TEXT_246);
d1163 1
a1163 1
    stringBuffer.append(TEXT_247);
d1167 1
a1167 1
    stringBuffer.append(TEXT_248);
d1171 1
a1171 1
    stringBuffer.append(TEXT_249);
d1173 1
a1173 1
    stringBuffer.append(TEXT_250);
d1175 1
a1175 1
    stringBuffer.append(TEXT_251);
d1189 1
a1189 1
    stringBuffer.append(TEXT_252);
d1191 1
a1191 1
    stringBuffer.append(TEXT_253);
d1193 1
a1193 1
    stringBuffer.append(TEXT_254);
d1197 1
a1197 1
    stringBuffer.append(TEXT_255);
d1201 1
a1201 1
    stringBuffer.append(TEXT_256);
d1205 1
a1205 1
    stringBuffer.append(TEXT_257);
d1210 1
a1210 1
    stringBuffer.append(TEXT_258);
d1212 1
a1212 1
    stringBuffer.append(TEXT_259);
d1216 1
a1216 1
    stringBuffer.append(TEXT_260);
d1223 1
a1223 1
    stringBuffer.append(TEXT_261);
d1225 1
a1225 1
    stringBuffer.append(TEXT_262);
d1227 3
a1229 3
    stringBuffer.append(TEXT_263);
    stringBuffer.append(TEXT_264);
    stringBuffer.append(TEXT_265);
d1231 1
a1231 1
    stringBuffer.append(TEXT_266);
d1233 1
a1233 1
    stringBuffer.append(TEXT_267);
d1235 1
a1235 1
    stringBuffer.append(TEXT_268);
d1237 1
a1237 1
    stringBuffer.append(TEXT_269);
d1239 1
a1239 1
    stringBuffer.append(TEXT_270);
d1241 1
a1241 1
    stringBuffer.append(TEXT_271);
d1243 1
a1243 1
    stringBuffer.append(TEXT_272);
d1245 1
a1245 1
    stringBuffer.append(TEXT_273);
d1247 1
a1247 1
    stringBuffer.append(TEXT_274);
d1249 1
a1249 1
    stringBuffer.append(TEXT_275);
d1251 1
a1251 1
    stringBuffer.append(TEXT_276);
d1259 1
a1259 1
    stringBuffer.append(TEXT_277);
d1261 1
a1261 1
    stringBuffer.append(TEXT_278);
d1263 1
a1263 1
    stringBuffer.append(TEXT_279);
d1267 1
a1267 1
    stringBuffer.append(TEXT_280);
d1269 1
a1269 1
    stringBuffer.append(TEXT_281);
d1271 1
a1271 1
    stringBuffer.append(TEXT_282);
d1273 1
a1273 1
    stringBuffer.append(TEXT_283);
d1277 1
a1277 1
    stringBuffer.append(TEXT_284);
d1279 1
a1279 1
    stringBuffer.append(TEXT_285);
d1281 1
a1281 1
    stringBuffer.append(TEXT_286);
d1283 1
a1283 1
    stringBuffer.append(TEXT_287);
d1285 1
a1285 1
    stringBuffer.append(TEXT_288);
d1292 1
a1292 1
    stringBuffer.append(TEXT_289);
d1294 1
a1294 1
    stringBuffer.append(TEXT_290);
d1296 1
a1296 1
    stringBuffer.append(TEXT_291);
d1298 1
a1298 1
    stringBuffer.append(TEXT_292);
d1302 1
a1302 1
    stringBuffer.append(TEXT_293);
d1304 1
a1304 1
    stringBuffer.append(TEXT_294);
d1306 1
a1306 1
    stringBuffer.append(TEXT_295);
d1308 1
a1308 1
    stringBuffer.append(TEXT_296);
d1310 1
a1310 1
    stringBuffer.append(TEXT_297);
d1314 1
a1314 1
    stringBuffer.append(TEXT_298);
d1319 1
a1319 1
    stringBuffer.append(TEXT_299);
d1321 1
a1321 1
    stringBuffer.append(TEXT_300);
d1323 1
a1323 1
    stringBuffer.append(TEXT_301);
d1325 1
a1325 1
    stringBuffer.append(TEXT_302);
d1329 1
a1329 1
    stringBuffer.append(TEXT_303);
d1331 1
a1331 1
    stringBuffer.append(TEXT_304);
d1333 1
a1333 1
    stringBuffer.append(TEXT_305);
d1335 1
a1335 1
    stringBuffer.append(TEXT_306);
d1337 1
a1337 1
    stringBuffer.append(TEXT_307);
d1342 1
a1342 1
    stringBuffer.append(TEXT_308);
d1350 2
a1351 2
    stringBuffer.append(TEXT_309);
    stringBuffer.append(TEXT_310);
d1353 1
a1353 1
    stringBuffer.append(TEXT_311);
d1355 1
a1355 1
    stringBuffer.append(TEXT_312);
d1357 3
a1359 3
    stringBuffer.append(TEXT_313);
    stringBuffer.append(TEXT_314);
    stringBuffer.append(TEXT_315);
d1361 1
a1361 1
    stringBuffer.append(TEXT_316);
d1363 1
a1363 1
    stringBuffer.append(TEXT_317);
d1365 1
a1365 1
    stringBuffer.append(TEXT_318);
d1367 1
a1367 1
    stringBuffer.append(TEXT_319);
d1369 1
a1369 1
    stringBuffer.append(TEXT_320);
d1371 1
a1371 1
    stringBuffer.append(TEXT_321);
d1373 1
a1373 1
    stringBuffer.append(TEXT_322);
d1375 1
a1375 1
    stringBuffer.append(TEXT_323);
d1377 1
a1377 1
    stringBuffer.append(TEXT_324);
d1379 1
a1379 1
    stringBuffer.append(TEXT_325);
d1381 1
a1381 1
    stringBuffer.append(TEXT_326);
d1387 1
a1387 1
    stringBuffer.append(TEXT_327);
d1389 1
a1389 1
    stringBuffer.append(TEXT_328);
d1391 1
a1391 1
    stringBuffer.append(TEXT_329);
d1393 1
a1393 1
    stringBuffer.append(TEXT_330);
d1395 1
a1395 1
    stringBuffer.append(TEXT_331);
d1397 1
a1397 1
    stringBuffer.append(TEXT_332);
d1399 1
a1399 1
    stringBuffer.append(TEXT_333);
d1401 1
a1401 1
    stringBuffer.append(TEXT_334);
d1403 1
a1403 1
    stringBuffer.append(TEXT_335);
d1405 1
a1405 1
    stringBuffer.append(TEXT_336);
d1407 1
a1407 1
    stringBuffer.append(TEXT_337);
d1414 1
a1414 1
    stringBuffer.append(TEXT_338);
d1417 1
a1417 1
    stringBuffer.append(TEXT_339);
d1419 1
a1419 1
    stringBuffer.append(TEXT_340);
d1421 1
a1421 1
    stringBuffer.append(TEXT_341);
d1423 1
a1423 1
    stringBuffer.append(TEXT_342);
d1425 1
a1425 1
    stringBuffer.append(TEXT_343);
d1427 1
a1427 1
    stringBuffer.append(TEXT_344);
d1429 1
a1429 1
    stringBuffer.append(TEXT_345);
d1431 1
a1431 1
    stringBuffer.append(TEXT_346);
d1435 1
a1435 1
    stringBuffer.append(TEXT_347);
d1438 1
a1438 1
    stringBuffer.append(TEXT_348);
d1440 1
a1440 1
    stringBuffer.append(TEXT_349);
d1442 1
a1442 1
    stringBuffer.append(TEXT_350);
d1444 1
a1444 1
    stringBuffer.append(TEXT_351);
d1446 1
a1446 1
    stringBuffer.append(TEXT_352);
d1448 1
a1448 1
    stringBuffer.append(TEXT_353);
d1452 1
a1452 1
    stringBuffer.append(TEXT_354);
d1454 1
a1454 1
    stringBuffer.append(TEXT_355);
d1461 1
a1461 1
    stringBuffer.append(TEXT_356);
d1465 1
a1465 1
    stringBuffer.append(TEXT_357);
d1469 3
a1471 3
    stringBuffer.append(TEXT_358);
    stringBuffer.append(TEXT_359);
    stringBuffer.append(TEXT_360);
d1473 1
a1473 1
    stringBuffer.append(TEXT_361);
d1475 1
a1475 1
    stringBuffer.append(TEXT_362);
d1477 1
a1477 1
    stringBuffer.append(TEXT_363);
d1479 1
a1479 1
    stringBuffer.append(TEXT_364);
d1481 1
a1481 1
    stringBuffer.append(TEXT_365);
d1483 1
a1483 1
    stringBuffer.append(TEXT_366);
d1485 1
a1485 1
    stringBuffer.append(TEXT_367);
d1487 1
a1487 1
    stringBuffer.append(TEXT_368);
d1489 1
a1489 1
    stringBuffer.append(TEXT_369);
d1491 3
a1493 3
    stringBuffer.append(TEXT_370);
    stringBuffer.append(TEXT_371);
    stringBuffer.append(TEXT_372);
d1495 1
a1495 1
    stringBuffer.append(TEXT_373);
d1497 1
a1497 1
    stringBuffer.append(TEXT_374);
d1504 1
a1504 1
    stringBuffer.append(TEXT_375);
d1506 1
a1506 1
    stringBuffer.append(TEXT_376);
d1508 1
a1508 1
    stringBuffer.append(TEXT_377);
d1513 1
a1513 1
    stringBuffer.append(TEXT_378);
d1515 1
a1515 1
    stringBuffer.append(TEXT_379);
d1517 1
a1517 1
    stringBuffer.append(TEXT_380);
d1519 1
a1519 1
    stringBuffer.append(TEXT_381);
@


1.14
log
@#161380 simplify feature model facets
@
text
@d80 199
a278 199
  protected final String TEXT_60 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_61 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_62 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_63 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_64 = " createDomainModelCommand(";
  protected final String TEXT_65 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_66 = " element = ";
  protected final String TEXT_67 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_68 = " feature = (";
  protected final String TEXT_69 = ") ";
  protected final String TEXT_70 = ".eINSTANCE.get";
  protected final String TEXT_71 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_72 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_73 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_74 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_75 = " result = new ";
  protected final String TEXT_76 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_77 = " values = new ";
  protected final String TEXT_78 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_79 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_80 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_81 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_82 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_83 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_84 = NL + "\t\t\t\t\t}";
  protected final String TEXT_85 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_86 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_87 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_88 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_89 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_90 = " createDomainModelCommand(";
  protected final String TEXT_91 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_92 = " element = ";
  protected final String TEXT_93 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_94 = " result = new ";
  protected final String TEXT_95 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_96 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_97 = " ";
  protected final String TEXT_98 = "feature = (";
  protected final String TEXT_99 = ") ";
  protected final String TEXT_100 = ".eINSTANCE.get";
  protected final String TEXT_101 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_102 = ".parseValue(feature, values[";
  protected final String TEXT_103 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_104 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_105 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_106 = " ";
  protected final String TEXT_107 = "values = new ";
  protected final String TEXT_108 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_109 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_110 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_111 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_112 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_113 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_114 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_115 = NL + "\t\t\t\t});";
  protected final String TEXT_116 = NL;
  protected final String TEXT_117 = "\t\tinstallEditPolicy(";
  protected final String TEXT_118 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_119 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_120 = " createDeleteCommand(";
  protected final String TEXT_121 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_122 = " editingDomain = ";
  protected final String TEXT_123 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_124 = " cc = new ";
  protected final String TEXT_125 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_126 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_127 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_128 = " editingDomain) {";
  protected final String TEXT_129 = NL + "\t\t\t\t";
  protected final String TEXT_130 = " result = new ";
  protected final String TEXT_131 = "();";
  protected final String TEXT_132 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_133 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_134 = ".eINSTANCE.get";
  protected final String TEXT_135 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_136 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_137 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_138 = ".eINSTANCE.get";
  protected final String TEXT_139 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_140 = ".UNSET_VALUE));";
  protected final String TEXT_141 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_142 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_143 = ".eINSTANCE.get";
  protected final String TEXT_144 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_145 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_146 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_147 = ".eINSTANCE.get";
  protected final String TEXT_148 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_149 = ".UNSET_VALUE));";
  protected final String TEXT_150 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_151 = NL + "\t\t\t\treturn ";
  protected final String TEXT_152 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_153 = ".eINSTANCE.get";
  protected final String TEXT_154 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_155 = NL + "\t\t\t\treturn ";
  protected final String TEXT_156 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_157 = ".eINSTANCE.get";
  protected final String TEXT_158 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_159 = ".UNSET_VALUE);";
  protected final String TEXT_160 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_161 = NL + "\t}" + NL;
  protected final String TEXT_162 = NL;
  protected final String TEXT_163 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_164 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_165 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_166 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_167 = "(this, ";
  protected final String TEXT_168 = ".class, new ";
  protected final String TEXT_169 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_170 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_171 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_172 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_173 = NL;
  protected final String TEXT_174 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_175 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_176 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_177 = " element = ";
  protected final String TEXT_178 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_179 = " element = ";
  protected final String TEXT_180 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_181 = " element, String pattern) {";
  protected final String TEXT_182 = NL + "\t\tif (";
  protected final String TEXT_183 = " == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_184 = NL + "\t\treturn ";
  protected final String TEXT_185 = ".format(pattern, new Object[] {";
  protected final String TEXT_186 = NL + "\t\t\tnew ";
  protected final String TEXT_187 = "(";
  protected final String TEXT_188 = ")";
  protected final String TEXT_189 = NL + "\t\t});";
  protected final String TEXT_190 = NL + "\t\treturn ";
  protected final String TEXT_191 = ".format(pattern, new Object[] {";
  protected final String TEXT_192 = NL + "\t\t\tnew ";
  protected final String TEXT_193 = "(";
  protected final String TEXT_194 = ")";
  protected final String TEXT_195 = ",";
  protected final String TEXT_196 = NL + "\t\t});";
  protected final String TEXT_197 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_198 = NL + "\t}";
  protected final String TEXT_199 = NL;
  protected final String TEXT_200 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_201 = NL + "\t\t";
  protected final String TEXT_202 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_203 = ") ";
  protected final String TEXT_204 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_205 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_206 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_207 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_208 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_209 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_210 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_211 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_212 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_213 = "\t" + NL + "\t}";
  protected final String TEXT_214 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_215 = " createdFont;";
  protected final String TEXT_216 = "\t";
  protected final String TEXT_217 = NL;
  protected final String TEXT_218 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_219 = " style = (";
  protected final String TEXT_220 = ")  ";
  protected final String TEXT_221 = ".getStyle(";
  protected final String TEXT_222 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_223 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_224 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_225 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_226 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_227 = " getLabelIcon() {";
  protected final String TEXT_228 = NL + "\t\t";
  protected final String TEXT_229 = " imageDescriptor = ";
  protected final String TEXT_230 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_231 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_232 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_233 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_234 = NL;
  protected final String TEXT_235 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_236 = " domainModelRefresher = new ";
  protected final String TEXT_237 = "(this);" + NL;
  protected final String TEXT_238 = NL;
  protected final String TEXT_239 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_240 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_241 = " feature, ";
  protected final String TEXT_242 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_243 = NL;
  protected final String TEXT_244 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_245 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_246 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_247 = NL;
  protected final String TEXT_248 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_249 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_250 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_251 = ".eINSTANCE.get";
  protected final String TEXT_252 = "(), labelRefresher);";
  protected final String TEXT_253 = NL;
  protected final String TEXT_254 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_255 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_256 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_257 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_258 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d280 122
a401 180
  protected final String TEXT_260 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_261 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_262 = NL;
  protected final String TEXT_263 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_264 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_265 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_266 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_267 = " createLabel() {";
  protected final String TEXT_268 = NL + "\t\treturn new ";
  protected final String TEXT_269 = "();";
  protected final String TEXT_270 = NL + "\t\treturn ";
  protected final String TEXT_271 = ";";
  protected final String TEXT_272 = NL + "\t\treturn new ";
  protected final String TEXT_273 = "();";
  protected final String TEXT_274 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_275 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_276 = " label = createLabel();";
  protected final String TEXT_277 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_278 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_279 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_280 = NL + NL + "\t/**";
  protected final String TEXT_281 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_282 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_283 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_284 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_285 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_286 = "(";
  protected final String TEXT_287 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_288 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_289 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_290 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_291 = NL;
  protected final String TEXT_292 = NL;
  protected final String TEXT_293 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_294 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_295 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_296 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_297 = NL;
  protected final String TEXT_298 = "\t\tinstallEditPolicy(";
  protected final String TEXT_299 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_300 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_301 = " createDeleteCommand(";
  protected final String TEXT_302 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_303 = " editingDomain = ";
  protected final String TEXT_304 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_305 = " cc = new ";
  protected final String TEXT_306 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_307 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_308 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_309 = " editingDomain) {";
  protected final String TEXT_310 = NL + "\t\t\t\t";
  protected final String TEXT_311 = " result = new ";
  protected final String TEXT_312 = "();";
  protected final String TEXT_313 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_314 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_315 = ".eINSTANCE.get";
  protected final String TEXT_316 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_317 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_318 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_319 = ".eINSTANCE.get";
  protected final String TEXT_320 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_321 = ".UNSET_VALUE));";
  protected final String TEXT_322 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_323 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_324 = ".eINSTANCE.get";
  protected final String TEXT_325 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_326 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_327 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_328 = ".eINSTANCE.get";
  protected final String TEXT_329 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_330 = ".UNSET_VALUE));";
  protected final String TEXT_331 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_332 = NL + "\t\t\t\treturn ";
  protected final String TEXT_333 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_334 = ".eINSTANCE.get";
  protected final String TEXT_335 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_336 = NL + "\t\t\t\treturn ";
  protected final String TEXT_337 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_338 = ".eINSTANCE.get";
  protected final String TEXT_339 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_340 = ".UNSET_VALUE);";
  protected final String TEXT_341 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_342 = NL;
  protected final String TEXT_343 = "\t\tinstallEditPolicy(";
  protected final String TEXT_344 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_345 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_346 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_347 = NL;
  protected final String TEXT_348 = "\t\t\t\t\tprotected ";
  protected final String TEXT_349 = " getDirectEditCommand(";
  protected final String TEXT_350 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_351 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_352 = "(";
  protected final String TEXT_353 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_354 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_355 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_356 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_357 = " editingDomain = ";
  protected final String TEXT_358 = ".getEditingDomain(";
  protected final String TEXT_359 = ".getDiagram().getElement());";
  protected final String TEXT_360 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_361 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_362 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_363 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_364 = " createDomainModelCommand(";
  protected final String TEXT_365 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_366 = " element = ";
  protected final String TEXT_367 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_368 = " feature = (";
  protected final String TEXT_369 = ") ";
  protected final String TEXT_370 = ".eINSTANCE.get";
  protected final String TEXT_371 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_372 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_373 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_374 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_375 = " result = new ";
  protected final String TEXT_376 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_377 = " values = new ";
  protected final String TEXT_378 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_379 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_380 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_381 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_382 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_383 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_384 = NL + "\t\t\t\t\t}";
  protected final String TEXT_385 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_386 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_387 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_388 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_389 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_390 = " createDomainModelCommand(";
  protected final String TEXT_391 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_392 = " element = ";
  protected final String TEXT_393 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_394 = " result = new ";
  protected final String TEXT_395 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_396 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_397 = " ";
  protected final String TEXT_398 = "feature = (";
  protected final String TEXT_399 = ") ";
  protected final String TEXT_400 = ".eINSTANCE.get";
  protected final String TEXT_401 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_402 = ".parseValue(feature, values[";
  protected final String TEXT_403 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_404 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_405 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_406 = " ";
  protected final String TEXT_407 = "values = new ";
  protected final String TEXT_408 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_409 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_410 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_411 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_412 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_413 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_414 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_415 = NL + "\t\t\t\t});";
  protected final String TEXT_416 = NL + "\t\t}" + NL;
  protected final String TEXT_417 = NL;
  protected final String TEXT_418 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_419 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_420 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_421 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_422 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_423 = "(this, ";
  protected final String TEXT_424 = ".class, new ";
  protected final String TEXT_425 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_426 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_427 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_428 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_429 = NL;
  protected final String TEXT_430 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_431 = " domainModelRefresher = new ";
  protected final String TEXT_432 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_433 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_434 = ".eINSTANCE.get";
  protected final String TEXT_435 = "(), labelRefresher);";
  protected final String TEXT_436 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_437 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_438 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_439 = NL;
d596 2
a597 2
	GenFeature featureToSet = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();
	EStructuralFeature ecoreFeature = featureToSet.getEcoreFeature();
d600 2
d603 1
a603 1
    stringBuffer.append(TEXT_61);
d605 1
a605 1
    stringBuffer.append(TEXT_62);
d607 1
a607 1
    stringBuffer.append(TEXT_63);
d609 1
a609 1
    stringBuffer.append(TEXT_64);
d611 1
a611 1
    stringBuffer.append(TEXT_65);
d613 1
a613 1
    stringBuffer.append(TEXT_66);
a614 2
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d616 1
a616 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d618 1
a618 1
    stringBuffer.append(importManager.getImportedName(featureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
a619 60
    stringBuffer.append(featureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_73);
    
	if (ecoreFeature.isMany()) {

    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(featureToSet.getAccessorName());
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_81);
    
	} else {

    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_83);
    
	}

    stringBuffer.append(TEXT_84);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = compositeFeatureLabelModelFacet.getMetaFeatures();

    stringBuffer.append(TEXT_85);
    stringBuffer.append(metaFeatures.size());
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_95);
d626 1
a626 1
    stringBuffer.append(TEXT_96);
d629 1
a629 1
    stringBuffer.append(TEXT_97);
d631 1
a631 1
    stringBuffer.append(TEXT_98);
d633 1
a633 1
    stringBuffer.append(TEXT_99);
d635 1
a635 1
    stringBuffer.append(TEXT_100);
d637 1
a637 1
    stringBuffer.append(TEXT_101);
d639 1
a639 1
    stringBuffer.append(TEXT_102);
d641 1
a641 1
    stringBuffer.append(TEXT_103);
d643 1
a643 1
    stringBuffer.append(TEXT_104);
d647 1
a647 1
    stringBuffer.append(TEXT_105);
d650 1
a650 1
    stringBuffer.append(TEXT_106);
d652 1
a652 1
    stringBuffer.append(TEXT_107);
d654 1
a654 1
    stringBuffer.append(TEXT_108);
d656 1
a656 1
    stringBuffer.append(TEXT_109);
d658 1
a658 1
    stringBuffer.append(TEXT_110);
d660 1
a660 1
    stringBuffer.append(TEXT_111);
d664 1
a664 1
    stringBuffer.append(TEXT_112);
d666 1
a666 1
    stringBuffer.append(TEXT_113);
d673 1
a673 1
    stringBuffer.append(TEXT_114);
d677 1
a677 1
    stringBuffer.append(TEXT_115);
d681 2
a682 2
    stringBuffer.append(TEXT_116);
    stringBuffer.append(TEXT_117);
d684 1
a684 1
    stringBuffer.append(TEXT_118);
d686 1
a686 1
    stringBuffer.append(TEXT_119);
d688 1
a688 1
    stringBuffer.append(TEXT_120);
d690 1
a690 1
    stringBuffer.append(TEXT_121);
d692 1
a692 1
    stringBuffer.append(TEXT_122);
d694 1
a694 1
    stringBuffer.append(TEXT_123);
d696 1
a696 1
    stringBuffer.append(TEXT_124);
d698 1
a698 1
    stringBuffer.append(TEXT_125);
d700 1
a700 1
    stringBuffer.append(TEXT_126);
d702 1
a702 1
    stringBuffer.append(TEXT_127);
d704 1
a704 1
    stringBuffer.append(TEXT_128);
d712 1
a712 1
    stringBuffer.append(TEXT_129);
d714 1
a714 1
    stringBuffer.append(TEXT_130);
d716 1
a716 1
    stringBuffer.append(TEXT_131);
d720 1
a720 1
    stringBuffer.append(TEXT_132);
d722 1
a722 1
    stringBuffer.append(TEXT_133);
d724 1
a724 1
    stringBuffer.append(TEXT_134);
d726 1
a726 1
    stringBuffer.append(TEXT_135);
d730 1
a730 1
    stringBuffer.append(TEXT_136);
d732 1
a732 1
    stringBuffer.append(TEXT_137);
d734 1
a734 1
    stringBuffer.append(TEXT_138);
d736 1
a736 1
    stringBuffer.append(TEXT_139);
d738 1
a738 1
    stringBuffer.append(TEXT_140);
d745 1
a745 1
    stringBuffer.append(TEXT_141);
d747 1
a747 1
    stringBuffer.append(TEXT_142);
d749 1
a749 1
    stringBuffer.append(TEXT_143);
d751 1
a751 1
    stringBuffer.append(TEXT_144);
d755 1
a755 1
    stringBuffer.append(TEXT_145);
d757 1
a757 1
    stringBuffer.append(TEXT_146);
d759 1
a759 1
    stringBuffer.append(TEXT_147);
d761 1
a761 1
    stringBuffer.append(TEXT_148);
d763 1
a763 1
    stringBuffer.append(TEXT_149);
d767 1
a767 1
    stringBuffer.append(TEXT_150);
d772 1
a772 1
    stringBuffer.append(TEXT_151);
d774 1
a774 1
    stringBuffer.append(TEXT_152);
d776 1
a776 1
    stringBuffer.append(TEXT_153);
d778 1
a778 1
    stringBuffer.append(TEXT_154);
d782 1
a782 1
    stringBuffer.append(TEXT_155);
d784 1
a784 1
    stringBuffer.append(TEXT_156);
d786 1
a786 1
    stringBuffer.append(TEXT_157);
d788 1
a788 1
    stringBuffer.append(TEXT_158);
d790 1
a790 1
    stringBuffer.append(TEXT_159);
d795 1
a795 1
    stringBuffer.append(TEXT_160);
d799 1
a799 1
    stringBuffer.append(TEXT_161);
d803 2
a804 2
    stringBuffer.append(TEXT_162);
    stringBuffer.append(TEXT_163);
d806 1
a806 1
    stringBuffer.append(TEXT_164);
d808 1
a808 1
    stringBuffer.append(TEXT_165);
d810 1
a810 1
    stringBuffer.append(TEXT_166);
d812 1
a812 1
    stringBuffer.append(TEXT_167);
d814 1
a814 1
    stringBuffer.append(TEXT_168);
d816 1
a816 1
    stringBuffer.append(TEXT_169);
d818 1
a818 1
    stringBuffer.append(TEXT_170);
d820 1
a820 1
    stringBuffer.append(TEXT_171);
d824 2
a825 2
    stringBuffer.append(TEXT_172);
    stringBuffer.append(TEXT_173);
a842 10
		viewPattern = "{0}";
	}
	editPattern = featureLabelModelFacet.getEditPattern();
	if (editPattern == null || editPattern.length() == 0) {
		editPattern = "{0}";
	}
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	viewPattern = compositeFeatureLabelModelFacet.getViewPattern();
	if (viewPattern == null || viewPattern.length() == 0) {
d844 1
a844 1
		for(int i = 0; i < compositeFeatureLabelModelFacet.getMetaFeatures().size(); i++) {
d849 1
a849 1
	editPattern = compositeFeatureLabelModelFacet.getEditPattern();
d852 1
a852 1
		for(int i = 0; i < compositeFeatureLabelModelFacet.getMetaFeatures().size(); i++) {
d859 1
a859 1
    stringBuffer.append(TEXT_174);
d861 1
a861 1
    stringBuffer.append(TEXT_175);
d863 1
a863 1
    stringBuffer.append(TEXT_176);
d865 1
a865 1
    stringBuffer.append(TEXT_177);
d867 1
a867 1
    stringBuffer.append(TEXT_178);
d869 1
a869 1
    stringBuffer.append(TEXT_179);
d871 1
a871 1
    stringBuffer.append(TEXT_180);
d873 1
a873 1
    stringBuffer.append(TEXT_181);
a876 2
	GenFeature feature = featureLabelModelFacet.getMetaFeature();
	if (!feature.isPrimitiveType()) {
d878 1
a878 7
    stringBuffer.append(TEXT_182);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("element", feature, underlyingMetaClass, false);
    stringBuffer.append(TEXT_183);
    
	}

    stringBuffer.append(TEXT_184);
d880 1
a880 1
    stringBuffer.append(TEXT_185);
d882 1
a882 24
		if (feature.isPrimitiveType()) {

    stringBuffer.append(TEXT_186);
    stringBuffer.append(primitiveTypeToWrapperClassName.get(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClass()));
    stringBuffer.append(TEXT_187);
    
		}
		myFeatureGetAccessorHelper.appendFeatureValueGetter("element", feature, underlyingMetaClass, false);
		if (feature.isPrimitiveType()) {

    stringBuffer.append(TEXT_188);
    
		}

    stringBuffer.append(TEXT_189);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;

    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
    stringBuffer.append(TEXT_191);
    
	for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
d886 1
a886 1
    stringBuffer.append(TEXT_192);
d888 1
a888 1
    stringBuffer.append(TEXT_193);
d894 1
a894 1
    stringBuffer.append(TEXT_194);
d898 1
a898 1
    stringBuffer.append(TEXT_195);
d903 1
a903 1
    stringBuffer.append(TEXT_196);
d907 1
a907 1
    stringBuffer.append(TEXT_197);
d911 2
a912 2
    stringBuffer.append(TEXT_198);
    stringBuffer.append(TEXT_199);
d920 1
a920 1
    stringBuffer.append(TEXT_200);
d924 1
a924 1
    stringBuffer.append(TEXT_201);
d926 1
a926 1
    stringBuffer.append(TEXT_202);
d928 1
a928 1
    stringBuffer.append(TEXT_203);
d930 1
a930 1
    stringBuffer.append(TEXT_204);
d932 1
a932 1
    stringBuffer.append(TEXT_205);
d934 1
a934 1
    stringBuffer.append(TEXT_206);
d936 1
a936 1
    stringBuffer.append(TEXT_207);
d938 1
a938 1
    stringBuffer.append(TEXT_208);
d940 1
a940 1
    stringBuffer.append(TEXT_209);
d942 1
a942 1
    stringBuffer.append(TEXT_210);
d944 1
a944 1
    stringBuffer.append(TEXT_211);
d946 1
a946 1
    stringBuffer.append(TEXT_212);
d950 1
a950 1
    stringBuffer.append(TEXT_213);
d954 1
a954 1
    stringBuffer.append(TEXT_214);
d956 1
a956 1
    stringBuffer.append(TEXT_215);
d960 3
a962 3
    stringBuffer.append(TEXT_216);
    stringBuffer.append(TEXT_217);
    stringBuffer.append(TEXT_218);
d964 1
a964 1
    stringBuffer.append(TEXT_219);
d966 1
a966 1
    stringBuffer.append(TEXT_220);
d968 1
a968 1
    stringBuffer.append(TEXT_221);
d970 1
a970 1
    stringBuffer.append(TEXT_222);
d972 1
a972 1
    stringBuffer.append(TEXT_223);
d974 1
a974 1
    stringBuffer.append(TEXT_224);
d976 1
a976 1
    stringBuffer.append(TEXT_225);
d978 1
a978 1
    stringBuffer.append(TEXT_226);
d980 1
a980 1
    stringBuffer.append(TEXT_227);
d984 1
a984 1
    stringBuffer.append(TEXT_228);
d986 1
a986 1
    stringBuffer.append(TEXT_229);
d988 1
a988 1
    stringBuffer.append(TEXT_230);
d992 1
a992 1
    stringBuffer.append(TEXT_231);
d994 1
a994 1
    stringBuffer.append(TEXT_232);
d996 3
a998 3
    stringBuffer.append(TEXT_233);
    stringBuffer.append(TEXT_234);
    stringBuffer.append(TEXT_235);
d1000 1
a1000 1
    stringBuffer.append(TEXT_236);
d1002 3
a1004 3
    stringBuffer.append(TEXT_237);
    stringBuffer.append(TEXT_238);
    stringBuffer.append(TEXT_239);
d1006 1
a1006 1
    stringBuffer.append(TEXT_240);
d1008 1
a1008 1
    stringBuffer.append(TEXT_241);
d1010 3
a1012 3
    stringBuffer.append(TEXT_242);
    stringBuffer.append(TEXT_243);
    stringBuffer.append(TEXT_244);
d1014 1
a1014 1
    stringBuffer.append(TEXT_245);
d1016 3
a1018 3
    stringBuffer.append(TEXT_246);
    stringBuffer.append(TEXT_247);
    stringBuffer.append(TEXT_248);
d1020 1
a1020 1
    stringBuffer.append(TEXT_249);
d1023 2
a1024 2
	FeatureLabelModelFacet compositeFeatureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
d1027 1
a1027 1
    stringBuffer.append(TEXT_250);
d1029 1
a1029 1
    stringBuffer.append(TEXT_251);
d1031 1
a1031 1
    stringBuffer.append(TEXT_252);
d1036 2
a1037 2
    stringBuffer.append(TEXT_253);
    stringBuffer.append(TEXT_254);
d1039 1
a1039 1
    stringBuffer.append(TEXT_255);
d1041 1
a1041 1
    stringBuffer.append(TEXT_256);
d1043 1
a1043 1
    stringBuffer.append(TEXT_257);
d1045 3
a1047 3
    stringBuffer.append(TEXT_258);
    stringBuffer.append(TEXT_259);
    stringBuffer.append(TEXT_260);
d1049 1
a1049 1
    stringBuffer.append(TEXT_261);
d1053 1
a1053 1
    stringBuffer.append(TEXT_262);
d1082 1
a1082 1
    stringBuffer.append(TEXT_263);
d1084 1
a1084 1
    stringBuffer.append(TEXT_264);
d1086 1
a1086 1
    stringBuffer.append(TEXT_265);
d1088 1
a1088 1
    stringBuffer.append(TEXT_266);
d1090 1
a1090 1
    stringBuffer.append(TEXT_267);
d1094 1
a1094 1
    stringBuffer.append(TEXT_268);
d1096 1
a1096 1
    stringBuffer.append(TEXT_269);
d1099 1
a1099 1
    stringBuffer.append(TEXT_270);
d1101 1
a1101 1
    stringBuffer.append(TEXT_271);
d1105 1
a1105 1
    stringBuffer.append(TEXT_272);
d1107 1
a1107 1
    stringBuffer.append(TEXT_273);
d1109 1
a1109 1
    stringBuffer.append(TEXT_274);
d1111 1
a1111 1
    stringBuffer.append(TEXT_275);
d1113 1
a1113 1
    stringBuffer.append(TEXT_276);
d1117 1
a1117 1
    stringBuffer.append(TEXT_277);
d1121 1
a1121 1
    stringBuffer.append(TEXT_278);
d1125 1
a1125 1
    stringBuffer.append(TEXT_279);
d1127 1
a1127 1
    stringBuffer.append(TEXT_280);
d1131 1
a1131 1
    stringBuffer.append(TEXT_281);
d1135 1
a1135 1
    stringBuffer.append(TEXT_282);
d1137 1
a1137 1
    stringBuffer.append(TEXT_283);
d1139 1
a1139 1
    stringBuffer.append(TEXT_284);
d1153 1
a1153 1
    stringBuffer.append(TEXT_285);
d1155 1
a1155 1
    stringBuffer.append(TEXT_286);
d1157 1
a1157 1
    stringBuffer.append(TEXT_287);
d1161 1
a1161 1
    stringBuffer.append(TEXT_288);
d1165 1
a1165 1
    stringBuffer.append(TEXT_289);
d1169 1
a1169 1
    stringBuffer.append(TEXT_290);
d1174 1
a1174 1
    stringBuffer.append(TEXT_291);
d1176 1
a1176 1
    stringBuffer.append(TEXT_292);
d1180 1
a1180 1
    stringBuffer.append(TEXT_293);
d1187 1
a1187 1
    stringBuffer.append(TEXT_294);
d1189 1
a1189 1
    stringBuffer.append(TEXT_295);
d1191 3
a1193 3
    stringBuffer.append(TEXT_296);
    stringBuffer.append(TEXT_297);
    stringBuffer.append(TEXT_298);
d1195 1
a1195 1
    stringBuffer.append(TEXT_299);
d1197 1
a1197 1
    stringBuffer.append(TEXT_300);
d1199 1
a1199 1
    stringBuffer.append(TEXT_301);
d1201 1
a1201 1
    stringBuffer.append(TEXT_302);
d1203 1
a1203 1
    stringBuffer.append(TEXT_303);
d1205 1
a1205 1
    stringBuffer.append(TEXT_304);
d1207 1
a1207 1
    stringBuffer.append(TEXT_305);
d1209 1
a1209 1
    stringBuffer.append(TEXT_306);
d1211 1
a1211 1
    stringBuffer.append(TEXT_307);
d1213 1
a1213 1
    stringBuffer.append(TEXT_308);
d1215 1
a1215 1
    stringBuffer.append(TEXT_309);
d1223 1
a1223 1
    stringBuffer.append(TEXT_310);
d1225 1
a1225 1
    stringBuffer.append(TEXT_311);
d1227 1
a1227 1
    stringBuffer.append(TEXT_312);
d1231 1
a1231 1
    stringBuffer.append(TEXT_313);
d1233 1
a1233 1
    stringBuffer.append(TEXT_314);
d1235 1
a1235 1
    stringBuffer.append(TEXT_315);
d1237 1
a1237 1
    stringBuffer.append(TEXT_316);
d1241 1
a1241 1
    stringBuffer.append(TEXT_317);
d1243 1
a1243 1
    stringBuffer.append(TEXT_318);
d1245 1
a1245 1
    stringBuffer.append(TEXT_319);
d1247 1
a1247 1
    stringBuffer.append(TEXT_320);
d1249 1
a1249 1
    stringBuffer.append(TEXT_321);
d1256 1
a1256 1
    stringBuffer.append(TEXT_322);
d1258 1
a1258 1
    stringBuffer.append(TEXT_323);
d1260 1
a1260 1
    stringBuffer.append(TEXT_324);
d1262 1
a1262 1
    stringBuffer.append(TEXT_325);
d1266 1
a1266 1
    stringBuffer.append(TEXT_326);
d1268 1
a1268 1
    stringBuffer.append(TEXT_327);
d1270 1
a1270 1
    stringBuffer.append(TEXT_328);
d1272 1
a1272 1
    stringBuffer.append(TEXT_329);
d1274 1
a1274 1
    stringBuffer.append(TEXT_330);
d1278 1
a1278 1
    stringBuffer.append(TEXT_331);
d1283 1
a1283 1
    stringBuffer.append(TEXT_332);
d1285 1
a1285 1
    stringBuffer.append(TEXT_333);
d1287 1
a1287 1
    stringBuffer.append(TEXT_334);
d1289 1
a1289 1
    stringBuffer.append(TEXT_335);
d1293 1
a1293 1
    stringBuffer.append(TEXT_336);
d1295 1
a1295 1
    stringBuffer.append(TEXT_337);
d1297 1
a1297 1
    stringBuffer.append(TEXT_338);
d1299 1
a1299 1
    stringBuffer.append(TEXT_339);
d1301 1
a1301 1
    stringBuffer.append(TEXT_340);
d1306 1
a1306 1
    stringBuffer.append(TEXT_341);
d1314 2
a1315 2
    stringBuffer.append(TEXT_342);
    stringBuffer.append(TEXT_343);
d1317 1
a1317 1
    stringBuffer.append(TEXT_344);
d1319 1
a1319 1
    stringBuffer.append(TEXT_345);
d1321 3
a1323 3
    stringBuffer.append(TEXT_346);
    stringBuffer.append(TEXT_347);
    stringBuffer.append(TEXT_348);
d1325 1
a1325 1
    stringBuffer.append(TEXT_349);
d1327 1
a1327 1
    stringBuffer.append(TEXT_350);
d1329 1
a1329 1
    stringBuffer.append(TEXT_351);
d1331 1
a1331 1
    stringBuffer.append(TEXT_352);
d1333 1
a1333 1
    stringBuffer.append(TEXT_353);
d1335 1
a1335 1
    stringBuffer.append(TEXT_354);
d1337 1
a1337 1
    stringBuffer.append(TEXT_355);
d1339 1
a1339 1
    stringBuffer.append(TEXT_356);
d1341 1
a1341 1
    stringBuffer.append(TEXT_357);
d1343 1
a1343 1
    stringBuffer.append(TEXT_358);
d1345 1
a1345 1
    stringBuffer.append(TEXT_359);
d1348 2
a1349 2
	GenFeature featureToSet = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();
	EStructuralFeature ecoreFeature = featureToSet.getEcoreFeature();
d1351 1
a1351 61
    stringBuffer.append(TEXT_360);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_361);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_362);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_363);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_364);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_365);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_366);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_367);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_368);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_369);
    stringBuffer.append(importManager.getImportedName(featureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_370);
    stringBuffer.append(featureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_371);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_372);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_373);
    
	if (ecoreFeature.isMany()) {

    stringBuffer.append(TEXT_374);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_375);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_376);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_377);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_378);
    stringBuffer.append(featureToSet.getAccessorName());
    stringBuffer.append(TEXT_379);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_380);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_381);
    
	} else {

    stringBuffer.append(TEXT_382);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_383);
    
	}

    stringBuffer.append(TEXT_384);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = compositeFeatureLabelModelFacet.getMetaFeatures();

    stringBuffer.append(TEXT_385);
d1353 1
a1353 1
    stringBuffer.append(TEXT_386);
d1355 1
a1355 1
    stringBuffer.append(TEXT_387);
d1357 1
a1357 1
    stringBuffer.append(TEXT_388);
d1359 1
a1359 1
    stringBuffer.append(TEXT_389);
d1361 1
a1361 1
    stringBuffer.append(TEXT_390);
d1363 1
a1363 1
    stringBuffer.append(TEXT_391);
d1365 1
a1365 1
    stringBuffer.append(TEXT_392);
d1367 1
a1367 1
    stringBuffer.append(TEXT_393);
d1369 1
a1369 1
    stringBuffer.append(TEXT_394);
d1371 1
a1371 1
    stringBuffer.append(TEXT_395);
d1378 1
a1378 1
    stringBuffer.append(TEXT_396);
d1381 1
a1381 1
    stringBuffer.append(TEXT_397);
d1383 1
a1383 1
    stringBuffer.append(TEXT_398);
d1385 1
a1385 1
    stringBuffer.append(TEXT_399);
d1387 1
a1387 1
    stringBuffer.append(TEXT_400);
d1389 1
a1389 1
    stringBuffer.append(TEXT_401);
d1391 1
a1391 1
    stringBuffer.append(TEXT_402);
d1393 1
a1393 1
    stringBuffer.append(TEXT_403);
d1395 1
a1395 1
    stringBuffer.append(TEXT_404);
d1399 1
a1399 1
    stringBuffer.append(TEXT_405);
d1402 1
a1402 1
    stringBuffer.append(TEXT_406);
d1404 1
a1404 1
    stringBuffer.append(TEXT_407);
d1406 1
a1406 1
    stringBuffer.append(TEXT_408);
d1408 1
a1408 1
    stringBuffer.append(TEXT_409);
d1410 1
a1410 1
    stringBuffer.append(TEXT_410);
d1412 1
a1412 1
    stringBuffer.append(TEXT_411);
d1416 1
a1416 1
    stringBuffer.append(TEXT_412);
d1418 1
a1418 1
    stringBuffer.append(TEXT_413);
d1425 1
a1425 1
    stringBuffer.append(TEXT_414);
d1429 1
a1429 1
    stringBuffer.append(TEXT_415);
d1433 3
a1435 3
    stringBuffer.append(TEXT_416);
    stringBuffer.append(TEXT_417);
    stringBuffer.append(TEXT_418);
d1437 1
a1437 1
    stringBuffer.append(TEXT_419);
d1439 1
a1439 1
    stringBuffer.append(TEXT_420);
d1441 1
a1441 1
    stringBuffer.append(TEXT_421);
d1443 1
a1443 1
    stringBuffer.append(TEXT_422);
d1445 1
a1445 1
    stringBuffer.append(TEXT_423);
d1447 1
a1447 1
    stringBuffer.append(TEXT_424);
d1449 1
a1449 1
    stringBuffer.append(TEXT_425);
d1451 1
a1451 1
    stringBuffer.append(TEXT_426);
d1453 1
a1453 1
    stringBuffer.append(TEXT_427);
d1455 3
a1457 3
    stringBuffer.append(TEXT_428);
    stringBuffer.append(TEXT_429);
    stringBuffer.append(TEXT_430);
d1459 1
a1459 1
    stringBuffer.append(TEXT_431);
d1461 1
a1461 1
    stringBuffer.append(TEXT_432);
d1464 2
a1465 2
	FeatureLabelModelFacet compositeFeatureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
d1468 1
a1468 1
    stringBuffer.append(TEXT_433);
d1470 1
a1470 1
    stringBuffer.append(TEXT_434);
d1472 1
a1472 1
    stringBuffer.append(TEXT_435);
d1477 1
a1477 1
    stringBuffer.append(TEXT_436);
d1479 1
a1479 1
    stringBuffer.append(TEXT_437);
d1481 1
a1481 1
    stringBuffer.append(TEXT_438);
d1483 1
a1483 1
    stringBuffer.append(TEXT_439);
@


1.13
log
@#161380 move readOnly back to GenLabel
@
text
@d273 9
a281 9
  protected final String TEXT_253 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_254 = ".eINSTANCE.get";
  protected final String TEXT_255 = "(), labelRefresher);";
  protected final String TEXT_256 = NL;
  protected final String TEXT_257 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_258 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_259 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_260 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_261 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d283 177
a459 183
  protected final String TEXT_263 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_264 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_265 = NL;
  protected final String TEXT_266 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_267 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_268 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_269 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_270 = " createLabel() {";
  protected final String TEXT_271 = NL + "\t\treturn new ";
  protected final String TEXT_272 = "();";
  protected final String TEXT_273 = NL + "\t\treturn ";
  protected final String TEXT_274 = ";";
  protected final String TEXT_275 = NL + "\t\treturn new ";
  protected final String TEXT_276 = "();";
  protected final String TEXT_277 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_278 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_279 = " label = createLabel();";
  protected final String TEXT_280 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_281 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_282 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_283 = NL + NL + "\t/**";
  protected final String TEXT_284 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_285 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_286 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_287 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_288 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_289 = "(";
  protected final String TEXT_290 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_291 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_292 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_293 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_294 = NL;
  protected final String TEXT_295 = NL;
  protected final String TEXT_296 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_297 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_298 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_299 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_300 = NL;
  protected final String TEXT_301 = "\t\tinstallEditPolicy(";
  protected final String TEXT_302 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_303 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_304 = " createDeleteCommand(";
  protected final String TEXT_305 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_306 = " editingDomain = ";
  protected final String TEXT_307 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_308 = " cc = new ";
  protected final String TEXT_309 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_310 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_311 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_312 = " editingDomain) {";
  protected final String TEXT_313 = NL + "\t\t\t\t";
  protected final String TEXT_314 = " result = new ";
  protected final String TEXT_315 = "();";
  protected final String TEXT_316 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_317 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_318 = ".eINSTANCE.get";
  protected final String TEXT_319 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_320 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_321 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_322 = ".eINSTANCE.get";
  protected final String TEXT_323 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_324 = ".UNSET_VALUE));";
  protected final String TEXT_325 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_326 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_327 = ".eINSTANCE.get";
  protected final String TEXT_328 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_329 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_330 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_331 = ".eINSTANCE.get";
  protected final String TEXT_332 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_333 = ".UNSET_VALUE));";
  protected final String TEXT_334 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_335 = NL + "\t\t\t\treturn ";
  protected final String TEXT_336 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_337 = ".eINSTANCE.get";
  protected final String TEXT_338 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_339 = NL + "\t\t\t\treturn ";
  protected final String TEXT_340 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_341 = ".eINSTANCE.get";
  protected final String TEXT_342 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_343 = ".UNSET_VALUE);";
  protected final String TEXT_344 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_345 = NL;
  protected final String TEXT_346 = "\t\tinstallEditPolicy(";
  protected final String TEXT_347 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_348 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_349 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_350 = NL;
  protected final String TEXT_351 = "\t\t\t\t\tprotected ";
  protected final String TEXT_352 = " getDirectEditCommand(";
  protected final String TEXT_353 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_354 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_355 = "(";
  protected final String TEXT_356 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_357 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_358 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_359 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_360 = " editingDomain = ";
  protected final String TEXT_361 = ".getEditingDomain(";
  protected final String TEXT_362 = ".getDiagram().getElement());";
  protected final String TEXT_363 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_364 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_365 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_366 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_367 = " createDomainModelCommand(";
  protected final String TEXT_368 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_369 = " element = ";
  protected final String TEXT_370 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_371 = " feature = (";
  protected final String TEXT_372 = ") ";
  protected final String TEXT_373 = ".eINSTANCE.get";
  protected final String TEXT_374 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_375 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_376 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_377 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_378 = " result = new ";
  protected final String TEXT_379 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_380 = " values = new ";
  protected final String TEXT_381 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_382 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_383 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_384 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_385 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_386 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_387 = NL + "\t\t\t\t\t}";
  protected final String TEXT_388 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_389 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_390 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_391 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_392 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_393 = " createDomainModelCommand(";
  protected final String TEXT_394 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_395 = " element = ";
  protected final String TEXT_396 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_397 = " result = new ";
  protected final String TEXT_398 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_399 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_400 = " ";
  protected final String TEXT_401 = "feature = (";
  protected final String TEXT_402 = ") ";
  protected final String TEXT_403 = ".eINSTANCE.get";
  protected final String TEXT_404 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_405 = ".parseValue(feature, values[";
  protected final String TEXT_406 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_407 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_408 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_409 = " ";
  protected final String TEXT_410 = "values = new ";
  protected final String TEXT_411 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_412 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_413 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_414 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_415 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_416 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_417 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_418 = NL + "\t\t\t\t});";
  protected final String TEXT_419 = NL + "\t\t}" + NL;
  protected final String TEXT_420 = NL;
  protected final String TEXT_421 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_422 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_423 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_424 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_425 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_426 = "(this, ";
  protected final String TEXT_427 = ".class, new ";
  protected final String TEXT_428 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_429 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_430 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_431 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\treturn getLabelEditText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_432 = NL;
  protected final String TEXT_433 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_434 = " domainModelRefresher = new ";
  protected final String TEXT_435 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_436 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_437 = ".eINSTANCE.get";
  protected final String TEXT_438 = "(), labelRefresher);";
  protected final String TEXT_439 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_440 = ".eINSTANCE.get";
  protected final String TEXT_441 = "(), labelRefresher);";
  protected final String TEXT_442 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\treturn getLabelText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_443 = " getModelChildren() {" + NL + "\t\t\treturn ";
  protected final String TEXT_444 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_445 = NL;
d1182 3
a1184 1
	GenFeature feature = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();
d1187 1
a1187 1
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
d1189 1
a1189 1
    stringBuffer.append(feature.getFeatureAccessorName());
d1192 2
a1193 4
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
		GenFeature next = (GenFeature) it.next();
a1195 1
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
d1197 1
a1197 1
    stringBuffer.append(next.getFeatureAccessorName());
d1199 1
a1199 4
    
	}
}

d1201 1
a1204 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1205 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1208 4
    stringBuffer.append(TEXT_262);
    stringBuffer.append(TEXT_263);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_264);
d1212 1
a1212 1
    stringBuffer.append(TEXT_265);
d1241 1
a1241 1
    stringBuffer.append(TEXT_266);
d1243 1
a1243 1
    stringBuffer.append(TEXT_267);
d1245 1
a1245 1
    stringBuffer.append(TEXT_268);
d1247 1
a1247 1
    stringBuffer.append(TEXT_269);
d1249 1
a1249 1
    stringBuffer.append(TEXT_270);
d1253 1
a1253 1
    stringBuffer.append(TEXT_271);
d1255 1
a1255 1
    stringBuffer.append(TEXT_272);
d1258 1
a1258 1
    stringBuffer.append(TEXT_273);
d1260 1
a1260 1
    stringBuffer.append(TEXT_274);
d1264 1
a1264 1
    stringBuffer.append(TEXT_275);
d1266 1
a1266 1
    stringBuffer.append(TEXT_276);
d1268 1
a1268 1
    stringBuffer.append(TEXT_277);
d1270 1
a1270 1
    stringBuffer.append(TEXT_278);
d1272 1
a1272 1
    stringBuffer.append(TEXT_279);
d1276 1
a1276 1
    stringBuffer.append(TEXT_280);
d1280 1
a1280 1
    stringBuffer.append(TEXT_281);
d1284 1
a1284 1
    stringBuffer.append(TEXT_282);
d1286 1
a1286 1
    stringBuffer.append(TEXT_283);
d1290 1
a1290 1
    stringBuffer.append(TEXT_284);
d1294 1
a1294 1
    stringBuffer.append(TEXT_285);
d1296 1
a1296 1
    stringBuffer.append(TEXT_286);
d1298 1
a1298 1
    stringBuffer.append(TEXT_287);
d1312 1
a1312 1
    stringBuffer.append(TEXT_288);
d1314 1
a1314 1
    stringBuffer.append(TEXT_289);
d1316 1
a1316 1
    stringBuffer.append(TEXT_290);
d1320 1
a1320 1
    stringBuffer.append(TEXT_291);
d1324 1
a1324 1
    stringBuffer.append(TEXT_292);
d1328 1
a1328 1
    stringBuffer.append(TEXT_293);
d1333 1
a1333 1
    stringBuffer.append(TEXT_294);
d1335 1
a1335 1
    stringBuffer.append(TEXT_295);
d1339 1
a1339 1
    stringBuffer.append(TEXT_296);
d1346 5
a1351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
d1353 1
a1353 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d1355 1
d1357 1
d1359 1
a1359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d1361 1
a1361 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
d1363 1
a1363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1365 1
a1365 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
d1367 1
a1367 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1369 1
a1369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1371 1
a1371 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1373 1
a1373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
a1374 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_310);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_311);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_312);
d1382 1
a1382 1
    stringBuffer.append(TEXT_313);
d1384 1
a1384 1
    stringBuffer.append(TEXT_314);
d1386 1
a1386 1
    stringBuffer.append(TEXT_315);
d1390 1
a1390 1
    stringBuffer.append(TEXT_316);
d1392 1
a1392 1
    stringBuffer.append(TEXT_317);
d1394 1
a1394 1
    stringBuffer.append(TEXT_318);
d1396 1
a1396 1
    stringBuffer.append(TEXT_319);
d1400 1
a1400 1
    stringBuffer.append(TEXT_320);
d1402 1
a1402 1
    stringBuffer.append(TEXT_321);
d1404 1
a1404 1
    stringBuffer.append(TEXT_322);
d1406 1
a1406 1
    stringBuffer.append(TEXT_323);
d1408 1
a1408 1
    stringBuffer.append(TEXT_324);
d1415 1
a1415 1
    stringBuffer.append(TEXT_325);
d1417 1
a1417 1
    stringBuffer.append(TEXT_326);
d1419 1
a1419 1
    stringBuffer.append(TEXT_327);
d1421 1
a1421 1
    stringBuffer.append(TEXT_328);
d1425 1
a1425 1
    stringBuffer.append(TEXT_329);
d1427 1
a1427 1
    stringBuffer.append(TEXT_330);
d1429 1
a1429 1
    stringBuffer.append(TEXT_331);
d1431 1
a1431 1
    stringBuffer.append(TEXT_332);
d1433 1
a1433 1
    stringBuffer.append(TEXT_333);
d1437 1
a1437 1
    stringBuffer.append(TEXT_334);
d1442 1
a1442 1
    stringBuffer.append(TEXT_335);
d1444 1
a1444 1
    stringBuffer.append(TEXT_336);
d1446 1
a1446 1
    stringBuffer.append(TEXT_337);
d1448 1
a1448 1
    stringBuffer.append(TEXT_338);
d1452 1
a1452 1
    stringBuffer.append(TEXT_339);
d1454 1
a1454 1
    stringBuffer.append(TEXT_340);
d1456 1
a1456 1
    stringBuffer.append(TEXT_341);
d1458 1
a1458 1
    stringBuffer.append(TEXT_342);
d1460 1
a1460 1
    stringBuffer.append(TEXT_343);
d1465 1
a1465 1
    stringBuffer.append(TEXT_344);
d1473 5
d1479 1
a1480 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a1481 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
d1483 2
a1485 1
    stringBuffer.append(TEXT_349);
d1487 1
d1489 1
a1489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1491 1
a1491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1495 1
a1495 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d1497 1
a1497 1
    stringBuffer.append(editPatternCode);
d1499 1
a1499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1501 1
a1501 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d1503 1
a1503 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
a1504 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_360);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_361);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_362);
d1510 1
a1510 1
    stringBuffer.append(TEXT_363);
d1512 1
a1512 1
    stringBuffer.append(TEXT_364);
d1514 1
a1514 1
    stringBuffer.append(TEXT_365);
d1516 1
a1516 1
    stringBuffer.append(TEXT_366);
d1518 1
a1518 1
    stringBuffer.append(TEXT_367);
d1520 1
a1520 1
    stringBuffer.append(TEXT_368);
d1522 1
a1522 1
    stringBuffer.append(TEXT_369);
d1524 1
a1524 1
    stringBuffer.append(TEXT_370);
d1526 1
a1526 1
    stringBuffer.append(TEXT_371);
d1528 1
a1528 1
    stringBuffer.append(TEXT_372);
d1530 1
a1530 1
    stringBuffer.append(TEXT_373);
d1532 1
a1532 1
    stringBuffer.append(TEXT_374);
d1534 1
a1534 1
    stringBuffer.append(TEXT_375);
d1536 1
a1536 1
    stringBuffer.append(TEXT_376);
d1540 1
a1540 1
    stringBuffer.append(TEXT_377);
d1542 1
a1542 1
    stringBuffer.append(TEXT_378);
d1544 1
a1544 1
    stringBuffer.append(TEXT_379);
d1546 1
a1546 1
    stringBuffer.append(TEXT_380);
d1548 1
a1548 1
    stringBuffer.append(TEXT_381);
d1550 1
a1550 1
    stringBuffer.append(TEXT_382);
d1552 1
a1552 1
    stringBuffer.append(TEXT_383);
d1554 1
a1554 1
    stringBuffer.append(TEXT_384);
d1558 1
a1558 1
    stringBuffer.append(TEXT_385);
d1560 1
a1560 1
    stringBuffer.append(TEXT_386);
d1564 1
a1564 1
    stringBuffer.append(TEXT_387);
d1570 1
a1570 1
    stringBuffer.append(TEXT_388);
d1572 1
a1572 1
    stringBuffer.append(TEXT_389);
d1574 1
a1574 1
    stringBuffer.append(TEXT_390);
d1576 1
a1576 1
    stringBuffer.append(TEXT_391);
d1578 1
a1578 1
    stringBuffer.append(TEXT_392);
d1580 1
a1580 1
    stringBuffer.append(TEXT_393);
d1582 1
a1582 1
    stringBuffer.append(TEXT_394);
d1584 1
a1584 1
    stringBuffer.append(TEXT_395);
d1586 1
a1586 1
    stringBuffer.append(TEXT_396);
d1588 1
a1588 1
    stringBuffer.append(TEXT_397);
d1590 1
a1590 1
    stringBuffer.append(TEXT_398);
d1597 1
a1597 1
    stringBuffer.append(TEXT_399);
d1600 1
a1600 1
    stringBuffer.append(TEXT_400);
d1602 1
a1602 1
    stringBuffer.append(TEXT_401);
d1604 1
a1604 1
    stringBuffer.append(TEXT_402);
d1606 1
a1606 1
    stringBuffer.append(TEXT_403);
d1608 1
a1608 1
    stringBuffer.append(TEXT_404);
d1610 1
a1610 1
    stringBuffer.append(TEXT_405);
d1612 1
a1612 1
    stringBuffer.append(TEXT_406);
d1614 1
a1614 1
    stringBuffer.append(TEXT_407);
d1618 1
a1618 1
    stringBuffer.append(TEXT_408);
d1621 1
a1621 1
    stringBuffer.append(TEXT_409);
d1623 1
a1623 1
    stringBuffer.append(TEXT_410);
d1625 1
a1625 1
    stringBuffer.append(TEXT_411);
d1627 1
a1627 1
    stringBuffer.append(TEXT_412);
d1629 1
a1629 1
    stringBuffer.append(TEXT_413);
d1631 1
a1631 1
    stringBuffer.append(TEXT_414);
d1635 1
a1635 1
    stringBuffer.append(TEXT_415);
d1637 1
a1637 1
    stringBuffer.append(TEXT_416);
d1644 1
a1644 1
    stringBuffer.append(TEXT_417);
d1648 1
a1648 1
    stringBuffer.append(TEXT_418);
d1652 4
d1657 1
d1659 1
d1663 1
a1663 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d1665 1
a1665 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d1667 1
a1667 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
d1669 1
a1669 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
d1671 1
a1671 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
d1673 1
a1673 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
a1674 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
a1675 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
d1677 1
a1677 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
d1679 1
a1680 5
    stringBuffer.append(TEXT_433);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_434);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_435);
d1683 1
a1683 10
	GenFeature feature = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();

    stringBuffer.append(TEXT_436);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_437);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_438);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
d1687 1
a1687 1
    stringBuffer.append(TEXT_439);
d1689 1
a1689 1
    stringBuffer.append(TEXT_440);
d1691 1
a1691 1
    stringBuffer.append(TEXT_441);
d1696 1
a1696 1
    stringBuffer.append(TEXT_442);
d1698 1
a1698 1
    stringBuffer.append(TEXT_443);
d1700 1
a1700 1
    stringBuffer.append(TEXT_444);
d1702 1
a1702 1
    stringBuffer.append(TEXT_445);
@


1.12
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d479 1
a479 1
final boolean isReadOnly = genChildNode.getLabelModelFacet() != null && genChildNode.getLabelModelFacet().isReadOnly();
@


1.11
log
@[156358] bblajer - Diagram overview with Lite runtime
@
text
@d479 1
a479 1
final boolean isReadOnly = genChildNode.isLabelReadOnly();
@


1.10
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d61 1
a61 1
  protected final String TEXT_41 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
d66 188
a253 188
  protected final String TEXT_46 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_47 = " getDirectEditCommand(";
  protected final String TEXT_48 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_49 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_50 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_51 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_52 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_53 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_54 = " editingDomain = ";
  protected final String TEXT_55 = ".getEditingDomain(";
  protected final String TEXT_56 = ".getDiagram().getElement());";
  protected final String TEXT_57 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_58 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_59 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_60 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_61 = " createDomainModelCommand(";
  protected final String TEXT_62 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_63 = " element = ";
  protected final String TEXT_64 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_65 = " feature = (";
  protected final String TEXT_66 = ") ";
  protected final String TEXT_67 = ".eINSTANCE.get";
  protected final String TEXT_68 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_69 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_70 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_71 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_72 = " result = new ";
  protected final String TEXT_73 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_74 = " values = new ";
  protected final String TEXT_75 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_76 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_77 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_78 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_79 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_80 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_81 = NL + "\t\t\t\t\t}";
  protected final String TEXT_82 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_83 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_84 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_85 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_86 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_87 = " createDomainModelCommand(";
  protected final String TEXT_88 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_89 = " element = ";
  protected final String TEXT_90 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_91 = " result = new ";
  protected final String TEXT_92 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_93 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_94 = " ";
  protected final String TEXT_95 = "feature = (";
  protected final String TEXT_96 = ") ";
  protected final String TEXT_97 = ".eINSTANCE.get";
  protected final String TEXT_98 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_99 = ".parseValue(feature, values[";
  protected final String TEXT_100 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_101 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_102 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_103 = " ";
  protected final String TEXT_104 = "values = new ";
  protected final String TEXT_105 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_106 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_107 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_108 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_109 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_110 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_111 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_112 = NL + "\t\t\t\t});";
  protected final String TEXT_113 = NL;
  protected final String TEXT_114 = "\t\tinstallEditPolicy(";
  protected final String TEXT_115 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_116 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_117 = " createDeleteCommand(";
  protected final String TEXT_118 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_119 = " editingDomain = ";
  protected final String TEXT_120 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_121 = " cc = new ";
  protected final String TEXT_122 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_123 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_124 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_125 = " editingDomain) {";
  protected final String TEXT_126 = NL + "\t\t\t\t";
  protected final String TEXT_127 = " result = new ";
  protected final String TEXT_128 = "();";
  protected final String TEXT_129 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_130 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_131 = ".eINSTANCE.get";
  protected final String TEXT_132 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_133 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_134 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_135 = ".eINSTANCE.get";
  protected final String TEXT_136 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_137 = ".UNSET_VALUE));";
  protected final String TEXT_138 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_139 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_140 = ".eINSTANCE.get";
  protected final String TEXT_141 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_142 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_143 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_144 = ".eINSTANCE.get";
  protected final String TEXT_145 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_146 = ".UNSET_VALUE));";
  protected final String TEXT_147 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_148 = NL + "\t\t\t\treturn ";
  protected final String TEXT_149 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_150 = ".eINSTANCE.get";
  protected final String TEXT_151 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_152 = NL + "\t\t\t\treturn ";
  protected final String TEXT_153 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_154 = ".eINSTANCE.get";
  protected final String TEXT_155 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_156 = ".UNSET_VALUE);";
  protected final String TEXT_157 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_158 = NL + "\t}" + NL;
  protected final String TEXT_159 = NL;
  protected final String TEXT_160 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_161 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_162 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_163 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_164 = "(this, ";
  protected final String TEXT_165 = ".class, new ";
  protected final String TEXT_166 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_167 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_168 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_169 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_170 = NL;
  protected final String TEXT_171 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_172 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_173 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_174 = " element = ";
  protected final String TEXT_175 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_176 = " element = ";
  protected final String TEXT_177 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_178 = " element, String pattern) {";
  protected final String TEXT_179 = NL + "\t\tif (";
  protected final String TEXT_180 = " == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_181 = NL + "\t\treturn ";
  protected final String TEXT_182 = ".format(pattern, new Object[] {";
  protected final String TEXT_183 = NL + "\t\t\tnew ";
  protected final String TEXT_184 = "(";
  protected final String TEXT_185 = ")";
  protected final String TEXT_186 = NL + "\t\t});";
  protected final String TEXT_187 = NL + "\t\treturn ";
  protected final String TEXT_188 = ".format(pattern, new Object[] {";
  protected final String TEXT_189 = NL + "\t\t\tnew ";
  protected final String TEXT_190 = "(";
  protected final String TEXT_191 = ")";
  protected final String TEXT_192 = ",";
  protected final String TEXT_193 = NL + "\t\t});";
  protected final String TEXT_194 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_195 = NL + "\t}";
  protected final String TEXT_196 = NL;
  protected final String TEXT_197 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_198 = NL + "\t\t";
  protected final String TEXT_199 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_200 = ") ";
  protected final String TEXT_201 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_202 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_203 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_204 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_205 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_206 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_207 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_208 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_209 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_210 = "\t" + NL + "\t}";
  protected final String TEXT_211 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_212 = " createdFont;";
  protected final String TEXT_213 = "\t";
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_216 = " style = (";
  protected final String TEXT_217 = ")  ";
  protected final String TEXT_218 = ".getStyle(";
  protected final String TEXT_219 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_220 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_221 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_222 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_223 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_224 = " getLabelIcon() {";
  protected final String TEXT_225 = NL + "\t\t";
  protected final String TEXT_226 = " imageDescriptor = ";
  protected final String TEXT_227 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_228 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_229 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_230 = NL;
  protected final String TEXT_231 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_232 = " domainModelRefresher = new ";
  protected final String TEXT_233 = "(this);" + NL;
d256 7
a262 7
  protected final String TEXT_236 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_237 = " feature, ";
  protected final String TEXT_238 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_239 = NL;
  protected final String TEXT_240 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_241 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_242 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d264 27
a290 27
  protected final String TEXT_244 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_245 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_246 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_247 = ".eINSTANCE.get";
  protected final String TEXT_248 = "(), labelRefresher);";
  protected final String TEXT_249 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_250 = ".eINSTANCE.get";
  protected final String TEXT_251 = "(), labelRefresher);";
  protected final String TEXT_252 = NL;
  protected final String TEXT_253 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_254 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_255 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_256 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_257 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_258 = NL;
  protected final String TEXT_259 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_260 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_261 = NL;
  protected final String TEXT_262 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_263 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_264 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_265 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_266 = " createLabel() {";
  protected final String TEXT_267 = NL + "\t\treturn new ";
  protected final String TEXT_268 = "();";
  protected final String TEXT_269 = NL + "\t\treturn ";
  protected final String TEXT_270 = ";";
d293 21
a313 21
  protected final String TEXT_273 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_274 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_275 = " label = createLabel();";
  protected final String TEXT_276 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_277 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_278 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_279 = NL + NL + "\t/**";
  protected final String TEXT_280 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_281 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_282 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_283 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_284 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_285 = "(";
  protected final String TEXT_286 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_287 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_288 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_289 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_290 = NL;
  protected final String TEXT_291 = NL;
  protected final String TEXT_292 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_293 = NL + "}";
d315 151
d566 1
d624 1
a633 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a634 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d636 1
a636 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d638 1
a638 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d642 6
d649 1
a649 1
    stringBuffer.append(TEXT_52);
d651 1
a651 1
    stringBuffer.append(TEXT_53);
d653 1
a653 1
    stringBuffer.append(TEXT_54);
d655 1
a655 1
    stringBuffer.append(TEXT_55);
d657 1
a657 1
    stringBuffer.append(TEXT_56);
d663 1
a663 1
    stringBuffer.append(TEXT_57);
d665 1
a665 1
    stringBuffer.append(TEXT_58);
d667 1
a667 1
    stringBuffer.append(TEXT_59);
d669 1
a669 1
    stringBuffer.append(TEXT_60);
d671 1
a671 1
    stringBuffer.append(TEXT_61);
d673 1
a673 1
    stringBuffer.append(TEXT_62);
d675 1
a675 1
    stringBuffer.append(TEXT_63);
d677 1
a677 1
    stringBuffer.append(TEXT_64);
d679 1
a679 1
    stringBuffer.append(TEXT_65);
d681 1
a681 1
    stringBuffer.append(TEXT_66);
d683 1
a683 1
    stringBuffer.append(TEXT_67);
d685 1
a685 1
    stringBuffer.append(TEXT_68);
d687 1
a687 1
    stringBuffer.append(TEXT_69);
d689 1
a689 1
    stringBuffer.append(TEXT_70);
d693 1
a693 1
    stringBuffer.append(TEXT_71);
d695 1
a695 1
    stringBuffer.append(TEXT_72);
d697 1
a697 1
    stringBuffer.append(TEXT_73);
d699 1
a699 1
    stringBuffer.append(TEXT_74);
d701 1
a701 1
    stringBuffer.append(TEXT_75);
d703 1
a703 1
    stringBuffer.append(TEXT_76);
d705 1
a705 1
    stringBuffer.append(TEXT_77);
d707 1
a707 1
    stringBuffer.append(TEXT_78);
d711 1
a711 1
    stringBuffer.append(TEXT_79);
d713 1
a713 1
    stringBuffer.append(TEXT_80);
d717 1
a717 1
    stringBuffer.append(TEXT_81);
d723 1
a723 1
    stringBuffer.append(TEXT_82);
d725 1
a725 1
    stringBuffer.append(TEXT_83);
d727 1
a727 1
    stringBuffer.append(TEXT_84);
d729 1
a729 1
    stringBuffer.append(TEXT_85);
d731 1
a731 1
    stringBuffer.append(TEXT_86);
d733 1
a733 1
    stringBuffer.append(TEXT_87);
d735 1
a735 1
    stringBuffer.append(TEXT_88);
d737 1
a737 1
    stringBuffer.append(TEXT_89);
d739 1
a739 1
    stringBuffer.append(TEXT_90);
d741 1
a741 1
    stringBuffer.append(TEXT_91);
d743 1
a743 1
    stringBuffer.append(TEXT_92);
d750 1
a750 1
    stringBuffer.append(TEXT_93);
d753 1
a753 1
    stringBuffer.append(TEXT_94);
d755 1
a755 1
    stringBuffer.append(TEXT_95);
d757 1
a757 1
    stringBuffer.append(TEXT_96);
d759 1
a759 1
    stringBuffer.append(TEXT_97);
d761 1
a761 1
    stringBuffer.append(TEXT_98);
d763 1
a763 1
    stringBuffer.append(TEXT_99);
d765 1
a765 1
    stringBuffer.append(TEXT_100);
d767 1
a767 1
    stringBuffer.append(TEXT_101);
d771 1
a771 1
    stringBuffer.append(TEXT_102);
d774 1
a774 1
    stringBuffer.append(TEXT_103);
d776 1
a776 1
    stringBuffer.append(TEXT_104);
d778 1
a778 1
    stringBuffer.append(TEXT_105);
d780 1
a780 1
    stringBuffer.append(TEXT_106);
d782 1
a782 1
    stringBuffer.append(TEXT_107);
d784 1
a784 1
    stringBuffer.append(TEXT_108);
d788 1
a788 1
    stringBuffer.append(TEXT_109);
d790 1
a790 1
    stringBuffer.append(TEXT_110);
d797 1
a797 1
    stringBuffer.append(TEXT_111);
d801 1
a801 1
    stringBuffer.append(TEXT_112);
d805 2
a806 2
    stringBuffer.append(TEXT_113);
    stringBuffer.append(TEXT_114);
d808 1
a808 1
    stringBuffer.append(TEXT_115);
d810 1
a810 1
    stringBuffer.append(TEXT_116);
d812 1
a812 1
    stringBuffer.append(TEXT_117);
d814 1
a814 1
    stringBuffer.append(TEXT_118);
d816 1
a816 1
    stringBuffer.append(TEXT_119);
d818 1
a818 1
    stringBuffer.append(TEXT_120);
d820 1
a820 1
    stringBuffer.append(TEXT_121);
d822 1
a822 1
    stringBuffer.append(TEXT_122);
d824 1
a824 1
    stringBuffer.append(TEXT_123);
d826 1
a826 1
    stringBuffer.append(TEXT_124);
d828 1
a828 1
    stringBuffer.append(TEXT_125);
d836 1
a836 1
    stringBuffer.append(TEXT_126);
d838 1
a838 1
    stringBuffer.append(TEXT_127);
d840 1
a840 1
    stringBuffer.append(TEXT_128);
d844 1
a844 1
    stringBuffer.append(TEXT_129);
d846 1
a846 1
    stringBuffer.append(TEXT_130);
d848 1
a848 1
    stringBuffer.append(TEXT_131);
d850 1
a850 1
    stringBuffer.append(TEXT_132);
d854 1
a854 1
    stringBuffer.append(TEXT_133);
d856 1
a856 1
    stringBuffer.append(TEXT_134);
d858 1
a858 1
    stringBuffer.append(TEXT_135);
d860 1
a860 1
    stringBuffer.append(TEXT_136);
d862 1
a862 1
    stringBuffer.append(TEXT_137);
d869 1
a869 1
    stringBuffer.append(TEXT_138);
d871 1
a871 1
    stringBuffer.append(TEXT_139);
d873 1
a873 1
    stringBuffer.append(TEXT_140);
d875 1
a875 1
    stringBuffer.append(TEXT_141);
d879 1
a879 1
    stringBuffer.append(TEXT_142);
d881 1
a881 1
    stringBuffer.append(TEXT_143);
d883 1
a883 1
    stringBuffer.append(TEXT_144);
d885 1
a885 1
    stringBuffer.append(TEXT_145);
d887 1
a887 1
    stringBuffer.append(TEXT_146);
d891 1
a891 1
    stringBuffer.append(TEXT_147);
d896 1
a896 1
    stringBuffer.append(TEXT_148);
d898 1
a898 1
    stringBuffer.append(TEXT_149);
d900 1
a900 1
    stringBuffer.append(TEXT_150);
d902 1
a902 1
    stringBuffer.append(TEXT_151);
d906 1
a906 1
    stringBuffer.append(TEXT_152);
d908 1
a908 1
    stringBuffer.append(TEXT_153);
d910 1
a910 1
    stringBuffer.append(TEXT_154);
d912 1
a912 1
    stringBuffer.append(TEXT_155);
d914 1
a914 1
    stringBuffer.append(TEXT_156);
d919 1
a919 1
    stringBuffer.append(TEXT_157);
d923 1
a923 1
    stringBuffer.append(TEXT_158);
d927 2
a928 2
    stringBuffer.append(TEXT_159);
    stringBuffer.append(TEXT_160);
d930 1
a930 1
    stringBuffer.append(TEXT_161);
d932 1
a932 1
    stringBuffer.append(TEXT_162);
d934 1
a934 1
    stringBuffer.append(TEXT_163);
d936 1
a936 1
    stringBuffer.append(TEXT_164);
d938 1
a938 1
    stringBuffer.append(TEXT_165);
d940 1
a940 1
    stringBuffer.append(TEXT_166);
d942 1
a942 1
    stringBuffer.append(TEXT_167);
d944 1
a944 1
    stringBuffer.append(TEXT_168);
d948 2
a949 2
    stringBuffer.append(TEXT_169);
    stringBuffer.append(TEXT_170);
d993 1
a993 1
    stringBuffer.append(TEXT_171);
d995 1
a995 1
    stringBuffer.append(TEXT_172);
d997 1
a997 1
    stringBuffer.append(TEXT_173);
d999 1
a999 1
    stringBuffer.append(TEXT_174);
d1001 1
a1001 1
    stringBuffer.append(TEXT_175);
d1003 1
a1003 1
    stringBuffer.append(TEXT_176);
d1005 1
a1005 1
    stringBuffer.append(TEXT_177);
d1007 1
a1007 1
    stringBuffer.append(TEXT_178);
d1014 1
a1014 1
    stringBuffer.append(TEXT_179);
d1016 1
a1016 1
    stringBuffer.append(TEXT_180);
d1020 1
a1020 1
    stringBuffer.append(TEXT_181);
d1022 1
a1022 1
    stringBuffer.append(TEXT_182);
d1026 1
a1026 1
    stringBuffer.append(TEXT_183);
d1028 1
a1028 1
    stringBuffer.append(TEXT_184);
d1034 1
a1034 1
    stringBuffer.append(TEXT_185);
d1038 1
a1038 1
    stringBuffer.append(TEXT_186);
d1043 1
a1043 1
    stringBuffer.append(TEXT_187);
d1045 1
a1045 1
    stringBuffer.append(TEXT_188);
d1051 1
a1051 1
    stringBuffer.append(TEXT_189);
d1053 1
a1053 1
    stringBuffer.append(TEXT_190);
d1059 1
a1059 1
    stringBuffer.append(TEXT_191);
d1063 1
a1063 1
    stringBuffer.append(TEXT_192);
d1068 1
a1068 1
    stringBuffer.append(TEXT_193);
d1072 1
a1072 1
    stringBuffer.append(TEXT_194);
d1076 2
a1077 2
    stringBuffer.append(TEXT_195);
    stringBuffer.append(TEXT_196);
d1085 1
a1085 1
    stringBuffer.append(TEXT_197);
d1089 1
a1089 1
    stringBuffer.append(TEXT_198);
d1091 1
a1091 1
    stringBuffer.append(TEXT_199);
d1093 1
a1093 1
    stringBuffer.append(TEXT_200);
d1095 1
a1095 1
    stringBuffer.append(TEXT_201);
d1097 1
a1097 1
    stringBuffer.append(TEXT_202);
d1099 1
a1099 1
    stringBuffer.append(TEXT_203);
d1101 1
a1101 1
    stringBuffer.append(TEXT_204);
d1103 1
a1103 1
    stringBuffer.append(TEXT_205);
d1105 1
a1105 1
    stringBuffer.append(TEXT_206);
d1107 1
a1107 1
    stringBuffer.append(TEXT_207);
d1109 1
a1109 1
    stringBuffer.append(TEXT_208);
d1111 1
a1111 1
    stringBuffer.append(TEXT_209);
d1115 1
a1115 1
    stringBuffer.append(TEXT_210);
d1119 1
a1119 1
    stringBuffer.append(TEXT_211);
d1121 1
a1121 1
    stringBuffer.append(TEXT_212);
a1124 4
    stringBuffer.append(TEXT_213);
    stringBuffer.append(TEXT_214);
    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a1125 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a1126 1
    stringBuffer.append(primaryView);
d1128 1
a1128 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1130 1
a1130 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1132 1
a1132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1134 1
a1134 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1138 6
d1145 1
a1145 1
    stringBuffer.append(TEXT_224);
d1149 1
a1149 1
    stringBuffer.append(TEXT_225);
d1151 1
a1151 1
    stringBuffer.append(TEXT_226);
d1153 1
a1153 1
    stringBuffer.append(TEXT_227);
a1156 4
    stringBuffer.append(TEXT_228);
    /*@@ include file="adapters/propertySource.javajetinc"*/
    stringBuffer.append(TEXT_229);
    stringBuffer.append(TEXT_230);
d1158 1
a1158 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d1160 1
a1160 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d1164 1
a1164 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d1166 1
a1166 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a1167 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1170 1
d1172 1
a1172 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1174 1
a1174 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1180 6
d1190 1
a1190 1
    stringBuffer.append(TEXT_246);
d1192 1
a1192 1
    stringBuffer.append(TEXT_247);
d1194 1
a1194 1
    stringBuffer.append(TEXT_248);
d1201 1
a1201 1
    stringBuffer.append(TEXT_249);
d1203 1
a1203 1
    stringBuffer.append(TEXT_250);
d1205 1
a1205 1
    stringBuffer.append(TEXT_251);
a1209 7
    stringBuffer.append(TEXT_252);
    stringBuffer.append(TEXT_253);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_254);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_255);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1211 1
a1212 1
    stringBuffer.append(TEXT_257);
d1214 1
d1218 6
d1227 1
a1227 1
    stringBuffer.append(TEXT_261);
d1256 1
a1256 1
    stringBuffer.append(TEXT_262);
d1258 1
a1258 1
    stringBuffer.append(TEXT_263);
d1260 1
a1260 1
    stringBuffer.append(TEXT_264);
d1262 1
a1262 1
    stringBuffer.append(TEXT_265);
d1264 1
a1264 1
    stringBuffer.append(TEXT_266);
d1268 1
a1268 1
    stringBuffer.append(TEXT_267);
d1270 1
a1270 1
    stringBuffer.append(TEXT_268);
d1273 1
a1273 1
    stringBuffer.append(TEXT_269);
d1275 1
a1275 1
    stringBuffer.append(TEXT_270);
d1279 1
a1279 1
    stringBuffer.append(TEXT_271);
d1281 1
a1281 1
    stringBuffer.append(TEXT_272);
d1283 1
a1283 1
    stringBuffer.append(TEXT_273);
d1285 1
a1285 1
    stringBuffer.append(TEXT_274);
d1287 1
a1287 1
    stringBuffer.append(TEXT_275);
d1291 1
a1291 1
    stringBuffer.append(TEXT_276);
d1295 1
a1295 1
    stringBuffer.append(TEXT_277);
d1299 1
a1299 1
    stringBuffer.append(TEXT_278);
d1301 1
a1301 1
    stringBuffer.append(TEXT_279);
d1305 1
a1305 1
    stringBuffer.append(TEXT_280);
d1309 1
a1309 1
    stringBuffer.append(TEXT_281);
d1311 1
a1311 1
    stringBuffer.append(TEXT_282);
d1313 1
a1313 1
    stringBuffer.append(TEXT_283);
d1327 1
a1327 1
    stringBuffer.append(TEXT_284);
d1329 1
a1329 1
    stringBuffer.append(TEXT_285);
d1331 1
a1331 1
    stringBuffer.append(TEXT_286);
d1335 1
a1335 1
    stringBuffer.append(TEXT_287);
d1339 1
a1339 1
    stringBuffer.append(TEXT_288);
d1343 1
a1343 1
    stringBuffer.append(TEXT_289);
d1348 1
a1348 1
    stringBuffer.append(TEXT_290);
d1350 1
a1350 1
    stringBuffer.append(TEXT_291);
d1354 310
a1663 1
    stringBuffer.append(TEXT_292);
d1667 38
d1706 12
d1720 5
a1724 1
    stringBuffer.append(TEXT_293);
d1726 1
a1726 1
    stringBuffer.append(TEXT_294);
@


1.9
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d43 5
a47 5
  protected final String TEXT_23 = " implements IUpdatableEditPart {";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL;
d49 100
a148 100
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_30 = " manager;" + NL;
  protected final String TEXT_31 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_32 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_33 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_34 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_37 = " view = (";
  protected final String TEXT_38 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_39 = " view = (";
  protected final String TEXT_40 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
  protected final String TEXT_41 = NL;
  protected final String TEXT_42 = "\t\tinstallEditPolicy(";
  protected final String TEXT_43 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_44 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_45 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_46 = " getDirectEditCommand(";
  protected final String TEXT_47 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_48 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_49 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_50 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_51 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_52 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_53 = " editingDomain = ";
  protected final String TEXT_54 = ".getEditingDomain(";
  protected final String TEXT_55 = ".getDiagram().getElement());";
  protected final String TEXT_56 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_57 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_58 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_59 = " createDomainModelCommand(";
  protected final String TEXT_60 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_61 = " element = ";
  protected final String TEXT_62 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_63 = " feature = (";
  protected final String TEXT_64 = ") ";
  protected final String TEXT_65 = ".eINSTANCE.get";
  protected final String TEXT_66 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_67 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_68 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_69 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_70 = " result = new ";
  protected final String TEXT_71 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_72 = " values = new ";
  protected final String TEXT_73 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_74 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_75 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_76 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_77 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_78 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_79 = NL + "\t\t\t\t\t}";
  protected final String TEXT_80 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_81 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_82 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_83 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_84 = " createDomainModelCommand(";
  protected final String TEXT_85 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_86 = " element = ";
  protected final String TEXT_87 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_88 = " result = new ";
  protected final String TEXT_89 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_90 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_91 = " ";
  protected final String TEXT_92 = "feature = (";
  protected final String TEXT_93 = ") ";
  protected final String TEXT_94 = ".eINSTANCE.get";
  protected final String TEXT_95 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_96 = ".parseValue(feature, values[";
  protected final String TEXT_97 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_98 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_99 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_100 = " ";
  protected final String TEXT_101 = "values = new ";
  protected final String TEXT_102 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_103 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_104 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_105 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_106 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_107 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_108 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_109 = NL + "\t\t\t\t});";
  protected final String TEXT_110 = NL;
  protected final String TEXT_111 = "\t\tinstallEditPolicy(";
  protected final String TEXT_112 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_113 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_114 = " createDeleteCommand(";
  protected final String TEXT_115 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_116 = " editingDomain = ";
  protected final String TEXT_117 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_118 = " cc = new ";
  protected final String TEXT_119 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_120 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new WrappingCommand(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_121 = " editingDomain) {";
  protected final String TEXT_122 = NL + "\t\t\t\t";
  protected final String TEXT_123 = " result = new ";
  protected final String TEXT_124 = "();";
  protected final String TEXT_125 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_126 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_127 = ".eINSTANCE.get";
  protected final String TEXT_128 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
d152 6
a157 6
  protected final String TEXT_132 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_133 = ".UNSET_VALUE));";
  protected final String TEXT_134 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_135 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_136 = ".eINSTANCE.get";
  protected final String TEXT_137 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
d161 7
a167 7
  protected final String TEXT_141 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_142 = ".UNSET_VALUE));";
  protected final String TEXT_143 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_144 = NL + "\t\t\t\treturn ";
  protected final String TEXT_145 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_146 = ".eINSTANCE.get";
  protected final String TEXT_147 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
d171 95
a265 95
  protected final String TEXT_151 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_152 = ".UNSET_VALUE);";
  protected final String TEXT_153 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_154 = NL + "\t}" + NL;
  protected final String TEXT_155 = NL;
  protected final String TEXT_156 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_157 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_158 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_159 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_160 = "(this, ";
  protected final String TEXT_161 = ".class, new ";
  protected final String TEXT_162 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_163 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_164 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_165 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_166 = NL;
  protected final String TEXT_167 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_168 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_169 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_170 = " element = ";
  protected final String TEXT_171 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_172 = " element = ";
  protected final String TEXT_173 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_174 = " element, String pattern) {";
  protected final String TEXT_175 = NL + "\t\tif (";
  protected final String TEXT_176 = " == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_177 = NL + "\t\treturn ";
  protected final String TEXT_178 = ".format(pattern, new Object[] {";
  protected final String TEXT_179 = NL + "\t\t\tnew ";
  protected final String TEXT_180 = "(";
  protected final String TEXT_181 = ")";
  protected final String TEXT_182 = NL + "\t\t});";
  protected final String TEXT_183 = NL + "\t\treturn ";
  protected final String TEXT_184 = ".format(pattern, new Object[] {";
  protected final String TEXT_185 = NL + "\t\t\tnew ";
  protected final String TEXT_186 = "(";
  protected final String TEXT_187 = ")";
  protected final String TEXT_188 = ",";
  protected final String TEXT_189 = NL + "\t\t});";
  protected final String TEXT_190 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_191 = NL + "\t}";
  protected final String TEXT_192 = NL;
  protected final String TEXT_193 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_194 = NL + "\t\t";
  protected final String TEXT_195 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_196 = ") ";
  protected final String TEXT_197 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_198 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_199 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_200 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_201 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_202 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_203 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_204 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_205 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_206 = "\t" + NL + "\t}";
  protected final String TEXT_207 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_208 = " createdFont;";
  protected final String TEXT_209 = "\t";
  protected final String TEXT_210 = NL;
  protected final String TEXT_211 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_212 = " style = (";
  protected final String TEXT_213 = ")  ";
  protected final String TEXT_214 = ".getStyle(";
  protected final String TEXT_215 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_216 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_217 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_218 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_219 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_220 = " getLabelIcon() {";
  protected final String TEXT_221 = NL + "\t\t";
  protected final String TEXT_222 = " imageDescriptor = ";
  protected final String TEXT_223 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_224 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_225 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_226 = NL;
  protected final String TEXT_227 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_228 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_229 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_230 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_231 = NL;
  protected final String TEXT_232 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_233 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_234 = " feature, ";
  protected final String TEXT_235 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_236 = NL;
  protected final String TEXT_237 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_238 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_239 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_242 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_243 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_244 = ".eINSTANCE.get";
  protected final String TEXT_245 = "(), labelRefresher);";
d269 9
a277 9
  protected final String TEXT_249 = NL;
  protected final String TEXT_250 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_251 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_252 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_253 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_254 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_255 = NL;
  protected final String TEXT_256 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_257 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
d279 32
a310 32
  protected final String TEXT_259 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_260 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_261 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_262 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_263 = " createLabel() {";
  protected final String TEXT_264 = NL + "\t\treturn new ";
  protected final String TEXT_265 = "();";
  protected final String TEXT_266 = NL + "\t\treturn ";
  protected final String TEXT_267 = ";";
  protected final String TEXT_268 = NL + "\t\treturn new ";
  protected final String TEXT_269 = "();";
  protected final String TEXT_270 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_271 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_272 = " label = createLabel();";
  protected final String TEXT_273 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_274 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_275 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_276 = NL + NL + "\t/**";
  protected final String TEXT_277 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_278 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_279 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_280 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_281 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_282 = "(";
  protected final String TEXT_283 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_284 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_285 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_286 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_287 = NL;
  protected final String TEXT_288 = NL;
  protected final String TEXT_289 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_290 = NL + "}";
d312 3
d429 2
a432 1
    stringBuffer.append(TEXT_24);
d434 1
d436 1
a436 1
    stringBuffer.append(TEXT_26);
a437 1
    stringBuffer.append(TEXT_27);
d439 1
d443 1
a443 1
    stringBuffer.append(TEXT_29);
d445 1
a445 1
    stringBuffer.append(TEXT_30);
d449 1
a449 1
    stringBuffer.append(TEXT_31);
a450 2
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d454 1
a456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d464 2
a472 1
    stringBuffer.append(TEXT_41);
d474 1
d476 1
a476 1
    stringBuffer.append(TEXT_43);
d478 1
a478 1
    stringBuffer.append(TEXT_44);
d480 1
a480 1
    stringBuffer.append(TEXT_45);
d482 1
a482 1
    stringBuffer.append(TEXT_46);
d484 1
a484 1
    stringBuffer.append(TEXT_47);
d486 1
a486 1
    stringBuffer.append(TEXT_48);
d488 1
a488 1
    stringBuffer.append(TEXT_49);
d490 1
a490 1
    stringBuffer.append(TEXT_50);
d492 1
a492 1
    stringBuffer.append(TEXT_51);
d494 1
a494 1
    stringBuffer.append(TEXT_52);
d496 1
a496 1
    stringBuffer.append(TEXT_53);
d498 1
a498 1
    stringBuffer.append(TEXT_54);
d500 1
a500 1
    stringBuffer.append(TEXT_55);
d506 1
a506 1
    stringBuffer.append(TEXT_56);
a507 2
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d511 1
a511 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d513 1
a513 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d515 1
a515 1
    stringBuffer.append(resolvedSemanticElement);
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d519 2
a521 2
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName(featureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
d523 1
a523 1
    stringBuffer.append(featureToSet.getFeatureAccessorName());
d525 1
a525 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getAbstractParserQualifiedClassName()));
d527 4
d532 1
a532 1
    stringBuffer.append(TEXT_68);
d536 1
a536 1
    stringBuffer.append(TEXT_69);
d538 1
a538 1
    stringBuffer.append(TEXT_70);
d540 1
a540 1
    stringBuffer.append(TEXT_71);
d542 1
a542 1
    stringBuffer.append(TEXT_72);
d544 1
a544 1
    stringBuffer.append(TEXT_73);
d546 1
a546 1
    stringBuffer.append(TEXT_74);
d548 1
a548 1
    stringBuffer.append(TEXT_75);
d550 1
a550 1
    stringBuffer.append(TEXT_76);
d554 1
a554 1
    stringBuffer.append(TEXT_77);
d556 1
a556 1
    stringBuffer.append(TEXT_78);
d560 1
a560 1
    stringBuffer.append(TEXT_79);
d566 1
a566 1
    stringBuffer.append(TEXT_80);
d568 1
a568 1
    stringBuffer.append(TEXT_81);
d570 1
a570 1
    stringBuffer.append(TEXT_82);
d572 3
a574 1
    stringBuffer.append(TEXT_83);
d576 1
a576 1
    stringBuffer.append(TEXT_84);
d578 1
a578 1
    stringBuffer.append(TEXT_85);
d580 1
a580 1
    stringBuffer.append(TEXT_86);
d582 1
a582 1
    stringBuffer.append(TEXT_87);
d584 1
a584 1
    stringBuffer.append(TEXT_88);
d586 1
a586 1
    stringBuffer.append(TEXT_89);
d593 1
a593 1
    stringBuffer.append(TEXT_90);
d596 1
a596 1
    stringBuffer.append(TEXT_91);
d598 1
a598 1
    stringBuffer.append(TEXT_92);
d600 1
a600 1
    stringBuffer.append(TEXT_93);
d602 1
a602 1
    stringBuffer.append(TEXT_94);
d604 3
a606 3
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName(genDiagram.getAbstractParserQualifiedClassName()));
    stringBuffer.append(TEXT_96);
d608 1
a608 1
    stringBuffer.append(TEXT_97);
d610 1
a610 1
    stringBuffer.append(TEXT_98);
d614 1
a614 1
    stringBuffer.append(TEXT_99);
d617 1
a617 1
    stringBuffer.append(TEXT_100);
d619 1
a619 1
    stringBuffer.append(TEXT_101);
d621 1
a621 1
    stringBuffer.append(TEXT_102);
d623 1
a623 1
    stringBuffer.append(TEXT_103);
d625 1
a625 1
    stringBuffer.append(TEXT_104);
d627 1
a627 1
    stringBuffer.append(TEXT_105);
d631 1
a631 1
    stringBuffer.append(TEXT_106);
d633 1
a633 1
    stringBuffer.append(TEXT_107);
d640 1
a640 1
    stringBuffer.append(TEXT_108);
d644 1
a644 1
    stringBuffer.append(TEXT_109);
d648 2
a649 2
    stringBuffer.append(TEXT_110);
    stringBuffer.append(TEXT_111);
d651 1
a651 1
    stringBuffer.append(TEXT_112);
d653 1
a653 1
    stringBuffer.append(TEXT_113);
d655 1
a655 1
    stringBuffer.append(TEXT_114);
d657 1
a657 1
    stringBuffer.append(TEXT_115);
d659 1
a659 1
    stringBuffer.append(TEXT_116);
d661 1
a661 1
    stringBuffer.append(TEXT_117);
d663 1
a663 1
    stringBuffer.append(TEXT_118);
d665 1
a665 1
    stringBuffer.append(TEXT_119);
d667 3
a669 1
    stringBuffer.append(TEXT_120);
d671 1
a671 1
    stringBuffer.append(TEXT_121);
d679 1
a679 1
    stringBuffer.append(TEXT_122);
d681 1
a681 1
    stringBuffer.append(TEXT_123);
d683 1
a683 1
    stringBuffer.append(TEXT_124);
d687 1
a687 1
    stringBuffer.append(TEXT_125);
d689 1
a689 1
    stringBuffer.append(TEXT_126);
d691 1
a691 1
    stringBuffer.append(TEXT_127);
d693 1
a693 1
    stringBuffer.append(TEXT_128);
d697 1
a697 1
    stringBuffer.append(TEXT_129);
d699 1
a699 1
    stringBuffer.append(TEXT_130);
d701 1
a701 1
    stringBuffer.append(TEXT_131);
d703 1
a703 1
    stringBuffer.append(TEXT_132);
d705 1
a705 1
    stringBuffer.append(TEXT_133);
d712 1
a712 1
    stringBuffer.append(TEXT_134);
d714 1
a714 1
    stringBuffer.append(TEXT_135);
d716 1
a716 1
    stringBuffer.append(TEXT_136);
d718 1
a718 1
    stringBuffer.append(TEXT_137);
d722 1
a722 1
    stringBuffer.append(TEXT_138);
d724 1
a724 1
    stringBuffer.append(TEXT_139);
d726 1
a726 1
    stringBuffer.append(TEXT_140);
d728 1
a728 1
    stringBuffer.append(TEXT_141);
d730 1
a730 1
    stringBuffer.append(TEXT_142);
d734 1
a734 1
    stringBuffer.append(TEXT_143);
d739 1
a739 1
    stringBuffer.append(TEXT_144);
d741 1
a741 1
    stringBuffer.append(TEXT_145);
d743 1
a743 1
    stringBuffer.append(TEXT_146);
d745 1
a745 1
    stringBuffer.append(TEXT_147);
d749 1
a749 1
    stringBuffer.append(TEXT_148);
d751 1
a751 1
    stringBuffer.append(TEXT_149);
d753 1
a753 1
    stringBuffer.append(TEXT_150);
d755 1
a755 1
    stringBuffer.append(TEXT_151);
d757 1
a757 1
    stringBuffer.append(TEXT_152);
d762 1
a762 1
    stringBuffer.append(TEXT_153);
d766 1
a766 1
    stringBuffer.append(TEXT_154);
d770 2
a771 2
    stringBuffer.append(TEXT_155);
    stringBuffer.append(TEXT_156);
d773 1
a773 1
    stringBuffer.append(TEXT_157);
d775 1
a775 1
    stringBuffer.append(TEXT_158);
d777 1
a777 1
    stringBuffer.append(TEXT_159);
d779 1
a779 1
    stringBuffer.append(TEXT_160);
d781 1
a781 1
    stringBuffer.append(TEXT_161);
d783 1
a783 1
    stringBuffer.append(TEXT_162);
d785 1
a785 1
    stringBuffer.append(TEXT_163);
d787 1
a787 1
    stringBuffer.append(TEXT_164);
d791 2
a792 2
    stringBuffer.append(TEXT_165);
    stringBuffer.append(TEXT_166);
d836 1
a836 1
    stringBuffer.append(TEXT_167);
d838 1
a838 1
    stringBuffer.append(TEXT_168);
d840 1
a840 1
    stringBuffer.append(TEXT_169);
d842 1
a842 1
    stringBuffer.append(TEXT_170);
d844 1
a844 1
    stringBuffer.append(TEXT_171);
d846 1
a846 1
    stringBuffer.append(TEXT_172);
d848 1
a848 1
    stringBuffer.append(TEXT_173);
d850 1
a850 1
    stringBuffer.append(TEXT_174);
d857 1
a857 1
    stringBuffer.append(TEXT_175);
d859 1
a859 1
    stringBuffer.append(TEXT_176);
d863 1
a863 1
    stringBuffer.append(TEXT_177);
d865 1
a865 1
    stringBuffer.append(TEXT_178);
d869 1
a869 1
    stringBuffer.append(TEXT_179);
d871 1
a871 1
    stringBuffer.append(TEXT_180);
d877 1
a877 1
    stringBuffer.append(TEXT_181);
d881 1
a881 1
    stringBuffer.append(TEXT_182);
d886 1
a886 1
    stringBuffer.append(TEXT_183);
d888 1
a888 1
    stringBuffer.append(TEXT_184);
d894 1
a894 1
    stringBuffer.append(TEXT_185);
d896 1
a896 1
    stringBuffer.append(TEXT_186);
d902 1
a902 1
    stringBuffer.append(TEXT_187);
d906 1
a906 1
    stringBuffer.append(TEXT_188);
d911 1
a911 1
    stringBuffer.append(TEXT_189);
d915 1
a915 1
    stringBuffer.append(TEXT_190);
d919 2
a920 2
    stringBuffer.append(TEXT_191);
    stringBuffer.append(TEXT_192);
d928 1
a928 1
    stringBuffer.append(TEXT_193);
d932 1
a932 1
    stringBuffer.append(TEXT_194);
d934 1
a934 1
    stringBuffer.append(TEXT_195);
d936 1
a936 1
    stringBuffer.append(TEXT_196);
d938 1
a938 1
    stringBuffer.append(TEXT_197);
d940 1
a940 1
    stringBuffer.append(TEXT_198);
d942 1
a942 1
    stringBuffer.append(TEXT_199);
d944 1
a944 1
    stringBuffer.append(TEXT_200);
d946 1
a946 1
    stringBuffer.append(TEXT_201);
d948 1
a948 1
    stringBuffer.append(TEXT_202);
d950 1
a950 1
    stringBuffer.append(TEXT_203);
d952 1
a952 1
    stringBuffer.append(TEXT_204);
d954 1
a954 1
    stringBuffer.append(TEXT_205);
d958 1
a958 1
    stringBuffer.append(TEXT_206);
d962 1
a962 1
    stringBuffer.append(TEXT_207);
d964 1
a964 1
    stringBuffer.append(TEXT_208);
d968 3
a970 3
    stringBuffer.append(TEXT_209);
    stringBuffer.append(TEXT_210);
    stringBuffer.append(TEXT_211);
d972 1
a972 1
    stringBuffer.append(TEXT_212);
d974 1
a974 1
    stringBuffer.append(TEXT_213);
d976 1
a976 1
    stringBuffer.append(TEXT_214);
d978 1
a978 1
    stringBuffer.append(TEXT_215);
d980 1
a980 1
    stringBuffer.append(TEXT_216);
d982 1
a982 1
    stringBuffer.append(TEXT_217);
d984 1
a984 1
    stringBuffer.append(TEXT_218);
d986 1
a986 1
    stringBuffer.append(TEXT_219);
d988 1
a988 1
    stringBuffer.append(TEXT_220);
d992 1
a992 1
    stringBuffer.append(TEXT_221);
d994 1
a994 1
    stringBuffer.append(TEXT_222);
d996 1
a996 1
    stringBuffer.append(TEXT_223);
d1000 1
a1000 1
    stringBuffer.append(TEXT_224);
a1001 6
    stringBuffer.append(TEXT_225);
    stringBuffer.append(TEXT_226);
    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
a1002 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1005 1
d1007 1
a1007 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a1008 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a1009 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1011 1
d1013 1
d1015 1
a1015 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1016 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1019 1
d1023 4
d1031 1
a1031 1
    stringBuffer.append(TEXT_243);
d1033 1
a1033 1
    stringBuffer.append(TEXT_244);
d1035 1
a1035 1
    stringBuffer.append(TEXT_245);
d1042 1
a1042 1
    stringBuffer.append(TEXT_246);
d1044 1
a1044 1
    stringBuffer.append(TEXT_247);
d1046 1
a1046 1
    stringBuffer.append(TEXT_248);
a1050 5
    stringBuffer.append(TEXT_249);
    stringBuffer.append(TEXT_250);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_251);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1051 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1055 1
d1057 1
d1061 4
d1068 1
a1068 1
    stringBuffer.append(TEXT_258);
d1097 1
a1097 1
    stringBuffer.append(TEXT_259);
d1099 1
a1099 1
    stringBuffer.append(TEXT_260);
d1101 1
a1101 1
    stringBuffer.append(TEXT_261);
d1103 1
a1103 1
    stringBuffer.append(TEXT_262);
d1105 1
a1105 1
    stringBuffer.append(TEXT_263);
d1109 1
a1109 1
    stringBuffer.append(TEXT_264);
d1111 1
a1111 1
    stringBuffer.append(TEXT_265);
d1114 1
a1114 1
    stringBuffer.append(TEXT_266);
d1116 1
a1116 1
    stringBuffer.append(TEXT_267);
d1120 1
a1120 1
    stringBuffer.append(TEXT_268);
d1122 1
a1122 1
    stringBuffer.append(TEXT_269);
d1124 1
a1124 1
    stringBuffer.append(TEXT_270);
d1126 1
a1126 1
    stringBuffer.append(TEXT_271);
d1128 1
a1128 1
    stringBuffer.append(TEXT_272);
d1132 1
a1132 1
    stringBuffer.append(TEXT_273);
d1136 1
a1136 1
    stringBuffer.append(TEXT_274);
d1140 1
a1140 1
    stringBuffer.append(TEXT_275);
d1142 1
a1142 1
    stringBuffer.append(TEXT_276);
d1146 1
a1146 1
    stringBuffer.append(TEXT_277);
d1150 1
a1150 1
    stringBuffer.append(TEXT_278);
d1152 1
a1152 1
    stringBuffer.append(TEXT_279);
d1154 1
a1154 1
    stringBuffer.append(TEXT_280);
d1168 1
a1168 1
    stringBuffer.append(TEXT_281);
d1170 1
a1170 1
    stringBuffer.append(TEXT_282);
d1172 1
a1172 1
    stringBuffer.append(TEXT_283);
d1176 1
a1176 1
    stringBuffer.append(TEXT_284);
d1180 1
a1180 1
    stringBuffer.append(TEXT_285);
d1184 1
a1184 1
    stringBuffer.append(TEXT_286);
d1189 1
a1189 1
    stringBuffer.append(TEXT_287);
d1191 1
a1191 1
    stringBuffer.append(TEXT_288);
d1195 1
a1195 1
    stringBuffer.append(TEXT_289);
d1202 1
a1202 1
    stringBuffer.append(TEXT_290);
d1204 1
a1204 1
    stringBuffer.append(TEXT_291);
@


1.8
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d25 287
a311 267
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " implements IUpdatableEditPart {";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_10 = ";";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL;
  protected final String TEXT_13 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_14 = " manager;" + NL;
  protected final String TEXT_15 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_16 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_17 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_18 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_21 = " view = (";
  protected final String TEXT_22 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_23 = " view = (";
  protected final String TEXT_24 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = "\t\tinstallEditPolicy(";
  protected final String TEXT_27 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_28 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_29 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_30 = " getDirectEditCommand(";
  protected final String TEXT_31 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_32 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_33 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_34 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_35 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_36 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_37 = " editingDomain = ";
  protected final String TEXT_38 = ".getEditingDomain(";
  protected final String TEXT_39 = ".getDiagram().getElement());";
  protected final String TEXT_40 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_41 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_42 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_43 = " createDomainModelCommand(";
  protected final String TEXT_44 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_45 = " element = ";
  protected final String TEXT_46 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_47 = " feature = (";
  protected final String TEXT_48 = ") ";
  protected final String TEXT_49 = ".eINSTANCE.get";
  protected final String TEXT_50 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_51 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_52 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_54 = " result = new ";
  protected final String TEXT_55 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_56 = " values = new ";
  protected final String TEXT_57 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_58 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_59 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_60 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_61 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_62 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_63 = NL + "\t\t\t\t\t}";
  protected final String TEXT_64 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_65 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_66 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_67 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_68 = " createDomainModelCommand(";
  protected final String TEXT_69 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_70 = " element = ";
  protected final String TEXT_71 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_72 = " result = new ";
  protected final String TEXT_73 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_74 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_75 = " ";
  protected final String TEXT_76 = "feature = (";
  protected final String TEXT_77 = ") ";
  protected final String TEXT_78 = ".eINSTANCE.get";
  protected final String TEXT_79 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_80 = ".parseValue(feature, values[";
  protected final String TEXT_81 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_82 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_83 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_84 = " ";
  protected final String TEXT_85 = "values = new ";
  protected final String TEXT_86 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_87 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_88 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_89 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_90 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_91 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_92 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_93 = NL + "\t\t\t\t});";
  protected final String TEXT_94 = NL;
  protected final String TEXT_95 = "\t\tinstallEditPolicy(";
  protected final String TEXT_96 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_97 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_98 = " createDeleteCommand(";
  protected final String TEXT_99 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_100 = " editingDomain = ";
  protected final String TEXT_101 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_102 = " cc = new ";
  protected final String TEXT_103 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_104 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new WrappingCommand(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_105 = " editingDomain) {";
  protected final String TEXT_106 = NL + "\t\t\t\t";
  protected final String TEXT_107 = " result = new ";
  protected final String TEXT_108 = "();";
  protected final String TEXT_109 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_110 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_111 = ".eINSTANCE.get";
  protected final String TEXT_112 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_113 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_114 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_115 = ".eINSTANCE.get";
  protected final String TEXT_116 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_117 = ".UNSET_VALUE));";
  protected final String TEXT_118 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_119 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_120 = ".eINSTANCE.get";
  protected final String TEXT_121 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_122 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_123 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_124 = ".eINSTANCE.get";
  protected final String TEXT_125 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_126 = ".UNSET_VALUE));";
  protected final String TEXT_127 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_128 = NL + "\t\t\t\treturn ";
  protected final String TEXT_129 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_130 = ".eINSTANCE.get";
  protected final String TEXT_131 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_132 = NL + "\t\t\t\treturn ";
  protected final String TEXT_133 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_134 = ".eINSTANCE.get";
  protected final String TEXT_135 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_136 = ".UNSET_VALUE);";
  protected final String TEXT_137 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_138 = NL + "\t}" + NL;
  protected final String TEXT_139 = NL;
  protected final String TEXT_140 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_141 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_142 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_143 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_144 = "(this, ";
  protected final String TEXT_145 = ".class, new ";
  protected final String TEXT_146 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_147 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_148 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_149 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_152 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_153 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_154 = " element = ";
  protected final String TEXT_155 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_156 = " element = ";
  protected final String TEXT_157 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_158 = " element, String pattern) {";
  protected final String TEXT_159 = NL + "\t\tif (element.get";
  protected final String TEXT_160 = "() == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_161 = NL + "\t\treturn ";
  protected final String TEXT_162 = ".format(pattern, new Object[] {";
  protected final String TEXT_163 = NL + "\t\t\t";
  protected final String TEXT_164 = NL + "\t\t});";
  protected final String TEXT_165 = NL + "\t\treturn ";
  protected final String TEXT_166 = ".format(pattern, new Object[] {";
  protected final String TEXT_167 = NL + "\t\t";
  protected final String TEXT_168 = ",";
  protected final String TEXT_169 = NL + "\t\t});";
  protected final String TEXT_170 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_171 = NL + "\t}";
  protected final String TEXT_172 = NL;
  protected final String TEXT_173 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_174 = NL + "\t\t";
  protected final String TEXT_175 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_176 = ") ";
  protected final String TEXT_177 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_178 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_179 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_180 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_181 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_182 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_183 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_184 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_185 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_186 = "\t" + NL + "\t}";
  protected final String TEXT_187 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_188 = " createdFont;";
  protected final String TEXT_189 = "\t";
  protected final String TEXT_190 = NL;
  protected final String TEXT_191 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_192 = " style = (";
  protected final String TEXT_193 = ")  ";
  protected final String TEXT_194 = ".getStyle(";
  protected final String TEXT_195 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_196 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_197 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_198 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_199 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_200 = " getLabelIcon() {";
  protected final String TEXT_201 = NL + "\t\t";
  protected final String TEXT_202 = " imageDescriptor = ";
  protected final String TEXT_203 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_204 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_205 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_208 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_209 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_210 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_211 = NL;
  protected final String TEXT_212 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_213 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_214 = " feature, ";
  protected final String TEXT_215 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_216 = NL;
  protected final String TEXT_217 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_218 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_219 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_220 = NL;
  protected final String TEXT_221 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_222 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_223 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_224 = ".eINSTANCE.get";
  protected final String TEXT_225 = "(), labelRefresher);";
  protected final String TEXT_226 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_227 = ".eINSTANCE.get";
  protected final String TEXT_228 = "(), labelRefresher);";
  protected final String TEXT_229 = NL;
  protected final String TEXT_230 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_231 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_232 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_233 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_234 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_235 = NL;
  protected final String TEXT_236 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_237 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_238 = NL;
  protected final String TEXT_239 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_240 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_241 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_242 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_243 = " createLabel() {";
  protected final String TEXT_244 = NL + "\t\treturn new ";
  protected final String TEXT_245 = "();";
  protected final String TEXT_246 = NL + "\t\treturn ";
  protected final String TEXT_247 = ";";
  protected final String TEXT_248 = NL + "\t\treturn new ";
  protected final String TEXT_249 = "();";
  protected final String TEXT_250 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_251 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_252 = " label = createLabel();";
  protected final String TEXT_253 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_254 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_255 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_256 = NL + NL + "\t/**";
  protected final String TEXT_257 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_258 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_259 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_260 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_261 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_262 = "(";
  protected final String TEXT_263 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_264 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_265 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_266 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_267 = NL;
  protected final String TEXT_268 = NL;
  protected final String TEXT_269 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_270 = NL + "}";
  protected final String TEXT_271 = NL;
d337 74
d421 1
a421 1
    stringBuffer.append(TEXT_5);
d423 1
a423 1
    stringBuffer.append(TEXT_6);
d425 1
a425 1
    stringBuffer.append(TEXT_7);
d428 2
a429 2
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
d431 1
a431 1
    stringBuffer.append(TEXT_10);
d433 2
a434 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(TEXT_12);
d438 1
a438 1
    stringBuffer.append(TEXT_13);
d440 1
a440 1
    stringBuffer.append(TEXT_14);
d444 1
a444 1
    stringBuffer.append(TEXT_15);
d446 1
a446 1
    stringBuffer.append(TEXT_16);
d448 1
a448 1
    stringBuffer.append(TEXT_17);
d450 3
a452 3
    stringBuffer.append(TEXT_18);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(TEXT_20);
d454 1
a454 1
    stringBuffer.append(TEXT_21);
d456 1
a456 1
    stringBuffer.append(TEXT_22);
d458 1
a458 1
    stringBuffer.append(TEXT_23);
d460 1
a460 1
    stringBuffer.append(TEXT_24);
d468 2
a469 2
    stringBuffer.append(TEXT_25);
    stringBuffer.append(TEXT_26);
d471 1
a471 1
    stringBuffer.append(TEXT_27);
d473 1
a473 1
    stringBuffer.append(TEXT_28);
d475 1
a475 1
    stringBuffer.append(TEXT_29);
d477 1
a477 1
    stringBuffer.append(TEXT_30);
d479 1
a479 1
    stringBuffer.append(TEXT_31);
d481 1
a481 1
    stringBuffer.append(TEXT_32);
d483 1
a483 1
    stringBuffer.append(TEXT_33);
d485 1
a485 1
    stringBuffer.append(TEXT_34);
d487 1
a487 1
    stringBuffer.append(TEXT_35);
d489 1
a489 1
    stringBuffer.append(TEXT_36);
d491 1
a491 1
    stringBuffer.append(TEXT_37);
d493 1
a493 1
    stringBuffer.append(TEXT_38);
d495 1
a495 1
    stringBuffer.append(TEXT_39);
d501 1
a501 1
    stringBuffer.append(TEXT_40);
d503 1
a503 1
    stringBuffer.append(TEXT_41);
d505 1
a505 1
    stringBuffer.append(TEXT_42);
d507 1
a507 1
    stringBuffer.append(TEXT_43);
d509 1
a509 1
    stringBuffer.append(TEXT_44);
d511 1
a511 1
    stringBuffer.append(TEXT_45);
d513 1
a513 1
    stringBuffer.append(TEXT_46);
d515 1
a515 1
    stringBuffer.append(TEXT_47);
d517 1
a517 1
    stringBuffer.append(TEXT_48);
d519 1
a519 1
    stringBuffer.append(TEXT_49);
d521 1
a521 1
    stringBuffer.append(TEXT_50);
d523 1
a523 1
    stringBuffer.append(TEXT_51);
d525 1
a525 1
    stringBuffer.append(TEXT_52);
d529 1
a529 1
    stringBuffer.append(TEXT_53);
d531 1
a531 1
    stringBuffer.append(TEXT_54);
d533 1
a533 1
    stringBuffer.append(TEXT_55);
d535 1
a535 1
    stringBuffer.append(TEXT_56);
d537 1
a537 1
    stringBuffer.append(TEXT_57);
d539 1
a539 1
    stringBuffer.append(TEXT_58);
d541 1
a541 1
    stringBuffer.append(TEXT_59);
d543 1
a543 1
    stringBuffer.append(TEXT_60);
d547 1
a547 1
    stringBuffer.append(TEXT_61);
d549 1
a549 1
    stringBuffer.append(TEXT_62);
d553 1
a553 1
    stringBuffer.append(TEXT_63);
d559 1
a559 1
    stringBuffer.append(TEXT_64);
d561 1
a561 1
    stringBuffer.append(TEXT_65);
d563 1
a563 1
    stringBuffer.append(TEXT_66);
d565 1
a565 1
    stringBuffer.append(TEXT_67);
d567 1
a567 1
    stringBuffer.append(TEXT_68);
d569 1
a569 1
    stringBuffer.append(TEXT_69);
d571 1
a571 1
    stringBuffer.append(TEXT_70);
d573 1
a573 1
    stringBuffer.append(TEXT_71);
d575 1
a575 1
    stringBuffer.append(TEXT_72);
d577 1
a577 1
    stringBuffer.append(TEXT_73);
d584 1
a584 1
    stringBuffer.append(TEXT_74);
d587 1
a587 1
    stringBuffer.append(TEXT_75);
d589 1
a589 1
    stringBuffer.append(TEXT_76);
d591 1
a591 1
    stringBuffer.append(TEXT_77);
d593 1
a593 1
    stringBuffer.append(TEXT_78);
d595 1
a595 1
    stringBuffer.append(TEXT_79);
d597 1
a597 1
    stringBuffer.append(TEXT_80);
d599 1
a599 1
    stringBuffer.append(TEXT_81);
d601 1
a601 1
    stringBuffer.append(TEXT_82);
d605 1
a605 1
    stringBuffer.append(TEXT_83);
d608 1
a608 1
    stringBuffer.append(TEXT_84);
d610 1
a610 1
    stringBuffer.append(TEXT_85);
d612 1
a612 1
    stringBuffer.append(TEXT_86);
d614 1
a614 1
    stringBuffer.append(TEXT_87);
d616 1
a616 1
    stringBuffer.append(TEXT_88);
d618 1
a618 1
    stringBuffer.append(TEXT_89);
d622 1
a622 1
    stringBuffer.append(TEXT_90);
d624 1
a624 1
    stringBuffer.append(TEXT_91);
d631 1
a631 1
    stringBuffer.append(TEXT_92);
d635 1
a635 1
    stringBuffer.append(TEXT_93);
d639 2
a640 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(TEXT_95);
d642 1
a642 1
    stringBuffer.append(TEXT_96);
d644 1
a644 1
    stringBuffer.append(TEXT_97);
d646 1
a646 1
    stringBuffer.append(TEXT_98);
d648 1
a648 1
    stringBuffer.append(TEXT_99);
d650 1
a650 1
    stringBuffer.append(TEXT_100);
d652 1
a652 1
    stringBuffer.append(TEXT_101);
d654 1
a654 1
    stringBuffer.append(TEXT_102);
d656 1
a656 1
    stringBuffer.append(TEXT_103);
d658 1
a658 1
    stringBuffer.append(TEXT_104);
d660 1
a660 1
    stringBuffer.append(TEXT_105);
d668 1
a668 1
    stringBuffer.append(TEXT_106);
d670 1
a670 1
    stringBuffer.append(TEXT_107);
d672 1
a672 1
    stringBuffer.append(TEXT_108);
d676 1
a676 1
    stringBuffer.append(TEXT_109);
d678 1
a678 1
    stringBuffer.append(TEXT_110);
d680 1
a680 1
    stringBuffer.append(TEXT_111);
d682 1
a682 1
    stringBuffer.append(TEXT_112);
d686 1
a686 1
    stringBuffer.append(TEXT_113);
d688 1
a688 1
    stringBuffer.append(TEXT_114);
d690 1
a690 1
    stringBuffer.append(TEXT_115);
d692 1
a692 1
    stringBuffer.append(TEXT_116);
d694 1
a694 1
    stringBuffer.append(TEXT_117);
d701 1
a701 1
    stringBuffer.append(TEXT_118);
d703 1
a703 1
    stringBuffer.append(TEXT_119);
d705 1
a705 1
    stringBuffer.append(TEXT_120);
d707 1
a707 1
    stringBuffer.append(TEXT_121);
d711 1
a711 1
    stringBuffer.append(TEXT_122);
d713 1
a713 1
    stringBuffer.append(TEXT_123);
d715 1
a715 1
    stringBuffer.append(TEXT_124);
d717 1
a717 1
    stringBuffer.append(TEXT_125);
d719 1
a719 1
    stringBuffer.append(TEXT_126);
d723 1
a723 1
    stringBuffer.append(TEXT_127);
d728 1
a728 1
    stringBuffer.append(TEXT_128);
d730 1
a730 1
    stringBuffer.append(TEXT_129);
d732 1
a732 1
    stringBuffer.append(TEXT_130);
d734 1
a734 1
    stringBuffer.append(TEXT_131);
d738 1
a738 1
    stringBuffer.append(TEXT_132);
d740 1
a740 1
    stringBuffer.append(TEXT_133);
d742 1
a742 1
    stringBuffer.append(TEXT_134);
d744 1
a744 1
    stringBuffer.append(TEXT_135);
d746 1
a746 1
    stringBuffer.append(TEXT_136);
d751 1
a751 1
    stringBuffer.append(TEXT_137);
d755 1
a755 1
    stringBuffer.append(TEXT_138);
d759 2
a760 2
    stringBuffer.append(TEXT_139);
    stringBuffer.append(TEXT_140);
d762 1
a762 1
    stringBuffer.append(TEXT_141);
d764 1
a764 1
    stringBuffer.append(TEXT_142);
d766 1
a766 1
    stringBuffer.append(TEXT_143);
d768 1
a768 1
    stringBuffer.append(TEXT_144);
d770 1
a770 1
    stringBuffer.append(TEXT_145);
d772 1
a772 1
    stringBuffer.append(TEXT_146);
d774 1
a774 1
    stringBuffer.append(TEXT_147);
d776 1
a776 1
    stringBuffer.append(TEXT_148);
d780 2
a781 2
    stringBuffer.append(TEXT_149);
    stringBuffer.append(TEXT_150);
d825 1
a825 1
    stringBuffer.append(TEXT_151);
d827 1
a827 1
    stringBuffer.append(TEXT_152);
d829 1
a829 1
    stringBuffer.append(TEXT_153);
d831 1
a831 1
    stringBuffer.append(TEXT_154);
d833 1
a833 1
    stringBuffer.append(TEXT_155);
d835 1
a835 1
    stringBuffer.append(TEXT_156);
d837 1
a837 1
    stringBuffer.append(TEXT_157);
d839 1
a839 1
    stringBuffer.append(TEXT_158);
d846 3
a848 3
    stringBuffer.append(TEXT_159);
    stringBuffer.append(feature.getCapName());
    stringBuffer.append(TEXT_160);
d852 1
a852 1
    stringBuffer.append(TEXT_161);
d854 7
a860 1
    stringBuffer.append(TEXT_162);
d862 2
a863 1
		String value = "element.get" + feature.getCapName() + "()";	/*XXX: getTypedKey is not a part of public API!*/
d865 3
a867 1
			value = "new " + primitiveTypeToWrapperClassName.get(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClass()) + "(" + value + ")";
d870 1
a870 3
    stringBuffer.append(TEXT_163);
    stringBuffer.append(value);
    stringBuffer.append(TEXT_164);
d875 1
a875 1
    stringBuffer.append(TEXT_165);
d877 1
a877 1
    stringBuffer.append(TEXT_166);
a880 1
		String value = "element.get" + next.getCapName() + "()";	/*XXX: getTypedKey is not a part of public API!*/
d882 5
a886 1
			value = "new " + primitiveTypeToWrapperClassName.get(next.getTypeGenClassifier().getEcoreClassifier().getInstanceClass()) + "(" + value + ")";
d888 2
d891 5
a895 4
    stringBuffer.append(TEXT_167);
    stringBuffer.append(value);
    if (it.hasNext()) {
    stringBuffer.append(TEXT_168);
d900 1
a900 1
    stringBuffer.append(TEXT_169);
d904 1
a904 1
    stringBuffer.append(TEXT_170);
d908 2
a909 2
    stringBuffer.append(TEXT_171);
    stringBuffer.append(TEXT_172);
d917 1
a917 1
    stringBuffer.append(TEXT_173);
d921 1
a921 1
    stringBuffer.append(TEXT_174);
d923 1
a923 1
    stringBuffer.append(TEXT_175);
d925 1
a925 1
    stringBuffer.append(TEXT_176);
d927 1
a927 1
    stringBuffer.append(TEXT_177);
d929 1
a929 1
    stringBuffer.append(TEXT_178);
d931 1
a931 1
    stringBuffer.append(TEXT_179);
d933 1
a933 1
    stringBuffer.append(TEXT_180);
d935 1
a935 1
    stringBuffer.append(TEXT_181);
d937 1
a937 1
    stringBuffer.append(TEXT_182);
d939 1
a939 1
    stringBuffer.append(TEXT_183);
d941 1
a941 1
    stringBuffer.append(TEXT_184);
d943 1
a943 1
    stringBuffer.append(TEXT_185);
d947 1
a947 1
    stringBuffer.append(TEXT_186);
d951 1
a951 1
    stringBuffer.append(TEXT_187);
d953 1
a953 1
    stringBuffer.append(TEXT_188);
d957 3
a959 3
    stringBuffer.append(TEXT_189);
    stringBuffer.append(TEXT_190);
    stringBuffer.append(TEXT_191);
d961 1
a961 1
    stringBuffer.append(TEXT_192);
d963 1
a963 1
    stringBuffer.append(TEXT_193);
d965 1
a965 1
    stringBuffer.append(TEXT_194);
d967 1
a967 1
    stringBuffer.append(TEXT_195);
d969 1
a969 1
    stringBuffer.append(TEXT_196);
d971 1
a971 1
    stringBuffer.append(TEXT_197);
d973 1
a973 1
    stringBuffer.append(TEXT_198);
d975 1
a975 1
    stringBuffer.append(TEXT_199);
d977 1
a977 1
    stringBuffer.append(TEXT_200);
d981 1
a981 1
    stringBuffer.append(TEXT_201);
d983 1
a983 1
    stringBuffer.append(TEXT_202);
d985 1
a985 1
    stringBuffer.append(TEXT_203);
d989 1
a989 1
    stringBuffer.append(TEXT_204);
d991 3
a993 3
    stringBuffer.append(TEXT_205);
    stringBuffer.append(TEXT_206);
    stringBuffer.append(TEXT_207);
d995 1
a995 1
    stringBuffer.append(TEXT_208);
d997 1
a997 1
    stringBuffer.append(TEXT_209);
d999 3
a1001 3
    stringBuffer.append(TEXT_210);
    stringBuffer.append(TEXT_211);
    stringBuffer.append(TEXT_212);
d1003 1
a1003 1
    stringBuffer.append(TEXT_213);
d1005 1
a1005 1
    stringBuffer.append(TEXT_214);
d1007 3
a1009 3
    stringBuffer.append(TEXT_215);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(TEXT_217);
d1011 1
a1011 1
    stringBuffer.append(TEXT_218);
d1013 3
a1015 3
    stringBuffer.append(TEXT_219);
    stringBuffer.append(TEXT_220);
    stringBuffer.append(TEXT_221);
d1017 1
a1017 1
    stringBuffer.append(TEXT_222);
d1022 1
a1022 1
    stringBuffer.append(TEXT_223);
d1024 1
a1024 1
    stringBuffer.append(TEXT_224);
d1026 1
a1026 1
    stringBuffer.append(TEXT_225);
d1033 1
a1033 1
    stringBuffer.append(TEXT_226);
d1035 1
a1035 1
    stringBuffer.append(TEXT_227);
d1037 1
a1037 1
    stringBuffer.append(TEXT_228);
d1042 2
a1043 2
    stringBuffer.append(TEXT_229);
    stringBuffer.append(TEXT_230);
d1045 1
a1045 1
    stringBuffer.append(TEXT_231);
d1047 1
a1047 1
    stringBuffer.append(TEXT_232);
d1049 1
a1049 1
    stringBuffer.append(TEXT_233);
d1051 3
a1053 3
    stringBuffer.append(TEXT_234);
    stringBuffer.append(TEXT_235);
    stringBuffer.append(TEXT_236);
d1055 1
a1055 1
    stringBuffer.append(TEXT_237);
d1059 1
a1059 1
    stringBuffer.append(TEXT_238);
d1088 1
a1088 1
    stringBuffer.append(TEXT_239);
d1090 1
a1090 1
    stringBuffer.append(TEXT_240);
d1092 1
a1092 1
    stringBuffer.append(TEXT_241);
d1094 1
a1094 1
    stringBuffer.append(TEXT_242);
d1096 1
a1096 1
    stringBuffer.append(TEXT_243);
d1100 1
a1100 1
    stringBuffer.append(TEXT_244);
d1102 1
a1102 1
    stringBuffer.append(TEXT_245);
d1105 1
a1105 1
    stringBuffer.append(TEXT_246);
d1107 1
a1107 1
    stringBuffer.append(TEXT_247);
d1111 1
a1111 1
    stringBuffer.append(TEXT_248);
d1113 1
a1113 1
    stringBuffer.append(TEXT_249);
d1115 1
a1115 1
    stringBuffer.append(TEXT_250);
d1117 1
a1117 1
    stringBuffer.append(TEXT_251);
d1119 1
a1119 1
    stringBuffer.append(TEXT_252);
d1123 1
a1123 1
    stringBuffer.append(TEXT_253);
d1127 1
a1127 1
    stringBuffer.append(TEXT_254);
d1131 1
a1131 1
    stringBuffer.append(TEXT_255);
d1133 1
a1133 1
    stringBuffer.append(TEXT_256);
d1137 1
a1137 1
    stringBuffer.append(TEXT_257);
d1141 1
a1141 1
    stringBuffer.append(TEXT_258);
d1143 1
a1143 1
    stringBuffer.append(TEXT_259);
d1145 1
a1145 1
    stringBuffer.append(TEXT_260);
d1159 1
a1159 1
    stringBuffer.append(TEXT_261);
d1161 1
a1161 1
    stringBuffer.append(TEXT_262);
d1163 1
a1163 1
    stringBuffer.append(TEXT_263);
d1167 1
a1167 1
    stringBuffer.append(TEXT_264);
d1171 1
a1171 1
    stringBuffer.append(TEXT_265);
d1175 1
a1175 1
    stringBuffer.append(TEXT_266);
d1180 1
a1180 1
    stringBuffer.append(TEXT_267);
d1182 1
a1182 1
    stringBuffer.append(TEXT_268);
d1186 1
a1186 1
    stringBuffer.append(TEXT_269);
d1193 1
a1193 1
    stringBuffer.append(TEXT_270);
d1195 1
a1195 1
    stringBuffer.append(TEXT_271);
@


1.7
log
@#149455 Lite Generation: Respect option for labels to display node icon
@
text
@d38 1
a38 1
  protected final String TEXT_18 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
d40 103
a142 103
  protected final String TEXT_20 = "\t\tinstallEditPolicy(";
  protected final String TEXT_21 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_22 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_23 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_24 = " getDirectEditCommand(";
  protected final String TEXT_25 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_26 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_27 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_28 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_29 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_30 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_31 = " editingDomain = ";
  protected final String TEXT_32 = ".getEditingDomain(";
  protected final String TEXT_33 = ".getDiagram().getElement());";
  protected final String TEXT_34 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_35 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_36 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_37 = " createDomainModelCommand(";
  protected final String TEXT_38 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_39 = " element = ";
  protected final String TEXT_40 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_41 = " feature = (";
  protected final String TEXT_42 = ") ";
  protected final String TEXT_43 = ".eINSTANCE.get";
  protected final String TEXT_44 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_45 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_46 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_47 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_48 = " result = new ";
  protected final String TEXT_49 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_50 = " values = new ";
  protected final String TEXT_51 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_52 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_53 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_54 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_55 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_56 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_57 = NL + "\t\t\t\t\t}";
  protected final String TEXT_58 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_59 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_60 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_61 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_62 = " createDomainModelCommand(";
  protected final String TEXT_63 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_64 = " element = ";
  protected final String TEXT_65 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_66 = " result = new ";
  protected final String TEXT_67 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_68 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_69 = " ";
  protected final String TEXT_70 = "feature = (";
  protected final String TEXT_71 = ") ";
  protected final String TEXT_72 = ".eINSTANCE.get";
  protected final String TEXT_73 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_74 = ".parseValue(feature, values[";
  protected final String TEXT_75 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_76 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_77 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_78 = " ";
  protected final String TEXT_79 = "values = new ";
  protected final String TEXT_80 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_81 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_82 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_83 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_84 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_85 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_86 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_87 = NL + "\t\t\t\t});";
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = "\t\tinstallEditPolicy(";
  protected final String TEXT_90 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_91 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_92 = " createDeleteCommand(";
  protected final String TEXT_93 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_94 = " editingDomain = ";
  protected final String TEXT_95 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_96 = " cc = new ";
  protected final String TEXT_97 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_98 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new WrappingCommand(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_99 = " editingDomain) {";
  protected final String TEXT_100 = NL + "\t\t\t\t";
  protected final String TEXT_101 = " result = new ";
  protected final String TEXT_102 = "();";
  protected final String TEXT_103 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_104 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_105 = ".eINSTANCE.get";
  protected final String TEXT_106 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_107 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_108 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_109 = ".eINSTANCE.get";
  protected final String TEXT_110 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_111 = ".UNSET_VALUE));";
  protected final String TEXT_112 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_113 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_114 = ".eINSTANCE.get";
  protected final String TEXT_115 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_116 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_117 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_118 = ".eINSTANCE.get";
  protected final String TEXT_119 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_120 = ".UNSET_VALUE));";
  protected final String TEXT_121 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_122 = NL + "\t\t\t\treturn ";
d145 104
a248 104
  protected final String TEXT_125 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_126 = NL + "\t\t\t\treturn ";
  protected final String TEXT_127 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_128 = ".eINSTANCE.get";
  protected final String TEXT_129 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_130 = ".UNSET_VALUE);";
  protected final String TEXT_131 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_132 = NL + "\t}" + NL;
  protected final String TEXT_133 = NL;
  protected final String TEXT_134 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_135 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_136 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_137 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_138 = "(this, ";
  protected final String TEXT_139 = ".class, new ";
  protected final String TEXT_140 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_141 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_142 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_143 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_144 = NL;
  protected final String TEXT_145 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_146 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_147 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_148 = " element = ";
  protected final String TEXT_149 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_150 = " element = ";
  protected final String TEXT_151 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_152 = " element, String pattern) {";
  protected final String TEXT_153 = NL + "\t\tif (element.get";
  protected final String TEXT_154 = "() == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_155 = NL + "\t\treturn ";
  protected final String TEXT_156 = ".format(pattern, new Object[] {";
  protected final String TEXT_157 = NL + "\t\t\t";
  protected final String TEXT_158 = NL + "\t\t});";
  protected final String TEXT_159 = NL + "\t\treturn ";
  protected final String TEXT_160 = ".format(pattern, new Object[] {";
  protected final String TEXT_161 = NL + "\t\t";
  protected final String TEXT_162 = ",";
  protected final String TEXT_163 = NL + "\t\t});";
  protected final String TEXT_164 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_165 = NL + "\t}";
  protected final String TEXT_166 = NL;
  protected final String TEXT_167 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_168 = NL + "\t\t";
  protected final String TEXT_169 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_170 = ") ";
  protected final String TEXT_171 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_173 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_174 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_175 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_176 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_177 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_178 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_179 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_180 = "\t" + NL + "\t}";
  protected final String TEXT_181 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_182 = " createdFont;";
  protected final String TEXT_183 = "\t";
  protected final String TEXT_184 = NL;
  protected final String TEXT_185 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_186 = " style = (";
  protected final String TEXT_187 = ")  ";
  protected final String TEXT_188 = ".getStyle(";
  protected final String TEXT_189 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_190 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_191 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_192 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_193 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_194 = " getLabelIcon() {";
  protected final String TEXT_195 = NL + "\t\t";
  protected final String TEXT_196 = " imageDescriptor = ";
  protected final String TEXT_197 = ".getInstance().getItemImageDescriptor(getDiagramNode().getElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_198 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_199 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_200 = NL;
  protected final String TEXT_201 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_202 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_203 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_204 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_205 = NL;
  protected final String TEXT_206 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_207 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_208 = " feature, ";
  protected final String TEXT_209 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_210 = NL;
  protected final String TEXT_211 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_212 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_213 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_216 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_217 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_218 = ".eINSTANCE.get";
  protected final String TEXT_219 = "(), labelRefresher);";
  protected final String TEXT_220 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_221 = ".eINSTANCE.get";
  protected final String TEXT_222 = "(), labelRefresher);";
  protected final String TEXT_223 = NL;
  protected final String TEXT_224 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_225 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_226 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_227 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_228 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d250 42
a291 36
  protected final String TEXT_230 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_231 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_232 = NL;
  protected final String TEXT_233 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_234 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_235 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_236 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_237 = " createLabel() {";
  protected final String TEXT_238 = NL + "\t\treturn new ";
  protected final String TEXT_239 = "();";
  protected final String TEXT_240 = NL + "\t\treturn ";
  protected final String TEXT_241 = ";";
  protected final String TEXT_242 = NL + "\t\treturn new ";
  protected final String TEXT_243 = "();";
  protected final String TEXT_244 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_245 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_246 = " label = createLabel();";
  protected final String TEXT_247 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_248 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_249 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_250 = NL + NL + "\t/**";
  protected final String TEXT_251 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_252 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_253 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_254 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_255 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_256 = "(";
  protected final String TEXT_257 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_258 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_259 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_260 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_261 = NL;
  protected final String TEXT_262 = NL;
  protected final String TEXT_263 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_264 = NL + "}";
  protected final String TEXT_265 = NL;
d357 10
d374 2
a375 2
    stringBuffer.append(TEXT_19);
    stringBuffer.append(TEXT_20);
d377 1
a377 1
    stringBuffer.append(TEXT_21);
d379 1
a379 1
    stringBuffer.append(TEXT_22);
d381 1
a381 1
    stringBuffer.append(TEXT_23);
d383 1
a383 1
    stringBuffer.append(TEXT_24);
d385 1
a385 1
    stringBuffer.append(TEXT_25);
d387 1
a387 1
    stringBuffer.append(TEXT_26);
d389 1
a389 1
    stringBuffer.append(TEXT_27);
d391 1
a391 1
    stringBuffer.append(TEXT_28);
d393 1
a393 1
    stringBuffer.append(TEXT_29);
d395 1
a395 1
    stringBuffer.append(TEXT_30);
d397 1
a397 1
    stringBuffer.append(TEXT_31);
d399 1
a399 1
    stringBuffer.append(TEXT_32);
d401 1
a401 1
    stringBuffer.append(TEXT_33);
d407 1
a407 1
    stringBuffer.append(TEXT_34);
d409 1
a409 1
    stringBuffer.append(TEXT_35);
d411 1
a411 1
    stringBuffer.append(TEXT_36);
d413 1
a413 1
    stringBuffer.append(TEXT_37);
d415 1
a415 1
    stringBuffer.append(TEXT_38);
d417 1
a417 1
    stringBuffer.append(TEXT_39);
d419 1
a419 1
    stringBuffer.append(TEXT_40);
d421 1
a421 1
    stringBuffer.append(TEXT_41);
d423 1
a423 1
    stringBuffer.append(TEXT_42);
d425 1
a425 1
    stringBuffer.append(TEXT_43);
d427 1
a427 1
    stringBuffer.append(TEXT_44);
d429 1
a429 1
    stringBuffer.append(TEXT_45);
d431 1
a431 1
    stringBuffer.append(TEXT_46);
d435 1
a435 1
    stringBuffer.append(TEXT_47);
d437 1
a437 1
    stringBuffer.append(TEXT_48);
d439 1
a439 1
    stringBuffer.append(TEXT_49);
d441 1
a441 1
    stringBuffer.append(TEXT_50);
d443 1
a443 1
    stringBuffer.append(TEXT_51);
d445 1
a445 1
    stringBuffer.append(TEXT_52);
d447 1
a447 1
    stringBuffer.append(TEXT_53);
d449 1
a449 1
    stringBuffer.append(TEXT_54);
d453 1
a453 1
    stringBuffer.append(TEXT_55);
d455 1
a455 1
    stringBuffer.append(TEXT_56);
d459 1
a459 1
    stringBuffer.append(TEXT_57);
d465 1
a465 1
    stringBuffer.append(TEXT_58);
d467 1
a467 1
    stringBuffer.append(TEXT_59);
d469 1
a469 1
    stringBuffer.append(TEXT_60);
d471 1
a471 1
    stringBuffer.append(TEXT_61);
d473 1
a473 1
    stringBuffer.append(TEXT_62);
d475 1
a475 1
    stringBuffer.append(TEXT_63);
d477 1
a477 1
    stringBuffer.append(TEXT_64);
d479 1
a479 1
    stringBuffer.append(TEXT_65);
d481 1
a481 1
    stringBuffer.append(TEXT_66);
d483 1
a483 1
    stringBuffer.append(TEXT_67);
d490 1
a490 1
    stringBuffer.append(TEXT_68);
d493 1
a493 1
    stringBuffer.append(TEXT_69);
d495 1
a495 1
    stringBuffer.append(TEXT_70);
d497 1
a497 1
    stringBuffer.append(TEXT_71);
d499 1
a499 1
    stringBuffer.append(TEXT_72);
d501 1
a501 1
    stringBuffer.append(TEXT_73);
d503 1
a503 1
    stringBuffer.append(TEXT_74);
d505 1
a505 1
    stringBuffer.append(TEXT_75);
d507 1
a507 1
    stringBuffer.append(TEXT_76);
d511 1
a511 1
    stringBuffer.append(TEXT_77);
d514 1
a514 1
    stringBuffer.append(TEXT_78);
d516 1
a516 1
    stringBuffer.append(TEXT_79);
d518 1
a518 1
    stringBuffer.append(TEXT_80);
d520 1
a520 1
    stringBuffer.append(TEXT_81);
d522 1
a522 1
    stringBuffer.append(TEXT_82);
d524 1
a524 1
    stringBuffer.append(TEXT_83);
d528 1
a528 1
    stringBuffer.append(TEXT_84);
d530 1
a530 1
    stringBuffer.append(TEXT_85);
d537 1
a537 1
    stringBuffer.append(TEXT_86);
d541 1
a541 1
    stringBuffer.append(TEXT_87);
d545 2
a546 2
    stringBuffer.append(TEXT_88);
    stringBuffer.append(TEXT_89);
d548 1
a548 1
    stringBuffer.append(TEXT_90);
d550 1
a550 1
    stringBuffer.append(TEXT_91);
d552 1
a552 1
    stringBuffer.append(TEXT_92);
d554 1
a554 1
    stringBuffer.append(TEXT_93);
d556 1
a556 1
    stringBuffer.append(TEXT_94);
d558 1
a558 1
    stringBuffer.append(TEXT_95);
d560 1
a560 1
    stringBuffer.append(TEXT_96);
d562 1
a562 1
    stringBuffer.append(TEXT_97);
d564 1
a564 1
    stringBuffer.append(TEXT_98);
d566 1
a566 1
    stringBuffer.append(TEXT_99);
d574 1
a574 1
    stringBuffer.append(TEXT_100);
d576 1
a576 1
    stringBuffer.append(TEXT_101);
d578 1
a578 1
    stringBuffer.append(TEXT_102);
d582 1
a582 1
    stringBuffer.append(TEXT_103);
d584 1
a584 1
    stringBuffer.append(TEXT_104);
d586 1
a586 1
    stringBuffer.append(TEXT_105);
d588 1
a588 1
    stringBuffer.append(TEXT_106);
d592 1
a592 1
    stringBuffer.append(TEXT_107);
d594 1
a594 1
    stringBuffer.append(TEXT_108);
d596 1
a596 1
    stringBuffer.append(TEXT_109);
d598 1
a598 1
    stringBuffer.append(TEXT_110);
d600 1
a600 1
    stringBuffer.append(TEXT_111);
d607 1
a607 1
    stringBuffer.append(TEXT_112);
d609 1
a609 1
    stringBuffer.append(TEXT_113);
d611 1
a611 1
    stringBuffer.append(TEXT_114);
d613 1
a613 1
    stringBuffer.append(TEXT_115);
d617 1
a617 1
    stringBuffer.append(TEXT_116);
d619 1
a619 1
    stringBuffer.append(TEXT_117);
d621 1
a621 1
    stringBuffer.append(TEXT_118);
d623 1
a623 1
    stringBuffer.append(TEXT_119);
d625 1
a625 1
    stringBuffer.append(TEXT_120);
d629 1
a629 1
    stringBuffer.append(TEXT_121);
d634 1
a634 1
    stringBuffer.append(TEXT_122);
d636 1
a636 1
    stringBuffer.append(TEXT_123);
d638 1
a638 1
    stringBuffer.append(TEXT_124);
d640 1
a640 1
    stringBuffer.append(TEXT_125);
d644 1
a644 1
    stringBuffer.append(TEXT_126);
d646 1
a646 1
    stringBuffer.append(TEXT_127);
d648 1
a648 1
    stringBuffer.append(TEXT_128);
d650 1
a650 1
    stringBuffer.append(TEXT_129);
d652 1
a652 1
    stringBuffer.append(TEXT_130);
d657 1
a657 1
    stringBuffer.append(TEXT_131);
d661 1
a661 1
    stringBuffer.append(TEXT_132);
d665 2
a666 2
    stringBuffer.append(TEXT_133);
    stringBuffer.append(TEXT_134);
d668 1
a668 1
    stringBuffer.append(TEXT_135);
d670 1
a670 1
    stringBuffer.append(TEXT_136);
d672 1
a672 1
    stringBuffer.append(TEXT_137);
d674 1
a674 1
    stringBuffer.append(TEXT_138);
d676 1
a676 1
    stringBuffer.append(TEXT_139);
d678 1
a678 1
    stringBuffer.append(TEXT_140);
d680 1
a680 1
    stringBuffer.append(TEXT_141);
d682 1
a682 1
    stringBuffer.append(TEXT_142);
d686 2
a687 2
    stringBuffer.append(TEXT_143);
    stringBuffer.append(TEXT_144);
d731 1
a731 1
    stringBuffer.append(TEXT_145);
d733 1
a733 1
    stringBuffer.append(TEXT_146);
d735 1
a735 1
    stringBuffer.append(TEXT_147);
d737 1
a737 1
    stringBuffer.append(TEXT_148);
d739 1
a739 1
    stringBuffer.append(TEXT_149);
d741 1
a741 1
    stringBuffer.append(TEXT_150);
d743 1
a743 1
    stringBuffer.append(TEXT_151);
d745 1
a745 1
    stringBuffer.append(TEXT_152);
d752 1
a752 1
    stringBuffer.append(TEXT_153);
d754 1
a754 1
    stringBuffer.append(TEXT_154);
d758 1
a758 1
    stringBuffer.append(TEXT_155);
d760 1
a760 1
    stringBuffer.append(TEXT_156);
d767 1
a767 1
    stringBuffer.append(TEXT_157);
d769 1
a769 1
    stringBuffer.append(TEXT_158);
d774 1
a774 1
    stringBuffer.append(TEXT_159);
d776 1
a776 1
    stringBuffer.append(TEXT_160);
d785 1
a785 1
    stringBuffer.append(TEXT_161);
d788 1
a788 1
    stringBuffer.append(TEXT_162);
d793 1
a793 1
    stringBuffer.append(TEXT_163);
d797 1
a797 1
    stringBuffer.append(TEXT_164);
d801 2
a802 2
    stringBuffer.append(TEXT_165);
    stringBuffer.append(TEXT_166);
d810 1
a810 1
    stringBuffer.append(TEXT_167);
d814 1
a814 1
    stringBuffer.append(TEXT_168);
d816 1
a816 1
    stringBuffer.append(TEXT_169);
d818 1
a818 1
    stringBuffer.append(TEXT_170);
d820 1
a820 1
    stringBuffer.append(TEXT_171);
d822 1
a822 1
    stringBuffer.append(TEXT_172);
d824 1
a824 1
    stringBuffer.append(TEXT_173);
d826 1
a826 1
    stringBuffer.append(TEXT_174);
d828 1
a828 1
    stringBuffer.append(TEXT_175);
d830 1
a830 1
    stringBuffer.append(TEXT_176);
d832 1
a832 1
    stringBuffer.append(TEXT_177);
d834 1
a834 1
    stringBuffer.append(TEXT_178);
d836 1
a836 1
    stringBuffer.append(TEXT_179);
d840 1
a840 1
    stringBuffer.append(TEXT_180);
d844 1
a844 1
    stringBuffer.append(TEXT_181);
d846 1
a846 1
    stringBuffer.append(TEXT_182);
d850 3
a852 3
    stringBuffer.append(TEXT_183);
    stringBuffer.append(TEXT_184);
    stringBuffer.append(TEXT_185);
d854 1
a854 1
    stringBuffer.append(TEXT_186);
d856 1
a856 1
    stringBuffer.append(TEXT_187);
d858 1
a858 1
    stringBuffer.append(TEXT_188);
d860 1
a860 1
    stringBuffer.append(TEXT_189);
d862 1
a862 1
    stringBuffer.append(TEXT_190);
d864 1
a864 1
    stringBuffer.append(TEXT_191);
d866 1
a866 1
    stringBuffer.append(TEXT_192);
d868 1
a868 1
    stringBuffer.append(TEXT_193);
d870 1
a870 1
    stringBuffer.append(TEXT_194);
d874 1
a874 1
    stringBuffer.append(TEXT_195);
d876 1
a876 1
    stringBuffer.append(TEXT_196);
d878 1
a878 1
    stringBuffer.append(TEXT_197);
d882 1
a882 1
    stringBuffer.append(TEXT_198);
a883 9
    stringBuffer.append(TEXT_199);
    stringBuffer.append(TEXT_200);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_204);
a885 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d887 1
a887 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d891 1
a893 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d895 1
a895 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d897 1
d899 1
d901 4
d906 5
a910 1
    stringBuffer.append(TEXT_216);
d915 1
a915 1
    stringBuffer.append(TEXT_217);
d917 1
a917 1
    stringBuffer.append(TEXT_218);
d919 1
a919 1
    stringBuffer.append(TEXT_219);
d926 1
a926 1
    stringBuffer.append(TEXT_220);
d928 1
a928 1
    stringBuffer.append(TEXT_221);
d930 1
a930 1
    stringBuffer.append(TEXT_222);
d935 2
a936 2
    stringBuffer.append(TEXT_223);
    stringBuffer.append(TEXT_224);
d938 1
a938 1
    stringBuffer.append(TEXT_225);
d940 1
a940 1
    stringBuffer.append(TEXT_226);
d942 1
a942 1
    stringBuffer.append(TEXT_227);
d944 3
a946 3
    stringBuffer.append(TEXT_228);
    stringBuffer.append(TEXT_229);
    stringBuffer.append(TEXT_230);
d948 1
a948 1
    stringBuffer.append(TEXT_231);
d952 1
a952 1
    stringBuffer.append(TEXT_232);
d981 1
a981 1
    stringBuffer.append(TEXT_233);
d983 1
a983 1
    stringBuffer.append(TEXT_234);
d985 1
a985 1
    stringBuffer.append(TEXT_235);
d987 1
a987 1
    stringBuffer.append(TEXT_236);
d989 1
a989 1
    stringBuffer.append(TEXT_237);
d993 1
a993 1
    stringBuffer.append(TEXT_238);
d995 1
a995 1
    stringBuffer.append(TEXT_239);
d998 1
a998 1
    stringBuffer.append(TEXT_240);
d1000 1
a1000 1
    stringBuffer.append(TEXT_241);
d1004 1
a1004 1
    stringBuffer.append(TEXT_242);
d1006 1
a1006 1
    stringBuffer.append(TEXT_243);
d1008 1
a1008 1
    stringBuffer.append(TEXT_244);
d1010 1
a1010 1
    stringBuffer.append(TEXT_245);
d1012 1
a1012 1
    stringBuffer.append(TEXT_246);
d1016 1
a1016 1
    stringBuffer.append(TEXT_247);
d1020 1
a1020 1
    stringBuffer.append(TEXT_248);
d1024 1
a1024 1
    stringBuffer.append(TEXT_249);
d1026 1
a1026 1
    stringBuffer.append(TEXT_250);
d1030 1
a1030 1
    stringBuffer.append(TEXT_251);
d1034 1
a1034 1
    stringBuffer.append(TEXT_252);
d1036 1
a1036 1
    stringBuffer.append(TEXT_253);
d1038 1
a1038 1
    stringBuffer.append(TEXT_254);
d1052 1
a1052 1
    stringBuffer.append(TEXT_255);
d1054 1
a1054 1
    stringBuffer.append(TEXT_256);
d1056 1
a1056 1
    stringBuffer.append(TEXT_257);
d1060 1
a1060 1
    stringBuffer.append(TEXT_258);
d1064 1
a1064 1
    stringBuffer.append(TEXT_259);
d1068 1
a1068 1
    stringBuffer.append(TEXT_260);
d1073 1
a1073 1
    stringBuffer.append(TEXT_261);
d1075 1
a1075 1
    stringBuffer.append(TEXT_262);
d1079 1
a1079 1
    stringBuffer.append(TEXT_263);
d1086 1
a1086 1
    stringBuffer.append(TEXT_264);
d1088 1
a1088 1
    stringBuffer.append(TEXT_265);
@


1.6
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d214 16
a229 16
  protected final String TEXT_194 = " getLabelIcon() {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_195 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_196 = NL;
  protected final String TEXT_197 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_198 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_199 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_200 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_203 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_204 = " feature, ";
  protected final String TEXT_205 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_208 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_209 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d231 27
a257 27
  protected final String TEXT_211 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_212 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_213 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_214 = ".eINSTANCE.get";
  protected final String TEXT_215 = "(), labelRefresher);";
  protected final String TEXT_216 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_217 = ".eINSTANCE.get";
  protected final String TEXT_218 = "(), labelRefresher);";
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_221 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_222 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_223 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_224 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_225 = NL;
  protected final String TEXT_226 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_227 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_228 = NL;
  protected final String TEXT_229 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_230 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_231 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_232 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_233 = " createLabel() {";
  protected final String TEXT_234 = NL + "\t\treturn new ";
  protected final String TEXT_235 = "();";
  protected final String TEXT_236 = NL + "\t\treturn ";
  protected final String TEXT_237 = ";";
d260 21
a280 21
  protected final String TEXT_240 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_241 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_242 = " label = createLabel();";
  protected final String TEXT_243 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_244 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_245 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_246 = NL + NL + "\t/**";
  protected final String TEXT_247 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_248 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_249 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_250 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_251 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_252 = "(";
  protected final String TEXT_253 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_254 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_255 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_256 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_257 = NL;
  protected final String TEXT_258 = NL;
  protected final String TEXT_259 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_260 = NL + "}";
d282 4
d855 3
a857 1
    /*@@ include file="adapters/propertySource.javajetinc"*/
d859 1
d861 1
d863 3
a865 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d867 1
a867 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
a868 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d871 1
d873 1
a873 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a876 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d879 1
d881 1
a881 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d883 1
a883 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d889 6
d899 1
a899 1
    stringBuffer.append(TEXT_213);
d901 1
a901 1
    stringBuffer.append(TEXT_214);
d903 1
a903 1
    stringBuffer.append(TEXT_215);
d910 1
a910 1
    stringBuffer.append(TEXT_216);
d912 1
a912 1
    stringBuffer.append(TEXT_217);
d914 1
a914 1
    stringBuffer.append(TEXT_218);
a918 7
    stringBuffer.append(TEXT_219);
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d920 1
a921 1
    stringBuffer.append(TEXT_224);
d923 1
d927 6
d936 1
a936 1
    stringBuffer.append(TEXT_228);
d965 1
a965 1
    stringBuffer.append(TEXT_229);
d967 1
a967 1
    stringBuffer.append(TEXT_230);
d969 1
a969 1
    stringBuffer.append(TEXT_231);
d971 1
a971 1
    stringBuffer.append(TEXT_232);
d973 1
a973 1
    stringBuffer.append(TEXT_233);
d977 1
a977 1
    stringBuffer.append(TEXT_234);
d979 1
a979 1
    stringBuffer.append(TEXT_235);
d982 1
a982 1
    stringBuffer.append(TEXT_236);
d984 1
a984 1
    stringBuffer.append(TEXT_237);
d988 1
a988 1
    stringBuffer.append(TEXT_238);
d990 1
a990 1
    stringBuffer.append(TEXT_239);
d992 1
a992 1
    stringBuffer.append(TEXT_240);
d994 1
a994 1
    stringBuffer.append(TEXT_241);
d996 1
a996 1
    stringBuffer.append(TEXT_242);
d1000 1
a1000 1
    stringBuffer.append(TEXT_243);
d1004 1
a1004 1
    stringBuffer.append(TEXT_244);
d1008 1
a1008 1
    stringBuffer.append(TEXT_245);
d1010 1
a1010 1
    stringBuffer.append(TEXT_246);
d1014 1
a1014 1
    stringBuffer.append(TEXT_247);
d1018 1
a1018 1
    stringBuffer.append(TEXT_248);
d1020 1
a1020 1
    stringBuffer.append(TEXT_249);
d1022 1
a1022 1
    stringBuffer.append(TEXT_250);
d1036 1
a1036 1
    stringBuffer.append(TEXT_251);
d1038 1
a1038 1
    stringBuffer.append(TEXT_252);
d1040 1
a1040 1
    stringBuffer.append(TEXT_253);
d1044 1
a1044 1
    stringBuffer.append(TEXT_254);
d1048 1
a1048 1
    stringBuffer.append(TEXT_255);
d1052 1
a1052 1
    stringBuffer.append(TEXT_256);
d1057 1
a1057 1
    stringBuffer.append(TEXT_257);
d1059 1
a1059 1
    stringBuffer.append(TEXT_258);
d1063 1
a1063 1
    stringBuffer.append(TEXT_259);
d1070 1
a1070 1
    stringBuffer.append(TEXT_260);
d1072 1
a1072 1
    stringBuffer.append(TEXT_261);
@


1.5
log
@[bblajer] #147076 Lite generator: Support ParentAssignedViewmap for labels and compartments
@
text
@d187 39
a225 39
  protected final String TEXT_167 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_168 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_169 = ") ";
  protected final String TEXT_170 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_172 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_173 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_174 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_175 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_176 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_177 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_178 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_179 = " createdFont;";
  protected final String TEXT_180 = NL;
  protected final String TEXT_181 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_182 = " style = (";
  protected final String TEXT_183 = ")  ";
  protected final String TEXT_184 = ".getStyle(";
  protected final String TEXT_185 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_186 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_187 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_188 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_189 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_190 = " getLabelIcon() {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_191 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_192 = NL;
  protected final String TEXT_193 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_194 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_195 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_196 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_197 = NL;
  protected final String TEXT_198 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_199 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_200 = " feature, ";
  protected final String TEXT_201 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_202 = NL;
  protected final String TEXT_203 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_204 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_205 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d227 27
a253 27
  protected final String TEXT_207 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_208 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_209 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_210 = ".eINSTANCE.get";
  protected final String TEXT_211 = "(), labelRefresher);";
  protected final String TEXT_212 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_213 = ".eINSTANCE.get";
  protected final String TEXT_214 = "(), labelRefresher);";
  protected final String TEXT_215 = NL;
  protected final String TEXT_216 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_217 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_218 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_219 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_220 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_221 = NL;
  protected final String TEXT_222 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_223 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_224 = NL;
  protected final String TEXT_225 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_226 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_227 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_228 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_229 = " createLabel() {";
  protected final String TEXT_230 = NL + "\t\treturn new ";
  protected final String TEXT_231 = "();";
  protected final String TEXT_232 = NL + "\t\treturn ";
  protected final String TEXT_233 = ";";
d256 21
a276 21
  protected final String TEXT_236 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_237 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_238 = " label = createLabel();";
  protected final String TEXT_239 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_240 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_241 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_242 = NL + NL + "\t/**";
  protected final String TEXT_243 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_244 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_245 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_246 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_247 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_248 = "(";
  protected final String TEXT_249 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_250 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_251 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_252 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_253 = NL;
  protected final String TEXT_254 = NL;
  protected final String TEXT_255 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_256 = NL + "}";
d278 4
d287 2
a288 1
GenChildLabelNode genChildNode = (GenChildLabelNode) ((Object[]) argument)[0];
d783 7
d791 3
a793 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d797 2
d800 1
a800 1
    stringBuffer.append(TEXT_170);
d802 1
a802 1
    stringBuffer.append(TEXT_171);
a803 2
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d809 2
d812 1
a812 1
    stringBuffer.append(TEXT_176);
a813 2
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d817 3
d821 3
d825 1
a825 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d827 3
a829 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a830 1
    stringBuffer.append(primaryView);
a831 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d833 1
a833 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d835 1
a835 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d837 1
a837 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d839 2
a841 2
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d843 1
a843 1
    /*@@ include file="adapters/propertySource.javajetinc"*/
d845 1
d847 1
d849 1
a849 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d851 1
a851 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
a852 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d855 1
d857 1
a857 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a860 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d863 1
d865 1
a865 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d867 1
a867 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d873 6
d883 1
a883 1
    stringBuffer.append(TEXT_209);
d885 1
a885 1
    stringBuffer.append(TEXT_210);
d887 1
a887 1
    stringBuffer.append(TEXT_211);
d894 1
a894 1
    stringBuffer.append(TEXT_212);
d896 1
a896 1
    stringBuffer.append(TEXT_213);
d898 1
a898 1
    stringBuffer.append(TEXT_214);
a902 7
    stringBuffer.append(TEXT_215);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d904 1
a905 1
    stringBuffer.append(TEXT_220);
d907 1
d911 6
d920 1
a920 1
    stringBuffer.append(TEXT_224);
d949 1
a949 1
    stringBuffer.append(TEXT_225);
d951 1
a951 1
    stringBuffer.append(TEXT_226);
d953 1
a953 1
    stringBuffer.append(TEXT_227);
d955 1
a955 1
    stringBuffer.append(TEXT_228);
d957 1
a957 1
    stringBuffer.append(TEXT_229);
d961 1
a961 1
    stringBuffer.append(TEXT_230);
d963 1
a963 1
    stringBuffer.append(TEXT_231);
d966 1
a966 1
    stringBuffer.append(TEXT_232);
d968 1
a968 1
    stringBuffer.append(TEXT_233);
d972 1
a972 1
    stringBuffer.append(TEXT_234);
d974 1
a974 1
    stringBuffer.append(TEXT_235);
d976 1
a976 1
    stringBuffer.append(TEXT_236);
d978 1
a978 1
    stringBuffer.append(TEXT_237);
d980 1
a980 1
    stringBuffer.append(TEXT_238);
d984 1
a984 1
    stringBuffer.append(TEXT_239);
d988 1
a988 1
    stringBuffer.append(TEXT_240);
d992 1
a992 1
    stringBuffer.append(TEXT_241);
d994 1
a994 1
    stringBuffer.append(TEXT_242);
d998 1
a998 1
    stringBuffer.append(TEXT_243);
d1002 1
a1002 1
    stringBuffer.append(TEXT_244);
d1004 1
a1004 1
    stringBuffer.append(TEXT_245);
d1006 1
a1006 1
    stringBuffer.append(TEXT_246);
d1020 1
a1020 1
    stringBuffer.append(TEXT_247);
d1022 1
a1022 1
    stringBuffer.append(TEXT_248);
d1024 1
a1024 1
    stringBuffer.append(TEXT_249);
d1028 1
a1028 1
    stringBuffer.append(TEXT_250);
d1032 1
a1032 1
    stringBuffer.append(TEXT_251);
d1036 1
a1036 1
    stringBuffer.append(TEXT_252);
d1041 1
a1041 1
    stringBuffer.append(TEXT_253);
d1043 1
a1043 1
    stringBuffer.append(TEXT_254);
d1047 1
a1047 1
    stringBuffer.append(TEXT_255);
d1054 1
a1054 1
    stringBuffer.append(TEXT_256);
d1056 1
a1056 1
    stringBuffer.append(TEXT_257);
@


1.4
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d246 32
a277 18
  protected final String TEXT_226 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_227 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_228 = " createLabel() {";
  protected final String TEXT_229 = NL + "\t\treturn new ";
  protected final String TEXT_230 = "();";
  protected final String TEXT_231 = NL + "\t\treturn ";
  protected final String TEXT_232 = ";";
  protected final String TEXT_233 = NL + "\t\treturn new ";
  protected final String TEXT_234 = "();";
  protected final String TEXT_235 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_236 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_237 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_238 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_239 = NL;
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_242 = NL + "}";
  protected final String TEXT_243 = NL;
d893 28
d924 1
a924 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d926 1
a926 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d928 2
a930 1
String figureQualifiedClassName = null;
a931 4
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.Label";
	}
a932 2
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
d934 2
d938 1
a938 1
    stringBuffer.append(TEXT_231);
d940 1
a940 1
    stringBuffer.append(TEXT_232);
a942 1
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();
a943 2
    stringBuffer.append(TEXT_233);
    stringBuffer.append(figureQualifiedClassName);
d945 2
a947 2
    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d949 26
d976 1
a976 1
    stringBuffer.append(TEXT_237);
d978 31
a1008 1
    stringBuffer.append(TEXT_238);
d1013 1
a1013 1
    stringBuffer.append(TEXT_239);
d1015 1
a1015 1
    stringBuffer.append(TEXT_240);
d1019 1
a1019 1
    stringBuffer.append(TEXT_241);
d1026 1
a1026 1
    stringBuffer.append(TEXT_242);
d1028 1
a1028 1
    stringBuffer.append(TEXT_243);
@


1.3
log
@[bblajer] #141280 Support child nodes without label
@
text
@d34 100
a133 100
  protected final String TEXT_14 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_15 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_16 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_17 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = "\t\tinstallEditPolicy(";
  protected final String TEXT_20 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_21 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_22 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_23 = " getDirectEditCommand(";
  protected final String TEXT_24 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_25 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_26 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_27 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_28 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_29 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_30 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_31 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_32 = "() {" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_33 = " element = ";
  protected final String TEXT_34 = ";" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_35 = " domainModelCommand = createDomainModelCommand();" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_36 = " createDomainModelCommand() {" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_37 = " domainModelEditDomain = ";
  protected final String TEXT_38 = ".getEditingDomainFor(";
  protected final String TEXT_39 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_40 = " feature = (";
  protected final String TEXT_41 = ") ";
  protected final String TEXT_42 = ".eINSTANCE.get";
  protected final String TEXT_43 = "();" + NL + "\t\t\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_44 = ".parseValue(feature, parseResult[0]);" + NL + "\t\t\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_45 = ".INSTANCE;" + NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_46 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_47 = " result = new ";
  protected final String TEXT_48 = "();" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_49 = " values = new ";
  protected final String TEXT_50 = "();" + NL + "\t\t\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_51 = "());" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_52 = ".create(domainModelEditDomain, element, feature, values));" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_53 = ".create(domainModelEditDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t\t\treturn result;";
  protected final String TEXT_54 = NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_55 = ".create(domainModelEditDomain, element, feature, valueToSet);";
  protected final String TEXT_56 = NL + "\t\t\t\t\t\t\t}";
  protected final String TEXT_57 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_58 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_59 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_60 = "() {" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_61 = " element = ";
  protected final String TEXT_62 = ";" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_63 = " domainModelCommand = createDomainModelCommand();" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_64 = " createDomainModelCommand() {" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_65 = " domainModelEditDomain = ";
  protected final String TEXT_66 = ".getEditingDomainFor(";
  protected final String TEXT_67 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_68 = " result = new ";
  protected final String TEXT_69 = "();" + NL + "\t\t\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_70 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_71 = " ";
  protected final String TEXT_72 = "feature = (";
  protected final String TEXT_73 = ") ";
  protected final String TEXT_74 = ".eINSTANCE.get";
  protected final String TEXT_75 = "();" + NL + "\t\t\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_76 = ".parseValue(feature, parseResult[";
  protected final String TEXT_77 = "]);" + NL + "\t\t\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_78 = ".INSTANCE;" + NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_79 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_80 = " ";
  protected final String TEXT_81 = "values = new ";
  protected final String TEXT_82 = "();" + NL + "\t\t\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_83 = "());" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_84 = ".create(domainModelEditDomain, element, feature, values));" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_85 = ".create(domainModelEditDomain, element, feature, valueToSet));";
  protected final String TEXT_86 = NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_87 = ".create(domainModelEditDomain, element, feature, valueToSet));";
  protected final String TEXT_88 = NL + "\t\t\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t\t\t}";
  protected final String TEXT_89 = NL + "\t\t\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\t\t\tdomainModelCommand.undo();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\t\t\tdomainModelCommand.execute();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\t\t\treturn element != null && domainModelCommand != null && domainModelCommand.canUndo();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\t\t\treturn element != null && domainModelCommand != null && domainModelCommand.canExecute();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t};" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});";
  protected final String TEXT_90 = NL;
  protected final String TEXT_91 = "\t\tinstallEditPolicy(";
  protected final String TEXT_92 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_93 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_94 = " createDeleteCommand(";
  protected final String TEXT_95 = " deleteRequest) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_96 = "() {";
  protected final String TEXT_97 = NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = getDomainModelRemoveCommand();" + NL + "\t\t\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_98 = " result = new ";
  protected final String TEXT_99 = "();";
  protected final String TEXT_100 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_101 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_102 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_103 = ".eINSTANCE.get";
  protected final String TEXT_104 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_105 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_106 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_107 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_108 = ".eINSTANCE.get";
  protected final String TEXT_109 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_110 = ".UNSET_VALUE));";
  protected final String TEXT_111 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_112 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_113 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
d135 44
a178 44
  protected final String TEXT_115 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_116 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_117 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_118 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_119 = ".eINSTANCE.get";
  protected final String TEXT_120 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_121 = ".UNSET_VALUE));";
  protected final String TEXT_122 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_123 = NL + "\t\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = ";
  protected final String TEXT_124 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_125 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_126 = ".eINSTANCE.get";
  protected final String TEXT_127 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_128 = NL + "\t\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = ";
  protected final String TEXT_129 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_130 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_131 = ".eINSTANCE.get";
  protected final String TEXT_132 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_133 = ".UNSET_VALUE);";
  protected final String TEXT_134 = NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command viewRemoveCommand = ";
  protected final String TEXT_135 = ".create(" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_136 = ".getEditingDomainFor(getDiagramNode().getDiagram()), " + NL + "\t\t\t\t\t\tgetDiagramNode());" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canExecute() && viewRemoveCommand != null && viewRemoveCommand.canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.execute();" + NL + "\t\t\t\t\t\tviewRemoveCommand.execute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canUndo() && viewRemoveCommand != null && viewRemoveCommand.canUndo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.undo();" + NL + "\t\t\t\t\t\tviewRemoveCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_137 = NL + "\t}" + NL;
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_140 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_141 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_142 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_143 = "(this, ";
  protected final String TEXT_144 = ".class, new ";
  protected final String TEXT_145 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_146 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_147 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_150 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_151 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_152 = " element = ";
  protected final String TEXT_153 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_154 = " element = ";
  protected final String TEXT_155 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_156 = " element, String pattern) {";
  protected final String TEXT_157 = NL + "\t\tif (element.get";
  protected final String TEXT_158 = "() == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
d181 45
a225 45
  protected final String TEXT_161 = NL + "\t\t\t";
  protected final String TEXT_162 = NL + "\t\t});";
  protected final String TEXT_163 = NL + "\t\treturn ";
  protected final String TEXT_164 = ".format(pattern, new Object[] {";
  protected final String TEXT_165 = NL + "\t\t";
  protected final String TEXT_166 = ",";
  protected final String TEXT_167 = NL + "\t\t});";
  protected final String TEXT_168 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_169 = NL + "\t}";
  protected final String TEXT_170 = NL;
  protected final String TEXT_171 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_172 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_173 = ") ";
  protected final String TEXT_174 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_175 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_176 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_177 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_178 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_179 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_180 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_181 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_182 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_183 = " createdFont;";
  protected final String TEXT_184 = NL;
  protected final String TEXT_185 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_186 = " style = (";
  protected final String TEXT_187 = ")  ";
  protected final String TEXT_188 = ".getStyle(";
  protected final String TEXT_189 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_190 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_191 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_192 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_193 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_194 = " getLabelIcon() {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_195 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_196 = NL;
  protected final String TEXT_197 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_198 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_199 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_200 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_203 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_204 = " feature, ";
  protected final String TEXT_205 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
d227 26
a252 26
  protected final String TEXT_207 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_208 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_209 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_210 = NL;
  protected final String TEXT_211 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_212 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_213 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_214 = ".eINSTANCE.get";
  protected final String TEXT_215 = "(), labelRefresher);";
  protected final String TEXT_216 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_217 = ".eINSTANCE.get";
  protected final String TEXT_218 = "(), labelRefresher);";
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_221 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_222 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_223 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_224 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_225 = NL;
  protected final String TEXT_226 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_227 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_228 = NL;
  protected final String TEXT_229 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_230 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_231 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_232 = " createLabel() {";
d255 8
a262 8
  protected final String TEXT_235 = NL + "\t\treturn ";
  protected final String TEXT_236 = ";";
  protected final String TEXT_237 = NL + "\t\treturn new ";
  protected final String TEXT_238 = "();";
  protected final String TEXT_239 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_240 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_241 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_242 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
a263 4
  protected final String TEXT_244 = NL;
  protected final String TEXT_245 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_246 = NL + "}";
  protected final String TEXT_247 = NL;
d276 1
d312 3
d318 4
a322 2
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d326 2
d333 1
a333 2
{
boolean isReadOnly = genChildNode.isLabelReadOnly();
a334 1
    stringBuffer.append(TEXT_18);
d336 1
d338 1
a338 1
    stringBuffer.append(TEXT_20);
d340 1
a340 1
    stringBuffer.append(TEXT_21);
d342 1
a342 1
    stringBuffer.append(TEXT_22);
d344 1
a344 1
    stringBuffer.append(TEXT_23);
d346 1
a346 1
    stringBuffer.append(TEXT_24);
d348 1
a348 1
    stringBuffer.append(TEXT_25);
d350 1
a350 1
    stringBuffer.append(TEXT_26);
d352 1
a352 1
    stringBuffer.append(TEXT_27);
d354 1
a354 1
    stringBuffer.append(TEXT_28);
d356 7
a362 1
    stringBuffer.append(TEXT_29);
d364 1
a364 1
if (labelModelFacet instanceof FeatureLabelModelFacet && !isReadOnly) {
d368 1
a368 1
    stringBuffer.append(TEXT_30);
a369 8
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain"));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d377 1
a377 1
    stringBuffer.append(primaryView);
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d383 2
d386 1
a386 1
    stringBuffer.append(TEXT_42);
d388 1
a388 1
    stringBuffer.append(TEXT_43);
d390 1
a390 1
    stringBuffer.append(TEXT_44);
d392 1
a392 1
    stringBuffer.append(TEXT_45);
a395 2
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d399 2
d402 1
a402 1
    stringBuffer.append(TEXT_49);
d404 1
a404 1
    stringBuffer.append(TEXT_50);
d406 1
a406 1
    stringBuffer.append(TEXT_51);
d408 1
a408 1
    stringBuffer.append(TEXT_52);
d410 1
a410 1
    stringBuffer.append(TEXT_53);
d414 1
a414 1
    stringBuffer.append(TEXT_54);
d416 1
a416 1
    stringBuffer.append(TEXT_55);
d420 1
a420 1
    stringBuffer.append(TEXT_56);
d426 1
a426 1
    stringBuffer.append(TEXT_57);
d428 1
a428 1
    stringBuffer.append(TEXT_58);
a429 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d433 1
a433 1
    stringBuffer.append(resolvedSemanticElement);
d435 1
a435 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d437 1
a437 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d439 1
a439 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain"));
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d443 1
a443 1
    stringBuffer.append(primaryView);
a444 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_69);
d451 1
a451 1
    stringBuffer.append(TEXT_70);
d454 1
a454 1
    stringBuffer.append(TEXT_71);
d456 1
a456 1
    stringBuffer.append(TEXT_72);
d458 1
a458 1
    stringBuffer.append(TEXT_73);
d460 1
a460 1
    stringBuffer.append(TEXT_74);
d462 1
a462 1
    stringBuffer.append(TEXT_75);
d464 1
a464 1
    stringBuffer.append(TEXT_76);
d466 1
a466 1
    stringBuffer.append(TEXT_77);
d468 1
a468 1
    stringBuffer.append(TEXT_78);
d472 1
a472 1
    stringBuffer.append(TEXT_79);
d475 1
a475 1
    stringBuffer.append(TEXT_80);
d477 1
a477 1
    stringBuffer.append(TEXT_81);
d479 1
a479 1
    stringBuffer.append(TEXT_82);
d481 1
a481 1
    stringBuffer.append(TEXT_83);
d483 1
a483 1
    stringBuffer.append(TEXT_84);
d485 1
a485 1
    stringBuffer.append(TEXT_85);
d489 1
a489 1
    stringBuffer.append(TEXT_86);
d491 1
a491 1
    stringBuffer.append(TEXT_87);
d498 1
a498 1
    stringBuffer.append(TEXT_88);
d502 1
a502 1
    stringBuffer.append(TEXT_89);
d506 3
d510 1
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
d516 1
a516 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
d520 1
a520 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d522 6
d535 1
a535 1
    stringBuffer.append(TEXT_97);
d537 1
a537 1
    stringBuffer.append(TEXT_98);
d539 1
a539 1
    stringBuffer.append(TEXT_99);
d543 1
a543 1
    stringBuffer.append(TEXT_100);
d545 1
a545 3
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_102);
d547 1
a547 1
    stringBuffer.append(TEXT_103);
d549 1
a549 1
    stringBuffer.append(TEXT_104);
d553 1
a553 1
    stringBuffer.append(TEXT_105);
d555 1
a555 3
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_107);
d557 1
a557 1
    stringBuffer.append(TEXT_108);
d559 1
a559 1
    stringBuffer.append(TEXT_109);
d561 1
a561 1
    stringBuffer.append(TEXT_110);
d568 1
a568 1
    stringBuffer.append(TEXT_111);
a569 2
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d581 1
a581 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d583 1
a583 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d585 1
a585 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
a586 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_121);
d590 1
a590 1
    stringBuffer.append(TEXT_122);
d595 2
d598 1
a598 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
a601 4
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_127);
d605 1
a605 1
    stringBuffer.append(TEXT_128);
d607 1
a607 3
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_130);
d609 1
a609 1
    stringBuffer.append(TEXT_131);
d611 1
a611 1
    stringBuffer.append(TEXT_132);
d613 1
a613 1
    stringBuffer.append(TEXT_133);
d618 9
d628 1
a628 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d632 1
a632 3
    
}	/*restrict local vars used in component edit policy*/

d634 1
d636 1
d638 1
a638 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d640 1
a640 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d642 1
a642 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d644 3
a646 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
a647 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
a648 7
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(TEXT_148);
d692 1
a692 1
    stringBuffer.append(TEXT_149);
d694 1
a694 1
    stringBuffer.append(TEXT_150);
d696 1
a696 1
    stringBuffer.append(TEXT_151);
d698 1
a698 1
    stringBuffer.append(TEXT_152);
d700 1
a700 1
    stringBuffer.append(TEXT_153);
d702 1
a702 1
    stringBuffer.append(TEXT_154);
d704 1
a704 1
    stringBuffer.append(TEXT_155);
d706 1
a706 1
    stringBuffer.append(TEXT_156);
d713 1
a713 1
    stringBuffer.append(TEXT_157);
d715 1
a715 1
    stringBuffer.append(TEXT_158);
d719 1
a719 1
    stringBuffer.append(TEXT_159);
d721 1
a721 1
    stringBuffer.append(TEXT_160);
d728 1
a728 1
    stringBuffer.append(TEXT_161);
d730 1
a730 1
    stringBuffer.append(TEXT_162);
d735 1
a735 1
    stringBuffer.append(TEXT_163);
d737 1
a737 1
    stringBuffer.append(TEXT_164);
d746 1
a746 1
    stringBuffer.append(TEXT_165);
d749 1
a749 1
    stringBuffer.append(TEXT_166);
d754 1
a754 1
    stringBuffer.append(TEXT_167);
d758 1
a758 1
    stringBuffer.append(TEXT_168);
d762 6
d769 1
d771 1
d773 1
a773 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d775 1
a775 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d777 1
a777 1
    stringBuffer.append(primaryView);
d779 1
a779 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d783 1
a783 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d785 1
a785 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d787 1
a787 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
a788 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
a789 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d791 1
a791 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d793 1
a793 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d795 1
d797 1
d799 1
a799 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d801 1
a801 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d803 1
a803 1
    stringBuffer.append(primaryView);
d805 1
a805 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d807 1
a807 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d809 1
a809 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a810 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a811 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d813 1
a813 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d815 1
a815 1
    /*@@ include file="adapters/propertySource.javajetinc"*/
d817 1
a819 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d821 1
a821 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d825 1
a827 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d829 1
a829 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d831 1
a831 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
a836 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_209);
    stringBuffer.append(TEXT_210);
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_212);
d841 1
a841 1
    stringBuffer.append(TEXT_213);
d843 1
a843 1
    stringBuffer.append(TEXT_214);
d845 1
a845 1
    stringBuffer.append(TEXT_215);
d852 1
a852 1
    stringBuffer.append(TEXT_216);
d854 1
a854 1
    stringBuffer.append(TEXT_217);
d856 1
a856 1
    stringBuffer.append(TEXT_218);
d861 7
d869 1
a870 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a871 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a874 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_224);
    stringBuffer.append(TEXT_225);
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_227);
d878 2
a879 2
    stringBuffer.append(TEXT_228);
    stringBuffer.append(TEXT_229);
d881 1
a881 1
    stringBuffer.append(TEXT_230);
d883 1
a883 1
    stringBuffer.append(TEXT_231);
d885 1
a885 1
    stringBuffer.append(TEXT_232);
d894 1
a894 1
    stringBuffer.append(TEXT_233);
d896 1
a896 1
    stringBuffer.append(TEXT_234);
d899 1
a899 1
    stringBuffer.append(TEXT_235);
d901 1
a901 1
    stringBuffer.append(TEXT_236);
d906 1
a906 1
    stringBuffer.append(TEXT_237);
d908 1
a908 1
    stringBuffer.append(TEXT_238);
d910 1
a910 1
    stringBuffer.append(TEXT_239);
d912 1
a912 1
    stringBuffer.append(TEXT_240);
d914 1
a914 1
    stringBuffer.append(TEXT_241);
d916 1
a916 1
    stringBuffer.append(TEXT_242);
d921 1
a921 1
    stringBuffer.append(TEXT_243);
d923 1
a923 1
    stringBuffer.append(TEXT_244);
d927 1
a927 1
    stringBuffer.append(TEXT_245);
d934 1
a934 1
    stringBuffer.append(TEXT_246);
d936 1
a936 1
    stringBuffer.append(TEXT_247);
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d273 1
a273 2
GenNode genChildNode = (GenNode) ((Object[]) argument)[0];
GenNodeLabel genLabel = (GenNodeLabel) genChildNode.getLabels().get(0);
d279 1
a279 1
LabelModelFacet labelModelFacet = genLabel.getModelFacet();
d328 4
d355 1
a355 1
if (labelModelFacet instanceof FeatureLabelModelFacet && !genLabel.isReadOnly()) {
d506 3
d877 3
a889 1
Viewmap viewmap = genLabel.getViewmap();
d920 2
a921 2
if (genLabel.getViewmap() instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) genLabel.getViewmap()).getClassBody();
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d29 150
a178 150
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_10 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_11 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_12 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_13 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = "\t\tinstallEditPolicy(";
  protected final String TEXT_16 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_17 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_18 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_19 = " getDirectEditCommand(";
  protected final String TEXT_20 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_21 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_22 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_23 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_24 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_25 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_27 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_28 = "() {" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_29 = " element = ";
  protected final String TEXT_30 = ";" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_31 = " domainModelCommand = createDomainModelCommand();" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_32 = " createDomainModelCommand() {" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_33 = " domainModelEditDomain = ";
  protected final String TEXT_34 = ".getEditingDomainFor(";
  protected final String TEXT_35 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_36 = " feature = (";
  protected final String TEXT_37 = ") ";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "();" + NL + "\t\t\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_40 = ".parseValue(feature, parseResult[0]);" + NL + "\t\t\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_41 = ".INSTANCE;" + NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_42 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_43 = " result = new ";
  protected final String TEXT_44 = "();" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_45 = " values = new ";
  protected final String TEXT_46 = "();" + NL + "\t\t\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_47 = "());" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_48 = ".create(domainModelEditDomain, element, feature, values));" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_49 = ".create(domainModelEditDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t\t\treturn result;";
  protected final String TEXT_50 = NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_51 = ".create(domainModelEditDomain, element, feature, valueToSet);";
  protected final String TEXT_52 = NL + "\t\t\t\t\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_54 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_55 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_56 = "() {" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_57 = " element = ";
  protected final String TEXT_58 = ";" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_59 = " domainModelCommand = createDomainModelCommand();" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_60 = " createDomainModelCommand() {" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_61 = " domainModelEditDomain = ";
  protected final String TEXT_62 = ".getEditingDomainFor(";
  protected final String TEXT_63 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_64 = " result = new ";
  protected final String TEXT_65 = "();" + NL + "\t\t\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_66 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_67 = " ";
  protected final String TEXT_68 = "feature = (";
  protected final String TEXT_69 = ") ";
  protected final String TEXT_70 = ".eINSTANCE.get";
  protected final String TEXT_71 = "();" + NL + "\t\t\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_72 = ".parseValue(feature, parseResult[";
  protected final String TEXT_73 = "]);" + NL + "\t\t\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_74 = ".INSTANCE;" + NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_75 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_76 = " ";
  protected final String TEXT_77 = "values = new ";
  protected final String TEXT_78 = "();" + NL + "\t\t\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_79 = "());" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_80 = ".create(domainModelEditDomain, element, feature, values));" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_81 = ".create(domainModelEditDomain, element, feature, valueToSet));";
  protected final String TEXT_82 = NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_83 = ".create(domainModelEditDomain, element, feature, valueToSet));";
  protected final String TEXT_84 = NL + "\t\t\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t\t\t}";
  protected final String TEXT_85 = NL + "\t\t\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\t\t\tdomainModelCommand.undo();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\t\t\tdomainModelCommand.execute();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\t\t\treturn element != null && domainModelCommand != null && domainModelCommand.canUndo();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\t\t\treturn element != null && domainModelCommand != null && domainModelCommand.canExecute();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t};" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});";
  protected final String TEXT_86 = NL;
  protected final String TEXT_87 = "\t\tinstallEditPolicy(";
  protected final String TEXT_88 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_89 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_90 = " createDeleteCommand(";
  protected final String TEXT_91 = " deleteRequest) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_92 = "() {";
  protected final String TEXT_93 = NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = getDomainModelRemoveCommand();" + NL + "\t\t\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_94 = " result = new ";
  protected final String TEXT_95 = "();";
  protected final String TEXT_96 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_97 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_98 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_99 = ".eINSTANCE.get";
  protected final String TEXT_100 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_101 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_102 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_103 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_104 = ".eINSTANCE.get";
  protected final String TEXT_105 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_106 = ".UNSET_VALUE));";
  protected final String TEXT_107 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_108 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_109 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_110 = ".eINSTANCE.get";
  protected final String TEXT_111 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_112 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_113 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_114 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_115 = ".eINSTANCE.get";
  protected final String TEXT_116 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_117 = ".UNSET_VALUE));";
  protected final String TEXT_118 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_119 = NL + "\t\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = ";
  protected final String TEXT_120 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_121 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_122 = ".eINSTANCE.get";
  protected final String TEXT_123 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_124 = NL + "\t\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = ";
  protected final String TEXT_125 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_126 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_127 = ".eINSTANCE.get";
  protected final String TEXT_128 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_129 = ".UNSET_VALUE);";
  protected final String TEXT_130 = NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command viewRemoveCommand = ";
  protected final String TEXT_131 = ".create(" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_132 = ".getEditingDomainFor(getDiagramNode().getDiagram()), " + NL + "\t\t\t\t\t\tgetDiagramNode());" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canExecute() && viewRemoveCommand != null && viewRemoveCommand.canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.execute();" + NL + "\t\t\t\t\t\tviewRemoveCommand.execute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canUndo() && viewRemoveCommand != null && viewRemoveCommand.canUndo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.undo();" + NL + "\t\t\t\t\t\tviewRemoveCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_133 = NL + "\t}" + NL;
  protected final String TEXT_134 = NL;
  protected final String TEXT_135 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_136 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_137 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_138 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_139 = "(this, ";
  protected final String TEXT_140 = ".class, new ";
  protected final String TEXT_141 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_142 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_143 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn ((View)getModel()).getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelSourceConnections() {" + NL + "\t\treturn ((View)getModel()).getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelTargetConnections() {" + NL + "\t\treturn ((View)getModel()).getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}";
  protected final String TEXT_144 = NL;
  protected final String TEXT_145 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_146 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_147 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_148 = " element = ";
  protected final String TEXT_149 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_150 = " element = ";
  protected final String TEXT_151 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_152 = " element, String pattern) {";
  protected final String TEXT_153 = NL + "\t\tif (element.get";
  protected final String TEXT_154 = "() == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_155 = NL + "\t\treturn ";
  protected final String TEXT_156 = ".format(pattern, new Object[] {";
  protected final String TEXT_157 = NL + "\t\t\t";
  protected final String TEXT_158 = NL + "\t\t});";
d181 45
a225 45
  protected final String TEXT_161 = NL + "\t\t";
  protected final String TEXT_162 = ",";
  protected final String TEXT_163 = NL + "\t\t});";
  protected final String TEXT_164 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_165 = NL + "\t}";
  protected final String TEXT_166 = NL;
  protected final String TEXT_167 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_168 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_169 = ") ";
  protected final String TEXT_170 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_172 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_173 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_174 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_175 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_176 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_177 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_178 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_179 = " createdFont;";
  protected final String TEXT_180 = NL;
  protected final String TEXT_181 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_182 = " style = (";
  protected final String TEXT_183 = ")  ";
  protected final String TEXT_184 = ".getStyle(";
  protected final String TEXT_185 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_186 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_187 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_188 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_189 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_190 = " getLabelIcon() {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_191 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_192 = NL;
  protected final String TEXT_193 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_194 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_195 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_196 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_197 = NL;
  protected final String TEXT_198 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_199 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_200 = " feature, ";
  protected final String TEXT_201 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_202 = NL;
  protected final String TEXT_203 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_204 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_205 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d227 26
a252 26
  protected final String TEXT_207 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_208 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_209 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_210 = ".eINSTANCE.get";
  protected final String TEXT_211 = "(), labelRefresher);";
  protected final String TEXT_212 = NL + "\t\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_213 = ".eINSTANCE.get";
  protected final String TEXT_214 = "(), labelRefresher);";
  protected final String TEXT_215 = NL;
  protected final String TEXT_216 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_217 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_218 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_219 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_220 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_221 = NL;
  protected final String TEXT_222 = "\t\tRefresher fontColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFontColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_223 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_224 = NL;
  protected final String TEXT_225 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_226 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_227 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_228 = " createLabel() {";
  protected final String TEXT_229 = NL + "\t\treturn new ";
  protected final String TEXT_230 = "();";
  protected final String TEXT_231 = NL + "\t\treturn ";
  protected final String TEXT_232 = ";";
d255 8
a262 8
  protected final String TEXT_235 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_236 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_237 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_238 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_239 = NL;
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_242 = NL + "}";
d264 4
d307 2
d311 6
d318 1
a318 1
    stringBuffer.append(TEXT_10);
d320 1
a320 1
    stringBuffer.append(TEXT_11);
d322 1
a322 1
    stringBuffer.append(TEXT_12);
d324 1
a324 1
    stringBuffer.append(TEXT_13);
d329 2
a330 2
    stringBuffer.append(TEXT_14);
    stringBuffer.append(TEXT_15);
d332 1
a332 1
    stringBuffer.append(TEXT_16);
d334 1
a334 1
    stringBuffer.append(TEXT_17);
d336 1
a336 1
    stringBuffer.append(TEXT_18);
d338 1
a338 1
    stringBuffer.append(TEXT_19);
d340 1
a340 1
    stringBuffer.append(TEXT_20);
d342 1
a342 1
    stringBuffer.append(TEXT_21);
d344 1
a344 1
    stringBuffer.append(TEXT_22);
d346 1
a346 1
    stringBuffer.append(TEXT_23);
d348 1
a348 1
    stringBuffer.append(TEXT_24);
d350 1
a350 1
    stringBuffer.append(TEXT_25);
d356 1
a356 1
    stringBuffer.append(TEXT_26);
d358 1
a358 1
    stringBuffer.append(TEXT_27);
d360 1
a360 1
    stringBuffer.append(TEXT_28);
d362 1
a362 1
    stringBuffer.append(TEXT_29);
d364 1
a364 1
    stringBuffer.append(TEXT_30);
d366 1
a366 1
    stringBuffer.append(TEXT_31);
d368 1
a368 1
    stringBuffer.append(TEXT_32);
d370 1
a370 1
    stringBuffer.append(TEXT_33);
d372 1
a372 1
    stringBuffer.append(TEXT_34);
d374 1
a374 1
    stringBuffer.append(TEXT_35);
d376 1
a376 1
    stringBuffer.append(TEXT_36);
d378 1
a378 1
    stringBuffer.append(TEXT_37);
d380 1
a380 1
    stringBuffer.append(TEXT_38);
d382 1
a382 1
    stringBuffer.append(TEXT_39);
d384 1
a384 1
    stringBuffer.append(TEXT_40);
d386 1
a386 1
    stringBuffer.append(TEXT_41);
d390 1
a390 1
    stringBuffer.append(TEXT_42);
d392 1
a392 1
    stringBuffer.append(TEXT_43);
d394 1
a394 1
    stringBuffer.append(TEXT_44);
d396 1
a396 1
    stringBuffer.append(TEXT_45);
d398 1
a398 1
    stringBuffer.append(TEXT_46);
d400 1
a400 1
    stringBuffer.append(TEXT_47);
d402 1
a402 1
    stringBuffer.append(TEXT_48);
d404 1
a404 1
    stringBuffer.append(TEXT_49);
d408 1
a408 1
    stringBuffer.append(TEXT_50);
d410 1
a410 1
    stringBuffer.append(TEXT_51);
d414 1
a414 1
    stringBuffer.append(TEXT_52);
d420 1
a420 1
    stringBuffer.append(TEXT_53);
d422 1
a422 1
    stringBuffer.append(TEXT_54);
d424 1
a424 1
    stringBuffer.append(TEXT_55);
d426 1
a426 1
    stringBuffer.append(TEXT_56);
d428 1
a428 1
    stringBuffer.append(TEXT_57);
d430 1
a430 1
    stringBuffer.append(TEXT_58);
d432 1
a432 1
    stringBuffer.append(TEXT_59);
d434 1
a434 1
    stringBuffer.append(TEXT_60);
d436 1
a436 1
    stringBuffer.append(TEXT_61);
d438 1
a438 1
    stringBuffer.append(TEXT_62);
d440 1
a440 1
    stringBuffer.append(TEXT_63);
d442 1
a442 1
    stringBuffer.append(TEXT_64);
d444 1
a444 1
    stringBuffer.append(TEXT_65);
d451 1
a451 1
    stringBuffer.append(TEXT_66);
d454 1
a454 1
    stringBuffer.append(TEXT_67);
d456 1
a456 1
    stringBuffer.append(TEXT_68);
d458 1
a458 1
    stringBuffer.append(TEXT_69);
d460 1
a460 1
    stringBuffer.append(TEXT_70);
d462 1
a462 1
    stringBuffer.append(TEXT_71);
d464 1
a464 1
    stringBuffer.append(TEXT_72);
d466 1
a466 1
    stringBuffer.append(TEXT_73);
d468 1
a468 1
    stringBuffer.append(TEXT_74);
d472 1
a472 1
    stringBuffer.append(TEXT_75);
d475 1
a475 1
    stringBuffer.append(TEXT_76);
d477 1
a477 1
    stringBuffer.append(TEXT_77);
d479 1
a479 1
    stringBuffer.append(TEXT_78);
d481 1
a481 1
    stringBuffer.append(TEXT_79);
d483 1
a483 1
    stringBuffer.append(TEXT_80);
d485 1
a485 1
    stringBuffer.append(TEXT_81);
d489 1
a489 1
    stringBuffer.append(TEXT_82);
d491 1
a491 1
    stringBuffer.append(TEXT_83);
d498 1
a498 1
    stringBuffer.append(TEXT_84);
d502 3
a504 3
    stringBuffer.append(TEXT_85);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(TEXT_87);
d506 1
a506 1
    stringBuffer.append(TEXT_88);
d508 1
a508 1
    stringBuffer.append(TEXT_89);
d510 1
a510 1
    stringBuffer.append(TEXT_90);
d512 1
a512 1
    stringBuffer.append(TEXT_91);
d514 1
a514 1
    stringBuffer.append(TEXT_92);
d522 1
a522 1
    stringBuffer.append(TEXT_93);
d524 1
a524 1
    stringBuffer.append(TEXT_94);
d526 1
a526 1
    stringBuffer.append(TEXT_95);
d530 1
a530 1
    stringBuffer.append(TEXT_96);
d532 1
a532 1
    stringBuffer.append(TEXT_97);
d534 1
a534 1
    stringBuffer.append(TEXT_98);
d536 1
a536 1
    stringBuffer.append(TEXT_99);
d538 1
a538 1
    stringBuffer.append(TEXT_100);
d542 1
a542 1
    stringBuffer.append(TEXT_101);
d544 1
a544 1
    stringBuffer.append(TEXT_102);
d546 1
a546 1
    stringBuffer.append(TEXT_103);
d548 1
a548 1
    stringBuffer.append(TEXT_104);
d550 1
a550 1
    stringBuffer.append(TEXT_105);
d552 1
a552 1
    stringBuffer.append(TEXT_106);
d559 1
a559 1
    stringBuffer.append(TEXT_107);
d561 1
a561 1
    stringBuffer.append(TEXT_108);
d563 1
a563 1
    stringBuffer.append(TEXT_109);
d565 1
a565 1
    stringBuffer.append(TEXT_110);
d567 1
a567 1
    stringBuffer.append(TEXT_111);
d571 1
a571 1
    stringBuffer.append(TEXT_112);
d573 1
a573 1
    stringBuffer.append(TEXT_113);
d575 1
a575 1
    stringBuffer.append(TEXT_114);
d577 1
a577 1
    stringBuffer.append(TEXT_115);
d579 1
a579 1
    stringBuffer.append(TEXT_116);
d581 1
a581 1
    stringBuffer.append(TEXT_117);
d585 1
a585 1
    stringBuffer.append(TEXT_118);
d590 1
a590 1
    stringBuffer.append(TEXT_119);
d592 1
a592 1
    stringBuffer.append(TEXT_120);
d594 1
a594 1
    stringBuffer.append(TEXT_121);
d596 1
a596 1
    stringBuffer.append(TEXT_122);
d598 1
a598 1
    stringBuffer.append(TEXT_123);
d602 1
a602 1
    stringBuffer.append(TEXT_124);
d604 1
a604 1
    stringBuffer.append(TEXT_125);
d606 1
a606 1
    stringBuffer.append(TEXT_126);
d608 1
a608 1
    stringBuffer.append(TEXT_127);
d610 1
a610 1
    stringBuffer.append(TEXT_128);
d612 1
a612 1
    stringBuffer.append(TEXT_129);
d617 1
a617 1
    stringBuffer.append(TEXT_130);
d619 1
a619 1
    stringBuffer.append(TEXT_131);
d621 1
a621 1
    stringBuffer.append(TEXT_132);
d625 3
a627 3
    stringBuffer.append(TEXT_133);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(TEXT_135);
d629 1
a629 1
    stringBuffer.append(TEXT_136);
d631 1
a631 1
    stringBuffer.append(TEXT_137);
d633 1
a633 1
    stringBuffer.append(TEXT_138);
d635 1
a635 1
    stringBuffer.append(TEXT_139);
d637 1
a637 1
    stringBuffer.append(TEXT_140);
d639 1
a639 1
    stringBuffer.append(TEXT_141);
d641 1
a641 1
    stringBuffer.append(TEXT_142);
d643 2
a644 2
    stringBuffer.append(TEXT_143);
    stringBuffer.append(TEXT_144);
d688 1
a688 1
    stringBuffer.append(TEXT_145);
d690 1
a690 1
    stringBuffer.append(TEXT_146);
d692 1
a692 1
    stringBuffer.append(TEXT_147);
d694 1
a694 1
    stringBuffer.append(TEXT_148);
d696 1
a696 1
    stringBuffer.append(TEXT_149);
d698 1
a698 1
    stringBuffer.append(TEXT_150);
d700 1
a700 1
    stringBuffer.append(TEXT_151);
d702 1
a702 1
    stringBuffer.append(TEXT_152);
d709 1
a709 1
    stringBuffer.append(TEXT_153);
d711 1
a711 1
    stringBuffer.append(TEXT_154);
d715 1
a715 1
    stringBuffer.append(TEXT_155);
d717 1
a717 1
    stringBuffer.append(TEXT_156);
d724 1
a724 1
    stringBuffer.append(TEXT_157);
d726 1
a726 1
    stringBuffer.append(TEXT_158);
d731 1
a731 1
    stringBuffer.append(TEXT_159);
d733 1
a733 1
    stringBuffer.append(TEXT_160);
d742 1
a742 1
    stringBuffer.append(TEXT_161);
d745 1
a745 1
    stringBuffer.append(TEXT_162);
d750 1
a750 1
    stringBuffer.append(TEXT_163);
d754 1
a754 1
    stringBuffer.append(TEXT_164);
a757 6
    stringBuffer.append(TEXT_165);
    stringBuffer.append(TEXT_166);
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a758 1
    stringBuffer.append(primaryView);
a759 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d761 1
a761 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d763 1
a763 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d765 1
a765 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d767 1
a767 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d771 1
a771 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d773 1
a773 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d775 2
a777 1
    stringBuffer.append(TEXT_179);
d779 1
d781 1
a781 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d783 1
a783 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a784 1
    stringBuffer.append(primaryView);
a785 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d787 1
a787 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d789 1
a789 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d791 1
a791 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d793 2
a795 2
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d797 1
a797 1
    /*@@ include file="adapters/propertySource.javajetinc"*/
d799 1
d801 1
d803 1
a803 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d805 1
a805 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
a806 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d809 1
d811 1
a811 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a814 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d817 1
d819 1
a819 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d821 1
a821 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d827 6
d837 1
a837 1
    stringBuffer.append(TEXT_209);
d839 1
a839 1
    stringBuffer.append(TEXT_210);
d841 1
a841 1
    stringBuffer.append(TEXT_211);
d848 1
a848 1
    stringBuffer.append(TEXT_212);
d850 1
a850 1
    stringBuffer.append(TEXT_213);
d852 1
a852 1
    stringBuffer.append(TEXT_214);
a856 7
    stringBuffer.append(TEXT_215);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d858 1
a859 1
    stringBuffer.append(TEXT_220);
d861 1
d865 1
d868 5
d874 1
a874 1
    stringBuffer.append(TEXT_226);
d876 1
a876 1
    stringBuffer.append(TEXT_227);
d878 1
a878 1
    stringBuffer.append(TEXT_228);
d888 1
a888 1
    stringBuffer.append(TEXT_229);
d890 1
a890 1
    stringBuffer.append(TEXT_230);
d893 1
a893 1
    stringBuffer.append(TEXT_231);
d895 1
a895 1
    stringBuffer.append(TEXT_232);
d900 1
a900 1
    stringBuffer.append(TEXT_233);
d902 1
a902 1
    stringBuffer.append(TEXT_234);
d904 1
a904 1
    stringBuffer.append(TEXT_235);
d906 1
a906 1
    stringBuffer.append(TEXT_236);
d908 1
a908 1
    stringBuffer.append(TEXT_237);
d910 1
a910 1
    stringBuffer.append(TEXT_238);
d915 1
a915 1
    stringBuffer.append(TEXT_239);
d917 1
a917 1
    stringBuffer.append(TEXT_240);
d921 1
a921 1
    stringBuffer.append(TEXT_241);
d928 1
a928 1
    stringBuffer.append(TEXT_242);
d930 1
a930 1
    stringBuffer.append(TEXT_243);
@

