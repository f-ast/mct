head	1.26;
access;
symbols
	v20080910-1520:1.26
	v20070403-1500:1.25
	v20070330-1300:1.25
	v20060330-1300:1.25
	v20070322-1100:1.25
	v20060316-0600:1.25
	v20070307-0700:1.23
	v20070228-2000:1.21
	v20070221-1500:1.20
	v20070208-1800:1.20
	v20070103-0300:1.17
	M4_20:1.17
	v20061222-1800:1.17
	v20061214-0000:1.17
	v20061120-1300:1.16
	M3_20:1.16
	v20061117-0800:1.16
	v20061013-1330:1.14
	v20061005-1700:1.5.2.1
	M1_20:1.9
	v20060904-1500:1.9
	v20060824-1600:1.5.2.1
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.26
date	2007.04.04.11.04.49;	author bblajer;	state dead;
branches;
next	1.25;
commitid	18c54613864d4567;

1.25
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.24;
commitid	617845f977b04567;

1.24
date	2007.03.09.17.19.35;	author bblajer;	state Exp;
branches;
next	1.23;
commitid	22ed45f197244567;

1.23
date	2007.03.02.21.35.39;	author bblajer;	state Exp;
branches;
next	1.22;
commitid	403a45e898a74567;

1.22
date	2007.03.02.21.21.16;	author bblajer;	state Exp;
branches;
next	1.21;
commitid	2b1945e895484567;

1.21
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.20;
commitid	496945df14164567;

1.20
date	2007.02.08.16.44.13;	author bblajer;	state Exp;
branches;
next	1.19;
commitid	af945cb535c4567;

1.19
date	2007.01.12.21.50.38;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	252345a802aa4567;

1.18
date	2007.01.11.19.16.11;	author bblajer;	state Exp;
branches;
next	1.17;
commitid	6c2845a68cf94567;

1.17
date	2006.12.12.12.54.41;	author bblajer;	state Exp;
branches;
next	1.16;
commitid	355b457ea6574567;

1.16
date	2006.11.09.18.15.42;	author bblajer;	state Exp;
branches;
next	1.15;

1.15
date	2006.11.01.14.38.03;	author bblajer;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.12.10.23.44;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.06.20.09.23;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.04.19.27.26;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.09.14.34.54;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.19.19.14.13;	author ashatalin;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.05.24.18.18.05;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;

1.5.2.1
date	2006.08.24.12.09.01;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.26
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@package org.eclipse.gmf.codegen.templates.lite.parts;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class CompartmentEditPartGenerator
{
  protected static String nl;
  public static synchronized CompartmentEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    CompartmentEditPartGenerator result = new CompartmentEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL;
  protected final String TEXT_6 = "((";
  protected final String TEXT_7 = ")";
  protected final String TEXT_8 = "((";
  protected final String TEXT_9 = ")";
  protected final String TEXT_10 = ")";
  protected final String TEXT_11 = ".eGet(";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "())";
  protected final String TEXT_14 = ")";
  protected final String TEXT_15 = "((";
  protected final String TEXT_16 = ")";
  protected final String TEXT_17 = ")";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = "()";
  protected final String TEXT_20 = NL;
  protected final String TEXT_21 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_22 = " extends ";
  protected final String TEXT_23 = " implements ";
  protected final String TEXT_24 = " {";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_29 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSelectable() {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_30 = " getModelChildren() {" + NL + "\t\t";
  protected final String TEXT_31 = " style = (";
  protected final String TEXT_32 = ") getDiagramNode().getStyle(";
  protected final String TEXT_33 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\treturn ";
  protected final String TEXT_34 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t\treturn getDiagramNode().getChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_35 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_36 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_37 = NL;
  protected final String TEXT_38 = NL + "installEditPolicy(";
  protected final String TEXT_39 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_40 = "());";
  protected final String TEXT_41 = NL;
  protected final String TEXT_42 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_43 = "\", new ";
  protected final String TEXT_44 = "()); //$NON-NLS-1$";
  protected final String TEXT_45 = NL;
  protected final String TEXT_46 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_47 = ".OPEN_ROLE";
  protected final String TEXT_48 = " + \"";
  protected final String TEXT_49 = "\" ";
  protected final String TEXT_50 = ", new ";
  protected final String TEXT_51 = "());";
  protected final String TEXT_52 = NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the selection handles that should be contributed to the parent when it becomes selected." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_53 = " createSelectionHandles() {";
  protected final String TEXT_54 = NL + "\t\treturn ";
  protected final String TEXT_55 = ".singletonList(new ";
  protected final String TEXT_56 = "(this, getTitleName()));";
  protected final String TEXT_57 = NL + "\t\treturn ";
  protected final String TEXT_58 = ".singletonList(new ";
  protected final String TEXT_59 = "(this, getTitleName()));";
  protected final String TEXT_60 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_61 = " req) {";
  protected final String TEXT_62 = NL;
  protected final String TEXT_63 = "if (";
  protected final String TEXT_64 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_65 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {";
  protected final String TEXT_66 = NL + "\t\treturn \"";
  protected final String TEXT_67 = "\";";
  protected final String TEXT_68 = NL + "\t\treturn \"\";\t//$NON-NLS-1$";
  protected final String TEXT_69 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_70 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_71 = " result = new ";
  protected final String TEXT_72 = "();" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_73 = "());" + NL + "\t\t";
  protected final String TEXT_74 = " scrollPane = new ";
  protected final String TEXT_75 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_76 = NL + "\t\t";
  protected final String TEXT_77 = " viewport = new ";
  protected final String TEXT_78 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_79 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_80 = "());";
  protected final String TEXT_81 = NL + "\t\t";
  protected final String TEXT_82 = " viewport = new ";
  protected final String TEXT_83 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_84 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_85 = "());";
  protected final String TEXT_86 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_87 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_88 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_89 = "(this);" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}";
  protected final String TEXT_90 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_91 = NL;
  protected final String TEXT_92 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_93 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_94 = " domainModelEditDomain = ";
  protected final String TEXT_95 = ".getEditingDomain(";
  protected final String TEXT_96 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_97 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_98 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_99 = " {";
  protected final String TEXT_100 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_101 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_102 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_103 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_104 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_105 = " createFilter() {";
  protected final String TEXT_106 = NL + "\t\t\t";
  protected final String TEXT_107 = " filter = ";
  protected final String TEXT_108 = ".createFeatureFilter(";
  protected final String TEXT_109 = ".eINSTANCE.get";
  protected final String TEXT_110 = "());";
  protected final String TEXT_111 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_112 = ".createFeatureFilter(";
  protected final String TEXT_113 = ".eINSTANCE.get";
  protected final String TEXT_114 = "()));";
  protected final String TEXT_115 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_116 = ".createNotifierFilter(";
  protected final String TEXT_117 = ".getElement()));";
  protected final String TEXT_118 = NL + "\t\t\t";
  protected final String TEXT_119 = " filter = ";
  protected final String TEXT_120 = ".createNotifierFilter(";
  protected final String TEXT_121 = ".getElement());";
  protected final String TEXT_122 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_123 = NL + "\t\t\t";
  protected final String TEXT_124 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_125 = NL + "\t\t\t";
  protected final String TEXT_126 = " filter = ";
  protected final String TEXT_127 = ".NOT_TOUCH;";
  protected final String TEXT_128 = NL + "\t\t\treturn filter;";
  protected final String TEXT_129 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_130 = " getCreateNotationalElementCommand(";
  protected final String TEXT_131 = " descriptor) {";
  protected final String TEXT_132 = NL;
  protected final String TEXT_133 = "\t\t\t";
  protected final String TEXT_134 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_135 = NL + "\t\t\tcase ";
  protected final String TEXT_136 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_137 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_138 = "(";
  protected final String TEXT_139 = ", domainElement, ";
  protected final String TEXT_140 = "new ";
  protected final String TEXT_141 = "(0, 0, ";
  protected final String TEXT_142 = ", ";
  protected final String TEXT_143 = ")";
  protected final String TEXT_144 = NL + "null";
  protected final String TEXT_145 = ", ";
  protected final String TEXT_146 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_147 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_148 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_149 = " getSemanticChildNodes() {";
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = NL + "\treturn ";
  protected final String TEXT_152 = ".EMPTY_LIST;";
  protected final String TEXT_153 = NL + "\t";
  protected final String TEXT_154 = " result = new ";
  protected final String TEXT_155 = "();";
  protected final String TEXT_156 = NL + "\t";
  protected final String TEXT_157 = " viewObject = ";
  protected final String TEXT_158 = ";" + NL + "\t";
  protected final String TEXT_159 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_160 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_161 = NL + "\tfor(";
  protected final String TEXT_162 = " it = ";
  protected final String TEXT_163 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_164 = ") it.next();";
  protected final String TEXT_165 = NL + "\tnextValue = (";
  protected final String TEXT_166 = ")";
  protected final String TEXT_167 = ";";
  protected final String TEXT_168 = NL + "\tnodeVID = ";
  protected final String TEXT_169 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_170 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_171 = NL + "\tcase ";
  protected final String TEXT_172 = ".VISUAL_ID: {";
  protected final String TEXT_173 = NL + "\tif (";
  protected final String TEXT_174 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_175 = NL + "\t\tresult.add(new ";
  protected final String TEXT_176 = "(nextValue, nodeVID));";
  protected final String TEXT_177 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_178 = NL + "\t\t}";
  protected final String TEXT_179 = NL + "\t}";
  protected final String TEXT_180 = NL + "\t}";
  protected final String TEXT_181 = NL + "\treturn result;";
  protected final String TEXT_182 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_183 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_184 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_185 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_186 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_187 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_188 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_189 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_190 = " domainModelEditDomain = ";
  protected final String TEXT_191 = ".getEditingDomain(";
  protected final String TEXT_192 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_193 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_194 = NL;
  protected final String TEXT_195 = NL;
  protected final String TEXT_196 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_197 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_198 = " feature, ";
  protected final String TEXT_199 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_200 = NL;
  protected final String TEXT_201 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_202 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_203 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_204 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_205 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_208 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_209 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
GenNode genHost = genCompartment.getNode();
GenDiagram genDiagram = genCompartment.getDiagram();
List childNodes = genCompartment.getChildNodes();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("NotationModelRefresher");	//from notationModelRefresher.jetinc

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    stringBuffer.append(TEXT_4);
    stringBuffer.append(TEXT_5);
    
class FeatureGetAccessorHelper {
	/**
	 * @@param containerName the name of the container
	 * @@param feature the feature whose value is in interest
	 * @@param containerMetaClass the <code>GenClass</code> of the container, or <code>null</code>, if the container is declared as an <code>EObject</code>.
	 * @@param needsCastToResultType whether the cast to the result type is required (this parameter is only used if the <code>EClass</code> this feature belongs to is an external interface). 
	 */
	public void appendFeatureValueGetter(String containerName, GenFeature feature, GenClass containerMetaClass, boolean needsCastToResultType) {
		if (feature.getGenClass().isExternalInterface()) {
			boolean needsCastToEObject = containerMetaClass != null && containerMetaClass.isExternalInterface();
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(feature.isListType() ? "java.util.Collection" : feature.getTypeGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_7);
    
			}
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_9);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_10);
    
			}

    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_13);
    
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_14);
    
			}
		} else {
			boolean needsCastToFeatureGenType = containerMetaClass == null || containerMetaClass.isExternalInterface();
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_16);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_17);
    
			}

    stringBuffer.append(TEXT_18);
    stringBuffer.append(feature.getGetAccessor());
    stringBuffer.append(TEXT_19);
    
		}
	}
}
final FeatureGetAccessorHelper myFeatureGetAccessorHelper = new FeatureGetAccessorHelper();

    stringBuffer.append(TEXT_20);
    importManager.emitPackageStatement(stringBuffer);
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.requests.CreateRequest");

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_21);
    stringBuffer.append(genCompartment.getEditPartClassName());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_24);
    {
GenCommonBase genCommonBase = genCompartment;
    stringBuffer.append(TEXT_25);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_27);
    }
    stringBuffer.append(TEXT_28);
    stringBuffer.append(genCompartment.getEditPartClassName());
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_36);
    {
GenCommonBase genCommonBase = genCompartment;
    stringBuffer.append(TEXT_37);
    
String layoutEditPolicyClassName = genCommonBase.getEditPartClassName();
if (layoutEditPolicyClassName.endsWith(GenCommonBase.EDIT_PART_SUFFIX)) {
	layoutEditPolicyClassName = layoutEditPolicyClassName.substring(0, layoutEditPolicyClassName.length() - GenCommonBase.EDIT_PART_SUFFIX.length());
}
layoutEditPolicyClassName = genDiagram.getEditPoliciesPackageName() + "." + layoutEditPolicyClassName + "LayoutEditPolicy";

    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName(layoutEditPolicyClassName));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(TEXT_41);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_42);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_44);
    }
    stringBuffer.append(TEXT_45);
    
{
	List<OpenDiagramBehaviour> behaviours = genCommonBase.getBehaviour(OpenDiagramBehaviour.class);
	for(int i = 0, iMax = behaviours.size(); i < iMax; i++) {
	/*doesn't make sense to install more than one policy for the same role*/ 
		OpenDiagramBehaviour next = behaviours.get(i);

    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.EditPolicyRoles"));
    stringBuffer.append(TEXT_47);
    if (i > 0) {
    stringBuffer.append(TEXT_48);
    stringBuffer.append(i+1);
    stringBuffer.append(TEXT_49);
    }
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName(genCommonBase.getBehaviour(OpenDiagramBehaviour.class).get(0).getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_51);
    
	}
}

    }
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_53);
    
if (!genCompartment.isCanCollapse()) {

    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.handles.CompartmentNameHandle"));
    stringBuffer.append(TEXT_56);
    
} else {

    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.handles.CompartmentCollapseHandle"));
    stringBuffer.append(TEXT_59);
    
}

    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_65);
    
if (genCompartment.isNeedsTitle()) {

    stringBuffer.append(TEXT_66);
    stringBuffer.append(genCompartment.getTitle());
    stringBuffer.append(TEXT_67);
    
} else {

    stringBuffer.append(TEXT_68);
    
}

    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.figures.CompartmentFigure"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.StackLayout"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ScrollPane"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ScrollPane"));
    stringBuffer.append(TEXT_75);
    if (genCompartment.isListLayout()) {
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Viewport"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Viewport"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout"));
    stringBuffer.append(TEXT_80);
    } else {
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Viewport"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformViewport"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayer"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
    stringBuffer.append(TEXT_85);
    }
    stringBuffer.append(TEXT_86);
    
if (!genCompartment.isListLayout()) {

    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.SnapToHelper"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.SnapToGrid"));
    stringBuffer.append(TEXT_89);
    
}

    stringBuffer.append(TEXT_90);
    
{
String _getViewCode = "getDiagramNode()";
String _getDiagramCode = _getViewCode + ".getDiagram()";
boolean isListLayout = genCompartment.isListLayout();

    stringBuffer.append(TEXT_91);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_99);
    
boolean hasConstraintsInChildren = false;
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet != null && typeModelFacet.getMetaClass() != null && typeModelFacet.getModelElementSelector() != null) {
		hasConstraintsInChildren = true;
		break;
	}
}

    
if (hasConstraintsInChildren) {

    stringBuffer.append(TEXT_100);
    stringBuffer.append(genDiagram.getVisualIDRegistryQualifiedClassName());
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_103);
    
}

    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_105);
    
{
	boolean hasDeclaredFilter = false;
	Set genChildFeatures = new LinkedHashSet();
	for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode nextNode = (GenNode) it.next();
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (genChildFeatures.contains(childMetaFeature)) {
			continue;
		}
		genChildFeatures.add(childMetaFeature);
		if (!hasDeclaredFilter) {
			hasDeclaredFilter = true;

    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_110);
    
		} else {

    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_114);
    
		}
	}	//for

    
	if (hasDeclaredFilter) {

    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_117);
    
	} else {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_121);
    
	}

    
	if (hasConstraintsInChildren) {
		if (hasDeclaredFilter) {
			hasDeclaredFilter = true;

    stringBuffer.append(TEXT_122);
    
		} else {

    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_124);
    
		}
	}
	if (!hasDeclaredFilter) {

    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_127);
    
	}

    stringBuffer.append(TEXT_128);
    
}	//local declaration of hasDeclaredFilter

    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_131);
    
{
	String _parentNode = "getHost()";

    stringBuffer.append(TEXT_132);
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_134);
    
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet == null) {
		continue;
	}
	String childNodeInterfaceName = importManager.getImportedName(nextNode.getDomainMetaClass().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(childNodeInterfaceName);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(_parentNode);
    stringBuffer.append(TEXT_139);
    
	if (!isListLayout) {
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) nextNode.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_143);
    
	} else {

    stringBuffer.append(TEXT_144);
    
	}

    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName(nextNode.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_146);
    
}

    stringBuffer.append(TEXT_147);
    
}

    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(TEXT_150);
    
if (childNodes.size() == 0) {

    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_152);
    
} else {

    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_155);
    
	Map genFeature2genNodeMap = new LinkedHashMap();
	for (int nodeIndex = 0; nodeIndex < childNodes.size(); nodeIndex++) {
		GenNode nextNode = (GenNode) childNodes.get(nodeIndex);
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (!genFeature2genNodeMap.containsKey(childMetaFeature)) {
			genFeature2genNodeMap.put(childMetaFeature, new ArrayList());
		}
		((Collection) genFeature2genNodeMap.get(childMetaFeature)).add(nextNode);
	}
	Set entrySet = genFeature2genNodeMap.entrySet();
	if (entrySet.size() > 0) {

    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_160);
    
	}
	for (Iterator entries = entrySet.iterator(); entries.hasNext();) {
		Map.Entry nextEntry = (Map.Entry) entries.next();
		GenFeature childMetaFeature = (GenFeature) nextEntry.getKey();
		Collection genNodesCollection = (Collection) nextEntry.getValue();
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_162);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, true);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_164);
    
		} else {

    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_166);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, false);
    stringBuffer.append(TEXT_167);
    
	}

    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_169);
    
	boolean generateSwitch = genNodesCollection.size() != 1;
	if (generateSwitch) {

    stringBuffer.append(TEXT_170);
    
	}
	for (Iterator genNodesIterator = genNodesCollection.iterator(); genNodesIterator.hasNext();) {
		GenNode nextNode = (GenNode) genNodesIterator.next();
		if (generateSwitch) {

    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_172);
    
		} else {

    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_174);
    
		}

    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_176);
    
		if (generateSwitch) {

    stringBuffer.append(TEXT_177);
    
		} else {

    stringBuffer.append(TEXT_178);
    
		}
	}
	if (generateSwitch) {

    stringBuffer.append(TEXT_179);
    
	}
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_180);
    
	}
}

    stringBuffer.append(TEXT_181);
    
}

    stringBuffer.append(TEXT_182);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_184);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_186);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher"));
    stringBuffer.append(TEXT_188);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_191);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_193);
    
}

    stringBuffer.append(TEXT_194);
    stringBuffer.append(TEXT_195);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_199);
    stringBuffer.append(TEXT_200);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_205);
    stringBuffer.append(TEXT_206);
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_208);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_209);
    return stringBuffer.toString();
  }
}
@


1.25
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.24
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@a326 2
importManager.addImport("org.eclipse.gef.commands.Command");
importManager.addImport("org.eclipse.gef.commands.CompoundCommand");
@


1.23
log
@Generated diagram plugin should at least compile when there's a node with  an abstract underlying element.
@
text
@d56 173
a228 275
  protected final String TEXT_37 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_38 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_39 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_40 = " createChangeConstraintCommand(final ";
  protected final String TEXT_41 = " request, final ";
  protected final String TEXT_42 = " child, Object constraint) {";
  protected final String TEXT_43 = NL;
  protected final String TEXT_44 = "\t\t\t\tfinal ";
  protected final String TEXT_45 = " node = (";
  protected final String TEXT_46 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_47 = " emfCommand = new ";
  protected final String TEXT_48 = "(node, request, ((";
  protected final String TEXT_49 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_50 = "(";
  protected final String TEXT_51 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_52 = " createChangeConstraintCommand(";
  protected final String TEXT_53 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_54 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = "protected ";
  protected final String TEXT_57 = " createChildEditPolicy(";
  protected final String TEXT_58 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_59 = " result = child.getEditPolicy(";
  protected final String TEXT_60 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}";
  protected final String TEXT_61 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_62 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_63 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_64 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_65 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_66 = " createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_67 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_68 = NL;
  protected final String TEXT_69 = "protected ";
  protected final String TEXT_70 = " createChildEditPolicy(";
  protected final String TEXT_71 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_72 = " result = child.getEditPolicy(";
  protected final String TEXT_73 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}";
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = NL + "protected ";
  protected final String TEXT_76 = " createAddCommand(final ";
  protected final String TEXT_77 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_78 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_79 = " childNode = (";
  protected final String TEXT_80 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_81 = " editingDomain = ";
  protected final String TEXT_82 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_83 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_84 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_85 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_86 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_87 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_88 = NL + "\t\t\tcase ";
  protected final String TEXT_89 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_90 = "(";
  protected final String TEXT_91 = ", childNode, newVisualID, ";
  protected final String TEXT_92 = "null";
  protected final String TEXT_93 = "(";
  protected final String TEXT_94 = ") constraint";
  protected final String TEXT_95 = ");" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_96 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_97 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_98 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_99 = NL;
  protected final String TEXT_100 = NL + "protected ";
  protected final String TEXT_101 = " createCloneCommand(final ";
  protected final String TEXT_102 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_103 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_104 = " childNode = (";
  protected final String TEXT_105 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_106 = " editingDomain = ";
  protected final String TEXT_107 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_108 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_109 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_110 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_111 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_112 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_113 = NL + "\t\t\tcase ";
  protected final String TEXT_114 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_115 = "(";
  protected final String TEXT_116 = ", childNode, ";
  protected final String TEXT_117 = "null";
  protected final String TEXT_118 = "(";
  protected final String TEXT_119 = ") constraint";
  protected final String TEXT_120 = ");" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_121 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_122 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_123 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_124 = NL + "\t\t\tprotected ";
  protected final String TEXT_125 = " getCreateCommand(CreateRequest request) {";
  protected final String TEXT_126 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_127 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_128 = " requestEx = (";
  protected final String TEXT_129 = ") request;" + NL + "\t\t\t\t\tif (!";
  protected final String TEXT_130 = ".MODEL_ID.equals(requestEx.getModelID())) {" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_131 = " result = new ";
  protected final String TEXT_132 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_133 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_134 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_135 = "((View) getModel(), requestEx";
  protected final String TEXT_136 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_137 = ")getConstraintFor(request)";
  protected final String TEXT_138 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_139 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_140 = "(";
  protected final String TEXT_141 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_142 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_143 = NL;
  protected final String TEXT_144 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_145 = "\", new ";
  protected final String TEXT_146 = "()); //$NON-NLS-1$";
  protected final String TEXT_147 = NL;
  protected final String TEXT_148 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_149 = ".OPEN_ROLE";
  protected final String TEXT_150 = " + \"";
  protected final String TEXT_151 = "\" ";
  protected final String TEXT_152 = ", new ";
  protected final String TEXT_153 = "());";
  protected final String TEXT_154 = NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the selection handles that should be contributed to the parent when it becomes selected." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_155 = " createSelectionHandles() {";
  protected final String TEXT_156 = NL + "\t\treturn ";
  protected final String TEXT_157 = ".singletonList(new ";
  protected final String TEXT_158 = "(this, getTitleName()));";
  protected final String TEXT_159 = NL + "\t\treturn ";
  protected final String TEXT_160 = ".singletonList(new ";
  protected final String TEXT_161 = "(this, getTitleName()));";
  protected final String TEXT_162 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_163 = " req) {";
  protected final String TEXT_164 = NL;
  protected final String TEXT_165 = "if (";
  protected final String TEXT_166 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_167 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {";
  protected final String TEXT_168 = NL + "\t\treturn \"";
  protected final String TEXT_169 = "\";";
  protected final String TEXT_170 = NL + "\t\treturn \"\";\t//$NON-NLS-1$";
  protected final String TEXT_171 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_172 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_173 = " result = new ";
  protected final String TEXT_174 = "();" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_175 = "());" + NL + "\t\t";
  protected final String TEXT_176 = " scrollPane = new ";
  protected final String TEXT_177 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_178 = NL + "\t\t";
  protected final String TEXT_179 = " viewport = new ";
  protected final String TEXT_180 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_181 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_182 = "());";
  protected final String TEXT_183 = NL + "\t\t";
  protected final String TEXT_184 = " viewport = new ";
  protected final String TEXT_185 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_186 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_187 = "());";
  protected final String TEXT_188 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_189 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_190 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_191 = "(this);" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}";
  protected final String TEXT_192 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_193 = NL;
  protected final String TEXT_194 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_195 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_196 = " domainModelEditDomain = ";
  protected final String TEXT_197 = ".getEditingDomain(";
  protected final String TEXT_198 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_199 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_200 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_201 = " {";
  protected final String TEXT_202 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_203 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_204 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_205 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_206 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_207 = " createFilter() {";
  protected final String TEXT_208 = NL + "\t\t\t";
  protected final String TEXT_209 = " filter = ";
  protected final String TEXT_210 = ".createFeatureFilter(";
  protected final String TEXT_211 = ".eINSTANCE.get";
  protected final String TEXT_212 = "());";
  protected final String TEXT_213 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_214 = ".createFeatureFilter(";
  protected final String TEXT_215 = ".eINSTANCE.get";
  protected final String TEXT_216 = "()));";
  protected final String TEXT_217 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_218 = ".createNotifierFilter(";
  protected final String TEXT_219 = ".getElement()));";
  protected final String TEXT_220 = NL + "\t\t\t";
  protected final String TEXT_221 = " filter = ";
  protected final String TEXT_222 = ".createNotifierFilter(";
  protected final String TEXT_223 = ".getElement());";
  protected final String TEXT_224 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_225 = NL + "\t\t\t";
  protected final String TEXT_226 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_227 = NL + "\t\t\t";
  protected final String TEXT_228 = " filter = ";
  protected final String TEXT_229 = ".NOT_TOUCH;";
  protected final String TEXT_230 = NL + "\t\t\treturn filter;";
  protected final String TEXT_231 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_232 = " getCreateNotationalElementCommand(";
  protected final String TEXT_233 = " descriptor) {";
  protected final String TEXT_234 = NL;
  protected final String TEXT_235 = "\t\t\t";
  protected final String TEXT_236 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_237 = NL + "\t\t\tcase ";
  protected final String TEXT_238 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_239 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_240 = "(";
  protected final String TEXT_241 = ", domainElement, ";
  protected final String TEXT_242 = "new ";
  protected final String TEXT_243 = "(0, 0, ";
  protected final String TEXT_244 = ", ";
  protected final String TEXT_245 = ")";
  protected final String TEXT_246 = NL + "null";
  protected final String TEXT_247 = ", ";
  protected final String TEXT_248 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_249 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_250 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_251 = " getSemanticChildNodes() {";
  protected final String TEXT_252 = NL;
  protected final String TEXT_253 = NL + "\treturn ";
  protected final String TEXT_254 = ".EMPTY_LIST;";
  protected final String TEXT_255 = NL + "\t";
  protected final String TEXT_256 = " result = new ";
  protected final String TEXT_257 = "();";
  protected final String TEXT_258 = NL + "\t";
  protected final String TEXT_259 = " viewObject = ";
  protected final String TEXT_260 = ";" + NL + "\t";
  protected final String TEXT_261 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_262 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_263 = NL + "\tfor(";
  protected final String TEXT_264 = " it = ";
  protected final String TEXT_265 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_266 = ") it.next();";
  protected final String TEXT_267 = NL + "\tnextValue = (";
  protected final String TEXT_268 = ")";
  protected final String TEXT_269 = ";";
  protected final String TEXT_270 = NL + "\tnodeVID = ";
  protected final String TEXT_271 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_272 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_273 = NL + "\tcase ";
  protected final String TEXT_274 = ".VISUAL_ID: {";
  protected final String TEXT_275 = NL + "\tif (";
  protected final String TEXT_276 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_277 = NL + "\t\tresult.add(new ";
  protected final String TEXT_278 = "(nextValue, nodeVID));";
  protected final String TEXT_279 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_280 = NL + "\t\t}";
  protected final String TEXT_281 = NL + "\t}";
  protected final String TEXT_282 = NL + "\t}";
  protected final String TEXT_283 = NL + "\treturn result;";
  protected final String TEXT_284 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_285 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_286 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_287 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_288 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_289 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_290 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_291 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_292 = " domainModelEditDomain = ";
  protected final String TEXT_293 = ".getEditingDomain(";
  protected final String TEXT_294 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_295 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_296 = NL;
  protected final String TEXT_297 = NL;
  protected final String TEXT_298 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_299 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_300 = " feature, ";
  protected final String TEXT_301 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_302 = NL;
  protected final String TEXT_303 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_304 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_305 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_306 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_307 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_308 = NL;
  protected final String TEXT_309 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_310 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_311 = NL;
d365 2
a366 1
    if (!genCompartment.isListLayout()) {
d368 8
a376 2
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.XYLayoutEditPolicyEx"));
d378 1
a378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
a380 233
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ChangeBoundsCommand"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_60);
    } else {
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.ListLayoutEditPolicy"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_73);
    }
    
{
	String _getViewCode = "getDiagramNode()";
	boolean isListLayout = genCompartment.isListLayout();

    stringBuffer.append(TEXT_74);
    
if (!childNodes.isEmpty()) {

    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_87);
    
	for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode next = (GenNode) it.next();

    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Add" + next.getModelFacet().getMetaClass().getName() + next.getVisualID() + "Command"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_91);
    if (isListLayout) {
    stringBuffer.append(TEXT_92);
    } else {
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_94);
    }
    stringBuffer.append(TEXT_95);
    
	}	//for

    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_98);
    
}	//if (!childNodes.isEmpty()) in createAddCommand

    stringBuffer.append(TEXT_99);
    
if (!childNodes.isEmpty()) {

    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_112);
    
	for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode next = (GenNode) it.next();

    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Clone" + next.getModelFacet().getMetaClass().getName() + next.getVisualID() + "Command"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_116);
    if (isListLayout) {
    stringBuffer.append(TEXT_117);
    } else {
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_119);
    }
    stringBuffer.append(TEXT_120);
    
	}	//for

    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_123);
    
}	//if (!childNodes.isEmpty())

    
}

    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_125);
    if (null != genDiagram.getPalette()) {
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_132);
    
for(Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	if (next.isSansDomain() || next.getDomainMetaClass().isAbstract()) {
		continue;
	}

    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + next.getDomainMetaClass().getName() + next.getVisualID() + "Command"));
    stringBuffer.append(TEXT_135);
    if (!genCompartment.isListLayout()) {
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_137);
    }
    stringBuffer.append(TEXT_138);
    
}

    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_141);
    }/*when there's palette*/
    stringBuffer.append(TEXT_142);
    {
GenCommonBase genCommonBase = genCompartment;
    stringBuffer.append(TEXT_143);
d384 1
a384 1
    stringBuffer.append(TEXT_144);
d386 1
a386 1
    stringBuffer.append(TEXT_145);
d388 1
a388 1
    stringBuffer.append(TEXT_146);
d390 1
a390 1
    stringBuffer.append(TEXT_147);
d398 1
a398 1
    stringBuffer.append(TEXT_148);
d400 1
a400 1
    stringBuffer.append(TEXT_149);
d402 1
a402 1
    stringBuffer.append(TEXT_150);
d404 1
a404 1
    stringBuffer.append(TEXT_151);
d406 1
a406 1
    stringBuffer.append(TEXT_152);
d408 1
a408 1
    stringBuffer.append(TEXT_153);
d414 1
a414 1
    stringBuffer.append(TEXT_154);
d416 1
a416 1
    stringBuffer.append(TEXT_155);
d420 1
a420 1
    stringBuffer.append(TEXT_156);
d422 1
a422 1
    stringBuffer.append(TEXT_157);
d424 1
a424 1
    stringBuffer.append(TEXT_158);
d428 1
a428 1
    stringBuffer.append(TEXT_159);
d430 1
a430 1
    stringBuffer.append(TEXT_160);
d432 1
a432 1
    stringBuffer.append(TEXT_161);
d436 1
a436 1
    stringBuffer.append(TEXT_162);
d438 3
a440 3
    stringBuffer.append(TEXT_163);
    stringBuffer.append(TEXT_164);
    stringBuffer.append(TEXT_165);
d442 1
a442 1
    stringBuffer.append(TEXT_166);
d444 1
a444 1
    stringBuffer.append(TEXT_167);
d448 1
a448 1
    stringBuffer.append(TEXT_168);
d450 1
a450 1
    stringBuffer.append(TEXT_169);
d454 1
a454 1
    stringBuffer.append(TEXT_170);
d458 1
a458 1
    stringBuffer.append(TEXT_171);
d460 1
a460 1
    stringBuffer.append(TEXT_172);
d462 1
a462 1
    stringBuffer.append(TEXT_173);
d464 1
a464 1
    stringBuffer.append(TEXT_174);
d466 1
a466 1
    stringBuffer.append(TEXT_175);
d468 1
a468 1
    stringBuffer.append(TEXT_176);
d470 1
a470 1
    stringBuffer.append(TEXT_177);
d472 1
a472 1
    stringBuffer.append(TEXT_178);
d474 1
a474 1
    stringBuffer.append(TEXT_179);
d476 1
a476 1
    stringBuffer.append(TEXT_180);
d478 1
a478 1
    stringBuffer.append(TEXT_181);
d480 1
a480 1
    stringBuffer.append(TEXT_182);
d482 1
a482 1
    stringBuffer.append(TEXT_183);
d484 1
a484 1
    stringBuffer.append(TEXT_184);
d486 1
a486 1
    stringBuffer.append(TEXT_185);
d488 1
a488 1
    stringBuffer.append(TEXT_186);
d490 1
a490 1
    stringBuffer.append(TEXT_187);
d492 1
a492 1
    stringBuffer.append(TEXT_188);
d496 1
a496 1
    stringBuffer.append(TEXT_189);
d498 1
a498 1
    stringBuffer.append(TEXT_190);
d500 1
a500 1
    stringBuffer.append(TEXT_191);
d504 1
a504 1
    stringBuffer.append(TEXT_192);
d511 2
a512 2
    stringBuffer.append(TEXT_193);
    stringBuffer.append(TEXT_194);
d514 1
a514 1
    stringBuffer.append(TEXT_195);
d516 1
a516 1
    stringBuffer.append(TEXT_196);
d518 1
a518 1
    stringBuffer.append(TEXT_197);
d520 1
a520 1
    stringBuffer.append(TEXT_198);
d522 1
a522 1
    stringBuffer.append(TEXT_199);
d524 1
a524 1
    stringBuffer.append(TEXT_200);
d526 1
a526 1
    stringBuffer.append(TEXT_201);
d541 1
a541 1
    stringBuffer.append(TEXT_202);
d543 1
a543 1
    stringBuffer.append(TEXT_203);
d545 1
a545 1
    stringBuffer.append(TEXT_204);
d547 1
a547 1
    stringBuffer.append(TEXT_205);
d551 1
a551 1
    stringBuffer.append(TEXT_206);
d553 1
a553 1
    stringBuffer.append(TEXT_207);
d572 1
a572 1
    stringBuffer.append(TEXT_208);
d574 1
a574 1
    stringBuffer.append(TEXT_209);
d576 1
a576 1
    stringBuffer.append(TEXT_210);
d578 1
a578 1
    stringBuffer.append(TEXT_211);
d580 1
a580 1
    stringBuffer.append(TEXT_212);
d584 1
a584 1
    stringBuffer.append(TEXT_213);
d586 1
a586 1
    stringBuffer.append(TEXT_214);
d588 1
a588 1
    stringBuffer.append(TEXT_215);
d590 1
a590 1
    stringBuffer.append(TEXT_216);
d598 1
a598 1
    stringBuffer.append(TEXT_217);
d600 1
a600 1
    stringBuffer.append(TEXT_218);
d602 1
a602 1
    stringBuffer.append(TEXT_219);
d607 1
a607 1
    stringBuffer.append(TEXT_220);
d609 1
a609 1
    stringBuffer.append(TEXT_221);
d611 1
a611 1
    stringBuffer.append(TEXT_222);
d613 1
a613 1
    stringBuffer.append(TEXT_223);
d622 1
a622 1
    stringBuffer.append(TEXT_224);
d626 1
a626 1
    stringBuffer.append(TEXT_225);
d628 1
a628 1
    stringBuffer.append(TEXT_226);
d634 1
a634 1
    stringBuffer.append(TEXT_227);
d636 1
a636 1
    stringBuffer.append(TEXT_228);
d638 1
a638 1
    stringBuffer.append(TEXT_229);
d642 1
a642 1
    stringBuffer.append(TEXT_230);
d646 1
a646 1
    stringBuffer.append(TEXT_231);
d648 1
a648 1
    stringBuffer.append(TEXT_232);
d650 1
a650 1
    stringBuffer.append(TEXT_233);
d655 2
a656 2
    stringBuffer.append(TEXT_234);
    stringBuffer.append(TEXT_235);
d658 1
a658 1
    stringBuffer.append(TEXT_236);
d668 1
a668 1
    stringBuffer.append(TEXT_237);
d670 1
a670 1
    stringBuffer.append(TEXT_238);
d672 1
a672 1
    stringBuffer.append(TEXT_239);
d674 1
a674 1
    stringBuffer.append(TEXT_240);
d676 1
a676 1
    stringBuffer.append(TEXT_241);
d687 1
a687 1
    stringBuffer.append(TEXT_242);
d689 1
a689 1
    stringBuffer.append(TEXT_243);
d691 1
a691 1
    stringBuffer.append(TEXT_244);
d693 1
a693 1
    stringBuffer.append(TEXT_245);
d697 1
a697 1
    stringBuffer.append(TEXT_246);
d701 1
a701 1
    stringBuffer.append(TEXT_247);
d703 1
a703 1
    stringBuffer.append(TEXT_248);
d707 1
a707 1
    stringBuffer.append(TEXT_249);
d711 1
a711 1
    stringBuffer.append(TEXT_250);
d713 2
a714 2
    stringBuffer.append(TEXT_251);
    stringBuffer.append(TEXT_252);
d718 1
a718 1
    stringBuffer.append(TEXT_253);
d720 1
a720 1
    stringBuffer.append(TEXT_254);
d724 1
a724 1
    stringBuffer.append(TEXT_255);
d726 1
a726 1
    stringBuffer.append(TEXT_256);
d728 1
a728 1
    stringBuffer.append(TEXT_257);
d746 1
a746 1
    stringBuffer.append(TEXT_258);
d748 1
a748 1
    stringBuffer.append(TEXT_259);
d750 1
a750 1
    stringBuffer.append(TEXT_260);
d752 1
a752 1
    stringBuffer.append(TEXT_261);
d754 1
a754 1
    stringBuffer.append(TEXT_262);
d763 1
a763 1
    stringBuffer.append(TEXT_263);
d765 1
a765 1
    stringBuffer.append(TEXT_264);
d767 1
a767 1
    stringBuffer.append(TEXT_265);
d769 1
a769 1
    stringBuffer.append(TEXT_266);
d773 1
a773 1
    stringBuffer.append(TEXT_267);
d775 1
a775 1
    stringBuffer.append(TEXT_268);
d777 1
a777 1
    stringBuffer.append(TEXT_269);
d781 1
a781 1
    stringBuffer.append(TEXT_270);
d783 1
a783 1
    stringBuffer.append(TEXT_271);
d788 1
a788 1
    stringBuffer.append(TEXT_272);
d795 1
a795 1
    stringBuffer.append(TEXT_273);
d797 1
a797 1
    stringBuffer.append(TEXT_274);
d801 1
a801 1
    stringBuffer.append(TEXT_275);
d803 1
a803 1
    stringBuffer.append(TEXT_276);
d807 1
a807 1
    stringBuffer.append(TEXT_277);
d809 1
a809 1
    stringBuffer.append(TEXT_278);
d813 1
a813 1
    stringBuffer.append(TEXT_279);
d817 1
a817 1
    stringBuffer.append(TEXT_280);
d823 1
a823 1
    stringBuffer.append(TEXT_281);
d828 1
a828 1
    stringBuffer.append(TEXT_282);
d833 1
a833 1
    stringBuffer.append(TEXT_283);
d837 1
a837 1
    stringBuffer.append(TEXT_284);
d839 1
a839 1
    stringBuffer.append(TEXT_285);
d841 1
a841 1
    stringBuffer.append(TEXT_286);
d843 1
a843 1
    stringBuffer.append(TEXT_287);
d845 1
a845 1
    stringBuffer.append(TEXT_288);
d847 1
a847 1
    stringBuffer.append(TEXT_289);
d849 1
a849 1
    stringBuffer.append(TEXT_290);
d851 1
a851 1
    stringBuffer.append(TEXT_291);
d853 1
a853 1
    stringBuffer.append(TEXT_292);
d855 1
a855 1
    stringBuffer.append(TEXT_293);
d857 1
a857 1
    stringBuffer.append(TEXT_294);
d859 1
a859 1
    stringBuffer.append(TEXT_295);
d863 3
a865 3
    stringBuffer.append(TEXT_296);
    stringBuffer.append(TEXT_297);
    stringBuffer.append(TEXT_298);
d867 1
a867 1
    stringBuffer.append(TEXT_299);
d869 1
a869 1
    stringBuffer.append(TEXT_300);
d871 3
a873 3
    stringBuffer.append(TEXT_301);
    stringBuffer.append(TEXT_302);
    stringBuffer.append(TEXT_303);
d875 1
a875 1
    stringBuffer.append(TEXT_304);
d877 1
a877 1
    stringBuffer.append(TEXT_305);
d879 1
a879 1
    stringBuffer.append(TEXT_306);
d881 3
a883 3
    stringBuffer.append(TEXT_307);
    stringBuffer.append(TEXT_308);
    stringBuffer.append(TEXT_309);
d885 1
a885 1
    stringBuffer.append(TEXT_310);
d887 1
a887 1
    stringBuffer.append(TEXT_311);
@


1.22
log
@[164018]: Add<>Command and Clone<>Command moved to separate classes;
Common methods from edit policies moved to runtime superclasses
@
text
@d682 3
@


1.21
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@d40 223
a262 223
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_23 = " extends ";
  protected final String TEXT_24 = " implements ";
  protected final String TEXT_25 = " {";
  protected final String TEXT_26 = NL;
  protected final String TEXT_27 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_28 = ";";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_30 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSelectable() {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_31 = " getModelChildren() {" + NL + "\t\t";
  protected final String TEXT_32 = " style = (";
  protected final String TEXT_33 = ") getDiagramNode().getStyle(";
  protected final String TEXT_34 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\treturn ";
  protected final String TEXT_35 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t\treturn getDiagramNode().getChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_36 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_37 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_38 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_39 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_40 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_41 = " createChangeConstraintCommand(final ";
  protected final String TEXT_42 = " request, final ";
  protected final String TEXT_43 = " child, Object constraint) {";
  protected final String TEXT_44 = NL;
  protected final String TEXT_45 = "\t\t\t\tfinal ";
  protected final String TEXT_46 = " node = (";
  protected final String TEXT_47 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_48 = " emfCommand = new ";
  protected final String TEXT_49 = "(node, request, ((";
  protected final String TEXT_50 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_51 = "(";
  protected final String TEXT_52 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_53 = " createChangeConstraintCommand(";
  protected final String TEXT_54 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_55 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_56 = NL;
  protected final String TEXT_57 = "protected ";
  protected final String TEXT_58 = " createChildEditPolicy(";
  protected final String TEXT_59 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_60 = " result = child.getEditPolicy(";
  protected final String TEXT_61 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}";
  protected final String TEXT_62 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_63 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_64 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_65 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_66 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_67 = " createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_68 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_69 = NL;
  protected final String TEXT_70 = "protected ";
  protected final String TEXT_71 = " createChildEditPolicy(";
  protected final String TEXT_72 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_73 = " result = child.getEditPolicy(";
  protected final String TEXT_74 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}";
  protected final String TEXT_75 = NL;
  protected final String TEXT_76 = NL + "protected ";
  protected final String TEXT_77 = " createAddCommand(final ";
  protected final String TEXT_78 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_79 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_80 = " childNode = (";
  protected final String TEXT_81 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_82 = " editingDomain = ";
  protected final String TEXT_83 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_84 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_85 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int visualID = ";
  protected final String TEXT_86 = ".getVisualID(childNode);" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_87 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_88 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_89 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_90 = NL + "\t\t\tcase ";
  protected final String TEXT_91 = ".VISUAL_ID:" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t";
  protected final String TEXT_92 = " result = new ";
  protected final String TEXT_93 = "();" + NL + "\t\t\t\t\t";
  protected final String TEXT_94 = " element = childNode.getElement();";
  protected final String TEXT_95 = NL + "\t\t\t\t\tswitch (visualID) {";
  protected final String TEXT_96 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_97 = ".VISUAL_ID:";
  protected final String TEXT_98 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_99 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_100 = ".eINSTANCE.get";
  protected final String TEXT_101 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_102 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_103 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_104 = ".eINSTANCE.get";
  protected final String TEXT_105 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_106 = ".UNSET_VALUE));";
  protected final String TEXT_107 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_108 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_109 = ".eINSTANCE.get";
  protected final String TEXT_110 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_111 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_112 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_113 = ".eINSTANCE.get";
  protected final String TEXT_114 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_115 = ".UNSET_VALUE));";
  protected final String TEXT_116 = NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_117 = NL + "\t\t\t\t\t}\t";
  protected final String TEXT_118 = NL;
  protected final String TEXT_119 = NL + "\t\tif (";
  protected final String TEXT_120 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_121 = NL + "\t\t}";
  protected final String TEXT_122 = NL + "\t\tif (";
  protected final String TEXT_123 = ".size() >= ";
  protected final String TEXT_124 = ".eINSTANCE.get";
  protected final String TEXT_125 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_126 = NL + "\t\t}";
  protected final String TEXT_127 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_128 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_129 = ".getElement(), ";
  protected final String TEXT_130 = ".eINSTANCE.get";
  protected final String TEXT_131 = "(), element));";
  protected final String TEXT_132 = NL;
  protected final String TEXT_133 = NL + "\t\tif (";
  protected final String TEXT_134 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_135 = NL + "\t\t}";
  protected final String TEXT_136 = NL + "\t\tif (";
  protected final String TEXT_137 = ".size() >= ";
  protected final String TEXT_138 = ".eINSTANCE.get";
  protected final String TEXT_139 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_140 = NL + "\t\t}";
  protected final String TEXT_141 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_142 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_143 = ".getElement(), ";
  protected final String TEXT_144 = ".eINSTANCE.get";
  protected final String TEXT_145 = "(), element));";
  protected final String TEXT_146 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_147 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_148 = "(";
  protected final String TEXT_149 = "));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_150 = ".create(editingDomain, ";
  protected final String TEXT_151 = ", ";
  protected final String TEXT_152 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_153 = "(childNode, ";
  protected final String TEXT_154 = "null";
  protected final String TEXT_155 = "(";
  protected final String TEXT_156 = ") constraint";
  protected final String TEXT_157 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_158 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_159 = "(";
  protected final String TEXT_160 = ", element, ";
  protected final String TEXT_161 = "null";
  protected final String TEXT_162 = "((";
  protected final String TEXT_163 = ") constraint).getCopy().union(new ";
  protected final String TEXT_164 = "(";
  protected final String TEXT_165 = ", ";
  protected final String TEXT_166 = "))";
  protected final String TEXT_167 = ", ";
  protected final String TEXT_168 = ".INSTANCE));";
  protected final String TEXT_169 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_170 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_171 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_172 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_173 = NL;
  protected final String TEXT_174 = NL + "protected ";
  protected final String TEXT_175 = " getCloneCommand(";
  protected final String TEXT_176 = " request) {" + NL + "\t";
  protected final String TEXT_177 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_178 = " command = new ";
  protected final String TEXT_179 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_180 = " childPart;" + NL + "\t";
  protected final String TEXT_181 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_182 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_183 = " createCloneCommand(final ";
  protected final String TEXT_184 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_185 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_186 = " childNode = (";
  protected final String TEXT_187 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_188 = " editingDomain = ";
  protected final String TEXT_189 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_190 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_191 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_192 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_193 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_194 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_195 = NL + "\t\t\tcase ";
  protected final String TEXT_196 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_197 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_198 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_199 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_200 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_201 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_202 = NL;
  protected final String TEXT_203 = NL + "\t\tif (";
  protected final String TEXT_204 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_205 = NL + "\t\t}";
  protected final String TEXT_206 = NL + "\t\tif (";
  protected final String TEXT_207 = ".size() >= ";
  protected final String TEXT_208 = ".eINSTANCE.get";
  protected final String TEXT_209 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_210 = NL + "\t\t}";
  protected final String TEXT_211 = NL;
  protected final String TEXT_212 = NL + "\t\tif (";
  protected final String TEXT_213 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_214 = NL + "\t\t}";
  protected final String TEXT_215 = NL + "\t\tif (";
  protected final String TEXT_216 = ".size() >= ";
  protected final String TEXT_217 = ".eINSTANCE.get";
  protected final String TEXT_218 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_219 = NL + "\t\t}";
  protected final String TEXT_220 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_221 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_222 = " result = (";
  protected final String TEXT_223 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_224 = "();";
  protected final String TEXT_225 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_226 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_227 = ".getElement(), ";
  protected final String TEXT_228 = ".eINSTANCE.get";
  protected final String TEXT_229 = "(), result));";
  protected final String TEXT_230 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_231 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_232 = ".getElement(), ";
  protected final String TEXT_233 = ".eINSTANCE.get";
  protected final String TEXT_234 = "(), result));";
  protected final String TEXT_235 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_236 = "(";
  protected final String TEXT_237 = ", result, ";
  protected final String TEXT_238 = "null";
  protected final String TEXT_239 = "((";
  protected final String TEXT_240 = ") constraint).getCopy().union(new ";
  protected final String TEXT_241 = "(";
  protected final String TEXT_242 = ", ";
  protected final String TEXT_243 = "))";
d264 11
a274 11
  protected final String TEXT_245 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_246 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_247 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_248 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_249 = NL + "\t\t\tprotected ";
  protected final String TEXT_250 = " getCreateCommand(CreateRequest request) {";
  protected final String TEXT_251 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_252 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_253 = " requestEx = (";
  protected final String TEXT_254 = ") request;" + NL + "\t\t\t\t\tif (!";
  protected final String TEXT_255 = ".MODEL_ID.equals(requestEx.getModelID())) {" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
d276 55
a330 180
  protected final String TEXT_257 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_258 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_259 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_260 = "((View) getModel(), requestEx";
  protected final String TEXT_261 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_262 = ")getConstraintFor(request)";
  protected final String TEXT_263 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_264 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_265 = "(";
  protected final String TEXT_266 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_267 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_268 = NL;
  protected final String TEXT_269 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_270 = "\", new ";
  protected final String TEXT_271 = "()); //$NON-NLS-1$";
  protected final String TEXT_272 = NL;
  protected final String TEXT_273 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_274 = ".OPEN_ROLE";
  protected final String TEXT_275 = " + \"";
  protected final String TEXT_276 = "\" ";
  protected final String TEXT_277 = ", new ";
  protected final String TEXT_278 = "());";
  protected final String TEXT_279 = NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the selection handles that should be contributed to the parent when it becomes selected." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_280 = " createSelectionHandles() {";
  protected final String TEXT_281 = NL + "\t\treturn ";
  protected final String TEXT_282 = ".singletonList(new ";
  protected final String TEXT_283 = "(this, getTitleName()));";
  protected final String TEXT_284 = NL + "\t\treturn ";
  protected final String TEXT_285 = ".singletonList(new ";
  protected final String TEXT_286 = "(this, getTitleName()));";
  protected final String TEXT_287 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_288 = " req) {";
  protected final String TEXT_289 = NL;
  protected final String TEXT_290 = "if (";
  protected final String TEXT_291 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_292 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {";
  protected final String TEXT_293 = NL + "\t\treturn \"";
  protected final String TEXT_294 = "\";";
  protected final String TEXT_295 = NL + "\t\treturn \"\";\t//$NON-NLS-1$";
  protected final String TEXT_296 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_297 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_298 = " result = new ";
  protected final String TEXT_299 = "();" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_300 = "());" + NL + "\t\t";
  protected final String TEXT_301 = " scrollPane = new ";
  protected final String TEXT_302 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_303 = NL + "\t\t";
  protected final String TEXT_304 = " viewport = new ";
  protected final String TEXT_305 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_306 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_307 = "());";
  protected final String TEXT_308 = NL + "\t\t";
  protected final String TEXT_309 = " viewport = new ";
  protected final String TEXT_310 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_311 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_312 = "());";
  protected final String TEXT_313 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_314 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_315 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_316 = "(this);" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}";
  protected final String TEXT_317 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_318 = NL;
  protected final String TEXT_319 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_320 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_321 = " domainModelEditDomain = ";
  protected final String TEXT_322 = ".getEditingDomain(";
  protected final String TEXT_323 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_324 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_325 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_326 = " {";
  protected final String TEXT_327 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_328 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_329 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_330 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_331 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_332 = " createFilter() {";
  protected final String TEXT_333 = NL + "\t\t\t";
  protected final String TEXT_334 = " filter = ";
  protected final String TEXT_335 = ".createFeatureFilter(";
  protected final String TEXT_336 = ".eINSTANCE.get";
  protected final String TEXT_337 = "());";
  protected final String TEXT_338 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_339 = ".createFeatureFilter(";
  protected final String TEXT_340 = ".eINSTANCE.get";
  protected final String TEXT_341 = "()));";
  protected final String TEXT_342 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_343 = ".createNotifierFilter(";
  protected final String TEXT_344 = ".getElement()));";
  protected final String TEXT_345 = NL + "\t\t\t";
  protected final String TEXT_346 = " filter = ";
  protected final String TEXT_347 = ".createNotifierFilter(";
  protected final String TEXT_348 = ".getElement());";
  protected final String TEXT_349 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_350 = NL + "\t\t\t";
  protected final String TEXT_351 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_352 = NL + "\t\t\t";
  protected final String TEXT_353 = " filter = ";
  protected final String TEXT_354 = ".NOT_TOUCH;";
  protected final String TEXT_355 = NL + "\t\t\treturn filter;";
  protected final String TEXT_356 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_357 = " getCreateNotationalElementCommand(";
  protected final String TEXT_358 = " descriptor) {";
  protected final String TEXT_359 = NL;
  protected final String TEXT_360 = "\t\t\t";
  protected final String TEXT_361 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_362 = NL + "\t\t\tcase ";
  protected final String TEXT_363 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_364 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_365 = "(";
  protected final String TEXT_366 = ", domainElement, ";
  protected final String TEXT_367 = "new ";
  protected final String TEXT_368 = "(0, 0, ";
  protected final String TEXT_369 = ", ";
  protected final String TEXT_370 = ")";
  protected final String TEXT_371 = NL + "null";
  protected final String TEXT_372 = ", ";
  protected final String TEXT_373 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_374 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_375 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_376 = " getSemanticChildNodes() {";
  protected final String TEXT_377 = NL;
  protected final String TEXT_378 = NL + "\treturn ";
  protected final String TEXT_379 = ".EMPTY_LIST;";
  protected final String TEXT_380 = NL + "\t";
  protected final String TEXT_381 = " result = new ";
  protected final String TEXT_382 = "();";
  protected final String TEXT_383 = NL + "\t";
  protected final String TEXT_384 = " viewObject = ";
  protected final String TEXT_385 = ";" + NL + "\t";
  protected final String TEXT_386 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_387 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_388 = NL + "\tfor(";
  protected final String TEXT_389 = " it = ";
  protected final String TEXT_390 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_391 = ") it.next();";
  protected final String TEXT_392 = NL + "\tnextValue = (";
  protected final String TEXT_393 = ")";
  protected final String TEXT_394 = ";";
  protected final String TEXT_395 = NL + "\tnodeVID = ";
  protected final String TEXT_396 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_397 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_398 = NL + "\tcase ";
  protected final String TEXT_399 = ".VISUAL_ID: {";
  protected final String TEXT_400 = NL + "\tif (";
  protected final String TEXT_401 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_402 = NL + "\t\tresult.add(new ";
  protected final String TEXT_403 = "(nextValue, nodeVID));";
  protected final String TEXT_404 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_405 = NL + "\t\t}";
  protected final String TEXT_406 = NL + "\t}";
  protected final String TEXT_407 = NL + "\t}";
  protected final String TEXT_408 = NL + "\treturn result;";
  protected final String TEXT_409 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_410 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_411 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_412 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_413 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_414 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_415 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_416 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_417 = " domainModelEditDomain = ";
  protected final String TEXT_418 = ".getEditingDomain(";
  protected final String TEXT_419 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_420 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_421 = NL;
  protected final String TEXT_422 = NL;
  protected final String TEXT_423 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_424 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_425 = " feature, ";
  protected final String TEXT_426 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_427 = NL;
  protected final String TEXT_428 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_429 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_430 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_431 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_432 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_433 = NL;
  protected final String TEXT_434 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_435 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_436 = NL;
d437 1
a437 26
    
class RelatedNodesFinder {
	private HashMap<GenClass, Collection<GenNode>> myCache = new HashMap<GenClass, Collection<GenNode>>();
	private final GenDiagram myDiagram;

	public RelatedNodesFinder(GenDiagram genDiagram) {
		myDiagram = genDiagram;
	}

	public Collection<GenNode> getRelatedGenNodes(GenClass genClass) {
		Collection<GenNode> result = myCache.get(genClass);
		if (result == null) {
			result = new LinkedList<GenNode>();
			myCache.put(genClass, result);
			for(Iterator it = myDiagram.getAllNodes().iterator(); it.hasNext(); ) {
				GenNode next = (GenNode) it.next();
				if (genClass.equals(next.getDomainMetaClass())) {
					result.add(next);
				}
			}
		}
		return result;
	}
}
RelatedNodesFinder myRelatedNodesFinder = new RelatedNodesFinder(genDiagram);

d439 1
a439 1
    stringBuffer.append(genCompartment.getEditPartClassName());
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart"));
a442 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_25);
d445 1
d447 1
d449 1
a449 1
    stringBuffer.append(genCommonBase.getVisualID());
d451 1
a451 1
    }
d453 1
a453 1
    stringBuffer.append(genCompartment.getEditPartClassName());
d455 1
a455 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d459 1
a459 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d463 1
a463 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d469 1
a469 1
    if (!genCompartment.isListLayout()) {
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.XYLayoutEditPolicy"));
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
a478 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d481 1
d485 1
a485 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ChangeBoundsCommand"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d495 1
a495 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d497 1
a497 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d503 1
d505 2
a507 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d511 2
a513 2
    stringBuffer.append(TEXT_61);
    } else {
d515 1
a515 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy"));
d519 1
a519 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d521 1
a521 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d523 1
a523 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a524 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d527 1
d529 2
a531 2
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a534 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_74);
d541 1
a541 1
    stringBuffer.append(TEXT_75);
d545 2
d548 1
a548 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d550 1
a550 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d556 1
a556 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d560 1
a560 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d562 2
a564 2
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a569 4
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_89);
d574 4
d579 1
a579 1
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
d581 1
a581 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d583 1
a583 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d585 1
a585 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d587 1
a587 5
    
		{
			Collection<GenNode> relatedNodes = myRelatedNodesFinder.getRelatedGenNodes(next.getDomainMetaClass());
			if (relatedNodes.size() != 1) {

d590 1
a590 6
			}
			for(GenNode nextRelated : relatedNodes) {
				TypeModelFacet facet = nextRelated.getModelFacet();
				GenFeature childFeature = facet.getChildMetaFeature();
				GenFeature containmentFeature = facet.getContainmentMetaFeature();
				if (relatedNodes.size() != 1) {
d593 1
a593 1
    stringBuffer.append(importManager.getImportedName(nextRelated.getEditPartQualifiedClassName()));
d595 1
a595 5
    
				}
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					if (childFeature.getEcoreFeature().isMany()) {

a596 217
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_101);
    
					} else {

    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_106);
    
					}
				}
				if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_110);
    
				} else {

    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_115);
    
				}
				if (relatedNodes.size() != 1) {

    stringBuffer.append(TEXT_116);
    
				}
			}	//for(GenNode nextRelated : relatedNodes)
			if (relatedNodes.size() != 1) {

    stringBuffer.append(TEXT_117);
    /*switch(visualID)*/
    
			}
			TypeModelFacet facet = next.getModelFacet();
			GenFeature childFeature = facet.getChildMetaFeature();
			GenFeature containmentFeature = facet.getContainmentMetaFeature();
			if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
				GenFeature _feature = childFeature;
				String _ownerInstance = _getViewCode + ".getElement()";
				String _exceedsUpperBound = "return " + importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand") + ".INSTANCE;";
				GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_118);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_119);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_120);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_121);
    
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_122);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_125);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_126);
    
	}
}

    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_131);
    
			}
			{
				GenFeature _feature = containmentFeature;
				String _ownerInstance = _getViewCode + ".getElement()";
				String _exceedsUpperBound = "return " + importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand") + ".INSTANCE;";
				GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_132);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_133);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_135);
    
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_136);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_139);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_140);
    
	}
}

    
			}

    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_145);
    
		}	//local declaration for related nodes.

    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ExpandDrawerCommand"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.SetBoundsCommand"));
    stringBuffer.append(TEXT_153);
    if (isListLayout) {
    stringBuffer.append(TEXT_154);
    } else {
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_156);
    }
    stringBuffer.append(TEXT_157);
    
		{
			int defaultWidth = 40;
			int defaultHeight = 40;
			DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
			if (defSizeAttrs != null) {
				defaultWidth = defSizeAttrs.getWidth();
				defaultHeight = defSizeAttrs.getHeight();
			}

    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_160);
    if (isListLayout) {
    stringBuffer.append(TEXT_161);
    } else {
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_165);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_166);
    }
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_168);
    
		}

    stringBuffer.append(TEXT_169);
    
	}	//for

    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_172);
d600 1
a600 4
    stringBuffer.append(TEXT_173);
    
/* delegation from getCloneCommand to createCloneCommand is 100% analogous to delegation from getAddCommand() to createAddCommand() in ConstrainedLayoutEditPolicy. */

d604 1
a604 1
    stringBuffer.append(TEXT_174);
d606 1
a606 17
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand"));
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand"));
    stringBuffer.append(TEXT_179);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_183);
d608 1
a608 1
    stringBuffer.append(TEXT_184);
d610 1
a610 1
    stringBuffer.append(TEXT_185);
d612 1
a612 1
    stringBuffer.append(TEXT_186);
d614 1
a614 1
    stringBuffer.append(TEXT_187);
d616 1
a616 1
    stringBuffer.append(TEXT_188);
d618 1
a618 1
    stringBuffer.append(TEXT_189);
d620 1
a620 1
    stringBuffer.append(TEXT_190);
d622 1
a622 1
    stringBuffer.append(TEXT_191);
d624 1
a624 1
    stringBuffer.append(TEXT_192);
d626 1
a626 1
    stringBuffer.append(TEXT_193);
d628 1
a628 1
    stringBuffer.append(TEXT_194);
a631 3
		TypeModelFacet facet = next.getModelFacet();
		GenFeature childFeature = facet.getChildMetaFeature();
		GenFeature containmentFeature = facet.getContainmentMetaFeature();
d633 1
a633 1
    stringBuffer.append(TEXT_195);
d635 3
a637 98
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CommandWrapper"));
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.CopyCommand"));
    stringBuffer.append(TEXT_201);
    
		if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
			GenFeature _feature = childFeature;
			String _ownerInstance = _getViewCode + ".getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_202);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_203);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_204);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_205);
    
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_206);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_209);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_210);
    
	}
}

    
		}
		{
			GenFeature _feature = containmentFeature;
			String _ownerInstance = _getViewCode + ".getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_211);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_212);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_213);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_214);
    
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_215);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_217);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_218);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_219);
    
	}
}

    
		}

    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_224);
    
		if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {

    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_226);
d639 1
a639 32
    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_228);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_229);
    
		}

    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_233);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_234);
    
		{
			int defaultWidth = 40;
			int defaultHeight = 40;
			DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
			if (defSizeAttrs != null) {
				defaultWidth = defSizeAttrs.getWidth();
				defaultHeight = defSizeAttrs.getHeight();
			}

    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_236);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_237);
d641 1
a641 1
    stringBuffer.append(TEXT_238);
d643 1
a643 1
    stringBuffer.append(TEXT_239);
d645 1
a645 7
    stringBuffer.append(TEXT_240);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_241);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_242);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_243);
d647 1
a647 3
    stringBuffer.append(TEXT_244);
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_245);
a648 1
		}
d651 1
a651 1
    stringBuffer.append(TEXT_246);
d653 1
a653 1
    stringBuffer.append(TEXT_247);
d655 1
a655 1
    stringBuffer.append(TEXT_248);
d662 1
a662 1
    stringBuffer.append(TEXT_249);
d664 1
a664 1
    stringBuffer.append(TEXT_250);
d666 1
a666 1
    stringBuffer.append(TEXT_251);
d668 1
a668 1
    stringBuffer.append(TEXT_252);
d670 1
a670 1
    stringBuffer.append(TEXT_253);
d672 1
a672 1
    stringBuffer.append(TEXT_254);
d674 1
a674 1
    stringBuffer.append(TEXT_255);
d676 1
a676 1
    stringBuffer.append(TEXT_256);
d678 1
a678 1
    stringBuffer.append(TEXT_257);
d683 1
a683 1
    stringBuffer.append(TEXT_258);
d685 1
a685 1
    stringBuffer.append(TEXT_259);
d687 1
a687 1
    stringBuffer.append(TEXT_260);
d689 1
a689 1
    stringBuffer.append(TEXT_261);
d691 1
a691 1
    stringBuffer.append(TEXT_262);
d693 1
a693 1
    stringBuffer.append(TEXT_263);
d697 1
a697 1
    stringBuffer.append(TEXT_264);
d699 1
a699 1
    stringBuffer.append(TEXT_265);
d701 1
a701 1
    stringBuffer.append(TEXT_266);
d703 1
a703 1
    stringBuffer.append(TEXT_267);
d706 1
a706 1
    stringBuffer.append(TEXT_268);
d710 1
a710 1
    stringBuffer.append(TEXT_269);
d712 1
a712 1
    stringBuffer.append(TEXT_270);
d714 1
a714 1
    stringBuffer.append(TEXT_271);
d716 1
a716 1
    stringBuffer.append(TEXT_272);
d724 1
a724 1
    stringBuffer.append(TEXT_273);
d726 1
a726 1
    stringBuffer.append(TEXT_274);
d728 1
a728 1
    stringBuffer.append(TEXT_275);
d730 1
a730 1
    stringBuffer.append(TEXT_276);
d732 1
a732 1
    stringBuffer.append(TEXT_277);
d734 1
a734 1
    stringBuffer.append(TEXT_278);
d740 1
a740 1
    stringBuffer.append(TEXT_279);
d742 1
a742 1
    stringBuffer.append(TEXT_280);
d746 1
a746 1
    stringBuffer.append(TEXT_281);
d748 1
a748 1
    stringBuffer.append(TEXT_282);
d750 1
a750 1
    stringBuffer.append(TEXT_283);
d754 1
a754 1
    stringBuffer.append(TEXT_284);
d756 1
a756 1
    stringBuffer.append(TEXT_285);
d758 1
a758 1
    stringBuffer.append(TEXT_286);
d762 1
a762 1
    stringBuffer.append(TEXT_287);
d764 3
a766 3
    stringBuffer.append(TEXT_288);
    stringBuffer.append(TEXT_289);
    stringBuffer.append(TEXT_290);
d768 1
a768 1
    stringBuffer.append(TEXT_291);
d770 1
a770 1
    stringBuffer.append(TEXT_292);
d774 1
a774 1
    stringBuffer.append(TEXT_293);
d776 1
a776 1
    stringBuffer.append(TEXT_294);
d780 1
a780 1
    stringBuffer.append(TEXT_295);
d784 1
a784 1
    stringBuffer.append(TEXT_296);
d786 1
a786 1
    stringBuffer.append(TEXT_297);
d788 1
a788 1
    stringBuffer.append(TEXT_298);
d790 1
a790 1
    stringBuffer.append(TEXT_299);
d792 1
a792 1
    stringBuffer.append(TEXT_300);
d794 1
a794 1
    stringBuffer.append(TEXT_301);
d796 1
a796 1
    stringBuffer.append(TEXT_302);
d798 1
a798 1
    stringBuffer.append(TEXT_303);
d800 1
a800 1
    stringBuffer.append(TEXT_304);
d802 1
a802 1
    stringBuffer.append(TEXT_305);
d804 1
a804 1
    stringBuffer.append(TEXT_306);
d806 1
a806 1
    stringBuffer.append(TEXT_307);
d808 1
a808 1
    stringBuffer.append(TEXT_308);
d810 1
a810 1
    stringBuffer.append(TEXT_309);
d812 1
a812 1
    stringBuffer.append(TEXT_310);
d814 1
a814 1
    stringBuffer.append(TEXT_311);
d816 1
a816 1
    stringBuffer.append(TEXT_312);
d818 1
a818 1
    stringBuffer.append(TEXT_313);
d822 1
a822 1
    stringBuffer.append(TEXT_314);
d824 1
a824 1
    stringBuffer.append(TEXT_315);
d826 1
a826 1
    stringBuffer.append(TEXT_316);
d830 1
a830 1
    stringBuffer.append(TEXT_317);
d837 2
a838 2
    stringBuffer.append(TEXT_318);
    stringBuffer.append(TEXT_319);
d840 1
a840 1
    stringBuffer.append(TEXT_320);
d842 1
a842 1
    stringBuffer.append(TEXT_321);
d844 1
a844 1
    stringBuffer.append(TEXT_322);
d846 1
a846 1
    stringBuffer.append(TEXT_323);
d848 1
a848 1
    stringBuffer.append(TEXT_324);
d850 1
a850 1
    stringBuffer.append(TEXT_325);
d852 1
a852 1
    stringBuffer.append(TEXT_326);
d867 1
a867 1
    stringBuffer.append(TEXT_327);
d869 1
a869 1
    stringBuffer.append(TEXT_328);
d871 1
a871 1
    stringBuffer.append(TEXT_329);
d873 1
a873 1
    stringBuffer.append(TEXT_330);
d877 1
a877 1
    stringBuffer.append(TEXT_331);
d879 1
a879 1
    stringBuffer.append(TEXT_332);
d898 1
a898 1
    stringBuffer.append(TEXT_333);
d900 1
a900 1
    stringBuffer.append(TEXT_334);
d902 1
a902 1
    stringBuffer.append(TEXT_335);
d904 1
a904 1
    stringBuffer.append(TEXT_336);
d906 1
a906 1
    stringBuffer.append(TEXT_337);
d910 1
a910 1
    stringBuffer.append(TEXT_338);
d912 1
a912 1
    stringBuffer.append(TEXT_339);
d914 1
a914 1
    stringBuffer.append(TEXT_340);
d916 1
a916 1
    stringBuffer.append(TEXT_341);
d924 1
a924 1
    stringBuffer.append(TEXT_342);
d926 1
a926 1
    stringBuffer.append(TEXT_343);
d928 1
a928 1
    stringBuffer.append(TEXT_344);
d933 1
a933 1
    stringBuffer.append(TEXT_345);
d935 1
a935 1
    stringBuffer.append(TEXT_346);
d937 1
a937 1
    stringBuffer.append(TEXT_347);
d939 1
a939 1
    stringBuffer.append(TEXT_348);
d948 1
a948 1
    stringBuffer.append(TEXT_349);
d952 1
a952 1
    stringBuffer.append(TEXT_350);
d954 1
a954 1
    stringBuffer.append(TEXT_351);
d960 1
a960 1
    stringBuffer.append(TEXT_352);
d962 1
a962 1
    stringBuffer.append(TEXT_353);
d964 1
a964 1
    stringBuffer.append(TEXT_354);
d968 1
a968 1
    stringBuffer.append(TEXT_355);
d972 1
a972 1
    stringBuffer.append(TEXT_356);
d974 1
a974 1
    stringBuffer.append(TEXT_357);
d976 1
a976 1
    stringBuffer.append(TEXT_358);
d981 2
a982 2
    stringBuffer.append(TEXT_359);
    stringBuffer.append(TEXT_360);
d984 1
a984 1
    stringBuffer.append(TEXT_361);
d994 1
a994 1
    stringBuffer.append(TEXT_362);
d996 1
a996 1
    stringBuffer.append(TEXT_363);
d998 1
a998 1
    stringBuffer.append(TEXT_364);
d1000 1
a1000 1
    stringBuffer.append(TEXT_365);
d1002 1
a1002 1
    stringBuffer.append(TEXT_366);
d1013 1
a1013 1
    stringBuffer.append(TEXT_367);
d1015 1
a1015 1
    stringBuffer.append(TEXT_368);
d1017 1
a1017 1
    stringBuffer.append(TEXT_369);
d1019 1
a1019 1
    stringBuffer.append(TEXT_370);
d1023 1
a1023 1
    stringBuffer.append(TEXT_371);
d1027 1
a1027 1
    stringBuffer.append(TEXT_372);
d1029 1
a1029 1
    stringBuffer.append(TEXT_373);
d1033 1
a1033 1
    stringBuffer.append(TEXT_374);
d1037 1
a1037 1
    stringBuffer.append(TEXT_375);
d1039 2
a1040 2
    stringBuffer.append(TEXT_376);
    stringBuffer.append(TEXT_377);
d1044 1
a1044 1
    stringBuffer.append(TEXT_378);
d1046 1
a1046 1
    stringBuffer.append(TEXT_379);
d1050 1
a1050 1
    stringBuffer.append(TEXT_380);
d1052 1
a1052 1
    stringBuffer.append(TEXT_381);
d1054 1
a1054 1
    stringBuffer.append(TEXT_382);
d1072 1
a1072 1
    stringBuffer.append(TEXT_383);
d1074 1
a1074 1
    stringBuffer.append(TEXT_384);
d1076 1
a1076 1
    stringBuffer.append(TEXT_385);
d1078 1
a1078 1
    stringBuffer.append(TEXT_386);
d1080 1
a1080 1
    stringBuffer.append(TEXT_387);
d1089 1
a1089 1
    stringBuffer.append(TEXT_388);
d1091 1
a1091 1
    stringBuffer.append(TEXT_389);
d1093 1
a1093 1
    stringBuffer.append(TEXT_390);
d1095 1
a1095 1
    stringBuffer.append(TEXT_391);
d1099 1
a1099 1
    stringBuffer.append(TEXT_392);
d1101 1
a1101 1
    stringBuffer.append(TEXT_393);
d1103 1
a1103 1
    stringBuffer.append(TEXT_394);
d1107 1
a1107 1
    stringBuffer.append(TEXT_395);
d1109 1
a1109 1
    stringBuffer.append(TEXT_396);
d1114 1
a1114 1
    stringBuffer.append(TEXT_397);
d1121 1
a1121 1
    stringBuffer.append(TEXT_398);
d1123 1
a1123 1
    stringBuffer.append(TEXT_399);
d1127 1
a1127 1
    stringBuffer.append(TEXT_400);
d1129 1
a1129 1
    stringBuffer.append(TEXT_401);
d1133 1
a1133 1
    stringBuffer.append(TEXT_402);
d1135 1
a1135 1
    stringBuffer.append(TEXT_403);
d1139 1
a1139 1
    stringBuffer.append(TEXT_404);
d1143 1
a1143 1
    stringBuffer.append(TEXT_405);
d1149 1
a1149 1
    stringBuffer.append(TEXT_406);
d1154 1
a1154 1
    stringBuffer.append(TEXT_407);
d1159 1
a1159 1
    stringBuffer.append(TEXT_408);
d1163 1
a1163 1
    stringBuffer.append(TEXT_409);
d1165 1
a1165 1
    stringBuffer.append(TEXT_410);
d1167 1
a1167 1
    stringBuffer.append(TEXT_411);
d1169 1
a1169 1
    stringBuffer.append(TEXT_412);
d1171 1
a1171 1
    stringBuffer.append(TEXT_413);
d1173 1
a1173 1
    stringBuffer.append(TEXT_414);
d1175 1
a1175 1
    stringBuffer.append(TEXT_415);
d1177 1
a1177 1
    stringBuffer.append(TEXT_416);
d1179 1
a1179 1
    stringBuffer.append(TEXT_417);
d1181 1
a1181 1
    stringBuffer.append(TEXT_418);
d1183 1
a1183 1
    stringBuffer.append(TEXT_419);
d1185 1
a1185 1
    stringBuffer.append(TEXT_420);
d1189 3
a1191 3
    stringBuffer.append(TEXT_421);
    stringBuffer.append(TEXT_422);
    stringBuffer.append(TEXT_423);
d1193 1
a1193 1
    stringBuffer.append(TEXT_424);
d1195 1
a1195 1
    stringBuffer.append(TEXT_425);
d1197 3
a1199 3
    stringBuffer.append(TEXT_426);
    stringBuffer.append(TEXT_427);
    stringBuffer.append(TEXT_428);
d1201 1
a1201 1
    stringBuffer.append(TEXT_429);
d1203 1
a1203 1
    stringBuffer.append(TEXT_430);
d1205 1
a1205 1
    stringBuffer.append(TEXT_431);
d1207 3
a1209 3
    stringBuffer.append(TEXT_432);
    stringBuffer.append(TEXT_433);
    stringBuffer.append(TEXT_434);
d1211 1
a1211 1
    stringBuffer.append(TEXT_435);
d1213 1
a1213 1
    stringBuffer.append(TEXT_436);
@


1.20
log
@Ensure unselectability of the inner auxiliary edit parts by more standard GEF means (isSelectable() returns false instead of using EditPolicy with getHost() delegation)
@
text
@d71 67
a137 67
  protected final String TEXT_52 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_53 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_54 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = "protected ";
  protected final String TEXT_57 = " createChildEditPolicy(";
  protected final String TEXT_58 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_59 = " result = child.getEditPolicy(";
  protected final String TEXT_60 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}";
  protected final String TEXT_61 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_62 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_63 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_64 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_65 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_66 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_67 = NL;
  protected final String TEXT_68 = "protected ";
  protected final String TEXT_69 = " createChildEditPolicy(";
  protected final String TEXT_70 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_71 = " result = child.getEditPolicy(";
  protected final String TEXT_72 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}";
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = NL + "protected Command createAddCommand(final ";
  protected final String TEXT_75 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_76 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_77 = " childNode = (";
  protected final String TEXT_78 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_79 = " editingDomain = ";
  protected final String TEXT_80 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_81 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_82 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int visualID = ";
  protected final String TEXT_83 = ".getVisualID(childNode);" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_84 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_85 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_86 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_87 = NL + "\t\t\tcase ";
  protected final String TEXT_88 = ".VISUAL_ID:" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t";
  protected final String TEXT_89 = " result = new ";
  protected final String TEXT_90 = "();" + NL + "\t\t\t\t\t";
  protected final String TEXT_91 = " element = childNode.getElement();";
  protected final String TEXT_92 = NL + "\t\t\t\t\tswitch (visualID) {";
  protected final String TEXT_93 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_94 = ".VISUAL_ID:";
  protected final String TEXT_95 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_96 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_97 = ".eINSTANCE.get";
  protected final String TEXT_98 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_99 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_100 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_101 = ".eINSTANCE.get";
  protected final String TEXT_102 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_103 = ".UNSET_VALUE));";
  protected final String TEXT_104 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_105 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_106 = ".eINSTANCE.get";
  protected final String TEXT_107 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_108 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_109 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_110 = ".eINSTANCE.get";
  protected final String TEXT_111 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_112 = ".UNSET_VALUE));";
  protected final String TEXT_113 = NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_114 = NL + "\t\t\t\t\t}\t";
  protected final String TEXT_115 = NL;
  protected final String TEXT_116 = NL + "\t\tif (";
  protected final String TEXT_117 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_118 = NL + "\t\t}";
d139 13
a151 13
  protected final String TEXT_120 = ".size() >= ";
  protected final String TEXT_121 = ".eINSTANCE.get";
  protected final String TEXT_122 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_123 = NL + "\t\t}";
  protected final String TEXT_124 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_125 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_126 = ".getElement(), ";
  protected final String TEXT_127 = ".eINSTANCE.get";
  protected final String TEXT_128 = "(), element));";
  protected final String TEXT_129 = NL;
  protected final String TEXT_130 = NL + "\t\tif (";
  protected final String TEXT_131 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_132 = NL + "\t\t}";
d153 69
a221 69
  protected final String TEXT_134 = ".size() >= ";
  protected final String TEXT_135 = ".eINSTANCE.get";
  protected final String TEXT_136 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_137 = NL + "\t\t}";
  protected final String TEXT_138 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_139 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_140 = ".getElement(), ";
  protected final String TEXT_141 = ".eINSTANCE.get";
  protected final String TEXT_142 = "(), element));";
  protected final String TEXT_143 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_144 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_145 = "(";
  protected final String TEXT_146 = "));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_147 = ".create(editingDomain, ";
  protected final String TEXT_148 = ", ";
  protected final String TEXT_149 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_150 = "(childNode, ";
  protected final String TEXT_151 = "null";
  protected final String TEXT_152 = "(";
  protected final String TEXT_153 = ") constraint";
  protected final String TEXT_154 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_155 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_156 = "(";
  protected final String TEXT_157 = ", element, ";
  protected final String TEXT_158 = "null";
  protected final String TEXT_159 = "((";
  protected final String TEXT_160 = ") constraint).getCopy().union(new ";
  protected final String TEXT_161 = "(";
  protected final String TEXT_162 = ", ";
  protected final String TEXT_163 = "))";
  protected final String TEXT_164 = ", ";
  protected final String TEXT_165 = ".INSTANCE));";
  protected final String TEXT_166 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_167 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_168 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_169 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_170 = NL;
  protected final String TEXT_171 = NL + "protected ";
  protected final String TEXT_172 = " getCloneCommand(";
  protected final String TEXT_173 = " request) {" + NL + "\t";
  protected final String TEXT_174 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_175 = " command = new ";
  protected final String TEXT_176 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_177 = " childPart;" + NL + "\t";
  protected final String TEXT_178 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_179 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_180 = " createCloneCommand(final ";
  protected final String TEXT_181 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_182 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_183 = " childNode = (";
  protected final String TEXT_184 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_185 = " editingDomain = ";
  protected final String TEXT_186 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_187 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_188 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_189 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_190 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_191 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_192 = NL + "\t\t\tcase ";
  protected final String TEXT_193 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_194 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_195 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_196 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_197 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_198 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_199 = NL;
  protected final String TEXT_200 = NL + "\t\tif (";
  protected final String TEXT_201 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_202 = NL + "\t\t}";
d223 8
a230 8
  protected final String TEXT_204 = ".size() >= ";
  protected final String TEXT_205 = ".eINSTANCE.get";
  protected final String TEXT_206 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_207 = NL + "\t\t}";
  protected final String TEXT_208 = NL;
  protected final String TEXT_209 = NL + "\t\tif (";
  protected final String TEXT_210 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_211 = NL + "\t\t}";
d232 90
a321 90
  protected final String TEXT_213 = ".size() >= ";
  protected final String TEXT_214 = ".eINSTANCE.get";
  protected final String TEXT_215 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_216 = NL + "\t\t}";
  protected final String TEXT_217 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_218 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_219 = " result = (";
  protected final String TEXT_220 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_221 = "();";
  protected final String TEXT_222 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_223 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_224 = ".getElement(), ";
  protected final String TEXT_225 = ".eINSTANCE.get";
  protected final String TEXT_226 = "(), result));";
  protected final String TEXT_227 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_228 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_229 = ".getElement(), ";
  protected final String TEXT_230 = ".eINSTANCE.get";
  protected final String TEXT_231 = "(), result));";
  protected final String TEXT_232 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_233 = "(";
  protected final String TEXT_234 = ", result, ";
  protected final String TEXT_235 = "null";
  protected final String TEXT_236 = "((";
  protected final String TEXT_237 = ") constraint).getCopy().union(new ";
  protected final String TEXT_238 = "(";
  protected final String TEXT_239 = ", ";
  protected final String TEXT_240 = "))";
  protected final String TEXT_241 = ", ";
  protected final String TEXT_242 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_243 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_244 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_245 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_246 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_247 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_248 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_249 = " requestEx = (";
  protected final String TEXT_250 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_251 = " result = new ";
  protected final String TEXT_252 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_253 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_254 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_255 = "((View) getModel(), requestEx";
  protected final String TEXT_256 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_257 = ")getConstraintFor(request)";
  protected final String TEXT_258 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_259 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_260 = "(";
  protected final String TEXT_261 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_262 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_263 = NL;
  protected final String TEXT_264 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_265 = "\", new ";
  protected final String TEXT_266 = "()); //$NON-NLS-1$";
  protected final String TEXT_267 = NL;
  protected final String TEXT_268 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_269 = ".OPEN_ROLE";
  protected final String TEXT_270 = " + \"";
  protected final String TEXT_271 = "\" ";
  protected final String TEXT_272 = ", new ";
  protected final String TEXT_273 = "());";
  protected final String TEXT_274 = NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the selection handles that should be contributed to the parent when it becomes selected." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_275 = " createSelectionHandles() {";
  protected final String TEXT_276 = NL + "\t\treturn ";
  protected final String TEXT_277 = ".singletonList(new ";
  protected final String TEXT_278 = "(this, getTitleName()));";
  protected final String TEXT_279 = NL + "\t\treturn ";
  protected final String TEXT_280 = ".singletonList(new ";
  protected final String TEXT_281 = "(this, getTitleName()));";
  protected final String TEXT_282 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_283 = " req) {";
  protected final String TEXT_284 = NL;
  protected final String TEXT_285 = "if (";
  protected final String TEXT_286 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_287 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {";
  protected final String TEXT_288 = NL + "\t\treturn \"";
  protected final String TEXT_289 = "\";";
  protected final String TEXT_290 = NL + "\t\treturn \"\";\t//$NON-NLS-1$";
  protected final String TEXT_291 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_292 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_293 = " result = new ";
  protected final String TEXT_294 = "();" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_295 = "());" + NL + "\t\t";
  protected final String TEXT_296 = " scrollPane = new ";
  protected final String TEXT_297 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_298 = NL + "\t\t";
  protected final String TEXT_299 = " viewport = new ";
  protected final String TEXT_300 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_301 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_302 = "());";
d327 37
a363 37
  protected final String TEXT_308 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_309 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_310 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_311 = "(this);" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}";
  protected final String TEXT_312 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_313 = NL;
  protected final String TEXT_314 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_315 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_316 = " domainModelEditDomain = ";
  protected final String TEXT_317 = ".getEditingDomain(";
  protected final String TEXT_318 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_319 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_320 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_321 = " {";
  protected final String TEXT_322 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_323 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_324 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_325 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_326 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_327 = " createFilter() {";
  protected final String TEXT_328 = NL + "\t\t\t";
  protected final String TEXT_329 = " filter = ";
  protected final String TEXT_330 = ".createFeatureFilter(";
  protected final String TEXT_331 = ".eINSTANCE.get";
  protected final String TEXT_332 = "());";
  protected final String TEXT_333 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_334 = ".createFeatureFilter(";
  protected final String TEXT_335 = ".eINSTANCE.get";
  protected final String TEXT_336 = "()));";
  protected final String TEXT_337 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_338 = ".createNotifierFilter(";
  protected final String TEXT_339 = ".getElement()));";
  protected final String TEXT_340 = NL + "\t\t\t";
  protected final String TEXT_341 = " filter = ";
  protected final String TEXT_342 = ".createNotifierFilter(";
  protected final String TEXT_343 = ".getElement());";
  protected final String TEXT_344 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
d365 76
a440 76
  protected final String TEXT_346 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_347 = NL + "\t\t\t";
  protected final String TEXT_348 = " filter = ";
  protected final String TEXT_349 = ".NOT_TOUCH;";
  protected final String TEXT_350 = NL + "\t\t\treturn filter;";
  protected final String TEXT_351 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_352 = " getCreateNotationalElementCommand(";
  protected final String TEXT_353 = " descriptor) {";
  protected final String TEXT_354 = NL;
  protected final String TEXT_355 = "\t\t\t";
  protected final String TEXT_356 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_357 = NL + "\t\t\tcase ";
  protected final String TEXT_358 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_359 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_360 = "(";
  protected final String TEXT_361 = ", domainElement, ";
  protected final String TEXT_362 = "new ";
  protected final String TEXT_363 = "(0, 0, ";
  protected final String TEXT_364 = ", ";
  protected final String TEXT_365 = ")";
  protected final String TEXT_366 = NL + "null";
  protected final String TEXT_367 = ", ";
  protected final String TEXT_368 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_369 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_370 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_371 = " getSemanticChildNodes() {";
  protected final String TEXT_372 = NL;
  protected final String TEXT_373 = NL + "\treturn ";
  protected final String TEXT_374 = ".EMPTY_LIST;";
  protected final String TEXT_375 = NL + "\t";
  protected final String TEXT_376 = " result = new ";
  protected final String TEXT_377 = "();";
  protected final String TEXT_378 = NL + "\t";
  protected final String TEXT_379 = " viewObject = ";
  protected final String TEXT_380 = ";" + NL + "\t";
  protected final String TEXT_381 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_382 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_383 = NL + "\tfor(";
  protected final String TEXT_384 = " it = ";
  protected final String TEXT_385 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_386 = ") it.next();";
  protected final String TEXT_387 = NL + "\tnextValue = (";
  protected final String TEXT_388 = ")";
  protected final String TEXT_389 = ";";
  protected final String TEXT_390 = NL + "\tnodeVID = ";
  protected final String TEXT_391 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_392 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_393 = NL + "\tcase ";
  protected final String TEXT_394 = ".VISUAL_ID: {";
  protected final String TEXT_395 = NL + "\tif (";
  protected final String TEXT_396 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_397 = NL + "\t\tresult.add(new ";
  protected final String TEXT_398 = "(nextValue, nodeVID));";
  protected final String TEXT_399 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_400 = NL + "\t\t}";
  protected final String TEXT_401 = NL + "\t}";
  protected final String TEXT_402 = NL + "\t}";
  protected final String TEXT_403 = NL + "\treturn result;";
  protected final String TEXT_404 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_405 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_406 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_407 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_408 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_409 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_410 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_411 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_412 = " domainModelEditDomain = ";
  protected final String TEXT_413 = ".getEditingDomain(";
  protected final String TEXT_414 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_415 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_416 = NL;
  protected final String TEXT_417 = NL;
  protected final String TEXT_418 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_419 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_420 = " feature, ";
  protected final String TEXT_421 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
d442 14
a455 9
  protected final String TEXT_423 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_424 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_425 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_426 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_427 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_428 = NL;
  protected final String TEXT_429 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_430 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_431 = NL;
d647 2
d650 1
a650 1
    stringBuffer.append(TEXT_53);
a651 1
    stringBuffer.append(TEXT_54);
d654 1
d656 1
a656 1
    stringBuffer.append(TEXT_57);
a657 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d661 2
d664 1
a664 1
    stringBuffer.append(TEXT_61);
d666 1
a666 1
    stringBuffer.append(TEXT_62);
d668 1
a668 1
    stringBuffer.append(TEXT_63);
d670 1
a670 1
    stringBuffer.append(TEXT_64);
a671 2
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d673 1
d675 1
a676 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a677 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d681 2
d684 3
a686 1
    stringBuffer.append(TEXT_72);
d693 1
a693 1
    stringBuffer.append(TEXT_73);
d697 3
a699 1
    stringBuffer.append(TEXT_74);
d701 1
a701 1
    stringBuffer.append(TEXT_75);
d703 1
a703 1
    stringBuffer.append(TEXT_76);
d705 1
a705 1
    stringBuffer.append(TEXT_77);
d707 1
a707 1
    stringBuffer.append(TEXT_78);
d709 1
a709 1
    stringBuffer.append(TEXT_79);
d711 1
a711 1
    stringBuffer.append(TEXT_80);
d713 1
a713 1
    stringBuffer.append(TEXT_81);
d715 1
a715 1
    stringBuffer.append(TEXT_82);
d717 1
a717 1
    stringBuffer.append(TEXT_83);
d719 1
a719 1
    stringBuffer.append(TEXT_84);
d721 1
a721 1
    stringBuffer.append(TEXT_85);
d723 1
a723 1
    stringBuffer.append(TEXT_86);
d728 1
a728 1
    stringBuffer.append(TEXT_87);
d730 1
a730 1
    stringBuffer.append(TEXT_88);
d732 1
a732 1
    stringBuffer.append(TEXT_89);
d734 1
a734 1
    stringBuffer.append(TEXT_90);
d736 1
a736 1
    stringBuffer.append(TEXT_91);
d742 1
a742 1
    stringBuffer.append(TEXT_92);
d751 1
a751 1
    stringBuffer.append(TEXT_93);
d753 1
a753 1
    stringBuffer.append(TEXT_94);
d759 1
a759 1
    stringBuffer.append(TEXT_95);
d761 1
a761 1
    stringBuffer.append(TEXT_96);
d763 1
a763 1
    stringBuffer.append(TEXT_97);
d765 1
a765 1
    stringBuffer.append(TEXT_98);
d769 1
a769 1
    stringBuffer.append(TEXT_99);
d771 1
a771 1
    stringBuffer.append(TEXT_100);
d773 1
a773 1
    stringBuffer.append(TEXT_101);
d775 1
a775 1
    stringBuffer.append(TEXT_102);
d777 1
a777 1
    stringBuffer.append(TEXT_103);
d783 1
a783 1
    stringBuffer.append(TEXT_104);
d785 1
a785 1
    stringBuffer.append(TEXT_105);
d787 1
a787 1
    stringBuffer.append(TEXT_106);
d789 1
a789 1
    stringBuffer.append(TEXT_107);
d793 1
a793 1
    stringBuffer.append(TEXT_108);
d795 1
a795 1
    stringBuffer.append(TEXT_109);
d797 1
a797 1
    stringBuffer.append(TEXT_110);
d799 1
a799 1
    stringBuffer.append(TEXT_111);
d801 1
a801 1
    stringBuffer.append(TEXT_112);
d806 1
a806 1
    stringBuffer.append(TEXT_113);
d812 1
a812 1
    stringBuffer.append(TEXT_114);
d825 1
a825 1
    stringBuffer.append(TEXT_115);
d830 1
a830 1
    stringBuffer.append(TEXT_116);
d832 1
a832 1
    stringBuffer.append(TEXT_117);
d834 1
a834 1
    stringBuffer.append(TEXT_118);
d839 1
a839 1
    stringBuffer.append(TEXT_119);
d841 1
a841 1
    stringBuffer.append(TEXT_120);
d843 1
a843 1
    stringBuffer.append(TEXT_121);
d845 1
a845 1
    stringBuffer.append(TEXT_122);
d847 1
a847 1
    stringBuffer.append(TEXT_123);
d852 1
a852 1
    stringBuffer.append(TEXT_124);
d854 1
a854 1
    stringBuffer.append(TEXT_125);
d856 1
a856 1
    stringBuffer.append(TEXT_126);
d858 1
a858 1
    stringBuffer.append(TEXT_127);
d860 1
a860 1
    stringBuffer.append(TEXT_128);
d869 1
a869 1
    stringBuffer.append(TEXT_129);
d874 1
a874 1
    stringBuffer.append(TEXT_130);
d876 1
a876 1
    stringBuffer.append(TEXT_131);
d878 1
a878 1
    stringBuffer.append(TEXT_132);
d883 1
a883 1
    stringBuffer.append(TEXT_133);
d885 1
a885 1
    stringBuffer.append(TEXT_134);
d887 1
a887 1
    stringBuffer.append(TEXT_135);
d889 1
a889 1
    stringBuffer.append(TEXT_136);
d891 1
a891 1
    stringBuffer.append(TEXT_137);
d899 1
a899 1
    stringBuffer.append(TEXT_138);
d901 1
a901 1
    stringBuffer.append(TEXT_139);
d903 1
a903 1
    stringBuffer.append(TEXT_140);
d905 1
a905 1
    stringBuffer.append(TEXT_141);
d907 1
a907 1
    stringBuffer.append(TEXT_142);
d911 1
a911 1
    stringBuffer.append(TEXT_143);
d913 1
a913 1
    stringBuffer.append(TEXT_144);
d915 1
a915 1
    stringBuffer.append(TEXT_145);
d917 1
a917 1
    stringBuffer.append(TEXT_146);
d919 1
a919 1
    stringBuffer.append(TEXT_147);
d921 1
a921 1
    stringBuffer.append(TEXT_148);
d923 1
a923 1
    stringBuffer.append(TEXT_149);
d925 1
a925 1
    stringBuffer.append(TEXT_150);
d927 1
a927 1
    stringBuffer.append(TEXT_151);
d929 1
a929 1
    stringBuffer.append(TEXT_152);
d931 1
a931 1
    stringBuffer.append(TEXT_153);
d933 1
a933 1
    stringBuffer.append(TEXT_154);
d944 1
a944 1
    stringBuffer.append(TEXT_155);
d946 1
a946 1
    stringBuffer.append(TEXT_156);
d948 1
a948 1
    stringBuffer.append(TEXT_157);
d950 1
a950 1
    stringBuffer.append(TEXT_158);
d952 1
a952 1
    stringBuffer.append(TEXT_159);
d954 1
a954 1
    stringBuffer.append(TEXT_160);
d956 1
a956 1
    stringBuffer.append(TEXT_161);
d958 1
a958 1
    stringBuffer.append(TEXT_162);
d960 1
a960 1
    stringBuffer.append(TEXT_163);
d962 1
a962 1
    stringBuffer.append(TEXT_164);
d964 1
a964 1
    stringBuffer.append(TEXT_165);
d968 1
a968 1
    stringBuffer.append(TEXT_166);
d972 1
a972 1
    stringBuffer.append(TEXT_167);
d974 1
a974 1
    stringBuffer.append(TEXT_168);
d976 1
a976 1
    stringBuffer.append(TEXT_169);
d980 1
a980 1
    stringBuffer.append(TEXT_170);
d987 1
a987 1
    stringBuffer.append(TEXT_171);
d989 1
a989 1
    stringBuffer.append(TEXT_172);
d991 1
a991 1
    stringBuffer.append(TEXT_173);
d993 1
a993 1
    stringBuffer.append(TEXT_174);
d995 1
a995 1
    stringBuffer.append(TEXT_175);
d997 1
a997 1
    stringBuffer.append(TEXT_176);
d999 1
a999 1
    stringBuffer.append(TEXT_177);
d1001 1
a1001 1
    stringBuffer.append(TEXT_178);
d1003 1
a1003 1
    stringBuffer.append(TEXT_179);
d1005 1
a1005 1
    stringBuffer.append(TEXT_180);
d1007 1
a1007 1
    stringBuffer.append(TEXT_181);
d1009 1
a1009 1
    stringBuffer.append(TEXT_182);
d1011 1
a1011 1
    stringBuffer.append(TEXT_183);
d1013 1
a1013 1
    stringBuffer.append(TEXT_184);
d1015 1
a1015 1
    stringBuffer.append(TEXT_185);
d1017 1
a1017 1
    stringBuffer.append(TEXT_186);
d1019 1
a1019 1
    stringBuffer.append(TEXT_187);
d1021 1
a1021 1
    stringBuffer.append(TEXT_188);
d1023 1
a1023 1
    stringBuffer.append(TEXT_189);
d1025 1
a1025 1
    stringBuffer.append(TEXT_190);
d1027 1
a1027 1
    stringBuffer.append(TEXT_191);
d1035 1
a1035 1
    stringBuffer.append(TEXT_192);
d1037 1
a1037 1
    stringBuffer.append(TEXT_193);
d1039 1
a1039 1
    stringBuffer.append(TEXT_194);
d1041 1
a1041 1
    stringBuffer.append(TEXT_195);
d1043 1
a1043 1
    stringBuffer.append(TEXT_196);
d1045 1
a1045 1
    stringBuffer.append(TEXT_197);
d1047 1
a1047 1
    stringBuffer.append(TEXT_198);
d1055 1
a1055 1
    stringBuffer.append(TEXT_199);
d1060 1
a1060 1
    stringBuffer.append(TEXT_200);
d1062 1
a1062 1
    stringBuffer.append(TEXT_201);
d1064 1
a1064 1
    stringBuffer.append(TEXT_202);
d1069 1
a1069 1
    stringBuffer.append(TEXT_203);
d1071 1
a1071 1
    stringBuffer.append(TEXT_204);
d1073 1
a1073 1
    stringBuffer.append(TEXT_205);
d1075 1
a1075 1
    stringBuffer.append(TEXT_206);
d1077 1
a1077 1
    stringBuffer.append(TEXT_207);
d1090 1
a1090 1
    stringBuffer.append(TEXT_208);
d1095 1
a1095 1
    stringBuffer.append(TEXT_209);
d1097 1
a1097 1
    stringBuffer.append(TEXT_210);
d1099 1
a1099 1
    stringBuffer.append(TEXT_211);
d1104 1
a1104 1
    stringBuffer.append(TEXT_212);
d1106 1
a1106 1
    stringBuffer.append(TEXT_213);
d1108 1
a1108 1
    stringBuffer.append(TEXT_214);
d1110 1
a1110 1
    stringBuffer.append(TEXT_215);
d1112 1
a1112 1
    stringBuffer.append(TEXT_216);
d1120 1
a1120 1
    stringBuffer.append(TEXT_217);
d1122 1
a1122 1
    stringBuffer.append(TEXT_218);
d1124 1
a1124 1
    stringBuffer.append(TEXT_219);
d1126 1
a1126 1
    stringBuffer.append(TEXT_220);
d1128 1
a1128 1
    stringBuffer.append(TEXT_221);
d1132 1
a1132 1
    stringBuffer.append(TEXT_222);
d1134 1
a1134 1
    stringBuffer.append(TEXT_223);
d1136 1
a1136 1
    stringBuffer.append(TEXT_224);
d1138 1
a1138 1
    stringBuffer.append(TEXT_225);
d1140 1
a1140 1
    stringBuffer.append(TEXT_226);
d1144 1
a1144 1
    stringBuffer.append(TEXT_227);
d1146 1
a1146 1
    stringBuffer.append(TEXT_228);
d1148 1
a1148 1
    stringBuffer.append(TEXT_229);
d1150 1
a1150 1
    stringBuffer.append(TEXT_230);
d1152 1
a1152 1
    stringBuffer.append(TEXT_231);
d1163 1
a1163 1
    stringBuffer.append(TEXT_232);
d1165 1
a1165 1
    stringBuffer.append(TEXT_233);
d1167 1
a1167 1
    stringBuffer.append(TEXT_234);
d1169 1
a1169 1
    stringBuffer.append(TEXT_235);
d1171 1
a1171 1
    stringBuffer.append(TEXT_236);
d1173 1
a1173 1
    stringBuffer.append(TEXT_237);
d1175 1
a1175 1
    stringBuffer.append(TEXT_238);
d1177 1
a1177 1
    stringBuffer.append(TEXT_239);
d1179 1
a1179 1
    stringBuffer.append(TEXT_240);
d1181 1
a1181 1
    stringBuffer.append(TEXT_241);
d1183 1
a1183 1
    stringBuffer.append(TEXT_242);
d1188 1
a1188 1
    stringBuffer.append(TEXT_243);
d1190 1
a1190 1
    stringBuffer.append(TEXT_244);
d1192 1
a1192 1
    stringBuffer.append(TEXT_245);
d1199 3
a1201 1
    stringBuffer.append(TEXT_246);
d1203 1
a1203 1
    stringBuffer.append(TEXT_247);
d1205 1
a1205 1
    stringBuffer.append(TEXT_248);
d1207 1
a1207 1
    stringBuffer.append(TEXT_249);
d1209 3
a1211 1
    stringBuffer.append(TEXT_250);
d1213 1
a1213 1
    stringBuffer.append(TEXT_251);
d1215 1
a1215 1
    stringBuffer.append(TEXT_252);
d1220 1
a1220 1
    stringBuffer.append(TEXT_253);
d1222 1
a1222 1
    stringBuffer.append(TEXT_254);
d1224 1
a1224 1
    stringBuffer.append(TEXT_255);
d1226 1
a1226 1
    stringBuffer.append(TEXT_256);
d1228 1
a1228 1
    stringBuffer.append(TEXT_257);
d1230 1
a1230 1
    stringBuffer.append(TEXT_258);
d1234 1
a1234 1
    stringBuffer.append(TEXT_259);
d1236 1
a1236 1
    stringBuffer.append(TEXT_260);
d1238 1
a1238 1
    stringBuffer.append(TEXT_261);
d1240 1
a1240 1
    stringBuffer.append(TEXT_262);
d1243 1
a1243 1
    stringBuffer.append(TEXT_263);
d1247 1
a1247 1
    stringBuffer.append(TEXT_264);
d1249 1
a1249 1
    stringBuffer.append(TEXT_265);
d1251 1
a1251 1
    stringBuffer.append(TEXT_266);
d1253 1
a1253 1
    stringBuffer.append(TEXT_267);
d1261 1
a1261 1
    stringBuffer.append(TEXT_268);
d1263 1
a1263 1
    stringBuffer.append(TEXT_269);
d1265 1
a1265 1
    stringBuffer.append(TEXT_270);
d1267 1
a1267 1
    stringBuffer.append(TEXT_271);
d1269 1
a1269 1
    stringBuffer.append(TEXT_272);
d1271 1
a1271 1
    stringBuffer.append(TEXT_273);
d1277 1
a1277 1
    stringBuffer.append(TEXT_274);
d1279 1
a1279 1
    stringBuffer.append(TEXT_275);
d1283 1
a1283 1
    stringBuffer.append(TEXT_276);
d1285 1
a1285 1
    stringBuffer.append(TEXT_277);
d1287 1
a1287 1
    stringBuffer.append(TEXT_278);
d1291 1
a1291 1
    stringBuffer.append(TEXT_279);
d1293 1
a1293 1
    stringBuffer.append(TEXT_280);
d1295 1
a1295 1
    stringBuffer.append(TEXT_281);
d1299 1
a1299 1
    stringBuffer.append(TEXT_282);
d1301 3
a1303 3
    stringBuffer.append(TEXT_283);
    stringBuffer.append(TEXT_284);
    stringBuffer.append(TEXT_285);
d1305 1
a1305 1
    stringBuffer.append(TEXT_286);
d1307 1
a1307 1
    stringBuffer.append(TEXT_287);
d1311 1
a1311 1
    stringBuffer.append(TEXT_288);
d1313 1
a1313 1
    stringBuffer.append(TEXT_289);
d1317 1
a1317 1
    stringBuffer.append(TEXT_290);
d1321 1
a1321 1
    stringBuffer.append(TEXT_291);
d1323 1
a1323 1
    stringBuffer.append(TEXT_292);
d1325 1
a1325 1
    stringBuffer.append(TEXT_293);
d1327 1
a1327 1
    stringBuffer.append(TEXT_294);
d1329 1
a1329 1
    stringBuffer.append(TEXT_295);
d1331 1
a1331 1
    stringBuffer.append(TEXT_296);
d1333 1
a1333 1
    stringBuffer.append(TEXT_297);
d1335 1
a1335 1
    stringBuffer.append(TEXT_298);
d1337 1
a1337 1
    stringBuffer.append(TEXT_299);
d1339 1
a1339 1
    stringBuffer.append(TEXT_300);
d1341 1
a1341 1
    stringBuffer.append(TEXT_301);
d1343 1
a1343 1
    stringBuffer.append(TEXT_302);
d1345 1
a1345 1
    stringBuffer.append(TEXT_303);
d1347 1
a1347 1
    stringBuffer.append(TEXT_304);
d1349 1
a1349 1
    stringBuffer.append(TEXT_305);
d1351 1
a1351 1
    stringBuffer.append(TEXT_306);
d1353 1
a1353 1
    stringBuffer.append(TEXT_307);
d1355 1
a1355 1
    stringBuffer.append(TEXT_308);
d1359 1
a1359 1
    stringBuffer.append(TEXT_309);
d1361 1
a1361 1
    stringBuffer.append(TEXT_310);
d1363 1
a1363 1
    stringBuffer.append(TEXT_311);
d1367 1
a1367 1
    stringBuffer.append(TEXT_312);
d1374 2
a1375 2
    stringBuffer.append(TEXT_313);
    stringBuffer.append(TEXT_314);
d1377 1
a1377 1
    stringBuffer.append(TEXT_315);
d1379 1
a1379 1
    stringBuffer.append(TEXT_316);
d1381 1
a1381 1
    stringBuffer.append(TEXT_317);
d1383 1
a1383 1
    stringBuffer.append(TEXT_318);
d1385 1
a1385 1
    stringBuffer.append(TEXT_319);
d1387 1
a1387 1
    stringBuffer.append(TEXT_320);
d1389 1
a1389 1
    stringBuffer.append(TEXT_321);
d1404 1
a1404 1
    stringBuffer.append(TEXT_322);
d1406 1
a1406 1
    stringBuffer.append(TEXT_323);
d1408 1
a1408 1
    stringBuffer.append(TEXT_324);
d1410 1
a1410 1
    stringBuffer.append(TEXT_325);
d1414 1
a1414 1
    stringBuffer.append(TEXT_326);
d1416 1
a1416 1
    stringBuffer.append(TEXT_327);
d1435 1
a1435 1
    stringBuffer.append(TEXT_328);
d1437 1
a1437 1
    stringBuffer.append(TEXT_329);
d1439 1
a1439 1
    stringBuffer.append(TEXT_330);
d1441 1
a1441 1
    stringBuffer.append(TEXT_331);
d1443 1
a1443 1
    stringBuffer.append(TEXT_332);
d1447 1
a1447 1
    stringBuffer.append(TEXT_333);
d1449 1
a1449 1
    stringBuffer.append(TEXT_334);
d1451 1
a1451 1
    stringBuffer.append(TEXT_335);
d1453 1
a1453 1
    stringBuffer.append(TEXT_336);
d1461 1
a1461 1
    stringBuffer.append(TEXT_337);
d1463 1
a1463 1
    stringBuffer.append(TEXT_338);
d1465 1
a1465 1
    stringBuffer.append(TEXT_339);
d1470 1
a1470 1
    stringBuffer.append(TEXT_340);
d1472 1
a1472 1
    stringBuffer.append(TEXT_341);
d1474 1
a1474 1
    stringBuffer.append(TEXT_342);
d1476 1
a1476 1
    stringBuffer.append(TEXT_343);
d1485 1
a1485 1
    stringBuffer.append(TEXT_344);
d1489 1
a1489 1
    stringBuffer.append(TEXT_345);
d1491 1
a1491 1
    stringBuffer.append(TEXT_346);
d1497 1
a1497 1
    stringBuffer.append(TEXT_347);
d1499 1
a1499 1
    stringBuffer.append(TEXT_348);
d1501 1
a1501 1
    stringBuffer.append(TEXT_349);
d1505 1
a1505 1
    stringBuffer.append(TEXT_350);
d1509 1
a1509 1
    stringBuffer.append(TEXT_351);
d1511 1
a1511 1
    stringBuffer.append(TEXT_352);
d1513 1
a1513 1
    stringBuffer.append(TEXT_353);
d1518 2
a1519 2
    stringBuffer.append(TEXT_354);
    stringBuffer.append(TEXT_355);
d1521 1
a1521 1
    stringBuffer.append(TEXT_356);
d1531 1
a1531 1
    stringBuffer.append(TEXT_357);
d1533 1
a1533 1
    stringBuffer.append(TEXT_358);
d1535 1
a1535 1
    stringBuffer.append(TEXT_359);
d1537 1
a1537 1
    stringBuffer.append(TEXT_360);
d1539 1
a1539 1
    stringBuffer.append(TEXT_361);
d1550 1
a1550 1
    stringBuffer.append(TEXT_362);
d1552 1
a1552 1
    stringBuffer.append(TEXT_363);
d1554 1
a1554 1
    stringBuffer.append(TEXT_364);
d1556 1
a1556 1
    stringBuffer.append(TEXT_365);
d1560 1
a1560 1
    stringBuffer.append(TEXT_366);
d1564 1
a1564 1
    stringBuffer.append(TEXT_367);
d1566 1
a1566 1
    stringBuffer.append(TEXT_368);
d1570 1
a1570 1
    stringBuffer.append(TEXT_369);
d1574 1
a1574 1
    stringBuffer.append(TEXT_370);
d1576 2
a1577 2
    stringBuffer.append(TEXT_371);
    stringBuffer.append(TEXT_372);
d1581 1
a1581 1
    stringBuffer.append(TEXT_373);
d1583 1
a1583 1
    stringBuffer.append(TEXT_374);
d1587 1
a1587 1
    stringBuffer.append(TEXT_375);
d1589 1
a1589 1
    stringBuffer.append(TEXT_376);
d1591 1
a1591 1
    stringBuffer.append(TEXT_377);
d1609 1
a1609 1
    stringBuffer.append(TEXT_378);
d1611 1
a1611 1
    stringBuffer.append(TEXT_379);
d1613 1
a1613 1
    stringBuffer.append(TEXT_380);
d1615 1
a1615 1
    stringBuffer.append(TEXT_381);
d1617 1
a1617 1
    stringBuffer.append(TEXT_382);
d1626 1
a1626 1
    stringBuffer.append(TEXT_383);
d1628 1
a1628 1
    stringBuffer.append(TEXT_384);
d1630 1
a1630 1
    stringBuffer.append(TEXT_385);
d1632 1
a1632 1
    stringBuffer.append(TEXT_386);
d1636 1
a1636 1
    stringBuffer.append(TEXT_387);
d1638 1
a1638 1
    stringBuffer.append(TEXT_388);
d1640 1
a1640 1
    stringBuffer.append(TEXT_389);
d1644 1
a1644 1
    stringBuffer.append(TEXT_390);
d1646 1
a1646 1
    stringBuffer.append(TEXT_391);
d1651 1
a1651 1
    stringBuffer.append(TEXT_392);
d1658 1
a1658 1
    stringBuffer.append(TEXT_393);
d1660 1
a1660 1
    stringBuffer.append(TEXT_394);
d1664 1
a1664 1
    stringBuffer.append(TEXT_395);
d1666 1
a1666 1
    stringBuffer.append(TEXT_396);
d1670 1
a1670 1
    stringBuffer.append(TEXT_397);
d1672 1
a1672 1
    stringBuffer.append(TEXT_398);
d1676 1
a1676 1
    stringBuffer.append(TEXT_399);
d1680 1
a1680 1
    stringBuffer.append(TEXT_400);
d1686 1
a1686 1
    stringBuffer.append(TEXT_401);
d1691 1
a1691 1
    stringBuffer.append(TEXT_402);
d1696 1
a1696 1
    stringBuffer.append(TEXT_403);
d1700 1
a1700 1
    stringBuffer.append(TEXT_404);
d1702 1
a1702 1
    stringBuffer.append(TEXT_405);
d1704 1
a1704 1
    stringBuffer.append(TEXT_406);
d1706 1
a1706 1
    stringBuffer.append(TEXT_407);
d1708 1
a1708 1
    stringBuffer.append(TEXT_408);
d1710 1
a1710 1
    stringBuffer.append(TEXT_409);
d1712 1
a1712 1
    stringBuffer.append(TEXT_410);
d1714 1
a1714 1
    stringBuffer.append(TEXT_411);
d1716 1
a1716 1
    stringBuffer.append(TEXT_412);
d1718 1
a1718 1
    stringBuffer.append(TEXT_413);
d1720 1
a1720 1
    stringBuffer.append(TEXT_414);
d1722 1
a1722 1
    stringBuffer.append(TEXT_415);
a1725 8
    stringBuffer.append(TEXT_416);
    stringBuffer.append(TEXT_417);
    stringBuffer.append(TEXT_418);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_419);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_420);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1729 1
a1729 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1731 1
a1731 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1733 1
a1733 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1734 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1737 1
d1741 8
d1750 1
a1750 1
    stringBuffer.append(TEXT_431);
@


1.19
log
@[170340]: Expand collapsed compartments automatically when new elements are added to it;
[170341]: Expand/Collapse handles should not be available for empty compartments.
@
text
@d49 1
a49 1
  protected final String TEXT_30 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
@


1.18
log
@[170248]: Beautify compartments generated for the lite version
@
text
@d163 18
a180 18
  protected final String TEXT_144 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_145 = ".create(editingDomain, ";
  protected final String TEXT_146 = ", ";
  protected final String TEXT_147 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_148 = "(childNode, ";
  protected final String TEXT_149 = "null";
  protected final String TEXT_150 = "(";
  protected final String TEXT_151 = ") constraint";
  protected final String TEXT_152 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_153 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_154 = "(";
  protected final String TEXT_155 = ", element, ";
  protected final String TEXT_156 = "null";
  protected final String TEXT_157 = "((";
  protected final String TEXT_158 = ") constraint).getCopy().union(new ";
  protected final String TEXT_159 = "(";
  protected final String TEXT_160 = ", ";
  protected final String TEXT_161 = "))";
d182 76
a257 76
  protected final String TEXT_163 = ".INSTANCE));";
  protected final String TEXT_164 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_165 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_166 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_167 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_168 = NL;
  protected final String TEXT_169 = NL + "protected ";
  protected final String TEXT_170 = " getCloneCommand(";
  protected final String TEXT_171 = " request) {" + NL + "\t";
  protected final String TEXT_172 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_173 = " command = new ";
  protected final String TEXT_174 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_175 = " childPart;" + NL + "\t";
  protected final String TEXT_176 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_177 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_178 = " createCloneCommand(final ";
  protected final String TEXT_179 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_180 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_181 = " childNode = (";
  protected final String TEXT_182 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_183 = " editingDomain = ";
  protected final String TEXT_184 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_185 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_186 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_187 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_188 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_189 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_190 = NL + "\t\t\tcase ";
  protected final String TEXT_191 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_192 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_193 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_194 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_195 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_196 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_197 = NL;
  protected final String TEXT_198 = NL + "\t\tif (";
  protected final String TEXT_199 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_200 = NL + "\t\t}";
  protected final String TEXT_201 = NL + "\t\tif (";
  protected final String TEXT_202 = ".size() >= ";
  protected final String TEXT_203 = ".eINSTANCE.get";
  protected final String TEXT_204 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_205 = NL + "\t\t}";
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = NL + "\t\tif (";
  protected final String TEXT_208 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_209 = NL + "\t\t}";
  protected final String TEXT_210 = NL + "\t\tif (";
  protected final String TEXT_211 = ".size() >= ";
  protected final String TEXT_212 = ".eINSTANCE.get";
  protected final String TEXT_213 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_214 = NL + "\t\t}";
  protected final String TEXT_215 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_216 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_217 = " result = (";
  protected final String TEXT_218 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_219 = "();";
  protected final String TEXT_220 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_221 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_222 = ".getElement(), ";
  protected final String TEXT_223 = ".eINSTANCE.get";
  protected final String TEXT_224 = "(), result));";
  protected final String TEXT_225 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_226 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_227 = ".getElement(), ";
  protected final String TEXT_228 = ".eINSTANCE.get";
  protected final String TEXT_229 = "(), result));";
  protected final String TEXT_230 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_231 = "(";
  protected final String TEXT_232 = ", result, ";
  protected final String TEXT_233 = "null";
  protected final String TEXT_234 = "((";
  protected final String TEXT_235 = ") constraint).getCopy().union(new ";
  protected final String TEXT_236 = "(";
  protected final String TEXT_237 = ", ";
  protected final String TEXT_238 = "))";
d259 105
a363 105
  protected final String TEXT_240 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_241 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_242 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_243 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_244 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_245 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_246 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_247 = " requestEx = (";
  protected final String TEXT_248 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_249 = " result = new ";
  protected final String TEXT_250 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_251 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_252 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_253 = "((View) getModel(), requestEx";
  protected final String TEXT_254 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_255 = ")getConstraintFor(request)";
  protected final String TEXT_256 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_257 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_258 = "(";
  protected final String TEXT_259 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_260 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_261 = NL;
  protected final String TEXT_262 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_263 = "\", new ";
  protected final String TEXT_264 = "()); //$NON-NLS-1$";
  protected final String TEXT_265 = NL;
  protected final String TEXT_266 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_267 = ".OPEN_ROLE";
  protected final String TEXT_268 = " + \"";
  protected final String TEXT_269 = "\" ";
  protected final String TEXT_270 = ", new ";
  protected final String TEXT_271 = "());";
  protected final String TEXT_272 = NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the selection handles that should be contributed to the parent when it becomes selected." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_273 = " createSelectionHandles() {";
  protected final String TEXT_274 = NL + "\t\treturn ";
  protected final String TEXT_275 = ".singletonList(new ";
  protected final String TEXT_276 = "(this, getTitleName()));";
  protected final String TEXT_277 = NL + "\t\treturn ";
  protected final String TEXT_278 = ".singletonList(new ";
  protected final String TEXT_279 = "(this, getTitleName()));";
  protected final String TEXT_280 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_281 = " req) {";
  protected final String TEXT_282 = NL;
  protected final String TEXT_283 = "if (";
  protected final String TEXT_284 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_285 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {";
  protected final String TEXT_286 = NL + "\t\treturn \"";
  protected final String TEXT_287 = "\";";
  protected final String TEXT_288 = NL + "\t\treturn \"\";\t//$NON-NLS-1$";
  protected final String TEXT_289 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_290 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_291 = " result = new ";
  protected final String TEXT_292 = "();" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_293 = "());" + NL + "\t\t";
  protected final String TEXT_294 = " scrollPane = new ";
  protected final String TEXT_295 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_296 = NL + "\t\t";
  protected final String TEXT_297 = " viewport = new ";
  protected final String TEXT_298 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_299 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_300 = "());";
  protected final String TEXT_301 = NL + "\t\t";
  protected final String TEXT_302 = " viewport = new ";
  protected final String TEXT_303 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_304 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_305 = "());";
  protected final String TEXT_306 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_307 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_308 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_309 = "(this);" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}";
  protected final String TEXT_310 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_311 = NL;
  protected final String TEXT_312 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_313 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_314 = " domainModelEditDomain = ";
  protected final String TEXT_315 = ".getEditingDomain(";
  protected final String TEXT_316 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_317 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_318 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_319 = " {";
  protected final String TEXT_320 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_321 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_322 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_323 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_324 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_325 = " createFilter() {";
  protected final String TEXT_326 = NL + "\t\t\t";
  protected final String TEXT_327 = " filter = ";
  protected final String TEXT_328 = ".createFeatureFilter(";
  protected final String TEXT_329 = ".eINSTANCE.get";
  protected final String TEXT_330 = "());";
  protected final String TEXT_331 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_332 = ".createFeatureFilter(";
  protected final String TEXT_333 = ".eINSTANCE.get";
  protected final String TEXT_334 = "()));";
  protected final String TEXT_335 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_336 = ".createNotifierFilter(";
  protected final String TEXT_337 = ".getElement()));";
  protected final String TEXT_338 = NL + "\t\t\t";
  protected final String TEXT_339 = " filter = ";
  protected final String TEXT_340 = ".createNotifierFilter(";
  protected final String TEXT_341 = ".getElement());";
  protected final String TEXT_342 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_343 = NL + "\t\t\t";
  protected final String TEXT_344 = " filter = getConstrainedChildrenFilter();";
d365 86
a450 84
  protected final String TEXT_346 = " filter = ";
  protected final String TEXT_347 = ".NOT_TOUCH;";
  protected final String TEXT_348 = NL + "\t\t\treturn filter;";
  protected final String TEXT_349 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_350 = " getCreateNotationalElementCommand(";
  protected final String TEXT_351 = " descriptor) {";
  protected final String TEXT_352 = NL;
  protected final String TEXT_353 = "\t\t\t";
  protected final String TEXT_354 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_355 = NL + "\t\t\tcase ";
  protected final String TEXT_356 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_357 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_358 = "(";
  protected final String TEXT_359 = ", domainElement, ";
  protected final String TEXT_360 = "new ";
  protected final String TEXT_361 = "(0, 0, ";
  protected final String TEXT_362 = ", ";
  protected final String TEXT_363 = ")";
  protected final String TEXT_364 = NL + "null";
  protected final String TEXT_365 = ", ";
  protected final String TEXT_366 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_367 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_368 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_369 = " getSemanticChildNodes() {";
  protected final String TEXT_370 = NL;
  protected final String TEXT_371 = NL + "\treturn ";
  protected final String TEXT_372 = ".EMPTY_LIST;";
  protected final String TEXT_373 = NL + "\t";
  protected final String TEXT_374 = " result = new ";
  protected final String TEXT_375 = "();";
  protected final String TEXT_376 = NL + "\t";
  protected final String TEXT_377 = " viewObject = ";
  protected final String TEXT_378 = ";" + NL + "\t";
  protected final String TEXT_379 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_380 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_381 = NL + "\tfor(";
  protected final String TEXT_382 = " it = ";
  protected final String TEXT_383 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_384 = ") it.next();";
  protected final String TEXT_385 = NL + "\tnextValue = (";
  protected final String TEXT_386 = ")";
  protected final String TEXT_387 = ";";
  protected final String TEXT_388 = NL + "\tnodeVID = ";
  protected final String TEXT_389 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_390 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_391 = NL + "\tcase ";
  protected final String TEXT_392 = ".VISUAL_ID: {";
  protected final String TEXT_393 = NL + "\tif (";
  protected final String TEXT_394 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_395 = NL + "\t\tresult.add(new ";
  protected final String TEXT_396 = "(nextValue, nodeVID));";
  protected final String TEXT_397 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_398 = NL + "\t\t}";
  protected final String TEXT_399 = NL + "\t}";
  protected final String TEXT_400 = NL + "\t}";
  protected final String TEXT_401 = NL + "\treturn result;";
  protected final String TEXT_402 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_403 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_404 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_405 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_406 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_407 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_408 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_409 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_410 = " domainModelEditDomain = ";
  protected final String TEXT_411 = ".getEditingDomain(";
  protected final String TEXT_412 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_413 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_414 = NL;
  protected final String TEXT_415 = NL;
  protected final String TEXT_416 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_417 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_418 = " feature, ";
  protected final String TEXT_419 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_420 = NL;
  protected final String TEXT_421 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_422 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_423 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_424 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_425 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_426 = NL;
  protected final String TEXT_427 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_428 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_429 = NL;
d903 1
a903 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
d907 4
d912 1
a912 1
    stringBuffer.append(TEXT_147);
d914 1
a914 1
    stringBuffer.append(TEXT_148);
d916 1
a916 1
    stringBuffer.append(TEXT_149);
d918 1
a918 1
    stringBuffer.append(TEXT_150);
d920 1
a920 1
    stringBuffer.append(TEXT_151);
d922 1
a922 1
    stringBuffer.append(TEXT_152);
d933 1
a933 1
    stringBuffer.append(TEXT_153);
d935 1
a935 1
    stringBuffer.append(TEXT_154);
d937 1
a937 1
    stringBuffer.append(TEXT_155);
d939 1
a939 1
    stringBuffer.append(TEXT_156);
d941 1
a941 1
    stringBuffer.append(TEXT_157);
d943 1
a943 1
    stringBuffer.append(TEXT_158);
d945 1
a945 1
    stringBuffer.append(TEXT_159);
d947 1
a947 1
    stringBuffer.append(TEXT_160);
d949 1
a949 1
    stringBuffer.append(TEXT_161);
d951 1
a951 1
    stringBuffer.append(TEXT_162);
d953 1
a953 1
    stringBuffer.append(TEXT_163);
d957 1
a957 1
    stringBuffer.append(TEXT_164);
d961 1
a961 1
    stringBuffer.append(TEXT_165);
d963 1
a963 1
    stringBuffer.append(TEXT_166);
d965 1
a965 1
    stringBuffer.append(TEXT_167);
d969 1
a969 1
    stringBuffer.append(TEXT_168);
d976 1
a976 1
    stringBuffer.append(TEXT_169);
d978 1
a978 1
    stringBuffer.append(TEXT_170);
d980 1
a980 1
    stringBuffer.append(TEXT_171);
d982 1
a982 1
    stringBuffer.append(TEXT_172);
d984 1
a984 1
    stringBuffer.append(TEXT_173);
a985 4
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d989 1
a989 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d991 1
a991 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d993 1
a993 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d995 1
a995 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d999 1
a999 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1001 1
a1001 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1003 1
a1003 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1005 1
a1005 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1009 4
d1014 1
a1014 1
    stringBuffer.append(TEXT_188);
d1016 1
a1016 1
    stringBuffer.append(TEXT_189);
d1024 1
a1024 1
    stringBuffer.append(TEXT_190);
d1026 1
a1026 1
    stringBuffer.append(TEXT_191);
d1028 1
a1028 1
    stringBuffer.append(TEXT_192);
d1030 1
a1030 1
    stringBuffer.append(TEXT_193);
d1032 1
a1032 1
    stringBuffer.append(TEXT_194);
d1034 1
a1034 1
    stringBuffer.append(TEXT_195);
d1036 1
a1036 1
    stringBuffer.append(TEXT_196);
d1044 1
a1044 1
    stringBuffer.append(TEXT_197);
d1049 1
a1049 1
    stringBuffer.append(TEXT_198);
d1051 1
a1051 1
    stringBuffer.append(TEXT_199);
d1053 1
a1053 1
    stringBuffer.append(TEXT_200);
d1058 1
a1058 1
    stringBuffer.append(TEXT_201);
d1060 1
a1060 1
    stringBuffer.append(TEXT_202);
d1062 1
a1062 1
    stringBuffer.append(TEXT_203);
d1064 1
a1064 1
    stringBuffer.append(TEXT_204);
d1066 1
a1066 1
    stringBuffer.append(TEXT_205);
d1079 1
a1079 1
    stringBuffer.append(TEXT_206);
d1084 1
a1084 1
    stringBuffer.append(TEXT_207);
d1086 1
a1086 1
    stringBuffer.append(TEXT_208);
d1088 1
a1088 1
    stringBuffer.append(TEXT_209);
d1093 1
a1093 1
    stringBuffer.append(TEXT_210);
d1095 1
a1095 1
    stringBuffer.append(TEXT_211);
d1097 1
a1097 1
    stringBuffer.append(TEXT_212);
d1099 1
a1099 1
    stringBuffer.append(TEXT_213);
d1101 1
a1101 1
    stringBuffer.append(TEXT_214);
d1109 1
a1109 1
    stringBuffer.append(TEXT_215);
d1111 1
a1111 1
    stringBuffer.append(TEXT_216);
d1113 1
a1113 1
    stringBuffer.append(TEXT_217);
d1115 1
a1115 1
    stringBuffer.append(TEXT_218);
d1117 1
a1117 1
    stringBuffer.append(TEXT_219);
d1121 1
a1121 1
    stringBuffer.append(TEXT_220);
d1123 1
a1123 1
    stringBuffer.append(TEXT_221);
d1125 1
a1125 1
    stringBuffer.append(TEXT_222);
d1127 1
a1127 1
    stringBuffer.append(TEXT_223);
d1129 1
a1129 1
    stringBuffer.append(TEXT_224);
d1133 1
a1133 1
    stringBuffer.append(TEXT_225);
d1135 1
a1135 1
    stringBuffer.append(TEXT_226);
d1137 1
a1137 1
    stringBuffer.append(TEXT_227);
d1139 1
a1139 1
    stringBuffer.append(TEXT_228);
d1141 1
a1141 1
    stringBuffer.append(TEXT_229);
d1152 1
a1152 1
    stringBuffer.append(TEXT_230);
d1154 1
a1154 1
    stringBuffer.append(TEXT_231);
d1156 1
a1156 1
    stringBuffer.append(TEXT_232);
d1158 1
a1158 1
    stringBuffer.append(TEXT_233);
d1160 1
a1160 1
    stringBuffer.append(TEXT_234);
d1162 1
a1162 1
    stringBuffer.append(TEXT_235);
d1164 1
a1164 1
    stringBuffer.append(TEXT_236);
d1166 1
a1166 1
    stringBuffer.append(TEXT_237);
d1168 1
a1168 1
    stringBuffer.append(TEXT_238);
d1170 1
a1170 1
    stringBuffer.append(TEXT_239);
d1172 1
a1172 1
    stringBuffer.append(TEXT_240);
d1177 1
a1177 1
    stringBuffer.append(TEXT_241);
d1179 1
a1179 1
    stringBuffer.append(TEXT_242);
d1181 1
a1181 1
    stringBuffer.append(TEXT_243);
d1188 1
a1188 1
    stringBuffer.append(TEXT_244);
d1190 1
a1190 1
    stringBuffer.append(TEXT_245);
d1192 1
a1192 1
    stringBuffer.append(TEXT_246);
d1194 1
a1194 1
    stringBuffer.append(TEXT_247);
d1196 1
a1196 1
    stringBuffer.append(TEXT_248);
d1198 1
a1198 1
    stringBuffer.append(TEXT_249);
d1200 1
a1200 1
    stringBuffer.append(TEXT_250);
d1205 1
a1205 1
    stringBuffer.append(TEXT_251);
d1207 1
a1207 1
    stringBuffer.append(TEXT_252);
d1209 1
a1209 1
    stringBuffer.append(TEXT_253);
d1211 1
a1211 1
    stringBuffer.append(TEXT_254);
d1213 1
a1213 1
    stringBuffer.append(TEXT_255);
d1215 1
a1215 1
    stringBuffer.append(TEXT_256);
d1219 1
a1219 1
    stringBuffer.append(TEXT_257);
d1221 1
a1221 1
    stringBuffer.append(TEXT_258);
d1223 1
a1223 1
    stringBuffer.append(TEXT_259);
d1225 1
a1225 1
    stringBuffer.append(TEXT_260);
d1228 1
a1228 1
    stringBuffer.append(TEXT_261);
d1232 1
a1232 1
    stringBuffer.append(TEXT_262);
d1234 1
a1234 1
    stringBuffer.append(TEXT_263);
d1236 1
a1236 1
    stringBuffer.append(TEXT_264);
d1238 1
a1238 1
    stringBuffer.append(TEXT_265);
d1246 1
a1246 1
    stringBuffer.append(TEXT_266);
d1248 1
a1248 1
    stringBuffer.append(TEXT_267);
d1250 1
a1250 1
    stringBuffer.append(TEXT_268);
d1252 1
a1252 1
    stringBuffer.append(TEXT_269);
d1254 1
a1254 1
    stringBuffer.append(TEXT_270);
d1256 1
a1256 1
    stringBuffer.append(TEXT_271);
d1262 1
a1262 1
    stringBuffer.append(TEXT_272);
d1264 1
a1264 1
    stringBuffer.append(TEXT_273);
d1268 1
a1268 1
    stringBuffer.append(TEXT_274);
d1270 1
a1270 1
    stringBuffer.append(TEXT_275);
d1272 1
a1272 1
    stringBuffer.append(TEXT_276);
d1276 1
a1276 1
    stringBuffer.append(TEXT_277);
d1278 1
a1278 1
    stringBuffer.append(TEXT_278);
d1280 1
a1280 1
    stringBuffer.append(TEXT_279);
d1284 1
a1284 1
    stringBuffer.append(TEXT_280);
a1285 2
    stringBuffer.append(TEXT_281);
    stringBuffer.append(TEXT_282);
d1287 2
d1290 1
a1290 1
    stringBuffer.append(TEXT_284);
d1292 1
a1292 1
    stringBuffer.append(TEXT_285);
d1296 1
a1296 1
    stringBuffer.append(TEXT_286);
d1298 1
a1298 1
    stringBuffer.append(TEXT_287);
d1302 1
a1302 1
    stringBuffer.append(TEXT_288);
d1306 1
a1306 1
    stringBuffer.append(TEXT_289);
d1308 1
a1308 1
    stringBuffer.append(TEXT_290);
d1310 1
a1310 1
    stringBuffer.append(TEXT_291);
d1312 1
a1312 1
    stringBuffer.append(TEXT_292);
d1314 1
a1314 1
    stringBuffer.append(TEXT_293);
d1316 1
a1316 1
    stringBuffer.append(TEXT_294);
d1318 1
a1318 1
    stringBuffer.append(TEXT_295);
d1320 1
a1320 1
    stringBuffer.append(TEXT_296);
d1322 1
a1322 1
    stringBuffer.append(TEXT_297);
d1324 1
a1324 1
    stringBuffer.append(TEXT_298);
d1326 1
a1326 1
    stringBuffer.append(TEXT_299);
d1328 1
a1328 1
    stringBuffer.append(TEXT_300);
d1330 1
a1330 1
    stringBuffer.append(TEXT_301);
d1332 1
a1332 1
    stringBuffer.append(TEXT_302);
d1334 1
a1334 1
    stringBuffer.append(TEXT_303);
d1336 1
a1336 1
    stringBuffer.append(TEXT_304);
d1338 1
a1338 1
    stringBuffer.append(TEXT_305);
d1340 1
a1340 1
    stringBuffer.append(TEXT_306);
d1344 1
a1344 1
    stringBuffer.append(TEXT_307);
d1346 1
a1346 1
    stringBuffer.append(TEXT_308);
d1348 1
a1348 1
    stringBuffer.append(TEXT_309);
d1352 1
a1352 1
    stringBuffer.append(TEXT_310);
a1358 3
    stringBuffer.append(TEXT_311);
    stringBuffer.append(TEXT_312);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
a1359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1361 1
a1361 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1363 1
a1363 1
    stringBuffer.append(_getDiagramCode);
d1365 1
a1365 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
d1367 1
a1367 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
d1371 4
d1389 1
a1389 1
    stringBuffer.append(TEXT_320);
d1391 1
a1391 1
    stringBuffer.append(TEXT_321);
d1393 1
a1393 1
    stringBuffer.append(TEXT_322);
d1395 1
a1395 1
    stringBuffer.append(TEXT_323);
d1399 1
a1399 1
    stringBuffer.append(TEXT_324);
d1401 1
a1401 1
    stringBuffer.append(TEXT_325);
d1420 1
a1420 1
    stringBuffer.append(TEXT_326);
d1422 1
a1422 1
    stringBuffer.append(TEXT_327);
d1424 1
a1424 1
    stringBuffer.append(TEXT_328);
d1426 1
a1426 1
    stringBuffer.append(TEXT_329);
d1428 1
a1428 1
    stringBuffer.append(TEXT_330);
d1432 1
a1432 1
    stringBuffer.append(TEXT_331);
d1434 1
a1434 1
    stringBuffer.append(TEXT_332);
d1436 1
a1436 1
    stringBuffer.append(TEXT_333);
d1438 1
a1438 1
    stringBuffer.append(TEXT_334);
d1446 1
a1446 1
    stringBuffer.append(TEXT_335);
d1448 1
a1448 1
    stringBuffer.append(TEXT_336);
d1450 1
a1450 1
    stringBuffer.append(TEXT_337);
d1455 1
a1455 1
    stringBuffer.append(TEXT_338);
d1457 1
a1457 1
    stringBuffer.append(TEXT_339);
d1459 1
a1459 1
    stringBuffer.append(TEXT_340);
d1461 1
a1461 1
    stringBuffer.append(TEXT_341);
d1470 1
a1470 1
    stringBuffer.append(TEXT_342);
d1474 1
a1474 1
    stringBuffer.append(TEXT_343);
d1476 1
a1476 1
    stringBuffer.append(TEXT_344);
d1482 1
a1482 1
    stringBuffer.append(TEXT_345);
d1484 1
a1484 1
    stringBuffer.append(TEXT_346);
d1486 1
a1486 1
    stringBuffer.append(TEXT_347);
d1490 1
a1490 1
    stringBuffer.append(TEXT_348);
d1494 1
a1494 1
    stringBuffer.append(TEXT_349);
d1496 1
a1496 1
    stringBuffer.append(TEXT_350);
d1498 1
a1498 1
    stringBuffer.append(TEXT_351);
d1503 2
a1504 2
    stringBuffer.append(TEXT_352);
    stringBuffer.append(TEXT_353);
d1506 1
a1506 1
    stringBuffer.append(TEXT_354);
d1516 1
a1516 1
    stringBuffer.append(TEXT_355);
d1518 1
a1518 1
    stringBuffer.append(TEXT_356);
d1520 1
a1520 1
    stringBuffer.append(TEXT_357);
d1522 1
a1522 1
    stringBuffer.append(TEXT_358);
d1524 1
a1524 1
    stringBuffer.append(TEXT_359);
d1535 1
a1535 1
    stringBuffer.append(TEXT_360);
d1537 1
a1537 1
    stringBuffer.append(TEXT_361);
d1539 1
a1539 1
    stringBuffer.append(TEXT_362);
d1541 1
a1541 1
    stringBuffer.append(TEXT_363);
d1545 1
a1545 1
    stringBuffer.append(TEXT_364);
d1549 1
a1549 1
    stringBuffer.append(TEXT_365);
d1551 1
a1551 1
    stringBuffer.append(TEXT_366);
d1555 1
a1555 1
    stringBuffer.append(TEXT_367);
d1559 1
a1559 1
    stringBuffer.append(TEXT_368);
d1561 2
a1562 2
    stringBuffer.append(TEXT_369);
    stringBuffer.append(TEXT_370);
d1566 1
a1566 1
    stringBuffer.append(TEXT_371);
d1568 1
a1568 1
    stringBuffer.append(TEXT_372);
d1572 1
a1572 1
    stringBuffer.append(TEXT_373);
d1574 1
a1574 1
    stringBuffer.append(TEXT_374);
d1576 1
a1576 1
    stringBuffer.append(TEXT_375);
d1594 1
a1594 1
    stringBuffer.append(TEXT_376);
d1596 1
a1596 1
    stringBuffer.append(TEXT_377);
d1598 1
a1598 1
    stringBuffer.append(TEXT_378);
d1600 1
a1600 1
    stringBuffer.append(TEXT_379);
d1602 1
a1602 1
    stringBuffer.append(TEXT_380);
d1611 1
a1611 1
    stringBuffer.append(TEXT_381);
d1613 1
a1613 1
    stringBuffer.append(TEXT_382);
d1615 1
a1615 1
    stringBuffer.append(TEXT_383);
d1617 1
a1617 1
    stringBuffer.append(TEXT_384);
d1621 1
a1621 1
    stringBuffer.append(TEXT_385);
d1623 1
a1623 1
    stringBuffer.append(TEXT_386);
d1625 1
a1625 1
    stringBuffer.append(TEXT_387);
d1629 1
a1629 1
    stringBuffer.append(TEXT_388);
d1631 1
a1631 1
    stringBuffer.append(TEXT_389);
d1636 1
a1636 1
    stringBuffer.append(TEXT_390);
d1643 1
a1643 1
    stringBuffer.append(TEXT_391);
d1645 1
a1645 1
    stringBuffer.append(TEXT_392);
d1649 1
a1649 1
    stringBuffer.append(TEXT_393);
d1651 1
a1651 1
    stringBuffer.append(TEXT_394);
d1655 1
a1655 1
    stringBuffer.append(TEXT_395);
d1657 1
a1657 1
    stringBuffer.append(TEXT_396);
d1661 1
a1661 1
    stringBuffer.append(TEXT_397);
d1665 1
a1665 1
    stringBuffer.append(TEXT_398);
d1671 1
a1671 1
    stringBuffer.append(TEXT_399);
d1676 1
a1676 1
    stringBuffer.append(TEXT_400);
d1681 1
a1681 1
    stringBuffer.append(TEXT_401);
d1685 1
a1685 1
    stringBuffer.append(TEXT_402);
d1687 1
a1687 1
    stringBuffer.append(TEXT_403);
d1689 1
a1689 1
    stringBuffer.append(TEXT_404);
d1691 1
a1691 1
    stringBuffer.append(TEXT_405);
d1693 1
a1693 1
    stringBuffer.append(TEXT_406);
d1695 1
a1695 1
    stringBuffer.append(TEXT_407);
d1697 1
a1697 1
    stringBuffer.append(TEXT_408);
d1699 1
a1699 1
    stringBuffer.append(TEXT_409);
d1701 1
a1701 1
    stringBuffer.append(TEXT_410);
d1703 1
a1703 1
    stringBuffer.append(TEXT_411);
d1705 1
a1705 1
    stringBuffer.append(TEXT_412);
d1707 1
a1707 1
    stringBuffer.append(TEXT_413);
a1710 2
    stringBuffer.append(TEXT_414);
    stringBuffer.append(TEXT_415);
a1711 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a1712 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1714 1
a1714 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1716 1
d1718 1
a1719 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1720 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1726 1
d1728 1
d1730 2
d1733 1
a1733 1
    stringBuffer.append(TEXT_428);
d1735 1
a1735 1
    stringBuffer.append(TEXT_429);
@


1.17
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d50 77
a126 77
  protected final String TEXT_31 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_32 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_33 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_34 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_35 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_36 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_37 = " createChangeConstraintCommand(final ";
  protected final String TEXT_38 = " request, final ";
  protected final String TEXT_39 = " child, Object constraint) {";
  protected final String TEXT_40 = NL;
  protected final String TEXT_41 = "\t\t\t\tfinal ";
  protected final String TEXT_42 = " node = (";
  protected final String TEXT_43 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_44 = " emfCommand = new ";
  protected final String TEXT_45 = "(node, request, ((";
  protected final String TEXT_46 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_47 = "(";
  protected final String TEXT_48 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_49 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_50 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_51 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_52 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_53 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_54 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_55 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_56 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = NL + "protected Command createAddCommand(final ";
  protected final String TEXT_59 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_60 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_61 = " childNode = (";
  protected final String TEXT_62 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_63 = " editingDomain = ";
  protected final String TEXT_64 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_65 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_66 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int visualID = ";
  protected final String TEXT_67 = ".getVisualID(childNode);" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_68 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_69 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_70 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_71 = NL + "\t\t\tcase ";
  protected final String TEXT_72 = ".VISUAL_ID:" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t";
  protected final String TEXT_73 = " result = new ";
  protected final String TEXT_74 = "();" + NL + "\t\t\t\t\t";
  protected final String TEXT_75 = " element = childNode.getElement();";
  protected final String TEXT_76 = NL + "\t\t\t\t\tswitch (visualID) {";
  protected final String TEXT_77 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_78 = ".VISUAL_ID:";
  protected final String TEXT_79 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_80 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_81 = ".eINSTANCE.get";
  protected final String TEXT_82 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_83 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_84 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_85 = ".eINSTANCE.get";
  protected final String TEXT_86 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_87 = ".UNSET_VALUE));";
  protected final String TEXT_88 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_89 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_90 = ".eINSTANCE.get";
  protected final String TEXT_91 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_92 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_93 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_94 = ".eINSTANCE.get";
  protected final String TEXT_95 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_96 = ".UNSET_VALUE));";
  protected final String TEXT_97 = NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_98 = NL + "\t\t\t\t\t}\t";
  protected final String TEXT_99 = NL;
  protected final String TEXT_100 = NL + "\t\tif (";
  protected final String TEXT_101 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_102 = NL + "\t\t}";
  protected final String TEXT_103 = NL + "\t\tif (";
  protected final String TEXT_104 = ".size() >= ";
  protected final String TEXT_105 = ".eINSTANCE.get";
  protected final String TEXT_106 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_107 = NL + "\t\t}";
d128 37
a164 37
  protected final String TEXT_109 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_110 = ".getElement(), ";
  protected final String TEXT_111 = ".eINSTANCE.get";
  protected final String TEXT_112 = "(), element));";
  protected final String TEXT_113 = NL;
  protected final String TEXT_114 = NL + "\t\tif (";
  protected final String TEXT_115 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_116 = NL + "\t\t}";
  protected final String TEXT_117 = NL + "\t\tif (";
  protected final String TEXT_118 = ".size() >= ";
  protected final String TEXT_119 = ".eINSTANCE.get";
  protected final String TEXT_120 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_121 = NL + "\t\t}";
  protected final String TEXT_122 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_123 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_124 = ".getElement(), ";
  protected final String TEXT_125 = ".eINSTANCE.get";
  protected final String TEXT_126 = "(), element));";
  protected final String TEXT_127 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_128 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_129 = ".create(editingDomain, ";
  protected final String TEXT_130 = ", ";
  protected final String TEXT_131 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_132 = "(childNode, ";
  protected final String TEXT_133 = "null";
  protected final String TEXT_134 = "(";
  protected final String TEXT_135 = ") constraint";
  protected final String TEXT_136 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_137 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_138 = "(";
  protected final String TEXT_139 = ", element, ";
  protected final String TEXT_140 = "null";
  protected final String TEXT_141 = "((";
  protected final String TEXT_142 = ") constraint).getCopy().union(new ";
  protected final String TEXT_143 = "(";
  protected final String TEXT_144 = ", ";
  protected final String TEXT_145 = "))";
d166 65
a230 65
  protected final String TEXT_147 = ".INSTANCE));";
  protected final String TEXT_148 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_149 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_150 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_151 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = NL + "protected ";
  protected final String TEXT_154 = " getCloneCommand(";
  protected final String TEXT_155 = " request) {" + NL + "\t";
  protected final String TEXT_156 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_157 = " command = new ";
  protected final String TEXT_158 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_159 = " childPart;" + NL + "\t";
  protected final String TEXT_160 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_161 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_162 = " createCloneCommand(final ";
  protected final String TEXT_163 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_164 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_165 = " childNode = (";
  protected final String TEXT_166 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_167 = " editingDomain = ";
  protected final String TEXT_168 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_169 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_170 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_171 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_172 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_173 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_174 = NL + "\t\t\tcase ";
  protected final String TEXT_175 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_176 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_177 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_178 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_179 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_180 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_181 = NL;
  protected final String TEXT_182 = NL + "\t\tif (";
  protected final String TEXT_183 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_184 = NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t\tif (";
  protected final String TEXT_186 = ".size() >= ";
  protected final String TEXT_187 = ".eINSTANCE.get";
  protected final String TEXT_188 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_189 = NL + "\t\t}";
  protected final String TEXT_190 = NL;
  protected final String TEXT_191 = NL + "\t\tif (";
  protected final String TEXT_192 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_193 = NL + "\t\t}";
  protected final String TEXT_194 = NL + "\t\tif (";
  protected final String TEXT_195 = ".size() >= ";
  protected final String TEXT_196 = ".eINSTANCE.get";
  protected final String TEXT_197 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_198 = NL + "\t\t}";
  protected final String TEXT_199 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_200 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_201 = " result = (";
  protected final String TEXT_202 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_203 = "();";
  protected final String TEXT_204 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_205 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_206 = ".getElement(), ";
  protected final String TEXT_207 = ".eINSTANCE.get";
  protected final String TEXT_208 = "(), result));";
  protected final String TEXT_209 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_210 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_211 = ".getElement(), ";
d232 217
a448 191
  protected final String TEXT_213 = "(), result));";
  protected final String TEXT_214 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_215 = "(";
  protected final String TEXT_216 = ", result, ";
  protected final String TEXT_217 = "null";
  protected final String TEXT_218 = "((";
  protected final String TEXT_219 = ") constraint).getCopy().union(new ";
  protected final String TEXT_220 = "(";
  protected final String TEXT_221 = ", ";
  protected final String TEXT_222 = "))";
  protected final String TEXT_223 = ", ";
  protected final String TEXT_224 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_225 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_226 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_227 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_228 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_229 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_230 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_231 = " requestEx = (";
  protected final String TEXT_232 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_233 = " result = new ";
  protected final String TEXT_234 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_235 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_236 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_237 = "((View) getModel(), requestEx";
  protected final String TEXT_238 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_239 = ")getConstraintFor(request)";
  protected final String TEXT_240 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_241 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_242 = "(";
  protected final String TEXT_243 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_244 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_245 = NL;
  protected final String TEXT_246 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_247 = "\", new ";
  protected final String TEXT_248 = "()); //$NON-NLS-1$";
  protected final String TEXT_249 = NL;
  protected final String TEXT_250 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_251 = ".OPEN_ROLE";
  protected final String TEXT_252 = " + \"";
  protected final String TEXT_253 = "\" ";
  protected final String TEXT_254 = ", new ";
  protected final String TEXT_255 = "());";
  protected final String TEXT_256 = NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_257 = " req) {";
  protected final String TEXT_258 = NL;
  protected final String TEXT_259 = "if (";
  protected final String TEXT_260 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_261 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_262 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_263 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_264 = " result = new ";
  protected final String TEXT_265 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_266 = "());" + NL + "\t\t";
  protected final String TEXT_267 = " scrollPane = new ";
  protected final String TEXT_268 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_269 = NL + "\t\t";
  protected final String TEXT_270 = " viewport = new ";
  protected final String TEXT_271 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_272 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_273 = "());";
  protected final String TEXT_274 = NL + "\t\t";
  protected final String TEXT_275 = " viewport = new ";
  protected final String TEXT_276 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_277 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_278 = "());";
  protected final String TEXT_279 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_280 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_281 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_282 = "(this);" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}";
  protected final String TEXT_283 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_284 = " resolveSemanticElement() {" + NL + "\t\tView view = getDiagramNode();" + NL + "\t\treturn (view.getElement() instanceof ";
  protected final String TEXT_285 = ") ? (";
  protected final String TEXT_286 = ") view.getElement() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_287 = NL;
  protected final String TEXT_288 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_289 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_290 = " domainModelEditDomain = ";
  protected final String TEXT_291 = ".getEditingDomain(";
  protected final String TEXT_292 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_293 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_294 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_295 = " {";
  protected final String TEXT_296 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_297 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_298 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_299 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_300 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_301 = " createFilter() {";
  protected final String TEXT_302 = NL + "\t\t\t";
  protected final String TEXT_303 = " filter = ";
  protected final String TEXT_304 = ".createFeatureFilter(";
  protected final String TEXT_305 = ".eINSTANCE.get";
  protected final String TEXT_306 = "());";
  protected final String TEXT_307 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_308 = ".createFeatureFilter(";
  protected final String TEXT_309 = ".eINSTANCE.get";
  protected final String TEXT_310 = "()));";
  protected final String TEXT_311 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_312 = ".createNotifierFilter(";
  protected final String TEXT_313 = ".getElement()));";
  protected final String TEXT_314 = NL + "\t\t\t";
  protected final String TEXT_315 = " filter = ";
  protected final String TEXT_316 = ".createNotifierFilter(";
  protected final String TEXT_317 = ".getElement());";
  protected final String TEXT_318 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_319 = NL + "\t\t\t";
  protected final String TEXT_320 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_321 = NL + "\t\t\t";
  protected final String TEXT_322 = " filter = ";
  protected final String TEXT_323 = ".NOT_TOUCH;";
  protected final String TEXT_324 = NL + "\t\t\treturn filter;";
  protected final String TEXT_325 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_326 = " getCreateNotationalElementCommand(";
  protected final String TEXT_327 = " descriptor) {";
  protected final String TEXT_328 = NL;
  protected final String TEXT_329 = "\t\t\t";
  protected final String TEXT_330 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_331 = NL + "\t\t\tcase ";
  protected final String TEXT_332 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_333 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_334 = "(";
  protected final String TEXT_335 = ", domainElement, ";
  protected final String TEXT_336 = "new ";
  protected final String TEXT_337 = "(0, 0, ";
  protected final String TEXT_338 = ", ";
  protected final String TEXT_339 = ")";
  protected final String TEXT_340 = NL + "null";
  protected final String TEXT_341 = ", ";
  protected final String TEXT_342 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_343 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_344 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_345 = " getSemanticChildNodes() {";
  protected final String TEXT_346 = NL;
  protected final String TEXT_347 = NL + "\treturn ";
  protected final String TEXT_348 = ".EMPTY_LIST;";
  protected final String TEXT_349 = NL + "\t";
  protected final String TEXT_350 = " result = new ";
  protected final String TEXT_351 = "();";
  protected final String TEXT_352 = NL + "\t";
  protected final String TEXT_353 = " viewObject = ";
  protected final String TEXT_354 = ";" + NL + "\t";
  protected final String TEXT_355 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_356 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_357 = NL + "\tfor(";
  protected final String TEXT_358 = " it = ";
  protected final String TEXT_359 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_360 = ") it.next();";
  protected final String TEXT_361 = NL + "\tnextValue = (";
  protected final String TEXT_362 = ")";
  protected final String TEXT_363 = ";";
  protected final String TEXT_364 = NL + "\tnodeVID = ";
  protected final String TEXT_365 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_366 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_367 = NL + "\tcase ";
  protected final String TEXT_368 = ".VISUAL_ID: {";
  protected final String TEXT_369 = NL + "\tif (";
  protected final String TEXT_370 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_371 = NL + "\t\tresult.add(new ";
  protected final String TEXT_372 = "(nextValue, nodeVID));";
  protected final String TEXT_373 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_374 = NL + "\t\t}";
  protected final String TEXT_375 = NL + "\t}";
  protected final String TEXT_376 = NL + "\t}";
  protected final String TEXT_377 = NL + "\treturn result;";
  protected final String TEXT_378 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_379 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_380 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_381 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_382 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_383 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_384 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_385 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_386 = " domainModelEditDomain = ";
  protected final String TEXT_387 = ".getEditingDomain(";
  protected final String TEXT_388 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_389 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_390 = NL;
  protected final String TEXT_391 = NL;
  protected final String TEXT_392 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_393 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_394 = " feature, ";
  protected final String TEXT_395 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_396 = NL;
  protected final String TEXT_397 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_398 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_399 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_400 = NL;
  protected final String TEXT_401 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_402 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_403 = NL;
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d602 1
a602 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d604 1
a604 1
    if (!genCompartment.isListLayout()) {
d606 1
a606 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d608 1
a608 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.XYLayoutEditPolicy"));
d610 1
a610 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d612 1
a612 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d616 1
d618 1
d620 6
d627 1
a627 1
    stringBuffer.append(TEXT_42);
d629 1
a629 1
    stringBuffer.append(TEXT_43);
d631 1
a631 1
    stringBuffer.append(TEXT_44);
d633 1
a633 1
    stringBuffer.append(TEXT_45);
d635 1
a635 1
    stringBuffer.append(TEXT_46);
d637 1
a637 1
    stringBuffer.append(TEXT_47);
d639 1
a639 1
    stringBuffer.append(TEXT_48);
d641 1
a641 1
    stringBuffer.append(TEXT_49);
d643 11
a653 1
    stringBuffer.append(TEXT_50);
d655 1
a655 1
    stringBuffer.append(TEXT_51);
d657 1
a657 1
    stringBuffer.append(TEXT_52);
d659 1
a659 1
    stringBuffer.append(TEXT_53);
d661 1
a661 1
    stringBuffer.append(TEXT_54);
d663 1
a663 1
    stringBuffer.append(TEXT_55);
d665 11
a675 1
    stringBuffer.append(TEXT_56);
d682 1
a682 1
    stringBuffer.append(TEXT_57);
d686 1
a686 1
    stringBuffer.append(TEXT_58);
d688 1
a688 1
    stringBuffer.append(TEXT_59);
d690 1
a690 1
    stringBuffer.append(TEXT_60);
d692 1
a692 1
    stringBuffer.append(TEXT_61);
d694 1
a694 1
    stringBuffer.append(TEXT_62);
d696 1
a696 1
    stringBuffer.append(TEXT_63);
d698 1
a698 1
    stringBuffer.append(TEXT_64);
d700 1
a700 1
    stringBuffer.append(TEXT_65);
d702 1
a702 1
    stringBuffer.append(TEXT_66);
d704 1
a704 1
    stringBuffer.append(TEXT_67);
d706 1
a706 1
    stringBuffer.append(TEXT_68);
d708 1
a708 1
    stringBuffer.append(TEXT_69);
d710 1
a710 1
    stringBuffer.append(TEXT_70);
d715 1
a715 1
    stringBuffer.append(TEXT_71);
d717 1
a717 1
    stringBuffer.append(TEXT_72);
d719 1
a719 1
    stringBuffer.append(TEXT_73);
d721 1
a721 1
    stringBuffer.append(TEXT_74);
d723 1
a723 1
    stringBuffer.append(TEXT_75);
d729 1
a729 1
    stringBuffer.append(TEXT_76);
d738 1
a738 1
    stringBuffer.append(TEXT_77);
d740 1
a740 1
    stringBuffer.append(TEXT_78);
d746 1
a746 1
    stringBuffer.append(TEXT_79);
d748 1
a748 1
    stringBuffer.append(TEXT_80);
d750 1
a750 1
    stringBuffer.append(TEXT_81);
d752 1
a752 1
    stringBuffer.append(TEXT_82);
d756 1
a756 1
    stringBuffer.append(TEXT_83);
d758 1
a758 1
    stringBuffer.append(TEXT_84);
d760 1
a760 1
    stringBuffer.append(TEXT_85);
d762 1
a762 1
    stringBuffer.append(TEXT_86);
d764 1
a764 1
    stringBuffer.append(TEXT_87);
d770 1
a770 1
    stringBuffer.append(TEXT_88);
d772 1
a772 1
    stringBuffer.append(TEXT_89);
d774 1
a774 1
    stringBuffer.append(TEXT_90);
d776 1
a776 1
    stringBuffer.append(TEXT_91);
d780 1
a780 1
    stringBuffer.append(TEXT_92);
d782 1
a782 1
    stringBuffer.append(TEXT_93);
d784 1
a784 1
    stringBuffer.append(TEXT_94);
d786 1
a786 1
    stringBuffer.append(TEXT_95);
d788 1
a788 1
    stringBuffer.append(TEXT_96);
d793 1
a793 1
    stringBuffer.append(TEXT_97);
d799 1
a799 1
    stringBuffer.append(TEXT_98);
d812 1
a812 1
    stringBuffer.append(TEXT_99);
d817 1
a817 1
    stringBuffer.append(TEXT_100);
d819 1
a819 1
    stringBuffer.append(TEXT_101);
d821 1
a821 1
    stringBuffer.append(TEXT_102);
d826 1
a826 1
    stringBuffer.append(TEXT_103);
d828 1
a828 1
    stringBuffer.append(TEXT_104);
d830 1
a830 1
    stringBuffer.append(TEXT_105);
d832 1
a832 1
    stringBuffer.append(TEXT_106);
d834 1
a834 1
    stringBuffer.append(TEXT_107);
d839 1
a839 1
    stringBuffer.append(TEXT_108);
d841 1
a841 1
    stringBuffer.append(TEXT_109);
d843 1
a843 1
    stringBuffer.append(TEXT_110);
d845 1
a845 1
    stringBuffer.append(TEXT_111);
d847 1
a847 1
    stringBuffer.append(TEXT_112);
d856 1
a856 1
    stringBuffer.append(TEXT_113);
d861 1
a861 1
    stringBuffer.append(TEXT_114);
d863 1
a863 1
    stringBuffer.append(TEXT_115);
d865 1
a865 1
    stringBuffer.append(TEXT_116);
d870 1
a870 1
    stringBuffer.append(TEXT_117);
d872 1
a872 1
    stringBuffer.append(TEXT_118);
d874 1
a874 1
    stringBuffer.append(TEXT_119);
d876 1
a876 1
    stringBuffer.append(TEXT_120);
d878 1
a878 1
    stringBuffer.append(TEXT_121);
d886 1
a886 1
    stringBuffer.append(TEXT_122);
d888 1
a888 1
    stringBuffer.append(TEXT_123);
d890 1
a890 1
    stringBuffer.append(TEXT_124);
d892 1
a892 1
    stringBuffer.append(TEXT_125);
d894 1
a894 1
    stringBuffer.append(TEXT_126);
d898 1
a898 1
    stringBuffer.append(TEXT_127);
d900 1
a900 1
    stringBuffer.append(TEXT_128);
d902 1
a902 1
    stringBuffer.append(TEXT_129);
d904 1
a904 1
    stringBuffer.append(TEXT_130);
d906 1
a906 1
    stringBuffer.append(TEXT_131);
d908 1
a908 1
    stringBuffer.append(TEXT_132);
d910 1
a910 1
    stringBuffer.append(TEXT_133);
d912 1
a912 1
    stringBuffer.append(TEXT_134);
d914 1
a914 1
    stringBuffer.append(TEXT_135);
d916 1
a916 1
    stringBuffer.append(TEXT_136);
d927 1
a927 1
    stringBuffer.append(TEXT_137);
d929 1
a929 1
    stringBuffer.append(TEXT_138);
d931 1
a931 1
    stringBuffer.append(TEXT_139);
d933 1
a933 1
    stringBuffer.append(TEXT_140);
d935 1
a935 1
    stringBuffer.append(TEXT_141);
d937 1
a937 1
    stringBuffer.append(TEXT_142);
d939 1
a939 1
    stringBuffer.append(TEXT_143);
d941 1
a941 1
    stringBuffer.append(TEXT_144);
d943 1
a943 1
    stringBuffer.append(TEXT_145);
d945 1
a945 1
    stringBuffer.append(TEXT_146);
d947 1
a947 1
    stringBuffer.append(TEXT_147);
d951 1
a951 1
    stringBuffer.append(TEXT_148);
d955 1
a955 1
    stringBuffer.append(TEXT_149);
d957 1
a957 1
    stringBuffer.append(TEXT_150);
d959 1
a959 1
    stringBuffer.append(TEXT_151);
d963 1
a963 1
    stringBuffer.append(TEXT_152);
d970 1
a970 1
    stringBuffer.append(TEXT_153);
d972 1
a972 1
    stringBuffer.append(TEXT_154);
d974 1
a974 1
    stringBuffer.append(TEXT_155);
d976 1
a976 1
    stringBuffer.append(TEXT_156);
d978 1
a978 1
    stringBuffer.append(TEXT_157);
d980 1
a980 1
    stringBuffer.append(TEXT_158);
d982 1
a982 1
    stringBuffer.append(TEXT_159);
d984 1
a984 1
    stringBuffer.append(TEXT_160);
d986 1
a986 1
    stringBuffer.append(TEXT_161);
d988 1
a988 1
    stringBuffer.append(TEXT_162);
d990 1
a990 1
    stringBuffer.append(TEXT_163);
d992 1
a992 1
    stringBuffer.append(TEXT_164);
d994 1
a994 1
    stringBuffer.append(TEXT_165);
d996 1
a996 1
    stringBuffer.append(TEXT_166);
d998 1
a998 1
    stringBuffer.append(TEXT_167);
d1000 1
a1000 1
    stringBuffer.append(TEXT_168);
d1002 1
a1002 1
    stringBuffer.append(TEXT_169);
d1004 1
a1004 1
    stringBuffer.append(TEXT_170);
d1006 1
a1006 1
    stringBuffer.append(TEXT_171);
d1008 1
a1008 1
    stringBuffer.append(TEXT_172);
d1010 1
a1010 1
    stringBuffer.append(TEXT_173);
d1018 1
a1018 1
    stringBuffer.append(TEXT_174);
d1020 1
a1020 1
    stringBuffer.append(TEXT_175);
d1022 1
a1022 1
    stringBuffer.append(TEXT_176);
d1024 1
a1024 1
    stringBuffer.append(TEXT_177);
d1026 1
a1026 1
    stringBuffer.append(TEXT_178);
d1028 1
a1028 1
    stringBuffer.append(TEXT_179);
d1030 1
a1030 1
    stringBuffer.append(TEXT_180);
d1038 1
a1038 1
    stringBuffer.append(TEXT_181);
d1043 1
a1043 1
    stringBuffer.append(TEXT_182);
d1045 1
a1045 1
    stringBuffer.append(TEXT_183);
d1047 1
a1047 1
    stringBuffer.append(TEXT_184);
d1052 1
a1052 1
    stringBuffer.append(TEXT_185);
d1054 1
a1054 1
    stringBuffer.append(TEXT_186);
d1056 1
a1056 1
    stringBuffer.append(TEXT_187);
d1058 1
a1058 1
    stringBuffer.append(TEXT_188);
d1060 1
a1060 1
    stringBuffer.append(TEXT_189);
d1073 1
a1073 1
    stringBuffer.append(TEXT_190);
d1078 1
a1078 1
    stringBuffer.append(TEXT_191);
d1080 1
a1080 1
    stringBuffer.append(TEXT_192);
d1082 1
a1082 1
    stringBuffer.append(TEXT_193);
d1087 1
a1087 1
    stringBuffer.append(TEXT_194);
d1089 1
a1089 1
    stringBuffer.append(TEXT_195);
d1091 1
a1091 1
    stringBuffer.append(TEXT_196);
d1093 1
a1093 1
    stringBuffer.append(TEXT_197);
d1095 1
a1095 1
    stringBuffer.append(TEXT_198);
d1103 1
a1103 1
    stringBuffer.append(TEXT_199);
d1105 1
a1105 1
    stringBuffer.append(TEXT_200);
d1107 1
a1107 1
    stringBuffer.append(TEXT_201);
d1109 1
a1109 1
    stringBuffer.append(TEXT_202);
d1111 1
a1111 1
    stringBuffer.append(TEXT_203);
d1115 1
a1115 1
    stringBuffer.append(TEXT_204);
d1117 1
a1117 1
    stringBuffer.append(TEXT_205);
d1119 1
a1119 1
    stringBuffer.append(TEXT_206);
d1121 1
a1121 1
    stringBuffer.append(TEXT_207);
d1123 1
a1123 1
    stringBuffer.append(TEXT_208);
d1127 1
a1127 1
    stringBuffer.append(TEXT_209);
d1129 1
a1129 1
    stringBuffer.append(TEXT_210);
d1131 1
a1131 1
    stringBuffer.append(TEXT_211);
d1133 1
a1133 1
    stringBuffer.append(TEXT_212);
d1135 1
a1135 1
    stringBuffer.append(TEXT_213);
d1146 1
a1146 1
    stringBuffer.append(TEXT_214);
d1148 1
a1148 1
    stringBuffer.append(TEXT_215);
d1150 1
a1150 1
    stringBuffer.append(TEXT_216);
d1152 1
a1152 1
    stringBuffer.append(TEXT_217);
d1154 1
a1154 1
    stringBuffer.append(TEXT_218);
d1156 1
a1156 1
    stringBuffer.append(TEXT_219);
d1158 1
a1158 1
    stringBuffer.append(TEXT_220);
d1160 1
a1160 1
    stringBuffer.append(TEXT_221);
d1162 1
a1162 1
    stringBuffer.append(TEXT_222);
d1164 1
a1164 1
    stringBuffer.append(TEXT_223);
d1166 1
a1166 1
    stringBuffer.append(TEXT_224);
d1171 1
a1171 1
    stringBuffer.append(TEXT_225);
d1173 1
a1173 1
    stringBuffer.append(TEXT_226);
d1175 1
a1175 1
    stringBuffer.append(TEXT_227);
d1182 1
a1182 1
    stringBuffer.append(TEXT_228);
d1184 1
a1184 1
    stringBuffer.append(TEXT_229);
d1186 1
a1186 1
    stringBuffer.append(TEXT_230);
d1188 1
a1188 1
    stringBuffer.append(TEXT_231);
d1190 1
a1190 1
    stringBuffer.append(TEXT_232);
d1192 1
a1192 1
    stringBuffer.append(TEXT_233);
d1194 1
a1194 1
    stringBuffer.append(TEXT_234);
d1199 1
a1199 1
    stringBuffer.append(TEXT_235);
d1201 1
a1201 1
    stringBuffer.append(TEXT_236);
d1203 1
a1203 1
    stringBuffer.append(TEXT_237);
d1205 1
a1205 1
    stringBuffer.append(TEXT_238);
d1207 1
a1207 1
    stringBuffer.append(TEXT_239);
d1209 1
a1209 1
    stringBuffer.append(TEXT_240);
d1213 1
a1213 1
    stringBuffer.append(TEXT_241);
d1215 1
a1215 1
    stringBuffer.append(TEXT_242);
d1217 1
a1217 1
    stringBuffer.append(TEXT_243);
d1219 1
a1219 1
    stringBuffer.append(TEXT_244);
d1222 1
a1222 1
    stringBuffer.append(TEXT_245);
d1226 1
a1226 1
    stringBuffer.append(TEXT_246);
d1228 1
a1228 1
    stringBuffer.append(TEXT_247);
d1230 1
a1230 1
    stringBuffer.append(TEXT_248);
d1232 1
a1232 1
    stringBuffer.append(TEXT_249);
d1240 1
a1240 1
    stringBuffer.append(TEXT_250);
d1242 1
a1242 1
    stringBuffer.append(TEXT_251);
d1244 1
a1244 1
    stringBuffer.append(TEXT_252);
d1246 1
a1246 1
    stringBuffer.append(TEXT_253);
d1248 1
a1248 1
    stringBuffer.append(TEXT_254);
d1250 1
a1250 1
    stringBuffer.append(TEXT_255);
d1256 23
a1278 1
    stringBuffer.append(TEXT_256);
d1280 3
a1282 3
    stringBuffer.append(TEXT_257);
    stringBuffer.append(TEXT_258);
    stringBuffer.append(TEXT_259);
d1284 1
a1284 1
    stringBuffer.append(TEXT_260);
d1286 5
a1290 1
    stringBuffer.append(TEXT_261);
d1292 15
a1306 7
    stringBuffer.append(TEXT_262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_263);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LabeledContainer"));
    stringBuffer.append(TEXT_264);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LabeledContainer"));
    stringBuffer.append(TEXT_265);
d1308 1
a1308 1
    stringBuffer.append(TEXT_266);
d1310 1
a1310 1
    stringBuffer.append(TEXT_267);
d1312 1
a1312 1
    stringBuffer.append(TEXT_268);
d1314 1
a1314 1
    stringBuffer.append(TEXT_269);
d1316 1
a1316 1
    stringBuffer.append(TEXT_270);
d1318 1
a1318 1
    stringBuffer.append(TEXT_271);
d1320 1
a1320 1
    stringBuffer.append(TEXT_272);
d1322 1
a1322 1
    stringBuffer.append(TEXT_273);
d1324 1
a1324 1
    stringBuffer.append(TEXT_274);
d1326 1
a1326 1
    stringBuffer.append(TEXT_275);
d1328 1
a1328 1
    stringBuffer.append(TEXT_276);
d1330 1
a1330 1
    stringBuffer.append(TEXT_277);
d1332 1
a1332 1
    stringBuffer.append(TEXT_278);
d1334 1
a1334 1
    stringBuffer.append(TEXT_279);
d1338 1
a1338 1
    stringBuffer.append(TEXT_280);
d1340 1
a1340 1
    stringBuffer.append(TEXT_281);
d1342 1
a1342 1
    stringBuffer.append(TEXT_282);
d1346 1
a1346 7
    stringBuffer.append(TEXT_283);
    stringBuffer.append(importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_284);
    stringBuffer.append(importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_285);
    stringBuffer.append(importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_286);
d1353 2
a1354 2
    stringBuffer.append(TEXT_287);
    stringBuffer.append(TEXT_288);
d1356 1
a1356 1
    stringBuffer.append(TEXT_289);
d1358 1
a1358 1
    stringBuffer.append(TEXT_290);
d1360 1
a1360 1
    stringBuffer.append(TEXT_291);
d1362 1
a1362 1
    stringBuffer.append(TEXT_292);
d1364 1
a1364 1
    stringBuffer.append(TEXT_293);
d1366 1
a1366 1
    stringBuffer.append(TEXT_294);
d1368 1
a1368 1
    stringBuffer.append(TEXT_295);
d1383 1
a1383 1
    stringBuffer.append(TEXT_296);
d1385 1
a1385 1
    stringBuffer.append(TEXT_297);
d1387 1
a1387 1
    stringBuffer.append(TEXT_298);
d1389 1
a1389 1
    stringBuffer.append(TEXT_299);
d1393 1
a1393 1
    stringBuffer.append(TEXT_300);
d1395 1
a1395 1
    stringBuffer.append(TEXT_301);
d1414 1
a1414 1
    stringBuffer.append(TEXT_302);
d1416 1
a1416 1
    stringBuffer.append(TEXT_303);
d1418 1
a1418 1
    stringBuffer.append(TEXT_304);
d1420 1
a1420 1
    stringBuffer.append(TEXT_305);
d1422 1
a1422 1
    stringBuffer.append(TEXT_306);
d1426 1
a1426 1
    stringBuffer.append(TEXT_307);
d1428 1
a1428 1
    stringBuffer.append(TEXT_308);
d1430 1
a1430 1
    stringBuffer.append(TEXT_309);
d1432 1
a1432 1
    stringBuffer.append(TEXT_310);
d1440 1
a1440 1
    stringBuffer.append(TEXT_311);
d1442 1
a1442 1
    stringBuffer.append(TEXT_312);
d1444 1
a1444 1
    stringBuffer.append(TEXT_313);
d1449 1
a1449 1
    stringBuffer.append(TEXT_314);
d1451 1
a1451 1
    stringBuffer.append(TEXT_315);
d1453 1
a1453 1
    stringBuffer.append(TEXT_316);
d1455 1
a1455 1
    stringBuffer.append(TEXT_317);
d1464 1
a1464 1
    stringBuffer.append(TEXT_318);
d1468 1
a1468 1
    stringBuffer.append(TEXT_319);
d1470 1
a1470 1
    stringBuffer.append(TEXT_320);
d1476 1
a1476 1
    stringBuffer.append(TEXT_321);
d1478 1
a1478 1
    stringBuffer.append(TEXT_322);
d1480 1
a1480 1
    stringBuffer.append(TEXT_323);
d1484 1
a1484 1
    stringBuffer.append(TEXT_324);
d1488 1
a1488 1
    stringBuffer.append(TEXT_325);
d1490 1
a1490 1
    stringBuffer.append(TEXT_326);
d1492 1
a1492 1
    stringBuffer.append(TEXT_327);
d1497 2
a1498 2
    stringBuffer.append(TEXT_328);
    stringBuffer.append(TEXT_329);
d1500 1
a1500 1
    stringBuffer.append(TEXT_330);
d1510 1
a1510 1
    stringBuffer.append(TEXT_331);
d1512 1
a1512 1
    stringBuffer.append(TEXT_332);
d1514 1
a1514 1
    stringBuffer.append(TEXT_333);
d1516 1
a1516 1
    stringBuffer.append(TEXT_334);
d1518 1
a1518 1
    stringBuffer.append(TEXT_335);
d1529 1
a1529 1
    stringBuffer.append(TEXT_336);
d1531 1
a1531 1
    stringBuffer.append(TEXT_337);
d1533 1
a1533 1
    stringBuffer.append(TEXT_338);
d1535 1
a1535 1
    stringBuffer.append(TEXT_339);
d1539 1
a1539 1
    stringBuffer.append(TEXT_340);
d1543 1
a1543 1
    stringBuffer.append(TEXT_341);
d1545 1
a1545 1
    stringBuffer.append(TEXT_342);
d1549 1
a1549 1
    stringBuffer.append(TEXT_343);
d1553 1
a1553 1
    stringBuffer.append(TEXT_344);
d1555 2
a1556 2
    stringBuffer.append(TEXT_345);
    stringBuffer.append(TEXT_346);
d1560 1
a1560 1
    stringBuffer.append(TEXT_347);
d1562 1
a1562 1
    stringBuffer.append(TEXT_348);
d1566 1
a1566 1
    stringBuffer.append(TEXT_349);
d1568 1
a1568 1
    stringBuffer.append(TEXT_350);
d1570 1
a1570 1
    stringBuffer.append(TEXT_351);
d1588 1
a1588 1
    stringBuffer.append(TEXT_352);
d1590 1
a1590 1
    stringBuffer.append(TEXT_353);
d1592 1
a1592 1
    stringBuffer.append(TEXT_354);
d1594 1
a1594 1
    stringBuffer.append(TEXT_355);
d1596 1
a1596 1
    stringBuffer.append(TEXT_356);
d1605 1
a1605 1
    stringBuffer.append(TEXT_357);
d1607 1
a1607 1
    stringBuffer.append(TEXT_358);
d1609 1
a1609 1
    stringBuffer.append(TEXT_359);
d1611 1
a1611 1
    stringBuffer.append(TEXT_360);
d1615 1
a1615 1
    stringBuffer.append(TEXT_361);
d1617 1
a1617 1
    stringBuffer.append(TEXT_362);
d1619 1
a1619 1
    stringBuffer.append(TEXT_363);
d1623 1
a1623 1
    stringBuffer.append(TEXT_364);
d1625 1
a1625 1
    stringBuffer.append(TEXT_365);
d1630 1
a1630 1
    stringBuffer.append(TEXT_366);
d1637 1
a1637 1
    stringBuffer.append(TEXT_367);
d1639 1
a1639 1
    stringBuffer.append(TEXT_368);
d1643 1
a1643 1
    stringBuffer.append(TEXT_369);
d1645 1
a1645 1
    stringBuffer.append(TEXT_370);
d1649 1
a1649 1
    stringBuffer.append(TEXT_371);
d1651 1
a1651 1
    stringBuffer.append(TEXT_372);
d1655 1
a1655 1
    stringBuffer.append(TEXT_373);
d1659 1
a1659 1
    stringBuffer.append(TEXT_374);
d1665 1
a1665 1
    stringBuffer.append(TEXT_375);
d1670 1
a1670 1
    stringBuffer.append(TEXT_376);
d1675 1
a1675 1
    stringBuffer.append(TEXT_377);
d1679 1
a1679 1
    stringBuffer.append(TEXT_378);
d1681 1
a1681 1
    stringBuffer.append(TEXT_379);
d1683 1
a1683 1
    stringBuffer.append(TEXT_380);
d1685 1
a1685 1
    stringBuffer.append(TEXT_381);
d1687 1
a1687 1
    stringBuffer.append(TEXT_382);
d1689 1
a1689 1
    stringBuffer.append(TEXT_383);
d1691 1
a1691 1
    stringBuffer.append(TEXT_384);
d1693 1
a1693 1
    stringBuffer.append(TEXT_385);
d1695 1
a1695 1
    stringBuffer.append(TEXT_386);
d1697 1
a1697 1
    stringBuffer.append(TEXT_387);
d1699 1
a1699 1
    stringBuffer.append(TEXT_388);
d1701 1
a1701 1
    stringBuffer.append(TEXT_389);
d1705 3
a1707 3
    stringBuffer.append(TEXT_390);
    stringBuffer.append(TEXT_391);
    stringBuffer.append(TEXT_392);
d1709 1
a1709 1
    stringBuffer.append(TEXT_393);
d1711 1
a1711 1
    stringBuffer.append(TEXT_394);
d1713 7
a1719 3
    stringBuffer.append(TEXT_395);
    stringBuffer.append(TEXT_396);
    stringBuffer.append(TEXT_397);
d1721 1
a1721 1
    stringBuffer.append(TEXT_398);
d1723 3
a1725 3
    stringBuffer.append(TEXT_399);
    stringBuffer.append(TEXT_400);
    stringBuffer.append(TEXT_401);
d1727 1
a1727 1
    stringBuffer.append(TEXT_402);
d1729 1
a1729 1
    stringBuffer.append(TEXT_403);
@


1.16
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d255 2
a256 2
  protected final String TEXT_236 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_237 = "Command((View) getModel(), requestEx";
d421 1
a421 1
  protected final String TEXT_402 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
a422 76
  protected final String TEXT_404 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_405 = "static ";
  protected final String TEXT_406 = "class Create";
  protected final String TEXT_407 = "Command extends ";
  protected final String TEXT_408 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_409 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_410 = "Command(";
  protected final String TEXT_411 = " parent, ";
  protected final String TEXT_412 = " request";
  protected final String TEXT_413 = ", ";
  protected final String TEXT_414 = " constraint";
  protected final String TEXT_415 = ") {" + NL + "\t\t\t";
  protected final String TEXT_416 = " domainModelEditDomain = ";
  protected final String TEXT_417 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_418 = NL + "\t\t\t";
  protected final String TEXT_419 = " createdDomainElement = ";
  protected final String TEXT_420 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_421 = ".eINSTANCE.get";
  protected final String TEXT_422 = "());";
  protected final String TEXT_423 = NL + "\t\t\t";
  protected final String TEXT_424 = " createdDomainElement = ";
  protected final String TEXT_425 = ".eINSTANCE.create";
  protected final String TEXT_426 = "();";
  protected final String TEXT_427 = NL + "\t\t\t";
  protected final String TEXT_428 = NL + "\t\t\t";
  protected final String TEXT_429 = ".";
  protected final String TEXT_430 = ".initializeElement(";
  protected final String TEXT_431 = "(";
  protected final String TEXT_432 = ") ";
  protected final String TEXT_433 = "createdDomainElement);";
  protected final String TEXT_434 = NL;
  protected final String TEXT_435 = NL + "\t\tif (";
  protected final String TEXT_436 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_437 = NL + "\t\t}";
  protected final String TEXT_438 = NL + "\t\tif (";
  protected final String TEXT_439 = ".size() >= ";
  protected final String TEXT_440 = ".eINSTANCE.get";
  protected final String TEXT_441 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_442 = NL + "\t\t}";
  protected final String TEXT_443 = NL;
  protected final String TEXT_444 = NL + "\t\tif (";
  protected final String TEXT_445 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_446 = NL + "\t\t}";
  protected final String TEXT_447 = NL + "\t\tif (";
  protected final String TEXT_448 = ".size() >= ";
  protected final String TEXT_449 = ".eINSTANCE.get";
  protected final String TEXT_450 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_451 = NL + "\t\t}";
  protected final String TEXT_452 = NL + "\t\t\t";
  protected final String TEXT_453 = " compoundCommand = new ";
  protected final String TEXT_454 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_455 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_456 = ".eINSTANCE.get";
  protected final String TEXT_457 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_458 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_459 = ".eINSTANCE.get";
  protected final String TEXT_460 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_461 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_462 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_463 = ".eINSTANCE.get";
  protected final String TEXT_464 = "(), createdDomainElement);";
  protected final String TEXT_465 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_466 = "(";
  protected final String TEXT_467 = ", ";
  protected final String TEXT_468 = "));";
  protected final String TEXT_469 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_470 = "(parent, ";
  protected final String TEXT_471 = "(";
  protected final String TEXT_472 = ") ";
  protected final String TEXT_473 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_474 = "constraint";
  protected final String TEXT_475 = "null";
  protected final String TEXT_476 = ", ";
  protected final String TEXT_477 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_478 = NL + "}" + NL;
  protected final String TEXT_479 = NL;
d761 1
a761 2
if (upperBound > 0) {
	if (upperBound == 1) {
d769 2
a770 1
	} else {
d805 1
a805 2
if (upperBound > 0) {
	if (upperBound == 1) {
d813 2
a814 1
	} else {
d987 1
a987 2
if (upperBound > 0) {
	if (upperBound == 1) {
d995 2
a996 1
	} else {
d1022 1
a1022 2
if (upperBound > 0) {
	if (upperBound == 1) {
d1030 2
a1031 1
	} else {
d1148 1
a1148 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d1642 1
a1642 6
    
for(Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	boolean isStatic = false;
	boolean isListLayout = genCompartment.isListLayout();

a1643 219
    
if (genDiagram.getPalette() != null) {

    stringBuffer.append(TEXT_404);
    if (isStatic) {
    stringBuffer.append(TEXT_405);
    }
    stringBuffer.append(TEXT_406);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_407);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_408);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_409);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_410);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_411);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_412);
    if (!isListLayout) {
    stringBuffer.append(TEXT_413);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_414);
    }
    stringBuffer.append(TEXT_415);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_416);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_417);
    
	if (next.getDomainMetaClass().isMapEntry()) {
	/*Workaround for Ecore example: map entries cannot be created using factory, only using reflective EFactory.create() method*/

    stringBuffer.append(TEXT_418);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_419);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_420);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_421);
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_422);
    
	} else {

    stringBuffer.append(TEXT_423);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_424);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_425);
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_426);
    
	}

    stringBuffer.append(TEXT_427);
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
    stringBuffer.append(TEXT_428);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
    stringBuffer.append(TEXT_429);
    stringBuffer.append(next.getUniqueIdentifier());
    stringBuffer.append(TEXT_430);
    if (next.getDomainMetaClass().isExternalInterface()) {
    stringBuffer.append(TEXT_431);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_432);
    }
    stringBuffer.append(TEXT_433);
    
	TypeModelFacet facet = next.getModelFacet();
	GenFeature childFeature = facet.getChildMetaFeature();
	GenFeature containmentFeature = facet.getContainmentMetaFeature();
	{
		GenFeature _feature = containmentFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_434);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_435);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_436);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_437);
    
	} else {

    stringBuffer.append(TEXT_438);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_439);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_440);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_441);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_442);
    
	}
}

    
	}
	if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
		GenFeature _feature = childFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_443);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_444);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_445);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_446);
    
	} else {

    stringBuffer.append(TEXT_447);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_448);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_449);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_450);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_451);
    
	}
}

    stringBuffer.append(TEXT_452);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_453);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_454);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_455);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_456);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_457);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_458);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_459);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_460);
    
	} else {

    stringBuffer.append(TEXT_461);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_462);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_463);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_464);
    
	}

    
	if (!isListLayout) {
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_465);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_466);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_467);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_468);
    
	}

    stringBuffer.append(TEXT_469);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_470);
    if (next.getDomainMetaClass().isExternalInterface()) {
    stringBuffer.append(TEXT_471);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_472);
    }
    stringBuffer.append(TEXT_473);
    if(!isListLayout) {
    stringBuffer.append(TEXT_474);
    } else {
    stringBuffer.append(TEXT_475);
    }
    stringBuffer.append(TEXT_476);
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_477);
    
}

    
}

    stringBuffer.append(TEXT_478);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_479);
@


1.15
log
@Containers with XY layout should define adapter for SnapToHelper (used to be defined only for the DiagramEditPart)
@
text
@d263 58
a320 58
  protected final String TEXT_244 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_245 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_246 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_247 = " result = new ";
  protected final String TEXT_248 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_249 = "());" + NL + "\t\t";
  protected final String TEXT_250 = " scrollPane = new ";
  protected final String TEXT_251 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_252 = NL + "\t\t";
  protected final String TEXT_253 = " viewport = new ";
  protected final String TEXT_254 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_255 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_256 = "());";
  protected final String TEXT_257 = NL + "\t\t";
  protected final String TEXT_258 = " viewport = new ";
  protected final String TEXT_259 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_260 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_261 = "());";
  protected final String TEXT_262 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_263 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_264 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_265 = "(this);" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(key);" + NL + "\t}";
  protected final String TEXT_266 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_267 = " resolveSemanticElement() {" + NL + "\t\tView view = getDiagramNode();" + NL + "\t\treturn (view.getElement() instanceof ";
  protected final String TEXT_268 = ") ? (";
  protected final String TEXT_269 = ") view.getElement() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_270 = NL;
  protected final String TEXT_271 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_272 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_273 = " domainModelEditDomain = ";
  protected final String TEXT_274 = ".getEditingDomain(";
  protected final String TEXT_275 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_276 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_277 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_278 = " {";
  protected final String TEXT_279 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_280 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_281 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_282 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_283 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_284 = " createFilter() {";
  protected final String TEXT_285 = NL + "\t\t\t";
  protected final String TEXT_286 = " filter = ";
  protected final String TEXT_287 = ".createFeatureFilter(";
  protected final String TEXT_288 = ".eINSTANCE.get";
  protected final String TEXT_289 = "());";
  protected final String TEXT_290 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_291 = ".createFeatureFilter(";
  protected final String TEXT_292 = ".eINSTANCE.get";
  protected final String TEXT_293 = "()));";
  protected final String TEXT_294 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_295 = ".createNotifierFilter(";
  protected final String TEXT_296 = ".getElement()));";
  protected final String TEXT_297 = NL + "\t\t\t";
  protected final String TEXT_298 = " filter = ";
  protected final String TEXT_299 = ".createNotifierFilter(";
  protected final String TEXT_300 = ".getElement());";
  protected final String TEXT_301 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
d322 177
a498 160
  protected final String TEXT_303 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_304 = NL + "\t\t\t";
  protected final String TEXT_305 = " filter = ";
  protected final String TEXT_306 = ".NOT_TOUCH;";
  protected final String TEXT_307 = NL + "\t\t\treturn filter;";
  protected final String TEXT_308 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_309 = " getCreateNotationalElementCommand(";
  protected final String TEXT_310 = " descriptor) {";
  protected final String TEXT_311 = NL;
  protected final String TEXT_312 = "\t\t\t";
  protected final String TEXT_313 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_314 = NL + "\t\t\tcase ";
  protected final String TEXT_315 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_316 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_317 = "(";
  protected final String TEXT_318 = ", domainElement, ";
  protected final String TEXT_319 = "new ";
  protected final String TEXT_320 = "(0, 0, ";
  protected final String TEXT_321 = ", ";
  protected final String TEXT_322 = ")";
  protected final String TEXT_323 = NL + "null";
  protected final String TEXT_324 = ", ";
  protected final String TEXT_325 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_326 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_327 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_328 = " getSemanticChildNodes() {";
  protected final String TEXT_329 = NL;
  protected final String TEXT_330 = NL + "\treturn ";
  protected final String TEXT_331 = ".EMPTY_LIST;";
  protected final String TEXT_332 = NL + "\t";
  protected final String TEXT_333 = " result = new ";
  protected final String TEXT_334 = "();";
  protected final String TEXT_335 = NL + "\t";
  protected final String TEXT_336 = " viewObject = ";
  protected final String TEXT_337 = ";" + NL + "\t";
  protected final String TEXT_338 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_339 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_340 = NL + "\tfor(";
  protected final String TEXT_341 = " it = ";
  protected final String TEXT_342 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_343 = ") it.next();";
  protected final String TEXT_344 = NL + "\tnextValue = (";
  protected final String TEXT_345 = ")";
  protected final String TEXT_346 = ";";
  protected final String TEXT_347 = NL + "\tnodeVID = ";
  protected final String TEXT_348 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_349 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_350 = NL + "\tcase ";
  protected final String TEXT_351 = ".VISUAL_ID: {";
  protected final String TEXT_352 = NL + "\tif (";
  protected final String TEXT_353 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_354 = NL + "\t\tresult.add(new ";
  protected final String TEXT_355 = "(nextValue, nodeVID));";
  protected final String TEXT_356 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_357 = NL + "\t\t}";
  protected final String TEXT_358 = NL + "\t}";
  protected final String TEXT_359 = NL + "\t}";
  protected final String TEXT_360 = NL + "\treturn result;";
  protected final String TEXT_361 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_362 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_363 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_364 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_365 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_366 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_367 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_368 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_369 = " domainModelEditDomain = ";
  protected final String TEXT_370 = ".getEditingDomain(";
  protected final String TEXT_371 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_372 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_373 = NL;
  protected final String TEXT_374 = NL;
  protected final String TEXT_375 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_376 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_377 = " feature, ";
  protected final String TEXT_378 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_379 = NL;
  protected final String TEXT_380 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_381 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_382 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_383 = NL;
  protected final String TEXT_384 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_385 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_386 = NL;
  protected final String TEXT_387 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_388 = "static ";
  protected final String TEXT_389 = "class Create";
  protected final String TEXT_390 = "Command extends ";
  protected final String TEXT_391 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_392 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_393 = "Command(";
  protected final String TEXT_394 = " parent, ";
  protected final String TEXT_395 = " request";
  protected final String TEXT_396 = ", ";
  protected final String TEXT_397 = " constraint";
  protected final String TEXT_398 = ") {" + NL + "\t\t\t";
  protected final String TEXT_399 = " domainModelEditDomain = ";
  protected final String TEXT_400 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_401 = NL + "\t\t\t";
  protected final String TEXT_402 = " createdDomainElement = ";
  protected final String TEXT_403 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_404 = ".eINSTANCE.get";
  protected final String TEXT_405 = "());";
  protected final String TEXT_406 = NL + "\t\t\t";
  protected final String TEXT_407 = " createdDomainElement = ";
  protected final String TEXT_408 = ".eINSTANCE.create";
  protected final String TEXT_409 = "();";
  protected final String TEXT_410 = NL + "\t\t\t";
  protected final String TEXT_411 = NL + "\t\t\t";
  protected final String TEXT_412 = ".";
  protected final String TEXT_413 = ".initializeElement(";
  protected final String TEXT_414 = "(";
  protected final String TEXT_415 = ") ";
  protected final String TEXT_416 = "createdDomainElement);";
  protected final String TEXT_417 = NL;
  protected final String TEXT_418 = NL + "\t\tif (";
  protected final String TEXT_419 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_420 = NL + "\t\t}";
  protected final String TEXT_421 = NL + "\t\tif (";
  protected final String TEXT_422 = ".size() >= ";
  protected final String TEXT_423 = ".eINSTANCE.get";
  protected final String TEXT_424 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_425 = NL + "\t\t}";
  protected final String TEXT_426 = NL;
  protected final String TEXT_427 = NL + "\t\tif (";
  protected final String TEXT_428 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_429 = NL + "\t\t}";
  protected final String TEXT_430 = NL + "\t\tif (";
  protected final String TEXT_431 = ".size() >= ";
  protected final String TEXT_432 = ".eINSTANCE.get";
  protected final String TEXT_433 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_434 = NL + "\t\t}";
  protected final String TEXT_435 = NL + "\t\t\t";
  protected final String TEXT_436 = " compoundCommand = new ";
  protected final String TEXT_437 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_438 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_439 = ".eINSTANCE.get";
  protected final String TEXT_440 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_441 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_442 = ".eINSTANCE.get";
  protected final String TEXT_443 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_444 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_445 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_446 = ".eINSTANCE.get";
  protected final String TEXT_447 = "(), createdDomainElement);";
  protected final String TEXT_448 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_449 = "(";
  protected final String TEXT_450 = ", ";
  protected final String TEXT_451 = "));";
  protected final String TEXT_452 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_453 = "(parent, ";
  protected final String TEXT_454 = "(";
  protected final String TEXT_455 = ") ";
  protected final String TEXT_456 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_457 = "constraint";
  protected final String TEXT_458 = "null";
  protected final String TEXT_459 = ", ";
  protected final String TEXT_460 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_461 = NL + "}" + NL;
  protected final String TEXT_462 = NL;
d1243 45
d1289 1
a1289 1
    stringBuffer.append(TEXT_245);
d1291 1
a1291 1
    stringBuffer.append(TEXT_246);
d1293 1
a1293 1
    stringBuffer.append(TEXT_247);
d1295 1
a1295 1
    stringBuffer.append(TEXT_248);
d1297 1
a1297 1
    stringBuffer.append(TEXT_249);
d1299 1
a1299 1
    stringBuffer.append(TEXT_250);
d1301 1
a1301 1
    stringBuffer.append(TEXT_251);
d1303 1
a1303 1
    stringBuffer.append(TEXT_252);
d1305 1
a1305 1
    stringBuffer.append(TEXT_253);
d1307 1
a1307 1
    stringBuffer.append(TEXT_254);
d1309 1
a1309 1
    stringBuffer.append(TEXT_255);
d1311 1
a1311 1
    stringBuffer.append(TEXT_256);
d1313 1
a1313 1
    stringBuffer.append(TEXT_257);
d1315 1
a1315 1
    stringBuffer.append(TEXT_258);
d1317 1
a1317 1
    stringBuffer.append(TEXT_259);
d1319 1
a1319 1
    stringBuffer.append(TEXT_260);
d1321 1
a1321 1
    stringBuffer.append(TEXT_261);
d1323 1
a1323 1
    stringBuffer.append(TEXT_262);
d1327 1
a1327 1
    stringBuffer.append(TEXT_263);
d1329 1
a1329 1
    stringBuffer.append(TEXT_264);
d1331 1
a1331 1
    stringBuffer.append(TEXT_265);
d1335 1
a1335 1
    stringBuffer.append(TEXT_266);
d1337 1
a1337 1
    stringBuffer.append(TEXT_267);
d1339 1
a1339 1
    stringBuffer.append(TEXT_268);
d1341 1
a1341 1
    stringBuffer.append(TEXT_269);
d1348 2
a1349 2
    stringBuffer.append(TEXT_270);
    stringBuffer.append(TEXT_271);
d1351 1
a1351 1
    stringBuffer.append(TEXT_272);
d1353 1
a1353 1
    stringBuffer.append(TEXT_273);
d1355 1
a1355 1
    stringBuffer.append(TEXT_274);
d1357 1
a1357 1
    stringBuffer.append(TEXT_275);
d1359 1
a1359 1
    stringBuffer.append(TEXT_276);
d1361 1
a1361 1
    stringBuffer.append(TEXT_277);
d1363 1
a1363 1
    stringBuffer.append(TEXT_278);
d1378 1
a1378 1
    stringBuffer.append(TEXT_279);
d1380 1
a1380 1
    stringBuffer.append(TEXT_280);
d1382 1
a1382 1
    stringBuffer.append(TEXT_281);
d1384 1
a1384 1
    stringBuffer.append(TEXT_282);
d1388 1
a1388 1
    stringBuffer.append(TEXT_283);
d1390 1
a1390 1
    stringBuffer.append(TEXT_284);
d1409 1
a1409 1
    stringBuffer.append(TEXT_285);
d1411 1
a1411 1
    stringBuffer.append(TEXT_286);
d1413 1
a1413 1
    stringBuffer.append(TEXT_287);
d1415 1
a1415 1
    stringBuffer.append(TEXT_288);
d1417 1
a1417 1
    stringBuffer.append(TEXT_289);
d1421 1
a1421 1
    stringBuffer.append(TEXT_290);
d1423 1
a1423 1
    stringBuffer.append(TEXT_291);
d1425 1
a1425 1
    stringBuffer.append(TEXT_292);
d1427 1
a1427 1
    stringBuffer.append(TEXT_293);
d1435 1
a1435 1
    stringBuffer.append(TEXT_294);
d1437 1
a1437 1
    stringBuffer.append(TEXT_295);
d1439 1
a1439 1
    stringBuffer.append(TEXT_296);
d1444 1
a1444 1
    stringBuffer.append(TEXT_297);
d1446 1
a1446 1
    stringBuffer.append(TEXT_298);
d1448 1
a1448 1
    stringBuffer.append(TEXT_299);
d1450 1
a1450 1
    stringBuffer.append(TEXT_300);
d1459 1
a1459 1
    stringBuffer.append(TEXT_301);
d1463 1
a1463 1
    stringBuffer.append(TEXT_302);
d1465 1
a1465 1
    stringBuffer.append(TEXT_303);
d1471 1
a1471 1
    stringBuffer.append(TEXT_304);
d1473 1
a1473 1
    stringBuffer.append(TEXT_305);
d1475 1
a1475 1
    stringBuffer.append(TEXT_306);
d1479 1
a1479 1
    stringBuffer.append(TEXT_307);
d1483 1
a1483 1
    stringBuffer.append(TEXT_308);
d1485 1
a1485 1
    stringBuffer.append(TEXT_309);
d1487 1
a1487 1
    stringBuffer.append(TEXT_310);
d1492 2
a1493 2
    stringBuffer.append(TEXT_311);
    stringBuffer.append(TEXT_312);
d1495 1
a1495 1
    stringBuffer.append(TEXT_313);
d1505 1
a1505 1
    stringBuffer.append(TEXT_314);
d1507 1
a1507 1
    stringBuffer.append(TEXT_315);
d1509 1
a1509 1
    stringBuffer.append(TEXT_316);
d1511 1
a1511 1
    stringBuffer.append(TEXT_317);
d1513 1
a1513 1
    stringBuffer.append(TEXT_318);
d1524 1
a1524 1
    stringBuffer.append(TEXT_319);
d1526 1
a1526 1
    stringBuffer.append(TEXT_320);
d1528 1
a1528 1
    stringBuffer.append(TEXT_321);
d1530 1
a1530 1
    stringBuffer.append(TEXT_322);
d1534 1
a1534 1
    stringBuffer.append(TEXT_323);
d1538 1
a1538 1
    stringBuffer.append(TEXT_324);
d1540 1
a1540 1
    stringBuffer.append(TEXT_325);
d1544 1
a1544 1
    stringBuffer.append(TEXT_326);
d1548 1
a1548 1
    stringBuffer.append(TEXT_327);
d1550 2
a1551 2
    stringBuffer.append(TEXT_328);
    stringBuffer.append(TEXT_329);
d1555 1
a1555 1
    stringBuffer.append(TEXT_330);
d1557 1
a1557 1
    stringBuffer.append(TEXT_331);
d1561 1
a1561 1
    stringBuffer.append(TEXT_332);
d1563 1
a1563 1
    stringBuffer.append(TEXT_333);
d1565 1
a1565 1
    stringBuffer.append(TEXT_334);
d1583 1
a1583 1
    stringBuffer.append(TEXT_335);
d1585 1
a1585 1
    stringBuffer.append(TEXT_336);
d1587 1
a1587 1
    stringBuffer.append(TEXT_337);
d1589 1
a1589 1
    stringBuffer.append(TEXT_338);
d1591 1
a1591 1
    stringBuffer.append(TEXT_339);
d1600 1
a1600 1
    stringBuffer.append(TEXT_340);
d1602 1
a1602 1
    stringBuffer.append(TEXT_341);
d1604 1
a1604 1
    stringBuffer.append(TEXT_342);
d1606 1
a1606 1
    stringBuffer.append(TEXT_343);
d1610 1
a1610 1
    stringBuffer.append(TEXT_344);
d1612 1
a1612 1
    stringBuffer.append(TEXT_345);
d1614 1
a1614 1
    stringBuffer.append(TEXT_346);
d1618 1
a1618 1
    stringBuffer.append(TEXT_347);
d1620 1
a1620 1
    stringBuffer.append(TEXT_348);
d1625 1
a1625 1
    stringBuffer.append(TEXT_349);
d1632 1
a1632 1
    stringBuffer.append(TEXT_350);
d1634 1
a1634 1
    stringBuffer.append(TEXT_351);
d1638 1
a1638 1
    stringBuffer.append(TEXT_352);
d1640 1
a1640 1
    stringBuffer.append(TEXT_353);
d1644 1
a1644 1
    stringBuffer.append(TEXT_354);
d1646 1
a1646 1
    stringBuffer.append(TEXT_355);
d1650 1
a1650 1
    stringBuffer.append(TEXT_356);
d1654 1
a1654 1
    stringBuffer.append(TEXT_357);
d1660 1
a1660 1
    stringBuffer.append(TEXT_358);
d1665 1
a1665 1
    stringBuffer.append(TEXT_359);
d1670 1
a1670 1
    stringBuffer.append(TEXT_360);
d1674 1
a1674 1
    stringBuffer.append(TEXT_361);
d1676 1
a1676 1
    stringBuffer.append(TEXT_362);
d1678 1
a1678 1
    stringBuffer.append(TEXT_363);
d1680 1
a1680 1
    stringBuffer.append(TEXT_364);
d1682 1
a1682 1
    stringBuffer.append(TEXT_365);
d1684 1
a1684 1
    stringBuffer.append(TEXT_366);
d1686 1
a1686 1
    stringBuffer.append(TEXT_367);
d1688 1
a1688 1
    stringBuffer.append(TEXT_368);
d1690 1
a1690 1
    stringBuffer.append(TEXT_369);
d1692 1
a1692 1
    stringBuffer.append(TEXT_370);
d1694 1
a1694 1
    stringBuffer.append(TEXT_371);
d1696 1
a1696 1
    stringBuffer.append(TEXT_372);
d1700 3
a1702 3
    stringBuffer.append(TEXT_373);
    stringBuffer.append(TEXT_374);
    stringBuffer.append(TEXT_375);
d1704 1
a1704 1
    stringBuffer.append(TEXT_376);
d1706 1
a1706 1
    stringBuffer.append(TEXT_377);
d1708 3
a1710 3
    stringBuffer.append(TEXT_378);
    stringBuffer.append(TEXT_379);
    stringBuffer.append(TEXT_380);
d1712 1
a1712 1
    stringBuffer.append(TEXT_381);
d1714 3
a1716 3
    stringBuffer.append(TEXT_382);
    stringBuffer.append(TEXT_383);
    stringBuffer.append(TEXT_384);
d1718 1
a1718 1
    stringBuffer.append(TEXT_385);
d1725 1
a1725 1
    stringBuffer.append(TEXT_386);
d1729 1
a1729 1
    stringBuffer.append(TEXT_387);
d1731 1
a1731 1
    stringBuffer.append(TEXT_388);
d1733 1
a1733 1
    stringBuffer.append(TEXT_389);
d1736 1
a1736 1
    stringBuffer.append(TEXT_390);
d1738 1
a1738 1
    stringBuffer.append(TEXT_391);
d1740 1
a1740 1
    stringBuffer.append(TEXT_392);
d1743 1
a1743 1
    stringBuffer.append(TEXT_393);
d1745 1
a1745 1
    stringBuffer.append(TEXT_394);
d1747 1
a1747 1
    stringBuffer.append(TEXT_395);
d1749 1
a1749 1
    stringBuffer.append(TEXT_396);
d1751 1
a1751 1
    stringBuffer.append(TEXT_397);
d1753 1
a1753 1
    stringBuffer.append(TEXT_398);
d1755 1
a1755 1
    stringBuffer.append(TEXT_399);
d1757 1
a1757 1
    stringBuffer.append(TEXT_400);
d1762 1
a1762 1
    stringBuffer.append(TEXT_401);
d1764 1
a1764 1
    stringBuffer.append(TEXT_402);
d1766 1
a1766 1
    stringBuffer.append(TEXT_403);
d1768 1
a1768 1
    stringBuffer.append(TEXT_404);
d1770 1
a1770 1
    stringBuffer.append(TEXT_405);
d1774 1
a1774 1
    stringBuffer.append(TEXT_406);
d1776 1
a1776 1
    stringBuffer.append(TEXT_407);
d1778 1
a1778 1
    stringBuffer.append(TEXT_408);
d1780 1
a1780 1
    stringBuffer.append(TEXT_409);
d1784 1
a1784 1
    stringBuffer.append(TEXT_410);
d1786 1
a1786 1
    stringBuffer.append(TEXT_411);
d1788 1
a1788 1
    stringBuffer.append(TEXT_412);
d1790 1
a1790 1
    stringBuffer.append(TEXT_413);
d1792 1
a1792 1
    stringBuffer.append(TEXT_414);
d1794 1
a1794 1
    stringBuffer.append(TEXT_415);
d1796 1
a1796 1
    stringBuffer.append(TEXT_416);
d1807 1
a1807 1
    stringBuffer.append(TEXT_417);
d1813 1
a1813 1
    stringBuffer.append(TEXT_418);
d1815 1
a1815 1
    stringBuffer.append(TEXT_419);
d1817 1
a1817 1
    stringBuffer.append(TEXT_420);
d1821 1
a1821 1
    stringBuffer.append(TEXT_421);
d1823 1
a1823 1
    stringBuffer.append(TEXT_422);
d1825 1
a1825 1
    stringBuffer.append(TEXT_423);
d1827 1
a1827 1
    stringBuffer.append(TEXT_424);
d1829 1
a1829 1
    stringBuffer.append(TEXT_425);
d1842 1
a1842 1
    stringBuffer.append(TEXT_426);
d1848 1
a1848 1
    stringBuffer.append(TEXT_427);
d1850 1
a1850 1
    stringBuffer.append(TEXT_428);
d1852 1
a1852 1
    stringBuffer.append(TEXT_429);
d1856 1
a1856 1
    stringBuffer.append(TEXT_430);
d1858 1
a1858 1
    stringBuffer.append(TEXT_431);
d1860 1
a1860 1
    stringBuffer.append(TEXT_432);
d1862 1
a1862 1
    stringBuffer.append(TEXT_433);
d1864 1
a1864 1
    stringBuffer.append(TEXT_434);
d1869 1
a1869 1
    stringBuffer.append(TEXT_435);
d1871 1
a1871 1
    stringBuffer.append(TEXT_436);
d1873 1
a1873 1
    stringBuffer.append(TEXT_437);
d1875 1
a1875 1
    stringBuffer.append(TEXT_438);
d1877 1
a1877 1
    stringBuffer.append(TEXT_439);
d1879 1
a1879 1
    stringBuffer.append(TEXT_440);
d1881 1
a1881 1
    stringBuffer.append(TEXT_441);
d1883 1
a1883 1
    stringBuffer.append(TEXT_442);
d1885 1
a1885 1
    stringBuffer.append(TEXT_443);
d1889 1
a1889 1
    stringBuffer.append(TEXT_444);
d1891 1
a1891 1
    stringBuffer.append(TEXT_445);
d1893 1
a1893 1
    stringBuffer.append(TEXT_446);
d1895 1
a1895 1
    stringBuffer.append(TEXT_447);
d1909 1
a1909 1
    stringBuffer.append(TEXT_448);
d1911 1
a1911 1
    stringBuffer.append(TEXT_449);
d1913 1
a1913 1
    stringBuffer.append(TEXT_450);
d1915 1
a1915 1
    stringBuffer.append(TEXT_451);
d1919 1
a1919 1
    stringBuffer.append(TEXT_452);
d1921 1
a1921 1
    stringBuffer.append(TEXT_453);
d1923 1
a1923 1
    stringBuffer.append(TEXT_454);
d1925 1
a1925 1
    stringBuffer.append(TEXT_455);
d1927 1
a1927 1
    stringBuffer.append(TEXT_456);
d1929 1
a1929 1
    stringBuffer.append(TEXT_457);
d1931 1
a1931 1
    stringBuffer.append(TEXT_458);
d1933 1
a1933 1
    stringBuffer.append(TEXT_459);
d1935 1
a1935 1
    stringBuffer.append(TEXT_460);
d1942 1
a1942 1
    stringBuffer.append(TEXT_461);
d1944 1
a1944 1
    stringBuffer.append(TEXT_462);
@


1.14
log
@[160225] bblajer - Respect EStructuralFeature cardinality in commands that create/move/clone elements
@
text
@d281 25
a305 25
  protected final String TEXT_262 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_263 = " resolveSemanticElement() {" + NL + "\t\tView view = getDiagramNode();" + NL + "\t\treturn (view.getElement() instanceof ";
  protected final String TEXT_264 = ") ? (";
  protected final String TEXT_265 = ") view.getElement() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_266 = NL;
  protected final String TEXT_267 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_268 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_269 = " domainModelEditDomain = ";
  protected final String TEXT_270 = ".getEditingDomain(";
  protected final String TEXT_271 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_272 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_273 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_274 = " {";
  protected final String TEXT_275 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_276 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_277 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_278 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_279 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_280 = " createFilter() {";
  protected final String TEXT_281 = NL + "\t\t\t";
  protected final String TEXT_282 = " filter = ";
  protected final String TEXT_283 = ".createFeatureFilter(";
  protected final String TEXT_284 = ".eINSTANCE.get";
  protected final String TEXT_285 = "());";
  protected final String TEXT_286 = NL + "\t\t\tfilter = filter.or(";
d308 6
a313 6
  protected final String TEXT_289 = "()));";
  protected final String TEXT_290 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_291 = ".createNotifierFilter(";
  protected final String TEXT_292 = ".getElement()));";
  protected final String TEXT_293 = NL + "\t\t\t";
  protected final String TEXT_294 = " filter = ";
d315 83
a397 83
  protected final String TEXT_296 = ".getElement());";
  protected final String TEXT_297 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_298 = NL + "\t\t\t";
  protected final String TEXT_299 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_300 = NL + "\t\t\t";
  protected final String TEXT_301 = " filter = ";
  protected final String TEXT_302 = ".NOT_TOUCH;";
  protected final String TEXT_303 = NL + "\t\t\treturn filter;";
  protected final String TEXT_304 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_305 = " getCreateNotationalElementCommand(";
  protected final String TEXT_306 = " descriptor) {";
  protected final String TEXT_307 = NL;
  protected final String TEXT_308 = "\t\t\t";
  protected final String TEXT_309 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_310 = NL + "\t\t\tcase ";
  protected final String TEXT_311 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_312 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_313 = "(";
  protected final String TEXT_314 = ", domainElement, ";
  protected final String TEXT_315 = "new ";
  protected final String TEXT_316 = "(0, 0, ";
  protected final String TEXT_317 = ", ";
  protected final String TEXT_318 = ")";
  protected final String TEXT_319 = NL + "null";
  protected final String TEXT_320 = ", ";
  protected final String TEXT_321 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_322 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_323 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_324 = " getSemanticChildNodes() {";
  protected final String TEXT_325 = NL;
  protected final String TEXT_326 = NL + "\treturn ";
  protected final String TEXT_327 = ".EMPTY_LIST;";
  protected final String TEXT_328 = NL + "\t";
  protected final String TEXT_329 = " result = new ";
  protected final String TEXT_330 = "();";
  protected final String TEXT_331 = NL + "\t";
  protected final String TEXT_332 = " viewObject = ";
  protected final String TEXT_333 = ";" + NL + "\t";
  protected final String TEXT_334 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_335 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_336 = NL + "\tfor(";
  protected final String TEXT_337 = " it = ";
  protected final String TEXT_338 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_339 = ") it.next();";
  protected final String TEXT_340 = NL + "\tnextValue = (";
  protected final String TEXT_341 = ")";
  protected final String TEXT_342 = ";";
  protected final String TEXT_343 = NL + "\tnodeVID = ";
  protected final String TEXT_344 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_345 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_346 = NL + "\tcase ";
  protected final String TEXT_347 = ".VISUAL_ID: {";
  protected final String TEXT_348 = NL + "\tif (";
  protected final String TEXT_349 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_350 = NL + "\t\tresult.add(new ";
  protected final String TEXT_351 = "(nextValue, nodeVID));";
  protected final String TEXT_352 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_353 = NL + "\t\t}";
  protected final String TEXT_354 = NL + "\t}";
  protected final String TEXT_355 = NL + "\t}";
  protected final String TEXT_356 = NL + "\treturn result;";
  protected final String TEXT_357 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_358 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_359 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_360 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_361 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_362 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_363 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_364 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_365 = " domainModelEditDomain = ";
  protected final String TEXT_366 = ".getEditingDomain(";
  protected final String TEXT_367 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_368 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_369 = NL;
  protected final String TEXT_370 = NL;
  protected final String TEXT_371 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_372 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_373 = " feature, ";
  protected final String TEXT_374 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_375 = NL;
  protected final String TEXT_376 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_377 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_378 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d399 26
a424 26
  protected final String TEXT_380 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_381 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_382 = NL;
  protected final String TEXT_383 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_384 = "static ";
  protected final String TEXT_385 = "class Create";
  protected final String TEXT_386 = "Command extends ";
  protected final String TEXT_387 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_388 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_389 = "Command(";
  protected final String TEXT_390 = " parent, ";
  protected final String TEXT_391 = " request";
  protected final String TEXT_392 = ", ";
  protected final String TEXT_393 = " constraint";
  protected final String TEXT_394 = ") {" + NL + "\t\t\t";
  protected final String TEXT_395 = " domainModelEditDomain = ";
  protected final String TEXT_396 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_397 = NL + "\t\t\t";
  protected final String TEXT_398 = " createdDomainElement = ";
  protected final String TEXT_399 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_400 = ".eINSTANCE.get";
  protected final String TEXT_401 = "());";
  protected final String TEXT_402 = NL + "\t\t\t";
  protected final String TEXT_403 = " createdDomainElement = ";
  protected final String TEXT_404 = ".eINSTANCE.create";
  protected final String TEXT_405 = "();";
d426 18
a443 18
  protected final String TEXT_407 = NL + "\t\t\t";
  protected final String TEXT_408 = ".";
  protected final String TEXT_409 = ".initializeElement(";
  protected final String TEXT_410 = "(";
  protected final String TEXT_411 = ") ";
  protected final String TEXT_412 = "createdDomainElement);";
  protected final String TEXT_413 = NL;
  protected final String TEXT_414 = NL + "\t\tif (";
  protected final String TEXT_415 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_416 = NL + "\t\t}";
  protected final String TEXT_417 = NL + "\t\tif (";
  protected final String TEXT_418 = ".size() >= ";
  protected final String TEXT_419 = ".eINSTANCE.get";
  protected final String TEXT_420 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_421 = NL + "\t\t}";
  protected final String TEXT_422 = NL;
  protected final String TEXT_423 = NL + "\t\tif (";
  protected final String TEXT_424 = " != null) {" + NL + "\t\t\t";
d445 15
a459 15
  protected final String TEXT_426 = NL + "\t\tif (";
  protected final String TEXT_427 = ".size() >= ";
  protected final String TEXT_428 = ".eINSTANCE.get";
  protected final String TEXT_429 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_430 = NL + "\t\t}";
  protected final String TEXT_431 = NL + "\t\t\t";
  protected final String TEXT_432 = " compoundCommand = new ";
  protected final String TEXT_433 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_434 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_435 = ".eINSTANCE.get";
  protected final String TEXT_436 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_437 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_438 = ".eINSTANCE.get";
  protected final String TEXT_439 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_440 = NL + "\t\t\tthis.domainModelAddCommand = ";
d462 20
a481 16
  protected final String TEXT_443 = "(), createdDomainElement);";
  protected final String TEXT_444 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_445 = "(";
  protected final String TEXT_446 = ", ";
  protected final String TEXT_447 = "));";
  protected final String TEXT_448 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_449 = "(parent, ";
  protected final String TEXT_450 = "(";
  protected final String TEXT_451 = ") ";
  protected final String TEXT_452 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_453 = "constraint";
  protected final String TEXT_454 = "null";
  protected final String TEXT_455 = ", ";
  protected final String TEXT_456 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_457 = NL + "}" + NL;
  protected final String TEXT_458 = NL;
d1262 12
d1275 1
a1275 1
    stringBuffer.append(TEXT_263);
d1277 1
a1277 1
    stringBuffer.append(TEXT_264);
d1279 1
a1279 1
    stringBuffer.append(TEXT_265);
d1286 2
a1287 2
    stringBuffer.append(TEXT_266);
    stringBuffer.append(TEXT_267);
d1289 1
a1289 1
    stringBuffer.append(TEXT_268);
d1291 1
a1291 1
    stringBuffer.append(TEXT_269);
d1293 1
a1293 1
    stringBuffer.append(TEXT_270);
d1295 1
a1295 1
    stringBuffer.append(TEXT_271);
d1297 1
a1297 1
    stringBuffer.append(TEXT_272);
d1299 1
a1299 1
    stringBuffer.append(TEXT_273);
d1301 1
a1301 1
    stringBuffer.append(TEXT_274);
d1316 1
a1316 1
    stringBuffer.append(TEXT_275);
d1318 1
a1318 1
    stringBuffer.append(TEXT_276);
d1320 1
a1320 1
    stringBuffer.append(TEXT_277);
d1322 1
a1322 1
    stringBuffer.append(TEXT_278);
d1326 1
a1326 1
    stringBuffer.append(TEXT_279);
d1328 1
a1328 1
    stringBuffer.append(TEXT_280);
d1347 1
a1347 1
    stringBuffer.append(TEXT_281);
d1349 1
a1349 1
    stringBuffer.append(TEXT_282);
d1351 1
a1351 1
    stringBuffer.append(TEXT_283);
d1353 1
a1353 1
    stringBuffer.append(TEXT_284);
d1355 1
a1355 1
    stringBuffer.append(TEXT_285);
d1359 1
a1359 1
    stringBuffer.append(TEXT_286);
d1361 1
a1361 1
    stringBuffer.append(TEXT_287);
d1363 1
a1363 1
    stringBuffer.append(TEXT_288);
d1365 1
a1365 1
    stringBuffer.append(TEXT_289);
d1373 1
a1373 1
    stringBuffer.append(TEXT_290);
d1375 1
a1375 1
    stringBuffer.append(TEXT_291);
d1377 1
a1377 1
    stringBuffer.append(TEXT_292);
d1382 1
a1382 1
    stringBuffer.append(TEXT_293);
d1384 1
a1384 1
    stringBuffer.append(TEXT_294);
d1386 1
a1386 1
    stringBuffer.append(TEXT_295);
d1388 1
a1388 1
    stringBuffer.append(TEXT_296);
d1397 1
a1397 1
    stringBuffer.append(TEXT_297);
d1401 1
a1401 1
    stringBuffer.append(TEXT_298);
d1403 1
a1403 1
    stringBuffer.append(TEXT_299);
d1409 1
a1409 1
    stringBuffer.append(TEXT_300);
d1411 1
a1411 1
    stringBuffer.append(TEXT_301);
d1413 1
a1413 1
    stringBuffer.append(TEXT_302);
d1417 1
a1417 1
    stringBuffer.append(TEXT_303);
d1421 1
a1421 1
    stringBuffer.append(TEXT_304);
d1423 1
a1423 1
    stringBuffer.append(TEXT_305);
d1425 1
a1425 1
    stringBuffer.append(TEXT_306);
d1430 2
a1431 2
    stringBuffer.append(TEXT_307);
    stringBuffer.append(TEXT_308);
d1433 1
a1433 1
    stringBuffer.append(TEXT_309);
d1443 1
a1443 1
    stringBuffer.append(TEXT_310);
d1445 1
a1445 1
    stringBuffer.append(TEXT_311);
d1447 1
a1447 1
    stringBuffer.append(TEXT_312);
d1449 1
a1449 1
    stringBuffer.append(TEXT_313);
d1451 1
a1451 1
    stringBuffer.append(TEXT_314);
d1462 1
a1462 1
    stringBuffer.append(TEXT_315);
d1464 1
a1464 1
    stringBuffer.append(TEXT_316);
d1466 1
a1466 1
    stringBuffer.append(TEXT_317);
d1468 1
a1468 1
    stringBuffer.append(TEXT_318);
d1472 1
a1472 1
    stringBuffer.append(TEXT_319);
d1476 1
a1476 1
    stringBuffer.append(TEXT_320);
d1478 1
a1478 1
    stringBuffer.append(TEXT_321);
d1482 1
a1482 1
    stringBuffer.append(TEXT_322);
d1486 1
a1486 1
    stringBuffer.append(TEXT_323);
d1488 2
a1489 2
    stringBuffer.append(TEXT_324);
    stringBuffer.append(TEXT_325);
d1493 1
a1493 1
    stringBuffer.append(TEXT_326);
d1495 1
a1495 1
    stringBuffer.append(TEXT_327);
d1499 1
a1499 1
    stringBuffer.append(TEXT_328);
d1501 1
a1501 1
    stringBuffer.append(TEXT_329);
d1503 1
a1503 1
    stringBuffer.append(TEXT_330);
d1521 1
a1521 1
    stringBuffer.append(TEXT_331);
d1523 1
a1523 1
    stringBuffer.append(TEXT_332);
d1525 1
a1525 1
    stringBuffer.append(TEXT_333);
d1527 1
a1527 1
    stringBuffer.append(TEXT_334);
d1529 1
a1529 1
    stringBuffer.append(TEXT_335);
d1538 1
a1538 1
    stringBuffer.append(TEXT_336);
d1540 1
a1540 1
    stringBuffer.append(TEXT_337);
d1542 1
a1542 1
    stringBuffer.append(TEXT_338);
d1544 1
a1544 1
    stringBuffer.append(TEXT_339);
d1548 1
a1548 1
    stringBuffer.append(TEXT_340);
d1550 1
a1550 1
    stringBuffer.append(TEXT_341);
d1552 1
a1552 1
    stringBuffer.append(TEXT_342);
d1556 1
a1556 1
    stringBuffer.append(TEXT_343);
d1558 1
a1558 1
    stringBuffer.append(TEXT_344);
d1563 1
a1563 1
    stringBuffer.append(TEXT_345);
d1570 1
a1570 1
    stringBuffer.append(TEXT_346);
d1572 1
a1572 1
    stringBuffer.append(TEXT_347);
d1576 1
a1576 1
    stringBuffer.append(TEXT_348);
d1578 1
a1578 1
    stringBuffer.append(TEXT_349);
d1582 1
a1582 1
    stringBuffer.append(TEXT_350);
d1584 1
a1584 1
    stringBuffer.append(TEXT_351);
d1588 1
a1588 1
    stringBuffer.append(TEXT_352);
d1592 1
a1592 1
    stringBuffer.append(TEXT_353);
d1598 1
a1598 1
    stringBuffer.append(TEXT_354);
d1603 1
a1603 1
    stringBuffer.append(TEXT_355);
d1608 1
a1608 1
    stringBuffer.append(TEXT_356);
d1612 1
a1612 1
    stringBuffer.append(TEXT_357);
d1614 1
a1614 1
    stringBuffer.append(TEXT_358);
d1616 1
a1616 1
    stringBuffer.append(TEXT_359);
d1618 1
a1618 1
    stringBuffer.append(TEXT_360);
d1620 1
a1620 1
    stringBuffer.append(TEXT_361);
d1622 1
a1622 1
    stringBuffer.append(TEXT_362);
d1624 1
a1624 1
    stringBuffer.append(TEXT_363);
d1626 1
a1626 1
    stringBuffer.append(TEXT_364);
d1628 1
a1628 1
    stringBuffer.append(TEXT_365);
d1630 1
a1630 1
    stringBuffer.append(TEXT_366);
d1632 1
a1632 1
    stringBuffer.append(TEXT_367);
d1634 1
a1634 1
    stringBuffer.append(TEXT_368);
a1637 6
    stringBuffer.append(TEXT_369);
    stringBuffer.append(TEXT_370);
    stringBuffer.append(TEXT_371);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_372);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a1638 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1641 1
d1643 1
a1643 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1645 1
a1645 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1651 6
d1663 1
a1663 1
    stringBuffer.append(TEXT_382);
d1667 1
a1667 1
    stringBuffer.append(TEXT_383);
d1669 1
a1669 1
    stringBuffer.append(TEXT_384);
d1671 1
a1671 1
    stringBuffer.append(TEXT_385);
d1674 1
a1674 1
    stringBuffer.append(TEXT_386);
d1676 1
a1676 1
    stringBuffer.append(TEXT_387);
d1678 1
a1678 1
    stringBuffer.append(TEXT_388);
d1681 1
a1681 1
    stringBuffer.append(TEXT_389);
d1683 1
a1683 1
    stringBuffer.append(TEXT_390);
d1685 1
a1685 1
    stringBuffer.append(TEXT_391);
d1687 1
a1687 1
    stringBuffer.append(TEXT_392);
d1689 1
a1689 1
    stringBuffer.append(TEXT_393);
d1691 1
a1691 1
    stringBuffer.append(TEXT_394);
d1693 1
a1693 1
    stringBuffer.append(TEXT_395);
d1695 1
a1695 1
    stringBuffer.append(TEXT_396);
d1700 1
a1700 1
    stringBuffer.append(TEXT_397);
d1702 1
a1702 1
    stringBuffer.append(TEXT_398);
d1704 1
a1704 1
    stringBuffer.append(TEXT_399);
d1706 1
a1706 1
    stringBuffer.append(TEXT_400);
d1708 1
a1708 1
    stringBuffer.append(TEXT_401);
d1712 1
a1712 1
    stringBuffer.append(TEXT_402);
d1714 1
a1714 1
    stringBuffer.append(TEXT_403);
d1716 1
a1716 1
    stringBuffer.append(TEXT_404);
d1718 1
a1718 1
    stringBuffer.append(TEXT_405);
d1722 1
a1722 1
    stringBuffer.append(TEXT_406);
d1724 1
a1724 1
    stringBuffer.append(TEXT_407);
d1726 1
a1726 1
    stringBuffer.append(TEXT_408);
d1728 1
a1728 1
    stringBuffer.append(TEXT_409);
d1730 1
a1730 1
    stringBuffer.append(TEXT_410);
d1732 1
a1732 1
    stringBuffer.append(TEXT_411);
d1734 1
a1734 1
    stringBuffer.append(TEXT_412);
d1745 1
a1745 1
    stringBuffer.append(TEXT_413);
d1751 1
a1751 1
    stringBuffer.append(TEXT_414);
d1753 1
a1753 1
    stringBuffer.append(TEXT_415);
d1755 1
a1755 1
    stringBuffer.append(TEXT_416);
d1759 1
a1759 1
    stringBuffer.append(TEXT_417);
d1761 1
a1761 1
    stringBuffer.append(TEXT_418);
d1763 1
a1763 1
    stringBuffer.append(TEXT_419);
d1765 1
a1765 1
    stringBuffer.append(TEXT_420);
d1767 1
a1767 1
    stringBuffer.append(TEXT_421);
d1780 1
a1780 1
    stringBuffer.append(TEXT_422);
d1786 1
a1786 1
    stringBuffer.append(TEXT_423);
d1788 1
a1788 1
    stringBuffer.append(TEXT_424);
d1790 1
a1790 1
    stringBuffer.append(TEXT_425);
d1794 1
a1794 1
    stringBuffer.append(TEXT_426);
d1796 1
a1796 1
    stringBuffer.append(TEXT_427);
d1798 1
a1798 1
    stringBuffer.append(TEXT_428);
d1800 1
a1800 1
    stringBuffer.append(TEXT_429);
d1802 1
a1802 1
    stringBuffer.append(TEXT_430);
d1807 1
a1807 1
    stringBuffer.append(TEXT_431);
d1809 1
a1809 1
    stringBuffer.append(TEXT_432);
d1811 1
a1811 1
    stringBuffer.append(TEXT_433);
d1813 1
a1813 1
    stringBuffer.append(TEXT_434);
d1815 1
a1815 1
    stringBuffer.append(TEXT_435);
d1817 1
a1817 1
    stringBuffer.append(TEXT_436);
d1819 1
a1819 1
    stringBuffer.append(TEXT_437);
d1821 1
a1821 1
    stringBuffer.append(TEXT_438);
d1823 1
a1823 1
    stringBuffer.append(TEXT_439);
d1827 1
a1827 1
    stringBuffer.append(TEXT_440);
d1829 1
a1829 1
    stringBuffer.append(TEXT_441);
d1831 1
a1831 1
    stringBuffer.append(TEXT_442);
d1833 1
a1833 1
    stringBuffer.append(TEXT_443);
d1847 1
a1847 1
    stringBuffer.append(TEXT_444);
d1849 1
a1849 1
    stringBuffer.append(TEXT_445);
d1851 1
a1851 1
    stringBuffer.append(TEXT_446);
d1853 1
a1853 1
    stringBuffer.append(TEXT_447);
d1857 1
a1857 1
    stringBuffer.append(TEXT_448);
d1859 1
a1859 1
    stringBuffer.append(TEXT_449);
d1861 1
a1861 1
    stringBuffer.append(TEXT_450);
d1863 1
a1863 1
    stringBuffer.append(TEXT_451);
d1865 1
a1865 1
    stringBuffer.append(TEXT_452);
d1867 1
a1867 1
    stringBuffer.append(TEXT_453);
d1869 1
a1869 1
    stringBuffer.append(TEXT_454);
d1871 1
a1871 1
    stringBuffer.append(TEXT_455);
d1873 1
a1873 1
    stringBuffer.append(TEXT_456);
d1880 1
a1880 1
    stringBuffer.append(TEXT_457);
d1882 1
a1882 1
    stringBuffer.append(TEXT_458);
@


1.13
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d118 360
a477 308
  protected final String TEXT_99 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_100 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_101 = ".getElement(), ";
  protected final String TEXT_102 = ".eINSTANCE.get";
  protected final String TEXT_103 = "(), element));";
  protected final String TEXT_104 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_105 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_106 = ".getElement(), ";
  protected final String TEXT_107 = ".eINSTANCE.get";
  protected final String TEXT_108 = "(), element));";
  protected final String TEXT_109 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_110 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_111 = ".create(editingDomain, ";
  protected final String TEXT_112 = ", ";
  protected final String TEXT_113 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_114 = "(childNode, ";
  protected final String TEXT_115 = "null";
  protected final String TEXT_116 = "(";
  protected final String TEXT_117 = ") constraint";
  protected final String TEXT_118 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_119 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_120 = "(";
  protected final String TEXT_121 = ", element, ";
  protected final String TEXT_122 = "null";
  protected final String TEXT_123 = "((";
  protected final String TEXT_124 = ") constraint).getCopy().union(new ";
  protected final String TEXT_125 = "(";
  protected final String TEXT_126 = ", ";
  protected final String TEXT_127 = "))";
  protected final String TEXT_128 = ", ";
  protected final String TEXT_129 = ".INSTANCE));";
  protected final String TEXT_130 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_131 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_132 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_133 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_134 = NL;
  protected final String TEXT_135 = NL + "protected ";
  protected final String TEXT_136 = " getCloneCommand(";
  protected final String TEXT_137 = " request) {" + NL + "\t";
  protected final String TEXT_138 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_139 = " command = new ";
  protected final String TEXT_140 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_141 = " childPart;" + NL + "\t";
  protected final String TEXT_142 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_143 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_144 = " createCloneCommand(final ";
  protected final String TEXT_145 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_146 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_147 = " childNode = (";
  protected final String TEXT_148 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_149 = " editingDomain = ";
  protected final String TEXT_150 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_151 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_152 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_153 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_154 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_155 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_156 = NL + "\t\t\tcase ";
  protected final String TEXT_157 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_158 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_159 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_160 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_161 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_162 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_163 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_164 = " result = (";
  protected final String TEXT_165 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_166 = "();";
  protected final String TEXT_167 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_168 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_169 = ".getElement(), ";
  protected final String TEXT_170 = ".eINSTANCE.get";
  protected final String TEXT_171 = "(), result));";
  protected final String TEXT_172 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_173 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_174 = ".getElement(), ";
  protected final String TEXT_175 = ".eINSTANCE.get";
  protected final String TEXT_176 = "(), result));";
  protected final String TEXT_177 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_178 = "(";
  protected final String TEXT_179 = ", result, ";
  protected final String TEXT_180 = "null";
  protected final String TEXT_181 = "((";
  protected final String TEXT_182 = ") constraint).getCopy().union(new ";
  protected final String TEXT_183 = "(";
  protected final String TEXT_184 = ", ";
  protected final String TEXT_185 = "))";
  protected final String TEXT_186 = ", ";
  protected final String TEXT_187 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_188 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_189 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_190 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_191 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_192 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_193 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_194 = " requestEx = (";
  protected final String TEXT_195 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_196 = " result = new ";
  protected final String TEXT_197 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_198 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_199 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_200 = "Command((View) getModel(), requestEx";
  protected final String TEXT_201 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_202 = ")getConstraintFor(request)";
  protected final String TEXT_203 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_204 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_205 = "(";
  protected final String TEXT_206 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_207 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_208 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_209 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_210 = " result = new ";
  protected final String TEXT_211 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_212 = "());" + NL + "\t\t";
  protected final String TEXT_213 = " scrollPane = new ";
  protected final String TEXT_214 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_215 = NL + "\t\t";
  protected final String TEXT_216 = " viewport = new ";
  protected final String TEXT_217 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_218 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_219 = "());";
  protected final String TEXT_220 = NL + "\t\t";
  protected final String TEXT_221 = " viewport = new ";
  protected final String TEXT_222 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_223 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_224 = "());";
  protected final String TEXT_225 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_226 = " resolveSemanticElement() {" + NL + "\t\tView view = getDiagramNode();" + NL + "\t\treturn (view.getElement() instanceof ";
  protected final String TEXT_227 = ") ? (";
  protected final String TEXT_228 = ") view.getElement() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_229 = NL;
  protected final String TEXT_230 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_231 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_232 = " domainModelEditDomain = ";
  protected final String TEXT_233 = ".getEditingDomain(";
  protected final String TEXT_234 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_235 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_236 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_237 = " {";
  protected final String TEXT_238 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_239 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_240 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_241 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_242 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_243 = " createFilter() {";
  protected final String TEXT_244 = NL + "\t\t\t";
  protected final String TEXT_245 = " filter = ";
  protected final String TEXT_246 = ".createFeatureFilter(";
  protected final String TEXT_247 = ".eINSTANCE.get";
  protected final String TEXT_248 = "());";
  protected final String TEXT_249 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_250 = ".createFeatureFilter(";
  protected final String TEXT_251 = ".eINSTANCE.get";
  protected final String TEXT_252 = "()));";
  protected final String TEXT_253 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_254 = ".createNotifierFilter(";
  protected final String TEXT_255 = ".getElement()));";
  protected final String TEXT_256 = NL + "\t\t\t";
  protected final String TEXT_257 = " filter = ";
  protected final String TEXT_258 = ".createNotifierFilter(";
  protected final String TEXT_259 = ".getElement());";
  protected final String TEXT_260 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_261 = NL + "\t\t\t";
  protected final String TEXT_262 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_263 = NL + "\t\t\t";
  protected final String TEXT_264 = " filter = ";
  protected final String TEXT_265 = ".NOT_TOUCH;";
  protected final String TEXT_266 = NL + "\t\t\treturn filter;";
  protected final String TEXT_267 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_268 = " getCreateNotationalElementCommand(";
  protected final String TEXT_269 = " descriptor) {";
  protected final String TEXT_270 = NL;
  protected final String TEXT_271 = "\t\t\t";
  protected final String TEXT_272 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_273 = NL + "\t\t\tcase ";
  protected final String TEXT_274 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_275 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_276 = "(";
  protected final String TEXT_277 = ", domainElement, ";
  protected final String TEXT_278 = "new ";
  protected final String TEXT_279 = "(0, 0, ";
  protected final String TEXT_280 = ", ";
  protected final String TEXT_281 = ")";
  protected final String TEXT_282 = NL + "null";
  protected final String TEXT_283 = ", ";
  protected final String TEXT_284 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_285 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_286 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_287 = " getSemanticChildNodes() {";
  protected final String TEXT_288 = NL;
  protected final String TEXT_289 = NL + "\treturn ";
  protected final String TEXT_290 = ".EMPTY_LIST;";
  protected final String TEXT_291 = NL + "\t";
  protected final String TEXT_292 = " result = new ";
  protected final String TEXT_293 = "();";
  protected final String TEXT_294 = NL + "\t";
  protected final String TEXT_295 = " viewObject = ";
  protected final String TEXT_296 = ";" + NL + "\t";
  protected final String TEXT_297 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_298 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_299 = NL + "\tfor(";
  protected final String TEXT_300 = " it = ";
  protected final String TEXT_301 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_302 = ") it.next();";
  protected final String TEXT_303 = NL + "\tnextValue = (";
  protected final String TEXT_304 = ")";
  protected final String TEXT_305 = ";";
  protected final String TEXT_306 = NL + "\tnodeVID = ";
  protected final String TEXT_307 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_308 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_309 = NL + "\tcase ";
  protected final String TEXT_310 = ".VISUAL_ID: {";
  protected final String TEXT_311 = NL + "\tif (";
  protected final String TEXT_312 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_313 = NL + "\t\tresult.add(new ";
  protected final String TEXT_314 = "(nextValue, nodeVID));";
  protected final String TEXT_315 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_316 = NL + "\t\t}";
  protected final String TEXT_317 = NL + "\t}";
  protected final String TEXT_318 = NL + "\t}";
  protected final String TEXT_319 = NL + "\treturn result;";
  protected final String TEXT_320 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_321 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_322 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_323 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_324 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_325 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_326 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_327 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_328 = " domainModelEditDomain = ";
  protected final String TEXT_329 = ".getEditingDomain(";
  protected final String TEXT_330 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_331 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_332 = NL;
  protected final String TEXT_333 = NL;
  protected final String TEXT_334 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_335 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_336 = " feature, ";
  protected final String TEXT_337 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_338 = NL;
  protected final String TEXT_339 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_340 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_341 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_342 = NL;
  protected final String TEXT_343 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_344 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_345 = NL;
  protected final String TEXT_346 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_347 = "static ";
  protected final String TEXT_348 = "class Create";
  protected final String TEXT_349 = "Command extends ";
  protected final String TEXT_350 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_351 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_352 = "Command(";
  protected final String TEXT_353 = " parent, ";
  protected final String TEXT_354 = " request";
  protected final String TEXT_355 = ", ";
  protected final String TEXT_356 = " constraint";
  protected final String TEXT_357 = ") {" + NL + "\t\t\t";
  protected final String TEXT_358 = " domainModelEditDomain = ";
  protected final String TEXT_359 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_360 = NL + "\t\t\t";
  protected final String TEXT_361 = " createdDomainElement = ";
  protected final String TEXT_362 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_363 = ".eINSTANCE.get";
  protected final String TEXT_364 = "());";
  protected final String TEXT_365 = NL + "\t\t\t";
  protected final String TEXT_366 = " createdDomainElement = ";
  protected final String TEXT_367 = ".eINSTANCE.create";
  protected final String TEXT_368 = "();";
  protected final String TEXT_369 = NL + "\t\t\t";
  protected final String TEXT_370 = NL + "\t\t\t";
  protected final String TEXT_371 = ".";
  protected final String TEXT_372 = ".initializeElement(";
  protected final String TEXT_373 = "(";
  protected final String TEXT_374 = ") ";
  protected final String TEXT_375 = "createdDomainElement);";
  protected final String TEXT_376 = NL + "\t\t\t";
  protected final String TEXT_377 = " compoundCommand = new ";
  protected final String TEXT_378 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_379 = ".create(domainModelEditDomain, ";
  protected final String TEXT_380 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_381 = ".eINSTANCE.get";
  protected final String TEXT_382 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_383 = ".create(domainModelEditDomain, ";
  protected final String TEXT_384 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_385 = ".eINSTANCE.get";
  protected final String TEXT_386 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_387 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_388 = ".create(domainModelEditDomain, ";
  protected final String TEXT_389 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_390 = ".eINSTANCE.get";
  protected final String TEXT_391 = "(), createdDomainElement);";
  protected final String TEXT_392 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_393 = "(";
  protected final String TEXT_394 = ", ";
  protected final String TEXT_395 = "));";
  protected final String TEXT_396 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_397 = "(parent, ";
  protected final String TEXT_398 = "(";
  protected final String TEXT_399 = ") ";
  protected final String TEXT_400 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_401 = "constraint";
  protected final String TEXT_402 = "null";
  protected final String TEXT_403 = ", ";
  protected final String TEXT_404 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_405 = NL + "}" + NL;
  protected final String TEXT_406 = NL;
d808 4
d814 27
d842 1
a842 1
    stringBuffer.append(TEXT_100);
d844 1
a844 1
    stringBuffer.append(TEXT_101);
d846 1
a846 1
    stringBuffer.append(TEXT_102);
d848 36
a883 1
    stringBuffer.append(TEXT_103);
d887 1
a887 1
    stringBuffer.append(TEXT_104);
d889 1
a889 1
    stringBuffer.append(TEXT_105);
d891 1
a891 1
    stringBuffer.append(TEXT_106);
d893 1
a893 1
    stringBuffer.append(TEXT_107);
d895 1
a895 1
    stringBuffer.append(TEXT_108);
d899 1
a899 1
    stringBuffer.append(TEXT_109);
d901 1
a901 1
    stringBuffer.append(TEXT_110);
d903 1
a903 1
    stringBuffer.append(TEXT_111);
d905 1
a905 1
    stringBuffer.append(TEXT_112);
d907 1
a907 1
    stringBuffer.append(TEXT_113);
d909 1
a909 1
    stringBuffer.append(TEXT_114);
d911 1
a911 1
    stringBuffer.append(TEXT_115);
d913 1
a913 1
    stringBuffer.append(TEXT_116);
d915 1
a915 1
    stringBuffer.append(TEXT_117);
d917 1
a917 1
    stringBuffer.append(TEXT_118);
d928 1
a928 1
    stringBuffer.append(TEXT_119);
d930 1
a930 1
    stringBuffer.append(TEXT_120);
d932 1
a932 1
    stringBuffer.append(TEXT_121);
d934 1
a934 1
    stringBuffer.append(TEXT_122);
d936 1
a936 1
    stringBuffer.append(TEXT_123);
d938 1
a938 1
    stringBuffer.append(TEXT_124);
d940 1
a940 1
    stringBuffer.append(TEXT_125);
d942 1
a942 1
    stringBuffer.append(TEXT_126);
d944 1
a944 1
    stringBuffer.append(TEXT_127);
d946 1
a946 1
    stringBuffer.append(TEXT_128);
d948 1
a948 1
    stringBuffer.append(TEXT_129);
d952 1
a952 1
    stringBuffer.append(TEXT_130);
d956 1
a956 1
    stringBuffer.append(TEXT_131);
d958 1
a958 1
    stringBuffer.append(TEXT_132);
d960 1
a960 1
    stringBuffer.append(TEXT_133);
d964 1
a964 1
    stringBuffer.append(TEXT_134);
d971 1
a971 1
    stringBuffer.append(TEXT_135);
d973 1
a973 1
    stringBuffer.append(TEXT_136);
d975 1
a975 1
    stringBuffer.append(TEXT_137);
d977 1
a977 1
    stringBuffer.append(TEXT_138);
d979 1
a979 1
    stringBuffer.append(TEXT_139);
d981 1
a981 1
    stringBuffer.append(TEXT_140);
d983 1
a983 1
    stringBuffer.append(TEXT_141);
d985 1
a985 1
    stringBuffer.append(TEXT_142);
d987 1
a987 1
    stringBuffer.append(TEXT_143);
d989 1
a989 1
    stringBuffer.append(TEXT_144);
d991 1
a991 1
    stringBuffer.append(TEXT_145);
d993 1
a993 1
    stringBuffer.append(TEXT_146);
d995 1
a995 1
    stringBuffer.append(TEXT_147);
d997 1
a997 1
    stringBuffer.append(TEXT_148);
d999 1
a999 1
    stringBuffer.append(TEXT_149);
d1001 1
a1001 1
    stringBuffer.append(TEXT_150);
d1003 1
a1003 1
    stringBuffer.append(TEXT_151);
d1005 1
a1005 1
    stringBuffer.append(TEXT_152);
d1007 1
a1007 1
    stringBuffer.append(TEXT_153);
d1009 1
a1009 1
    stringBuffer.append(TEXT_154);
d1011 1
a1011 1
    stringBuffer.append(TEXT_155);
d1019 1
a1019 1
    stringBuffer.append(TEXT_156);
d1021 1
a1021 1
    stringBuffer.append(TEXT_157);
d1023 1
a1023 1
    stringBuffer.append(TEXT_158);
d1025 1
a1025 1
    stringBuffer.append(TEXT_159);
d1027 1
a1027 1
    stringBuffer.append(TEXT_160);
d1029 1
a1029 1
    stringBuffer.append(TEXT_161);
d1031 74
a1104 1
    stringBuffer.append(TEXT_162);
d1106 1
a1106 1
    stringBuffer.append(TEXT_163);
d1108 1
a1108 1
    stringBuffer.append(TEXT_164);
d1110 1
a1110 1
    stringBuffer.append(TEXT_165);
d1112 1
a1112 1
    stringBuffer.append(TEXT_166);
d1116 1
a1116 1
    stringBuffer.append(TEXT_167);
d1118 1
a1118 1
    stringBuffer.append(TEXT_168);
d1120 1
a1120 1
    stringBuffer.append(TEXT_169);
d1122 1
a1122 1
    stringBuffer.append(TEXT_170);
d1124 1
a1124 1
    stringBuffer.append(TEXT_171);
d1128 1
a1128 1
    stringBuffer.append(TEXT_172);
d1130 1
a1130 1
    stringBuffer.append(TEXT_173);
d1132 1
a1132 1
    stringBuffer.append(TEXT_174);
d1134 1
a1134 1
    stringBuffer.append(TEXT_175);
d1136 1
a1136 1
    stringBuffer.append(TEXT_176);
d1147 1
a1147 1
    stringBuffer.append(TEXT_177);
d1149 1
a1149 1
    stringBuffer.append(TEXT_178);
d1151 1
a1151 1
    stringBuffer.append(TEXT_179);
d1153 1
a1153 1
    stringBuffer.append(TEXT_180);
d1155 1
a1155 1
    stringBuffer.append(TEXT_181);
d1157 1
a1157 1
    stringBuffer.append(TEXT_182);
d1159 1
a1159 1
    stringBuffer.append(TEXT_183);
d1161 1
a1161 1
    stringBuffer.append(TEXT_184);
d1163 1
a1163 1
    stringBuffer.append(TEXT_185);
d1165 1
a1165 1
    stringBuffer.append(TEXT_186);
d1167 1
a1167 1
    stringBuffer.append(TEXT_187);
d1172 1
a1172 1
    stringBuffer.append(TEXT_188);
d1174 1
a1174 1
    stringBuffer.append(TEXT_189);
d1176 1
a1176 1
    stringBuffer.append(TEXT_190);
d1183 1
a1183 1
    stringBuffer.append(TEXT_191);
d1185 1
a1185 1
    stringBuffer.append(TEXT_192);
d1187 1
a1187 1
    stringBuffer.append(TEXT_193);
d1189 1
a1189 1
    stringBuffer.append(TEXT_194);
d1191 1
a1191 1
    stringBuffer.append(TEXT_195);
d1193 1
a1193 1
    stringBuffer.append(TEXT_196);
d1195 1
a1195 1
    stringBuffer.append(TEXT_197);
d1200 1
a1200 1
    stringBuffer.append(TEXT_198);
d1202 1
a1202 1
    stringBuffer.append(TEXT_199);
d1205 1
a1205 1
    stringBuffer.append(TEXT_200);
d1207 1
a1207 1
    stringBuffer.append(TEXT_201);
d1209 1
a1209 1
    stringBuffer.append(TEXT_202);
d1211 1
a1211 1
    stringBuffer.append(TEXT_203);
d1215 1
a1215 1
    stringBuffer.append(TEXT_204);
d1217 1
a1217 1
    stringBuffer.append(TEXT_205);
d1219 1
a1219 1
    stringBuffer.append(TEXT_206);
d1221 1
a1221 1
    stringBuffer.append(TEXT_207);
d1223 1
a1223 1
    stringBuffer.append(TEXT_208);
d1225 1
a1225 1
    stringBuffer.append(TEXT_209);
d1227 1
a1227 1
    stringBuffer.append(TEXT_210);
d1229 1
a1229 1
    stringBuffer.append(TEXT_211);
d1231 1
a1231 1
    stringBuffer.append(TEXT_212);
d1233 1
a1233 1
    stringBuffer.append(TEXT_213);
d1235 1
a1235 1
    stringBuffer.append(TEXT_214);
d1237 1
a1237 1
    stringBuffer.append(TEXT_215);
d1239 1
a1239 1
    stringBuffer.append(TEXT_216);
d1241 1
a1241 1
    stringBuffer.append(TEXT_217);
d1243 1
a1243 1
    stringBuffer.append(TEXT_218);
d1245 1
a1245 1
    stringBuffer.append(TEXT_219);
d1247 1
a1247 1
    stringBuffer.append(TEXT_220);
d1249 1
a1249 1
    stringBuffer.append(TEXT_221);
d1251 1
a1251 1
    stringBuffer.append(TEXT_222);
d1253 1
a1253 1
    stringBuffer.append(TEXT_223);
d1255 1
a1255 1
    stringBuffer.append(TEXT_224);
d1257 1
a1257 1
    stringBuffer.append(TEXT_225);
d1259 1
a1259 1
    stringBuffer.append(TEXT_226);
d1261 1
a1261 1
    stringBuffer.append(TEXT_227);
d1263 1
a1263 1
    stringBuffer.append(TEXT_228);
d1270 2
a1271 2
    stringBuffer.append(TEXT_229);
    stringBuffer.append(TEXT_230);
d1273 1
a1273 1
    stringBuffer.append(TEXT_231);
d1275 1
a1275 1
    stringBuffer.append(TEXT_232);
d1277 1
a1277 1
    stringBuffer.append(TEXT_233);
d1279 1
a1279 1
    stringBuffer.append(TEXT_234);
d1281 1
a1281 1
    stringBuffer.append(TEXT_235);
d1283 1
a1283 1
    stringBuffer.append(TEXT_236);
d1285 1
a1285 1
    stringBuffer.append(TEXT_237);
d1300 1
a1300 1
    stringBuffer.append(TEXT_238);
d1302 1
a1302 1
    stringBuffer.append(TEXT_239);
d1304 1
a1304 1
    stringBuffer.append(TEXT_240);
d1306 1
a1306 1
    stringBuffer.append(TEXT_241);
d1310 1
a1310 1
    stringBuffer.append(TEXT_242);
d1312 1
a1312 1
    stringBuffer.append(TEXT_243);
d1331 1
a1331 1
    stringBuffer.append(TEXT_244);
d1333 1
a1333 1
    stringBuffer.append(TEXT_245);
d1335 1
a1335 1
    stringBuffer.append(TEXT_246);
d1337 1
a1337 1
    stringBuffer.append(TEXT_247);
d1339 1
a1339 1
    stringBuffer.append(TEXT_248);
d1343 1
a1343 1
    stringBuffer.append(TEXT_249);
d1345 1
a1345 1
    stringBuffer.append(TEXT_250);
d1347 1
a1347 1
    stringBuffer.append(TEXT_251);
d1349 1
a1349 1
    stringBuffer.append(TEXT_252);
d1357 1
a1357 1
    stringBuffer.append(TEXT_253);
d1359 1
a1359 1
    stringBuffer.append(TEXT_254);
d1361 1
a1361 1
    stringBuffer.append(TEXT_255);
d1366 1
a1366 1
    stringBuffer.append(TEXT_256);
d1368 1
a1368 1
    stringBuffer.append(TEXT_257);
d1370 1
a1370 1
    stringBuffer.append(TEXT_258);
d1372 1
a1372 1
    stringBuffer.append(TEXT_259);
d1381 1
a1381 1
    stringBuffer.append(TEXT_260);
d1385 1
a1385 1
    stringBuffer.append(TEXT_261);
d1387 1
a1387 1
    stringBuffer.append(TEXT_262);
d1393 1
a1393 1
    stringBuffer.append(TEXT_263);
d1395 1
a1395 1
    stringBuffer.append(TEXT_264);
d1397 1
a1397 1
    stringBuffer.append(TEXT_265);
d1401 1
a1401 1
    stringBuffer.append(TEXT_266);
d1405 1
a1405 1
    stringBuffer.append(TEXT_267);
d1407 1
a1407 1
    stringBuffer.append(TEXT_268);
d1409 1
a1409 1
    stringBuffer.append(TEXT_269);
d1414 2
a1415 2
    stringBuffer.append(TEXT_270);
    stringBuffer.append(TEXT_271);
d1417 1
a1417 1
    stringBuffer.append(TEXT_272);
d1427 1
a1427 1
    stringBuffer.append(TEXT_273);
d1429 1
a1429 1
    stringBuffer.append(TEXT_274);
d1431 1
a1431 1
    stringBuffer.append(TEXT_275);
d1433 1
a1433 1
    stringBuffer.append(TEXT_276);
d1435 1
a1435 1
    stringBuffer.append(TEXT_277);
d1446 1
a1446 1
    stringBuffer.append(TEXT_278);
d1448 1
a1448 1
    stringBuffer.append(TEXT_279);
d1450 1
a1450 1
    stringBuffer.append(TEXT_280);
d1452 1
a1452 1
    stringBuffer.append(TEXT_281);
d1456 1
a1456 1
    stringBuffer.append(TEXT_282);
d1460 1
a1460 1
    stringBuffer.append(TEXT_283);
d1462 1
a1462 1
    stringBuffer.append(TEXT_284);
d1466 1
a1466 1
    stringBuffer.append(TEXT_285);
d1470 1
a1470 1
    stringBuffer.append(TEXT_286);
d1472 2
a1473 2
    stringBuffer.append(TEXT_287);
    stringBuffer.append(TEXT_288);
d1477 1
a1477 1
    stringBuffer.append(TEXT_289);
d1479 1
a1479 1
    stringBuffer.append(TEXT_290);
d1483 1
a1483 1
    stringBuffer.append(TEXT_291);
d1485 1
a1485 1
    stringBuffer.append(TEXT_292);
d1487 1
a1487 1
    stringBuffer.append(TEXT_293);
d1505 1
a1505 1
    stringBuffer.append(TEXT_294);
d1507 1
a1507 1
    stringBuffer.append(TEXT_295);
d1509 1
a1509 1
    stringBuffer.append(TEXT_296);
d1511 1
a1511 1
    stringBuffer.append(TEXT_297);
d1513 1
a1513 1
    stringBuffer.append(TEXT_298);
d1522 1
a1522 1
    stringBuffer.append(TEXT_299);
d1524 1
a1524 1
    stringBuffer.append(TEXT_300);
d1526 1
a1526 1
    stringBuffer.append(TEXT_301);
d1528 1
a1528 1
    stringBuffer.append(TEXT_302);
d1532 1
a1532 1
    stringBuffer.append(TEXT_303);
d1534 1
a1534 1
    stringBuffer.append(TEXT_304);
d1536 1
a1536 1
    stringBuffer.append(TEXT_305);
d1540 1
a1540 1
    stringBuffer.append(TEXT_306);
d1542 1
a1542 1
    stringBuffer.append(TEXT_307);
d1547 1
a1547 1
    stringBuffer.append(TEXT_308);
d1554 1
a1554 1
    stringBuffer.append(TEXT_309);
d1556 1
a1556 1
    stringBuffer.append(TEXT_310);
d1560 1
a1560 1
    stringBuffer.append(TEXT_311);
d1562 1
a1562 1
    stringBuffer.append(TEXT_312);
d1566 1
a1566 1
    stringBuffer.append(TEXT_313);
d1568 1
a1568 1
    stringBuffer.append(TEXT_314);
d1572 1
a1572 1
    stringBuffer.append(TEXT_315);
d1576 1
a1576 1
    stringBuffer.append(TEXT_316);
d1582 1
a1582 1
    stringBuffer.append(TEXT_317);
d1587 1
a1587 1
    stringBuffer.append(TEXT_318);
d1592 1
a1592 1
    stringBuffer.append(TEXT_319);
d1596 1
a1596 1
    stringBuffer.append(TEXT_320);
d1598 1
a1598 1
    stringBuffer.append(TEXT_321);
d1600 1
a1600 1
    stringBuffer.append(TEXT_322);
d1602 1
a1602 1
    stringBuffer.append(TEXT_323);
d1604 1
a1604 1
    stringBuffer.append(TEXT_324);
d1606 1
a1606 1
    stringBuffer.append(TEXT_325);
d1608 1
a1608 1
    stringBuffer.append(TEXT_326);
d1610 1
a1610 1
    stringBuffer.append(TEXT_327);
d1612 1
a1612 1
    stringBuffer.append(TEXT_328);
d1614 1
a1614 1
    stringBuffer.append(TEXT_329);
d1616 1
a1616 1
    stringBuffer.append(TEXT_330);
d1618 1
a1618 1
    stringBuffer.append(TEXT_331);
d1622 3
a1624 3
    stringBuffer.append(TEXT_332);
    stringBuffer.append(TEXT_333);
    stringBuffer.append(TEXT_334);
d1626 1
a1626 1
    stringBuffer.append(TEXT_335);
d1628 1
a1628 1
    stringBuffer.append(TEXT_336);
d1630 3
a1632 3
    stringBuffer.append(TEXT_337);
    stringBuffer.append(TEXT_338);
    stringBuffer.append(TEXT_339);
d1634 1
a1634 1
    stringBuffer.append(TEXT_340);
d1636 3
a1638 3
    stringBuffer.append(TEXT_341);
    stringBuffer.append(TEXT_342);
    stringBuffer.append(TEXT_343);
d1640 1
a1640 1
    stringBuffer.append(TEXT_344);
a1645 1
	String resolvedSemanticElement = "resolveSemanticElement()";
d1647 1
a1647 1
    stringBuffer.append(TEXT_345);
d1651 1
a1651 1
    stringBuffer.append(TEXT_346);
d1653 1
a1653 1
    stringBuffer.append(TEXT_347);
d1655 1
a1655 1
    stringBuffer.append(TEXT_348);
d1658 1
a1658 1
    stringBuffer.append(TEXT_349);
d1660 1
a1660 1
    stringBuffer.append(TEXT_350);
d1662 1
a1662 1
    stringBuffer.append(TEXT_351);
d1665 1
a1665 1
    stringBuffer.append(TEXT_352);
d1667 1
a1667 1
    stringBuffer.append(TEXT_353);
d1669 1
a1669 1
    stringBuffer.append(TEXT_354);
d1671 1
a1671 1
    stringBuffer.append(TEXT_355);
d1673 1
a1673 1
    stringBuffer.append(TEXT_356);
d1675 1
a1675 1
    stringBuffer.append(TEXT_357);
d1677 1
a1677 1
    stringBuffer.append(TEXT_358);
d1679 1
a1679 1
    stringBuffer.append(TEXT_359);
d1684 1
a1684 1
    stringBuffer.append(TEXT_360);
d1686 1
a1686 1
    stringBuffer.append(TEXT_361);
d1688 1
a1688 1
    stringBuffer.append(TEXT_362);
d1690 1
a1690 1
    stringBuffer.append(TEXT_363);
d1692 1
a1692 1
    stringBuffer.append(TEXT_364);
d1696 1
a1696 1
    stringBuffer.append(TEXT_365);
d1698 1
a1698 1
    stringBuffer.append(TEXT_366);
d1700 1
a1700 1
    stringBuffer.append(TEXT_367);
d1702 1
a1702 1
    stringBuffer.append(TEXT_368);
d1706 1
a1706 1
    stringBuffer.append(TEXT_369);
d1708 1
a1708 1
    stringBuffer.append(TEXT_370);
d1710 1
a1710 1
    stringBuffer.append(TEXT_371);
d1712 1
a1712 1
    stringBuffer.append(TEXT_372);
d1714 1
a1714 1
    stringBuffer.append(TEXT_373);
d1716 1
a1716 1
    stringBuffer.append(TEXT_374);
d1718 1
a1718 1
    stringBuffer.append(TEXT_375);
d1723 35
d1759 31
d1791 1
a1791 1
    stringBuffer.append(TEXT_376);
d1793 1
a1793 1
    stringBuffer.append(TEXT_377);
d1795 1
a1795 1
    stringBuffer.append(TEXT_378);
d1797 1
a1797 3
    stringBuffer.append(TEXT_379);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_380);
d1799 1
a1799 1
    stringBuffer.append(TEXT_381);
d1801 1
a1801 1
    stringBuffer.append(TEXT_382);
d1803 1
a1803 3
    stringBuffer.append(TEXT_383);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_384);
d1805 1
a1805 1
    stringBuffer.append(TEXT_385);
d1807 1
a1807 1
    stringBuffer.append(TEXT_386);
d1811 1
a1811 1
    stringBuffer.append(TEXT_387);
d1813 1
a1813 3
    stringBuffer.append(TEXT_388);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_389);
d1815 1
a1815 1
    stringBuffer.append(TEXT_390);
d1817 1
a1817 1
    stringBuffer.append(TEXT_391);
d1831 1
a1831 1
    stringBuffer.append(TEXT_392);
d1833 1
a1833 1
    stringBuffer.append(TEXT_393);
d1835 1
a1835 1
    stringBuffer.append(TEXT_394);
d1837 1
a1837 1
    stringBuffer.append(TEXT_395);
d1841 1
a1841 1
    stringBuffer.append(TEXT_396);
d1843 1
a1843 1
    stringBuffer.append(TEXT_397);
d1845 1
a1845 1
    stringBuffer.append(TEXT_398);
d1847 1
a1847 1
    stringBuffer.append(TEXT_399);
d1849 1
a1849 1
    stringBuffer.append(TEXT_400);
d1851 1
a1851 1
    stringBuffer.append(TEXT_401);
d1853 1
a1853 1
    stringBuffer.append(TEXT_402);
d1855 1
a1855 1
    stringBuffer.append(TEXT_403);
d1857 1
a1857 1
    stringBuffer.append(TEXT_404);
d1864 1
a1864 1
    stringBuffer.append(TEXT_405);
d1866 1
a1866 1
    stringBuffer.append(TEXT_406);
@


1.12
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d40 255
a294 255
  protected final String TEXT_21 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_22 = " extends ";
  protected final String TEXT_23 = " implements ";
  protected final String TEXT_24 = " {";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_29 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_30 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_31 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_32 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_33 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_34 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_35 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_36 = " createChangeConstraintCommand(final ";
  protected final String TEXT_37 = " request, final ";
  protected final String TEXT_38 = " child, Object constraint) {";
  protected final String TEXT_39 = NL;
  protected final String TEXT_40 = "\t\t\t\tfinal ";
  protected final String TEXT_41 = " node = (";
  protected final String TEXT_42 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_43 = " emfCommand = new ";
  protected final String TEXT_44 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_45 = " moveDelta;" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_46 = " resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof ";
  protected final String TEXT_47 = " == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_48 = " bounds = (";
  protected final String TEXT_49 = ") node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_50 = " original = new ";
  protected final String TEXT_51 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_52 = " referenceFigure = ((";
  protected final String TEXT_53 = ")child).getFigure();" + NL + "\t\t\t\t\t\treferenceFigure.translateToAbsolute(original);" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_54 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(transformed);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_55 = " move, ";
  protected final String TEXT_56 = " resize) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_57 = " bounds = (";
  protected final String TEXT_58 = ") node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_59 = "(";
  protected final String TEXT_60 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_61 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_62 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_63 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_64 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_65 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_66 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_67 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_68 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_69 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_70 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_71 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_72 = " requestEx = (";
  protected final String TEXT_73 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_74 = " result = new ";
  protected final String TEXT_75 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_76 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_77 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_78 = "Command((View) getModel(), requestEx";
  protected final String TEXT_79 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_80 = ")getConstraintFor(request)";
  protected final String TEXT_81 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_82 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_83 = "(";
  protected final String TEXT_84 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_85 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_86 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_87 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_88 = " result = new ";
  protected final String TEXT_89 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_90 = "());" + NL + "\t\t";
  protected final String TEXT_91 = " scrollPane = new ";
  protected final String TEXT_92 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_93 = NL + "\t\t";
  protected final String TEXT_94 = " viewport = new ";
  protected final String TEXT_95 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_96 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_97 = "());";
  protected final String TEXT_98 = NL + "\t\t";
  protected final String TEXT_99 = " viewport = new ";
  protected final String TEXT_100 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_101 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_102 = "());";
  protected final String TEXT_103 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_104 = " resolveSemanticElement() {" + NL + "\t\tView view = getDiagramNode();" + NL + "\t\treturn (view.getElement() instanceof ";
  protected final String TEXT_105 = ") ? (";
  protected final String TEXT_106 = ") view.getElement() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_107 = NL;
  protected final String TEXT_108 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_109 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_110 = " domainModelEditDomain = ";
  protected final String TEXT_111 = ".getEditingDomain(";
  protected final String TEXT_112 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_113 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_114 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_115 = " {";
  protected final String TEXT_116 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_117 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_118 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_119 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_120 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_121 = " createFilter() {";
  protected final String TEXT_122 = NL + "\t\t\t";
  protected final String TEXT_123 = " filter = ";
  protected final String TEXT_124 = ".createFeatureFilter(";
  protected final String TEXT_125 = ".eINSTANCE.get";
  protected final String TEXT_126 = "());";
  protected final String TEXT_127 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_128 = ".createFeatureFilter(";
  protected final String TEXT_129 = ".eINSTANCE.get";
  protected final String TEXT_130 = "()));";
  protected final String TEXT_131 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_132 = ".createNotifierFilter(";
  protected final String TEXT_133 = ".getElement()));";
  protected final String TEXT_134 = NL + "\t\t\t";
  protected final String TEXT_135 = " filter = ";
  protected final String TEXT_136 = ".createNotifierFilter(";
  protected final String TEXT_137 = ".getElement());";
  protected final String TEXT_138 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_139 = NL + "\t\t\t";
  protected final String TEXT_140 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_141 = NL + "\t\t\t";
  protected final String TEXT_142 = " filter = ";
  protected final String TEXT_143 = ".NOT_TOUCH;";
  protected final String TEXT_144 = NL + "\t\t\treturn filter;";
  protected final String TEXT_145 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_146 = " getCreateNotationalElementCommand(";
  protected final String TEXT_147 = " descriptor) {";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = "\t\t\t";
  protected final String TEXT_150 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_151 = NL + "\t\t\tcase ";
  protected final String TEXT_152 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_153 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_154 = "(";
  protected final String TEXT_155 = ", domainElement, ";
  protected final String TEXT_156 = "new ";
  protected final String TEXT_157 = "(0, 0, ";
  protected final String TEXT_158 = ", ";
  protected final String TEXT_159 = ")";
  protected final String TEXT_160 = NL + "null";
  protected final String TEXT_161 = ", ";
  protected final String TEXT_162 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_163 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_164 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_165 = " getSemanticChildNodes() {";
  protected final String TEXT_166 = NL;
  protected final String TEXT_167 = NL + "\treturn ";
  protected final String TEXT_168 = ".EMPTY_LIST;";
  protected final String TEXT_169 = NL + "\t";
  protected final String TEXT_170 = " result = new ";
  protected final String TEXT_171 = "();";
  protected final String TEXT_172 = NL + "\t";
  protected final String TEXT_173 = " viewObject = ";
  protected final String TEXT_174 = ";" + NL + "\t";
  protected final String TEXT_175 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_176 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_177 = NL + "\tfor(";
  protected final String TEXT_178 = " it = ";
  protected final String TEXT_179 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_180 = ") it.next();";
  protected final String TEXT_181 = NL + "\tnextValue = (";
  protected final String TEXT_182 = ")";
  protected final String TEXT_183 = ";";
  protected final String TEXT_184 = NL + "\tnodeVID = ";
  protected final String TEXT_185 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_186 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_187 = NL + "\tcase ";
  protected final String TEXT_188 = ".VISUAL_ID: {";
  protected final String TEXT_189 = NL + "\tif (";
  protected final String TEXT_190 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_191 = NL + "\t\tresult.add(new ";
  protected final String TEXT_192 = "(nextValue, nodeVID));";
  protected final String TEXT_193 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_194 = NL + "\t\t}";
  protected final String TEXT_195 = NL + "\t}";
  protected final String TEXT_196 = NL + "\t}";
  protected final String TEXT_197 = NL + "\treturn result;";
  protected final String TEXT_198 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_199 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_200 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_201 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_202 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_203 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_204 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_205 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_206 = " domainModelEditDomain = ";
  protected final String TEXT_207 = ".getEditingDomain(";
  protected final String TEXT_208 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_209 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_210 = NL;
  protected final String TEXT_211 = NL;
  protected final String TEXT_212 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_213 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_214 = " feature, ";
  protected final String TEXT_215 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_216 = NL;
  protected final String TEXT_217 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_218 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_219 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_220 = NL;
  protected final String TEXT_221 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_222 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_223 = NL;
  protected final String TEXT_224 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_225 = "static ";
  protected final String TEXT_226 = "class Create";
  protected final String TEXT_227 = "Command extends ";
  protected final String TEXT_228 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_229 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_230 = "Command(";
  protected final String TEXT_231 = " parent, ";
  protected final String TEXT_232 = " request";
  protected final String TEXT_233 = ", ";
  protected final String TEXT_234 = " constraint";
  protected final String TEXT_235 = ") {" + NL + "\t\t\t";
  protected final String TEXT_236 = " domainModelEditDomain = ";
  protected final String TEXT_237 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_238 = NL + "\t\t\t";
  protected final String TEXT_239 = " createdDomainElement = ";
  protected final String TEXT_240 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_241 = ".eINSTANCE.get";
  protected final String TEXT_242 = "());";
  protected final String TEXT_243 = NL + "\t\t\t";
  protected final String TEXT_244 = " createdDomainElement = ";
  protected final String TEXT_245 = ".eINSTANCE.create";
  protected final String TEXT_246 = "();";
  protected final String TEXT_247 = NL + "\t\t\t";
  protected final String TEXT_248 = NL + "\t\t\t";
  protected final String TEXT_249 = ".";
  protected final String TEXT_250 = ".initializeElement(";
  protected final String TEXT_251 = "(";
  protected final String TEXT_252 = ") ";
  protected final String TEXT_253 = "createdDomainElement);";
  protected final String TEXT_254 = NL + "\t\t\t";
  protected final String TEXT_255 = " compoundCommand = new ";
  protected final String TEXT_256 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_257 = ".create(domainModelEditDomain, ";
  protected final String TEXT_258 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_259 = ".eINSTANCE.get";
  protected final String TEXT_260 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_261 = ".create(domainModelEditDomain, ";
  protected final String TEXT_262 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_263 = ".eINSTANCE.get";
  protected final String TEXT_264 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_265 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_266 = ".create(domainModelEditDomain, ";
  protected final String TEXT_267 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_268 = ".eINSTANCE.get";
  protected final String TEXT_269 = "(), createdDomainElement);";
  protected final String TEXT_270 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_271 = "(";
  protected final String TEXT_272 = ", ";
  protected final String TEXT_273 = "));";
  protected final String TEXT_274 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_275 = "(parent, ";
d296 130
a425 8
  protected final String TEXT_277 = ") ";
  protected final String TEXT_278 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_279 = "constraint";
  protected final String TEXT_280 = "null";
  protected final String TEXT_281 = ", ";
  protected final String TEXT_282 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_283 = NL + "}" + NL;
  protected final String TEXT_284 = NL;
d532 27
d560 1
a560 1
    stringBuffer.append(TEXT_22);
d562 1
a562 1
    stringBuffer.append(TEXT_23);
d564 1
a564 1
    stringBuffer.append(TEXT_24);
a566 1
    stringBuffer.append(TEXT_25);
d568 1
d570 1
a570 1
    stringBuffer.append(TEXT_27);
d572 1
a572 1
    stringBuffer.append(TEXT_28);
d574 1
a574 1
    stringBuffer.append(TEXT_29);
a575 2
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d579 2
d582 1
a582 1
    stringBuffer.append(TEXT_33);
d584 1
a584 1
    stringBuffer.append(TEXT_34);
d586 1
a586 1
    stringBuffer.append(TEXT_35);
d588 1
a588 1
    stringBuffer.append(TEXT_36);
d590 1
a590 1
    stringBuffer.append(TEXT_37);
a591 1
    stringBuffer.append(TEXT_38);
a593 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d597 2
a599 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d601 1
a601 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d603 1
a603 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d605 1
a605 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d607 1
a607 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d609 1
a609 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d611 1
a611 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d613 1
a613 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d615 1
a615 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d617 1
a617 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d623 1
a623 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d625 6
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d632 3
a634 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d636 1
a636 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d638 1
a638 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d640 1
a640 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d642 1
a642 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d644 1
a644 1
    } else {
d646 1
a646 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d648 1
a648 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy"));
d650 1
a650 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d652 1
a652 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d654 1
a654 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d656 1
a656 1
    }
d658 1
a658 1
    if (null != genDiagram.getPalette()) {
d660 4
a663 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d665 1
a665 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d667 1
a667 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d671 330
d1002 3
a1004 1
    stringBuffer.append(TEXT_75);
d1009 1
a1009 1
    stringBuffer.append(TEXT_76);
d1011 1
a1011 1
    stringBuffer.append(TEXT_77);
d1014 1
a1014 1
    stringBuffer.append(TEXT_78);
d1016 1
a1016 1
    stringBuffer.append(TEXT_79);
d1018 1
a1018 1
    stringBuffer.append(TEXT_80);
d1020 1
a1020 1
    stringBuffer.append(TEXT_81);
d1024 1
a1024 1
    stringBuffer.append(TEXT_82);
d1026 1
a1026 1
    stringBuffer.append(TEXT_83);
d1028 1
a1028 1
    stringBuffer.append(TEXT_84);
d1030 1
a1030 1
    stringBuffer.append(TEXT_85);
d1032 1
a1032 1
    stringBuffer.append(TEXT_86);
d1034 1
a1034 1
    stringBuffer.append(TEXT_87);
d1036 1
a1036 1
    stringBuffer.append(TEXT_88);
d1038 1
a1038 1
    stringBuffer.append(TEXT_89);
d1040 1
a1040 1
    stringBuffer.append(TEXT_90);
d1042 1
a1042 1
    stringBuffer.append(TEXT_91);
d1044 1
a1044 1
    stringBuffer.append(TEXT_92);
d1046 1
a1046 1
    stringBuffer.append(TEXT_93);
d1048 1
a1048 1
    stringBuffer.append(TEXT_94);
d1050 1
a1050 1
    stringBuffer.append(TEXT_95);
d1052 1
a1052 1
    stringBuffer.append(TEXT_96);
d1054 1
a1054 1
    stringBuffer.append(TEXT_97);
d1056 1
a1056 1
    stringBuffer.append(TEXT_98);
d1058 1
a1058 1
    stringBuffer.append(TEXT_99);
d1060 1
a1060 1
    stringBuffer.append(TEXT_100);
d1062 1
a1062 1
    stringBuffer.append(TEXT_101);
d1064 1
a1064 1
    stringBuffer.append(TEXT_102);
d1066 1
a1066 1
    stringBuffer.append(TEXT_103);
d1068 1
a1068 1
    stringBuffer.append(TEXT_104);
d1070 1
a1070 1
    stringBuffer.append(TEXT_105);
d1072 1
a1072 1
    stringBuffer.append(TEXT_106);
d1079 2
a1080 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(TEXT_108);
d1082 1
a1082 1
    stringBuffer.append(TEXT_109);
d1084 1
a1084 1
    stringBuffer.append(TEXT_110);
d1086 1
a1086 1
    stringBuffer.append(TEXT_111);
d1088 1
a1088 1
    stringBuffer.append(TEXT_112);
d1090 1
a1090 1
    stringBuffer.append(TEXT_113);
d1092 1
a1092 1
    stringBuffer.append(TEXT_114);
d1094 1
a1094 1
    stringBuffer.append(TEXT_115);
d1109 1
a1109 1
    stringBuffer.append(TEXT_116);
d1111 1
a1111 1
    stringBuffer.append(TEXT_117);
d1113 1
a1113 1
    stringBuffer.append(TEXT_118);
d1115 1
a1115 1
    stringBuffer.append(TEXT_119);
d1119 1
a1119 1
    stringBuffer.append(TEXT_120);
d1121 1
a1121 1
    stringBuffer.append(TEXT_121);
d1140 1
a1140 1
    stringBuffer.append(TEXT_122);
d1142 1
a1142 1
    stringBuffer.append(TEXT_123);
d1144 1
a1144 1
    stringBuffer.append(TEXT_124);
d1146 1
a1146 1
    stringBuffer.append(TEXT_125);
d1148 1
a1148 1
    stringBuffer.append(TEXT_126);
d1152 1
a1152 1
    stringBuffer.append(TEXT_127);
d1154 1
a1154 1
    stringBuffer.append(TEXT_128);
d1156 1
a1156 1
    stringBuffer.append(TEXT_129);
d1158 1
a1158 1
    stringBuffer.append(TEXT_130);
d1166 1
a1166 1
    stringBuffer.append(TEXT_131);
d1168 1
a1168 1
    stringBuffer.append(TEXT_132);
d1170 1
a1170 1
    stringBuffer.append(TEXT_133);
d1175 1
a1175 1
    stringBuffer.append(TEXT_134);
d1177 1
a1177 1
    stringBuffer.append(TEXT_135);
d1179 1
a1179 1
    stringBuffer.append(TEXT_136);
d1181 1
a1181 1
    stringBuffer.append(TEXT_137);
d1190 1
a1190 1
    stringBuffer.append(TEXT_138);
d1194 1
a1194 1
    stringBuffer.append(TEXT_139);
d1196 1
a1196 1
    stringBuffer.append(TEXT_140);
d1202 1
a1202 1
    stringBuffer.append(TEXT_141);
d1204 1
a1204 1
    stringBuffer.append(TEXT_142);
d1206 1
a1206 1
    stringBuffer.append(TEXT_143);
d1210 1
a1210 1
    stringBuffer.append(TEXT_144);
d1214 1
a1214 1
    stringBuffer.append(TEXT_145);
d1216 1
a1216 1
    stringBuffer.append(TEXT_146);
d1218 1
a1218 1
    stringBuffer.append(TEXT_147);
d1223 2
a1224 2
    stringBuffer.append(TEXT_148);
    stringBuffer.append(TEXT_149);
d1226 1
a1226 1
    stringBuffer.append(TEXT_150);
d1236 1
a1236 1
    stringBuffer.append(TEXT_151);
d1238 1
a1238 1
    stringBuffer.append(TEXT_152);
d1240 1
a1240 1
    stringBuffer.append(TEXT_153);
d1242 1
a1242 1
    stringBuffer.append(TEXT_154);
d1244 1
a1244 1
    stringBuffer.append(TEXT_155);
d1255 1
a1255 1
    stringBuffer.append(TEXT_156);
d1257 1
a1257 1
    stringBuffer.append(TEXT_157);
d1259 1
a1259 1
    stringBuffer.append(TEXT_158);
d1261 1
a1261 1
    stringBuffer.append(TEXT_159);
d1265 1
a1265 1
    stringBuffer.append(TEXT_160);
d1269 1
a1269 1
    stringBuffer.append(TEXT_161);
d1271 1
a1271 1
    stringBuffer.append(TEXT_162);
d1275 1
a1275 1
    stringBuffer.append(TEXT_163);
d1279 1
a1279 1
    stringBuffer.append(TEXT_164);
d1281 2
a1282 2
    stringBuffer.append(TEXT_165);
    stringBuffer.append(TEXT_166);
d1286 1
a1286 1
    stringBuffer.append(TEXT_167);
d1288 1
a1288 1
    stringBuffer.append(TEXT_168);
d1292 1
a1292 1
    stringBuffer.append(TEXT_169);
d1294 1
a1294 1
    stringBuffer.append(TEXT_170);
d1296 1
a1296 1
    stringBuffer.append(TEXT_171);
d1314 1
a1314 1
    stringBuffer.append(TEXT_172);
d1316 1
a1316 1
    stringBuffer.append(TEXT_173);
d1318 1
a1318 1
    stringBuffer.append(TEXT_174);
d1320 1
a1320 1
    stringBuffer.append(TEXT_175);
d1322 1
a1322 1
    stringBuffer.append(TEXT_176);
d1331 1
a1331 1
    stringBuffer.append(TEXT_177);
d1333 1
a1333 1
    stringBuffer.append(TEXT_178);
d1335 1
a1335 1
    stringBuffer.append(TEXT_179);
d1337 1
a1337 1
    stringBuffer.append(TEXT_180);
d1341 1
a1341 1
    stringBuffer.append(TEXT_181);
d1343 1
a1343 1
    stringBuffer.append(TEXT_182);
d1345 1
a1345 1
    stringBuffer.append(TEXT_183);
d1349 1
a1349 1
    stringBuffer.append(TEXT_184);
d1351 1
a1351 1
    stringBuffer.append(TEXT_185);
d1356 1
a1356 1
    stringBuffer.append(TEXT_186);
d1363 1
a1363 1
    stringBuffer.append(TEXT_187);
d1365 1
a1365 1
    stringBuffer.append(TEXT_188);
d1369 1
a1369 1
    stringBuffer.append(TEXT_189);
d1371 1
a1371 1
    stringBuffer.append(TEXT_190);
d1375 1
a1375 1
    stringBuffer.append(TEXT_191);
d1377 1
a1377 1
    stringBuffer.append(TEXT_192);
d1381 1
a1381 1
    stringBuffer.append(TEXT_193);
d1385 1
a1385 1
    stringBuffer.append(TEXT_194);
d1391 1
a1391 1
    stringBuffer.append(TEXT_195);
d1396 1
a1396 1
    stringBuffer.append(TEXT_196);
d1401 1
a1401 1
    stringBuffer.append(TEXT_197);
d1405 1
a1405 1
    stringBuffer.append(TEXT_198);
d1407 1
a1407 1
    stringBuffer.append(TEXT_199);
d1409 1
a1409 1
    stringBuffer.append(TEXT_200);
d1411 1
a1411 1
    stringBuffer.append(TEXT_201);
d1413 1
a1413 1
    stringBuffer.append(TEXT_202);
d1415 1
a1415 1
    stringBuffer.append(TEXT_203);
d1417 1
a1417 1
    stringBuffer.append(TEXT_204);
d1419 1
a1419 1
    stringBuffer.append(TEXT_205);
d1421 1
a1421 1
    stringBuffer.append(TEXT_206);
d1423 1
a1423 1
    stringBuffer.append(TEXT_207);
d1425 1
a1425 1
    stringBuffer.append(TEXT_208);
d1427 1
a1427 1
    stringBuffer.append(TEXT_209);
d1431 3
a1433 3
    stringBuffer.append(TEXT_210);
    stringBuffer.append(TEXT_211);
    stringBuffer.append(TEXT_212);
d1435 1
a1435 1
    stringBuffer.append(TEXT_213);
d1437 1
a1437 1
    stringBuffer.append(TEXT_214);
d1439 3
a1441 3
    stringBuffer.append(TEXT_215);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(TEXT_217);
d1443 1
a1443 1
    stringBuffer.append(TEXT_218);
d1445 3
a1447 3
    stringBuffer.append(TEXT_219);
    stringBuffer.append(TEXT_220);
    stringBuffer.append(TEXT_221);
d1449 1
a1449 1
    stringBuffer.append(TEXT_222);
d1457 1
a1457 1
    stringBuffer.append(TEXT_223);
d1461 1
a1461 1
    stringBuffer.append(TEXT_224);
d1463 1
a1463 1
    stringBuffer.append(TEXT_225);
d1465 1
a1465 1
    stringBuffer.append(TEXT_226);
d1468 1
a1468 1
    stringBuffer.append(TEXT_227);
d1470 1
a1470 1
    stringBuffer.append(TEXT_228);
d1472 1
a1472 1
    stringBuffer.append(TEXT_229);
d1475 1
a1475 1
    stringBuffer.append(TEXT_230);
d1477 1
a1477 1
    stringBuffer.append(TEXT_231);
d1479 1
a1479 1
    stringBuffer.append(TEXT_232);
d1481 1
a1481 1
    stringBuffer.append(TEXT_233);
d1483 1
a1483 1
    stringBuffer.append(TEXT_234);
d1485 1
a1485 1
    stringBuffer.append(TEXT_235);
d1487 1
a1487 1
    stringBuffer.append(TEXT_236);
d1489 1
a1489 1
    stringBuffer.append(TEXT_237);
d1494 1
a1494 1
    stringBuffer.append(TEXT_238);
d1496 1
a1496 1
    stringBuffer.append(TEXT_239);
d1498 1
a1498 1
    stringBuffer.append(TEXT_240);
d1500 1
a1500 1
    stringBuffer.append(TEXT_241);
d1502 1
a1502 1
    stringBuffer.append(TEXT_242);
d1506 1
a1506 1
    stringBuffer.append(TEXT_243);
d1508 1
a1508 1
    stringBuffer.append(TEXT_244);
d1510 1
a1510 1
    stringBuffer.append(TEXT_245);
d1512 1
a1512 1
    stringBuffer.append(TEXT_246);
d1516 1
a1516 1
    stringBuffer.append(TEXT_247);
d1518 1
a1518 1
    stringBuffer.append(TEXT_248);
d1520 1
a1520 1
    stringBuffer.append(TEXT_249);
d1522 1
a1522 1
    stringBuffer.append(TEXT_250);
d1524 1
a1524 1
    stringBuffer.append(TEXT_251);
d1526 1
a1526 1
    stringBuffer.append(TEXT_252);
d1528 1
a1528 1
    stringBuffer.append(TEXT_253);
d1535 1
a1535 1
    stringBuffer.append(TEXT_254);
d1537 1
a1537 1
    stringBuffer.append(TEXT_255);
d1539 1
a1539 1
    stringBuffer.append(TEXT_256);
d1541 1
a1541 1
    stringBuffer.append(TEXT_257);
d1543 1
a1543 1
    stringBuffer.append(TEXT_258);
d1545 1
a1545 1
    stringBuffer.append(TEXT_259);
d1547 1
a1547 1
    stringBuffer.append(TEXT_260);
d1549 1
a1549 1
    stringBuffer.append(TEXT_261);
d1551 1
a1551 1
    stringBuffer.append(TEXT_262);
d1553 1
a1553 1
    stringBuffer.append(TEXT_263);
d1555 1
a1555 1
    stringBuffer.append(TEXT_264);
d1559 1
a1559 1
    stringBuffer.append(TEXT_265);
d1561 1
a1561 1
    stringBuffer.append(TEXT_266);
d1563 1
a1563 1
    stringBuffer.append(TEXT_267);
d1565 1
a1565 1
    stringBuffer.append(TEXT_268);
d1567 1
a1567 1
    stringBuffer.append(TEXT_269);
d1581 1
a1581 1
    stringBuffer.append(TEXT_270);
d1583 1
a1583 1
    stringBuffer.append(TEXT_271);
d1585 1
a1585 1
    stringBuffer.append(TEXT_272);
d1587 1
a1587 1
    stringBuffer.append(TEXT_273);
d1591 1
a1591 1
    stringBuffer.append(TEXT_274);
d1593 1
a1593 1
    stringBuffer.append(TEXT_275);
d1595 1
a1595 1
    stringBuffer.append(TEXT_276);
d1597 1
a1597 1
    stringBuffer.append(TEXT_277);
d1599 1
a1599 1
    stringBuffer.append(TEXT_278);
d1601 1
a1601 1
    stringBuffer.append(TEXT_279);
d1603 1
a1603 1
    stringBuffer.append(TEXT_280);
d1605 1
a1605 1
    stringBuffer.append(TEXT_281);
d1607 1
a1607 1
    stringBuffer.append(TEXT_282);
d1614 1
a1614 1
    stringBuffer.append(TEXT_283);
d1616 1
a1616 1
    stringBuffer.append(TEXT_284);
@


1.11
log
@[155955] bblajer -  Allow creation of child nodes directly in parent elements
@
text
@d166 64
a229 64
  protected final String TEXT_147 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_148 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_149 = NL + "\t\t\tcase ";
  protected final String TEXT_150 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_151 = ") {" + NL + "\t\t\t\t\treturn new Create";
  protected final String TEXT_152 = "NotationCommand(getHost(), domainElement";
  protected final String TEXT_153 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_154 = ");" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_155 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_156 = " getSemanticChildNodes() {";
  protected final String TEXT_157 = NL;
  protected final String TEXT_158 = NL + "\treturn ";
  protected final String TEXT_159 = ".EMPTY_LIST;";
  protected final String TEXT_160 = NL + "\t";
  protected final String TEXT_161 = " result = new ";
  protected final String TEXT_162 = "();";
  protected final String TEXT_163 = NL + "\t";
  protected final String TEXT_164 = " viewObject = ";
  protected final String TEXT_165 = ";" + NL + "\t";
  protected final String TEXT_166 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_167 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_168 = NL + "\tfor(";
  protected final String TEXT_169 = " it = ";
  protected final String TEXT_170 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_171 = ") it.next();";
  protected final String TEXT_172 = NL + "\tnextValue = (";
  protected final String TEXT_173 = ")";
  protected final String TEXT_174 = ";";
  protected final String TEXT_175 = NL + "\tnodeVID = ";
  protected final String TEXT_176 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_177 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_178 = NL + "\tcase ";
  protected final String TEXT_179 = ".VISUAL_ID: {";
  protected final String TEXT_180 = NL + "\tif (";
  protected final String TEXT_181 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_182 = NL + "\t\tresult.add(new ";
  protected final String TEXT_183 = "(nextValue, nodeVID));";
  protected final String TEXT_184 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t\t}";
  protected final String TEXT_186 = NL + "\t}";
  protected final String TEXT_187 = NL + "\t}";
  protected final String TEXT_188 = NL + "\treturn result;";
  protected final String TEXT_189 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_190 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_191 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_192 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_193 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_194 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_195 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_196 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_197 = " domainModelEditDomain = ";
  protected final String TEXT_198 = ".getEditingDomain(";
  protected final String TEXT_199 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_200 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = NL;
  protected final String TEXT_203 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_204 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_205 = " feature, ";
  protected final String TEXT_206 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_207 = NL;
  protected final String TEXT_208 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_209 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_210 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d231 42
a272 42
  protected final String TEXT_212 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_213 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_216 = "static ";
  protected final String TEXT_217 = "class Create";
  protected final String TEXT_218 = "NotationCommand extends ";
  protected final String TEXT_219 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_220 = "NotationCommand(";
  protected final String TEXT_221 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_222 = " domainElement";
  protected final String TEXT_223 = ", ";
  protected final String TEXT_224 = " constraint";
  protected final String TEXT_225 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_226 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_227 = ".decorateView(createdNode);";
  protected final String TEXT_228 = NL + "\t\t\t";
  protected final String TEXT_229 = " bounds = ";
  protected final String TEXT_230 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_231 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_232 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_233 = "));";
  protected final String TEXT_234 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_235 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_236 = "static ";
  protected final String TEXT_237 = "class Create";
  protected final String TEXT_238 = "Command extends ";
  protected final String TEXT_239 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_240 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_241 = "Command(";
  protected final String TEXT_242 = " parent, ";
  protected final String TEXT_243 = " request";
  protected final String TEXT_244 = ", ";
  protected final String TEXT_245 = " constraint";
  protected final String TEXT_246 = ") {" + NL + "\t\t\t";
  protected final String TEXT_247 = " domainModelEditDomain = ";
  protected final String TEXT_248 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_249 = NL + "\t\t\t";
  protected final String TEXT_250 = " createdDomainElement = ";
  protected final String TEXT_251 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_252 = ".eINSTANCE.get";
  protected final String TEXT_253 = "());";
d274 30
a303 35
  protected final String TEXT_255 = " createdDomainElement = ";
  protected final String TEXT_256 = ".eINSTANCE.create";
  protected final String TEXT_257 = "();";
  protected final String TEXT_258 = NL + "\t\t\t";
  protected final String TEXT_259 = NL + "\t\t\t";
  protected final String TEXT_260 = ".";
  protected final String TEXT_261 = ".initializeElement(";
  protected final String TEXT_262 = "(";
  protected final String TEXT_263 = ") ";
  protected final String TEXT_264 = "createdDomainElement);";
  protected final String TEXT_265 = NL + "\t\t\t";
  protected final String TEXT_266 = " compoundCommand = new ";
  protected final String TEXT_267 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_268 = ".create(domainModelEditDomain, ";
  protected final String TEXT_269 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_270 = ".eINSTANCE.get";
  protected final String TEXT_271 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_272 = ".create(domainModelEditDomain, ";
  protected final String TEXT_273 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_274 = ".eINSTANCE.get";
  protected final String TEXT_275 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_276 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_277 = ".create(domainModelEditDomain, ";
  protected final String TEXT_278 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_279 = ".eINSTANCE.get";
  protected final String TEXT_280 = "(), createdDomainElement);";
  protected final String TEXT_281 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_282 = "NotationCommand(parent, ";
  protected final String TEXT_283 = "(";
  protected final String TEXT_284 = ") ";
  protected final String TEXT_285 = "createdDomainElement";
  protected final String TEXT_286 = ", constraint";
  protected final String TEXT_287 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_288 = NL + "}" + NL;
  protected final String TEXT_289 = NL;
d730 6
d737 1
a737 1
    stringBuffer.append(TEXT_148);
d747 1
a747 1
    stringBuffer.append(TEXT_149);
d749 1
a749 1
    stringBuffer.append(TEXT_150);
a750 5
    stringBuffer.append(TEXT_151);
    stringBuffer.append(nextNode.getDomainMetaClass().getName());
    stringBuffer.append(nextNode.getVisualID());
    stringBuffer.append(TEXT_152);
    if (!isListLayout) {
d752 1
a752 1
    }
d754 29
d786 5
a790 1
    stringBuffer.append(TEXT_155);
d792 2
a793 2
    stringBuffer.append(TEXT_156);
    stringBuffer.append(TEXT_157);
d797 1
a797 1
    stringBuffer.append(TEXT_158);
d799 1
a799 1
    stringBuffer.append(TEXT_159);
d803 1
a803 1
    stringBuffer.append(TEXT_160);
d805 1
a805 1
    stringBuffer.append(TEXT_161);
d807 1
a807 1
    stringBuffer.append(TEXT_162);
d825 1
a825 1
    stringBuffer.append(TEXT_163);
d827 1
a827 1
    stringBuffer.append(TEXT_164);
d829 1
a829 1
    stringBuffer.append(TEXT_165);
d831 1
a831 1
    stringBuffer.append(TEXT_166);
d833 1
a833 1
    stringBuffer.append(TEXT_167);
d842 1
a842 1
    stringBuffer.append(TEXT_168);
d844 1
a844 1
    stringBuffer.append(TEXT_169);
d846 1
a846 1
    stringBuffer.append(TEXT_170);
d848 1
a848 1
    stringBuffer.append(TEXT_171);
d852 1
a852 1
    stringBuffer.append(TEXT_172);
d854 1
a854 1
    stringBuffer.append(TEXT_173);
d856 1
a856 1
    stringBuffer.append(TEXT_174);
d860 1
a860 1
    stringBuffer.append(TEXT_175);
d862 1
a862 1
    stringBuffer.append(TEXT_176);
d867 1
a867 1
    stringBuffer.append(TEXT_177);
d874 1
a874 1
    stringBuffer.append(TEXT_178);
d876 1
a876 1
    stringBuffer.append(TEXT_179);
d880 1
a880 1
    stringBuffer.append(TEXT_180);
d882 1
a882 1
    stringBuffer.append(TEXT_181);
d886 1
a886 1
    stringBuffer.append(TEXT_182);
d888 1
a888 1
    stringBuffer.append(TEXT_183);
d892 1
a892 1
    stringBuffer.append(TEXT_184);
d896 1
a896 1
    stringBuffer.append(TEXT_185);
d902 1
a902 1
    stringBuffer.append(TEXT_186);
d907 1
a907 1
    stringBuffer.append(TEXT_187);
d912 1
a912 1
    stringBuffer.append(TEXT_188);
d916 1
a916 1
    stringBuffer.append(TEXT_189);
d918 1
a918 1
    stringBuffer.append(TEXT_190);
d920 1
a920 1
    stringBuffer.append(TEXT_191);
d922 1
a922 1
    stringBuffer.append(TEXT_192);
d924 1
a924 1
    stringBuffer.append(TEXT_193);
d926 1
a926 1
    stringBuffer.append(TEXT_194);
d928 1
a928 1
    stringBuffer.append(TEXT_195);
d930 1
a930 1
    stringBuffer.append(TEXT_196);
d932 1
a932 1
    stringBuffer.append(TEXT_197);
d934 1
a934 1
    stringBuffer.append(TEXT_198);
d936 1
a936 1
    stringBuffer.append(TEXT_199);
d938 1
a938 1
    stringBuffer.append(TEXT_200);
a941 14
    stringBuffer.append(TEXT_201);
    stringBuffer.append(TEXT_202);
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_206);
    stringBuffer.append(TEXT_207);
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d945 1
a945 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d947 1
a947 7
    
for(Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	boolean isStatic = false;
	boolean isListLayout = genCompartment.isListLayout();
	String resolvedSemanticElement = "resolveSemanticElement()";

d949 1
a950 1
    if (isStatic) {
a951 1
    }
d953 1
a953 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d955 1
a955 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
a956 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
a957 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d959 1
a959 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a960 10
    if (!isListLayout) {
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_224);
    }
    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_227);
d962 5
a966 1
	if (!isListLayout) {
d968 1
a968 23
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_230);
    
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_231);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_232);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_233);
    
	}

    stringBuffer.append(TEXT_234);
d972 1
a972 1
    stringBuffer.append(TEXT_235);
d974 1
a974 1
    stringBuffer.append(TEXT_236);
d976 1
a976 1
    stringBuffer.append(TEXT_237);
d979 1
a979 1
    stringBuffer.append(TEXT_238);
d981 3
a983 1
    stringBuffer.append(TEXT_239);
d986 1
a986 4
    stringBuffer.append(TEXT_240);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_241);
d988 1
a988 1
    stringBuffer.append(TEXT_242);
d990 1
a990 1
    stringBuffer.append(TEXT_243);
d992 1
a992 1
    stringBuffer.append(TEXT_244);
d994 1
a994 1
    stringBuffer.append(TEXT_245);
d996 1
a996 1
    stringBuffer.append(TEXT_246);
d998 1
a998 1
    stringBuffer.append(TEXT_247);
d1000 1
a1000 1
    stringBuffer.append(TEXT_248);
d1005 1
a1005 1
    stringBuffer.append(TEXT_249);
d1007 1
a1007 1
    stringBuffer.append(TEXT_250);
d1009 1
a1009 1
    stringBuffer.append(TEXT_251);
d1011 1
a1011 1
    stringBuffer.append(TEXT_252);
d1013 1
a1013 1
    stringBuffer.append(TEXT_253);
d1017 1
a1017 1
    stringBuffer.append(TEXT_254);
d1019 1
a1019 1
    stringBuffer.append(TEXT_255);
d1021 1
a1021 1
    stringBuffer.append(TEXT_256);
d1023 1
a1023 1
    stringBuffer.append(TEXT_257);
d1027 1
a1027 1
    stringBuffer.append(TEXT_258);
d1029 1
a1029 1
    stringBuffer.append(TEXT_259);
d1031 1
a1031 1
    stringBuffer.append(TEXT_260);
d1033 1
a1033 1
    stringBuffer.append(TEXT_261);
d1035 1
a1035 1
    stringBuffer.append(TEXT_262);
d1037 1
a1037 1
    stringBuffer.append(TEXT_263);
d1039 1
a1039 1
    stringBuffer.append(TEXT_264);
d1046 1
a1046 1
    stringBuffer.append(TEXT_265);
d1048 1
a1048 1
    stringBuffer.append(TEXT_266);
d1050 1
a1050 1
    stringBuffer.append(TEXT_267);
d1052 1
a1052 1
    stringBuffer.append(TEXT_268);
d1054 1
a1054 1
    stringBuffer.append(TEXT_269);
d1056 1
a1056 1
    stringBuffer.append(TEXT_270);
d1058 1
a1058 1
    stringBuffer.append(TEXT_271);
d1060 1
a1060 1
    stringBuffer.append(TEXT_272);
d1062 1
a1062 1
    stringBuffer.append(TEXT_273);
d1064 1
a1064 1
    stringBuffer.append(TEXT_274);
d1066 1
a1066 1
    stringBuffer.append(TEXT_275);
d1070 1
a1070 1
    stringBuffer.append(TEXT_276);
d1072 1
a1072 1
    stringBuffer.append(TEXT_277);
d1074 1
a1074 1
    stringBuffer.append(TEXT_278);
d1076 1
a1076 1
    stringBuffer.append(TEXT_279);
d1078 21
a1098 1
    stringBuffer.append(TEXT_280);
d1102 3
a1104 4
    stringBuffer.append(TEXT_281);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_282);
d1106 1
a1106 1
    stringBuffer.append(TEXT_283);
d1108 1
a1108 1
    stringBuffer.append(TEXT_284);
d1110 1
a1110 1
    stringBuffer.append(TEXT_285);
d1112 3
a1114 1
    stringBuffer.append(TEXT_286);
d1116 3
a1118 1
    stringBuffer.append(TEXT_287);
d1125 1
a1125 1
    stringBuffer.append(TEXT_288);
d1127 1
a1127 1
    stringBuffer.append(TEXT_289);
@


1.10
log
@clean compilation warnings
@
text
@d54 87
a140 87
  protected final String TEXT_35 = "() {" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ";
  protected final String TEXT_36 = " request, final EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_37 = " emfCommand = new ";
  protected final String TEXT_38 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_39 = " moveDelta;" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_40 = " resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof Bounds == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_41 = " original = new ";
  protected final String TEXT_42 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_43 = " referenceFigure = ((";
  protected final String TEXT_44 = ")child).getFigure();" + NL + "\t\t\t\t\t\treferenceFigure.translateToAbsolute(original);" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_45 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(transformed);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_46 = " move, ";
  protected final String TEXT_47 = " resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_48 = "(";
  protected final String TEXT_49 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_50 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_51 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_52 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_53 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_54 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_55 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_56 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_57 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_58 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_59 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_60 = " requestEx = (";
  protected final String TEXT_61 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_62 = " result = new ";
  protected final String TEXT_63 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_64 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_65 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_66 = "Command((View) getModel(), requestEx";
  protected final String TEXT_67 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_68 = ")getConstraintFor(request)";
  protected final String TEXT_69 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_70 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_71 = "(";
  protected final String TEXT_72 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_73 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_74 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_75 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_76 = " result = new ";
  protected final String TEXT_77 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_78 = "());" + NL + "\t\t";
  protected final String TEXT_79 = " scrollPane = new ";
  protected final String TEXT_80 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_81 = NL + "\t\t";
  protected final String TEXT_82 = " viewport = new ";
  protected final String TEXT_83 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_84 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_85 = "());";
  protected final String TEXT_86 = NL + "\t\t";
  protected final String TEXT_87 = " viewport = new ";
  protected final String TEXT_88 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_89 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_90 = "());";
  protected final String TEXT_91 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_92 = " resolveSemanticElement() {" + NL + "\t\tView view = getDiagramNode();" + NL + "\t\treturn (view.getElement() instanceof ";
  protected final String TEXT_93 = ") ? (";
  protected final String TEXT_94 = ") view.getElement() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_95 = NL;
  protected final String TEXT_96 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_97 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_98 = " domainModelEditDomain = ";
  protected final String TEXT_99 = ".getEditingDomain(";
  protected final String TEXT_100 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_101 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_102 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_103 = " {";
  protected final String TEXT_104 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_105 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_106 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_107 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_108 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_109 = " createFilter() {";
  protected final String TEXT_110 = NL + "\t\t\t";
  protected final String TEXT_111 = " filter = ";
  protected final String TEXT_112 = ".createFeatureFilter(";
  protected final String TEXT_113 = ".eINSTANCE.get";
  protected final String TEXT_114 = "());";
  protected final String TEXT_115 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_116 = ".createFeatureFilter(";
  protected final String TEXT_117 = ".eINSTANCE.get";
  protected final String TEXT_118 = "()));";
  protected final String TEXT_119 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_120 = ".createNotifierFilter(";
  protected final String TEXT_121 = ".getElement()));";
d143 78
a220 78
  protected final String TEXT_124 = ".createNotifierFilter(";
  protected final String TEXT_125 = ".getElement());";
  protected final String TEXT_126 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_127 = NL + "\t\t\t";
  protected final String TEXT_128 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_129 = NL + "\t\t\t";
  protected final String TEXT_130 = " filter = ";
  protected final String TEXT_131 = ".NOT_TOUCH;";
  protected final String TEXT_132 = NL + "\t\t\treturn filter;";
  protected final String TEXT_133 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_134 = " getCreateNotationalElementCommand(";
  protected final String TEXT_135 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_136 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_137 = NL + "\t\t\tcase ";
  protected final String TEXT_138 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_139 = ") {" + NL + "\t\t\t\t\treturn new Create";
  protected final String TEXT_140 = "NotationCommand(getHost(), domainElement";
  protected final String TEXT_141 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_142 = ");" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_143 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_144 = " getSemanticChildNodes() {";
  protected final String TEXT_145 = NL;
  protected final String TEXT_146 = NL + "\treturn ";
  protected final String TEXT_147 = ".EMPTY_LIST;";
  protected final String TEXT_148 = NL + "\t";
  protected final String TEXT_149 = " result = new ";
  protected final String TEXT_150 = "();";
  protected final String TEXT_151 = NL + "\t";
  protected final String TEXT_152 = " viewObject = ";
  protected final String TEXT_153 = ";" + NL + "\t";
  protected final String TEXT_154 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_155 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_156 = NL + "\tfor(";
  protected final String TEXT_157 = " it = ";
  protected final String TEXT_158 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_159 = ") it.next();";
  protected final String TEXT_160 = NL + "\tnextValue = (";
  protected final String TEXT_161 = ")";
  protected final String TEXT_162 = ";";
  protected final String TEXT_163 = NL + "\tnodeVID = ";
  protected final String TEXT_164 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_165 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_166 = NL + "\tcase ";
  protected final String TEXT_167 = ".VISUAL_ID: {";
  protected final String TEXT_168 = NL + "\tif (";
  protected final String TEXT_169 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_170 = NL + "\t\tresult.add(new ";
  protected final String TEXT_171 = "(nextValue, nodeVID));";
  protected final String TEXT_172 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_173 = NL + "\t\t}";
  protected final String TEXT_174 = NL + "\t}";
  protected final String TEXT_175 = NL + "\t}";
  protected final String TEXT_176 = NL + "\treturn result;";
  protected final String TEXT_177 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_178 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_179 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_180 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_181 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_182 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_183 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_184 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_185 = " domainModelEditDomain = ";
  protected final String TEXT_186 = ".getEditingDomain(";
  protected final String TEXT_187 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_188 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_189 = NL;
  protected final String TEXT_190 = NL;
  protected final String TEXT_191 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_192 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_193 = " feature, ";
  protected final String TEXT_194 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_195 = NL;
  protected final String TEXT_196 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_197 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_198 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_199 = NL;
  protected final String TEXT_200 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_201 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
d223 86
a308 74
  protected final String TEXT_204 = "static ";
  protected final String TEXT_205 = "class Create";
  protected final String TEXT_206 = "NotationCommand extends ";
  protected final String TEXT_207 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_208 = "NotationCommand(";
  protected final String TEXT_209 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_210 = " domainElement";
  protected final String TEXT_211 = ", ";
  protected final String TEXT_212 = " constraint";
  protected final String TEXT_213 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_214 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_215 = ".decorateView(createdNode);";
  protected final String TEXT_216 = NL + "\t\t\t";
  protected final String TEXT_217 = " bounds = ";
  protected final String TEXT_218 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_219 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_220 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_221 = "));";
  protected final String TEXT_222 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_223 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_224 = "static ";
  protected final String TEXT_225 = "class Create";
  protected final String TEXT_226 = "Command extends ";
  protected final String TEXT_227 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_228 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_229 = "Command(";
  protected final String TEXT_230 = " parent, ";
  protected final String TEXT_231 = " request";
  protected final String TEXT_232 = ", ";
  protected final String TEXT_233 = " constraint";
  protected final String TEXT_234 = ") {" + NL + "\t\t\t";
  protected final String TEXT_235 = " domainModelEditDomain = ";
  protected final String TEXT_236 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_237 = NL + "\t\t\t";
  protected final String TEXT_238 = " createdDomainElement = ";
  protected final String TEXT_239 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_240 = ".eINSTANCE.get";
  protected final String TEXT_241 = "());";
  protected final String TEXT_242 = NL + "\t\t\t";
  protected final String TEXT_243 = " createdDomainElement = ";
  protected final String TEXT_244 = ".eINSTANCE.create";
  protected final String TEXT_245 = "();";
  protected final String TEXT_246 = NL + "\t\t\t";
  protected final String TEXT_247 = NL + "\t\t\t";
  protected final String TEXT_248 = ".";
  protected final String TEXT_249 = ".initializeElement(";
  protected final String TEXT_250 = "(";
  protected final String TEXT_251 = ") ";
  protected final String TEXT_252 = "createdDomainElement);";
  protected final String TEXT_253 = NL + "\t\t\t";
  protected final String TEXT_254 = " compoundCommand = new ";
  protected final String TEXT_255 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_256 = ".create(domainModelEditDomain, ";
  protected final String TEXT_257 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_258 = ".eINSTANCE.get";
  protected final String TEXT_259 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_260 = ".create(domainModelEditDomain, ";
  protected final String TEXT_261 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_262 = ".eINSTANCE.get";
  protected final String TEXT_263 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_264 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_265 = ".create(domainModelEditDomain, ";
  protected final String TEXT_266 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_267 = ".eINSTANCE.get";
  protected final String TEXT_268 = "(), createdDomainElement);";
  protected final String TEXT_269 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_270 = "NotationCommand(parent, ";
  protected final String TEXT_271 = "(";
  protected final String TEXT_272 = ") ";
  protected final String TEXT_273 = "createdDomainElement";
  protected final String TEXT_274 = ", constraint";
  protected final String TEXT_275 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_276 = NL + "}" + NL;
  protected final String TEXT_277 = NL;
d443 2
a445 2
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d447 1
a447 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
a448 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
a449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d455 1
a455 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d457 1
a457 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d459 1
a459 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d463 1
a463 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d465 1
a465 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d469 1
a469 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d471 1
a471 1
    } else {
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy"));
d481 24
d506 1
a506 1
    stringBuffer.append(TEXT_56);
d508 1
a508 1
    stringBuffer.append(TEXT_57);
d510 1
a510 1
    stringBuffer.append(TEXT_58);
d512 1
a512 1
    stringBuffer.append(TEXT_59);
d514 1
a514 1
    stringBuffer.append(TEXT_60);
d516 1
a516 1
    stringBuffer.append(TEXT_61);
d518 1
a518 1
    stringBuffer.append(TEXT_62);
d520 1
a520 1
    stringBuffer.append(TEXT_63);
d525 1
a525 1
    stringBuffer.append(TEXT_64);
d527 1
a527 1
    stringBuffer.append(TEXT_65);
d530 1
a530 1
    stringBuffer.append(TEXT_66);
d532 1
a532 1
    stringBuffer.append(TEXT_67);
d534 1
a534 1
    stringBuffer.append(TEXT_68);
d536 1
a536 1
    stringBuffer.append(TEXT_69);
d540 1
a540 1
    stringBuffer.append(TEXT_70);
d542 1
a542 1
    stringBuffer.append(TEXT_71);
d544 1
a544 1
    stringBuffer.append(TEXT_72);
d546 1
a546 1
    stringBuffer.append(TEXT_73);
d548 1
a548 1
    stringBuffer.append(TEXT_74);
d550 1
a550 1
    stringBuffer.append(TEXT_75);
d552 1
a552 1
    stringBuffer.append(TEXT_76);
d554 1
a554 1
    stringBuffer.append(TEXT_77);
d556 1
a556 1
    stringBuffer.append(TEXT_78);
d558 1
a558 1
    stringBuffer.append(TEXT_79);
d560 1
a560 1
    stringBuffer.append(TEXT_80);
d562 1
a562 1
    stringBuffer.append(TEXT_81);
d564 1
a564 1
    stringBuffer.append(TEXT_82);
d566 1
a566 1
    stringBuffer.append(TEXT_83);
d568 1
a568 1
    stringBuffer.append(TEXT_84);
d570 1
a570 1
    stringBuffer.append(TEXT_85);
d572 1
a572 1
    stringBuffer.append(TEXT_86);
d574 1
a574 1
    stringBuffer.append(TEXT_87);
d576 1
a576 1
    stringBuffer.append(TEXT_88);
d578 1
a578 1
    stringBuffer.append(TEXT_89);
d580 1
a580 1
    stringBuffer.append(TEXT_90);
d582 1
a582 1
    stringBuffer.append(TEXT_91);
d584 1
a584 1
    stringBuffer.append(TEXT_92);
d586 1
a586 1
    stringBuffer.append(TEXT_93);
d588 1
a588 1
    stringBuffer.append(TEXT_94);
d595 2
a596 2
    stringBuffer.append(TEXT_95);
    stringBuffer.append(TEXT_96);
d598 1
a598 1
    stringBuffer.append(TEXT_97);
d600 1
a600 1
    stringBuffer.append(TEXT_98);
d602 1
a602 1
    stringBuffer.append(TEXT_99);
d604 1
a604 1
    stringBuffer.append(TEXT_100);
d606 1
a606 1
    stringBuffer.append(TEXT_101);
d608 1
a608 1
    stringBuffer.append(TEXT_102);
d610 1
a610 1
    stringBuffer.append(TEXT_103);
d625 1
a625 1
    stringBuffer.append(TEXT_104);
d627 1
a627 1
    stringBuffer.append(TEXT_105);
d629 1
a629 1
    stringBuffer.append(TEXT_106);
d631 1
a631 1
    stringBuffer.append(TEXT_107);
d635 1
a635 1
    stringBuffer.append(TEXT_108);
d637 1
a637 1
    stringBuffer.append(TEXT_109);
d656 1
a656 1
    stringBuffer.append(TEXT_110);
d658 1
a658 1
    stringBuffer.append(TEXT_111);
d660 1
a660 1
    stringBuffer.append(TEXT_112);
d662 1
a662 1
    stringBuffer.append(TEXT_113);
d664 1
a664 1
    stringBuffer.append(TEXT_114);
d668 1
a668 1
    stringBuffer.append(TEXT_115);
d670 1
a670 1
    stringBuffer.append(TEXT_116);
d672 1
a672 1
    stringBuffer.append(TEXT_117);
d674 1
a674 1
    stringBuffer.append(TEXT_118);
d682 1
a682 1
    stringBuffer.append(TEXT_119);
d684 1
a684 1
    stringBuffer.append(TEXT_120);
d686 1
a686 1
    stringBuffer.append(TEXT_121);
d691 1
a691 1
    stringBuffer.append(TEXT_122);
d693 1
a693 1
    stringBuffer.append(TEXT_123);
d695 1
a695 1
    stringBuffer.append(TEXT_124);
d697 1
a697 1
    stringBuffer.append(TEXT_125);
d706 1
a706 1
    stringBuffer.append(TEXT_126);
d710 1
a710 1
    stringBuffer.append(TEXT_127);
d712 1
a712 1
    stringBuffer.append(TEXT_128);
d718 1
a718 1
    stringBuffer.append(TEXT_129);
d720 1
a720 1
    stringBuffer.append(TEXT_130);
d722 1
a722 1
    stringBuffer.append(TEXT_131);
d726 1
a726 1
    stringBuffer.append(TEXT_132);
d730 1
a730 1
    stringBuffer.append(TEXT_133);
d732 1
a732 1
    stringBuffer.append(TEXT_134);
d734 1
a734 1
    stringBuffer.append(TEXT_135);
d736 1
a736 1
    stringBuffer.append(TEXT_136);
d746 1
a746 1
    stringBuffer.append(TEXT_137);
d748 1
a748 1
    stringBuffer.append(TEXT_138);
d750 1
a750 1
    stringBuffer.append(TEXT_139);
d753 1
a753 1
    stringBuffer.append(TEXT_140);
d755 1
a755 1
    stringBuffer.append(TEXT_141);
d757 1
a757 1
    stringBuffer.append(TEXT_142);
d761 1
a761 1
    stringBuffer.append(TEXT_143);
d763 2
a764 2
    stringBuffer.append(TEXT_144);
    stringBuffer.append(TEXT_145);
d768 1
a768 1
    stringBuffer.append(TEXT_146);
d770 1
a770 1
    stringBuffer.append(TEXT_147);
d774 1
a774 1
    stringBuffer.append(TEXT_148);
d776 1
a776 1
    stringBuffer.append(TEXT_149);
d778 1
a778 1
    stringBuffer.append(TEXT_150);
d796 1
a796 1
    stringBuffer.append(TEXT_151);
d798 1
a798 1
    stringBuffer.append(TEXT_152);
d800 1
a800 1
    stringBuffer.append(TEXT_153);
d802 1
a802 1
    stringBuffer.append(TEXT_154);
d804 1
a804 1
    stringBuffer.append(TEXT_155);
d813 1
a813 1
    stringBuffer.append(TEXT_156);
d815 1
a815 1
    stringBuffer.append(TEXT_157);
d817 1
a817 1
    stringBuffer.append(TEXT_158);
d819 1
a819 1
    stringBuffer.append(TEXT_159);
d823 1
a823 1
    stringBuffer.append(TEXT_160);
d825 1
a825 1
    stringBuffer.append(TEXT_161);
d827 1
a827 1
    stringBuffer.append(TEXT_162);
d831 1
a831 1
    stringBuffer.append(TEXT_163);
d833 1
a833 1
    stringBuffer.append(TEXT_164);
d838 1
a838 1
    stringBuffer.append(TEXT_165);
d845 1
a845 1
    stringBuffer.append(TEXT_166);
d847 1
a847 1
    stringBuffer.append(TEXT_167);
d851 1
a851 1
    stringBuffer.append(TEXT_168);
d853 1
a853 1
    stringBuffer.append(TEXT_169);
d857 1
a857 1
    stringBuffer.append(TEXT_170);
d859 1
a859 1
    stringBuffer.append(TEXT_171);
d863 1
a863 1
    stringBuffer.append(TEXT_172);
d867 1
a867 1
    stringBuffer.append(TEXT_173);
d873 1
a873 1
    stringBuffer.append(TEXT_174);
d878 1
a878 1
    stringBuffer.append(TEXT_175);
d883 1
a883 1
    stringBuffer.append(TEXT_176);
d887 1
a887 1
    stringBuffer.append(TEXT_177);
d889 1
a889 1
    stringBuffer.append(TEXT_178);
d891 1
a891 1
    stringBuffer.append(TEXT_179);
d893 1
a893 1
    stringBuffer.append(TEXT_180);
d895 1
a895 1
    stringBuffer.append(TEXT_181);
d897 1
a897 1
    stringBuffer.append(TEXT_182);
d899 1
a899 1
    stringBuffer.append(TEXT_183);
d901 1
a901 1
    stringBuffer.append(TEXT_184);
d903 1
a903 1
    stringBuffer.append(TEXT_185);
d905 1
a905 1
    stringBuffer.append(TEXT_186);
d907 1
a907 1
    stringBuffer.append(TEXT_187);
d909 1
a909 1
    stringBuffer.append(TEXT_188);
d913 3
a915 3
    stringBuffer.append(TEXT_189);
    stringBuffer.append(TEXT_190);
    stringBuffer.append(TEXT_191);
d917 1
a917 1
    stringBuffer.append(TEXT_192);
d919 1
a919 1
    stringBuffer.append(TEXT_193);
d921 3
a923 3
    stringBuffer.append(TEXT_194);
    stringBuffer.append(TEXT_195);
    stringBuffer.append(TEXT_196);
d925 1
a925 1
    stringBuffer.append(TEXT_197);
d927 3
a929 3
    stringBuffer.append(TEXT_198);
    stringBuffer.append(TEXT_199);
    stringBuffer.append(TEXT_200);
d931 1
a931 1
    stringBuffer.append(TEXT_201);
d939 2
a940 2
    stringBuffer.append(TEXT_202);
    stringBuffer.append(TEXT_203);
d942 1
a942 1
    stringBuffer.append(TEXT_204);
d944 1
a944 1
    stringBuffer.append(TEXT_205);
d947 1
a947 1
    stringBuffer.append(TEXT_206);
d949 1
a949 1
    stringBuffer.append(TEXT_207);
d952 1
a952 1
    stringBuffer.append(TEXT_208);
d954 1
a954 1
    stringBuffer.append(TEXT_209);
d956 1
a956 1
    stringBuffer.append(TEXT_210);
d958 1
a958 1
    stringBuffer.append(TEXT_211);
d960 1
a960 1
    stringBuffer.append(TEXT_212);
d962 1
a962 1
    stringBuffer.append(TEXT_213);
d964 1
a964 1
    stringBuffer.append(TEXT_214);
d966 1
a966 1
    stringBuffer.append(TEXT_215);
d970 1
a970 1
    stringBuffer.append(TEXT_216);
d972 1
a972 1
    stringBuffer.append(TEXT_217);
d974 1
a974 1
    stringBuffer.append(TEXT_218);
d984 1
a984 1
    stringBuffer.append(TEXT_219);
d986 1
a986 1
    stringBuffer.append(TEXT_220);
d988 1
a988 1
    stringBuffer.append(TEXT_221);
d992 1
a992 1
    stringBuffer.append(TEXT_222);
d996 1
a996 1
    stringBuffer.append(TEXT_223);
d998 1
a998 1
    stringBuffer.append(TEXT_224);
d1000 1
a1000 1
    stringBuffer.append(TEXT_225);
d1003 1
a1003 1
    stringBuffer.append(TEXT_226);
d1005 1
a1005 1
    stringBuffer.append(TEXT_227);
d1008 1
a1008 1
    stringBuffer.append(TEXT_228);
d1011 1
a1011 1
    stringBuffer.append(TEXT_229);
d1013 1
a1013 1
    stringBuffer.append(TEXT_230);
d1015 1
a1015 1
    stringBuffer.append(TEXT_231);
d1017 1
a1017 1
    stringBuffer.append(TEXT_232);
d1019 1
a1019 1
    stringBuffer.append(TEXT_233);
d1021 1
a1021 1
    stringBuffer.append(TEXT_234);
d1023 1
a1023 1
    stringBuffer.append(TEXT_235);
d1025 1
a1025 1
    stringBuffer.append(TEXT_236);
d1030 1
a1030 1
    stringBuffer.append(TEXT_237);
d1032 1
a1032 1
    stringBuffer.append(TEXT_238);
d1034 1
a1034 1
    stringBuffer.append(TEXT_239);
d1036 1
a1036 1
    stringBuffer.append(TEXT_240);
d1038 1
a1038 1
    stringBuffer.append(TEXT_241);
d1042 1
a1042 1
    stringBuffer.append(TEXT_242);
d1044 1
a1044 1
    stringBuffer.append(TEXT_243);
d1046 1
a1046 1
    stringBuffer.append(TEXT_244);
d1048 1
a1048 1
    stringBuffer.append(TEXT_245);
d1052 1
a1052 1
    stringBuffer.append(TEXT_246);
d1054 1
a1054 1
    stringBuffer.append(TEXT_247);
d1056 1
a1056 1
    stringBuffer.append(TEXT_248);
d1058 1
a1058 1
    stringBuffer.append(TEXT_249);
d1060 1
a1060 1
    stringBuffer.append(TEXT_250);
d1062 1
a1062 1
    stringBuffer.append(TEXT_251);
d1064 1
a1064 1
    stringBuffer.append(TEXT_252);
d1071 1
a1071 1
    stringBuffer.append(TEXT_253);
d1073 1
a1073 1
    stringBuffer.append(TEXT_254);
d1075 1
a1075 1
    stringBuffer.append(TEXT_255);
d1077 1
a1077 1
    stringBuffer.append(TEXT_256);
d1079 1
a1079 1
    stringBuffer.append(TEXT_257);
d1081 1
a1081 1
    stringBuffer.append(TEXT_258);
d1083 1
a1083 1
    stringBuffer.append(TEXT_259);
d1085 1
a1085 1
    stringBuffer.append(TEXT_260);
d1087 1
a1087 1
    stringBuffer.append(TEXT_261);
d1089 1
a1089 1
    stringBuffer.append(TEXT_262);
d1091 1
a1091 1
    stringBuffer.append(TEXT_263);
d1095 1
a1095 1
    stringBuffer.append(TEXT_264);
d1097 1
a1097 1
    stringBuffer.append(TEXT_265);
d1099 1
a1099 1
    stringBuffer.append(TEXT_266);
d1101 1
a1101 1
    stringBuffer.append(TEXT_267);
d1103 1
a1103 1
    stringBuffer.append(TEXT_268);
d1107 1
a1107 1
    stringBuffer.append(TEXT_269);
d1110 1
a1110 1
    stringBuffer.append(TEXT_270);
d1112 1
a1112 1
    stringBuffer.append(TEXT_271);
d1114 1
a1114 1
    stringBuffer.append(TEXT_272);
d1116 1
a1116 1
    stringBuffer.append(TEXT_273);
d1118 1
a1118 1
    stringBuffer.append(TEXT_274);
d1120 1
a1120 1
    stringBuffer.append(TEXT_275);
d1127 1
a1127 1
    stringBuffer.append(TEXT_276);
d1129 1
a1129 1
    stringBuffer.append(TEXT_277);
@


1.9
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@a475 1
final Palette palette = genDiagram.getPalette();
@


1.8
log
@[152859] bblajer - add missing @@generated tags
@
text
@d42 179
a220 179
  protected final String TEXT_23 = " implements IUpdatableEditPart {";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_28 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_29 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_30 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_31 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_32 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_33 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_34 = "() {" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ";
  protected final String TEXT_35 = " request, final EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_36 = " emfCommand = new ";
  protected final String TEXT_37 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_38 = " moveDelta;" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_39 = " resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof Bounds == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_40 = " original = new ";
  protected final String TEXT_41 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_42 = " referenceFigure = ((";
  protected final String TEXT_43 = ")child).getFigure();" + NL + "\t\t\t\t\t\treferenceFigure.translateToAbsolute(original);" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_44 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(transformed);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_45 = " move, ";
  protected final String TEXT_46 = " resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_47 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_48 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_49 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_50 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_51 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_52 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_53 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_54 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_55 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_56 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_57 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_58 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_59 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_60 = " result = new ";
  protected final String TEXT_61 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_62 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_63 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_64 = "Command((View) getModel(), requestEx";
  protected final String TEXT_65 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_66 = ")getConstraintFor(request)";
  protected final String TEXT_67 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_68 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_69 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_70 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_71 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_72 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_73 = " result = new ";
  protected final String TEXT_74 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_75 = "());" + NL + "\t\t";
  protected final String TEXT_76 = " scrollPane = new ";
  protected final String TEXT_77 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_78 = NL + "\t\t";
  protected final String TEXT_79 = " viewport = new ";
  protected final String TEXT_80 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_81 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_82 = "());";
  protected final String TEXT_83 = NL + "\t\t";
  protected final String TEXT_84 = " viewport = new ";
  protected final String TEXT_85 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_86 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_87 = "());";
  protected final String TEXT_88 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_89 = " resolveSemanticElement() {" + NL + "\t\tView view = getDiagramNode();" + NL + "\t\treturn (view.getElement() instanceof ";
  protected final String TEXT_90 = ") ? (";
  protected final String TEXT_91 = ") view.getElement() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_92 = NL;
  protected final String TEXT_93 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\tNotationModelRefresher refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_94 = " domainModelEditDomain = ";
  protected final String TEXT_95 = ".getEditingDomain(";
  protected final String TEXT_96 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_97 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_98 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_99 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic NotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_100 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_101 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_102 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_103 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_104 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_105 = NL + "\t\t\tfilter = ";
  protected final String TEXT_106 = ".createFeatureFilter(";
  protected final String TEXT_107 = ".eINSTANCE.get";
  protected final String TEXT_108 = "());";
  protected final String TEXT_109 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_110 = ".createFeatureFilter(";
  protected final String TEXT_111 = ".eINSTANCE.get";
  protected final String TEXT_112 = "()));";
  protected final String TEXT_113 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_114 = ".createNotifierFilter(";
  protected final String TEXT_115 = ".getElement()));";
  protected final String TEXT_116 = NL + "\t\t\tfilter = ";
  protected final String TEXT_117 = ".createNotifierFilter(";
  protected final String TEXT_118 = ".getElement());";
  protected final String TEXT_119 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_120 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_121 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_122 = " transactionAboutToCommit(";
  protected final String TEXT_123 = " event) {" + NL + "\t\t\treturn getRefreshNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_124 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_125 = " command = getRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_126 = " domainModelEditDomain = ";
  protected final String TEXT_127 = ".getEditingDomain(";
  protected final String TEXT_128 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_129 = " getRefreshNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_130 = " semanticChildren = getSemanticChildren();" + NL + "\t\t";
  protected final String TEXT_131 = " notationalChildren = ";
  protected final String TEXT_132 = ".getChildren();" + NL + "\t\tfinal ";
  protected final String TEXT_133 = " semanticToNotational = new ";
  protected final String TEXT_134 = "();" + NL + "\t\tfor(";
  protected final String TEXT_135 = " it = notationalChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_136 = " next = (";
  protected final String TEXT_137 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_138 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotational.put(nextSemantic, next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_139 = " parentView = ";
  protected final String TEXT_140 = ";" + NL + "\t\t";
  protected final String TEXT_141 = " command = new ";
  protected final String TEXT_142 = "();" + NL + "\t\tfor(";
  protected final String TEXT_143 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_144 = " next = (";
  protected final String TEXT_145 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_146 = " currentView = (";
  protected final String TEXT_147 = ") semanticToNotational.remove(next);" + NL + "\t\t\tint nodeVisualID = ";
  protected final String TEXT_148 = ".INSTANCE.getNodeVisualID(parentView, next);" + NL + "\t\t\tif (currentView == null) {" + NL + "\t\t\t\tif (shouldCreateView(next)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalElementCommand(parentView, next, nodeVisualID));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else if (nodeVisualID != ";
  protected final String TEXT_149 = ".getVisualID(currentView)) {" + NL + "\t\t\t\t";
  protected final String TEXT_150 = " notationalCommand = getCreateNotationalElementCommand(parentView, next, nodeVisualID);" + NL + "\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_151 = "(parentView, notationalCommand, currentView));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_152 = " it = semanticToNotational.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_153 = " obsoleteView = (";
  protected final String TEXT_154 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_155 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_156 = " getCreateNotationalElementCommand(";
  protected final String TEXT_157 = " parentView, ";
  protected final String TEXT_158 = " domainElement, int nodeVisualID) {" + NL + "\t\tswitch (nodeVisualID) {";
  protected final String TEXT_159 = NL + "\t\tcase ";
  protected final String TEXT_160 = ".VISUAL_ID:" + NL + "\t\t\tif (domainElement instanceof ";
  protected final String TEXT_161 = ") {" + NL + "\t\t\t\treturn new Create";
  protected final String TEXT_162 = "NotationCommand(parentView, domainElement";
  protected final String TEXT_163 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_164 = ");" + NL + "\t\t\t}" + NL + "\t\t\treturn null;";
  protected final String TEXT_165 = NL + "\t\tdefault:" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_166 = " getSemanticChildren() {";
  protected final String TEXT_167 = NL;
  protected final String TEXT_168 = NL + "\treturn ";
  protected final String TEXT_169 = ".EMPTY_LIST;";
  protected final String TEXT_170 = NL + "\t";
  protected final String TEXT_171 = " result = new ";
  protected final String TEXT_172 = "();";
  protected final String TEXT_173 = NL + "\t";
  protected final String TEXT_174 = " viewObject = ";
  protected final String TEXT_175 = ";" + NL + "\t";
  protected final String TEXT_176 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_177 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_178 = NL + "\tfor(";
  protected final String TEXT_179 = " it = ";
  protected final String TEXT_180 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_181 = ") it.next();";
  protected final String TEXT_182 = NL + "\tnextValue = (";
  protected final String TEXT_183 = ")";
  protected final String TEXT_184 = ";";
  protected final String TEXT_185 = NL + "\tnodeVID = ";
  protected final String TEXT_186 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_187 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_188 = NL + "\tcase ";
  protected final String TEXT_189 = ".VISUAL_ID: {";
  protected final String TEXT_190 = NL + "\tif (";
  protected final String TEXT_191 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_192 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_193 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_194 = NL + "\t\t}";
  protected final String TEXT_195 = NL + "\t}";
  protected final String TEXT_196 = NL + "\t}";
  protected final String TEXT_197 = NL + "\treturn result;";
  protected final String TEXT_198 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_199 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateView(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_200 = ";" + NL + "\t}";
  protected final String TEXT_201 = NL;
d223 74
a296 86
  protected final String TEXT_204 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_205 = " feature, ";
  protected final String TEXT_206 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_207 = NL;
  protected final String TEXT_208 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_209 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_210 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_211 = NL;
  protected final String TEXT_212 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_213 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_216 = "static ";
  protected final String TEXT_217 = "class Create";
  protected final String TEXT_218 = "NotationCommand extends ";
  protected final String TEXT_219 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_220 = "NotationCommand(";
  protected final String TEXT_221 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_222 = " domainElement";
  protected final String TEXT_223 = ", ";
  protected final String TEXT_224 = " constraint";
  protected final String TEXT_225 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_226 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_227 = ".decorateView(createdNode);";
  protected final String TEXT_228 = NL + "\t\t\t";
  protected final String TEXT_229 = " bounds = ";
  protected final String TEXT_230 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_231 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_232 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_233 = "));";
  protected final String TEXT_234 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_235 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_236 = "static ";
  protected final String TEXT_237 = "class Create";
  protected final String TEXT_238 = "Command extends ";
  protected final String TEXT_239 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_240 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_241 = "Command(";
  protected final String TEXT_242 = " parent, ";
  protected final String TEXT_243 = ".CreateRequestEx request";
  protected final String TEXT_244 = ", ";
  protected final String TEXT_245 = " constraint";
  protected final String TEXT_246 = ") {" + NL + "\t\t\t";
  protected final String TEXT_247 = " domainModelEditDomain = ";
  protected final String TEXT_248 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_249 = NL + "\t\t\t";
  protected final String TEXT_250 = " createdDomainElement = ";
  protected final String TEXT_251 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_252 = ".eINSTANCE.get";
  protected final String TEXT_253 = "());";
  protected final String TEXT_254 = NL + "\t\t\t";
  protected final String TEXT_255 = " createdDomainElement = ";
  protected final String TEXT_256 = ".eINSTANCE.create";
  protected final String TEXT_257 = "();";
  protected final String TEXT_258 = NL + "\t\t\t";
  protected final String TEXT_259 = NL + "\t\t\t";
  protected final String TEXT_260 = ".";
  protected final String TEXT_261 = ".initializeElement(";
  protected final String TEXT_262 = "(";
  protected final String TEXT_263 = ") ";
  protected final String TEXT_264 = "createdDomainElement);";
  protected final String TEXT_265 = NL + "\t\t\t";
  protected final String TEXT_266 = " compoundCommand = new ";
  protected final String TEXT_267 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_268 = ".create(domainModelEditDomain, ";
  protected final String TEXT_269 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_270 = ".eINSTANCE.get";
  protected final String TEXT_271 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_272 = ".create(domainModelEditDomain, ";
  protected final String TEXT_273 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_274 = ".eINSTANCE.get";
  protected final String TEXT_275 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_276 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_277 = ".create(domainModelEditDomain, ";
  protected final String TEXT_278 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_279 = ".eINSTANCE.get";
  protected final String TEXT_280 = "(), createdDomainElement);";
  protected final String TEXT_281 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_282 = "NotationCommand(parent, ";
  protected final String TEXT_283 = "(";
  protected final String TEXT_284 = ") ";
  protected final String TEXT_285 = "createdDomainElement";
  protected final String TEXT_286 = ", constraint";
  protected final String TEXT_287 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_288 = NL + "}" + NL;
  protected final String TEXT_289 = NL;
d407 2
a410 1
    stringBuffer.append(TEXT_24);
d412 1
d414 1
a414 1
    stringBuffer.append(TEXT_26);
d416 1
a416 1
    stringBuffer.append(TEXT_27);
d418 1
a418 1
    stringBuffer.append(TEXT_28);
a419 2
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d423 2
d426 1
a426 1
    stringBuffer.append(TEXT_32);
d428 1
a428 1
    stringBuffer.append(TEXT_33);
d430 1
a430 1
    stringBuffer.append(TEXT_34);
d432 1
a432 1
    stringBuffer.append(TEXT_35);
d434 1
a434 1
    stringBuffer.append(TEXT_36);
d436 1
a436 1
    stringBuffer.append(TEXT_37);
d438 1
a438 1
    stringBuffer.append(TEXT_38);
a439 2
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d443 2
d446 1
a446 1
    stringBuffer.append(TEXT_42);
d448 1
a448 1
    stringBuffer.append(TEXT_43);
d450 1
a450 1
    stringBuffer.append(TEXT_44);
d452 1
a452 1
    stringBuffer.append(TEXT_45);
d454 3
a456 1
    stringBuffer.append(TEXT_46);
d458 1
a458 1
    stringBuffer.append(TEXT_47);
d460 1
a460 1
    stringBuffer.append(TEXT_48);
d462 1
a462 1
    stringBuffer.append(TEXT_49);
d464 1
a464 1
    stringBuffer.append(TEXT_50);
d466 1
a466 1
    stringBuffer.append(TEXT_51);
d468 1
a468 1
    stringBuffer.append(TEXT_52);
d470 1
a470 1
    stringBuffer.append(TEXT_53);
d472 1
a472 1
    stringBuffer.append(TEXT_54);
d474 1
a474 1
    stringBuffer.append(TEXT_55);
a476 4
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
d478 1
a478 1
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
d480 4
d485 1
a485 1
    stringBuffer.append(TEXT_60);
d487 1
a487 1
    stringBuffer.append(TEXT_61);
d492 1
a492 1
    stringBuffer.append(TEXT_62);
d494 1
a494 1
    stringBuffer.append(TEXT_63);
d497 1
a497 1
    stringBuffer.append(TEXT_64);
d499 1
a499 1
    stringBuffer.append(TEXT_65);
d501 1
a501 1
    stringBuffer.append(TEXT_66);
d503 1
a503 1
    stringBuffer.append(TEXT_67);
d507 3
a509 1
    stringBuffer.append(TEXT_68);
d511 1
a511 1
    stringBuffer.append(TEXT_69);
d513 1
a513 1
    stringBuffer.append(TEXT_70);
d515 1
a515 1
    stringBuffer.append(TEXT_71);
d517 1
a517 1
    stringBuffer.append(TEXT_72);
d519 1
a519 1
    stringBuffer.append(TEXT_73);
d521 1
a521 1
    stringBuffer.append(TEXT_74);
d523 1
a523 1
    stringBuffer.append(TEXT_75);
d525 1
a525 1
    stringBuffer.append(TEXT_76);
d527 1
a527 1
    stringBuffer.append(TEXT_77);
d529 1
a529 1
    stringBuffer.append(TEXT_78);
d531 1
a531 1
    stringBuffer.append(TEXT_79);
d533 1
a533 1
    stringBuffer.append(TEXT_80);
d535 1
a535 1
    stringBuffer.append(TEXT_81);
d537 1
a537 1
    stringBuffer.append(TEXT_82);
d539 1
a539 1
    stringBuffer.append(TEXT_83);
d541 1
a541 1
    stringBuffer.append(TEXT_84);
d543 1
a543 1
    stringBuffer.append(TEXT_85);
d545 1
a545 1
    stringBuffer.append(TEXT_86);
d547 1
a547 1
    stringBuffer.append(TEXT_87);
d549 1
a549 1
    stringBuffer.append(TEXT_88);
d551 1
a551 1
    stringBuffer.append(TEXT_89);
d553 1
a553 1
    stringBuffer.append(TEXT_90);
d555 1
a555 1
    stringBuffer.append(TEXT_91);
a561 5
    stringBuffer.append(TEXT_92);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
a562 1
    stringBuffer.append(_getDiagramCode);
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetListenerImpl"));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d570 8
d592 1
a592 1
    stringBuffer.append(TEXT_100);
d594 1
a594 1
    stringBuffer.append(TEXT_101);
d596 1
a596 1
    stringBuffer.append(TEXT_102);
d598 1
a598 1
    stringBuffer.append(TEXT_103);
d602 3
a604 1
    stringBuffer.append(TEXT_104);
d623 3
a625 1
    stringBuffer.append(TEXT_105);
d627 1
a627 1
    stringBuffer.append(TEXT_106);
d629 1
a629 1
    stringBuffer.append(TEXT_107);
d631 1
a631 1
    stringBuffer.append(TEXT_108);
d635 1
a635 1
    stringBuffer.append(TEXT_109);
d637 1
a637 1
    stringBuffer.append(TEXT_110);
d639 1
a639 1
    stringBuffer.append(TEXT_111);
d641 1
a641 1
    stringBuffer.append(TEXT_112);
d649 1
a649 1
    stringBuffer.append(TEXT_113);
d651 1
a651 1
    stringBuffer.append(TEXT_114);
d653 1
a653 1
    stringBuffer.append(TEXT_115);
d656 1
d658 3
a660 1
    stringBuffer.append(TEXT_116);
d662 1
a662 1
    stringBuffer.append(TEXT_117);
d664 1
a664 1
    stringBuffer.append(TEXT_118);
a666 1
}	//local declaration of hasDeclaredFilter
d669 3
a671 1
if (hasConstraintsInChildren) {
d673 1
a673 1
    stringBuffer.append(TEXT_119);
d675 1
a675 1
}
d677 1
a677 7
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetChangeEvent"));
    stringBuffer.append(TEXT_123);
a678 8
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(_getDiagramCode);
d680 5
a684 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d686 1
a686 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d688 1
a688 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d690 3
a692 1
    stringBuffer.append(_getViewCode);
d694 3
a696 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d698 1
a698 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d700 1
a700 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d702 1
a702 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a703 44
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_139);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReplaceNotationalElementCommand"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalElementCommand"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_158);
d713 1
a713 1
    stringBuffer.append(TEXT_159);
d715 1
a715 1
    stringBuffer.append(TEXT_160);
d717 1
a717 1
    stringBuffer.append(TEXT_161);
d720 1
a720 1
    stringBuffer.append(TEXT_162);
d722 1
a722 1
    stringBuffer.append(TEXT_163);
d724 1
a724 1
    stringBuffer.append(TEXT_164);
d728 1
a728 1
    stringBuffer.append(TEXT_165);
d730 2
a731 2
    stringBuffer.append(TEXT_166);
    stringBuffer.append(TEXT_167);
d735 1
a735 1
    stringBuffer.append(TEXT_168);
d737 1
a737 1
    stringBuffer.append(TEXT_169);
d741 1
a741 1
    stringBuffer.append(TEXT_170);
d743 1
a743 1
    stringBuffer.append(TEXT_171);
d745 1
a745 1
    stringBuffer.append(TEXT_172);
d763 1
a763 1
    stringBuffer.append(TEXT_173);
d765 1
a765 1
    stringBuffer.append(TEXT_174);
d767 1
a767 1
    stringBuffer.append(TEXT_175);
d769 1
a769 1
    stringBuffer.append(TEXT_176);
d771 1
a771 1
    stringBuffer.append(TEXT_177);
d780 1
a780 1
    stringBuffer.append(TEXT_178);
d782 1
a782 1
    stringBuffer.append(TEXT_179);
d784 1
a784 1
    stringBuffer.append(TEXT_180);
d786 1
a786 1
    stringBuffer.append(TEXT_181);
d790 1
a790 1
    stringBuffer.append(TEXT_182);
d792 1
a792 1
    stringBuffer.append(TEXT_183);
d794 1
a794 1
    stringBuffer.append(TEXT_184);
d798 1
a798 1
    stringBuffer.append(TEXT_185);
d800 1
a800 1
    stringBuffer.append(TEXT_186);
d805 1
a805 1
    stringBuffer.append(TEXT_187);
d812 1
a812 1
    stringBuffer.append(TEXT_188);
d814 1
a814 1
    stringBuffer.append(TEXT_189);
d818 1
a818 1
    stringBuffer.append(TEXT_190);
d820 1
a820 1
    stringBuffer.append(TEXT_191);
d824 3
a826 1
    stringBuffer.append(TEXT_192);
d830 1
a830 1
    stringBuffer.append(TEXT_193);
d834 1
a834 1
    stringBuffer.append(TEXT_194);
d840 1
a840 1
    stringBuffer.append(TEXT_195);
d845 1
a845 1
    stringBuffer.append(TEXT_196);
d850 1
a850 1
    stringBuffer.append(TEXT_197);
d854 1
a854 1
    stringBuffer.append(TEXT_198);
d856 3
a858 1
    stringBuffer.append(TEXT_199);
d860 17
a876 1
    stringBuffer.append(TEXT_200);
d880 3
a882 3
    stringBuffer.append(TEXT_201);
    stringBuffer.append(TEXT_202);
    stringBuffer.append(TEXT_203);
d884 1
a884 1
    stringBuffer.append(TEXT_204);
d886 1
a886 1
    stringBuffer.append(TEXT_205);
d888 3
a890 3
    stringBuffer.append(TEXT_206);
    stringBuffer.append(TEXT_207);
    stringBuffer.append(TEXT_208);
d892 1
a892 1
    stringBuffer.append(TEXT_209);
d894 3
a896 3
    stringBuffer.append(TEXT_210);
    stringBuffer.append(TEXT_211);
    stringBuffer.append(TEXT_212);
d898 1
a898 1
    stringBuffer.append(TEXT_213);
d906 2
a907 2
    stringBuffer.append(TEXT_214);
    stringBuffer.append(TEXT_215);
d909 1
a909 1
    stringBuffer.append(TEXT_216);
d911 1
a911 1
    stringBuffer.append(TEXT_217);
d914 3
a916 3
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_219);
d919 1
a919 1
    stringBuffer.append(TEXT_220);
d921 1
a921 1
    stringBuffer.append(TEXT_221);
d923 1
a923 1
    stringBuffer.append(TEXT_222);
d925 1
a925 1
    stringBuffer.append(TEXT_223);
d927 1
a927 1
    stringBuffer.append(TEXT_224);
d929 1
a929 1
    stringBuffer.append(TEXT_225);
d931 1
a931 1
    stringBuffer.append(TEXT_226);
d933 1
a933 1
    stringBuffer.append(TEXT_227);
d937 1
a937 1
    stringBuffer.append(TEXT_228);
d939 1
a939 1
    stringBuffer.append(TEXT_229);
d941 1
a941 1
    stringBuffer.append(TEXT_230);
d951 1
a951 1
    stringBuffer.append(TEXT_231);
d953 1
a953 1
    stringBuffer.append(TEXT_232);
d955 1
a955 1
    stringBuffer.append(TEXT_233);
d959 1
a959 1
    stringBuffer.append(TEXT_234);
d963 1
a963 1
    stringBuffer.append(TEXT_235);
d965 1
a965 1
    stringBuffer.append(TEXT_236);
d967 1
a967 1
    stringBuffer.append(TEXT_237);
d970 1
a970 1
    stringBuffer.append(TEXT_238);
d972 1
a972 1
    stringBuffer.append(TEXT_239);
d975 1
a975 1
    stringBuffer.append(TEXT_240);
d978 1
a978 1
    stringBuffer.append(TEXT_241);
d980 3
a982 3
    stringBuffer.append(TEXT_242);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_243);
d984 1
a984 1
    stringBuffer.append(TEXT_244);
d986 1
a986 1
    stringBuffer.append(TEXT_245);
d988 1
a988 1
    stringBuffer.append(TEXT_246);
d990 1
a990 1
    stringBuffer.append(TEXT_247);
d992 1
a992 1
    stringBuffer.append(TEXT_248);
d997 1
a997 1
    stringBuffer.append(TEXT_249);
d999 1
a999 1
    stringBuffer.append(TEXT_250);
d1001 1
a1001 1
    stringBuffer.append(TEXT_251);
d1003 1
a1003 1
    stringBuffer.append(TEXT_252);
d1005 1
a1005 1
    stringBuffer.append(TEXT_253);
d1009 1
a1009 1
    stringBuffer.append(TEXT_254);
d1011 1
a1011 1
    stringBuffer.append(TEXT_255);
d1013 1
a1013 1
    stringBuffer.append(TEXT_256);
d1015 1
a1015 1
    stringBuffer.append(TEXT_257);
d1019 1
a1019 1
    stringBuffer.append(TEXT_258);
d1021 1
a1021 1
    stringBuffer.append(TEXT_259);
d1023 1
a1023 1
    stringBuffer.append(TEXT_260);
d1025 1
a1025 1
    stringBuffer.append(TEXT_261);
d1027 1
a1027 1
    stringBuffer.append(TEXT_262);
d1029 1
a1029 1
    stringBuffer.append(TEXT_263);
d1031 1
a1031 1
    stringBuffer.append(TEXT_264);
d1038 1
a1038 1
    stringBuffer.append(TEXT_265);
d1040 1
a1040 1
    stringBuffer.append(TEXT_266);
d1042 1
a1042 1
    stringBuffer.append(TEXT_267);
d1044 1
a1044 1
    stringBuffer.append(TEXT_268);
d1046 1
a1046 1
    stringBuffer.append(TEXT_269);
d1048 1
a1048 1
    stringBuffer.append(TEXT_270);
d1050 1
a1050 1
    stringBuffer.append(TEXT_271);
d1052 1
a1052 1
    stringBuffer.append(TEXT_272);
d1054 1
a1054 1
    stringBuffer.append(TEXT_273);
d1056 1
a1056 1
    stringBuffer.append(TEXT_274);
d1058 1
a1058 1
    stringBuffer.append(TEXT_275);
d1062 1
a1062 1
    stringBuffer.append(TEXT_276);
d1064 1
a1064 1
    stringBuffer.append(TEXT_277);
d1066 1
a1066 1
    stringBuffer.append(TEXT_278);
d1068 1
a1068 1
    stringBuffer.append(TEXT_279);
d1070 1
a1070 1
    stringBuffer.append(TEXT_280);
d1074 1
a1074 1
    stringBuffer.append(TEXT_281);
d1077 1
a1077 1
    stringBuffer.append(TEXT_282);
d1079 1
a1079 1
    stringBuffer.append(TEXT_283);
d1081 1
a1081 1
    stringBuffer.append(TEXT_284);
d1083 1
a1083 1
    stringBuffer.append(TEXT_285);
d1085 1
a1085 1
    stringBuffer.append(TEXT_286);
d1087 1
a1087 1
    stringBuffer.append(TEXT_287);
d1094 1
a1094 1
    stringBuffer.append(TEXT_288);
d1096 1
a1096 1
    stringBuffer.append(TEXT_289);
@


1.7
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d174 1
a174 1
  protected final String TEXT_155 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\tprivate ";
@


1.6
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d23 28
a50 28
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " implements IUpdatableEditPart {";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_9 = ";";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_11 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_12 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_13 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_14 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_15 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_16 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_17 = "() {" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ";
  protected final String TEXT_18 = " request, final EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_19 = " emfCommand = new ";
  protected final String TEXT_20 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_21 = " moveDelta;" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_22 = " resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof Bounds == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_23 = " original = new ";
  protected final String TEXT_24 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_25 = " referenceFigure = ((";
  protected final String TEXT_26 = ")child).getFigure();" + NL + "\t\t\t\t\t\treferenceFigure.translateToAbsolute(original);" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_27 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(transformed);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_28 = " move, ";
  protected final String TEXT_29 = " resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_30 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_31 = ".INSTANCE;" + NL + "\t\t\t}";
d53 218
a270 218
  protected final String TEXT_34 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_35 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_36 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_37 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_38 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_39 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_40 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_41 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_42 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_43 = " result = new ";
  protected final String TEXT_44 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_45 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_46 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_47 = "Command((View) getModel(), requestEx";
  protected final String TEXT_48 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_49 = ")getConstraintFor(request)";
  protected final String TEXT_50 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_51 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_52 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_54 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_55 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_56 = " result = new ";
  protected final String TEXT_57 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_58 = "());" + NL + "\t\t";
  protected final String TEXT_59 = " scrollPane = new ";
  protected final String TEXT_60 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_61 = NL + "\t\t";
  protected final String TEXT_62 = " viewport = new ";
  protected final String TEXT_63 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_64 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_65 = "());";
  protected final String TEXT_66 = NL + "\t\t";
  protected final String TEXT_67 = " viewport = new ";
  protected final String TEXT_68 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_69 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_70 = "());";
  protected final String TEXT_71 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_72 = " resolveSemanticElement() {" + NL + "\t\tView view = getDiagramNode();" + NL + "\t\treturn (view.getElement() instanceof ";
  protected final String TEXT_73 = ") ? (";
  protected final String TEXT_74 = ") view.getElement() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_75 = NL;
  protected final String TEXT_76 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\tNotationModelRefresher refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_77 = " domainModelEditDomain = ";
  protected final String TEXT_78 = ".getEditingDomain(";
  protected final String TEXT_79 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_80 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_81 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_82 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic NotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_83 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_84 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_85 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_86 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_87 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_88 = NL + "\t\t\tfilter = ";
  protected final String TEXT_89 = ".createFeatureFilter(";
  protected final String TEXT_90 = ".eINSTANCE.get";
  protected final String TEXT_91 = "());";
  protected final String TEXT_92 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_93 = ".createFeatureFilter(";
  protected final String TEXT_94 = ".eINSTANCE.get";
  protected final String TEXT_95 = "()));";
  protected final String TEXT_96 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_97 = ".createNotifierFilter(";
  protected final String TEXT_98 = "));";
  protected final String TEXT_99 = NL + "\t\t\tfilter = ";
  protected final String TEXT_100 = ".createNotifierFilter(";
  protected final String TEXT_101 = ");";
  protected final String TEXT_102 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_103 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_104 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_105 = " transactionAboutToCommit(";
  protected final String TEXT_106 = " event) {" + NL + "\t\t\treturn getRefreshNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_107 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_108 = " command = getRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_109 = " domainModelEditDomain = ";
  protected final String TEXT_110 = ".getEditingDomain(";
  protected final String TEXT_111 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_112 = " getRefreshNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_113 = " semanticChildren = getSemanticChildren();" + NL + "\t\t";
  protected final String TEXT_114 = " notationalChildren = ";
  protected final String TEXT_115 = ".getChildren();" + NL + "\t\tfinal ";
  protected final String TEXT_116 = " semanticToNotational = new ";
  protected final String TEXT_117 = "();" + NL + "\t\tfor(";
  protected final String TEXT_118 = " it = notationalChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_119 = " next = (";
  protected final String TEXT_120 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_121 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotational.put(nextSemantic, next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_122 = " parentView = ";
  protected final String TEXT_123 = ";" + NL + "\t\t";
  protected final String TEXT_124 = " command = new ";
  protected final String TEXT_125 = "();" + NL + "\t\tfor(";
  protected final String TEXT_126 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_127 = " next = (";
  protected final String TEXT_128 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_129 = " currentView = (";
  protected final String TEXT_130 = ") semanticToNotational.remove(next);" + NL + "\t\t\tint nodeVisualID = ";
  protected final String TEXT_131 = ".INSTANCE.getNodeVisualID(parentView, next);" + NL + "\t\t\tif (currentView == null) {" + NL + "\t\t\t\tif (shouldCreateView(next)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalElementCommand(parentView, next, nodeVisualID));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else if (nodeVisualID != ";
  protected final String TEXT_132 = ".getVisualID(currentView)) {" + NL + "\t\t\t\t";
  protected final String TEXT_133 = " notationalCommand = getCreateNotationalElementCommand(parentView, next, nodeVisualID);" + NL + "\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_134 = "(parentView, notationalCommand, currentView));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_135 = " it = semanticToNotational.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_136 = " obsoleteView = (";
  protected final String TEXT_137 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_138 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\tprivate ";
  protected final String TEXT_139 = " getCreateNotationalElementCommand(";
  protected final String TEXT_140 = " parentView, ";
  protected final String TEXT_141 = " domainElement, int nodeVisualID) {" + NL + "\t\tswitch (nodeVisualID) {";
  protected final String TEXT_142 = NL + "\t\tcase ";
  protected final String TEXT_143 = ".VISUAL_ID:" + NL + "\t\t\tif (domainElement instanceof ";
  protected final String TEXT_144 = ") {" + NL + "\t\t\t\treturn new Create";
  protected final String TEXT_145 = "NotationCommand(parentView, domainElement";
  protected final String TEXT_146 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_147 = ");" + NL + "\t\t\t}" + NL + "\t\t\treturn null;";
  protected final String TEXT_148 = NL + "\t\tdefault:" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_149 = " getSemanticChildren() {";
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = NL + "\treturn ";
  protected final String TEXT_152 = ".EMPTY_LIST;";
  protected final String TEXT_153 = NL + "\t";
  protected final String TEXT_154 = " result = new ";
  protected final String TEXT_155 = "();";
  protected final String TEXT_156 = NL + "\t";
  protected final String TEXT_157 = " viewObject = ";
  protected final String TEXT_158 = ";" + NL + "\t";
  protected final String TEXT_159 = " modelObject = ";
  protected final String TEXT_160 = ";" + NL + "\t";
  protected final String TEXT_161 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_162 = NL + "\tfor(";
  protected final String TEXT_163 = " it = ((";
  protected final String TEXT_164 = ")modelObject).";
  protected final String TEXT_165 = "().iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_166 = ") it.next();";
  protected final String TEXT_167 = NL + "\tnextValue = ((";
  protected final String TEXT_168 = ")modelObject).";
  protected final String TEXT_169 = "();";
  protected final String TEXT_170 = NL + "\tnodeVID = ";
  protected final String TEXT_171 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_172 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_173 = NL + "\tcase ";
  protected final String TEXT_174 = ".VISUAL_ID: {";
  protected final String TEXT_175 = NL + "\tif (";
  protected final String TEXT_176 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_177 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_178 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_179 = NL + "\t\t}";
  protected final String TEXT_180 = NL + "\t}";
  protected final String TEXT_181 = NL + "\t}";
  protected final String TEXT_182 = NL + "\treturn result;";
  protected final String TEXT_183 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_184 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateView(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_185 = ";" + NL + "\t}";
  protected final String TEXT_186 = NL;
  protected final String TEXT_187 = NL;
  protected final String TEXT_188 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_189 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_190 = " feature, ";
  protected final String TEXT_191 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_192 = NL;
  protected final String TEXT_193 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_194 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_195 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_196 = NL;
  protected final String TEXT_197 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_198 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_199 = NL;
  protected final String TEXT_200 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_201 = "static ";
  protected final String TEXT_202 = "class Create";
  protected final String TEXT_203 = "NotationCommand extends ";
  protected final String TEXT_204 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_205 = "NotationCommand(";
  protected final String TEXT_206 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_207 = " domainElement";
  protected final String TEXT_208 = ", ";
  protected final String TEXT_209 = " constraint";
  protected final String TEXT_210 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_211 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_212 = ".decorateView(createdNode);";
  protected final String TEXT_213 = NL + "\t\t\t";
  protected final String TEXT_214 = " bounds = ";
  protected final String TEXT_215 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_216 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_217 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_218 = "));";
  protected final String TEXT_219 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_220 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_221 = "static ";
  protected final String TEXT_222 = "class Create";
  protected final String TEXT_223 = "Command extends ";
  protected final String TEXT_224 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_225 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_226 = "Command(";
  protected final String TEXT_227 = " parent, ";
  protected final String TEXT_228 = ".CreateRequestEx request";
  protected final String TEXT_229 = ", ";
  protected final String TEXT_230 = " constraint";
  protected final String TEXT_231 = ") {" + NL + "\t\t\t";
  protected final String TEXT_232 = " domainModelEditDomain = ";
  protected final String TEXT_233 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_234 = NL + "\t\t\t";
  protected final String TEXT_235 = " createdDomainElement = ";
  protected final String TEXT_236 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_237 = ".eINSTANCE.get";
  protected final String TEXT_238 = "());";
  protected final String TEXT_239 = NL + "\t\t\t";
  protected final String TEXT_240 = " createdDomainElement = ";
  protected final String TEXT_241 = ".eINSTANCE.create";
  protected final String TEXT_242 = "();";
  protected final String TEXT_243 = NL + "\t\t\t";
  protected final String TEXT_244 = NL + "\t\t\t";
  protected final String TEXT_245 = ".";
  protected final String TEXT_246 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_247 = NL + "\t\t\t";
  protected final String TEXT_248 = " compoundCommand = new ";
  protected final String TEXT_249 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_250 = ".create(domainModelEditDomain, ";
  protected final String TEXT_251 = ", " + NL + "\t\t\t\t";
d272 37
a308 16
  protected final String TEXT_253 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_254 = ".create(domainModelEditDomain, ";
  protected final String TEXT_255 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_256 = ".eINSTANCE.get";
  protected final String TEXT_257 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_258 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_259 = ".create(domainModelEditDomain, ";
  protected final String TEXT_260 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_261 = ".eINSTANCE.get";
  protected final String TEXT_262 = "(), createdDomainElement);";
  protected final String TEXT_263 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_264 = "NotationCommand(parent, createdDomainElement";
  protected final String TEXT_265 = ", constraint";
  protected final String TEXT_266 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_267 = NL + "}" + NL;
  protected final String TEXT_268 = NL;
d330 75
d414 1
a414 1
    stringBuffer.append(TEXT_4);
d416 1
a416 1
    stringBuffer.append(TEXT_5);
d418 1
a418 1
    stringBuffer.append(TEXT_6);
d421 2
a422 2
    stringBuffer.append(TEXT_7);
    stringBuffer.append(TEXT_8);
d424 1
a424 1
    stringBuffer.append(TEXT_9);
d426 1
a426 1
    stringBuffer.append(TEXT_10);
d428 1
a428 1
    stringBuffer.append(TEXT_11);
d430 1
a430 1
    stringBuffer.append(TEXT_12);
d432 1
a432 1
    stringBuffer.append(TEXT_13);
d434 1
a434 1
    stringBuffer.append(TEXT_14);
d436 1
a436 1
    stringBuffer.append(TEXT_15);
d438 1
a438 1
    stringBuffer.append(TEXT_16);
d440 1
a440 1
    stringBuffer.append(TEXT_17);
d442 1
a442 1
    stringBuffer.append(TEXT_18);
d444 1
a444 1
    stringBuffer.append(TEXT_19);
d446 1
a446 1
    stringBuffer.append(TEXT_20);
d448 1
a448 1
    stringBuffer.append(TEXT_21);
d450 1
a450 1
    stringBuffer.append(TEXT_22);
d452 1
a452 1
    stringBuffer.append(TEXT_23);
d454 1
a454 1
    stringBuffer.append(TEXT_24);
d456 1
a456 1
    stringBuffer.append(TEXT_25);
d458 1
a458 1
    stringBuffer.append(TEXT_26);
d460 1
a460 1
    stringBuffer.append(TEXT_27);
d462 1
a462 1
    stringBuffer.append(TEXT_28);
d464 1
a464 1
    stringBuffer.append(TEXT_29);
d466 1
a466 1
    stringBuffer.append(TEXT_30);
d468 1
a468 1
    stringBuffer.append(TEXT_31);
d470 1
a470 1
    stringBuffer.append(TEXT_32);
d472 1
a472 1
    stringBuffer.append(TEXT_33);
d474 1
a474 1
    stringBuffer.append(TEXT_34);
d476 1
a476 1
    stringBuffer.append(TEXT_35);
d478 1
a478 1
    stringBuffer.append(TEXT_36);
d480 1
a480 1
    stringBuffer.append(TEXT_37);
d482 1
a482 1
    stringBuffer.append(TEXT_38);
d485 1
a485 1
    stringBuffer.append(TEXT_39);
d487 1
a487 1
    stringBuffer.append(TEXT_40);
d489 1
a489 1
    stringBuffer.append(TEXT_41);
d491 1
a491 1
    stringBuffer.append(TEXT_42);
d493 1
a493 1
    stringBuffer.append(TEXT_43);
d495 1
a495 1
    stringBuffer.append(TEXT_44);
d500 1
a500 1
    stringBuffer.append(TEXT_45);
d502 1
a502 1
    stringBuffer.append(TEXT_46);
d505 1
a505 1
    stringBuffer.append(TEXT_47);
d507 1
a507 1
    stringBuffer.append(TEXT_48);
d509 1
a509 1
    stringBuffer.append(TEXT_49);
d511 1
a511 1
    stringBuffer.append(TEXT_50);
d515 1
a515 1
    stringBuffer.append(TEXT_51);
d517 1
a517 1
    stringBuffer.append(TEXT_52);
d519 1
a519 1
    stringBuffer.append(TEXT_53);
d521 1
a521 1
    stringBuffer.append(TEXT_54);
d523 1
a523 1
    stringBuffer.append(TEXT_55);
d525 1
a525 1
    stringBuffer.append(TEXT_56);
d527 1
a527 1
    stringBuffer.append(TEXT_57);
d529 1
a529 1
    stringBuffer.append(TEXT_58);
d531 1
a531 1
    stringBuffer.append(TEXT_59);
d533 1
a533 1
    stringBuffer.append(TEXT_60);
d535 1
a535 1
    stringBuffer.append(TEXT_61);
d537 1
a537 1
    stringBuffer.append(TEXT_62);
d539 1
a539 1
    stringBuffer.append(TEXT_63);
d541 1
a541 1
    stringBuffer.append(TEXT_64);
d543 1
a543 1
    stringBuffer.append(TEXT_65);
d545 1
a545 1
    stringBuffer.append(TEXT_66);
d547 1
a547 1
    stringBuffer.append(TEXT_67);
d549 1
a549 1
    stringBuffer.append(TEXT_68);
d551 1
a551 1
    stringBuffer.append(TEXT_69);
d553 1
a553 1
    stringBuffer.append(TEXT_70);
d555 1
a555 1
    stringBuffer.append(TEXT_71);
d557 1
a557 1
    stringBuffer.append(TEXT_72);
d559 1
a559 1
    stringBuffer.append(TEXT_73);
d561 1
a561 1
    stringBuffer.append(TEXT_74);
a565 1
String _getSemanticElementCode = "resolveSemanticElement()";
d568 2
a569 2
    stringBuffer.append(TEXT_75);
    stringBuffer.append(TEXT_76);
d571 1
a571 1
    stringBuffer.append(TEXT_77);
d573 1
a573 1
    stringBuffer.append(TEXT_78);
d575 1
a575 1
    stringBuffer.append(TEXT_79);
d577 1
a577 1
    stringBuffer.append(TEXT_80);
d579 1
a579 1
    stringBuffer.append(TEXT_81);
d581 1
a581 1
    stringBuffer.append(TEXT_82);
d596 1
a596 1
    stringBuffer.append(TEXT_83);
d598 1
a598 1
    stringBuffer.append(TEXT_84);
d600 1
a600 1
    stringBuffer.append(TEXT_85);
d602 1
a602 1
    stringBuffer.append(TEXT_86);
d606 1
a606 1
    stringBuffer.append(TEXT_87);
d625 1
a625 1
    stringBuffer.append(TEXT_88);
d627 1
a627 1
    stringBuffer.append(TEXT_89);
d629 1
a629 1
    stringBuffer.append(TEXT_90);
d631 1
a631 1
    stringBuffer.append(TEXT_91);
d635 1
a635 1
    stringBuffer.append(TEXT_92);
d637 1
a637 1
    stringBuffer.append(TEXT_93);
d639 1
a639 1
    stringBuffer.append(TEXT_94);
d641 1
a641 1
    stringBuffer.append(TEXT_95);
d649 1
a649 1
    stringBuffer.append(TEXT_96);
d651 3
a653 3
    stringBuffer.append(TEXT_97);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_98);
d657 1
a657 1
    stringBuffer.append(TEXT_99);
d659 3
a661 3
    stringBuffer.append(TEXT_100);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_101);
d669 1
a669 1
    stringBuffer.append(TEXT_102);
d673 1
a673 1
    stringBuffer.append(TEXT_103);
d675 1
a675 1
    stringBuffer.append(TEXT_104);
d677 1
a677 1
    stringBuffer.append(TEXT_105);
d679 1
a679 1
    stringBuffer.append(TEXT_106);
d681 1
a681 1
    stringBuffer.append(TEXT_107);
d683 1
a683 1
    stringBuffer.append(TEXT_108);
d685 1
a685 1
    stringBuffer.append(TEXT_109);
d687 1
a687 1
    stringBuffer.append(TEXT_110);
d689 1
a689 1
    stringBuffer.append(TEXT_111);
d691 1
a691 1
    stringBuffer.append(TEXT_112);
d693 1
a693 1
    stringBuffer.append(TEXT_113);
d695 1
a695 1
    stringBuffer.append(TEXT_114);
d697 1
a697 1
    stringBuffer.append(TEXT_115);
d699 1
a699 1
    stringBuffer.append(TEXT_116);
d701 1
a701 1
    stringBuffer.append(TEXT_117);
d703 1
a703 1
    stringBuffer.append(TEXT_118);
d705 1
a705 1
    stringBuffer.append(TEXT_119);
d707 1
a707 1
    stringBuffer.append(TEXT_120);
d709 1
a709 1
    stringBuffer.append(TEXT_121);
d711 1
a711 1
    stringBuffer.append(TEXT_122);
d713 1
a713 1
    stringBuffer.append(TEXT_123);
d715 1
a715 1
    stringBuffer.append(TEXT_124);
d717 1
a717 1
    stringBuffer.append(TEXT_125);
d719 1
a719 1
    stringBuffer.append(TEXT_126);
d721 1
a721 1
    stringBuffer.append(TEXT_127);
d723 1
a723 1
    stringBuffer.append(TEXT_128);
d725 1
a725 1
    stringBuffer.append(TEXT_129);
d727 1
a727 1
    stringBuffer.append(TEXT_130);
d729 1
a729 1
    stringBuffer.append(TEXT_131);
d731 1
a731 1
    stringBuffer.append(TEXT_132);
d733 1
a733 1
    stringBuffer.append(TEXT_133);
d735 1
a735 1
    stringBuffer.append(TEXT_134);
d737 1
a737 1
    stringBuffer.append(TEXT_135);
d739 1
a739 1
    stringBuffer.append(TEXT_136);
d741 1
a741 1
    stringBuffer.append(TEXT_137);
d743 1
a743 1
    stringBuffer.append(TEXT_138);
d745 1
a745 1
    stringBuffer.append(TEXT_139);
d747 1
a747 1
    stringBuffer.append(TEXT_140);
d749 1
a749 1
    stringBuffer.append(TEXT_141);
d759 1
a759 1
    stringBuffer.append(TEXT_142);
d761 1
a761 1
    stringBuffer.append(TEXT_143);
d763 1
a763 1
    stringBuffer.append(TEXT_144);
d766 1
a766 1
    stringBuffer.append(TEXT_145);
d768 1
a768 1
    stringBuffer.append(TEXT_146);
d770 1
a770 1
    stringBuffer.append(TEXT_147);
d774 1
a774 1
    stringBuffer.append(TEXT_148);
d776 2
a777 2
    stringBuffer.append(TEXT_149);
    stringBuffer.append(TEXT_150);
d781 1
a781 1
    stringBuffer.append(TEXT_151);
d783 1
a783 1
    stringBuffer.append(TEXT_152);
d787 1
a787 1
    stringBuffer.append(TEXT_153);
d789 1
a789 1
    stringBuffer.append(TEXT_154);
d791 1
a791 1
    stringBuffer.append(TEXT_155);
d809 1
a809 1
    stringBuffer.append(TEXT_156);
d811 1
a811 1
    stringBuffer.append(TEXT_157);
d813 1
a813 1
    stringBuffer.append(TEXT_158);
d815 1
a815 3
    stringBuffer.append(TEXT_159);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_160);
d817 1
a817 1
    stringBuffer.append(TEXT_161);
d826 1
a826 1
    stringBuffer.append(TEXT_162);
d828 3
a830 5
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(childMetaFeature.getGetAccessor());
    stringBuffer.append(TEXT_165);
d832 1
a832 1
    stringBuffer.append(TEXT_166);
d836 5
a840 5
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_168);
    stringBuffer.append(childMetaFeature.getGetAccessor());
    stringBuffer.append(TEXT_169);
d844 1
a844 1
    stringBuffer.append(TEXT_170);
d846 1
a846 1
    stringBuffer.append(TEXT_171);
d851 1
a851 1
    stringBuffer.append(TEXT_172);
d858 1
a858 1
    stringBuffer.append(TEXT_173);
d860 1
a860 1
    stringBuffer.append(TEXT_174);
d864 1
a864 1
    stringBuffer.append(TEXT_175);
d866 1
a866 1
    stringBuffer.append(TEXT_176);
d870 1
a870 1
    stringBuffer.append(TEXT_177);
d874 1
a874 1
    stringBuffer.append(TEXT_178);
d878 1
a878 1
    stringBuffer.append(TEXT_179);
d884 1
a884 1
    stringBuffer.append(TEXT_180);
d889 1
a889 1
    stringBuffer.append(TEXT_181);
d894 1
a894 1
    stringBuffer.append(TEXT_182);
d898 1
a898 1
    stringBuffer.append(TEXT_183);
d900 1
a900 1
    stringBuffer.append(TEXT_184);
d902 1
a902 1
    stringBuffer.append(TEXT_185);
d906 3
a908 3
    stringBuffer.append(TEXT_186);
    stringBuffer.append(TEXT_187);
    stringBuffer.append(TEXT_188);
d910 1
a910 1
    stringBuffer.append(TEXT_189);
d912 1
a912 1
    stringBuffer.append(TEXT_190);
d914 3
a916 3
    stringBuffer.append(TEXT_191);
    stringBuffer.append(TEXT_192);
    stringBuffer.append(TEXT_193);
d918 1
a918 1
    stringBuffer.append(TEXT_194);
d920 3
a922 3
    stringBuffer.append(TEXT_195);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(TEXT_197);
d924 1
a924 1
    stringBuffer.append(TEXT_198);
d932 2
a933 2
    stringBuffer.append(TEXT_199);
    stringBuffer.append(TEXT_200);
d935 1
a935 1
    stringBuffer.append(TEXT_201);
d937 1
a937 1
    stringBuffer.append(TEXT_202);
d940 1
a940 1
    stringBuffer.append(TEXT_203);
d942 1
a942 1
    stringBuffer.append(TEXT_204);
d945 1
a945 1
    stringBuffer.append(TEXT_205);
d947 1
a947 1
    stringBuffer.append(TEXT_206);
d949 1
a949 1
    stringBuffer.append(TEXT_207);
d951 1
a951 1
    stringBuffer.append(TEXT_208);
d953 1
a953 1
    stringBuffer.append(TEXT_209);
d955 1
a955 1
    stringBuffer.append(TEXT_210);
d957 1
a957 1
    stringBuffer.append(TEXT_211);
d959 1
a959 1
    stringBuffer.append(TEXT_212);
d963 1
a963 1
    stringBuffer.append(TEXT_213);
d965 1
a965 1
    stringBuffer.append(TEXT_214);
d967 1
a967 1
    stringBuffer.append(TEXT_215);
d977 1
a977 1
    stringBuffer.append(TEXT_216);
d979 1
a979 1
    stringBuffer.append(TEXT_217);
d981 1
a981 1
    stringBuffer.append(TEXT_218);
d985 1
a985 1
    stringBuffer.append(TEXT_219);
d989 1
a989 1
    stringBuffer.append(TEXT_220);
d991 1
a991 1
    stringBuffer.append(TEXT_221);
d993 1
a993 1
    stringBuffer.append(TEXT_222);
d996 1
a996 1
    stringBuffer.append(TEXT_223);
d998 1
a998 1
    stringBuffer.append(TEXT_224);
d1001 1
a1001 1
    stringBuffer.append(TEXT_225);
d1004 1
a1004 1
    stringBuffer.append(TEXT_226);
d1006 1
a1006 1
    stringBuffer.append(TEXT_227);
d1008 1
a1008 1
    stringBuffer.append(TEXT_228);
d1010 1
a1010 1
    stringBuffer.append(TEXT_229);
d1012 1
a1012 1
    stringBuffer.append(TEXT_230);
d1014 1
a1014 1
    stringBuffer.append(TEXT_231);
d1016 1
a1016 1
    stringBuffer.append(TEXT_232);
d1018 1
a1018 1
    stringBuffer.append(TEXT_233);
d1023 1
a1023 1
    stringBuffer.append(TEXT_234);
d1025 1
a1025 1
    stringBuffer.append(TEXT_235);
d1027 1
a1027 1
    stringBuffer.append(TEXT_236);
d1029 1
a1029 1
    stringBuffer.append(TEXT_237);
d1031 1
a1031 1
    stringBuffer.append(TEXT_238);
d1035 1
a1035 1
    stringBuffer.append(TEXT_239);
d1037 1
a1037 1
    stringBuffer.append(TEXT_240);
d1039 1
a1039 1
    stringBuffer.append(TEXT_241);
d1041 1
a1041 1
    stringBuffer.append(TEXT_242);
d1045 1
a1045 1
    stringBuffer.append(TEXT_243);
d1047 1
a1047 1
    stringBuffer.append(TEXT_244);
d1049 1
a1049 1
    stringBuffer.append(TEXT_245);
d1051 7
a1057 1
    stringBuffer.append(TEXT_246);
d1064 1
a1064 1
    stringBuffer.append(TEXT_247);
d1066 1
a1066 1
    stringBuffer.append(TEXT_248);
d1068 1
a1068 1
    stringBuffer.append(TEXT_249);
d1070 1
a1070 1
    stringBuffer.append(TEXT_250);
d1072 1
a1072 1
    stringBuffer.append(TEXT_251);
d1074 1
a1074 1
    stringBuffer.append(TEXT_252);
d1076 1
a1076 1
    stringBuffer.append(TEXT_253);
d1078 1
a1078 1
    stringBuffer.append(TEXT_254);
d1080 1
a1080 1
    stringBuffer.append(TEXT_255);
d1082 1
a1082 1
    stringBuffer.append(TEXT_256);
d1084 1
a1084 1
    stringBuffer.append(TEXT_257);
d1088 1
a1088 1
    stringBuffer.append(TEXT_258);
d1090 1
a1090 1
    stringBuffer.append(TEXT_259);
d1092 1
a1092 1
    stringBuffer.append(TEXT_260);
d1094 1
a1094 1
    stringBuffer.append(TEXT_261);
d1096 1
a1096 1
    stringBuffer.append(TEXT_262);
d1100 1
a1100 1
    stringBuffer.append(TEXT_263);
d1103 7
a1109 1
    stringBuffer.append(TEXT_264);
d1111 1
a1111 1
    stringBuffer.append(TEXT_265);
d1113 1
a1113 1
    stringBuffer.append(TEXT_266);
d1120 1
a1120 1
    stringBuffer.append(TEXT_267);
d1122 1
a1122 1
    stringBuffer.append(TEXT_268);
@


1.5
log
@#146009 Lite Generator: Changes in the underlying domain model should be automatically reflected in the notational model
1,2,3 Parts commited.
@
text
@d91 108
a198 108
  protected final String TEXT_72 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_73 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\tNotationModelRefresher refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_76 = " domainModelEditDomain = ";
  protected final String TEXT_77 = ".getEditingDomain(";
  protected final String TEXT_78 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_79 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_80 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_81 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic NotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_82 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_83 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_84 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_85 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_86 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_87 = NL + "\t\t\tfilter = ";
  protected final String TEXT_88 = ".createFeatureFilter(";
  protected final String TEXT_89 = ".eINSTANCE.get";
  protected final String TEXT_90 = "());";
  protected final String TEXT_91 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_92 = ".createFeatureFilter(";
  protected final String TEXT_93 = ".eINSTANCE.get";
  protected final String TEXT_94 = "()));";
  protected final String TEXT_95 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_96 = ".createNotifierFilter(";
  protected final String TEXT_97 = "));";
  protected final String TEXT_98 = NL + "\t\t\tfilter = ";
  protected final String TEXT_99 = ".createNotifierFilter(";
  protected final String TEXT_100 = ");";
  protected final String TEXT_101 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_102 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_103 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_104 = " transactionAboutToCommit(";
  protected final String TEXT_105 = " event) {" + NL + "\t\t\treturn getRefreshNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_106 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_107 = " command = getRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_108 = " domainModelEditDomain = ";
  protected final String TEXT_109 = ".getEditingDomain(";
  protected final String TEXT_110 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_111 = " getRefreshNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_112 = " semanticChildren = getSemanticChildren();" + NL + "\t\t";
  protected final String TEXT_113 = " notationalChildren = ";
  protected final String TEXT_114 = ".getChildren();" + NL + "\t\tfinal ";
  protected final String TEXT_115 = " semanticToNotational = new ";
  protected final String TEXT_116 = "();" + NL + "\t\tfor(";
  protected final String TEXT_117 = " it = notationalChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_118 = " next = (";
  protected final String TEXT_119 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_120 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotational.put(nextSemantic, next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_121 = " parentView = ";
  protected final String TEXT_122 = ";" + NL + "\t\t";
  protected final String TEXT_123 = " command = new ";
  protected final String TEXT_124 = "();" + NL + "\t\tfor(";
  protected final String TEXT_125 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_126 = " next = (";
  protected final String TEXT_127 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_128 = " currentView = (";
  protected final String TEXT_129 = ") semanticToNotational.remove(next);" + NL + "\t\t\tint nodeVisualID = ";
  protected final String TEXT_130 = ".INSTANCE.getNodeVisualID(parentView, next);" + NL + "\t\t\tif (currentView == null) {" + NL + "\t\t\t\tif (shouldCreateView(next)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalElementCommand(parentView, next, nodeVisualID));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else if (nodeVisualID != ";
  protected final String TEXT_131 = ".getVisualID(currentView)) {" + NL + "\t\t\t\t";
  protected final String TEXT_132 = " notationalCommand = getCreateNotationalElementCommand(parentView, next, nodeVisualID);" + NL + "\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_133 = "(parentView, notationalCommand, currentView));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_134 = " it = semanticToNotational.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_135 = " obsoleteView = (";
  protected final String TEXT_136 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_137 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\tprivate ";
  protected final String TEXT_138 = " getCreateNotationalElementCommand(";
  protected final String TEXT_139 = " parentView, ";
  protected final String TEXT_140 = " domainElement, int nodeVisualID) {" + NL + "\t\tswitch (nodeVisualID) {";
  protected final String TEXT_141 = NL + "\t\tcase ";
  protected final String TEXT_142 = ".VISUAL_ID:" + NL + "\t\t\tif (domainElement instanceof ";
  protected final String TEXT_143 = ") {" + NL + "\t\t\t\treturn new Create";
  protected final String TEXT_144 = "NotationCommand(parentView, domainElement";
  protected final String TEXT_145 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_146 = ");" + NL + "\t\t\t}" + NL + "\t\t\treturn null;";
  protected final String TEXT_147 = NL + "\t\tdefault:" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_148 = " getSemanticChildren() {";
  protected final String TEXT_149 = NL;
  protected final String TEXT_150 = NL + "\treturn ";
  protected final String TEXT_151 = ".EMPTY_LIST;";
  protected final String TEXT_152 = NL + "\t";
  protected final String TEXT_153 = " result = new ";
  protected final String TEXT_154 = "();";
  protected final String TEXT_155 = NL + "\t";
  protected final String TEXT_156 = " viewObject = ";
  protected final String TEXT_157 = ";" + NL + "\t";
  protected final String TEXT_158 = " modelObject = ";
  protected final String TEXT_159 = ";" + NL + "\t";
  protected final String TEXT_160 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_161 = NL + "\tfor(";
  protected final String TEXT_162 = " it = ((";
  protected final String TEXT_163 = ")modelObject).";
  protected final String TEXT_164 = "().iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_165 = ") it.next();";
  protected final String TEXT_166 = NL + "\tnextValue = ((";
  protected final String TEXT_167 = ")modelObject).";
  protected final String TEXT_168 = "();";
  protected final String TEXT_169 = NL + "\tnodeVID = ";
  protected final String TEXT_170 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_171 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_172 = NL + "\tcase ";
  protected final String TEXT_173 = ".VISUAL_ID: {";
  protected final String TEXT_174 = NL + "\tif (";
  protected final String TEXT_175 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_176 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_177 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_178 = NL + "\t\t}";
  protected final String TEXT_179 = NL + "\t}";
d200 5
a204 5
  protected final String TEXT_181 = NL + "\treturn result;";
  protected final String TEXT_182 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_183 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateView(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_184 = ";" + NL + "\t}";
  protected final String TEXT_185 = NL;
d206 56
a261 56
  protected final String TEXT_187 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_188 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_189 = " feature, ";
  protected final String TEXT_190 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_191 = NL;
  protected final String TEXT_192 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_193 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_194 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_195 = NL;
  protected final String TEXT_196 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_197 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_198 = NL;
  protected final String TEXT_199 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_200 = "static ";
  protected final String TEXT_201 = "class Create";
  protected final String TEXT_202 = "NotationCommand extends ";
  protected final String TEXT_203 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_204 = "NotationCommand(";
  protected final String TEXT_205 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_206 = " domainElement";
  protected final String TEXT_207 = ", ";
  protected final String TEXT_208 = " constraint";
  protected final String TEXT_209 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_210 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_211 = ".decorateView(createdNode);";
  protected final String TEXT_212 = NL + "\t\t\t";
  protected final String TEXT_213 = " bounds = ";
  protected final String TEXT_214 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_215 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_216 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_217 = "));";
  protected final String TEXT_218 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_219 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_220 = "static ";
  protected final String TEXT_221 = "class Create";
  protected final String TEXT_222 = "Command extends ";
  protected final String TEXT_223 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_224 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_225 = "Command(";
  protected final String TEXT_226 = " parent, ";
  protected final String TEXT_227 = ".CreateRequestEx request";
  protected final String TEXT_228 = ", ";
  protected final String TEXT_229 = " constraint";
  protected final String TEXT_230 = ") {" + NL + "\t\t\t";
  protected final String TEXT_231 = " domainModelEditDomain = ";
  protected final String TEXT_232 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_233 = NL + "\t\t\t";
  protected final String TEXT_234 = " createdDomainElement = ";
  protected final String TEXT_235 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_236 = ".eINSTANCE.get";
  protected final String TEXT_237 = "());";
  protected final String TEXT_238 = NL + "\t\t\t";
  protected final String TEXT_239 = " createdDomainElement = ";
  protected final String TEXT_240 = ".eINSTANCE.create";
  protected final String TEXT_241 = "();";
  protected final String TEXT_242 = NL + "\t\t\t";
d263 25
a287 24
  protected final String TEXT_244 = ".";
  protected final String TEXT_245 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_246 = NL + "\t\t\t";
  protected final String TEXT_247 = " compoundCommand = new ";
  protected final String TEXT_248 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_249 = ".create(domainModelEditDomain, ";
  protected final String TEXT_250 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_251 = ".eINSTANCE.get";
  protected final String TEXT_252 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_253 = ".create(domainModelEditDomain, ";
  protected final String TEXT_254 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_255 = ".eINSTANCE.get";
  protected final String TEXT_256 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_257 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_258 = ".create(domainModelEditDomain, ";
  protected final String TEXT_259 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_260 = ".eINSTANCE.get";
  protected final String TEXT_261 = "(), createdDomainElement);";
  protected final String TEXT_262 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_263 = "NotationCommand(parent, createdDomainElement";
  protected final String TEXT_264 = ", constraint";
  protected final String TEXT_265 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_266 = NL + "}" + NL;
  protected final String TEXT_267 = NL;
d464 2
a472 1
    stringBuffer.append(TEXT_74);
d474 1
d476 1
a476 1
    stringBuffer.append(TEXT_76);
d478 1
a478 1
    stringBuffer.append(TEXT_77);
d480 1
a480 1
    stringBuffer.append(TEXT_78);
d482 1
a482 1
    stringBuffer.append(TEXT_79);
d484 1
a484 1
    stringBuffer.append(TEXT_80);
d486 1
a486 1
    stringBuffer.append(TEXT_81);
d501 1
a501 1
    stringBuffer.append(TEXT_82);
a502 2
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d506 2
d511 1
a511 1
    stringBuffer.append(TEXT_86);
d513 16
a528 15
boolean hasDeclaredFilter = false;
Set genChildFeatures = new LinkedHashSet();
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet == null) {
		continue;
	}
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (genChildFeatures.contains(childMetaFeature)) {
		continue;
	}
	genChildFeatures.add(childMetaFeature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;
d530 1
a530 1
    stringBuffer.append(TEXT_87);
d532 1
a532 1
    stringBuffer.append(TEXT_88);
d534 1
a534 1
    stringBuffer.append(TEXT_89);
d536 1
a536 1
    stringBuffer.append(TEXT_90);
d538 1
a538 1
	} else {
d540 1
a540 1
    stringBuffer.append(TEXT_91);
d542 1
a542 1
    stringBuffer.append(TEXT_92);
d544 1
a544 1
    stringBuffer.append(TEXT_93);
d546 1
a546 1
    stringBuffer.append(TEXT_94);
d548 2
a549 2
	}
}	//for
d552 1
a552 1
if (hasDeclaredFilter) {
d554 1
a554 1
    stringBuffer.append(TEXT_95);
d556 1
a556 1
    stringBuffer.append(TEXT_96);
d558 1
a558 1
    stringBuffer.append(TEXT_97);
d560 1
a560 1
} else {
d562 1
a562 1
    stringBuffer.append(TEXT_98);
d564 1
a564 1
    stringBuffer.append(TEXT_99);
d566 1
a566 1
    stringBuffer.append(TEXT_100);
d568 2
a569 1
}
d574 1
a574 1
    stringBuffer.append(TEXT_101);
d578 1
a578 1
    stringBuffer.append(TEXT_102);
d580 1
a580 1
    stringBuffer.append(TEXT_103);
d582 1
a582 1
    stringBuffer.append(TEXT_104);
d584 1
a584 1
    stringBuffer.append(TEXT_105);
d586 1
a586 1
    stringBuffer.append(TEXT_106);
d588 1
a588 1
    stringBuffer.append(TEXT_107);
d590 1
a590 1
    stringBuffer.append(TEXT_108);
d592 1
a592 1
    stringBuffer.append(TEXT_109);
d594 1
a594 1
    stringBuffer.append(TEXT_110);
a595 2
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d599 2
d602 1
a602 1
    stringBuffer.append(TEXT_114);
d604 1
a604 1
    stringBuffer.append(TEXT_115);
d606 1
a606 1
    stringBuffer.append(TEXT_116);
a607 2
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d611 2
d614 1
a614 1
    stringBuffer.append(TEXT_120);
d616 1
a616 1
    stringBuffer.append(TEXT_121);
a617 2
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d621 2
a623 2
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d627 1
a627 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d631 1
a631 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d635 2
d638 1
a638 1
    stringBuffer.append(TEXT_132);
d640 1
a640 1
    stringBuffer.append(TEXT_133);
a641 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d645 2
d648 1
a648 1
    stringBuffer.append(TEXT_137);
d650 1
a650 1
    stringBuffer.append(TEXT_138);
d652 1
a652 1
    stringBuffer.append(TEXT_139);
d654 1
a654 1
    stringBuffer.append(TEXT_140);
d664 1
a664 1
    stringBuffer.append(TEXT_141);
d666 1
a666 1
    stringBuffer.append(TEXT_142);
d668 1
a668 1
    stringBuffer.append(TEXT_143);
d671 1
a671 1
    stringBuffer.append(TEXT_144);
d673 1
a673 1
    stringBuffer.append(TEXT_145);
d675 1
a675 1
    stringBuffer.append(TEXT_146);
d679 1
a679 1
    stringBuffer.append(TEXT_147);
a680 1
    stringBuffer.append(TEXT_148);
d682 1
d686 1
a686 1
    stringBuffer.append(TEXT_150);
d688 1
a688 1
    stringBuffer.append(TEXT_151);
d692 1
a692 1
    stringBuffer.append(TEXT_152);
d694 1
a694 1
    stringBuffer.append(TEXT_153);
d696 1
a696 1
    stringBuffer.append(TEXT_154);
d714 1
a714 1
    stringBuffer.append(TEXT_155);
d716 1
a716 1
    stringBuffer.append(TEXT_156);
d718 1
a718 1
    stringBuffer.append(TEXT_157);
d720 1
a720 1
    stringBuffer.append(TEXT_158);
d722 1
a722 1
    stringBuffer.append(TEXT_159);
d724 1
a724 1
    stringBuffer.append(TEXT_160);
d733 1
a733 1
    stringBuffer.append(TEXT_161);
d735 1
a735 1
    stringBuffer.append(TEXT_162);
d737 1
a737 1
    stringBuffer.append(TEXT_163);
d739 1
a739 1
    stringBuffer.append(TEXT_164);
d741 1
a741 1
    stringBuffer.append(TEXT_165);
d745 1
a745 1
    stringBuffer.append(TEXT_166);
d747 1
a747 1
    stringBuffer.append(TEXT_167);
d749 1
a749 1
    stringBuffer.append(TEXT_168);
d753 1
a753 1
    stringBuffer.append(TEXT_169);
d755 1
a755 1
    stringBuffer.append(TEXT_170);
d760 1
a760 1
    stringBuffer.append(TEXT_171);
d767 1
a767 1
    stringBuffer.append(TEXT_172);
d769 1
a769 1
    stringBuffer.append(TEXT_173);
d773 1
a773 1
    stringBuffer.append(TEXT_174);
d775 1
a775 1
    stringBuffer.append(TEXT_175);
d779 1
a779 1
    stringBuffer.append(TEXT_176);
d783 1
a783 1
    stringBuffer.append(TEXT_177);
d787 1
a787 1
    stringBuffer.append(TEXT_178);
d793 1
a793 1
    stringBuffer.append(TEXT_179);
d798 1
a798 1
    stringBuffer.append(TEXT_180);
d803 1
a803 1
    stringBuffer.append(TEXT_181);
a806 2
    stringBuffer.append(TEXT_182);
    stringBuffer.append(genDiagram.isSynchronized());
d810 2
a814 1
    stringBuffer.append(TEXT_185);
d817 1
d819 1
a819 1
    stringBuffer.append(TEXT_188);
d821 1
a821 1
    stringBuffer.append(TEXT_189);
a822 1
    stringBuffer.append(TEXT_190);
a824 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d828 1
d831 1
d833 1
a833 1
    stringBuffer.append(TEXT_197);
a840 1
    stringBuffer.append(TEXT_198);
d842 1
d844 1
a844 1
    stringBuffer.append(TEXT_200);
d846 1
a846 1
    stringBuffer.append(TEXT_201);
d849 1
a849 1
    stringBuffer.append(TEXT_202);
d851 1
a851 1
    stringBuffer.append(TEXT_203);
d854 1
a854 1
    stringBuffer.append(TEXT_204);
d856 1
a856 1
    stringBuffer.append(TEXT_205);
d858 1
a858 1
    stringBuffer.append(TEXT_206);
d860 1
a860 1
    stringBuffer.append(TEXT_207);
d862 1
a862 1
    stringBuffer.append(TEXT_208);
d864 1
a864 1
    stringBuffer.append(TEXT_209);
d866 1
a866 1
    stringBuffer.append(TEXT_210);
d868 1
a868 1
    stringBuffer.append(TEXT_211);
d872 1
a872 1
    stringBuffer.append(TEXT_212);
d874 1
a874 1
    stringBuffer.append(TEXT_213);
d876 1
a876 1
    stringBuffer.append(TEXT_214);
d886 1
a886 1
    stringBuffer.append(TEXT_215);
d888 1
a888 1
    stringBuffer.append(TEXT_216);
d890 1
a890 1
    stringBuffer.append(TEXT_217);
d894 1
a894 1
    stringBuffer.append(TEXT_218);
d898 1
a898 1
    stringBuffer.append(TEXT_219);
d900 1
a900 1
    stringBuffer.append(TEXT_220);
d902 1
a902 1
    stringBuffer.append(TEXT_221);
d905 1
a905 1
    stringBuffer.append(TEXT_222);
d907 1
a907 1
    stringBuffer.append(TEXT_223);
d910 1
a910 1
    stringBuffer.append(TEXT_224);
d913 1
a913 1
    stringBuffer.append(TEXT_225);
d915 1
a915 1
    stringBuffer.append(TEXT_226);
d917 1
a917 1
    stringBuffer.append(TEXT_227);
d919 1
a919 1
    stringBuffer.append(TEXT_228);
d921 1
a921 1
    stringBuffer.append(TEXT_229);
d923 1
a923 1
    stringBuffer.append(TEXT_230);
d925 1
a925 1
    stringBuffer.append(TEXT_231);
d927 1
a927 1
    stringBuffer.append(TEXT_232);
d932 1
a932 1
    stringBuffer.append(TEXT_233);
d934 1
a934 1
    stringBuffer.append(TEXT_234);
d936 1
a936 1
    stringBuffer.append(TEXT_235);
d938 1
a938 1
    stringBuffer.append(TEXT_236);
d940 1
a940 1
    stringBuffer.append(TEXT_237);
d944 1
a944 1
    stringBuffer.append(TEXT_238);
d946 1
a946 1
    stringBuffer.append(TEXT_239);
d948 1
a948 1
    stringBuffer.append(TEXT_240);
d950 1
a950 1
    stringBuffer.append(TEXT_241);
d954 1
a954 1
    stringBuffer.append(TEXT_242);
d956 1
a956 1
    stringBuffer.append(TEXT_243);
d958 1
a958 1
    stringBuffer.append(TEXT_244);
d960 1
a960 1
    stringBuffer.append(TEXT_245);
a966 2
    stringBuffer.append(TEXT_246);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d970 2
d973 1
a973 1
    stringBuffer.append(TEXT_249);
d975 1
a975 1
    stringBuffer.append(TEXT_250);
d977 1
a977 1
    stringBuffer.append(TEXT_251);
d979 1
a979 1
    stringBuffer.append(TEXT_252);
d981 1
a981 1
    stringBuffer.append(TEXT_253);
d983 1
a983 1
    stringBuffer.append(TEXT_254);
d985 1
a985 1
    stringBuffer.append(TEXT_255);
d987 1
a987 1
    stringBuffer.append(TEXT_256);
d991 1
a991 1
    stringBuffer.append(TEXT_257);
d993 1
a993 1
    stringBuffer.append(TEXT_258);
d995 1
a995 1
    stringBuffer.append(TEXT_259);
d997 1
a997 1
    stringBuffer.append(TEXT_260);
d999 1
a999 1
    stringBuffer.append(TEXT_261);
d1003 1
a1003 1
    stringBuffer.append(TEXT_262);
d1006 1
a1006 1
    stringBuffer.append(TEXT_263);
d1008 1
a1008 1
    stringBuffer.append(TEXT_264);
d1010 1
a1010 1
    stringBuffer.append(TEXT_265);
d1017 1
a1017 1
    stringBuffer.append(TEXT_266);
d1019 1
a1019 1
    stringBuffer.append(TEXT_267);
@


1.5.2.1
log
@[152859] bblajer - Lite Generator: All generated methods should be marked as @@generated
[152854] bblajer - Lite Generator: Allow shape nodes to be placed inside list-layout compartments
@
text
@d156 1
a156 1
  protected final String TEXT_137 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
@


1.4
log
@[bblajer] #143168 Make Align actions work
@
text
@d31 256
a286 129
  protected final String TEXT_12 = " getModelChildren() {" + NL + "\t\treturn ((View) getModel()).getChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
  protected final String TEXT_13 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_14 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_15 = "() {" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ";
  protected final String TEXT_16 = " request, final EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_17 = " emfCommand = new ";
  protected final String TEXT_18 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_19 = " moveDelta;" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_20 = " resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof Bounds == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_21 = " original = new ";
  protected final String TEXT_22 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_23 = " referenceFigure = ((";
  protected final String TEXT_24 = ")child).getFigure();" + NL + "\t\t\t\t\t\treferenceFigure.translateToAbsolute(original);" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_25 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(transformed);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_26 = " move, ";
  protected final String TEXT_27 = " resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_28 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_29 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_30 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_31 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_32 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_33 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_34 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_35 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_36 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_37 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_38 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_39 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_40 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_41 = " result = new ";
  protected final String TEXT_42 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_43 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_44 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_45 = "Command((View) getModel(), requestEx";
  protected final String TEXT_46 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_47 = ")getConstraintFor(request)";
  protected final String TEXT_48 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_49 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_50 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_51 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_52 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_53 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_54 = " result = new ";
  protected final String TEXT_55 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_56 = "());" + NL + "\t\t";
  protected final String TEXT_57 = " scrollPane = new ";
  protected final String TEXT_58 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_59 = NL + "\t\t";
  protected final String TEXT_60 = " viewport = new ";
  protected final String TEXT_61 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_62 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_63 = "());";
  protected final String TEXT_64 = NL + "\t\t";
  protected final String TEXT_65 = " viewport = new ";
  protected final String TEXT_66 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_67 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_68 = "());";
  protected final String TEXT_69 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_70 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_71 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_74 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_75 = " feature, ";
  protected final String TEXT_76 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_79 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_80 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_81 = NL;
  protected final String TEXT_82 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_83 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_86 = "static ";
  protected final String TEXT_87 = "class Create";
  protected final String TEXT_88 = "Command extends ";
  protected final String TEXT_89 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_90 = " parent;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_91 = " createdNode;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_92 = "Command(";
  protected final String TEXT_93 = " parent, ";
  protected final String TEXT_94 = ".CreateRequestEx request";
  protected final String TEXT_95 = ", ";
  protected final String TEXT_96 = " constraint";
  protected final String TEXT_97 = ") {" + NL + "\t\t\tthis.parent = parent;" + NL + "\t\t\tcreatedNode = ";
  protected final String TEXT_98 = ".eINSTANCE.createNode();";
  protected final String TEXT_99 = NL + "\t\t\t";
  protected final String TEXT_100 = " createdDomainElement = ";
  protected final String TEXT_101 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_102 = ".eINSTANCE.get";
  protected final String TEXT_103 = "());";
  protected final String TEXT_104 = NL + "\t\t\t";
  protected final String TEXT_105 = " createdDomainElement = ";
  protected final String TEXT_106 = ".eINSTANCE.create";
  protected final String TEXT_107 = "();";
  protected final String TEXT_108 = "\t\t\tcreatedNode.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_109 = NL + "\t\t\t";
  protected final String TEXT_110 = ".";
  protected final String TEXT_111 = ".initializeElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_112 = ".decorateView(createdNode);";
  protected final String TEXT_113 = NL + "\t\t\t";
  protected final String TEXT_114 = " bounds = ";
  protected final String TEXT_115 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_116 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_117 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_118 = "));";
  protected final String TEXT_119 = NL + "\t\t\t";
  protected final String TEXT_120 = " domainModelEditDomain = ";
  protected final String TEXT_121 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_122 = NL + "\t\t\t";
  protected final String TEXT_123 = " compoundCommand = new ";
  protected final String TEXT_124 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_125 = ".create(domainModelEditDomain, ";
  protected final String TEXT_126 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_127 = ".eINSTANCE.get";
  protected final String TEXT_128 = "(), createdNode.getElement()));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_129 = ".create(domainModelEditDomain, ";
  protected final String TEXT_130 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_131 = ".eINSTANCE.get";
  protected final String TEXT_132 = "(), createdNode.getElement()));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_133 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_134 = ".create(domainModelEditDomain, ";
  protected final String TEXT_135 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_136 = ".eINSTANCE.get";
  protected final String TEXT_137 = "(), createdNode.getElement());";
  protected final String TEXT_138 = NL + "\t\t\trequest.setCreatedObject(createdNode);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tparent.insertChild(createdNode);" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tparent.getPersistedChildren().remove(createdNode);" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_139 = NL + "}" + NL;
  protected final String TEXT_140 = NL;
d295 1
d297 1
d334 4
d339 1
a339 1
    stringBuffer.append(TEXT_13);
d341 1
a341 1
    stringBuffer.append(TEXT_14);
d343 1
a343 1
    stringBuffer.append(TEXT_15);
d345 1
a345 1
    stringBuffer.append(TEXT_16);
d347 1
a347 1
    stringBuffer.append(TEXT_17);
d349 1
a349 1
    stringBuffer.append(TEXT_18);
d351 1
a351 1
    stringBuffer.append(TEXT_19);
d353 1
a353 1
    stringBuffer.append(TEXT_20);
d355 1
a355 1
    stringBuffer.append(TEXT_21);
d357 1
a357 1
    stringBuffer.append(TEXT_22);
d359 1
a359 1
    stringBuffer.append(TEXT_23);
d361 1
a361 1
    stringBuffer.append(TEXT_24);
d363 1
a363 1
    stringBuffer.append(TEXT_25);
d365 1
a365 1
    stringBuffer.append(TEXT_26);
d367 1
a367 1
    stringBuffer.append(TEXT_27);
d369 1
a369 1
    stringBuffer.append(TEXT_28);
d371 1
a371 1
    stringBuffer.append(TEXT_29);
d373 1
a373 1
    stringBuffer.append(TEXT_30);
d375 1
a375 1
    stringBuffer.append(TEXT_31);
d377 1
a377 1
    stringBuffer.append(TEXT_32);
d379 1
a379 1
    stringBuffer.append(TEXT_33);
d381 1
a381 1
    stringBuffer.append(TEXT_34);
d383 1
a383 1
    stringBuffer.append(TEXT_35);
d385 1
a385 1
    stringBuffer.append(TEXT_36);
d388 1
a388 1
    stringBuffer.append(TEXT_37);
d390 1
a390 1
    stringBuffer.append(TEXT_38);
d392 1
a392 1
    stringBuffer.append(TEXT_39);
d394 1
a394 1
    stringBuffer.append(TEXT_40);
d396 1
a396 1
    stringBuffer.append(TEXT_41);
d398 1
a398 1
    stringBuffer.append(TEXT_42);
d403 1
a403 1
    stringBuffer.append(TEXT_43);
d405 1
a405 1
    stringBuffer.append(TEXT_44);
d408 1
a408 1
    stringBuffer.append(TEXT_45);
d410 1
a410 1
    stringBuffer.append(TEXT_46);
d412 1
a412 1
    stringBuffer.append(TEXT_47);
d414 1
a414 1
    stringBuffer.append(TEXT_48);
d418 1
a418 1
    stringBuffer.append(TEXT_49);
d420 1
a420 1
    stringBuffer.append(TEXT_50);
d422 1
a422 1
    stringBuffer.append(TEXT_51);
d424 1
a424 1
    stringBuffer.append(TEXT_52);
d426 1
a426 1
    stringBuffer.append(TEXT_53);
d428 1
a428 1
    stringBuffer.append(TEXT_54);
d430 1
a430 1
    stringBuffer.append(TEXT_55);
d432 1
a432 1
    stringBuffer.append(TEXT_56);
d434 1
a434 1
    stringBuffer.append(TEXT_57);
d436 1
a436 1
    stringBuffer.append(TEXT_58);
d438 1
a438 1
    stringBuffer.append(TEXT_59);
d440 1
a440 1
    stringBuffer.append(TEXT_60);
d442 1
a442 1
    stringBuffer.append(TEXT_61);
d444 1
a444 1
    stringBuffer.append(TEXT_62);
d446 1
a446 1
    stringBuffer.append(TEXT_63);
d448 1
a448 1
    stringBuffer.append(TEXT_64);
d450 1
a450 1
    stringBuffer.append(TEXT_65);
d452 1
a452 1
    stringBuffer.append(TEXT_66);
d454 1
a454 1
    stringBuffer.append(TEXT_67);
d456 1
a456 1
    stringBuffer.append(TEXT_68);
d458 1
a458 1
    stringBuffer.append(TEXT_69);
d460 1
a460 1
    stringBuffer.append(TEXT_70);
a461 2
    stringBuffer.append(TEXT_71);
    stringBuffer.append(TEXT_72);
d463 7
a469 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a470 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d472 1
a472 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d474 1
d476 1
d478 1
a478 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d480 1
a480 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d482 1
d484 14
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d501 4
d506 1
a506 5
for(Iterator it = genCompartment.getChildNodes().iterator(); genDiagram.getPalette() != null && it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	boolean isStatic = false;
	boolean isListLayout = genCompartment.isListLayout();
	String resolvedSemanticElement = "resolveSemanticElement()";
a507 3
    stringBuffer.append(TEXT_84);
    stringBuffer.append(TEXT_85);
    if (isStatic) {
d509 17
a525 1
    }
d527 1
a527 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d529 1
a529 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d531 1
a531 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d533 3
a535 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d537 1
a537 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d539 1
a539 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d541 1
a541 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
d543 7
a549 1
    if (!isListLayout) {
d551 1
a551 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d553 1
a553 1
    }
a554 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_98);
d556 1
a556 2
if (next.getDomainMetaClass().isMapEntry()) {
/*Workaround for Ecore example: map entries cannot be created using factory, only using reflective EFactory.create() method*/
d558 2
d561 1
a561 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d563 6
a568 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
d570 3
a572 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()));
d574 1
a574 1
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
d576 1
a576 3
    
} else {

d578 1
a578 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getQualifiedInterfaceName()));
d580 1
a580 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
d582 1
a582 1
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
d584 1
a584 3
    
}

d586 1
a586 1
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
d590 1
a590 1
    stringBuffer.append(next.getUniqueIdentifier());
d592 270
d863 1
a863 1
    stringBuffer.append(TEXT_112);
d867 1
a867 1
    stringBuffer.append(TEXT_113);
d869 1
a869 1
    stringBuffer.append(TEXT_114);
d871 1
a871 1
    stringBuffer.append(TEXT_115);
d881 1
a881 1
    stringBuffer.append(TEXT_116);
d883 1
a883 1
    stringBuffer.append(TEXT_117);
d885 1
a885 1
    stringBuffer.append(TEXT_118);
d889 30
a918 1
    stringBuffer.append(TEXT_119);
d920 1
a920 1
    stringBuffer.append(TEXT_120);
d922 34
a955 1
    stringBuffer.append(TEXT_121);
d962 1
a962 1
    stringBuffer.append(TEXT_122);
d964 1
a964 1
    stringBuffer.append(TEXT_123);
d966 1
a966 1
    stringBuffer.append(TEXT_124);
d968 1
a968 1
    stringBuffer.append(TEXT_125);
d970 1
a970 1
    stringBuffer.append(TEXT_126);
d972 1
a972 1
    stringBuffer.append(TEXT_127);
d974 1
a974 1
    stringBuffer.append(TEXT_128);
d976 1
a976 1
    stringBuffer.append(TEXT_129);
d978 1
a978 1
    stringBuffer.append(TEXT_130);
d980 1
a980 1
    stringBuffer.append(TEXT_131);
d982 1
a982 1
    stringBuffer.append(TEXT_132);
d986 1
a986 1
    stringBuffer.append(TEXT_133);
d988 1
a988 1
    stringBuffer.append(TEXT_134);
d990 1
a990 1
    stringBuffer.append(TEXT_135);
d992 1
a992 1
    stringBuffer.append(TEXT_136);
d994 1
a994 1
    stringBuffer.append(TEXT_137);
d998 11
a1008 1
    stringBuffer.append(TEXT_138);
d1012 1
a1012 1
    stringBuffer.append(TEXT_139);
d1014 1
a1014 1
    stringBuffer.append(TEXT_140);
@


1.3
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d35 1
a35 1
  protected final String TEXT_16 = " request, EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\t";
d38 40
a77 40
  protected final String TEXT_19 = " moveDelta = request.getMoveDelta();" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_20 = " resizeDelta = request.getSizeDelta();" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn node.getLayoutConstraint() instanceof Bounds;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_21 = " move, ";
  protected final String TEXT_22 = " resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_23 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_24 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_25 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_26 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_27 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_28 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_29 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_30 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_31 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_32 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_33 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_34 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_35 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_36 = " result = new ";
  protected final String TEXT_37 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_38 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_39 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_40 = "Command((View) getModel(), requestEx";
  protected final String TEXT_41 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_42 = ")getConstraintFor(request)";
  protected final String TEXT_43 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_44 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_45 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_46 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_47 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_48 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_49 = " result = new ";
  protected final String TEXT_50 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_51 = "());" + NL + "\t\t";
  protected final String TEXT_52 = " scrollPane = new ";
  protected final String TEXT_53 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_54 = NL + "\t\t";
  protected final String TEXT_55 = " viewport = new ";
  protected final String TEXT_56 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_57 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_58 = "());";
d83 8
a90 8
  protected final String TEXT_64 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_65 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_66 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_67 = NL;
  protected final String TEXT_68 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_69 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_70 = " feature, ";
  protected final String TEXT_71 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
d92 26
a117 26
  protected final String TEXT_73 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_74 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_75 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_78 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_81 = "static ";
  protected final String TEXT_82 = "class Create";
  protected final String TEXT_83 = "Command extends ";
  protected final String TEXT_84 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_85 = " parent;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_86 = " createdNode;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_87 = "Command(";
  protected final String TEXT_88 = " parent, ";
  protected final String TEXT_89 = ".CreateRequestEx request";
  protected final String TEXT_90 = ", ";
  protected final String TEXT_91 = " constraint";
  protected final String TEXT_92 = ") {" + NL + "\t\t\tthis.parent = parent;" + NL + "\t\t\tcreatedNode = ";
  protected final String TEXT_93 = ".eINSTANCE.createNode();";
  protected final String TEXT_94 = NL + "\t\t\t";
  protected final String TEXT_95 = " createdDomainElement = ";
  protected final String TEXT_96 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_97 = ".eINSTANCE.get";
  protected final String TEXT_98 = "());";
d120 3
a122 3
  protected final String TEXT_101 = ".eINSTANCE.create";
  protected final String TEXT_102 = "();";
  protected final String TEXT_103 = "\t\t\tcreatedNode.setElement(createdDomainElement);" + NL + "\t\t\t";
d124 24
a147 24
  protected final String TEXT_105 = ".";
  protected final String TEXT_106 = ".initializeElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_107 = ".decorateView(createdNode);";
  protected final String TEXT_108 = NL + "\t\t\t";
  protected final String TEXT_109 = " bounds = ";
  protected final String TEXT_110 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_111 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_112 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_113 = "));";
  protected final String TEXT_114 = NL + "\t\t\t";
  protected final String TEXT_115 = " domainModelEditDomain = ";
  protected final String TEXT_116 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_117 = NL + "\t\t\t";
  protected final String TEXT_118 = " compoundCommand = new ";
  protected final String TEXT_119 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_120 = ".create(domainModelEditDomain, ";
  protected final String TEXT_121 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_122 = ".eINSTANCE.get";
  protected final String TEXT_123 = "(), createdNode.getElement()));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_124 = ".create(domainModelEditDomain, ";
  protected final String TEXT_125 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_126 = ".eINSTANCE.get";
  protected final String TEXT_127 = "(), createdNode.getElement()));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_128 = NL + "\t\t\tthis.domainModelAddCommand = ";
d151 9
a159 4
  protected final String TEXT_132 = "(), createdNode.getElement());";
  protected final String TEXT_133 = NL + "\t\t\trequest.setCreatedObject(createdNode);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tparent.insertChild(createdNode);" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tparent.getPersistedChildren().remove(createdNode);" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_134 = NL + "}" + NL;
  protected final String TEXT_135 = NL;
d221 10
d232 1
a232 1
    stringBuffer.append(TEXT_21);
d234 1
a234 1
    stringBuffer.append(TEXT_22);
d236 1
a236 1
    stringBuffer.append(TEXT_23);
d238 1
a238 1
    stringBuffer.append(TEXT_24);
d240 1
a240 1
    stringBuffer.append(TEXT_25);
d242 1
a242 1
    stringBuffer.append(TEXT_26);
d244 1
a244 1
    stringBuffer.append(TEXT_27);
d246 1
a246 1
    stringBuffer.append(TEXT_28);
d248 1
a248 1
    stringBuffer.append(TEXT_29);
d250 1
a250 1
    stringBuffer.append(TEXT_30);
d252 1
a252 1
    stringBuffer.append(TEXT_31);
d255 1
a255 1
    stringBuffer.append(TEXT_32);
d257 1
a257 1
    stringBuffer.append(TEXT_33);
d259 1
a259 1
    stringBuffer.append(TEXT_34);
d261 1
a261 1
    stringBuffer.append(TEXT_35);
d263 1
a263 1
    stringBuffer.append(TEXT_36);
d265 1
a265 1
    stringBuffer.append(TEXT_37);
d270 1
a270 1
    stringBuffer.append(TEXT_38);
d272 1
a272 1
    stringBuffer.append(TEXT_39);
d275 1
a275 1
    stringBuffer.append(TEXT_40);
d277 1
a277 1
    stringBuffer.append(TEXT_41);
d279 1
a279 1
    stringBuffer.append(TEXT_42);
d281 1
a281 1
    stringBuffer.append(TEXT_43);
d285 1
a285 1
    stringBuffer.append(TEXT_44);
d287 1
a287 1
    stringBuffer.append(TEXT_45);
d289 1
a289 1
    stringBuffer.append(TEXT_46);
d291 1
a291 1
    stringBuffer.append(TEXT_47);
d293 1
a293 1
    stringBuffer.append(TEXT_48);
d295 1
a295 1
    stringBuffer.append(TEXT_49);
d297 1
a297 1
    stringBuffer.append(TEXT_50);
d299 1
a299 1
    stringBuffer.append(TEXT_51);
d301 1
a301 1
    stringBuffer.append(TEXT_52);
d303 1
a303 1
    stringBuffer.append(TEXT_53);
a304 10
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Viewport"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Viewport"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout"));
    stringBuffer.append(TEXT_58);
    } else {
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformViewport"));
d310 1
a310 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayer"));
d312 1
a312 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
d314 1
a314 1
    }
d316 1
a316 1
    stringBuffer.append(importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()));
d318 1
a318 1
    stringBuffer.append(importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()));
d320 1
d322 1
d324 1
a324 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d326 1
a326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d328 1
a328 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d332 1
a332 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d334 1
a334 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d336 1
d339 7
d347 1
a347 1
    stringBuffer.append(TEXT_78);
d355 2
a356 2
    stringBuffer.append(TEXT_79);
    stringBuffer.append(TEXT_80);
d358 1
a358 1
    stringBuffer.append(TEXT_81);
d360 1
a360 1
    stringBuffer.append(TEXT_82);
d363 1
a363 1
    stringBuffer.append(TEXT_83);
d365 1
a365 1
    stringBuffer.append(TEXT_84);
d367 1
a367 1
    stringBuffer.append(TEXT_85);
d369 1
a369 1
    stringBuffer.append(TEXT_86);
d372 1
a372 1
    stringBuffer.append(TEXT_87);
d374 1
a374 1
    stringBuffer.append(TEXT_88);
d376 1
a376 1
    stringBuffer.append(TEXT_89);
d378 1
a378 1
    stringBuffer.append(TEXT_90);
d380 1
a380 1
    stringBuffer.append(TEXT_91);
d382 1
a382 1
    stringBuffer.append(TEXT_92);
d384 1
a384 1
    stringBuffer.append(TEXT_93);
d389 1
a389 1
    stringBuffer.append(TEXT_94);
d391 1
a391 1
    stringBuffer.append(TEXT_95);
d393 1
a393 1
    stringBuffer.append(TEXT_96);
d395 1
a395 1
    stringBuffer.append(TEXT_97);
d397 1
a397 1
    stringBuffer.append(TEXT_98);
d401 1
a401 1
    stringBuffer.append(TEXT_99);
d403 1
a403 1
    stringBuffer.append(TEXT_100);
d405 1
a405 1
    stringBuffer.append(TEXT_101);
d407 1
a407 1
    stringBuffer.append(TEXT_102);
d411 1
a411 1
    stringBuffer.append(TEXT_103);
d413 1
a413 1
    stringBuffer.append(TEXT_104);
d415 1
a415 1
    stringBuffer.append(TEXT_105);
d417 1
a417 1
    stringBuffer.append(TEXT_106);
d419 1
a419 1
    stringBuffer.append(TEXT_107);
d423 1
a423 1
    stringBuffer.append(TEXT_108);
d425 1
a425 1
    stringBuffer.append(TEXT_109);
d427 1
a427 1
    stringBuffer.append(TEXT_110);
d437 1
a437 1
    stringBuffer.append(TEXT_111);
d439 1
a439 1
    stringBuffer.append(TEXT_112);
d441 1
a441 1
    stringBuffer.append(TEXT_113);
d445 1
a445 1
    stringBuffer.append(TEXT_114);
d447 1
a447 1
    stringBuffer.append(TEXT_115);
d449 1
a449 1
    stringBuffer.append(TEXT_116);
d456 1
a456 1
    stringBuffer.append(TEXT_117);
d458 1
a458 1
    stringBuffer.append(TEXT_118);
d460 1
a460 1
    stringBuffer.append(TEXT_119);
d462 1
a462 1
    stringBuffer.append(TEXT_120);
d464 1
a464 1
    stringBuffer.append(TEXT_121);
d466 1
a466 1
    stringBuffer.append(TEXT_122);
d468 1
a468 1
    stringBuffer.append(TEXT_123);
d470 1
a470 1
    stringBuffer.append(TEXT_124);
d472 1
a472 1
    stringBuffer.append(TEXT_125);
d474 1
a474 1
    stringBuffer.append(TEXT_126);
d476 1
a476 1
    stringBuffer.append(TEXT_127);
d480 1
a480 1
    stringBuffer.append(TEXT_128);
d482 1
a482 1
    stringBuffer.append(TEXT_129);
d484 1
a484 1
    stringBuffer.append(TEXT_130);
d486 1
a486 1
    stringBuffer.append(TEXT_131);
d488 1
a488 1
    stringBuffer.append(TEXT_132);
d492 1
a492 1
    stringBuffer.append(TEXT_133);
d496 1
a496 1
    stringBuffer.append(TEXT_134);
d498 1
a498 1
    stringBuffer.append(TEXT_135);
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d35 92
a126 92
  protected final String TEXT_16 = " request, EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\treturn new Command(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_17 = " moveDelta = request.getMoveDelta();" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_18 = " resizeDelta = request.getSizeDelta();" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn node.getLayoutConstraint() instanceof Bounds;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_19 = " move, ";
  protected final String TEXT_20 = " resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_21 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_23 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_24 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_25 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_26 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_27 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_28 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_29 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_30 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_31 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_32 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\tCompoundCommand result = new CompoundCommand();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_33 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_34 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.add(new Create";
  protected final String TEXT_35 = "Command((View) getModel(), requestEx";
  protected final String TEXT_36 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_37 = ")getConstraintFor(request)";
  protected final String TEXT_38 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_39 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn result.unwrap();" + NL + "\t\t\t\t}";
  protected final String TEXT_40 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_41 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_42 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_43 = " result = new ";
  protected final String TEXT_44 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_45 = "());" + NL + "\t\t";
  protected final String TEXT_46 = " scrollPane = new ";
  protected final String TEXT_47 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = " viewport = new ";
  protected final String TEXT_50 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_51 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_52 = "());";
  protected final String TEXT_53 = NL + "\t\t";
  protected final String TEXT_54 = " viewport = new ";
  protected final String TEXT_55 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_56 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_57 = "());";
  protected final String TEXT_58 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_59 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_60 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_61 = NL;
  protected final String TEXT_62 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_63 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_64 = " feature, ";
  protected final String TEXT_65 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_66 = NL;
  protected final String TEXT_67 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_68 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_69 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_70 = NL;
  protected final String TEXT_71 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_72 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_75 = "static ";
  protected final String TEXT_76 = "class Create";
  protected final String TEXT_77 = "Command extends ";
  protected final String TEXT_78 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_79 = " parent;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_80 = " createdNode;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_81 = "Command(";
  protected final String TEXT_82 = " parent, ";
  protected final String TEXT_83 = ".CreateRequestEx request";
  protected final String TEXT_84 = ", ";
  protected final String TEXT_85 = " constraint";
  protected final String TEXT_86 = ") {" + NL + "\t\t\tthis.parent = parent;" + NL + "\t\t\tcreatedNode = ";
  protected final String TEXT_87 = ".eINSTANCE.createNode();";
  protected final String TEXT_88 = NL + "\t\t\t";
  protected final String TEXT_89 = " createdDomainElement = ";
  protected final String TEXT_90 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_91 = ".eINSTANCE.get";
  protected final String TEXT_92 = "());";
  protected final String TEXT_93 = NL + "\t\t\t";
  protected final String TEXT_94 = " createdDomainElement = ";
  protected final String TEXT_95 = ".eINSTANCE.create";
  protected final String TEXT_96 = "();";
  protected final String TEXT_97 = "\t\t\tcreatedNode.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_98 = NL + "\t\t\t";
  protected final String TEXT_99 = ".";
  protected final String TEXT_100 = ".initializeElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_101 = ".decorateView(createdNode);";
  protected final String TEXT_102 = NL + "\t\t\t";
  protected final String TEXT_103 = " bounds = ";
  protected final String TEXT_104 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_105 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_106 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_107 = "));";
d128 27
a154 21
  protected final String TEXT_109 = " domainModelEditDomain = ";
  protected final String TEXT_110 = ".getEditingDomainFor(parent.getDiagram().getElement());";
  protected final String TEXT_111 = NL + "\t\t\t";
  protected final String TEXT_112 = " compoundCommand = new ";
  protected final String TEXT_113 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_114 = ".create(domainModelEditDomain, ";
  protected final String TEXT_115 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_116 = ".eINSTANCE.get";
  protected final String TEXT_117 = "(), createdNode.getElement()));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_118 = ".create(domainModelEditDomain, ";
  protected final String TEXT_119 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_120 = ".eINSTANCE.get";
  protected final String TEXT_121 = "(), createdNode.getElement()));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_122 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_123 = ".create(domainModelEditDomain, ";
  protected final String TEXT_124 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_125 = ".eINSTANCE.get";
  protected final String TEXT_126 = "(), createdNode.getElement());";
  protected final String TEXT_127 = NL + "\t\t\trequest.setCreatedObject(createdNode);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tparent.insertChild(createdNode);" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tparent.getPersistedChildren().remove(createdNode);" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_128 = NL + "}" + NL;
  protected final String TEXT_129 = NL;
d208 1
a208 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d210 1
a210 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d216 6
d223 1
a223 1
    stringBuffer.append(TEXT_21);
d225 1
a225 1
    stringBuffer.append(TEXT_22);
d227 1
a227 1
    stringBuffer.append(TEXT_23);
d229 1
a229 1
    stringBuffer.append(TEXT_24);
d231 1
a231 1
    stringBuffer.append(TEXT_25);
d233 1
a233 1
    stringBuffer.append(TEXT_26);
d235 1
a235 1
    stringBuffer.append(TEXT_27);
d237 1
a237 1
    stringBuffer.append(TEXT_28);
d240 1
a240 1
    stringBuffer.append(TEXT_29);
d242 1
a242 1
    stringBuffer.append(TEXT_30);
d244 1
a244 1
    stringBuffer.append(TEXT_31);
d246 5
a250 1
    stringBuffer.append(TEXT_32);
d255 1
a255 1
    stringBuffer.append(TEXT_33);
d257 1
a257 1
    stringBuffer.append(TEXT_34);
d260 1
a260 1
    stringBuffer.append(TEXT_35);
d262 1
a262 1
    stringBuffer.append(TEXT_36);
d264 1
a264 1
    stringBuffer.append(TEXT_37);
d266 1
a266 1
    stringBuffer.append(TEXT_38);
a269 10
    stringBuffer.append(TEXT_39);
    }/*when there's palette*/
    stringBuffer.append(TEXT_40);
    stringBuffer.append(genCompartment.getTitle());
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LabeledContainer"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LabeledContainer"));
d271 1
a271 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.StackLayout"));
d273 1
a273 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ScrollPane"));
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ScrollPane"));
d277 1
a277 1
    if (genCompartment.isListLayout()) {
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Viewport"));
d281 1
a281 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Viewport"));
d283 1
a283 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout"));
d287 1
a287 1
    } else {
d289 2
a291 2
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformViewport"));
d293 1
a293 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayer"));
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
d297 1
a297 1
    }
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()));
d303 1
d305 1
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d313 1
a315 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d319 1
d321 1
d323 8
d332 1
a332 1
    stringBuffer.append(TEXT_72);
d340 2
a341 2
    stringBuffer.append(TEXT_73);
    stringBuffer.append(TEXT_74);
d343 1
a343 1
    stringBuffer.append(TEXT_75);
d345 1
a345 1
    stringBuffer.append(TEXT_76);
d348 3
a350 3
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_78);
d352 1
a352 1
    stringBuffer.append(TEXT_79);
d354 1
a354 1
    stringBuffer.append(TEXT_80);
d357 1
a357 1
    stringBuffer.append(TEXT_81);
d359 1
a359 1
    stringBuffer.append(TEXT_82);
d361 1
a361 1
    stringBuffer.append(TEXT_83);
d363 1
a363 1
    stringBuffer.append(TEXT_84);
d365 1
a365 1
    stringBuffer.append(TEXT_85);
d367 1
a367 1
    stringBuffer.append(TEXT_86);
d369 1
a369 1
    stringBuffer.append(TEXT_87);
d374 1
a374 1
    stringBuffer.append(TEXT_88);
d376 1
a376 1
    stringBuffer.append(TEXT_89);
d378 1
a378 1
    stringBuffer.append(TEXT_90);
d380 1
a380 1
    stringBuffer.append(TEXT_91);
d382 1
a382 1
    stringBuffer.append(TEXT_92);
d386 1
a386 1
    stringBuffer.append(TEXT_93);
d388 1
a388 1
    stringBuffer.append(TEXT_94);
d390 1
a390 1
    stringBuffer.append(TEXT_95);
d392 1
a392 1
    stringBuffer.append(TEXT_96);
d396 1
a396 1
    stringBuffer.append(TEXT_97);
d398 1
a398 1
    stringBuffer.append(TEXT_98);
d400 1
a400 1
    stringBuffer.append(TEXT_99);
d402 1
a402 1
    stringBuffer.append(TEXT_100);
d404 1
a404 1
    stringBuffer.append(TEXT_101);
d408 1
a408 1
    stringBuffer.append(TEXT_102);
d410 1
a410 1
    stringBuffer.append(TEXT_103);
d412 1
a412 1
    stringBuffer.append(TEXT_104);
d422 1
a422 1
    stringBuffer.append(TEXT_105);
d424 1
a424 1
    stringBuffer.append(TEXT_106);
d426 1
a426 1
    stringBuffer.append(TEXT_107);
d430 5
a434 5
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_110);
d441 1
a441 1
    stringBuffer.append(TEXT_111);
d443 1
a443 1
    stringBuffer.append(TEXT_112);
d445 1
a445 1
    stringBuffer.append(TEXT_113);
d447 1
a447 1
    stringBuffer.append(TEXT_114);
d449 1
a449 1
    stringBuffer.append(TEXT_115);
d451 1
a451 1
    stringBuffer.append(TEXT_116);
d453 1
a453 1
    stringBuffer.append(TEXT_117);
d455 1
a455 1
    stringBuffer.append(TEXT_118);
d457 1
a457 1
    stringBuffer.append(TEXT_119);
d459 1
a459 1
    stringBuffer.append(TEXT_120);
d461 1
a461 1
    stringBuffer.append(TEXT_121);
d465 1
a465 1
    stringBuffer.append(TEXT_122);
d467 1
a467 1
    stringBuffer.append(TEXT_123);
d469 1
a469 1
    stringBuffer.append(TEXT_124);
d471 1
a471 1
    stringBuffer.append(TEXT_125);
d473 1
a473 1
    stringBuffer.append(TEXT_126);
d477 1
a477 1
    stringBuffer.append(TEXT_127);
d481 1
a481 1
    stringBuffer.append(TEXT_128);
d483 1
a483 1
    stringBuffer.append(TEXT_129);
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d25 60
a84 60
  protected final String TEXT_6 = " implements IUpdatableEditPart {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(View view) {" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_8 = " getModelChildren() {" + NL + "\t\treturn ((View) getModel()).getChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\t//XXX: install correct edit policies!";
  protected final String TEXT_9 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_10 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_11 = "() {" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ";
  protected final String TEXT_12 = " request, EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\treturn new Command(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_13 = " moveDelta = request.getMoveDelta();" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_14 = " resizeDelta = request.getSizeDelta();" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn node.getLayoutConstraint() instanceof Bounds;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_15 = " move, ";
  protected final String TEXT_16 = " resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_17 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_18 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_19 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_20 = "() {" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_21 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_22 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_23 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_24 = NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_25 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_26 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_27 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_28 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\tCompoundCommand result = new CompoundCommand();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_29 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_30 = ":" + NL + "\t\t\t\t\t\t\tresult.add(new Create";
  protected final String TEXT_31 = "Command((View) getModel(), requestEx";
  protected final String TEXT_32 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_33 = ")getConstraintFor(request)";
  protected final String TEXT_34 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_35 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn result.unwrap();" + NL + "\t\t\t\t}";
  protected final String TEXT_36 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_37 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_38 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_39 = " result = new ";
  protected final String TEXT_40 = "();" + NL + "\t\tresult.setLabel(getTitleName());" + NL + "\t\tresult.setOpaque(false);" + NL + "\t\tresult.setLayoutManager(new ";
  protected final String TEXT_41 = "());" + NL + "\t\t";
  protected final String TEXT_42 = " scrollPane = new ";
  protected final String TEXT_43 = "();" + NL + "\t\tresult.add(scrollPane);";
  protected final String TEXT_44 = NL + "\t\t";
  protected final String TEXT_45 = " viewport = new ";
  protected final String TEXT_46 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_47 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_48 = "());";
  protected final String TEXT_49 = NL + "\t\t";
  protected final String TEXT_50 = " viewport = new ";
  protected final String TEXT_51 = "();" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_52 = "();" + NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_53 = "());";
  protected final String TEXT_54 = NL + "\t\tviewport.setContents(contentPane);" + NL + "\t\tscrollPane.setViewport(viewport);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_55 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_56 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_59 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_60 = " feature, ";
  protected final String TEXT_61 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_62 = NL;
  protected final String TEXT_63 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_64 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_65 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d86 31
a116 31
  protected final String TEXT_67 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_68 = ".eINSTANCE.getView_Visible(), visibilityRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "//XXX:\t\trefreshBackgroundColor();" + NL + "//XXX:\t\trefreshForegroundColor();" + NL + "//XXX:\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = ((View)getModel()).isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL;
  protected final String TEXT_69 = NL;
  protected final String TEXT_70 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_71 = "static ";
  protected final String TEXT_72 = "class Create";
  protected final String TEXT_73 = "Command extends ";
  protected final String TEXT_74 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_75 = " parent;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_76 = " createdNode;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_77 = "Command(";
  protected final String TEXT_78 = " parent, ";
  protected final String TEXT_79 = ".CreateRequestEx request";
  protected final String TEXT_80 = ", ";
  protected final String TEXT_81 = " constraint";
  protected final String TEXT_82 = ") {" + NL + "\t\t\tthis.parent = parent;" + NL + "\t\t\tcreatedNode = ";
  protected final String TEXT_83 = ".eINSTANCE.createNode();";
  protected final String TEXT_84 = NL + "\t\t\t";
  protected final String TEXT_85 = " createdDomainElement = ";
  protected final String TEXT_86 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_87 = ".eINSTANCE.get";
  protected final String TEXT_88 = "());";
  protected final String TEXT_89 = NL + "\t\t\t";
  protected final String TEXT_90 = " createdDomainElement = ";
  protected final String TEXT_91 = ".eINSTANCE.create";
  protected final String TEXT_92 = "();";
  protected final String TEXT_93 = "\t\t\tcreatedNode.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_94 = NL + "\t\t\t";
  protected final String TEXT_95 = ".";
  protected final String TEXT_96 = ".initializeElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_97 = ".decorateView(createdNode);";
d118 15
a132 15
  protected final String TEXT_99 = " bounds = ";
  protected final String TEXT_100 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_101 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_102 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_103 = "));";
  protected final String TEXT_104 = NL + "\t\t\t";
  protected final String TEXT_105 = " domainModelEditDomain = ";
  protected final String TEXT_106 = ".getEditingDomainFor(parent.getDiagram().getElement());";
  protected final String TEXT_107 = NL + "\t\t\t";
  protected final String TEXT_108 = " compoundCommand = new ";
  protected final String TEXT_109 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_110 = ".create(domainModelEditDomain, ";
  protected final String TEXT_111 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_112 = ".eINSTANCE.get";
  protected final String TEXT_113 = "(), createdNode.getElement()));" + NL + "\t\t\tcompoundCommand.append(";
d136 13
a148 9
  protected final String TEXT_117 = "(), createdNode.getElement()));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_118 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_119 = ".create(domainModelEditDomain, ";
  protected final String TEXT_120 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_121 = ".eINSTANCE.get";
  protected final String TEXT_122 = "(), createdNode.getElement());";
  protected final String TEXT_123 = NL + "\t\t\trequest.setCreatedObject(createdNode);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tparent.insertChild(createdNode);" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tparent.getPersistedChildren().remove(createdNode);" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_124 = NL + "}" + NL;
  protected final String TEXT_125 = NL;
d182 8
d191 1
a191 1
    stringBuffer.append(TEXT_7);
d193 1
a193 1
    stringBuffer.append(TEXT_8);
d195 1
a195 1
    stringBuffer.append(TEXT_9);
d197 1
a197 1
    stringBuffer.append(TEXT_10);
d199 1
a199 1
    stringBuffer.append(TEXT_11);
d201 1
a201 1
    stringBuffer.append(TEXT_12);
d203 1
a203 1
    stringBuffer.append(TEXT_13);
d205 1
a205 1
    stringBuffer.append(TEXT_14);
d207 1
a207 1
    stringBuffer.append(TEXT_15);
d209 1
a209 1
    stringBuffer.append(TEXT_16);
d211 1
a211 1
    stringBuffer.append(TEXT_17);
d213 1
a213 1
    stringBuffer.append(TEXT_18);
d215 1
a215 1
    stringBuffer.append(TEXT_19);
d217 1
a217 1
    stringBuffer.append(TEXT_20);
d219 1
a219 1
    stringBuffer.append(TEXT_21);
d221 1
a221 1
    stringBuffer.append(TEXT_22);
d223 1
a223 1
    stringBuffer.append(TEXT_23);
d225 1
a225 1
    stringBuffer.append(TEXT_24);
d228 1
a228 1
    stringBuffer.append(TEXT_25);
d230 1
a230 1
    stringBuffer.append(TEXT_26);
d232 1
a232 1
    stringBuffer.append(TEXT_27);
d234 1
a234 1
    stringBuffer.append(TEXT_28);
d239 3
a241 3
    stringBuffer.append(TEXT_29);
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_30);
d244 1
a244 1
    stringBuffer.append(TEXT_31);
d246 1
a246 1
    stringBuffer.append(TEXT_32);
d248 1
a248 1
    stringBuffer.append(TEXT_33);
d250 1
a250 1
    stringBuffer.append(TEXT_34);
d254 1
a254 1
    stringBuffer.append(TEXT_35);
d256 1
a256 1
    stringBuffer.append(TEXT_36);
d258 1
a258 1
    stringBuffer.append(TEXT_37);
d260 1
a260 1
    stringBuffer.append(TEXT_38);
d262 1
a262 1
    stringBuffer.append(TEXT_39);
d264 1
a264 1
    stringBuffer.append(TEXT_40);
d266 1
a266 1
    stringBuffer.append(TEXT_41);
d268 1
a268 1
    stringBuffer.append(TEXT_42);
d270 1
a270 1
    stringBuffer.append(TEXT_43);
d272 1
a272 3
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Viewport"));
    stringBuffer.append(TEXT_45);
a273 6
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout"));
    stringBuffer.append(TEXT_48);
    } else {
d277 1
a277 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformViewport"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayer"));
d281 1
a281 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
d283 1
a283 1
    }
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()));
d287 1
a287 1
    stringBuffer.append(importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName()));
d289 1
d291 1
d293 1
a293 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a296 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d299 1
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d309 6
d322 2
a323 2
    stringBuffer.append(TEXT_69);
    stringBuffer.append(TEXT_70);
d325 1
a325 1
    stringBuffer.append(TEXT_71);
d327 1
a327 1
    stringBuffer.append(TEXT_72);
d330 1
a330 1
    stringBuffer.append(TEXT_73);
d332 1
a332 1
    stringBuffer.append(TEXT_74);
d334 1
a334 1
    stringBuffer.append(TEXT_75);
d336 1
a336 1
    stringBuffer.append(TEXT_76);
d339 1
a339 1
    stringBuffer.append(TEXT_77);
d341 1
a341 1
    stringBuffer.append(TEXT_78);
d343 1
a343 1
    stringBuffer.append(TEXT_79);
d345 1
a345 1
    stringBuffer.append(TEXT_80);
d347 1
a347 1
    stringBuffer.append(TEXT_81);
d349 1
a349 1
    stringBuffer.append(TEXT_82);
d351 1
a351 1
    stringBuffer.append(TEXT_83);
d356 1
a356 1
    stringBuffer.append(TEXT_84);
d358 1
a358 1
    stringBuffer.append(TEXT_85);
d360 1
a360 1
    stringBuffer.append(TEXT_86);
d362 1
a362 1
    stringBuffer.append(TEXT_87);
d364 1
a364 1
    stringBuffer.append(TEXT_88);
d368 1
a368 1
    stringBuffer.append(TEXT_89);
d370 1
a370 1
    stringBuffer.append(TEXT_90);
d372 1
a372 1
    stringBuffer.append(TEXT_91);
d374 1
a374 1
    stringBuffer.append(TEXT_92);
d378 1
a378 1
    stringBuffer.append(TEXT_93);
d380 1
a380 1
    stringBuffer.append(TEXT_94);
d382 1
a382 1
    stringBuffer.append(TEXT_95);
d384 1
a384 1
    stringBuffer.append(TEXT_96);
d386 1
a386 1
    stringBuffer.append(TEXT_97);
d390 1
a390 1
    stringBuffer.append(TEXT_98);
d392 1
a392 1
    stringBuffer.append(TEXT_99);
d394 1
a394 1
    stringBuffer.append(TEXT_100);
d404 1
a404 1
    stringBuffer.append(TEXT_101);
d406 1
a406 1
    stringBuffer.append(TEXT_102);
d408 1
a408 1
    stringBuffer.append(TEXT_103);
d412 1
a412 1
    stringBuffer.append(TEXT_104);
d414 1
a414 1
    stringBuffer.append(TEXT_105);
d416 1
a416 1
    stringBuffer.append(TEXT_106);
d423 1
a423 1
    stringBuffer.append(TEXT_107);
d425 1
a425 1
    stringBuffer.append(TEXT_108);
d427 1
a427 1
    stringBuffer.append(TEXT_109);
d429 1
a429 1
    stringBuffer.append(TEXT_110);
d431 1
a431 1
    stringBuffer.append(TEXT_111);
d433 1
a433 1
    stringBuffer.append(TEXT_112);
d435 1
a435 1
    stringBuffer.append(TEXT_113);
d437 1
a437 1
    stringBuffer.append(TEXT_114);
d439 1
a439 1
    stringBuffer.append(TEXT_115);
d441 1
a441 1
    stringBuffer.append(TEXT_116);
d443 1
a443 1
    stringBuffer.append(TEXT_117);
d447 1
a447 1
    stringBuffer.append(TEXT_118);
d449 1
a449 1
    stringBuffer.append(TEXT_119);
d451 1
a451 1
    stringBuffer.append(TEXT_120);
d453 1
a453 1
    stringBuffer.append(TEXT_121);
d455 1
a455 1
    stringBuffer.append(TEXT_122);
d459 1
a459 1
    stringBuffer.append(TEXT_123);
d463 1
a463 1
    stringBuffer.append(TEXT_124);
d465 1
a465 1
    stringBuffer.append(TEXT_125);
@

