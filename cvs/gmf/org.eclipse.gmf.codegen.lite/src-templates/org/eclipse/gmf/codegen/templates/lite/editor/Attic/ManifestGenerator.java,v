head	1.11;
access;
symbols
	v20080910-1520:1.11
	v20070525-1500:1.10
	v20070520-1200:1.9
	v20070518-1300:1.9
	v20070504-1000:1.9
	v20070427-0600:1.9
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070405-1100:1.8
	v20070403-1500:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070307-0700:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.6
	v20061214-0000:1.4
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.4
	v20061005-1700:1.3
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2007.05.29.14.55.32;	author bblajer;	state dead;
branches;
next	1.10;
commitid	2543465c3ee24567;

1.10
date	2007.05.22.17.27.40;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	69e34653280b4567;

1.9
date	2007.04.10.14.40.10;	author bblajer;	state Exp;
branches;
next	1.8;
commitid	5b02461ba1c84567;

1.8
date	2007.03.22.17.15.32;	author bblajer;	state Exp;
branches;
next	1.7;
commitid	5d864602b9b34567;

1.7
date	2006.12.25.12.00.12;	author bblajer;	state Exp;
branches;
next	1.6;
commitid	430d458fbd4b4567;

1.6
date	2006.12.21.20.35.34;	author bblajer;	state Exp;
branches;
next	1.5;
commitid	bee458af0104567;

1.5
date	2006.12.19.19.11.42;	author bblajer;	state Exp;
branches;
next	1.4;
commitid	733e4588396c4567;

1.4
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.18.27.23;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Rewrite some templates with XPand;
Adopt VisualIDRegistry from full RT.
@
text
@package org.eclipse.gmf.codegen.templates.lite.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import java.util.*;

public class ManifestGenerator
{
  protected static String nl;
  public static synchronized ManifestGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ManifestGenerator result = new ManifestGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "Manifest-Version: 1.0" + NL + "Bundle-ManifestVersion: 2" + NL + "Bundle-Name: %pluginName" + NL + "Bundle-SymbolicName: ";
  protected final String TEXT_2 = "; singleton:=true" + NL + "Bundle-Version: ";
  protected final String TEXT_3 = NL + "Bundle-ClassPath: ." + NL + "Bundle-Activator: ";
  protected final String TEXT_4 = NL + "Bundle-Vendor: %providerName" + NL + "Bundle-Localization: plugin" + NL + "Export-Package: ";
  protected final String TEXT_5 = NL + "Require-Bundle: org.eclipse.core.runtime,";
  protected final String TEXT_6 = NL + " org.eclipse.core.resources,";
  protected final String TEXT_7 = NL + " org.eclipse.ui.navigator,";
  protected final String TEXT_8 = NL + " org.eclipse.core.expressions,";
  protected final String TEXT_9 = NL + " org.eclipse.ui.ide,";
  protected final String TEXT_10 = NL + " org.eclipse.ui.views.properties.tabbed,";
  protected final String TEXT_11 = NL + " org.eclipse.jface," + NL + " org.eclipse.ui.views," + NL + " org.eclipse.ui.workbench," + NL + " org.eclipse.emf.ecore," + NL + " org.eclipse.emf.ecore.xmi," + NL + " org.eclipse.emf.edit.ui," + NL + " org.eclipse.emf.workspace,";
  protected final String TEXT_12 = NL + " org.eclipse.gef;visibility:=reexport," + NL + " org.eclipse.gmf.runtime.lite," + NL + " org.eclipse.gmf.runtime.notation," + NL + " org.eclipse.gmf.runtime.notation.edit";
  protected final String TEXT_13 = ",";
  protected final String TEXT_14 = NL + " ";
  protected final String TEXT_15 = ";visibility:=reexport";
  protected final String TEXT_16 = NL + "Eclipse-LazyStart: true";
  protected final String TEXT_17 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenPlugin genPlugin = (GenPlugin) argument;
final GenModel genModel = genPlugin.getEditorGen().getDomainGenModel();
final Set requiredPluginIDs = new LinkedHashSet();
requiredPluginIDs.add(genModel.getModelPluginID());
requiredPluginIDs.add(genModel.getEditPluginID());

for (Iterator it = genModel.getAllUsedGenPackagesWithClassifiers().iterator(); it.hasNext();) {
	GenModel nextGenModel = ((GenPackage) it.next()).getGenModel();
	if (nextGenModel.hasEditSupport()) {
		requiredPluginIDs.add(nextGenModel.getModelPluginID());
		requiredPluginIDs.add(nextGenModel.getEditPluginID());
	}
}

requiredPluginIDs.addAll(genPlugin.getAllRequiredPlugins());
Iterator requiredBundleIterator = requiredPluginIDs.iterator();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(genPlugin.getID());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(genPlugin.getVersion());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(genPlugin.getActivatorQualifiedClassName());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genPlugin.getEditorGen().getEditor().getPackageName());
    stringBuffer.append(TEXT_5);
    
if (genPlugin.getEditorGen().getApplication() == null) {

    stringBuffer.append(TEXT_6);
    
	if (genPlugin.getEditorGen().getNavigator() != null) {
    stringBuffer.append(TEXT_7);
    
		if (genPlugin.getEditorGen().getNavigator().isGenerateDomainModelNavigator()) {

    stringBuffer.append(TEXT_8);
    
		}
	}

    stringBuffer.append(TEXT_9);
    
}

    if (genPlugin.getEditorGen().getPropertySheet() != null) {
    stringBuffer.append(TEXT_10);
    }
    stringBuffer.append(TEXT_11);
    /*XXX: introduces dependency on org.eclipse.core.resources which may be problematic for RCP*/
    stringBuffer.append(TEXT_12);
    while(requiredBundleIterator.hasNext()) {
    stringBuffer.append(TEXT_13);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(requiredBundleIterator.next());
    stringBuffer.append(TEXT_15);
    }
    stringBuffer.append(TEXT_16);
    stringBuffer.append(TEXT_17);
    return stringBuffer.toString();
  }
}
@


1.10
log
@[123240] clean gmfgen uses of required plugins
@
text
@@


1.9
log
@[179970] - Adopt code generater to make use of EMF "conditional resource saving";
Correctly set charset for IFiles
@
text
@d55 1
a55 1
requiredPluginIDs.addAll(genPlugin.getRequiredPluginIDs());
@


1.8
log
@Domain model navigator from full-rt
@
text
@d29 1
a29 1
  protected final String TEXT_11 = NL + " org.eclipse.jface," + NL + " org.eclipse.ui.views," + NL + " org.eclipse.ui.workbench," + NL + " org.eclipse.emf.ecore," + NL + " org.eclipse.emf.edit.ui," + NL + " org.eclipse.emf.workspace,";
@


1.7
log
@[159567]: Use GenApplication element from gmfgen model to generate RCP code
Use as much of the runtime templates as possible (changes are isolated as aspects)
@
text
@d24 1
a24 1
  protected final String TEXT_6 = "org.eclipse.core.resources,";
d26 10
a35 9
  protected final String TEXT_8 = NL + " org.eclipse.ui.ide,";
  protected final String TEXT_9 = NL + " org.eclipse.ui.views.properties.tabbed,";
  protected final String TEXT_10 = NL + " org.eclipse.jface," + NL + " org.eclipse.ui.views," + NL + " org.eclipse.ui.workbench," + NL + " org.eclipse.emf.ecore," + NL + " org.eclipse.emf.edit.ui," + NL + " org.eclipse.emf.workspace,";
  protected final String TEXT_11 = NL + " org.eclipse.gef;visibility:=reexport," + NL + " org.eclipse.gmf.runtime.lite," + NL + " org.eclipse.gmf.runtime.notation," + NL + " org.eclipse.gmf.runtime.notation.edit";
  protected final String TEXT_12 = ",";
  protected final String TEXT_13 = NL + " ";
  protected final String TEXT_14 = ";visibility:=reexport";
  protected final String TEXT_15 = NL + "Eclipse-LazyStart: true";
  protected final String TEXT_16 = NL;
d67 3
a69 1
    if (genPlugin.getEditorGen().getApplication() == null) {
d71 2
a72 1
    if (genPlugin.getEditorGen().getNavigator() != null) {
d74 3
a76 1
    }
d78 8
a85 1
    }
d87 1
a87 1
    stringBuffer.append(TEXT_9);
d89 1
a89 1
    stringBuffer.append(TEXT_10);
d91 1
a91 1
    stringBuffer.append(TEXT_11);
a92 1
    stringBuffer.append(TEXT_12);
d94 1
d96 1
a96 1
    stringBuffer.append(TEXT_14);
a97 1
    stringBuffer.append(TEXT_15);
d99 1
@


1.6
log
@Tabbed property sheet provided for the lite runtime (if GenPropertySheet is not null);
IllegalStateException when closing editor fixed.
@
text
@d66 1
a66 1
    if (!genModel.isRichClientPlatform()) {
@


1.5
log
@Generate support for Navigator
@
text
@d27 8
a34 7
  protected final String TEXT_9 = NL + " org.eclipse.jface," + NL + " org.eclipse.ui.views," + NL + " org.eclipse.ui.workbench," + NL + " org.eclipse.emf.ecore," + NL + " org.eclipse.emf.edit.ui," + NL + " org.eclipse.emf.workspace,";
  protected final String TEXT_10 = NL + " org.eclipse.gef;visibility:=reexport," + NL + " org.eclipse.gmf.runtime.lite," + NL + " org.eclipse.gmf.runtime.notation," + NL + " org.eclipse.gmf.runtime.notation.edit";
  protected final String TEXT_11 = ",";
  protected final String TEXT_12 = NL + " ";
  protected final String TEXT_13 = ";visibility:=reexport";
  protected final String TEXT_14 = NL + "Eclipse-LazyStart: true";
  protected final String TEXT_15 = NL;
d73 1
d75 2
d78 1
a78 1
    stringBuffer.append(TEXT_10);
a79 1
    stringBuffer.append(TEXT_11);
d81 1
d83 1
a83 1
    stringBuffer.append(TEXT_13);
a84 1
    stringBuffer.append(TEXT_14);
d86 1
@


1.4
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d24 10
a33 8
  protected final String TEXT_6 = "org.eclipse.core.resources," + NL + " org.eclipse.ui.ide,";
  protected final String TEXT_7 = NL + " org.eclipse.jface," + NL + " org.eclipse.ui.views," + NL + " org.eclipse.ui.workbench," + NL + " org.eclipse.emf.ecore," + NL + " org.eclipse.emf.edit.ui," + NL + " org.eclipse.emf.workspace,";
  protected final String TEXT_8 = NL + " org.eclipse.gef;visibility:=reexport," + NL + " org.eclipse.gmf.runtime.lite," + NL + " org.eclipse.gmf.runtime.notation," + NL + " org.eclipse.gmf.runtime.notation.edit";
  protected final String TEXT_9 = ",";
  protected final String TEXT_10 = NL + " ";
  protected final String TEXT_11 = ";visibility:=reexport";
  protected final String TEXT_12 = NL + "Eclipse-LazyStart: true";
  protected final String TEXT_13 = NL;
d67 2
a69 2
    stringBuffer.append(TEXT_7);
    /*XXX: introduces dependency on org.eclipse.core.resources which may be problematic for RCP*/
d71 1
a71 1
    while(requiredBundleIterator.hasNext()) {
d73 1
d75 1
a75 1
    stringBuffer.append(requiredBundleIterator.next());
a76 1
    }
d78 1
d80 3
@


1.3
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d26 1
a26 1
  protected final String TEXT_8 = NL + " org.eclipse.gef;visibility:=reexport," + NL + " org.eclipse.gmf.runtime.notation," + NL + " org.eclipse.gmf.runtime.notation.edit";
@


1.2
log
@[bblajer] #114200 Provide an option to generate RCP application - added RCP support for pure-GEF (lite) generator
@
text
@d25 7
a31 6
  protected final String TEXT_7 = NL + " org.eclipse.jface," + NL + " org.eclipse.ui.views," + NL + " org.eclipse.ui.workbench," + NL + " org.eclipse.emf.ecore," + NL + " org.eclipse.emf.edit.ui," + NL + " org.eclipse.gef;visibility:=reexport," + NL + " org.eclipse.gmf.runtime.notation," + NL + " org.eclipse.gmf.runtime.notation.edit";
  protected final String TEXT_8 = ",";
  protected final String TEXT_9 = NL + " ";
  protected final String TEXT_10 = ";visibility:=reexport";
  protected final String TEXT_11 = NL + "Eclipse-LazyStart: true";
  protected final String TEXT_12 = NL;
d67 2
a69 1
    stringBuffer.append(TEXT_8);
d71 1
d73 1
a73 1
    stringBuffer.append(TEXT_10);
a74 1
    stringBuffer.append(TEXT_11);
d76 1
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d23 8
a30 6
  protected final String TEXT_5 = NL + "Require-Bundle: org.eclipse.core.runtime," + NL + " org.eclipse.jface," + NL + " org.eclipse.ui.views," + NL + " org.eclipse.ui.workbench," + NL + " org.eclipse.emf.ecore," + NL + " org.eclipse.emf.edit.ui," + NL + " org.eclipse.gef;visibility:=reexport," + NL + " org.eclipse.gmf.runtime.notation," + NL + " org.eclipse.gmf.runtime.notation.edit";
  protected final String TEXT_6 = ",";
  protected final String TEXT_7 = NL + " ";
  protected final String TEXT_8 = ";visibility:=reexport";
  protected final String TEXT_9 = NL + "Eclipse-LazyStart: true";
  protected final String TEXT_10 = NL;
d62 1
a62 1
    while(requiredBundleIterator.hasNext()) {
d64 1
d66 1
a66 1
    stringBuffer.append(requiredBundleIterator.next());
a67 1
    }
d69 1
d71 3
@

