head	1.4;
access;
symbols
	v20080910-1520:1.4
	v20061005-1700:1.2.2.1
	v20060824-1600:1.2.2.1
	v20060713-1700:1.2.2.1
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.09.01.16.14.09;	author atikhomirov;	state dead;
branches;
next	1.3;

1.3
date	2006.07.04.15.44.10;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;

1.2.2.1
date	2006.07.04.15.54.41;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@package org.eclipse.gmf.codegen.templates.lite.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class PropertySourceProviderGenerator
{
  protected static String nl;
  public static synchronized PropertySourceProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    PropertySourceProviderGenerator result = new PropertySourceProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " implements ";
  protected final String TEXT_6 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = " adapterFactoryContentProvider;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_8 = "(";
  protected final String TEXT_9 = " domainAdapterFactory) {" + NL + "\t\tadapterFactoryContentProvider = new ";
  protected final String TEXT_10 = "(domainAdapterFactory);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_11 = " getPropertySource(Object object) {" + NL + "\t\tif (object instanceof ";
  protected final String TEXT_12 = ") {" + NL + "\t\t\treturn (";
  protected final String TEXT_13 = ") object;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_14 = " view = getNotationElement(object);" + NL + "\t\tif (view == null) {" + NL + "\t\t\treturn adapterFactoryContentProvider.getPropertySource(object);" + NL + "\t\t}" + NL + "\t\t//XXX: compose with view properties" + NL + "\t\t";
  protected final String TEXT_15 = " domainElement = view.getElement();" + NL + "\t\tif (domainElement == null && view instanceof ";
  protected final String TEXT_16 = ") {" + NL + "\t\t\t";
  protected final String TEXT_17 = " edge = (";
  protected final String TEXT_18 = ") view;" + NL + "\t\t\tdomainElement = edge.getTarget().getElement();" + NL + "\t\t}" + NL + "\t\treturn adapterFactoryContentProvider.getPropertySource(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_19 = " getNotationElement(Object object) {" + NL + "\t\t";
  protected final String TEXT_20 = " view = null;" + NL + "\t\tif (object instanceof ";
  protected final String TEXT_21 = ") {" + NL + "\t\t\tview = (";
  protected final String TEXT_22 = ") object;" + NL + "\t\t} else if (object instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t";
  protected final String TEXT_24 = " editPart = (";
  protected final String TEXT_25 = ") object;" + NL + "\t\t\tif (editPart.getModel() instanceof ";
  protected final String TEXT_26 = ") {" + NL + "\t\t\t\tview = (";
  protected final String TEXT_27 = ") editPart.getModel();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (view != null && \"";
  protected final String TEXT_28 = "\".equals(";
  protected final String TEXT_29 = ".getModelID(view))) {" + NL + "\t\t\treturn view;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_30 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getPropertyProviderClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySourceProvider"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getPropertyProviderClassName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.AdapterFactory"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_30);
    return stringBuffer.toString();
  }
}
@


1.3
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d32 16
a47 13
  protected final String TEXT_15 = " domainElement = view.getElement();" + NL + "\t\treturn adapterFactoryContentProvider.getPropertySource(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_16 = " getNotationElement(Object object) {" + NL + "\t\t";
  protected final String TEXT_17 = " view = null;" + NL + "\t\tif (object instanceof ";
  protected final String TEXT_18 = ") {" + NL + "\t\t\tview = (";
  protected final String TEXT_19 = ") object;" + NL + "\t\t} else if (object instanceof ";
  protected final String TEXT_20 = ") {" + NL + "\t\t\t";
  protected final String TEXT_21 = " editPart = (";
  protected final String TEXT_22 = ") object;" + NL + "\t\t\tif (editPart.getModel() instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t\tview = (";
  protected final String TEXT_24 = ") editPart.getModel();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (view != null && \"";
  protected final String TEXT_25 = "\".equals(";
  protected final String TEXT_26 = ".getModelID(view))) {" + NL + "\t\t\treturn view;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_27 = NL;
d92 1
a92 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d94 1
a94 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d96 1
a96 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d100 6
d107 1
a107 1
    stringBuffer.append(TEXT_20);
d109 1
a109 1
    stringBuffer.append(TEXT_21);
d111 1
a111 1
    stringBuffer.append(TEXT_22);
d113 1
a113 1
    stringBuffer.append(TEXT_23);
d115 1
a115 1
    stringBuffer.append(TEXT_24);
d117 1
a117 1
    stringBuffer.append(TEXT_25);
d119 1
a119 1
    stringBuffer.append(TEXT_26);
d121 1
a121 1
    stringBuffer.append(TEXT_27);
@


1.2.2.1
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@d32 13
a44 16
  protected final String TEXT_15 = " domainElement = view.getElement();" + NL + "\t\tif (domainElement == null && view instanceof ";
  protected final String TEXT_16 = ") {" + NL + "\t\t\t";
  protected final String TEXT_17 = " edge = (";
  protected final String TEXT_18 = ") view;" + NL + "\t\t\tdomainElement = edge.getTarget().getElement();" + NL + "\t\t}" + NL + "\t\treturn adapterFactoryContentProvider.getPropertySource(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_19 = " getNotationElement(Object object) {" + NL + "\t\t";
  protected final String TEXT_20 = " view = null;" + NL + "\t\tif (object instanceof ";
  protected final String TEXT_21 = ") {" + NL + "\t\t\tview = (";
  protected final String TEXT_22 = ") object;" + NL + "\t\t} else if (object instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t";
  protected final String TEXT_24 = " editPart = (";
  protected final String TEXT_25 = ") object;" + NL + "\t\t\tif (editPart.getModel() instanceof ";
  protected final String TEXT_26 = ") {" + NL + "\t\t\t\tview = (";
  protected final String TEXT_27 = ") editPart.getModel();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (view != null && \"";
  protected final String TEXT_28 = "\".equals(";
  protected final String TEXT_29 = ".getModelID(view))) {" + NL + "\t\t\treturn view;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_30 = NL;
d89 1
a89 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d91 1
a91 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d93 1
a93 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d97 1
a97 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d99 1
a99 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d101 2
a103 2
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d105 1
a105 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d107 1
a107 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d109 1
a109 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d111 1
a111 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a112 6
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_30);
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d42 3
a44 6
  protected final String TEXT_25 = "\".equals(getModelID(view))) {" + NL + "\t\t\treturn view;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_26 = NL;
  protected final String TEXT_27 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(";
  protected final String TEXT_28 = " containerView) {" + NL + "\t\t";
  protected final String TEXT_29 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL + "}";
  protected final String TEXT_30 = NL;
d109 1
d111 1
a112 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_29);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_30);
@

