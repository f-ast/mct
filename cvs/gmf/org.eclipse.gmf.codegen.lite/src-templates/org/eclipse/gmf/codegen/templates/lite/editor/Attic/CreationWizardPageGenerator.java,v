head	1.14;
access;
symbols
	v20080910-1520:1.14
	RC3_20:1.13
	v20070614-1400:1.13
	v20070608-1300:1.13
	v20070601-1400:1.12
	v20070525-1500:1.12
	v20070520-1200:1.12
	v20070518-1300:1.12
	v20070504-1000:1.12
	v20070427-0600:1.12
	v20070420-1000:1.12
	v20070413-1300:1.12
	v20070405-1100:1.11
	v20070403-1500:1.11
	v20070330-1300:1.11
	v20060330-1300:1.11
	v20070322-1100:1.11
	v20060316-0600:1.11
	v20070307-0700:1.11
	v20070228-2000:1.11
	v20070221-1500:1.11
	v20070208-1800:1.11
	v20070103-0300:1.11
	M4_20:1.11
	v20061222-1800:1.10
	v20061214-0000:1.9
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.8
	v20061005-1700:1.2.2.1
	M1_20:1.3
	v20060904-1500:1.3
	v20060824-1600:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2007.06.20.10.16.10;	author bblajer;	state dead;
branches;
next	1.13;
commitid	37dd4678fe694567;

1.13
date	2007.06.04.16.20.30;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	17cf46643bca4567;

1.12
date	2007.04.10.14.40.10;	author bblajer;	state Exp;
branches;
next	1.11;
commitid	5b02461ba1c84567;

1.11
date	2006.12.25.12.00.12;	author bblajer;	state Exp;
branches;
next	1.10;
commitid	430d458fbd4b4567;

1.10
date	2006.12.19.19.09.57;	author bblajer;	state Exp;
branches;
next	1.9;
commitid	9c1458839044567;

1.9
date	2006.11.23.18.57.16;	author bblajer;	state Exp;
branches;
next	1.8;
commitid	66934565ef0a4567;

1.8
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.02.12.29.34;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.29.16.32.04;	author rgronback;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.22.16.57.21;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.21.10.12.02;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.18.27.23;	author atikhomirov;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;

1.2.2.1
date	2006.09.29.16.38.28;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Rewrite /editor/* templates in XPand;
Use common template to generate code that creates an editing domain in various places;
OpenDiagramEditPolicy: package statement was missing.
@
text
@package org.eclipse.gmf.codegen.templates.lite.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.emf.ecore.*;

public class CreationWizardPageGenerator
{
  protected static String nl;
  public static synchronized CreationWizardPageGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    CreationWizardPageGenerator result = new CreationWizardPageGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_2 = " extends ";
  protected final String TEXT_3 = " {";
  protected final String TEXT_4 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Text fileField;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate URI createdDiagramFileURI;";
  protected final String TEXT_5 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_6 = " createdDiagramFile;";
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_8 = NL + "\tpublic ";
  protected final String TEXT_9 = "() {" + NL + "\t\tsuper(\"CreationWizardPage\"); //$NON-NLS-1$";
  protected final String TEXT_10 = NL + "\tpublic ";
  protected final String TEXT_11 = "(";
  protected final String TEXT_12 = " selection) {" + NL + "\t\tsuper(\"CreationWizardPage\", selection);\t//$NON-NLS-1$";
  protected final String TEXT_13 = NL + "\t\tsetTitle(\"Create ";
  protected final String TEXT_14 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDescription(\"Create a new ";
  protected final String TEXT_15 = " diagram.\"); //$NON-NLS-1$" + NL + "\t}" + NL;
  protected final String TEXT_16 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent)" + NL + "\t{" + NL + "\t\tComposite composite = new Composite(parent, SWT.NONE);" + NL + "\t\t{" + NL + "\t\t\tGridLayout layout = new GridLayout();" + NL + "\t\t\tlayout.numColumns = 1;" + NL + "\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\tGridData data = new GridData();" + NL + "\t\t\tdata.verticalAlignment = GridData.FILL;" + NL + "\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\tdata.horizontalAlignment = GridData.FILL;" + NL + "\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t}" + NL + "\t\tLabel resourceURILabel = new Label(composite, SWT.LEFT);" + NL + "\t\t{" + NL + "\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\tGridData data = new GridData();" + NL + "\t\t\tdata.horizontalAlignment = GridData.FILL;" + NL + "\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t}" + NL + "" + NL + "\t\tComposite fileComposite = new Composite(composite, SWT.NONE);" + NL + "\t\t{" + NL + "\t\t\tGridData data = new GridData();" + NL + "\t\t\tdata.horizontalAlignment = GridData.FILL;" + NL + "\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\tGridLayout layout = new GridLayout();" + NL + "\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tlayout.numColumns = 2;" + NL + "\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t}" + NL + "" + NL + "\t\tfileField = new ";
  protected final String TEXT_17 = "(fileComposite, SWT.BORDER);" + NL + "\t\t{" + NL + "\t\t\tGridData data = new GridData();" + NL + "\t\t\tdata.horizontalAlignment = GridData.FILL;" + NL + "\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\tfileField.setLayoutData(data);" + NL + "\t\t}" + NL + "" + NL + "\t\tfileField.addModifyListener(validator);" + NL + "\t\t";
  protected final String TEXT_18 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_19 = "(fileComposite, SWT.PUSH);" + NL + "\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "  " + NL + "\t\tresourceURIBrowseFileSystemButton.addSelectionListener" + NL + "\t\t\t(new ";
  protected final String TEXT_20 = "() {" + NL + "\t\t\t\t public void widgetSelected(";
  protected final String TEXT_21 = " event) {" + NL + "\t\t\t\t\t String fileExtension = \"";
  protected final String TEXT_22 = "\";" + NL + "\t\t\t\t\t String filePath = ";
  protected final String TEXT_23 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_24 = ".OPEN);" + NL + "\t\t\t\t\t if (filePath != null) {" + NL + "\t\t\t\t\t\t if (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t filePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t }" + NL + "\t\t\t\t\t\t fileField.setText(filePath);" + NL + "\t\t\t\t\t }" + NL + "\t\t\t\t }" + NL + "\t\t\t }); " + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t\tsetControl(composite);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ModifyListener validator =" + NL + "\t\tnew ModifyListener() {" + NL + "\t\t\tpublic void modifyText(ModifyEvent e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL;
  protected final String TEXT_25 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t protected boolean validatePage() {";
  protected final String TEXT_26 = NL + "\t\tURI diagramFileURI = getDiagramFileURI();" + NL + "\t\tif (diagramFileURI == null || diagramFileURI.isEmpty()) {" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\tif (diagramFileURI.isFile()) {" + NL + "\t\t\tFile diagramFile = new File(diagramFileURI.toFileString());" + NL + "\t\t\tif (diagramFile.exists()) {" + NL + "\t\t\t\tsetErrorMessage(\"Diagram File already exists: \" + diagramFile);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_27 = NL + "\t\tif (!super.validatePage()) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tString fileName = getFileName();" + NL + "" + NL + "\t\tif (fileName == null) {" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t";
  protected final String TEXT_28 = " path = getContainerFullPath().append(fileName);" + NL + "\t\tif (path.getFileExtension() == null) {" + NL + "\t\t\tpath = path.addFileExtension(\"";
  protected final String TEXT_29 = "\");\t//$NON-NLS-1$" + NL + "\t\t}" + NL + "" + NL + "\t\tif (";
  protected final String TEXT_30 = ".getWorkspace().getRoot().exists(path)) {" + NL + "\t\t\tsetErrorMessage(\"Diagram File already exists: \" + path.toOSString());" + NL + "\t\t\treturn false;" + NL + "\t\t}";
  protected final String TEXT_31 = NL + "\t\tString requiredExt = \"";
  protected final String TEXT_32 = "\";";
  protected final String TEXT_33 = NL + "\t\tString enteredExt = diagramFileURI.fileExtension();";
  protected final String TEXT_34 = NL + "\t\tString enteredExt = path.getFileExtension();";
  protected final String TEXT_35 = NL + "\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt); " + NL + "\t\t\treturn false;" + NL + "\t\t}";
  protected final String TEXT_36 = NL + "\t\t\tURI modelFileURI = getModelFileURI();" + NL + "\t\t\tFile modelFile = new File(modelFileURI.toFileString());" + NL + "\t\t\tif (modelFile.exists()) {" + NL + "\t\t\t\tsetErrorMessage(\"Model File already exists: \" + modelFile);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_37 = NL + "\t\t\tpath = path.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_38 = "\"); //$NON-NLS-1$" + NL + "\t\t\tif (";
  protected final String TEXT_39 = ".getWorkspace().getRoot().exists(path)) {" + NL + "\t\t\t\tsetErrorMessage(\"Model File already exists: \" + path.lastSegment());" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_40 = NL + "\t\tsetErrorMessage(null);" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_41 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getCreatedDiagramFileURI() {" + NL + "\t\treturn createdDiagramFileURI;" + NL + "\t}";
  protected final String TEXT_42 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile getCreatedDiagramFile() {" + NL + "\t\treturn createdDiagramFile;" + NL + "\t}";
  protected final String TEXT_43 = NL;
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate URI getDiagramFileURI() {" + NL + "\t\ttry {" + NL + "\t\t\treturn URI.createFileURI(fileField.getText());" + NL + "\t\t} catch (Exception exception) {" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_45 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate URI getModelFileURI() {" + NL + "\t\tURI diagramFileURI = getDiagramFileURI();" + NL + "\t\tif (diagramFileURI == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFileURI.trimFileExtension().appendFileExtension(\"";
  protected final String TEXT_46 = "\");" + NL + "\t}";
  protected final String TEXT_47 = NL + NL + "\t/**" + NL + "\t * Performs the operations necessary to create and open the diagram" + NL + "\t * @@return boolean indicating whether the creation and opening the Diagram was successful " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean finish() {" + NL + "\t\tfinal boolean[] result = new boolean[1];";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = " op = new IRunnableWithProgress() {" + NL + "\t\t\tpublic void run(IProgressMonitor monitor) {";
  protected final String TEXT_50 = NL + "\t\t";
  protected final String TEXT_51 = " op = new WorkspaceModifyOperation(null) {" + NL + "\t\t\tprotected void execute(IProgressMonitor monitor) {";
  protected final String TEXT_52 = NL + "\t\t\t\tresult[0] = doFinish(monitor);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (";
  protected final String TEXT_53 = " e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\t";
  protected final String TEXT_54 = ".openError(" + NL + "\t\t\t\t\tgetContainer().getShell()," + NL + "\t\t\t\t\t\"Creation Problems\"," + NL + "\t\t\t\t\tnull,\t// no special message" + NL + "\t\t\t\t\t((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t}" + NL + "\t\t\telse {" + NL + "\t\t\t\t// CoreExceptions are handled above, but unexpected runtime exceptions and errors may still occur." + NL + "\t\t\t\t";
  protected final String TEXT_55 = ".getInstance().getLog().log(new ";
  protected final String TEXT_56 = "(";
  protected final String TEXT_57 = ".ERROR, ";
  protected final String TEXT_58 = ".ID, 0, \"Creation failed\", e.getTargetException()));" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn result[0];" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@param monitor the <code>IProgressMonitor</code> to use to indicate progress and check for cancellation" + NL + "\t * @@return boolean indicating whether the diagram was created and opened successfully" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean doFinish(IProgressMonitor monitor) {";
  protected final String TEXT_59 = NL + "\t\t";
  protected final String TEXT_60 = " = createDiagramFile(monitor);" + NL + "\t\treturn ";
  protected final String TEXT_61 = " != null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_62 = NL + "\tprivate URI createDiagramFile(IProgressMonitor monitor) {";
  protected final String TEXT_63 = NL + "\tprivate IFile createDiagramFile(IProgressMonitor monitor) {";
  protected final String TEXT_64 = NL + "\t\t";
  protected final String TEXT_65 = " editingDomain = ";
  protected final String TEXT_66 = ".INSTANCE.createEditingDomain();" + NL + "\t\t";
  protected final String TEXT_67 = " resourceSet = editingDomain.getResourceSet();";
  protected final String TEXT_68 = NL + "\t\tfinal ";
  protected final String TEXT_69 = " diagramResource = resourceSet.createResource(getDiagramFileURI());";
  protected final String TEXT_70 = NL + "\t\tIPath diagramFilePath = getContainerFullPath().append(getFileName());" + NL + "\t\tif (diagramFilePath.getFileExtension() == null) {" + NL + "\t\t\tdiagramFilePath = diagramFilePath.addFileExtension(\"";
  protected final String TEXT_71 = "\");\t\t//$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tfinal IFile diagramFile = ResourcesPlugin.getWorkspace().getRoot().getFile(diagramFilePath);" + NL + "\t\tfinal ";
  protected final String TEXT_72 = " diagramResource = resourceSet.createResource(";
  protected final String TEXT_73 = ".createPlatformResourceURI(diagramFilePath.toString(), true));";
  protected final String TEXT_74 = NL + "\t\tfinal Resource modelResource = resourceSet.createResource(getModelFileURI());";
  protected final String TEXT_75 = NL + "\t\tIPath modelFilePath = diagramFilePath.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_76 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal IFile modelFile = ResourcesPlugin.getWorkspace().getRoot().getFile(modelFilePath);" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(";
  protected final String TEXT_77 = ".createPlatformResourceURI(modelFilePath.toString(), true));";
  protected final String TEXT_78 = NL + NL + "\t\tif (diagramResource != null";
  protected final String TEXT_79 = " && modelResource != null";
  protected final String TEXT_80 = ") {" + NL + "\t\t\t";
  protected final String TEXT_81 = " saveOperation = new ";
  protected final String TEXT_82 = "(editingDomain, \"Create diagram\") {" + NL + "\t\t\t\tpublic ";
  protected final String TEXT_83 = " doExecute(";
  protected final String TEXT_84 = " monitor, ";
  protected final String TEXT_85 = " info) throws ";
  protected final String TEXT_86 = " {";
  protected final String TEXT_87 = NL + "\t\t\t\t\t";
  protected final String TEXT_88 = " model = ";
  protected final String TEXT_89 = ".eINSTANCE.create";
  protected final String TEXT_90 = "();";
  protected final String TEXT_91 = NL + "\t\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_92 = NL + "\t\t\t\t\tmodelResource.getContents().add(";
  protected final String TEXT_93 = "(";
  protected final String TEXT_94 = ") ";
  protected final String TEXT_95 = "model);";
  protected final String TEXT_96 = NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tmodelResource.save(";
  protected final String TEXT_97 = ".getSaveOptions());" + NL + "\t\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\t\thandleSaveException(e);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_98 = NL + "\t\t\t\t\tdiagramResource.getContents().add(";
  protected final String TEXT_99 = "(";
  protected final String TEXT_100 = ") ";
  protected final String TEXT_101 = "model);";
  protected final String TEXT_102 = NL + "\t\t\t\t\t";
  protected final String TEXT_103 = " diagram = ";
  protected final String TEXT_104 = ".eINSTANCE.createDiagram();" + NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_105 = "(";
  protected final String TEXT_106 = ") ";
  protected final String TEXT_107 = "model);" + NL + "\t\t\t\t\t";
  protected final String TEXT_108 = ".INSTANCE.decorateView(diagram);" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tdiagramResource.save(";
  protected final String TEXT_109 = ".getSaveOptions());" + NL + "\t\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\t\thandleSaveException(e);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_110 = ".OK_STATUS;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\ttry {" + NL + "\t\t\t\tsaveOperation.execute(new ";
  protected final String TEXT_111 = "(), null);" + NL + "\t\t\t} catch (";
  protected final String TEXT_112 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_113 = ".getInstance().logError(\"exception occurred while creating the diagram\", e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_114 = NL + "\t\t\t";
  protected final String TEXT_115 = ".setCharset(diagramFile);";
  protected final String TEXT_116 = NL + "\t\t\t";
  protected final String TEXT_117 = ".setCharset(modelFile);";
  protected final String TEXT_118 = NL + "\t\t}";
  protected final String TEXT_119 = NL + "\t\tboolean result = ";
  protected final String TEXT_120 = ".openEditor(getDiagramFileURI()) != null;";
  protected final String TEXT_121 = NL + "\t\tboolean result = ";
  protected final String TEXT_122 = ".showView(getDiagramFileURI()) != null;";
  protected final String TEXT_123 = NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();";
  protected final String TEXT_124 = NL + "\t\ttry {" + NL + "\t\t\t";
  protected final String TEXT_125 = ".openEditor(";
  protected final String TEXT_126 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);" + NL + "\t\t} catch (";
  protected final String TEXT_127 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_128 = ".getInstance().getLog().log(e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_129 = NL + "\t\t";
  protected final String TEXT_130 = " diagramFileURI = diagramResource.getURI();" + NL + "\t\tboolean result = ";
  protected final String TEXT_131 = ".showView(diagramFileURI) != null;" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_132 = NL + "\t}" + NL;
  protected final String TEXT_133 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_134 = " createInitialRoot(";
  protected final String TEXT_135 = " model) {";
  protected final String TEXT_136 = NL + "\t\t";
  protected final String TEXT_137 = " docRoot = ";
  protected final String TEXT_138 = ".";
  protected final String TEXT_139 = ".create";
  protected final String TEXT_140 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_141 = "(model);" + NL + "\t\treturn docRoot;" + NL + "\t}" + NL;
  protected final String TEXT_142 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void handleSaveException(IOException e) throws ";
  protected final String TEXT_143 = " {" + NL + "\t\tthrow new ";
  protected final String TEXT_144 = "(\"Save failed\", e);" + NL + "\t}" + NL + "}";
  protected final String TEXT_145 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final GenPlugin genPlugin = editorGen.getPlugin();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final boolean isRichClientPlatform = genDiagram.getEditorGen().getApplication() != null;

importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);

importManager.addImport("org.eclipse.core.runtime.IProgressMonitor");
importManager.addImport("org.eclipse.core.runtime.CoreException");
importManager.addImport("java.io.IOException");
importManager.addImport("org.eclipse.emf.common.util.URI");
if (isRichClientPlatform) {
importManager.addImport("java.io.File");
importManager.addImport("org.eclipse.swt.widgets.Composite");
importManager.addImport("org.eclipse.swt.widgets.Label");
importManager.addImport("org.eclipse.swt.widgets.Text");
importManager.addImport("org.eclipse.swt.events.ModifyListener");
importManager.addImport("org.eclipse.swt.events.ModifyEvent");
importManager.addImport("org.eclipse.swt.layout.GridLayout");
importManager.addImport("org.eclipse.swt.layout.GridData");
}

    stringBuffer.append(TEXT_1);
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(importManager.getImportedName(isRichClientPlatform ? "org.eclipse.jface.wizard.WizardPage" : "org.eclipse.ui.dialogs.WizardNewFileCreationPage"));
    stringBuffer.append(TEXT_3);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_4);
    
} else {

    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_6);
    
}

    stringBuffer.append(TEXT_7);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_8);
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
    stringBuffer.append(TEXT_9);
    
} else {

    stringBuffer.append(TEXT_10);
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_12);
    
}

    stringBuffer.append(TEXT_13);
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
    stringBuffer.append(TEXT_14);
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
    stringBuffer.append(TEXT_15);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionAdapter"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_24);
    
}

    stringBuffer.append(TEXT_25);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_26);
    
} else {

    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
    stringBuffer.append(TEXT_30);
    
}

    stringBuffer.append(TEXT_31);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_32);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_33);
    
} else {

    stringBuffer.append(TEXT_34);
    
}

    stringBuffer.append(TEXT_35);
    
if (!editorGen.isSameFileForDiagramAndModel()) {
	if (isRichClientPlatform) {

    stringBuffer.append(TEXT_36);
    
	} else {

    stringBuffer.append(TEXT_37);
    stringBuffer.append(editorGen.getDomainFileExtension());
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
    stringBuffer.append(TEXT_39);
    
	}
}

    stringBuffer.append(TEXT_40);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_41);
    
} else {

    stringBuffer.append(TEXT_42);
    
}

    stringBuffer.append(TEXT_43);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_44);
    
	if (!editorGen.isSameFileForDiagramAndModel()) {

    stringBuffer.append(TEXT_45);
    stringBuffer.append(editorGen.getDomainFileExtension());
    stringBuffer.append(TEXT_46);
    
	}
}

    stringBuffer.append(TEXT_47);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.operation.IRunnableWithProgress"));
    stringBuffer.append(TEXT_49);
    
} else {

    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyOperation"));
    stringBuffer.append(TEXT_51);
    
}

    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("java.lang.reflect.InvocationTargetException"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(genPlugin.getActivatorClassName());
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(genPlugin.getActivatorClassName());
    stringBuffer.append(TEXT_58);
    
String createdVar = isRichClientPlatform ? "createdDiagramFileURI" : "createdDiagramFile";

    stringBuffer.append(TEXT_59);
    stringBuffer.append(createdVar);
    stringBuffer.append(TEXT_60);
    stringBuffer.append(createdVar);
    stringBuffer.append(TEXT_61);
    if (isRichClientPlatform) {
    stringBuffer.append(TEXT_62);
    } else {
    stringBuffer.append(TEXT_63);
    }
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.WorkspaceEditingDomainFactory"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
    stringBuffer.append(TEXT_67);
    
if (isRichClientPlatform) {

    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_69);
    
} else {

    stringBuffer.append(TEXT_70);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_73);
    
}

    
final boolean standaloneDomainModel = !editorGen.isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;
if (standaloneDomainModel) {
	if (isRichClientPlatform) {

    stringBuffer.append(TEXT_74);
    
	} else {

    stringBuffer.append(TEXT_75);
    stringBuffer.append(editorGen.getDomainFileExtension());
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_77);
    
	}
}

    stringBuffer.append(TEXT_78);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_79);
    }
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.commands.ExecutionException"));
    stringBuffer.append(TEXT_86);
    
if (genDiagram.getDomainDiagramElement() != null) {

    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
    stringBuffer.append(TEXT_90);
    
	if (standaloneDomainModel) {
		if (genDiagram.getDomainDiagramElement().getGenPackage().hasDocumentRoot()) {

    stringBuffer.append(TEXT_91);
    
		} else {

    stringBuffer.append(TEXT_92);
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_94);
    }
    stringBuffer.append(TEXT_95);
    
		}

    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_97);
    
	} else {

    stringBuffer.append(TEXT_98);
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_100);
    }
    stringBuffer.append(TEXT_101);
    
	}
}

    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_104);
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_106);
    }
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.commands.ExecutionException"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(genPlugin.getActivatorClassName());
    stringBuffer.append(TEXT_113);
    
if (!isRichClientPlatform) {

    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_115);
    
	if (standaloneDomainModel) {

    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_117);
    
	}
}

    stringBuffer.append(TEXT_118);
    
if (isRichClientPlatform) {

    
	if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {

    stringBuffer.append(TEXT_119);
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
    stringBuffer.append(TEXT_120);
    
	} else {

    stringBuffer.append(TEXT_121);
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
    stringBuffer.append(TEXT_122);
    
	}

    stringBuffer.append(TEXT_123);
    
} else {

    
	if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {

    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ide.IDE"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(genPlugin.getActivatorClassName());
    stringBuffer.append(TEXT_128);
    
	} else {

    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
    stringBuffer.append(TEXT_131);
    
	}

    
}

    stringBuffer.append(TEXT_132);
    
if (standaloneDomainModel && genDiagram.getDomainDiagramElement().getGenPackage().hasDocumentRoot()) {

    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_135);
    
	// would be better to get GenClass for docRoot and directly use setter
	GenClass docRoot = genDiagram.getDomainDiagramElement().getGenPackage().getDocumentRoot();
	String featureAccessor = "null"; // Alternative is: genDiagram.getDomainDiagramElement().getInterfaceName(); although it's a hack. Seems better to fail right away
	for (java.util.Iterator it = docRoot.getGenFeatures().iterator(); it.hasNext(); ) {
		GenFeature genFeature = (GenFeature) it.next();
		boolean unspecifiedUpperBound = ETypedElement.UNSPECIFIED_MULTIPLICITY == genFeature.getEcoreFeature().getUpperBound();
		// Perhaps, makes sense to check instanceof EReference && isContainment
		if (genFeature.isSet() && unspecifiedUpperBound && genDiagram.getDomainDiagramElement().equals(genFeature.getTypeGenClass())) {
			featureAccessor = genFeature.getAccessorName();
			break;
		}
	} /*for*/

    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName(docRoot.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getGenPackage().getFactoryInstanceName());
    stringBuffer.append(TEXT_139);
    stringBuffer.append(docRoot.getName());
    stringBuffer.append(TEXT_140);
    stringBuffer.append(featureAccessor);
    stringBuffer.append(TEXT_141);
    
} /*if standaloneDomainModel && genDiagram.getDomainDiagramElement().getGenPackage().hasDocumentRoot()*/

    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.commands.ExecutionException"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.commands.ExecutionException"));
    stringBuffer.append(TEXT_144);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_145);
    return stringBuffer.toString();
  }
}
@


1.13
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.12
log
@[179970] - Adopt code generater to make use of EMF "conditional resource saving";
Correctly set charset for IFiles
@
text
@d19 1
a19 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.11
log
@[159567]: Use GenApplication element from gmfgen model to generate RCP code
Use as much of the runtime templates as possible (changes are isolated as aspects)
@
text
@d91 57
a147 57
  protected final String TEXT_72 = " diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFilePath.toString(), true));";
  protected final String TEXT_73 = NL + "\t\tfinal Resource modelResource = resourceSet.createResource(getModelFileURI());";
  protected final String TEXT_74 = NL + "\t\tIPath modelFilePath = diagramFilePath.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_75 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFilePath.toString(), true));";
  protected final String TEXT_76 = NL + NL + "\t\tif (diagramResource != null";
  protected final String TEXT_77 = " && modelResource != null";
  protected final String TEXT_78 = ") {" + NL + "\t\t\t";
  protected final String TEXT_79 = " saveOperation = new ";
  protected final String TEXT_80 = "(editingDomain, \"Create diagram\") {" + NL + "\t\t\t\tpublic ";
  protected final String TEXT_81 = " doExecute(";
  protected final String TEXT_82 = " monitor, ";
  protected final String TEXT_83 = " info) throws ";
  protected final String TEXT_84 = " {";
  protected final String TEXT_85 = NL + "\t\t\t\t\t";
  protected final String TEXT_86 = " model = ";
  protected final String TEXT_87 = ".eINSTANCE.create";
  protected final String TEXT_88 = "();";
  protected final String TEXT_89 = NL + "\t\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_90 = NL + "\t\t\t\t\tmodelResource.getContents().add(";
  protected final String TEXT_91 = "(";
  protected final String TEXT_92 = ") ";
  protected final String TEXT_93 = "model);";
  protected final String TEXT_94 = NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tmodelResource.save(";
  protected final String TEXT_95 = ".EMPTY_MAP);" + NL + "\t\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\t\thandleSaveException(e);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_96 = NL + "\t\t\t\t\tdiagramResource.getContents().add(";
  protected final String TEXT_97 = "(";
  protected final String TEXT_98 = ") ";
  protected final String TEXT_99 = "model);";
  protected final String TEXT_100 = NL + "\t\t\t\t\t";
  protected final String TEXT_101 = " diagram = ";
  protected final String TEXT_102 = ".eINSTANCE.createDiagram();" + NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_103 = "(";
  protected final String TEXT_104 = ") ";
  protected final String TEXT_105 = "model);" + NL + "\t\t\t\t\t";
  protected final String TEXT_106 = ".INSTANCE.decorateView(diagram);" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tdiagramResource.save(";
  protected final String TEXT_107 = ".EMPTY_MAP);" + NL + "\t\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\t\thandleSaveException(e);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_108 = ".OK_STATUS;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\ttry {" + NL + "\t\t\t\tsaveOperation.execute(new ";
  protected final String TEXT_109 = "(), null);" + NL + "\t\t\t} catch (";
  protected final String TEXT_110 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_111 = ".getInstance().logError(\"exception occurred while creating the diagram\", e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_112 = NL + "\t\tboolean result = ";
  protected final String TEXT_113 = ".openEditor(getDiagramFileURI()) != null;";
  protected final String TEXT_114 = NL + "\t\tboolean result = ";
  protected final String TEXT_115 = ".showView(getDiagramFileURI()) != null;";
  protected final String TEXT_116 = NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();";
  protected final String TEXT_117 = NL + "\t\ttry {" + NL + "\t\t\t";
  protected final String TEXT_118 = ".openEditor(";
  protected final String TEXT_119 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);" + NL + "\t\t} catch (";
  protected final String TEXT_120 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_121 = ".getInstance().getLog().log(e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_122 = NL + "\t\t";
  protected final String TEXT_123 = " diagramFileURI = diagramResource.getURI();" + NL + "\t\tboolean result = ";
  protected final String TEXT_124 = ".showView(diagramFileURI) != null;" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_125 = NL + "\t}" + NL;
  protected final String TEXT_126 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_127 = " createInitialRoot(";
  protected final String TEXT_128 = " model) {";
d149 16
a164 9
  protected final String TEXT_130 = " docRoot = ";
  protected final String TEXT_131 = ".";
  protected final String TEXT_132 = ".create";
  protected final String TEXT_133 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_134 = "(model);" + NL + "\t\treturn docRoot;" + NL + "\t}" + NL;
  protected final String TEXT_135 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void handleSaveException(IOException e) throws ";
  protected final String TEXT_136 = " {" + NL + "\t\tthrow new ";
  protected final String TEXT_137 = "(\"Save failed\", e);" + NL + "\t}" + NL + "}";
  protected final String TEXT_138 = NL;
d398 2
d408 1
a408 1
    stringBuffer.append(TEXT_73);
d412 1
a412 1
    stringBuffer.append(TEXT_74);
d414 3
a416 1
    stringBuffer.append(TEXT_75);
d421 1
a421 1
    stringBuffer.append(TEXT_76);
d423 1
a423 1
    stringBuffer.append(TEXT_77);
d425 1
a425 1
    stringBuffer.append(TEXT_78);
d427 1
a427 1
    stringBuffer.append(TEXT_79);
d429 1
a429 1
    stringBuffer.append(TEXT_80);
d431 1
a431 1
    stringBuffer.append(TEXT_81);
d433 1
a433 1
    stringBuffer.append(TEXT_82);
d435 1
a435 1
    stringBuffer.append(TEXT_83);
d437 1
a437 1
    stringBuffer.append(TEXT_84);
d441 1
a441 1
    stringBuffer.append(TEXT_85);
d443 1
a443 1
    stringBuffer.append(TEXT_86);
d445 1
a445 1
    stringBuffer.append(TEXT_87);
d447 1
a447 1
    stringBuffer.append(TEXT_88);
d452 1
a452 1
    stringBuffer.append(TEXT_89);
d456 1
a456 1
    stringBuffer.append(TEXT_90);
d458 1
a458 1
    stringBuffer.append(TEXT_91);
d460 1
a460 1
    stringBuffer.append(TEXT_92);
d462 1
a462 1
    stringBuffer.append(TEXT_93);
d466 3
a468 3
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_95);
d472 1
a472 1
    stringBuffer.append(TEXT_96);
d474 1
a474 1
    stringBuffer.append(TEXT_97);
d476 1
a476 1
    stringBuffer.append(TEXT_98);
d478 1
a478 1
    stringBuffer.append(TEXT_99);
d483 1
a483 1
    stringBuffer.append(TEXT_100);
d485 1
a485 1
    stringBuffer.append(TEXT_101);
d487 1
a487 1
    stringBuffer.append(TEXT_102);
d489 1
a489 1
    stringBuffer.append(TEXT_103);
d491 1
a491 1
    stringBuffer.append(TEXT_104);
d493 1
a493 1
    stringBuffer.append(TEXT_105);
d495 3
a497 3
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_107);
d499 1
a499 1
    stringBuffer.append(TEXT_108);
d501 1
a501 1
    stringBuffer.append(TEXT_109);
d503 1
a503 1
    stringBuffer.append(TEXT_110);
d505 18
a522 1
    stringBuffer.append(TEXT_111);
d529 1
a529 1
    stringBuffer.append(TEXT_112);
d531 1
a531 1
    stringBuffer.append(TEXT_113);
d535 1
a535 1
    stringBuffer.append(TEXT_114);
d537 1
a537 1
    stringBuffer.append(TEXT_115);
d541 1
a541 1
    stringBuffer.append(TEXT_116);
d548 1
a548 1
    stringBuffer.append(TEXT_117);
d550 1
a550 1
    stringBuffer.append(TEXT_118);
d552 1
a552 1
    stringBuffer.append(TEXT_119);
d554 1
a554 1
    stringBuffer.append(TEXT_120);
d556 1
a556 1
    stringBuffer.append(TEXT_121);
d560 1
a560 1
    stringBuffer.append(TEXT_122);
d562 1
a562 1
    stringBuffer.append(TEXT_123);
d564 1
a564 1
    stringBuffer.append(TEXT_124);
d571 1
a571 1
    stringBuffer.append(TEXT_125);
d575 1
a575 1
    stringBuffer.append(TEXT_126);
d577 1
a577 1
    stringBuffer.append(TEXT_127);
d579 1
a579 1
    stringBuffer.append(TEXT_128);
d594 1
a594 1
    stringBuffer.append(TEXT_129);
d596 1
a596 1
    stringBuffer.append(TEXT_130);
d598 1
a598 1
    stringBuffer.append(TEXT_131);
d600 1
a600 1
    stringBuffer.append(TEXT_132);
d602 1
a602 1
    stringBuffer.append(TEXT_133);
d604 1
a604 1
    stringBuffer.append(TEXT_134);
d608 1
a608 1
    stringBuffer.append(TEXT_135);
d610 1
a610 1
    stringBuffer.append(TEXT_136);
d612 1
a612 1
    stringBuffer.append(TEXT_137);
d614 1
a614 1
    stringBuffer.append(TEXT_138);
@


1.10
log
@Make tests pass: Resource.getContents() is now parametrized
@
text
@d167 1
a167 1
final boolean isRichClientPlatform = genDiagram.getEditorGen().getDomainGenModel().isRichClientPlatform();
@


1.9
log
@[163214]: Lite runtime should support generation to a View
[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate
@
text
@d109 7
a115 7
  protected final String TEXT_90 = NL + "\t\t\t\t\tmodelResource.getContents().add(model);";
  protected final String TEXT_91 = NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tmodelResource.save(";
  protected final String TEXT_92 = ".EMPTY_MAP);" + NL + "\t\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\t\thandleSaveException(e);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_93 = NL + "\t\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_94 = NL + "\t\t\t\t\t";
  protected final String TEXT_95 = " diagram = ";
  protected final String TEXT_96 = ".eINSTANCE.createDiagram();" + NL + "\t\t\t\t\tdiagram.setElement(";
d118 40
a157 34
  protected final String TEXT_99 = "model);" + NL + "\t\t\t\t\t";
  protected final String TEXT_100 = ".INSTANCE.decorateView(diagram);" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tdiagramResource.save(";
  protected final String TEXT_101 = ".EMPTY_MAP);" + NL + "\t\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\t\thandleSaveException(e);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_102 = ".OK_STATUS;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\ttry {" + NL + "\t\t\t\tsaveOperation.execute(new ";
  protected final String TEXT_103 = "(), null);" + NL + "\t\t\t} catch (";
  protected final String TEXT_104 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_105 = ".getInstance().logError(\"exception occurred while creating the diagram\", e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_106 = NL + "\t\tboolean result = ";
  protected final String TEXT_107 = ".openEditor(getDiagramFileURI()) != null;";
  protected final String TEXT_108 = NL + "\t\tboolean result = ";
  protected final String TEXT_109 = ".showView(getDiagramFileURI()) != null;";
  protected final String TEXT_110 = NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();";
  protected final String TEXT_111 = NL + "\t\ttry {" + NL + "\t\t\t";
  protected final String TEXT_112 = ".openEditor(";
  protected final String TEXT_113 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);" + NL + "\t\t} catch (";
  protected final String TEXT_114 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_115 = ".getInstance().getLog().log(e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_116 = NL + "\t\t";
  protected final String TEXT_117 = " diagramFileURI = diagramResource.getURI();" + NL + "\t\tboolean result = ";
  protected final String TEXT_118 = ".showView(diagramFileURI) != null;" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_119 = NL + "\t}" + NL;
  protected final String TEXT_120 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_121 = " createInitialRoot(";
  protected final String TEXT_122 = " model) {";
  protected final String TEXT_123 = NL + "\t\t";
  protected final String TEXT_124 = " docRoot = ";
  protected final String TEXT_125 = ".";
  protected final String TEXT_126 = ".create";
  protected final String TEXT_127 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_128 = "(model);" + NL + "\t\treturn docRoot;" + NL + "\t}" + NL;
  protected final String TEXT_129 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void handleSaveException(IOException e) throws ";
  protected final String TEXT_130 = " {" + NL + "\t\tthrow new ";
  protected final String TEXT_131 = "(\"Save failed\", e);" + NL + "\t}" + NL + "}";
  protected final String TEXT_132 = NL;
d446 6
d455 1
a455 1
    stringBuffer.append(TEXT_91);
d457 1
a457 1
    stringBuffer.append(TEXT_92);
d461 7
a467 1
    stringBuffer.append(TEXT_93);
d472 1
a472 1
    stringBuffer.append(TEXT_94);
d474 1
a474 1
    stringBuffer.append(TEXT_95);
d476 1
a476 1
    stringBuffer.append(TEXT_96);
d478 1
a478 1
    stringBuffer.append(TEXT_97);
d480 1
a480 1
    stringBuffer.append(TEXT_98);
d482 1
a482 1
    stringBuffer.append(TEXT_99);
d484 1
a484 1
    stringBuffer.append(TEXT_100);
d486 1
a486 1
    stringBuffer.append(TEXT_101);
d488 1
a488 1
    stringBuffer.append(TEXT_102);
d490 1
a490 1
    stringBuffer.append(TEXT_103);
d492 1
a492 1
    stringBuffer.append(TEXT_104);
d494 1
a494 1
    stringBuffer.append(TEXT_105);
d501 1
a501 1
    stringBuffer.append(TEXT_106);
d503 1
a503 1
    stringBuffer.append(TEXT_107);
d507 1
a507 1
    stringBuffer.append(TEXT_108);
d509 1
a509 1
    stringBuffer.append(TEXT_109);
d513 1
a513 1
    stringBuffer.append(TEXT_110);
d520 1
a520 1
    stringBuffer.append(TEXT_111);
d522 1
a522 1
    stringBuffer.append(TEXT_112);
d524 1
a524 1
    stringBuffer.append(TEXT_113);
d526 1
a526 1
    stringBuffer.append(TEXT_114);
d528 1
a528 1
    stringBuffer.append(TEXT_115);
d532 1
a532 1
    stringBuffer.append(TEXT_116);
d534 1
a534 1
    stringBuffer.append(TEXT_117);
d536 1
a536 1
    stringBuffer.append(TEXT_118);
d543 1
a543 1
    stringBuffer.append(TEXT_119);
d547 1
a547 1
    stringBuffer.append(TEXT_120);
d549 1
a549 1
    stringBuffer.append(TEXT_121);
d551 1
a551 1
    stringBuffer.append(TEXT_122);
d566 1
a566 1
    stringBuffer.append(TEXT_123);
d568 1
a568 1
    stringBuffer.append(TEXT_124);
d570 1
a570 1
    stringBuffer.append(TEXT_125);
d572 1
a572 1
    stringBuffer.append(TEXT_126);
d574 1
a574 1
    stringBuffer.append(TEXT_127);
d576 1
a576 1
    stringBuffer.append(TEXT_128);
d580 1
a580 1
    stringBuffer.append(TEXT_129);
d582 1
a582 1
    stringBuffer.append(TEXT_130);
d584 1
a584 1
    stringBuffer.append(TEXT_131);
d586 1
a586 1
    stringBuffer.append(TEXT_132);
@


1.8
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d91 1
a91 1
  protected final String TEXT_72 = " diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFilePath.toString()));";
d94 1
a94 1
  protected final String TEXT_75 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFilePath.toString()));";
d126 26
a151 20
  protected final String TEXT_107 = ".openEditor(getDiagramFileURI()) != null;" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();";
  protected final String TEXT_108 = NL + "\t\ttry {" + NL + "\t\t\t";
  protected final String TEXT_109 = ".openEditor(";
  protected final String TEXT_110 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);" + NL + "\t\t} catch (";
  protected final String TEXT_111 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_112 = ".getInstance().getLog().log(e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_113 = NL + "\t}" + NL;
  protected final String TEXT_114 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_115 = " createInitialRoot(";
  protected final String TEXT_116 = " model) {";
  protected final String TEXT_117 = NL + "\t\t";
  protected final String TEXT_118 = " docRoot = ";
  protected final String TEXT_119 = ".";
  protected final String TEXT_120 = ".create";
  protected final String TEXT_121 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_122 = "(model);" + NL + "\t\treturn docRoot;" + NL + "\t}" + NL;
  protected final String TEXT_123 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void handleSaveException(IOException e) throws ";
  protected final String TEXT_124 = " {" + NL + "\t\tthrow new ";
  protected final String TEXT_125 = "(\"Save failed\", e);" + NL + "\t}" + NL + "}";
  protected final String TEXT_126 = NL;
d480 3
d487 10
d499 4
a502 1
    stringBuffer.append(TEXT_108);
d504 1
a504 1
    stringBuffer.append(TEXT_109);
d506 1
a506 1
    stringBuffer.append(TEXT_110);
d508 1
a508 1
    stringBuffer.append(TEXT_111);
d510 12
a521 1
    stringBuffer.append(TEXT_112);
d525 1
a525 1
    stringBuffer.append(TEXT_113);
d529 1
a529 1
    stringBuffer.append(TEXT_114);
d531 1
a531 1
    stringBuffer.append(TEXT_115);
d533 1
a533 1
    stringBuffer.append(TEXT_116);
d548 1
a548 1
    stringBuffer.append(TEXT_117);
d550 1
a550 1
    stringBuffer.append(TEXT_118);
d552 1
a552 1
    stringBuffer.append(TEXT_119);
d554 1
a554 1
    stringBuffer.append(TEXT_120);
d556 1
a556 1
    stringBuffer.append(TEXT_121);
d558 1
a558 1
    stringBuffer.append(TEXT_122);
d562 1
a562 1
    stringBuffer.append(TEXT_123);
d564 1
a564 1
    stringBuffer.append(TEXT_124);
d566 1
a566 1
    stringBuffer.append(TEXT_125);
d568 1
a568 1
    stringBuffer.append(TEXT_126);
@


1.7
log
@[158023] bblajer - Diagram Layout
@
text
@d421 1
a421 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryClassName()));
@


1.6
log
@Added import for Collections.
@
text
@d126 1
a126 1
  protected final String TEXT_107 = ".openEditor(getDiagramFileURI());" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();";
@


1.5
log
@[158158] bblajer - Creation of diagrams for models generated from XSD schemas fails
@
text
@d119 27
a145 26
  protected final String TEXT_100 = ".INSTANCE.decorateView(diagram);" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\t\thandleSaveException(e);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_101 = ".OK_STATUS;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\ttry {" + NL + "\t\t\t\tsaveOperation.execute(new ";
  protected final String TEXT_102 = "(), null);" + NL + "\t\t\t} catch (";
  protected final String TEXT_103 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_104 = ".getInstance().logError(\"exception occurred while creating the diagram\", e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_105 = NL + "\t\tboolean result = ";
  protected final String TEXT_106 = ".openEditor(getDiagramFileURI());" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();";
  protected final String TEXT_107 = NL + "\t\ttry {" + NL + "\t\t\t";
  protected final String TEXT_108 = ".openEditor(";
  protected final String TEXT_109 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);" + NL + "\t\t} catch (";
  protected final String TEXT_110 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_111 = ".getInstance().getLog().log(e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_112 = NL + "\t}" + NL;
  protected final String TEXT_113 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_114 = " createInitialRoot(";
  protected final String TEXT_115 = " model) {";
  protected final String TEXT_116 = NL + "\t\t";
  protected final String TEXT_117 = " docRoot = ";
  protected final String TEXT_118 = ".";
  protected final String TEXT_119 = ".create";
  protected final String TEXT_120 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_121 = "(model);" + NL + "\t\treturn docRoot;" + NL + "\t}" + NL;
  protected final String TEXT_122 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void handleSaveException(IOException e) throws ";
  protected final String TEXT_123 = " {" + NL + "\t\tthrow new ";
  protected final String TEXT_124 = "(\"Save failed\", e);" + NL + "\t}" + NL + "}";
  protected final String TEXT_125 = NL;
d461 2
d464 1
a464 1
    stringBuffer.append(TEXT_101);
d466 1
a466 1
    stringBuffer.append(TEXT_102);
d468 1
a468 1
    stringBuffer.append(TEXT_103);
d470 1
a470 1
    stringBuffer.append(TEXT_104);
d474 1
a474 1
    stringBuffer.append(TEXT_105);
d476 1
a476 1
    stringBuffer.append(TEXT_106);
d480 1
a480 1
    stringBuffer.append(TEXT_107);
d482 1
a482 1
    stringBuffer.append(TEXT_108);
d484 1
a484 1
    stringBuffer.append(TEXT_109);
d486 1
a486 1
    stringBuffer.append(TEXT_110);
d488 1
a488 1
    stringBuffer.append(TEXT_111);
d492 1
a492 1
    stringBuffer.append(TEXT_112);
d496 1
a496 1
    stringBuffer.append(TEXT_113);
d498 1
a498 1
    stringBuffer.append(TEXT_114);
d500 1
a500 1
    stringBuffer.append(TEXT_115);
d515 1
a515 1
    stringBuffer.append(TEXT_116);
d517 1
a517 1
    stringBuffer.append(TEXT_117);
d519 1
a519 1
    stringBuffer.append(TEXT_118);
d521 1
a521 1
    stringBuffer.append(TEXT_119);
d523 1
a523 1
    stringBuffer.append(TEXT_120);
d525 1
a525 1
    stringBuffer.append(TEXT_121);
a528 2
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.commands.ExecutionException"));
d532 2
d535 1
a535 1
    stringBuffer.append(TEXT_125);
@


1.4
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d5 2
d83 62
a144 36
  protected final String TEXT_64 = NL + "\t\t//TODO: Editing domain!" + NL + "\t\t";
  protected final String TEXT_65 = " resourceSet = new ";
  protected final String TEXT_66 = "();";
  protected final String TEXT_67 = NL + "\t\tfinal ";
  protected final String TEXT_68 = " diagramResource = resourceSet.createResource(getDiagramFileURI());";
  protected final String TEXT_69 = NL + "\t\tIPath diagramFilePath = getContainerFullPath().append(getFileName());" + NL + "\t\tif (diagramFilePath.getFileExtension() == null) {" + NL + "\t\t\tdiagramFilePath = diagramFilePath.addFileExtension(\"";
  protected final String TEXT_70 = "\");\t\t//$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tfinal IFile diagramFile = ResourcesPlugin.getWorkspace().getRoot().getFile(diagramFilePath);" + NL + "\t\tfinal ";
  protected final String TEXT_71 = " diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFilePath.toString()));";
  protected final String TEXT_72 = NL + "\t\tfinal Resource modelResource = resourceSet.createResource(getModelFileURI());";
  protected final String TEXT_73 = NL + "\t\tIPath modelFilePath = diagramFilePath.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_74 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFilePath.toString()));";
  protected final String TEXT_75 = NL + NL + "\t\tif (diagramResource != null";
  protected final String TEXT_76 = " && modelResource != null";
  protected final String TEXT_77 = ") {" + NL + "\t\t\t//TODO: Editing domain!" + NL + "\t\t\t";
  protected final String TEXT_78 = " model = ";
  protected final String TEXT_79 = ".eINSTANCE.create";
  protected final String TEXT_80 = "();";
  protected final String TEXT_81 = NL + "\t\t\tmodelResource.getContents().add(model);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tmodelResource.save(";
  protected final String TEXT_82 = ".EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\thandleSaveException(e);" + NL + "\t\t\t}";
  protected final String TEXT_83 = NL + "\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_84 = NL + "\t\t\t";
  protected final String TEXT_85 = " diagram = ";
  protected final String TEXT_86 = ".eINSTANCE.createDiagram();" + NL + "\t\t\tdiagram.setElement(";
  protected final String TEXT_87 = "(";
  protected final String TEXT_88 = ") ";
  protected final String TEXT_89 = "model);" + NL + "\t\t\t";
  protected final String TEXT_90 = ".INSTANCE.decorateView(diagram);" + NL + "\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\thandleSaveException(e);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_91 = NL + "\t\tboolean result = ";
  protected final String TEXT_92 = ".openEditor(getDiagramFileURI());" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();";
  protected final String TEXT_93 = NL + "\t\ttry {" + NL + "\t\t\t";
  protected final String TEXT_94 = ".openEditor(";
  protected final String TEXT_95 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);" + NL + "\t\t} catch (";
  protected final String TEXT_96 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_97 = ".getInstance().getLog().log(e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_98 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void handleSaveException(IOException e) {" + NL + "\t\tthrow new RuntimeException(e);" + NL + "\t}" + NL + "}";
  protected final String TEXT_99 = NL;
d358 1
a358 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
d360 1
a360 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
d362 2
d367 1
a367 1
    stringBuffer.append(TEXT_67);
d369 1
a369 1
    stringBuffer.append(TEXT_68);
d373 1
a373 1
    stringBuffer.append(TEXT_69);
d375 1
a375 1
    stringBuffer.append(TEXT_70);
d377 1
a377 1
    stringBuffer.append(TEXT_71);
d386 1
a386 1
    stringBuffer.append(TEXT_72);
d390 1
a390 1
    stringBuffer.append(TEXT_73);
d392 1
a392 1
    stringBuffer.append(TEXT_74);
d397 1
a397 1
    stringBuffer.append(TEXT_75);
d399 1
a399 1
    stringBuffer.append(TEXT_76);
d401 17
a417 1
    stringBuffer.append(TEXT_77);
d419 1
a419 1
    stringBuffer.append(TEXT_78);
d421 1
a421 1
    stringBuffer.append(TEXT_79);
d423 10
a432 1
    stringBuffer.append(TEXT_80);
d434 1
a434 1
if (standaloneDomainModel) {
d436 1
a436 1
    stringBuffer.append(TEXT_81);
d438 1
a438 1
    stringBuffer.append(TEXT_82);
d440 1
a440 1
} else {
d442 1
a442 1
    stringBuffer.append(TEXT_83);
d444 1
d447 1
a447 1
    stringBuffer.append(TEXT_84);
d449 1
a449 1
    stringBuffer.append(TEXT_85);
d451 1
a451 1
    stringBuffer.append(TEXT_86);
d453 1
a453 1
    stringBuffer.append(TEXT_87);
d455 1
a455 1
    stringBuffer.append(TEXT_88);
d457 1
a457 1
    stringBuffer.append(TEXT_89);
d459 9
a467 1
    stringBuffer.append(TEXT_90);
d471 1
a471 1
    stringBuffer.append(TEXT_91);
d473 1
a473 1
    stringBuffer.append(TEXT_92);
d477 1
a477 1
    stringBuffer.append(TEXT_93);
d479 1
a479 1
    stringBuffer.append(TEXT_94);
d481 1
a481 1
    stringBuffer.append(TEXT_95);
d483 1
a483 1
    stringBuffer.append(TEXT_96);
d485 1
a485 1
    stringBuffer.append(TEXT_97);
d489 42
a530 1
    stringBuffer.append(TEXT_98);
d532 1
a532 1
    stringBuffer.append(TEXT_99);
@


1.3
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d107 1
a107 1
  protected final String TEXT_90 = ".decorateView(diagram);" + NL + "\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\thandleSaveException(e);" + NL + "\t\t\t}" + NL + "\t\t}";
@


1.2
log
@[bblajer] #114200 Provide an option to generate RCP application - added RCP support for pure-GEF (lite) generator
@
text
@d103 14
a116 11
  protected final String TEXT_86 = ".eINSTANCE.createDiagram();" + NL + "\t\t\tdiagram.setElement(model);" + NL + "\t\t\t";
  protected final String TEXT_87 = ".decorateView(diagram);" + NL + "\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\thandleSaveException(e);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_88 = NL + "\t\tboolean result = ";
  protected final String TEXT_89 = ".openEditor(getDiagramFileURI());" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();";
  protected final String TEXT_90 = NL + "\t\ttry {" + NL + "\t\t\t";
  protected final String TEXT_91 = ".openEditor(";
  protected final String TEXT_92 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);" + NL + "\t\t} catch (";
  protected final String TEXT_93 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_94 = ".getInstance().getLog().log(e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_95 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void handleSaveException(IOException e) {" + NL + "\t\tthrow new RuntimeException(e);" + NL + "\t}" + NL + "}";
  protected final String TEXT_96 = NL;
d396 6
d403 1
a403 1
    stringBuffer.append(TEXT_87);
d407 1
a407 1
    stringBuffer.append(TEXT_88);
d409 1
a409 1
    stringBuffer.append(TEXT_89);
d413 1
a413 1
    stringBuffer.append(TEXT_90);
d415 1
a415 1
    stringBuffer.append(TEXT_91);
d417 1
a417 1
    stringBuffer.append(TEXT_92);
d419 1
a419 1
    stringBuffer.append(TEXT_93);
d421 1
a421 1
    stringBuffer.append(TEXT_94);
d425 1
a425 1
    stringBuffer.append(TEXT_95);
d427 1
a427 1
    stringBuffer.append(TEXT_96);
@


1.2.2.1
log
@Added import for Collections.
@
text
@d104 10
a113 11
  protected final String TEXT_87 = ".decorateView(diagram);" + NL + "\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramResource.save(";
  protected final String TEXT_88 = ".EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\thandleSaveException(e);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_89 = NL + "\t\tboolean result = ";
  protected final String TEXT_90 = ".openEditor(getDiagramFileURI());" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();";
  protected final String TEXT_91 = NL + "\t\ttry {" + NL + "\t\t\t";
  protected final String TEXT_92 = ".openEditor(";
  protected final String TEXT_93 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);" + NL + "\t\t} catch (";
  protected final String TEXT_94 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_95 = ".getInstance().getLog().log(e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFile;";
  protected final String TEXT_96 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void handleSaveException(IOException e) {" + NL + "\t\tthrow new RuntimeException(e);" + NL + "\t}" + NL + "}";
  protected final String TEXT_97 = NL;
a394 2
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_88);
d398 2
a400 2
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
    stringBuffer.append(TEXT_90);
d404 2
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ide.IDE"));
d409 1
a409 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
a412 2
    stringBuffer.append(genPlugin.getActivatorClassName());
    stringBuffer.append(TEXT_95);
d416 2
a418 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_97);
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d20 94
a113 44
  protected final String TEXT_3 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Text fileField;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate URI createdDiagramFileURI;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_4 = "() {" + NL + "\t\tsuper(\"CreationWizardPage\"); //$NON-NLS-1$" + NL + "\t\tsetTitle(\"Create ";
  protected final String TEXT_5 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDescription(\"Create a new ";
  protected final String TEXT_6 = " diagram.\"); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent)" + NL + "\t{" + NL + "\t\tComposite composite = new Composite(parent, SWT.NONE);" + NL + "\t\t{" + NL + "\t\t\tGridLayout layout = new GridLayout();" + NL + "\t\t\tlayout.numColumns = 1;" + NL + "\t\t\tlayout.verticalSpacing = 12;" + NL + "\t\t\tcomposite.setLayout(layout);" + NL + "" + NL + "\t\t\tGridData data = new GridData();" + NL + "\t\t\tdata.verticalAlignment = GridData.FILL;" + NL + "\t\t\tdata.grabExcessVerticalSpace = true;" + NL + "\t\t\tdata.horizontalAlignment = GridData.FILL;" + NL + "\t\t\tcomposite.setLayoutData(data);" + NL + "\t\t}" + NL + "\t\tLabel resourceURILabel = new Label(composite, SWT.LEFT);" + NL + "\t\t{" + NL + "\t\t\tresourceURILabel.setText(\"&File\");" + NL + "" + NL + "\t\t\tGridData data = new GridData();" + NL + "\t\t\tdata.horizontalAlignment = GridData.FILL;" + NL + "\t\t\tresourceURILabel.setLayoutData(data);" + NL + "\t\t}" + NL + "" + NL + "\t\tComposite fileComposite = new Composite(composite, SWT.NONE);" + NL + "\t\t{" + NL + "\t\t\tGridData data = new GridData();" + NL + "\t\t\tdata.horizontalAlignment = GridData.FILL;" + NL + "\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\tfileComposite.setLayoutData(data);" + NL + "" + NL + "\t\t\tGridLayout layout = new GridLayout();" + NL + "\t\t\tlayout.marginHeight = 0;" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tlayout.numColumns = 2;" + NL + "\t\t\tfileComposite.setLayout(layout);" + NL + "\t\t}" + NL + "" + NL + "\t\tfileField = new ";
  protected final String TEXT_7 = "(fileComposite, SWT.BORDER);" + NL + "\t\t{" + NL + "\t\t\tGridData data = new GridData();" + NL + "\t\t\tdata.horizontalAlignment = GridData.FILL;" + NL + "\t\t\tdata.grabExcessHorizontalSpace = true;" + NL + "\t\t\tdata.horizontalSpan = 1;" + NL + "\t\t\tfileField.setLayoutData(data);" + NL + "\t\t}" + NL + "" + NL + "\t\tfileField.addModifyListener(validator);" + NL + "\t\t";
  protected final String TEXT_8 = " resourceURIBrowseFileSystemButton = new ";
  protected final String TEXT_9 = "(fileComposite, SWT.PUSH);" + NL + "\t\tresourceURIBrowseFileSystemButton.setText(\"&Browse\");" + NL + "  " + NL + "\t\tresourceURIBrowseFileSystemButton.addSelectionListener" + NL + "\t\t\t(new ";
  protected final String TEXT_10 = "() {" + NL + "\t\t\t\t public void widgetSelected(";
  protected final String TEXT_11 = " event) {" + NL + "\t\t\t\t\t String fileExtension = \"";
  protected final String TEXT_12 = "\";" + NL + "\t\t\t\t\t String filePath = ";
  protected final String TEXT_13 = ".openFilePathDialog(getShell(), \"*.\" + fileExtension, ";
  protected final String TEXT_14 = ".OPEN);" + NL + "\t\t\t\t\t if (filePath != null) {" + NL + "\t\t\t\t\t\t if (!filePath.endsWith(\".\" + fileExtension)) {" + NL + "\t\t\t\t\t\t\t filePath = filePath + \".\" + fileExtension;" + NL + "\t\t\t\t\t\t }" + NL + "\t\t\t\t\t\t fileField.setText(filePath);" + NL + "\t\t\t\t\t }" + NL + "\t\t\t\t }" + NL + "\t\t\t }); " + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t\tsetControl(composite);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ModifyListener validator =" + NL + "\t\tnew ModifyListener() {" + NL + "\t\t\tpublic void modifyText(ModifyEvent e) {" + NL + "\t\t\t\tsetPageComplete(validatePage());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + " " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t protected boolean validatePage() {" + NL + "\t\tURI diagramFileURI = getDiagramFileURI();" + NL + "\t\tif (diagramFileURI == null || diagramFileURI.isEmpty()) {" + NL + "\t\t\tsetErrorMessage(null);" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tString requiredExt = \"";
  protected final String TEXT_15 = "\";" + NL + "\t\tString enteredExt = diagramFileURI.fileExtension();" + NL + "\t\tif (enteredExt == null || !enteredExt.equals(requiredExt)) {" + NL + "\t\t\tsetErrorMessage(\"The file name must end in \" + requiredExt); " + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\tif (diagramFileURI.isFile()) {" + NL + "\t\t\tFile diagramFile = new File(diagramFileURI.toFileString());" + NL + "\t\t\tif (diagramFile.exists()) {" + NL + "\t\t\t\tsetErrorMessage(\"Diagram File already exists: \" + diagramFile);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_16 = NL + "\t\t\tURI modelFileURI = getModelFileURI();" + NL + "\t\t\tFile modelFile = new File(modelFileURI.toFileString());" + NL + "\t\t\tif (modelFile.exists()) {" + NL + "\t\t\t\tsetErrorMessage(\"Model File already exists: \" + modelFile);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_17 = NL + "\t\t}" + NL + "\t\tsetErrorMessage(null); " + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getCreatedDiagramFileURI() {" + NL + "\t\treturn createdDiagramFileURI;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate URI getDiagramFileURI() {" + NL + "\t\ttry {" + NL + "\t\t\treturn URI.createFileURI(fileField.getText());" + NL + "\t\t} catch (Exception exception) {" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_18 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate URI getModelFileURI() {" + NL + "\t\tURI diagramFileURI = getDiagramFileURI();" + NL + "\t\tif (diagramFileURI == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn diagramFileURI.trimFileExtension().appendFileExtension(\"";
  protected final String TEXT_19 = "\");" + NL + "\t}";
  protected final String TEXT_20 = NL + NL + "\t/**" + NL + "\t * Performs the operations necessary to create and open the diagram" + NL + "\t * @@return boolean indicating whether the creation and opening the Diagram was successful " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean finish() {" + NL + "\t\tfinal boolean[] result = new boolean[1];" + NL + "\t\t";
  protected final String TEXT_21 = " op = new IRunnableWithProgress() {" + NL + "\t\t\tpublic void run(IProgressMonitor monitor) {" + NL + "\t\t\t\tresult[0] = doFinish(monitor);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (";
  protected final String TEXT_22 = " e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\t";
  protected final String TEXT_23 = ".openError(" + NL + "\t\t\t\t\tgetContainer().getShell()," + NL + "\t\t\t\t\t\"Creation Problems\"," + NL + "\t\t\t\t\tnull,\t// no special message" + NL + "\t\t\t\t\t((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t}" + NL + "\t\t\telse {" + NL + "\t\t\t\t// CoreExceptions are handled above, but unexpected runtime exceptions and errors may still occur." + NL + "\t\t\t\t";
  protected final String TEXT_24 = ".getInstance().getLog().log(new ";
  protected final String TEXT_25 = "(";
  protected final String TEXT_26 = ".ERROR, ";
  protected final String TEXT_27 = ".ID, 0, \"Creation failed\", e.getTargetException()));" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn result[0];" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@param monitor the <code>IProgressMonitor</code> to use to indicate progress and check for cancellation" + NL + "\t * @@return boolean indicating whether the diagram was created and opened successfully" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean doFinish(IProgressMonitor monitor) {" + NL + "\t\tcreatedDiagramFileURI = createDiagramFile(monitor);" + NL + "\t\treturn createdDiagramFileURI != null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate URI createDiagramFile(IProgressMonitor monitor) {" + NL + "\t\t//TODO: Editing domain!" + NL + "\t\t";
  protected final String TEXT_28 = " resourceSet = new ";
  protected final String TEXT_29 = "();" + NL + "\t\tfinal ";
  protected final String TEXT_30 = " diagramResource = resourceSet.createResource(getDiagramFileURI());";
  protected final String TEXT_31 = NL + "\t\tfinal Resource modelResource = resourceSet.createResource(getModelFileURI());";
  protected final String TEXT_32 = NL + NL + "\t\tif (diagramResource != null";
  protected final String TEXT_33 = " && modelResource != null";
  protected final String TEXT_34 = ") {" + NL + "\t\t\t//TODO: Editing domain!" + NL + "\t\t\t";
  protected final String TEXT_35 = " model = ";
  protected final String TEXT_36 = ".eINSTANCE.create";
  protected final String TEXT_37 = "();";
  protected final String TEXT_38 = NL + "\t\t\tmodelResource.getContents().add(model);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tmodelResource.save(";
  protected final String TEXT_39 = ".EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\thandleSaveException(e);" + NL + "\t\t\t}";
  protected final String TEXT_40 = NL + "\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_41 = NL + "\t\t\t";
  protected final String TEXT_42 = " diagram = ";
  protected final String TEXT_43 = ".eINSTANCE.createDiagram();" + NL + "\t\t\tdiagram.setElement(model);" + NL + "\t\t\t";
  protected final String TEXT_44 = ".decorateView(diagram);" + NL + "\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\thandleSaveException(e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean result = ";
  protected final String TEXT_45 = ".openEditor(getDiagramFileURI());" + NL + "\t\tif (!result) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getDiagramFileURI();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void handleSaveException(IOException e) {" + NL + "\t\tthrow new RuntimeException(e);" + NL + "\t}" + NL + "}";
  protected final String TEXT_46 = NL;
d123 1
a127 1
importManager.addImport("java.io.File");
a130 1
importManager.addImport("org.eclipse.swt.widgets.Text");
d132 2
d136 1
d141 1
d146 1
a146 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
d148 3
a150 1
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
d152 3
a154 1
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
d156 1
a156 1
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
d158 3
a160 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Text"));
d162 3
a164 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d166 1
a166 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Button"));
d168 3
a170 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionAdapter"));
d172 1
a172 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d174 1
a174 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d176 3
a178 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
d180 1
a180 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d182 1
a182 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d184 3
a186 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d188 1
a188 1
    }
d190 1
a190 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d192 1
a192 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d194 1
a194 1
    }
d196 93
d290 11
a300 1
    stringBuffer.append(TEXT_21);
d302 1
a302 1
    stringBuffer.append(TEXT_22);
d304 1
a304 1
    stringBuffer.append(TEXT_23);
d306 1
a306 1
    stringBuffer.append(TEXT_24);
d308 1
a308 1
    stringBuffer.append(TEXT_25);
d310 1
a310 1
    stringBuffer.append(TEXT_26);
d312 15
a326 1
    stringBuffer.append(TEXT_27);
d328 1
a328 1
    stringBuffer.append(TEXT_28);
d330 13
a342 1
    stringBuffer.append(TEXT_29);
d344 4
a347 1
    stringBuffer.append(TEXT_30);
d351 5
d357 8
a364 3
    stringBuffer.append(TEXT_31);
    }
    stringBuffer.append(TEXT_32);
d366 1
a366 1
    stringBuffer.append(TEXT_33);
d368 1
a368 1
    stringBuffer.append(TEXT_34);
d370 1
a370 1
    stringBuffer.append(TEXT_35);
d372 1
a372 1
    stringBuffer.append(TEXT_36);
d374 1
a374 1
    stringBuffer.append(TEXT_37);
d378 1
a378 1
    stringBuffer.append(TEXT_38);
d380 1
a380 1
    stringBuffer.append(TEXT_39);
d384 1
a384 1
    stringBuffer.append(TEXT_40);
d388 1
a388 1
    stringBuffer.append(TEXT_41);
d390 1
a390 1
    stringBuffer.append(TEXT_42);
d392 1
a392 1
    stringBuffer.append(TEXT_43);
d394 5
a398 1
    stringBuffer.append(TEXT_44);
d400 17
a416 1
    stringBuffer.append(TEXT_45);
d418 1
a418 1
    stringBuffer.append(TEXT_46);
@

