head	1.9;
access;
symbols
	v20080910-1520:1.9
	v20070608-1300:1.8
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070520-1200:1.7
	v20070518-1300:1.6
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.3
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1;
locks; strict;
comment	@# @;


1.9
date	2007.06.12.16.33.04;	author bblajer;	state dead;
branches;
next	1.8;
commitid	1a98466ecabe4567;

1.8
date	2007.06.04.16.20.30;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	17cf46643bca4567;

1.7
date	2007.05.20.12.55.36;	author mfeldman;	state Exp;
branches;
next	1.6;
commitid	7d1d465045114567;

1.6
date	2007.05.18.13.54.38;	author bblajer;	state Exp;
branches;
next	1.5;
commitid	40c4464db01d4567;

1.5
date	2007.05.18.10.36.19;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	a20464d81a24567;

1.4
date	2007.04.13.15.21.20;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	797b461f9fef4567;

1.3
date	2007.04.10.14.40.10;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	5b02461ba1c84567;

1.2
date	2006.11.23.18.57.16;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	66934565ef0a4567;

1.1
date	2006.11.09.18.15.43;	author bblajer;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[192167]: Convert /policies/OpenDiagramEditPolicy.javajet lite template to Xpand;
Typo in NavigatorActionProvider fixed;
gif images removed (they should be inherited from the full-RT templates instead)
@
text
@package org.eclipse.gmf.codegen.templates.lite.policies;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class OpenDiagramPolicyGenerator
{
  protected static String nl;
  public static synchronized OpenDiagramPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    OpenDiagramPolicyGenerator result = new OpenDiagramPolicyGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_7 = " getOpenCommand(";
  protected final String TEXT_8 = " openRequest) {" + NL + "\t\t";
  protected final String TEXT_9 = " targetEditPart = getTargetEditPart(openRequest);" + NL + "\t\tif (false == targetEditPart.getModel() instanceof ";
  protected final String TEXT_10 = ") {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_11 = " view = (";
  protected final String TEXT_12 = ") targetEditPart.getModel();" + NL + "\t\treturn getOpenCommand(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_13 = " getOpenCommand(";
  protected final String TEXT_14 = " view) {" + NL + "\t\t";
  protected final String TEXT_15 = " linkStyle = view.getStyle(";
  protected final String TEXT_16 = ".eINSTANCE.getHintedDiagramLinkStyle());" + NL + "\t\tif (false == linkStyle instanceof ";
  protected final String TEXT_17 = ") {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_18 = " domain = ";
  protected final String TEXT_19 = ".getEditingDomain(linkStyle);" + NL + "\t\t";
  protected final String TEXT_20 = " result = new OpenDiagramCommand((";
  protected final String TEXT_21 = ") linkStyle);" + NL + "\t\treturn new ";
  protected final String TEXT_22 = "(domain, result);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected static class OpenDiagramCommand extends ";
  protected final String TEXT_23 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_24 = " myDiagramLink;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected OpenDiagramCommand(";
  protected final String TEXT_25 = " linkStyle) {" + NL + "\t\t\tmyDiagramLink = linkStyle;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t";
  protected final String TEXT_26 = " diagramToOpen = getDiagramToOpen();" + NL + "\t\t\tif (diagramToOpen == null) {" + NL + "\t\t\t\tdiagramToOpen = createNewDiagram();" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_27 = " diagramURI = ";
  protected final String TEXT_28 = ".getURI(diagramToOpen);" + NL + "\t\t\t";
  protected final String TEXT_29 = " page = ";
  protected final String TEXT_30 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage();";
  protected final String TEXT_31 = NL + "\t\t\t";
  protected final String TEXT_32 = " editorInput = new ";
  protected final String TEXT_33 = "(diagramURI);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tpage.openEditor(editorInput, getEditorID());" + NL + "\t\t\t} catch (";
  protected final String TEXT_34 = " e) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Can't open diagram\", e);" + NL + "\t\t\t}";
  protected final String TEXT_35 = NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_36 = " diagramView = (";
  protected final String TEXT_37 = ")page.showView(getViewID());" + NL + "\t\t\t\tdiagramView.showDiagram(null, diagramURI);" + NL + "\t\t\t} catch (";
  protected final String TEXT_38 = " e) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Can't open diagram\", e);" + NL + "\t\t\t}";
  protected final String TEXT_39 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_40 = " getDiagramToOpen() {" + NL + "\t\t\t";
  protected final String TEXT_41 = " result = myDiagramLink.getDiagramLink();" + NL + "\t\t\t// take first that matches the given model ID." + NL + "\t\t\tif (result != null && result.getType().equals(getDiagramKind())) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_42 = " createNewDiagram() {" + NL + "\t\t\t";
  protected final String TEXT_43 = " result = ";
  protected final String TEXT_44 = ".eINSTANCE.createDiagram();" + NL + "\t\t\tmyDiagramLink.setDiagramLink(result);" + NL + "\t\t\tresult.setElement(getDiagramDomainElement());" + NL + "\t\t\taddToResource(result);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tfor (";
  protected final String TEXT_45 = " it = myDiagramLink.eResource().getResourceSet().getResources().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_46 = " next = (";
  protected final String TEXT_47 = ") it.next();" + NL + "\t\t\t\t\tif (next.isLoaded() && !";
  protected final String TEXT_48 = ".isReadOnly(next)) {" + NL + "\t\t\t\t\t\tnext.save(";
  protected final String TEXT_49 = ".getSaveOptions());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_50 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_51 = NL + "\t\t\t\tthrow new RuntimeException(\"Can't create diagram of '\" + getDiagramKind() + \"' kind\", e);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns the element that should be the underlying model element for the diagram." + NL + "\t\t * By default, the element associated with the edit part is returned." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_52 = " getDiagramDomainElement() {" + NL + "\t\t\treturn ((";
  protected final String TEXT_53 = ") myDiagramLink.eContainer()).getElement();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Adds the created diagram to a resource. By default, the diagram is added to the resource which contains the initiating diagram." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void addToResource(";
  protected final String TEXT_54 = " diagram) {" + NL + "\t\t\tassert diagram.eResource() == null;" + NL + "\t\t\tassert myDiagramLink.eResource() != null;" + NL + "\t\t\tmyDiagramLink.eResource().getContents().add(diagram);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getDiagramKind() {";
  protected final String TEXT_55 = NL + "\t\t\treturn ";
  protected final String TEXT_56 = ".MODEL_ID;";
  protected final String TEXT_57 = NL + "\t\t\treturn \"";
  protected final String TEXT_58 = "\";";
  protected final String TEXT_59 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */";
  protected final String TEXT_60 = NL + "\t\tprotected String getEditorID() {";
  protected final String TEXT_61 = NL + "\t\tprotected String getViewID() {";
  protected final String TEXT_62 = NL + "\t\t\treturn ";
  protected final String TEXT_63 = ".ID;";
  protected final String TEXT_64 = NL + "\t\t\treturn \"";
  protected final String TEXT_65 = "\";";
  protected final String TEXT_66 = NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_67 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final OpenDiagramBehaviour behaviour = (OpenDiagramBehaviour) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = behaviour.getSubject().getDiagram();
final boolean openAsEditor = behaviour.isOpenAsEclipseEditor();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    
importManager.registerInnerClass("OpenDiagramCommand");
importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_4);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.OpenDiagramEditPolicy"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Style"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPage"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_30);
    
if (openAsEditor) {

    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_34);
    
} else {

    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_38);
    
}

    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("java.io.IOException"));
    stringBuffer.append(TEXT_50);
    /*XXX: Throwing runtime exceptions is definitely not the most elegant way*/
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_54);
    if (behaviour.getDiagramKind() == null) {
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_56);
    } else {
    stringBuffer.append(TEXT_57);
    stringBuffer.append(behaviour.getDiagramKind());
    stringBuffer.append(TEXT_58);
    }
    stringBuffer.append(TEXT_59);
    
if (openAsEditor) {

    stringBuffer.append(TEXT_60);
    
} else {

    stringBuffer.append(TEXT_61);
    
}

    if (behaviour.getEditorID() == null) { 
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
    stringBuffer.append(TEXT_63);
    } else {
    stringBuffer.append(TEXT_64);
    stringBuffer.append(behaviour.getEditorID());
    stringBuffer.append(TEXT_65);
    }
    stringBuffer.append(TEXT_66);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_67);
    return stringBuffer.toString();
  }
}
@


1.8
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.7
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.6
log
@Uncompilable code used to be generated -- fixed
@
text
@d18 67
a84 68
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_8 = " getOpenCommand(";
  protected final String TEXT_9 = " openRequest) {" + NL + "\t\t";
  protected final String TEXT_10 = " targetEditPart = getTargetEditPart(openRequest);" + NL + "\t\tif (false == targetEditPart.getModel() instanceof ";
  protected final String TEXT_11 = ") {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_12 = " view = (";
  protected final String TEXT_13 = ") targetEditPart.getModel();" + NL + "\t\treturn getOpenCommand(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_14 = " getOpenCommand(";
  protected final String TEXT_15 = " view) {" + NL + "\t\t";
  protected final String TEXT_16 = " linkStyle = view.getStyle(";
  protected final String TEXT_17 = ".eINSTANCE.getHintedDiagramLinkStyle());" + NL + "\t\tif (false == linkStyle instanceof ";
  protected final String TEXT_18 = ") {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_19 = " domain = ";
  protected final String TEXT_20 = ".getEditingDomain(linkStyle);" + NL + "\t\t";
  protected final String TEXT_21 = " result = new OpenDiagramCommand((";
  protected final String TEXT_22 = ") linkStyle);" + NL + "\t\treturn new ";
  protected final String TEXT_23 = "(domain, result);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected static class OpenDiagramCommand extends ";
  protected final String TEXT_24 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_25 = " myDiagramLink;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected OpenDiagramCommand(";
  protected final String TEXT_26 = " linkStyle) {" + NL + "\t\t\tmyDiagramLink = linkStyle;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t";
  protected final String TEXT_27 = " diagramToOpen = getDiagramToOpen();" + NL + "\t\t\tif (diagramToOpen == null) {" + NL + "\t\t\t\tdiagramToOpen = createNewDiagram();" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_28 = " diagramURI = ";
  protected final String TEXT_29 = ".getURI(diagramToOpen);" + NL + "\t\t\t";
  protected final String TEXT_30 = " page = ";
  protected final String TEXT_31 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage();";
  protected final String TEXT_32 = NL + "\t\t\t";
  protected final String TEXT_33 = " editorInput = new ";
  protected final String TEXT_34 = "(diagramURI);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tpage.openEditor(editorInput, getEditorID());" + NL + "\t\t\t} catch (";
  protected final String TEXT_35 = " e) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Can't open diagram\", e);" + NL + "\t\t\t}";
  protected final String TEXT_36 = NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_37 = " diagramView = (";
  protected final String TEXT_38 = ")page.showView(getViewID());" + NL + "\t\t\t\tdiagramView.showDiagram(null, diagramURI);" + NL + "\t\t\t} catch (";
  protected final String TEXT_39 = " e) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Can't open diagram\", e);" + NL + "\t\t\t}";
  protected final String TEXT_40 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_41 = " getDiagramToOpen() {" + NL + "\t\t\t";
  protected final String TEXT_42 = " result = myDiagramLink.getDiagramLink();" + NL + "\t\t\t// take first that matches the given model ID." + NL + "\t\t\tif (result != null && result.getType().equals(getDiagramKind())) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_43 = " createNewDiagram() {" + NL + "\t\t\t";
  protected final String TEXT_44 = " result = ";
  protected final String TEXT_45 = ".eINSTANCE.createDiagram();" + NL + "\t\t\tmyDiagramLink.setDiagramLink(result);" + NL + "\t\t\tresult.setElement(getDiagramDomainElement());" + NL + "\t\t\taddToResource(result);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tfor (";
  protected final String TEXT_46 = " it = myDiagramLink.eResource().getResourceSet().getResources().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_47 = " next = (";
  protected final String TEXT_48 = ") it.next();" + NL + "\t\t\t\t\tif (next.isLoaded() && !";
  protected final String TEXT_49 = ".isReadOnly(next)) {" + NL + "\t\t\t\t\t\tnext.save(";
  protected final String TEXT_50 = ".getSaveOptions());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_51 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_52 = NL + "\t\t\t\tthrow new RuntimeException(\"Can't create diagram of '\" + getDiagramKind() + \"' kind\", e);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns the element that should be the underlying model element for the diagram." + NL + "\t\t * By default, the element associated with the edit part is returned." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_53 = " getDiagramDomainElement() {" + NL + "\t\t\treturn ((";
  protected final String TEXT_54 = ") myDiagramLink.eContainer()).getElement();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Adds the created diagram to a resource. By default, the diagram is added to the resource which contains the initiating diagram." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void addToResource(";
  protected final String TEXT_55 = " diagram) {" + NL + "\t\t\tassert diagram.eResource() == null;" + NL + "\t\t\tassert myDiagramLink.eResource() != null;" + NL + "\t\t\tmyDiagramLink.eResource().getContents().add(diagram);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getDiagramKind() {";
  protected final String TEXT_56 = NL + "\t\t\treturn ";
  protected final String TEXT_57 = ".MODEL_ID;";
  protected final String TEXT_58 = NL + "\t\t\treturn \"";
  protected final String TEXT_59 = "\";";
  protected final String TEXT_60 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */";
  protected final String TEXT_61 = NL + "\t\tprotected String getEditorID() {";
  protected final String TEXT_62 = NL + "\t\tprotected String getViewID() {";
  protected final String TEXT_63 = NL + "\t\t\treturn ";
  protected final String TEXT_64 = ".ID;";
  protected final String TEXT_65 = NL + "\t\t\treturn \"";
  protected final String TEXT_66 = "\";";
  protected final String TEXT_67 = NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_68 = NL;
a94 1
    stringBuffer.append(TEXT_1);
d99 2
a101 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d104 1
a104 1
    stringBuffer.append(TEXT_4);
d109 2
d112 1
a112 1
    stringBuffer.append(importManager.getCompilationUnitName());
d114 1
a114 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.OpenDiagramEditPolicy"));
d116 1
a116 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d118 1
a118 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d120 1
a120 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d126 2
a128 2
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d130 1
a130 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Style"));
d134 1
a134 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d136 1
a136 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
d138 1
a138 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d140 1
a140 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d142 1
a142 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d144 1
a144 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
d146 1
a146 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d148 1
a148 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d152 1
a152 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
d154 1
a154 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d156 1
a156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d158 1
a158 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil"));
d160 1
a160 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPage"));
a161 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_31);
d165 2
d168 1
a168 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d170 1
a170 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
a171 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_35);
d175 2
d180 1
a180 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart"));
a181 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_39);
d185 2
d194 1
a194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d196 1
a196 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d198 1
a198 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d202 1
a202 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d206 1
a206 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d208 1
a208 1
    stringBuffer.append(importManager.getImportedName("java.io.IOException"));
d210 1
a210 1
    /*XXX: Throwing runtime exceptions is definitely not the most elegant way*/
d212 1
a212 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d214 1
a214 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d216 1
a216 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d218 1
a218 1
    if (behaviour.getDiagramKind() == null) {
d220 1
a220 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d222 1
a222 1
    } else {
d224 1
a224 1
    stringBuffer.append(behaviour.getDiagramKind());
a225 2
    }
    stringBuffer.append(TEXT_60);
d229 1
a229 1
    stringBuffer.append(TEXT_61);
d233 1
a233 1
    stringBuffer.append(TEXT_62);
d238 2
d241 1
a241 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d243 1
a243 1
    } else {
d245 1
a245 1
    stringBuffer.append(behaviour.getEditorID());
d247 1
a247 1
    }
a248 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_68);
@


1.5
log
@Updated OpenDiagramEditPolicy generation to utilize newly introduced (bug #159479) appropriate diagram styles instead of annotations
@
text
@d38 48
a85 47
  protected final String TEXT_21 = " result = new OpenDiagramCommand(linkStyle);" + NL + "\t\treturn new ";
  protected final String TEXT_22 = "(domain, result);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected static class OpenDiagramCommand extends ";
  protected final String TEXT_23 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_24 = " myDiagramLink;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected OpenDiagramCommand(";
  protected final String TEXT_25 = " linkStyle) {" + NL + "\t\t\tmyDiagramLink = linkStyle;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t";
  protected final String TEXT_26 = " diagramToOpen = getDiagramToOpen();" + NL + "\t\t\tif (diagramToOpen == null) {" + NL + "\t\t\t\tdiagramToOpen = createNewDiagram();" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_27 = " diagramURI = ";
  protected final String TEXT_28 = ".getURI(diagramToOpen);" + NL + "\t\t\t";
  protected final String TEXT_29 = " page = ";
  protected final String TEXT_30 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage();";
  protected final String TEXT_31 = NL + "\t\t\t";
  protected final String TEXT_32 = " editorInput = new ";
  protected final String TEXT_33 = "(diagramURI);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tpage.openEditor(editorInput, getEditorID());" + NL + "\t\t\t} catch (";
  protected final String TEXT_34 = " e) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Can't open diagram\", e);" + NL + "\t\t\t}";
  protected final String TEXT_35 = NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_36 = " diagramView = (";
  protected final String TEXT_37 = ")page.showView(getViewID());" + NL + "\t\t\t\tdiagramView.showDiagram(null, diagramURI);" + NL + "\t\t\t} catch (";
  protected final String TEXT_38 = " e) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Can't open diagram\", e);" + NL + "\t\t\t}";
  protected final String TEXT_39 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_40 = " getDiagramToOpen() {" + NL + "\t\t\t";
  protected final String TEXT_41 = " result = myDiagramLink.getDiagramLink();" + NL + "\t\t\t// take first that matches the given model ID." + NL + "\t\t\tif (result != null && result.getType().equals(getDiagramKind())) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_42 = " createNewDiagram() {" + NL + "\t\t\t";
  protected final String TEXT_43 = " result = ";
  protected final String TEXT_44 = ".eINSTANCE.createDiagram();" + NL + "\t\t\tmyDiagramLink.setDiagramLink(result);" + NL + "\t\t\tresult.setElement(getDiagramDomainElement());" + NL + "\t\t\taddToResource(result);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tfor (";
  protected final String TEXT_45 = " it = myDiagramLink.eResource().getResourceSet().getResources().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_46 = " next = (";
  protected final String TEXT_47 = ") it.next();" + NL + "\t\t\t\t\tif (next.isLoaded() && !";
  protected final String TEXT_48 = ".isReadOnly(next)) {" + NL + "\t\t\t\t\t\tnext.save(";
  protected final String TEXT_49 = ".getSaveOptions());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_50 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_51 = NL + "\t\t\t\tthrow new RuntimeException(\"Can't create diagram of '\" + getDiagramKind() + \"' kind\", e);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns the element that should be the underlying model element for the diagram." + NL + "\t\t * By default, the element associated with the edit part is returned." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_52 = " getDiagramDomainElement() {" + NL + "\t\t\treturn ((";
  protected final String TEXT_53 = ") myDiagramLink.eContainer()).getElement();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Adds the created diagram to a resource. By default, the diagram is added to the resource which contains the initiating diagram." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void addToResource(";
  protected final String TEXT_54 = " diagram) {" + NL + "\t\t\tassert diagram.eResource() == null;" + NL + "\t\t\tassert myDiagramLink.eResource() != null;" + NL + "\t\t\tmyDiagramLink.eResource().getContents().add(diagram);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getDiagramKind() {";
  protected final String TEXT_55 = NL + "\t\t\treturn ";
  protected final String TEXT_56 = ".MODEL_ID;";
  protected final String TEXT_57 = NL + "\t\t\treturn \"";
  protected final String TEXT_58 = "\";";
  protected final String TEXT_59 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */";
  protected final String TEXT_60 = NL + "\t\tprotected String getEditorID() {";
  protected final String TEXT_61 = NL + "\t\tprotected String getViewID() {";
  protected final String TEXT_62 = NL + "\t\t\treturn ";
  protected final String TEXT_63 = ".ID;";
  protected final String TEXT_64 = NL + "\t\t\treturn \"";
  protected final String TEXT_65 = "\";";
  protected final String TEXT_66 = NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_67 = NL;
d144 2
d147 1
a147 1
    stringBuffer.append(TEXT_22);
a148 2
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
d152 2
d155 1
a155 1
    stringBuffer.append(TEXT_26);
d157 1
a157 1
    stringBuffer.append(TEXT_27);
d159 1
a159 1
    stringBuffer.append(TEXT_28);
d161 1
a161 1
    stringBuffer.append(TEXT_29);
d163 1
a163 1
    stringBuffer.append(TEXT_30);
d167 1
a167 1
    stringBuffer.append(TEXT_31);
d169 1
a169 1
    stringBuffer.append(TEXT_32);
d171 1
a171 1
    stringBuffer.append(TEXT_33);
d173 1
a173 1
    stringBuffer.append(TEXT_34);
a176 2
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart"));
d180 2
d183 1
a183 1
    stringBuffer.append(TEXT_38);
a186 2
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d194 2
d197 1
a197 1
    stringBuffer.append(TEXT_44);
a198 2
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d202 1
a202 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d206 2
d209 1
a209 1
    stringBuffer.append(TEXT_50);
d211 1
a211 1
    stringBuffer.append(TEXT_51);
d213 1
a213 1
    stringBuffer.append(TEXT_52);
d215 1
a215 1
    stringBuffer.append(TEXT_53);
d217 1
a217 1
    stringBuffer.append(TEXT_54);
d219 1
a219 1
    stringBuffer.append(TEXT_55);
d221 1
a221 1
    stringBuffer.append(TEXT_56);
d223 1
a223 1
    stringBuffer.append(TEXT_57);
d225 1
a225 1
    stringBuffer.append(TEXT_58);
d227 1
a227 1
    stringBuffer.append(TEXT_59);
d231 1
a231 1
    stringBuffer.append(TEXT_60);
d235 1
a235 1
    stringBuffer.append(TEXT_61);
d240 1
a240 1
    stringBuffer.append(TEXT_62);
d242 1
a242 1
    stringBuffer.append(TEXT_63);
d244 1
a244 1
    stringBuffer.append(TEXT_64);
d246 1
a246 1
    stringBuffer.append(TEXT_65);
d248 1
a248 1
    stringBuffer.append(TEXT_66);
d250 1
a250 1
    stringBuffer.append(TEXT_67);
@


1.4
log
@Never save read-only resources
@
text
@d33 52
a84 54
  protected final String TEXT_16 = " annotation = view.getEAnnotation(\"";
  protected final String TEXT_17 = "\");" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_18 = " domain = ";
  protected final String TEXT_19 = ".getEditingDomain(annotation);" + NL + "\t\t";
  protected final String TEXT_20 = " result = new OpenDiagramCommand(annotation);" + NL + "\t\treturn new ";
  protected final String TEXT_21 = "(domain, result);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected static class OpenDiagramCommand extends ";
  protected final String TEXT_22 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_23 = " myAnnotation;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected OpenDiagramCommand(";
  protected final String TEXT_24 = " annotation) {" + NL + "\t\t\tmyAnnotation = annotation;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t";
  protected final String TEXT_25 = " diagramToOpen = getDiagramToOpen();" + NL + "\t\t\tif (diagramToOpen == null) {" + NL + "\t\t\t\tdiagramToOpen = createNewDiagram();" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_26 = " diagramURI = ";
  protected final String TEXT_27 = ".getURI(diagramToOpen);" + NL + "\t\t\t";
  protected final String TEXT_28 = " page = ";
  protected final String TEXT_29 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage();";
  protected final String TEXT_30 = NL + "\t\t\t";
  protected final String TEXT_31 = " editorInput = new ";
  protected final String TEXT_32 = "(diagramURI);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tpage.openEditor(editorInput, getEditorID());" + NL + "\t\t\t} catch (";
  protected final String TEXT_33 = " e) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Can't open diagram\", e);" + NL + "\t\t\t}";
  protected final String TEXT_34 = NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_35 = " diagramView = (";
  protected final String TEXT_36 = ")page.showView(getViewID());" + NL + "\t\t\t\tdiagramView.showDiagram(null, diagramURI);" + NL + "\t\t\t} catch (";
  protected final String TEXT_37 = " e) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Can't open diagram\", e);" + NL + "\t\t\t}";
  protected final String TEXT_38 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_39 = " getDiagramToOpen() {" + NL + "\t\t\t// take first that matches the given model ID." + NL + "\t\t\tfor (";
  protected final String TEXT_40 = " it = myAnnotation.getReferences().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\tObject next = it.next();" + NL + "\t\t\t\tif (next instanceof ";
  protected final String TEXT_41 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_42 = " result = (";
  protected final String TEXT_43 = ") next;" + NL + "\t\t\t\t\tif (result.getType().equals(getDiagramKind())) {" + NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_44 = " createNewDiagram() {" + NL + "\t\t\t";
  protected final String TEXT_45 = " result = ";
  protected final String TEXT_46 = ".eINSTANCE.createDiagram();" + NL + "\t\t\tmyAnnotation.getReferences().add(result);" + NL + "\t\t\tresult.setElement(getDiagramDomainElement());" + NL + "\t\t\taddToResource(result);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tfor (";
  protected final String TEXT_47 = " it = myAnnotation.eResource().getResourceSet().getResources().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_48 = " next = (";
  protected final String TEXT_49 = ") it.next();" + NL + "\t\t\t\t\tif (next.isLoaded() && !";
  protected final String TEXT_50 = ".isReadOnly(next)) {" + NL + "\t\t\t\t\t\tnext.save(";
  protected final String TEXT_51 = ".getSaveOptions());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_52 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_53 = NL + "\t\t\t\tthrow new RuntimeException(\"Can't create diagram of '\" + getDiagramKind() + \"' kind\", e);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns the element that should be the underlying model element for the diagram." + NL + "\t\t * By default, the element associated with the edit part is returned." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_54 = " getDiagramDomainElement() {" + NL + "\t\t\treturn ((";
  protected final String TEXT_55 = ") myAnnotation.getEModelElement()).getElement();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Adds the created diagram to a resource. By default, the diagram is added to the resource which contains the annotation." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void addToResource(";
  protected final String TEXT_56 = " diagram) {" + NL + "\t\t\tassert diagram.eResource() == null;" + NL + "\t\t\tassert myAnnotation.eResource() != null;" + NL + "\t\t\tmyAnnotation.eResource().getContents().add(diagram);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getDiagramKind() {";
  protected final String TEXT_57 = NL + "\t\t\treturn ";
  protected final String TEXT_58 = ".MODEL_ID;";
  protected final String TEXT_59 = NL + "\t\t\treturn \"";
  protected final String TEXT_60 = "\";";
  protected final String TEXT_61 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */";
  protected final String TEXT_62 = NL + "\t\tprotected String getEditorID() {";
  protected final String TEXT_63 = NL + "\t\tprotected String getViewID() {";
  protected final String TEXT_64 = NL + "\t\t\treturn ";
  protected final String TEXT_65 = ".ID;";
  protected final String TEXT_66 = NL + "\t\t\treturn \"";
  protected final String TEXT_67 = "\";";
  protected final String TEXT_68 = NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_69 = NL;
d131 1
a131 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d133 1
a133 1
    stringBuffer.append(org.eclipse.gmf.codegen.gmfgen.impl.OpenDiagramBehaviourImpl.ANNOTATION_SOURCE);
d135 2
d138 1
a138 1
    stringBuffer.append(TEXT_18);
d140 1
a140 1
    stringBuffer.append(TEXT_19);
d142 1
a142 1
    stringBuffer.append(TEXT_20);
d144 1
a144 1
    stringBuffer.append(TEXT_21);
a145 2
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d147 1
a147 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d149 2
d152 1
a152 1
    stringBuffer.append(TEXT_25);
d154 1
a154 1
    stringBuffer.append(TEXT_26);
d156 1
a156 1
    stringBuffer.append(TEXT_27);
d158 1
a158 1
    stringBuffer.append(TEXT_28);
d160 1
a160 1
    stringBuffer.append(TEXT_29);
d164 1
a164 1
    stringBuffer.append(TEXT_30);
d166 1
a166 1
    stringBuffer.append(TEXT_31);
d168 1
a168 1
    stringBuffer.append(TEXT_32);
d170 1
a170 1
    stringBuffer.append(TEXT_33);
a173 2
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart"));
d177 2
d180 1
a180 1
    stringBuffer.append(TEXT_37);
d184 1
a184 1
    stringBuffer.append(TEXT_38);
a185 2
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d193 1
a193 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d195 1
a195 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d197 1
a197 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d199 1
a199 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d201 1
a201 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d203 1
a203 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d205 1
a205 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d207 1
a207 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d209 1
a209 1
    stringBuffer.append(importManager.getImportedName("java.io.IOException"));
d211 1
a211 1
    /*XXX: Throwing runtime exceptions is definitely not the most elegant way*/
d213 1
a213 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d215 1
a215 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d217 1
a217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d219 1
a219 1
    if (behaviour.getDiagramKind() == null) {
d221 1
a221 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d223 1
a223 1
    } else {
a224 4
    stringBuffer.append(behaviour.getDiagramKind());
    stringBuffer.append(TEXT_60);
    }
    stringBuffer.append(TEXT_61);
d228 1
a228 1
    stringBuffer.append(TEXT_62);
d232 1
a232 1
    stringBuffer.append(TEXT_63);
d237 1
a237 1
    stringBuffer.append(TEXT_64);
d239 1
a239 1
    stringBuffer.append(TEXT_65);
d241 1
a241 1
    stringBuffer.append(TEXT_66);
d243 1
a243 1
    stringBuffer.append(TEXT_67);
d245 1
a245 1
    stringBuffer.append(TEXT_68);
d247 1
a247 1
    stringBuffer.append(TEXT_69);
@


1.3
log
@[179970] - Adopt code generater to make use of EMF "conditional resource saving";
Correctly set charset for IFiles
@
text
@d66 21
a86 20
  protected final String TEXT_49 = ") it.next();" + NL + "\t\t\t\t\tif (next.isLoaded()) {" + NL + "\t\t\t\t\t\tnext.save(";
  protected final String TEXT_50 = ".getSaveOptions());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_51 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_52 = NL + "\t\t\t\tthrow new RuntimeException(\"Can't create diagram of '\" + getDiagramKind() + \"' kind\", e);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns the element that should be the underlying model element for the diagram." + NL + "\t\t * By default, the element associated with the edit part is returned." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_53 = " getDiagramDomainElement() {" + NL + "\t\t\treturn ((";
  protected final String TEXT_54 = ") myAnnotation.getEModelElement()).getElement();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Adds the created diagram to a resource. By default, the diagram is added to the resource which contains the annotation." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void addToResource(";
  protected final String TEXT_55 = " diagram) {" + NL + "\t\t\tassert diagram.eResource() == null;" + NL + "\t\t\tassert myAnnotation.eResource() != null;" + NL + "\t\t\tmyAnnotation.eResource().getContents().add(diagram);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getDiagramKind() {";
  protected final String TEXT_56 = NL + "\t\t\treturn ";
  protected final String TEXT_57 = ".MODEL_ID;";
  protected final String TEXT_58 = NL + "\t\t\treturn \"";
  protected final String TEXT_59 = "\";";
  protected final String TEXT_60 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */";
  protected final String TEXT_61 = NL + "\t\tprotected String getEditorID() {";
  protected final String TEXT_62 = NL + "\t\tprotected String getViewID() {";
  protected final String TEXT_63 = NL + "\t\t\treturn ";
  protected final String TEXT_64 = ".ID;";
  protected final String TEXT_65 = NL + "\t\t\treturn \"";
  protected final String TEXT_66 = "\";";
  protected final String TEXT_67 = NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_68 = NL;
d209 2
d212 1
a212 1
    stringBuffer.append(TEXT_51);
d214 1
a214 1
    stringBuffer.append(TEXT_52);
d216 1
a216 1
    stringBuffer.append(TEXT_53);
d218 1
a218 1
    stringBuffer.append(TEXT_54);
d220 1
a220 1
    stringBuffer.append(TEXT_55);
d222 1
a222 1
    stringBuffer.append(TEXT_56);
d224 1
a224 1
    stringBuffer.append(TEXT_57);
d226 1
a226 1
    stringBuffer.append(TEXT_58);
d228 1
a228 1
    stringBuffer.append(TEXT_59);
d230 1
a230 1
    stringBuffer.append(TEXT_60);
d234 1
a234 1
    stringBuffer.append(TEXT_61);
d238 1
a238 1
    stringBuffer.append(TEXT_62);
d243 1
a243 1
    stringBuffer.append(TEXT_63);
d245 1
a245 1
    stringBuffer.append(TEXT_64);
d247 1
a247 1
    stringBuffer.append(TEXT_65);
d249 1
a249 1
    stringBuffer.append(TEXT_66);
d251 1
a251 1
    stringBuffer.append(TEXT_67);
d253 1
a253 1
    stringBuffer.append(TEXT_68);
@


1.2
log
@[163214]: Lite runtime should support generation to a View
[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate
@
text
@d66 2
a67 2
  protected final String TEXT_49 = ") it.next();" + NL + "\t\t\t\t\tif (next.isLoaded() && (!next.isTrackingModification() || next.isModified())) {" + NL + "\t\t\t\t\t\tnext.save(";
  protected final String TEXT_50 = ".EMPTY_MAP);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
d206 1
a206 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
@


1.1
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d45 41
a85 33
  protected final String TEXT_28 = " editorInput = new ";
  protected final String TEXT_29 = "(diagramURI);" + NL + "\t\t\t";
  protected final String TEXT_30 = " page = ";
  protected final String TEXT_31 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage();" + NL + "\t\t\ttry {" + NL + "\t\t\t\tpage.openEditor(editorInput, getEditorID());" + NL + "\t\t\t} catch (";
  protected final String TEXT_32 = " e) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Can't open diagram\", e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_33 = " getDiagramToOpen() {" + NL + "\t\t\t// take first that matches the given model ID." + NL + "\t\t\tfor (";
  protected final String TEXT_34 = " it = myAnnotation.getReferences().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\tObject next = it.next();" + NL + "\t\t\t\tif (next instanceof ";
  protected final String TEXT_35 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_36 = " result = (";
  protected final String TEXT_37 = ") next;" + NL + "\t\t\t\t\tif (result.getType().equals(getDiagramKind())) {" + NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_38 = " createNewDiagram() {" + NL + "\t\t\t";
  protected final String TEXT_39 = " result = ";
  protected final String TEXT_40 = ".eINSTANCE.createDiagram();" + NL + "\t\t\tmyAnnotation.getReferences().add(result);" + NL + "\t\t\tresult.setElement(getDiagramDomainElement());" + NL + "\t\t\taddToResource(result);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tfor (";
  protected final String TEXT_41 = " it = myAnnotation.eResource().getResourceSet().getResources().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_42 = " next = (";
  protected final String TEXT_43 = ") it.next();" + NL + "\t\t\t\t\tif (next.isLoaded() && (!next.isTrackingModification() || next.isModified())) {" + NL + "\t\t\t\t\t\tnext.save(";
  protected final String TEXT_44 = ".EMPTY_MAP);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_45 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_46 = NL + "\t\t\t\tthrow new RuntimeException(\"Can't create diagram of '\" + getDiagramKind() + \"' kind\", e);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns the element that should be the underlying model element for the diagram." + NL + "\t\t * By default, the element associated with the edit part is returned." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_47 = " getDiagramDomainElement() {" + NL + "\t\t\treturn ((";
  protected final String TEXT_48 = ") myAnnotation.getEModelElement()).getElement();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Adds the created diagram to a resource. By default, the diagram is added to the resource which contains the annotation." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void addToResource(";
  protected final String TEXT_49 = " diagram) {" + NL + "\t\t\tassert diagram.eResource() == null;" + NL + "\t\t\tassert myAnnotation.eResource() != null;" + NL + "\t\t\tmyAnnotation.eResource().getContents().add(diagram);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getDiagramKind() {";
  protected final String TEXT_50 = NL + "\t\t\treturn ";
  protected final String TEXT_51 = ".MODEL_ID;";
  protected final String TEXT_52 = NL + "\t\t\treturn \"";
  protected final String TEXT_53 = "\";";
  protected final String TEXT_54 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditorID() {";
  protected final String TEXT_55 = NL + "\t\t\treturn ";
  protected final String TEXT_56 = ".ID;";
  protected final String TEXT_57 = NL + "\t\t\treturn \"";
  protected final String TEXT_58 = "\";";
  protected final String TEXT_59 = NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_60 = NL;
d94 1
d156 1
a156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d158 1
a158 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d160 3
a162 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPage"));
d164 1
a164 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d166 2
a168 2
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d170 3
a172 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d174 1
a174 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d176 1
a176 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d178 1
a178 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d180 3
a182 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d186 12
d199 1
a199 1
    stringBuffer.append(TEXT_40);
d201 1
a201 1
    stringBuffer.append(TEXT_41);
d203 1
a203 1
    stringBuffer.append(TEXT_42);
d205 1
a205 1
    stringBuffer.append(TEXT_43);
d207 1
a207 1
    stringBuffer.append(TEXT_44);
d209 1
a209 1
    stringBuffer.append(TEXT_45);
d211 1
a211 1
    stringBuffer.append(TEXT_46);
d213 1
a213 1
    stringBuffer.append(TEXT_47);
d215 1
a215 1
    stringBuffer.append(TEXT_48);
d217 1
a217 1
    stringBuffer.append(TEXT_49);
d219 1
a219 1
    stringBuffer.append(TEXT_50);
d221 1
a221 1
    stringBuffer.append(TEXT_51);
d223 1
a223 1
    stringBuffer.append(TEXT_52);
d225 1
a225 1
    stringBuffer.append(TEXT_53);
d227 12
a238 1
    stringBuffer.append(TEXT_54);
d240 1
a240 1
    stringBuffer.append(TEXT_55);
d242 1
a242 1
    stringBuffer.append(TEXT_56);
d244 1
a244 1
    stringBuffer.append(TEXT_57);
d246 1
a246 1
    stringBuffer.append(TEXT_58);
d248 1
a248 1
    stringBuffer.append(TEXT_59);
d250 1
a250 1
    stringBuffer.append(TEXT_60);
@

