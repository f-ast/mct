head	1.27;
access;
symbols
	v20080910-1520:1.27
	v20070403-1500:1.26
	v20070330-1300:1.26
	v20060330-1300:1.26
	v20070322-1100:1.26
	v20060316-0600:1.26
	v20070307-0700:1.24
	v20070228-2000:1.22
	v20070221-1500:1.21
	v20070208-1800:1.21
	v20070103-0300:1.19
	M4_20:1.19
	v20061222-1800:1.19
	v20061214-0000:1.19
	v20061120-1300:1.18
	M3_20:1.18
	v20061117-0800:1.18
	v20061013-1330:1.15
	v20061005-1700:1.5.2.1
	M1_20:1.9
	v20060904-1500:1.9
	v20060824-1600:1.5.2.1
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.27
date	2007.04.04.11.04.49;	author bblajer;	state dead;
branches;
next	1.26;
commitid	18c54613864d4567;

1.26
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.25;
commitid	617845f977b04567;

1.25
date	2007.03.09.17.19.35;	author bblajer;	state Exp;
branches;
next	1.24;
commitid	22ed45f197244567;

1.24
date	2007.03.02.21.35.39;	author bblajer;	state Exp;
branches;
next	1.23;
commitid	403a45e898a74567;

1.23
date	2007.03.02.21.21.16;	author bblajer;	state Exp;
branches;
next	1.22;
commitid	2b1945e895484567;

1.22
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.21;
commitid	496945df14164567;

1.21
date	2007.01.12.21.50.38;	author bblajer;	state Exp;
branches;
next	1.20;
commitid	252345a802aa4567;

1.20
date	2007.01.11.19.16.11;	author bblajer;	state Exp;
branches;
next	1.19;
commitid	6c2845a68cf94567;

1.19
date	2006.12.12.12.54.42;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	355b457ea6574567;

1.18
date	2006.11.09.18.15.42;	author bblajer;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.31.15.58.12;	author bblajer;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.18.14.22.07;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.12.10.23.44;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.11.15.45.01;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.06.20.09.23;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.04.19.27.26;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.09.14.34.54;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.19.19.14.13;	author ashatalin;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.05.24.18.18.05;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;

1.5.2.1
date	2006.08.24.12.09.01;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.27
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@package org.eclipse.gmf.codegen.templates.lite.parts;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;

public class DiagramEditPartGenerator
{
  protected static String nl;
  public static synchronized DiagramEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    DiagramEditPartGenerator result = new DiagramEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL;
  protected final String TEXT_3 = "((";
  protected final String TEXT_4 = ")";
  protected final String TEXT_5 = "((";
  protected final String TEXT_6 = ")";
  protected final String TEXT_7 = ")";
  protected final String TEXT_8 = ".eGet(";
  protected final String TEXT_9 = ".eINSTANCE.get";
  protected final String TEXT_10 = "())";
  protected final String TEXT_11 = ")";
  protected final String TEXT_12 = "((";
  protected final String TEXT_13 = ")";
  protected final String TEXT_14 = ")";
  protected final String TEXT_15 = ".";
  protected final String TEXT_16 = "()";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_20 = " extends AbstractGraphicalEditPart implements ";
  protected final String TEXT_21 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String MODEL_ID = \"";
  protected final String TEXT_22 = "\";" + NL;
  protected final String TEXT_23 = NL;
  protected final String TEXT_24 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_25 = ";";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_27 = "(";
  protected final String TEXT_28 = " model) {" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_29 = " getDiagram() {" + NL + "\t\treturn (";
  protected final String TEXT_30 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_33 = " view = (";
  protected final String TEXT_34 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_35 = " view = (";
  protected final String TEXT_36 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());";
  protected final String TEXT_37 = NL;
  protected final String TEXT_38 = NL + "installEditPolicy(";
  protected final String TEXT_39 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_40 = "());";
  protected final String TEXT_41 = NL;
  protected final String TEXT_42 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_43 = "\", new ";
  protected final String TEXT_44 = "()); //$NON-NLS-1$";
  protected final String TEXT_45 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_46 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_47 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_48 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_49 = "(this);" + NL + "\t\t}" + NL + "\t\tif (";
  protected final String TEXT_50 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_51 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_52 = NL;
  protected final String TEXT_53 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_54 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_55 = " feature, ";
  protected final String TEXT_56 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_59 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_60 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_61 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_62 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_63 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_64 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_65 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_66 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_67 = NL;
  protected final String TEXT_68 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_69 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_70 = " domainModelEditDomain = ";
  protected final String TEXT_71 = ".getEditingDomain(";
  protected final String TEXT_72 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_73 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_74 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_75 = " {";
  protected final String TEXT_76 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_77 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_78 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_79 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_80 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_81 = " createFilter() {";
  protected final String TEXT_82 = NL + "\t\t\t";
  protected final String TEXT_83 = " filter = ";
  protected final String TEXT_84 = ".createFeatureFilter(";
  protected final String TEXT_85 = ".eINSTANCE.get";
  protected final String TEXT_86 = "());";
  protected final String TEXT_87 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_88 = ".createFeatureFilter(";
  protected final String TEXT_89 = ".eINSTANCE.get";
  protected final String TEXT_90 = "()));";
  protected final String TEXT_91 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_92 = ".createNotifierFilter(";
  protected final String TEXT_93 = ".getElement()));";
  protected final String TEXT_94 = NL + "\t\t\t";
  protected final String TEXT_95 = " filter = ";
  protected final String TEXT_96 = ".createNotifierFilter(";
  protected final String TEXT_97 = ".getElement());";
  protected final String TEXT_98 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_99 = NL + "\t\t\t";
  protected final String TEXT_100 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_101 = NL + "\t\t\t";
  protected final String TEXT_102 = " filter = ";
  protected final String TEXT_103 = ".NOT_TOUCH;";
  protected final String TEXT_104 = NL + "\t\t\treturn filter;";
  protected final String TEXT_105 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_106 = " getCreateNotationalElementCommand(";
  protected final String TEXT_107 = " descriptor) {";
  protected final String TEXT_108 = NL;
  protected final String TEXT_109 = "\t\t\t";
  protected final String TEXT_110 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_111 = NL + "\t\t\tcase ";
  protected final String TEXT_112 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_113 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_114 = "(";
  protected final String TEXT_115 = ", domainElement, ";
  protected final String TEXT_116 = "new ";
  protected final String TEXT_117 = "(0, 0, ";
  protected final String TEXT_118 = ", ";
  protected final String TEXT_119 = ")";
  protected final String TEXT_120 = NL + "null";
  protected final String TEXT_121 = ", ";
  protected final String TEXT_122 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_123 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_124 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_125 = " getSemanticChildNodes() {";
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = NL + "\treturn ";
  protected final String TEXT_128 = ".EMPTY_LIST;";
  protected final String TEXT_129 = NL + "\t";
  protected final String TEXT_130 = " result = new ";
  protected final String TEXT_131 = "();";
  protected final String TEXT_132 = NL + "\t";
  protected final String TEXT_133 = " viewObject = ";
  protected final String TEXT_134 = ";" + NL + "\t";
  protected final String TEXT_135 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_136 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_137 = NL + "\tfor(";
  protected final String TEXT_138 = " it = ";
  protected final String TEXT_139 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_140 = ") it.next();";
  protected final String TEXT_141 = NL + "\tnextValue = (";
  protected final String TEXT_142 = ")";
  protected final String TEXT_143 = ";";
  protected final String TEXT_144 = NL + "\tnodeVID = ";
  protected final String TEXT_145 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_146 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_147 = NL + "\tcase ";
  protected final String TEXT_148 = ".VISUAL_ID: {";
  protected final String TEXT_149 = NL + "\tif (";
  protected final String TEXT_150 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_151 = NL + "\t\tresult.add(new ";
  protected final String TEXT_152 = "(nextValue, nodeVID));";
  protected final String TEXT_153 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_154 = NL + "\t\t}";
  protected final String TEXT_155 = NL + "\t}";
  protected final String TEXT_156 = NL + "\t}";
  protected final String TEXT_157 = NL + "\treturn result;";
  protected final String TEXT_158 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_159 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_160 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_161 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_162 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_163 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_164 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_165 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_166 = " domainModelEditDomain = ";
  protected final String TEXT_167 = ".getEditingDomain(";
  protected final String TEXT_168 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_169 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_170 = NL;
  protected final String TEXT_171 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_172 = " domainModelEditDomain = ";
  protected final String TEXT_173 = ".getEditingDomain(";
  protected final String TEXT_174 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_175 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_176 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_177 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_178 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_179 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_180 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_181 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_182 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_183 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_184 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_185 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_186 = ".createEventTypeFilter(";
  protected final String TEXT_187 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_188 = ".createEventTypeFilter(";
  protected final String TEXT_189 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_190 = ".createEventTypeFilter(";
  protected final String TEXT_191 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_192 = ".createEventTypeFilter(";
  protected final String TEXT_193 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_194 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_195 = " createFilter() {";
  protected final String TEXT_196 = NL;
  protected final String TEXT_197 = NL + "\t\t\t";
  protected final String TEXT_198 = " filter = ";
  protected final String TEXT_199 = ".createFeatureFilter(";
  protected final String TEXT_200 = ".eINSTANCE.get";
  protected final String TEXT_201 = "());";
  protected final String TEXT_202 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_203 = ".createFeatureFilter(";
  protected final String TEXT_204 = ".eINSTANCE.get";
  protected final String TEXT_205 = "()));";
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = NL + "\t\t\t";
  protected final String TEXT_208 = " filter = ";
  protected final String TEXT_209 = ".createFeatureFilter(";
  protected final String TEXT_210 = ".eINSTANCE.get";
  protected final String TEXT_211 = "());";
  protected final String TEXT_212 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_213 = ".createFeatureFilter(";
  protected final String TEXT_214 = ".eINSTANCE.get";
  protected final String TEXT_215 = "()));";
  protected final String TEXT_216 = NL;
  protected final String TEXT_217 = NL + "\t\t\t";
  protected final String TEXT_218 = " filter = ";
  protected final String TEXT_219 = ".createFeatureFilter(";
  protected final String TEXT_220 = ".eINSTANCE.get";
  protected final String TEXT_221 = "());";
  protected final String TEXT_222 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_223 = ".createFeatureFilter(";
  protected final String TEXT_224 = ".eINSTANCE.get";
  protected final String TEXT_225 = "()));";
  protected final String TEXT_226 = NL;
  protected final String TEXT_227 = NL + "\t\t\t";
  protected final String TEXT_228 = " filter = ";
  protected final String TEXT_229 = ".createFeatureFilter(";
  protected final String TEXT_230 = ".eINSTANCE.get";
  protected final String TEXT_231 = "());";
  protected final String TEXT_232 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_233 = ".createFeatureFilter(";
  protected final String TEXT_234 = ".eINSTANCE.get";
  protected final String TEXT_235 = "()));";
  protected final String TEXT_236 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_237 = NL + "\t\t\t";
  protected final String TEXT_238 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_239 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_240 = NL + "\t\t\t";
  protected final String TEXT_241 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_242 = NL + "\t\t\t";
  protected final String TEXT_243 = " filter = ";
  protected final String TEXT_244 = ".NOT_TOUCH;";
  protected final String TEXT_245 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_246 = " getCreateNotationalElementCommand(";
  protected final String TEXT_247 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_248 = " linkDescriptor = (";
  protected final String TEXT_249 = ") descriptor;";
  protected final String TEXT_250 = NL;
  protected final String TEXT_251 = "\t\t\t";
  protected final String TEXT_252 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_253 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_254 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_255 = NL + "\t\t\tcase ";
  protected final String TEXT_256 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_257 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_258 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_259 = NL + "\t\t\tcase ";
  protected final String TEXT_260 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_261 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_262 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_263 = "(";
  protected final String TEXT_264 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_265 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_266 = " getSemanticChildLinks() {";
  protected final String TEXT_267 = NL;
  protected final String TEXT_268 = "\t";
  protected final String TEXT_269 = " result = new ";
  protected final String TEXT_270 = "();";
  protected final String TEXT_271 = NL + "\t";
  protected final String TEXT_272 = " modelObject = ";
  protected final String TEXT_273 = ".getElement();" + NL + "\t";
  protected final String TEXT_274 = " nextValue;";
  protected final String TEXT_275 = NL + "\tint linkVID;";
  protected final String TEXT_276 = NL + "\tfor(";
  protected final String TEXT_277 = " it = ";
  protected final String TEXT_278 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_279 = ") it.next();";
  protected final String TEXT_280 = NL + "\tnextValue = (";
  protected final String TEXT_281 = ")";
  protected final String TEXT_282 = ";";
  protected final String TEXT_283 = NL + "\tlinkVID = ";
  protected final String TEXT_284 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_285 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_286 = NL + "\tcase ";
  protected final String TEXT_287 = ".VISUAL_ID: {";
  protected final String TEXT_288 = NL + "\tif (";
  protected final String TEXT_289 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_290 = NL + "\t\t";
  protected final String TEXT_291 = " source = (";
  protected final String TEXT_292 = ")";
  protected final String TEXT_293 = ";";
  protected final String TEXT_294 = NL + "\t\t";
  protected final String TEXT_295 = " source = ";
  protected final String TEXT_296 = ".getElement();";
  protected final String TEXT_297 = NL + "\t\t";
  protected final String TEXT_298 = " target = (";
  protected final String TEXT_299 = ")";
  protected final String TEXT_300 = ";";
  protected final String TEXT_301 = NL + "\t\t";
  protected final String TEXT_302 = " target = ";
  protected final String TEXT_303 = ".getElement();";
  protected final String TEXT_304 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_305 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_306 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_307 = NL + "\t}";
  protected final String TEXT_308 = NL + "\t}";
  protected final String TEXT_309 = NL + "\t}";
  protected final String TEXT_310 = NL + "\tfor(";
  protected final String TEXT_311 = " it = ";
  protected final String TEXT_312 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_313 = ") it.next();";
  protected final String TEXT_314 = NL + "\tnextValue = (";
  protected final String TEXT_315 = ")";
  protected final String TEXT_316 = ";";
  protected final String TEXT_317 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_318 = NL + "\t\tresult.add(new ";
  protected final String TEXT_319 = "(modelObject, nextValue, null, ";
  protected final String TEXT_320 = ".VISUAL_ID));";
  protected final String TEXT_321 = NL + "\t}";
  protected final String TEXT_322 = NL + "\t}";
  protected final String TEXT_323 = NL + "\treturn result;";
  protected final String TEXT_324 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_325 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_326 = " result = new ";
  protected final String TEXT_327 = "();" + NL + "\t\t\t";
  protected final String TEXT_328 = " allLinks = ";
  protected final String TEXT_329 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_330 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_331 = " next = (";
  protected final String TEXT_332 = ") it.next();";
  protected final String TEXT_333 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_334 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_335 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_336 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_337 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_338 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_339 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_340 = ".VISUAL_ID:";
  protected final String TEXT_341 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_342 = NL + "\t\t\t\t} else {";
  protected final String TEXT_343 = NL + "\t\t\t\t}";
  protected final String TEXT_344 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_345 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_346 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_347 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_348 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_349 = ".VISUAL_ID:";
  protected final String TEXT_350 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_351 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_352 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_353 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_354 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_355 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_356 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_357 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_358 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_359 = " domainModelEditDomain = ";
  protected final String TEXT_360 = ".getEditingDomain(";
  protected final String TEXT_361 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_362 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_363 = NL;
  protected final String TEXT_364 = NL;
  protected final String TEXT_365 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_366 = " domainModelRefresher = new ";
  protected final String TEXT_367 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_368 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_369 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_370 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_371 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_372 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_373 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_374 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_375 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_376 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("NotationModelRefresher");	//from notationModelRefresher.jetinc
importManager.registerInnerClass("LinkNotationModelRefresher");	//from linkNotationModelRefresher.jetinc
importManager.registerInnerClass("TreeEditPartAdapter");
List childNodes = genDiagram.getTopLevelNodes();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(TEXT_2);
    
class FeatureGetAccessorHelper {
	/**
	 * @@param containerName the name of the container
	 * @@param feature the feature whose value is in interest
	 * @@param containerMetaClass the <code>GenClass</code> of the container, or <code>null</code>, if the container is declared as an <code>EObject</code>.
	 * @@param needsCastToResultType whether the cast to the result type is required (this parameter is only used if the <code>EClass</code> this feature belongs to is an external interface). 
	 */
	public void appendFeatureValueGetter(String containerName, GenFeature feature, GenClass containerMetaClass, boolean needsCastToResultType) {
		if (feature.getGenClass().isExternalInterface()) {
			boolean needsCastToEObject = containerMetaClass != null && containerMetaClass.isExternalInterface();
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_3);
    stringBuffer.append(importManager.getImportedName(feature.isListType() ? "java.util.Collection" : feature.getTypeGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_4);
    
			}
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_6);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_7);
    
			}

    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_10);
    
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_11);
    
			}
		} else {
			boolean needsCastToFeatureGenType = containerMetaClass == null || containerMetaClass.isExternalInterface();
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_13);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_14);
    
			}

    stringBuffer.append(TEXT_15);
    stringBuffer.append(feature.getGetAccessor());
    stringBuffer.append(TEXT_16);
    
		}
	}
}
final FeatureGetAccessorHelper myFeatureGetAccessorHelper = new FeatureGetAccessorHelper();

    stringBuffer.append(TEXT_17);
    
class DiagramEditPartHelper {
	private final List myContainedFeatureModelFacetLinks = new LinkedList();
	private final List myContainedTypeModelFacetLinks = new LinkedList();
	public DiagramEditPartHelper(GenDiagram diagram) {
		for(Iterator it = diagram.getLinks().iterator(); it.hasNext(); ) {
			GenLink genLink = (GenLink)it.next();
			if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
				continue;
			}
			GenClass containerClass;
			if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
				TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
				if (modelFacet.getSourceMetaFeature() == null && modelFacet.getTargetMetaFeature() == null) {
					//if one link feature is null, the element is treated as this end of the link. If both are null, we cannot do anything about such a link.
					containerClass = null;
				} else {
					containerClass = modelFacet.getContainmentMetaFeature().getGenClass();
				}
			} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
				GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
				containerClass = metaFeature.getGenClass();
			} else {
				continue;
			}
			if (containerClass.getEcoreClass().isSuperTypeOf(diagram.getDomainDiagramElement().getEcoreClass())) {
				if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
					myContainedTypeModelFacetLinks.add(genLink);
				} else {
					myContainedFeatureModelFacetLinks.add(genLink);
				}
			}
		}
	}

	public boolean containsLinks() {
		return containsFeatureModelFacetLinks() || containsTypeModelFacetLinks();
	}

	public boolean containsFeatureModelFacetLinks() {
		return !myContainedFeatureModelFacetLinks.isEmpty();
	}

	public boolean containsTypeModelFacetLinks() {
		return !myContainedTypeModelFacetLinks.isEmpty();
	}

	public Iterator getContainedFeatureModelFacetLinks() {
		return myContainedFeatureModelFacetLinks.iterator();
	}

	public Iterator getContainedTypeModelFacetLinks() {
		return myContainedTypeModelFacetLinks.iterator();
	}
}
final DiagramEditPartHelper myHelper = new DiagramEditPartHelper(genDiagram);

    stringBuffer.append(TEXT_18);
    
importManager.emitPackageStatement(stringBuffer);
importManager.addImport("org.eclipse.gef.editparts.AbstractGraphicalEditPart");
importManager.addImport("org.eclipse.draw2d.IFigure");
importManager.addImport("org.eclipse.draw2d.FreeformLayer");
importManager.addImport("org.eclipse.draw2d.FreeformLayout");
importManager.addImport("org.eclipse.draw2d.MarginBorder");
importManager.addImport("org.eclipse.gef.EditPolicy");
importManager.addImport("org.eclipse.draw2d.geometry.Dimension");
importManager.addImport("org.eclipse.draw2d.geometry.Point");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.SnapToGrid");
importManager.addImport("org.eclipse.gef.SnapToHelper");
importManager.addImport("org.eclipse.gef.editpolicies.RootComponentEditPolicy");
importManager.addImport("org.eclipse.gef.requests.ChangeBoundsRequest");
importManager.addImport("org.eclipse.gef.requests.CreateRequest");
importManager.addImport("org.eclipse.gmf.runtime.notation.Bounds");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.notation.Node");
importManager.addImport("org.eclipse.gmf.runtime.notation.NotationPackage");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("java.util.List");

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_19);
    stringBuffer.append(genDiagram.getEditPartClassName());
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_22);
    {
GenCommonBase genCommonBase = genDiagram;
    stringBuffer.append(TEXT_23);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_25);
    }
    stringBuffer.append(TEXT_26);
    stringBuffer.append(genDiagram.getEditPartClassName());
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_36);
    {
GenCommonBase genCommonBase = genDiagram;
    stringBuffer.append(TEXT_37);
    
String layoutEditPolicyClassName = genCommonBase.getEditPartClassName();
if (layoutEditPolicyClassName.endsWith(GenCommonBase.EDIT_PART_SUFFIX)) {
	layoutEditPolicyClassName = layoutEditPolicyClassName.substring(0, layoutEditPolicyClassName.length() - GenCommonBase.EDIT_PART_SUFFIX.length());
}
layoutEditPolicyClassName = genDiagram.getEditPoliciesPackageName() + "." + layoutEditPolicyClassName + "LayoutEditPolicy";

    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName(layoutEditPolicyClassName));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(TEXT_41);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_42);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_44);
    }
    }
    stringBuffer.append(TEXT_45);
    
//link notation model refresher should always be installed for the diagram edit part, because it tracks the uncontained links
//if (myHelper.containsLinks()) {

    stringBuffer.append(TEXT_46);
    
//}

    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.SnapToHelper"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.SnapToGrid"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.TreeEditPart"));
    stringBuffer.append(TEXT_50);
    /*@@ include file="adapters/propertySource.javajetinc"*/
    stringBuffer.append(TEXT_51);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_62);
    
//link notation model refresher should always be installed for the diagram edit part, because it tracks the uncontained links
//if (myHelper.containsLinks()) {

    stringBuffer.append(TEXT_63);
    
//}

    stringBuffer.append(TEXT_64);
    
//link notation model refresher should always be installed/uninstalled for the diagram edit part, because it tracks the uncontained links
//if (myHelper.containsLinks()) {

    stringBuffer.append(TEXT_65);
    
//}

    stringBuffer.append(TEXT_66);
    
{
String _getDiagramCode = "getDiagram()";
String _getViewCode = "getDiagram()";
boolean isListLayout = false;
final boolean _includeUncontainedLinks = true;

    stringBuffer.append(TEXT_67);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_75);
    
boolean hasConstraintsInChildren = false;
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet != null && typeModelFacet.getMetaClass() != null && typeModelFacet.getModelElementSelector() != null) {
		hasConstraintsInChildren = true;
		break;
	}
}

    
if (hasConstraintsInChildren) {

    stringBuffer.append(TEXT_76);
    stringBuffer.append(genDiagram.getVisualIDRegistryQualifiedClassName());
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_79);
    
}

    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_81);
    
{
	boolean hasDeclaredFilter = false;
	Set genChildFeatures = new LinkedHashSet();
	for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode nextNode = (GenNode) it.next();
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (genChildFeatures.contains(childMetaFeature)) {
			continue;
		}
		genChildFeatures.add(childMetaFeature);
		if (!hasDeclaredFilter) {
			hasDeclaredFilter = true;

    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_86);
    
		} else {

    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_90);
    
		}
	}	//for

    
	if (hasDeclaredFilter) {

    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_93);
    
	} else {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_97);
    
	}

    
	if (hasConstraintsInChildren) {
		if (hasDeclaredFilter) {
			hasDeclaredFilter = true;

    stringBuffer.append(TEXT_98);
    
		} else {

    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_100);
    
		}
	}
	if (!hasDeclaredFilter) {

    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_103);
    
	}

    stringBuffer.append(TEXT_104);
    
}	//local declaration of hasDeclaredFilter

    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_107);
    
{
	String _parentNode = "getHost()";

    stringBuffer.append(TEXT_108);
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_110);
    
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet == null) {
		continue;
	}
	String childNodeInterfaceName = importManager.getImportedName(nextNode.getDomainMetaClass().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(childNodeInterfaceName);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(_parentNode);
    stringBuffer.append(TEXT_115);
    
	if (!isListLayout) {
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) nextNode.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_118);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_119);
    
	} else {

    stringBuffer.append(TEXT_120);
    
	}

    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName(nextNode.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_122);
    
}

    stringBuffer.append(TEXT_123);
    
}

    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(TEXT_126);
    
if (childNodes.size() == 0) {

    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_128);
    
} else {

    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_131);
    
	Map genFeature2genNodeMap = new LinkedHashMap();
	for (int nodeIndex = 0; nodeIndex < childNodes.size(); nodeIndex++) {
		GenNode nextNode = (GenNode) childNodes.get(nodeIndex);
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (!genFeature2genNodeMap.containsKey(childMetaFeature)) {
			genFeature2genNodeMap.put(childMetaFeature, new ArrayList());
		}
		((Collection) genFeature2genNodeMap.get(childMetaFeature)).add(nextNode);
	}
	Set entrySet = genFeature2genNodeMap.entrySet();
	if (entrySet.size() > 0) {

    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_133);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_136);
    
	}
	for (Iterator entries = entrySet.iterator(); entries.hasNext();) {
		Map.Entry nextEntry = (Map.Entry) entries.next();
		GenFeature childMetaFeature = (GenFeature) nextEntry.getKey();
		Collection genNodesCollection = (Collection) nextEntry.getValue();
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_138);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, true);
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_140);
    
		} else {

    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_142);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, false);
    stringBuffer.append(TEXT_143);
    
	}

    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_145);
    
	boolean generateSwitch = genNodesCollection.size() != 1;
	if (generateSwitch) {

    stringBuffer.append(TEXT_146);
    
	}
	for (Iterator genNodesIterator = genNodesCollection.iterator(); genNodesIterator.hasNext();) {
		GenNode nextNode = (GenNode) genNodesIterator.next();
		if (generateSwitch) {

    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_148);
    
		} else {

    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_150);
    
		}

    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_152);
    
		if (generateSwitch) {

    stringBuffer.append(TEXT_153);
    
		} else {

    stringBuffer.append(TEXT_154);
    
		}
	}
	if (generateSwitch) {

    stringBuffer.append(TEXT_155);
    
	}
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_156);
    
	}
}

    stringBuffer.append(TEXT_157);
    
}

    stringBuffer.append(TEXT_158);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_169);
    stringBuffer.append(TEXT_170);
    
if (myHelper.containsLinks() || _includeUncontainedLinks) {

    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_173);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService"));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.OwnedLinksNotationModelRefresher"));
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_179);
    
	boolean hasConstraintsInContainedLinks = false;
	for (Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeModelFacet typeModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (typeModelFacet != null && typeModelFacet.getMetaClass() != null && typeModelFacet.getModelElementSelector() != null) {
			hasConstraintsInContainedLinks = true;
			break;
		}
	}
	if (hasConstraintsInContainedLinks) {

    stringBuffer.append(TEXT_180);
    stringBuffer.append(genDiagram.getVisualIDRegistryQualifiedClassName());
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_183);
    
	}
	if (_includeUncontainedLinks) {

    stringBuffer.append(TEXT_184);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_186);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_188);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_191);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_193);
    
	}

    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_195);
    
	{
		boolean hasDeclaredFilter = false;
		Set genAffectingFeatures = new LinkedHashSet();
		for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
			if (modelFacet == null) {
				continue;
			}
			GenFeature _feature = modelFacet.getChildMetaFeature();

    stringBuffer.append(TEXT_196);
    
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
	}
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_201);
    
	} else {

    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_204);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_205);
    
	}

    
			_feature = modelFacet.getSourceMetaFeature();

    stringBuffer.append(TEXT_206);
    
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
	}
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_210);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_211);
    
	} else {

    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_214);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_215);
    
	}

    
			_feature = modelFacet.getTargetMetaFeature();

    stringBuffer.append(TEXT_216);
    
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
	}
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_220);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_221);
    
	} else {

    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_224);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_225);
    
	}

    
		}
		for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			GenFeature _feature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();

    stringBuffer.append(TEXT_226);
    
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
	}
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_230);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_231);
    
	} else {

    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_233);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_234);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_235);
    
	}

    
		}
		if (hasConstraintsInContainedLinks) {
			if (hasDeclaredFilter) {

    stringBuffer.append(TEXT_236);
    
			} else {
				hasDeclaredFilter = true;

    stringBuffer.append(TEXT_237);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_238);
    
			}
		}
		if (_includeUncontainedLinks) {
			if (hasDeclaredFilter) {

    stringBuffer.append(TEXT_239);
    
			} else {
				hasDeclaredFilter = true;

    stringBuffer.append(TEXT_240);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_241);
    
			}
		}
		if (!hasDeclaredFilter) {

    stringBuffer.append(TEXT_242);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_243);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_244);
    
		}
	}	//local declaration of hasDeclaredFilter

    stringBuffer.append(TEXT_245);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_246);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_247);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_248);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_249);
    
{
	Iterator _containedTypeModelFacetLinks = myHelper.getContainedTypeModelFacetLinks();
	Iterator _containedFeatureModelFacetLinks = myHelper.getContainedFeatureModelFacetLinks();
	String _diagramCode = "getHost().getDiagram()";

    stringBuffer.append(TEXT_250);
    stringBuffer.append(TEXT_251);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_252);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_253);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IViewDecorator"));
    stringBuffer.append(TEXT_254);
    
	for(Iterator it = _containedTypeModelFacetLinks; it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (modelFacet == null) {
			continue;
		}

    stringBuffer.append(TEXT_255);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_256);
    stringBuffer.append(importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_257);
    stringBuffer.append(importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_258);
    
	}
	for(Iterator it = _containedFeatureModelFacetLinks; it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_259);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_260);
    stringBuffer.append(importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_261);
    
	}

    stringBuffer.append(TEXT_262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_263);
    stringBuffer.append(_diagramCode);
    stringBuffer.append(TEXT_264);
    
}

    stringBuffer.append(TEXT_265);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_266);
    
{
	Iterator _containedTypeModelFacetLinks = myHelper.getContainedTypeModelFacetLinks();
	Iterator _containedFeatureModelFacetLinks = myHelper.getContainedFeatureModelFacetLinks();

    stringBuffer.append(TEXT_267);
    stringBuffer.append(TEXT_268);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_269);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_270);
    
Map genFeature2genLinkMap = new LinkedHashMap();
for(Iterator it = _containedTypeModelFacetLinks; it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
	GenFeature metaFeature = modelFacet.getChildMetaFeature();
	if (!genFeature2genLinkMap.containsKey(metaFeature)) {
		genFeature2genLinkMap.put(metaFeature, new ArrayList());
	}
	((Collection) genFeature2genLinkMap.get(metaFeature)).add(genLink);
}
Map genFeature2featureGenLinkMap = new LinkedHashMap();
for(Iterator it = _containedFeatureModelFacetLinks; it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
	if (!genFeature2featureGenLinkMap.containsKey(metaFeature)) {
		genFeature2featureGenLinkMap.put(metaFeature, new ArrayList());
	}
	((Collection) genFeature2featureGenLinkMap.get(metaFeature)).add(genLink);
}
if (!genFeature2genLinkMap.isEmpty() || !genFeature2featureGenLinkMap.isEmpty()) {

    stringBuffer.append(TEXT_271);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_272);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_273);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_274);
    
}
if (!genFeature2genLinkMap.isEmpty()) {

    stringBuffer.append(TEXT_275);
    
}
for (Iterator entries = genFeature2genLinkMap.entrySet().iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature metaFeature = (GenFeature) nextEntry.getKey();
	Collection genLinksCollection = (Collection) nextEntry.getValue();
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_276);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_277);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, true);
    stringBuffer.append(TEXT_278);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_279);
    
	} else {

    stringBuffer.append(TEXT_280);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_281);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, false);
    stringBuffer.append(TEXT_282);
    
	}

    stringBuffer.append(TEXT_283);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_284);
    
	boolean generateSwitch = genLinksCollection.size() != 1;
	if (generateSwitch) {

    stringBuffer.append(TEXT_285);
    
	}
	for (Iterator genLinksIterator = genLinksCollection.iterator(); genLinksIterator.hasNext(); ) {
		GenLink nextLink = (GenLink) genLinksIterator.next();
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (generateSwitch) {

    stringBuffer.append(TEXT_286);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_287);
    
		} else {

    stringBuffer.append(TEXT_288);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_289);
    
		}
		if (modelFacet.getSourceMetaFeature() != null) {

    stringBuffer.append(TEXT_290);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_291);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_292);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("nextValue", modelFacet.getSourceMetaFeature(), null, false);
    stringBuffer.append(TEXT_293);
    
		} else {

    stringBuffer.append(TEXT_294);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_295);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_296);
    
		}
		if (modelFacet.getTargetMetaFeature() != null) {

    stringBuffer.append(TEXT_297);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_298);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_299);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("nextValue", modelFacet.getTargetMetaFeature(), null, false);
    stringBuffer.append(TEXT_300);
    
		} else {

    stringBuffer.append(TEXT_301);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_302);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_303);
    
		}

    stringBuffer.append(TEXT_304);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_305);
    
		if (generateSwitch) {

    stringBuffer.append(TEXT_306);
    
		} else {

    stringBuffer.append(TEXT_307);
    
		}

    
	}	//iterate over genLinksCollection
	if (generateSwitch) {

    stringBuffer.append(TEXT_308);
    
	}
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_309);
    
	}
}
for (Iterator entries = genFeature2featureGenLinkMap.entrySet().iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature metaFeature = (GenFeature) nextEntry.getKey();
	Collection genLinksCollection = (Collection) nextEntry.getValue();
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_310);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_311);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, true);
    stringBuffer.append(TEXT_312);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_313);
    
	} else {

    stringBuffer.append(TEXT_314);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_315);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, false);
    stringBuffer.append(TEXT_316);
    
	}

    stringBuffer.append(TEXT_317);
    
	for (Iterator genLinksIterator = genLinksCollection.iterator(); genLinksIterator.hasNext(); ) {
		GenLink nextLink = (GenLink) genLinksIterator.next();

    stringBuffer.append(TEXT_318);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_319);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_320);
    
	}

    stringBuffer.append(TEXT_321);
    
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_322);
    
	}
}

    stringBuffer.append(TEXT_323);
    
}

    stringBuffer.append(TEXT_324);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_325);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_326);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_327);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_328);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_329);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_330);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_331);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_332);
    
	if (_includeUncontainedLinks) {

    stringBuffer.append(TEXT_333);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_334);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_335);
    
	}
	if (myHelper.containsFeatureModelFacetLinks()) {

    stringBuffer.append(TEXT_336);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_337);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_338);
    
		for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_339);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_340);
    
		}

    stringBuffer.append(TEXT_341);
    
		if (myHelper.containsTypeModelFacetLinks()) {

    stringBuffer.append(TEXT_342);
    
		} else {

    stringBuffer.append(TEXT_343);
    
		}
	}
	if (myHelper.containsTypeModelFacetLinks()) {
		if (!myHelper.containsFeatureModelFacetLinks()) {

    stringBuffer.append(TEXT_344);
    
		}

    stringBuffer.append(TEXT_345);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_346);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_347);
    
		for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_348);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_349);
    
		}

    stringBuffer.append(TEXT_350);
    
	}

    stringBuffer.append(TEXT_351);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_352);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_353);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_354);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_355);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_356);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher"));
    stringBuffer.append(TEXT_357);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_358);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_359);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_360);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_361);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_362);
    
}

    
}

    stringBuffer.append(TEXT_363);
    stringBuffer.append(TEXT_364);
    stringBuffer.append(TEXT_365);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_366);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_367);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
    stringBuffer.append(TEXT_368);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
    stringBuffer.append(TEXT_369);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
    stringBuffer.append(TEXT_370);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
    stringBuffer.append(TEXT_371);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_372);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
    stringBuffer.append(TEXT_373);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
    stringBuffer.append(TEXT_374);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
    stringBuffer.append(TEXT_375);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_376);
    return stringBuffer.toString();
  }
}
@


1.26
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.25
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@d391 5
a395 9
  protected final String TEXT_372 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_373 = NL;
  protected final String TEXT_374 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_375 = " domainModelRefresher = new ";
  protected final String TEXT_376 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_377 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_378 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_379 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_380 = NL;
a547 1
importManager.addImport("org.eclipse.gef.commands.Command");
a553 1
importManager.addImport("org.eclipse.gef.commands.UnexecutableCommand");
d1716 1
d1718 1
d1720 1
a1720 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d1722 1
a1722 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
a1723 8
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
    stringBuffer.append(TEXT_377);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
    stringBuffer.append(TEXT_378);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
    stringBuffer.append(TEXT_379);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_380);
@


1.24
log
@Generated diagram plugin should at least compile when there's a node with  an abstract underlying element.
@
text
@d55 72
a126 72
  protected final String TEXT_36 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_37 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_38 = " getCreateCommand(CreateRequest request) {";
  protected final String TEXT_39 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_40 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_41 = " requestEx = (";
  protected final String TEXT_42 = ") request;" + NL + "\t\t\t\t\tif (!";
  protected final String TEXT_43 = ".MODEL_ID.equals(requestEx.getModelID())) {" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_44 = " result = new ";
  protected final String TEXT_45 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_46 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_47 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_48 = "(getDiagram(), requestEx, (";
  protected final String TEXT_49 = ")getConstraintFor(request)));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_50 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_51 = "(";
  protected final String TEXT_52 = ".getEditingDomain(getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_54 = NL;
  protected final String TEXT_55 = NL + "protected ";
  protected final String TEXT_56 = " createAddCommand(final ";
  protected final String TEXT_57 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_58 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_59 = " childNode = (";
  protected final String TEXT_60 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_61 = " editingDomain = ";
  protected final String TEXT_62 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_63 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_64 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_65 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_66 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_67 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_68 = NL + "\t\t\tcase ";
  protected final String TEXT_69 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_70 = "(";
  protected final String TEXT_71 = ", childNode, newVisualID, ";
  protected final String TEXT_72 = "null";
  protected final String TEXT_73 = "(";
  protected final String TEXT_74 = ") constraint";
  protected final String TEXT_75 = ");" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_76 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_77 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_78 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = NL + "protected ";
  protected final String TEXT_81 = " createCloneCommand(final ";
  protected final String TEXT_82 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_83 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_84 = " childNode = (";
  protected final String TEXT_85 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_86 = " editingDomain = ";
  protected final String TEXT_87 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_88 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_89 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_90 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_91 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_92 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_93 = NL + "\t\t\tcase ";
  protected final String TEXT_94 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = ", childNode, ";
  protected final String TEXT_97 = "null";
  protected final String TEXT_98 = "(";
  protected final String TEXT_99 = ") constraint";
  protected final String TEXT_100 = ");" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_101 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_102 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_103 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_104 = NL + "\t\t\tprotected ";
  protected final String TEXT_105 = " createChangeConstraintCommand(final ";
  protected final String TEXT_106 = " request, final ";
  protected final String TEXT_107 = " child, Object constraint) {";
d128 17
a144 17
  protected final String TEXT_109 = "\t\t\t\tfinal ";
  protected final String TEXT_110 = " node = (";
  protected final String TEXT_111 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_112 = " emfCommand = new ";
  protected final String TEXT_113 = "(node, request, ((";
  protected final String TEXT_114 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_115 = "(";
  protected final String TEXT_116 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_117 = " createChangeConstraintCommand(";
  protected final String TEXT_118 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_119 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_120 = NL;
  protected final String TEXT_121 = "protected ";
  protected final String TEXT_122 = " createChildEditPolicy(";
  protected final String TEXT_123 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_124 = " result = child.getEditPolicy(";
  protected final String TEXT_125 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}" + NL + "\t\t});";
d146 254
a399 339
  protected final String TEXT_127 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_128 = "\", new ";
  protected final String TEXT_129 = "()); //$NON-NLS-1$";
  protected final String TEXT_130 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_131 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_132 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_133 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_134 = "(this);" + NL + "\t\t}" + NL + "\t\tif (";
  protected final String TEXT_135 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_136 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_137 = NL;
  protected final String TEXT_138 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_140 = " feature, ";
  protected final String TEXT_141 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_142 = NL;
  protected final String TEXT_143 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_144 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_145 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_146 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_147 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_148 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_149 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_150 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_151 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_154 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_155 = " domainModelEditDomain = ";
  protected final String TEXT_156 = ".getEditingDomain(";
  protected final String TEXT_157 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_158 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_159 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_160 = " {";
  protected final String TEXT_161 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_162 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_163 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_164 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_165 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_166 = " createFilter() {";
  protected final String TEXT_167 = NL + "\t\t\t";
  protected final String TEXT_168 = " filter = ";
  protected final String TEXT_169 = ".createFeatureFilter(";
  protected final String TEXT_170 = ".eINSTANCE.get";
  protected final String TEXT_171 = "());";
  protected final String TEXT_172 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_173 = ".createFeatureFilter(";
  protected final String TEXT_174 = ".eINSTANCE.get";
  protected final String TEXT_175 = "()));";
  protected final String TEXT_176 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_177 = ".createNotifierFilter(";
  protected final String TEXT_178 = ".getElement()));";
  protected final String TEXT_179 = NL + "\t\t\t";
  protected final String TEXT_180 = " filter = ";
  protected final String TEXT_181 = ".createNotifierFilter(";
  protected final String TEXT_182 = ".getElement());";
  protected final String TEXT_183 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_184 = NL + "\t\t\t";
  protected final String TEXT_185 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_186 = NL + "\t\t\t";
  protected final String TEXT_187 = " filter = ";
  protected final String TEXT_188 = ".NOT_TOUCH;";
  protected final String TEXT_189 = NL + "\t\t\treturn filter;";
  protected final String TEXT_190 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_191 = " getCreateNotationalElementCommand(";
  protected final String TEXT_192 = " descriptor) {";
  protected final String TEXT_193 = NL;
  protected final String TEXT_194 = "\t\t\t";
  protected final String TEXT_195 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_196 = NL + "\t\t\tcase ";
  protected final String TEXT_197 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_198 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_199 = "(";
  protected final String TEXT_200 = ", domainElement, ";
  protected final String TEXT_201 = "new ";
  protected final String TEXT_202 = "(0, 0, ";
  protected final String TEXT_203 = ", ";
  protected final String TEXT_204 = ")";
  protected final String TEXT_205 = NL + "null";
  protected final String TEXT_206 = ", ";
  protected final String TEXT_207 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_208 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_209 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_210 = " getSemanticChildNodes() {";
  protected final String TEXT_211 = NL;
  protected final String TEXT_212 = NL + "\treturn ";
  protected final String TEXT_213 = ".EMPTY_LIST;";
  protected final String TEXT_214 = NL + "\t";
  protected final String TEXT_215 = " result = new ";
  protected final String TEXT_216 = "();";
  protected final String TEXT_217 = NL + "\t";
  protected final String TEXT_218 = " viewObject = ";
  protected final String TEXT_219 = ";" + NL + "\t";
  protected final String TEXT_220 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_221 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_222 = NL + "\tfor(";
  protected final String TEXT_223 = " it = ";
  protected final String TEXT_224 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_225 = ") it.next();";
  protected final String TEXT_226 = NL + "\tnextValue = (";
  protected final String TEXT_227 = ")";
  protected final String TEXT_228 = ";";
  protected final String TEXT_229 = NL + "\tnodeVID = ";
  protected final String TEXT_230 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_231 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_232 = NL + "\tcase ";
  protected final String TEXT_233 = ".VISUAL_ID: {";
  protected final String TEXT_234 = NL + "\tif (";
  protected final String TEXT_235 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_236 = NL + "\t\tresult.add(new ";
  protected final String TEXT_237 = "(nextValue, nodeVID));";
  protected final String TEXT_238 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_239 = NL + "\t\t}";
  protected final String TEXT_240 = NL + "\t}";
  protected final String TEXT_241 = NL + "\t}";
  protected final String TEXT_242 = NL + "\treturn result;";
  protected final String TEXT_243 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_244 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_245 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_246 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_247 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_248 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_249 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_250 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_251 = " domainModelEditDomain = ";
  protected final String TEXT_252 = ".getEditingDomain(";
  protected final String TEXT_253 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_254 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_255 = NL;
  protected final String TEXT_256 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_257 = " domainModelEditDomain = ";
  protected final String TEXT_258 = ".getEditingDomain(";
  protected final String TEXT_259 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_260 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_261 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_262 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_263 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_264 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_265 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_266 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_267 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_268 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_269 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_270 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_271 = ".createEventTypeFilter(";
  protected final String TEXT_272 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_273 = ".createEventTypeFilter(";
  protected final String TEXT_274 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_275 = ".createEventTypeFilter(";
  protected final String TEXT_276 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_277 = ".createEventTypeFilter(";
  protected final String TEXT_278 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_279 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_280 = " createFilter() {";
  protected final String TEXT_281 = NL;
  protected final String TEXT_282 = NL + "\t\t\t";
  protected final String TEXT_283 = " filter = ";
  protected final String TEXT_284 = ".createFeatureFilter(";
  protected final String TEXT_285 = ".eINSTANCE.get";
  protected final String TEXT_286 = "());";
  protected final String TEXT_287 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_288 = ".createFeatureFilter(";
  protected final String TEXT_289 = ".eINSTANCE.get";
  protected final String TEXT_290 = "()));";
  protected final String TEXT_291 = NL;
  protected final String TEXT_292 = NL + "\t\t\t";
  protected final String TEXT_293 = " filter = ";
  protected final String TEXT_294 = ".createFeatureFilter(";
  protected final String TEXT_295 = ".eINSTANCE.get";
  protected final String TEXT_296 = "());";
  protected final String TEXT_297 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_298 = ".createFeatureFilter(";
  protected final String TEXT_299 = ".eINSTANCE.get";
  protected final String TEXT_300 = "()));";
  protected final String TEXT_301 = NL;
  protected final String TEXT_302 = NL + "\t\t\t";
  protected final String TEXT_303 = " filter = ";
  protected final String TEXT_304 = ".createFeatureFilter(";
  protected final String TEXT_305 = ".eINSTANCE.get";
  protected final String TEXT_306 = "());";
  protected final String TEXT_307 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_308 = ".createFeatureFilter(";
  protected final String TEXT_309 = ".eINSTANCE.get";
  protected final String TEXT_310 = "()));";
  protected final String TEXT_311 = NL;
  protected final String TEXT_312 = NL + "\t\t\t";
  protected final String TEXT_313 = " filter = ";
  protected final String TEXT_314 = ".createFeatureFilter(";
  protected final String TEXT_315 = ".eINSTANCE.get";
  protected final String TEXT_316 = "());";
  protected final String TEXT_317 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_318 = ".createFeatureFilter(";
  protected final String TEXT_319 = ".eINSTANCE.get";
  protected final String TEXT_320 = "()));";
  protected final String TEXT_321 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_322 = NL + "\t\t\t";
  protected final String TEXT_323 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_324 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_325 = NL + "\t\t\t";
  protected final String TEXT_326 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_327 = NL + "\t\t\t";
  protected final String TEXT_328 = " filter = ";
  protected final String TEXT_329 = ".NOT_TOUCH;";
  protected final String TEXT_330 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_331 = " getCreateNotationalElementCommand(";
  protected final String TEXT_332 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_333 = " linkDescriptor = (";
  protected final String TEXT_334 = ") descriptor;";
  protected final String TEXT_335 = NL;
  protected final String TEXT_336 = "\t\t\t";
  protected final String TEXT_337 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_338 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_339 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_340 = NL + "\t\t\tcase ";
  protected final String TEXT_341 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_342 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_343 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_344 = NL + "\t\t\tcase ";
  protected final String TEXT_345 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_346 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_347 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_348 = "(";
  protected final String TEXT_349 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_350 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_351 = " getSemanticChildLinks() {";
  protected final String TEXT_352 = NL;
  protected final String TEXT_353 = "\t";
  protected final String TEXT_354 = " result = new ";
  protected final String TEXT_355 = "();";
  protected final String TEXT_356 = NL + "\t";
  protected final String TEXT_357 = " modelObject = ";
  protected final String TEXT_358 = ".getElement();" + NL + "\t";
  protected final String TEXT_359 = " nextValue;";
  protected final String TEXT_360 = NL + "\tint linkVID;";
  protected final String TEXT_361 = NL + "\tfor(";
  protected final String TEXT_362 = " it = ";
  protected final String TEXT_363 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_364 = ") it.next();";
  protected final String TEXT_365 = NL + "\tnextValue = (";
  protected final String TEXT_366 = ")";
  protected final String TEXT_367 = ";";
  protected final String TEXT_368 = NL + "\tlinkVID = ";
  protected final String TEXT_369 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_370 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_371 = NL + "\tcase ";
  protected final String TEXT_372 = ".VISUAL_ID: {";
  protected final String TEXT_373 = NL + "\tif (";
  protected final String TEXT_374 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_375 = NL + "\t\t";
  protected final String TEXT_376 = " source = (";
  protected final String TEXT_377 = ")";
  protected final String TEXT_378 = ";";
  protected final String TEXT_379 = NL + "\t\t";
  protected final String TEXT_380 = " source = ";
  protected final String TEXT_381 = ".getElement();";
  protected final String TEXT_382 = NL + "\t\t";
  protected final String TEXT_383 = " target = (";
  protected final String TEXT_384 = ")";
  protected final String TEXT_385 = ";";
  protected final String TEXT_386 = NL + "\t\t";
  protected final String TEXT_387 = " target = ";
  protected final String TEXT_388 = ".getElement();";
  protected final String TEXT_389 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_390 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_391 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_392 = NL + "\t}";
  protected final String TEXT_393 = NL + "\t}";
  protected final String TEXT_394 = NL + "\t}";
  protected final String TEXT_395 = NL + "\tfor(";
  protected final String TEXT_396 = " it = ";
  protected final String TEXT_397 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_398 = ") it.next();";
  protected final String TEXT_399 = NL + "\tnextValue = (";
  protected final String TEXT_400 = ")";
  protected final String TEXT_401 = ";";
  protected final String TEXT_402 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_403 = NL + "\t\tresult.add(new ";
  protected final String TEXT_404 = "(modelObject, nextValue, null, ";
  protected final String TEXT_405 = ".VISUAL_ID));";
  protected final String TEXT_406 = NL + "\t}";
  protected final String TEXT_407 = NL + "\t}";
  protected final String TEXT_408 = NL + "\treturn result;";
  protected final String TEXT_409 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_410 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_411 = " result = new ";
  protected final String TEXT_412 = "();" + NL + "\t\t\t";
  protected final String TEXT_413 = " allLinks = ";
  protected final String TEXT_414 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_415 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_416 = " next = (";
  protected final String TEXT_417 = ") it.next();";
  protected final String TEXT_418 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_419 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_420 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_421 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_422 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_423 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_424 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_425 = ".VISUAL_ID:";
  protected final String TEXT_426 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_427 = NL + "\t\t\t\t} else {";
  protected final String TEXT_428 = NL + "\t\t\t\t}";
  protected final String TEXT_429 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_430 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_431 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_432 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_433 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_434 = ".VISUAL_ID:";
  protected final String TEXT_435 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_436 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_437 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_438 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_439 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_440 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_441 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_442 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_443 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_444 = " domainModelEditDomain = ";
  protected final String TEXT_445 = ".getEditingDomain(";
  protected final String TEXT_446 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_447 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_448 = NL;
  protected final String TEXT_449 = NL;
  protected final String TEXT_450 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_451 = " domainModelRefresher = new ";
  protected final String TEXT_452 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_453 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_454 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_455 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_456 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_457 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_458 = NL;
  protected final String TEXT_459 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_460 = " domainModelRefresher = new ";
  protected final String TEXT_461 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_462 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_463 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_464 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_465 = NL;
d605 2
a606 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.XYLayoutEditPolicyEx"));
d608 7
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d616 1
a616 1
    if (null != genDiagram.getPalette()) {
d618 1
a618 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
a619 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
a620 200
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_45);
    
for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenTopLevelNode next = (GenTopLevelNode)it.next();
	if (next.isSansDomain() || next.getDomainMetaClass().isAbstract()) {
		continue;
	}

    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + next.getDomainMetaClass().getName() + next.getVisualID() + "Command"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_49);
    
}

    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_52);
    }/*when there's palette*/
    stringBuffer.append(TEXT_53);
    
{
	String _getViewCode = "getDiagram()";
	boolean isListLayout = false;

    stringBuffer.append(TEXT_54);
    
if (!childNodes.isEmpty()) {

    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_67);
    
	for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode next = (GenNode) it.next();

    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Add" + next.getModelFacet().getMetaClass().getName() + next.getVisualID() + "Command"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_71);
    if (isListLayout) {
    stringBuffer.append(TEXT_72);
    } else {
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_74);
    }
    stringBuffer.append(TEXT_75);
    
	}	//for

    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_78);
    
}	//if (!childNodes.isEmpty()) in createAddCommand

    stringBuffer.append(TEXT_79);
    
if (!childNodes.isEmpty()) {

    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_92);
    
	for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode next = (GenNode) it.next();

    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Clone" + next.getModelFacet().getMetaClass().getName() + next.getVisualID() + "Command"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_96);
    if (isListLayout) {
    stringBuffer.append(TEXT_97);
    } else {
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_99);
    }
    stringBuffer.append(TEXT_100);
    
	}	//for

    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_103);
    
}	//if (!childNodes.isEmpty())

    
}

    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ChangeBoundsCommand"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(TEXT_120);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_125);
    {
GenCommonBase genCommonBase = genDiagram;
    stringBuffer.append(TEXT_126);
d624 1
a624 1
    stringBuffer.append(TEXT_127);
d626 1
a626 1
    stringBuffer.append(TEXT_128);
d628 1
a628 1
    stringBuffer.append(TEXT_129);
d631 1
a631 1
    stringBuffer.append(TEXT_130);
d636 1
a636 1
    stringBuffer.append(TEXT_131);
d640 1
a640 1
    stringBuffer.append(TEXT_132);
d642 1
a642 1
    stringBuffer.append(TEXT_133);
d644 1
a644 1
    stringBuffer.append(TEXT_134);
d646 1
a646 1
    stringBuffer.append(TEXT_135);
d648 3
a650 3
    stringBuffer.append(TEXT_136);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(TEXT_138);
d652 1
a652 1
    stringBuffer.append(TEXT_139);
d654 1
a654 1
    stringBuffer.append(TEXT_140);
d656 3
a658 3
    stringBuffer.append(TEXT_141);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(TEXT_143);
d660 1
a660 1
    stringBuffer.append(TEXT_144);
d662 1
a662 1
    stringBuffer.append(TEXT_145);
d664 1
a664 1
    stringBuffer.append(TEXT_146);
d666 1
a666 1
    stringBuffer.append(TEXT_147);
d671 1
a671 1
    stringBuffer.append(TEXT_148);
d675 1
a675 1
    stringBuffer.append(TEXT_149);
d680 1
a680 1
    stringBuffer.append(TEXT_150);
d684 1
a684 1
    stringBuffer.append(TEXT_151);
d692 2
a693 2
    stringBuffer.append(TEXT_152);
    stringBuffer.append(TEXT_153);
d695 1
a695 1
    stringBuffer.append(TEXT_154);
d697 1
a697 1
    stringBuffer.append(TEXT_155);
d699 1
a699 1
    stringBuffer.append(TEXT_156);
d701 1
a701 1
    stringBuffer.append(TEXT_157);
d703 1
a703 1
    stringBuffer.append(TEXT_158);
d705 1
a705 1
    stringBuffer.append(TEXT_159);
d707 1
a707 1
    stringBuffer.append(TEXT_160);
d722 1
a722 1
    stringBuffer.append(TEXT_161);
d724 1
a724 1
    stringBuffer.append(TEXT_162);
d726 1
a726 1
    stringBuffer.append(TEXT_163);
d728 1
a728 1
    stringBuffer.append(TEXT_164);
d732 1
a732 1
    stringBuffer.append(TEXT_165);
d734 1
a734 1
    stringBuffer.append(TEXT_166);
d753 1
a753 1
    stringBuffer.append(TEXT_167);
d755 1
a755 1
    stringBuffer.append(TEXT_168);
d757 1
a757 1
    stringBuffer.append(TEXT_169);
d759 1
a759 1
    stringBuffer.append(TEXT_170);
d761 1
a761 1
    stringBuffer.append(TEXT_171);
d765 1
a765 1
    stringBuffer.append(TEXT_172);
d767 1
a767 1
    stringBuffer.append(TEXT_173);
d769 1
a769 1
    stringBuffer.append(TEXT_174);
d771 1
a771 1
    stringBuffer.append(TEXT_175);
d779 1
a779 1
    stringBuffer.append(TEXT_176);
d781 1
a781 1
    stringBuffer.append(TEXT_177);
d783 1
a783 1
    stringBuffer.append(TEXT_178);
d788 1
a788 1
    stringBuffer.append(TEXT_179);
d790 1
a790 1
    stringBuffer.append(TEXT_180);
d792 1
a792 1
    stringBuffer.append(TEXT_181);
d794 1
a794 1
    stringBuffer.append(TEXT_182);
d803 1
a803 1
    stringBuffer.append(TEXT_183);
d807 1
a807 1
    stringBuffer.append(TEXT_184);
d809 1
a809 1
    stringBuffer.append(TEXT_185);
d815 1
a815 1
    stringBuffer.append(TEXT_186);
d817 1
a817 1
    stringBuffer.append(TEXT_187);
d819 1
a819 1
    stringBuffer.append(TEXT_188);
d823 1
a823 1
    stringBuffer.append(TEXT_189);
d827 1
a827 1
    stringBuffer.append(TEXT_190);
d829 1
a829 1
    stringBuffer.append(TEXT_191);
d831 1
a831 1
    stringBuffer.append(TEXT_192);
d836 2
a837 2
    stringBuffer.append(TEXT_193);
    stringBuffer.append(TEXT_194);
d839 1
a839 1
    stringBuffer.append(TEXT_195);
d849 1
a849 1
    stringBuffer.append(TEXT_196);
d851 1
a851 1
    stringBuffer.append(TEXT_197);
d853 1
a853 1
    stringBuffer.append(TEXT_198);
d855 1
a855 1
    stringBuffer.append(TEXT_199);
d857 1
a857 1
    stringBuffer.append(TEXT_200);
d868 1
a868 1
    stringBuffer.append(TEXT_201);
d870 1
a870 1
    stringBuffer.append(TEXT_202);
d872 1
a872 1
    stringBuffer.append(TEXT_203);
d874 1
a874 1
    stringBuffer.append(TEXT_204);
d878 1
a878 1
    stringBuffer.append(TEXT_205);
d882 1
a882 1
    stringBuffer.append(TEXT_206);
d884 1
a884 1
    stringBuffer.append(TEXT_207);
d888 1
a888 1
    stringBuffer.append(TEXT_208);
d892 1
a892 1
    stringBuffer.append(TEXT_209);
d894 2
a895 2
    stringBuffer.append(TEXT_210);
    stringBuffer.append(TEXT_211);
d899 1
a899 1
    stringBuffer.append(TEXT_212);
d901 1
a901 1
    stringBuffer.append(TEXT_213);
d905 1
a905 1
    stringBuffer.append(TEXT_214);
d907 1
a907 1
    stringBuffer.append(TEXT_215);
d909 1
a909 1
    stringBuffer.append(TEXT_216);
d927 1
a927 1
    stringBuffer.append(TEXT_217);
d929 1
a929 1
    stringBuffer.append(TEXT_218);
d931 1
a931 1
    stringBuffer.append(TEXT_219);
d933 1
a933 1
    stringBuffer.append(TEXT_220);
d935 1
a935 1
    stringBuffer.append(TEXT_221);
d944 1
a944 1
    stringBuffer.append(TEXT_222);
d946 1
a946 1
    stringBuffer.append(TEXT_223);
d948 1
a948 1
    stringBuffer.append(TEXT_224);
d950 1
a950 1
    stringBuffer.append(TEXT_225);
d954 1
a954 1
    stringBuffer.append(TEXT_226);
d956 1
a956 1
    stringBuffer.append(TEXT_227);
d958 1
a958 1
    stringBuffer.append(TEXT_228);
d962 1
a962 1
    stringBuffer.append(TEXT_229);
d964 1
a964 1
    stringBuffer.append(TEXT_230);
d969 1
a969 1
    stringBuffer.append(TEXT_231);
d976 1
a976 1
    stringBuffer.append(TEXT_232);
d978 1
a978 1
    stringBuffer.append(TEXT_233);
d982 1
a982 1
    stringBuffer.append(TEXT_234);
d984 1
a984 1
    stringBuffer.append(TEXT_235);
d988 1
a988 1
    stringBuffer.append(TEXT_236);
d990 1
a990 1
    stringBuffer.append(TEXT_237);
d994 1
a994 1
    stringBuffer.append(TEXT_238);
d998 1
a998 1
    stringBuffer.append(TEXT_239);
d1004 1
a1004 1
    stringBuffer.append(TEXT_240);
d1009 1
a1009 1
    stringBuffer.append(TEXT_241);
d1014 1
a1014 1
    stringBuffer.append(TEXT_242);
d1018 1
a1018 1
    stringBuffer.append(TEXT_243);
d1020 1
a1020 1
    stringBuffer.append(TEXT_244);
d1022 1
a1022 1
    stringBuffer.append(TEXT_245);
d1024 1
a1024 1
    stringBuffer.append(TEXT_246);
d1026 1
a1026 1
    stringBuffer.append(TEXT_247);
d1028 1
a1028 1
    stringBuffer.append(TEXT_248);
d1030 1
a1030 1
    stringBuffer.append(TEXT_249);
d1032 1
a1032 1
    stringBuffer.append(TEXT_250);
d1034 1
a1034 1
    stringBuffer.append(TEXT_251);
d1036 1
a1036 1
    stringBuffer.append(TEXT_252);
d1038 1
a1038 1
    stringBuffer.append(TEXT_253);
d1040 2
a1041 2
    stringBuffer.append(TEXT_254);
    stringBuffer.append(TEXT_255);
d1045 1
a1045 1
    stringBuffer.append(TEXT_256);
d1047 1
a1047 1
    stringBuffer.append(TEXT_257);
d1049 1
a1049 1
    stringBuffer.append(TEXT_258);
d1051 1
a1051 1
    stringBuffer.append(TEXT_259);
d1053 1
a1053 1
    stringBuffer.append(TEXT_260);
d1055 1
a1055 1
    stringBuffer.append(TEXT_261);
d1057 1
a1057 1
    stringBuffer.append(TEXT_262);
d1059 1
a1059 1
    stringBuffer.append(TEXT_263);
d1061 1
a1061 1
    stringBuffer.append(TEXT_264);
d1074 1
a1074 1
    stringBuffer.append(TEXT_265);
d1076 1
a1076 1
    stringBuffer.append(TEXT_266);
d1078 1
a1078 1
    stringBuffer.append(TEXT_267);
d1080 1
a1080 1
    stringBuffer.append(TEXT_268);
d1085 1
a1085 1
    stringBuffer.append(TEXT_269);
d1087 1
a1087 1
    stringBuffer.append(TEXT_270);
d1089 1
a1089 1
    stringBuffer.append(TEXT_271);
d1091 1
a1091 1
    stringBuffer.append(TEXT_272);
d1093 1
a1093 1
    stringBuffer.append(TEXT_273);
d1095 1
a1095 1
    stringBuffer.append(TEXT_274);
d1097 1
a1097 1
    stringBuffer.append(TEXT_275);
d1099 1
a1099 1
    stringBuffer.append(TEXT_276);
d1101 1
a1101 1
    stringBuffer.append(TEXT_277);
d1103 1
a1103 1
    stringBuffer.append(TEXT_278);
d1107 1
a1107 1
    stringBuffer.append(TEXT_279);
d1109 1
a1109 1
    stringBuffer.append(TEXT_280);
d1122 1
a1122 1
    stringBuffer.append(TEXT_281);
d1136 1
a1136 1
    stringBuffer.append(TEXT_282);
d1138 1
a1138 1
    stringBuffer.append(TEXT_283);
d1140 1
a1140 1
    stringBuffer.append(TEXT_284);
d1142 1
a1142 1
    stringBuffer.append(TEXT_285);
d1144 1
a1144 1
    stringBuffer.append(TEXT_286);
d1148 1
a1148 1
    stringBuffer.append(TEXT_287);
d1150 1
a1150 1
    stringBuffer.append(TEXT_288);
d1152 1
a1152 1
    stringBuffer.append(TEXT_289);
d1154 1
a1154 1
    stringBuffer.append(TEXT_290);
d1161 1
a1161 1
    stringBuffer.append(TEXT_291);
d1175 1
a1175 1
    stringBuffer.append(TEXT_292);
d1177 1
a1177 1
    stringBuffer.append(TEXT_293);
d1179 1
a1179 1
    stringBuffer.append(TEXT_294);
d1181 1
a1181 1
    stringBuffer.append(TEXT_295);
d1183 1
a1183 1
    stringBuffer.append(TEXT_296);
d1187 1
a1187 1
    stringBuffer.append(TEXT_297);
d1189 1
a1189 1
    stringBuffer.append(TEXT_298);
d1191 1
a1191 1
    stringBuffer.append(TEXT_299);
d1193 1
a1193 1
    stringBuffer.append(TEXT_300);
d1200 1
a1200 1
    stringBuffer.append(TEXT_301);
d1214 1
a1214 1
    stringBuffer.append(TEXT_302);
d1216 1
a1216 1
    stringBuffer.append(TEXT_303);
d1218 1
a1218 1
    stringBuffer.append(TEXT_304);
d1220 1
a1220 1
    stringBuffer.append(TEXT_305);
d1222 1
a1222 1
    stringBuffer.append(TEXT_306);
d1226 1
a1226 1
    stringBuffer.append(TEXT_307);
d1228 1
a1228 1
    stringBuffer.append(TEXT_308);
d1230 1
a1230 1
    stringBuffer.append(TEXT_309);
d1232 1
a1232 1
    stringBuffer.append(TEXT_310);
d1242 1
a1242 1
    stringBuffer.append(TEXT_311);
d1256 1
a1256 1
    stringBuffer.append(TEXT_312);
d1258 1
a1258 1
    stringBuffer.append(TEXT_313);
d1260 1
a1260 1
    stringBuffer.append(TEXT_314);
d1262 1
a1262 1
    stringBuffer.append(TEXT_315);
d1264 1
a1264 1
    stringBuffer.append(TEXT_316);
d1268 1
a1268 1
    stringBuffer.append(TEXT_317);
d1270 1
a1270 1
    stringBuffer.append(TEXT_318);
d1272 1
a1272 1
    stringBuffer.append(TEXT_319);
d1274 1
a1274 1
    stringBuffer.append(TEXT_320);
d1283 1
a1283 1
    stringBuffer.append(TEXT_321);
d1288 1
a1288 1
    stringBuffer.append(TEXT_322);
d1290 1
a1290 1
    stringBuffer.append(TEXT_323);
d1297 1
a1297 1
    stringBuffer.append(TEXT_324);
d1302 1
a1302 1
    stringBuffer.append(TEXT_325);
d1304 1
a1304 1
    stringBuffer.append(TEXT_326);
d1310 1
a1310 1
    stringBuffer.append(TEXT_327);
d1312 1
a1312 1
    stringBuffer.append(TEXT_328);
d1314 1
a1314 1
    stringBuffer.append(TEXT_329);
d1319 1
a1319 1
    stringBuffer.append(TEXT_330);
d1321 1
a1321 1
    stringBuffer.append(TEXT_331);
d1323 1
a1323 1
    stringBuffer.append(TEXT_332);
d1325 1
a1325 1
    stringBuffer.append(TEXT_333);
d1327 1
a1327 1
    stringBuffer.append(TEXT_334);
d1334 2
a1335 2
    stringBuffer.append(TEXT_335);
    stringBuffer.append(TEXT_336);
d1337 1
a1337 1
    stringBuffer.append(TEXT_337);
d1339 1
a1339 1
    stringBuffer.append(TEXT_338);
d1341 1
a1341 1
    stringBuffer.append(TEXT_339);
d1350 1
a1350 1
    stringBuffer.append(TEXT_340);
d1352 1
a1352 1
    stringBuffer.append(TEXT_341);
d1354 1
a1354 1
    stringBuffer.append(TEXT_342);
d1356 1
a1356 1
    stringBuffer.append(TEXT_343);
d1362 1
a1362 1
    stringBuffer.append(TEXT_344);
d1364 1
a1364 1
    stringBuffer.append(TEXT_345);
d1366 1
a1366 1
    stringBuffer.append(TEXT_346);
d1370 1
a1370 1
    stringBuffer.append(TEXT_347);
d1372 1
a1372 1
    stringBuffer.append(TEXT_348);
d1374 1
a1374 1
    stringBuffer.append(TEXT_349);
d1378 1
a1378 1
    stringBuffer.append(TEXT_350);
d1380 1
a1380 1
    stringBuffer.append(TEXT_351);
d1386 2
a1387 2
    stringBuffer.append(TEXT_352);
    stringBuffer.append(TEXT_353);
d1389 1
a1389 1
    stringBuffer.append(TEXT_354);
d1391 1
a1391 1
    stringBuffer.append(TEXT_355);
d1414 1
a1414 1
    stringBuffer.append(TEXT_356);
d1416 1
a1416 1
    stringBuffer.append(TEXT_357);
d1418 1
a1418 1
    stringBuffer.append(TEXT_358);
d1420 1
a1420 1
    stringBuffer.append(TEXT_359);
d1425 1
a1425 1
    stringBuffer.append(TEXT_360);
d1434 1
a1434 1
    stringBuffer.append(TEXT_361);
d1436 1
a1436 1
    stringBuffer.append(TEXT_362);
d1438 1
a1438 1
    stringBuffer.append(TEXT_363);
d1440 1
a1440 1
    stringBuffer.append(TEXT_364);
d1444 1
a1444 1
    stringBuffer.append(TEXT_365);
d1446 1
a1446 1
    stringBuffer.append(TEXT_366);
d1448 1
a1448 1
    stringBuffer.append(TEXT_367);
d1452 1
a1452 1
    stringBuffer.append(TEXT_368);
d1454 1
a1454 1
    stringBuffer.append(TEXT_369);
d1459 1
a1459 1
    stringBuffer.append(TEXT_370);
d1467 1
a1467 1
    stringBuffer.append(TEXT_371);
d1469 1
a1469 1
    stringBuffer.append(TEXT_372);
d1473 1
a1473 1
    stringBuffer.append(TEXT_373);
d1475 1
a1475 1
    stringBuffer.append(TEXT_374);
d1480 1
a1480 1
    stringBuffer.append(TEXT_375);
d1482 1
a1482 1
    stringBuffer.append(TEXT_376);
d1484 1
a1484 1
    stringBuffer.append(TEXT_377);
d1486 1
a1486 1
    stringBuffer.append(TEXT_378);
d1490 1
a1490 1
    stringBuffer.append(TEXT_379);
d1492 1
a1492 1
    stringBuffer.append(TEXT_380);
d1494 1
a1494 1
    stringBuffer.append(TEXT_381);
d1499 1
a1499 1
    stringBuffer.append(TEXT_382);
d1501 1
a1501 1
    stringBuffer.append(TEXT_383);
d1503 1
a1503 1
    stringBuffer.append(TEXT_384);
d1505 1
a1505 1
    stringBuffer.append(TEXT_385);
d1509 1
a1509 1
    stringBuffer.append(TEXT_386);
d1511 1
a1511 1
    stringBuffer.append(TEXT_387);
d1513 1
a1513 1
    stringBuffer.append(TEXT_388);
d1517 1
a1517 1
    stringBuffer.append(TEXT_389);
d1519 1
a1519 1
    stringBuffer.append(TEXT_390);
d1523 1
a1523 1
    stringBuffer.append(TEXT_391);
d1527 1
a1527 1
    stringBuffer.append(TEXT_392);
d1535 1
a1535 1
    stringBuffer.append(TEXT_393);
d1540 1
a1540 1
    stringBuffer.append(TEXT_394);
d1550 1
a1550 1
    stringBuffer.append(TEXT_395);
d1552 1
a1552 1
    stringBuffer.append(TEXT_396);
d1554 1
a1554 1
    stringBuffer.append(TEXT_397);
d1556 1
a1556 1
    stringBuffer.append(TEXT_398);
d1560 1
a1560 1
    stringBuffer.append(TEXT_399);
d1562 1
a1562 1
    stringBuffer.append(TEXT_400);
d1564 1
a1564 1
    stringBuffer.append(TEXT_401);
d1568 1
a1568 1
    stringBuffer.append(TEXT_402);
d1573 1
a1573 1
    stringBuffer.append(TEXT_403);
d1575 1
a1575 1
    stringBuffer.append(TEXT_404);
d1577 1
a1577 1
    stringBuffer.append(TEXT_405);
d1581 1
a1581 1
    stringBuffer.append(TEXT_406);
d1585 1
a1585 1
    stringBuffer.append(TEXT_407);
d1590 1
a1590 1
    stringBuffer.append(TEXT_408);
d1594 1
a1594 1
    stringBuffer.append(TEXT_409);
d1596 1
a1596 1
    stringBuffer.append(TEXT_410);
d1598 1
a1598 1
    stringBuffer.append(TEXT_411);
d1600 1
a1600 1
    stringBuffer.append(TEXT_412);
d1602 1
a1602 1
    stringBuffer.append(TEXT_413);
d1604 1
a1604 1
    stringBuffer.append(TEXT_414);
d1606 1
a1606 1
    stringBuffer.append(TEXT_415);
d1608 1
a1608 1
    stringBuffer.append(TEXT_416);
d1610 1
a1610 1
    stringBuffer.append(TEXT_417);
d1614 1
a1614 1
    stringBuffer.append(TEXT_418);
d1616 1
a1616 1
    stringBuffer.append(TEXT_419);
d1618 1
a1618 1
    stringBuffer.append(TEXT_420);
d1623 1
a1623 1
    stringBuffer.append(TEXT_421);
d1625 1
a1625 1
    stringBuffer.append(TEXT_422);
d1627 1
a1627 1
    stringBuffer.append(TEXT_423);
d1632 1
a1632 1
    stringBuffer.append(TEXT_424);
d1634 1
a1634 1
    stringBuffer.append(TEXT_425);
d1638 1
a1638 1
    stringBuffer.append(TEXT_426);
d1642 1
a1642 1
    stringBuffer.append(TEXT_427);
d1646 1
a1646 1
    stringBuffer.append(TEXT_428);
d1653 1
a1653 1
    stringBuffer.append(TEXT_429);
d1657 1
a1657 1
    stringBuffer.append(TEXT_430);
d1659 1
a1659 1
    stringBuffer.append(TEXT_431);
d1661 1
a1661 1
    stringBuffer.append(TEXT_432);
d1666 1
a1666 1
    stringBuffer.append(TEXT_433);
d1668 1
a1668 1
    stringBuffer.append(TEXT_434);
d1672 1
a1672 1
    stringBuffer.append(TEXT_435);
d1676 1
a1676 1
    stringBuffer.append(TEXT_436);
d1678 1
a1678 1
    stringBuffer.append(TEXT_437);
d1680 1
a1680 1
    stringBuffer.append(TEXT_438);
d1682 1
a1682 1
    stringBuffer.append(TEXT_439);
d1684 1
a1684 1
    stringBuffer.append(TEXT_440);
d1686 1
a1686 1
    stringBuffer.append(TEXT_441);
d1688 1
a1688 1
    stringBuffer.append(TEXT_442);
d1690 1
a1690 1
    stringBuffer.append(TEXT_443);
d1692 1
a1692 1
    stringBuffer.append(TEXT_444);
d1694 1
a1694 1
    stringBuffer.append(TEXT_445);
d1696 1
a1696 1
    stringBuffer.append(TEXT_446);
d1698 1
a1698 1
    stringBuffer.append(TEXT_447);
d1705 3
a1707 3
    stringBuffer.append(TEXT_448);
    stringBuffer.append(TEXT_449);
    stringBuffer.append(TEXT_450);
d1709 1
a1709 1
    stringBuffer.append(TEXT_451);
d1711 1
a1711 1
    stringBuffer.append(TEXT_452);
d1713 1
a1713 1
    stringBuffer.append(TEXT_453);
d1715 1
a1715 1
    stringBuffer.append(TEXT_454);
d1717 1
a1717 1
    stringBuffer.append(TEXT_455);
d1719 1
a1719 1
    stringBuffer.append(TEXT_456);
d1721 3
a1723 3
    stringBuffer.append(TEXT_457);
    stringBuffer.append(TEXT_458);
    stringBuffer.append(TEXT_459);
d1725 1
a1725 1
    stringBuffer.append(TEXT_460);
d1727 1
a1727 1
    stringBuffer.append(TEXT_461);
d1729 1
a1729 1
    stringBuffer.append(TEXT_462);
d1731 1
a1731 1
    stringBuffer.append(TEXT_463);
d1733 1
a1733 1
    stringBuffer.append(TEXT_464);
d1735 1
a1735 1
    stringBuffer.append(TEXT_465);
@


1.23
log
@[164018]: Add<>Command and Clone<>Command moved to separate classes;
Common methods from edit policies moved to runtime superclasses
@
text
@d711 3
@


1.22
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@d38 19
a56 19
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_21 = " extends AbstractGraphicalEditPart implements ";
  protected final String TEXT_22 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String MODEL_ID = \"";
  protected final String TEXT_23 = "\";" + NL;
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_28 = "(";
  protected final String TEXT_29 = " model) {" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_30 = " getDiagram() {" + NL + "\t\treturn (";
  protected final String TEXT_31 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_32 = NL;
  protected final String TEXT_33 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_34 = " view = (";
  protected final String TEXT_35 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_36 = " view = (";
  protected final String TEXT_37 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {" + NL + "\t\t\tprotected ";
d83 88
a170 88
  protected final String TEXT_64 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int visualID = ";
  protected final String TEXT_65 = ".getVisualID(childNode);" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_66 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_67 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_68 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_69 = NL + "\t\t\tcase ";
  protected final String TEXT_70 = ".VISUAL_ID:" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t";
  protected final String TEXT_71 = " result = new ";
  protected final String TEXT_72 = "();" + NL + "\t\t\t\t\t";
  protected final String TEXT_73 = " element = childNode.getElement();";
  protected final String TEXT_74 = NL + "\t\t\t\t\tswitch (visualID) {";
  protected final String TEXT_75 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_76 = ".VISUAL_ID:";
  protected final String TEXT_77 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_78 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_79 = ".eINSTANCE.get";
  protected final String TEXT_80 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_81 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_82 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_83 = ".eINSTANCE.get";
  protected final String TEXT_84 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_85 = ".UNSET_VALUE));";
  protected final String TEXT_86 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_87 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_88 = ".eINSTANCE.get";
  protected final String TEXT_89 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_90 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_91 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_92 = ".eINSTANCE.get";
  protected final String TEXT_93 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_94 = ".UNSET_VALUE));";
  protected final String TEXT_95 = NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_96 = NL + "\t\t\t\t\t}\t";
  protected final String TEXT_97 = NL;
  protected final String TEXT_98 = NL + "\t\tif (";
  protected final String TEXT_99 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_100 = NL + "\t\t}";
  protected final String TEXT_101 = NL + "\t\tif (";
  protected final String TEXT_102 = ".size() >= ";
  protected final String TEXT_103 = ".eINSTANCE.get";
  protected final String TEXT_104 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_105 = NL + "\t\t}";
  protected final String TEXT_106 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_107 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_108 = ".getElement(), ";
  protected final String TEXT_109 = ".eINSTANCE.get";
  protected final String TEXT_110 = "(), element));";
  protected final String TEXT_111 = NL;
  protected final String TEXT_112 = NL + "\t\tif (";
  protected final String TEXT_113 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_114 = NL + "\t\t}";
  protected final String TEXT_115 = NL + "\t\tif (";
  protected final String TEXT_116 = ".size() >= ";
  protected final String TEXT_117 = ".eINSTANCE.get";
  protected final String TEXT_118 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_119 = NL + "\t\t}";
  protected final String TEXT_120 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_121 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_122 = ".getElement(), ";
  protected final String TEXT_123 = ".eINSTANCE.get";
  protected final String TEXT_124 = "(), element));";
  protected final String TEXT_125 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_126 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_127 = "(";
  protected final String TEXT_128 = "));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_129 = ".create(editingDomain, ";
  protected final String TEXT_130 = ", ";
  protected final String TEXT_131 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_132 = "(childNode, ";
  protected final String TEXT_133 = "null";
  protected final String TEXT_134 = "(";
  protected final String TEXT_135 = ") constraint";
  protected final String TEXT_136 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_137 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_138 = "(";
  protected final String TEXT_139 = ", element, ";
  protected final String TEXT_140 = "null";
  protected final String TEXT_141 = "((";
  protected final String TEXT_142 = ") constraint).getCopy().union(new ";
  protected final String TEXT_143 = "(";
  protected final String TEXT_144 = ", ";
  protected final String TEXT_145 = "))";
  protected final String TEXT_146 = ", ";
  protected final String TEXT_147 = ".INSTANCE));";
  protected final String TEXT_148 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_149 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_150 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_151 = ".INSTANCE;" + NL + "}";
d172 182
a353 182
  protected final String TEXT_153 = NL + "protected ";
  protected final String TEXT_154 = " getCloneCommand(";
  protected final String TEXT_155 = " request) {" + NL + "\t";
  protected final String TEXT_156 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_157 = " command = new ";
  protected final String TEXT_158 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_159 = " childPart;" + NL + "\t";
  protected final String TEXT_160 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_161 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_162 = " createCloneCommand(final ";
  protected final String TEXT_163 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_164 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_165 = " childNode = (";
  protected final String TEXT_166 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_167 = " editingDomain = ";
  protected final String TEXT_168 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_169 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_170 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_171 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_172 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_173 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_174 = NL + "\t\t\tcase ";
  protected final String TEXT_175 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_176 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_177 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_178 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_179 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_180 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_181 = NL;
  protected final String TEXT_182 = NL + "\t\tif (";
  protected final String TEXT_183 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_184 = NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t\tif (";
  protected final String TEXT_186 = ".size() >= ";
  protected final String TEXT_187 = ".eINSTANCE.get";
  protected final String TEXT_188 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_189 = NL + "\t\t}";
  protected final String TEXT_190 = NL;
  protected final String TEXT_191 = NL + "\t\tif (";
  protected final String TEXT_192 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_193 = NL + "\t\t}";
  protected final String TEXT_194 = NL + "\t\tif (";
  protected final String TEXT_195 = ".size() >= ";
  protected final String TEXT_196 = ".eINSTANCE.get";
  protected final String TEXT_197 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_198 = NL + "\t\t}";
  protected final String TEXT_199 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_200 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_201 = " result = (";
  protected final String TEXT_202 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_203 = "();";
  protected final String TEXT_204 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_205 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_206 = ".getElement(), ";
  protected final String TEXT_207 = ".eINSTANCE.get";
  protected final String TEXT_208 = "(), result));";
  protected final String TEXT_209 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_210 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_211 = ".getElement(), ";
  protected final String TEXT_212 = ".eINSTANCE.get";
  protected final String TEXT_213 = "(), result));";
  protected final String TEXT_214 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_215 = "(";
  protected final String TEXT_216 = ", result, ";
  protected final String TEXT_217 = "null";
  protected final String TEXT_218 = "((";
  protected final String TEXT_219 = ") constraint).getCopy().union(new ";
  protected final String TEXT_220 = "(";
  protected final String TEXT_221 = ", ";
  protected final String TEXT_222 = "))";
  protected final String TEXT_223 = ", ";
  protected final String TEXT_224 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_225 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_226 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_227 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_228 = NL + "\t\t\tprotected ";
  protected final String TEXT_229 = " createChangeConstraintCommand(final ";
  protected final String TEXT_230 = " request, final ";
  protected final String TEXT_231 = " child, Object constraint) {";
  protected final String TEXT_232 = NL;
  protected final String TEXT_233 = "\t\t\t\tfinal ";
  protected final String TEXT_234 = " node = (";
  protected final String TEXT_235 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_236 = " emfCommand = new ";
  protected final String TEXT_237 = "(node, request, ((";
  protected final String TEXT_238 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_239 = "(";
  protected final String TEXT_240 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_241 = " createChangeConstraintCommand(";
  protected final String TEXT_242 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_243 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_244 = NL;
  protected final String TEXT_245 = "protected ";
  protected final String TEXT_246 = " createChildEditPolicy(";
  protected final String TEXT_247 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_248 = " result = child.getEditPolicy(";
  protected final String TEXT_249 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}" + NL + "\t\t});";
  protected final String TEXT_250 = NL;
  protected final String TEXT_251 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_252 = "\", new ";
  protected final String TEXT_253 = "()); //$NON-NLS-1$";
  protected final String TEXT_254 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_255 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_256 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_257 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_258 = "(this);" + NL + "\t\t}" + NL + "\t\tif (";
  protected final String TEXT_259 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_260 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_261 = NL;
  protected final String TEXT_262 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_263 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_264 = " feature, ";
  protected final String TEXT_265 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_266 = NL;
  protected final String TEXT_267 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_268 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_269 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_270 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_271 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_272 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_273 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_274 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_275 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_276 = NL;
  protected final String TEXT_277 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_278 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_279 = " domainModelEditDomain = ";
  protected final String TEXT_280 = ".getEditingDomain(";
  protected final String TEXT_281 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_282 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_283 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_284 = " {";
  protected final String TEXT_285 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_286 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_287 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_288 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_289 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_290 = " createFilter() {";
  protected final String TEXT_291 = NL + "\t\t\t";
  protected final String TEXT_292 = " filter = ";
  protected final String TEXT_293 = ".createFeatureFilter(";
  protected final String TEXT_294 = ".eINSTANCE.get";
  protected final String TEXT_295 = "());";
  protected final String TEXT_296 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_297 = ".createFeatureFilter(";
  protected final String TEXT_298 = ".eINSTANCE.get";
  protected final String TEXT_299 = "()));";
  protected final String TEXT_300 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_301 = ".createNotifierFilter(";
  protected final String TEXT_302 = ".getElement()));";
  protected final String TEXT_303 = NL + "\t\t\t";
  protected final String TEXT_304 = " filter = ";
  protected final String TEXT_305 = ".createNotifierFilter(";
  protected final String TEXT_306 = ".getElement());";
  protected final String TEXT_307 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_308 = NL + "\t\t\t";
  protected final String TEXT_309 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_310 = NL + "\t\t\t";
  protected final String TEXT_311 = " filter = ";
  protected final String TEXT_312 = ".NOT_TOUCH;";
  protected final String TEXT_313 = NL + "\t\t\treturn filter;";
  protected final String TEXT_314 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_315 = " getCreateNotationalElementCommand(";
  protected final String TEXT_316 = " descriptor) {";
  protected final String TEXT_317 = NL;
  protected final String TEXT_318 = "\t\t\t";
  protected final String TEXT_319 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_320 = NL + "\t\t\tcase ";
  protected final String TEXT_321 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_322 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_323 = "(";
  protected final String TEXT_324 = ", domainElement, ";
  protected final String TEXT_325 = "new ";
  protected final String TEXT_326 = "(0, 0, ";
  protected final String TEXT_327 = ", ";
  protected final String TEXT_328 = ")";
  protected final String TEXT_329 = NL + "null";
  protected final String TEXT_330 = ", ";
  protected final String TEXT_331 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_332 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_333 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_334 = " getSemanticChildNodes() {";
d355 130
a484 254
  protected final String TEXT_336 = NL + "\treturn ";
  protected final String TEXT_337 = ".EMPTY_LIST;";
  protected final String TEXT_338 = NL + "\t";
  protected final String TEXT_339 = " result = new ";
  protected final String TEXT_340 = "();";
  protected final String TEXT_341 = NL + "\t";
  protected final String TEXT_342 = " viewObject = ";
  protected final String TEXT_343 = ";" + NL + "\t";
  protected final String TEXT_344 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_345 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_346 = NL + "\tfor(";
  protected final String TEXT_347 = " it = ";
  protected final String TEXT_348 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_349 = ") it.next();";
  protected final String TEXT_350 = NL + "\tnextValue = (";
  protected final String TEXT_351 = ")";
  protected final String TEXT_352 = ";";
  protected final String TEXT_353 = NL + "\tnodeVID = ";
  protected final String TEXT_354 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_355 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_356 = NL + "\tcase ";
  protected final String TEXT_357 = ".VISUAL_ID: {";
  protected final String TEXT_358 = NL + "\tif (";
  protected final String TEXT_359 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_360 = NL + "\t\tresult.add(new ";
  protected final String TEXT_361 = "(nextValue, nodeVID));";
  protected final String TEXT_362 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_363 = NL + "\t\t}";
  protected final String TEXT_364 = NL + "\t}";
  protected final String TEXT_365 = NL + "\t}";
  protected final String TEXT_366 = NL + "\treturn result;";
  protected final String TEXT_367 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_368 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_369 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_370 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_371 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_372 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_373 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_374 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_375 = " domainModelEditDomain = ";
  protected final String TEXT_376 = ".getEditingDomain(";
  protected final String TEXT_377 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_378 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_379 = NL;
  protected final String TEXT_380 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_381 = " domainModelEditDomain = ";
  protected final String TEXT_382 = ".getEditingDomain(";
  protected final String TEXT_383 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_384 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_385 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_386 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_387 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_388 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_389 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_390 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_391 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_392 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_393 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_394 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_395 = ".createEventTypeFilter(";
  protected final String TEXT_396 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_397 = ".createEventTypeFilter(";
  protected final String TEXT_398 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_399 = ".createEventTypeFilter(";
  protected final String TEXT_400 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_401 = ".createEventTypeFilter(";
  protected final String TEXT_402 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_403 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_404 = " createFilter() {";
  protected final String TEXT_405 = NL;
  protected final String TEXT_406 = NL + "\t\t\t";
  protected final String TEXT_407 = " filter = ";
  protected final String TEXT_408 = ".createFeatureFilter(";
  protected final String TEXT_409 = ".eINSTANCE.get";
  protected final String TEXT_410 = "());";
  protected final String TEXT_411 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_412 = ".createFeatureFilter(";
  protected final String TEXT_413 = ".eINSTANCE.get";
  protected final String TEXT_414 = "()));";
  protected final String TEXT_415 = NL;
  protected final String TEXT_416 = NL + "\t\t\t";
  protected final String TEXT_417 = " filter = ";
  protected final String TEXT_418 = ".createFeatureFilter(";
  protected final String TEXT_419 = ".eINSTANCE.get";
  protected final String TEXT_420 = "());";
  protected final String TEXT_421 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_422 = ".createFeatureFilter(";
  protected final String TEXT_423 = ".eINSTANCE.get";
  protected final String TEXT_424 = "()));";
  protected final String TEXT_425 = NL;
  protected final String TEXT_426 = NL + "\t\t\t";
  protected final String TEXT_427 = " filter = ";
  protected final String TEXT_428 = ".createFeatureFilter(";
  protected final String TEXT_429 = ".eINSTANCE.get";
  protected final String TEXT_430 = "());";
  protected final String TEXT_431 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_432 = ".createFeatureFilter(";
  protected final String TEXT_433 = ".eINSTANCE.get";
  protected final String TEXT_434 = "()));";
  protected final String TEXT_435 = NL;
  protected final String TEXT_436 = NL + "\t\t\t";
  protected final String TEXT_437 = " filter = ";
  protected final String TEXT_438 = ".createFeatureFilter(";
  protected final String TEXT_439 = ".eINSTANCE.get";
  protected final String TEXT_440 = "());";
  protected final String TEXT_441 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_442 = ".createFeatureFilter(";
  protected final String TEXT_443 = ".eINSTANCE.get";
  protected final String TEXT_444 = "()));";
  protected final String TEXT_445 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_446 = NL + "\t\t\t";
  protected final String TEXT_447 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_448 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_449 = NL + "\t\t\t";
  protected final String TEXT_450 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_451 = NL + "\t\t\t";
  protected final String TEXT_452 = " filter = ";
  protected final String TEXT_453 = ".NOT_TOUCH;";
  protected final String TEXT_454 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_455 = " getCreateNotationalElementCommand(";
  protected final String TEXT_456 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_457 = " linkDescriptor = (";
  protected final String TEXT_458 = ") descriptor;";
  protected final String TEXT_459 = NL;
  protected final String TEXT_460 = "\t\t\t";
  protected final String TEXT_461 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_462 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_463 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_464 = NL + "\t\t\tcase ";
  protected final String TEXT_465 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_466 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_467 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_468 = NL + "\t\t\tcase ";
  protected final String TEXT_469 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_470 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_471 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_472 = "(";
  protected final String TEXT_473 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_474 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_475 = " getSemanticChildLinks() {";
  protected final String TEXT_476 = NL;
  protected final String TEXT_477 = "\t";
  protected final String TEXT_478 = " result = new ";
  protected final String TEXT_479 = "();";
  protected final String TEXT_480 = NL + "\t";
  protected final String TEXT_481 = " modelObject = ";
  protected final String TEXT_482 = ".getElement();" + NL + "\t";
  protected final String TEXT_483 = " nextValue;";
  protected final String TEXT_484 = NL + "\tint linkVID;";
  protected final String TEXT_485 = NL + "\tfor(";
  protected final String TEXT_486 = " it = ";
  protected final String TEXT_487 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_488 = ") it.next();";
  protected final String TEXT_489 = NL + "\tnextValue = (";
  protected final String TEXT_490 = ")";
  protected final String TEXT_491 = ";";
  protected final String TEXT_492 = NL + "\tlinkVID = ";
  protected final String TEXT_493 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_494 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_495 = NL + "\tcase ";
  protected final String TEXT_496 = ".VISUAL_ID: {";
  protected final String TEXT_497 = NL + "\tif (";
  protected final String TEXT_498 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_499 = NL + "\t\t";
  protected final String TEXT_500 = " source = (";
  protected final String TEXT_501 = ")";
  protected final String TEXT_502 = ";";
  protected final String TEXT_503 = NL + "\t\t";
  protected final String TEXT_504 = " source = ";
  protected final String TEXT_505 = ".getElement();";
  protected final String TEXT_506 = NL + "\t\t";
  protected final String TEXT_507 = " target = (";
  protected final String TEXT_508 = ")";
  protected final String TEXT_509 = ";";
  protected final String TEXT_510 = NL + "\t\t";
  protected final String TEXT_511 = " target = ";
  protected final String TEXT_512 = ".getElement();";
  protected final String TEXT_513 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_514 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_515 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_516 = NL + "\t}";
  protected final String TEXT_517 = NL + "\t}";
  protected final String TEXT_518 = NL + "\t}";
  protected final String TEXT_519 = NL + "\tfor(";
  protected final String TEXT_520 = " it = ";
  protected final String TEXT_521 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_522 = ") it.next();";
  protected final String TEXT_523 = NL + "\tnextValue = (";
  protected final String TEXT_524 = ")";
  protected final String TEXT_525 = ";";
  protected final String TEXT_526 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_527 = NL + "\t\tresult.add(new ";
  protected final String TEXT_528 = "(modelObject, nextValue, null, ";
  protected final String TEXT_529 = ".VISUAL_ID));";
  protected final String TEXT_530 = NL + "\t}";
  protected final String TEXT_531 = NL + "\t}";
  protected final String TEXT_532 = NL + "\treturn result;";
  protected final String TEXT_533 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_534 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_535 = " result = new ";
  protected final String TEXT_536 = "();" + NL + "\t\t\t";
  protected final String TEXT_537 = " allLinks = ";
  protected final String TEXT_538 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_539 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_540 = " next = (";
  protected final String TEXT_541 = ") it.next();";
  protected final String TEXT_542 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_543 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_544 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_545 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_546 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_547 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_548 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_549 = ".VISUAL_ID:";
  protected final String TEXT_550 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_551 = NL + "\t\t\t\t} else {";
  protected final String TEXT_552 = NL + "\t\t\t\t}";
  protected final String TEXT_553 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_554 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_555 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_556 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_557 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_558 = ".VISUAL_ID:";
  protected final String TEXT_559 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_560 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_561 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_562 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_563 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_564 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_565 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_566 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_567 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_568 = " domainModelEditDomain = ";
  protected final String TEXT_569 = ".getEditingDomain(";
  protected final String TEXT_570 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_571 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_572 = NL;
  protected final String TEXT_573 = NL;
  protected final String TEXT_574 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_575 = " domainModelRefresher = new ";
  protected final String TEXT_576 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_577 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_578 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_579 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_580 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_581 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_582 = NL;
  protected final String TEXT_583 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_584 = " domainModelRefresher = new ";
  protected final String TEXT_585 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_586 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_587 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_588 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_589 = NL;
a572 27
class RelatedNodesFinder {
	private HashMap<GenClass, Collection<GenNode>> myCache = new HashMap<GenClass, Collection<GenNode>>();
	private final GenDiagram myDiagram;

	public RelatedNodesFinder(GenDiagram genDiagram) {
		myDiagram = genDiagram;
	}

	public Collection<GenNode> getRelatedGenNodes(GenClass genClass) {
		Collection<GenNode> result = myCache.get(genClass);
		if (result == null) {
			result = new LinkedList<GenNode>();
			myCache.put(genClass, result);
			for(Iterator it = myDiagram.getAllNodes().iterator(); it.hasNext(); ) {
				GenNode next = (GenNode) it.next();
				if (genClass.equals(next.getDomainMetaClass())) {
					result.add(next);
				}
			}
		}
		return result;
	}
}
RelatedNodesFinder myRelatedNodesFinder = new RelatedNodesFinder(genDiagram);

    stringBuffer.append(TEXT_18);
    
d629 1
a629 1
    stringBuffer.append(TEXT_19);
a643 1
importManager.addImport("org.eclipse.gef.editpolicies.RootComponentEditPolicy");
a645 1
importManager.addImport("org.eclipse.gef.editpolicies.XYLayoutEditPolicy");
d657 2
d660 1
a660 1
    stringBuffer.append(genDiagram.getEditPartClassName());
d662 1
a662 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
a663 2
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_23);
d666 1
d668 1
d670 1
a670 1
    stringBuffer.append(genCommonBase.getVisualID());
d672 1
a672 1
    }
d674 1
a674 1
    stringBuffer.append(genDiagram.getEditPartClassName());
a679 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d682 1
d690 1
a690 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d759 1
a759 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d761 1
a761 1
    stringBuffer.append(_getViewCode);
a762 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_68);
d767 2
d770 1
a770 1
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
d772 1
a772 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d774 1
a774 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d776 1
a776 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d778 1
a778 5
    
		{
			Collection<GenNode> relatedNodes = myRelatedNodesFinder.getRelatedGenNodes(next.getDomainMetaClass());
			if (relatedNodes.size() != 1) {

d780 1
a780 8
    
			}
			for(GenNode nextRelated : relatedNodes) {
				TypeModelFacet facet = nextRelated.getModelFacet();
				GenFeature childFeature = facet.getChildMetaFeature();
				GenFeature containmentFeature = facet.getContainmentMetaFeature();
				if (relatedNodes.size() != 1) {

a781 217
    stringBuffer.append(importManager.getImportedName(nextRelated.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_76);
    
				}
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_80);
    
					} else {

    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_85);
    
					}
				}
				if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_89);
    
				} else {

    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_94);
    
				}
				if (relatedNodes.size() != 1) {

    stringBuffer.append(TEXT_95);
    
				}
			}	//for(GenNode nextRelated : relatedNodes)
			if (relatedNodes.size() != 1) {

    stringBuffer.append(TEXT_96);
    /*switch(visualID)*/
    
			}
			TypeModelFacet facet = next.getModelFacet();
			GenFeature childFeature = facet.getChildMetaFeature();
			GenFeature containmentFeature = facet.getContainmentMetaFeature();
			if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
				GenFeature _feature = childFeature;
				String _ownerInstance = _getViewCode + ".getElement()";
				String _exceedsUpperBound = "return " + importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand") + ".INSTANCE;";
				GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_97);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_98);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_99);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_100);
    
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_101);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_104);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_105);
    
	}
}

    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_110);
    
			}
			{
				GenFeature _feature = containmentFeature;
				String _ownerInstance = _getViewCode + ".getElement()";
				String _exceedsUpperBound = "return " + importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand") + ".INSTANCE;";
				GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_111);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_112);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_114);
    
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_115);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_118);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_119);
    
	}
}

    
			}

    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_124);
    
		}	//local declaration for related nodes.

    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ExpandDrawerCommand"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.SetBoundsCommand"));
    stringBuffer.append(TEXT_132);
    if (isListLayout) {
    stringBuffer.append(TEXT_133);
    } else {
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_135);
    }
    stringBuffer.append(TEXT_136);
    
		{
			int defaultWidth = 40;
			int defaultHeight = 40;
			DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
			if (defSizeAttrs != null) {
				defaultWidth = defSizeAttrs.getWidth();
				defaultHeight = defSizeAttrs.getHeight();
			}

    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_139);
    if (isListLayout) {
    stringBuffer.append(TEXT_140);
    } else {
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_144);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_145);
    }
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_147);
    
		}

    stringBuffer.append(TEXT_148);
d785 1
a785 1
    stringBuffer.append(TEXT_149);
d787 1
a787 1
    stringBuffer.append(TEXT_150);
d789 1
a789 1
    stringBuffer.append(TEXT_151);
d793 1
a793 4
    stringBuffer.append(TEXT_152);
    
/* delegation from getCloneCommand to createCloneCommand is 100% analogous to delegation from getAddCommand() to createAddCommand() in ConstrainedLayoutEditPolicy. */

d797 1
a797 1
    stringBuffer.append(TEXT_153);
d799 1
a799 17
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_162);
d801 1
a801 1
    stringBuffer.append(TEXT_163);
d803 1
a803 1
    stringBuffer.append(TEXT_164);
d805 1
a805 1
    stringBuffer.append(TEXT_165);
d807 1
a807 1
    stringBuffer.append(TEXT_166);
d809 1
a809 1
    stringBuffer.append(TEXT_167);
d811 1
a811 1
    stringBuffer.append(TEXT_168);
d813 1
a813 1
    stringBuffer.append(TEXT_169);
d815 1
a815 1
    stringBuffer.append(TEXT_170);
d817 1
a817 1
    stringBuffer.append(TEXT_171);
d819 1
a819 1
    stringBuffer.append(TEXT_172);
d821 1
a821 1
    stringBuffer.append(TEXT_173);
a824 3
		TypeModelFacet facet = next.getModelFacet();
		GenFeature childFeature = facet.getChildMetaFeature();
		GenFeature containmentFeature = facet.getContainmentMetaFeature();
d826 1
a826 1
    stringBuffer.append(TEXT_174);
d828 3
a830 98
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CommandWrapper"));
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_179);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.CopyCommand"));
    stringBuffer.append(TEXT_180);
    
		if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
			GenFeature _feature = childFeature;
			String _ownerInstance = _getViewCode + ".getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_181);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_182);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_183);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_184);
    
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_185);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_186);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_187);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_188);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_189);
    
	}
}

    
		}
		{
			GenFeature _feature = containmentFeature;
			String _ownerInstance = _getViewCode + ".getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_190);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_191);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_192);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_193);
    
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_194);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_196);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_197);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_198);
    
	}
}

    
		}

    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_203);
    
		if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {

    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_205);
d832 1
a832 32
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_207);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_208);
    
		}

    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_210);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_212);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_213);
    
		{
			int defaultWidth = 40;
			int defaultHeight = 40;
			DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
			if (defSizeAttrs != null) {
				defaultWidth = defSizeAttrs.getWidth();
				defaultHeight = defSizeAttrs.getHeight();
			}

    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_216);
d834 1
a834 1
    stringBuffer.append(TEXT_217);
d836 1
a836 1
    stringBuffer.append(TEXT_218);
d838 1
a838 7
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_220);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_221);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_222);
d840 1
a840 3
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_224);
a841 1
		}
d844 1
a844 1
    stringBuffer.append(TEXT_225);
d846 1
a846 1
    stringBuffer.append(TEXT_226);
d848 1
a848 1
    stringBuffer.append(TEXT_227);
d855 1
a855 1
    stringBuffer.append(TEXT_228);
d857 1
a857 1
    stringBuffer.append(TEXT_229);
d859 1
a859 1
    stringBuffer.append(TEXT_230);
d861 3
a863 3
    stringBuffer.append(TEXT_231);
    stringBuffer.append(TEXT_232);
    stringBuffer.append(TEXT_233);
d865 1
a865 1
    stringBuffer.append(TEXT_234);
d867 1
a867 1
    stringBuffer.append(TEXT_235);
d869 1
a869 1
    stringBuffer.append(TEXT_236);
d871 1
a871 1
    stringBuffer.append(TEXT_237);
d873 1
a873 1
    stringBuffer.append(TEXT_238);
d875 1
a875 1
    stringBuffer.append(TEXT_239);
d877 1
a877 1
    stringBuffer.append(TEXT_240);
d879 1
a879 1
    stringBuffer.append(TEXT_241);
d881 1
a881 1
    stringBuffer.append(TEXT_242);
d883 3
a885 3
    stringBuffer.append(TEXT_243);
    stringBuffer.append(TEXT_244);
    stringBuffer.append(TEXT_245);
d887 1
a887 1
    stringBuffer.append(TEXT_246);
d889 1
a889 1
    stringBuffer.append(TEXT_247);
d891 1
a891 1
    stringBuffer.append(TEXT_248);
d893 1
a893 1
    stringBuffer.append(TEXT_249);
d896 1
a896 1
    stringBuffer.append(TEXT_250);
d900 1
a900 1
    stringBuffer.append(TEXT_251);
d902 1
a902 1
    stringBuffer.append(TEXT_252);
d904 1
a904 1
    stringBuffer.append(TEXT_253);
d907 1
a907 1
    stringBuffer.append(TEXT_254);
d912 1
a912 1
    stringBuffer.append(TEXT_255);
d916 1
a916 1
    stringBuffer.append(TEXT_256);
d918 1
a918 1
    stringBuffer.append(TEXT_257);
d920 1
a920 1
    stringBuffer.append(TEXT_258);
d922 1
a922 1
    stringBuffer.append(TEXT_259);
d924 3
a926 3
    stringBuffer.append(TEXT_260);
    stringBuffer.append(TEXT_261);
    stringBuffer.append(TEXT_262);
d928 1
a928 1
    stringBuffer.append(TEXT_263);
d930 1
a930 1
    stringBuffer.append(TEXT_264);
d932 3
a934 3
    stringBuffer.append(TEXT_265);
    stringBuffer.append(TEXT_266);
    stringBuffer.append(TEXT_267);
d936 1
a936 1
    stringBuffer.append(TEXT_268);
d938 1
a938 1
    stringBuffer.append(TEXT_269);
d940 1
a940 1
    stringBuffer.append(TEXT_270);
d942 1
a942 1
    stringBuffer.append(TEXT_271);
d947 1
a947 1
    stringBuffer.append(TEXT_272);
d951 1
a951 1
    stringBuffer.append(TEXT_273);
d956 1
a956 1
    stringBuffer.append(TEXT_274);
d960 1
a960 1
    stringBuffer.append(TEXT_275);
d968 2
a969 2
    stringBuffer.append(TEXT_276);
    stringBuffer.append(TEXT_277);
d971 1
a971 1
    stringBuffer.append(TEXT_278);
d973 1
a973 1
    stringBuffer.append(TEXT_279);
d975 1
a975 1
    stringBuffer.append(TEXT_280);
d977 1
a977 1
    stringBuffer.append(TEXT_281);
d979 1
a979 1
    stringBuffer.append(TEXT_282);
d981 1
a981 1
    stringBuffer.append(TEXT_283);
d983 1
a983 1
    stringBuffer.append(TEXT_284);
d998 1
a998 1
    stringBuffer.append(TEXT_285);
d1000 1
a1000 1
    stringBuffer.append(TEXT_286);
d1002 1
a1002 1
    stringBuffer.append(TEXT_287);
d1004 1
a1004 1
    stringBuffer.append(TEXT_288);
d1008 1
a1008 1
    stringBuffer.append(TEXT_289);
d1010 1
a1010 1
    stringBuffer.append(TEXT_290);
d1029 1
a1029 1
    stringBuffer.append(TEXT_291);
d1031 1
a1031 1
    stringBuffer.append(TEXT_292);
d1033 1
a1033 1
    stringBuffer.append(TEXT_293);
d1035 1
a1035 1
    stringBuffer.append(TEXT_294);
d1037 1
a1037 1
    stringBuffer.append(TEXT_295);
d1041 1
a1041 1
    stringBuffer.append(TEXT_296);
d1043 1
a1043 1
    stringBuffer.append(TEXT_297);
d1045 1
a1045 1
    stringBuffer.append(TEXT_298);
d1047 1
a1047 1
    stringBuffer.append(TEXT_299);
d1055 1
a1055 1
    stringBuffer.append(TEXT_300);
d1057 1
a1057 1
    stringBuffer.append(TEXT_301);
d1059 1
a1059 1
    stringBuffer.append(TEXT_302);
d1064 1
a1064 1
    stringBuffer.append(TEXT_303);
d1066 1
a1066 1
    stringBuffer.append(TEXT_304);
d1068 1
a1068 1
    stringBuffer.append(TEXT_305);
d1070 1
a1070 1
    stringBuffer.append(TEXT_306);
d1079 1
a1079 1
    stringBuffer.append(TEXT_307);
d1083 1
a1083 1
    stringBuffer.append(TEXT_308);
d1085 1
a1085 1
    stringBuffer.append(TEXT_309);
d1091 1
a1091 1
    stringBuffer.append(TEXT_310);
d1093 1
a1093 1
    stringBuffer.append(TEXT_311);
d1095 1
a1095 1
    stringBuffer.append(TEXT_312);
d1099 1
a1099 1
    stringBuffer.append(TEXT_313);
d1103 1
a1103 1
    stringBuffer.append(TEXT_314);
d1105 1
a1105 1
    stringBuffer.append(TEXT_315);
d1107 1
a1107 1
    stringBuffer.append(TEXT_316);
d1112 2
a1113 2
    stringBuffer.append(TEXT_317);
    stringBuffer.append(TEXT_318);
d1115 1
a1115 1
    stringBuffer.append(TEXT_319);
d1125 1
a1125 1
    stringBuffer.append(TEXT_320);
d1127 1
a1127 1
    stringBuffer.append(TEXT_321);
d1129 1
a1129 1
    stringBuffer.append(TEXT_322);
d1131 1
a1131 1
    stringBuffer.append(TEXT_323);
d1133 1
a1133 1
    stringBuffer.append(TEXT_324);
d1144 1
a1144 1
    stringBuffer.append(TEXT_325);
d1146 1
a1146 1
    stringBuffer.append(TEXT_326);
d1148 1
a1148 1
    stringBuffer.append(TEXT_327);
d1150 1
a1150 1
    stringBuffer.append(TEXT_328);
d1154 1
a1154 1
    stringBuffer.append(TEXT_329);
d1158 1
a1158 1
    stringBuffer.append(TEXT_330);
d1160 1
a1160 1
    stringBuffer.append(TEXT_331);
d1164 1
a1164 1
    stringBuffer.append(TEXT_332);
d1168 1
a1168 1
    stringBuffer.append(TEXT_333);
d1170 2
a1171 2
    stringBuffer.append(TEXT_334);
    stringBuffer.append(TEXT_335);
d1175 1
a1175 1
    stringBuffer.append(TEXT_336);
d1177 1
a1177 1
    stringBuffer.append(TEXT_337);
d1181 1
a1181 1
    stringBuffer.append(TEXT_338);
d1183 1
a1183 1
    stringBuffer.append(TEXT_339);
d1185 1
a1185 1
    stringBuffer.append(TEXT_340);
d1203 1
a1203 1
    stringBuffer.append(TEXT_341);
d1205 1
a1205 1
    stringBuffer.append(TEXT_342);
d1207 1
a1207 1
    stringBuffer.append(TEXT_343);
d1209 1
a1209 1
    stringBuffer.append(TEXT_344);
d1211 1
a1211 1
    stringBuffer.append(TEXT_345);
d1220 1
a1220 1
    stringBuffer.append(TEXT_346);
d1222 1
a1222 1
    stringBuffer.append(TEXT_347);
d1224 1
a1224 1
    stringBuffer.append(TEXT_348);
d1226 1
a1226 1
    stringBuffer.append(TEXT_349);
d1230 1
a1230 1
    stringBuffer.append(TEXT_350);
d1232 1
a1232 1
    stringBuffer.append(TEXT_351);
d1234 1
a1234 1
    stringBuffer.append(TEXT_352);
d1238 1
a1238 1
    stringBuffer.append(TEXT_353);
d1240 1
a1240 1
    stringBuffer.append(TEXT_354);
d1245 1
a1245 1
    stringBuffer.append(TEXT_355);
d1252 1
a1252 1
    stringBuffer.append(TEXT_356);
d1254 1
a1254 1
    stringBuffer.append(TEXT_357);
d1258 1
a1258 1
    stringBuffer.append(TEXT_358);
d1260 1
a1260 1
    stringBuffer.append(TEXT_359);
d1264 1
a1264 1
    stringBuffer.append(TEXT_360);
d1266 1
a1266 1
    stringBuffer.append(TEXT_361);
d1270 1
a1270 1
    stringBuffer.append(TEXT_362);
d1274 1
a1274 1
    stringBuffer.append(TEXT_363);
d1280 1
a1280 1
    stringBuffer.append(TEXT_364);
d1285 1
a1285 1
    stringBuffer.append(TEXT_365);
d1290 1
a1290 1
    stringBuffer.append(TEXT_366);
d1294 1
a1294 1
    stringBuffer.append(TEXT_367);
d1296 1
a1296 1
    stringBuffer.append(TEXT_368);
d1298 1
a1298 1
    stringBuffer.append(TEXT_369);
d1300 1
a1300 1
    stringBuffer.append(TEXT_370);
d1302 1
a1302 1
    stringBuffer.append(TEXT_371);
d1304 1
a1304 1
    stringBuffer.append(TEXT_372);
d1306 1
a1306 1
    stringBuffer.append(TEXT_373);
d1308 1
a1308 1
    stringBuffer.append(TEXT_374);
d1310 1
a1310 1
    stringBuffer.append(TEXT_375);
d1312 1
a1312 1
    stringBuffer.append(TEXT_376);
d1314 1
a1314 1
    stringBuffer.append(TEXT_377);
d1316 2
a1317 2
    stringBuffer.append(TEXT_378);
    stringBuffer.append(TEXT_379);
d1321 1
a1321 1
    stringBuffer.append(TEXT_380);
d1323 1
a1323 1
    stringBuffer.append(TEXT_381);
d1325 1
a1325 1
    stringBuffer.append(TEXT_382);
d1327 1
a1327 1
    stringBuffer.append(TEXT_383);
d1329 1
a1329 1
    stringBuffer.append(TEXT_384);
d1331 1
a1331 1
    stringBuffer.append(TEXT_385);
d1333 1
a1333 1
    stringBuffer.append(TEXT_386);
d1335 1
a1335 1
    stringBuffer.append(TEXT_387);
d1337 1
a1337 1
    stringBuffer.append(TEXT_388);
d1350 1
a1350 1
    stringBuffer.append(TEXT_389);
d1352 1
a1352 1
    stringBuffer.append(TEXT_390);
d1354 1
a1354 1
    stringBuffer.append(TEXT_391);
d1356 1
a1356 1
    stringBuffer.append(TEXT_392);
d1361 1
a1361 1
    stringBuffer.append(TEXT_393);
d1363 1
a1363 1
    stringBuffer.append(TEXT_394);
d1365 1
a1365 1
    stringBuffer.append(TEXT_395);
d1367 1
a1367 1
    stringBuffer.append(TEXT_396);
d1369 1
a1369 1
    stringBuffer.append(TEXT_397);
d1371 1
a1371 1
    stringBuffer.append(TEXT_398);
d1373 1
a1373 1
    stringBuffer.append(TEXT_399);
d1375 1
a1375 1
    stringBuffer.append(TEXT_400);
d1377 1
a1377 1
    stringBuffer.append(TEXT_401);
d1379 1
a1379 1
    stringBuffer.append(TEXT_402);
d1383 1
a1383 1
    stringBuffer.append(TEXT_403);
d1385 1
a1385 1
    stringBuffer.append(TEXT_404);
d1398 1
a1398 1
    stringBuffer.append(TEXT_405);
d1412 1
a1412 1
    stringBuffer.append(TEXT_406);
d1414 1
a1414 1
    stringBuffer.append(TEXT_407);
d1416 1
a1416 1
    stringBuffer.append(TEXT_408);
d1418 1
a1418 1
    stringBuffer.append(TEXT_409);
d1420 1
a1420 1
    stringBuffer.append(TEXT_410);
d1424 1
a1424 1
    stringBuffer.append(TEXT_411);
d1426 1
a1426 1
    stringBuffer.append(TEXT_412);
d1428 1
a1428 1
    stringBuffer.append(TEXT_413);
d1430 1
a1430 1
    stringBuffer.append(TEXT_414);
d1437 1
a1437 1
    stringBuffer.append(TEXT_415);
d1451 1
a1451 1
    stringBuffer.append(TEXT_416);
d1453 1
a1453 1
    stringBuffer.append(TEXT_417);
d1455 1
a1455 1
    stringBuffer.append(TEXT_418);
d1457 1
a1457 1
    stringBuffer.append(TEXT_419);
d1459 1
a1459 1
    stringBuffer.append(TEXT_420);
d1463 1
a1463 1
    stringBuffer.append(TEXT_421);
d1465 1
a1465 1
    stringBuffer.append(TEXT_422);
d1467 1
a1467 1
    stringBuffer.append(TEXT_423);
d1469 1
a1469 1
    stringBuffer.append(TEXT_424);
d1476 1
a1476 1
    stringBuffer.append(TEXT_425);
d1490 1
a1490 1
    stringBuffer.append(TEXT_426);
d1492 1
a1492 1
    stringBuffer.append(TEXT_427);
d1494 1
a1494 1
    stringBuffer.append(TEXT_428);
d1496 1
a1496 1
    stringBuffer.append(TEXT_429);
d1498 1
a1498 1
    stringBuffer.append(TEXT_430);
d1502 1
a1502 1
    stringBuffer.append(TEXT_431);
d1504 1
a1504 1
    stringBuffer.append(TEXT_432);
d1506 1
a1506 1
    stringBuffer.append(TEXT_433);
d1508 1
a1508 1
    stringBuffer.append(TEXT_434);
d1518 1
a1518 1
    stringBuffer.append(TEXT_435);
d1532 1
a1532 1
    stringBuffer.append(TEXT_436);
d1534 1
a1534 1
    stringBuffer.append(TEXT_437);
d1536 1
a1536 1
    stringBuffer.append(TEXT_438);
d1538 1
a1538 1
    stringBuffer.append(TEXT_439);
d1540 1
a1540 1
    stringBuffer.append(TEXT_440);
d1544 1
a1544 1
    stringBuffer.append(TEXT_441);
d1546 1
a1546 1
    stringBuffer.append(TEXT_442);
d1548 1
a1548 1
    stringBuffer.append(TEXT_443);
d1550 1
a1550 1
    stringBuffer.append(TEXT_444);
d1559 1
a1559 1
    stringBuffer.append(TEXT_445);
d1564 1
a1564 1
    stringBuffer.append(TEXT_446);
d1566 1
a1566 1
    stringBuffer.append(TEXT_447);
d1573 1
a1573 1
    stringBuffer.append(TEXT_448);
d1578 1
a1578 1
    stringBuffer.append(TEXT_449);
d1580 1
a1580 1
    stringBuffer.append(TEXT_450);
d1586 1
a1586 1
    stringBuffer.append(TEXT_451);
d1588 1
a1588 1
    stringBuffer.append(TEXT_452);
d1590 1
a1590 1
    stringBuffer.append(TEXT_453);
d1595 1
a1595 1
    stringBuffer.append(TEXT_454);
d1597 1
a1597 1
    stringBuffer.append(TEXT_455);
d1599 1
a1599 1
    stringBuffer.append(TEXT_456);
d1601 1
a1601 1
    stringBuffer.append(TEXT_457);
d1603 1
a1603 1
    stringBuffer.append(TEXT_458);
d1610 2
a1611 2
    stringBuffer.append(TEXT_459);
    stringBuffer.append(TEXT_460);
d1613 1
a1613 1
    stringBuffer.append(TEXT_461);
d1615 1
a1615 1
    stringBuffer.append(TEXT_462);
d1617 1
a1617 1
    stringBuffer.append(TEXT_463);
d1626 1
a1626 1
    stringBuffer.append(TEXT_464);
d1628 1
a1628 1
    stringBuffer.append(TEXT_465);
d1630 1
a1630 1
    stringBuffer.append(TEXT_466);
d1632 1
a1632 1
    stringBuffer.append(TEXT_467);
d1638 1
a1638 1
    stringBuffer.append(TEXT_468);
d1640 1
a1640 1
    stringBuffer.append(TEXT_469);
d1642 1
a1642 1
    stringBuffer.append(TEXT_470);
d1646 1
a1646 1
    stringBuffer.append(TEXT_471);
d1648 1
a1648 1
    stringBuffer.append(TEXT_472);
d1650 1
a1650 1
    stringBuffer.append(TEXT_473);
d1654 1
a1654 1
    stringBuffer.append(TEXT_474);
d1656 1
a1656 1
    stringBuffer.append(TEXT_475);
d1662 2
a1663 2
    stringBuffer.append(TEXT_476);
    stringBuffer.append(TEXT_477);
d1665 1
a1665 1
    stringBuffer.append(TEXT_478);
d1667 1
a1667 1
    stringBuffer.append(TEXT_479);
d1690 1
a1690 1
    stringBuffer.append(TEXT_480);
d1692 1
a1692 1
    stringBuffer.append(TEXT_481);
d1694 1
a1694 1
    stringBuffer.append(TEXT_482);
d1696 1
a1696 1
    stringBuffer.append(TEXT_483);
d1701 1
a1701 1
    stringBuffer.append(TEXT_484);
d1710 1
a1710 1
    stringBuffer.append(TEXT_485);
d1712 1
a1712 1
    stringBuffer.append(TEXT_486);
d1714 1
a1714 1
    stringBuffer.append(TEXT_487);
d1716 1
a1716 1
    stringBuffer.append(TEXT_488);
d1720 1
a1720 1
    stringBuffer.append(TEXT_489);
d1722 1
a1722 1
    stringBuffer.append(TEXT_490);
d1724 1
a1724 1
    stringBuffer.append(TEXT_491);
d1728 1
a1728 1
    stringBuffer.append(TEXT_492);
d1730 1
a1730 1
    stringBuffer.append(TEXT_493);
d1735 1
a1735 1
    stringBuffer.append(TEXT_494);
d1743 1
a1743 1
    stringBuffer.append(TEXT_495);
d1745 1
a1745 1
    stringBuffer.append(TEXT_496);
d1749 1
a1749 1
    stringBuffer.append(TEXT_497);
d1751 1
a1751 1
    stringBuffer.append(TEXT_498);
d1756 1
a1756 1
    stringBuffer.append(TEXT_499);
d1758 1
a1758 1
    stringBuffer.append(TEXT_500);
d1760 1
a1760 1
    stringBuffer.append(TEXT_501);
d1762 1
a1762 1
    stringBuffer.append(TEXT_502);
d1766 1
a1766 1
    stringBuffer.append(TEXT_503);
d1768 1
a1768 1
    stringBuffer.append(TEXT_504);
d1770 1
a1770 1
    stringBuffer.append(TEXT_505);
d1775 1
a1775 1
    stringBuffer.append(TEXT_506);
d1777 1
a1777 1
    stringBuffer.append(TEXT_507);
d1779 1
a1779 1
    stringBuffer.append(TEXT_508);
d1781 1
a1781 1
    stringBuffer.append(TEXT_509);
d1785 1
a1785 1
    stringBuffer.append(TEXT_510);
d1787 1
a1787 1
    stringBuffer.append(TEXT_511);
d1789 1
a1789 1
    stringBuffer.append(TEXT_512);
d1793 1
a1793 1
    stringBuffer.append(TEXT_513);
d1795 1
a1795 1
    stringBuffer.append(TEXT_514);
d1799 1
a1799 1
    stringBuffer.append(TEXT_515);
d1803 1
a1803 1
    stringBuffer.append(TEXT_516);
d1811 1
a1811 1
    stringBuffer.append(TEXT_517);
d1816 1
a1816 1
    stringBuffer.append(TEXT_518);
d1826 1
a1826 1
    stringBuffer.append(TEXT_519);
d1828 1
a1828 1
    stringBuffer.append(TEXT_520);
d1830 1
a1830 1
    stringBuffer.append(TEXT_521);
d1832 1
a1832 1
    stringBuffer.append(TEXT_522);
d1836 1
a1836 1
    stringBuffer.append(TEXT_523);
d1838 1
a1838 1
    stringBuffer.append(TEXT_524);
d1840 1
a1840 1
    stringBuffer.append(TEXT_525);
d1844 1
a1844 1
    stringBuffer.append(TEXT_526);
d1849 1
a1849 1
    stringBuffer.append(TEXT_527);
d1851 1
a1851 1
    stringBuffer.append(TEXT_528);
d1853 1
a1853 1
    stringBuffer.append(TEXT_529);
d1857 1
a1857 1
    stringBuffer.append(TEXT_530);
d1861 1
a1861 1
    stringBuffer.append(TEXT_531);
d1866 1
a1866 1
    stringBuffer.append(TEXT_532);
d1870 1
a1870 1
    stringBuffer.append(TEXT_533);
d1872 1
a1872 1
    stringBuffer.append(TEXT_534);
d1874 1
a1874 1
    stringBuffer.append(TEXT_535);
d1876 1
a1876 1
    stringBuffer.append(TEXT_536);
d1878 1
a1878 1
    stringBuffer.append(TEXT_537);
d1880 1
a1880 1
    stringBuffer.append(TEXT_538);
d1882 1
a1882 1
    stringBuffer.append(TEXT_539);
d1884 1
a1884 1
    stringBuffer.append(TEXT_540);
d1886 1
a1886 1
    stringBuffer.append(TEXT_541);
d1890 1
a1890 1
    stringBuffer.append(TEXT_542);
d1892 1
a1892 1
    stringBuffer.append(TEXT_543);
d1894 1
a1894 1
    stringBuffer.append(TEXT_544);
d1899 1
a1899 1
    stringBuffer.append(TEXT_545);
d1901 1
a1901 1
    stringBuffer.append(TEXT_546);
d1903 1
a1903 1
    stringBuffer.append(TEXT_547);
d1908 1
a1908 1
    stringBuffer.append(TEXT_548);
d1910 1
a1910 1
    stringBuffer.append(TEXT_549);
d1914 1
a1914 1
    stringBuffer.append(TEXT_550);
d1918 1
a1918 1
    stringBuffer.append(TEXT_551);
d1922 1
a1922 1
    stringBuffer.append(TEXT_552);
d1929 1
a1929 1
    stringBuffer.append(TEXT_553);
d1933 1
a1933 1
    stringBuffer.append(TEXT_554);
d1935 1
a1935 1
    stringBuffer.append(TEXT_555);
d1937 1
a1937 1
    stringBuffer.append(TEXT_556);
d1942 1
a1942 1
    stringBuffer.append(TEXT_557);
d1944 1
a1944 1
    stringBuffer.append(TEXT_558);
d1948 1
a1948 1
    stringBuffer.append(TEXT_559);
d1952 1
a1952 1
    stringBuffer.append(TEXT_560);
d1954 1
a1954 1
    stringBuffer.append(TEXT_561);
d1956 1
a1956 1
    stringBuffer.append(TEXT_562);
d1958 1
a1958 1
    stringBuffer.append(TEXT_563);
d1960 1
a1960 1
    stringBuffer.append(TEXT_564);
d1962 1
a1962 1
    stringBuffer.append(TEXT_565);
d1964 1
a1964 1
    stringBuffer.append(TEXT_566);
d1966 1
a1966 1
    stringBuffer.append(TEXT_567);
d1968 1
a1968 1
    stringBuffer.append(TEXT_568);
d1970 1
a1970 1
    stringBuffer.append(TEXT_569);
d1972 1
a1972 1
    stringBuffer.append(TEXT_570);
d1974 1
a1974 1
    stringBuffer.append(TEXT_571);
d1981 3
a1983 3
    stringBuffer.append(TEXT_572);
    stringBuffer.append(TEXT_573);
    stringBuffer.append(TEXT_574);
d1985 1
a1985 1
    stringBuffer.append(TEXT_575);
d1987 1
a1987 1
    stringBuffer.append(TEXT_576);
d1989 1
a1989 1
    stringBuffer.append(TEXT_577);
d1991 1
a1991 1
    stringBuffer.append(TEXT_578);
d1993 1
a1993 1
    stringBuffer.append(TEXT_579);
d1995 1
a1995 1
    stringBuffer.append(TEXT_580);
d1997 3
a1999 3
    stringBuffer.append(TEXT_581);
    stringBuffer.append(TEXT_582);
    stringBuffer.append(TEXT_583);
d2001 1
a2001 1
    stringBuffer.append(TEXT_584);
d2003 1
a2003 1
    stringBuffer.append(TEXT_585);
d2005 1
a2005 1
    stringBuffer.append(TEXT_586);
d2007 1
a2007 1
    stringBuffer.append(TEXT_587);
d2009 1
a2009 1
    stringBuffer.append(TEXT_588);
d2011 1
a2011 1
    stringBuffer.append(TEXT_589);
@


1.21
log
@[170340]: Expand collapsed compartments automatically when new elements are added to it;
[170341]: Expand/Collapse handles should not be available for empty compartments.
@
text
@d56 61
a116 61
  protected final String TEXT_37 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tsuper.addNotify();" + NL + "\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {" + NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_38 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_39 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_40 = " requestEx = (";
  protected final String TEXT_41 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_42 = " result = new ";
  protected final String TEXT_43 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_44 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_45 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_46 = "(getDiagram(), requestEx, (";
  protected final String TEXT_47 = ")getConstraintFor(request)));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_48 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_49 = "(";
  protected final String TEXT_50 = ".getEditingDomain(getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_51 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_52 = NL;
  protected final String TEXT_53 = NL + "protected Command createAddCommand(final ";
  protected final String TEXT_54 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_55 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_56 = " childNode = (";
  protected final String TEXT_57 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_58 = " editingDomain = ";
  protected final String TEXT_59 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_60 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_61 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int visualID = ";
  protected final String TEXT_62 = ".getVisualID(childNode);" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_63 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_64 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_65 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_66 = NL + "\t\t\tcase ";
  protected final String TEXT_67 = ".VISUAL_ID:" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t";
  protected final String TEXT_68 = " result = new ";
  protected final String TEXT_69 = "();" + NL + "\t\t\t\t\t";
  protected final String TEXT_70 = " element = childNode.getElement();";
  protected final String TEXT_71 = NL + "\t\t\t\t\tswitch (visualID) {";
  protected final String TEXT_72 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_73 = ".VISUAL_ID:";
  protected final String TEXT_74 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_75 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_76 = ".eINSTANCE.get";
  protected final String TEXT_77 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_78 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_79 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_80 = ".eINSTANCE.get";
  protected final String TEXT_81 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_82 = ".UNSET_VALUE));";
  protected final String TEXT_83 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_84 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_85 = ".eINSTANCE.get";
  protected final String TEXT_86 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_87 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_88 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_89 = ".eINSTANCE.get";
  protected final String TEXT_90 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_91 = ".UNSET_VALUE));";
  protected final String TEXT_92 = NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_93 = NL + "\t\t\t\t\t}\t";
  protected final String TEXT_94 = NL;
  protected final String TEXT_95 = NL + "\t\tif (";
  protected final String TEXT_96 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_97 = NL + "\t\t}";
d118 13
a130 13
  protected final String TEXT_99 = ".size() >= ";
  protected final String TEXT_100 = ".eINSTANCE.get";
  protected final String TEXT_101 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_102 = NL + "\t\t}";
  protected final String TEXT_103 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_104 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_105 = ".getElement(), ";
  protected final String TEXT_106 = ".eINSTANCE.get";
  protected final String TEXT_107 = "(), element));";
  protected final String TEXT_108 = NL;
  protected final String TEXT_109 = NL + "\t\tif (";
  protected final String TEXT_110 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_111 = NL + "\t\t}";
d132 69
a200 69
  protected final String TEXT_113 = ".size() >= ";
  protected final String TEXT_114 = ".eINSTANCE.get";
  protected final String TEXT_115 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_116 = NL + "\t\t}";
  protected final String TEXT_117 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_118 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_119 = ".getElement(), ";
  protected final String TEXT_120 = ".eINSTANCE.get";
  protected final String TEXT_121 = "(), element));";
  protected final String TEXT_122 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_123 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_124 = "(";
  protected final String TEXT_125 = "));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_126 = ".create(editingDomain, ";
  protected final String TEXT_127 = ", ";
  protected final String TEXT_128 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_129 = "(childNode, ";
  protected final String TEXT_130 = "null";
  protected final String TEXT_131 = "(";
  protected final String TEXT_132 = ") constraint";
  protected final String TEXT_133 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_134 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_135 = "(";
  protected final String TEXT_136 = ", element, ";
  protected final String TEXT_137 = "null";
  protected final String TEXT_138 = "((";
  protected final String TEXT_139 = ") constraint).getCopy().union(new ";
  protected final String TEXT_140 = "(";
  protected final String TEXT_141 = ", ";
  protected final String TEXT_142 = "))";
  protected final String TEXT_143 = ", ";
  protected final String TEXT_144 = ".INSTANCE));";
  protected final String TEXT_145 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_146 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_147 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_148 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_149 = NL;
  protected final String TEXT_150 = NL + "protected ";
  protected final String TEXT_151 = " getCloneCommand(";
  protected final String TEXT_152 = " request) {" + NL + "\t";
  protected final String TEXT_153 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_154 = " command = new ";
  protected final String TEXT_155 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_156 = " childPart;" + NL + "\t";
  protected final String TEXT_157 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_158 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_159 = " createCloneCommand(final ";
  protected final String TEXT_160 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_161 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_162 = " childNode = (";
  protected final String TEXT_163 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_164 = " editingDomain = ";
  protected final String TEXT_165 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_166 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_167 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_168 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_169 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_170 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_171 = NL + "\t\t\tcase ";
  protected final String TEXT_172 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_173 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_174 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_175 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_176 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_177 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_178 = NL;
  protected final String TEXT_179 = NL + "\t\tif (";
  protected final String TEXT_180 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_181 = NL + "\t\t}";
d202 8
a209 8
  protected final String TEXT_183 = ".size() >= ";
  protected final String TEXT_184 = ".eINSTANCE.get";
  protected final String TEXT_185 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_186 = NL + "\t\t}";
  protected final String TEXT_187 = NL;
  protected final String TEXT_188 = NL + "\t\tif (";
  protected final String TEXT_189 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_190 = NL + "\t\t}";
d211 101
a311 101
  protected final String TEXT_192 = ".size() >= ";
  protected final String TEXT_193 = ".eINSTANCE.get";
  protected final String TEXT_194 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_195 = NL + "\t\t}";
  protected final String TEXT_196 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_197 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_198 = " result = (";
  protected final String TEXT_199 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_200 = "();";
  protected final String TEXT_201 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_202 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_203 = ".getElement(), ";
  protected final String TEXT_204 = ".eINSTANCE.get";
  protected final String TEXT_205 = "(), result));";
  protected final String TEXT_206 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_207 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_208 = ".getElement(), ";
  protected final String TEXT_209 = ".eINSTANCE.get";
  protected final String TEXT_210 = "(), result));";
  protected final String TEXT_211 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_212 = "(";
  protected final String TEXT_213 = ", result, ";
  protected final String TEXT_214 = "null";
  protected final String TEXT_215 = "((";
  protected final String TEXT_216 = ") constraint).getCopy().union(new ";
  protected final String TEXT_217 = "(";
  protected final String TEXT_218 = ", ";
  protected final String TEXT_219 = "))";
  protected final String TEXT_220 = ", ";
  protected final String TEXT_221 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_222 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_223 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_224 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_225 = NL + "\t\t\tprotected ";
  protected final String TEXT_226 = " createChangeConstraintCommand(final ";
  protected final String TEXT_227 = " request, final ";
  protected final String TEXT_228 = " child, Object constraint) {";
  protected final String TEXT_229 = NL;
  protected final String TEXT_230 = "\t\t\t\tfinal ";
  protected final String TEXT_231 = " node = (";
  protected final String TEXT_232 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_233 = " emfCommand = new ";
  protected final String TEXT_234 = "(node, request, ((";
  protected final String TEXT_235 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_236 = "(";
  protected final String TEXT_237 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_238 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_239 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = "protected ";
  protected final String TEXT_242 = " createChildEditPolicy(";
  protected final String TEXT_243 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_244 = " result = child.getEditPolicy(";
  protected final String TEXT_245 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}" + NL + "\t\t});";
  protected final String TEXT_246 = NL;
  protected final String TEXT_247 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_248 = "\", new ";
  protected final String TEXT_249 = "()); //$NON-NLS-1$";
  protected final String TEXT_250 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_251 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_252 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_253 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_254 = "(this);" + NL + "\t\t}" + NL + "\t\tif (";
  protected final String TEXT_255 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_256 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_257 = NL;
  protected final String TEXT_258 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_259 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_260 = " feature, ";
  protected final String TEXT_261 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_262 = NL;
  protected final String TEXT_263 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_264 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_265 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_266 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_267 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_268 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_269 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_270 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_271 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_272 = NL;
  protected final String TEXT_273 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_274 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_275 = " domainModelEditDomain = ";
  protected final String TEXT_276 = ".getEditingDomain(";
  protected final String TEXT_277 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_278 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_279 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_280 = " {";
  protected final String TEXT_281 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_282 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_283 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_284 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_285 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_286 = " createFilter() {";
  protected final String TEXT_287 = NL + "\t\t\t";
  protected final String TEXT_288 = " filter = ";
  protected final String TEXT_289 = ".createFeatureFilter(";
  protected final String TEXT_290 = ".eINSTANCE.get";
  protected final String TEXT_291 = "());";
  protected final String TEXT_292 = NL + "\t\t\tfilter = filter.or(";
d314 6
a319 6
  protected final String TEXT_295 = "()));";
  protected final String TEXT_296 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_297 = ".createNotifierFilter(";
  protected final String TEXT_298 = ".getElement()));";
  protected final String TEXT_299 = NL + "\t\t\t";
  protected final String TEXT_300 = " filter = ";
d321 93
a413 93
  protected final String TEXT_302 = ".getElement());";
  protected final String TEXT_303 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_304 = NL + "\t\t\t";
  protected final String TEXT_305 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_306 = NL + "\t\t\t";
  protected final String TEXT_307 = " filter = ";
  protected final String TEXT_308 = ".NOT_TOUCH;";
  protected final String TEXT_309 = NL + "\t\t\treturn filter;";
  protected final String TEXT_310 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_311 = " getCreateNotationalElementCommand(";
  protected final String TEXT_312 = " descriptor) {";
  protected final String TEXT_313 = NL;
  protected final String TEXT_314 = "\t\t\t";
  protected final String TEXT_315 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_316 = NL + "\t\t\tcase ";
  protected final String TEXT_317 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_318 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_319 = "(";
  protected final String TEXT_320 = ", domainElement, ";
  protected final String TEXT_321 = "new ";
  protected final String TEXT_322 = "(0, 0, ";
  protected final String TEXT_323 = ", ";
  protected final String TEXT_324 = ")";
  protected final String TEXT_325 = NL + "null";
  protected final String TEXT_326 = ", ";
  protected final String TEXT_327 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_328 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_329 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_330 = " getSemanticChildNodes() {";
  protected final String TEXT_331 = NL;
  protected final String TEXT_332 = NL + "\treturn ";
  protected final String TEXT_333 = ".EMPTY_LIST;";
  protected final String TEXT_334 = NL + "\t";
  protected final String TEXT_335 = " result = new ";
  protected final String TEXT_336 = "();";
  protected final String TEXT_337 = NL + "\t";
  protected final String TEXT_338 = " viewObject = ";
  protected final String TEXT_339 = ";" + NL + "\t";
  protected final String TEXT_340 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_341 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_342 = NL + "\tfor(";
  protected final String TEXT_343 = " it = ";
  protected final String TEXT_344 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_345 = ") it.next();";
  protected final String TEXT_346 = NL + "\tnextValue = (";
  protected final String TEXT_347 = ")";
  protected final String TEXT_348 = ";";
  protected final String TEXT_349 = NL + "\tnodeVID = ";
  protected final String TEXT_350 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_351 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_352 = NL + "\tcase ";
  protected final String TEXT_353 = ".VISUAL_ID: {";
  protected final String TEXT_354 = NL + "\tif (";
  protected final String TEXT_355 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_356 = NL + "\t\tresult.add(new ";
  protected final String TEXT_357 = "(nextValue, nodeVID));";
  protected final String TEXT_358 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_359 = NL + "\t\t}";
  protected final String TEXT_360 = NL + "\t}";
  protected final String TEXT_361 = NL + "\t}";
  protected final String TEXT_362 = NL + "\treturn result;";
  protected final String TEXT_363 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_364 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_365 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_366 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_367 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_368 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_369 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_370 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_371 = " domainModelEditDomain = ";
  protected final String TEXT_372 = ".getEditingDomain(";
  protected final String TEXT_373 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_374 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_375 = NL;
  protected final String TEXT_376 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_377 = " domainModelEditDomain = ";
  protected final String TEXT_378 = ".getEditingDomain(";
  protected final String TEXT_379 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_380 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_381 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_382 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_383 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_384 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_385 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_386 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_387 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_388 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_389 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_390 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_391 = ".createEventTypeFilter(";
  protected final String TEXT_392 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_393 = ".createEventTypeFilter(";
  protected final String TEXT_394 = ".UNSET).or(" + NL + "\t\t\t\t";
d415 1
a415 1
  protected final String TEXT_396 = ".REMOVE).or(" + NL + "\t\t\t\t";
d417 10
a426 10
  protected final String TEXT_398 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_399 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_400 = " createFilter() {";
  protected final String TEXT_401 = NL;
  protected final String TEXT_402 = NL + "\t\t\t";
  protected final String TEXT_403 = " filter = ";
  protected final String TEXT_404 = ".createFeatureFilter(";
  protected final String TEXT_405 = ".eINSTANCE.get";
  protected final String TEXT_406 = "());";
  protected final String TEXT_407 = NL + "\t\t\tfilter = filter.or(";
d429 8
a436 8
  protected final String TEXT_410 = "()));";
  protected final String TEXT_411 = NL;
  protected final String TEXT_412 = NL + "\t\t\t";
  protected final String TEXT_413 = " filter = ";
  protected final String TEXT_414 = ".createFeatureFilter(";
  protected final String TEXT_415 = ".eINSTANCE.get";
  protected final String TEXT_416 = "());";
  protected final String TEXT_417 = NL + "\t\t\tfilter = filter.or(";
d439 8
a446 8
  protected final String TEXT_420 = "()));";
  protected final String TEXT_421 = NL;
  protected final String TEXT_422 = NL + "\t\t\t";
  protected final String TEXT_423 = " filter = ";
  protected final String TEXT_424 = ".createFeatureFilter(";
  protected final String TEXT_425 = ".eINSTANCE.get";
  protected final String TEXT_426 = "());";
  protected final String TEXT_427 = NL + "\t\t\tfilter = filter.or(";
d449 8
a456 8
  protected final String TEXT_430 = "()));";
  protected final String TEXT_431 = NL;
  protected final String TEXT_432 = NL + "\t\t\t";
  protected final String TEXT_433 = " filter = ";
  protected final String TEXT_434 = ".createFeatureFilter(";
  protected final String TEXT_435 = ".eINSTANCE.get";
  protected final String TEXT_436 = "());";
  protected final String TEXT_437 = NL + "\t\t\tfilter = filter.or(";
d459 24
a482 24
  protected final String TEXT_440 = "()));";
  protected final String TEXT_441 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_442 = NL + "\t\t\t";
  protected final String TEXT_443 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_444 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_445 = NL + "\t\t\t";
  protected final String TEXT_446 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_447 = NL + "\t\t\t";
  protected final String TEXT_448 = " filter = ";
  protected final String TEXT_449 = ".NOT_TOUCH;";
  protected final String TEXT_450 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_451 = " getCreateNotationalElementCommand(";
  protected final String TEXT_452 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_453 = " linkDescriptor = (";
  protected final String TEXT_454 = ") descriptor;";
  protected final String TEXT_455 = NL;
  protected final String TEXT_456 = "\t\t\t";
  protected final String TEXT_457 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_458 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_459 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_460 = NL + "\t\t\tcase ";
  protected final String TEXT_461 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_462 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_463 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
d484 34
a517 34
  protected final String TEXT_465 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_466 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_467 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_468 = "(";
  protected final String TEXT_469 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_470 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_471 = " getSemanticChildLinks() {";
  protected final String TEXT_472 = NL;
  protected final String TEXT_473 = "\t";
  protected final String TEXT_474 = " result = new ";
  protected final String TEXT_475 = "();";
  protected final String TEXT_476 = NL + "\t";
  protected final String TEXT_477 = " modelObject = ";
  protected final String TEXT_478 = ".getElement();" + NL + "\t";
  protected final String TEXT_479 = " nextValue;";
  protected final String TEXT_480 = NL + "\tint linkVID;";
  protected final String TEXT_481 = NL + "\tfor(";
  protected final String TEXT_482 = " it = ";
  protected final String TEXT_483 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_484 = ") it.next();";
  protected final String TEXT_485 = NL + "\tnextValue = (";
  protected final String TEXT_486 = ")";
  protected final String TEXT_487 = ";";
  protected final String TEXT_488 = NL + "\tlinkVID = ";
  protected final String TEXT_489 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_490 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_491 = NL + "\tcase ";
  protected final String TEXT_492 = ".VISUAL_ID: {";
  protected final String TEXT_493 = NL + "\tif (";
  protected final String TEXT_494 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_495 = NL + "\t\t";
  protected final String TEXT_496 = " source = (";
  protected final String TEXT_497 = ")";
  protected final String TEXT_498 = ";";
d519 6
a524 6
  protected final String TEXT_500 = " source = ";
  protected final String TEXT_501 = ".getElement();";
  protected final String TEXT_502 = NL + "\t\t";
  protected final String TEXT_503 = " target = (";
  protected final String TEXT_504 = ")";
  protected final String TEXT_505 = ";";
d526 83
a608 79
  protected final String TEXT_507 = " target = ";
  protected final String TEXT_508 = ".getElement();";
  protected final String TEXT_509 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_510 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_511 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_512 = NL + "\t}";
  protected final String TEXT_513 = NL + "\t}";
  protected final String TEXT_514 = NL + "\t}";
  protected final String TEXT_515 = NL + "\tfor(";
  protected final String TEXT_516 = " it = ";
  protected final String TEXT_517 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_518 = ") it.next();";
  protected final String TEXT_519 = NL + "\tnextValue = (";
  protected final String TEXT_520 = ")";
  protected final String TEXT_521 = ";";
  protected final String TEXT_522 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_523 = NL + "\t\tresult.add(new ";
  protected final String TEXT_524 = "(modelObject, nextValue, null, ";
  protected final String TEXT_525 = ".VISUAL_ID));";
  protected final String TEXT_526 = NL + "\t}";
  protected final String TEXT_527 = NL + "\t}";
  protected final String TEXT_528 = NL + "\treturn result;";
  protected final String TEXT_529 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_530 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_531 = " result = new ";
  protected final String TEXT_532 = "();" + NL + "\t\t\t";
  protected final String TEXT_533 = " allLinks = ";
  protected final String TEXT_534 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_535 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_536 = " next = (";
  protected final String TEXT_537 = ") it.next();";
  protected final String TEXT_538 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_539 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_540 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_541 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_542 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_543 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_544 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_545 = ".VISUAL_ID:";
  protected final String TEXT_546 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_547 = NL + "\t\t\t\t} else {";
  protected final String TEXT_548 = NL + "\t\t\t\t}";
  protected final String TEXT_549 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_550 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_551 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_552 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_553 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_554 = ".VISUAL_ID:";
  protected final String TEXT_555 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_556 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_557 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_558 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_559 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_560 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_561 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_562 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_563 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_564 = " domainModelEditDomain = ";
  protected final String TEXT_565 = ".getEditingDomain(";
  protected final String TEXT_566 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_567 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_568 = NL;
  protected final String TEXT_569 = NL;
  protected final String TEXT_570 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_571 = " domainModelRefresher = new ";
  protected final String TEXT_572 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_573 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_574 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_575 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_576 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_577 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_578 = NL;
  protected final String TEXT_579 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_580 = " domainModelRefresher = new ";
  protected final String TEXT_581 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_582 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_583 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_584 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_585 = NL;
d843 2
a845 2
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d851 4
d856 1
a856 1
    stringBuffer.append(TEXT_42);
d858 1
a858 1
    stringBuffer.append(TEXT_43);
d863 1
a863 1
    stringBuffer.append(TEXT_44);
d865 1
a865 1
    stringBuffer.append(TEXT_45);
d867 1
a867 1
    stringBuffer.append(TEXT_46);
d869 1
a869 1
    stringBuffer.append(TEXT_47);
d873 1
a873 1
    stringBuffer.append(TEXT_48);
d875 1
a875 1
    stringBuffer.append(TEXT_49);
d877 1
a877 1
    stringBuffer.append(TEXT_50);
d879 1
a879 1
    stringBuffer.append(TEXT_51);
d885 1
a885 1
    stringBuffer.append(TEXT_52);
d889 3
a891 1
    stringBuffer.append(TEXT_53);
d893 1
a893 1
    stringBuffer.append(TEXT_54);
d895 1
a895 1
    stringBuffer.append(TEXT_55);
d897 1
a897 1
    stringBuffer.append(TEXT_56);
d899 1
a899 1
    stringBuffer.append(TEXT_57);
d901 1
a901 1
    stringBuffer.append(TEXT_58);
d903 1
a903 1
    stringBuffer.append(TEXT_59);
d905 1
a905 1
    stringBuffer.append(TEXT_60);
d907 1
a907 1
    stringBuffer.append(TEXT_61);
d909 1
a909 1
    stringBuffer.append(TEXT_62);
d911 1
a911 1
    stringBuffer.append(TEXT_63);
d913 1
a913 1
    stringBuffer.append(TEXT_64);
d915 1
a915 1
    stringBuffer.append(TEXT_65);
d920 1
a920 1
    stringBuffer.append(TEXT_66);
d922 1
a922 1
    stringBuffer.append(TEXT_67);
d924 1
a924 1
    stringBuffer.append(TEXT_68);
d926 1
a926 1
    stringBuffer.append(TEXT_69);
d928 1
a928 1
    stringBuffer.append(TEXT_70);
d934 1
a934 1
    stringBuffer.append(TEXT_71);
d943 1
a943 1
    stringBuffer.append(TEXT_72);
d945 1
a945 1
    stringBuffer.append(TEXT_73);
d951 1
a951 1
    stringBuffer.append(TEXT_74);
d953 1
a953 1
    stringBuffer.append(TEXT_75);
d955 1
a955 1
    stringBuffer.append(TEXT_76);
d957 1
a957 1
    stringBuffer.append(TEXT_77);
d961 1
a961 1
    stringBuffer.append(TEXT_78);
d963 1
a963 1
    stringBuffer.append(TEXT_79);
d965 1
a965 1
    stringBuffer.append(TEXT_80);
d967 1
a967 1
    stringBuffer.append(TEXT_81);
d969 1
a969 1
    stringBuffer.append(TEXT_82);
d975 1
a975 1
    stringBuffer.append(TEXT_83);
d977 1
a977 1
    stringBuffer.append(TEXT_84);
d979 1
a979 1
    stringBuffer.append(TEXT_85);
d981 1
a981 1
    stringBuffer.append(TEXT_86);
d985 1
a985 1
    stringBuffer.append(TEXT_87);
d987 1
a987 1
    stringBuffer.append(TEXT_88);
d989 1
a989 1
    stringBuffer.append(TEXT_89);
d991 1
a991 1
    stringBuffer.append(TEXT_90);
d993 1
a993 1
    stringBuffer.append(TEXT_91);
d998 1
a998 1
    stringBuffer.append(TEXT_92);
d1004 1
a1004 1
    stringBuffer.append(TEXT_93);
d1017 1
a1017 1
    stringBuffer.append(TEXT_94);
d1022 1
a1022 1
    stringBuffer.append(TEXT_95);
d1024 1
a1024 1
    stringBuffer.append(TEXT_96);
d1026 1
a1026 1
    stringBuffer.append(TEXT_97);
d1031 1
a1031 1
    stringBuffer.append(TEXT_98);
d1033 1
a1033 1
    stringBuffer.append(TEXT_99);
d1035 1
a1035 1
    stringBuffer.append(TEXT_100);
d1037 1
a1037 1
    stringBuffer.append(TEXT_101);
d1039 1
a1039 1
    stringBuffer.append(TEXT_102);
d1044 1
a1044 1
    stringBuffer.append(TEXT_103);
d1046 1
a1046 1
    stringBuffer.append(TEXT_104);
d1048 1
a1048 1
    stringBuffer.append(TEXT_105);
d1050 1
a1050 1
    stringBuffer.append(TEXT_106);
d1052 1
a1052 1
    stringBuffer.append(TEXT_107);
d1061 1
a1061 1
    stringBuffer.append(TEXT_108);
d1066 1
a1066 1
    stringBuffer.append(TEXT_109);
d1068 1
a1068 1
    stringBuffer.append(TEXT_110);
d1070 1
a1070 1
    stringBuffer.append(TEXT_111);
d1075 1
a1075 1
    stringBuffer.append(TEXT_112);
d1077 1
a1077 1
    stringBuffer.append(TEXT_113);
d1079 1
a1079 1
    stringBuffer.append(TEXT_114);
d1081 1
a1081 1
    stringBuffer.append(TEXT_115);
d1083 1
a1083 1
    stringBuffer.append(TEXT_116);
d1091 1
a1091 1
    stringBuffer.append(TEXT_117);
d1093 1
a1093 1
    stringBuffer.append(TEXT_118);
d1095 1
a1095 1
    stringBuffer.append(TEXT_119);
d1097 1
a1097 1
    stringBuffer.append(TEXT_120);
d1099 1
a1099 1
    stringBuffer.append(TEXT_121);
d1103 1
a1103 1
    stringBuffer.append(TEXT_122);
d1105 1
a1105 1
    stringBuffer.append(TEXT_123);
d1107 1
a1107 1
    stringBuffer.append(TEXT_124);
d1109 1
a1109 1
    stringBuffer.append(TEXT_125);
d1111 1
a1111 1
    stringBuffer.append(TEXT_126);
d1113 1
a1113 1
    stringBuffer.append(TEXT_127);
d1115 1
a1115 1
    stringBuffer.append(TEXT_128);
d1117 1
a1117 1
    stringBuffer.append(TEXT_129);
d1119 1
a1119 1
    stringBuffer.append(TEXT_130);
d1121 1
a1121 1
    stringBuffer.append(TEXT_131);
d1123 1
a1123 1
    stringBuffer.append(TEXT_132);
d1125 1
a1125 1
    stringBuffer.append(TEXT_133);
d1136 1
a1136 1
    stringBuffer.append(TEXT_134);
d1138 1
a1138 1
    stringBuffer.append(TEXT_135);
d1140 1
a1140 1
    stringBuffer.append(TEXT_136);
d1142 1
a1142 1
    stringBuffer.append(TEXT_137);
d1144 1
a1144 1
    stringBuffer.append(TEXT_138);
d1146 1
a1146 1
    stringBuffer.append(TEXT_139);
d1148 1
a1148 1
    stringBuffer.append(TEXT_140);
d1150 1
a1150 1
    stringBuffer.append(TEXT_141);
d1152 1
a1152 1
    stringBuffer.append(TEXT_142);
d1154 1
a1154 1
    stringBuffer.append(TEXT_143);
d1156 1
a1156 1
    stringBuffer.append(TEXT_144);
d1160 1
a1160 1
    stringBuffer.append(TEXT_145);
d1164 1
a1164 1
    stringBuffer.append(TEXT_146);
d1166 1
a1166 1
    stringBuffer.append(TEXT_147);
d1168 1
a1168 1
    stringBuffer.append(TEXT_148);
d1172 1
a1172 1
    stringBuffer.append(TEXT_149);
d1179 1
a1179 1
    stringBuffer.append(TEXT_150);
d1181 1
a1181 1
    stringBuffer.append(TEXT_151);
d1183 1
a1183 1
    stringBuffer.append(TEXT_152);
d1185 1
a1185 1
    stringBuffer.append(TEXT_153);
d1187 1
a1187 1
    stringBuffer.append(TEXT_154);
d1189 1
a1189 1
    stringBuffer.append(TEXT_155);
d1191 1
a1191 1
    stringBuffer.append(TEXT_156);
d1193 1
a1193 1
    stringBuffer.append(TEXT_157);
d1195 1
a1195 1
    stringBuffer.append(TEXT_158);
d1197 1
a1197 1
    stringBuffer.append(TEXT_159);
d1199 1
a1199 1
    stringBuffer.append(TEXT_160);
d1201 1
a1201 1
    stringBuffer.append(TEXT_161);
d1203 1
a1203 1
    stringBuffer.append(TEXT_162);
d1205 1
a1205 1
    stringBuffer.append(TEXT_163);
d1207 1
a1207 1
    stringBuffer.append(TEXT_164);
d1209 1
a1209 1
    stringBuffer.append(TEXT_165);
d1211 1
a1211 1
    stringBuffer.append(TEXT_166);
d1213 1
a1213 1
    stringBuffer.append(TEXT_167);
d1215 1
a1215 1
    stringBuffer.append(TEXT_168);
d1217 1
a1217 1
    stringBuffer.append(TEXT_169);
d1219 1
a1219 1
    stringBuffer.append(TEXT_170);
d1227 1
a1227 1
    stringBuffer.append(TEXT_171);
d1229 1
a1229 1
    stringBuffer.append(TEXT_172);
d1231 1
a1231 1
    stringBuffer.append(TEXT_173);
d1233 1
a1233 1
    stringBuffer.append(TEXT_174);
d1235 1
a1235 1
    stringBuffer.append(TEXT_175);
d1237 1
a1237 1
    stringBuffer.append(TEXT_176);
d1239 1
a1239 1
    stringBuffer.append(TEXT_177);
d1247 1
a1247 1
    stringBuffer.append(TEXT_178);
d1252 1
a1252 1
    stringBuffer.append(TEXT_179);
d1254 1
a1254 1
    stringBuffer.append(TEXT_180);
d1256 1
a1256 1
    stringBuffer.append(TEXT_181);
d1261 1
a1261 1
    stringBuffer.append(TEXT_182);
d1263 1
a1263 1
    stringBuffer.append(TEXT_183);
d1265 1
a1265 1
    stringBuffer.append(TEXT_184);
d1267 1
a1267 1
    stringBuffer.append(TEXT_185);
d1269 1
a1269 1
    stringBuffer.append(TEXT_186);
d1282 1
a1282 1
    stringBuffer.append(TEXT_187);
d1287 1
a1287 1
    stringBuffer.append(TEXT_188);
d1289 1
a1289 1
    stringBuffer.append(TEXT_189);
d1291 1
a1291 1
    stringBuffer.append(TEXT_190);
d1296 1
a1296 1
    stringBuffer.append(TEXT_191);
d1298 1
a1298 1
    stringBuffer.append(TEXT_192);
d1300 1
a1300 1
    stringBuffer.append(TEXT_193);
d1302 1
a1302 1
    stringBuffer.append(TEXT_194);
d1304 1
a1304 1
    stringBuffer.append(TEXT_195);
d1312 1
a1312 1
    stringBuffer.append(TEXT_196);
d1314 1
a1314 1
    stringBuffer.append(TEXT_197);
d1316 1
a1316 1
    stringBuffer.append(TEXT_198);
d1318 1
a1318 1
    stringBuffer.append(TEXT_199);
d1320 1
a1320 1
    stringBuffer.append(TEXT_200);
d1324 1
a1324 1
    stringBuffer.append(TEXT_201);
d1326 1
a1326 1
    stringBuffer.append(TEXT_202);
d1328 1
a1328 1
    stringBuffer.append(TEXT_203);
d1330 1
a1330 1
    stringBuffer.append(TEXT_204);
d1332 1
a1332 1
    stringBuffer.append(TEXT_205);
d1336 1
a1336 1
    stringBuffer.append(TEXT_206);
d1338 1
a1338 1
    stringBuffer.append(TEXT_207);
d1340 1
a1340 1
    stringBuffer.append(TEXT_208);
d1342 1
a1342 1
    stringBuffer.append(TEXT_209);
d1344 1
a1344 1
    stringBuffer.append(TEXT_210);
d1355 1
a1355 1
    stringBuffer.append(TEXT_211);
d1357 1
a1357 1
    stringBuffer.append(TEXT_212);
d1359 1
a1359 1
    stringBuffer.append(TEXT_213);
d1361 1
a1361 1
    stringBuffer.append(TEXT_214);
d1363 1
a1363 1
    stringBuffer.append(TEXT_215);
d1365 1
a1365 1
    stringBuffer.append(TEXT_216);
d1367 1
a1367 1
    stringBuffer.append(TEXT_217);
d1369 1
a1369 1
    stringBuffer.append(TEXT_218);
d1371 1
a1371 1
    stringBuffer.append(TEXT_219);
d1373 1
a1373 1
    stringBuffer.append(TEXT_220);
d1375 1
a1375 1
    stringBuffer.append(TEXT_221);
d1380 1
a1380 1
    stringBuffer.append(TEXT_222);
d1382 1
a1382 1
    stringBuffer.append(TEXT_223);
d1384 1
a1384 1
    stringBuffer.append(TEXT_224);
d1391 1
a1391 1
    stringBuffer.append(TEXT_225);
d1393 1
a1393 1
    stringBuffer.append(TEXT_226);
d1395 1
a1395 1
    stringBuffer.append(TEXT_227);
a1396 4
    stringBuffer.append(TEXT_228);
    stringBuffer.append(TEXT_229);
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
a1397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
a1398 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d1400 1
a1400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ChangeBoundsCommand"));
d1402 1
a1402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d1404 1
a1404 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d1406 1
a1406 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1408 1
a1408 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1410 1
a1410 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1412 1
d1414 1
d1416 6
d1423 1
a1423 1
    stringBuffer.append(TEXT_242);
d1425 1
a1425 1
    stringBuffer.append(TEXT_243);
d1427 1
a1427 1
    stringBuffer.append(TEXT_244);
d1429 1
a1429 1
    stringBuffer.append(TEXT_245);
d1432 1
a1432 1
    stringBuffer.append(TEXT_246);
d1436 1
a1436 1
    stringBuffer.append(TEXT_247);
d1438 1
a1438 1
    stringBuffer.append(TEXT_248);
d1440 1
a1440 1
    stringBuffer.append(TEXT_249);
d1443 1
a1443 1
    stringBuffer.append(TEXT_250);
d1448 1
a1448 1
    stringBuffer.append(TEXT_251);
d1452 1
a1452 1
    stringBuffer.append(TEXT_252);
d1454 1
a1454 1
    stringBuffer.append(TEXT_253);
d1456 1
a1456 1
    stringBuffer.append(TEXT_254);
d1458 1
a1458 1
    stringBuffer.append(TEXT_255);
a1459 6
    stringBuffer.append(TEXT_256);
    stringBuffer.append(TEXT_257);
    stringBuffer.append(TEXT_258);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_259);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a1460 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1463 1
d1465 6
d1472 1
a1472 1
    stringBuffer.append(TEXT_264);
d1474 1
a1474 1
    stringBuffer.append(TEXT_265);
d1476 1
a1476 1
    stringBuffer.append(TEXT_266);
d1478 1
a1478 1
    stringBuffer.append(TEXT_267);
d1483 1
a1483 1
    stringBuffer.append(TEXT_268);
d1487 1
a1487 1
    stringBuffer.append(TEXT_269);
d1492 1
a1492 1
    stringBuffer.append(TEXT_270);
d1496 1
a1496 1
    stringBuffer.append(TEXT_271);
d1504 2
a1505 2
    stringBuffer.append(TEXT_272);
    stringBuffer.append(TEXT_273);
d1507 1
a1507 1
    stringBuffer.append(TEXT_274);
d1509 1
a1509 1
    stringBuffer.append(TEXT_275);
d1511 1
a1511 1
    stringBuffer.append(TEXT_276);
d1513 1
a1513 1
    stringBuffer.append(TEXT_277);
d1515 1
a1515 1
    stringBuffer.append(TEXT_278);
d1517 1
a1517 1
    stringBuffer.append(TEXT_279);
d1519 1
a1519 1
    stringBuffer.append(TEXT_280);
d1534 1
a1534 1
    stringBuffer.append(TEXT_281);
d1536 1
a1536 1
    stringBuffer.append(TEXT_282);
d1538 1
a1538 1
    stringBuffer.append(TEXT_283);
d1540 1
a1540 1
    stringBuffer.append(TEXT_284);
d1544 1
a1544 1
    stringBuffer.append(TEXT_285);
d1546 1
a1546 1
    stringBuffer.append(TEXT_286);
d1565 1
a1565 1
    stringBuffer.append(TEXT_287);
d1567 1
a1567 1
    stringBuffer.append(TEXT_288);
d1569 1
a1569 1
    stringBuffer.append(TEXT_289);
d1571 1
a1571 1
    stringBuffer.append(TEXT_290);
d1573 1
a1573 1
    stringBuffer.append(TEXT_291);
d1577 1
a1577 1
    stringBuffer.append(TEXT_292);
d1579 1
a1579 1
    stringBuffer.append(TEXT_293);
d1581 1
a1581 1
    stringBuffer.append(TEXT_294);
d1583 1
a1583 1
    stringBuffer.append(TEXT_295);
d1591 1
a1591 1
    stringBuffer.append(TEXT_296);
d1593 1
a1593 1
    stringBuffer.append(TEXT_297);
d1595 1
a1595 1
    stringBuffer.append(TEXT_298);
d1600 1
a1600 1
    stringBuffer.append(TEXT_299);
d1602 1
a1602 1
    stringBuffer.append(TEXT_300);
d1604 1
a1604 1
    stringBuffer.append(TEXT_301);
d1606 1
a1606 1
    stringBuffer.append(TEXT_302);
d1615 1
a1615 1
    stringBuffer.append(TEXT_303);
d1619 1
a1619 1
    stringBuffer.append(TEXT_304);
d1621 1
a1621 1
    stringBuffer.append(TEXT_305);
d1627 1
a1627 1
    stringBuffer.append(TEXT_306);
d1629 1
a1629 1
    stringBuffer.append(TEXT_307);
d1631 1
a1631 1
    stringBuffer.append(TEXT_308);
d1635 1
a1635 1
    stringBuffer.append(TEXT_309);
d1639 1
a1639 1
    stringBuffer.append(TEXT_310);
d1641 1
a1641 1
    stringBuffer.append(TEXT_311);
d1643 1
a1643 1
    stringBuffer.append(TEXT_312);
d1648 2
a1649 2
    stringBuffer.append(TEXT_313);
    stringBuffer.append(TEXT_314);
d1651 1
a1651 1
    stringBuffer.append(TEXT_315);
d1661 1
a1661 1
    stringBuffer.append(TEXT_316);
d1663 1
a1663 1
    stringBuffer.append(TEXT_317);
d1665 1
a1665 1
    stringBuffer.append(TEXT_318);
d1667 1
a1667 1
    stringBuffer.append(TEXT_319);
d1669 1
a1669 1
    stringBuffer.append(TEXT_320);
d1680 1
a1680 1
    stringBuffer.append(TEXT_321);
d1682 1
a1682 1
    stringBuffer.append(TEXT_322);
d1684 1
a1684 1
    stringBuffer.append(TEXT_323);
d1686 1
a1686 1
    stringBuffer.append(TEXT_324);
d1690 1
a1690 1
    stringBuffer.append(TEXT_325);
d1694 1
a1694 1
    stringBuffer.append(TEXT_326);
d1696 1
a1696 1
    stringBuffer.append(TEXT_327);
d1700 1
a1700 1
    stringBuffer.append(TEXT_328);
d1704 1
a1704 1
    stringBuffer.append(TEXT_329);
d1706 2
a1707 2
    stringBuffer.append(TEXT_330);
    stringBuffer.append(TEXT_331);
d1711 1
a1711 1
    stringBuffer.append(TEXT_332);
d1713 1
a1713 1
    stringBuffer.append(TEXT_333);
d1717 1
a1717 1
    stringBuffer.append(TEXT_334);
d1719 1
a1719 1
    stringBuffer.append(TEXT_335);
d1721 1
a1721 1
    stringBuffer.append(TEXT_336);
d1739 1
a1739 1
    stringBuffer.append(TEXT_337);
d1741 1
a1741 1
    stringBuffer.append(TEXT_338);
d1743 1
a1743 1
    stringBuffer.append(TEXT_339);
d1745 1
a1745 1
    stringBuffer.append(TEXT_340);
d1747 1
a1747 1
    stringBuffer.append(TEXT_341);
d1756 1
a1756 1
    stringBuffer.append(TEXT_342);
d1758 1
a1758 1
    stringBuffer.append(TEXT_343);
d1760 1
a1760 1
    stringBuffer.append(TEXT_344);
d1762 1
a1762 1
    stringBuffer.append(TEXT_345);
d1766 1
a1766 1
    stringBuffer.append(TEXT_346);
d1768 1
a1768 1
    stringBuffer.append(TEXT_347);
d1770 1
a1770 1
    stringBuffer.append(TEXT_348);
d1774 1
a1774 1
    stringBuffer.append(TEXT_349);
d1776 1
a1776 1
    stringBuffer.append(TEXT_350);
d1781 1
a1781 1
    stringBuffer.append(TEXT_351);
d1788 1
a1788 1
    stringBuffer.append(TEXT_352);
d1790 1
a1790 1
    stringBuffer.append(TEXT_353);
d1794 1
a1794 1
    stringBuffer.append(TEXT_354);
d1796 1
a1796 1
    stringBuffer.append(TEXT_355);
d1800 1
a1800 1
    stringBuffer.append(TEXT_356);
d1802 1
a1802 1
    stringBuffer.append(TEXT_357);
d1806 1
a1806 1
    stringBuffer.append(TEXT_358);
d1810 1
a1810 1
    stringBuffer.append(TEXT_359);
d1816 1
a1816 1
    stringBuffer.append(TEXT_360);
d1821 1
a1821 1
    stringBuffer.append(TEXT_361);
d1826 1
a1826 1
    stringBuffer.append(TEXT_362);
d1830 1
a1830 1
    stringBuffer.append(TEXT_363);
d1832 1
a1832 1
    stringBuffer.append(TEXT_364);
d1834 1
a1834 1
    stringBuffer.append(TEXT_365);
d1836 1
a1836 1
    stringBuffer.append(TEXT_366);
d1838 1
a1838 1
    stringBuffer.append(TEXT_367);
d1840 1
a1840 1
    stringBuffer.append(TEXT_368);
d1842 1
a1842 1
    stringBuffer.append(TEXT_369);
d1844 1
a1844 1
    stringBuffer.append(TEXT_370);
d1846 1
a1846 1
    stringBuffer.append(TEXT_371);
d1848 1
a1848 1
    stringBuffer.append(TEXT_372);
d1850 1
a1850 1
    stringBuffer.append(TEXT_373);
d1852 2
a1853 2
    stringBuffer.append(TEXT_374);
    stringBuffer.append(TEXT_375);
d1857 1
a1857 1
    stringBuffer.append(TEXT_376);
d1859 1
a1859 1
    stringBuffer.append(TEXT_377);
d1861 1
a1861 1
    stringBuffer.append(TEXT_378);
d1863 1
a1863 1
    stringBuffer.append(TEXT_379);
d1865 1
a1865 1
    stringBuffer.append(TEXT_380);
d1867 1
a1867 1
    stringBuffer.append(TEXT_381);
d1869 1
a1869 1
    stringBuffer.append(TEXT_382);
d1871 1
a1871 1
    stringBuffer.append(TEXT_383);
d1873 1
a1873 1
    stringBuffer.append(TEXT_384);
d1886 1
a1886 1
    stringBuffer.append(TEXT_385);
d1888 1
a1888 1
    stringBuffer.append(TEXT_386);
d1890 1
a1890 1
    stringBuffer.append(TEXT_387);
d1892 1
a1892 1
    stringBuffer.append(TEXT_388);
d1897 1
a1897 1
    stringBuffer.append(TEXT_389);
a1898 8
    stringBuffer.append(TEXT_390);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_391);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_392);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_393);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1908 8
d1919 1
a1919 1
    stringBuffer.append(TEXT_399);
d1921 1
a1921 1
    stringBuffer.append(TEXT_400);
d1934 1
a1934 1
    stringBuffer.append(TEXT_401);
d1948 1
a1948 1
    stringBuffer.append(TEXT_402);
d1950 1
a1950 1
    stringBuffer.append(TEXT_403);
d1952 1
a1952 1
    stringBuffer.append(TEXT_404);
d1954 1
a1954 1
    stringBuffer.append(TEXT_405);
d1956 1
a1956 1
    stringBuffer.append(TEXT_406);
d1960 1
a1960 1
    stringBuffer.append(TEXT_407);
d1962 1
a1962 1
    stringBuffer.append(TEXT_408);
d1964 1
a1964 1
    stringBuffer.append(TEXT_409);
d1966 1
a1966 1
    stringBuffer.append(TEXT_410);
d1973 1
a1973 1
    stringBuffer.append(TEXT_411);
d1987 1
a1987 1
    stringBuffer.append(TEXT_412);
d1989 1
a1989 1
    stringBuffer.append(TEXT_413);
d1991 1
a1991 1
    stringBuffer.append(TEXT_414);
d1993 1
a1993 1
    stringBuffer.append(TEXT_415);
d1995 1
a1995 1
    stringBuffer.append(TEXT_416);
d1999 1
a1999 1
    stringBuffer.append(TEXT_417);
d2001 1
a2001 1
    stringBuffer.append(TEXT_418);
d2003 1
a2003 1
    stringBuffer.append(TEXT_419);
d2005 1
a2005 1
    stringBuffer.append(TEXT_420);
d2012 1
a2012 1
    stringBuffer.append(TEXT_421);
d2026 1
a2026 1
    stringBuffer.append(TEXT_422);
d2028 1
a2028 1
    stringBuffer.append(TEXT_423);
d2030 1
a2030 1
    stringBuffer.append(TEXT_424);
d2032 1
a2032 1
    stringBuffer.append(TEXT_425);
d2034 1
a2034 1
    stringBuffer.append(TEXT_426);
d2038 1
a2038 1
    stringBuffer.append(TEXT_427);
d2040 1
a2040 1
    stringBuffer.append(TEXT_428);
d2042 1
a2042 1
    stringBuffer.append(TEXT_429);
d2044 1
a2044 1
    stringBuffer.append(TEXT_430);
d2054 1
a2054 1
    stringBuffer.append(TEXT_431);
d2068 1
a2068 1
    stringBuffer.append(TEXT_432);
d2070 1
a2070 1
    stringBuffer.append(TEXT_433);
d2072 1
a2072 1
    stringBuffer.append(TEXT_434);
d2074 1
a2074 1
    stringBuffer.append(TEXT_435);
d2076 1
a2076 1
    stringBuffer.append(TEXT_436);
d2080 1
a2080 1
    stringBuffer.append(TEXT_437);
d2082 1
a2082 1
    stringBuffer.append(TEXT_438);
d2084 1
a2084 1
    stringBuffer.append(TEXT_439);
d2086 1
a2086 1
    stringBuffer.append(TEXT_440);
d2095 1
a2095 1
    stringBuffer.append(TEXT_441);
d2100 1
a2100 1
    stringBuffer.append(TEXT_442);
d2102 1
a2102 1
    stringBuffer.append(TEXT_443);
d2109 1
a2109 1
    stringBuffer.append(TEXT_444);
d2114 1
a2114 1
    stringBuffer.append(TEXT_445);
d2116 1
a2116 1
    stringBuffer.append(TEXT_446);
d2122 1
a2122 1
    stringBuffer.append(TEXT_447);
d2124 1
a2124 1
    stringBuffer.append(TEXT_448);
d2126 1
a2126 1
    stringBuffer.append(TEXT_449);
d2131 1
a2131 1
    stringBuffer.append(TEXT_450);
d2133 1
a2133 1
    stringBuffer.append(TEXT_451);
d2135 1
a2135 1
    stringBuffer.append(TEXT_452);
d2137 1
a2137 1
    stringBuffer.append(TEXT_453);
d2139 1
a2139 1
    stringBuffer.append(TEXT_454);
d2146 2
a2147 2
    stringBuffer.append(TEXT_455);
    stringBuffer.append(TEXT_456);
d2149 1
a2149 1
    stringBuffer.append(TEXT_457);
d2151 1
a2151 1
    stringBuffer.append(TEXT_458);
d2153 1
a2153 1
    stringBuffer.append(TEXT_459);
d2162 1
a2162 1
    stringBuffer.append(TEXT_460);
d2164 1
a2164 1
    stringBuffer.append(TEXT_461);
d2166 1
a2166 1
    stringBuffer.append(TEXT_462);
d2168 1
a2168 1
    stringBuffer.append(TEXT_463);
d2174 1
a2174 1
    stringBuffer.append(TEXT_464);
d2176 1
a2176 1
    stringBuffer.append(TEXT_465);
d2178 1
a2178 1
    stringBuffer.append(TEXT_466);
d2182 1
a2182 1
    stringBuffer.append(TEXT_467);
d2184 1
a2184 1
    stringBuffer.append(TEXT_468);
d2186 1
a2186 1
    stringBuffer.append(TEXT_469);
d2190 1
a2190 1
    stringBuffer.append(TEXT_470);
d2192 1
a2192 1
    stringBuffer.append(TEXT_471);
d2198 2
a2199 2
    stringBuffer.append(TEXT_472);
    stringBuffer.append(TEXT_473);
d2201 1
a2201 1
    stringBuffer.append(TEXT_474);
d2203 1
a2203 1
    stringBuffer.append(TEXT_475);
d2226 1
a2226 1
    stringBuffer.append(TEXT_476);
d2228 1
a2228 1
    stringBuffer.append(TEXT_477);
d2230 1
a2230 1
    stringBuffer.append(TEXT_478);
d2232 1
a2232 1
    stringBuffer.append(TEXT_479);
d2237 1
a2237 1
    stringBuffer.append(TEXT_480);
d2246 1
a2246 1
    stringBuffer.append(TEXT_481);
d2248 1
a2248 1
    stringBuffer.append(TEXT_482);
d2250 1
a2250 1
    stringBuffer.append(TEXT_483);
d2252 1
a2252 1
    stringBuffer.append(TEXT_484);
d2256 1
a2256 1
    stringBuffer.append(TEXT_485);
d2258 1
a2258 1
    stringBuffer.append(TEXT_486);
d2260 1
a2260 1
    stringBuffer.append(TEXT_487);
d2264 1
a2264 1
    stringBuffer.append(TEXT_488);
d2266 1
a2266 1
    stringBuffer.append(TEXT_489);
d2271 1
a2271 1
    stringBuffer.append(TEXT_490);
d2279 1
a2279 1
    stringBuffer.append(TEXT_491);
d2281 1
a2281 1
    stringBuffer.append(TEXT_492);
d2285 1
a2285 1
    stringBuffer.append(TEXT_493);
d2287 1
a2287 1
    stringBuffer.append(TEXT_494);
d2292 1
a2292 1
    stringBuffer.append(TEXT_495);
d2294 1
a2294 1
    stringBuffer.append(TEXT_496);
d2296 1
a2296 1
    stringBuffer.append(TEXT_497);
d2298 1
a2298 1
    stringBuffer.append(TEXT_498);
d2302 1
a2302 1
    stringBuffer.append(TEXT_499);
d2304 1
a2304 1
    stringBuffer.append(TEXT_500);
d2306 1
a2306 1
    stringBuffer.append(TEXT_501);
d2311 1
a2311 1
    stringBuffer.append(TEXT_502);
d2313 1
a2313 1
    stringBuffer.append(TEXT_503);
d2315 1
a2315 1
    stringBuffer.append(TEXT_504);
d2317 1
a2317 1
    stringBuffer.append(TEXT_505);
d2321 1
a2321 1
    stringBuffer.append(TEXT_506);
d2323 1
a2323 1
    stringBuffer.append(TEXT_507);
d2325 1
a2325 1
    stringBuffer.append(TEXT_508);
d2329 1
a2329 1
    stringBuffer.append(TEXT_509);
d2331 1
a2331 1
    stringBuffer.append(TEXT_510);
d2335 1
a2335 1
    stringBuffer.append(TEXT_511);
d2339 1
a2339 1
    stringBuffer.append(TEXT_512);
d2347 1
a2347 1
    stringBuffer.append(TEXT_513);
d2352 1
a2352 1
    stringBuffer.append(TEXT_514);
d2362 1
a2362 1
    stringBuffer.append(TEXT_515);
d2364 1
a2364 1
    stringBuffer.append(TEXT_516);
d2366 1
a2366 1
    stringBuffer.append(TEXT_517);
d2368 1
a2368 1
    stringBuffer.append(TEXT_518);
d2372 1
a2372 1
    stringBuffer.append(TEXT_519);
d2374 1
a2374 1
    stringBuffer.append(TEXT_520);
d2376 1
a2376 1
    stringBuffer.append(TEXT_521);
d2380 1
a2380 1
    stringBuffer.append(TEXT_522);
d2385 1
a2385 1
    stringBuffer.append(TEXT_523);
d2387 1
a2387 1
    stringBuffer.append(TEXT_524);
d2389 1
a2389 1
    stringBuffer.append(TEXT_525);
d2393 1
a2393 1
    stringBuffer.append(TEXT_526);
d2397 1
a2397 1
    stringBuffer.append(TEXT_527);
d2402 1
a2402 1
    stringBuffer.append(TEXT_528);
d2406 1
a2406 1
    stringBuffer.append(TEXT_529);
d2408 1
a2408 1
    stringBuffer.append(TEXT_530);
d2410 1
a2410 1
    stringBuffer.append(TEXT_531);
d2412 1
a2412 1
    stringBuffer.append(TEXT_532);
d2414 1
a2414 1
    stringBuffer.append(TEXT_533);
d2416 1
a2416 1
    stringBuffer.append(TEXT_534);
d2418 1
a2418 1
    stringBuffer.append(TEXT_535);
d2420 1
a2420 1
    stringBuffer.append(TEXT_536);
d2422 1
a2422 1
    stringBuffer.append(TEXT_537);
d2426 1
a2426 1
    stringBuffer.append(TEXT_538);
d2428 1
a2428 1
    stringBuffer.append(TEXT_539);
d2430 1
a2430 1
    stringBuffer.append(TEXT_540);
d2435 1
a2435 1
    stringBuffer.append(TEXT_541);
d2437 1
a2437 1
    stringBuffer.append(TEXT_542);
d2439 1
a2439 1
    stringBuffer.append(TEXT_543);
d2444 1
a2444 1
    stringBuffer.append(TEXT_544);
d2446 1
a2446 1
    stringBuffer.append(TEXT_545);
d2450 1
a2450 1
    stringBuffer.append(TEXT_546);
d2454 1
a2454 1
    stringBuffer.append(TEXT_547);
d2458 1
a2458 1
    stringBuffer.append(TEXT_548);
d2465 1
a2465 1
    stringBuffer.append(TEXT_549);
d2469 1
a2469 1
    stringBuffer.append(TEXT_550);
d2471 1
a2471 1
    stringBuffer.append(TEXT_551);
d2473 1
a2473 1
    stringBuffer.append(TEXT_552);
d2478 1
a2478 1
    stringBuffer.append(TEXT_553);
d2480 1
a2480 1
    stringBuffer.append(TEXT_554);
d2484 1
a2484 1
    stringBuffer.append(TEXT_555);
d2488 1
a2488 1
    stringBuffer.append(TEXT_556);
d2490 1
a2490 1
    stringBuffer.append(TEXT_557);
d2492 1
a2492 1
    stringBuffer.append(TEXT_558);
d2494 1
a2494 1
    stringBuffer.append(TEXT_559);
d2496 1
a2496 1
    stringBuffer.append(TEXT_560);
d2498 1
a2498 1
    stringBuffer.append(TEXT_561);
d2500 1
a2500 1
    stringBuffer.append(TEXT_562);
d2502 1
a2502 1
    stringBuffer.append(TEXT_563);
d2504 1
a2504 1
    stringBuffer.append(TEXT_564);
d2506 1
a2506 1
    stringBuffer.append(TEXT_565);
d2508 1
a2508 1
    stringBuffer.append(TEXT_566);
d2510 1
a2510 1
    stringBuffer.append(TEXT_567);
a2516 6
    stringBuffer.append(TEXT_568);
    stringBuffer.append(TEXT_569);
    stringBuffer.append(TEXT_570);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_571);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
a2517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
a2518 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
d2520 1
a2520 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
d2522 1
a2522 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
d2524 1
a2524 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d2526 1
d2528 1
d2530 6
d2537 1
a2537 1
    stringBuffer.append(TEXT_580);
d2539 1
a2539 1
    stringBuffer.append(TEXT_581);
d2541 1
a2541 1
    stringBuffer.append(TEXT_582);
d2543 1
a2543 1
    stringBuffer.append(TEXT_583);
d2545 1
a2545 1
    stringBuffer.append(TEXT_584);
d2547 1
a2547 1
    stringBuffer.append(TEXT_585);
@


1.20
log
@[170248]: Beautify compartments generated for the lite version
@
text
@d142 18
a159 18
  protected final String TEXT_123 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_124 = ".create(editingDomain, ";
  protected final String TEXT_125 = ", ";
  protected final String TEXT_126 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_127 = "(childNode, ";
  protected final String TEXT_128 = "null";
  protected final String TEXT_129 = "(";
  protected final String TEXT_130 = ") constraint";
  protected final String TEXT_131 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_132 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_133 = "(";
  protected final String TEXT_134 = ", element, ";
  protected final String TEXT_135 = "null";
  protected final String TEXT_136 = "((";
  protected final String TEXT_137 = ") constraint).getCopy().union(new ";
  protected final String TEXT_138 = "(";
  protected final String TEXT_139 = ", ";
  protected final String TEXT_140 = "))";
d161 76
a236 76
  protected final String TEXT_142 = ".INSTANCE));";
  protected final String TEXT_143 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_144 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_145 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_146 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_147 = NL;
  protected final String TEXT_148 = NL + "protected ";
  protected final String TEXT_149 = " getCloneCommand(";
  protected final String TEXT_150 = " request) {" + NL + "\t";
  protected final String TEXT_151 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_152 = " command = new ";
  protected final String TEXT_153 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_154 = " childPart;" + NL + "\t";
  protected final String TEXT_155 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_156 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_157 = " createCloneCommand(final ";
  protected final String TEXT_158 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_159 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_160 = " childNode = (";
  protected final String TEXT_161 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_162 = " editingDomain = ";
  protected final String TEXT_163 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_164 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_165 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_166 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_167 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_168 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_169 = NL + "\t\t\tcase ";
  protected final String TEXT_170 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_171 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_172 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_173 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_174 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_175 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_176 = NL;
  protected final String TEXT_177 = NL + "\t\tif (";
  protected final String TEXT_178 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_179 = NL + "\t\t}";
  protected final String TEXT_180 = NL + "\t\tif (";
  protected final String TEXT_181 = ".size() >= ";
  protected final String TEXT_182 = ".eINSTANCE.get";
  protected final String TEXT_183 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_184 = NL + "\t\t}";
  protected final String TEXT_185 = NL;
  protected final String TEXT_186 = NL + "\t\tif (";
  protected final String TEXT_187 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_188 = NL + "\t\t}";
  protected final String TEXT_189 = NL + "\t\tif (";
  protected final String TEXT_190 = ".size() >= ";
  protected final String TEXT_191 = ".eINSTANCE.get";
  protected final String TEXT_192 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_193 = NL + "\t\t}";
  protected final String TEXT_194 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_195 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_196 = " result = (";
  protected final String TEXT_197 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_198 = "();";
  protected final String TEXT_199 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_200 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_201 = ".getElement(), ";
  protected final String TEXT_202 = ".eINSTANCE.get";
  protected final String TEXT_203 = "(), result));";
  protected final String TEXT_204 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_205 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_206 = ".getElement(), ";
  protected final String TEXT_207 = ".eINSTANCE.get";
  protected final String TEXT_208 = "(), result));";
  protected final String TEXT_209 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_210 = "(";
  protected final String TEXT_211 = ", result, ";
  protected final String TEXT_212 = "null";
  protected final String TEXT_213 = "((";
  protected final String TEXT_214 = ") constraint).getCopy().union(new ";
  protected final String TEXT_215 = "(";
  protected final String TEXT_216 = ", ";
  protected final String TEXT_217 = "))";
d238 85
a322 85
  protected final String TEXT_219 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_220 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_221 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_222 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_223 = NL + "\t\t\tprotected ";
  protected final String TEXT_224 = " createChangeConstraintCommand(final ";
  protected final String TEXT_225 = " request, final ";
  protected final String TEXT_226 = " child, Object constraint) {";
  protected final String TEXT_227 = NL;
  protected final String TEXT_228 = "\t\t\t\tfinal ";
  protected final String TEXT_229 = " node = (";
  protected final String TEXT_230 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_231 = " emfCommand = new ";
  protected final String TEXT_232 = "(node, request, ((";
  protected final String TEXT_233 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_234 = "(";
  protected final String TEXT_235 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_236 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_237 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_238 = NL;
  protected final String TEXT_239 = "protected ";
  protected final String TEXT_240 = " createChildEditPolicy(";
  protected final String TEXT_241 = " child) {" + NL + "\tif (child != null) {" + NL + "\t\t";
  protected final String TEXT_242 = " result = child.getEditPolicy(";
  protected final String TEXT_243 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (result != null) {" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn super.createChildEditPolicy(child);" + NL + "}" + NL + "\t\t});";
  protected final String TEXT_244 = NL;
  protected final String TEXT_245 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_246 = "\", new ";
  protected final String TEXT_247 = "()); //$NON-NLS-1$";
  protected final String TEXT_248 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_249 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_250 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_251 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_252 = "(this);" + NL + "\t\t}" + NL + "\t\tif (";
  protected final String TEXT_253 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_254 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_255 = NL;
  protected final String TEXT_256 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_257 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_258 = " feature, ";
  protected final String TEXT_259 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_260 = NL;
  protected final String TEXT_261 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_262 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_263 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_264 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_265 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_266 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_267 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_268 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_269 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_270 = NL;
  protected final String TEXT_271 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_272 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_273 = " domainModelEditDomain = ";
  protected final String TEXT_274 = ".getEditingDomain(";
  protected final String TEXT_275 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_276 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_277 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_278 = " {";
  protected final String TEXT_279 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_280 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_281 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_282 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_283 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_284 = " createFilter() {";
  protected final String TEXT_285 = NL + "\t\t\t";
  protected final String TEXT_286 = " filter = ";
  protected final String TEXT_287 = ".createFeatureFilter(";
  protected final String TEXT_288 = ".eINSTANCE.get";
  protected final String TEXT_289 = "());";
  protected final String TEXT_290 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_291 = ".createFeatureFilter(";
  protected final String TEXT_292 = ".eINSTANCE.get";
  protected final String TEXT_293 = "()));";
  protected final String TEXT_294 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_295 = ".createNotifierFilter(";
  protected final String TEXT_296 = ".getElement()));";
  protected final String TEXT_297 = NL + "\t\t\t";
  protected final String TEXT_298 = " filter = ";
  protected final String TEXT_299 = ".createNotifierFilter(";
  protected final String TEXT_300 = ".getElement());";
  protected final String TEXT_301 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_302 = NL + "\t\t\t";
  protected final String TEXT_303 = " filter = getConstrainedChildrenFilter();";
d324 86
a409 86
  protected final String TEXT_305 = " filter = ";
  protected final String TEXT_306 = ".NOT_TOUCH;";
  protected final String TEXT_307 = NL + "\t\t\treturn filter;";
  protected final String TEXT_308 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_309 = " getCreateNotationalElementCommand(";
  protected final String TEXT_310 = " descriptor) {";
  protected final String TEXT_311 = NL;
  protected final String TEXT_312 = "\t\t\t";
  protected final String TEXT_313 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_314 = NL + "\t\t\tcase ";
  protected final String TEXT_315 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_316 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_317 = "(";
  protected final String TEXT_318 = ", domainElement, ";
  protected final String TEXT_319 = "new ";
  protected final String TEXT_320 = "(0, 0, ";
  protected final String TEXT_321 = ", ";
  protected final String TEXT_322 = ")";
  protected final String TEXT_323 = NL + "null";
  protected final String TEXT_324 = ", ";
  protected final String TEXT_325 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_326 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_327 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_328 = " getSemanticChildNodes() {";
  protected final String TEXT_329 = NL;
  protected final String TEXT_330 = NL + "\treturn ";
  protected final String TEXT_331 = ".EMPTY_LIST;";
  protected final String TEXT_332 = NL + "\t";
  protected final String TEXT_333 = " result = new ";
  protected final String TEXT_334 = "();";
  protected final String TEXT_335 = NL + "\t";
  protected final String TEXT_336 = " viewObject = ";
  protected final String TEXT_337 = ";" + NL + "\t";
  protected final String TEXT_338 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_339 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_340 = NL + "\tfor(";
  protected final String TEXT_341 = " it = ";
  protected final String TEXT_342 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_343 = ") it.next();";
  protected final String TEXT_344 = NL + "\tnextValue = (";
  protected final String TEXT_345 = ")";
  protected final String TEXT_346 = ";";
  protected final String TEXT_347 = NL + "\tnodeVID = ";
  protected final String TEXT_348 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_349 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_350 = NL + "\tcase ";
  protected final String TEXT_351 = ".VISUAL_ID: {";
  protected final String TEXT_352 = NL + "\tif (";
  protected final String TEXT_353 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_354 = NL + "\t\tresult.add(new ";
  protected final String TEXT_355 = "(nextValue, nodeVID));";
  protected final String TEXT_356 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_357 = NL + "\t\t}";
  protected final String TEXT_358 = NL + "\t}";
  protected final String TEXT_359 = NL + "\t}";
  protected final String TEXT_360 = NL + "\treturn result;";
  protected final String TEXT_361 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_362 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_363 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_364 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_365 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_366 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_367 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_368 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_369 = " domainModelEditDomain = ";
  protected final String TEXT_370 = ".getEditingDomain(";
  protected final String TEXT_371 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_372 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_373 = NL;
  protected final String TEXT_374 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_375 = " domainModelEditDomain = ";
  protected final String TEXT_376 = ".getEditingDomain(";
  protected final String TEXT_377 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_378 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_379 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_380 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_381 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_382 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_383 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_384 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_385 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_386 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_387 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_388 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_389 = ".createEventTypeFilter(";
  protected final String TEXT_390 = ".SET).or(" + NL + "\t\t\t\t";
d411 1
a411 1
  protected final String TEXT_392 = ".UNSET).or(" + NL + "\t\t\t\t";
d413 1
a413 1
  protected final String TEXT_394 = ".REMOVE).or(" + NL + "\t\t\t\t";
d415 49
a463 49
  protected final String TEXT_396 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_397 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_398 = " createFilter() {";
  protected final String TEXT_399 = NL;
  protected final String TEXT_400 = NL + "\t\t\t";
  protected final String TEXT_401 = " filter = ";
  protected final String TEXT_402 = ".createFeatureFilter(";
  protected final String TEXT_403 = ".eINSTANCE.get";
  protected final String TEXT_404 = "());";
  protected final String TEXT_405 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_406 = ".createFeatureFilter(";
  protected final String TEXT_407 = ".eINSTANCE.get";
  protected final String TEXT_408 = "()));";
  protected final String TEXT_409 = NL;
  protected final String TEXT_410 = NL + "\t\t\t";
  protected final String TEXT_411 = " filter = ";
  protected final String TEXT_412 = ".createFeatureFilter(";
  protected final String TEXT_413 = ".eINSTANCE.get";
  protected final String TEXT_414 = "());";
  protected final String TEXT_415 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_416 = ".createFeatureFilter(";
  protected final String TEXT_417 = ".eINSTANCE.get";
  protected final String TEXT_418 = "()));";
  protected final String TEXT_419 = NL;
  protected final String TEXT_420 = NL + "\t\t\t";
  protected final String TEXT_421 = " filter = ";
  protected final String TEXT_422 = ".createFeatureFilter(";
  protected final String TEXT_423 = ".eINSTANCE.get";
  protected final String TEXT_424 = "());";
  protected final String TEXT_425 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_426 = ".createFeatureFilter(";
  protected final String TEXT_427 = ".eINSTANCE.get";
  protected final String TEXT_428 = "()));";
  protected final String TEXT_429 = NL;
  protected final String TEXT_430 = NL + "\t\t\t";
  protected final String TEXT_431 = " filter = ";
  protected final String TEXT_432 = ".createFeatureFilter(";
  protected final String TEXT_433 = ".eINSTANCE.get";
  protected final String TEXT_434 = "());";
  protected final String TEXT_435 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_436 = ".createFeatureFilter(";
  protected final String TEXT_437 = ".eINSTANCE.get";
  protected final String TEXT_438 = "()));";
  protected final String TEXT_439 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_440 = NL + "\t\t\t";
  protected final String TEXT_441 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_442 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_443 = NL + "\t\t\t";
  protected final String TEXT_444 = " filter = createUncontainedLinksFilter();";
d465 66
a530 66
  protected final String TEXT_446 = " filter = ";
  protected final String TEXT_447 = ".NOT_TOUCH;";
  protected final String TEXT_448 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_449 = " getCreateNotationalElementCommand(";
  protected final String TEXT_450 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_451 = " linkDescriptor = (";
  protected final String TEXT_452 = ") descriptor;";
  protected final String TEXT_453 = NL;
  protected final String TEXT_454 = "\t\t\t";
  protected final String TEXT_455 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_456 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_457 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_458 = NL + "\t\t\tcase ";
  protected final String TEXT_459 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_460 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_461 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_462 = NL + "\t\t\tcase ";
  protected final String TEXT_463 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_464 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_465 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_466 = "(";
  protected final String TEXT_467 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_468 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_469 = " getSemanticChildLinks() {";
  protected final String TEXT_470 = NL;
  protected final String TEXT_471 = "\t";
  protected final String TEXT_472 = " result = new ";
  protected final String TEXT_473 = "();";
  protected final String TEXT_474 = NL + "\t";
  protected final String TEXT_475 = " modelObject = ";
  protected final String TEXT_476 = ".getElement();" + NL + "\t";
  protected final String TEXT_477 = " nextValue;";
  protected final String TEXT_478 = NL + "\tint linkVID;";
  protected final String TEXT_479 = NL + "\tfor(";
  protected final String TEXT_480 = " it = ";
  protected final String TEXT_481 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_482 = ") it.next();";
  protected final String TEXT_483 = NL + "\tnextValue = (";
  protected final String TEXT_484 = ")";
  protected final String TEXT_485 = ";";
  protected final String TEXT_486 = NL + "\tlinkVID = ";
  protected final String TEXT_487 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_488 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_489 = NL + "\tcase ";
  protected final String TEXT_490 = ".VISUAL_ID: {";
  protected final String TEXT_491 = NL + "\tif (";
  protected final String TEXT_492 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_493 = NL + "\t\t";
  protected final String TEXT_494 = " source = (";
  protected final String TEXT_495 = ")";
  protected final String TEXT_496 = ";";
  protected final String TEXT_497 = NL + "\t\t";
  protected final String TEXT_498 = " source = ";
  protected final String TEXT_499 = ".getElement();";
  protected final String TEXT_500 = NL + "\t\t";
  protected final String TEXT_501 = " target = (";
  protected final String TEXT_502 = ")";
  protected final String TEXT_503 = ";";
  protected final String TEXT_504 = NL + "\t\t";
  protected final String TEXT_505 = " target = ";
  protected final String TEXT_506 = ".getElement();";
  protected final String TEXT_507 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_508 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_509 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_510 = NL + "\t}";
  protected final String TEXT_511 = NL + "\t}";
d532 73
a604 71
  protected final String TEXT_513 = NL + "\tfor(";
  protected final String TEXT_514 = " it = ";
  protected final String TEXT_515 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_516 = ") it.next();";
  protected final String TEXT_517 = NL + "\tnextValue = (";
  protected final String TEXT_518 = ")";
  protected final String TEXT_519 = ";";
  protected final String TEXT_520 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_521 = NL + "\t\tresult.add(new ";
  protected final String TEXT_522 = "(modelObject, nextValue, null, ";
  protected final String TEXT_523 = ".VISUAL_ID));";
  protected final String TEXT_524 = NL + "\t}";
  protected final String TEXT_525 = NL + "\t}";
  protected final String TEXT_526 = NL + "\treturn result;";
  protected final String TEXT_527 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_528 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_529 = " result = new ";
  protected final String TEXT_530 = "();" + NL + "\t\t\t";
  protected final String TEXT_531 = " allLinks = ";
  protected final String TEXT_532 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_533 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_534 = " next = (";
  protected final String TEXT_535 = ") it.next();";
  protected final String TEXT_536 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_537 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_538 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_539 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_540 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_541 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_542 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_543 = ".VISUAL_ID:";
  protected final String TEXT_544 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_545 = NL + "\t\t\t\t} else {";
  protected final String TEXT_546 = NL + "\t\t\t\t}";
  protected final String TEXT_547 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_548 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_549 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_550 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_551 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_552 = ".VISUAL_ID:";
  protected final String TEXT_553 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_554 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_555 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_556 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_557 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_558 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_559 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_560 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_561 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_562 = " domainModelEditDomain = ";
  protected final String TEXT_563 = ".getEditingDomain(";
  protected final String TEXT_564 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_565 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_566 = NL;
  protected final String TEXT_567 = NL;
  protected final String TEXT_568 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_569 = " domainModelRefresher = new ";
  protected final String TEXT_570 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_571 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_572 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_573 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_574 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_575 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_576 = NL;
  protected final String TEXT_577 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_578 = " domainModelRefresher = new ";
  protected final String TEXT_579 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_580 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_581 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_582 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_583 = NL;
d1096 1
a1096 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
d1100 4
d1105 1
a1105 1
    stringBuffer.append(TEXT_126);
d1107 1
a1107 1
    stringBuffer.append(TEXT_127);
d1109 1
a1109 1
    stringBuffer.append(TEXT_128);
d1111 1
a1111 1
    stringBuffer.append(TEXT_129);
d1113 1
a1113 1
    stringBuffer.append(TEXT_130);
d1115 1
a1115 1
    stringBuffer.append(TEXT_131);
d1126 1
a1126 1
    stringBuffer.append(TEXT_132);
d1128 1
a1128 1
    stringBuffer.append(TEXT_133);
d1130 1
a1130 1
    stringBuffer.append(TEXT_134);
d1132 1
a1132 1
    stringBuffer.append(TEXT_135);
d1134 1
a1134 1
    stringBuffer.append(TEXT_136);
d1136 1
a1136 1
    stringBuffer.append(TEXT_137);
d1138 1
a1138 1
    stringBuffer.append(TEXT_138);
d1140 1
a1140 1
    stringBuffer.append(TEXT_139);
d1142 1
a1142 1
    stringBuffer.append(TEXT_140);
d1144 1
a1144 1
    stringBuffer.append(TEXT_141);
d1146 1
a1146 1
    stringBuffer.append(TEXT_142);
d1150 1
a1150 1
    stringBuffer.append(TEXT_143);
d1154 1
a1154 1
    stringBuffer.append(TEXT_144);
d1156 1
a1156 1
    stringBuffer.append(TEXT_145);
d1158 1
a1158 1
    stringBuffer.append(TEXT_146);
d1162 1
a1162 1
    stringBuffer.append(TEXT_147);
d1169 1
a1169 1
    stringBuffer.append(TEXT_148);
d1171 1
a1171 1
    stringBuffer.append(TEXT_149);
d1173 1
a1173 1
    stringBuffer.append(TEXT_150);
d1175 1
a1175 1
    stringBuffer.append(TEXT_151);
d1177 1
a1177 1
    stringBuffer.append(TEXT_152);
a1178 4
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1182 1
a1182 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1184 1
a1184 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1186 1
a1186 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1188 1
a1188 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1192 1
a1192 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1194 1
a1194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1196 1
a1196 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1198 1
a1198 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1202 4
d1207 1
a1207 1
    stringBuffer.append(TEXT_167);
d1209 1
a1209 1
    stringBuffer.append(TEXT_168);
d1217 1
a1217 1
    stringBuffer.append(TEXT_169);
d1219 1
a1219 1
    stringBuffer.append(TEXT_170);
d1221 1
a1221 1
    stringBuffer.append(TEXT_171);
d1223 1
a1223 1
    stringBuffer.append(TEXT_172);
d1225 1
a1225 1
    stringBuffer.append(TEXT_173);
d1227 1
a1227 1
    stringBuffer.append(TEXT_174);
d1229 1
a1229 1
    stringBuffer.append(TEXT_175);
d1237 1
a1237 1
    stringBuffer.append(TEXT_176);
d1242 1
a1242 1
    stringBuffer.append(TEXT_177);
d1244 1
a1244 1
    stringBuffer.append(TEXT_178);
d1246 1
a1246 1
    stringBuffer.append(TEXT_179);
d1251 1
a1251 1
    stringBuffer.append(TEXT_180);
d1253 1
a1253 1
    stringBuffer.append(TEXT_181);
d1255 1
a1255 1
    stringBuffer.append(TEXT_182);
d1257 1
a1257 1
    stringBuffer.append(TEXT_183);
d1259 1
a1259 1
    stringBuffer.append(TEXT_184);
d1272 1
a1272 1
    stringBuffer.append(TEXT_185);
d1277 1
a1277 1
    stringBuffer.append(TEXT_186);
d1279 1
a1279 1
    stringBuffer.append(TEXT_187);
d1281 1
a1281 1
    stringBuffer.append(TEXT_188);
d1286 1
a1286 1
    stringBuffer.append(TEXT_189);
d1288 1
a1288 1
    stringBuffer.append(TEXT_190);
d1290 1
a1290 1
    stringBuffer.append(TEXT_191);
d1292 1
a1292 1
    stringBuffer.append(TEXT_192);
d1294 1
a1294 1
    stringBuffer.append(TEXT_193);
d1302 1
a1302 1
    stringBuffer.append(TEXT_194);
d1304 1
a1304 1
    stringBuffer.append(TEXT_195);
d1306 1
a1306 1
    stringBuffer.append(TEXT_196);
d1308 1
a1308 1
    stringBuffer.append(TEXT_197);
d1310 1
a1310 1
    stringBuffer.append(TEXT_198);
d1314 1
a1314 1
    stringBuffer.append(TEXT_199);
d1316 1
a1316 1
    stringBuffer.append(TEXT_200);
d1318 1
a1318 1
    stringBuffer.append(TEXT_201);
d1320 1
a1320 1
    stringBuffer.append(TEXT_202);
d1322 1
a1322 1
    stringBuffer.append(TEXT_203);
d1326 1
a1326 1
    stringBuffer.append(TEXT_204);
d1328 1
a1328 1
    stringBuffer.append(TEXT_205);
d1330 1
a1330 1
    stringBuffer.append(TEXT_206);
d1332 1
a1332 1
    stringBuffer.append(TEXT_207);
d1334 1
a1334 1
    stringBuffer.append(TEXT_208);
d1345 1
a1345 1
    stringBuffer.append(TEXT_209);
d1347 1
a1347 1
    stringBuffer.append(TEXT_210);
d1349 1
a1349 1
    stringBuffer.append(TEXT_211);
d1351 1
a1351 1
    stringBuffer.append(TEXT_212);
d1353 1
a1353 1
    stringBuffer.append(TEXT_213);
d1355 1
a1355 1
    stringBuffer.append(TEXT_214);
d1357 1
a1357 1
    stringBuffer.append(TEXT_215);
d1359 1
a1359 1
    stringBuffer.append(TEXT_216);
d1361 1
a1361 1
    stringBuffer.append(TEXT_217);
d1363 1
a1363 1
    stringBuffer.append(TEXT_218);
d1365 1
a1365 1
    stringBuffer.append(TEXT_219);
d1370 1
a1370 1
    stringBuffer.append(TEXT_220);
d1372 1
a1372 1
    stringBuffer.append(TEXT_221);
d1374 1
a1374 1
    stringBuffer.append(TEXT_222);
d1381 1
a1381 1
    stringBuffer.append(TEXT_223);
d1383 1
a1383 1
    stringBuffer.append(TEXT_224);
d1385 1
a1385 1
    stringBuffer.append(TEXT_225);
a1386 2
    stringBuffer.append(TEXT_226);
    stringBuffer.append(TEXT_227);
a1387 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1389 1
a1390 2
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d1392 1
a1392 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ChangeBoundsCommand"));
d1394 1
a1394 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d1396 1
a1396 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d1398 1
a1398 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1400 1
a1400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1402 1
a1402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1404 1
d1406 1
a1407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a1408 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1412 4
d1417 1
a1417 1
    stringBuffer.append(TEXT_243);
d1420 1
a1420 1
    stringBuffer.append(TEXT_244);
d1424 1
a1424 1
    stringBuffer.append(TEXT_245);
d1426 1
a1426 1
    stringBuffer.append(TEXT_246);
d1428 1
a1428 1
    stringBuffer.append(TEXT_247);
d1431 1
a1431 1
    stringBuffer.append(TEXT_248);
d1436 1
a1436 1
    stringBuffer.append(TEXT_249);
d1440 1
a1440 1
    stringBuffer.append(TEXT_250);
d1442 1
a1442 1
    stringBuffer.append(TEXT_251);
d1444 1
a1444 1
    stringBuffer.append(TEXT_252);
d1446 1
a1446 1
    stringBuffer.append(TEXT_253);
a1447 2
    stringBuffer.append(TEXT_254);
    stringBuffer.append(TEXT_255);
a1448 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a1449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1451 1
a1451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1453 1
d1455 1
a1456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1457 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1463 4
d1471 1
a1471 1
    stringBuffer.append(TEXT_266);
d1475 1
a1475 1
    stringBuffer.append(TEXT_267);
d1480 1
a1480 1
    stringBuffer.append(TEXT_268);
d1484 1
a1484 1
    stringBuffer.append(TEXT_269);
a1491 3
    stringBuffer.append(TEXT_270);
    stringBuffer.append(TEXT_271);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
a1492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1494 1
a1494 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1496 1
a1496 1
    stringBuffer.append(_getDiagramCode);
d1498 1
a1498 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
d1500 1
a1500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
d1504 4
d1522 1
a1522 1
    stringBuffer.append(TEXT_279);
d1524 1
a1524 1
    stringBuffer.append(TEXT_280);
d1526 1
a1526 1
    stringBuffer.append(TEXT_281);
d1528 1
a1528 1
    stringBuffer.append(TEXT_282);
d1532 1
a1532 1
    stringBuffer.append(TEXT_283);
d1534 1
a1534 1
    stringBuffer.append(TEXT_284);
d1553 1
a1553 1
    stringBuffer.append(TEXT_285);
d1555 1
a1555 1
    stringBuffer.append(TEXT_286);
d1557 1
a1557 1
    stringBuffer.append(TEXT_287);
d1559 1
a1559 1
    stringBuffer.append(TEXT_288);
d1561 1
a1561 1
    stringBuffer.append(TEXT_289);
d1565 1
a1565 1
    stringBuffer.append(TEXT_290);
d1567 1
a1567 1
    stringBuffer.append(TEXT_291);
d1569 1
a1569 1
    stringBuffer.append(TEXT_292);
d1571 1
a1571 1
    stringBuffer.append(TEXT_293);
d1579 1
a1579 1
    stringBuffer.append(TEXT_294);
d1581 1
a1581 1
    stringBuffer.append(TEXT_295);
d1583 1
a1583 1
    stringBuffer.append(TEXT_296);
d1588 1
a1588 1
    stringBuffer.append(TEXT_297);
d1590 1
a1590 1
    stringBuffer.append(TEXT_298);
d1592 1
a1592 1
    stringBuffer.append(TEXT_299);
d1594 1
a1594 1
    stringBuffer.append(TEXT_300);
d1603 1
a1603 1
    stringBuffer.append(TEXT_301);
d1607 1
a1607 1
    stringBuffer.append(TEXT_302);
d1609 1
a1609 1
    stringBuffer.append(TEXT_303);
d1615 1
a1615 1
    stringBuffer.append(TEXT_304);
d1617 1
a1617 1
    stringBuffer.append(TEXT_305);
d1619 1
a1619 1
    stringBuffer.append(TEXT_306);
d1623 1
a1623 1
    stringBuffer.append(TEXT_307);
d1627 1
a1627 1
    stringBuffer.append(TEXT_308);
d1629 1
a1629 1
    stringBuffer.append(TEXT_309);
d1631 1
a1631 1
    stringBuffer.append(TEXT_310);
d1636 2
a1637 2
    stringBuffer.append(TEXT_311);
    stringBuffer.append(TEXT_312);
d1639 1
a1639 1
    stringBuffer.append(TEXT_313);
d1649 1
a1649 1
    stringBuffer.append(TEXT_314);
d1651 1
a1651 1
    stringBuffer.append(TEXT_315);
d1653 1
a1653 1
    stringBuffer.append(TEXT_316);
d1655 1
a1655 1
    stringBuffer.append(TEXT_317);
d1657 1
a1657 1
    stringBuffer.append(TEXT_318);
d1668 1
a1668 1
    stringBuffer.append(TEXT_319);
d1670 1
a1670 1
    stringBuffer.append(TEXT_320);
d1672 1
a1672 1
    stringBuffer.append(TEXT_321);
d1674 1
a1674 1
    stringBuffer.append(TEXT_322);
d1678 1
a1678 1
    stringBuffer.append(TEXT_323);
d1682 1
a1682 1
    stringBuffer.append(TEXT_324);
d1684 1
a1684 1
    stringBuffer.append(TEXT_325);
d1688 1
a1688 1
    stringBuffer.append(TEXT_326);
d1692 1
a1692 1
    stringBuffer.append(TEXT_327);
d1694 2
a1695 2
    stringBuffer.append(TEXT_328);
    stringBuffer.append(TEXT_329);
d1699 1
a1699 1
    stringBuffer.append(TEXT_330);
d1701 1
a1701 1
    stringBuffer.append(TEXT_331);
d1705 1
a1705 1
    stringBuffer.append(TEXT_332);
d1707 1
a1707 1
    stringBuffer.append(TEXT_333);
d1709 1
a1709 1
    stringBuffer.append(TEXT_334);
d1727 1
a1727 1
    stringBuffer.append(TEXT_335);
d1729 1
a1729 1
    stringBuffer.append(TEXT_336);
d1731 1
a1731 1
    stringBuffer.append(TEXT_337);
d1733 1
a1733 1
    stringBuffer.append(TEXT_338);
d1735 1
a1735 1
    stringBuffer.append(TEXT_339);
d1744 1
a1744 1
    stringBuffer.append(TEXT_340);
d1746 1
a1746 1
    stringBuffer.append(TEXT_341);
d1748 1
a1748 1
    stringBuffer.append(TEXT_342);
d1750 1
a1750 1
    stringBuffer.append(TEXT_343);
d1754 1
a1754 1
    stringBuffer.append(TEXT_344);
d1756 1
a1756 1
    stringBuffer.append(TEXT_345);
d1758 1
a1758 1
    stringBuffer.append(TEXT_346);
d1762 1
a1762 1
    stringBuffer.append(TEXT_347);
d1764 1
a1764 1
    stringBuffer.append(TEXT_348);
d1769 1
a1769 1
    stringBuffer.append(TEXT_349);
d1776 1
a1776 1
    stringBuffer.append(TEXT_350);
d1778 1
a1778 1
    stringBuffer.append(TEXT_351);
d1782 1
a1782 1
    stringBuffer.append(TEXT_352);
d1784 1
a1784 1
    stringBuffer.append(TEXT_353);
d1788 1
a1788 1
    stringBuffer.append(TEXT_354);
d1790 1
a1790 1
    stringBuffer.append(TEXT_355);
d1794 1
a1794 1
    stringBuffer.append(TEXT_356);
d1798 1
a1798 1
    stringBuffer.append(TEXT_357);
d1804 1
a1804 1
    stringBuffer.append(TEXT_358);
d1809 1
a1809 1
    stringBuffer.append(TEXT_359);
d1814 1
a1814 1
    stringBuffer.append(TEXT_360);
a1817 4
    stringBuffer.append(TEXT_361);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_362);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
d1821 1
a1821 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1823 1
a1823 1
    stringBuffer.append(_getViewCode);
d1825 1
a1825 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher"));
d1827 1
a1827 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d1829 1
a1829 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1831 1
a1831 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1833 1
a1833 1
    stringBuffer.append(_getDiagramCode);
d1835 1
a1835 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d1837 1
d1839 3
d1845 1
a1845 1
    stringBuffer.append(TEXT_374);
d1847 1
a1847 1
    stringBuffer.append(TEXT_375);
d1849 1
a1849 1
    stringBuffer.append(TEXT_376);
d1851 1
a1851 1
    stringBuffer.append(TEXT_377);
d1853 1
a1853 1
    stringBuffer.append(TEXT_378);
d1855 1
a1855 1
    stringBuffer.append(TEXT_379);
d1857 1
a1857 1
    stringBuffer.append(TEXT_380);
d1859 1
a1859 1
    stringBuffer.append(TEXT_381);
d1861 1
a1861 1
    stringBuffer.append(TEXT_382);
d1874 1
a1874 1
    stringBuffer.append(TEXT_383);
d1876 1
a1876 1
    stringBuffer.append(TEXT_384);
d1878 1
a1878 1
    stringBuffer.append(TEXT_385);
d1880 1
a1880 1
    stringBuffer.append(TEXT_386);
d1885 1
a1885 3
    stringBuffer.append(TEXT_387);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_388);
a1886 2
    stringBuffer.append(TEXT_389);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1900 4
d1907 1
a1907 1
    stringBuffer.append(TEXT_397);
d1909 1
a1909 1
    stringBuffer.append(TEXT_398);
d1922 1
a1922 1
    stringBuffer.append(TEXT_399);
d1936 1
a1936 1
    stringBuffer.append(TEXT_400);
d1938 1
a1938 1
    stringBuffer.append(TEXT_401);
d1940 1
a1940 1
    stringBuffer.append(TEXT_402);
d1942 1
a1942 1
    stringBuffer.append(TEXT_403);
d1944 1
a1944 1
    stringBuffer.append(TEXT_404);
d1948 1
a1948 1
    stringBuffer.append(TEXT_405);
d1950 1
a1950 1
    stringBuffer.append(TEXT_406);
d1952 1
a1952 1
    stringBuffer.append(TEXT_407);
d1954 1
a1954 1
    stringBuffer.append(TEXT_408);
d1961 1
a1961 1
    stringBuffer.append(TEXT_409);
d1975 1
a1975 1
    stringBuffer.append(TEXT_410);
d1977 1
a1977 1
    stringBuffer.append(TEXT_411);
d1979 1
a1979 1
    stringBuffer.append(TEXT_412);
d1981 1
a1981 1
    stringBuffer.append(TEXT_413);
d1983 1
a1983 1
    stringBuffer.append(TEXT_414);
d1987 1
a1987 1
    stringBuffer.append(TEXT_415);
d1989 1
a1989 1
    stringBuffer.append(TEXT_416);
d1991 1
a1991 1
    stringBuffer.append(TEXT_417);
d1993 1
a1993 1
    stringBuffer.append(TEXT_418);
d2000 1
a2000 1
    stringBuffer.append(TEXT_419);
d2014 1
a2014 1
    stringBuffer.append(TEXT_420);
d2016 1
a2016 1
    stringBuffer.append(TEXT_421);
d2018 1
a2018 1
    stringBuffer.append(TEXT_422);
d2020 1
a2020 1
    stringBuffer.append(TEXT_423);
d2022 1
a2022 1
    stringBuffer.append(TEXT_424);
d2026 1
a2026 1
    stringBuffer.append(TEXT_425);
d2028 1
a2028 1
    stringBuffer.append(TEXT_426);
d2030 1
a2030 1
    stringBuffer.append(TEXT_427);
d2032 1
a2032 1
    stringBuffer.append(TEXT_428);
d2042 1
a2042 1
    stringBuffer.append(TEXT_429);
d2056 1
a2056 1
    stringBuffer.append(TEXT_430);
d2058 1
a2058 1
    stringBuffer.append(TEXT_431);
d2060 1
a2060 1
    stringBuffer.append(TEXT_432);
d2062 1
a2062 1
    stringBuffer.append(TEXT_433);
d2064 1
a2064 1
    stringBuffer.append(TEXT_434);
d2068 1
a2068 1
    stringBuffer.append(TEXT_435);
d2070 1
a2070 1
    stringBuffer.append(TEXT_436);
d2072 1
a2072 1
    stringBuffer.append(TEXT_437);
d2074 1
a2074 1
    stringBuffer.append(TEXT_438);
d2083 1
a2083 1
    stringBuffer.append(TEXT_439);
d2088 1
a2088 1
    stringBuffer.append(TEXT_440);
d2090 1
a2090 1
    stringBuffer.append(TEXT_441);
d2097 1
a2097 1
    stringBuffer.append(TEXT_442);
d2102 1
a2102 1
    stringBuffer.append(TEXT_443);
d2104 1
a2104 1
    stringBuffer.append(TEXT_444);
d2110 1
a2110 1
    stringBuffer.append(TEXT_445);
d2112 1
a2112 1
    stringBuffer.append(TEXT_446);
d2114 1
a2114 1
    stringBuffer.append(TEXT_447);
d2119 1
a2119 1
    stringBuffer.append(TEXT_448);
d2121 1
a2121 1
    stringBuffer.append(TEXT_449);
d2123 1
a2123 1
    stringBuffer.append(TEXT_450);
d2125 1
a2125 1
    stringBuffer.append(TEXT_451);
d2127 1
a2127 1
    stringBuffer.append(TEXT_452);
d2134 2
a2135 2
    stringBuffer.append(TEXT_453);
    stringBuffer.append(TEXT_454);
d2137 1
a2137 1
    stringBuffer.append(TEXT_455);
d2139 1
a2139 1
    stringBuffer.append(TEXT_456);
d2141 1
a2141 1
    stringBuffer.append(TEXT_457);
d2150 1
a2150 1
    stringBuffer.append(TEXT_458);
d2152 1
a2152 1
    stringBuffer.append(TEXT_459);
d2154 1
a2154 1
    stringBuffer.append(TEXT_460);
d2156 1
a2156 1
    stringBuffer.append(TEXT_461);
d2162 1
a2162 1
    stringBuffer.append(TEXT_462);
d2164 1
a2164 1
    stringBuffer.append(TEXT_463);
d2166 1
a2166 1
    stringBuffer.append(TEXT_464);
d2170 1
a2170 1
    stringBuffer.append(TEXT_465);
d2172 1
a2172 1
    stringBuffer.append(TEXT_466);
d2174 1
a2174 1
    stringBuffer.append(TEXT_467);
d2178 1
a2178 1
    stringBuffer.append(TEXT_468);
d2180 1
a2180 1
    stringBuffer.append(TEXT_469);
d2186 2
a2187 2
    stringBuffer.append(TEXT_470);
    stringBuffer.append(TEXT_471);
d2189 1
a2189 1
    stringBuffer.append(TEXT_472);
d2191 1
a2191 1
    stringBuffer.append(TEXT_473);
d2214 1
a2214 1
    stringBuffer.append(TEXT_474);
d2216 1
a2216 1
    stringBuffer.append(TEXT_475);
d2218 1
a2218 1
    stringBuffer.append(TEXT_476);
d2220 1
a2220 1
    stringBuffer.append(TEXT_477);
d2225 1
a2225 1
    stringBuffer.append(TEXT_478);
d2234 1
a2234 1
    stringBuffer.append(TEXT_479);
d2236 1
a2236 1
    stringBuffer.append(TEXT_480);
d2238 1
a2238 1
    stringBuffer.append(TEXT_481);
d2240 1
a2240 1
    stringBuffer.append(TEXT_482);
d2244 1
a2244 1
    stringBuffer.append(TEXT_483);
d2246 1
a2246 1
    stringBuffer.append(TEXT_484);
d2248 1
a2248 1
    stringBuffer.append(TEXT_485);
d2252 1
a2252 1
    stringBuffer.append(TEXT_486);
d2254 1
a2254 1
    stringBuffer.append(TEXT_487);
d2259 1
a2259 1
    stringBuffer.append(TEXT_488);
d2267 1
a2267 1
    stringBuffer.append(TEXT_489);
d2269 1
a2269 1
    stringBuffer.append(TEXT_490);
d2273 1
a2273 1
    stringBuffer.append(TEXT_491);
d2275 1
a2275 1
    stringBuffer.append(TEXT_492);
d2280 1
a2280 1
    stringBuffer.append(TEXT_493);
d2282 1
a2282 1
    stringBuffer.append(TEXT_494);
d2284 1
a2284 1
    stringBuffer.append(TEXT_495);
d2286 1
a2286 1
    stringBuffer.append(TEXT_496);
d2290 1
a2290 1
    stringBuffer.append(TEXT_497);
d2292 1
a2292 1
    stringBuffer.append(TEXT_498);
d2294 1
a2294 1
    stringBuffer.append(TEXT_499);
d2299 1
a2299 1
    stringBuffer.append(TEXT_500);
d2301 1
a2301 1
    stringBuffer.append(TEXT_501);
d2303 1
a2303 1
    stringBuffer.append(TEXT_502);
d2305 1
a2305 1
    stringBuffer.append(TEXT_503);
d2309 1
a2309 1
    stringBuffer.append(TEXT_504);
d2311 1
a2311 1
    stringBuffer.append(TEXT_505);
d2313 1
a2313 1
    stringBuffer.append(TEXT_506);
d2317 1
a2317 1
    stringBuffer.append(TEXT_507);
d2319 1
a2319 1
    stringBuffer.append(TEXT_508);
d2323 1
a2323 1
    stringBuffer.append(TEXT_509);
d2327 1
a2327 1
    stringBuffer.append(TEXT_510);
d2335 1
a2335 1
    stringBuffer.append(TEXT_511);
d2340 1
a2340 1
    stringBuffer.append(TEXT_512);
d2350 1
a2350 1
    stringBuffer.append(TEXT_513);
d2352 1
a2352 1
    stringBuffer.append(TEXT_514);
d2354 1
a2354 1
    stringBuffer.append(TEXT_515);
d2356 1
a2356 1
    stringBuffer.append(TEXT_516);
d2360 1
a2360 1
    stringBuffer.append(TEXT_517);
d2362 1
a2362 1
    stringBuffer.append(TEXT_518);
d2364 1
a2364 1
    stringBuffer.append(TEXT_519);
d2368 1
a2368 1
    stringBuffer.append(TEXT_520);
d2373 1
a2373 1
    stringBuffer.append(TEXT_521);
d2375 1
a2375 1
    stringBuffer.append(TEXT_522);
d2377 1
a2377 1
    stringBuffer.append(TEXT_523);
d2381 1
a2381 1
    stringBuffer.append(TEXT_524);
d2385 1
a2385 1
    stringBuffer.append(TEXT_525);
d2390 1
a2390 1
    stringBuffer.append(TEXT_526);
d2394 1
a2394 1
    stringBuffer.append(TEXT_527);
d2396 1
a2396 1
    stringBuffer.append(TEXT_528);
d2398 1
a2398 1
    stringBuffer.append(TEXT_529);
d2400 1
a2400 1
    stringBuffer.append(TEXT_530);
d2402 1
a2402 1
    stringBuffer.append(TEXT_531);
d2404 1
a2404 1
    stringBuffer.append(TEXT_532);
d2406 1
a2406 1
    stringBuffer.append(TEXT_533);
d2408 1
a2408 1
    stringBuffer.append(TEXT_534);
d2410 1
a2410 1
    stringBuffer.append(TEXT_535);
d2414 1
a2414 1
    stringBuffer.append(TEXT_536);
d2416 1
a2416 1
    stringBuffer.append(TEXT_537);
d2418 1
a2418 1
    stringBuffer.append(TEXT_538);
d2423 1
a2423 1
    stringBuffer.append(TEXT_539);
d2425 1
a2425 1
    stringBuffer.append(TEXT_540);
d2427 1
a2427 1
    stringBuffer.append(TEXT_541);
d2432 1
a2432 1
    stringBuffer.append(TEXT_542);
d2434 1
a2434 1
    stringBuffer.append(TEXT_543);
d2438 1
a2438 1
    stringBuffer.append(TEXT_544);
d2442 1
a2442 1
    stringBuffer.append(TEXT_545);
d2446 1
a2446 1
    stringBuffer.append(TEXT_546);
d2453 1
a2453 1
    stringBuffer.append(TEXT_547);
d2457 1
a2457 1
    stringBuffer.append(TEXT_548);
d2459 1
a2459 1
    stringBuffer.append(TEXT_549);
d2461 1
a2461 1
    stringBuffer.append(TEXT_550);
d2466 1
a2466 1
    stringBuffer.append(TEXT_551);
d2468 1
a2468 1
    stringBuffer.append(TEXT_552);
d2472 1
a2472 1
    stringBuffer.append(TEXT_553);
d2476 1
a2476 1
    stringBuffer.append(TEXT_554);
d2478 1
a2478 1
    stringBuffer.append(TEXT_555);
d2480 1
a2480 1
    stringBuffer.append(TEXT_556);
d2482 1
a2482 1
    stringBuffer.append(TEXT_557);
d2484 1
a2484 1
    stringBuffer.append(TEXT_558);
d2486 1
a2486 1
    stringBuffer.append(TEXT_559);
d2488 1
a2488 1
    stringBuffer.append(TEXT_560);
d2490 1
a2490 1
    stringBuffer.append(TEXT_561);
d2492 1
a2492 1
    stringBuffer.append(TEXT_562);
d2494 1
a2494 1
    stringBuffer.append(TEXT_563);
d2496 1
a2496 1
    stringBuffer.append(TEXT_564);
d2498 1
a2498 1
    stringBuffer.append(TEXT_565);
a2504 2
    stringBuffer.append(TEXT_566);
    stringBuffer.append(TEXT_567);
a2505 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d2507 1
a2508 2
    stringBuffer.append(TEXT_570);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
d2510 1
a2510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
d2514 1
a2514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
d2516 1
a2516 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d2518 1
d2520 1
a2521 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d2523 1
a2524 2
    stringBuffer.append(TEXT_579);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
d2526 1
a2526 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
d2530 4
d2535 1
a2535 1
    stringBuffer.append(TEXT_583);
@


1.19
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d256 1
a256 1
  protected final String TEXT_237 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
d258 345
a602 337
  protected final String TEXT_239 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_240 = "\", new ";
  protected final String TEXT_241 = "()); //$NON-NLS-1$";
  protected final String TEXT_242 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_243 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_244 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_245 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_246 = "(this);" + NL + "\t\t}" + NL + "\t\tif (";
  protected final String TEXT_247 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_248 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_249 = NL;
  protected final String TEXT_250 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_251 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_252 = " feature, ";
  protected final String TEXT_253 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_254 = NL;
  protected final String TEXT_255 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_256 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_257 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_258 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_259 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_260 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_261 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_262 = NL;
  protected final String TEXT_263 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_264 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_265 = " domainModelEditDomain = ";
  protected final String TEXT_266 = ".getEditingDomain(";
  protected final String TEXT_267 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_268 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_269 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_270 = " {";
  protected final String TEXT_271 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_272 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_273 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_274 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_275 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_276 = " createFilter() {";
  protected final String TEXT_277 = NL + "\t\t\t";
  protected final String TEXT_278 = " filter = ";
  protected final String TEXT_279 = ".createFeatureFilter(";
  protected final String TEXT_280 = ".eINSTANCE.get";
  protected final String TEXT_281 = "());";
  protected final String TEXT_282 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_283 = ".createFeatureFilter(";
  protected final String TEXT_284 = ".eINSTANCE.get";
  protected final String TEXT_285 = "()));";
  protected final String TEXT_286 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_287 = ".createNotifierFilter(";
  protected final String TEXT_288 = ".getElement()));";
  protected final String TEXT_289 = NL + "\t\t\t";
  protected final String TEXT_290 = " filter = ";
  protected final String TEXT_291 = ".createNotifierFilter(";
  protected final String TEXT_292 = ".getElement());";
  protected final String TEXT_293 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_294 = NL + "\t\t\t";
  protected final String TEXT_295 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_296 = NL + "\t\t\t";
  protected final String TEXT_297 = " filter = ";
  protected final String TEXT_298 = ".NOT_TOUCH;";
  protected final String TEXT_299 = NL + "\t\t\treturn filter;";
  protected final String TEXT_300 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_301 = " getCreateNotationalElementCommand(";
  protected final String TEXT_302 = " descriptor) {";
  protected final String TEXT_303 = NL;
  protected final String TEXT_304 = "\t\t\t";
  protected final String TEXT_305 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_306 = NL + "\t\t\tcase ";
  protected final String TEXT_307 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_308 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_309 = "(";
  protected final String TEXT_310 = ", domainElement, ";
  protected final String TEXT_311 = "new ";
  protected final String TEXT_312 = "(0, 0, ";
  protected final String TEXT_313 = ", ";
  protected final String TEXT_314 = ")";
  protected final String TEXT_315 = NL + "null";
  protected final String TEXT_316 = ", ";
  protected final String TEXT_317 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_318 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_319 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_320 = " getSemanticChildNodes() {";
  protected final String TEXT_321 = NL;
  protected final String TEXT_322 = NL + "\treturn ";
  protected final String TEXT_323 = ".EMPTY_LIST;";
  protected final String TEXT_324 = NL + "\t";
  protected final String TEXT_325 = " result = new ";
  protected final String TEXT_326 = "();";
  protected final String TEXT_327 = NL + "\t";
  protected final String TEXT_328 = " viewObject = ";
  protected final String TEXT_329 = ";" + NL + "\t";
  protected final String TEXT_330 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_331 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_332 = NL + "\tfor(";
  protected final String TEXT_333 = " it = ";
  protected final String TEXT_334 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_335 = ") it.next();";
  protected final String TEXT_336 = NL + "\tnextValue = (";
  protected final String TEXT_337 = ")";
  protected final String TEXT_338 = ";";
  protected final String TEXT_339 = NL + "\tnodeVID = ";
  protected final String TEXT_340 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_341 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_342 = NL + "\tcase ";
  protected final String TEXT_343 = ".VISUAL_ID: {";
  protected final String TEXT_344 = NL + "\tif (";
  protected final String TEXT_345 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_346 = NL + "\t\tresult.add(new ";
  protected final String TEXT_347 = "(nextValue, nodeVID));";
  protected final String TEXT_348 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_349 = NL + "\t\t}";
  protected final String TEXT_350 = NL + "\t}";
  protected final String TEXT_351 = NL + "\t}";
  protected final String TEXT_352 = NL + "\treturn result;";
  protected final String TEXT_353 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_354 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_355 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_356 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_357 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_358 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_359 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_360 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_361 = " domainModelEditDomain = ";
  protected final String TEXT_362 = ".getEditingDomain(";
  protected final String TEXT_363 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_364 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_365 = NL;
  protected final String TEXT_366 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_367 = " domainModelEditDomain = ";
  protected final String TEXT_368 = ".getEditingDomain(";
  protected final String TEXT_369 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_370 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_371 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_372 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_373 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_374 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_375 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_376 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_377 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_378 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_379 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_380 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_381 = ".createEventTypeFilter(";
  protected final String TEXT_382 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_383 = ".createEventTypeFilter(";
  protected final String TEXT_384 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_385 = ".createEventTypeFilter(";
  protected final String TEXT_386 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_387 = ".createEventTypeFilter(";
  protected final String TEXT_388 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_389 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_390 = " createFilter() {";
  protected final String TEXT_391 = NL;
  protected final String TEXT_392 = NL + "\t\t\t";
  protected final String TEXT_393 = " filter = ";
  protected final String TEXT_394 = ".createFeatureFilter(";
  protected final String TEXT_395 = ".eINSTANCE.get";
  protected final String TEXT_396 = "());";
  protected final String TEXT_397 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_398 = ".createFeatureFilter(";
  protected final String TEXT_399 = ".eINSTANCE.get";
  protected final String TEXT_400 = "()));";
  protected final String TEXT_401 = NL;
  protected final String TEXT_402 = NL + "\t\t\t";
  protected final String TEXT_403 = " filter = ";
  protected final String TEXT_404 = ".createFeatureFilter(";
  protected final String TEXT_405 = ".eINSTANCE.get";
  protected final String TEXT_406 = "());";
  protected final String TEXT_407 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_408 = ".createFeatureFilter(";
  protected final String TEXT_409 = ".eINSTANCE.get";
  protected final String TEXT_410 = "()));";
  protected final String TEXT_411 = NL;
  protected final String TEXT_412 = NL + "\t\t\t";
  protected final String TEXT_413 = " filter = ";
  protected final String TEXT_414 = ".createFeatureFilter(";
  protected final String TEXT_415 = ".eINSTANCE.get";
  protected final String TEXT_416 = "());";
  protected final String TEXT_417 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_418 = ".createFeatureFilter(";
  protected final String TEXT_419 = ".eINSTANCE.get";
  protected final String TEXT_420 = "()));";
  protected final String TEXT_421 = NL;
  protected final String TEXT_422 = NL + "\t\t\t";
  protected final String TEXT_423 = " filter = ";
  protected final String TEXT_424 = ".createFeatureFilter(";
  protected final String TEXT_425 = ".eINSTANCE.get";
  protected final String TEXT_426 = "());";
  protected final String TEXT_427 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_428 = ".createFeatureFilter(";
  protected final String TEXT_429 = ".eINSTANCE.get";
  protected final String TEXT_430 = "()));";
  protected final String TEXT_431 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_432 = NL + "\t\t\t";
  protected final String TEXT_433 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_434 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_435 = NL + "\t\t\t";
  protected final String TEXT_436 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_437 = NL + "\t\t\t";
  protected final String TEXT_438 = " filter = ";
  protected final String TEXT_439 = ".NOT_TOUCH;";
  protected final String TEXT_440 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_441 = " getCreateNotationalElementCommand(";
  protected final String TEXT_442 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_443 = " linkDescriptor = (";
  protected final String TEXT_444 = ") descriptor;";
  protected final String TEXT_445 = NL;
  protected final String TEXT_446 = "\t\t\t";
  protected final String TEXT_447 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_448 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_449 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_450 = NL + "\t\t\tcase ";
  protected final String TEXT_451 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_452 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_453 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_454 = NL + "\t\t\tcase ";
  protected final String TEXT_455 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_456 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_457 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_458 = "(";
  protected final String TEXT_459 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_460 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_461 = " getSemanticChildLinks() {";
  protected final String TEXT_462 = NL;
  protected final String TEXT_463 = "\t";
  protected final String TEXT_464 = " result = new ";
  protected final String TEXT_465 = "();";
  protected final String TEXT_466 = NL + "\t";
  protected final String TEXT_467 = " modelObject = ";
  protected final String TEXT_468 = ".getElement();" + NL + "\t";
  protected final String TEXT_469 = " nextValue;";
  protected final String TEXT_470 = NL + "\tint linkVID;";
  protected final String TEXT_471 = NL + "\tfor(";
  protected final String TEXT_472 = " it = ";
  protected final String TEXT_473 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_474 = ") it.next();";
  protected final String TEXT_475 = NL + "\tnextValue = (";
  protected final String TEXT_476 = ")";
  protected final String TEXT_477 = ";";
  protected final String TEXT_478 = NL + "\tlinkVID = ";
  protected final String TEXT_479 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_480 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_481 = NL + "\tcase ";
  protected final String TEXT_482 = ".VISUAL_ID: {";
  protected final String TEXT_483 = NL + "\tif (";
  protected final String TEXT_484 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_485 = NL + "\t\t";
  protected final String TEXT_486 = " source = (";
  protected final String TEXT_487 = ")";
  protected final String TEXT_488 = ";";
  protected final String TEXT_489 = NL + "\t\t";
  protected final String TEXT_490 = " source = ";
  protected final String TEXT_491 = ".getElement();";
  protected final String TEXT_492 = NL + "\t\t";
  protected final String TEXT_493 = " target = (";
  protected final String TEXT_494 = ")";
  protected final String TEXT_495 = ";";
  protected final String TEXT_496 = NL + "\t\t";
  protected final String TEXT_497 = " target = ";
  protected final String TEXT_498 = ".getElement();";
  protected final String TEXT_499 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_500 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_501 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_502 = NL + "\t}";
  protected final String TEXT_503 = NL + "\t}";
  protected final String TEXT_504 = NL + "\t}";
  protected final String TEXT_505 = NL + "\tfor(";
  protected final String TEXT_506 = " it = ";
  protected final String TEXT_507 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_508 = ") it.next();";
  protected final String TEXT_509 = NL + "\tnextValue = (";
  protected final String TEXT_510 = ")";
  protected final String TEXT_511 = ";";
  protected final String TEXT_512 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_513 = NL + "\t\tresult.add(new ";
  protected final String TEXT_514 = "(modelObject, nextValue, null, ";
  protected final String TEXT_515 = ".VISUAL_ID));";
  protected final String TEXT_516 = NL + "\t}";
  protected final String TEXT_517 = NL + "\t}";
  protected final String TEXT_518 = NL + "\treturn result;";
  protected final String TEXT_519 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_520 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_521 = " result = new ";
  protected final String TEXT_522 = "();" + NL + "\t\t\t";
  protected final String TEXT_523 = " allLinks = ";
  protected final String TEXT_524 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_525 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_526 = " next = (";
  protected final String TEXT_527 = ") it.next();";
  protected final String TEXT_528 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_529 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_530 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_531 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_532 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_533 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_534 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_535 = ".VISUAL_ID:";
  protected final String TEXT_536 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_537 = NL + "\t\t\t\t} else {";
  protected final String TEXT_538 = NL + "\t\t\t\t}";
  protected final String TEXT_539 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_540 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_541 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_542 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_543 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_544 = ".VISUAL_ID:";
  protected final String TEXT_545 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_546 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_547 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_548 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_549 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_550 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_551 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_552 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_553 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_554 = " domainModelEditDomain = ";
  protected final String TEXT_555 = ".getEditingDomain(";
  protected final String TEXT_556 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_557 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_558 = NL;
  protected final String TEXT_559 = NL;
  protected final String TEXT_560 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_561 = " domainModelRefresher = new ";
  protected final String TEXT_562 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_563 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_564 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_565 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_566 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_567 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_568 = NL;
  protected final String TEXT_569 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_570 = " domainModelRefresher = new ";
  protected final String TEXT_571 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_572 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_573 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_574 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_575 = NL;
d1402 10
d1414 1
a1414 1
    stringBuffer.append(TEXT_238);
d1418 1
a1418 1
    stringBuffer.append(TEXT_239);
d1420 1
a1420 1
    stringBuffer.append(TEXT_240);
d1422 1
a1422 1
    stringBuffer.append(TEXT_241);
d1425 1
a1425 1
    stringBuffer.append(TEXT_242);
d1430 1
a1430 1
    stringBuffer.append(TEXT_243);
d1434 1
a1434 1
    stringBuffer.append(TEXT_244);
d1436 1
a1436 1
    stringBuffer.append(TEXT_245);
d1438 1
a1438 1
    stringBuffer.append(TEXT_246);
d1440 1
a1440 1
    stringBuffer.append(TEXT_247);
d1442 3
a1444 3
    stringBuffer.append(TEXT_248);
    stringBuffer.append(TEXT_249);
    stringBuffer.append(TEXT_250);
d1446 1
a1446 1
    stringBuffer.append(TEXT_251);
d1448 1
a1448 1
    stringBuffer.append(TEXT_252);
d1450 7
a1456 3
    stringBuffer.append(TEXT_253);
    stringBuffer.append(TEXT_254);
    stringBuffer.append(TEXT_255);
d1458 1
a1458 1
    stringBuffer.append(TEXT_256);
d1460 1
a1460 1
    stringBuffer.append(TEXT_257);
d1465 1
a1465 1
    stringBuffer.append(TEXT_258);
d1469 1
a1469 1
    stringBuffer.append(TEXT_259);
d1474 1
a1474 1
    stringBuffer.append(TEXT_260);
d1478 1
a1478 1
    stringBuffer.append(TEXT_261);
d1486 2
a1487 2
    stringBuffer.append(TEXT_262);
    stringBuffer.append(TEXT_263);
d1489 1
a1489 1
    stringBuffer.append(TEXT_264);
d1491 1
a1491 1
    stringBuffer.append(TEXT_265);
d1493 1
a1493 1
    stringBuffer.append(TEXT_266);
d1495 1
a1495 1
    stringBuffer.append(TEXT_267);
d1497 1
a1497 1
    stringBuffer.append(TEXT_268);
d1499 1
a1499 1
    stringBuffer.append(TEXT_269);
d1501 1
a1501 1
    stringBuffer.append(TEXT_270);
d1516 1
a1516 1
    stringBuffer.append(TEXT_271);
d1518 1
a1518 1
    stringBuffer.append(TEXT_272);
d1520 1
a1520 1
    stringBuffer.append(TEXT_273);
d1522 1
a1522 1
    stringBuffer.append(TEXT_274);
d1526 1
a1526 1
    stringBuffer.append(TEXT_275);
d1528 1
a1528 1
    stringBuffer.append(TEXT_276);
d1547 1
a1547 1
    stringBuffer.append(TEXT_277);
d1549 1
a1549 1
    stringBuffer.append(TEXT_278);
d1551 1
a1551 1
    stringBuffer.append(TEXT_279);
d1553 1
a1553 1
    stringBuffer.append(TEXT_280);
d1555 1
a1555 1
    stringBuffer.append(TEXT_281);
d1559 1
a1559 1
    stringBuffer.append(TEXT_282);
d1561 1
a1561 1
    stringBuffer.append(TEXT_283);
d1563 1
a1563 1
    stringBuffer.append(TEXT_284);
d1565 1
a1565 1
    stringBuffer.append(TEXT_285);
d1573 1
a1573 1
    stringBuffer.append(TEXT_286);
d1575 1
a1575 1
    stringBuffer.append(TEXT_287);
d1577 1
a1577 1
    stringBuffer.append(TEXT_288);
d1582 1
a1582 1
    stringBuffer.append(TEXT_289);
d1584 1
a1584 1
    stringBuffer.append(TEXT_290);
d1586 1
a1586 1
    stringBuffer.append(TEXT_291);
d1588 1
a1588 1
    stringBuffer.append(TEXT_292);
d1597 1
a1597 1
    stringBuffer.append(TEXT_293);
d1601 1
a1601 1
    stringBuffer.append(TEXT_294);
d1603 1
a1603 1
    stringBuffer.append(TEXT_295);
d1609 1
a1609 1
    stringBuffer.append(TEXT_296);
d1611 1
a1611 1
    stringBuffer.append(TEXT_297);
d1613 1
a1613 1
    stringBuffer.append(TEXT_298);
d1617 1
a1617 1
    stringBuffer.append(TEXT_299);
d1621 1
a1621 1
    stringBuffer.append(TEXT_300);
d1623 1
a1623 1
    stringBuffer.append(TEXT_301);
d1625 1
a1625 1
    stringBuffer.append(TEXT_302);
d1630 2
a1631 2
    stringBuffer.append(TEXT_303);
    stringBuffer.append(TEXT_304);
d1633 1
a1633 1
    stringBuffer.append(TEXT_305);
d1643 1
a1643 1
    stringBuffer.append(TEXT_306);
d1645 1
a1645 1
    stringBuffer.append(TEXT_307);
d1647 1
a1647 1
    stringBuffer.append(TEXT_308);
d1649 1
a1649 1
    stringBuffer.append(TEXT_309);
d1651 1
a1651 1
    stringBuffer.append(TEXT_310);
d1662 1
a1662 1
    stringBuffer.append(TEXT_311);
d1664 1
a1664 1
    stringBuffer.append(TEXT_312);
d1666 1
a1666 1
    stringBuffer.append(TEXT_313);
d1668 1
a1668 1
    stringBuffer.append(TEXT_314);
d1672 1
a1672 1
    stringBuffer.append(TEXT_315);
d1676 1
a1676 1
    stringBuffer.append(TEXT_316);
d1678 1
a1678 1
    stringBuffer.append(TEXT_317);
d1682 1
a1682 1
    stringBuffer.append(TEXT_318);
d1686 1
a1686 1
    stringBuffer.append(TEXT_319);
d1688 2
a1689 2
    stringBuffer.append(TEXT_320);
    stringBuffer.append(TEXT_321);
d1693 1
a1693 1
    stringBuffer.append(TEXT_322);
d1695 1
a1695 1
    stringBuffer.append(TEXT_323);
d1699 1
a1699 1
    stringBuffer.append(TEXT_324);
d1701 1
a1701 1
    stringBuffer.append(TEXT_325);
d1703 1
a1703 1
    stringBuffer.append(TEXT_326);
d1721 1
a1721 1
    stringBuffer.append(TEXT_327);
d1723 1
a1723 1
    stringBuffer.append(TEXT_328);
d1725 1
a1725 1
    stringBuffer.append(TEXT_329);
d1727 1
a1727 1
    stringBuffer.append(TEXT_330);
d1729 1
a1729 1
    stringBuffer.append(TEXT_331);
d1738 1
a1738 1
    stringBuffer.append(TEXT_332);
d1740 1
a1740 1
    stringBuffer.append(TEXT_333);
d1742 1
a1742 1
    stringBuffer.append(TEXT_334);
d1744 1
a1744 1
    stringBuffer.append(TEXT_335);
d1748 1
a1748 1
    stringBuffer.append(TEXT_336);
d1750 1
a1750 1
    stringBuffer.append(TEXT_337);
d1752 1
a1752 1
    stringBuffer.append(TEXT_338);
d1756 1
a1756 1
    stringBuffer.append(TEXT_339);
d1758 1
a1758 1
    stringBuffer.append(TEXT_340);
d1763 1
a1763 1
    stringBuffer.append(TEXT_341);
d1770 1
a1770 1
    stringBuffer.append(TEXT_342);
d1772 1
a1772 1
    stringBuffer.append(TEXT_343);
d1776 1
a1776 1
    stringBuffer.append(TEXT_344);
d1778 1
a1778 1
    stringBuffer.append(TEXT_345);
d1782 1
a1782 1
    stringBuffer.append(TEXT_346);
d1784 1
a1784 1
    stringBuffer.append(TEXT_347);
d1788 1
a1788 1
    stringBuffer.append(TEXT_348);
d1792 1
a1792 1
    stringBuffer.append(TEXT_349);
d1798 1
a1798 1
    stringBuffer.append(TEXT_350);
d1803 1
a1803 1
    stringBuffer.append(TEXT_351);
d1808 1
a1808 1
    stringBuffer.append(TEXT_352);
d1812 1
a1812 1
    stringBuffer.append(TEXT_353);
d1814 1
a1814 1
    stringBuffer.append(TEXT_354);
d1816 1
a1816 1
    stringBuffer.append(TEXT_355);
d1818 1
a1818 1
    stringBuffer.append(TEXT_356);
d1820 1
a1820 1
    stringBuffer.append(TEXT_357);
d1822 1
a1822 1
    stringBuffer.append(TEXT_358);
d1824 1
a1824 1
    stringBuffer.append(TEXT_359);
d1826 1
a1826 1
    stringBuffer.append(TEXT_360);
d1828 1
a1828 1
    stringBuffer.append(TEXT_361);
d1830 1
a1830 1
    stringBuffer.append(TEXT_362);
d1832 1
a1832 1
    stringBuffer.append(TEXT_363);
d1834 2
a1835 2
    stringBuffer.append(TEXT_364);
    stringBuffer.append(TEXT_365);
d1839 1
a1839 1
    stringBuffer.append(TEXT_366);
d1841 1
a1841 1
    stringBuffer.append(TEXT_367);
d1843 1
a1843 1
    stringBuffer.append(TEXT_368);
d1845 1
a1845 1
    stringBuffer.append(TEXT_369);
d1847 1
a1847 1
    stringBuffer.append(TEXT_370);
d1849 1
a1849 1
    stringBuffer.append(TEXT_371);
d1851 1
a1851 1
    stringBuffer.append(TEXT_372);
d1853 1
a1853 1
    stringBuffer.append(TEXT_373);
d1855 1
a1855 1
    stringBuffer.append(TEXT_374);
d1868 1
a1868 1
    stringBuffer.append(TEXT_375);
d1870 1
a1870 1
    stringBuffer.append(TEXT_376);
d1872 1
a1872 1
    stringBuffer.append(TEXT_377);
d1874 1
a1874 1
    stringBuffer.append(TEXT_378);
d1879 1
a1879 1
    stringBuffer.append(TEXT_379);
d1881 1
a1881 1
    stringBuffer.append(TEXT_380);
d1883 1
a1883 1
    stringBuffer.append(TEXT_381);
d1885 1
a1885 1
    stringBuffer.append(TEXT_382);
d1887 1
a1887 1
    stringBuffer.append(TEXT_383);
d1889 1
a1889 1
    stringBuffer.append(TEXT_384);
d1891 1
a1891 1
    stringBuffer.append(TEXT_385);
d1893 1
a1893 1
    stringBuffer.append(TEXT_386);
d1895 1
a1895 1
    stringBuffer.append(TEXT_387);
d1897 1
a1897 1
    stringBuffer.append(TEXT_388);
d1901 1
a1901 1
    stringBuffer.append(TEXT_389);
d1903 1
a1903 1
    stringBuffer.append(TEXT_390);
d1916 1
a1916 1
    stringBuffer.append(TEXT_391);
d1930 1
a1930 1
    stringBuffer.append(TEXT_392);
d1932 1
a1932 1
    stringBuffer.append(TEXT_393);
d1934 1
a1934 1
    stringBuffer.append(TEXT_394);
d1936 1
a1936 1
    stringBuffer.append(TEXT_395);
d1938 1
a1938 1
    stringBuffer.append(TEXT_396);
d1942 1
a1942 1
    stringBuffer.append(TEXT_397);
d1944 1
a1944 1
    stringBuffer.append(TEXT_398);
d1946 1
a1946 1
    stringBuffer.append(TEXT_399);
d1948 1
a1948 1
    stringBuffer.append(TEXT_400);
d1955 1
a1955 1
    stringBuffer.append(TEXT_401);
d1969 1
a1969 1
    stringBuffer.append(TEXT_402);
d1971 1
a1971 1
    stringBuffer.append(TEXT_403);
d1973 1
a1973 1
    stringBuffer.append(TEXT_404);
d1975 1
a1975 1
    stringBuffer.append(TEXT_405);
d1977 1
a1977 1
    stringBuffer.append(TEXT_406);
d1981 1
a1981 1
    stringBuffer.append(TEXT_407);
d1983 1
a1983 1
    stringBuffer.append(TEXT_408);
d1985 1
a1985 1
    stringBuffer.append(TEXT_409);
d1987 1
a1987 1
    stringBuffer.append(TEXT_410);
d1994 1
a1994 1
    stringBuffer.append(TEXT_411);
d2008 1
a2008 1
    stringBuffer.append(TEXT_412);
d2010 1
a2010 1
    stringBuffer.append(TEXT_413);
d2012 1
a2012 1
    stringBuffer.append(TEXT_414);
d2014 1
a2014 1
    stringBuffer.append(TEXT_415);
d2016 1
a2016 1
    stringBuffer.append(TEXT_416);
d2020 1
a2020 1
    stringBuffer.append(TEXT_417);
d2022 1
a2022 1
    stringBuffer.append(TEXT_418);
d2024 1
a2024 1
    stringBuffer.append(TEXT_419);
d2026 1
a2026 1
    stringBuffer.append(TEXT_420);
d2036 1
a2036 1
    stringBuffer.append(TEXT_421);
d2050 1
a2050 1
    stringBuffer.append(TEXT_422);
d2052 1
a2052 1
    stringBuffer.append(TEXT_423);
d2054 1
a2054 1
    stringBuffer.append(TEXT_424);
d2056 1
a2056 1
    stringBuffer.append(TEXT_425);
d2058 1
a2058 1
    stringBuffer.append(TEXT_426);
d2062 1
a2062 1
    stringBuffer.append(TEXT_427);
d2064 1
a2064 1
    stringBuffer.append(TEXT_428);
d2066 1
a2066 1
    stringBuffer.append(TEXT_429);
d2068 1
a2068 1
    stringBuffer.append(TEXT_430);
d2077 1
a2077 1
    stringBuffer.append(TEXT_431);
d2082 1
a2082 1
    stringBuffer.append(TEXT_432);
d2084 1
a2084 1
    stringBuffer.append(TEXT_433);
d2091 1
a2091 1
    stringBuffer.append(TEXT_434);
d2096 1
a2096 1
    stringBuffer.append(TEXT_435);
d2098 1
a2098 1
    stringBuffer.append(TEXT_436);
d2104 1
a2104 1
    stringBuffer.append(TEXT_437);
d2106 1
a2106 1
    stringBuffer.append(TEXT_438);
d2108 1
a2108 1
    stringBuffer.append(TEXT_439);
d2113 1
a2113 1
    stringBuffer.append(TEXT_440);
d2115 1
a2115 1
    stringBuffer.append(TEXT_441);
d2117 1
a2117 1
    stringBuffer.append(TEXT_442);
d2119 1
a2119 1
    stringBuffer.append(TEXT_443);
d2121 1
a2121 1
    stringBuffer.append(TEXT_444);
d2128 2
a2129 2
    stringBuffer.append(TEXT_445);
    stringBuffer.append(TEXT_446);
d2131 1
a2131 1
    stringBuffer.append(TEXT_447);
d2133 1
a2133 1
    stringBuffer.append(TEXT_448);
d2135 1
a2135 1
    stringBuffer.append(TEXT_449);
d2144 1
a2144 1
    stringBuffer.append(TEXT_450);
d2146 1
a2146 1
    stringBuffer.append(TEXT_451);
d2148 1
a2148 1
    stringBuffer.append(TEXT_452);
d2150 1
a2150 1
    stringBuffer.append(TEXT_453);
d2156 1
a2156 1
    stringBuffer.append(TEXT_454);
d2158 1
a2158 1
    stringBuffer.append(TEXT_455);
d2160 1
a2160 1
    stringBuffer.append(TEXT_456);
d2164 1
a2164 1
    stringBuffer.append(TEXT_457);
d2166 1
a2166 1
    stringBuffer.append(TEXT_458);
d2168 1
a2168 1
    stringBuffer.append(TEXT_459);
d2172 1
a2172 1
    stringBuffer.append(TEXT_460);
d2174 1
a2174 1
    stringBuffer.append(TEXT_461);
d2180 2
a2181 2
    stringBuffer.append(TEXT_462);
    stringBuffer.append(TEXT_463);
d2183 1
a2183 1
    stringBuffer.append(TEXT_464);
d2185 1
a2185 1
    stringBuffer.append(TEXT_465);
d2208 1
a2208 1
    stringBuffer.append(TEXT_466);
d2210 1
a2210 1
    stringBuffer.append(TEXT_467);
d2212 1
a2212 1
    stringBuffer.append(TEXT_468);
d2214 1
a2214 1
    stringBuffer.append(TEXT_469);
d2219 1
a2219 1
    stringBuffer.append(TEXT_470);
d2228 1
a2228 1
    stringBuffer.append(TEXT_471);
d2230 1
a2230 1
    stringBuffer.append(TEXT_472);
d2232 1
a2232 1
    stringBuffer.append(TEXT_473);
d2234 1
a2234 1
    stringBuffer.append(TEXT_474);
d2238 1
a2238 1
    stringBuffer.append(TEXT_475);
d2240 1
a2240 1
    stringBuffer.append(TEXT_476);
d2242 1
a2242 1
    stringBuffer.append(TEXT_477);
d2246 1
a2246 1
    stringBuffer.append(TEXT_478);
d2248 1
a2248 1
    stringBuffer.append(TEXT_479);
d2253 1
a2253 1
    stringBuffer.append(TEXT_480);
d2261 1
a2261 1
    stringBuffer.append(TEXT_481);
d2263 1
a2263 1
    stringBuffer.append(TEXT_482);
d2267 1
a2267 1
    stringBuffer.append(TEXT_483);
d2269 1
a2269 1
    stringBuffer.append(TEXT_484);
d2274 1
a2274 1
    stringBuffer.append(TEXT_485);
d2276 1
a2276 1
    stringBuffer.append(TEXT_486);
d2278 1
a2278 1
    stringBuffer.append(TEXT_487);
d2280 1
a2280 1
    stringBuffer.append(TEXT_488);
d2284 1
a2284 1
    stringBuffer.append(TEXT_489);
d2286 1
a2286 1
    stringBuffer.append(TEXT_490);
d2288 1
a2288 1
    stringBuffer.append(TEXT_491);
d2293 1
a2293 1
    stringBuffer.append(TEXT_492);
d2295 1
a2295 1
    stringBuffer.append(TEXT_493);
d2297 1
a2297 1
    stringBuffer.append(TEXT_494);
d2299 1
a2299 1
    stringBuffer.append(TEXT_495);
d2303 1
a2303 1
    stringBuffer.append(TEXT_496);
d2305 1
a2305 1
    stringBuffer.append(TEXT_497);
d2307 1
a2307 1
    stringBuffer.append(TEXT_498);
d2311 1
a2311 1
    stringBuffer.append(TEXT_499);
d2313 1
a2313 1
    stringBuffer.append(TEXT_500);
d2317 1
a2317 1
    stringBuffer.append(TEXT_501);
d2321 1
a2321 1
    stringBuffer.append(TEXT_502);
d2329 1
a2329 1
    stringBuffer.append(TEXT_503);
d2334 1
a2334 1
    stringBuffer.append(TEXT_504);
d2344 1
a2344 1
    stringBuffer.append(TEXT_505);
d2346 1
a2346 1
    stringBuffer.append(TEXT_506);
d2348 1
a2348 1
    stringBuffer.append(TEXT_507);
d2350 1
a2350 1
    stringBuffer.append(TEXT_508);
d2354 1
a2354 1
    stringBuffer.append(TEXT_509);
d2356 1
a2356 1
    stringBuffer.append(TEXT_510);
d2358 1
a2358 1
    stringBuffer.append(TEXT_511);
d2362 1
a2362 1
    stringBuffer.append(TEXT_512);
d2367 1
a2367 1
    stringBuffer.append(TEXT_513);
d2369 1
a2369 1
    stringBuffer.append(TEXT_514);
d2371 1
a2371 1
    stringBuffer.append(TEXT_515);
d2375 1
a2375 1
    stringBuffer.append(TEXT_516);
d2379 1
a2379 1
    stringBuffer.append(TEXT_517);
d2384 1
a2384 1
    stringBuffer.append(TEXT_518);
d2388 1
a2388 1
    stringBuffer.append(TEXT_519);
d2390 1
a2390 1
    stringBuffer.append(TEXT_520);
d2392 1
a2392 1
    stringBuffer.append(TEXT_521);
d2394 1
a2394 1
    stringBuffer.append(TEXT_522);
d2396 1
a2396 1
    stringBuffer.append(TEXT_523);
d2398 1
a2398 1
    stringBuffer.append(TEXT_524);
d2400 1
a2400 1
    stringBuffer.append(TEXT_525);
d2402 1
a2402 1
    stringBuffer.append(TEXT_526);
d2404 1
a2404 1
    stringBuffer.append(TEXT_527);
d2408 1
a2408 1
    stringBuffer.append(TEXT_528);
d2410 1
a2410 1
    stringBuffer.append(TEXT_529);
d2412 1
a2412 1
    stringBuffer.append(TEXT_530);
d2417 1
a2417 1
    stringBuffer.append(TEXT_531);
d2419 1
a2419 1
    stringBuffer.append(TEXT_532);
d2421 1
a2421 1
    stringBuffer.append(TEXT_533);
d2426 1
a2426 1
    stringBuffer.append(TEXT_534);
d2428 1
a2428 1
    stringBuffer.append(TEXT_535);
d2432 1
a2432 1
    stringBuffer.append(TEXT_536);
d2436 1
a2436 1
    stringBuffer.append(TEXT_537);
d2440 1
a2440 1
    stringBuffer.append(TEXT_538);
d2447 1
a2447 1
    stringBuffer.append(TEXT_539);
d2451 1
a2451 1
    stringBuffer.append(TEXT_540);
d2453 1
a2453 1
    stringBuffer.append(TEXT_541);
d2455 1
a2455 1
    stringBuffer.append(TEXT_542);
d2460 1
a2460 1
    stringBuffer.append(TEXT_543);
d2462 1
a2462 1
    stringBuffer.append(TEXT_544);
d2466 1
a2466 1
    stringBuffer.append(TEXT_545);
d2470 1
a2470 1
    stringBuffer.append(TEXT_546);
d2472 1
a2472 1
    stringBuffer.append(TEXT_547);
d2474 1
a2474 1
    stringBuffer.append(TEXT_548);
d2476 1
a2476 1
    stringBuffer.append(TEXT_549);
d2478 1
a2478 1
    stringBuffer.append(TEXT_550);
d2480 1
a2480 1
    stringBuffer.append(TEXT_551);
d2482 1
a2482 1
    stringBuffer.append(TEXT_552);
d2484 1
a2484 1
    stringBuffer.append(TEXT_553);
d2486 1
a2486 1
    stringBuffer.append(TEXT_554);
d2488 1
a2488 1
    stringBuffer.append(TEXT_555);
d2490 1
a2490 1
    stringBuffer.append(TEXT_556);
d2492 1
a2492 1
    stringBuffer.append(TEXT_557);
d2499 3
a2501 3
    stringBuffer.append(TEXT_558);
    stringBuffer.append(TEXT_559);
    stringBuffer.append(TEXT_560);
d2503 1
a2503 1
    stringBuffer.append(TEXT_561);
d2505 1
a2505 1
    stringBuffer.append(TEXT_562);
d2507 1
a2507 1
    stringBuffer.append(TEXT_563);
d2509 1
a2509 1
    stringBuffer.append(TEXT_564);
d2511 1
a2511 1
    stringBuffer.append(TEXT_565);
d2513 1
a2513 1
    stringBuffer.append(TEXT_566);
d2515 3
a2517 3
    stringBuffer.append(TEXT_567);
    stringBuffer.append(TEXT_568);
    stringBuffer.append(TEXT_569);
d2519 1
a2519 1
    stringBuffer.append(TEXT_570);
d2521 1
a2521 1
    stringBuffer.append(TEXT_571);
d2523 1
a2523 1
    stringBuffer.append(TEXT_572);
d2525 1
a2525 1
    stringBuffer.append(TEXT_573);
d2527 1
a2527 1
    stringBuffer.append(TEXT_574);
d2529 1
a2529 1
    stringBuffer.append(TEXT_575);
@


1.18
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d64 2
a65 2
  protected final String TEXT_45 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_46 = "Command(getDiagram(), requestEx, (";
d269 63
a331 63
  protected final String TEXT_250 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_251 = "static ";
  protected final String TEXT_252 = "class Create";
  protected final String TEXT_253 = "Command extends ";
  protected final String TEXT_254 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_255 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_256 = "Command(";
  protected final String TEXT_257 = " parent, ";
  protected final String TEXT_258 = " request";
  protected final String TEXT_259 = ", ";
  protected final String TEXT_260 = " constraint";
  protected final String TEXT_261 = ") {" + NL + "\t\t\t";
  protected final String TEXT_262 = " domainModelEditDomain = ";
  protected final String TEXT_263 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_264 = NL + "\t\t\t";
  protected final String TEXT_265 = " createdDomainElement = ";
  protected final String TEXT_266 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_267 = ".eINSTANCE.get";
  protected final String TEXT_268 = "());";
  protected final String TEXT_269 = NL + "\t\t\t";
  protected final String TEXT_270 = " createdDomainElement = ";
  protected final String TEXT_271 = ".eINSTANCE.create";
  protected final String TEXT_272 = "();";
  protected final String TEXT_273 = NL + "\t\t\t";
  protected final String TEXT_274 = NL + "\t\t\t";
  protected final String TEXT_275 = ".";
  protected final String TEXT_276 = ".initializeElement(";
  protected final String TEXT_277 = "(";
  protected final String TEXT_278 = ") ";
  protected final String TEXT_279 = "createdDomainElement);";
  protected final String TEXT_280 = NL;
  protected final String TEXT_281 = NL + "\t\tif (";
  protected final String TEXT_282 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_283 = NL + "\t\t}";
  protected final String TEXT_284 = NL + "\t\tif (";
  protected final String TEXT_285 = ".size() >= ";
  protected final String TEXT_286 = ".eINSTANCE.get";
  protected final String TEXT_287 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_288 = NL + "\t\t}";
  protected final String TEXT_289 = NL;
  protected final String TEXT_290 = NL + "\t\tif (";
  protected final String TEXT_291 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_292 = NL + "\t\t}";
  protected final String TEXT_293 = NL + "\t\tif (";
  protected final String TEXT_294 = ".size() >= ";
  protected final String TEXT_295 = ".eINSTANCE.get";
  protected final String TEXT_296 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_297 = NL + "\t\t}";
  protected final String TEXT_298 = NL + "\t\t\t";
  protected final String TEXT_299 = " compoundCommand = new ";
  protected final String TEXT_300 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_301 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_302 = ".eINSTANCE.get";
  protected final String TEXT_303 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_304 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_305 = ".eINSTANCE.get";
  protected final String TEXT_306 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_307 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_308 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_309 = ".eINSTANCE.get";
  protected final String TEXT_310 = "(), createdDomainElement);";
  protected final String TEXT_311 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_312 = "(";
d333 262
a594 338
  protected final String TEXT_314 = "));";
  protected final String TEXT_315 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_316 = "(parent, ";
  protected final String TEXT_317 = "(";
  protected final String TEXT_318 = ") ";
  protected final String TEXT_319 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_320 = "constraint";
  protected final String TEXT_321 = "null";
  protected final String TEXT_322 = ", ";
  protected final String TEXT_323 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_324 = NL;
  protected final String TEXT_325 = NL;
  protected final String TEXT_326 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_327 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_328 = " feature, ";
  protected final String TEXT_329 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_330 = NL;
  protected final String TEXT_331 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_332 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_333 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_334 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_335 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_336 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_337 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_338 = NL;
  protected final String TEXT_339 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_340 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_341 = " domainModelEditDomain = ";
  protected final String TEXT_342 = ".getEditingDomain(";
  protected final String TEXT_343 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_344 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_345 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_346 = " {";
  protected final String TEXT_347 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_348 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_349 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_350 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_351 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_352 = " createFilter() {";
  protected final String TEXT_353 = NL + "\t\t\t";
  protected final String TEXT_354 = " filter = ";
  protected final String TEXT_355 = ".createFeatureFilter(";
  protected final String TEXT_356 = ".eINSTANCE.get";
  protected final String TEXT_357 = "());";
  protected final String TEXT_358 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_359 = ".createFeatureFilter(";
  protected final String TEXT_360 = ".eINSTANCE.get";
  protected final String TEXT_361 = "()));";
  protected final String TEXT_362 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_363 = ".createNotifierFilter(";
  protected final String TEXT_364 = ".getElement()));";
  protected final String TEXT_365 = NL + "\t\t\t";
  protected final String TEXT_366 = " filter = ";
  protected final String TEXT_367 = ".createNotifierFilter(";
  protected final String TEXT_368 = ".getElement());";
  protected final String TEXT_369 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_370 = NL + "\t\t\t";
  protected final String TEXT_371 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_372 = NL + "\t\t\t";
  protected final String TEXT_373 = " filter = ";
  protected final String TEXT_374 = ".NOT_TOUCH;";
  protected final String TEXT_375 = NL + "\t\t\treturn filter;";
  protected final String TEXT_376 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_377 = " getCreateNotationalElementCommand(";
  protected final String TEXT_378 = " descriptor) {";
  protected final String TEXT_379 = NL;
  protected final String TEXT_380 = "\t\t\t";
  protected final String TEXT_381 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_382 = NL + "\t\t\tcase ";
  protected final String TEXT_383 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_384 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_385 = "(";
  protected final String TEXT_386 = ", domainElement, ";
  protected final String TEXT_387 = "new ";
  protected final String TEXT_388 = "(0, 0, ";
  protected final String TEXT_389 = ", ";
  protected final String TEXT_390 = ")";
  protected final String TEXT_391 = NL + "null";
  protected final String TEXT_392 = ", ";
  protected final String TEXT_393 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_394 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_395 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_396 = " getSemanticChildNodes() {";
  protected final String TEXT_397 = NL;
  protected final String TEXT_398 = NL + "\treturn ";
  protected final String TEXT_399 = ".EMPTY_LIST;";
  protected final String TEXT_400 = NL + "\t";
  protected final String TEXT_401 = " result = new ";
  protected final String TEXT_402 = "();";
  protected final String TEXT_403 = NL + "\t";
  protected final String TEXT_404 = " viewObject = ";
  protected final String TEXT_405 = ";" + NL + "\t";
  protected final String TEXT_406 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_407 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_408 = NL + "\tfor(";
  protected final String TEXT_409 = " it = ";
  protected final String TEXT_410 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_411 = ") it.next();";
  protected final String TEXT_412 = NL + "\tnextValue = (";
  protected final String TEXT_413 = ")";
  protected final String TEXT_414 = ";";
  protected final String TEXT_415 = NL + "\tnodeVID = ";
  protected final String TEXT_416 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_417 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_418 = NL + "\tcase ";
  protected final String TEXT_419 = ".VISUAL_ID: {";
  protected final String TEXT_420 = NL + "\tif (";
  protected final String TEXT_421 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_422 = NL + "\t\tresult.add(new ";
  protected final String TEXT_423 = "(nextValue, nodeVID));";
  protected final String TEXT_424 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_425 = NL + "\t\t}";
  protected final String TEXT_426 = NL + "\t}";
  protected final String TEXT_427 = NL + "\t}";
  protected final String TEXT_428 = NL + "\treturn result;";
  protected final String TEXT_429 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_430 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_431 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_432 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_433 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_434 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_435 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_436 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_437 = " domainModelEditDomain = ";
  protected final String TEXT_438 = ".getEditingDomain(";
  protected final String TEXT_439 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_440 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_441 = NL;
  protected final String TEXT_442 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_443 = " domainModelEditDomain = ";
  protected final String TEXT_444 = ".getEditingDomain(";
  protected final String TEXT_445 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_446 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_447 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_448 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_449 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_450 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_451 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_452 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_453 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_454 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_455 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_456 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_457 = ".createEventTypeFilter(";
  protected final String TEXT_458 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_459 = ".createEventTypeFilter(";
  protected final String TEXT_460 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_461 = ".createEventTypeFilter(";
  protected final String TEXT_462 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_463 = ".createEventTypeFilter(";
  protected final String TEXT_464 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_465 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_466 = " createFilter() {";
  protected final String TEXT_467 = NL;
  protected final String TEXT_468 = NL + "\t\t\t";
  protected final String TEXT_469 = " filter = ";
  protected final String TEXT_470 = ".createFeatureFilter(";
  protected final String TEXT_471 = ".eINSTANCE.get";
  protected final String TEXT_472 = "());";
  protected final String TEXT_473 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_474 = ".createFeatureFilter(";
  protected final String TEXT_475 = ".eINSTANCE.get";
  protected final String TEXT_476 = "()));";
  protected final String TEXT_477 = NL;
  protected final String TEXT_478 = NL + "\t\t\t";
  protected final String TEXT_479 = " filter = ";
  protected final String TEXT_480 = ".createFeatureFilter(";
  protected final String TEXT_481 = ".eINSTANCE.get";
  protected final String TEXT_482 = "());";
  protected final String TEXT_483 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_484 = ".createFeatureFilter(";
  protected final String TEXT_485 = ".eINSTANCE.get";
  protected final String TEXT_486 = "()));";
  protected final String TEXT_487 = NL;
  protected final String TEXT_488 = NL + "\t\t\t";
  protected final String TEXT_489 = " filter = ";
  protected final String TEXT_490 = ".createFeatureFilter(";
  protected final String TEXT_491 = ".eINSTANCE.get";
  protected final String TEXT_492 = "());";
  protected final String TEXT_493 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_494 = ".createFeatureFilter(";
  protected final String TEXT_495 = ".eINSTANCE.get";
  protected final String TEXT_496 = "()));";
  protected final String TEXT_497 = NL;
  protected final String TEXT_498 = NL + "\t\t\t";
  protected final String TEXT_499 = " filter = ";
  protected final String TEXT_500 = ".createFeatureFilter(";
  protected final String TEXT_501 = ".eINSTANCE.get";
  protected final String TEXT_502 = "());";
  protected final String TEXT_503 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_504 = ".createFeatureFilter(";
  protected final String TEXT_505 = ".eINSTANCE.get";
  protected final String TEXT_506 = "()));";
  protected final String TEXT_507 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_508 = NL + "\t\t\t";
  protected final String TEXT_509 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_510 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_511 = NL + "\t\t\t";
  protected final String TEXT_512 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_513 = NL + "\t\t\t";
  protected final String TEXT_514 = " filter = ";
  protected final String TEXT_515 = ".NOT_TOUCH;";
  protected final String TEXT_516 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_517 = " getCreateNotationalElementCommand(";
  protected final String TEXT_518 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_519 = " linkDescriptor = (";
  protected final String TEXT_520 = ") descriptor;";
  protected final String TEXT_521 = NL;
  protected final String TEXT_522 = "\t\t\t";
  protected final String TEXT_523 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_524 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_525 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_526 = NL + "\t\t\tcase ";
  protected final String TEXT_527 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_528 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_529 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_530 = NL + "\t\t\tcase ";
  protected final String TEXT_531 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_532 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_533 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_534 = "(";
  protected final String TEXT_535 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_536 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_537 = " getSemanticChildLinks() {";
  protected final String TEXT_538 = NL;
  protected final String TEXT_539 = "\t";
  protected final String TEXT_540 = " result = new ";
  protected final String TEXT_541 = "();";
  protected final String TEXT_542 = NL + "\t";
  protected final String TEXT_543 = " modelObject = ";
  protected final String TEXT_544 = ".getElement();" + NL + "\t";
  protected final String TEXT_545 = " nextValue;";
  protected final String TEXT_546 = NL + "\tint linkVID;";
  protected final String TEXT_547 = NL + "\tfor(";
  protected final String TEXT_548 = " it = ";
  protected final String TEXT_549 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_550 = ") it.next();";
  protected final String TEXT_551 = NL + "\tnextValue = (";
  protected final String TEXT_552 = ")";
  protected final String TEXT_553 = ";";
  protected final String TEXT_554 = NL + "\tlinkVID = ";
  protected final String TEXT_555 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_556 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_557 = NL + "\tcase ";
  protected final String TEXT_558 = ".VISUAL_ID: {";
  protected final String TEXT_559 = NL + "\tif (";
  protected final String TEXT_560 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_561 = NL + "\t\t";
  protected final String TEXT_562 = " source = (";
  protected final String TEXT_563 = ")";
  protected final String TEXT_564 = ";";
  protected final String TEXT_565 = NL + "\t\t";
  protected final String TEXT_566 = " source = ";
  protected final String TEXT_567 = ".getElement();";
  protected final String TEXT_568 = NL + "\t\t";
  protected final String TEXT_569 = " target = (";
  protected final String TEXT_570 = ")";
  protected final String TEXT_571 = ";";
  protected final String TEXT_572 = NL + "\t\t";
  protected final String TEXT_573 = " target = ";
  protected final String TEXT_574 = ".getElement();";
  protected final String TEXT_575 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_576 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_577 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_578 = NL + "\t}";
  protected final String TEXT_579 = NL + "\t}";
  protected final String TEXT_580 = NL + "\t}";
  protected final String TEXT_581 = NL + "\tfor(";
  protected final String TEXT_582 = " it = ";
  protected final String TEXT_583 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_584 = ") it.next();";
  protected final String TEXT_585 = NL + "\tnextValue = (";
  protected final String TEXT_586 = ")";
  protected final String TEXT_587 = ";";
  protected final String TEXT_588 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_589 = NL + "\t\tresult.add(new ";
  protected final String TEXT_590 = "(modelObject, nextValue, null, ";
  protected final String TEXT_591 = ".VISUAL_ID));";
  protected final String TEXT_592 = NL + "\t}";
  protected final String TEXT_593 = NL + "\t}";
  protected final String TEXT_594 = NL + "\treturn result;";
  protected final String TEXT_595 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_596 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_597 = " result = new ";
  protected final String TEXT_598 = "();" + NL + "\t\t\t";
  protected final String TEXT_599 = " allLinks = ";
  protected final String TEXT_600 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_601 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_602 = " next = (";
  protected final String TEXT_603 = ") it.next();";
  protected final String TEXT_604 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_605 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_606 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_607 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_608 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_609 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_610 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_611 = ".VISUAL_ID:";
  protected final String TEXT_612 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_613 = NL + "\t\t\t\t} else {";
  protected final String TEXT_614 = NL + "\t\t\t\t}";
  protected final String TEXT_615 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_616 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_617 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_618 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_619 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_620 = ".VISUAL_ID:";
  protected final String TEXT_621 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_622 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_623 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_624 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_625 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_626 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_627 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_628 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_629 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_630 = " domainModelEditDomain = ";
  protected final String TEXT_631 = ".getEditingDomain(";
  protected final String TEXT_632 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_633 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_634 = NL;
  protected final String TEXT_635 = NL;
  protected final String TEXT_636 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_637 = " domainModelRefresher = new ";
  protected final String TEXT_638 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_639 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_640 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_641 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_642 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_643 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_644 = NL;
  protected final String TEXT_645 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_646 = " domainModelRefresher = new ";
  protected final String TEXT_647 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_648 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_649 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_650 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_651 = NL;
d848 1
a848 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d1000 1
a1000 2
if (upperBound > 0) {
	if (upperBound == 1) {
d1008 2
a1009 1
	} else {
d1044 1
a1044 2
if (upperBound > 0) {
	if (upperBound == 1) {
d1052 2
a1053 1
	} else {
d1226 1
a1226 2
if (upperBound > 0) {
	if (upperBound == 1) {
d1234 2
a1235 1
	} else {
d1261 1
a1261 2
if (upperBound > 0) {
	if (upperBound == 1) {
d1269 2
a1270 1
	} else {
a1424 6
    
for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenTopLevelNode next = (GenTopLevelNode)it.next();
	boolean isStatic = true;
	boolean isListLayout = false;

a1425 3
    
if (genDiagram.getPalette() != null) {

d1427 1
a1427 1
    if (isStatic) {
d1429 1
a1429 1
    }
d1431 1
a1431 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
a1432 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
a1433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
d1435 1
a1435 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d1437 1
a1437 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1439 4
a1442 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d1444 3
a1446 1
    if (!isListLayout) {
d1448 4
a1451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1453 3
a1455 1
    }
d1457 7
a1463 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
a1464 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1466 1
a1466 4
    
	if (next.getDomainMetaClass().isMapEntry()) {
	/*Workaround for Ecore example: map entries cannot be created using factory, only using reflective EFactory.create() method*/

d1468 1
a1468 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1470 1
a1470 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
d1472 1
a1472 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()));
d1474 1
a1474 1
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
d1476 1
a1476 3
    
	} else {

d1478 1
a1478 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getQualifiedInterfaceName()));
a1479 4
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_271);
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_272);
d1481 7
d1489 1
d1491 7
d1499 1
a1499 1
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
d1501 3
a1503 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
d1505 1
a1505 1
    stringBuffer.append(next.getUniqueIdentifier());
d1507 18
a1524 1
    if (next.getDomainMetaClass().isExternalInterface()) {
d1526 1
a1526 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1528 1
a1528 1
    }
d1530 1
a1530 10
    
	TypeModelFacet facet = next.getModelFacet();
	GenFeature childFeature = facet.getChildMetaFeature();
	GenFeature containmentFeature = facet.getContainmentMetaFeature();
	{
		GenFeature _feature = containmentFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;

d1532 2
d1535 1
a1535 3
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {
a1536 2
    stringBuffer.append(TEXT_281);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
d1538 1
a1538 1
    stringBuffer.append(_exceedsUpperBound);
d1540 8
d1549 1
a1549 1
	} else {
a1550 4
    stringBuffer.append(TEXT_284);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_285);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d1552 1
a1552 1
    stringBuffer.append(_feature.getFeatureAccessorName());
d1554 1
a1554 1
    stringBuffer.append(_exceedsUpperBound);
d1557 2
a1558 2
	}
}
d1560 7
a1568 5
	if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
		GenFeature _feature = childFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;
a1569 1
    stringBuffer.append(TEXT_289);
d1571 3
a1573 3
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {
d1575 1
a1575 5
    stringBuffer.append(TEXT_290);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_291);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_292);
d1577 1
a1577 1
	} else {
a1578 2
    stringBuffer.append(TEXT_293);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d1580 1
a1580 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d1582 5
a1586 1
    stringBuffer.append(_feature.getFeatureAccessorName());
d1588 1
a1588 1
    stringBuffer.append(_exceedsUpperBound);
d1590 2
a1593 1
}
a1594 2
    stringBuffer.append(TEXT_298);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1596 3
a1598 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1600 1
a1600 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1602 1
a1602 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1604 4
a1607 1
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
a1608 1
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1610 1
a1610 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a1611 2
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_306);
d1613 7
a1619 1
	} else {
d1621 2
d1624 1
a1624 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1626 1
a1626 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1628 1
a1628 1
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
a1630 3
	}

    
d1634 1
a1634 1
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
d1641 1
a1641 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d1648 4
a1653 2
    stringBuffer.append(TEXT_315);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
d1655 1
a1655 1
    if (next.getDomainMetaClass().isExternalInterface()) {
d1657 3
a1659 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1661 3
a1663 1
    }
d1665 1
a1665 1
    if(!isListLayout) {
a1666 1
    } else {
d1668 3
a1670 1
    }
d1672 1
a1672 1
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
d1675 1
a1675 4
}

    
}
d1678 1
d1680 1
d1682 9
a1690 264
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_327);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_328);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_329);
    stringBuffer.append(TEXT_330);
    stringBuffer.append(TEXT_331);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_332);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_333);
    
//link notation model refresher should always be installed for the diagram edit part, because it tracks the uncontained links
//if (myHelper.containsLinks()) {

    stringBuffer.append(TEXT_334);
    
//}

    stringBuffer.append(TEXT_335);
    
//link notation model refresher should always be installed/uninstalled for the diagram edit part, because it tracks the uncontained links
//if (myHelper.containsLinks()) {

    stringBuffer.append(TEXT_336);
    
//}

    stringBuffer.append(TEXT_337);
    
{
String _getDiagramCode = "getDiagram()";
String _getViewCode = "getDiagram()";
boolean isListLayout = false;
final boolean _includeUncontainedLinks = true;

    stringBuffer.append(TEXT_338);
    stringBuffer.append(TEXT_339);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_340);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_341);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_342);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_343);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_344);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_345);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_346);
    
boolean hasConstraintsInChildren = false;
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet != null && typeModelFacet.getMetaClass() != null && typeModelFacet.getModelElementSelector() != null) {
		hasConstraintsInChildren = true;
		break;
	}
}

    
if (hasConstraintsInChildren) {

    stringBuffer.append(TEXT_347);
    stringBuffer.append(genDiagram.getVisualIDRegistryQualifiedClassName());
    stringBuffer.append(TEXT_348);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_349);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_350);
    
}

    stringBuffer.append(TEXT_351);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_352);
    
{
	boolean hasDeclaredFilter = false;
	Set genChildFeatures = new LinkedHashSet();
	for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode nextNode = (GenNode) it.next();
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (genChildFeatures.contains(childMetaFeature)) {
			continue;
		}
		genChildFeatures.add(childMetaFeature);
		if (!hasDeclaredFilter) {
			hasDeclaredFilter = true;

    stringBuffer.append(TEXT_353);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_354);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_355);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_356);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_357);
    
		} else {

    stringBuffer.append(TEXT_358);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_359);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_360);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_361);
    
		}
	}	//for

    
	if (hasDeclaredFilter) {

    stringBuffer.append(TEXT_362);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_363);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_364);
    
	} else {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_365);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_366);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_367);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_368);
    
	}

    
	if (hasConstraintsInChildren) {
		if (hasDeclaredFilter) {
			hasDeclaredFilter = true;

    stringBuffer.append(TEXT_369);
    
		} else {

    stringBuffer.append(TEXT_370);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_371);
    
		}
	}
	if (!hasDeclaredFilter) {

    stringBuffer.append(TEXT_372);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_373);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_374);
    
	}

    stringBuffer.append(TEXT_375);
    
}	//local declaration of hasDeclaredFilter

    stringBuffer.append(TEXT_376);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_377);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_378);
    
{
	String _parentNode = "getHost()";

    stringBuffer.append(TEXT_379);
    stringBuffer.append(TEXT_380);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_381);
    
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet == null) {
		continue;
	}
	String childNodeInterfaceName = importManager.getImportedName(nextNode.getDomainMetaClass().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_382);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_383);
    stringBuffer.append(childNodeInterfaceName);
    stringBuffer.append(TEXT_384);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_385);
    stringBuffer.append(_parentNode);
    stringBuffer.append(TEXT_386);
    
	if (!isListLayout) {
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) nextNode.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_387);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_388);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_389);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_390);
    
	} else {

    stringBuffer.append(TEXT_391);
    
	}

    stringBuffer.append(TEXT_392);
    stringBuffer.append(importManager.getImportedName(nextNode.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_393);
    
}

    stringBuffer.append(TEXT_394);
    
}

    stringBuffer.append(TEXT_395);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_396);
    stringBuffer.append(TEXT_397);
    
if (childNodes.size() == 0) {

    stringBuffer.append(TEXT_398);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_399);
    
} else {

    stringBuffer.append(TEXT_400);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_401);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_402);
    
	Map genFeature2genNodeMap = new LinkedHashMap();
	for (int nodeIndex = 0; nodeIndex < childNodes.size(); nodeIndex++) {
		GenNode nextNode = (GenNode) childNodes.get(nodeIndex);
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
d1699 1
a1699 1
    stringBuffer.append(TEXT_403);
d1701 1
a1701 1
    stringBuffer.append(TEXT_404);
d1703 1
a1703 1
    stringBuffer.append(TEXT_405);
d1705 1
a1705 1
    stringBuffer.append(TEXT_406);
d1707 1
a1707 1
    stringBuffer.append(TEXT_407);
d1716 1
a1716 1
    stringBuffer.append(TEXT_408);
d1718 1
a1718 1
    stringBuffer.append(TEXT_409);
d1720 1
a1720 1
    stringBuffer.append(TEXT_410);
d1722 1
a1722 1
    stringBuffer.append(TEXT_411);
d1726 1
a1726 1
    stringBuffer.append(TEXT_412);
d1728 1
a1728 1
    stringBuffer.append(TEXT_413);
d1730 1
a1730 1
    stringBuffer.append(TEXT_414);
d1734 1
a1734 1
    stringBuffer.append(TEXT_415);
d1736 1
a1736 1
    stringBuffer.append(TEXT_416);
d1741 1
a1741 1
    stringBuffer.append(TEXT_417);
d1748 1
a1748 1
    stringBuffer.append(TEXT_418);
d1750 1
a1750 1
    stringBuffer.append(TEXT_419);
d1754 1
a1754 1
    stringBuffer.append(TEXT_420);
d1756 1
a1756 1
    stringBuffer.append(TEXT_421);
d1760 1
a1760 1
    stringBuffer.append(TEXT_422);
d1762 1
a1762 1
    stringBuffer.append(TEXT_423);
d1766 1
a1766 1
    stringBuffer.append(TEXT_424);
d1770 1
a1770 1
    stringBuffer.append(TEXT_425);
d1776 1
a1776 1
    stringBuffer.append(TEXT_426);
d1781 1
a1781 1
    stringBuffer.append(TEXT_427);
d1786 1
a1786 1
    stringBuffer.append(TEXT_428);
d1790 1
a1790 1
    stringBuffer.append(TEXT_429);
d1792 1
a1792 1
    stringBuffer.append(TEXT_430);
d1794 1
a1794 1
    stringBuffer.append(TEXT_431);
d1796 1
a1796 1
    stringBuffer.append(TEXT_432);
d1798 1
a1798 1
    stringBuffer.append(TEXT_433);
d1800 1
a1800 1
    stringBuffer.append(TEXT_434);
d1802 1
a1802 1
    stringBuffer.append(TEXT_435);
d1804 1
a1804 1
    stringBuffer.append(TEXT_436);
d1806 1
a1806 1
    stringBuffer.append(TEXT_437);
d1808 1
a1808 1
    stringBuffer.append(TEXT_438);
d1810 1
a1810 1
    stringBuffer.append(TEXT_439);
d1812 2
a1813 2
    stringBuffer.append(TEXT_440);
    stringBuffer.append(TEXT_441);
d1817 1
a1817 1
    stringBuffer.append(TEXT_442);
d1819 1
a1819 1
    stringBuffer.append(TEXT_443);
d1821 1
a1821 1
    stringBuffer.append(TEXT_444);
d1823 1
a1823 1
    stringBuffer.append(TEXT_445);
d1825 1
a1825 1
    stringBuffer.append(TEXT_446);
d1827 1
a1827 1
    stringBuffer.append(TEXT_447);
d1829 1
a1829 1
    stringBuffer.append(TEXT_448);
d1831 1
a1831 1
    stringBuffer.append(TEXT_449);
d1833 1
a1833 1
    stringBuffer.append(TEXT_450);
d1846 1
a1846 1
    stringBuffer.append(TEXT_451);
d1848 1
a1848 1
    stringBuffer.append(TEXT_452);
d1850 1
a1850 1
    stringBuffer.append(TEXT_453);
d1852 1
a1852 1
    stringBuffer.append(TEXT_454);
d1857 1
a1857 1
    stringBuffer.append(TEXT_455);
d1859 1
a1859 1
    stringBuffer.append(TEXT_456);
d1861 1
a1861 1
    stringBuffer.append(TEXT_457);
d1863 1
a1863 1
    stringBuffer.append(TEXT_458);
d1865 1
a1865 1
    stringBuffer.append(TEXT_459);
d1867 1
a1867 1
    stringBuffer.append(TEXT_460);
d1869 1
a1869 1
    stringBuffer.append(TEXT_461);
d1871 1
a1871 1
    stringBuffer.append(TEXT_462);
d1873 1
a1873 1
    stringBuffer.append(TEXT_463);
d1875 1
a1875 1
    stringBuffer.append(TEXT_464);
d1879 1
a1879 1
    stringBuffer.append(TEXT_465);
d1881 1
a1881 1
    stringBuffer.append(TEXT_466);
d1894 1
a1894 1
    stringBuffer.append(TEXT_467);
d1908 1
a1908 1
    stringBuffer.append(TEXT_468);
d1910 1
a1910 1
    stringBuffer.append(TEXT_469);
d1912 1
a1912 1
    stringBuffer.append(TEXT_470);
d1914 1
a1914 1
    stringBuffer.append(TEXT_471);
d1916 1
a1916 1
    stringBuffer.append(TEXT_472);
d1920 1
a1920 1
    stringBuffer.append(TEXT_473);
d1922 1
a1922 1
    stringBuffer.append(TEXT_474);
d1924 1
a1924 1
    stringBuffer.append(TEXT_475);
d1926 1
a1926 1
    stringBuffer.append(TEXT_476);
d1933 1
a1933 1
    stringBuffer.append(TEXT_477);
d1947 1
a1947 1
    stringBuffer.append(TEXT_478);
d1949 1
a1949 1
    stringBuffer.append(TEXT_479);
d1951 1
a1951 1
    stringBuffer.append(TEXT_480);
d1953 1
a1953 1
    stringBuffer.append(TEXT_481);
d1955 1
a1955 1
    stringBuffer.append(TEXT_482);
d1959 1
a1959 1
    stringBuffer.append(TEXT_483);
d1961 1
a1961 1
    stringBuffer.append(TEXT_484);
d1963 1
a1963 1
    stringBuffer.append(TEXT_485);
d1965 1
a1965 1
    stringBuffer.append(TEXT_486);
d1972 1
a1972 1
    stringBuffer.append(TEXT_487);
d1986 1
a1986 1
    stringBuffer.append(TEXT_488);
d1988 1
a1988 1
    stringBuffer.append(TEXT_489);
d1990 1
a1990 1
    stringBuffer.append(TEXT_490);
d1992 1
a1992 1
    stringBuffer.append(TEXT_491);
d1994 1
a1994 1
    stringBuffer.append(TEXT_492);
d1998 1
a1998 1
    stringBuffer.append(TEXT_493);
d2000 1
a2000 1
    stringBuffer.append(TEXT_494);
d2002 1
a2002 1
    stringBuffer.append(TEXT_495);
d2004 1
a2004 1
    stringBuffer.append(TEXT_496);
d2014 1
a2014 1
    stringBuffer.append(TEXT_497);
d2028 1
a2028 1
    stringBuffer.append(TEXT_498);
d2030 1
a2030 1
    stringBuffer.append(TEXT_499);
d2032 1
a2032 1
    stringBuffer.append(TEXT_500);
d2034 1
a2034 1
    stringBuffer.append(TEXT_501);
d2036 1
a2036 1
    stringBuffer.append(TEXT_502);
d2040 1
a2040 1
    stringBuffer.append(TEXT_503);
d2042 1
a2042 1
    stringBuffer.append(TEXT_504);
d2044 1
a2044 1
    stringBuffer.append(TEXT_505);
d2046 1
a2046 1
    stringBuffer.append(TEXT_506);
d2055 1
a2055 1
    stringBuffer.append(TEXT_507);
d2060 1
a2060 1
    stringBuffer.append(TEXT_508);
d2062 1
a2062 1
    stringBuffer.append(TEXT_509);
d2069 1
a2069 1
    stringBuffer.append(TEXT_510);
d2074 1
a2074 1
    stringBuffer.append(TEXT_511);
d2076 1
a2076 1
    stringBuffer.append(TEXT_512);
d2082 1
a2082 1
    stringBuffer.append(TEXT_513);
d2084 1
a2084 1
    stringBuffer.append(TEXT_514);
d2086 1
a2086 1
    stringBuffer.append(TEXT_515);
d2091 1
a2091 1
    stringBuffer.append(TEXT_516);
d2093 1
a2093 1
    stringBuffer.append(TEXT_517);
d2095 1
a2095 1
    stringBuffer.append(TEXT_518);
d2097 1
a2097 1
    stringBuffer.append(TEXT_519);
d2099 1
a2099 1
    stringBuffer.append(TEXT_520);
d2106 2
a2107 2
    stringBuffer.append(TEXT_521);
    stringBuffer.append(TEXT_522);
d2109 1
a2109 1
    stringBuffer.append(TEXT_523);
d2111 1
a2111 1
    stringBuffer.append(TEXT_524);
d2113 1
a2113 1
    stringBuffer.append(TEXT_525);
d2122 1
a2122 1
    stringBuffer.append(TEXT_526);
d2124 1
a2124 1
    stringBuffer.append(TEXT_527);
d2126 1
a2126 1
    stringBuffer.append(TEXT_528);
d2128 1
a2128 1
    stringBuffer.append(TEXT_529);
d2134 1
a2134 1
    stringBuffer.append(TEXT_530);
d2136 1
a2136 1
    stringBuffer.append(TEXT_531);
d2138 1
a2138 1
    stringBuffer.append(TEXT_532);
d2142 1
a2142 1
    stringBuffer.append(TEXT_533);
d2144 1
a2144 1
    stringBuffer.append(TEXT_534);
d2146 1
a2146 1
    stringBuffer.append(TEXT_535);
d2150 1
a2150 1
    stringBuffer.append(TEXT_536);
d2152 1
a2152 1
    stringBuffer.append(TEXT_537);
d2158 2
a2159 2
    stringBuffer.append(TEXT_538);
    stringBuffer.append(TEXT_539);
d2161 1
a2161 1
    stringBuffer.append(TEXT_540);
d2163 1
a2163 1
    stringBuffer.append(TEXT_541);
d2186 1
a2186 1
    stringBuffer.append(TEXT_542);
d2188 1
a2188 1
    stringBuffer.append(TEXT_543);
d2190 1
a2190 1
    stringBuffer.append(TEXT_544);
d2192 1
a2192 1
    stringBuffer.append(TEXT_545);
d2197 1
a2197 1
    stringBuffer.append(TEXT_546);
d2206 1
a2206 1
    stringBuffer.append(TEXT_547);
d2208 1
a2208 1
    stringBuffer.append(TEXT_548);
d2210 1
a2210 1
    stringBuffer.append(TEXT_549);
d2212 1
a2212 1
    stringBuffer.append(TEXT_550);
d2216 1
a2216 1
    stringBuffer.append(TEXT_551);
d2218 1
a2218 1
    stringBuffer.append(TEXT_552);
d2220 1
a2220 1
    stringBuffer.append(TEXT_553);
d2224 1
a2224 1
    stringBuffer.append(TEXT_554);
d2226 1
a2226 1
    stringBuffer.append(TEXT_555);
d2231 1
a2231 1
    stringBuffer.append(TEXT_556);
d2239 1
a2239 1
    stringBuffer.append(TEXT_557);
d2241 1
a2241 1
    stringBuffer.append(TEXT_558);
d2245 1
a2245 1
    stringBuffer.append(TEXT_559);
d2247 1
a2247 1
    stringBuffer.append(TEXT_560);
d2252 1
a2252 1
    stringBuffer.append(TEXT_561);
d2254 1
a2254 1
    stringBuffer.append(TEXT_562);
d2256 1
a2256 1
    stringBuffer.append(TEXT_563);
d2258 1
a2258 1
    stringBuffer.append(TEXT_564);
d2262 1
a2262 1
    stringBuffer.append(TEXT_565);
d2264 1
a2264 1
    stringBuffer.append(TEXT_566);
d2266 1
a2266 1
    stringBuffer.append(TEXT_567);
d2271 1
a2271 1
    stringBuffer.append(TEXT_568);
d2273 1
a2273 1
    stringBuffer.append(TEXT_569);
d2275 1
a2275 1
    stringBuffer.append(TEXT_570);
d2277 1
a2277 1
    stringBuffer.append(TEXT_571);
d2281 1
a2281 1
    stringBuffer.append(TEXT_572);
d2283 1
a2283 1
    stringBuffer.append(TEXT_573);
d2285 1
a2285 1
    stringBuffer.append(TEXT_574);
d2289 1
a2289 1
    stringBuffer.append(TEXT_575);
d2291 1
a2291 1
    stringBuffer.append(TEXT_576);
d2295 1
a2295 1
    stringBuffer.append(TEXT_577);
d2299 1
a2299 1
    stringBuffer.append(TEXT_578);
d2307 1
a2307 1
    stringBuffer.append(TEXT_579);
d2312 1
a2312 1
    stringBuffer.append(TEXT_580);
d2322 1
a2322 1
    stringBuffer.append(TEXT_581);
d2324 1
a2324 1
    stringBuffer.append(TEXT_582);
d2326 1
a2326 1
    stringBuffer.append(TEXT_583);
d2328 1
a2328 1
    stringBuffer.append(TEXT_584);
d2332 1
a2332 1
    stringBuffer.append(TEXT_585);
d2334 1
a2334 1
    stringBuffer.append(TEXT_586);
d2336 1
a2336 1
    stringBuffer.append(TEXT_587);
d2340 1
a2340 1
    stringBuffer.append(TEXT_588);
d2345 1
a2345 1
    stringBuffer.append(TEXT_589);
d2347 1
a2347 1
    stringBuffer.append(TEXT_590);
d2349 1
a2349 1
    stringBuffer.append(TEXT_591);
d2353 1
a2353 1
    stringBuffer.append(TEXT_592);
d2357 1
a2357 1
    stringBuffer.append(TEXT_593);
d2362 1
a2362 1
    stringBuffer.append(TEXT_594);
d2366 1
a2366 1
    stringBuffer.append(TEXT_595);
d2368 1
a2368 1
    stringBuffer.append(TEXT_596);
d2370 1
a2370 1
    stringBuffer.append(TEXT_597);
d2372 1
a2372 1
    stringBuffer.append(TEXT_598);
d2374 1
a2374 1
    stringBuffer.append(TEXT_599);
d2376 1
a2376 1
    stringBuffer.append(TEXT_600);
d2378 1
a2378 1
    stringBuffer.append(TEXT_601);
d2380 1
a2380 1
    stringBuffer.append(TEXT_602);
d2382 1
a2382 1
    stringBuffer.append(TEXT_603);
d2386 1
a2386 1
    stringBuffer.append(TEXT_604);
d2388 1
a2388 1
    stringBuffer.append(TEXT_605);
d2390 1
a2390 1
    stringBuffer.append(TEXT_606);
d2395 1
a2395 1
    stringBuffer.append(TEXT_607);
d2397 1
a2397 1
    stringBuffer.append(TEXT_608);
d2399 1
a2399 1
    stringBuffer.append(TEXT_609);
d2404 1
a2404 1
    stringBuffer.append(TEXT_610);
d2406 1
a2406 1
    stringBuffer.append(TEXT_611);
d2410 1
a2410 1
    stringBuffer.append(TEXT_612);
d2414 1
a2414 1
    stringBuffer.append(TEXT_613);
d2418 1
a2418 1
    stringBuffer.append(TEXT_614);
d2425 1
a2425 1
    stringBuffer.append(TEXT_615);
d2429 1
a2429 1
    stringBuffer.append(TEXT_616);
d2431 1
a2431 1
    stringBuffer.append(TEXT_617);
d2433 1
a2433 1
    stringBuffer.append(TEXT_618);
d2438 1
a2438 1
    stringBuffer.append(TEXT_619);
d2440 1
a2440 1
    stringBuffer.append(TEXT_620);
d2444 1
a2444 1
    stringBuffer.append(TEXT_621);
d2448 1
a2448 1
    stringBuffer.append(TEXT_622);
d2450 1
a2450 1
    stringBuffer.append(TEXT_623);
d2452 1
a2452 1
    stringBuffer.append(TEXT_624);
d2454 1
a2454 1
    stringBuffer.append(TEXT_625);
d2456 1
a2456 1
    stringBuffer.append(TEXT_626);
d2458 1
a2458 1
    stringBuffer.append(TEXT_627);
d2460 1
a2460 1
    stringBuffer.append(TEXT_628);
d2462 1
a2462 1
    stringBuffer.append(TEXT_629);
d2464 1
a2464 1
    stringBuffer.append(TEXT_630);
d2466 1
a2466 1
    stringBuffer.append(TEXT_631);
d2468 1
a2468 1
    stringBuffer.append(TEXT_632);
d2470 1
a2470 1
    stringBuffer.append(TEXT_633);
d2477 3
a2479 3
    stringBuffer.append(TEXT_634);
    stringBuffer.append(TEXT_635);
    stringBuffer.append(TEXT_636);
d2481 1
a2481 1
    stringBuffer.append(TEXT_637);
d2483 1
a2483 1
    stringBuffer.append(TEXT_638);
d2485 1
a2485 1
    stringBuffer.append(TEXT_639);
d2487 1
a2487 1
    stringBuffer.append(TEXT_640);
d2489 1
a2489 1
    stringBuffer.append(TEXT_641);
d2491 1
a2491 1
    stringBuffer.append(TEXT_642);
d2493 3
a2495 3
    stringBuffer.append(TEXT_643);
    stringBuffer.append(TEXT_644);
    stringBuffer.append(TEXT_645);
d2497 1
a2497 1
    stringBuffer.append(TEXT_646);
d2499 1
a2499 1
    stringBuffer.append(TEXT_647);
d2501 1
a2501 1
    stringBuffer.append(TEXT_648);
d2503 1
a2503 1
    stringBuffer.append(TEXT_649);
d2505 1
a2505 1
    stringBuffer.append(TEXT_650);
d2507 1
a2507 1
    stringBuffer.append(TEXT_651);
@


1.17
log
@[162778]: DiagramEditor fails trying to add a null child caused by reentrant calls to AbstractEditPart.refreshChildren.
Registering updateManager AFTER notationModelRefreshers have executed their operations fixes reentrance
@
text
@d256 27
a282 27
  protected final String TEXT_237 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_238 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_239 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_240 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_241 = "(this);" + NL + "\t\t}" + NL + "\t\tif (";
  protected final String TEXT_242 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_243 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_244 = NL;
  protected final String TEXT_245 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_246 = "static ";
  protected final String TEXT_247 = "class Create";
  protected final String TEXT_248 = "Command extends ";
  protected final String TEXT_249 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_250 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_251 = "Command(";
  protected final String TEXT_252 = " parent, ";
  protected final String TEXT_253 = " request";
  protected final String TEXT_254 = ", ";
  protected final String TEXT_255 = " constraint";
  protected final String TEXT_256 = ") {" + NL + "\t\t\t";
  protected final String TEXT_257 = " domainModelEditDomain = ";
  protected final String TEXT_258 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_259 = NL + "\t\t\t";
  protected final String TEXT_260 = " createdDomainElement = ";
  protected final String TEXT_261 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_262 = ".eINSTANCE.get";
  protected final String TEXT_263 = "());";
d285 3
a287 3
  protected final String TEXT_266 = ".eINSTANCE.create";
  protected final String TEXT_267 = "();";
  protected final String TEXT_268 = NL + "\t\t\t";
d289 13
a301 13
  protected final String TEXT_270 = ".";
  protected final String TEXT_271 = ".initializeElement(";
  protected final String TEXT_272 = "(";
  protected final String TEXT_273 = ") ";
  protected final String TEXT_274 = "createdDomainElement);";
  protected final String TEXT_275 = NL;
  protected final String TEXT_276 = NL + "\t\tif (";
  protected final String TEXT_277 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_278 = NL + "\t\t}";
  protected final String TEXT_279 = NL + "\t\tif (";
  protected final String TEXT_280 = ".size() >= ";
  protected final String TEXT_281 = ".eINSTANCE.get";
  protected final String TEXT_282 = "().getUpperBound()) {" + NL + "\t\t\t";
d303 8
a310 8
  protected final String TEXT_284 = NL;
  protected final String TEXT_285 = NL + "\t\tif (";
  protected final String TEXT_286 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_287 = NL + "\t\t}";
  protected final String TEXT_288 = NL + "\t\tif (";
  protected final String TEXT_289 = ".size() >= ";
  protected final String TEXT_290 = ".eINSTANCE.get";
  protected final String TEXT_291 = "().getUpperBound()) {" + NL + "\t\t\t";
d312 19
a330 19
  protected final String TEXT_293 = NL + "\t\t\t";
  protected final String TEXT_294 = " compoundCommand = new ";
  protected final String TEXT_295 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_296 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_297 = ".eINSTANCE.get";
  protected final String TEXT_298 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_299 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_300 = ".eINSTANCE.get";
  protected final String TEXT_301 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_302 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_303 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_304 = ".eINSTANCE.get";
  protected final String TEXT_305 = "(), createdDomainElement);";
  protected final String TEXT_306 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_307 = "(";
  protected final String TEXT_308 = ", ";
  protected final String TEXT_309 = "));";
  protected final String TEXT_310 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_311 = "(parent, ";
d332 12
a343 12
  protected final String TEXT_313 = ") ";
  protected final String TEXT_314 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_315 = "constraint";
  protected final String TEXT_316 = "null";
  protected final String TEXT_317 = ", ";
  protected final String TEXT_318 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_319 = NL;
  protected final String TEXT_320 = NL;
  protected final String TEXT_321 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_322 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_323 = " feature, ";
  protected final String TEXT_324 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
d345 39
a383 39
  protected final String TEXT_326 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_327 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_328 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_329 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_330 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_331 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_332 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_333 = NL;
  protected final String TEXT_334 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_335 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_336 = " domainModelEditDomain = ";
  protected final String TEXT_337 = ".getEditingDomain(";
  protected final String TEXT_338 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_339 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_340 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_341 = " {";
  protected final String TEXT_342 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_343 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_344 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_345 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_346 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_347 = " createFilter() {";
  protected final String TEXT_348 = NL + "\t\t\t";
  protected final String TEXT_349 = " filter = ";
  protected final String TEXT_350 = ".createFeatureFilter(";
  protected final String TEXT_351 = ".eINSTANCE.get";
  protected final String TEXT_352 = "());";
  protected final String TEXT_353 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_354 = ".createFeatureFilter(";
  protected final String TEXT_355 = ".eINSTANCE.get";
  protected final String TEXT_356 = "()));";
  protected final String TEXT_357 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_358 = ".createNotifierFilter(";
  protected final String TEXT_359 = ".getElement()));";
  protected final String TEXT_360 = NL + "\t\t\t";
  protected final String TEXT_361 = " filter = ";
  protected final String TEXT_362 = ".createNotifierFilter(";
  protected final String TEXT_363 = ".getElement());";
  protected final String TEXT_364 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
d385 142
a526 142
  protected final String TEXT_366 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_367 = NL + "\t\t\t";
  protected final String TEXT_368 = " filter = ";
  protected final String TEXT_369 = ".NOT_TOUCH;";
  protected final String TEXT_370 = NL + "\t\t\treturn filter;";
  protected final String TEXT_371 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_372 = " getCreateNotationalElementCommand(";
  protected final String TEXT_373 = " descriptor) {";
  protected final String TEXT_374 = NL;
  protected final String TEXT_375 = "\t\t\t";
  protected final String TEXT_376 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_377 = NL + "\t\t\tcase ";
  protected final String TEXT_378 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_379 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_380 = "(";
  protected final String TEXT_381 = ", domainElement, ";
  protected final String TEXT_382 = "new ";
  protected final String TEXT_383 = "(0, 0, ";
  protected final String TEXT_384 = ", ";
  protected final String TEXT_385 = ")";
  protected final String TEXT_386 = NL + "null";
  protected final String TEXT_387 = ", ";
  protected final String TEXT_388 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_389 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_390 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_391 = " getSemanticChildNodes() {";
  protected final String TEXT_392 = NL;
  protected final String TEXT_393 = NL + "\treturn ";
  protected final String TEXT_394 = ".EMPTY_LIST;";
  protected final String TEXT_395 = NL + "\t";
  protected final String TEXT_396 = " result = new ";
  protected final String TEXT_397 = "();";
  protected final String TEXT_398 = NL + "\t";
  protected final String TEXT_399 = " viewObject = ";
  protected final String TEXT_400 = ";" + NL + "\t";
  protected final String TEXT_401 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_402 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_403 = NL + "\tfor(";
  protected final String TEXT_404 = " it = ";
  protected final String TEXT_405 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_406 = ") it.next();";
  protected final String TEXT_407 = NL + "\tnextValue = (";
  protected final String TEXT_408 = ")";
  protected final String TEXT_409 = ";";
  protected final String TEXT_410 = NL + "\tnodeVID = ";
  protected final String TEXT_411 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_412 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_413 = NL + "\tcase ";
  protected final String TEXT_414 = ".VISUAL_ID: {";
  protected final String TEXT_415 = NL + "\tif (";
  protected final String TEXT_416 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_417 = NL + "\t\tresult.add(new ";
  protected final String TEXT_418 = "(nextValue, nodeVID));";
  protected final String TEXT_419 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_420 = NL + "\t\t}";
  protected final String TEXT_421 = NL + "\t}";
  protected final String TEXT_422 = NL + "\t}";
  protected final String TEXT_423 = NL + "\treturn result;";
  protected final String TEXT_424 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_425 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_426 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_427 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_428 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_429 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_430 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_431 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_432 = " domainModelEditDomain = ";
  protected final String TEXT_433 = ".getEditingDomain(";
  protected final String TEXT_434 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_435 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_436 = NL;
  protected final String TEXT_437 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_438 = " domainModelEditDomain = ";
  protected final String TEXT_439 = ".getEditingDomain(";
  protected final String TEXT_440 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_441 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_442 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_443 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_444 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_445 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_446 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_447 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_448 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_449 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_450 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_451 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_452 = ".createEventTypeFilter(";
  protected final String TEXT_453 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_454 = ".createEventTypeFilter(";
  protected final String TEXT_455 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_456 = ".createEventTypeFilter(";
  protected final String TEXT_457 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_458 = ".createEventTypeFilter(";
  protected final String TEXT_459 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_460 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_461 = " createFilter() {";
  protected final String TEXT_462 = NL;
  protected final String TEXT_463 = NL + "\t\t\t";
  protected final String TEXT_464 = " filter = ";
  protected final String TEXT_465 = ".createFeatureFilter(";
  protected final String TEXT_466 = ".eINSTANCE.get";
  protected final String TEXT_467 = "());";
  protected final String TEXT_468 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_469 = ".createFeatureFilter(";
  protected final String TEXT_470 = ".eINSTANCE.get";
  protected final String TEXT_471 = "()));";
  protected final String TEXT_472 = NL;
  protected final String TEXT_473 = NL + "\t\t\t";
  protected final String TEXT_474 = " filter = ";
  protected final String TEXT_475 = ".createFeatureFilter(";
  protected final String TEXT_476 = ".eINSTANCE.get";
  protected final String TEXT_477 = "());";
  protected final String TEXT_478 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_479 = ".createFeatureFilter(";
  protected final String TEXT_480 = ".eINSTANCE.get";
  protected final String TEXT_481 = "()));";
  protected final String TEXT_482 = NL;
  protected final String TEXT_483 = NL + "\t\t\t";
  protected final String TEXT_484 = " filter = ";
  protected final String TEXT_485 = ".createFeatureFilter(";
  protected final String TEXT_486 = ".eINSTANCE.get";
  protected final String TEXT_487 = "());";
  protected final String TEXT_488 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_489 = ".createFeatureFilter(";
  protected final String TEXT_490 = ".eINSTANCE.get";
  protected final String TEXT_491 = "()));";
  protected final String TEXT_492 = NL;
  protected final String TEXT_493 = NL + "\t\t\t";
  protected final String TEXT_494 = " filter = ";
  protected final String TEXT_495 = ".createFeatureFilter(";
  protected final String TEXT_496 = ".eINSTANCE.get";
  protected final String TEXT_497 = "());";
  protected final String TEXT_498 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_499 = ".createFeatureFilter(";
  protected final String TEXT_500 = ".eINSTANCE.get";
  protected final String TEXT_501 = "()));";
  protected final String TEXT_502 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_503 = NL + "\t\t\t";
  protected final String TEXT_504 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_505 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_506 = NL + "\t\t\t";
  protected final String TEXT_507 = " filter = createUncontainedLinksFilter();";
d528 143
a670 138
  protected final String TEXT_509 = " filter = ";
  protected final String TEXT_510 = ".NOT_TOUCH;";
  protected final String TEXT_511 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_512 = " getCreateNotationalElementCommand(";
  protected final String TEXT_513 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_514 = " linkDescriptor = (";
  protected final String TEXT_515 = ") descriptor;";
  protected final String TEXT_516 = NL;
  protected final String TEXT_517 = "\t\t\t";
  protected final String TEXT_518 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_519 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_520 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_521 = NL + "\t\t\tcase ";
  protected final String TEXT_522 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_523 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_524 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_525 = NL + "\t\t\tcase ";
  protected final String TEXT_526 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_527 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_528 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_529 = "(";
  protected final String TEXT_530 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_531 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_532 = " getSemanticChildLinks() {";
  protected final String TEXT_533 = NL;
  protected final String TEXT_534 = "\t";
  protected final String TEXT_535 = " result = new ";
  protected final String TEXT_536 = "();";
  protected final String TEXT_537 = NL + "\t";
  protected final String TEXT_538 = " modelObject = ";
  protected final String TEXT_539 = ".getElement();" + NL + "\t";
  protected final String TEXT_540 = " nextValue;";
  protected final String TEXT_541 = NL + "\tint linkVID;";
  protected final String TEXT_542 = NL + "\tfor(";
  protected final String TEXT_543 = " it = ";
  protected final String TEXT_544 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_545 = ") it.next();";
  protected final String TEXT_546 = NL + "\tnextValue = (";
  protected final String TEXT_547 = ")";
  protected final String TEXT_548 = ";";
  protected final String TEXT_549 = NL + "\tlinkVID = ";
  protected final String TEXT_550 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_551 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_552 = NL + "\tcase ";
  protected final String TEXT_553 = ".VISUAL_ID: {";
  protected final String TEXT_554 = NL + "\tif (";
  protected final String TEXT_555 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_556 = NL + "\t\t";
  protected final String TEXT_557 = " source = (";
  protected final String TEXT_558 = ")";
  protected final String TEXT_559 = ";";
  protected final String TEXT_560 = NL + "\t\t";
  protected final String TEXT_561 = " source = ";
  protected final String TEXT_562 = ".getElement();";
  protected final String TEXT_563 = NL + "\t\t";
  protected final String TEXT_564 = " target = (";
  protected final String TEXT_565 = ")";
  protected final String TEXT_566 = ";";
  protected final String TEXT_567 = NL + "\t\t";
  protected final String TEXT_568 = " target = ";
  protected final String TEXT_569 = ".getElement();";
  protected final String TEXT_570 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_571 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_572 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_573 = NL + "\t}";
  protected final String TEXT_574 = NL + "\t}";
  protected final String TEXT_575 = NL + "\t}";
  protected final String TEXT_576 = NL + "\tfor(";
  protected final String TEXT_577 = " it = ";
  protected final String TEXT_578 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_579 = ") it.next();";
  protected final String TEXT_580 = NL + "\tnextValue = (";
  protected final String TEXT_581 = ")";
  protected final String TEXT_582 = ";";
  protected final String TEXT_583 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_584 = NL + "\t\tresult.add(new ";
  protected final String TEXT_585 = "(modelObject, nextValue, null, ";
  protected final String TEXT_586 = ".VISUAL_ID));";
  protected final String TEXT_587 = NL + "\t}";
  protected final String TEXT_588 = NL + "\t}";
  protected final String TEXT_589 = NL + "\treturn result;";
  protected final String TEXT_590 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_591 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_592 = " result = new ";
  protected final String TEXT_593 = "();" + NL + "\t\t\t";
  protected final String TEXT_594 = " allLinks = ";
  protected final String TEXT_595 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_596 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_597 = " next = (";
  protected final String TEXT_598 = ") it.next();";
  protected final String TEXT_599 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_600 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_601 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_602 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_603 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_604 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_605 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_606 = ".VISUAL_ID:";
  protected final String TEXT_607 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_608 = NL + "\t\t\t\t} else {";
  protected final String TEXT_609 = NL + "\t\t\t\t}";
  protected final String TEXT_610 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_611 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_612 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_613 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_614 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_615 = ".VISUAL_ID:";
  protected final String TEXT_616 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_617 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_618 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_619 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_620 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_621 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_622 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_623 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_624 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_625 = " domainModelEditDomain = ";
  protected final String TEXT_626 = ".getEditingDomain(";
  protected final String TEXT_627 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_628 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_629 = NL;
  protected final String TEXT_630 = NL;
  protected final String TEXT_631 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_632 = " domainModelRefresher = new ";
  protected final String TEXT_633 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_634 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_635 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_636 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_637 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_638 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_639 = NL;
  protected final String TEXT_640 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_641 = " domainModelRefresher = new ";
  protected final String TEXT_642 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_643 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_644 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_645 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_646 = NL;
d1471 14
d1489 1
a1489 1
    stringBuffer.append(TEXT_238);
d1493 1
a1493 1
    stringBuffer.append(TEXT_239);
d1495 1
a1495 1
    stringBuffer.append(TEXT_240);
d1497 1
a1497 1
    stringBuffer.append(TEXT_241);
d1499 1
a1499 1
    stringBuffer.append(TEXT_242);
d1501 1
a1501 1
    stringBuffer.append(TEXT_243);
d1508 1
a1508 1
    stringBuffer.append(TEXT_244);
d1512 1
a1512 1
    stringBuffer.append(TEXT_245);
d1514 1
a1514 1
    stringBuffer.append(TEXT_246);
d1516 1
a1516 1
    stringBuffer.append(TEXT_247);
d1519 1
a1519 1
    stringBuffer.append(TEXT_248);
d1521 1
a1521 1
    stringBuffer.append(TEXT_249);
d1523 1
a1523 1
    stringBuffer.append(TEXT_250);
d1526 1
a1526 1
    stringBuffer.append(TEXT_251);
d1528 1
a1528 1
    stringBuffer.append(TEXT_252);
d1530 1
a1530 1
    stringBuffer.append(TEXT_253);
d1532 1
a1532 1
    stringBuffer.append(TEXT_254);
d1534 1
a1534 1
    stringBuffer.append(TEXT_255);
d1536 1
a1536 1
    stringBuffer.append(TEXT_256);
d1538 1
a1538 1
    stringBuffer.append(TEXT_257);
d1540 1
a1540 1
    stringBuffer.append(TEXT_258);
d1545 1
a1545 1
    stringBuffer.append(TEXT_259);
d1547 1
a1547 1
    stringBuffer.append(TEXT_260);
d1549 1
a1549 1
    stringBuffer.append(TEXT_261);
d1551 1
a1551 1
    stringBuffer.append(TEXT_262);
d1553 1
a1553 1
    stringBuffer.append(TEXT_263);
d1557 1
a1557 1
    stringBuffer.append(TEXT_264);
d1559 1
a1559 1
    stringBuffer.append(TEXT_265);
d1561 1
a1561 1
    stringBuffer.append(TEXT_266);
d1563 1
a1563 1
    stringBuffer.append(TEXT_267);
d1567 1
a1567 1
    stringBuffer.append(TEXT_268);
d1569 1
a1569 1
    stringBuffer.append(TEXT_269);
d1571 1
a1571 1
    stringBuffer.append(TEXT_270);
d1573 1
a1573 1
    stringBuffer.append(TEXT_271);
d1575 1
a1575 1
    stringBuffer.append(TEXT_272);
d1577 1
a1577 1
    stringBuffer.append(TEXT_273);
d1579 1
a1579 1
    stringBuffer.append(TEXT_274);
d1590 1
a1590 1
    stringBuffer.append(TEXT_275);
d1596 1
a1596 1
    stringBuffer.append(TEXT_276);
d1598 1
a1598 1
    stringBuffer.append(TEXT_277);
d1600 1
a1600 1
    stringBuffer.append(TEXT_278);
d1604 1
a1604 1
    stringBuffer.append(TEXT_279);
d1606 1
a1606 1
    stringBuffer.append(TEXT_280);
d1608 1
a1608 1
    stringBuffer.append(TEXT_281);
d1610 1
a1610 1
    stringBuffer.append(TEXT_282);
d1612 1
a1612 1
    stringBuffer.append(TEXT_283);
d1625 1
a1625 1
    stringBuffer.append(TEXT_284);
d1631 1
a1631 1
    stringBuffer.append(TEXT_285);
d1633 1
a1633 1
    stringBuffer.append(TEXT_286);
d1635 1
a1635 1
    stringBuffer.append(TEXT_287);
d1639 1
a1639 1
    stringBuffer.append(TEXT_288);
d1641 1
a1641 1
    stringBuffer.append(TEXT_289);
d1643 1
a1643 1
    stringBuffer.append(TEXT_290);
d1645 1
a1645 1
    stringBuffer.append(TEXT_291);
d1647 1
a1647 1
    stringBuffer.append(TEXT_292);
d1652 1
a1652 1
    stringBuffer.append(TEXT_293);
d1654 1
a1654 1
    stringBuffer.append(TEXT_294);
d1656 1
a1656 1
    stringBuffer.append(TEXT_295);
d1658 1
a1658 1
    stringBuffer.append(TEXT_296);
d1660 1
a1660 1
    stringBuffer.append(TEXT_297);
d1662 1
a1662 1
    stringBuffer.append(TEXT_298);
d1664 1
a1664 1
    stringBuffer.append(TEXT_299);
d1666 1
a1666 1
    stringBuffer.append(TEXT_300);
d1668 1
a1668 1
    stringBuffer.append(TEXT_301);
d1672 1
a1672 1
    stringBuffer.append(TEXT_302);
d1674 1
a1674 1
    stringBuffer.append(TEXT_303);
d1676 1
a1676 1
    stringBuffer.append(TEXT_304);
d1678 1
a1678 1
    stringBuffer.append(TEXT_305);
d1692 1
a1692 1
    stringBuffer.append(TEXT_306);
d1694 1
a1694 1
    stringBuffer.append(TEXT_307);
d1696 1
a1696 1
    stringBuffer.append(TEXT_308);
d1698 1
a1698 1
    stringBuffer.append(TEXT_309);
d1702 1
a1702 1
    stringBuffer.append(TEXT_310);
d1704 1
a1704 1
    stringBuffer.append(TEXT_311);
d1706 1
a1706 1
    stringBuffer.append(TEXT_312);
d1708 1
a1708 1
    stringBuffer.append(TEXT_313);
d1710 1
a1710 1
    stringBuffer.append(TEXT_314);
d1712 1
a1712 1
    stringBuffer.append(TEXT_315);
d1714 1
a1714 1
    stringBuffer.append(TEXT_316);
d1716 1
a1716 1
    stringBuffer.append(TEXT_317);
d1718 1
a1718 1
    stringBuffer.append(TEXT_318);
d1725 3
a1727 3
    stringBuffer.append(TEXT_319);
    stringBuffer.append(TEXT_320);
    stringBuffer.append(TEXT_321);
d1729 1
a1729 1
    stringBuffer.append(TEXT_322);
d1731 1
a1731 1
    stringBuffer.append(TEXT_323);
d1733 3
a1735 3
    stringBuffer.append(TEXT_324);
    stringBuffer.append(TEXT_325);
    stringBuffer.append(TEXT_326);
d1737 1
a1737 1
    stringBuffer.append(TEXT_327);
d1739 1
a1739 1
    stringBuffer.append(TEXT_328);
d1744 1
a1744 1
    stringBuffer.append(TEXT_329);
d1748 1
a1748 1
    stringBuffer.append(TEXT_330);
d1753 1
a1753 1
    stringBuffer.append(TEXT_331);
d1757 1
a1757 1
    stringBuffer.append(TEXT_332);
d1765 2
a1766 2
    stringBuffer.append(TEXT_333);
    stringBuffer.append(TEXT_334);
d1768 1
a1768 1
    stringBuffer.append(TEXT_335);
d1770 1
a1770 1
    stringBuffer.append(TEXT_336);
d1772 1
a1772 1
    stringBuffer.append(TEXT_337);
d1774 1
a1774 1
    stringBuffer.append(TEXT_338);
d1776 1
a1776 1
    stringBuffer.append(TEXT_339);
d1778 1
a1778 1
    stringBuffer.append(TEXT_340);
d1780 1
a1780 1
    stringBuffer.append(TEXT_341);
d1795 1
a1795 1
    stringBuffer.append(TEXT_342);
d1797 1
a1797 1
    stringBuffer.append(TEXT_343);
d1799 1
a1799 1
    stringBuffer.append(TEXT_344);
d1801 1
a1801 1
    stringBuffer.append(TEXT_345);
d1805 1
a1805 1
    stringBuffer.append(TEXT_346);
d1807 1
a1807 1
    stringBuffer.append(TEXT_347);
d1826 1
a1826 1
    stringBuffer.append(TEXT_348);
d1828 1
a1828 1
    stringBuffer.append(TEXT_349);
d1830 1
a1830 1
    stringBuffer.append(TEXT_350);
d1832 1
a1832 1
    stringBuffer.append(TEXT_351);
d1834 1
a1834 1
    stringBuffer.append(TEXT_352);
d1838 1
a1838 1
    stringBuffer.append(TEXT_353);
d1840 1
a1840 1
    stringBuffer.append(TEXT_354);
d1842 1
a1842 1
    stringBuffer.append(TEXT_355);
d1844 1
a1844 1
    stringBuffer.append(TEXT_356);
d1852 1
a1852 1
    stringBuffer.append(TEXT_357);
d1854 1
a1854 1
    stringBuffer.append(TEXT_358);
d1856 1
a1856 1
    stringBuffer.append(TEXT_359);
d1861 1
a1861 1
    stringBuffer.append(TEXT_360);
d1863 1
a1863 1
    stringBuffer.append(TEXT_361);
d1865 1
a1865 1
    stringBuffer.append(TEXT_362);
d1867 1
a1867 1
    stringBuffer.append(TEXT_363);
d1876 1
a1876 1
    stringBuffer.append(TEXT_364);
d1880 1
a1880 1
    stringBuffer.append(TEXT_365);
d1882 1
a1882 1
    stringBuffer.append(TEXT_366);
d1888 1
a1888 1
    stringBuffer.append(TEXT_367);
d1890 1
a1890 1
    stringBuffer.append(TEXT_368);
d1892 1
a1892 1
    stringBuffer.append(TEXT_369);
d1896 1
a1896 1
    stringBuffer.append(TEXT_370);
d1900 1
a1900 1
    stringBuffer.append(TEXT_371);
d1902 1
a1902 1
    stringBuffer.append(TEXT_372);
d1904 1
a1904 1
    stringBuffer.append(TEXT_373);
d1909 2
a1910 2
    stringBuffer.append(TEXT_374);
    stringBuffer.append(TEXT_375);
d1912 1
a1912 1
    stringBuffer.append(TEXT_376);
d1922 1
a1922 1
    stringBuffer.append(TEXT_377);
d1924 1
a1924 1
    stringBuffer.append(TEXT_378);
d1926 1
a1926 1
    stringBuffer.append(TEXT_379);
d1928 1
a1928 1
    stringBuffer.append(TEXT_380);
d1930 1
a1930 1
    stringBuffer.append(TEXT_381);
d1941 1
a1941 1
    stringBuffer.append(TEXT_382);
d1943 1
a1943 1
    stringBuffer.append(TEXT_383);
d1945 1
a1945 1
    stringBuffer.append(TEXT_384);
d1947 1
a1947 1
    stringBuffer.append(TEXT_385);
d1951 1
a1951 1
    stringBuffer.append(TEXT_386);
d1955 1
a1955 1
    stringBuffer.append(TEXT_387);
d1957 1
a1957 1
    stringBuffer.append(TEXT_388);
d1961 1
a1961 1
    stringBuffer.append(TEXT_389);
d1965 1
a1965 1
    stringBuffer.append(TEXT_390);
d1967 2
a1968 2
    stringBuffer.append(TEXT_391);
    stringBuffer.append(TEXT_392);
d1972 1
a1972 1
    stringBuffer.append(TEXT_393);
d1974 1
a1974 1
    stringBuffer.append(TEXT_394);
d1978 1
a1978 1
    stringBuffer.append(TEXT_395);
d1980 1
a1980 1
    stringBuffer.append(TEXT_396);
d1982 1
a1982 1
    stringBuffer.append(TEXT_397);
d2000 1
a2000 1
    stringBuffer.append(TEXT_398);
d2002 1
a2002 1
    stringBuffer.append(TEXT_399);
d2004 1
a2004 1
    stringBuffer.append(TEXT_400);
d2006 1
a2006 1
    stringBuffer.append(TEXT_401);
d2008 1
a2008 1
    stringBuffer.append(TEXT_402);
d2017 1
a2017 1
    stringBuffer.append(TEXT_403);
d2019 1
a2019 1
    stringBuffer.append(TEXT_404);
d2021 1
a2021 1
    stringBuffer.append(TEXT_405);
d2023 1
a2023 1
    stringBuffer.append(TEXT_406);
d2027 1
a2027 1
    stringBuffer.append(TEXT_407);
d2029 1
a2029 1
    stringBuffer.append(TEXT_408);
d2031 1
a2031 1
    stringBuffer.append(TEXT_409);
d2035 1
a2035 1
    stringBuffer.append(TEXT_410);
d2037 1
a2037 1
    stringBuffer.append(TEXT_411);
d2042 1
a2042 1
    stringBuffer.append(TEXT_412);
d2049 1
a2049 1
    stringBuffer.append(TEXT_413);
d2051 1
a2051 1
    stringBuffer.append(TEXT_414);
d2055 1
a2055 1
    stringBuffer.append(TEXT_415);
d2057 1
a2057 1
    stringBuffer.append(TEXT_416);
d2061 1
a2061 1
    stringBuffer.append(TEXT_417);
d2063 1
a2063 1
    stringBuffer.append(TEXT_418);
d2067 1
a2067 1
    stringBuffer.append(TEXT_419);
d2071 1
a2071 1
    stringBuffer.append(TEXT_420);
d2077 1
a2077 1
    stringBuffer.append(TEXT_421);
d2082 1
a2082 1
    stringBuffer.append(TEXT_422);
d2087 1
a2087 1
    stringBuffer.append(TEXT_423);
d2091 1
a2091 1
    stringBuffer.append(TEXT_424);
d2093 1
a2093 1
    stringBuffer.append(TEXT_425);
d2095 1
a2095 1
    stringBuffer.append(TEXT_426);
d2097 1
a2097 1
    stringBuffer.append(TEXT_427);
d2099 1
a2099 1
    stringBuffer.append(TEXT_428);
d2101 1
a2101 1
    stringBuffer.append(TEXT_429);
d2103 1
a2103 1
    stringBuffer.append(TEXT_430);
d2105 1
a2105 1
    stringBuffer.append(TEXT_431);
d2107 1
a2107 1
    stringBuffer.append(TEXT_432);
d2109 1
a2109 1
    stringBuffer.append(TEXT_433);
d2111 1
a2111 1
    stringBuffer.append(TEXT_434);
d2113 2
a2114 2
    stringBuffer.append(TEXT_435);
    stringBuffer.append(TEXT_436);
d2118 1
a2118 1
    stringBuffer.append(TEXT_437);
d2120 1
a2120 1
    stringBuffer.append(TEXT_438);
d2122 1
a2122 1
    stringBuffer.append(TEXT_439);
d2124 1
a2124 1
    stringBuffer.append(TEXT_440);
d2126 1
a2126 1
    stringBuffer.append(TEXT_441);
d2128 1
a2128 1
    stringBuffer.append(TEXT_442);
d2130 1
a2130 1
    stringBuffer.append(TEXT_443);
d2132 1
a2132 1
    stringBuffer.append(TEXT_444);
d2134 1
a2134 1
    stringBuffer.append(TEXT_445);
d2147 1
a2147 1
    stringBuffer.append(TEXT_446);
d2149 1
a2149 1
    stringBuffer.append(TEXT_447);
d2151 1
a2151 1
    stringBuffer.append(TEXT_448);
d2153 1
a2153 1
    stringBuffer.append(TEXT_449);
d2158 1
a2158 1
    stringBuffer.append(TEXT_450);
d2160 1
a2160 1
    stringBuffer.append(TEXT_451);
d2162 1
a2162 1
    stringBuffer.append(TEXT_452);
d2164 1
a2164 1
    stringBuffer.append(TEXT_453);
d2166 1
a2166 1
    stringBuffer.append(TEXT_454);
d2168 1
a2168 1
    stringBuffer.append(TEXT_455);
d2170 1
a2170 1
    stringBuffer.append(TEXT_456);
d2172 1
a2172 1
    stringBuffer.append(TEXT_457);
d2174 1
a2174 1
    stringBuffer.append(TEXT_458);
d2176 1
a2176 1
    stringBuffer.append(TEXT_459);
d2180 1
a2180 1
    stringBuffer.append(TEXT_460);
d2182 1
a2182 1
    stringBuffer.append(TEXT_461);
d2195 1
a2195 1
    stringBuffer.append(TEXT_462);
d2209 1
a2209 1
    stringBuffer.append(TEXT_463);
d2211 1
a2211 1
    stringBuffer.append(TEXT_464);
d2213 1
a2213 1
    stringBuffer.append(TEXT_465);
d2215 1
a2215 1
    stringBuffer.append(TEXT_466);
d2217 1
a2217 1
    stringBuffer.append(TEXT_467);
d2221 1
a2221 1
    stringBuffer.append(TEXT_468);
d2223 1
a2223 1
    stringBuffer.append(TEXT_469);
d2225 1
a2225 1
    stringBuffer.append(TEXT_470);
d2227 1
a2227 1
    stringBuffer.append(TEXT_471);
d2234 1
a2234 1
    stringBuffer.append(TEXT_472);
d2248 1
a2248 1
    stringBuffer.append(TEXT_473);
d2250 1
a2250 1
    stringBuffer.append(TEXT_474);
d2252 1
a2252 1
    stringBuffer.append(TEXT_475);
d2254 1
a2254 1
    stringBuffer.append(TEXT_476);
d2256 1
a2256 1
    stringBuffer.append(TEXT_477);
d2260 1
a2260 1
    stringBuffer.append(TEXT_478);
d2262 1
a2262 1
    stringBuffer.append(TEXT_479);
d2264 1
a2264 1
    stringBuffer.append(TEXT_480);
d2266 1
a2266 1
    stringBuffer.append(TEXT_481);
d2273 1
a2273 1
    stringBuffer.append(TEXT_482);
d2287 1
a2287 1
    stringBuffer.append(TEXT_483);
d2289 1
a2289 1
    stringBuffer.append(TEXT_484);
d2291 1
a2291 1
    stringBuffer.append(TEXT_485);
d2293 1
a2293 1
    stringBuffer.append(TEXT_486);
d2295 1
a2295 1
    stringBuffer.append(TEXT_487);
d2299 1
a2299 1
    stringBuffer.append(TEXT_488);
d2301 1
a2301 1
    stringBuffer.append(TEXT_489);
d2303 1
a2303 1
    stringBuffer.append(TEXT_490);
d2305 1
a2305 1
    stringBuffer.append(TEXT_491);
d2315 1
a2315 1
    stringBuffer.append(TEXT_492);
d2329 1
a2329 1
    stringBuffer.append(TEXT_493);
d2331 1
a2331 1
    stringBuffer.append(TEXT_494);
d2333 1
a2333 1
    stringBuffer.append(TEXT_495);
d2335 1
a2335 1
    stringBuffer.append(TEXT_496);
d2337 1
a2337 1
    stringBuffer.append(TEXT_497);
d2341 1
a2341 1
    stringBuffer.append(TEXT_498);
d2343 1
a2343 1
    stringBuffer.append(TEXT_499);
d2345 1
a2345 1
    stringBuffer.append(TEXT_500);
d2347 1
a2347 1
    stringBuffer.append(TEXT_501);
d2356 1
a2356 1
    stringBuffer.append(TEXT_502);
d2361 1
a2361 1
    stringBuffer.append(TEXT_503);
d2363 1
a2363 1
    stringBuffer.append(TEXT_504);
d2370 1
a2370 1
    stringBuffer.append(TEXT_505);
d2375 1
a2375 1
    stringBuffer.append(TEXT_506);
d2377 1
a2377 1
    stringBuffer.append(TEXT_507);
d2383 1
a2383 1
    stringBuffer.append(TEXT_508);
d2385 1
a2385 1
    stringBuffer.append(TEXT_509);
d2387 1
a2387 1
    stringBuffer.append(TEXT_510);
d2392 1
a2392 1
    stringBuffer.append(TEXT_511);
d2394 1
a2394 1
    stringBuffer.append(TEXT_512);
d2396 1
a2396 1
    stringBuffer.append(TEXT_513);
d2398 1
a2398 1
    stringBuffer.append(TEXT_514);
d2400 1
a2400 1
    stringBuffer.append(TEXT_515);
d2406 3
a2408 3

    stringBuffer.append(TEXT_516);
    stringBuffer.append(TEXT_517);
d2410 1
a2410 1
    stringBuffer.append(TEXT_518);
d2412 1
a2412 1
    stringBuffer.append(TEXT_519);
d2414 1
a2414 1
    stringBuffer.append(TEXT_520);
d2423 1
a2423 1
    stringBuffer.append(TEXT_521);
d2425 1
a2425 1
    stringBuffer.append(TEXT_522);
d2427 1
a2427 1
    stringBuffer.append(TEXT_523);
d2429 1
a2429 1
    stringBuffer.append(TEXT_524);
d2435 1
a2435 1
    stringBuffer.append(TEXT_525);
d2437 1
a2437 1
    stringBuffer.append(TEXT_526);
d2439 1
a2439 1
    stringBuffer.append(TEXT_527);
d2443 1
a2443 1
    stringBuffer.append(TEXT_528);
d2445 1
a2445 1
    stringBuffer.append(TEXT_529);
d2447 1
a2447 1
    stringBuffer.append(TEXT_530);
d2451 1
a2451 1
    stringBuffer.append(TEXT_531);
d2453 1
a2453 1
    stringBuffer.append(TEXT_532);
d2459 2
a2460 2
    stringBuffer.append(TEXT_533);
    stringBuffer.append(TEXT_534);
d2462 1
a2462 1
    stringBuffer.append(TEXT_535);
d2464 1
a2464 1
    stringBuffer.append(TEXT_536);
d2487 1
a2487 1
    stringBuffer.append(TEXT_537);
d2489 1
a2489 1
    stringBuffer.append(TEXT_538);
d2491 1
a2491 1
    stringBuffer.append(TEXT_539);
d2493 1
a2493 1
    stringBuffer.append(TEXT_540);
d2498 1
a2498 1
    stringBuffer.append(TEXT_541);
d2507 1
a2507 1
    stringBuffer.append(TEXT_542);
d2509 1
a2509 1
    stringBuffer.append(TEXT_543);
d2511 1
a2511 1
    stringBuffer.append(TEXT_544);
d2513 1
a2513 1
    stringBuffer.append(TEXT_545);
d2517 1
a2517 1
    stringBuffer.append(TEXT_546);
d2519 1
a2519 1
    stringBuffer.append(TEXT_547);
d2521 1
a2521 1
    stringBuffer.append(TEXT_548);
d2525 1
a2525 1
    stringBuffer.append(TEXT_549);
d2527 1
a2527 1
    stringBuffer.append(TEXT_550);
d2532 1
a2532 1
    stringBuffer.append(TEXT_551);
d2540 1
a2540 1
    stringBuffer.append(TEXT_552);
d2542 1
a2542 1
    stringBuffer.append(TEXT_553);
d2546 1
a2546 1
    stringBuffer.append(TEXT_554);
d2548 1
a2548 1
    stringBuffer.append(TEXT_555);
d2553 1
a2553 1
    stringBuffer.append(TEXT_556);
d2555 1
a2555 1
    stringBuffer.append(TEXT_557);
d2557 1
a2557 1
    stringBuffer.append(TEXT_558);
d2559 1
a2559 1
    stringBuffer.append(TEXT_559);
d2563 1
a2563 1
    stringBuffer.append(TEXT_560);
d2565 1
a2565 1
    stringBuffer.append(TEXT_561);
d2567 1
a2567 1
    stringBuffer.append(TEXT_562);
d2572 1
a2572 1
    stringBuffer.append(TEXT_563);
d2574 1
a2574 1
    stringBuffer.append(TEXT_564);
d2576 1
a2576 1
    stringBuffer.append(TEXT_565);
d2578 1
a2578 1
    stringBuffer.append(TEXT_566);
d2582 1
a2582 1
    stringBuffer.append(TEXT_567);
d2584 1
a2584 1
    stringBuffer.append(TEXT_568);
d2586 1
a2586 1
    stringBuffer.append(TEXT_569);
d2590 1
a2590 1
    stringBuffer.append(TEXT_570);
d2592 1
a2592 1
    stringBuffer.append(TEXT_571);
d2596 1
a2596 1
    stringBuffer.append(TEXT_572);
d2600 1
a2600 1
    stringBuffer.append(TEXT_573);
d2608 1
a2608 1
    stringBuffer.append(TEXT_574);
d2613 1
a2613 1
    stringBuffer.append(TEXT_575);
d2623 1
a2623 1
    stringBuffer.append(TEXT_576);
d2625 1
a2625 1
    stringBuffer.append(TEXT_577);
d2627 1
a2627 1
    stringBuffer.append(TEXT_578);
d2629 1
a2629 1
    stringBuffer.append(TEXT_579);
d2633 1
a2633 1
    stringBuffer.append(TEXT_580);
d2635 1
a2635 1
    stringBuffer.append(TEXT_581);
d2637 1
a2637 1
    stringBuffer.append(TEXT_582);
d2641 1
a2641 1
    stringBuffer.append(TEXT_583);
d2646 1
a2646 1
    stringBuffer.append(TEXT_584);
d2648 1
a2648 1
    stringBuffer.append(TEXT_585);
d2650 1
a2650 1
    stringBuffer.append(TEXT_586);
d2654 1
a2654 1
    stringBuffer.append(TEXT_587);
d2658 1
a2658 1
    stringBuffer.append(TEXT_588);
d2663 1
a2663 1
    stringBuffer.append(TEXT_589);
d2667 1
a2667 1
    stringBuffer.append(TEXT_590);
d2669 1
a2669 1
    stringBuffer.append(TEXT_591);
d2671 1
a2671 1
    stringBuffer.append(TEXT_592);
d2673 1
a2673 1
    stringBuffer.append(TEXT_593);
d2675 1
a2675 1
    stringBuffer.append(TEXT_594);
d2677 1
a2677 1
    stringBuffer.append(TEXT_595);
d2679 1
a2679 1
    stringBuffer.append(TEXT_596);
d2681 1
a2681 1
    stringBuffer.append(TEXT_597);
d2683 1
a2683 1
    stringBuffer.append(TEXT_598);
d2687 1
a2687 1
    stringBuffer.append(TEXT_599);
d2689 1
a2689 1
    stringBuffer.append(TEXT_600);
d2691 1
a2691 1
    stringBuffer.append(TEXT_601);
d2696 1
a2696 1
    stringBuffer.append(TEXT_602);
d2698 1
a2698 1
    stringBuffer.append(TEXT_603);
d2700 1
a2700 1
    stringBuffer.append(TEXT_604);
d2705 1
a2705 1
    stringBuffer.append(TEXT_605);
d2707 1
a2707 1
    stringBuffer.append(TEXT_606);
d2711 1
a2711 1
    stringBuffer.append(TEXT_607);
d2715 1
a2715 1
    stringBuffer.append(TEXT_608);
d2719 1
a2719 1
    stringBuffer.append(TEXT_609);
d2726 1
a2726 1
    stringBuffer.append(TEXT_610);
d2730 1
a2730 1
    stringBuffer.append(TEXT_611);
d2732 1
a2732 1
    stringBuffer.append(TEXT_612);
d2734 1
a2734 1
    stringBuffer.append(TEXT_613);
d2739 1
a2739 1
    stringBuffer.append(TEXT_614);
d2741 1
a2741 1
    stringBuffer.append(TEXT_615);
d2745 1
a2745 1
    stringBuffer.append(TEXT_616);
d2749 1
a2749 1
    stringBuffer.append(TEXT_617);
d2751 1
a2751 1
    stringBuffer.append(TEXT_618);
d2753 1
a2753 1
    stringBuffer.append(TEXT_619);
d2755 1
a2755 1
    stringBuffer.append(TEXT_620);
d2757 1
a2757 1
    stringBuffer.append(TEXT_621);
d2759 1
a2759 1
    stringBuffer.append(TEXT_622);
d2761 1
a2761 1
    stringBuffer.append(TEXT_623);
d2763 1
a2763 1
    stringBuffer.append(TEXT_624);
d2765 1
a2765 1
    stringBuffer.append(TEXT_625);
d2767 1
a2767 1
    stringBuffer.append(TEXT_626);
d2769 1
a2769 1
    stringBuffer.append(TEXT_627);
d2771 1
a2771 1
    stringBuffer.append(TEXT_628);
d2778 3
a2780 3
    stringBuffer.append(TEXT_629);
    stringBuffer.append(TEXT_630);
    stringBuffer.append(TEXT_631);
d2782 1
a2782 1
    stringBuffer.append(TEXT_632);
d2784 1
a2784 1
    stringBuffer.append(TEXT_633);
d2786 1
a2786 1
    stringBuffer.append(TEXT_634);
d2788 1
a2788 1
    stringBuffer.append(TEXT_635);
d2790 1
a2790 1
    stringBuffer.append(TEXT_636);
d2792 1
a2792 1
    stringBuffer.append(TEXT_637);
d2794 3
a2796 3
    stringBuffer.append(TEXT_638);
    stringBuffer.append(TEXT_639);
    stringBuffer.append(TEXT_640);
d2798 1
a2798 1
    stringBuffer.append(TEXT_641);
d2800 1
a2800 1
    stringBuffer.append(TEXT_642);
d2802 1
a2802 1
    stringBuffer.append(TEXT_643);
d2804 1
a2804 1
    stringBuffer.append(TEXT_644);
d2806 1
a2806 1
    stringBuffer.append(TEXT_645);
d2808 1
a2808 1
    stringBuffer.append(TEXT_646);
@


1.16
log
@#161380 simplify feature model facets
@
text
@d56 1
a56 1
  protected final String TEXT_37 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\tsuper.addNotify();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {" + NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
@


1.15
log
@[160225] bblajer - Respect EStructuralFeature cardinality in commands that create/move/clone elements
@
text
@d799 2
a800 2
			} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
				GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d2294 1
a2294 1
			GenFeature _feature = ((FeatureModelFacet) nextLink.getModelFacet()).getMetaFeature();
d2460 1
a2460 1
	GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
@


1.14
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d113 553
a665 501
  protected final String TEXT_94 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_95 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_96 = ".getElement(), ";
  protected final String TEXT_97 = ".eINSTANCE.get";
  protected final String TEXT_98 = "(), element));";
  protected final String TEXT_99 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_100 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_101 = ".getElement(), ";
  protected final String TEXT_102 = ".eINSTANCE.get";
  protected final String TEXT_103 = "(), element));";
  protected final String TEXT_104 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_105 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_106 = ".create(editingDomain, ";
  protected final String TEXT_107 = ", ";
  protected final String TEXT_108 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_109 = "(childNode, ";
  protected final String TEXT_110 = "null";
  protected final String TEXT_111 = "(";
  protected final String TEXT_112 = ") constraint";
  protected final String TEXT_113 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_114 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_115 = "(";
  protected final String TEXT_116 = ", element, ";
  protected final String TEXT_117 = "null";
  protected final String TEXT_118 = "((";
  protected final String TEXT_119 = ") constraint).getCopy().union(new ";
  protected final String TEXT_120 = "(";
  protected final String TEXT_121 = ", ";
  protected final String TEXT_122 = "))";
  protected final String TEXT_123 = ", ";
  protected final String TEXT_124 = ".INSTANCE));";
  protected final String TEXT_125 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_126 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_127 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_128 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_129 = NL;
  protected final String TEXT_130 = NL + "protected ";
  protected final String TEXT_131 = " getCloneCommand(";
  protected final String TEXT_132 = " request) {" + NL + "\t";
  protected final String TEXT_133 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_134 = " command = new ";
  protected final String TEXT_135 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_136 = " childPart;" + NL + "\t";
  protected final String TEXT_137 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_138 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_139 = " createCloneCommand(final ";
  protected final String TEXT_140 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_141 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_142 = " childNode = (";
  protected final String TEXT_143 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_144 = " editingDomain = ";
  protected final String TEXT_145 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_146 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_147 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_148 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_149 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_150 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_151 = NL + "\t\t\tcase ";
  protected final String TEXT_152 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_153 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_154 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_155 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_156 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_157 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_158 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_159 = " result = (";
  protected final String TEXT_160 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_161 = "();";
  protected final String TEXT_162 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_163 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_164 = ".getElement(), ";
  protected final String TEXT_165 = ".eINSTANCE.get";
  protected final String TEXT_166 = "(), result));";
  protected final String TEXT_167 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_168 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_169 = ".getElement(), ";
  protected final String TEXT_170 = ".eINSTANCE.get";
  protected final String TEXT_171 = "(), result));";
  protected final String TEXT_172 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_173 = "(";
  protected final String TEXT_174 = ", result, ";
  protected final String TEXT_175 = "null";
  protected final String TEXT_176 = "((";
  protected final String TEXT_177 = ") constraint).getCopy().union(new ";
  protected final String TEXT_178 = "(";
  protected final String TEXT_179 = ", ";
  protected final String TEXT_180 = "))";
  protected final String TEXT_181 = ", ";
  protected final String TEXT_182 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_183 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_184 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_185 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_186 = NL + "\t\t\tprotected ";
  protected final String TEXT_187 = " createChangeConstraintCommand(final ";
  protected final String TEXT_188 = " request, final ";
  protected final String TEXT_189 = " child, Object constraint) {";
  protected final String TEXT_190 = NL;
  protected final String TEXT_191 = "\t\t\t\tfinal ";
  protected final String TEXT_192 = " node = (";
  protected final String TEXT_193 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_194 = " emfCommand = new ";
  protected final String TEXT_195 = "(node, request, ((";
  protected final String TEXT_196 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_197 = "(";
  protected final String TEXT_198 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_199 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_200 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_201 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_202 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_203 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_204 = "(this);" + NL + "\t\t}" + NL + "\t\tif (";
  protected final String TEXT_205 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_206 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_207 = NL;
  protected final String TEXT_208 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_209 = "static ";
  protected final String TEXT_210 = "class Create";
  protected final String TEXT_211 = "Command extends ";
  protected final String TEXT_212 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_213 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_214 = "Command(";
  protected final String TEXT_215 = " parent, ";
  protected final String TEXT_216 = " request";
  protected final String TEXT_217 = ", ";
  protected final String TEXT_218 = " constraint";
  protected final String TEXT_219 = ") {" + NL + "\t\t\t";
  protected final String TEXT_220 = " domainModelEditDomain = ";
  protected final String TEXT_221 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_222 = NL + "\t\t\t";
  protected final String TEXT_223 = " createdDomainElement = ";
  protected final String TEXT_224 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_225 = ".eINSTANCE.get";
  protected final String TEXT_226 = "());";
  protected final String TEXT_227 = NL + "\t\t\t";
  protected final String TEXT_228 = " createdDomainElement = ";
  protected final String TEXT_229 = ".eINSTANCE.create";
  protected final String TEXT_230 = "();";
  protected final String TEXT_231 = NL + "\t\t\t";
  protected final String TEXT_232 = NL + "\t\t\t";
  protected final String TEXT_233 = ".";
  protected final String TEXT_234 = ".initializeElement(";
  protected final String TEXT_235 = "(";
  protected final String TEXT_236 = ") ";
  protected final String TEXT_237 = "createdDomainElement);";
  protected final String TEXT_238 = NL + "\t\t\t";
  protected final String TEXT_239 = " compoundCommand = new ";
  protected final String TEXT_240 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_241 = ".create(domainModelEditDomain, ";
  protected final String TEXT_242 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_243 = ".eINSTANCE.get";
  protected final String TEXT_244 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_245 = ".create(domainModelEditDomain, ";
  protected final String TEXT_246 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_247 = ".eINSTANCE.get";
  protected final String TEXT_248 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_249 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_250 = ".create(domainModelEditDomain, ";
  protected final String TEXT_251 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_252 = ".eINSTANCE.get";
  protected final String TEXT_253 = "(), createdDomainElement);";
  protected final String TEXT_254 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_255 = "(";
  protected final String TEXT_256 = ", ";
  protected final String TEXT_257 = "));";
  protected final String TEXT_258 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_259 = "(parent, ";
  protected final String TEXT_260 = "(";
  protected final String TEXT_261 = ") ";
  protected final String TEXT_262 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_263 = "constraint";
  protected final String TEXT_264 = "null";
  protected final String TEXT_265 = ", ";
  protected final String TEXT_266 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_267 = NL;
  protected final String TEXT_268 = NL;
  protected final String TEXT_269 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_270 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_271 = " feature, ";
  protected final String TEXT_272 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_273 = NL;
  protected final String TEXT_274 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_275 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_276 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_277 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_278 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_279 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_280 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_281 = NL;
  protected final String TEXT_282 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_283 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_284 = " domainModelEditDomain = ";
  protected final String TEXT_285 = ".getEditingDomain(";
  protected final String TEXT_286 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_287 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_288 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_289 = " {";
  protected final String TEXT_290 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_291 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_292 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_293 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_294 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_295 = " createFilter() {";
  protected final String TEXT_296 = NL + "\t\t\t";
  protected final String TEXT_297 = " filter = ";
  protected final String TEXT_298 = ".createFeatureFilter(";
  protected final String TEXT_299 = ".eINSTANCE.get";
  protected final String TEXT_300 = "());";
  protected final String TEXT_301 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_302 = ".createFeatureFilter(";
  protected final String TEXT_303 = ".eINSTANCE.get";
  protected final String TEXT_304 = "()));";
  protected final String TEXT_305 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_306 = ".createNotifierFilter(";
  protected final String TEXT_307 = ".getElement()));";
  protected final String TEXT_308 = NL + "\t\t\t";
  protected final String TEXT_309 = " filter = ";
  protected final String TEXT_310 = ".createNotifierFilter(";
  protected final String TEXT_311 = ".getElement());";
  protected final String TEXT_312 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_313 = NL + "\t\t\t";
  protected final String TEXT_314 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_315 = NL + "\t\t\t";
  protected final String TEXT_316 = " filter = ";
  protected final String TEXT_317 = ".NOT_TOUCH;";
  protected final String TEXT_318 = NL + "\t\t\treturn filter;";
  protected final String TEXT_319 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_320 = " getCreateNotationalElementCommand(";
  protected final String TEXT_321 = " descriptor) {";
  protected final String TEXT_322 = NL;
  protected final String TEXT_323 = "\t\t\t";
  protected final String TEXT_324 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_325 = NL + "\t\t\tcase ";
  protected final String TEXT_326 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_327 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_328 = "(";
  protected final String TEXT_329 = ", domainElement, ";
  protected final String TEXT_330 = "new ";
  protected final String TEXT_331 = "(0, 0, ";
  protected final String TEXT_332 = ", ";
  protected final String TEXT_333 = ")";
  protected final String TEXT_334 = NL + "null";
  protected final String TEXT_335 = ", ";
  protected final String TEXT_336 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_337 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_338 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_339 = " getSemanticChildNodes() {";
  protected final String TEXT_340 = NL;
  protected final String TEXT_341 = NL + "\treturn ";
  protected final String TEXT_342 = ".EMPTY_LIST;";
  protected final String TEXT_343 = NL + "\t";
  protected final String TEXT_344 = " result = new ";
  protected final String TEXT_345 = "();";
  protected final String TEXT_346 = NL + "\t";
  protected final String TEXT_347 = " viewObject = ";
  protected final String TEXT_348 = ";" + NL + "\t";
  protected final String TEXT_349 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_350 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_351 = NL + "\tfor(";
  protected final String TEXT_352 = " it = ";
  protected final String TEXT_353 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_354 = ") it.next();";
  protected final String TEXT_355 = NL + "\tnextValue = (";
  protected final String TEXT_356 = ")";
  protected final String TEXT_357 = ";";
  protected final String TEXT_358 = NL + "\tnodeVID = ";
  protected final String TEXT_359 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_360 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_361 = NL + "\tcase ";
  protected final String TEXT_362 = ".VISUAL_ID: {";
  protected final String TEXT_363 = NL + "\tif (";
  protected final String TEXT_364 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_365 = NL + "\t\tresult.add(new ";
  protected final String TEXT_366 = "(nextValue, nodeVID));";
  protected final String TEXT_367 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_368 = NL + "\t\t}";
  protected final String TEXT_369 = NL + "\t}";
  protected final String TEXT_370 = NL + "\t}";
  protected final String TEXT_371 = NL + "\treturn result;";
  protected final String TEXT_372 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_373 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_374 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_375 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_376 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_377 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_378 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_379 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_380 = " domainModelEditDomain = ";
  protected final String TEXT_381 = ".getEditingDomain(";
  protected final String TEXT_382 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_383 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_384 = NL;
  protected final String TEXT_385 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_386 = " domainModelEditDomain = ";
  protected final String TEXT_387 = ".getEditingDomain(";
  protected final String TEXT_388 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_389 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_390 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_391 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_392 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_393 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_394 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_395 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_396 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_397 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_398 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_399 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_400 = ".createEventTypeFilter(";
  protected final String TEXT_401 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_402 = ".createEventTypeFilter(";
  protected final String TEXT_403 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_404 = ".createEventTypeFilter(";
  protected final String TEXT_405 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_406 = ".createEventTypeFilter(";
  protected final String TEXT_407 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_408 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_409 = " createFilter() {";
  protected final String TEXT_410 = NL;
  protected final String TEXT_411 = NL + "\t\t\t";
  protected final String TEXT_412 = " filter = ";
  protected final String TEXT_413 = ".createFeatureFilter(";
  protected final String TEXT_414 = ".eINSTANCE.get";
  protected final String TEXT_415 = "());";
  protected final String TEXT_416 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_417 = ".createFeatureFilter(";
  protected final String TEXT_418 = ".eINSTANCE.get";
  protected final String TEXT_419 = "()));";
  protected final String TEXT_420 = NL;
  protected final String TEXT_421 = NL + "\t\t\t";
  protected final String TEXT_422 = " filter = ";
  protected final String TEXT_423 = ".createFeatureFilter(";
  protected final String TEXT_424 = ".eINSTANCE.get";
  protected final String TEXT_425 = "());";
  protected final String TEXT_426 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_427 = ".createFeatureFilter(";
  protected final String TEXT_428 = ".eINSTANCE.get";
  protected final String TEXT_429 = "()));";
  protected final String TEXT_430 = NL;
  protected final String TEXT_431 = NL + "\t\t\t";
  protected final String TEXT_432 = " filter = ";
  protected final String TEXT_433 = ".createFeatureFilter(";
  protected final String TEXT_434 = ".eINSTANCE.get";
  protected final String TEXT_435 = "());";
  protected final String TEXT_436 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_437 = ".createFeatureFilter(";
  protected final String TEXT_438 = ".eINSTANCE.get";
  protected final String TEXT_439 = "()));";
  protected final String TEXT_440 = NL;
  protected final String TEXT_441 = NL + "\t\t\t";
  protected final String TEXT_442 = " filter = ";
  protected final String TEXT_443 = ".createFeatureFilter(";
  protected final String TEXT_444 = ".eINSTANCE.get";
  protected final String TEXT_445 = "());";
  protected final String TEXT_446 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_447 = ".createFeatureFilter(";
  protected final String TEXT_448 = ".eINSTANCE.get";
  protected final String TEXT_449 = "()));";
  protected final String TEXT_450 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_451 = NL + "\t\t\t";
  protected final String TEXT_452 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_453 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_454 = NL + "\t\t\t";
  protected final String TEXT_455 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_456 = NL + "\t\t\t";
  protected final String TEXT_457 = " filter = ";
  protected final String TEXT_458 = ".NOT_TOUCH;";
  protected final String TEXT_459 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_460 = " getCreateNotationalElementCommand(";
  protected final String TEXT_461 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_462 = " linkDescriptor = (";
  protected final String TEXT_463 = ") descriptor;";
  protected final String TEXT_464 = NL;
  protected final String TEXT_465 = "\t\t\t";
  protected final String TEXT_466 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_467 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_468 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_469 = NL + "\t\t\tcase ";
  protected final String TEXT_470 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_471 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_472 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_473 = NL + "\t\t\tcase ";
  protected final String TEXT_474 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_475 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_476 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_477 = "(";
  protected final String TEXT_478 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_479 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_480 = " getSemanticChildLinks() {";
  protected final String TEXT_481 = NL;
  protected final String TEXT_482 = "\t";
  protected final String TEXT_483 = " result = new ";
  protected final String TEXT_484 = "();";
  protected final String TEXT_485 = NL + "\t";
  protected final String TEXT_486 = " modelObject = ";
  protected final String TEXT_487 = ".getElement();" + NL + "\t";
  protected final String TEXT_488 = " nextValue;";
  protected final String TEXT_489 = NL + "\tint linkVID;";
  protected final String TEXT_490 = NL + "\tfor(";
  protected final String TEXT_491 = " it = ";
  protected final String TEXT_492 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_493 = ") it.next();";
  protected final String TEXT_494 = NL + "\tnextValue = (";
  protected final String TEXT_495 = ")";
  protected final String TEXT_496 = ";";
  protected final String TEXT_497 = NL + "\tlinkVID = ";
  protected final String TEXT_498 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_499 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_500 = NL + "\tcase ";
  protected final String TEXT_501 = ".VISUAL_ID: {";
  protected final String TEXT_502 = NL + "\tif (";
  protected final String TEXT_503 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_504 = NL + "\t\t";
  protected final String TEXT_505 = " source = (";
  protected final String TEXT_506 = ")";
  protected final String TEXT_507 = ";";
  protected final String TEXT_508 = NL + "\t\t";
  protected final String TEXT_509 = " source = ";
  protected final String TEXT_510 = ".getElement();";
  protected final String TEXT_511 = NL + "\t\t";
  protected final String TEXT_512 = " target = (";
  protected final String TEXT_513 = ")";
  protected final String TEXT_514 = ";";
  protected final String TEXT_515 = NL + "\t\t";
  protected final String TEXT_516 = " target = ";
  protected final String TEXT_517 = ".getElement();";
  protected final String TEXT_518 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_519 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_520 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_521 = NL + "\t}";
  protected final String TEXT_522 = NL + "\t}";
  protected final String TEXT_523 = NL + "\t}";
  protected final String TEXT_524 = NL + "\tfor(";
  protected final String TEXT_525 = " it = ";
  protected final String TEXT_526 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_527 = ") it.next();";
  protected final String TEXT_528 = NL + "\tnextValue = (";
  protected final String TEXT_529 = ")";
  protected final String TEXT_530 = ";";
  protected final String TEXT_531 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_532 = NL + "\t\tresult.add(new ";
  protected final String TEXT_533 = "(modelObject, nextValue, null, ";
  protected final String TEXT_534 = ".VISUAL_ID));";
  protected final String TEXT_535 = NL + "\t}";
  protected final String TEXT_536 = NL + "\t}";
  protected final String TEXT_537 = NL + "\treturn result;";
  protected final String TEXT_538 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_539 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_540 = " result = new ";
  protected final String TEXT_541 = "();" + NL + "\t\t\t";
  protected final String TEXT_542 = " allLinks = ";
  protected final String TEXT_543 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_544 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_545 = " next = (";
  protected final String TEXT_546 = ") it.next();";
  protected final String TEXT_547 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_548 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_549 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_550 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_551 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_552 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_553 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_554 = ".VISUAL_ID:";
  protected final String TEXT_555 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_556 = NL + "\t\t\t\t} else {";
  protected final String TEXT_557 = NL + "\t\t\t\t}";
  protected final String TEXT_558 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_559 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_560 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_561 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_562 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_563 = ".VISUAL_ID:";
  protected final String TEXT_564 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_565 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_566 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_567 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_568 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_569 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_570 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_571 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_572 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_573 = " domainModelEditDomain = ";
  protected final String TEXT_574 = ".getEditingDomain(";
  protected final String TEXT_575 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_576 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_577 = NL;
  protected final String TEXT_578 = NL;
  protected final String TEXT_579 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_580 = " domainModelRefresher = new ";
  protected final String TEXT_581 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_582 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_583 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_584 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_585 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_586 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_587 = NL;
  protected final String TEXT_588 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_589 = " domainModelRefresher = new ";
  protected final String TEXT_590 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_591 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_592 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_593 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_594 = NL;
d1064 4
d1070 27
d1098 1
a1098 1
    stringBuffer.append(TEXT_95);
d1100 1
a1100 1
    stringBuffer.append(TEXT_96);
d1102 1
a1102 1
    stringBuffer.append(TEXT_97);
d1104 36
a1139 1
    stringBuffer.append(TEXT_98);
d1143 1
a1143 1
    stringBuffer.append(TEXT_99);
d1145 1
a1145 1
    stringBuffer.append(TEXT_100);
d1147 1
a1147 1
    stringBuffer.append(TEXT_101);
d1149 1
a1149 1
    stringBuffer.append(TEXT_102);
d1151 1
a1151 1
    stringBuffer.append(TEXT_103);
d1155 1
a1155 1
    stringBuffer.append(TEXT_104);
d1157 1
a1157 1
    stringBuffer.append(TEXT_105);
d1159 1
a1159 1
    stringBuffer.append(TEXT_106);
d1161 1
a1161 1
    stringBuffer.append(TEXT_107);
d1163 1
a1163 1
    stringBuffer.append(TEXT_108);
d1165 1
a1165 1
    stringBuffer.append(TEXT_109);
d1167 1
a1167 1
    stringBuffer.append(TEXT_110);
d1169 1
a1169 1
    stringBuffer.append(TEXT_111);
d1171 1
a1171 1
    stringBuffer.append(TEXT_112);
d1173 1
a1173 1
    stringBuffer.append(TEXT_113);
d1184 1
a1184 1
    stringBuffer.append(TEXT_114);
d1186 1
a1186 1
    stringBuffer.append(TEXT_115);
d1188 1
a1188 1
    stringBuffer.append(TEXT_116);
d1190 1
a1190 1
    stringBuffer.append(TEXT_117);
d1192 1
a1192 1
    stringBuffer.append(TEXT_118);
d1194 1
a1194 1
    stringBuffer.append(TEXT_119);
d1196 1
a1196 1
    stringBuffer.append(TEXT_120);
d1198 1
a1198 1
    stringBuffer.append(TEXT_121);
d1200 1
a1200 1
    stringBuffer.append(TEXT_122);
d1202 1
a1202 1
    stringBuffer.append(TEXT_123);
d1204 1
a1204 1
    stringBuffer.append(TEXT_124);
d1208 1
a1208 1
    stringBuffer.append(TEXT_125);
d1212 1
a1212 1
    stringBuffer.append(TEXT_126);
d1214 1
a1214 1
    stringBuffer.append(TEXT_127);
d1216 1
a1216 1
    stringBuffer.append(TEXT_128);
d1220 1
a1220 1
    stringBuffer.append(TEXT_129);
d1227 1
a1227 1
    stringBuffer.append(TEXT_130);
d1229 1
a1229 1
    stringBuffer.append(TEXT_131);
d1231 1
a1231 1
    stringBuffer.append(TEXT_132);
d1233 1
a1233 1
    stringBuffer.append(TEXT_133);
d1235 1
a1235 1
    stringBuffer.append(TEXT_134);
d1237 1
a1237 1
    stringBuffer.append(TEXT_135);
d1239 1
a1239 1
    stringBuffer.append(TEXT_136);
d1241 1
a1241 1
    stringBuffer.append(TEXT_137);
d1243 1
a1243 1
    stringBuffer.append(TEXT_138);
d1245 1
a1245 1
    stringBuffer.append(TEXT_139);
d1247 1
a1247 1
    stringBuffer.append(TEXT_140);
d1249 1
a1249 1
    stringBuffer.append(TEXT_141);
d1251 1
a1251 1
    stringBuffer.append(TEXT_142);
d1253 1
a1253 1
    stringBuffer.append(TEXT_143);
d1255 1
a1255 1
    stringBuffer.append(TEXT_144);
d1257 1
a1257 1
    stringBuffer.append(TEXT_145);
d1259 1
a1259 1
    stringBuffer.append(TEXT_146);
d1261 1
a1261 1
    stringBuffer.append(TEXT_147);
d1263 1
a1263 1
    stringBuffer.append(TEXT_148);
d1265 1
a1265 1
    stringBuffer.append(TEXT_149);
d1267 1
a1267 1
    stringBuffer.append(TEXT_150);
d1275 1
a1275 1
    stringBuffer.append(TEXT_151);
d1277 1
a1277 1
    stringBuffer.append(TEXT_152);
d1279 1
a1279 1
    stringBuffer.append(TEXT_153);
d1281 1
a1281 1
    stringBuffer.append(TEXT_154);
d1283 1
a1283 1
    stringBuffer.append(TEXT_155);
d1285 1
a1285 1
    stringBuffer.append(TEXT_156);
d1287 74
a1360 1
    stringBuffer.append(TEXT_157);
d1362 1
a1362 1
    stringBuffer.append(TEXT_158);
d1364 1
a1364 1
    stringBuffer.append(TEXT_159);
d1366 1
a1366 1
    stringBuffer.append(TEXT_160);
d1368 1
a1368 1
    stringBuffer.append(TEXT_161);
d1372 1
a1372 1
    stringBuffer.append(TEXT_162);
d1374 1
a1374 1
    stringBuffer.append(TEXT_163);
d1376 1
a1376 1
    stringBuffer.append(TEXT_164);
d1378 1
a1378 1
    stringBuffer.append(TEXT_165);
d1380 1
a1380 1
    stringBuffer.append(TEXT_166);
d1384 1
a1384 1
    stringBuffer.append(TEXT_167);
d1386 1
a1386 1
    stringBuffer.append(TEXT_168);
d1388 1
a1388 1
    stringBuffer.append(TEXT_169);
d1390 1
a1390 1
    stringBuffer.append(TEXT_170);
d1392 1
a1392 1
    stringBuffer.append(TEXT_171);
d1403 1
a1403 1
    stringBuffer.append(TEXT_172);
d1405 1
a1405 1
    stringBuffer.append(TEXT_173);
d1407 1
a1407 1
    stringBuffer.append(TEXT_174);
d1409 1
a1409 1
    stringBuffer.append(TEXT_175);
d1411 1
a1411 1
    stringBuffer.append(TEXT_176);
d1413 1
a1413 1
    stringBuffer.append(TEXT_177);
d1415 1
a1415 1
    stringBuffer.append(TEXT_178);
d1417 1
a1417 1
    stringBuffer.append(TEXT_179);
d1419 1
a1419 1
    stringBuffer.append(TEXT_180);
d1421 1
a1421 1
    stringBuffer.append(TEXT_181);
d1423 1
a1423 1
    stringBuffer.append(TEXT_182);
d1428 1
a1428 1
    stringBuffer.append(TEXT_183);
d1430 1
a1430 1
    stringBuffer.append(TEXT_184);
d1432 1
a1432 1
    stringBuffer.append(TEXT_185);
d1439 1
a1439 1
    stringBuffer.append(TEXT_186);
d1441 1
a1441 1
    stringBuffer.append(TEXT_187);
d1443 1
a1443 1
    stringBuffer.append(TEXT_188);
d1445 3
a1447 3
    stringBuffer.append(TEXT_189);
    stringBuffer.append(TEXT_190);
    stringBuffer.append(TEXT_191);
d1449 1
a1449 1
    stringBuffer.append(TEXT_192);
d1451 1
a1451 1
    stringBuffer.append(TEXT_193);
d1453 1
a1453 1
    stringBuffer.append(TEXT_194);
d1455 1
a1455 1
    stringBuffer.append(TEXT_195);
d1457 1
a1457 1
    stringBuffer.append(TEXT_196);
d1459 1
a1459 1
    stringBuffer.append(TEXT_197);
d1461 1
a1461 1
    stringBuffer.append(TEXT_198);
d1463 1
a1463 1
    stringBuffer.append(TEXT_199);
d1465 1
a1465 1
    stringBuffer.append(TEXT_200);
d1470 1
a1470 1
    stringBuffer.append(TEXT_201);
d1474 1
a1474 1
    stringBuffer.append(TEXT_202);
d1476 1
a1476 1
    stringBuffer.append(TEXT_203);
d1478 1
a1478 1
    stringBuffer.append(TEXT_204);
d1480 1
a1480 1
    stringBuffer.append(TEXT_205);
d1482 1
a1482 1
    stringBuffer.append(TEXT_206);
a1487 1
	String resolvedSemanticElement = "parent.getElement()";
d1489 1
a1489 1
    stringBuffer.append(TEXT_207);
d1493 1
a1493 1
    stringBuffer.append(TEXT_208);
d1495 1
a1495 1
    stringBuffer.append(TEXT_209);
d1497 1
a1497 1
    stringBuffer.append(TEXT_210);
d1500 1
a1500 1
    stringBuffer.append(TEXT_211);
d1502 1
a1502 1
    stringBuffer.append(TEXT_212);
d1504 1
a1504 1
    stringBuffer.append(TEXT_213);
d1507 1
a1507 1
    stringBuffer.append(TEXT_214);
d1509 1
a1509 1
    stringBuffer.append(TEXT_215);
d1511 1
a1511 1
    stringBuffer.append(TEXT_216);
d1513 1
a1513 1
    stringBuffer.append(TEXT_217);
d1515 1
a1515 1
    stringBuffer.append(TEXT_218);
d1517 1
a1517 1
    stringBuffer.append(TEXT_219);
d1519 1
a1519 1
    stringBuffer.append(TEXT_220);
d1521 1
a1521 1
    stringBuffer.append(TEXT_221);
d1526 1
a1526 1
    stringBuffer.append(TEXT_222);
d1528 1
a1528 1
    stringBuffer.append(TEXT_223);
d1530 1
a1530 1
    stringBuffer.append(TEXT_224);
d1532 1
a1532 1
    stringBuffer.append(TEXT_225);
d1534 1
a1534 1
    stringBuffer.append(TEXT_226);
d1538 1
a1538 1
    stringBuffer.append(TEXT_227);
d1540 1
a1540 1
    stringBuffer.append(TEXT_228);
d1542 1
a1542 1
    stringBuffer.append(TEXT_229);
d1544 1
a1544 1
    stringBuffer.append(TEXT_230);
d1548 1
a1548 1
    stringBuffer.append(TEXT_231);
d1550 1
a1550 1
    stringBuffer.append(TEXT_232);
d1552 1
a1552 1
    stringBuffer.append(TEXT_233);
d1554 1
a1554 1
    stringBuffer.append(TEXT_234);
d1556 1
a1556 1
    stringBuffer.append(TEXT_235);
d1558 1
a1558 1
    stringBuffer.append(TEXT_236);
d1560 1
a1560 1
    stringBuffer.append(TEXT_237);
d1565 35
d1601 31
d1633 1
a1633 1
    stringBuffer.append(TEXT_238);
d1635 1
a1635 1
    stringBuffer.append(TEXT_239);
d1637 1
a1637 1
    stringBuffer.append(TEXT_240);
d1639 1
a1639 3
    stringBuffer.append(TEXT_241);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_242);
d1641 1
a1641 1
    stringBuffer.append(TEXT_243);
d1643 1
a1643 1
    stringBuffer.append(TEXT_244);
d1645 1
a1645 3
    stringBuffer.append(TEXT_245);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_246);
d1647 1
a1647 1
    stringBuffer.append(TEXT_247);
d1649 1
a1649 1
    stringBuffer.append(TEXT_248);
d1653 1
a1653 1
    stringBuffer.append(TEXT_249);
d1655 1
a1655 3
    stringBuffer.append(TEXT_250);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_251);
d1657 1
a1657 1
    stringBuffer.append(TEXT_252);
d1659 1
a1659 1
    stringBuffer.append(TEXT_253);
d1673 1
a1673 1
    stringBuffer.append(TEXT_254);
d1675 1
a1675 1
    stringBuffer.append(TEXT_255);
d1677 1
a1677 1
    stringBuffer.append(TEXT_256);
d1679 1
a1679 1
    stringBuffer.append(TEXT_257);
d1683 1
a1683 1
    stringBuffer.append(TEXT_258);
d1685 1
a1685 1
    stringBuffer.append(TEXT_259);
d1687 1
a1687 1
    stringBuffer.append(TEXT_260);
d1689 1
a1689 1
    stringBuffer.append(TEXT_261);
d1691 1
a1691 1
    stringBuffer.append(TEXT_262);
d1693 1
a1693 1
    stringBuffer.append(TEXT_263);
d1695 1
a1695 1
    stringBuffer.append(TEXT_264);
d1697 1
a1697 1
    stringBuffer.append(TEXT_265);
d1699 1
a1699 1
    stringBuffer.append(TEXT_266);
d1706 3
a1708 3
    stringBuffer.append(TEXT_267);
    stringBuffer.append(TEXT_268);
    stringBuffer.append(TEXT_269);
d1710 1
a1710 1
    stringBuffer.append(TEXT_270);
d1712 1
a1712 1
    stringBuffer.append(TEXT_271);
d1714 3
a1716 3
    stringBuffer.append(TEXT_272);
    stringBuffer.append(TEXT_273);
    stringBuffer.append(TEXT_274);
d1718 1
a1718 1
    stringBuffer.append(TEXT_275);
d1720 1
a1720 1
    stringBuffer.append(TEXT_276);
d1725 1
a1725 1
    stringBuffer.append(TEXT_277);
d1729 1
a1729 1
    stringBuffer.append(TEXT_278);
d1734 1
a1734 1
    stringBuffer.append(TEXT_279);
d1738 1
a1738 1
    stringBuffer.append(TEXT_280);
d1746 2
a1747 2
    stringBuffer.append(TEXT_281);
    stringBuffer.append(TEXT_282);
d1749 1
a1749 1
    stringBuffer.append(TEXT_283);
d1751 1
a1751 1
    stringBuffer.append(TEXT_284);
d1753 1
a1753 1
    stringBuffer.append(TEXT_285);
d1755 1
a1755 1
    stringBuffer.append(TEXT_286);
d1757 1
a1757 1
    stringBuffer.append(TEXT_287);
d1759 1
a1759 1
    stringBuffer.append(TEXT_288);
d1761 1
a1761 1
    stringBuffer.append(TEXT_289);
d1776 1
a1776 1
    stringBuffer.append(TEXT_290);
d1778 1
a1778 1
    stringBuffer.append(TEXT_291);
d1780 1
a1780 1
    stringBuffer.append(TEXT_292);
d1782 1
a1782 1
    stringBuffer.append(TEXT_293);
d1786 1
a1786 1
    stringBuffer.append(TEXT_294);
d1788 1
a1788 1
    stringBuffer.append(TEXT_295);
d1807 1
a1807 1
    stringBuffer.append(TEXT_296);
d1809 1
a1809 1
    stringBuffer.append(TEXT_297);
d1811 1
a1811 1
    stringBuffer.append(TEXT_298);
d1813 1
a1813 1
    stringBuffer.append(TEXT_299);
d1815 1
a1815 1
    stringBuffer.append(TEXT_300);
d1819 1
a1819 1
    stringBuffer.append(TEXT_301);
d1821 1
a1821 1
    stringBuffer.append(TEXT_302);
d1823 1
a1823 1
    stringBuffer.append(TEXT_303);
d1825 1
a1825 1
    stringBuffer.append(TEXT_304);
d1833 1
a1833 1
    stringBuffer.append(TEXT_305);
d1835 1
a1835 1
    stringBuffer.append(TEXT_306);
d1837 1
a1837 1
    stringBuffer.append(TEXT_307);
d1842 1
a1842 1
    stringBuffer.append(TEXT_308);
d1844 1
a1844 1
    stringBuffer.append(TEXT_309);
d1846 1
a1846 1
    stringBuffer.append(TEXT_310);
d1848 1
a1848 1
    stringBuffer.append(TEXT_311);
d1857 1
a1857 1
    stringBuffer.append(TEXT_312);
d1861 1
a1861 1
    stringBuffer.append(TEXT_313);
d1863 1
a1863 1
    stringBuffer.append(TEXT_314);
d1869 1
a1869 1
    stringBuffer.append(TEXT_315);
d1871 1
a1871 1
    stringBuffer.append(TEXT_316);
d1873 1
a1873 1
    stringBuffer.append(TEXT_317);
d1877 1
a1877 1
    stringBuffer.append(TEXT_318);
d1881 1
a1881 1
    stringBuffer.append(TEXT_319);
d1883 1
a1883 1
    stringBuffer.append(TEXT_320);
d1885 1
a1885 1
    stringBuffer.append(TEXT_321);
d1890 2
a1891 2
    stringBuffer.append(TEXT_322);
    stringBuffer.append(TEXT_323);
d1893 1
a1893 1
    stringBuffer.append(TEXT_324);
d1903 1
a1903 1
    stringBuffer.append(TEXT_325);
d1905 1
a1905 1
    stringBuffer.append(TEXT_326);
d1907 1
a1907 1
    stringBuffer.append(TEXT_327);
d1909 1
a1909 1
    stringBuffer.append(TEXT_328);
d1911 1
a1911 1
    stringBuffer.append(TEXT_329);
d1922 1
a1922 1
    stringBuffer.append(TEXT_330);
d1924 1
a1924 1
    stringBuffer.append(TEXT_331);
d1926 1
a1926 1
    stringBuffer.append(TEXT_332);
d1928 1
a1928 1
    stringBuffer.append(TEXT_333);
d1932 1
a1932 1
    stringBuffer.append(TEXT_334);
d1936 1
a1936 1
    stringBuffer.append(TEXT_335);
d1938 1
a1938 1
    stringBuffer.append(TEXT_336);
d1942 1
a1942 1
    stringBuffer.append(TEXT_337);
d1946 1
a1946 1
    stringBuffer.append(TEXT_338);
d1948 2
a1949 2
    stringBuffer.append(TEXT_339);
    stringBuffer.append(TEXT_340);
d1953 1
a1953 1
    stringBuffer.append(TEXT_341);
d1955 1
a1955 1
    stringBuffer.append(TEXT_342);
d1959 1
a1959 1
    stringBuffer.append(TEXT_343);
d1961 1
a1961 1
    stringBuffer.append(TEXT_344);
d1963 1
a1963 1
    stringBuffer.append(TEXT_345);
d1981 1
a1981 1
    stringBuffer.append(TEXT_346);
d1983 1
a1983 1
    stringBuffer.append(TEXT_347);
d1985 1
a1985 1
    stringBuffer.append(TEXT_348);
d1987 1
a1987 1
    stringBuffer.append(TEXT_349);
d1989 1
a1989 1
    stringBuffer.append(TEXT_350);
d1998 1
a1998 1
    stringBuffer.append(TEXT_351);
d2000 1
a2000 1
    stringBuffer.append(TEXT_352);
d2002 1
a2002 1
    stringBuffer.append(TEXT_353);
d2004 1
a2004 1
    stringBuffer.append(TEXT_354);
d2008 1
a2008 1
    stringBuffer.append(TEXT_355);
d2010 1
a2010 1
    stringBuffer.append(TEXT_356);
d2012 1
a2012 1
    stringBuffer.append(TEXT_357);
d2016 1
a2016 1
    stringBuffer.append(TEXT_358);
d2018 1
a2018 1
    stringBuffer.append(TEXT_359);
d2023 1
a2023 1
    stringBuffer.append(TEXT_360);
d2030 1
a2030 1
    stringBuffer.append(TEXT_361);
d2032 1
a2032 1
    stringBuffer.append(TEXT_362);
d2036 1
a2036 1
    stringBuffer.append(TEXT_363);
d2038 1
a2038 1
    stringBuffer.append(TEXT_364);
d2042 1
a2042 1
    stringBuffer.append(TEXT_365);
d2044 1
a2044 1
    stringBuffer.append(TEXT_366);
d2048 1
a2048 1
    stringBuffer.append(TEXT_367);
d2052 1
a2052 1
    stringBuffer.append(TEXT_368);
d2058 1
a2058 1
    stringBuffer.append(TEXT_369);
d2063 1
a2063 1
    stringBuffer.append(TEXT_370);
d2068 1
a2068 1
    stringBuffer.append(TEXT_371);
d2072 1
a2072 1
    stringBuffer.append(TEXT_372);
d2074 1
a2074 1
    stringBuffer.append(TEXT_373);
d2076 1
a2076 1
    stringBuffer.append(TEXT_374);
d2078 1
a2078 1
    stringBuffer.append(TEXT_375);
d2080 1
a2080 1
    stringBuffer.append(TEXT_376);
d2082 1
a2082 1
    stringBuffer.append(TEXT_377);
d2084 1
a2084 1
    stringBuffer.append(TEXT_378);
d2086 1
a2086 1
    stringBuffer.append(TEXT_379);
d2088 1
a2088 1
    stringBuffer.append(TEXT_380);
d2090 1
a2090 1
    stringBuffer.append(TEXT_381);
d2092 1
a2092 1
    stringBuffer.append(TEXT_382);
d2094 2
a2095 2
    stringBuffer.append(TEXT_383);
    stringBuffer.append(TEXT_384);
d2099 1
a2099 1
    stringBuffer.append(TEXT_385);
d2101 1
a2101 1
    stringBuffer.append(TEXT_386);
d2103 1
a2103 1
    stringBuffer.append(TEXT_387);
d2105 1
a2105 1
    stringBuffer.append(TEXT_388);
d2107 1
a2107 1
    stringBuffer.append(TEXT_389);
d2109 1
a2109 1
    stringBuffer.append(TEXT_390);
d2111 1
a2111 1
    stringBuffer.append(TEXT_391);
d2113 1
a2113 1
    stringBuffer.append(TEXT_392);
d2115 1
a2115 1
    stringBuffer.append(TEXT_393);
d2128 1
a2128 1
    stringBuffer.append(TEXT_394);
d2130 1
a2130 1
    stringBuffer.append(TEXT_395);
d2132 1
a2132 1
    stringBuffer.append(TEXT_396);
d2134 1
a2134 1
    stringBuffer.append(TEXT_397);
d2139 1
a2139 1
    stringBuffer.append(TEXT_398);
d2141 1
a2141 1
    stringBuffer.append(TEXT_399);
d2143 1
a2143 1
    stringBuffer.append(TEXT_400);
d2145 1
a2145 1
    stringBuffer.append(TEXT_401);
d2147 1
a2147 1
    stringBuffer.append(TEXT_402);
d2149 1
a2149 1
    stringBuffer.append(TEXT_403);
d2151 1
a2151 1
    stringBuffer.append(TEXT_404);
d2153 1
a2153 1
    stringBuffer.append(TEXT_405);
d2155 1
a2155 1
    stringBuffer.append(TEXT_406);
d2157 1
a2157 1
    stringBuffer.append(TEXT_407);
d2161 1
a2161 1
    stringBuffer.append(TEXT_408);
d2163 1
a2163 1
    stringBuffer.append(TEXT_409);
d2176 1
a2176 1
    stringBuffer.append(TEXT_410);
d2190 1
a2190 1
    stringBuffer.append(TEXT_411);
d2192 1
a2192 1
    stringBuffer.append(TEXT_412);
d2194 1
a2194 1
    stringBuffer.append(TEXT_413);
d2196 1
a2196 1
    stringBuffer.append(TEXT_414);
d2198 1
a2198 1
    stringBuffer.append(TEXT_415);
d2202 1
a2202 1
    stringBuffer.append(TEXT_416);
d2204 1
a2204 1
    stringBuffer.append(TEXT_417);
d2206 1
a2206 1
    stringBuffer.append(TEXT_418);
d2208 1
a2208 1
    stringBuffer.append(TEXT_419);
d2215 1
a2215 1
    stringBuffer.append(TEXT_420);
d2229 1
a2229 1
    stringBuffer.append(TEXT_421);
d2231 1
a2231 1
    stringBuffer.append(TEXT_422);
d2233 1
a2233 1
    stringBuffer.append(TEXT_423);
d2235 1
a2235 1
    stringBuffer.append(TEXT_424);
d2237 1
a2237 1
    stringBuffer.append(TEXT_425);
d2241 1
a2241 1
    stringBuffer.append(TEXT_426);
d2243 1
a2243 1
    stringBuffer.append(TEXT_427);
d2245 1
a2245 1
    stringBuffer.append(TEXT_428);
d2247 1
a2247 1
    stringBuffer.append(TEXT_429);
d2254 1
a2254 1
    stringBuffer.append(TEXT_430);
d2268 1
a2268 1
    stringBuffer.append(TEXT_431);
d2270 1
a2270 1
    stringBuffer.append(TEXT_432);
d2272 1
a2272 1
    stringBuffer.append(TEXT_433);
d2274 1
a2274 1
    stringBuffer.append(TEXT_434);
d2276 1
a2276 1
    stringBuffer.append(TEXT_435);
d2280 1
a2280 1
    stringBuffer.append(TEXT_436);
d2282 1
a2282 1
    stringBuffer.append(TEXT_437);
d2284 1
a2284 1
    stringBuffer.append(TEXT_438);
d2286 1
a2286 1
    stringBuffer.append(TEXT_439);
d2296 1
a2296 1
    stringBuffer.append(TEXT_440);
d2310 1
a2310 1
    stringBuffer.append(TEXT_441);
d2312 1
a2312 1
    stringBuffer.append(TEXT_442);
d2314 1
a2314 1
    stringBuffer.append(TEXT_443);
d2316 1
a2316 1
    stringBuffer.append(TEXT_444);
d2318 1
a2318 1
    stringBuffer.append(TEXT_445);
d2322 1
a2322 1
    stringBuffer.append(TEXT_446);
d2324 1
a2324 1
    stringBuffer.append(TEXT_447);
d2326 1
a2326 1
    stringBuffer.append(TEXT_448);
d2328 1
a2328 1
    stringBuffer.append(TEXT_449);
d2337 1
a2337 1
    stringBuffer.append(TEXT_450);
d2342 1
a2342 1
    stringBuffer.append(TEXT_451);
d2344 1
a2344 1
    stringBuffer.append(TEXT_452);
d2351 1
a2351 1
    stringBuffer.append(TEXT_453);
d2356 1
a2356 1
    stringBuffer.append(TEXT_454);
d2358 1
a2358 1
    stringBuffer.append(TEXT_455);
d2364 1
a2364 1
    stringBuffer.append(TEXT_456);
d2366 1
a2366 1
    stringBuffer.append(TEXT_457);
d2368 1
a2368 1
    stringBuffer.append(TEXT_458);
d2373 1
a2373 1
    stringBuffer.append(TEXT_459);
d2375 1
a2375 1
    stringBuffer.append(TEXT_460);
d2377 1
a2377 1
    stringBuffer.append(TEXT_461);
d2379 1
a2379 1
    stringBuffer.append(TEXT_462);
d2381 1
a2381 1
    stringBuffer.append(TEXT_463);
d2388 2
a2389 2
    stringBuffer.append(TEXT_464);
    stringBuffer.append(TEXT_465);
d2391 1
a2391 1
    stringBuffer.append(TEXT_466);
d2393 1
a2393 1
    stringBuffer.append(TEXT_467);
d2395 1
a2395 1
    stringBuffer.append(TEXT_468);
d2404 1
a2404 1
    stringBuffer.append(TEXT_469);
d2406 1
a2406 1
    stringBuffer.append(TEXT_470);
d2408 1
a2408 1
    stringBuffer.append(TEXT_471);
d2410 1
a2410 1
    stringBuffer.append(TEXT_472);
d2416 1
a2416 1
    stringBuffer.append(TEXT_473);
d2418 1
a2418 1
    stringBuffer.append(TEXT_474);
d2420 1
a2420 1
    stringBuffer.append(TEXT_475);
d2424 1
a2424 1
    stringBuffer.append(TEXT_476);
d2426 1
a2426 1
    stringBuffer.append(TEXT_477);
d2428 1
a2428 1
    stringBuffer.append(TEXT_478);
d2432 1
a2432 1
    stringBuffer.append(TEXT_479);
d2434 1
a2434 1
    stringBuffer.append(TEXT_480);
d2440 2
a2441 2
    stringBuffer.append(TEXT_481);
    stringBuffer.append(TEXT_482);
d2443 1
a2443 1
    stringBuffer.append(TEXT_483);
d2445 1
a2445 1
    stringBuffer.append(TEXT_484);
d2468 1
a2468 1
    stringBuffer.append(TEXT_485);
d2470 1
a2470 1
    stringBuffer.append(TEXT_486);
d2472 1
a2472 1
    stringBuffer.append(TEXT_487);
d2474 1
a2474 1
    stringBuffer.append(TEXT_488);
d2479 1
a2479 1
    stringBuffer.append(TEXT_489);
d2488 1
a2488 1
    stringBuffer.append(TEXT_490);
d2490 1
a2490 1
    stringBuffer.append(TEXT_491);
d2492 1
a2492 1
    stringBuffer.append(TEXT_492);
d2494 1
a2494 1
    stringBuffer.append(TEXT_493);
d2498 1
a2498 1
    stringBuffer.append(TEXT_494);
d2500 1
a2500 1
    stringBuffer.append(TEXT_495);
d2502 1
a2502 1
    stringBuffer.append(TEXT_496);
d2506 1
a2506 1
    stringBuffer.append(TEXT_497);
d2508 1
a2508 1
    stringBuffer.append(TEXT_498);
d2513 1
a2513 1
    stringBuffer.append(TEXT_499);
d2521 1
a2521 1
    stringBuffer.append(TEXT_500);
d2523 1
a2523 1
    stringBuffer.append(TEXT_501);
d2527 1
a2527 1
    stringBuffer.append(TEXT_502);
d2529 1
a2529 1
    stringBuffer.append(TEXT_503);
d2534 1
a2534 1
    stringBuffer.append(TEXT_504);
d2536 1
a2536 1
    stringBuffer.append(TEXT_505);
d2538 1
a2538 1
    stringBuffer.append(TEXT_506);
d2540 1
a2540 1
    stringBuffer.append(TEXT_507);
d2544 1
a2544 1
    stringBuffer.append(TEXT_508);
d2546 1
a2546 1
    stringBuffer.append(TEXT_509);
d2548 1
a2548 1
    stringBuffer.append(TEXT_510);
d2553 1
a2553 1
    stringBuffer.append(TEXT_511);
d2555 1
a2555 1
    stringBuffer.append(TEXT_512);
d2557 1
a2557 1
    stringBuffer.append(TEXT_513);
d2559 1
a2559 1
    stringBuffer.append(TEXT_514);
d2563 1
a2563 1
    stringBuffer.append(TEXT_515);
d2565 1
a2565 1
    stringBuffer.append(TEXT_516);
d2567 1
a2567 1
    stringBuffer.append(TEXT_517);
d2571 1
a2571 1
    stringBuffer.append(TEXT_518);
d2573 1
a2573 1
    stringBuffer.append(TEXT_519);
d2577 1
a2577 1
    stringBuffer.append(TEXT_520);
d2581 1
a2581 1
    stringBuffer.append(TEXT_521);
d2589 1
a2589 1
    stringBuffer.append(TEXT_522);
d2594 1
a2594 1
    stringBuffer.append(TEXT_523);
d2604 1
a2604 1
    stringBuffer.append(TEXT_524);
d2606 1
a2606 1
    stringBuffer.append(TEXT_525);
d2608 1
a2608 1
    stringBuffer.append(TEXT_526);
d2610 1
a2610 1
    stringBuffer.append(TEXT_527);
d2614 1
a2614 1
    stringBuffer.append(TEXT_528);
d2616 1
a2616 1
    stringBuffer.append(TEXT_529);
d2618 1
a2618 1
    stringBuffer.append(TEXT_530);
d2622 1
a2622 1
    stringBuffer.append(TEXT_531);
d2627 1
a2627 1
    stringBuffer.append(TEXT_532);
d2629 1
a2629 1
    stringBuffer.append(TEXT_533);
d2631 1
a2631 1
    stringBuffer.append(TEXT_534);
d2635 1
a2635 1
    stringBuffer.append(TEXT_535);
d2639 1
a2639 1
    stringBuffer.append(TEXT_536);
d2644 1
a2644 1
    stringBuffer.append(TEXT_537);
d2648 1
a2648 1
    stringBuffer.append(TEXT_538);
d2650 1
a2650 1
    stringBuffer.append(TEXT_539);
d2652 1
a2652 1
    stringBuffer.append(TEXT_540);
d2654 1
a2654 1
    stringBuffer.append(TEXT_541);
d2656 1
a2656 1
    stringBuffer.append(TEXT_542);
d2658 1
a2658 1
    stringBuffer.append(TEXT_543);
d2660 1
a2660 1
    stringBuffer.append(TEXT_544);
d2662 1
a2662 1
    stringBuffer.append(TEXT_545);
d2664 1
a2664 1
    stringBuffer.append(TEXT_546);
d2668 1
a2668 1
    stringBuffer.append(TEXT_547);
d2670 1
a2670 1
    stringBuffer.append(TEXT_548);
d2672 1
a2672 1
    stringBuffer.append(TEXT_549);
d2677 1
a2677 1
    stringBuffer.append(TEXT_550);
d2679 1
a2679 1
    stringBuffer.append(TEXT_551);
d2681 1
a2681 1
    stringBuffer.append(TEXT_552);
d2686 1
a2686 1
    stringBuffer.append(TEXT_553);
d2688 1
a2688 1
    stringBuffer.append(TEXT_554);
d2692 1
a2692 1
    stringBuffer.append(TEXT_555);
d2696 1
a2696 1
    stringBuffer.append(TEXT_556);
d2700 1
a2700 1
    stringBuffer.append(TEXT_557);
d2707 1
a2707 1
    stringBuffer.append(TEXT_558);
d2711 1
a2711 1
    stringBuffer.append(TEXT_559);
d2713 1
a2713 1
    stringBuffer.append(TEXT_560);
d2715 1
a2715 1
    stringBuffer.append(TEXT_561);
d2720 1
a2720 1
    stringBuffer.append(TEXT_562);
d2722 1
a2722 1
    stringBuffer.append(TEXT_563);
d2726 1
a2726 1
    stringBuffer.append(TEXT_564);
d2730 1
a2730 1
    stringBuffer.append(TEXT_565);
d2732 1
a2732 1
    stringBuffer.append(TEXT_566);
d2734 1
a2734 1
    stringBuffer.append(TEXT_567);
d2736 1
a2736 1
    stringBuffer.append(TEXT_568);
d2738 1
a2738 1
    stringBuffer.append(TEXT_569);
d2740 1
a2740 1
    stringBuffer.append(TEXT_570);
d2742 1
a2742 1
    stringBuffer.append(TEXT_571);
d2744 1
a2744 1
    stringBuffer.append(TEXT_572);
d2746 1
a2746 1
    stringBuffer.append(TEXT_573);
d2748 1
a2748 1
    stringBuffer.append(TEXT_574);
d2750 1
a2750 1
    stringBuffer.append(TEXT_575);
d2752 1
a2752 1
    stringBuffer.append(TEXT_576);
d2759 3
a2761 3
    stringBuffer.append(TEXT_577);
    stringBuffer.append(TEXT_578);
    stringBuffer.append(TEXT_579);
d2763 1
a2763 1
    stringBuffer.append(TEXT_580);
d2765 1
a2765 1
    stringBuffer.append(TEXT_581);
d2767 1
a2767 1
    stringBuffer.append(TEXT_582);
d2769 1
a2769 1
    stringBuffer.append(TEXT_583);
d2771 1
a2771 1
    stringBuffer.append(TEXT_584);
d2773 1
a2773 1
    stringBuffer.append(TEXT_585);
d2775 3
a2777 3
    stringBuffer.append(TEXT_586);
    stringBuffer.append(TEXT_587);
    stringBuffer.append(TEXT_588);
d2779 1
a2779 1
    stringBuffer.append(TEXT_589);
d2781 1
a2781 1
    stringBuffer.append(TEXT_590);
d2783 1
a2783 1
    stringBuffer.append(TEXT_591);
d2785 1
a2785 1
    stringBuffer.append(TEXT_592);
d2787 1
a2787 1
    stringBuffer.append(TEXT_593);
d2789 1
a2789 1
    stringBuffer.append(TEXT_594);
@


1.13
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d38 83
a120 83
  protected final String TEXT_19 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_20 = " extends AbstractGraphicalEditPart implements ";
  protected final String TEXT_21 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String MODEL_ID = \"";
  protected final String TEXT_22 = "\";" + NL;
  protected final String TEXT_23 = NL;
  protected final String TEXT_24 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_25 = ";";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_27 = "(";
  protected final String TEXT_28 = " model) {" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_29 = " getDiagram() {" + NL + "\t\treturn (";
  protected final String TEXT_30 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_33 = " view = (";
  protected final String TEXT_34 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_35 = " view = (";
  protected final String TEXT_36 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\tsuper.addNotify();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {" + NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_37 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_38 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_39 = " requestEx = (";
  protected final String TEXT_40 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_41 = " result = new ";
  protected final String TEXT_42 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_43 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_44 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_45 = "Command(getDiagram(), requestEx, (";
  protected final String TEXT_46 = ")getConstraintFor(request)));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_47 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_48 = "(";
  protected final String TEXT_49 = ".getEditingDomain(getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_50 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_51 = " createChangeConstraintCommand(final ";
  protected final String TEXT_52 = " request, final ";
  protected final String TEXT_53 = " child, Object constraint) {";
  protected final String TEXT_54 = NL;
  protected final String TEXT_55 = "\t\t\t\tfinal ";
  protected final String TEXT_56 = " node = (";
  protected final String TEXT_57 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_58 = " emfCommand = new ";
  protected final String TEXT_59 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_60 = " moveDelta;" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_61 = " resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof ";
  protected final String TEXT_62 = " == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_63 = " bounds = (";
  protected final String TEXT_64 = ") node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_65 = " original = new ";
  protected final String TEXT_66 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_67 = " referenceFigure = ((";
  protected final String TEXT_68 = ")child).getFigure();" + NL + "\t\t\t\t\t\treferenceFigure.translateToAbsolute(original);" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_69 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(transformed);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_70 = " move, ";
  protected final String TEXT_71 = " resize) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_72 = " bounds = (";
  protected final String TEXT_73 = ") node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_74 = "(";
  protected final String TEXT_75 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_76 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_77 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_78 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_79 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_80 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_81 = "(this);" + NL + "\t\t}" + NL + "\t\tif (";
  protected final String TEXT_82 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_83 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_86 = "static ";
  protected final String TEXT_87 = "class Create";
  protected final String TEXT_88 = "Command extends ";
  protected final String TEXT_89 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_90 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_91 = "Command(";
  protected final String TEXT_92 = " parent, ";
  protected final String TEXT_93 = " request";
  protected final String TEXT_94 = ", ";
  protected final String TEXT_95 = " constraint";
  protected final String TEXT_96 = ") {" + NL + "\t\t\t";
  protected final String TEXT_97 = " domainModelEditDomain = ";
  protected final String TEXT_98 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_99 = NL + "\t\t\t";
  protected final String TEXT_100 = " createdDomainElement = ";
  protected final String TEXT_101 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
d122 205
a326 205
  protected final String TEXT_103 = "());";
  protected final String TEXT_104 = NL + "\t\t\t";
  protected final String TEXT_105 = " createdDomainElement = ";
  protected final String TEXT_106 = ".eINSTANCE.create";
  protected final String TEXT_107 = "();";
  protected final String TEXT_108 = NL + "\t\t\t";
  protected final String TEXT_109 = NL + "\t\t\t";
  protected final String TEXT_110 = ".";
  protected final String TEXT_111 = ".initializeElement(";
  protected final String TEXT_112 = "(";
  protected final String TEXT_113 = ") ";
  protected final String TEXT_114 = "createdDomainElement);";
  protected final String TEXT_115 = NL + "\t\t\t";
  protected final String TEXT_116 = " compoundCommand = new ";
  protected final String TEXT_117 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_118 = ".create(domainModelEditDomain, ";
  protected final String TEXT_119 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_120 = ".eINSTANCE.get";
  protected final String TEXT_121 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_122 = ".create(domainModelEditDomain, ";
  protected final String TEXT_123 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_124 = ".eINSTANCE.get";
  protected final String TEXT_125 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_126 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_127 = ".create(domainModelEditDomain, ";
  protected final String TEXT_128 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_129 = ".eINSTANCE.get";
  protected final String TEXT_130 = "(), createdDomainElement);";
  protected final String TEXT_131 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_132 = "(";
  protected final String TEXT_133 = ", ";
  protected final String TEXT_134 = "));";
  protected final String TEXT_135 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_136 = "(parent, ";
  protected final String TEXT_137 = "(";
  protected final String TEXT_138 = ") ";
  protected final String TEXT_139 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_140 = "constraint";
  protected final String TEXT_141 = "null";
  protected final String TEXT_142 = ", ";
  protected final String TEXT_143 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_144 = NL;
  protected final String TEXT_145 = NL;
  protected final String TEXT_146 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_147 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_148 = " feature, ";
  protected final String TEXT_149 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_152 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_153 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_154 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_155 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_156 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_157 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_158 = NL;
  protected final String TEXT_159 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_160 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_161 = " domainModelEditDomain = ";
  protected final String TEXT_162 = ".getEditingDomain(";
  protected final String TEXT_163 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_164 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_165 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_166 = " {";
  protected final String TEXT_167 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_168 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_169 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_170 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_171 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_172 = " createFilter() {";
  protected final String TEXT_173 = NL + "\t\t\t";
  protected final String TEXT_174 = " filter = ";
  protected final String TEXT_175 = ".createFeatureFilter(";
  protected final String TEXT_176 = ".eINSTANCE.get";
  protected final String TEXT_177 = "());";
  protected final String TEXT_178 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_179 = ".createFeatureFilter(";
  protected final String TEXT_180 = ".eINSTANCE.get";
  protected final String TEXT_181 = "()));";
  protected final String TEXT_182 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_183 = ".createNotifierFilter(";
  protected final String TEXT_184 = ".getElement()));";
  protected final String TEXT_185 = NL + "\t\t\t";
  protected final String TEXT_186 = " filter = ";
  protected final String TEXT_187 = ".createNotifierFilter(";
  protected final String TEXT_188 = ".getElement());";
  protected final String TEXT_189 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_190 = NL + "\t\t\t";
  protected final String TEXT_191 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_192 = NL + "\t\t\t";
  protected final String TEXT_193 = " filter = ";
  protected final String TEXT_194 = ".NOT_TOUCH;";
  protected final String TEXT_195 = NL + "\t\t\treturn filter;";
  protected final String TEXT_196 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_197 = " getCreateNotationalElementCommand(";
  protected final String TEXT_198 = " descriptor) {";
  protected final String TEXT_199 = NL;
  protected final String TEXT_200 = "\t\t\t";
  protected final String TEXT_201 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_202 = NL + "\t\t\tcase ";
  protected final String TEXT_203 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_204 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_205 = "(";
  protected final String TEXT_206 = ", domainElement, ";
  protected final String TEXT_207 = "new ";
  protected final String TEXT_208 = "(0, 0, ";
  protected final String TEXT_209 = ", ";
  protected final String TEXT_210 = ")";
  protected final String TEXT_211 = NL + "null";
  protected final String TEXT_212 = ", ";
  protected final String TEXT_213 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_214 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_215 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_216 = " getSemanticChildNodes() {";
  protected final String TEXT_217 = NL;
  protected final String TEXT_218 = NL + "\treturn ";
  protected final String TEXT_219 = ".EMPTY_LIST;";
  protected final String TEXT_220 = NL + "\t";
  protected final String TEXT_221 = " result = new ";
  protected final String TEXT_222 = "();";
  protected final String TEXT_223 = NL + "\t";
  protected final String TEXT_224 = " viewObject = ";
  protected final String TEXT_225 = ";" + NL + "\t";
  protected final String TEXT_226 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_227 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_228 = NL + "\tfor(";
  protected final String TEXT_229 = " it = ";
  protected final String TEXT_230 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_231 = ") it.next();";
  protected final String TEXT_232 = NL + "\tnextValue = (";
  protected final String TEXT_233 = ")";
  protected final String TEXT_234 = ";";
  protected final String TEXT_235 = NL + "\tnodeVID = ";
  protected final String TEXT_236 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_237 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_238 = NL + "\tcase ";
  protected final String TEXT_239 = ".VISUAL_ID: {";
  protected final String TEXT_240 = NL + "\tif (";
  protected final String TEXT_241 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_242 = NL + "\t\tresult.add(new ";
  protected final String TEXT_243 = "(nextValue, nodeVID));";
  protected final String TEXT_244 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_245 = NL + "\t\t}";
  protected final String TEXT_246 = NL + "\t}";
  protected final String TEXT_247 = NL + "\t}";
  protected final String TEXT_248 = NL + "\treturn result;";
  protected final String TEXT_249 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_250 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_251 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_252 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_253 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_254 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_255 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_256 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_257 = " domainModelEditDomain = ";
  protected final String TEXT_258 = ".getEditingDomain(";
  protected final String TEXT_259 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_260 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_261 = NL;
  protected final String TEXT_262 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_263 = " domainModelEditDomain = ";
  protected final String TEXT_264 = ".getEditingDomain(";
  protected final String TEXT_265 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_266 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_267 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_268 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_269 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_270 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_271 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_272 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_273 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_274 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_275 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_276 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_277 = ".createEventTypeFilter(";
  protected final String TEXT_278 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_279 = ".createEventTypeFilter(";
  protected final String TEXT_280 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_281 = ".createEventTypeFilter(";
  protected final String TEXT_282 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_283 = ".createEventTypeFilter(";
  protected final String TEXT_284 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_285 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_286 = " createFilter() {";
  protected final String TEXT_287 = NL;
  protected final String TEXT_288 = NL + "\t\t\t";
  protected final String TEXT_289 = " filter = ";
  protected final String TEXT_290 = ".createFeatureFilter(";
  protected final String TEXT_291 = ".eINSTANCE.get";
  protected final String TEXT_292 = "());";
  protected final String TEXT_293 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_294 = ".createFeatureFilter(";
  protected final String TEXT_295 = ".eINSTANCE.get";
  protected final String TEXT_296 = "()));";
  protected final String TEXT_297 = NL;
  protected final String TEXT_298 = NL + "\t\t\t";
  protected final String TEXT_299 = " filter = ";
  protected final String TEXT_300 = ".createFeatureFilter(";
  protected final String TEXT_301 = ".eINSTANCE.get";
  protected final String TEXT_302 = "());";
  protected final String TEXT_303 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_304 = ".createFeatureFilter(";
  protected final String TEXT_305 = ".eINSTANCE.get";
  protected final String TEXT_306 = "()));";
  protected final String TEXT_307 = NL;
d329 154
a482 154
  protected final String TEXT_310 = ".createFeatureFilter(";
  protected final String TEXT_311 = ".eINSTANCE.get";
  protected final String TEXT_312 = "());";
  protected final String TEXT_313 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_314 = ".createFeatureFilter(";
  protected final String TEXT_315 = ".eINSTANCE.get";
  protected final String TEXT_316 = "()));";
  protected final String TEXT_317 = NL;
  protected final String TEXT_318 = NL + "\t\t\t";
  protected final String TEXT_319 = " filter = ";
  protected final String TEXT_320 = ".createFeatureFilter(";
  protected final String TEXT_321 = ".eINSTANCE.get";
  protected final String TEXT_322 = "());";
  protected final String TEXT_323 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_324 = ".createFeatureFilter(";
  protected final String TEXT_325 = ".eINSTANCE.get";
  protected final String TEXT_326 = "()));";
  protected final String TEXT_327 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_328 = NL + "\t\t\t";
  protected final String TEXT_329 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_330 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_331 = NL + "\t\t\t";
  protected final String TEXT_332 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_333 = NL + "\t\t\t";
  protected final String TEXT_334 = " filter = ";
  protected final String TEXT_335 = ".NOT_TOUCH;";
  protected final String TEXT_336 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_337 = " getCreateNotationalElementCommand(";
  protected final String TEXT_338 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_339 = " linkDescriptor = (";
  protected final String TEXT_340 = ") descriptor;";
  protected final String TEXT_341 = NL;
  protected final String TEXT_342 = "\t\t\t";
  protected final String TEXT_343 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_344 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_345 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_346 = NL + "\t\t\tcase ";
  protected final String TEXT_347 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_348 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_349 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_350 = NL + "\t\t\tcase ";
  protected final String TEXT_351 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_352 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_353 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_354 = "(";
  protected final String TEXT_355 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_356 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_357 = " getSemanticChildLinks() {";
  protected final String TEXT_358 = NL;
  protected final String TEXT_359 = "\t";
  protected final String TEXT_360 = " result = new ";
  protected final String TEXT_361 = "();";
  protected final String TEXT_362 = NL + "\t";
  protected final String TEXT_363 = " modelObject = ";
  protected final String TEXT_364 = ".getElement();" + NL + "\t";
  protected final String TEXT_365 = " nextValue;";
  protected final String TEXT_366 = NL + "\tint linkVID;";
  protected final String TEXT_367 = NL + "\tfor(";
  protected final String TEXT_368 = " it = ";
  protected final String TEXT_369 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_370 = ") it.next();";
  protected final String TEXT_371 = NL + "\tnextValue = (";
  protected final String TEXT_372 = ")";
  protected final String TEXT_373 = ";";
  protected final String TEXT_374 = NL + "\tlinkVID = ";
  protected final String TEXT_375 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_376 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_377 = NL + "\tcase ";
  protected final String TEXT_378 = ".VISUAL_ID: {";
  protected final String TEXT_379 = NL + "\tif (";
  protected final String TEXT_380 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_381 = NL + "\t\t";
  protected final String TEXT_382 = " source = (";
  protected final String TEXT_383 = ")";
  protected final String TEXT_384 = ";";
  protected final String TEXT_385 = NL + "\t\t";
  protected final String TEXT_386 = " source = ";
  protected final String TEXT_387 = ".getElement();";
  protected final String TEXT_388 = NL + "\t\t";
  protected final String TEXT_389 = " target = (";
  protected final String TEXT_390 = ")";
  protected final String TEXT_391 = ";";
  protected final String TEXT_392 = NL + "\t\t";
  protected final String TEXT_393 = " target = ";
  protected final String TEXT_394 = ".getElement();";
  protected final String TEXT_395 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_396 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_397 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_398 = NL + "\t}";
  protected final String TEXT_399 = NL + "\t}";
  protected final String TEXT_400 = NL + "\t}";
  protected final String TEXT_401 = NL + "\tfor(";
  protected final String TEXT_402 = " it = ";
  protected final String TEXT_403 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_404 = ") it.next();";
  protected final String TEXT_405 = NL + "\tnextValue = (";
  protected final String TEXT_406 = ")";
  protected final String TEXT_407 = ";";
  protected final String TEXT_408 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_409 = NL + "\t\tresult.add(new ";
  protected final String TEXT_410 = "(modelObject, nextValue, null, ";
  protected final String TEXT_411 = ".VISUAL_ID));";
  protected final String TEXT_412 = NL + "\t}";
  protected final String TEXT_413 = NL + "\t}";
  protected final String TEXT_414 = NL + "\treturn result;";
  protected final String TEXT_415 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_416 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_417 = " result = new ";
  protected final String TEXT_418 = "();" + NL + "\t\t\t";
  protected final String TEXT_419 = " allLinks = ";
  protected final String TEXT_420 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_421 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_422 = " next = (";
  protected final String TEXT_423 = ") it.next();";
  protected final String TEXT_424 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_425 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_426 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_427 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_428 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_429 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_430 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_431 = ".VISUAL_ID:";
  protected final String TEXT_432 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_433 = NL + "\t\t\t\t} else {";
  protected final String TEXT_434 = NL + "\t\t\t\t}";
  protected final String TEXT_435 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_436 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_437 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_438 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_439 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_440 = ".VISUAL_ID:";
  protected final String TEXT_441 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_442 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_443 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_444 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_445 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_446 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_447 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_448 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_449 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_450 = " domainModelEditDomain = ";
  protected final String TEXT_451 = ".getEditingDomain(";
  protected final String TEXT_452 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_453 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_454 = NL;
  protected final String TEXT_455 = NL;
  protected final String TEXT_456 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_457 = " domainModelRefresher = new ";
  protected final String TEXT_458 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_459 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_460 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_461 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_462 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_463 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
d484 130
a613 7
  protected final String TEXT_465 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_466 = " domainModelRefresher = new ";
  protected final String TEXT_467 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_468 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_469 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_470 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_471 = NL;
d702 27
d785 1
a785 1
    stringBuffer.append(TEXT_18);
d815 1
a815 1
    stringBuffer.append(TEXT_19);
d817 1
a817 1
    stringBuffer.append(TEXT_20);
d819 1
a819 1
    stringBuffer.append(TEXT_21);
d821 1
a821 1
    stringBuffer.append(TEXT_22);
a823 1
    stringBuffer.append(TEXT_23);
d825 1
d827 1
a827 1
    stringBuffer.append(TEXT_25);
d829 1
a829 1
    stringBuffer.append(TEXT_26);
a830 2
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d836 1
a838 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d846 2
a848 2
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d854 1
a854 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d858 2
d864 1
a864 1
    stringBuffer.append(TEXT_43);
d866 1
a866 1
    stringBuffer.append(TEXT_44);
d869 1
a869 1
    stringBuffer.append(TEXT_45);
d871 1
a871 1
    stringBuffer.append(TEXT_46);
d875 1
a875 1
    stringBuffer.append(TEXT_47);
d877 1
a877 1
    stringBuffer.append(TEXT_48);
d879 1
a879 1
    stringBuffer.append(TEXT_49);
a880 2
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d882 5
a886 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
d888 4
a892 1
    stringBuffer.append(TEXT_53);
d894 1
d900 1
a900 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d902 1
a902 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d904 1
a904 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d906 1
a906 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d908 1
a908 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d910 1
a910 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d912 1
a912 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d914 1
a914 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d916 4
a919 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d921 1
a921 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d923 1
a923 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d925 1
a925 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d927 1
a927 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d929 5
a933 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d935 8
a942 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d944 1
a944 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d946 5
a950 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d952 1
a952 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d954 1
a954 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d956 1
a956 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d959 1
a959 2
//link notation model refresher should always be installed for the diagram edit part, because it tracks the uncontained links
//if (myHelper.containsLinks()) {
d962 1
a962 3
    
//}

d964 1
a964 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.SnapToHelper"));
d966 1
a966 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.SnapToGrid"));
d968 1
a968 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.TreeEditPart"));
a969 2
    /*@@ include file="adapters/propertySource.javajetinc"*/
    stringBuffer.append(TEXT_83);
d971 3
a973 5
for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenTopLevelNode next = (GenTopLevelNode)it.next();
	boolean isStatic = true;
	boolean isListLayout = false;
	String resolvedSemanticElement = "parent.getElement()";
d975 2
d978 4
d983 1
a983 1
if (genDiagram.getPalette() != null) {
a984 4
    stringBuffer.append(TEXT_85);
    if (isStatic) {
    stringBuffer.append(TEXT_86);
    }
d986 1
a986 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d988 1
a988 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d990 1
a990 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
d992 1
a992 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d994 4
a997 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d999 5
a1003 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d1005 8
a1012 1
    if (!isListLayout) {
d1014 1
a1014 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1016 1
a1016 1
    }
d1018 1
a1018 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1020 1
a1020 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1023 1
a1023 2
	if (next.getDomainMetaClass().isMapEntry()) {
	/*Workaround for Ecore example: map entries cannot be created using factory, only using reflective EFactory.create() method*/
d1026 1
a1026 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1028 1
a1028 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
d1030 1
a1030 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()));
d1032 1
a1032 1
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
d1035 1
a1035 1
	} else {
d1038 1
a1038 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getQualifiedInterfaceName()));
d1040 1
a1040 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
d1042 1
a1042 1
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
d1044 1
a1044 3
    
	}

d1046 1
a1046 1
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
d1048 1
a1048 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
d1050 1
a1050 1
    stringBuffer.append(next.getUniqueIdentifier());
d1052 1
a1052 1
    if (next.getDomainMetaClass().isExternalInterface()) {
d1054 1
a1054 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a1055 2
    }
    stringBuffer.append(TEXT_114);
d1057 8
a1064 4
	TypeModelFacet facet = next.getModelFacet();
	GenFeature childFeature = facet.getChildMetaFeature();
	GenFeature containmentFeature = facet.getContainmentMetaFeature();
	if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
d1066 2
d1069 1
a1069 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1071 1
a1071 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1073 1
a1073 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1075 1
a1075 1
    stringBuffer.append(resolvedSemanticElement);
d1077 1
a1077 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1079 1
a1079 1
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
d1081 1
a1081 1
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1083 1
a1083 1
    stringBuffer.append(resolvedSemanticElement);
d1085 1
a1085 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1087 3
a1089 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
d1092 1
a1092 1
	} else {
d1095 1
a1095 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1097 1
a1097 1
    stringBuffer.append(resolvedSemanticElement);
d1099 3
a1101 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a1102 2
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_130);
d1104 1
a1104 1
	}
d1107 1
a1107 8
	if (!isListLayout) {
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}
d1109 2
d1112 1
a1112 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d1114 1
a1114 1
    stringBuffer.append(defaultWidth);
d1116 1
a1116 1
    stringBuffer.append(defaultHeight);
d1118 1
a1118 3
    
	}

d1120 1
a1120 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
d1122 1
a1122 1
    if (next.getDomainMetaClass().isExternalInterface()) {
d1124 1
a1124 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1126 1
a1126 1
    }
d1128 1
a1128 1
    if(!isListLayout) {
d1130 1
a1130 1
    } else {
d1132 1
a1132 1
    }
d1134 97
d1232 218
a1449 1
    stringBuffer.append(TEXT_143);
d1456 3
a1458 3
    stringBuffer.append(TEXT_144);
    stringBuffer.append(TEXT_145);
    stringBuffer.append(TEXT_146);
d1460 1
a1460 1
    stringBuffer.append(TEXT_147);
d1462 1
a1462 1
    stringBuffer.append(TEXT_148);
d1464 3
a1466 3
    stringBuffer.append(TEXT_149);
    stringBuffer.append(TEXT_150);
    stringBuffer.append(TEXT_151);
d1468 1
a1468 1
    stringBuffer.append(TEXT_152);
d1470 1
a1470 1
    stringBuffer.append(TEXT_153);
d1475 1
a1475 1
    stringBuffer.append(TEXT_154);
d1479 1
a1479 1
    stringBuffer.append(TEXT_155);
d1484 1
a1484 1
    stringBuffer.append(TEXT_156);
d1488 1
a1488 1
    stringBuffer.append(TEXT_157);
d1496 2
a1497 2
    stringBuffer.append(TEXT_158);
    stringBuffer.append(TEXT_159);
d1499 1
a1499 1
    stringBuffer.append(TEXT_160);
d1501 1
a1501 1
    stringBuffer.append(TEXT_161);
d1503 1
a1503 1
    stringBuffer.append(TEXT_162);
d1505 1
a1505 1
    stringBuffer.append(TEXT_163);
d1507 1
a1507 1
    stringBuffer.append(TEXT_164);
d1509 1
a1509 1
    stringBuffer.append(TEXT_165);
d1511 1
a1511 1
    stringBuffer.append(TEXT_166);
d1526 1
a1526 1
    stringBuffer.append(TEXT_167);
d1528 1
a1528 1
    stringBuffer.append(TEXT_168);
d1530 1
a1530 1
    stringBuffer.append(TEXT_169);
d1532 1
a1532 1
    stringBuffer.append(TEXT_170);
d1536 1
a1536 1
    stringBuffer.append(TEXT_171);
d1538 1
a1538 1
    stringBuffer.append(TEXT_172);
d1557 1
a1557 1
    stringBuffer.append(TEXT_173);
d1559 1
a1559 1
    stringBuffer.append(TEXT_174);
d1561 1
a1561 1
    stringBuffer.append(TEXT_175);
d1563 1
a1563 1
    stringBuffer.append(TEXT_176);
d1565 1
a1565 1
    stringBuffer.append(TEXT_177);
d1569 1
a1569 1
    stringBuffer.append(TEXT_178);
d1571 1
a1571 1
    stringBuffer.append(TEXT_179);
d1573 1
a1573 1
    stringBuffer.append(TEXT_180);
d1575 1
a1575 1
    stringBuffer.append(TEXT_181);
d1583 1
a1583 1
    stringBuffer.append(TEXT_182);
d1585 1
a1585 1
    stringBuffer.append(TEXT_183);
d1587 1
a1587 1
    stringBuffer.append(TEXT_184);
d1592 1
a1592 1
    stringBuffer.append(TEXT_185);
d1594 1
a1594 1
    stringBuffer.append(TEXT_186);
d1596 1
a1596 1
    stringBuffer.append(TEXT_187);
d1598 1
a1598 1
    stringBuffer.append(TEXT_188);
d1607 1
a1607 1
    stringBuffer.append(TEXT_189);
d1611 1
a1611 1
    stringBuffer.append(TEXT_190);
d1613 1
a1613 1
    stringBuffer.append(TEXT_191);
d1619 1
a1619 1
    stringBuffer.append(TEXT_192);
d1621 1
a1621 1
    stringBuffer.append(TEXT_193);
d1623 1
a1623 1
    stringBuffer.append(TEXT_194);
d1627 1
a1627 1
    stringBuffer.append(TEXT_195);
d1631 1
a1631 1
    stringBuffer.append(TEXT_196);
d1633 1
a1633 1
    stringBuffer.append(TEXT_197);
d1635 1
a1635 1
    stringBuffer.append(TEXT_198);
d1640 2
a1641 2
    stringBuffer.append(TEXT_199);
    stringBuffer.append(TEXT_200);
d1643 1
a1643 1
    stringBuffer.append(TEXT_201);
d1653 1
a1653 1
    stringBuffer.append(TEXT_202);
d1655 1
a1655 1
    stringBuffer.append(TEXT_203);
d1657 1
a1657 1
    stringBuffer.append(TEXT_204);
d1659 1
a1659 1
    stringBuffer.append(TEXT_205);
d1661 1
a1661 1
    stringBuffer.append(TEXT_206);
d1672 1
a1672 1
    stringBuffer.append(TEXT_207);
d1674 1
a1674 1
    stringBuffer.append(TEXT_208);
d1676 1
a1676 1
    stringBuffer.append(TEXT_209);
d1678 1
a1678 1
    stringBuffer.append(TEXT_210);
d1682 1
a1682 1
    stringBuffer.append(TEXT_211);
d1686 1
a1686 1
    stringBuffer.append(TEXT_212);
d1688 1
a1688 1
    stringBuffer.append(TEXT_213);
d1692 1
a1692 1
    stringBuffer.append(TEXT_214);
d1696 1
a1696 1
    stringBuffer.append(TEXT_215);
d1698 2
a1699 2
    stringBuffer.append(TEXT_216);
    stringBuffer.append(TEXT_217);
d1703 1
a1703 1
    stringBuffer.append(TEXT_218);
d1705 1
a1705 1
    stringBuffer.append(TEXT_219);
d1709 1
a1709 1
    stringBuffer.append(TEXT_220);
d1711 1
a1711 1
    stringBuffer.append(TEXT_221);
d1713 1
a1713 1
    stringBuffer.append(TEXT_222);
d1731 1
a1731 1
    stringBuffer.append(TEXT_223);
d1733 1
a1733 1
    stringBuffer.append(TEXT_224);
d1735 1
a1735 1
    stringBuffer.append(TEXT_225);
d1737 1
a1737 1
    stringBuffer.append(TEXT_226);
d1739 1
a1739 1
    stringBuffer.append(TEXT_227);
d1748 1
a1748 1
    stringBuffer.append(TEXT_228);
d1750 1
a1750 1
    stringBuffer.append(TEXT_229);
d1752 1
a1752 1
    stringBuffer.append(TEXT_230);
d1754 1
a1754 1
    stringBuffer.append(TEXT_231);
d1758 1
a1758 1
    stringBuffer.append(TEXT_232);
d1760 1
a1760 1
    stringBuffer.append(TEXT_233);
d1762 1
a1762 1
    stringBuffer.append(TEXT_234);
d1766 1
a1766 1
    stringBuffer.append(TEXT_235);
d1768 1
a1768 1
    stringBuffer.append(TEXT_236);
d1773 1
a1773 1
    stringBuffer.append(TEXT_237);
d1780 1
a1780 1
    stringBuffer.append(TEXT_238);
d1782 1
a1782 1
    stringBuffer.append(TEXT_239);
d1786 1
a1786 1
    stringBuffer.append(TEXT_240);
d1788 1
a1788 1
    stringBuffer.append(TEXT_241);
d1792 1
a1792 1
    stringBuffer.append(TEXT_242);
d1794 1
a1794 1
    stringBuffer.append(TEXT_243);
d1798 1
a1798 1
    stringBuffer.append(TEXT_244);
d1802 1
a1802 1
    stringBuffer.append(TEXT_245);
d1808 1
a1808 1
    stringBuffer.append(TEXT_246);
d1813 1
a1813 1
    stringBuffer.append(TEXT_247);
d1818 1
a1818 1
    stringBuffer.append(TEXT_248);
d1822 1
a1822 1
    stringBuffer.append(TEXT_249);
d1824 1
a1824 1
    stringBuffer.append(TEXT_250);
d1826 1
a1826 1
    stringBuffer.append(TEXT_251);
d1828 1
a1828 1
    stringBuffer.append(TEXT_252);
d1830 1
a1830 1
    stringBuffer.append(TEXT_253);
d1832 1
a1832 1
    stringBuffer.append(TEXT_254);
d1834 1
a1834 1
    stringBuffer.append(TEXT_255);
d1836 1
a1836 1
    stringBuffer.append(TEXT_256);
d1838 1
a1838 1
    stringBuffer.append(TEXT_257);
d1840 1
a1840 1
    stringBuffer.append(TEXT_258);
d1842 1
a1842 1
    stringBuffer.append(TEXT_259);
d1844 2
a1845 2
    stringBuffer.append(TEXT_260);
    stringBuffer.append(TEXT_261);
d1849 1
a1849 1
    stringBuffer.append(TEXT_262);
d1851 1
a1851 1
    stringBuffer.append(TEXT_263);
d1853 1
a1853 1
    stringBuffer.append(TEXT_264);
d1855 1
a1855 1
    stringBuffer.append(TEXT_265);
d1857 1
a1857 1
    stringBuffer.append(TEXT_266);
d1859 1
a1859 1
    stringBuffer.append(TEXT_267);
d1861 1
a1861 1
    stringBuffer.append(TEXT_268);
d1863 1
a1863 1
    stringBuffer.append(TEXT_269);
d1865 1
a1865 1
    stringBuffer.append(TEXT_270);
d1878 1
a1878 1
    stringBuffer.append(TEXT_271);
d1880 1
a1880 1
    stringBuffer.append(TEXT_272);
d1882 1
a1882 1
    stringBuffer.append(TEXT_273);
d1884 1
a1884 1
    stringBuffer.append(TEXT_274);
d1889 1
a1889 1
    stringBuffer.append(TEXT_275);
d1891 1
a1891 1
    stringBuffer.append(TEXT_276);
d1893 1
a1893 1
    stringBuffer.append(TEXT_277);
d1895 1
a1895 1
    stringBuffer.append(TEXT_278);
d1897 1
a1897 1
    stringBuffer.append(TEXT_279);
d1899 1
a1899 1
    stringBuffer.append(TEXT_280);
d1901 1
a1901 1
    stringBuffer.append(TEXT_281);
d1903 1
a1903 1
    stringBuffer.append(TEXT_282);
d1905 1
a1905 1
    stringBuffer.append(TEXT_283);
d1907 1
a1907 1
    stringBuffer.append(TEXT_284);
d1911 1
a1911 1
    stringBuffer.append(TEXT_285);
d1913 1
a1913 1
    stringBuffer.append(TEXT_286);
d1926 1
a1926 1
    stringBuffer.append(TEXT_287);
d1940 1
a1940 1
    stringBuffer.append(TEXT_288);
d1942 1
a1942 1
    stringBuffer.append(TEXT_289);
d1944 1
a1944 1
    stringBuffer.append(TEXT_290);
d1946 1
a1946 1
    stringBuffer.append(TEXT_291);
d1948 1
a1948 1
    stringBuffer.append(TEXT_292);
d1952 1
a1952 1
    stringBuffer.append(TEXT_293);
d1954 1
a1954 1
    stringBuffer.append(TEXT_294);
d1956 1
a1956 1
    stringBuffer.append(TEXT_295);
d1958 1
a1958 1
    stringBuffer.append(TEXT_296);
d1965 1
a1965 1
    stringBuffer.append(TEXT_297);
d1979 1
a1979 1
    stringBuffer.append(TEXT_298);
d1981 1
a1981 1
    stringBuffer.append(TEXT_299);
d1983 1
a1983 1
    stringBuffer.append(TEXT_300);
d1985 1
a1985 1
    stringBuffer.append(TEXT_301);
d1987 1
a1987 1
    stringBuffer.append(TEXT_302);
d1991 1
a1991 1
    stringBuffer.append(TEXT_303);
d1993 1
a1993 1
    stringBuffer.append(TEXT_304);
d1995 1
a1995 1
    stringBuffer.append(TEXT_305);
d1997 1
a1997 1
    stringBuffer.append(TEXT_306);
d2004 1
a2004 1
    stringBuffer.append(TEXT_307);
d2018 1
a2018 1
    stringBuffer.append(TEXT_308);
d2020 1
a2020 1
    stringBuffer.append(TEXT_309);
d2022 1
a2022 1
    stringBuffer.append(TEXT_310);
d2024 1
a2024 1
    stringBuffer.append(TEXT_311);
d2026 1
a2026 1
    stringBuffer.append(TEXT_312);
d2030 1
a2030 1
    stringBuffer.append(TEXT_313);
d2032 1
a2032 1
    stringBuffer.append(TEXT_314);
d2034 1
a2034 1
    stringBuffer.append(TEXT_315);
d2036 1
a2036 1
    stringBuffer.append(TEXT_316);
d2046 1
a2046 1
    stringBuffer.append(TEXT_317);
d2060 1
a2060 1
    stringBuffer.append(TEXT_318);
d2062 1
a2062 1
    stringBuffer.append(TEXT_319);
d2064 1
a2064 1
    stringBuffer.append(TEXT_320);
d2066 1
a2066 1
    stringBuffer.append(TEXT_321);
d2068 1
a2068 1
    stringBuffer.append(TEXT_322);
d2072 1
a2072 1
    stringBuffer.append(TEXT_323);
d2074 1
a2074 1
    stringBuffer.append(TEXT_324);
d2076 1
a2076 1
    stringBuffer.append(TEXT_325);
d2078 1
a2078 1
    stringBuffer.append(TEXT_326);
d2087 1
a2087 1
    stringBuffer.append(TEXT_327);
d2092 1
a2092 1
    stringBuffer.append(TEXT_328);
d2094 1
a2094 1
    stringBuffer.append(TEXT_329);
d2101 1
a2101 1
    stringBuffer.append(TEXT_330);
d2106 1
a2106 1
    stringBuffer.append(TEXT_331);
d2108 1
a2108 1
    stringBuffer.append(TEXT_332);
d2114 1
a2114 1
    stringBuffer.append(TEXT_333);
d2116 1
a2116 1
    stringBuffer.append(TEXT_334);
d2118 1
a2118 1
    stringBuffer.append(TEXT_335);
d2123 1
a2123 1
    stringBuffer.append(TEXT_336);
d2125 1
a2125 1
    stringBuffer.append(TEXT_337);
d2127 1
a2127 1
    stringBuffer.append(TEXT_338);
d2129 1
a2129 1
    stringBuffer.append(TEXT_339);
d2131 1
a2131 1
    stringBuffer.append(TEXT_340);
d2138 2
a2139 2
    stringBuffer.append(TEXT_341);
    stringBuffer.append(TEXT_342);
d2141 1
a2141 1
    stringBuffer.append(TEXT_343);
d2143 1
a2143 1
    stringBuffer.append(TEXT_344);
d2145 1
a2145 1
    stringBuffer.append(TEXT_345);
d2154 1
a2154 1
    stringBuffer.append(TEXT_346);
d2156 1
a2156 1
    stringBuffer.append(TEXT_347);
d2158 1
a2158 1
    stringBuffer.append(TEXT_348);
d2160 1
a2160 1
    stringBuffer.append(TEXT_349);
d2166 1
a2166 1
    stringBuffer.append(TEXT_350);
d2168 1
a2168 1
    stringBuffer.append(TEXT_351);
d2170 1
a2170 1
    stringBuffer.append(TEXT_352);
d2174 1
a2174 1
    stringBuffer.append(TEXT_353);
d2176 1
a2176 1
    stringBuffer.append(TEXT_354);
d2178 1
a2178 1
    stringBuffer.append(TEXT_355);
d2182 1
a2182 1
    stringBuffer.append(TEXT_356);
d2184 1
a2184 1
    stringBuffer.append(TEXT_357);
d2190 2
a2191 2
    stringBuffer.append(TEXT_358);
    stringBuffer.append(TEXT_359);
d2193 1
a2193 1
    stringBuffer.append(TEXT_360);
d2195 1
a2195 1
    stringBuffer.append(TEXT_361);
d2218 1
a2218 1
    stringBuffer.append(TEXT_362);
d2220 1
a2220 1
    stringBuffer.append(TEXT_363);
d2222 1
a2222 1
    stringBuffer.append(TEXT_364);
d2224 1
a2224 1
    stringBuffer.append(TEXT_365);
d2229 1
a2229 1
    stringBuffer.append(TEXT_366);
d2238 1
a2238 1
    stringBuffer.append(TEXT_367);
d2240 1
a2240 1
    stringBuffer.append(TEXT_368);
d2242 1
a2242 1
    stringBuffer.append(TEXT_369);
d2244 1
a2244 1
    stringBuffer.append(TEXT_370);
d2248 1
a2248 1
    stringBuffer.append(TEXT_371);
d2250 1
a2250 1
    stringBuffer.append(TEXT_372);
d2252 1
a2252 1
    stringBuffer.append(TEXT_373);
d2256 1
a2256 1
    stringBuffer.append(TEXT_374);
d2258 1
a2258 1
    stringBuffer.append(TEXT_375);
d2263 1
a2263 1
    stringBuffer.append(TEXT_376);
d2271 1
a2271 1
    stringBuffer.append(TEXT_377);
d2273 1
a2273 1
    stringBuffer.append(TEXT_378);
d2277 1
a2277 1
    stringBuffer.append(TEXT_379);
d2279 1
a2279 1
    stringBuffer.append(TEXT_380);
d2284 1
a2284 1
    stringBuffer.append(TEXT_381);
d2286 1
a2286 1
    stringBuffer.append(TEXT_382);
d2288 1
a2288 1
    stringBuffer.append(TEXT_383);
d2290 1
a2290 1
    stringBuffer.append(TEXT_384);
d2294 1
a2294 1
    stringBuffer.append(TEXT_385);
d2296 1
a2296 1
    stringBuffer.append(TEXT_386);
d2298 1
a2298 1
    stringBuffer.append(TEXT_387);
d2303 1
a2303 1
    stringBuffer.append(TEXT_388);
d2305 1
a2305 1
    stringBuffer.append(TEXT_389);
d2307 1
a2307 1
    stringBuffer.append(TEXT_390);
d2309 1
a2309 1
    stringBuffer.append(TEXT_391);
d2313 1
a2313 1
    stringBuffer.append(TEXT_392);
d2315 1
a2315 1
    stringBuffer.append(TEXT_393);
d2317 1
a2317 1
    stringBuffer.append(TEXT_394);
d2321 1
a2321 1
    stringBuffer.append(TEXT_395);
d2323 1
a2323 1
    stringBuffer.append(TEXT_396);
d2327 1
a2327 1
    stringBuffer.append(TEXT_397);
d2331 1
a2331 1
    stringBuffer.append(TEXT_398);
d2339 1
a2339 1
    stringBuffer.append(TEXT_399);
d2344 1
a2344 1
    stringBuffer.append(TEXT_400);
d2354 1
a2354 1
    stringBuffer.append(TEXT_401);
d2356 1
a2356 1
    stringBuffer.append(TEXT_402);
d2358 1
a2358 1
    stringBuffer.append(TEXT_403);
d2360 1
a2360 1
    stringBuffer.append(TEXT_404);
d2364 1
a2364 1
    stringBuffer.append(TEXT_405);
d2366 1
a2366 1
    stringBuffer.append(TEXT_406);
d2368 1
a2368 1
    stringBuffer.append(TEXT_407);
d2372 1
a2372 1
    stringBuffer.append(TEXT_408);
d2377 1
a2377 1
    stringBuffer.append(TEXT_409);
d2379 1
a2379 1
    stringBuffer.append(TEXT_410);
d2381 1
a2381 1
    stringBuffer.append(TEXT_411);
d2385 1
a2385 1
    stringBuffer.append(TEXT_412);
d2389 1
a2389 1
    stringBuffer.append(TEXT_413);
d2394 1
a2394 1
    stringBuffer.append(TEXT_414);
d2398 1
a2398 1
    stringBuffer.append(TEXT_415);
d2400 1
a2400 1
    stringBuffer.append(TEXT_416);
d2402 1
a2402 1
    stringBuffer.append(TEXT_417);
d2404 1
a2404 1
    stringBuffer.append(TEXT_418);
d2406 1
a2406 1
    stringBuffer.append(TEXT_419);
d2408 1
a2408 1
    stringBuffer.append(TEXT_420);
d2410 1
a2410 1
    stringBuffer.append(TEXT_421);
d2412 1
a2412 1
    stringBuffer.append(TEXT_422);
d2414 1
a2414 1
    stringBuffer.append(TEXT_423);
d2418 1
a2418 1
    stringBuffer.append(TEXT_424);
d2420 1
a2420 1
    stringBuffer.append(TEXT_425);
d2422 1
a2422 1
    stringBuffer.append(TEXT_426);
d2427 1
a2427 1
    stringBuffer.append(TEXT_427);
d2429 1
a2429 1
    stringBuffer.append(TEXT_428);
d2431 1
a2431 1
    stringBuffer.append(TEXT_429);
d2436 1
a2436 1
    stringBuffer.append(TEXT_430);
d2438 1
a2438 1
    stringBuffer.append(TEXT_431);
d2442 1
a2442 1
    stringBuffer.append(TEXT_432);
d2446 1
a2446 1
    stringBuffer.append(TEXT_433);
d2450 1
a2450 1
    stringBuffer.append(TEXT_434);
d2457 1
a2457 1
    stringBuffer.append(TEXT_435);
d2461 1
a2461 1
    stringBuffer.append(TEXT_436);
d2463 1
a2463 1
    stringBuffer.append(TEXT_437);
d2465 1
a2465 1
    stringBuffer.append(TEXT_438);
d2470 1
a2470 1
    stringBuffer.append(TEXT_439);
d2472 1
a2472 1
    stringBuffer.append(TEXT_440);
d2476 1
a2476 1
    stringBuffer.append(TEXT_441);
d2480 1
a2480 1
    stringBuffer.append(TEXT_442);
d2482 1
a2482 1
    stringBuffer.append(TEXT_443);
d2484 1
a2484 1
    stringBuffer.append(TEXT_444);
d2486 1
a2486 1
    stringBuffer.append(TEXT_445);
d2488 1
a2488 1
    stringBuffer.append(TEXT_446);
d2490 1
a2490 1
    stringBuffer.append(TEXT_447);
d2492 1
a2492 1
    stringBuffer.append(TEXT_448);
d2494 1
a2494 1
    stringBuffer.append(TEXT_449);
d2496 1
a2496 1
    stringBuffer.append(TEXT_450);
d2498 1
a2498 1
    stringBuffer.append(TEXT_451);
d2500 1
a2500 1
    stringBuffer.append(TEXT_452);
d2502 1
a2502 1
    stringBuffer.append(TEXT_453);
d2509 3
a2511 3
    stringBuffer.append(TEXT_454);
    stringBuffer.append(TEXT_455);
    stringBuffer.append(TEXT_456);
d2513 1
a2513 1
    stringBuffer.append(TEXT_457);
d2515 1
a2515 1
    stringBuffer.append(TEXT_458);
d2517 1
a2517 1
    stringBuffer.append(TEXT_459);
d2519 1
a2519 1
    stringBuffer.append(TEXT_460);
d2521 1
a2521 1
    stringBuffer.append(TEXT_461);
d2523 1
a2523 1
    stringBuffer.append(TEXT_462);
d2525 3
a2527 3
    stringBuffer.append(TEXT_463);
    stringBuffer.append(TEXT_464);
    stringBuffer.append(TEXT_465);
d2529 1
a2529 1
    stringBuffer.append(TEXT_466);
d2531 1
a2531 1
    stringBuffer.append(TEXT_467);
d2533 1
a2533 1
    stringBuffer.append(TEXT_468);
d2535 1
a2535 1
    stringBuffer.append(TEXT_469);
d2537 1
a2537 1
    stringBuffer.append(TEXT_470);
d2539 1
a2539 1
    stringBuffer.append(TEXT_471);
@


1.12
log
@[156358] bblajer - Diagram overview with Lite runtime
@
text
@d104 1
a104 1
  protected final String TEXT_85 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
d107 44
a150 44
  protected final String TEXT_88 = "NotationCommand extends ";
  protected final String TEXT_89 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_90 = "NotationCommand(";
  protected final String TEXT_91 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_92 = " domainElement";
  protected final String TEXT_93 = ", ";
  protected final String TEXT_94 = " constraint";
  protected final String TEXT_95 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_96 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_97 = ".decorateView(createdNode);";
  protected final String TEXT_98 = NL + "\t\t\t";
  protected final String TEXT_99 = " bounds = ";
  protected final String TEXT_100 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_101 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_102 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_103 = "));";
  protected final String TEXT_104 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_105 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_106 = "static ";
  protected final String TEXT_107 = "class Create";
  protected final String TEXT_108 = "Command extends ";
  protected final String TEXT_109 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_110 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_111 = "Command(";
  protected final String TEXT_112 = " parent, ";
  protected final String TEXT_113 = " request";
  protected final String TEXT_114 = ", ";
  protected final String TEXT_115 = " constraint";
  protected final String TEXT_116 = ") {" + NL + "\t\t\t";
  protected final String TEXT_117 = " domainModelEditDomain = ";
  protected final String TEXT_118 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_119 = NL + "\t\t\t";
  protected final String TEXT_120 = " createdDomainElement = ";
  protected final String TEXT_121 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_122 = ".eINSTANCE.get";
  protected final String TEXT_123 = "());";
  protected final String TEXT_124 = NL + "\t\t\t";
  protected final String TEXT_125 = " createdDomainElement = ";
  protected final String TEXT_126 = ".eINSTANCE.create";
  protected final String TEXT_127 = "();";
  protected final String TEXT_128 = NL + "\t\t\t";
  protected final String TEXT_129 = NL + "\t\t\t";
  protected final String TEXT_130 = ".";
  protected final String TEXT_131 = ".initializeElement(";
d152 25
a176 25
  protected final String TEXT_133 = ") ";
  protected final String TEXT_134 = "createdDomainElement);";
  protected final String TEXT_135 = NL + "\t\t\t";
  protected final String TEXT_136 = " compoundCommand = new ";
  protected final String TEXT_137 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_138 = ".create(domainModelEditDomain, ";
  protected final String TEXT_139 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_140 = ".eINSTANCE.get";
  protected final String TEXT_141 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_142 = ".create(domainModelEditDomain, ";
  protected final String TEXT_143 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_144 = ".eINSTANCE.get";
  protected final String TEXT_145 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_146 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_147 = ".create(domainModelEditDomain, ";
  protected final String TEXT_148 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_149 = ".eINSTANCE.get";
  protected final String TEXT_150 = "(), createdDomainElement);";
  protected final String TEXT_151 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_152 = "NotationCommand(parent, ";
  protected final String TEXT_153 = "(";
  protected final String TEXT_154 = ") ";
  protected final String TEXT_155 = "createdDomainElement";
  protected final String TEXT_156 = ", constraint";
  protected final String TEXT_157 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
d178 174
a351 174
  protected final String TEXT_159 = NL;
  protected final String TEXT_160 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_161 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_162 = " feature, ";
  protected final String TEXT_163 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_164 = NL;
  protected final String TEXT_165 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_166 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_167 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_168 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_169 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_170 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_171 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_172 = NL;
  protected final String TEXT_173 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_174 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_175 = " domainModelEditDomain = ";
  protected final String TEXT_176 = ".getEditingDomain(";
  protected final String TEXT_177 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_178 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_179 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_180 = " {";
  protected final String TEXT_181 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_182 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_183 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_184 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_185 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_186 = " createFilter() {";
  protected final String TEXT_187 = NL + "\t\t\t";
  protected final String TEXT_188 = " filter = ";
  protected final String TEXT_189 = ".createFeatureFilter(";
  protected final String TEXT_190 = ".eINSTANCE.get";
  protected final String TEXT_191 = "());";
  protected final String TEXT_192 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_193 = ".createFeatureFilter(";
  protected final String TEXT_194 = ".eINSTANCE.get";
  protected final String TEXT_195 = "()));";
  protected final String TEXT_196 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_197 = ".createNotifierFilter(";
  protected final String TEXT_198 = ".getElement()));";
  protected final String TEXT_199 = NL + "\t\t\t";
  protected final String TEXT_200 = " filter = ";
  protected final String TEXT_201 = ".createNotifierFilter(";
  protected final String TEXT_202 = ".getElement());";
  protected final String TEXT_203 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_204 = NL + "\t\t\t";
  protected final String TEXT_205 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_206 = NL + "\t\t\t";
  protected final String TEXT_207 = " filter = ";
  protected final String TEXT_208 = ".NOT_TOUCH;";
  protected final String TEXT_209 = NL + "\t\t\treturn filter;";
  protected final String TEXT_210 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_211 = " getCreateNotationalElementCommand(";
  protected final String TEXT_212 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_213 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_214 = NL + "\t\t\tcase ";
  protected final String TEXT_215 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_216 = ") {" + NL + "\t\t\t\t\treturn new Create";
  protected final String TEXT_217 = "NotationCommand(getHost(), domainElement";
  protected final String TEXT_218 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_219 = ");" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_220 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_221 = " getSemanticChildNodes() {";
  protected final String TEXT_222 = NL;
  protected final String TEXT_223 = NL + "\treturn ";
  protected final String TEXT_224 = ".EMPTY_LIST;";
  protected final String TEXT_225 = NL + "\t";
  protected final String TEXT_226 = " result = new ";
  protected final String TEXT_227 = "();";
  protected final String TEXT_228 = NL + "\t";
  protected final String TEXT_229 = " viewObject = ";
  protected final String TEXT_230 = ";" + NL + "\t";
  protected final String TEXT_231 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_232 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_233 = NL + "\tfor(";
  protected final String TEXT_234 = " it = ";
  protected final String TEXT_235 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_236 = ") it.next();";
  protected final String TEXT_237 = NL + "\tnextValue = (";
  protected final String TEXT_238 = ")";
  protected final String TEXT_239 = ";";
  protected final String TEXT_240 = NL + "\tnodeVID = ";
  protected final String TEXT_241 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_242 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_243 = NL + "\tcase ";
  protected final String TEXT_244 = ".VISUAL_ID: {";
  protected final String TEXT_245 = NL + "\tif (";
  protected final String TEXT_246 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_247 = NL + "\t\tresult.add(new ";
  protected final String TEXT_248 = "(nextValue, nodeVID));";
  protected final String TEXT_249 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_250 = NL + "\t\t}";
  protected final String TEXT_251 = NL + "\t}";
  protected final String TEXT_252 = NL + "\t}";
  protected final String TEXT_253 = NL + "\treturn result;";
  protected final String TEXT_254 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_255 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_256 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_257 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_258 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_259 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_260 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_261 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_262 = " domainModelEditDomain = ";
  protected final String TEXT_263 = ".getEditingDomain(";
  protected final String TEXT_264 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_265 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_266 = NL;
  protected final String TEXT_267 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_268 = " domainModelEditDomain = ";
  protected final String TEXT_269 = ".getEditingDomain(";
  protected final String TEXT_270 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_271 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_272 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_273 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_274 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_275 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_276 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_277 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_278 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_279 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_280 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_281 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_282 = ".createEventTypeFilter(";
  protected final String TEXT_283 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_284 = ".createEventTypeFilter(";
  protected final String TEXT_285 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_286 = ".createEventTypeFilter(";
  protected final String TEXT_287 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_288 = ".createEventTypeFilter(";
  protected final String TEXT_289 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_290 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_291 = " createFilter() {";
  protected final String TEXT_292 = NL;
  protected final String TEXT_293 = NL + "\t\t\t";
  protected final String TEXT_294 = " filter = ";
  protected final String TEXT_295 = ".createFeatureFilter(";
  protected final String TEXT_296 = ".eINSTANCE.get";
  protected final String TEXT_297 = "());";
  protected final String TEXT_298 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_299 = ".createFeatureFilter(";
  protected final String TEXT_300 = ".eINSTANCE.get";
  protected final String TEXT_301 = "()));";
  protected final String TEXT_302 = NL;
  protected final String TEXT_303 = NL + "\t\t\t";
  protected final String TEXT_304 = " filter = ";
  protected final String TEXT_305 = ".createFeatureFilter(";
  protected final String TEXT_306 = ".eINSTANCE.get";
  protected final String TEXT_307 = "());";
  protected final String TEXT_308 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_309 = ".createFeatureFilter(";
  protected final String TEXT_310 = ".eINSTANCE.get";
  protected final String TEXT_311 = "()));";
  protected final String TEXT_312 = NL;
  protected final String TEXT_313 = NL + "\t\t\t";
  protected final String TEXT_314 = " filter = ";
  protected final String TEXT_315 = ".createFeatureFilter(";
  protected final String TEXT_316 = ".eINSTANCE.get";
  protected final String TEXT_317 = "());";
  protected final String TEXT_318 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_319 = ".createFeatureFilter(";
  protected final String TEXT_320 = ".eINSTANCE.get";
  protected final String TEXT_321 = "()));";
  protected final String TEXT_322 = NL;
  protected final String TEXT_323 = NL + "\t\t\t";
  protected final String TEXT_324 = " filter = ";
  protected final String TEXT_325 = ".createFeatureFilter(";
  protected final String TEXT_326 = ".eINSTANCE.get";
  protected final String TEXT_327 = "());";
  protected final String TEXT_328 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_329 = ".createFeatureFilter(";
  protected final String TEXT_330 = ".eINSTANCE.get";
  protected final String TEXT_331 = "()));";
  protected final String TEXT_332 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
d353 16
a368 16
  protected final String TEXT_334 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_335 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_336 = NL + "\t\t\t";
  protected final String TEXT_337 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_338 = NL + "\t\t\t";
  protected final String TEXT_339 = " filter = ";
  protected final String TEXT_340 = ".NOT_TOUCH;";
  protected final String TEXT_341 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_342 = " getCreateNotationalElementCommand(";
  protected final String TEXT_343 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_344 = " linkDescriptor = (";
  protected final String TEXT_345 = ") descriptor;" + NL + "\t\t\t";
  protected final String TEXT_346 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_347 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_348 = " createdEdge = ";
  protected final String TEXT_349 = ".eINSTANCE.createEdge();" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
d370 49
a418 49
  protected final String TEXT_351 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_352 = ") {" + NL + "\t\t\t\t\tcreatedEdge.setElement(linkDescriptor.getElement());" + NL + "\t\t\t\t\t";
  protected final String TEXT_353 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_354 = NL + "\t\t\tcase ";
  protected final String TEXT_355 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t\t";
  protected final String TEXT_356 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_357 = NL + "\t\t\t}" + NL + "\t\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_358 = "(getHost().getDiagram(), createdEdge, sourceView, targetView);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_359 = " getSemanticChildLinks() {";
  protected final String TEXT_360 = NL;
  protected final String TEXT_361 = "\t";
  protected final String TEXT_362 = " result = new ";
  protected final String TEXT_363 = "();";
  protected final String TEXT_364 = NL + "\t";
  protected final String TEXT_365 = " modelObject = ";
  protected final String TEXT_366 = ".getElement();" + NL + "\t";
  protected final String TEXT_367 = " nextValue;";
  protected final String TEXT_368 = NL + "\tint linkVID;";
  protected final String TEXT_369 = NL + "\tfor(";
  protected final String TEXT_370 = " it = ";
  protected final String TEXT_371 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_372 = ") it.next();";
  protected final String TEXT_373 = NL + "\tnextValue = (";
  protected final String TEXT_374 = ")";
  protected final String TEXT_375 = ";";
  protected final String TEXT_376 = NL + "\tlinkVID = ";
  protected final String TEXT_377 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_378 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_379 = NL + "\tcase ";
  protected final String TEXT_380 = ".VISUAL_ID: {";
  protected final String TEXT_381 = NL + "\tif (";
  protected final String TEXT_382 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_383 = NL + "\t\t";
  protected final String TEXT_384 = " source = (";
  protected final String TEXT_385 = ")";
  protected final String TEXT_386 = ";";
  protected final String TEXT_387 = NL + "\t\t";
  protected final String TEXT_388 = " source = ";
  protected final String TEXT_389 = ".getElement();";
  protected final String TEXT_390 = NL + "\t\t";
  protected final String TEXT_391 = " target = (";
  protected final String TEXT_392 = ")";
  protected final String TEXT_393 = ";";
  protected final String TEXT_394 = NL + "\t\t";
  protected final String TEXT_395 = " target = ";
  protected final String TEXT_396 = ".getElement();";
  protected final String TEXT_397 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_398 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_399 = NL + "\t\tbreak;" + NL + "\t}";
d420 54
a473 54
  protected final String TEXT_401 = NL + "\t}";
  protected final String TEXT_402 = NL + "\t}";
  protected final String TEXT_403 = NL + "\tfor(";
  protected final String TEXT_404 = " it = ";
  protected final String TEXT_405 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_406 = ") it.next();";
  protected final String TEXT_407 = NL + "\tnextValue = (";
  protected final String TEXT_408 = ")";
  protected final String TEXT_409 = ";";
  protected final String TEXT_410 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_411 = NL + "\t\tresult.add(new ";
  protected final String TEXT_412 = "(modelObject, nextValue, null, ";
  protected final String TEXT_413 = ".VISUAL_ID));";
  protected final String TEXT_414 = NL + "\t}";
  protected final String TEXT_415 = NL + "\t}";
  protected final String TEXT_416 = NL + "\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_417 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_418 = " result = new ";
  protected final String TEXT_419 = "();" + NL + "\t\t\t";
  protected final String TEXT_420 = " allLinks = ";
  protected final String TEXT_421 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_422 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_423 = " next = (";
  protected final String TEXT_424 = ") it.next();";
  protected final String TEXT_425 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_426 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_427 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_428 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_429 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_430 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_431 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_432 = ".VISUAL_ID:";
  protected final String TEXT_433 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_434 = NL + "\t\t\t\t} else {";
  protected final String TEXT_435 = NL + "\t\t\t\t}";
  protected final String TEXT_436 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_437 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_438 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_439 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_440 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_441 = ".VISUAL_ID:";
  protected final String TEXT_442 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_443 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_444 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_445 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_446 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_447 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_448 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_449 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_450 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_451 = " domainModelEditDomain = ";
  protected final String TEXT_452 = ".getEditingDomain(";
  protected final String TEXT_453 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_454 = "(domainModelEditDomain, command));" + NL + "\t}";
d475 16
a490 17
  protected final String TEXT_456 = NL;
  protected final String TEXT_457 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_458 = " domainModelRefresher = new ";
  protected final String TEXT_459 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_460 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_461 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_462 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_463 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagram(), ";
  protected final String TEXT_464 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {" + NL + "\t\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tif (!getDiagram().eAdapters().contains(getTreeUpdateManager())) {" + NL + "\t\t\t\tgetDiagram().eAdapters().add(getTreeUpdateManager());" + NL + "\t\t\t}" + NL + "\t\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tgetDiagram().eAdapters().remove(getTreeUpdateManager());" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_465 = NL;
  protected final String TEXT_466 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_467 = " domainModelRefresher = new ";
  protected final String TEXT_468 = "(this);" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_469 = " treeUpdateManager;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_470 = " getTreeUpdateManager() {" + NL + "\t\t\tif (treeUpdateManager == null) {" + NL + "\t\t\t\ttreeUpdateManager = new ";
  protected final String TEXT_471 = "(getViewer());" + NL + "\t\t\t}" + NL + "\t\t\treturn treeUpdateManager;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_472 = NL;
d809 3
d820 2
d823 1
a823 1
    stringBuffer.append(TEXT_89);
d826 1
a826 1
    stringBuffer.append(TEXT_90);
a827 2
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d829 2
d832 1
a832 1
    stringBuffer.append(TEXT_93);
d834 1
a834 1
    stringBuffer.append(TEXT_94);
a835 2
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d837 1
a837 1
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
d839 1
a839 3
    
	if (!isListLayout) {

a840 55
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_100);
    
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_101);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_103);
    
	}

    stringBuffer.append(TEXT_104);
    
if (genDiagram.getPalette() != null) {

    stringBuffer.append(TEXT_105);
    if (isStatic) {
    stringBuffer.append(TEXT_106);
    }
    stringBuffer.append(TEXT_107);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_110);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_113);
    if (!isListLayout) {
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_115);
    }
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_118);
d845 1
a845 1
    stringBuffer.append(TEXT_119);
d847 1
a847 1
    stringBuffer.append(TEXT_120);
d849 1
a849 1
    stringBuffer.append(TEXT_121);
d851 1
a851 1
    stringBuffer.append(TEXT_122);
d853 1
a853 1
    stringBuffer.append(TEXT_123);
d857 1
a857 1
    stringBuffer.append(TEXT_124);
d859 1
a859 1
    stringBuffer.append(TEXT_125);
d861 1
a861 1
    stringBuffer.append(TEXT_126);
d863 1
a863 1
    stringBuffer.append(TEXT_127);
d867 1
a867 1
    stringBuffer.append(TEXT_128);
d869 1
a869 1
    stringBuffer.append(TEXT_129);
d871 1
a871 1
    stringBuffer.append(TEXT_130);
d873 1
a873 1
    stringBuffer.append(TEXT_131);
d875 1
a875 1
    stringBuffer.append(TEXT_132);
d877 1
a877 1
    stringBuffer.append(TEXT_133);
d879 1
a879 1
    stringBuffer.append(TEXT_134);
d886 1
a886 1
    stringBuffer.append(TEXT_135);
d888 1
a888 1
    stringBuffer.append(TEXT_136);
d890 1
a890 1
    stringBuffer.append(TEXT_137);
d892 1
a892 1
    stringBuffer.append(TEXT_138);
d894 1
a894 1
    stringBuffer.append(TEXT_139);
d896 1
a896 1
    stringBuffer.append(TEXT_140);
d898 1
a898 1
    stringBuffer.append(TEXT_141);
d900 1
a900 1
    stringBuffer.append(TEXT_142);
d902 1
a902 1
    stringBuffer.append(TEXT_143);
d904 1
a904 1
    stringBuffer.append(TEXT_144);
d906 1
a906 1
    stringBuffer.append(TEXT_145);
d910 1
a910 1
    stringBuffer.append(TEXT_146);
d912 1
a912 1
    stringBuffer.append(TEXT_147);
d914 1
a914 1
    stringBuffer.append(TEXT_148);
d916 1
a916 1
    stringBuffer.append(TEXT_149);
d918 21
a938 1
    stringBuffer.append(TEXT_150);
d942 3
a944 4
    stringBuffer.append(TEXT_151);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_152);
d946 1
a946 1
    stringBuffer.append(TEXT_153);
d948 1
a948 1
    stringBuffer.append(TEXT_154);
d950 1
a950 1
    stringBuffer.append(TEXT_155);
d952 3
a954 1
    stringBuffer.append(TEXT_156);
d956 3
a958 1
    stringBuffer.append(TEXT_157);
d965 3
a967 3
    stringBuffer.append(TEXT_158);
    stringBuffer.append(TEXT_159);
    stringBuffer.append(TEXT_160);
d969 1
a969 1
    stringBuffer.append(TEXT_161);
d971 1
a971 1
    stringBuffer.append(TEXT_162);
d973 3
a975 3
    stringBuffer.append(TEXT_163);
    stringBuffer.append(TEXT_164);
    stringBuffer.append(TEXT_165);
d977 1
a977 1
    stringBuffer.append(TEXT_166);
d979 1
a979 1
    stringBuffer.append(TEXT_167);
d984 1
a984 1
    stringBuffer.append(TEXT_168);
d988 1
a988 1
    stringBuffer.append(TEXT_169);
d993 1
a993 1
    stringBuffer.append(TEXT_170);
d997 1
a997 1
    stringBuffer.append(TEXT_171);
d1005 2
a1006 2
    stringBuffer.append(TEXT_172);
    stringBuffer.append(TEXT_173);
d1008 1
a1008 1
    stringBuffer.append(TEXT_174);
d1010 1
a1010 1
    stringBuffer.append(TEXT_175);
d1012 1
a1012 1
    stringBuffer.append(TEXT_176);
d1014 1
a1014 1
    stringBuffer.append(TEXT_177);
d1016 1
a1016 1
    stringBuffer.append(TEXT_178);
d1018 1
a1018 1
    stringBuffer.append(TEXT_179);
d1020 1
a1020 1
    stringBuffer.append(TEXT_180);
d1035 1
a1035 1
    stringBuffer.append(TEXT_181);
d1037 1
a1037 1
    stringBuffer.append(TEXT_182);
d1039 1
a1039 1
    stringBuffer.append(TEXT_183);
d1041 1
a1041 1
    stringBuffer.append(TEXT_184);
d1045 1
a1045 1
    stringBuffer.append(TEXT_185);
d1047 1
a1047 1
    stringBuffer.append(TEXT_186);
d1066 1
a1066 1
    stringBuffer.append(TEXT_187);
d1068 1
a1068 1
    stringBuffer.append(TEXT_188);
d1070 1
a1070 1
    stringBuffer.append(TEXT_189);
d1072 1
a1072 1
    stringBuffer.append(TEXT_190);
d1074 1
a1074 1
    stringBuffer.append(TEXT_191);
d1078 1
a1078 1
    stringBuffer.append(TEXT_192);
d1080 1
a1080 1
    stringBuffer.append(TEXT_193);
d1082 1
a1082 1
    stringBuffer.append(TEXT_194);
d1084 1
a1084 1
    stringBuffer.append(TEXT_195);
d1092 1
a1092 1
    stringBuffer.append(TEXT_196);
d1094 1
a1094 1
    stringBuffer.append(TEXT_197);
d1096 1
a1096 1
    stringBuffer.append(TEXT_198);
d1101 1
a1101 1
    stringBuffer.append(TEXT_199);
d1103 1
a1103 1
    stringBuffer.append(TEXT_200);
d1105 1
a1105 1
    stringBuffer.append(TEXT_201);
d1107 1
a1107 1
    stringBuffer.append(TEXT_202);
d1116 1
a1116 1
    stringBuffer.append(TEXT_203);
d1120 1
a1120 1
    stringBuffer.append(TEXT_204);
d1122 1
a1122 1
    stringBuffer.append(TEXT_205);
d1128 1
a1128 1
    stringBuffer.append(TEXT_206);
d1130 1
a1130 1
    stringBuffer.append(TEXT_207);
d1132 1
a1132 1
    stringBuffer.append(TEXT_208);
d1136 1
a1136 1
    stringBuffer.append(TEXT_209);
d1140 1
a1140 1
    stringBuffer.append(TEXT_210);
d1142 1
a1142 1
    stringBuffer.append(TEXT_211);
d1144 7
a1150 1
    stringBuffer.append(TEXT_212);
d1152 1
a1152 1
    stringBuffer.append(TEXT_213);
d1160 40
a1199 1
	String childNodeInterfaceName = importManager.getImportedName(nextNode.getDomainMetaClass().getQualifiedInterfaceName());
a1201 11
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(childNodeInterfaceName);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(nextNode.getDomainMetaClass().getName());
    stringBuffer.append(nextNode.getVisualID());
    stringBuffer.append(TEXT_217);
    if (!isListLayout) {
    stringBuffer.append(TEXT_218);
    }
    stringBuffer.append(TEXT_219);
d1205 1
a1205 1
    stringBuffer.append(TEXT_220);
d1207 2
a1208 2
    stringBuffer.append(TEXT_221);
    stringBuffer.append(TEXT_222);
d1212 1
a1212 1
    stringBuffer.append(TEXT_223);
d1214 1
a1214 1
    stringBuffer.append(TEXT_224);
d1218 1
a1218 1
    stringBuffer.append(TEXT_225);
d1220 1
a1220 1
    stringBuffer.append(TEXT_226);
d1222 1
a1222 1
    stringBuffer.append(TEXT_227);
d1240 1
a1240 1
    stringBuffer.append(TEXT_228);
d1242 1
a1242 1
    stringBuffer.append(TEXT_229);
d1244 1
a1244 1
    stringBuffer.append(TEXT_230);
d1246 1
a1246 1
    stringBuffer.append(TEXT_231);
d1248 1
a1248 1
    stringBuffer.append(TEXT_232);
d1257 1
a1257 1
    stringBuffer.append(TEXT_233);
d1259 1
a1259 1
    stringBuffer.append(TEXT_234);
d1261 1
a1261 1
    stringBuffer.append(TEXT_235);
d1263 1
a1263 1
    stringBuffer.append(TEXT_236);
d1267 1
a1267 1
    stringBuffer.append(TEXT_237);
d1269 1
a1269 1
    stringBuffer.append(TEXT_238);
d1271 1
a1271 1
    stringBuffer.append(TEXT_239);
d1275 1
a1275 1
    stringBuffer.append(TEXT_240);
d1277 1
a1277 1
    stringBuffer.append(TEXT_241);
d1282 1
a1282 1
    stringBuffer.append(TEXT_242);
d1289 1
a1289 1
    stringBuffer.append(TEXT_243);
d1291 1
a1291 1
    stringBuffer.append(TEXT_244);
d1295 1
a1295 1
    stringBuffer.append(TEXT_245);
d1297 1
a1297 1
    stringBuffer.append(TEXT_246);
d1301 1
a1301 1
    stringBuffer.append(TEXT_247);
d1303 1
a1303 1
    stringBuffer.append(TEXT_248);
d1307 1
a1307 1
    stringBuffer.append(TEXT_249);
d1311 1
a1311 1
    stringBuffer.append(TEXT_250);
d1317 1
a1317 1
    stringBuffer.append(TEXT_251);
d1322 1
a1322 1
    stringBuffer.append(TEXT_252);
d1327 1
a1327 1
    stringBuffer.append(TEXT_253);
d1331 1
a1331 1
    stringBuffer.append(TEXT_254);
d1333 1
a1333 1
    stringBuffer.append(TEXT_255);
d1335 1
a1335 1
    stringBuffer.append(TEXT_256);
d1337 1
a1337 1
    stringBuffer.append(TEXT_257);
d1339 1
a1339 1
    stringBuffer.append(TEXT_258);
d1341 1
a1341 1
    stringBuffer.append(TEXT_259);
d1343 1
a1343 1
    stringBuffer.append(TEXT_260);
d1345 1
a1345 1
    stringBuffer.append(TEXT_261);
d1347 1
a1347 1
    stringBuffer.append(TEXT_262);
d1349 1
a1349 1
    stringBuffer.append(TEXT_263);
d1351 1
a1351 1
    stringBuffer.append(TEXT_264);
d1353 2
a1354 2
    stringBuffer.append(TEXT_265);
    stringBuffer.append(TEXT_266);
d1358 1
a1358 1
    stringBuffer.append(TEXT_267);
d1360 1
a1360 1
    stringBuffer.append(TEXT_268);
d1362 1
a1362 1
    stringBuffer.append(TEXT_269);
d1364 1
a1364 1
    stringBuffer.append(TEXT_270);
d1366 1
a1366 1
    stringBuffer.append(TEXT_271);
d1368 1
a1368 1
    stringBuffer.append(TEXT_272);
d1370 1
a1370 1
    stringBuffer.append(TEXT_273);
d1372 1
a1372 1
    stringBuffer.append(TEXT_274);
d1374 1
a1374 1
    stringBuffer.append(TEXT_275);
d1387 1
a1387 1
    stringBuffer.append(TEXT_276);
d1389 1
a1389 1
    stringBuffer.append(TEXT_277);
d1391 1
a1391 1
    stringBuffer.append(TEXT_278);
d1393 1
a1393 1
    stringBuffer.append(TEXT_279);
d1398 1
a1398 1
    stringBuffer.append(TEXT_280);
d1400 1
a1400 1
    stringBuffer.append(TEXT_281);
d1402 1
a1402 1
    stringBuffer.append(TEXT_282);
d1404 1
a1404 1
    stringBuffer.append(TEXT_283);
d1406 1
a1406 1
    stringBuffer.append(TEXT_284);
d1408 1
a1408 1
    stringBuffer.append(TEXT_285);
d1410 1
a1410 1
    stringBuffer.append(TEXT_286);
d1412 1
a1412 1
    stringBuffer.append(TEXT_287);
d1414 1
a1414 1
    stringBuffer.append(TEXT_288);
d1416 1
a1416 1
    stringBuffer.append(TEXT_289);
d1420 1
a1420 1
    stringBuffer.append(TEXT_290);
d1422 1
a1422 1
    stringBuffer.append(TEXT_291);
d1435 1
a1435 1
    stringBuffer.append(TEXT_292);
d1449 1
a1449 1
    stringBuffer.append(TEXT_293);
d1451 1
a1451 1
    stringBuffer.append(TEXT_294);
d1453 1
a1453 1
    stringBuffer.append(TEXT_295);
d1455 1
a1455 1
    stringBuffer.append(TEXT_296);
d1457 1
a1457 1
    stringBuffer.append(TEXT_297);
d1461 1
a1461 1
    stringBuffer.append(TEXT_298);
d1463 1
a1463 1
    stringBuffer.append(TEXT_299);
d1465 1
a1465 1
    stringBuffer.append(TEXT_300);
d1467 1
a1467 1
    stringBuffer.append(TEXT_301);
d1474 1
a1474 1
    stringBuffer.append(TEXT_302);
d1488 1
a1488 1
    stringBuffer.append(TEXT_303);
d1490 1
a1490 1
    stringBuffer.append(TEXT_304);
d1492 1
a1492 1
    stringBuffer.append(TEXT_305);
d1494 1
a1494 1
    stringBuffer.append(TEXT_306);
d1496 1
a1496 1
    stringBuffer.append(TEXT_307);
d1500 1
a1500 1
    stringBuffer.append(TEXT_308);
d1502 1
a1502 1
    stringBuffer.append(TEXT_309);
d1504 1
a1504 1
    stringBuffer.append(TEXT_310);
d1506 1
a1506 1
    stringBuffer.append(TEXT_311);
d1513 1
a1513 1
    stringBuffer.append(TEXT_312);
d1527 1
a1527 1
    stringBuffer.append(TEXT_313);
d1529 1
a1529 1
    stringBuffer.append(TEXT_314);
d1531 1
a1531 1
    stringBuffer.append(TEXT_315);
d1533 1
a1533 1
    stringBuffer.append(TEXT_316);
d1535 1
a1535 1
    stringBuffer.append(TEXT_317);
d1539 1
a1539 1
    stringBuffer.append(TEXT_318);
d1541 1
a1541 1
    stringBuffer.append(TEXT_319);
d1543 1
a1543 1
    stringBuffer.append(TEXT_320);
d1545 1
a1545 1
    stringBuffer.append(TEXT_321);
d1555 1
a1555 1
    stringBuffer.append(TEXT_322);
d1569 1
a1569 1
    stringBuffer.append(TEXT_323);
d1571 1
a1571 1
    stringBuffer.append(TEXT_324);
d1573 1
a1573 1
    stringBuffer.append(TEXT_325);
d1575 1
a1575 1
    stringBuffer.append(TEXT_326);
d1577 1
a1577 1
    stringBuffer.append(TEXT_327);
d1581 1
a1581 1
    stringBuffer.append(TEXT_328);
d1583 1
a1583 1
    stringBuffer.append(TEXT_329);
d1585 1
a1585 1
    stringBuffer.append(TEXT_330);
d1587 1
a1587 1
    stringBuffer.append(TEXT_331);
d1596 1
a1596 1
    stringBuffer.append(TEXT_332);
d1601 1
a1601 1
    stringBuffer.append(TEXT_333);
d1603 1
a1603 1
    stringBuffer.append(TEXT_334);
d1610 1
a1610 1
    stringBuffer.append(TEXT_335);
d1615 11
a1625 1
    stringBuffer.append(TEXT_336);
d1627 1
a1627 1
    stringBuffer.append(TEXT_337);
a1628 1
			}
d1630 1
a1630 1
		if (!hasDeclaredFilter) {
d1632 4
d1637 1
a1637 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1639 1
a1639 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1642 4
a1645 2
		}
	}	//local declaration of hasDeclaredFilter
a1647 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
d1649 1
a1649 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
d1651 1
a1651 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
d1653 1
a1653 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
a1654 8
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_346);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_347);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_348);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_349);
d1656 1
a1656 1
	for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
d1663 1
a1663 1
    stringBuffer.append(TEXT_350);
d1665 1
a1665 1
    stringBuffer.append(TEXT_351);
d1667 1
a1667 1
    stringBuffer.append(TEXT_352);
d1669 1
a1669 1
    stringBuffer.append(TEXT_353);
d1672 1
a1672 1
	for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
d1675 1
a1675 1
    stringBuffer.append(TEXT_354);
d1677 1
a1677 1
    stringBuffer.append(TEXT_355);
d1679 1
a1679 1
    stringBuffer.append(TEXT_356);
d1683 10
d1694 5
a1698 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalEdgeCommand"));
d1700 1
a1701 1
    stringBuffer.append(TEXT_359);
d1703 1
a1704 4
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_362);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_363);
d1707 1
a1707 1
for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
d1717 1
a1717 1
for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
d1727 4
a1733 4
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_366);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_367);
d1738 1
a1738 1
    stringBuffer.append(TEXT_368);
d1747 1
a1747 1
    stringBuffer.append(TEXT_369);
d1749 1
a1749 1
    stringBuffer.append(TEXT_370);
d1751 1
a1751 1
    stringBuffer.append(TEXT_371);
d1753 1
a1753 1
    stringBuffer.append(TEXT_372);
d1757 1
a1757 1
    stringBuffer.append(TEXT_373);
d1759 1
a1759 1
    stringBuffer.append(TEXT_374);
d1761 1
a1761 1
    stringBuffer.append(TEXT_375);
d1765 1
a1765 1
    stringBuffer.append(TEXT_376);
d1767 1
a1767 1
    stringBuffer.append(TEXT_377);
d1772 1
a1772 1
    stringBuffer.append(TEXT_378);
d1780 1
a1780 1
    stringBuffer.append(TEXT_379);
d1782 1
a1782 1
    stringBuffer.append(TEXT_380);
d1786 1
a1786 1
    stringBuffer.append(TEXT_381);
d1788 1
a1788 1
    stringBuffer.append(TEXT_382);
d1793 1
a1793 1
    stringBuffer.append(TEXT_383);
d1795 1
a1795 1
    stringBuffer.append(TEXT_384);
d1797 1
a1797 1
    stringBuffer.append(TEXT_385);
d1799 1
a1799 1
    stringBuffer.append(TEXT_386);
d1803 1
a1803 1
    stringBuffer.append(TEXT_387);
d1805 1
a1805 1
    stringBuffer.append(TEXT_388);
d1807 1
a1807 1
    stringBuffer.append(TEXT_389);
d1812 1
a1812 1
    stringBuffer.append(TEXT_390);
d1814 1
a1814 1
    stringBuffer.append(TEXT_391);
d1816 1
a1816 1
    stringBuffer.append(TEXT_392);
d1818 1
a1818 1
    stringBuffer.append(TEXT_393);
d1822 1
a1822 1
    stringBuffer.append(TEXT_394);
d1824 1
a1824 1
    stringBuffer.append(TEXT_395);
d1826 1
a1826 1
    stringBuffer.append(TEXT_396);
d1830 1
a1830 1
    stringBuffer.append(TEXT_397);
d1832 1
a1832 1
    stringBuffer.append(TEXT_398);
d1836 1
a1836 1
    stringBuffer.append(TEXT_399);
d1840 1
a1840 1
    stringBuffer.append(TEXT_400);
d1848 1
a1848 1
    stringBuffer.append(TEXT_401);
d1853 1
a1853 1
    stringBuffer.append(TEXT_402);
d1863 1
a1863 1
    stringBuffer.append(TEXT_403);
d1865 1
a1865 1
    stringBuffer.append(TEXT_404);
d1867 1
a1867 1
    stringBuffer.append(TEXT_405);
d1869 1
a1869 1
    stringBuffer.append(TEXT_406);
d1873 1
a1873 1
    stringBuffer.append(TEXT_407);
d1875 1
a1875 1
    stringBuffer.append(TEXT_408);
d1877 1
a1877 1
    stringBuffer.append(TEXT_409);
d1881 1
a1881 1
    stringBuffer.append(TEXT_410);
d1886 1
a1886 1
    stringBuffer.append(TEXT_411);
d1888 1
a1888 1
    stringBuffer.append(TEXT_412);
d1890 1
a1890 1
    stringBuffer.append(TEXT_413);
d1894 1
a1894 1
    stringBuffer.append(TEXT_414);
d1898 1
a1898 1
    stringBuffer.append(TEXT_415);
d1903 6
d1912 2
a1914 2
    stringBuffer.append(TEXT_418);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d1916 1
a1916 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1918 1
a1918 1
    stringBuffer.append(_getDiagramCode);
d1920 1
a1920 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a1923 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_424);
d1927 2
a1931 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_427);
d1936 2
d1939 1
a1939 1
    stringBuffer.append(_getViewCode);
a1940 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_430);
d1945 2
a1947 2
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_432);
d1951 1
a1951 1
    stringBuffer.append(TEXT_433);
d1955 1
a1955 1
    stringBuffer.append(TEXT_434);
d1959 1
a1959 1
    stringBuffer.append(TEXT_435);
d1966 1
a1966 1
    stringBuffer.append(TEXT_436);
d1970 2
d1973 1
a1973 1
    stringBuffer.append(_getViewCode);
a1974 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_439);
d1979 2
a1981 2
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_441);
d1985 1
a1985 1
    stringBuffer.append(TEXT_442);
d1989 2
d1992 2
a1994 2
    stringBuffer.append(TEXT_444);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
d1996 1
a1996 1
    stringBuffer.append(genDiagram.isSynchronized());
d1998 1
a1998 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d2000 1
a2000 1
    stringBuffer.append(_getViewCode);
d2002 1
a2002 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher"));
d2004 1
a2004 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d2006 1
a2006 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d2008 1
a2008 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d2010 1
a2010 1
    stringBuffer.append(_getDiagramCode);
a2011 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_454);
d2018 1
d2021 1
d2025 1
a2025 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d2031 1
a2031 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
d2033 1
a2033 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
a2034 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d2037 1
d2041 1
a2041 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d2047 1
a2047 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
a2048 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_472);
@


1.11
log
@[155955] bblajer -  Allow creation of child nodes directly in parent elements
@
text
@d100 47
a146 47
  protected final String TEXT_81 = "(this);" + NL + "\t\t}";
  protected final String TEXT_82 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_85 = "static ";
  protected final String TEXT_86 = "class Create";
  protected final String TEXT_87 = "NotationCommand extends ";
  protected final String TEXT_88 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_89 = "NotationCommand(";
  protected final String TEXT_90 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_91 = " domainElement";
  protected final String TEXT_92 = ", ";
  protected final String TEXT_93 = " constraint";
  protected final String TEXT_94 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_95 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_96 = ".decorateView(createdNode);";
  protected final String TEXT_97 = NL + "\t\t\t";
  protected final String TEXT_98 = " bounds = ";
  protected final String TEXT_99 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_100 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_101 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_102 = "));";
  protected final String TEXT_103 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_104 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_105 = "static ";
  protected final String TEXT_106 = "class Create";
  protected final String TEXT_107 = "Command extends ";
  protected final String TEXT_108 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_109 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_110 = "Command(";
  protected final String TEXT_111 = " parent, ";
  protected final String TEXT_112 = " request";
  protected final String TEXT_113 = ", ";
  protected final String TEXT_114 = " constraint";
  protected final String TEXT_115 = ") {" + NL + "\t\t\t";
  protected final String TEXT_116 = " domainModelEditDomain = ";
  protected final String TEXT_117 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_118 = NL + "\t\t\t";
  protected final String TEXT_119 = " createdDomainElement = ";
  protected final String TEXT_120 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_121 = ".eINSTANCE.get";
  protected final String TEXT_122 = "());";
  protected final String TEXT_123 = NL + "\t\t\t";
  protected final String TEXT_124 = " createdDomainElement = ";
  protected final String TEXT_125 = ".eINSTANCE.create";
  protected final String TEXT_126 = "();";
  protected final String TEXT_127 = NL + "\t\t\t";
d148 29
a176 29
  protected final String TEXT_129 = ".";
  protected final String TEXT_130 = ".initializeElement(";
  protected final String TEXT_131 = "(";
  protected final String TEXT_132 = ") ";
  protected final String TEXT_133 = "createdDomainElement);";
  protected final String TEXT_134 = NL + "\t\t\t";
  protected final String TEXT_135 = " compoundCommand = new ";
  protected final String TEXT_136 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_137 = ".create(domainModelEditDomain, ";
  protected final String TEXT_138 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_139 = ".eINSTANCE.get";
  protected final String TEXT_140 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_141 = ".create(domainModelEditDomain, ";
  protected final String TEXT_142 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_143 = ".eINSTANCE.get";
  protected final String TEXT_144 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_145 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_146 = ".create(domainModelEditDomain, ";
  protected final String TEXT_147 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_148 = ".eINSTANCE.get";
  protected final String TEXT_149 = "(), createdDomainElement);";
  protected final String TEXT_150 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_151 = "NotationCommand(parent, ";
  protected final String TEXT_152 = "(";
  protected final String TEXT_153 = ") ";
  protected final String TEXT_154 = "createdDomainElement";
  protected final String TEXT_155 = ", constraint";
  protected final String TEXT_156 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_157 = NL;
d178 92
a269 92
  protected final String TEXT_159 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_160 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_161 = " feature, ";
  protected final String TEXT_162 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_163 = NL;
  protected final String TEXT_164 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_165 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_166 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_167 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_168 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_169 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_170 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_171 = NL;
  protected final String TEXT_172 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_173 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_174 = " domainModelEditDomain = ";
  protected final String TEXT_175 = ".getEditingDomain(";
  protected final String TEXT_176 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_177 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_178 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_179 = " {";
  protected final String TEXT_180 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_181 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_182 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_183 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_184 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_185 = " createFilter() {";
  protected final String TEXT_186 = NL + "\t\t\t";
  protected final String TEXT_187 = " filter = ";
  protected final String TEXT_188 = ".createFeatureFilter(";
  protected final String TEXT_189 = ".eINSTANCE.get";
  protected final String TEXT_190 = "());";
  protected final String TEXT_191 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_192 = ".createFeatureFilter(";
  protected final String TEXT_193 = ".eINSTANCE.get";
  protected final String TEXT_194 = "()));";
  protected final String TEXT_195 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_196 = ".createNotifierFilter(";
  protected final String TEXT_197 = ".getElement()));";
  protected final String TEXT_198 = NL + "\t\t\t";
  protected final String TEXT_199 = " filter = ";
  protected final String TEXT_200 = ".createNotifierFilter(";
  protected final String TEXT_201 = ".getElement());";
  protected final String TEXT_202 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_203 = NL + "\t\t\t";
  protected final String TEXT_204 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_205 = NL + "\t\t\t";
  protected final String TEXT_206 = " filter = ";
  protected final String TEXT_207 = ".NOT_TOUCH;";
  protected final String TEXT_208 = NL + "\t\t\treturn filter;";
  protected final String TEXT_209 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_210 = " getCreateNotationalElementCommand(";
  protected final String TEXT_211 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_212 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_213 = NL + "\t\t\tcase ";
  protected final String TEXT_214 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_215 = ") {" + NL + "\t\t\t\t\treturn new Create";
  protected final String TEXT_216 = "NotationCommand(getHost(), domainElement";
  protected final String TEXT_217 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_218 = ");" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_219 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_220 = " getSemanticChildNodes() {";
  protected final String TEXT_221 = NL;
  protected final String TEXT_222 = NL + "\treturn ";
  protected final String TEXT_223 = ".EMPTY_LIST;";
  protected final String TEXT_224 = NL + "\t";
  protected final String TEXT_225 = " result = new ";
  protected final String TEXT_226 = "();";
  protected final String TEXT_227 = NL + "\t";
  protected final String TEXT_228 = " viewObject = ";
  protected final String TEXT_229 = ";" + NL + "\t";
  protected final String TEXT_230 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_231 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_232 = NL + "\tfor(";
  protected final String TEXT_233 = " it = ";
  protected final String TEXT_234 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_235 = ") it.next();";
  protected final String TEXT_236 = NL + "\tnextValue = (";
  protected final String TEXT_237 = ")";
  protected final String TEXT_238 = ";";
  protected final String TEXT_239 = NL + "\tnodeVID = ";
  protected final String TEXT_240 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_241 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_242 = NL + "\tcase ";
  protected final String TEXT_243 = ".VISUAL_ID: {";
  protected final String TEXT_244 = NL + "\tif (";
  protected final String TEXT_245 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_246 = NL + "\t\tresult.add(new ";
  protected final String TEXT_247 = "(nextValue, nodeVID));";
  protected final String TEXT_248 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_249 = NL + "\t\t}";
  protected final String TEXT_250 = NL + "\t}";
d271 148
a418 148
  protected final String TEXT_252 = NL + "\treturn result;";
  protected final String TEXT_253 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_254 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_255 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_256 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_257 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_258 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_259 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_260 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_261 = " domainModelEditDomain = ";
  protected final String TEXT_262 = ".getEditingDomain(";
  protected final String TEXT_263 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_264 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_265 = NL;
  protected final String TEXT_266 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_267 = " domainModelEditDomain = ";
  protected final String TEXT_268 = ".getEditingDomain(";
  protected final String TEXT_269 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_270 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_271 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_272 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_273 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_274 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_275 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_276 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_277 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_278 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_279 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_280 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_281 = ".createEventTypeFilter(";
  protected final String TEXT_282 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_283 = ".createEventTypeFilter(";
  protected final String TEXT_284 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_285 = ".createEventTypeFilter(";
  protected final String TEXT_286 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_287 = ".createEventTypeFilter(";
  protected final String TEXT_288 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_289 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_290 = " createFilter() {";
  protected final String TEXT_291 = NL;
  protected final String TEXT_292 = NL + "\t\t\t";
  protected final String TEXT_293 = " filter = ";
  protected final String TEXT_294 = ".createFeatureFilter(";
  protected final String TEXT_295 = ".eINSTANCE.get";
  protected final String TEXT_296 = "());";
  protected final String TEXT_297 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_298 = ".createFeatureFilter(";
  protected final String TEXT_299 = ".eINSTANCE.get";
  protected final String TEXT_300 = "()));";
  protected final String TEXT_301 = NL;
  protected final String TEXT_302 = NL + "\t\t\t";
  protected final String TEXT_303 = " filter = ";
  protected final String TEXT_304 = ".createFeatureFilter(";
  protected final String TEXT_305 = ".eINSTANCE.get";
  protected final String TEXT_306 = "());";
  protected final String TEXT_307 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_308 = ".createFeatureFilter(";
  protected final String TEXT_309 = ".eINSTANCE.get";
  protected final String TEXT_310 = "()));";
  protected final String TEXT_311 = NL;
  protected final String TEXT_312 = NL + "\t\t\t";
  protected final String TEXT_313 = " filter = ";
  protected final String TEXT_314 = ".createFeatureFilter(";
  protected final String TEXT_315 = ".eINSTANCE.get";
  protected final String TEXT_316 = "());";
  protected final String TEXT_317 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_318 = ".createFeatureFilter(";
  protected final String TEXT_319 = ".eINSTANCE.get";
  protected final String TEXT_320 = "()));";
  protected final String TEXT_321 = NL;
  protected final String TEXT_322 = NL + "\t\t\t";
  protected final String TEXT_323 = " filter = ";
  protected final String TEXT_324 = ".createFeatureFilter(";
  protected final String TEXT_325 = ".eINSTANCE.get";
  protected final String TEXT_326 = "());";
  protected final String TEXT_327 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_328 = ".createFeatureFilter(";
  protected final String TEXT_329 = ".eINSTANCE.get";
  protected final String TEXT_330 = "()));";
  protected final String TEXT_331 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_332 = NL + "\t\t\t";
  protected final String TEXT_333 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_334 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_335 = NL + "\t\t\t";
  protected final String TEXT_336 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_337 = NL + "\t\t\t";
  protected final String TEXT_338 = " filter = ";
  protected final String TEXT_339 = ".NOT_TOUCH;";
  protected final String TEXT_340 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_341 = " getCreateNotationalElementCommand(";
  protected final String TEXT_342 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_343 = " linkDescriptor = (";
  protected final String TEXT_344 = ") descriptor;" + NL + "\t\t\t";
  protected final String TEXT_345 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_346 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_347 = " createdEdge = ";
  protected final String TEXT_348 = ".eINSTANCE.createEdge();" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_349 = NL + "\t\t\tcase ";
  protected final String TEXT_350 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_351 = ") {" + NL + "\t\t\t\t\tcreatedEdge.setElement(linkDescriptor.getElement());" + NL + "\t\t\t\t\t";
  protected final String TEXT_352 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_353 = NL + "\t\t\tcase ";
  protected final String TEXT_354 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t\t";
  protected final String TEXT_355 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_356 = NL + "\t\t\t}" + NL + "\t\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_357 = "(getHost().getDiagram(), createdEdge, sourceView, targetView);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_358 = " getSemanticChildLinks() {";
  protected final String TEXT_359 = NL;
  protected final String TEXT_360 = "\t";
  protected final String TEXT_361 = " result = new ";
  protected final String TEXT_362 = "();";
  protected final String TEXT_363 = NL + "\t";
  protected final String TEXT_364 = " modelObject = ";
  protected final String TEXT_365 = ".getElement();" + NL + "\t";
  protected final String TEXT_366 = " nextValue;";
  protected final String TEXT_367 = NL + "\tint linkVID;";
  protected final String TEXT_368 = NL + "\tfor(";
  protected final String TEXT_369 = " it = ";
  protected final String TEXT_370 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_371 = ") it.next();";
  protected final String TEXT_372 = NL + "\tnextValue = (";
  protected final String TEXT_373 = ")";
  protected final String TEXT_374 = ";";
  protected final String TEXT_375 = NL + "\tlinkVID = ";
  protected final String TEXT_376 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_377 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_378 = NL + "\tcase ";
  protected final String TEXT_379 = ".VISUAL_ID: {";
  protected final String TEXT_380 = NL + "\tif (";
  protected final String TEXT_381 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_382 = NL + "\t\t";
  protected final String TEXT_383 = " source = (";
  protected final String TEXT_384 = ")";
  protected final String TEXT_385 = ";";
  protected final String TEXT_386 = NL + "\t\t";
  protected final String TEXT_387 = " source = ";
  protected final String TEXT_388 = ".getElement();";
  protected final String TEXT_389 = NL + "\t\t";
  protected final String TEXT_390 = " target = (";
  protected final String TEXT_391 = ")";
  protected final String TEXT_392 = ";";
  protected final String TEXT_393 = NL + "\t\t";
  protected final String TEXT_394 = " target = ";
  protected final String TEXT_395 = ".getElement();";
  protected final String TEXT_396 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_397 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_398 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_399 = NL + "\t}";
d421 12
a432 12
  protected final String TEXT_402 = NL + "\tfor(";
  protected final String TEXT_403 = " it = ";
  protected final String TEXT_404 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_405 = ") it.next();";
  protected final String TEXT_406 = NL + "\tnextValue = (";
  protected final String TEXT_407 = ")";
  protected final String TEXT_408 = ";";
  protected final String TEXT_409 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_410 = NL + "\t\tresult.add(new ";
  protected final String TEXT_411 = "(modelObject, nextValue, null, ";
  protected final String TEXT_412 = ".VISUAL_ID));";
  protected final String TEXT_413 = NL + "\t}";
d434 40
a473 40
  protected final String TEXT_415 = NL + "\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_416 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_417 = " result = new ";
  protected final String TEXT_418 = "();" + NL + "\t\t\t";
  protected final String TEXT_419 = " allLinks = ";
  protected final String TEXT_420 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_421 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_422 = " next = (";
  protected final String TEXT_423 = ") it.next();";
  protected final String TEXT_424 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_425 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_426 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_427 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_428 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_429 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_430 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_431 = ".VISUAL_ID:";
  protected final String TEXT_432 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_433 = NL + "\t\t\t\t} else {";
  protected final String TEXT_434 = NL + "\t\t\t\t}";
  protected final String TEXT_435 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_436 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_437 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_438 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_439 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_440 = ".VISUAL_ID:";
  protected final String TEXT_441 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_442 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_443 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_444 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_445 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_446 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_447 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_448 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_449 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_450 = " domainModelEditDomain = ";
  protected final String TEXT_451 = ".getEditingDomain(";
  protected final String TEXT_452 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_453 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_454 = NL;
d475 17
a491 7
  protected final String TEXT_456 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_457 = " domainModelRefresher = new ";
  protected final String TEXT_458 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_459 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_460 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_461 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "}";
  protected final String TEXT_462 = NL;
d501 1
d798 2
d801 1
a801 1
    stringBuffer.append(TEXT_82);
a808 1
    stringBuffer.append(TEXT_83);
d810 1
d812 1
a812 1
    stringBuffer.append(TEXT_85);
d814 1
a814 1
    stringBuffer.append(TEXT_86);
d817 1
a817 1
    stringBuffer.append(TEXT_87);
d819 1
a819 1
    stringBuffer.append(TEXT_88);
d822 1
a822 1
    stringBuffer.append(TEXT_89);
d824 1
a824 1
    stringBuffer.append(TEXT_90);
d826 1
a826 1
    stringBuffer.append(TEXT_91);
d828 1
a828 1
    stringBuffer.append(TEXT_92);
d830 1
a830 1
    stringBuffer.append(TEXT_93);
d832 1
a832 1
    stringBuffer.append(TEXT_94);
d834 1
a834 1
    stringBuffer.append(TEXT_95);
d836 1
a836 1
    stringBuffer.append(TEXT_96);
d840 1
a840 1
    stringBuffer.append(TEXT_97);
d842 1
a842 1
    stringBuffer.append(TEXT_98);
d844 1
a844 1
    stringBuffer.append(TEXT_99);
d854 1
a854 1
    stringBuffer.append(TEXT_100);
d856 1
a856 1
    stringBuffer.append(TEXT_101);
d858 1
a858 1
    stringBuffer.append(TEXT_102);
d862 1
a862 1
    stringBuffer.append(TEXT_103);
d866 1
a866 1
    stringBuffer.append(TEXT_104);
d868 1
a868 1
    stringBuffer.append(TEXT_105);
d870 1
a870 1
    stringBuffer.append(TEXT_106);
d873 1
a873 1
    stringBuffer.append(TEXT_107);
d875 1
a875 1
    stringBuffer.append(TEXT_108);
d878 1
a878 1
    stringBuffer.append(TEXT_109);
d881 1
a881 1
    stringBuffer.append(TEXT_110);
d883 1
a883 1
    stringBuffer.append(TEXT_111);
d885 1
a885 1
    stringBuffer.append(TEXT_112);
d887 1
a887 1
    stringBuffer.append(TEXT_113);
d889 1
a889 1
    stringBuffer.append(TEXT_114);
d891 1
a891 1
    stringBuffer.append(TEXT_115);
d893 1
a893 1
    stringBuffer.append(TEXT_116);
d895 1
a895 1
    stringBuffer.append(TEXT_117);
d900 1
a900 1
    stringBuffer.append(TEXT_118);
d902 1
a902 1
    stringBuffer.append(TEXT_119);
d904 1
a904 1
    stringBuffer.append(TEXT_120);
d906 1
a906 1
    stringBuffer.append(TEXT_121);
d908 1
a908 1
    stringBuffer.append(TEXT_122);
d912 1
a912 1
    stringBuffer.append(TEXT_123);
d914 1
a914 1
    stringBuffer.append(TEXT_124);
d916 1
a916 1
    stringBuffer.append(TEXT_125);
d918 1
a918 1
    stringBuffer.append(TEXT_126);
d922 1
a922 1
    stringBuffer.append(TEXT_127);
d924 1
a924 1
    stringBuffer.append(TEXT_128);
d926 1
a926 1
    stringBuffer.append(TEXT_129);
d928 1
a928 1
    stringBuffer.append(TEXT_130);
d930 1
a930 1
    stringBuffer.append(TEXT_131);
d932 1
a932 1
    stringBuffer.append(TEXT_132);
d934 1
a934 1
    stringBuffer.append(TEXT_133);
a940 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d944 2
d947 1
a947 1
    stringBuffer.append(TEXT_137);
d949 1
a949 1
    stringBuffer.append(TEXT_138);
d951 1
a951 1
    stringBuffer.append(TEXT_139);
d953 1
a953 1
    stringBuffer.append(TEXT_140);
d955 1
a955 1
    stringBuffer.append(TEXT_141);
d957 1
a957 1
    stringBuffer.append(TEXT_142);
d959 1
a959 1
    stringBuffer.append(TEXT_143);
d961 1
a961 1
    stringBuffer.append(TEXT_144);
d965 1
a965 1
    stringBuffer.append(TEXT_145);
d967 1
a967 1
    stringBuffer.append(TEXT_146);
d969 1
a969 1
    stringBuffer.append(TEXT_147);
d971 1
a971 1
    stringBuffer.append(TEXT_148);
d973 1
a973 1
    stringBuffer.append(TEXT_149);
d977 1
a977 1
    stringBuffer.append(TEXT_150);
d980 1
a980 1
    stringBuffer.append(TEXT_151);
d982 1
a982 1
    stringBuffer.append(TEXT_152);
d984 1
a984 1
    stringBuffer.append(TEXT_153);
d986 1
a986 1
    stringBuffer.append(TEXT_154);
d988 1
a988 1
    stringBuffer.append(TEXT_155);
d990 1
a990 1
    stringBuffer.append(TEXT_156);
a996 1
    stringBuffer.append(TEXT_157);
d999 1
d1001 1
a1001 1
    stringBuffer.append(TEXT_160);
d1003 1
a1003 1
    stringBuffer.append(TEXT_161);
a1004 1
    stringBuffer.append(TEXT_162);
a1006 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1010 2
d1016 1
a1016 1
    stringBuffer.append(TEXT_167);
d1020 1
a1020 1
    stringBuffer.append(TEXT_168);
d1025 1
a1025 1
    stringBuffer.append(TEXT_169);
d1029 1
a1029 1
    stringBuffer.append(TEXT_170);
a1036 1
    stringBuffer.append(TEXT_171);
d1038 1
d1040 1
a1040 1
    stringBuffer.append(TEXT_173);
d1042 1
a1042 1
    stringBuffer.append(TEXT_174);
d1044 1
a1044 1
    stringBuffer.append(TEXT_175);
a1045 2
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
d1051 2
d1067 1
a1067 1
    stringBuffer.append(TEXT_180);
a1068 2
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1072 2
d1077 1
a1077 1
    stringBuffer.append(TEXT_184);
d1079 1
a1079 1
    stringBuffer.append(TEXT_185);
a1097 2
    stringBuffer.append(TEXT_186);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1101 2
d1104 1
a1104 1
    stringBuffer.append(TEXT_189);
d1106 1
a1106 1
    stringBuffer.append(TEXT_190);
d1110 1
a1110 1
    stringBuffer.append(TEXT_191);
d1112 1
a1112 1
    stringBuffer.append(TEXT_192);
d1114 1
a1114 1
    stringBuffer.append(TEXT_193);
d1116 1
a1116 1
    stringBuffer.append(TEXT_194);
d1124 1
a1124 1
    stringBuffer.append(TEXT_195);
d1126 1
a1126 1
    stringBuffer.append(TEXT_196);
d1128 1
a1128 1
    stringBuffer.append(TEXT_197);
a1132 2
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1136 2
d1139 1
a1139 1
    stringBuffer.append(TEXT_201);
d1148 1
a1148 1
    stringBuffer.append(TEXT_202);
d1152 1
a1152 1
    stringBuffer.append(TEXT_203);
d1154 1
a1154 1
    stringBuffer.append(TEXT_204);
a1159 2
    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1163 2
d1168 1
a1168 1
    stringBuffer.append(TEXT_208);
d1172 1
a1172 1
    stringBuffer.append(TEXT_209);
d1174 1
a1174 1
    stringBuffer.append(TEXT_210);
d1176 1
a1176 1
    stringBuffer.append(TEXT_211);
d1178 1
a1178 1
    stringBuffer.append(TEXT_212);
d1188 1
a1188 1
    stringBuffer.append(TEXT_213);
d1190 1
a1190 1
    stringBuffer.append(TEXT_214);
d1192 1
a1192 1
    stringBuffer.append(TEXT_215);
d1195 1
a1195 1
    stringBuffer.append(TEXT_216);
d1197 1
a1197 1
    stringBuffer.append(TEXT_217);
d1199 1
a1199 1
    stringBuffer.append(TEXT_218);
d1203 1
a1203 1
    stringBuffer.append(TEXT_219);
a1204 1
    stringBuffer.append(TEXT_220);
d1206 1
d1210 1
a1210 1
    stringBuffer.append(TEXT_222);
d1212 1
a1212 1
    stringBuffer.append(TEXT_223);
d1216 1
a1216 1
    stringBuffer.append(TEXT_224);
d1218 1
a1218 1
    stringBuffer.append(TEXT_225);
d1220 1
a1220 1
    stringBuffer.append(TEXT_226);
d1238 1
a1238 1
    stringBuffer.append(TEXT_227);
d1240 1
a1240 1
    stringBuffer.append(TEXT_228);
a1241 2
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1245 2
d1255 1
a1255 1
    stringBuffer.append(TEXT_232);
d1257 1
a1257 1
    stringBuffer.append(TEXT_233);
d1259 1
a1259 1
    stringBuffer.append(TEXT_234);
d1261 1
a1261 1
    stringBuffer.append(TEXT_235);
d1265 1
a1265 1
    stringBuffer.append(TEXT_236);
d1267 1
a1267 1
    stringBuffer.append(TEXT_237);
d1269 1
a1269 1
    stringBuffer.append(TEXT_238);
d1273 1
a1273 1
    stringBuffer.append(TEXT_239);
d1275 1
a1275 1
    stringBuffer.append(TEXT_240);
d1280 1
a1280 1
    stringBuffer.append(TEXT_241);
d1287 1
a1287 1
    stringBuffer.append(TEXT_242);
d1289 1
a1289 1
    stringBuffer.append(TEXT_243);
d1293 1
a1293 1
    stringBuffer.append(TEXT_244);
d1295 1
a1295 1
    stringBuffer.append(TEXT_245);
d1299 1
a1299 1
    stringBuffer.append(TEXT_246);
d1301 1
a1301 1
    stringBuffer.append(TEXT_247);
d1305 1
a1305 1
    stringBuffer.append(TEXT_248);
d1309 1
a1309 1
    stringBuffer.append(TEXT_249);
d1315 1
a1315 1
    stringBuffer.append(TEXT_250);
d1320 1
a1320 1
    stringBuffer.append(TEXT_251);
d1325 1
a1325 1
    stringBuffer.append(TEXT_252);
d1329 1
a1329 1
    stringBuffer.append(TEXT_253);
d1331 1
a1331 1
    stringBuffer.append(TEXT_254);
d1333 1
a1333 1
    stringBuffer.append(TEXT_255);
d1335 1
a1335 1
    stringBuffer.append(TEXT_256);
d1337 1
a1337 1
    stringBuffer.append(TEXT_257);
d1339 1
a1339 1
    stringBuffer.append(TEXT_258);
d1341 1
a1341 1
    stringBuffer.append(TEXT_259);
d1343 1
a1343 1
    stringBuffer.append(TEXT_260);
d1345 1
a1345 1
    stringBuffer.append(TEXT_261);
d1347 1
a1347 1
    stringBuffer.append(TEXT_262);
d1349 1
a1349 1
    stringBuffer.append(TEXT_263);
a1350 1
    stringBuffer.append(TEXT_264);
d1352 1
d1356 1
a1356 1
    stringBuffer.append(TEXT_266);
d1358 1
a1358 1
    stringBuffer.append(TEXT_267);
d1360 1
a1360 1
    stringBuffer.append(TEXT_268);
a1361 2
    stringBuffer.append(TEXT_269);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
d1365 2
d1368 1
a1368 1
    stringBuffer.append(TEXT_272);
d1370 1
a1370 1
    stringBuffer.append(TEXT_273);
d1372 1
a1372 1
    stringBuffer.append(TEXT_274);
d1385 1
a1385 1
    stringBuffer.append(TEXT_275);
a1386 2
    stringBuffer.append(TEXT_276);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1390 2
a1395 2
    stringBuffer.append(TEXT_279);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1399 2
d1402 1
a1402 1
    stringBuffer.append(TEXT_282);
d1404 1
a1404 1
    stringBuffer.append(TEXT_283);
d1406 1
a1406 1
    stringBuffer.append(TEXT_284);
d1408 1
a1408 1
    stringBuffer.append(TEXT_285);
d1410 1
a1410 1
    stringBuffer.append(TEXT_286);
d1412 1
a1412 1
    stringBuffer.append(TEXT_287);
d1414 1
a1414 1
    stringBuffer.append(TEXT_288);
d1418 1
a1418 1
    stringBuffer.append(TEXT_289);
d1420 1
a1420 1
    stringBuffer.append(TEXT_290);
d1433 1
a1433 1
    stringBuffer.append(TEXT_291);
a1446 2
    stringBuffer.append(TEXT_292);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1450 2
d1453 1
a1453 1
    stringBuffer.append(TEXT_295);
d1455 1
a1455 1
    stringBuffer.append(TEXT_296);
d1459 1
a1459 1
    stringBuffer.append(TEXT_297);
d1461 1
a1461 1
    stringBuffer.append(TEXT_298);
d1463 1
a1463 1
    stringBuffer.append(TEXT_299);
d1465 1
a1465 1
    stringBuffer.append(TEXT_300);
d1472 1
a1472 1
    stringBuffer.append(TEXT_301);
a1485 2
    stringBuffer.append(TEXT_302);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1489 2
d1492 1
a1492 1
    stringBuffer.append(TEXT_305);
d1494 1
a1494 1
    stringBuffer.append(TEXT_306);
d1498 1
a1498 1
    stringBuffer.append(TEXT_307);
d1500 1
a1500 1
    stringBuffer.append(TEXT_308);
d1502 1
a1502 1
    stringBuffer.append(TEXT_309);
d1504 1
a1504 1
    stringBuffer.append(TEXT_310);
d1511 1
a1511 1
    stringBuffer.append(TEXT_311);
a1524 2
    stringBuffer.append(TEXT_312);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1528 2
d1531 1
a1531 1
    stringBuffer.append(TEXT_315);
d1533 1
a1533 1
    stringBuffer.append(TEXT_316);
d1537 1
a1537 1
    stringBuffer.append(TEXT_317);
d1539 1
a1539 1
    stringBuffer.append(TEXT_318);
d1541 1
a1541 1
    stringBuffer.append(TEXT_319);
d1543 1
a1543 1
    stringBuffer.append(TEXT_320);
d1553 1
a1553 1
    stringBuffer.append(TEXT_321);
a1566 2
    stringBuffer.append(TEXT_322);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1570 2
d1573 1
a1573 1
    stringBuffer.append(TEXT_325);
d1575 1
a1575 1
    stringBuffer.append(TEXT_326);
d1579 1
a1579 1
    stringBuffer.append(TEXT_327);
d1581 1
a1581 1
    stringBuffer.append(TEXT_328);
d1583 1
a1583 1
    stringBuffer.append(TEXT_329);
d1585 1
a1585 1
    stringBuffer.append(TEXT_330);
d1594 1
a1594 1
    stringBuffer.append(TEXT_331);
d1599 1
a1599 1
    stringBuffer.append(TEXT_332);
d1601 1
a1601 1
    stringBuffer.append(TEXT_333);
d1608 1
a1608 1
    stringBuffer.append(TEXT_334);
d1613 1
a1613 1
    stringBuffer.append(TEXT_335);
d1615 1
a1615 1
    stringBuffer.append(TEXT_336);
a1620 2
    stringBuffer.append(TEXT_337);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1624 2
d1630 1
a1630 1
    stringBuffer.append(TEXT_340);
d1632 1
a1632 1
    stringBuffer.append(TEXT_341);
a1633 2
    stringBuffer.append(TEXT_342);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
d1637 1
a1637 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1641 2
d1644 1
a1644 1
    stringBuffer.append(TEXT_347);
d1646 1
a1646 1
    stringBuffer.append(TEXT_348);
d1655 1
a1655 1
    stringBuffer.append(TEXT_349);
d1657 1
a1657 1
    stringBuffer.append(TEXT_350);
d1659 1
a1659 1
    stringBuffer.append(TEXT_351);
d1661 1
a1661 1
    stringBuffer.append(TEXT_352);
d1667 1
a1667 1
    stringBuffer.append(TEXT_353);
d1669 1
a1669 1
    stringBuffer.append(TEXT_354);
d1671 1
a1671 1
    stringBuffer.append(TEXT_355);
d1675 1
a1675 1
    stringBuffer.append(TEXT_356);
d1677 1
a1677 1
    stringBuffer.append(TEXT_357);
a1678 1
    stringBuffer.append(TEXT_358);
d1681 1
d1683 1
a1683 1
    stringBuffer.append(TEXT_361);
d1685 1
a1685 1
    stringBuffer.append(TEXT_362);
d1708 1
a1708 1
    stringBuffer.append(TEXT_363);
d1710 1
a1710 1
    stringBuffer.append(TEXT_364);
d1712 1
a1712 1
    stringBuffer.append(TEXT_365);
d1714 1
a1714 1
    stringBuffer.append(TEXT_366);
d1719 1
a1719 1
    stringBuffer.append(TEXT_367);
d1728 1
a1728 1
    stringBuffer.append(TEXT_368);
d1730 1
a1730 1
    stringBuffer.append(TEXT_369);
d1732 1
a1732 1
    stringBuffer.append(TEXT_370);
d1734 1
a1734 1
    stringBuffer.append(TEXT_371);
d1738 1
a1738 1
    stringBuffer.append(TEXT_372);
d1740 1
a1740 1
    stringBuffer.append(TEXT_373);
d1742 1
a1742 1
    stringBuffer.append(TEXT_374);
d1746 1
a1746 1
    stringBuffer.append(TEXT_375);
d1748 1
a1748 1
    stringBuffer.append(TEXT_376);
d1753 1
a1753 1
    stringBuffer.append(TEXT_377);
d1761 1
a1761 1
    stringBuffer.append(TEXT_378);
d1763 1
a1763 1
    stringBuffer.append(TEXT_379);
d1767 1
a1767 1
    stringBuffer.append(TEXT_380);
d1769 1
a1769 1
    stringBuffer.append(TEXT_381);
a1773 2
    stringBuffer.append(TEXT_382);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1777 2
d1780 1
a1780 1
    stringBuffer.append(TEXT_385);
d1784 1
a1784 1
    stringBuffer.append(TEXT_386);
d1786 1
a1786 1
    stringBuffer.append(TEXT_387);
d1788 1
a1788 1
    stringBuffer.append(TEXT_388);
a1792 2
    stringBuffer.append(TEXT_389);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1796 2
d1799 1
a1799 1
    stringBuffer.append(TEXT_392);
d1803 1
a1803 1
    stringBuffer.append(TEXT_393);
d1805 1
a1805 1
    stringBuffer.append(TEXT_394);
d1807 1
a1807 1
    stringBuffer.append(TEXT_395);
d1811 1
a1811 1
    stringBuffer.append(TEXT_396);
d1813 1
a1813 1
    stringBuffer.append(TEXT_397);
d1817 1
a1817 1
    stringBuffer.append(TEXT_398);
d1821 1
a1821 1
    stringBuffer.append(TEXT_399);
d1829 1
a1829 1
    stringBuffer.append(TEXT_400);
d1834 1
a1834 1
    stringBuffer.append(TEXT_401);
d1844 1
a1844 1
    stringBuffer.append(TEXT_402);
d1846 1
a1846 1
    stringBuffer.append(TEXT_403);
d1848 1
a1848 1
    stringBuffer.append(TEXT_404);
d1850 1
a1850 1
    stringBuffer.append(TEXT_405);
d1854 1
a1854 1
    stringBuffer.append(TEXT_406);
d1856 1
a1856 1
    stringBuffer.append(TEXT_407);
d1858 1
a1858 1
    stringBuffer.append(TEXT_408);
d1862 1
a1862 1
    stringBuffer.append(TEXT_409);
d1867 1
a1867 1
    stringBuffer.append(TEXT_410);
d1869 1
a1869 1
    stringBuffer.append(TEXT_411);
d1871 1
a1871 1
    stringBuffer.append(TEXT_412);
d1875 1
a1875 1
    stringBuffer.append(TEXT_413);
d1879 1
a1879 1
    stringBuffer.append(TEXT_414);
a1883 2
    stringBuffer.append(TEXT_415);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1887 2
d1890 1
a1890 1
    stringBuffer.append(TEXT_418);
d1892 1
a1892 1
    stringBuffer.append(TEXT_419);
d1894 1
a1894 1
    stringBuffer.append(TEXT_420);
a1895 2
    stringBuffer.append(TEXT_421);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d1899 2
a1903 2
    stringBuffer.append(TEXT_424);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1907 2
d1913 1
a1913 1
    stringBuffer.append(TEXT_427);
d1915 1
a1915 1
    stringBuffer.append(TEXT_428);
d1917 1
a1917 1
    stringBuffer.append(TEXT_429);
d1922 1
a1922 1
    stringBuffer.append(TEXT_430);
d1924 1
a1924 1
    stringBuffer.append(TEXT_431);
d1928 1
a1928 1
    stringBuffer.append(TEXT_432);
d1932 1
a1932 1
    stringBuffer.append(TEXT_433);
d1936 1
a1936 1
    stringBuffer.append(TEXT_434);
d1943 1
a1943 1
    stringBuffer.append(TEXT_435);
d1947 1
a1947 1
    stringBuffer.append(TEXT_436);
d1949 1
a1949 1
    stringBuffer.append(TEXT_437);
d1951 1
a1951 1
    stringBuffer.append(TEXT_438);
d1956 1
a1956 1
    stringBuffer.append(TEXT_439);
d1958 1
a1958 1
    stringBuffer.append(TEXT_440);
d1962 1
a1962 1
    stringBuffer.append(TEXT_441);
d1966 1
a1966 1
    stringBuffer.append(TEXT_442);
d1968 1
a1968 1
    stringBuffer.append(TEXT_443);
d1970 1
a1970 1
    stringBuffer.append(TEXT_444);
d1972 1
a1972 1
    stringBuffer.append(TEXT_445);
d1974 1
a1974 1
    stringBuffer.append(TEXT_446);
d1976 1
a1976 1
    stringBuffer.append(TEXT_447);
d1978 1
a1978 1
    stringBuffer.append(TEXT_448);
d1980 1
a1980 1
    stringBuffer.append(TEXT_449);
d1982 1
a1982 1
    stringBuffer.append(TEXT_450);
d1984 1
a1984 1
    stringBuffer.append(TEXT_451);
d1986 1
a1986 1
    stringBuffer.append(TEXT_452);
d1988 1
a1988 1
    stringBuffer.append(TEXT_453);
a1994 1
    stringBuffer.append(TEXT_454);
a1996 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d2000 1
a2000 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager"));
d2006 18
d2025 1
a2025 1
    stringBuffer.append(TEXT_462);
@


1.10
log
@clean compilation warnings
@
text
@d69 35
a103 35
  protected final String TEXT_50 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ChangeBoundsRequest request, EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_51 = " emfCommand = new ";
  protected final String TEXT_52 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate Point moveDelta;" + NL + "\t\t\t\t\tprivate Dimension resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof Bounds == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_53 = " original = new ";
  protected final String TEXT_54 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_55 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(Point move, Dimension resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_56 = "(";
  protected final String TEXT_57 = ".getEditingDomain(getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_58 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_59 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_60 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_61 = "(this);" + NL + "\t\t}";
  protected final String TEXT_62 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_63 = NL;
  protected final String TEXT_64 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_65 = "static ";
  protected final String TEXT_66 = "class Create";
  protected final String TEXT_67 = "NotationCommand extends ";
  protected final String TEXT_68 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_69 = "NotationCommand(";
  protected final String TEXT_70 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_71 = " domainElement";
  protected final String TEXT_72 = ", ";
  protected final String TEXT_73 = " constraint";
  protected final String TEXT_74 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_75 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_76 = ".decorateView(createdNode);";
  protected final String TEXT_77 = NL + "\t\t\t";
  protected final String TEXT_78 = " bounds = ";
  protected final String TEXT_79 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_80 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_81 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_82 = "));";
  protected final String TEXT_83 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_84 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
d106 204
a309 204
  protected final String TEXT_87 = "Command extends ";
  protected final String TEXT_88 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_89 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_90 = "Command(";
  protected final String TEXT_91 = " parent, ";
  protected final String TEXT_92 = " request";
  protected final String TEXT_93 = ", ";
  protected final String TEXT_94 = " constraint";
  protected final String TEXT_95 = ") {" + NL + "\t\t\t";
  protected final String TEXT_96 = " domainModelEditDomain = ";
  protected final String TEXT_97 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_98 = NL + "\t\t\t";
  protected final String TEXT_99 = " createdDomainElement = ";
  protected final String TEXT_100 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_101 = ".eINSTANCE.get";
  protected final String TEXT_102 = "());";
  protected final String TEXT_103 = NL + "\t\t\t";
  protected final String TEXT_104 = " createdDomainElement = ";
  protected final String TEXT_105 = ".eINSTANCE.create";
  protected final String TEXT_106 = "();";
  protected final String TEXT_107 = NL + "\t\t\t";
  protected final String TEXT_108 = NL + "\t\t\t";
  protected final String TEXT_109 = ".";
  protected final String TEXT_110 = ".initializeElement(";
  protected final String TEXT_111 = "(";
  protected final String TEXT_112 = ") ";
  protected final String TEXT_113 = "createdDomainElement);";
  protected final String TEXT_114 = NL + "\t\t\t";
  protected final String TEXT_115 = " compoundCommand = new ";
  protected final String TEXT_116 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_117 = ".create(domainModelEditDomain, ";
  protected final String TEXT_118 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_119 = ".eINSTANCE.get";
  protected final String TEXT_120 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_121 = ".create(domainModelEditDomain, ";
  protected final String TEXT_122 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_123 = ".eINSTANCE.get";
  protected final String TEXT_124 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_125 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_126 = ".create(domainModelEditDomain, ";
  protected final String TEXT_127 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_128 = ".eINSTANCE.get";
  protected final String TEXT_129 = "(), createdDomainElement);";
  protected final String TEXT_130 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_131 = "NotationCommand(parent, ";
  protected final String TEXT_132 = "(";
  protected final String TEXT_133 = ") ";
  protected final String TEXT_134 = "createdDomainElement";
  protected final String TEXT_135 = ", constraint";
  protected final String TEXT_136 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_137 = NL;
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_140 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_141 = " feature, ";
  protected final String TEXT_142 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_143 = NL;
  protected final String TEXT_144 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_145 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_146 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(getUpdateManager())) {" + NL + "\t\t\tgetDiagram().eAdapters().add(getUpdateManager());" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_147 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_148 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_149 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_150 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(getUpdateManager());" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_151 = NL;
  protected final String TEXT_152 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_153 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_154 = " domainModelEditDomain = ";
  protected final String TEXT_155 = ".getEditingDomain(";
  protected final String TEXT_156 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_157 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_158 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_159 = " {";
  protected final String TEXT_160 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_161 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_162 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_163 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_164 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_165 = " createFilter() {";
  protected final String TEXT_166 = NL + "\t\t\t";
  protected final String TEXT_167 = " filter = ";
  protected final String TEXT_168 = ".createFeatureFilter(";
  protected final String TEXT_169 = ".eINSTANCE.get";
  protected final String TEXT_170 = "());";
  protected final String TEXT_171 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_172 = ".createFeatureFilter(";
  protected final String TEXT_173 = ".eINSTANCE.get";
  protected final String TEXT_174 = "()));";
  protected final String TEXT_175 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_176 = ".createNotifierFilter(";
  protected final String TEXT_177 = ".getElement()));";
  protected final String TEXT_178 = NL + "\t\t\t";
  protected final String TEXT_179 = " filter = ";
  protected final String TEXT_180 = ".createNotifierFilter(";
  protected final String TEXT_181 = ".getElement());";
  protected final String TEXT_182 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_183 = NL + "\t\t\t";
  protected final String TEXT_184 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_185 = NL + "\t\t\t";
  protected final String TEXT_186 = " filter = ";
  protected final String TEXT_187 = ".NOT_TOUCH;";
  protected final String TEXT_188 = NL + "\t\t\treturn filter;";
  protected final String TEXT_189 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_190 = " getCreateNotationalElementCommand(";
  protected final String TEXT_191 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_192 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_193 = NL + "\t\t\tcase ";
  protected final String TEXT_194 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_195 = ") {" + NL + "\t\t\t\t\treturn new Create";
  protected final String TEXT_196 = "NotationCommand(getHost(), domainElement";
  protected final String TEXT_197 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_198 = ");" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_199 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_200 = " getSemanticChildNodes() {";
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = NL + "\treturn ";
  protected final String TEXT_203 = ".EMPTY_LIST;";
  protected final String TEXT_204 = NL + "\t";
  protected final String TEXT_205 = " result = new ";
  protected final String TEXT_206 = "();";
  protected final String TEXT_207 = NL + "\t";
  protected final String TEXT_208 = " viewObject = ";
  protected final String TEXT_209 = ";" + NL + "\t";
  protected final String TEXT_210 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_211 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_212 = NL + "\tfor(";
  protected final String TEXT_213 = " it = ";
  protected final String TEXT_214 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_215 = ") it.next();";
  protected final String TEXT_216 = NL + "\tnextValue = (";
  protected final String TEXT_217 = ")";
  protected final String TEXT_218 = ";";
  protected final String TEXT_219 = NL + "\tnodeVID = ";
  protected final String TEXT_220 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_221 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_222 = NL + "\tcase ";
  protected final String TEXT_223 = ".VISUAL_ID: {";
  protected final String TEXT_224 = NL + "\tif (";
  protected final String TEXT_225 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_226 = NL + "\t\tresult.add(new ";
  protected final String TEXT_227 = "(nextValue, nodeVID));";
  protected final String TEXT_228 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_229 = NL + "\t\t}";
  protected final String TEXT_230 = NL + "\t}";
  protected final String TEXT_231 = NL + "\t}";
  protected final String TEXT_232 = NL + "\treturn result;";
  protected final String TEXT_233 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_234 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_235 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_236 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_237 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_238 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_239 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_240 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_241 = " domainModelEditDomain = ";
  protected final String TEXT_242 = ".getEditingDomain(";
  protected final String TEXT_243 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_244 = "(domainModelEditDomain, command));" + NL + "\t}" + NL + NL;
  protected final String TEXT_245 = NL;
  protected final String TEXT_246 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_247 = " domainModelEditDomain = ";
  protected final String TEXT_248 = ".getEditingDomain(";
  protected final String TEXT_249 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_250 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_251 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_252 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_253 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_254 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_255 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_256 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_257 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_258 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_259 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_260 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_261 = ".createEventTypeFilter(";
  protected final String TEXT_262 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_263 = ".createEventTypeFilter(";
  protected final String TEXT_264 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_265 = ".createEventTypeFilter(";
  protected final String TEXT_266 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_267 = ".createEventTypeFilter(";
  protected final String TEXT_268 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_269 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_270 = " createFilter() {";
  protected final String TEXT_271 = NL;
  protected final String TEXT_272 = NL + "\t\t\t";
  protected final String TEXT_273 = " filter = ";
  protected final String TEXT_274 = ".createFeatureFilter(";
  protected final String TEXT_275 = ".eINSTANCE.get";
  protected final String TEXT_276 = "());";
  protected final String TEXT_277 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_278 = ".createFeatureFilter(";
  protected final String TEXT_279 = ".eINSTANCE.get";
  protected final String TEXT_280 = "()));";
  protected final String TEXT_281 = NL;
  protected final String TEXT_282 = NL + "\t\t\t";
  protected final String TEXT_283 = " filter = ";
  protected final String TEXT_284 = ".createFeatureFilter(";
  protected final String TEXT_285 = ".eINSTANCE.get";
  protected final String TEXT_286 = "());";
  protected final String TEXT_287 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_288 = ".createFeatureFilter(";
  protected final String TEXT_289 = ".eINSTANCE.get";
  protected final String TEXT_290 = "()));";
d330 1
a330 1
  protected final String TEXT_311 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
d332 150
a481 130
  protected final String TEXT_313 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_314 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_315 = NL + "\t\t\t";
  protected final String TEXT_316 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_317 = NL + "\t\t\t";
  protected final String TEXT_318 = " filter = ";
  protected final String TEXT_319 = ".NOT_TOUCH;";
  protected final String TEXT_320 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_321 = " getCreateNotationalElementCommand(";
  protected final String TEXT_322 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_323 = " linkDescriptor = (";
  protected final String TEXT_324 = ") descriptor;" + NL + "\t\t\t";
  protected final String TEXT_325 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_326 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_327 = " createdEdge = ";
  protected final String TEXT_328 = ".eINSTANCE.createEdge();" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_329 = NL + "\t\t\tcase ";
  protected final String TEXT_330 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_331 = ") {" + NL + "\t\t\t\t\tcreatedEdge.setElement(linkDescriptor.getElement());" + NL + "\t\t\t\t\t";
  protected final String TEXT_332 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_333 = NL + "\t\t\tcase ";
  protected final String TEXT_334 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t\t";
  protected final String TEXT_335 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_336 = NL + "\t\t\t}" + NL + "\t\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_337 = "(getHost().getDiagram(), createdEdge, sourceView, targetView);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_338 = " getSemanticChildLinks() {";
  protected final String TEXT_339 = NL;
  protected final String TEXT_340 = "\t";
  protected final String TEXT_341 = " result = new ";
  protected final String TEXT_342 = "();";
  protected final String TEXT_343 = NL + "\t";
  protected final String TEXT_344 = " modelObject = ";
  protected final String TEXT_345 = ".getElement();" + NL + "\t";
  protected final String TEXT_346 = " nextValue;";
  protected final String TEXT_347 = NL + "\tint linkVID;";
  protected final String TEXT_348 = NL + "\tfor(";
  protected final String TEXT_349 = " it = ";
  protected final String TEXT_350 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_351 = ") it.next();";
  protected final String TEXT_352 = NL + "\tnextValue = (";
  protected final String TEXT_353 = ")";
  protected final String TEXT_354 = ";";
  protected final String TEXT_355 = NL + "\tlinkVID = ";
  protected final String TEXT_356 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_357 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_358 = NL + "\tcase ";
  protected final String TEXT_359 = ".VISUAL_ID: {";
  protected final String TEXT_360 = NL + "\tif (";
  protected final String TEXT_361 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_362 = NL + "\t\t";
  protected final String TEXT_363 = " source = (";
  protected final String TEXT_364 = ")";
  protected final String TEXT_365 = ";";
  protected final String TEXT_366 = NL + "\t\t";
  protected final String TEXT_367 = " source = ";
  protected final String TEXT_368 = ".getElement();";
  protected final String TEXT_369 = NL + "\t\t";
  protected final String TEXT_370 = " target = (";
  protected final String TEXT_371 = ")";
  protected final String TEXT_372 = ";";
  protected final String TEXT_373 = NL + "\t\t";
  protected final String TEXT_374 = " target = ";
  protected final String TEXT_375 = ".getElement();";
  protected final String TEXT_376 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_377 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_378 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_379 = NL + "\t}";
  protected final String TEXT_380 = NL + "\t}";
  protected final String TEXT_381 = NL + "\t}";
  protected final String TEXT_382 = NL + "\tfor(";
  protected final String TEXT_383 = " it = ";
  protected final String TEXT_384 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_385 = ") it.next();";
  protected final String TEXT_386 = NL + "\tnextValue = (";
  protected final String TEXT_387 = ")";
  protected final String TEXT_388 = ";";
  protected final String TEXT_389 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_390 = NL + "\t\tresult.add(new ";
  protected final String TEXT_391 = "(modelObject, nextValue, null, ";
  protected final String TEXT_392 = ".VISUAL_ID));";
  protected final String TEXT_393 = NL + "\t}";
  protected final String TEXT_394 = NL + "\t}";
  protected final String TEXT_395 = NL + "\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_396 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_397 = " result = new ";
  protected final String TEXT_398 = "();" + NL + "\t\t\t";
  protected final String TEXT_399 = " allLinks = ";
  protected final String TEXT_400 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_401 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_402 = " next = (";
  protected final String TEXT_403 = ") it.next();";
  protected final String TEXT_404 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_405 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_406 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_407 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_408 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_409 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_410 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_411 = ".VISUAL_ID:";
  protected final String TEXT_412 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_413 = NL + "\t\t\t\t} else {";
  protected final String TEXT_414 = NL + "\t\t\t\t}";
  protected final String TEXT_415 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_416 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_417 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_418 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_419 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_420 = ".VISUAL_ID:";
  protected final String TEXT_421 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_422 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_423 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_424 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_425 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_426 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_427 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_428 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_429 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_430 = " domainModelEditDomain = ";
  protected final String TEXT_431 = ".getEditingDomain(";
  protected final String TEXT_432 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_433 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_434 = NL;
  protected final String TEXT_435 = NL;
  protected final String TEXT_436 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_437 = " domainModelRefresher = new ";
  protected final String TEXT_438 = "(this);" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_439 = " updateManager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_440 = " getUpdateManager() {" + NL + "\t\tif (updateManager == null) {" + NL + "\t\t\tupdateManager = new ";
  protected final String TEXT_441 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn updateManager;" + NL + "\t}" + NL + "}";
  protected final String TEXT_442 = NL;
d722 12
d735 1
a735 1
    stringBuffer.append(TEXT_51);
d737 11
a747 1
    stringBuffer.append(TEXT_52);
d749 1
a749 1
    stringBuffer.append(TEXT_53);
d751 5
a755 1
    stringBuffer.append(TEXT_54);
d757 9
a765 1
    stringBuffer.append(TEXT_55);
d767 1
a767 1
    stringBuffer.append(TEXT_56);
d769 5
a773 1
    stringBuffer.append(TEXT_57);
d778 1
a778 1
    stringBuffer.append(TEXT_58);
d782 1
a782 1
    stringBuffer.append(TEXT_59);
d784 1
a784 1
    stringBuffer.append(TEXT_60);
d786 1
a786 1
    stringBuffer.append(TEXT_61);
d788 1
a788 1
    stringBuffer.append(TEXT_62);
d796 2
a797 2
    stringBuffer.append(TEXT_63);
    stringBuffer.append(TEXT_64);
d799 1
a799 1
    stringBuffer.append(TEXT_65);
d801 1
a801 1
    stringBuffer.append(TEXT_66);
d804 1
a804 1
    stringBuffer.append(TEXT_67);
d806 1
a806 1
    stringBuffer.append(TEXT_68);
d809 1
a809 1
    stringBuffer.append(TEXT_69);
d811 1
a811 1
    stringBuffer.append(TEXT_70);
d813 1
a813 1
    stringBuffer.append(TEXT_71);
d815 1
a815 1
    stringBuffer.append(TEXT_72);
d817 1
a817 1
    stringBuffer.append(TEXT_73);
d819 1
a819 1
    stringBuffer.append(TEXT_74);
d821 1
a821 1
    stringBuffer.append(TEXT_75);
d823 1
a823 1
    stringBuffer.append(TEXT_76);
d827 1
a827 1
    stringBuffer.append(TEXT_77);
d829 1
a829 1
    stringBuffer.append(TEXT_78);
d831 1
a831 1
    stringBuffer.append(TEXT_79);
d841 1
a841 1
    stringBuffer.append(TEXT_80);
d843 1
a843 1
    stringBuffer.append(TEXT_81);
d845 1
a845 1
    stringBuffer.append(TEXT_82);
d849 1
a849 1
    stringBuffer.append(TEXT_83);
d853 1
a853 1
    stringBuffer.append(TEXT_84);
d855 1
a855 1
    stringBuffer.append(TEXT_85);
d857 1
a857 1
    stringBuffer.append(TEXT_86);
d860 1
a860 1
    stringBuffer.append(TEXT_87);
d862 1
a862 1
    stringBuffer.append(TEXT_88);
d865 1
a865 1
    stringBuffer.append(TEXT_89);
d868 1
a868 1
    stringBuffer.append(TEXT_90);
d870 1
a870 1
    stringBuffer.append(TEXT_91);
d872 1
a872 1
    stringBuffer.append(TEXT_92);
d874 1
a874 1
    stringBuffer.append(TEXT_93);
d876 1
a876 1
    stringBuffer.append(TEXT_94);
d878 1
a878 1
    stringBuffer.append(TEXT_95);
d880 1
a880 1
    stringBuffer.append(TEXT_96);
d882 1
a882 1
    stringBuffer.append(TEXT_97);
d887 1
a887 1
    stringBuffer.append(TEXT_98);
d889 1
a889 1
    stringBuffer.append(TEXT_99);
d891 1
a891 1
    stringBuffer.append(TEXT_100);
d893 1
a893 1
    stringBuffer.append(TEXT_101);
d895 1
a895 1
    stringBuffer.append(TEXT_102);
d899 1
a899 1
    stringBuffer.append(TEXT_103);
d901 1
a901 1
    stringBuffer.append(TEXT_104);
d903 1
a903 1
    stringBuffer.append(TEXT_105);
d905 1
a905 1
    stringBuffer.append(TEXT_106);
d909 1
a909 1
    stringBuffer.append(TEXT_107);
d911 1
a911 1
    stringBuffer.append(TEXT_108);
d913 1
a913 1
    stringBuffer.append(TEXT_109);
d915 1
a915 1
    stringBuffer.append(TEXT_110);
d917 1
a917 1
    stringBuffer.append(TEXT_111);
d919 1
a919 1
    stringBuffer.append(TEXT_112);
d921 1
a921 1
    stringBuffer.append(TEXT_113);
d928 1
a928 1
    stringBuffer.append(TEXT_114);
d930 1
a930 1
    stringBuffer.append(TEXT_115);
d932 1
a932 1
    stringBuffer.append(TEXT_116);
d934 1
a934 1
    stringBuffer.append(TEXT_117);
d936 1
a936 1
    stringBuffer.append(TEXT_118);
d938 1
a938 1
    stringBuffer.append(TEXT_119);
d940 1
a940 1
    stringBuffer.append(TEXT_120);
d942 1
a942 1
    stringBuffer.append(TEXT_121);
d944 1
a944 1
    stringBuffer.append(TEXT_122);
d946 1
a946 1
    stringBuffer.append(TEXT_123);
d948 1
a948 1
    stringBuffer.append(TEXT_124);
d952 1
a952 1
    stringBuffer.append(TEXT_125);
d954 1
a954 1
    stringBuffer.append(TEXT_126);
d956 1
a956 1
    stringBuffer.append(TEXT_127);
d958 1
a958 1
    stringBuffer.append(TEXT_128);
d960 1
a960 1
    stringBuffer.append(TEXT_129);
d964 1
a964 1
    stringBuffer.append(TEXT_130);
d967 1
a967 1
    stringBuffer.append(TEXT_131);
d969 1
a969 1
    stringBuffer.append(TEXT_132);
d971 1
a971 1
    stringBuffer.append(TEXT_133);
d973 1
a973 1
    stringBuffer.append(TEXT_134);
d975 1
a975 1
    stringBuffer.append(TEXT_135);
d977 1
a977 1
    stringBuffer.append(TEXT_136);
d984 3
a986 3
    stringBuffer.append(TEXT_137);
    stringBuffer.append(TEXT_138);
    stringBuffer.append(TEXT_139);
d988 1
a988 1
    stringBuffer.append(TEXT_140);
d990 1
a990 1
    stringBuffer.append(TEXT_141);
d992 3
a994 3
    stringBuffer.append(TEXT_142);
    stringBuffer.append(TEXT_143);
    stringBuffer.append(TEXT_144);
d996 1
a996 1
    stringBuffer.append(TEXT_145);
d998 1
a998 1
    stringBuffer.append(TEXT_146);
d1003 1
a1003 1
    stringBuffer.append(TEXT_147);
d1007 1
a1007 1
    stringBuffer.append(TEXT_148);
d1012 1
a1012 1
    stringBuffer.append(TEXT_149);
d1016 1
a1016 1
    stringBuffer.append(TEXT_150);
d1024 2
a1025 2
    stringBuffer.append(TEXT_151);
    stringBuffer.append(TEXT_152);
d1027 1
a1027 1
    stringBuffer.append(TEXT_153);
d1029 1
a1029 1
    stringBuffer.append(TEXT_154);
d1031 1
a1031 1
    stringBuffer.append(TEXT_155);
d1033 1
a1033 1
    stringBuffer.append(TEXT_156);
d1035 1
a1035 1
    stringBuffer.append(TEXT_157);
d1037 1
a1037 1
    stringBuffer.append(TEXT_158);
d1039 1
a1039 1
    stringBuffer.append(TEXT_159);
d1054 1
a1054 1
    stringBuffer.append(TEXT_160);
d1056 1
a1056 1
    stringBuffer.append(TEXT_161);
d1058 1
a1058 1
    stringBuffer.append(TEXT_162);
d1060 1
a1060 1
    stringBuffer.append(TEXT_163);
d1064 1
a1064 1
    stringBuffer.append(TEXT_164);
d1066 1
a1066 1
    stringBuffer.append(TEXT_165);
d1085 1
a1085 1
    stringBuffer.append(TEXT_166);
d1087 1
a1087 1
    stringBuffer.append(TEXT_167);
d1089 1
a1089 1
    stringBuffer.append(TEXT_168);
d1091 1
a1091 1
    stringBuffer.append(TEXT_169);
d1093 1
a1093 1
    stringBuffer.append(TEXT_170);
d1097 1
a1097 1
    stringBuffer.append(TEXT_171);
d1099 1
a1099 1
    stringBuffer.append(TEXT_172);
d1101 1
a1101 1
    stringBuffer.append(TEXT_173);
d1103 1
a1103 1
    stringBuffer.append(TEXT_174);
d1111 1
a1111 1
    stringBuffer.append(TEXT_175);
d1113 1
a1113 1
    stringBuffer.append(TEXT_176);
d1115 1
a1115 1
    stringBuffer.append(TEXT_177);
d1120 1
a1120 1
    stringBuffer.append(TEXT_178);
d1122 1
a1122 1
    stringBuffer.append(TEXT_179);
d1124 1
a1124 1
    stringBuffer.append(TEXT_180);
d1126 1
a1126 1
    stringBuffer.append(TEXT_181);
d1135 1
a1135 1
    stringBuffer.append(TEXT_182);
d1139 1
a1139 1
    stringBuffer.append(TEXT_183);
d1141 1
a1141 1
    stringBuffer.append(TEXT_184);
d1147 1
a1147 1
    stringBuffer.append(TEXT_185);
d1149 1
a1149 1
    stringBuffer.append(TEXT_186);
d1151 1
a1151 1
    stringBuffer.append(TEXT_187);
d1155 1
a1155 1
    stringBuffer.append(TEXT_188);
d1159 1
a1159 1
    stringBuffer.append(TEXT_189);
d1161 1
a1161 1
    stringBuffer.append(TEXT_190);
d1163 1
a1163 1
    stringBuffer.append(TEXT_191);
d1165 1
a1165 1
    stringBuffer.append(TEXT_192);
d1175 1
a1175 1
    stringBuffer.append(TEXT_193);
d1177 1
a1177 1
    stringBuffer.append(TEXT_194);
d1179 1
a1179 1
    stringBuffer.append(TEXT_195);
d1182 1
a1182 1
    stringBuffer.append(TEXT_196);
d1184 1
a1184 1
    stringBuffer.append(TEXT_197);
d1186 1
a1186 1
    stringBuffer.append(TEXT_198);
d1190 1
a1190 1
    stringBuffer.append(TEXT_199);
d1192 2
a1193 2
    stringBuffer.append(TEXT_200);
    stringBuffer.append(TEXT_201);
d1197 1
a1197 1
    stringBuffer.append(TEXT_202);
d1199 1
a1199 1
    stringBuffer.append(TEXT_203);
d1203 1
a1203 1
    stringBuffer.append(TEXT_204);
d1205 1
a1205 1
    stringBuffer.append(TEXT_205);
d1207 1
a1207 1
    stringBuffer.append(TEXT_206);
d1225 1
a1225 1
    stringBuffer.append(TEXT_207);
d1227 1
a1227 1
    stringBuffer.append(TEXT_208);
d1229 1
a1229 1
    stringBuffer.append(TEXT_209);
d1231 1
a1231 1
    stringBuffer.append(TEXT_210);
d1233 1
a1233 1
    stringBuffer.append(TEXT_211);
d1242 1
a1242 1
    stringBuffer.append(TEXT_212);
d1244 1
a1244 1
    stringBuffer.append(TEXT_213);
d1246 1
a1246 1
    stringBuffer.append(TEXT_214);
d1248 1
a1248 1
    stringBuffer.append(TEXT_215);
d1252 1
a1252 1
    stringBuffer.append(TEXT_216);
d1254 1
a1254 1
    stringBuffer.append(TEXT_217);
d1256 1
a1256 1
    stringBuffer.append(TEXT_218);
d1260 1
a1260 1
    stringBuffer.append(TEXT_219);
d1262 1
a1262 1
    stringBuffer.append(TEXT_220);
d1267 1
a1267 1
    stringBuffer.append(TEXT_221);
d1274 1
a1274 1
    stringBuffer.append(TEXT_222);
d1276 1
a1276 1
    stringBuffer.append(TEXT_223);
d1280 1
a1280 1
    stringBuffer.append(TEXT_224);
d1282 1
a1282 1
    stringBuffer.append(TEXT_225);
d1286 1
a1286 1
    stringBuffer.append(TEXT_226);
d1288 1
a1288 1
    stringBuffer.append(TEXT_227);
d1292 1
a1292 1
    stringBuffer.append(TEXT_228);
d1296 1
a1296 1
    stringBuffer.append(TEXT_229);
d1302 1
a1302 1
    stringBuffer.append(TEXT_230);
d1307 1
a1307 1
    stringBuffer.append(TEXT_231);
d1312 1
a1312 1
    stringBuffer.append(TEXT_232);
d1316 1
a1316 1
    stringBuffer.append(TEXT_233);
d1318 1
a1318 1
    stringBuffer.append(TEXT_234);
d1320 1
a1320 1
    stringBuffer.append(TEXT_235);
d1322 1
a1322 1
    stringBuffer.append(TEXT_236);
d1324 1
a1324 1
    stringBuffer.append(TEXT_237);
d1326 1
a1326 1
    stringBuffer.append(TEXT_238);
d1328 1
a1328 1
    stringBuffer.append(TEXT_239);
d1330 1
a1330 1
    stringBuffer.append(TEXT_240);
d1332 1
a1332 1
    stringBuffer.append(TEXT_241);
d1334 1
a1334 1
    stringBuffer.append(TEXT_242);
d1336 1
a1336 1
    stringBuffer.append(TEXT_243);
d1338 2
a1339 2
    stringBuffer.append(TEXT_244);
    stringBuffer.append(TEXT_245);
d1343 1
a1343 1
    stringBuffer.append(TEXT_246);
d1345 1
a1345 1
    stringBuffer.append(TEXT_247);
d1347 1
a1347 1
    stringBuffer.append(TEXT_248);
d1349 1
a1349 1
    stringBuffer.append(TEXT_249);
d1351 1
a1351 1
    stringBuffer.append(TEXT_250);
d1353 1
a1353 1
    stringBuffer.append(TEXT_251);
d1355 1
a1355 1
    stringBuffer.append(TEXT_252);
d1357 1
a1357 1
    stringBuffer.append(TEXT_253);
d1359 1
a1359 1
    stringBuffer.append(TEXT_254);
d1372 1
a1372 1
    stringBuffer.append(TEXT_255);
d1374 1
a1374 1
    stringBuffer.append(TEXT_256);
d1376 1
a1376 1
    stringBuffer.append(TEXT_257);
d1378 1
a1378 1
    stringBuffer.append(TEXT_258);
d1383 1
a1383 1
    stringBuffer.append(TEXT_259);
d1385 1
a1385 1
    stringBuffer.append(TEXT_260);
d1387 1
a1387 1
    stringBuffer.append(TEXT_261);
d1389 1
a1389 1
    stringBuffer.append(TEXT_262);
d1391 1
a1391 1
    stringBuffer.append(TEXT_263);
d1393 1
a1393 1
    stringBuffer.append(TEXT_264);
d1395 1
a1395 1
    stringBuffer.append(TEXT_265);
d1397 1
a1397 1
    stringBuffer.append(TEXT_266);
d1399 1
a1399 1
    stringBuffer.append(TEXT_267);
d1401 1
a1401 1
    stringBuffer.append(TEXT_268);
d1405 1
a1405 1
    stringBuffer.append(TEXT_269);
d1407 1
a1407 1
    stringBuffer.append(TEXT_270);
d1420 1
a1420 1
    stringBuffer.append(TEXT_271);
d1434 1
a1434 1
    stringBuffer.append(TEXT_272);
d1436 1
a1436 1
    stringBuffer.append(TEXT_273);
d1438 1
a1438 1
    stringBuffer.append(TEXT_274);
d1440 1
a1440 1
    stringBuffer.append(TEXT_275);
d1442 1
a1442 1
    stringBuffer.append(TEXT_276);
d1446 1
a1446 1
    stringBuffer.append(TEXT_277);
d1448 1
a1448 1
    stringBuffer.append(TEXT_278);
d1450 1
a1450 1
    stringBuffer.append(TEXT_279);
d1452 1
a1452 1
    stringBuffer.append(TEXT_280);
d1459 1
a1459 1
    stringBuffer.append(TEXT_281);
d1473 1
a1473 1
    stringBuffer.append(TEXT_282);
d1475 1
a1475 1
    stringBuffer.append(TEXT_283);
d1477 1
a1477 1
    stringBuffer.append(TEXT_284);
d1479 1
a1479 1
    stringBuffer.append(TEXT_285);
d1481 1
a1481 1
    stringBuffer.append(TEXT_286);
d1485 1
a1485 1
    stringBuffer.append(TEXT_287);
d1487 1
a1487 1
    stringBuffer.append(TEXT_288);
d1489 1
a1489 1
    stringBuffer.append(TEXT_289);
d1491 1
a1491 1
    stringBuffer.append(TEXT_290);
d1498 1
a1498 1
    stringBuffer.append(TEXT_291);
d1512 1
a1512 1
    stringBuffer.append(TEXT_292);
d1514 1
a1514 1
    stringBuffer.append(TEXT_293);
d1516 1
a1516 1
    stringBuffer.append(TEXT_294);
d1518 1
a1518 1
    stringBuffer.append(TEXT_295);
d1520 1
a1520 1
    stringBuffer.append(TEXT_296);
d1524 1
a1524 1
    stringBuffer.append(TEXT_297);
d1526 1
a1526 1
    stringBuffer.append(TEXT_298);
d1528 1
a1528 1
    stringBuffer.append(TEXT_299);
d1530 1
a1530 1
    stringBuffer.append(TEXT_300);
d1540 1
a1540 1
    stringBuffer.append(TEXT_301);
d1554 1
a1554 1
    stringBuffer.append(TEXT_302);
d1556 1
a1556 1
    stringBuffer.append(TEXT_303);
d1558 1
a1558 1
    stringBuffer.append(TEXT_304);
d1560 1
a1560 1
    stringBuffer.append(TEXT_305);
d1562 1
a1562 1
    stringBuffer.append(TEXT_306);
d1566 1
a1566 1
    stringBuffer.append(TEXT_307);
d1568 1
a1568 1
    stringBuffer.append(TEXT_308);
d1570 1
a1570 1
    stringBuffer.append(TEXT_309);
d1572 1
a1572 1
    stringBuffer.append(TEXT_310);
d1581 1
a1581 1
    stringBuffer.append(TEXT_311);
d1586 1
a1586 1
    stringBuffer.append(TEXT_312);
d1588 1
a1588 1
    stringBuffer.append(TEXT_313);
d1595 1
a1595 1
    stringBuffer.append(TEXT_314);
d1600 1
a1600 1
    stringBuffer.append(TEXT_315);
d1602 1
a1602 1
    stringBuffer.append(TEXT_316);
d1608 1
a1608 1
    stringBuffer.append(TEXT_317);
d1610 1
a1610 1
    stringBuffer.append(TEXT_318);
d1612 1
a1612 1
    stringBuffer.append(TEXT_319);
d1617 1
a1617 1
    stringBuffer.append(TEXT_320);
d1619 1
a1619 1
    stringBuffer.append(TEXT_321);
d1621 1
a1621 1
    stringBuffer.append(TEXT_322);
d1623 1
a1623 1
    stringBuffer.append(TEXT_323);
d1625 1
a1625 1
    stringBuffer.append(TEXT_324);
d1627 1
a1627 1
    stringBuffer.append(TEXT_325);
d1629 1
a1629 1
    stringBuffer.append(TEXT_326);
d1631 1
a1631 1
    stringBuffer.append(TEXT_327);
d1633 1
a1633 1
    stringBuffer.append(TEXT_328);
d1642 1
a1642 1
    stringBuffer.append(TEXT_329);
d1644 1
a1644 1
    stringBuffer.append(TEXT_330);
d1646 1
a1646 1
    stringBuffer.append(TEXT_331);
d1648 1
a1648 1
    stringBuffer.append(TEXT_332);
d1654 1
a1654 1
    stringBuffer.append(TEXT_333);
d1656 1
a1656 1
    stringBuffer.append(TEXT_334);
d1658 1
a1658 1
    stringBuffer.append(TEXT_335);
d1662 1
a1662 1
    stringBuffer.append(TEXT_336);
d1664 1
a1664 1
    stringBuffer.append(TEXT_337);
d1666 3
a1668 3
    stringBuffer.append(TEXT_338);
    stringBuffer.append(TEXT_339);
    stringBuffer.append(TEXT_340);
d1670 1
a1670 1
    stringBuffer.append(TEXT_341);
d1672 1
a1672 1
    stringBuffer.append(TEXT_342);
d1695 1
a1695 1
    stringBuffer.append(TEXT_343);
d1697 1
a1697 1
    stringBuffer.append(TEXT_344);
d1699 1
a1699 1
    stringBuffer.append(TEXT_345);
d1701 1
a1701 1
    stringBuffer.append(TEXT_346);
d1706 1
a1706 1
    stringBuffer.append(TEXT_347);
d1715 1
a1715 1
    stringBuffer.append(TEXT_348);
d1717 1
a1717 1
    stringBuffer.append(TEXT_349);
d1719 1
a1719 1
    stringBuffer.append(TEXT_350);
d1721 1
a1721 1
    stringBuffer.append(TEXT_351);
d1725 1
a1725 1
    stringBuffer.append(TEXT_352);
d1727 1
a1727 1
    stringBuffer.append(TEXT_353);
d1729 1
a1729 1
    stringBuffer.append(TEXT_354);
d1733 1
a1733 1
    stringBuffer.append(TEXT_355);
d1735 1
a1735 1
    stringBuffer.append(TEXT_356);
d1740 1
a1740 1
    stringBuffer.append(TEXT_357);
d1748 1
a1748 1
    stringBuffer.append(TEXT_358);
d1750 1
a1750 1
    stringBuffer.append(TEXT_359);
d1754 1
a1754 1
    stringBuffer.append(TEXT_360);
d1756 1
a1756 1
    stringBuffer.append(TEXT_361);
d1761 1
a1761 1
    stringBuffer.append(TEXT_362);
d1763 1
a1763 1
    stringBuffer.append(TEXT_363);
d1765 1
a1765 1
    stringBuffer.append(TEXT_364);
d1767 1
a1767 1
    stringBuffer.append(TEXT_365);
d1771 1
a1771 1
    stringBuffer.append(TEXT_366);
d1773 1
a1773 1
    stringBuffer.append(TEXT_367);
d1775 1
a1775 1
    stringBuffer.append(TEXT_368);
d1780 1
a1780 1
    stringBuffer.append(TEXT_369);
d1782 1
a1782 1
    stringBuffer.append(TEXT_370);
d1784 1
a1784 1
    stringBuffer.append(TEXT_371);
d1786 1
a1786 1
    stringBuffer.append(TEXT_372);
d1790 1
a1790 1
    stringBuffer.append(TEXT_373);
d1792 1
a1792 1
    stringBuffer.append(TEXT_374);
d1794 1
a1794 1
    stringBuffer.append(TEXT_375);
d1798 1
a1798 1
    stringBuffer.append(TEXT_376);
d1800 1
a1800 1
    stringBuffer.append(TEXT_377);
d1804 1
a1804 1
    stringBuffer.append(TEXT_378);
d1808 1
a1808 1
    stringBuffer.append(TEXT_379);
d1816 1
a1816 1
    stringBuffer.append(TEXT_380);
d1821 1
a1821 1
    stringBuffer.append(TEXT_381);
d1831 1
a1831 1
    stringBuffer.append(TEXT_382);
d1833 1
a1833 1
    stringBuffer.append(TEXT_383);
d1835 1
a1835 1
    stringBuffer.append(TEXT_384);
d1837 1
a1837 1
    stringBuffer.append(TEXT_385);
d1841 1
a1841 1
    stringBuffer.append(TEXT_386);
d1843 1
a1843 1
    stringBuffer.append(TEXT_387);
d1845 1
a1845 1
    stringBuffer.append(TEXT_388);
d1849 1
a1849 1
    stringBuffer.append(TEXT_389);
d1854 1
a1854 1
    stringBuffer.append(TEXT_390);
d1856 1
a1856 1
    stringBuffer.append(TEXT_391);
d1858 1
a1858 1
    stringBuffer.append(TEXT_392);
d1862 1
a1862 1
    stringBuffer.append(TEXT_393);
d1866 1
a1866 1
    stringBuffer.append(TEXT_394);
d1871 1
a1871 1
    stringBuffer.append(TEXT_395);
d1873 1
a1873 1
    stringBuffer.append(TEXT_396);
d1875 1
a1875 1
    stringBuffer.append(TEXT_397);
d1877 1
a1877 1
    stringBuffer.append(TEXT_398);
d1879 1
a1879 1
    stringBuffer.append(TEXT_399);
d1881 1
a1881 1
    stringBuffer.append(TEXT_400);
d1883 1
a1883 1
    stringBuffer.append(TEXT_401);
d1885 1
a1885 1
    stringBuffer.append(TEXT_402);
d1887 1
a1887 1
    stringBuffer.append(TEXT_403);
d1891 1
a1891 1
    stringBuffer.append(TEXT_404);
d1893 1
a1893 1
    stringBuffer.append(TEXT_405);
d1895 1
a1895 1
    stringBuffer.append(TEXT_406);
d1900 1
a1900 1
    stringBuffer.append(TEXT_407);
d1902 1
a1902 1
    stringBuffer.append(TEXT_408);
d1904 1
a1904 1
    stringBuffer.append(TEXT_409);
d1909 1
a1909 1
    stringBuffer.append(TEXT_410);
d1911 1
a1911 1
    stringBuffer.append(TEXT_411);
d1915 1
a1915 1
    stringBuffer.append(TEXT_412);
d1919 1
a1919 1
    stringBuffer.append(TEXT_413);
d1923 1
a1923 1
    stringBuffer.append(TEXT_414);
d1930 1
a1930 1
    stringBuffer.append(TEXT_415);
d1934 1
a1934 1
    stringBuffer.append(TEXT_416);
d1936 1
a1936 1
    stringBuffer.append(TEXT_417);
d1938 1
a1938 1
    stringBuffer.append(TEXT_418);
d1943 1
a1943 1
    stringBuffer.append(TEXT_419);
d1945 1
a1945 1
    stringBuffer.append(TEXT_420);
d1949 1
a1949 1
    stringBuffer.append(TEXT_421);
d1953 1
a1953 1
    stringBuffer.append(TEXT_422);
d1955 1
a1955 1
    stringBuffer.append(TEXT_423);
d1957 1
a1957 1
    stringBuffer.append(TEXT_424);
d1959 1
a1959 1
    stringBuffer.append(TEXT_425);
d1961 1
a1961 1
    stringBuffer.append(TEXT_426);
d1963 1
a1963 1
    stringBuffer.append(TEXT_427);
d1965 1
a1965 1
    stringBuffer.append(TEXT_428);
d1967 1
a1967 1
    stringBuffer.append(TEXT_429);
d1969 1
a1969 1
    stringBuffer.append(TEXT_430);
d1971 1
a1971 1
    stringBuffer.append(TEXT_431);
d1973 1
a1973 1
    stringBuffer.append(TEXT_432);
d1975 1
a1975 1
    stringBuffer.append(TEXT_433);
d1982 3
a1984 3
    stringBuffer.append(TEXT_434);
    stringBuffer.append(TEXT_435);
    stringBuffer.append(TEXT_436);
d1986 1
a1986 1
    stringBuffer.append(TEXT_437);
d1988 1
a1988 1
    stringBuffer.append(TEXT_438);
d1990 1
a1990 1
    stringBuffer.append(TEXT_439);
d1992 1
a1992 1
    stringBuffer.append(TEXT_440);
d1994 1
a1994 1
    stringBuffer.append(TEXT_441);
d1996 1
a1996 1
    stringBuffer.append(TEXT_442);
@


1.9
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@a668 1
final Palette palette = genDiagram.getPalette();
@


1.8
log
@[152859] bblajer - add missing @@generated tags
@
text
@d39 284
a322 284
  protected final String TEXT_20 = " extends AbstractGraphicalEditPart implements IUpdatableEditPart {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String MODEL_ID = \"";
  protected final String TEXT_21 = "\";" + NL;
  protected final String TEXT_22 = NL;
  protected final String TEXT_23 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_26 = "(";
  protected final String TEXT_27 = " model) {" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_28 = " getDiagram() {" + NL + "\t\treturn (";
  protected final String TEXT_29 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_30 = NL;
  protected final String TEXT_31 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_32 = " view = (";
  protected final String TEXT_33 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_34 = " view = (";
  protected final String TEXT_35 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tgetDiagram().eAdapters().add(updateManager);" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\tsuper.addNotify();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {" + NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_36 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_37 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_38 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_39 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_40 = " result = new ";
  protected final String TEXT_41 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_42 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_43 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_44 = "Command(getDiagram(), requestEx, (";
  protected final String TEXT_45 = ")getConstraintFor(request)));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_46 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_47 = ".getEditingDomain(getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_48 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ChangeBoundsRequest request, EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_49 = " emfCommand = new ";
  protected final String TEXT_50 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate Point moveDelta;" + NL + "\t\t\t\t\tprivate Dimension resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof Bounds == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_51 = " original = new ";
  protected final String TEXT_52 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_53 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(Point move, Dimension resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_54 = ".getEditingDomain(getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_55 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_56 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_57 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_58 = "(this);" + NL + "\t\t}";
  protected final String TEXT_59 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_60 = NL;
  protected final String TEXT_61 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_62 = "static ";
  protected final String TEXT_63 = "class Create";
  protected final String TEXT_64 = "NotationCommand extends ";
  protected final String TEXT_65 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_66 = "NotationCommand(";
  protected final String TEXT_67 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_68 = " domainElement";
  protected final String TEXT_69 = ", ";
  protected final String TEXT_70 = " constraint";
  protected final String TEXT_71 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_72 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_73 = ".decorateView(createdNode);";
  protected final String TEXT_74 = NL + "\t\t\t";
  protected final String TEXT_75 = " bounds = ";
  protected final String TEXT_76 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_77 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_78 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_79 = "));";
  protected final String TEXT_80 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_81 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_82 = "static ";
  protected final String TEXT_83 = "class Create";
  protected final String TEXT_84 = "Command extends ";
  protected final String TEXT_85 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_86 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_87 = "Command(";
  protected final String TEXT_88 = " parent, ";
  protected final String TEXT_89 = ".CreateRequestEx request";
  protected final String TEXT_90 = ", ";
  protected final String TEXT_91 = " constraint";
  protected final String TEXT_92 = ") {" + NL + "\t\t\t";
  protected final String TEXT_93 = " domainModelEditDomain = ";
  protected final String TEXT_94 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_95 = NL + "\t\t\t";
  protected final String TEXT_96 = " createdDomainElement = ";
  protected final String TEXT_97 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_98 = ".eINSTANCE.get";
  protected final String TEXT_99 = "());";
  protected final String TEXT_100 = NL + "\t\t\t";
  protected final String TEXT_101 = " createdDomainElement = ";
  protected final String TEXT_102 = ".eINSTANCE.create";
  protected final String TEXT_103 = "();";
  protected final String TEXT_104 = NL + "\t\t\t";
  protected final String TEXT_105 = NL + "\t\t\t";
  protected final String TEXT_106 = ".";
  protected final String TEXT_107 = ".initializeElement(";
  protected final String TEXT_108 = "(";
  protected final String TEXT_109 = ") ";
  protected final String TEXT_110 = "createdDomainElement);";
  protected final String TEXT_111 = NL + "\t\t\t";
  protected final String TEXT_112 = " compoundCommand = new ";
  protected final String TEXT_113 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_114 = ".create(domainModelEditDomain, ";
  protected final String TEXT_115 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_116 = ".eINSTANCE.get";
  protected final String TEXT_117 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_118 = ".create(domainModelEditDomain, ";
  protected final String TEXT_119 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_120 = ".eINSTANCE.get";
  protected final String TEXT_121 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_122 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_123 = ".create(domainModelEditDomain, ";
  protected final String TEXT_124 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_125 = ".eINSTANCE.get";
  protected final String TEXT_126 = "(), createdDomainElement);";
  protected final String TEXT_127 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_128 = "NotationCommand(parent, ";
  protected final String TEXT_129 = "(";
  protected final String TEXT_130 = ") ";
  protected final String TEXT_131 = "createdDomainElement";
  protected final String TEXT_132 = ", constraint";
  protected final String TEXT_133 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_134 = NL;
  protected final String TEXT_135 = NL;
  protected final String TEXT_136 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_137 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_138 = " feature, ";
  protected final String TEXT_139 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_142 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_143 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class UpdateManager extends ";
  protected final String TEXT_144 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_145 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_146 = " affectedEditParts = findAffectedParts(msg);" + NL + "\t\t\tfor(";
  protected final String TEXT_147 = " it = affectedEditParts.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\tIUpdatableEditPart next = (IUpdatableEditPart) it.next();" + NL + "\t\t\t\tIUpdatableEditPart.Refresher refresher = next.getRefresher((";
  protected final String TEXT_148 = ")msg.getFeature(), msg);" + NL + "\t\t\t\tif (refresher != null) {" + NL + "\t\t\t\t\trefresher.refresh();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_149 = "/*<IUpdatableEditPart>*/ findAffectedParts(";
  protected final String TEXT_150 = " msg) {" + NL + "\t\t\tObject notifier = msg.getNotifier();" + NL + "\t\t\tif (notifier instanceof ";
  protected final String TEXT_151 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_152 = " view = getView((EObject) notifier);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEditPart affectedEditPart = (EditPart) getViewer().getEditPartRegistry().get(view);" + NL + "\t\t\t\t\tif (affectedEditPart != null) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_153 = ".singleton(affectedEditPart);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_154 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_155 = " getView(EObject offspring) {" + NL + "\t\t\twhile (offspring != null && offspring instanceof View == false) {" + NL + "\t\t\t\toffspring = offspring.eContainer();" + NL + "\t\t\t}" + NL + "\t\t\treturn (";
  protected final String TEXT_156 = ") offspring;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(updateManager)) {" + NL + "\t\t\tgetDiagram().eAdapters().add(updateManager);" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_157 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_158 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_159 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_160 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(updateManager);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_161 = NL;
  protected final String TEXT_162 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\tNotationModelRefresher refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_163 = " domainModelEditDomain = ";
  protected final String TEXT_164 = ".getEditingDomain(";
  protected final String TEXT_165 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_166 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_167 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_168 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic NotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_169 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_170 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_171 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_172 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_173 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_174 = NL + "\t\t\tfilter = ";
  protected final String TEXT_175 = ".createFeatureFilter(";
  protected final String TEXT_176 = ".eINSTANCE.get";
  protected final String TEXT_177 = "());";
  protected final String TEXT_178 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_179 = ".createFeatureFilter(";
  protected final String TEXT_180 = ".eINSTANCE.get";
  protected final String TEXT_181 = "()));";
  protected final String TEXT_182 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_183 = ".createNotifierFilter(";
  protected final String TEXT_184 = ".getElement()));";
  protected final String TEXT_185 = NL + "\t\t\tfilter = ";
  protected final String TEXT_186 = ".createNotifierFilter(";
  protected final String TEXT_187 = ".getElement());";
  protected final String TEXT_188 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_189 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_190 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_191 = " transactionAboutToCommit(";
  protected final String TEXT_192 = " event) {" + NL + "\t\t\treturn getRefreshNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_193 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_194 = " command = getRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_195 = " domainModelEditDomain = ";
  protected final String TEXT_196 = ".getEditingDomain(";
  protected final String TEXT_197 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_198 = " getRefreshNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_199 = " semanticChildren = getSemanticChildren();" + NL + "\t\t";
  protected final String TEXT_200 = " notationalChildren = ";
  protected final String TEXT_201 = ".getChildren();" + NL + "\t\tfinal ";
  protected final String TEXT_202 = " semanticToNotational = new ";
  protected final String TEXT_203 = "();" + NL + "\t\tfor(";
  protected final String TEXT_204 = " it = notationalChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_205 = " next = (";
  protected final String TEXT_206 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_207 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotational.put(nextSemantic, next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_208 = " parentView = ";
  protected final String TEXT_209 = ";" + NL + "\t\t";
  protected final String TEXT_210 = " command = new ";
  protected final String TEXT_211 = "();" + NL + "\t\tfor(";
  protected final String TEXT_212 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_213 = " next = (";
  protected final String TEXT_214 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_215 = " currentView = (";
  protected final String TEXT_216 = ") semanticToNotational.remove(next);" + NL + "\t\t\tint nodeVisualID = ";
  protected final String TEXT_217 = ".INSTANCE.getNodeVisualID(parentView, next);" + NL + "\t\t\tif (currentView == null) {" + NL + "\t\t\t\tif (shouldCreateView(next)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalElementCommand(parentView, next, nodeVisualID));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else if (nodeVisualID != ";
  protected final String TEXT_218 = ".getVisualID(currentView)) {" + NL + "\t\t\t\t";
  protected final String TEXT_219 = " notationalCommand = getCreateNotationalElementCommand(parentView, next, nodeVisualID);" + NL + "\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_220 = "(parentView, notationalCommand, currentView));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_221 = " it = semanticToNotational.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_222 = " obsoleteView = (";
  protected final String TEXT_223 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_224 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_225 = " getCreateNotationalElementCommand(";
  protected final String TEXT_226 = " parentView, ";
  protected final String TEXT_227 = " domainElement, int nodeVisualID) {" + NL + "\t\tswitch (nodeVisualID) {";
  protected final String TEXT_228 = NL + "\t\tcase ";
  protected final String TEXT_229 = ".VISUAL_ID:" + NL + "\t\t\tif (domainElement instanceof ";
  protected final String TEXT_230 = ") {" + NL + "\t\t\t\treturn new Create";
  protected final String TEXT_231 = "NotationCommand(parentView, domainElement";
  protected final String TEXT_232 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_233 = ");" + NL + "\t\t\t}" + NL + "\t\t\treturn null;";
  protected final String TEXT_234 = NL + "\t\tdefault:" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_235 = " getSemanticChildren() {";
  protected final String TEXT_236 = NL;
  protected final String TEXT_237 = NL + "\treturn ";
  protected final String TEXT_238 = ".EMPTY_LIST;";
  protected final String TEXT_239 = NL + "\t";
  protected final String TEXT_240 = " result = new ";
  protected final String TEXT_241 = "();";
  protected final String TEXT_242 = NL + "\t";
  protected final String TEXT_243 = " viewObject = ";
  protected final String TEXT_244 = ";" + NL + "\t";
  protected final String TEXT_245 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_246 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_247 = NL + "\tfor(";
  protected final String TEXT_248 = " it = ";
  protected final String TEXT_249 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_250 = ") it.next();";
  protected final String TEXT_251 = NL + "\tnextValue = (";
  protected final String TEXT_252 = ")";
  protected final String TEXT_253 = ";";
  protected final String TEXT_254 = NL + "\tnodeVID = ";
  protected final String TEXT_255 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_256 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_257 = NL + "\tcase ";
  protected final String TEXT_258 = ".VISUAL_ID: {";
  protected final String TEXT_259 = NL + "\tif (";
  protected final String TEXT_260 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_261 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_262 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_263 = NL + "\t\t}";
  protected final String TEXT_264 = NL + "\t}";
  protected final String TEXT_265 = NL + "\t}";
  protected final String TEXT_266 = NL + "\treturn result;";
  protected final String TEXT_267 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_268 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateView(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_269 = ";" + NL + "\t}" + NL;
  protected final String TEXT_270 = NL;
  protected final String TEXT_271 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_272 = " domainModelEditDomain = ";
  protected final String TEXT_273 = ".getEditingDomain(";
  protected final String TEXT_274 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_275 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_276 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_277 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_278 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_279 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_280 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_281 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_282 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_283 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_284 = ".createEventTypeFilter(";
  protected final String TEXT_285 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_286 = ".createEventTypeFilter(";
  protected final String TEXT_287 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_288 = ".createEventTypeFilter(";
  protected final String TEXT_289 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_290 = ".createEventTypeFilter(";
  protected final String TEXT_291 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_292 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_293 = NL;
  protected final String TEXT_294 = NL + "\t\t\tfilter = ";
  protected final String TEXT_295 = ".createFeatureFilter(";
  protected final String TEXT_296 = ".eINSTANCE.get";
  protected final String TEXT_297 = "());";
  protected final String TEXT_298 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_299 = ".createFeatureFilter(";
  protected final String TEXT_300 = ".eINSTANCE.get";
  protected final String TEXT_301 = "()));";
  protected final String TEXT_302 = NL;
  protected final String TEXT_303 = NL + "\t\t\tfilter = ";
d330 132
a461 219
  protected final String TEXT_311 = NL;
  protected final String TEXT_312 = NL + "\t\t\tfilter = ";
  protected final String TEXT_313 = ".createFeatureFilter(";
  protected final String TEXT_314 = ".eINSTANCE.get";
  protected final String TEXT_315 = "());";
  protected final String TEXT_316 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_317 = ".createFeatureFilter(";
  protected final String TEXT_318 = ".eINSTANCE.get";
  protected final String TEXT_319 = "()));";
  protected final String TEXT_320 = NL;
  protected final String TEXT_321 = NL + "\t\t\tfilter = ";
  protected final String TEXT_322 = ".createFeatureFilter(";
  protected final String TEXT_323 = ".eINSTANCE.get";
  protected final String TEXT_324 = "());";
  protected final String TEXT_325 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_326 = ".createFeatureFilter(";
  protected final String TEXT_327 = ".eINSTANCE.get";
  protected final String TEXT_328 = "()));";
  protected final String TEXT_329 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_330 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter();";
  protected final String TEXT_331 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_332 = NL + "\t\t\tfilter = createUncontainedLinksFilter();";
  protected final String TEXT_333 = NL + "\t\t\tfilter = ";
  protected final String TEXT_334 = ".ANY.negated();";
  protected final String TEXT_335 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_336 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_337 = " transactionAboutToCommit(";
  protected final String TEXT_338 = " event) {" + NL + "\t\t\treturn getRefreshLinkNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_339 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_340 = " command = getRefreshLinkNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_341 = " domainModelEditDomain = ";
  protected final String TEXT_342 = ".getEditingDomain(";
  protected final String TEXT_343 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_344 = NL;
  protected final String TEXT_345 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static class LinkDescriptor {" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_346 = " mySource;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_347 = " myDestination;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_348 = " myLinkElement;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_349 = " source, ";
  protected final String TEXT_350 = " destination, ";
  protected final String TEXT_351 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_352 = " source, ";
  protected final String TEXT_353 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_354 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_355 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_356 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_357 = " getRefreshLinkNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_358 = "/*<LinkDescriptor>*/ semanticChildLinks = getSemanticChildLinks();" + NL + "\t\t";
  protected final String TEXT_359 = "/*<Edge>*/ notationalChildLinks = getNotationalChildLinks();" + NL + "\t\tfinal ";
  protected final String TEXT_360 = " semanticToNotationalTypeBasedLinks = new ";
  protected final String TEXT_361 = "();" + NL + "\t\tfinal ";
  protected final String TEXT_362 = "/*<EObject, List<Edge>>*/ semanticToNotationalFeatureBasedLinks = new ";
  protected final String TEXT_363 = "();" + NL + "\t\tfor(";
  protected final String TEXT_364 = " it = notationalChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_365 = " next = (";
  protected final String TEXT_366 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_367 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotationalTypeBasedLinks.put(nextSemantic, next);" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_368 = " featureBasedLinksForSource = (";
  protected final String TEXT_369 = ") semanticToNotationalFeatureBasedLinks.get(next.getSource().getElement());" + NL + "\t\t\t\tif (featureBasedLinksForSource == null) {" + NL + "\t\t\t\t\tfeatureBasedLinksForSource = new ";
  protected final String TEXT_370 = "();" + NL + "\t\t\t\t\tsemanticToNotationalFeatureBasedLinks.put(next.getSource().getElement(), featureBasedLinksForSource);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tfeatureBasedLinksForSource.add(next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_371 = " parentView = ";
  protected final String TEXT_372 = ";" + NL + "\t\t";
  protected final String TEXT_373 = " command = new ";
  protected final String TEXT_374 = "();" + NL + "\t\tfor(";
  protected final String TEXT_375 = " it = semanticChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\tLinkDescriptor next = (LinkDescriptor) it.next();" + NL + "\t\t\t";
  protected final String TEXT_376 = " nextLinkElement = next.getLinkElement();" + NL + "\t\t\t";
  protected final String TEXT_377 = " currentEdge;" + NL + "\t\t\tif (nextLinkElement != null) {" + NL + "\t\t\t\tcurrentEdge = (";
  protected final String TEXT_378 = ") semanticToNotationalTypeBasedLinks.remove(nextLinkElement);" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_379 = " featureBasedLinksForSource = (";
  protected final String TEXT_380 = ") semanticToNotationalFeatureBasedLinks.get(next.getSource());" + NL + "\t\t\t\tif (featureBasedLinksForSource == null || featureBasedLinksForSource.isEmpty()) {" + NL + "\t\t\t\t\tcurrentEdge = null;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tcurrentEdge = (";
  protected final String TEXT_381 = ") featureBasedLinksForSource.remove(0);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tint linkVisualID = next.getVisualID();" + NL + "\t\t\tif (currentEdge == null) {" + NL + "\t\t\t\tif (nextLinkElement == null || shouldCreateEdge(nextLinkElement)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tboolean changedSource = currentEdge.getSource().getElement() != next.getSource();" + NL + "\t\t\t\tboolean changedTarget = currentEdge.getTarget().getElement() != next.getDestination();" + NL + "\t\t\t\tboolean changedVID = linkVisualID != ";
  protected final String TEXT_382 = ".getVisualID(currentEdge);" + NL + "\t\t\t\tif (!changedSource && !changedTarget) {" + NL + "\t\t\t\t\tif (changedVID) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_383 = " notationalCommand = getCreateNotationalEdgeCommand(parentView, next);" + NL + "\t\t\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_384 = "(parentView, notationalCommand, currentEdge));" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_385 = "(parentView, currentEdge));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tif (changedVID) {" + NL + "\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_386 = "(parentView, currentEdge));" + NL + "\t\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));" + NL + "\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_387 = " newSourceView = findView(next.getSource());" + NL + "\t\t\t\t\t\tif (changedSource && newSourceView != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_388 = "(currentEdge, newSourceView));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_389 = " newTargetView = findView(next.getDestination());" + NL + "\t\t\t\t\t\tif (changedTarget && newTargetView != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_390 = "(currentEdge, newTargetView));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_391 = " it = semanticToNotationalTypeBasedLinks.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_392 = " obsoleteView = (";
  protected final String TEXT_393 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_394 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_395 = " it = semanticToNotationalFeatureBasedLinks.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_396 = " obsoleteViews = (";
  protected final String TEXT_397 = ") it.next();" + NL + "\t\t\tfor(";
  protected final String TEXT_398 = " obsoleteViewsIt = obsoleteViews.iterator(); obsoleteViewsIt.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_399 = " obsoleteView = (";
  protected final String TEXT_400 = ") obsoleteViewsIt.next();" + NL + "\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_401 = "(parentView, obsoleteView));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_402 = " findView(";
  protected final String TEXT_403 = " modelElement) {" + NL + "\t\tif (modelElement == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_404 = " editPart = (";
  protected final String TEXT_405 = ") getViewer().getEditPartRegistry().get(modelElement);" + NL + "\t\tif (editPart != null && editPart.getModel() instanceof ";
  protected final String TEXT_406 = ") {" + NL + "\t\t\treturn (";
  protected final String TEXT_407 = ") editPart.getModel();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_408 = " parentView = findView(modelElement.eContainer());" + NL + "\t\tif (parentView != null) {" + NL + "\t\t\t";
  protected final String TEXT_409 = " result = findNode(parentView, modelElement);" + NL + "\t\t\tif (result != null) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn findEdge(modelElement);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * Finds a notational node that corresponds to the given underlying domain element in a subtree starting from the given parent element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_410 = " findNode(";
  protected final String TEXT_411 = " parentView, ";
  protected final String TEXT_412 = " modelElement) {" + NL + "\t\tfor(";
  protected final String TEXT_413 = " it = parentView.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_414 = " next = (";
  protected final String TEXT_415 = ") it.next();" + NL + "\t\t\tif (!next.isSetElement() || next.getElement() == parentView) {" + NL + "\t\t\t\t";
  protected final String TEXT_416 = " result = findNode(next, modelElement);" + NL + "\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (next.isSetElement() && next.getElement() == modelElement) {" + NL + "\t\t\t\treturn next;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds a notational edge that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_417 = " findEdge(";
  protected final String TEXT_418 = " modelElement) {" + NL + "\t\tfor(";
  protected final String TEXT_419 = " it = ";
  protected final String TEXT_420 = ".getEdges().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_421 = " next = (";
  protected final String TEXT_422 = ") it.next();" + NL + "\t\t\tif (next.isSetElement() && next.getElement() == modelElement) {" + NL + "\t\t\t\treturn next;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_423 = " getCreateNotationalEdgeCommand(";
  protected final String TEXT_424 = " parentView, LinkDescriptor linkDescriptor) {" + NL + "\t\t";
  protected final String TEXT_425 = " sourceView = findView(linkDescriptor.getSource());" + NL + "\t\t";
  protected final String TEXT_426 = " targetView = findView(linkDescriptor.getDestination());" + NL + "\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_427 = " createdEdge = ";
  protected final String TEXT_428 = ".eINSTANCE.createEdge();" + NL + "\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_429 = NL + "\t\tcase ";
  protected final String TEXT_430 = ".VISUAL_ID:" + NL + "\t\t\tif (linkDescriptor.getLinkElement() instanceof ";
  protected final String TEXT_431 = ") {" + NL + "\t\t\t\tcreatedEdge.setElement(linkDescriptor.getLinkElement());" + NL + "\t\t\t\t";
  protected final String TEXT_432 = ".decorateView(createdEdge);" + NL + "\t\t\t}" + NL + "\t\t\tbreak;";
  protected final String TEXT_433 = NL + "\t\tcase ";
  protected final String TEXT_434 = ".VISUAL_ID:" + NL + "\t\t\tif (linkDescriptor.getLinkElement() == null) {" + NL + "\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t";
  protected final String TEXT_435 = ".decorateView(createdEdge);" + NL + "\t\t\t}" + NL + "\t\t\tbreak;";
  protected final String TEXT_436 = NL + "\t\t}" + NL + "\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn new ";
  protected final String TEXT_437 = "(parentView, createdEdge, sourceView, targetView);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_438 = " getSemanticChildLinks() {";
  protected final String TEXT_439 = NL;
  protected final String TEXT_440 = "\t";
  protected final String TEXT_441 = " result = new ";
  protected final String TEXT_442 = "();";
  protected final String TEXT_443 = NL + "\t";
  protected final String TEXT_444 = " modelObject = ";
  protected final String TEXT_445 = ".getElement();" + NL + "\t";
  protected final String TEXT_446 = " nextValue;";
  protected final String TEXT_447 = NL + "\tint linkVID;";
  protected final String TEXT_448 = NL + "\tfor(";
  protected final String TEXT_449 = " it = ";
  protected final String TEXT_450 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_451 = ") it.next();";
  protected final String TEXT_452 = NL + "\tnextValue = (";
  protected final String TEXT_453 = ")";
  protected final String TEXT_454 = ";";
  protected final String TEXT_455 = NL + "\tlinkVID = ";
  protected final String TEXT_456 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_457 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_458 = NL + "\tcase ";
  protected final String TEXT_459 = ".VISUAL_ID: {";
  protected final String TEXT_460 = NL + "\tif (";
  protected final String TEXT_461 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_462 = NL + "\t\t";
  protected final String TEXT_463 = " source = (";
  protected final String TEXT_464 = ")";
  protected final String TEXT_465 = ";";
  protected final String TEXT_466 = NL + "\t\t";
  protected final String TEXT_467 = " source = ";
  protected final String TEXT_468 = ".getElement();";
  protected final String TEXT_469 = NL + "\t\t";
  protected final String TEXT_470 = " target = (";
  protected final String TEXT_471 = ")";
  protected final String TEXT_472 = ";";
  protected final String TEXT_473 = NL + "\t\t";
  protected final String TEXT_474 = " target = ";
  protected final String TEXT_475 = ".getElement();";
  protected final String TEXT_476 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new LinkDescriptor(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_477 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_478 = NL + "\t}";
  protected final String TEXT_479 = NL + "\t}";
  protected final String TEXT_480 = NL + "\t}";
  protected final String TEXT_481 = NL + "\tfor(";
  protected final String TEXT_482 = " it = ";
  protected final String TEXT_483 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_484 = ") it.next();";
  protected final String TEXT_485 = NL + "\tnextValue = (";
  protected final String TEXT_486 = ")";
  protected final String TEXT_487 = ";";
  protected final String TEXT_488 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_489 = NL + "\t\tresult.add(new LinkDescriptor(modelObject, nextValue, null, ";
  protected final String TEXT_490 = ".VISUAL_ID));";
  protected final String TEXT_491 = NL + "\t}";
  protected final String TEXT_492 = NL + "\t}";
  protected final String TEXT_493 = NL + "\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_494 = " getNotationalChildLinks() {" + NL + "\t\t";
  protected final String TEXT_495 = " result = new ";
  protected final String TEXT_496 = "();" + NL + "\t\t";
  protected final String TEXT_497 = " allLinks = ";
  protected final String TEXT_498 = ".getEdges();" + NL + "\t\tfor(";
  protected final String TEXT_499 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_500 = " next = (";
  protected final String TEXT_501 = ") it.next();";
  protected final String TEXT_502 = NL + "\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_503 = " source = next.getSource();" + NL + "\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_504 = " target = next.getTarget();" + NL + "\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_505 = NL + "\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_506 = ") {" + NL + "\t\t\t\t\tint linkVID = ";
  protected final String TEXT_507 = ".getVisualID(next);" + NL + "\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_508 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_509 = ".VISUAL_ID:";
  protected final String TEXT_510 = NL + "\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_511 = NL + "\t\t\t} else {";
  protected final String TEXT_512 = NL + "\t\t\t}";
  protected final String TEXT_513 = NL + "\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_514 = NL + "\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_515 = ".getElement()) {" + NL + "\t\t\t\t\tint linkVID = ";
  protected final String TEXT_516 = ".getVisualID(next);" + NL + "\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_517 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_518 = ".VISUAL_ID:";
  protected final String TEXT_519 = NL + "\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_520 = NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_521 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateEdge(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_522 = ";" + NL + "\t}";
  protected final String TEXT_523 = NL;
  protected final String TEXT_524 = NL;
  protected final String TEXT_525 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_526 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_527 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_528 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate UpdateManager updateManager = new UpdateManager();" + NL + "}";
  protected final String TEXT_529 = NL;
a470 1
importManager.registerInnerClass("LinkDescriptor");	//from linkNotationModelRefresher.jetinc
d638 2
d641 1
a641 1
    stringBuffer.append(TEXT_21);
a643 1
    stringBuffer.append(TEXT_22);
d645 1
d647 1
a647 1
    stringBuffer.append(TEXT_24);
d649 1
a649 1
    stringBuffer.append(TEXT_25);
a650 2
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d656 1
a658 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d666 2
a669 2
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
d671 1
a671 1
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
d673 1
a673 1
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
d675 1
a675 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d679 2
d685 1
a685 1
    stringBuffer.append(TEXT_42);
d687 1
a687 1
    stringBuffer.append(TEXT_43);
d690 1
a690 1
    stringBuffer.append(TEXT_44);
d692 1
a692 1
    stringBuffer.append(TEXT_45);
a695 2
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d697 1
a697 1
    }/*when there's palette*/
d699 1
a699 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d701 1
a701 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d703 1
a703 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d705 1
a705 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d709 6
d716 1
a716 1
    stringBuffer.append(TEXT_54);
d721 1
a721 1
    stringBuffer.append(TEXT_55);
d725 1
a725 1
    stringBuffer.append(TEXT_56);
d727 1
a727 1
    stringBuffer.append(TEXT_57);
d729 1
a729 1
    stringBuffer.append(TEXT_58);
d731 1
a731 1
    stringBuffer.append(TEXT_59);
d739 2
a740 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(TEXT_61);
d742 1
a742 1
    stringBuffer.append(TEXT_62);
d744 1
a744 1
    stringBuffer.append(TEXT_63);
d747 3
a749 3
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_65);
d752 1
a752 1
    stringBuffer.append(TEXT_66);
d754 1
a754 1
    stringBuffer.append(TEXT_67);
d756 1
a756 1
    stringBuffer.append(TEXT_68);
d758 1
a758 1
    stringBuffer.append(TEXT_69);
d760 1
a760 1
    stringBuffer.append(TEXT_70);
d762 1
a762 1
    stringBuffer.append(TEXT_71);
d764 1
a764 1
    stringBuffer.append(TEXT_72);
d766 1
a766 1
    stringBuffer.append(TEXT_73);
d770 1
a770 1
    stringBuffer.append(TEXT_74);
d772 1
a772 1
    stringBuffer.append(TEXT_75);
d774 1
a774 1
    stringBuffer.append(TEXT_76);
d784 1
a784 1
    stringBuffer.append(TEXT_77);
d786 1
a786 1
    stringBuffer.append(TEXT_78);
d788 1
a788 1
    stringBuffer.append(TEXT_79);
d792 1
a792 1
    stringBuffer.append(TEXT_80);
d796 1
a796 1
    stringBuffer.append(TEXT_81);
d798 1
a798 1
    stringBuffer.append(TEXT_82);
d800 1
a800 1
    stringBuffer.append(TEXT_83);
d803 1
a803 1
    stringBuffer.append(TEXT_84);
d805 1
a805 1
    stringBuffer.append(TEXT_85);
d808 1
a808 1
    stringBuffer.append(TEXT_86);
d811 1
a811 1
    stringBuffer.append(TEXT_87);
d813 3
a815 3
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_89);
d817 1
a817 1
    stringBuffer.append(TEXT_90);
d819 1
a819 1
    stringBuffer.append(TEXT_91);
d821 1
a821 1
    stringBuffer.append(TEXT_92);
d823 1
a823 1
    stringBuffer.append(TEXT_93);
d825 1
a825 1
    stringBuffer.append(TEXT_94);
d830 1
a830 1
    stringBuffer.append(TEXT_95);
d832 1
a832 1
    stringBuffer.append(TEXT_96);
d834 1
a834 1
    stringBuffer.append(TEXT_97);
d836 1
a836 1
    stringBuffer.append(TEXT_98);
d838 1
a838 1
    stringBuffer.append(TEXT_99);
d842 1
a842 1
    stringBuffer.append(TEXT_100);
d844 1
a844 1
    stringBuffer.append(TEXT_101);
d846 1
a846 1
    stringBuffer.append(TEXT_102);
d848 1
a848 1
    stringBuffer.append(TEXT_103);
d852 1
a852 1
    stringBuffer.append(TEXT_104);
d854 1
a854 1
    stringBuffer.append(TEXT_105);
d856 1
a856 1
    stringBuffer.append(TEXT_106);
d858 1
a858 1
    stringBuffer.append(TEXT_107);
d860 1
a860 1
    stringBuffer.append(TEXT_108);
d862 1
a862 1
    stringBuffer.append(TEXT_109);
d864 1
a864 1
    stringBuffer.append(TEXT_110);
d871 1
a871 1
    stringBuffer.append(TEXT_111);
d873 1
a873 1
    stringBuffer.append(TEXT_112);
d875 1
a875 1
    stringBuffer.append(TEXT_113);
d877 1
a877 1
    stringBuffer.append(TEXT_114);
d879 1
a879 1
    stringBuffer.append(TEXT_115);
d881 1
a881 1
    stringBuffer.append(TEXT_116);
d883 1
a883 1
    stringBuffer.append(TEXT_117);
d885 1
a885 1
    stringBuffer.append(TEXT_118);
d887 1
a887 1
    stringBuffer.append(TEXT_119);
d889 1
a889 1
    stringBuffer.append(TEXT_120);
d891 1
a891 1
    stringBuffer.append(TEXT_121);
d895 1
a895 1
    stringBuffer.append(TEXT_122);
d897 1
a897 1
    stringBuffer.append(TEXT_123);
d899 1
a899 1
    stringBuffer.append(TEXT_124);
d901 1
a901 1
    stringBuffer.append(TEXT_125);
d903 1
a903 1
    stringBuffer.append(TEXT_126);
d907 1
a907 1
    stringBuffer.append(TEXT_127);
d910 1
a910 1
    stringBuffer.append(TEXT_128);
d912 1
a912 1
    stringBuffer.append(TEXT_129);
d914 1
a914 1
    stringBuffer.append(TEXT_130);
d916 1
a916 1
    stringBuffer.append(TEXT_131);
d918 1
a918 1
    stringBuffer.append(TEXT_132);
d920 1
a920 1
    stringBuffer.append(TEXT_133);
a926 4
    stringBuffer.append(TEXT_134);
    stringBuffer.append(TEXT_135);
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a927 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a928 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d930 1
d932 1
d934 1
a934 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a935 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a936 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.EContentAdapter"));
d938 1
a938 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d940 1
a940 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a941 20
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_156);
d946 1
a946 1
    stringBuffer.append(TEXT_157);
d950 1
a950 1
    stringBuffer.append(TEXT_158);
d955 1
a955 1
    stringBuffer.append(TEXT_159);
d959 1
a959 1
    stringBuffer.append(TEXT_160);
d967 4
a970 2
    stringBuffer.append(TEXT_161);
    stringBuffer.append(TEXT_162);
d972 1
a972 1
    stringBuffer.append(TEXT_163);
d974 1
a974 1
    stringBuffer.append(TEXT_164);
d976 7
a982 7
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetListenerImpl"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_168);
d997 1
a997 1
    stringBuffer.append(TEXT_169);
d999 1
a999 1
    stringBuffer.append(TEXT_170);
d1001 1
a1001 1
    stringBuffer.append(TEXT_171);
d1003 1
a1003 1
    stringBuffer.append(TEXT_172);
d1007 3
a1009 1
    stringBuffer.append(TEXT_173);
d1028 3
a1030 1
    stringBuffer.append(TEXT_174);
d1032 1
a1032 1
    stringBuffer.append(TEXT_175);
d1034 1
a1034 1
    stringBuffer.append(TEXT_176);
d1036 1
a1036 1
    stringBuffer.append(TEXT_177);
d1040 1
a1040 1
    stringBuffer.append(TEXT_178);
d1042 1
a1042 1
    stringBuffer.append(TEXT_179);
d1044 1
a1044 1
    stringBuffer.append(TEXT_180);
d1046 1
a1046 1
    stringBuffer.append(TEXT_181);
d1054 24
d1079 4
a1083 2
    stringBuffer.append(TEXT_183);
    stringBuffer.append(_getViewCode);
d1086 3
a1088 1
	} else {
d1093 1
a1093 1
    stringBuffer.append(_getViewCode);
a1096 4
}	//local declaration of hasDeclaredFilter

    
if (hasConstraintsInChildren) {
d1100 1
a1100 1
}
d1103 1
a1103 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1105 1
a1105 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d1107 1
a1107 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetChangeEvent"));
a1108 70
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_196);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_210);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReplaceNotationalElementCommand"));
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalElementCommand"));
    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_227);
d1118 1
a1118 1
    stringBuffer.append(TEXT_228);
d1120 1
a1120 1
    stringBuffer.append(TEXT_229);
d1122 1
a1122 1
    stringBuffer.append(TEXT_230);
d1125 1
a1125 1
    stringBuffer.append(TEXT_231);
d1127 1
a1127 1
    stringBuffer.append(TEXT_232);
d1129 1
a1129 1
    stringBuffer.append(TEXT_233);
d1133 1
a1133 1
    stringBuffer.append(TEXT_234);
d1135 2
a1136 2
    stringBuffer.append(TEXT_235);
    stringBuffer.append(TEXT_236);
d1140 1
a1140 1
    stringBuffer.append(TEXT_237);
d1142 1
a1142 1
    stringBuffer.append(TEXT_238);
d1146 1
a1146 1
    stringBuffer.append(TEXT_239);
d1148 1
a1148 1
    stringBuffer.append(TEXT_240);
d1150 1
a1150 1
    stringBuffer.append(TEXT_241);
d1168 1
a1168 1
    stringBuffer.append(TEXT_242);
d1170 1
a1170 1
    stringBuffer.append(TEXT_243);
d1172 1
a1172 1
    stringBuffer.append(TEXT_244);
d1174 1
a1174 1
    stringBuffer.append(TEXT_245);
d1176 1
a1176 1
    stringBuffer.append(TEXT_246);
d1185 1
a1185 1
    stringBuffer.append(TEXT_247);
d1187 1
a1187 1
    stringBuffer.append(TEXT_248);
d1189 1
a1189 1
    stringBuffer.append(TEXT_249);
d1191 1
a1191 1
    stringBuffer.append(TEXT_250);
d1195 1
a1195 1
    stringBuffer.append(TEXT_251);
d1197 1
a1197 1
    stringBuffer.append(TEXT_252);
d1199 1
a1199 1
    stringBuffer.append(TEXT_253);
d1203 1
a1203 1
    stringBuffer.append(TEXT_254);
d1205 1
a1205 1
    stringBuffer.append(TEXT_255);
d1210 1
a1210 1
    stringBuffer.append(TEXT_256);
d1217 1
a1217 1
    stringBuffer.append(TEXT_257);
d1219 1
a1219 1
    stringBuffer.append(TEXT_258);
d1223 1
a1223 1
    stringBuffer.append(TEXT_259);
d1225 1
a1225 1
    stringBuffer.append(TEXT_260);
d1229 3
a1231 1
    stringBuffer.append(TEXT_261);
d1235 1
a1235 1
    stringBuffer.append(TEXT_262);
d1239 1
a1239 1
    stringBuffer.append(TEXT_263);
d1245 1
a1245 1
    stringBuffer.append(TEXT_264);
d1250 1
a1250 1
    stringBuffer.append(TEXT_265);
d1255 1
a1255 1
    stringBuffer.append(TEXT_266);
d1259 1
a1259 1
    stringBuffer.append(TEXT_267);
d1261 3
a1263 1
    stringBuffer.append(TEXT_268);
d1265 18
a1282 2
    stringBuffer.append(TEXT_269);
    stringBuffer.append(TEXT_270);
d1286 1
a1286 1
    stringBuffer.append(TEXT_271);
d1288 1
a1288 1
    stringBuffer.append(TEXT_272);
d1290 1
a1290 1
    stringBuffer.append(TEXT_273);
d1292 11
a1302 7
    stringBuffer.append(TEXT_274);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetListenerImpl"));
    stringBuffer.append(TEXT_275);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_276);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_277);
d1315 1
a1315 1
    stringBuffer.append(TEXT_278);
d1317 1
a1317 1
    stringBuffer.append(TEXT_279);
d1319 1
a1319 1
    stringBuffer.append(TEXT_280);
d1321 1
a1321 1
    stringBuffer.append(TEXT_281);
d1326 1
a1326 1
    stringBuffer.append(TEXT_282);
d1328 1
a1328 1
    stringBuffer.append(TEXT_283);
d1330 1
a1330 1
    stringBuffer.append(TEXT_284);
d1332 1
a1332 1
    stringBuffer.append(TEXT_285);
d1334 1
a1334 1
    stringBuffer.append(TEXT_286);
d1336 1
a1336 1
    stringBuffer.append(TEXT_287);
d1338 1
a1338 1
    stringBuffer.append(TEXT_288);
d1340 1
a1340 1
    stringBuffer.append(TEXT_289);
d1342 1
a1342 1
    stringBuffer.append(TEXT_290);
d1344 1
a1344 1
    stringBuffer.append(TEXT_291);
d1348 3
a1350 1
    stringBuffer.append(TEXT_292);
d1363 1
a1363 1
    stringBuffer.append(TEXT_293);
d1377 3
a1379 1
    stringBuffer.append(TEXT_294);
d1381 1
a1381 1
    stringBuffer.append(TEXT_295);
d1383 1
a1383 1
    stringBuffer.append(TEXT_296);
d1385 1
a1385 1
    stringBuffer.append(TEXT_297);
d1389 1
a1389 1
    stringBuffer.append(TEXT_298);
d1391 1
a1391 1
    stringBuffer.append(TEXT_299);
d1393 1
a1393 1
    stringBuffer.append(TEXT_300);
d1395 1
a1395 1
    stringBuffer.append(TEXT_301);
d1402 1
a1402 1
    stringBuffer.append(TEXT_302);
d1416 3
a1418 1
    stringBuffer.append(TEXT_303);
d1420 1
a1420 1
    stringBuffer.append(TEXT_304);
d1422 1
a1422 1
    stringBuffer.append(TEXT_305);
d1424 1
a1424 1
    stringBuffer.append(TEXT_306);
d1428 1
a1428 1
    stringBuffer.append(TEXT_307);
d1430 1
a1430 1
    stringBuffer.append(TEXT_308);
d1432 1
a1432 1
    stringBuffer.append(TEXT_309);
d1434 1
a1434 1
    stringBuffer.append(TEXT_310);
d1441 1
a1441 1
    stringBuffer.append(TEXT_311);
d1455 3
a1457 1
    stringBuffer.append(TEXT_312);
d1459 1
a1459 1
    stringBuffer.append(TEXT_313);
d1461 1
a1461 1
    stringBuffer.append(TEXT_314);
d1463 1
a1463 1
    stringBuffer.append(TEXT_315);
d1467 1
a1467 1
    stringBuffer.append(TEXT_316);
d1469 1
a1469 1
    stringBuffer.append(TEXT_317);
d1471 1
a1471 1
    stringBuffer.append(TEXT_318);
d1473 1
a1473 1
    stringBuffer.append(TEXT_319);
d1483 1
a1483 1
    stringBuffer.append(TEXT_320);
d1497 3
a1499 1
    stringBuffer.append(TEXT_321);
d1501 1
a1501 1
    stringBuffer.append(TEXT_322);
d1503 1
a1503 1
    stringBuffer.append(TEXT_323);
d1505 1
a1505 1
    stringBuffer.append(TEXT_324);
d1509 1
a1509 1
    stringBuffer.append(TEXT_325);
d1511 1
a1511 1
    stringBuffer.append(TEXT_326);
d1513 1
a1513 1
    stringBuffer.append(TEXT_327);
d1515 1
a1515 1
    stringBuffer.append(TEXT_328);
d1524 1
a1524 1
    stringBuffer.append(TEXT_329);
d1529 3
a1531 1
    stringBuffer.append(TEXT_330);
d1538 1
a1538 1
    stringBuffer.append(TEXT_331);
d1543 3
a1545 1
    stringBuffer.append(TEXT_332);
d1551 3
a1553 1
    stringBuffer.append(TEXT_333);
d1555 1
a1555 1
    stringBuffer.append(TEXT_334);
d1560 9
a1568 70
    stringBuffer.append(TEXT_335);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_336);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_337);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetChangeEvent"));
    stringBuffer.append(TEXT_338);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_339);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_340);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_341);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_342);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_343);
    stringBuffer.append(TEXT_344);
    /*inner class*/
    stringBuffer.append(TEXT_345);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_346);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_347);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_348);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_349);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_350);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_351);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_352);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_353);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_354);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_355);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_356);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_357);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_358);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_359);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_360);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_361);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_362);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_363);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_364);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_365);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_366);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_367);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_368);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_369);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_370);
d1570 1
a1570 31
    stringBuffer.append(TEXT_371);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_372);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_373);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_374);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_375);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_376);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_377);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_378);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_379);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_380);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_381);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_382);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_383);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReplaceNotationalElementCommand"));
    stringBuffer.append(TEXT_384);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_385);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_386);
d1572 1
a1572 67
    stringBuffer.append(TEXT_387);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeSourceCommand"));
    stringBuffer.append(TEXT_388);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_389);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeTargetCommand"));
    stringBuffer.append(TEXT_390);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_391);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_392);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_393);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_394);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_395);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_396);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_397);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_398);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_399);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_400);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_401);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_402);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_403);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_404);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_405);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_406);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_407);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_408);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_409);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_410);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_411);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_412);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_413);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_414);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_415);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_416);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_417);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_418);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_419);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_420);
d1574 1
a1574 13
    stringBuffer.append(TEXT_421);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_422);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_423);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_424);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_425);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_426);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_427);
d1576 1
a1576 1
    stringBuffer.append(TEXT_428);
d1585 1
a1585 1
    stringBuffer.append(TEXT_429);
d1587 1
a1587 1
    stringBuffer.append(TEXT_430);
d1589 1
a1589 1
    stringBuffer.append(TEXT_431);
d1591 1
a1591 1
    stringBuffer.append(TEXT_432);
d1597 1
a1597 1
    stringBuffer.append(TEXT_433);
d1599 1
a1599 1
    stringBuffer.append(TEXT_434);
d1601 1
a1601 1
    stringBuffer.append(TEXT_435);
d1605 3
a1607 3
    stringBuffer.append(TEXT_436);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_437);
d1609 3
a1611 3
    stringBuffer.append(TEXT_438);
    stringBuffer.append(TEXT_439);
    stringBuffer.append(TEXT_440);
d1613 1
a1613 1
    stringBuffer.append(TEXT_441);
d1615 1
a1615 1
    stringBuffer.append(TEXT_442);
d1638 1
a1638 1
    stringBuffer.append(TEXT_443);
d1640 1
a1640 1
    stringBuffer.append(TEXT_444);
d1642 1
a1642 1
    stringBuffer.append(TEXT_445);
d1644 1
a1644 1
    stringBuffer.append(TEXT_446);
d1649 1
a1649 1
    stringBuffer.append(TEXT_447);
d1658 1
a1658 1
    stringBuffer.append(TEXT_448);
d1660 1
a1660 1
    stringBuffer.append(TEXT_449);
d1662 1
a1662 1
    stringBuffer.append(TEXT_450);
d1664 1
a1664 1
    stringBuffer.append(TEXT_451);
d1668 1
a1668 1
    stringBuffer.append(TEXT_452);
d1670 1
a1670 1
    stringBuffer.append(TEXT_453);
d1672 1
a1672 1
    stringBuffer.append(TEXT_454);
d1676 1
a1676 1
    stringBuffer.append(TEXT_455);
d1678 1
a1678 1
    stringBuffer.append(TEXT_456);
d1683 1
a1683 1
    stringBuffer.append(TEXT_457);
d1691 1
a1691 1
    stringBuffer.append(TEXT_458);
d1693 1
a1693 1
    stringBuffer.append(TEXT_459);
d1697 1
a1697 1
    stringBuffer.append(TEXT_460);
d1699 1
a1699 1
    stringBuffer.append(TEXT_461);
d1704 1
a1704 1
    stringBuffer.append(TEXT_462);
d1706 1
a1706 1
    stringBuffer.append(TEXT_463);
d1708 1
a1708 1
    stringBuffer.append(TEXT_464);
d1710 1
a1710 1
    stringBuffer.append(TEXT_465);
d1714 1
a1714 1
    stringBuffer.append(TEXT_466);
d1716 1
a1716 1
    stringBuffer.append(TEXT_467);
d1718 1
a1718 1
    stringBuffer.append(TEXT_468);
d1723 1
a1723 1
    stringBuffer.append(TEXT_469);
d1725 1
a1725 1
    stringBuffer.append(TEXT_470);
d1727 1
a1727 1
    stringBuffer.append(TEXT_471);
d1729 1
a1729 1
    stringBuffer.append(TEXT_472);
d1733 1
a1733 1
    stringBuffer.append(TEXT_473);
d1735 1
a1735 1
    stringBuffer.append(TEXT_474);
d1737 1
a1737 1
    stringBuffer.append(TEXT_475);
d1741 3
a1743 1
    stringBuffer.append(TEXT_476);
d1747 1
a1747 1
    stringBuffer.append(TEXT_477);
d1751 1
a1751 1
    stringBuffer.append(TEXT_478);
d1759 1
a1759 1
    stringBuffer.append(TEXT_479);
d1764 1
a1764 1
    stringBuffer.append(TEXT_480);
d1774 1
a1774 1
    stringBuffer.append(TEXT_481);
d1776 1
a1776 1
    stringBuffer.append(TEXT_482);
d1778 1
a1778 1
    stringBuffer.append(TEXT_483);
d1780 1
a1780 1
    stringBuffer.append(TEXT_484);
d1784 1
a1784 1
    stringBuffer.append(TEXT_485);
d1786 1
a1786 1
    stringBuffer.append(TEXT_486);
d1788 1
a1788 1
    stringBuffer.append(TEXT_487);
d1792 1
a1792 1
    stringBuffer.append(TEXT_488);
d1797 3
a1799 1
    stringBuffer.append(TEXT_489);
d1801 1
a1801 1
    stringBuffer.append(TEXT_490);
d1805 1
a1805 1
    stringBuffer.append(TEXT_491);
d1809 1
a1809 1
    stringBuffer.append(TEXT_492);
d1814 1
a1814 1
    stringBuffer.append(TEXT_493);
d1816 1
a1816 1
    stringBuffer.append(TEXT_494);
d1818 1
a1818 1
    stringBuffer.append(TEXT_495);
d1820 1
a1820 1
    stringBuffer.append(TEXT_496);
d1822 1
a1822 1
    stringBuffer.append(TEXT_497);
d1824 1
a1824 1
    stringBuffer.append(TEXT_498);
d1826 1
a1826 1
    stringBuffer.append(TEXT_499);
d1828 1
a1828 1
    stringBuffer.append(TEXT_500);
d1830 1
a1830 1
    stringBuffer.append(TEXT_501);
d1834 1
a1834 1
    stringBuffer.append(TEXT_502);
d1836 1
a1836 1
    stringBuffer.append(TEXT_503);
d1838 1
a1838 1
    stringBuffer.append(TEXT_504);
a1840 2

    
d1843 1
a1843 1
    stringBuffer.append(TEXT_505);
d1845 1
a1845 1
    stringBuffer.append(TEXT_506);
d1847 1
a1847 1
    stringBuffer.append(TEXT_507);
d1852 1
a1852 1
    stringBuffer.append(TEXT_508);
d1854 1
a1854 1
    stringBuffer.append(TEXT_509);
d1858 1
a1858 1
    stringBuffer.append(TEXT_510);
d1862 1
a1862 1
    stringBuffer.append(TEXT_511);
d1866 1
a1866 1
    stringBuffer.append(TEXT_512);
a1869 3
	

    
d1873 1
a1873 1
    stringBuffer.append(TEXT_513);
d1877 1
a1877 1
    stringBuffer.append(TEXT_514);
d1879 1
a1879 1
    stringBuffer.append(TEXT_515);
d1881 1
a1881 1
    stringBuffer.append(TEXT_516);
d1886 1
a1886 1
    stringBuffer.append(TEXT_517);
d1888 1
a1888 1
    stringBuffer.append(TEXT_518);
d1892 1
a1892 1
    stringBuffer.append(TEXT_519);
d1896 1
a1896 1
    stringBuffer.append(TEXT_520);
d1898 3
a1900 1
    stringBuffer.append(TEXT_521);
d1902 17
a1918 1
    stringBuffer.append(TEXT_522);
d1925 13
a1937 9
    stringBuffer.append(TEXT_523);
    stringBuffer.append(TEXT_524);
    stringBuffer.append(TEXT_525);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
    stringBuffer.append(TEXT_526);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_527);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_528);
d1939 1
a1939 1
    stringBuffer.append(TEXT_529);
@


1.7
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d243 1
a243 1
  protected final String TEXT_224 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\tprivate ";
@


1.6
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d21 310
a330 310
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends AbstractGraphicalEditPart implements IUpdatableEditPart {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String MODEL_ID = \"";
  protected final String TEXT_4 = "\";" + NL;
  protected final String TEXT_5 = NL;
  protected final String TEXT_6 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_7 = ";";
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "(";
  protected final String TEXT_10 = " model) {" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_11 = " getDiagram() {" + NL + "\t\treturn (";
  protected final String TEXT_12 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_13 = NL;
  protected final String TEXT_14 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_15 = " view = (";
  protected final String TEXT_16 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_17 = " view = (";
  protected final String TEXT_18 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addNotify() {" + NL + "\t\tgetDiagram().eAdapters().add(updateManager);" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\tsuper.addNotify();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {" + NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_19 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_20 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_21 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_22 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_23 = " result = new ";
  protected final String TEXT_24 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_25 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_26 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_27 = "Command(getDiagram(), requestEx, (";
  protected final String TEXT_28 = ")getConstraintFor(request)));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_29 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_30 = ".getEditingDomain(getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_31 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ChangeBoundsRequest request, EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_32 = " emfCommand = new ";
  protected final String TEXT_33 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate Point moveDelta;" + NL + "\t\t\t\t\tprivate Dimension resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof Bounds == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_34 = " original = new ";
  protected final String TEXT_35 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_36 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(Point move, Dimension resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_37 = ".getEditingDomain(getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_38 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_39 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_40 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_41 = "(this);" + NL + "\t\t}";
  protected final String TEXT_42 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_43 = NL;
  protected final String TEXT_44 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_45 = "static ";
  protected final String TEXT_46 = "class Create";
  protected final String TEXT_47 = "NotationCommand extends ";
  protected final String TEXT_48 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_49 = "NotationCommand(";
  protected final String TEXT_50 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_51 = " domainElement";
  protected final String TEXT_52 = ", ";
  protected final String TEXT_53 = " constraint";
  protected final String TEXT_54 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_55 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_56 = ".decorateView(createdNode);";
  protected final String TEXT_57 = NL + "\t\t\t";
  protected final String TEXT_58 = " bounds = ";
  protected final String TEXT_59 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_60 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_61 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_62 = "));";
  protected final String TEXT_63 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_64 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_65 = "static ";
  protected final String TEXT_66 = "class Create";
  protected final String TEXT_67 = "Command extends ";
  protected final String TEXT_68 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_69 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_70 = "Command(";
  protected final String TEXT_71 = " parent, ";
  protected final String TEXT_72 = ".CreateRequestEx request";
  protected final String TEXT_73 = ", ";
  protected final String TEXT_74 = " constraint";
  protected final String TEXT_75 = ") {" + NL + "\t\t\t";
  protected final String TEXT_76 = " domainModelEditDomain = ";
  protected final String TEXT_77 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_78 = NL + "\t\t\t";
  protected final String TEXT_79 = " createdDomainElement = ";
  protected final String TEXT_80 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_81 = ".eINSTANCE.get";
  protected final String TEXT_82 = "());";
  protected final String TEXT_83 = NL + "\t\t\t";
  protected final String TEXT_84 = " createdDomainElement = ";
  protected final String TEXT_85 = ".eINSTANCE.create";
  protected final String TEXT_86 = "();";
  protected final String TEXT_87 = NL + "\t\t\t";
  protected final String TEXT_88 = NL + "\t\t\t";
  protected final String TEXT_89 = ".";
  protected final String TEXT_90 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_91 = NL + "\t\t\t";
  protected final String TEXT_92 = " compoundCommand = new ";
  protected final String TEXT_93 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_94 = ".create(domainModelEditDomain, ";
  protected final String TEXT_95 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_96 = ".eINSTANCE.get";
  protected final String TEXT_97 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_98 = ".create(domainModelEditDomain, ";
  protected final String TEXT_99 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_100 = ".eINSTANCE.get";
  protected final String TEXT_101 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_102 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_103 = ".create(domainModelEditDomain, ";
  protected final String TEXT_104 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_105 = ".eINSTANCE.get";
  protected final String TEXT_106 = "(), createdDomainElement);";
  protected final String TEXT_107 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_108 = "NotationCommand(parent, createdDomainElement";
  protected final String TEXT_109 = ", constraint";
  protected final String TEXT_110 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_111 = NL;
  protected final String TEXT_112 = NL;
  protected final String TEXT_113 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_114 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_115 = " feature, ";
  protected final String TEXT_116 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_117 = NL;
  protected final String TEXT_118 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_119 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_120 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class UpdateManager extends ";
  protected final String TEXT_121 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_122 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_123 = " affectedEditParts = findAffectedParts(msg);" + NL + "\t\t\tfor(";
  protected final String TEXT_124 = " it = affectedEditParts.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\tIUpdatableEditPart next = (IUpdatableEditPart) it.next();" + NL + "\t\t\t\tIUpdatableEditPart.Refresher refresher = next.getRefresher((";
  protected final String TEXT_125 = ")msg.getFeature(), msg);" + NL + "\t\t\t\tif (refresher != null) {" + NL + "\t\t\t\t\trefresher.refresh();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_126 = "/*<IUpdatableEditPart>*/ findAffectedParts(";
  protected final String TEXT_127 = " msg) {" + NL + "\t\t\tObject notifier = msg.getNotifier();" + NL + "\t\t\tif (notifier instanceof ";
  protected final String TEXT_128 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_129 = " view = getView((EObject) notifier);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEditPart affectedEditPart = (EditPart) getViewer().getEditPartRegistry().get(view);" + NL + "\t\t\t\t\tif (affectedEditPart != null) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_130 = ".singleton(affectedEditPart);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_131 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_132 = " getView(EObject offspring) {" + NL + "\t\t\twhile (offspring != null && offspring instanceof View == false) {" + NL + "\t\t\t\toffspring = offspring.eContainer();" + NL + "\t\t\t}" + NL + "\t\t\treturn (";
  protected final String TEXT_133 = ") offspring;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tif (!getDiagram().eAdapters().contains(updateManager)) {" + NL + "\t\t\tgetDiagram().eAdapters().add(updateManager);" + NL + "\t\t}" + NL + "\t\tif (!getDiagram().getElement().eAdapters().contains(domainModelRefresher)) {" + NL + "\t\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_134 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_135 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_136 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_137 = NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(updateManager);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\tNotationModelRefresher refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_140 = " domainModelEditDomain = ";
  protected final String TEXT_141 = ".getEditingDomain(";
  protected final String TEXT_142 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_143 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_144 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_145 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic NotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_146 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_147 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_148 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_149 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_150 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_151 = NL + "\t\t\tfilter = ";
  protected final String TEXT_152 = ".createFeatureFilter(";
  protected final String TEXT_153 = ".eINSTANCE.get";
  protected final String TEXT_154 = "());";
  protected final String TEXT_155 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_156 = ".createFeatureFilter(";
  protected final String TEXT_157 = ".eINSTANCE.get";
  protected final String TEXT_158 = "()));";
  protected final String TEXT_159 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_160 = ".createNotifierFilter(";
  protected final String TEXT_161 = "));";
  protected final String TEXT_162 = NL + "\t\t\tfilter = ";
  protected final String TEXT_163 = ".createNotifierFilter(";
  protected final String TEXT_164 = ");";
  protected final String TEXT_165 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_166 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_167 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_168 = " transactionAboutToCommit(";
  protected final String TEXT_169 = " event) {" + NL + "\t\t\treturn getRefreshNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_170 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_171 = " command = getRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_172 = " domainModelEditDomain = ";
  protected final String TEXT_173 = ".getEditingDomain(";
  protected final String TEXT_174 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_175 = " getRefreshNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_176 = " semanticChildren = getSemanticChildren();" + NL + "\t\t";
  protected final String TEXT_177 = " notationalChildren = ";
  protected final String TEXT_178 = ".getChildren();" + NL + "\t\tfinal ";
  protected final String TEXT_179 = " semanticToNotational = new ";
  protected final String TEXT_180 = "();" + NL + "\t\tfor(";
  protected final String TEXT_181 = " it = notationalChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_182 = " next = (";
  protected final String TEXT_183 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_184 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotational.put(nextSemantic, next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_185 = " parentView = ";
  protected final String TEXT_186 = ";" + NL + "\t\t";
  protected final String TEXT_187 = " command = new ";
  protected final String TEXT_188 = "();" + NL + "\t\tfor(";
  protected final String TEXT_189 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_190 = " next = (";
  protected final String TEXT_191 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_192 = " currentView = (";
  protected final String TEXT_193 = ") semanticToNotational.remove(next);" + NL + "\t\t\tint nodeVisualID = ";
  protected final String TEXT_194 = ".INSTANCE.getNodeVisualID(parentView, next);" + NL + "\t\t\tif (currentView == null) {" + NL + "\t\t\t\tif (shouldCreateView(next)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalElementCommand(parentView, next, nodeVisualID));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else if (nodeVisualID != ";
  protected final String TEXT_195 = ".getVisualID(currentView)) {" + NL + "\t\t\t\t";
  protected final String TEXT_196 = " notationalCommand = getCreateNotationalElementCommand(parentView, next, nodeVisualID);" + NL + "\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_197 = "(parentView, notationalCommand, currentView));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_198 = " it = semanticToNotational.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_199 = " obsoleteView = (";
  protected final String TEXT_200 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_201 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\tprivate ";
  protected final String TEXT_202 = " getCreateNotationalElementCommand(";
  protected final String TEXT_203 = " parentView, ";
  protected final String TEXT_204 = " domainElement, int nodeVisualID) {" + NL + "\t\tswitch (nodeVisualID) {";
  protected final String TEXT_205 = NL + "\t\tcase ";
  protected final String TEXT_206 = ".VISUAL_ID:" + NL + "\t\t\tif (domainElement instanceof ";
  protected final String TEXT_207 = ") {" + NL + "\t\t\t\treturn new Create";
  protected final String TEXT_208 = "NotationCommand(parentView, domainElement";
  protected final String TEXT_209 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_210 = ");" + NL + "\t\t\t}" + NL + "\t\t\treturn null;";
  protected final String TEXT_211 = NL + "\t\tdefault:" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_212 = " getSemanticChildren() {";
  protected final String TEXT_213 = NL;
  protected final String TEXT_214 = NL + "\treturn ";
  protected final String TEXT_215 = ".EMPTY_LIST;";
  protected final String TEXT_216 = NL + "\t";
  protected final String TEXT_217 = " result = new ";
  protected final String TEXT_218 = "();";
  protected final String TEXT_219 = NL + "\t";
  protected final String TEXT_220 = " viewObject = ";
  protected final String TEXT_221 = ";" + NL + "\t";
  protected final String TEXT_222 = " modelObject = ";
  protected final String TEXT_223 = ";" + NL + "\t";
  protected final String TEXT_224 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_225 = NL + "\tfor(";
  protected final String TEXT_226 = " it = ((";
  protected final String TEXT_227 = ")modelObject).";
  protected final String TEXT_228 = "().iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_229 = ") it.next();";
  protected final String TEXT_230 = NL + "\tnextValue = ((";
  protected final String TEXT_231 = ")modelObject).";
  protected final String TEXT_232 = "();";
  protected final String TEXT_233 = NL + "\tnodeVID = ";
  protected final String TEXT_234 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_235 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_236 = NL + "\tcase ";
  protected final String TEXT_237 = ".VISUAL_ID: {";
  protected final String TEXT_238 = NL + "\tif (";
  protected final String TEXT_239 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_240 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_241 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_242 = NL + "\t\t}";
  protected final String TEXT_243 = NL + "\t}";
  protected final String TEXT_244 = NL + "\t}";
  protected final String TEXT_245 = NL + "\treturn result;";
  protected final String TEXT_246 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_247 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateView(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_248 = ";" + NL + "\t}" + NL;
  protected final String TEXT_249 = NL;
  protected final String TEXT_250 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_251 = " domainModelEditDomain = ";
  protected final String TEXT_252 = ".getEditingDomain(";
  protected final String TEXT_253 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_254 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_255 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_256 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_257 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_258 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_259 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_260 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_261 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_262 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_263 = ".createEventTypeFilter(";
  protected final String TEXT_264 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_265 = ".createEventTypeFilter(";
  protected final String TEXT_266 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_267 = ".createEventTypeFilter(";
  protected final String TEXT_268 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_269 = ".createEventTypeFilter(";
  protected final String TEXT_270 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_271 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_272 = NL;
  protected final String TEXT_273 = NL + "\t\t\tfilter = ";
  protected final String TEXT_274 = ".createFeatureFilter(";
  protected final String TEXT_275 = ".eINSTANCE.get";
  protected final String TEXT_276 = "());";
  protected final String TEXT_277 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_278 = ".createFeatureFilter(";
  protected final String TEXT_279 = ".eINSTANCE.get";
  protected final String TEXT_280 = "()));";
  protected final String TEXT_281 = NL;
  protected final String TEXT_282 = NL + "\t\t\tfilter = ";
  protected final String TEXT_283 = ".createFeatureFilter(";
  protected final String TEXT_284 = ".eINSTANCE.get";
  protected final String TEXT_285 = "());";
  protected final String TEXT_286 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_287 = ".createFeatureFilter(";
  protected final String TEXT_288 = ".eINSTANCE.get";
  protected final String TEXT_289 = "()));";
  protected final String TEXT_290 = NL;
  protected final String TEXT_291 = NL + "\t\t\tfilter = ";
  protected final String TEXT_292 = ".createFeatureFilter(";
  protected final String TEXT_293 = ".eINSTANCE.get";
  protected final String TEXT_294 = "());";
  protected final String TEXT_295 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_296 = ".createFeatureFilter(";
  protected final String TEXT_297 = ".eINSTANCE.get";
  protected final String TEXT_298 = "()));";
  protected final String TEXT_299 = NL;
  protected final String TEXT_300 = NL + "\t\t\tfilter = ";
  protected final String TEXT_301 = ".createFeatureFilter(";
  protected final String TEXT_302 = ".eINSTANCE.get";
  protected final String TEXT_303 = "());";
  protected final String TEXT_304 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_305 = ".createFeatureFilter(";
  protected final String TEXT_306 = ".eINSTANCE.get";
  protected final String TEXT_307 = "()));";
  protected final String TEXT_308 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_309 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter();";
  protected final String TEXT_310 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_311 = NL + "\t\t\tfilter = createUncontainedLinksFilter();";
d332 217
a548 198
  protected final String TEXT_313 = ".ANY.negated();";
  protected final String TEXT_314 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_315 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_316 = " transactionAboutToCommit(";
  protected final String TEXT_317 = " event) {" + NL + "\t\t\treturn getRefreshLinkNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_318 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_319 = " command = getRefreshLinkNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_320 = " domainModelEditDomain = ";
  protected final String TEXT_321 = ".getEditingDomain(";
  protected final String TEXT_322 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_323 = NL;
  protected final String TEXT_324 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static class LinkDescriptor {" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_325 = " mySource;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_326 = " myDestination;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_327 = " myLinkElement;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_328 = " source, ";
  protected final String TEXT_329 = " destination, ";
  protected final String TEXT_330 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_331 = " source, ";
  protected final String TEXT_332 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_333 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_334 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_335 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_336 = " getRefreshLinkNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_337 = "/*<LinkDescriptor>*/ semanticChildLinks = getSemanticChildLinks();" + NL + "\t\t";
  protected final String TEXT_338 = "/*<Edge>*/ notationalChildLinks = getNotationalChildLinks();" + NL + "\t\tfinal ";
  protected final String TEXT_339 = " semanticToNotationalTypeBasedLinks = new ";
  protected final String TEXT_340 = "();" + NL + "\t\tfinal ";
  protected final String TEXT_341 = "/*<EObject, List<Edge>>*/ semanticToNotationalFeatureBasedLinks = new ";
  protected final String TEXT_342 = "();" + NL + "\t\tfor(";
  protected final String TEXT_343 = " it = notationalChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_344 = " next = (";
  protected final String TEXT_345 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_346 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotationalTypeBasedLinks.put(nextSemantic, next);" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_347 = " featureBasedLinksForSource = (";
  protected final String TEXT_348 = ") semanticToNotationalFeatureBasedLinks.get(next.getSource().getElement());" + NL + "\t\t\t\tif (featureBasedLinksForSource == null) {" + NL + "\t\t\t\t\tfeatureBasedLinksForSource = new ";
  protected final String TEXT_349 = "();" + NL + "\t\t\t\t\tsemanticToNotationalFeatureBasedLinks.put(next.getSource().getElement(), featureBasedLinksForSource);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tfeatureBasedLinksForSource.add(next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_350 = " parentView = ";
  protected final String TEXT_351 = ";" + NL + "\t\t";
  protected final String TEXT_352 = " command = new ";
  protected final String TEXT_353 = "();" + NL + "\t\tfor(";
  protected final String TEXT_354 = " it = semanticChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\tLinkDescriptor next = (LinkDescriptor) it.next();" + NL + "\t\t\t";
  protected final String TEXT_355 = " nextLinkElement = next.getLinkElement();" + NL + "\t\t\t";
  protected final String TEXT_356 = " currentEdge;" + NL + "\t\t\tif (nextLinkElement != null) {" + NL + "\t\t\t\tcurrentEdge = (";
  protected final String TEXT_357 = ") semanticToNotationalTypeBasedLinks.remove(nextLinkElement);" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_358 = " featureBasedLinksForSource = (";
  protected final String TEXT_359 = ") semanticToNotationalFeatureBasedLinks.get(next.getSource());" + NL + "\t\t\t\tif (featureBasedLinksForSource == null || featureBasedLinksForSource.isEmpty()) {" + NL + "\t\t\t\t\tcurrentEdge = null;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tcurrentEdge = (";
  protected final String TEXT_360 = ") featureBasedLinksForSource.remove(0);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tint linkVisualID = next.getVisualID();" + NL + "\t\t\tif (currentEdge == null) {" + NL + "\t\t\t\tif (nextLinkElement == null || shouldCreateEdge(nextLinkElement)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tboolean changedSource = currentEdge.getSource().getElement() != next.getSource();" + NL + "\t\t\t\tboolean changedTarget = currentEdge.getTarget().getElement() != next.getDestination();" + NL + "\t\t\t\tboolean changedVID = linkVisualID != ";
  protected final String TEXT_361 = ".getVisualID(currentEdge);" + NL + "\t\t\t\tif (!changedSource && !changedTarget) {" + NL + "\t\t\t\t\tif (changedVID) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_362 = " notationalCommand = getCreateNotationalEdgeCommand(parentView, next);" + NL + "\t\t\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_363 = "(parentView, notationalCommand, currentEdge));" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_364 = "(parentView, currentEdge));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tif (changedVID) {" + NL + "\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_365 = "(parentView, currentEdge));" + NL + "\t\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));" + NL + "\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_366 = " newSourceView = findView(next.getSource());" + NL + "\t\t\t\t\t\tif (changedSource && newSourceView != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_367 = "(currentEdge, newSourceView));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_368 = " newTargetView = findView(next.getDestination());" + NL + "\t\t\t\t\t\tif (changedTarget && newTargetView != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_369 = "(currentEdge, newTargetView));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_370 = " it = semanticToNotationalTypeBasedLinks.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_371 = " obsoleteView = (";
  protected final String TEXT_372 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_373 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_374 = " it = semanticToNotationalFeatureBasedLinks.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_375 = " obsoleteViews = (";
  protected final String TEXT_376 = ") it.next();" + NL + "\t\t\tfor(";
  protected final String TEXT_377 = " obsoleteViewsIt = obsoleteViews.iterator(); obsoleteViewsIt.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_378 = " obsoleteView = (";
  protected final String TEXT_379 = ") obsoleteViewsIt.next();" + NL + "\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_380 = "(parentView, obsoleteView));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_381 = " findView(";
  protected final String TEXT_382 = " modelElement) {" + NL + "\t\tif (modelElement == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_383 = " editPart = (";
  protected final String TEXT_384 = ") getViewer().getEditPartRegistry().get(modelElement);" + NL + "\t\tif (editPart != null && editPart.getModel() instanceof ";
  protected final String TEXT_385 = ") {" + NL + "\t\t\treturn (";
  protected final String TEXT_386 = ") editPart.getModel();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_387 = " parentView = findView(modelElement.eContainer());" + NL + "\t\tif (parentView != null) {" + NL + "\t\t\t";
  protected final String TEXT_388 = " result = findNode(parentView, modelElement);" + NL + "\t\t\tif (result != null) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn findEdge(modelElement);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * Finds a notational node that corresponds to the given underlying domain element in a subtree starting from the given parent element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_389 = " findNode(";
  protected final String TEXT_390 = " parentView, ";
  protected final String TEXT_391 = " modelElement) {" + NL + "\t\tfor(";
  protected final String TEXT_392 = " it = parentView.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_393 = " next = (";
  protected final String TEXT_394 = ") it.next();" + NL + "\t\t\tif (!next.isSetElement() || next.getElement() == parentView) {" + NL + "\t\t\t\t";
  protected final String TEXT_395 = " result = findNode(next, modelElement);" + NL + "\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (next.isSetElement() && next.getElement() == modelElement) {" + NL + "\t\t\t\treturn next;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds a notational edge that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_396 = " findEdge(";
  protected final String TEXT_397 = " modelElement) {" + NL + "\t\tfor(";
  protected final String TEXT_398 = " it = ";
  protected final String TEXT_399 = ".getEdges().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_400 = " next = (";
  protected final String TEXT_401 = ") it.next();" + NL + "\t\t\tif (next.isSetElement() && next.getElement() == modelElement) {" + NL + "\t\t\t\treturn next;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_402 = " getCreateNotationalEdgeCommand(";
  protected final String TEXT_403 = " parentView, LinkDescriptor linkDescriptor) {" + NL + "\t\t";
  protected final String TEXT_404 = " sourceView = findView(linkDescriptor.getSource());" + NL + "\t\t";
  protected final String TEXT_405 = " targetView = findView(linkDescriptor.getDestination());" + NL + "\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_406 = " createdEdge = ";
  protected final String TEXT_407 = ".eINSTANCE.createEdge();" + NL + "\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_408 = NL + "\t\tcase ";
  protected final String TEXT_409 = ".VISUAL_ID:" + NL + "\t\t\tif (linkDescriptor.getLinkElement() instanceof ";
  protected final String TEXT_410 = ") {" + NL + "\t\t\t\tcreatedEdge.setElement(linkDescriptor.getLinkElement());" + NL + "\t\t\t\t";
  protected final String TEXT_411 = ".decorateView(createdEdge);" + NL + "\t\t\t}" + NL + "\t\t\tbreak;";
  protected final String TEXT_412 = NL + "\t\tcase ";
  protected final String TEXT_413 = ".VISUAL_ID:" + NL + "\t\t\tif (linkDescriptor.getLinkElement() == null) {" + NL + "\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t";
  protected final String TEXT_414 = ".decorateView(createdEdge);" + NL + "\t\t\t}" + NL + "\t\t\tbreak;";
  protected final String TEXT_415 = NL + "\t\t}" + NL + "\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn new ";
  protected final String TEXT_416 = "(parentView, createdEdge, sourceView, targetView);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_417 = " getSemanticChildLinks() {";
  protected final String TEXT_418 = NL;
  protected final String TEXT_419 = "\t";
  protected final String TEXT_420 = " result = new ";
  protected final String TEXT_421 = "();";
  protected final String TEXT_422 = NL + "\t";
  protected final String TEXT_423 = " modelObject = ";
  protected final String TEXT_424 = ";" + NL + "\t";
  protected final String TEXT_425 = " nextValue;";
  protected final String TEXT_426 = NL + "\tint linkVID;";
  protected final String TEXT_427 = NL + "\tfor(";
  protected final String TEXT_428 = " it = ((";
  protected final String TEXT_429 = ")modelObject).";
  protected final String TEXT_430 = "().iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_431 = ") it.next();";
  protected final String TEXT_432 = NL + "\tnextValue = ((";
  protected final String TEXT_433 = ")modelObject).";
  protected final String TEXT_434 = "();";
  protected final String TEXT_435 = NL + "\tlinkVID = ";
  protected final String TEXT_436 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_437 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_438 = NL + "\tcase ";
  protected final String TEXT_439 = ".VISUAL_ID: {";
  protected final String TEXT_440 = NL + "\tif (";
  protected final String TEXT_441 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_442 = NL + "\t\t";
  protected final String TEXT_443 = " source = ((";
  protected final String TEXT_444 = ")nextValue).";
  protected final String TEXT_445 = "();";
  protected final String TEXT_446 = NL + "\t\t";
  protected final String TEXT_447 = " source = ";
  protected final String TEXT_448 = ";";
  protected final String TEXT_449 = NL + "\t\t";
  protected final String TEXT_450 = " target = ((";
  protected final String TEXT_451 = ")nextValue).";
  protected final String TEXT_452 = "();";
  protected final String TEXT_453 = NL + "\t\t";
  protected final String TEXT_454 = " target = ";
  protected final String TEXT_455 = ";";
  protected final String TEXT_456 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new LinkDescriptor(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_457 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_458 = NL + "\t}";
  protected final String TEXT_459 = NL + "\t}";
  protected final String TEXT_460 = NL + "\t}";
  protected final String TEXT_461 = NL + "\tfor(";
  protected final String TEXT_462 = " it = ((";
  protected final String TEXT_463 = ")modelObject).";
  protected final String TEXT_464 = "().iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_465 = ") it.next();";
  protected final String TEXT_466 = NL + "\tnextValue = ((";
  protected final String TEXT_467 = ")modelObject).";
  protected final String TEXT_468 = "();";
  protected final String TEXT_469 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_470 = NL + "\t\tresult.add(new LinkDescriptor(modelObject, nextValue, null, ";
  protected final String TEXT_471 = ".VISUAL_ID));";
  protected final String TEXT_472 = NL + "\t}";
  protected final String TEXT_473 = NL + "\t}";
  protected final String TEXT_474 = NL + "\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_475 = " getNotationalChildLinks() {" + NL + "\t\t";
  protected final String TEXT_476 = " result = new ";
  protected final String TEXT_477 = "();" + NL + "\t\t";
  protected final String TEXT_478 = " allLinks = ";
  protected final String TEXT_479 = ".getEdges();" + NL + "\t\tfor(";
  protected final String TEXT_480 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_481 = " next = (";
  protected final String TEXT_482 = ") it.next();";
  protected final String TEXT_483 = NL + "\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_484 = " source = next.getSource();" + NL + "\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_485 = " target = next.getTarget();" + NL + "\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_486 = NL + "\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_487 = ") {" + NL + "\t\t\t\t\tint linkVID = ";
  protected final String TEXT_488 = ".getVisualID(next);" + NL + "\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_489 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_490 = ".VISUAL_ID:";
  protected final String TEXT_491 = NL + "\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_492 = NL + "\t\t\t} else {";
  protected final String TEXT_493 = NL + "\t\t\t}";
  protected final String TEXT_494 = NL + "\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_495 = NL + "\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_496 = ") {" + NL + "\t\t\t\t\tint linkVID = ";
  protected final String TEXT_497 = ".getVisualID(next);" + NL + "\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_498 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_499 = ".VISUAL_ID:";
  protected final String TEXT_500 = NL + "\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_501 = NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_502 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateEdge(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_503 = ";" + NL + "\t}";
  protected final String TEXT_504 = NL;
  protected final String TEXT_505 = NL;
  protected final String TEXT_506 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_507 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_508 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_509 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate UpdateManager updateManager = new UpdateManager();" + NL + "}";
  protected final String TEXT_510 = NL;
d555 1
a555 1
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
d561 76
d693 1
a693 1
    stringBuffer.append(TEXT_1);
d723 1
a723 1
    stringBuffer.append(TEXT_2);
d725 1
a725 1
    stringBuffer.append(TEXT_3);
d727 1
a727 1
    stringBuffer.append(TEXT_4);
d730 2
a731 2
    stringBuffer.append(TEXT_5);
    stringBuffer.append(TEXT_6);
d733 1
a733 1
    stringBuffer.append(TEXT_7);
d735 1
a735 1
    stringBuffer.append(TEXT_8);
d737 1
a737 1
    stringBuffer.append(TEXT_9);
d739 1
a739 1
    stringBuffer.append(TEXT_10);
d741 1
a741 1
    stringBuffer.append(TEXT_11);
d743 3
a745 3
    stringBuffer.append(TEXT_12);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(TEXT_14);
d747 1
a747 1
    stringBuffer.append(TEXT_15);
d749 1
a749 1
    stringBuffer.append(TEXT_16);
d751 1
a751 1
    stringBuffer.append(TEXT_17);
d753 1
a753 1
    stringBuffer.append(TEXT_18);
d756 1
a756 1
    stringBuffer.append(TEXT_19);
d758 1
a758 1
    stringBuffer.append(TEXT_20);
d760 1
a760 1
    stringBuffer.append(TEXT_21);
d762 1
a762 1
    stringBuffer.append(TEXT_22);
d764 1
a764 1
    stringBuffer.append(TEXT_23);
d766 1
a766 1
    stringBuffer.append(TEXT_24);
d771 1
a771 1
    stringBuffer.append(TEXT_25);
d773 1
a773 1
    stringBuffer.append(TEXT_26);
d776 1
a776 1
    stringBuffer.append(TEXT_27);
d778 1
a778 1
    stringBuffer.append(TEXT_28);
d782 1
a782 1
    stringBuffer.append(TEXT_29);
d784 1
a784 1
    stringBuffer.append(TEXT_30);
d786 1
a786 1
    stringBuffer.append(TEXT_31);
d788 1
a788 1
    stringBuffer.append(TEXT_32);
d790 1
a790 1
    stringBuffer.append(TEXT_33);
d792 1
a792 1
    stringBuffer.append(TEXT_34);
d794 1
a794 1
    stringBuffer.append(TEXT_35);
d796 1
a796 1
    stringBuffer.append(TEXT_36);
d798 1
a798 1
    stringBuffer.append(TEXT_37);
d803 1
a803 1
    stringBuffer.append(TEXT_38);
d807 1
a807 1
    stringBuffer.append(TEXT_39);
d809 1
a809 1
    stringBuffer.append(TEXT_40);
d811 1
a811 1
    stringBuffer.append(TEXT_41);
d813 1
a813 1
    stringBuffer.append(TEXT_42);
d821 2
a822 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(TEXT_44);
d824 1
a824 1
    stringBuffer.append(TEXT_45);
d826 1
a826 1
    stringBuffer.append(TEXT_46);
d829 1
a829 1
    stringBuffer.append(TEXT_47);
d831 1
a831 1
    stringBuffer.append(TEXT_48);
d834 1
a834 1
    stringBuffer.append(TEXT_49);
d836 1
a836 1
    stringBuffer.append(TEXT_50);
d838 1
a838 1
    stringBuffer.append(TEXT_51);
d840 1
a840 1
    stringBuffer.append(TEXT_52);
d842 1
a842 1
    stringBuffer.append(TEXT_53);
d844 1
a844 1
    stringBuffer.append(TEXT_54);
d846 1
a846 1
    stringBuffer.append(TEXT_55);
d848 1
a848 1
    stringBuffer.append(TEXT_56);
d852 1
a852 1
    stringBuffer.append(TEXT_57);
d854 1
a854 1
    stringBuffer.append(TEXT_58);
d856 1
a856 1
    stringBuffer.append(TEXT_59);
d866 1
a866 1
    stringBuffer.append(TEXT_60);
d868 1
a868 1
    stringBuffer.append(TEXT_61);
d870 1
a870 1
    stringBuffer.append(TEXT_62);
d874 1
a874 1
    stringBuffer.append(TEXT_63);
d878 1
a878 1
    stringBuffer.append(TEXT_64);
d880 1
a880 1
    stringBuffer.append(TEXT_65);
d882 1
a882 1
    stringBuffer.append(TEXT_66);
d885 1
a885 1
    stringBuffer.append(TEXT_67);
d887 1
a887 1
    stringBuffer.append(TEXT_68);
d890 1
a890 1
    stringBuffer.append(TEXT_69);
d893 1
a893 1
    stringBuffer.append(TEXT_70);
d895 1
a895 1
    stringBuffer.append(TEXT_71);
d897 1
a897 1
    stringBuffer.append(TEXT_72);
d899 1
a899 1
    stringBuffer.append(TEXT_73);
d901 1
a901 1
    stringBuffer.append(TEXT_74);
d903 1
a903 1
    stringBuffer.append(TEXT_75);
d905 1
a905 1
    stringBuffer.append(TEXT_76);
d907 1
a907 1
    stringBuffer.append(TEXT_77);
d912 1
a912 1
    stringBuffer.append(TEXT_78);
d914 1
a914 1
    stringBuffer.append(TEXT_79);
d916 1
a916 1
    stringBuffer.append(TEXT_80);
d918 1
a918 1
    stringBuffer.append(TEXT_81);
d920 1
a920 1
    stringBuffer.append(TEXT_82);
d924 1
a924 1
    stringBuffer.append(TEXT_83);
d926 1
a926 1
    stringBuffer.append(TEXT_84);
d928 1
a928 1
    stringBuffer.append(TEXT_85);
d930 1
a930 1
    stringBuffer.append(TEXT_86);
d934 1
a934 1
    stringBuffer.append(TEXT_87);
d936 1
a936 1
    stringBuffer.append(TEXT_88);
d938 1
a938 1
    stringBuffer.append(TEXT_89);
d940 7
a946 1
    stringBuffer.append(TEXT_90);
d953 1
a953 1
    stringBuffer.append(TEXT_91);
d955 1
a955 1
    stringBuffer.append(TEXT_92);
d957 1
a957 1
    stringBuffer.append(TEXT_93);
d959 1
a959 1
    stringBuffer.append(TEXT_94);
d961 1
a961 1
    stringBuffer.append(TEXT_95);
d963 1
a963 1
    stringBuffer.append(TEXT_96);
d965 1
a965 1
    stringBuffer.append(TEXT_97);
d967 1
a967 1
    stringBuffer.append(TEXT_98);
d969 1
a969 1
    stringBuffer.append(TEXT_99);
d971 1
a971 1
    stringBuffer.append(TEXT_100);
d973 1
a973 1
    stringBuffer.append(TEXT_101);
d977 1
a977 1
    stringBuffer.append(TEXT_102);
d979 1
a979 1
    stringBuffer.append(TEXT_103);
d981 1
a981 1
    stringBuffer.append(TEXT_104);
d983 1
a983 1
    stringBuffer.append(TEXT_105);
d985 1
a985 1
    stringBuffer.append(TEXT_106);
d989 1
a989 1
    stringBuffer.append(TEXT_107);
d992 7
a998 1
    stringBuffer.append(TEXT_108);
d1000 1
a1000 1
    stringBuffer.append(TEXT_109);
d1002 1
a1002 1
    stringBuffer.append(TEXT_110);
d1009 3
a1011 3
    stringBuffer.append(TEXT_111);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(TEXT_113);
d1013 1
a1013 1
    stringBuffer.append(TEXT_114);
d1015 1
a1015 1
    stringBuffer.append(TEXT_115);
d1017 3
a1019 3
    stringBuffer.append(TEXT_116);
    stringBuffer.append(TEXT_117);
    stringBuffer.append(TEXT_118);
d1021 1
a1021 1
    stringBuffer.append(TEXT_119);
d1023 1
a1023 1
    stringBuffer.append(TEXT_120);
d1025 1
a1025 1
    stringBuffer.append(TEXT_121);
d1027 1
a1027 1
    stringBuffer.append(TEXT_122);
d1029 1
a1029 1
    stringBuffer.append(TEXT_123);
d1031 1
a1031 1
    stringBuffer.append(TEXT_124);
d1033 1
a1033 1
    stringBuffer.append(TEXT_125);
d1035 1
a1035 1
    stringBuffer.append(TEXT_126);
d1037 1
a1037 1
    stringBuffer.append(TEXT_127);
d1039 1
a1039 1
    stringBuffer.append(TEXT_128);
d1041 1
a1041 1
    stringBuffer.append(TEXT_129);
d1043 1
a1043 1
    stringBuffer.append(TEXT_130);
d1045 1
a1045 1
    stringBuffer.append(TEXT_131);
d1047 1
a1047 1
    stringBuffer.append(TEXT_132);
d1049 1
a1049 1
    stringBuffer.append(TEXT_133);
d1054 1
a1054 1
    stringBuffer.append(TEXT_134);
d1058 1
a1058 1
    stringBuffer.append(TEXT_135);
d1063 1
a1063 1
    stringBuffer.append(TEXT_136);
d1067 1
a1067 1
    stringBuffer.append(TEXT_137);
a1071 1
String _getSemanticElementCode = "getDiagram().getElement()";
d1075 2
a1076 2
    stringBuffer.append(TEXT_138);
    stringBuffer.append(TEXT_139);
d1078 1
a1078 1
    stringBuffer.append(TEXT_140);
d1080 1
a1080 1
    stringBuffer.append(TEXT_141);
d1082 1
a1082 1
    stringBuffer.append(TEXT_142);
d1084 1
a1084 1
    stringBuffer.append(TEXT_143);
d1086 1
a1086 1
    stringBuffer.append(TEXT_144);
d1088 1
a1088 1
    stringBuffer.append(TEXT_145);
d1103 1
a1103 1
    stringBuffer.append(TEXT_146);
d1105 1
a1105 1
    stringBuffer.append(TEXT_147);
d1107 1
a1107 1
    stringBuffer.append(TEXT_148);
d1109 1
a1109 1
    stringBuffer.append(TEXT_149);
d1113 1
a1113 1
    stringBuffer.append(TEXT_150);
d1132 1
a1132 1
    stringBuffer.append(TEXT_151);
d1134 1
a1134 1
    stringBuffer.append(TEXT_152);
d1136 1
a1136 1
    stringBuffer.append(TEXT_153);
d1138 1
a1138 1
    stringBuffer.append(TEXT_154);
d1142 1
a1142 1
    stringBuffer.append(TEXT_155);
d1144 1
a1144 1
    stringBuffer.append(TEXT_156);
d1146 1
a1146 1
    stringBuffer.append(TEXT_157);
d1148 1
a1148 1
    stringBuffer.append(TEXT_158);
d1156 1
a1156 1
    stringBuffer.append(TEXT_159);
d1158 3
a1160 3
    stringBuffer.append(TEXT_160);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_161);
d1164 1
a1164 1
    stringBuffer.append(TEXT_162);
d1166 3
a1168 3
    stringBuffer.append(TEXT_163);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_164);
d1176 1
a1176 1
    stringBuffer.append(TEXT_165);
d1180 1
a1180 1
    stringBuffer.append(TEXT_166);
d1182 1
a1182 1
    stringBuffer.append(TEXT_167);
d1184 1
a1184 1
    stringBuffer.append(TEXT_168);
d1186 1
a1186 1
    stringBuffer.append(TEXT_169);
d1188 1
a1188 1
    stringBuffer.append(TEXT_170);
d1190 1
a1190 1
    stringBuffer.append(TEXT_171);
d1192 1
a1192 1
    stringBuffer.append(TEXT_172);
d1194 1
a1194 1
    stringBuffer.append(TEXT_173);
d1196 1
a1196 1
    stringBuffer.append(TEXT_174);
d1198 1
a1198 1
    stringBuffer.append(TEXT_175);
d1200 1
a1200 1
    stringBuffer.append(TEXT_176);
d1202 1
a1202 1
    stringBuffer.append(TEXT_177);
d1204 1
a1204 1
    stringBuffer.append(TEXT_178);
d1206 1
a1206 1
    stringBuffer.append(TEXT_179);
d1208 1
a1208 1
    stringBuffer.append(TEXT_180);
d1210 1
a1210 1
    stringBuffer.append(TEXT_181);
d1212 1
a1212 1
    stringBuffer.append(TEXT_182);
d1214 1
a1214 1
    stringBuffer.append(TEXT_183);
d1216 1
a1216 1
    stringBuffer.append(TEXT_184);
d1218 1
a1218 1
    stringBuffer.append(TEXT_185);
d1220 1
a1220 1
    stringBuffer.append(TEXT_186);
d1222 1
a1222 1
    stringBuffer.append(TEXT_187);
d1224 1
a1224 1
    stringBuffer.append(TEXT_188);
d1226 1
a1226 1
    stringBuffer.append(TEXT_189);
d1228 1
a1228 1
    stringBuffer.append(TEXT_190);
d1230 1
a1230 1
    stringBuffer.append(TEXT_191);
d1232 1
a1232 1
    stringBuffer.append(TEXT_192);
d1234 1
a1234 1
    stringBuffer.append(TEXT_193);
d1236 1
a1236 1
    stringBuffer.append(TEXT_194);
d1238 1
a1238 1
    stringBuffer.append(TEXT_195);
d1240 1
a1240 1
    stringBuffer.append(TEXT_196);
d1242 1
a1242 1
    stringBuffer.append(TEXT_197);
d1244 1
a1244 1
    stringBuffer.append(TEXT_198);
d1246 1
a1246 1
    stringBuffer.append(TEXT_199);
d1248 1
a1248 1
    stringBuffer.append(TEXT_200);
d1250 1
a1250 1
    stringBuffer.append(TEXT_201);
d1252 1
a1252 1
    stringBuffer.append(TEXT_202);
d1254 1
a1254 1
    stringBuffer.append(TEXT_203);
d1256 1
a1256 1
    stringBuffer.append(TEXT_204);
d1266 1
a1266 1
    stringBuffer.append(TEXT_205);
d1268 1
a1268 1
    stringBuffer.append(TEXT_206);
d1270 1
a1270 1
    stringBuffer.append(TEXT_207);
d1273 1
a1273 1
    stringBuffer.append(TEXT_208);
d1275 1
a1275 1
    stringBuffer.append(TEXT_209);
d1277 1
a1277 1
    stringBuffer.append(TEXT_210);
d1281 1
a1281 1
    stringBuffer.append(TEXT_211);
d1283 2
a1284 2
    stringBuffer.append(TEXT_212);
    stringBuffer.append(TEXT_213);
d1288 1
a1288 1
    stringBuffer.append(TEXT_214);
d1290 1
a1290 1
    stringBuffer.append(TEXT_215);
d1294 1
a1294 1
    stringBuffer.append(TEXT_216);
d1296 1
a1296 1
    stringBuffer.append(TEXT_217);
d1298 1
a1298 1
    stringBuffer.append(TEXT_218);
d1316 1
a1316 1
    stringBuffer.append(TEXT_219);
d1318 1
a1318 1
    stringBuffer.append(TEXT_220);
d1320 1
a1320 1
    stringBuffer.append(TEXT_221);
d1322 1
a1322 3
    stringBuffer.append(TEXT_222);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_223);
d1324 1
a1324 1
    stringBuffer.append(TEXT_224);
d1333 1
a1333 1
    stringBuffer.append(TEXT_225);
d1335 3
a1337 5
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_227);
    stringBuffer.append(childMetaFeature.getGetAccessor());
    stringBuffer.append(TEXT_228);
d1339 1
a1339 1
    stringBuffer.append(TEXT_229);
d1343 5
a1347 5
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(childMetaFeature.getGetAccessor());
    stringBuffer.append(TEXT_232);
d1351 1
a1351 1
    stringBuffer.append(TEXT_233);
d1353 1
a1353 1
    stringBuffer.append(TEXT_234);
d1358 1
a1358 1
    stringBuffer.append(TEXT_235);
d1365 1
a1365 1
    stringBuffer.append(TEXT_236);
d1367 1
a1367 1
    stringBuffer.append(TEXT_237);
d1371 1
a1371 1
    stringBuffer.append(TEXT_238);
d1373 1
a1373 1
    stringBuffer.append(TEXT_239);
d1377 1
a1377 1
    stringBuffer.append(TEXT_240);
d1381 1
a1381 1
    stringBuffer.append(TEXT_241);
d1385 1
a1385 1
    stringBuffer.append(TEXT_242);
d1391 1
a1391 1
    stringBuffer.append(TEXT_243);
d1396 1
a1396 1
    stringBuffer.append(TEXT_244);
d1401 1
a1401 1
    stringBuffer.append(TEXT_245);
d1405 3
a1407 1
    stringBuffer.append(TEXT_246);
d1409 2
a1410 4
    stringBuffer.append(TEXT_247);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_248);
    stringBuffer.append(TEXT_249);
d1414 1
a1414 1
    stringBuffer.append(TEXT_250);
d1416 1
a1416 1
    stringBuffer.append(TEXT_251);
d1418 1
a1418 1
    stringBuffer.append(TEXT_252);
d1420 1
a1420 1
    stringBuffer.append(TEXT_253);
d1422 1
a1422 1
    stringBuffer.append(TEXT_254);
d1424 1
a1424 1
    stringBuffer.append(TEXT_255);
d1426 1
a1426 1
    stringBuffer.append(TEXT_256);
d1439 1
a1439 1
    stringBuffer.append(TEXT_257);
d1441 1
a1441 1
    stringBuffer.append(TEXT_258);
d1443 1
a1443 1
    stringBuffer.append(TEXT_259);
d1445 1
a1445 1
    stringBuffer.append(TEXT_260);
d1450 1
a1450 1
    stringBuffer.append(TEXT_261);
d1452 1
a1452 1
    stringBuffer.append(TEXT_262);
d1454 1
a1454 1
    stringBuffer.append(TEXT_263);
d1456 1
a1456 1
    stringBuffer.append(TEXT_264);
d1458 1
a1458 1
    stringBuffer.append(TEXT_265);
d1460 1
a1460 1
    stringBuffer.append(TEXT_266);
d1462 1
a1462 1
    stringBuffer.append(TEXT_267);
d1464 1
a1464 1
    stringBuffer.append(TEXT_268);
d1466 1
a1466 1
    stringBuffer.append(TEXT_269);
d1468 1
a1468 1
    stringBuffer.append(TEXT_270);
d1472 1
a1472 1
    stringBuffer.append(TEXT_271);
d1485 1
a1485 1
    stringBuffer.append(TEXT_272);
d1499 1
a1499 1
    stringBuffer.append(TEXT_273);
d1501 1
a1501 1
    stringBuffer.append(TEXT_274);
d1503 1
a1503 1
    stringBuffer.append(TEXT_275);
d1505 1
a1505 1
    stringBuffer.append(TEXT_276);
d1509 1
a1509 1
    stringBuffer.append(TEXT_277);
d1511 1
a1511 1
    stringBuffer.append(TEXT_278);
d1513 1
a1513 1
    stringBuffer.append(TEXT_279);
d1515 1
a1515 1
    stringBuffer.append(TEXT_280);
d1522 1
a1522 1
    stringBuffer.append(TEXT_281);
d1536 1
a1536 1
    stringBuffer.append(TEXT_282);
d1538 1
a1538 1
    stringBuffer.append(TEXT_283);
d1540 1
a1540 1
    stringBuffer.append(TEXT_284);
d1542 1
a1542 1
    stringBuffer.append(TEXT_285);
d1546 1
a1546 1
    stringBuffer.append(TEXT_286);
d1548 1
a1548 1
    stringBuffer.append(TEXT_287);
d1550 1
a1550 1
    stringBuffer.append(TEXT_288);
d1552 1
a1552 1
    stringBuffer.append(TEXT_289);
d1559 1
a1559 1
    stringBuffer.append(TEXT_290);
d1573 1
a1573 1
    stringBuffer.append(TEXT_291);
d1575 1
a1575 1
    stringBuffer.append(TEXT_292);
d1577 1
a1577 1
    stringBuffer.append(TEXT_293);
d1579 1
a1579 1
    stringBuffer.append(TEXT_294);
d1583 1
a1583 1
    stringBuffer.append(TEXT_295);
d1585 1
a1585 1
    stringBuffer.append(TEXT_296);
d1587 1
a1587 1
    stringBuffer.append(TEXT_297);
d1589 1
a1589 1
    stringBuffer.append(TEXT_298);
d1599 1
a1599 1
    stringBuffer.append(TEXT_299);
d1613 1
a1613 1
    stringBuffer.append(TEXT_300);
d1615 1
a1615 1
    stringBuffer.append(TEXT_301);
d1617 1
a1617 1
    stringBuffer.append(TEXT_302);
d1619 1
a1619 1
    stringBuffer.append(TEXT_303);
d1623 1
a1623 1
    stringBuffer.append(TEXT_304);
d1625 1
a1625 1
    stringBuffer.append(TEXT_305);
d1627 1
a1627 1
    stringBuffer.append(TEXT_306);
d1629 1
a1629 1
    stringBuffer.append(TEXT_307);
d1638 1
a1638 1
    stringBuffer.append(TEXT_308);
d1643 1
a1643 1
    stringBuffer.append(TEXT_309);
d1650 1
a1650 1
    stringBuffer.append(TEXT_310);
d1655 1
a1655 1
    stringBuffer.append(TEXT_311);
d1661 1
a1661 1
    stringBuffer.append(TEXT_312);
d1663 1
a1663 1
    stringBuffer.append(TEXT_313);
d1668 1
a1668 1
    stringBuffer.append(TEXT_314);
d1670 1
a1670 1
    stringBuffer.append(TEXT_315);
d1672 1
a1672 1
    stringBuffer.append(TEXT_316);
d1674 1
a1674 1
    stringBuffer.append(TEXT_317);
d1676 1
a1676 1
    stringBuffer.append(TEXT_318);
d1678 1
a1678 1
    stringBuffer.append(TEXT_319);
d1680 1
a1680 1
    stringBuffer.append(TEXT_320);
d1682 1
a1682 1
    stringBuffer.append(TEXT_321);
d1684 2
a1685 2
    stringBuffer.append(TEXT_322);
    stringBuffer.append(TEXT_323);
d1687 1
a1687 1
    stringBuffer.append(TEXT_324);
d1689 1
a1689 1
    stringBuffer.append(TEXT_325);
d1691 1
a1691 1
    stringBuffer.append(TEXT_326);
d1693 1
a1693 1
    stringBuffer.append(TEXT_327);
d1695 1
a1695 1
    stringBuffer.append(TEXT_328);
d1697 1
a1697 1
    stringBuffer.append(TEXT_329);
d1699 1
a1699 1
    stringBuffer.append(TEXT_330);
d1701 1
a1701 1
    stringBuffer.append(TEXT_331);
d1703 1
a1703 1
    stringBuffer.append(TEXT_332);
d1705 1
a1705 1
    stringBuffer.append(TEXT_333);
d1707 1
a1707 1
    stringBuffer.append(TEXT_334);
d1709 1
a1709 1
    stringBuffer.append(TEXT_335);
d1711 1
a1711 1
    stringBuffer.append(TEXT_336);
d1713 1
a1713 1
    stringBuffer.append(TEXT_337);
d1715 1
a1715 1
    stringBuffer.append(TEXT_338);
d1717 1
a1717 1
    stringBuffer.append(TEXT_339);
d1719 1
a1719 1
    stringBuffer.append(TEXT_340);
d1721 1
a1721 1
    stringBuffer.append(TEXT_341);
d1723 1
a1723 1
    stringBuffer.append(TEXT_342);
d1725 1
a1725 1
    stringBuffer.append(TEXT_343);
d1727 1
a1727 1
    stringBuffer.append(TEXT_344);
d1729 1
a1729 1
    stringBuffer.append(TEXT_345);
d1731 1
a1731 1
    stringBuffer.append(TEXT_346);
d1733 1
a1733 1
    stringBuffer.append(TEXT_347);
d1735 1
a1735 1
    stringBuffer.append(TEXT_348);
d1737 1
a1737 1
    stringBuffer.append(TEXT_349);
d1739 1
a1739 1
    stringBuffer.append(TEXT_350);
d1741 1
a1741 1
    stringBuffer.append(TEXT_351);
d1743 1
a1743 1
    stringBuffer.append(TEXT_352);
d1745 1
a1745 1
    stringBuffer.append(TEXT_353);
d1747 1
a1747 1
    stringBuffer.append(TEXT_354);
d1749 1
a1749 1
    stringBuffer.append(TEXT_355);
d1751 1
a1751 1
    stringBuffer.append(TEXT_356);
d1753 1
a1753 1
    stringBuffer.append(TEXT_357);
d1755 1
a1755 1
    stringBuffer.append(TEXT_358);
d1757 1
a1757 1
    stringBuffer.append(TEXT_359);
d1759 1
a1759 1
    stringBuffer.append(TEXT_360);
d1761 1
a1761 1
    stringBuffer.append(TEXT_361);
d1763 1
a1763 1
    stringBuffer.append(TEXT_362);
d1765 1
a1765 1
    stringBuffer.append(TEXT_363);
d1767 1
a1767 1
    stringBuffer.append(TEXT_364);
d1769 1
a1769 1
    stringBuffer.append(TEXT_365);
d1771 1
a1771 1
    stringBuffer.append(TEXT_366);
d1773 1
a1773 1
    stringBuffer.append(TEXT_367);
d1775 1
a1775 1
    stringBuffer.append(TEXT_368);
d1777 1
a1777 1
    stringBuffer.append(TEXT_369);
d1779 1
a1779 1
    stringBuffer.append(TEXT_370);
d1781 1
a1781 1
    stringBuffer.append(TEXT_371);
d1783 1
a1783 1
    stringBuffer.append(TEXT_372);
d1785 1
a1785 1
    stringBuffer.append(TEXT_373);
d1787 1
a1787 1
    stringBuffer.append(TEXT_374);
d1789 1
a1789 1
    stringBuffer.append(TEXT_375);
d1791 1
a1791 1
    stringBuffer.append(TEXT_376);
d1793 1
a1793 1
    stringBuffer.append(TEXT_377);
d1795 1
a1795 1
    stringBuffer.append(TEXT_378);
d1797 1
a1797 1
    stringBuffer.append(TEXT_379);
d1799 1
a1799 1
    stringBuffer.append(TEXT_380);
d1801 1
a1801 1
    stringBuffer.append(TEXT_381);
d1803 1
a1803 1
    stringBuffer.append(TEXT_382);
d1805 1
a1805 1
    stringBuffer.append(TEXT_383);
d1807 1
a1807 1
    stringBuffer.append(TEXT_384);
d1809 1
a1809 1
    stringBuffer.append(TEXT_385);
d1811 1
a1811 1
    stringBuffer.append(TEXT_386);
d1813 1
a1813 1
    stringBuffer.append(TEXT_387);
d1815 1
a1815 1
    stringBuffer.append(TEXT_388);
d1817 1
a1817 1
    stringBuffer.append(TEXT_389);
d1819 1
a1819 1
    stringBuffer.append(TEXT_390);
d1821 1
a1821 1
    stringBuffer.append(TEXT_391);
d1823 1
a1823 1
    stringBuffer.append(TEXT_392);
d1825 1
a1825 1
    stringBuffer.append(TEXT_393);
d1827 1
a1827 1
    stringBuffer.append(TEXT_394);
d1829 1
a1829 1
    stringBuffer.append(TEXT_395);
d1831 1
a1831 1
    stringBuffer.append(TEXT_396);
d1833 1
a1833 1
    stringBuffer.append(TEXT_397);
d1835 1
a1835 1
    stringBuffer.append(TEXT_398);
d1837 1
a1837 1
    stringBuffer.append(TEXT_399);
d1839 1
a1839 1
    stringBuffer.append(TEXT_400);
d1841 1
a1841 1
    stringBuffer.append(TEXT_401);
d1843 1
a1843 1
    stringBuffer.append(TEXT_402);
d1845 1
a1845 1
    stringBuffer.append(TEXT_403);
d1847 1
a1847 1
    stringBuffer.append(TEXT_404);
d1849 1
a1849 1
    stringBuffer.append(TEXT_405);
d1851 1
a1851 1
    stringBuffer.append(TEXT_406);
d1853 1
a1853 1
    stringBuffer.append(TEXT_407);
d1862 1
a1862 1
    stringBuffer.append(TEXT_408);
d1864 1
a1864 1
    stringBuffer.append(TEXT_409);
d1866 1
a1866 1
    stringBuffer.append(TEXT_410);
d1868 1
a1868 1
    stringBuffer.append(TEXT_411);
d1874 1
a1874 1
    stringBuffer.append(TEXT_412);
d1876 1
a1876 1
    stringBuffer.append(TEXT_413);
d1878 1
a1878 1
    stringBuffer.append(TEXT_414);
d1882 1
a1882 1
    stringBuffer.append(TEXT_415);
d1884 1
a1884 1
    stringBuffer.append(TEXT_416);
d1886 3
a1888 3
    stringBuffer.append(TEXT_417);
    stringBuffer.append(TEXT_418);
    stringBuffer.append(TEXT_419);
d1890 1
a1890 1
    stringBuffer.append(TEXT_420);
d1892 1
a1892 1
    stringBuffer.append(TEXT_421);
d1915 1
a1915 1
    stringBuffer.append(TEXT_422);
d1917 3
a1919 3
    stringBuffer.append(TEXT_423);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_424);
d1921 1
a1921 1
    stringBuffer.append(TEXT_425);
d1926 1
a1926 1
    stringBuffer.append(TEXT_426);
d1935 1
a1935 1
    stringBuffer.append(TEXT_427);
d1937 3
a1939 5
    stringBuffer.append(TEXT_428);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_429);
    stringBuffer.append(metaFeature.getGetAccessor());
    stringBuffer.append(TEXT_430);
d1941 1
a1941 1
    stringBuffer.append(TEXT_431);
d1945 5
a1949 5
    stringBuffer.append(TEXT_432);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_433);
    stringBuffer.append(metaFeature.getGetAccessor());
    stringBuffer.append(TEXT_434);
d1953 1
a1953 1
    stringBuffer.append(TEXT_435);
d1955 1
a1955 1
    stringBuffer.append(TEXT_436);
d1960 1
a1960 1
    stringBuffer.append(TEXT_437);
d1968 1
a1968 1
    stringBuffer.append(TEXT_438);
d1970 1
a1970 1
    stringBuffer.append(TEXT_439);
d1974 1
a1974 1
    stringBuffer.append(TEXT_440);
d1976 1
a1976 1
    stringBuffer.append(TEXT_441);
d1981 3
a1983 1
    stringBuffer.append(TEXT_442);
d1985 3
a1987 5
    stringBuffer.append(TEXT_443);
    stringBuffer.append(importManager.getImportedName(modelFacet.getSourceMetaFeature().getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_444);
    stringBuffer.append(modelFacet.getSourceMetaFeature().getGetAccessor());
    stringBuffer.append(TEXT_445);
d1991 1
a1991 1
    stringBuffer.append(TEXT_446);
d1993 3
a1995 3
    stringBuffer.append(TEXT_447);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_448);
d2000 3
a2002 1
    stringBuffer.append(TEXT_449);
d2004 3
a2006 5
    stringBuffer.append(TEXT_450);
    stringBuffer.append(importManager.getImportedName(modelFacet.getTargetMetaFeature().getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_451);
    stringBuffer.append(modelFacet.getTargetMetaFeature().getGetAccessor());
    stringBuffer.append(TEXT_452);
d2010 1
a2010 1
    stringBuffer.append(TEXT_453);
d2012 3
a2014 3
    stringBuffer.append(TEXT_454);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_455);
d2018 1
a2018 1
    stringBuffer.append(TEXT_456);
d2022 1
a2022 1
    stringBuffer.append(TEXT_457);
d2026 1
a2026 1
    stringBuffer.append(TEXT_458);
d2034 1
a2034 1
    stringBuffer.append(TEXT_459);
d2039 1
a2039 1
    stringBuffer.append(TEXT_460);
d2049 1
a2049 1
    stringBuffer.append(TEXT_461);
d2051 3
a2053 5
    stringBuffer.append(TEXT_462);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_463);
    stringBuffer.append(metaFeature.getGetAccessor());
    stringBuffer.append(TEXT_464);
d2055 1
a2055 1
    stringBuffer.append(TEXT_465);
d2059 5
a2063 5
    stringBuffer.append(TEXT_466);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_467);
    stringBuffer.append(metaFeature.getGetAccessor());
    stringBuffer.append(TEXT_468);
d2067 1
a2067 1
    stringBuffer.append(TEXT_469);
d2072 1
a2072 1
    stringBuffer.append(TEXT_470);
d2074 1
a2074 1
    stringBuffer.append(TEXT_471);
d2078 1
a2078 1
    stringBuffer.append(TEXT_472);
d2082 1
a2082 1
    stringBuffer.append(TEXT_473);
d2087 1
a2087 1
    stringBuffer.append(TEXT_474);
d2089 1
a2089 1
    stringBuffer.append(TEXT_475);
d2091 1
a2091 1
    stringBuffer.append(TEXT_476);
d2093 1
a2093 1
    stringBuffer.append(TEXT_477);
d2095 1
a2095 1
    stringBuffer.append(TEXT_478);
d2097 1
a2097 1
    stringBuffer.append(TEXT_479);
d2099 1
a2099 1
    stringBuffer.append(TEXT_480);
d2101 1
a2101 1
    stringBuffer.append(TEXT_481);
d2103 1
a2103 1
    stringBuffer.append(TEXT_482);
d2107 1
a2107 1
    stringBuffer.append(TEXT_483);
d2109 1
a2109 1
    stringBuffer.append(TEXT_484);
d2111 1
a2111 1
    stringBuffer.append(TEXT_485);
d2118 1
a2118 1
    stringBuffer.append(TEXT_486);
d2120 1
a2120 1
    stringBuffer.append(TEXT_487);
d2122 1
a2122 1
    stringBuffer.append(TEXT_488);
d2127 1
a2127 1
    stringBuffer.append(TEXT_489);
d2129 1
a2129 1
    stringBuffer.append(TEXT_490);
d2133 1
a2133 1
    stringBuffer.append(TEXT_491);
d2137 1
a2137 1
    stringBuffer.append(TEXT_492);
d2141 1
a2141 1
    stringBuffer.append(TEXT_493);
d2151 1
a2151 1
    stringBuffer.append(TEXT_494);
d2155 3
a2157 3
    stringBuffer.append(TEXT_495);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_496);
d2159 1
a2159 1
    stringBuffer.append(TEXT_497);
d2164 1
a2164 1
    stringBuffer.append(TEXT_498);
d2166 1
a2166 1
    stringBuffer.append(TEXT_499);
d2170 1
a2170 1
    stringBuffer.append(TEXT_500);
d2174 1
a2174 1
    stringBuffer.append(TEXT_501);
d2176 1
a2176 1
    stringBuffer.append(TEXT_502);
d2178 1
a2178 1
    stringBuffer.append(TEXT_503);
d2185 3
a2187 3
    stringBuffer.append(TEXT_504);
    stringBuffer.append(TEXT_505);
    stringBuffer.append(TEXT_506);
d2189 1
a2189 1
    stringBuffer.append(TEXT_507);
d2191 1
a2191 1
    stringBuffer.append(TEXT_508);
d2193 1
a2193 1
    stringBuffer.append(TEXT_509);
d2195 1
a2195 1
    stringBuffer.append(TEXT_510);
@


1.5
log
@#146009 Lite Generator: Changes in the underlying domain model should be automatically reflected in the notational model
1,2,3 Parts commited.
@
text
@d31 71
a101 71
  protected final String TEXT_12 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {" + NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_13 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_14 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_15 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_16 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_17 = " result = new ";
  protected final String TEXT_18 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_19 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_20 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_21 = "Command(getDiagram(), requestEx, (";
  protected final String TEXT_22 = ")getConstraintFor(request)));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_23 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_24 = ".getEditingDomain(getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_25 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ChangeBoundsRequest request, EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_26 = " emfCommand = new ";
  protected final String TEXT_27 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate Point moveDelta;" + NL + "\t\t\t\t\tprivate Dimension resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof Bounds == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_28 = " original = new ";
  protected final String TEXT_29 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_30 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(Point move, Dimension resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_31 = ".getEditingDomain(getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_32 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_33 = "(this);" + NL + "\t\t}";
  protected final String TEXT_34 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_37 = "static ";
  protected final String TEXT_38 = "class Create";
  protected final String TEXT_39 = "NotationCommand extends ";
  protected final String TEXT_40 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_41 = "NotationCommand(";
  protected final String TEXT_42 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_43 = " domainElement";
  protected final String TEXT_44 = ", ";
  protected final String TEXT_45 = " constraint";
  protected final String TEXT_46 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_47 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_48 = ".decorateView(createdNode);";
  protected final String TEXT_49 = NL + "\t\t\t";
  protected final String TEXT_50 = " bounds = ";
  protected final String TEXT_51 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_52 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_53 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_54 = "));";
  protected final String TEXT_55 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_56 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_57 = "static ";
  protected final String TEXT_58 = "class Create";
  protected final String TEXT_59 = "Command extends ";
  protected final String TEXT_60 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_61 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_62 = "Command(";
  protected final String TEXT_63 = " parent, ";
  protected final String TEXT_64 = ".CreateRequestEx request";
  protected final String TEXT_65 = ", ";
  protected final String TEXT_66 = " constraint";
  protected final String TEXT_67 = ") {" + NL + "\t\t\t";
  protected final String TEXT_68 = " domainModelEditDomain = ";
  protected final String TEXT_69 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_70 = NL + "\t\t\t";
  protected final String TEXT_71 = " createdDomainElement = ";
  protected final String TEXT_72 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_73 = ".eINSTANCE.get";
  protected final String TEXT_74 = "());";
  protected final String TEXT_75 = NL + "\t\t\t";
  protected final String TEXT_76 = " createdDomainElement = ";
  protected final String TEXT_77 = ".eINSTANCE.create";
  protected final String TEXT_78 = "();";
  protected final String TEXT_79 = NL + "\t\t\t";
  protected final String TEXT_80 = NL + "\t\t\t";
  protected final String TEXT_81 = ".";
  protected final String TEXT_82 = ".initializeElement(createdDomainElement);";
d103 427
a529 160
  protected final String TEXT_84 = " compoundCommand = new ";
  protected final String TEXT_85 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_86 = ".create(domainModelEditDomain, ";
  protected final String TEXT_87 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_88 = ".eINSTANCE.get";
  protected final String TEXT_89 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_90 = ".create(domainModelEditDomain, ";
  protected final String TEXT_91 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_92 = ".eINSTANCE.get";
  protected final String TEXT_93 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_94 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_95 = ".create(domainModelEditDomain, ";
  protected final String TEXT_96 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_97 = ".eINSTANCE.get";
  protected final String TEXT_98 = "(), createdDomainElement);";
  protected final String TEXT_99 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_100 = "NotationCommand(parent, createdDomainElement";
  protected final String TEXT_101 = ", constraint";
  protected final String TEXT_102 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_103 = NL;
  protected final String TEXT_104 = NL;
  protected final String TEXT_105 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_106 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_107 = " feature, ";
  protected final String TEXT_108 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_111 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_112 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class UpdateManager extends ";
  protected final String TEXT_113 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_114 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_115 = " affectedEditParts = findAffectedParts(msg);" + NL + "\t\t\tfor(";
  protected final String TEXT_116 = " it = affectedEditParts.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\tIUpdatableEditPart next = (IUpdatableEditPart) it.next();" + NL + "\t\t\t\tIUpdatableEditPart.Refresher refresher = next.getRefresher((";
  protected final String TEXT_117 = ")msg.getFeature(), msg);" + NL + "\t\t\t\tif (refresher != null) {" + NL + "\t\t\t\t\trefresher.refresh();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_118 = "/*<IUpdatableEditPart>*/ findAffectedParts(";
  protected final String TEXT_119 = " msg) {" + NL + "\t\t\tObject notifier = msg.getNotifier();" + NL + "\t\t\tif (notifier instanceof ";
  protected final String TEXT_120 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_121 = " view = getView((EObject) notifier);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEditPart affectedEditPart = (EditPart) getViewer().getEditPartRegistry().get(view);" + NL + "\t\t\t\t\tif (affectedEditPart != null) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_122 = ".singleton(affectedEditPart);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_123 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_124 = " getView(EObject offspring) {" + NL + "\t\t\twhile (offspring != null && offspring instanceof View == false) {" + NL + "\t\t\t\toffspring = offspring.eContainer();" + NL + "\t\t\t}" + NL + "\t\t\treturn (";
  protected final String TEXT_125 = ") offspring;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagram().eAdapters().add(updateManager);" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\tinstallNotationModelRefresher();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tuninstallNotationModelRefresher();" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(updateManager);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\tNotationModelRefresher refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_128 = " domainModelEditDomain = ";
  protected final String TEXT_129 = ".getEditingDomain(";
  protected final String TEXT_130 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate NotationModelRefresher getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_131 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_132 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_133 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic NotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_134 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_135 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_136 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_137 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_138 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_139 = NL + "\t\t\tfilter = ";
  protected final String TEXT_140 = ".createFeatureFilter(";
  protected final String TEXT_141 = ".eINSTANCE.get";
  protected final String TEXT_142 = "());";
  protected final String TEXT_143 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_144 = ".createFeatureFilter(";
  protected final String TEXT_145 = ".eINSTANCE.get";
  protected final String TEXT_146 = "()));";
  protected final String TEXT_147 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_148 = ".createNotifierFilter(";
  protected final String TEXT_149 = "));";
  protected final String TEXT_150 = NL + "\t\t\tfilter = ";
  protected final String TEXT_151 = ".createNotifierFilter(";
  protected final String TEXT_152 = ");";
  protected final String TEXT_153 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_154 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_155 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_156 = " transactionAboutToCommit(";
  protected final String TEXT_157 = " event) {" + NL + "\t\t\treturn getRefreshNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_158 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_159 = " command = getRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_160 = " domainModelEditDomain = ";
  protected final String TEXT_161 = ".getEditingDomain(";
  protected final String TEXT_162 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_163 = " getRefreshNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_164 = " semanticChildren = getSemanticChildren();" + NL + "\t\t";
  protected final String TEXT_165 = " notationalChildren = ";
  protected final String TEXT_166 = ".getChildren();" + NL + "\t\tfinal ";
  protected final String TEXT_167 = " semanticToNotational = new ";
  protected final String TEXT_168 = "();" + NL + "\t\tfor(";
  protected final String TEXT_169 = " it = notationalChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_170 = " next = (";
  protected final String TEXT_171 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_172 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotational.put(nextSemantic, next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_173 = " parentView = ";
  protected final String TEXT_174 = ";" + NL + "\t\t";
  protected final String TEXT_175 = " command = new ";
  protected final String TEXT_176 = "();" + NL + "\t\tfor(";
  protected final String TEXT_177 = " it = semanticChildren.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_178 = " next = (";
  protected final String TEXT_179 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_180 = " currentView = (";
  protected final String TEXT_181 = ") semanticToNotational.remove(next);" + NL + "\t\t\tint nodeVisualID = ";
  protected final String TEXT_182 = ".INSTANCE.getNodeVisualID(parentView, next);" + NL + "\t\t\tif (currentView == null) {" + NL + "\t\t\t\tif (shouldCreateView(next)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalElementCommand(parentView, next, nodeVisualID));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else if (nodeVisualID != ";
  protected final String TEXT_183 = ".getVisualID(currentView)) {" + NL + "\t\t\t\t";
  protected final String TEXT_184 = " notationalCommand = getCreateNotationalElementCommand(parentView, next, nodeVisualID);" + NL + "\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_185 = "(parentView, notationalCommand, currentView));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_186 = " it = semanticToNotational.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_187 = " obsoleteView = (";
  protected final String TEXT_188 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_189 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\tprivate ";
  protected final String TEXT_190 = " getCreateNotationalElementCommand(";
  protected final String TEXT_191 = " parentView, ";
  protected final String TEXT_192 = " domainElement, int nodeVisualID) {" + NL + "\t\tswitch (nodeVisualID) {";
  protected final String TEXT_193 = NL + "\t\tcase ";
  protected final String TEXT_194 = ".VISUAL_ID:" + NL + "\t\t\tif (domainElement instanceof ";
  protected final String TEXT_195 = ") {" + NL + "\t\t\t\treturn new Create";
  protected final String TEXT_196 = "NotationCommand(parentView, domainElement";
  protected final String TEXT_197 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_198 = ");" + NL + "\t\t\t}" + NL + "\t\t\treturn null;";
  protected final String TEXT_199 = NL + "\t\tdefault:" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_200 = " getSemanticChildren() {";
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = NL + "\treturn ";
  protected final String TEXT_203 = ".EMPTY_LIST;";
  protected final String TEXT_204 = NL + "\t";
  protected final String TEXT_205 = " result = new ";
  protected final String TEXT_206 = "();";
  protected final String TEXT_207 = NL + "\t";
  protected final String TEXT_208 = " viewObject = ";
  protected final String TEXT_209 = ";" + NL + "\t";
  protected final String TEXT_210 = " modelObject = ";
  protected final String TEXT_211 = ";" + NL + "\t";
  protected final String TEXT_212 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_213 = NL + "\tfor(";
  protected final String TEXT_214 = " it = ((";
  protected final String TEXT_215 = ")modelObject).";
  protected final String TEXT_216 = "().iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_217 = ") it.next();";
  protected final String TEXT_218 = NL + "\tnextValue = ((";
  protected final String TEXT_219 = ")modelObject).";
  protected final String TEXT_220 = "();";
  protected final String TEXT_221 = NL + "\tnodeVID = ";
  protected final String TEXT_222 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_223 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_224 = NL + "\tcase ";
  protected final String TEXT_225 = ".VISUAL_ID: {";
  protected final String TEXT_226 = NL + "\tif (";
  protected final String TEXT_227 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_228 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_229 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_230 = NL + "\t\t}";
  protected final String TEXT_231 = NL + "\t}";
  protected final String TEXT_232 = NL + "\t}";
  protected final String TEXT_233 = NL + "\treturn result;";
  protected final String TEXT_234 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_235 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateView(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_236 = ";" + NL + "\t}";
  protected final String TEXT_237 = NL;
  protected final String TEXT_238 = NL;
  protected final String TEXT_239 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_240 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_241 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_242 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate UpdateManager updateManager = new UpdateManager();" + NL + "}";
  protected final String TEXT_243 = NL;
d538 2
d542 56
d649 10
d661 1
a661 1
    stringBuffer.append(TEXT_13);
d663 1
a663 1
    stringBuffer.append(TEXT_14);
d665 1
a665 1
    stringBuffer.append(TEXT_15);
d667 1
a667 1
    stringBuffer.append(TEXT_16);
d669 1
a669 1
    stringBuffer.append(TEXT_17);
d671 1
a671 1
    stringBuffer.append(TEXT_18);
d676 1
a676 1
    stringBuffer.append(TEXT_19);
d678 1
a678 1
    stringBuffer.append(TEXT_20);
d681 1
a681 1
    stringBuffer.append(TEXT_21);
d683 1
a683 1
    stringBuffer.append(TEXT_22);
d687 1
a687 1
    stringBuffer.append(TEXT_23);
d689 1
a689 1
    stringBuffer.append(TEXT_24);
d691 1
a691 1
    stringBuffer.append(TEXT_25);
d693 1
a693 1
    stringBuffer.append(TEXT_26);
d695 1
a695 1
    stringBuffer.append(TEXT_27);
d697 1
a697 1
    stringBuffer.append(TEXT_28);
d699 1
a699 1
    stringBuffer.append(TEXT_29);
d701 1
a701 1
    stringBuffer.append(TEXT_30);
d703 10
a712 1
    stringBuffer.append(TEXT_31);
d714 1
a714 1
    stringBuffer.append(TEXT_32);
d716 1
a716 1
    stringBuffer.append(TEXT_33);
d718 1
a718 1
    stringBuffer.append(TEXT_34);
d726 2
a727 2
    stringBuffer.append(TEXT_35);
    stringBuffer.append(TEXT_36);
d729 1
a729 1
    stringBuffer.append(TEXT_37);
d731 1
a731 1
    stringBuffer.append(TEXT_38);
d734 1
a734 1
    stringBuffer.append(TEXT_39);
d736 1
a736 1
    stringBuffer.append(TEXT_40);
d739 1
a739 1
    stringBuffer.append(TEXT_41);
d741 1
a741 1
    stringBuffer.append(TEXT_42);
d743 1
a743 1
    stringBuffer.append(TEXT_43);
d745 1
a745 1
    stringBuffer.append(TEXT_44);
d747 1
a747 1
    stringBuffer.append(TEXT_45);
d749 1
a749 1
    stringBuffer.append(TEXT_46);
d751 1
a751 1
    stringBuffer.append(TEXT_47);
d753 1
a753 1
    stringBuffer.append(TEXT_48);
d757 1
a757 1
    stringBuffer.append(TEXT_49);
d759 1
a759 1
    stringBuffer.append(TEXT_50);
d761 1
a761 1
    stringBuffer.append(TEXT_51);
d771 1
a771 1
    stringBuffer.append(TEXT_52);
d773 1
a773 1
    stringBuffer.append(TEXT_53);
d775 1
a775 1
    stringBuffer.append(TEXT_54);
d779 1
a779 1
    stringBuffer.append(TEXT_55);
d783 1
a783 1
    stringBuffer.append(TEXT_56);
d785 1
a785 1
    stringBuffer.append(TEXT_57);
d787 1
a787 1
    stringBuffer.append(TEXT_58);
d790 1
a790 1
    stringBuffer.append(TEXT_59);
d792 1
a792 1
    stringBuffer.append(TEXT_60);
d795 1
a795 1
    stringBuffer.append(TEXT_61);
d798 1
a798 1
    stringBuffer.append(TEXT_62);
d800 1
a800 1
    stringBuffer.append(TEXT_63);
d802 1
a802 1
    stringBuffer.append(TEXT_64);
d804 1
a804 1
    stringBuffer.append(TEXT_65);
d806 1
a806 1
    stringBuffer.append(TEXT_66);
d808 1
a808 1
    stringBuffer.append(TEXT_67);
d810 1
a810 1
    stringBuffer.append(TEXT_68);
d812 1
a812 1
    stringBuffer.append(TEXT_69);
d817 1
a817 1
    stringBuffer.append(TEXT_70);
d819 1
a819 1
    stringBuffer.append(TEXT_71);
d821 1
a821 1
    stringBuffer.append(TEXT_72);
d823 1
a823 1
    stringBuffer.append(TEXT_73);
d825 1
a825 1
    stringBuffer.append(TEXT_74);
d829 1
a829 1
    stringBuffer.append(TEXT_75);
d831 1
a831 1
    stringBuffer.append(TEXT_76);
d833 1
a833 1
    stringBuffer.append(TEXT_77);
d835 1
a835 1
    stringBuffer.append(TEXT_78);
d839 1
a839 1
    stringBuffer.append(TEXT_79);
d841 1
a841 1
    stringBuffer.append(TEXT_80);
d843 1
a843 1
    stringBuffer.append(TEXT_81);
d845 1
a845 1
    stringBuffer.append(TEXT_82);
d852 1
a852 1
    stringBuffer.append(TEXT_83);
d854 1
a854 1
    stringBuffer.append(TEXT_84);
d856 1
a856 1
    stringBuffer.append(TEXT_85);
d858 1
a858 1
    stringBuffer.append(TEXT_86);
d860 1
a860 1
    stringBuffer.append(TEXT_87);
d862 1
a862 1
    stringBuffer.append(TEXT_88);
d864 1
a864 1
    stringBuffer.append(TEXT_89);
d866 1
a866 1
    stringBuffer.append(TEXT_90);
d868 1
a868 1
    stringBuffer.append(TEXT_91);
d870 1
a870 1
    stringBuffer.append(TEXT_92);
d872 1
a872 1
    stringBuffer.append(TEXT_93);
d876 1
a876 1
    stringBuffer.append(TEXT_94);
d878 1
a878 1
    stringBuffer.append(TEXT_95);
d880 1
a880 1
    stringBuffer.append(TEXT_96);
d882 1
a882 1
    stringBuffer.append(TEXT_97);
d884 1
a884 1
    stringBuffer.append(TEXT_98);
d888 1
a888 1
    stringBuffer.append(TEXT_99);
d891 1
a891 1
    stringBuffer.append(TEXT_100);
d893 1
a893 1
    stringBuffer.append(TEXT_101);
d895 1
a895 1
    stringBuffer.append(TEXT_102);
d902 3
a904 3
    stringBuffer.append(TEXT_103);
    stringBuffer.append(TEXT_104);
    stringBuffer.append(TEXT_105);
d906 1
a906 1
    stringBuffer.append(TEXT_106);
d908 1
a908 1
    stringBuffer.append(TEXT_107);
d910 3
a912 3
    stringBuffer.append(TEXT_108);
    stringBuffer.append(TEXT_109);
    stringBuffer.append(TEXT_110);
d914 1
a914 1
    stringBuffer.append(TEXT_111);
d916 1
a916 1
    stringBuffer.append(TEXT_112);
d918 1
a918 1
    stringBuffer.append(TEXT_113);
d920 1
a920 1
    stringBuffer.append(TEXT_114);
d922 1
a922 1
    stringBuffer.append(TEXT_115);
d924 1
a924 1
    stringBuffer.append(TEXT_116);
d926 1
a926 1
    stringBuffer.append(TEXT_117);
d928 1
a928 1
    stringBuffer.append(TEXT_118);
d930 1
a930 1
    stringBuffer.append(TEXT_119);
d932 1
a932 1
    stringBuffer.append(TEXT_120);
d934 1
a934 1
    stringBuffer.append(TEXT_121);
d936 1
a936 1
    stringBuffer.append(TEXT_122);
d938 1
a938 1
    stringBuffer.append(TEXT_123);
d940 1
a940 1
    stringBuffer.append(TEXT_124);
d942 19
a960 1
    stringBuffer.append(TEXT_125);
d967 1
d969 2
a970 2
    stringBuffer.append(TEXT_126);
    stringBuffer.append(TEXT_127);
d972 1
a972 1
    stringBuffer.append(TEXT_128);
d974 1
a974 1
    stringBuffer.append(TEXT_129);
d976 1
a976 1
    stringBuffer.append(TEXT_130);
d978 1
a978 1
    stringBuffer.append(TEXT_131);
d980 1
a980 1
    stringBuffer.append(TEXT_132);
d982 1
a982 1
    stringBuffer.append(TEXT_133);
d997 1
a997 1
    stringBuffer.append(TEXT_134);
d999 1
a999 1
    stringBuffer.append(TEXT_135);
d1001 1
a1001 1
    stringBuffer.append(TEXT_136);
d1003 1
a1003 1
    stringBuffer.append(TEXT_137);
d1007 1
a1007 1
    stringBuffer.append(TEXT_138);
d1009 16
a1024 15
boolean hasDeclaredFilter = false;
Set genChildFeatures = new LinkedHashSet();
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet == null) {
		continue;
	}
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (genChildFeatures.contains(childMetaFeature)) {
		continue;
	}
	genChildFeatures.add(childMetaFeature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;
d1026 1
a1026 1
    stringBuffer.append(TEXT_139);
d1028 1
a1028 1
    stringBuffer.append(TEXT_140);
d1030 1
a1030 1
    stringBuffer.append(TEXT_141);
d1032 1
a1032 1
    stringBuffer.append(TEXT_142);
d1034 1
a1034 1
	} else {
d1036 1
a1036 1
    stringBuffer.append(TEXT_143);
d1038 1
a1038 1
    stringBuffer.append(TEXT_144);
d1040 1
a1040 1
    stringBuffer.append(TEXT_145);
d1042 1
a1042 1
    stringBuffer.append(TEXT_146);
d1044 2
a1045 2
	}
}	//for
d1048 1
a1048 1
if (hasDeclaredFilter) {
d1050 1
a1050 1
    stringBuffer.append(TEXT_147);
d1052 1
a1052 1
    stringBuffer.append(TEXT_148);
d1054 1
a1054 1
    stringBuffer.append(TEXT_149);
d1056 1
a1056 1
} else {
d1058 1
a1058 1
    stringBuffer.append(TEXT_150);
d1060 1
a1060 1
    stringBuffer.append(TEXT_151);
d1062 1
a1062 1
    stringBuffer.append(TEXT_152);
d1064 2
a1065 1
}
d1070 1
a1070 1
    stringBuffer.append(TEXT_153);
d1074 1
a1074 1
    stringBuffer.append(TEXT_154);
d1076 1
a1076 1
    stringBuffer.append(TEXT_155);
d1078 1
a1078 1
    stringBuffer.append(TEXT_156);
d1080 1
a1080 1
    stringBuffer.append(TEXT_157);
d1082 1
a1082 1
    stringBuffer.append(TEXT_158);
d1084 1
a1084 1
    stringBuffer.append(TEXT_159);
d1086 1
a1086 1
    stringBuffer.append(TEXT_160);
d1088 1
a1088 1
    stringBuffer.append(TEXT_161);
d1090 1
a1090 1
    stringBuffer.append(TEXT_162);
d1092 1
a1092 1
    stringBuffer.append(TEXT_163);
d1094 1
a1094 1
    stringBuffer.append(TEXT_164);
d1096 1
a1096 1
    stringBuffer.append(TEXT_165);
d1098 1
a1098 1
    stringBuffer.append(TEXT_166);
d1100 1
a1100 1
    stringBuffer.append(TEXT_167);
d1102 1
a1102 1
    stringBuffer.append(TEXT_168);
d1104 1
a1104 1
    stringBuffer.append(TEXT_169);
d1106 1
a1106 1
    stringBuffer.append(TEXT_170);
d1108 1
a1108 1
    stringBuffer.append(TEXT_171);
d1110 1
a1110 1
    stringBuffer.append(TEXT_172);
d1112 1
a1112 1
    stringBuffer.append(TEXT_173);
d1114 1
a1114 1
    stringBuffer.append(TEXT_174);
d1116 1
a1116 1
    stringBuffer.append(TEXT_175);
d1118 1
a1118 1
    stringBuffer.append(TEXT_176);
d1120 1
a1120 1
    stringBuffer.append(TEXT_177);
d1122 1
a1122 1
    stringBuffer.append(TEXT_178);
d1124 1
a1124 1
    stringBuffer.append(TEXT_179);
d1126 1
a1126 1
    stringBuffer.append(TEXT_180);
d1128 1
a1128 1
    stringBuffer.append(TEXT_181);
d1130 1
a1130 1
    stringBuffer.append(TEXT_182);
d1132 1
a1132 1
    stringBuffer.append(TEXT_183);
d1134 1
a1134 1
    stringBuffer.append(TEXT_184);
d1136 1
a1136 1
    stringBuffer.append(TEXT_185);
d1138 1
a1138 1
    stringBuffer.append(TEXT_186);
d1140 1
a1140 1
    stringBuffer.append(TEXT_187);
d1142 1
a1142 1
    stringBuffer.append(TEXT_188);
d1144 1
a1144 1
    stringBuffer.append(TEXT_189);
d1146 1
a1146 1
    stringBuffer.append(TEXT_190);
d1148 1
a1148 1
    stringBuffer.append(TEXT_191);
d1150 1
a1150 1
    stringBuffer.append(TEXT_192);
d1160 1
a1160 1
    stringBuffer.append(TEXT_193);
d1162 1
a1162 1
    stringBuffer.append(TEXT_194);
d1164 1
a1164 1
    stringBuffer.append(TEXT_195);
d1167 1
a1167 1
    stringBuffer.append(TEXT_196);
d1169 1
a1169 1
    stringBuffer.append(TEXT_197);
d1171 1
a1171 1
    stringBuffer.append(TEXT_198);
d1175 1
a1175 1
    stringBuffer.append(TEXT_199);
d1177 2
a1178 2
    stringBuffer.append(TEXT_200);
    stringBuffer.append(TEXT_201);
d1182 1
a1182 1
    stringBuffer.append(TEXT_202);
d1184 1
a1184 1
    stringBuffer.append(TEXT_203);
d1188 1
a1188 1
    stringBuffer.append(TEXT_204);
d1190 1
a1190 1
    stringBuffer.append(TEXT_205);
d1192 1
a1192 1
    stringBuffer.append(TEXT_206);
d1210 1
a1210 1
    stringBuffer.append(TEXT_207);
d1212 1
a1212 1
    stringBuffer.append(TEXT_208);
d1214 1
a1214 1
    stringBuffer.append(TEXT_209);
d1216 1
a1216 1
    stringBuffer.append(TEXT_210);
d1218 1
a1218 1
    stringBuffer.append(TEXT_211);
d1220 1
a1220 1
    stringBuffer.append(TEXT_212);
d1229 1
a1229 1
    stringBuffer.append(TEXT_213);
d1231 1
a1231 1
    stringBuffer.append(TEXT_214);
d1233 1
a1233 1
    stringBuffer.append(TEXT_215);
d1235 1
a1235 1
    stringBuffer.append(TEXT_216);
d1237 1
a1237 1
    stringBuffer.append(TEXT_217);
d1241 1
a1241 1
    stringBuffer.append(TEXT_218);
d1243 1
a1243 1
    stringBuffer.append(TEXT_219);
d1245 1
a1245 1
    stringBuffer.append(TEXT_220);
d1249 1
a1249 1
    stringBuffer.append(TEXT_221);
d1251 1
a1251 1
    stringBuffer.append(TEXT_222);
d1256 1
a1256 1
    stringBuffer.append(TEXT_223);
d1263 1
a1263 1
    stringBuffer.append(TEXT_224);
d1265 1
a1265 1
    stringBuffer.append(TEXT_225);
d1269 1
a1269 1
    stringBuffer.append(TEXT_226);
d1271 1
a1271 1
    stringBuffer.append(TEXT_227);
d1275 1
a1275 1
    stringBuffer.append(TEXT_228);
d1279 1
a1279 1
    stringBuffer.append(TEXT_229);
d1283 1
a1283 1
    stringBuffer.append(TEXT_230);
d1289 1
a1289 1
    stringBuffer.append(TEXT_231);
d1294 1
a1294 1
    stringBuffer.append(TEXT_232);
d1299 1
a1299 1
    stringBuffer.append(TEXT_233);
d1303 1
a1303 1
    stringBuffer.append(TEXT_234);
d1305 1
a1305 1
    stringBuffer.append(TEXT_235);
d1307 2
a1308 1
    stringBuffer.append(TEXT_236);
d1310 1
a1310 1
}
d1312 778
a2089 3
    stringBuffer.append(TEXT_237);
    stringBuffer.append(TEXT_238);
    stringBuffer.append(TEXT_239);
d2091 1
a2091 1
    stringBuffer.append(TEXT_240);
d2093 1
a2093 1
    stringBuffer.append(TEXT_241);
d2095 1
a2095 1
    stringBuffer.append(TEXT_242);
d2097 1
a2097 1
    stringBuffer.append(TEXT_243);
@


1.5.2.1
log
@[152859] bblajer - Lite Generator: All generated methods should be marked as @@generated
[152854] bblajer - Lite Generator: Allow shape nodes to be placed inside list-layout compartments
@
text
@d208 1
a208 1
  protected final String TEXT_189 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
@


1.4
log
@[bblajer] #143168 Make Align actions work
@
text
@d50 1
a50 1
  protected final String TEXT_31 = ".getEditingDomain(getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
d58 31
a88 31
  protected final String TEXT_39 = "Command extends ";
  protected final String TEXT_40 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_41 = " parent;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_42 = " createdNode;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_43 = "Command(";
  protected final String TEXT_44 = " parent, ";
  protected final String TEXT_45 = ".CreateRequestEx request";
  protected final String TEXT_46 = ", ";
  protected final String TEXT_47 = " constraint";
  protected final String TEXT_48 = ") {" + NL + "\t\t\tthis.parent = parent;" + NL + "\t\t\tcreatedNode = ";
  protected final String TEXT_49 = ".eINSTANCE.createNode();";
  protected final String TEXT_50 = NL + "\t\t\t";
  protected final String TEXT_51 = " createdDomainElement = ";
  protected final String TEXT_52 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_53 = ".eINSTANCE.get";
  protected final String TEXT_54 = "());";
  protected final String TEXT_55 = NL + "\t\t\t";
  protected final String TEXT_56 = " createdDomainElement = ";
  protected final String TEXT_57 = ".eINSTANCE.create";
  protected final String TEXT_58 = "();";
  protected final String TEXT_59 = "\t\t\tcreatedNode.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_60 = NL + "\t\t\t";
  protected final String TEXT_61 = ".";
  protected final String TEXT_62 = ".initializeElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_63 = ".decorateView(createdNode);";
  protected final String TEXT_64 = NL + "\t\t\t";
  protected final String TEXT_65 = " bounds = ";
  protected final String TEXT_66 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_67 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_68 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_69 = "));";
d90 173
a262 48
  protected final String TEXT_71 = " domainModelEditDomain = ";
  protected final String TEXT_72 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_73 = NL + "\t\t\t";
  protected final String TEXT_74 = " compoundCommand = new ";
  protected final String TEXT_75 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_76 = ".create(domainModelEditDomain, ";
  protected final String TEXT_77 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_78 = ".eINSTANCE.get";
  protected final String TEXT_79 = "(), createdNode.getElement()));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_80 = ".create(domainModelEditDomain, ";
  protected final String TEXT_81 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_82 = ".eINSTANCE.get";
  protected final String TEXT_83 = "(), createdNode.getElement()));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_84 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_85 = ".create(domainModelEditDomain, ";
  protected final String TEXT_86 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_87 = ".eINSTANCE.get";
  protected final String TEXT_88 = "(), createdNode.getElement());";
  protected final String TEXT_89 = NL + "\t\t\trequest.setCreatedObject(createdNode);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tparent.insertChild(createdNode);" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tparent.getPersistedChildren().remove(createdNode);" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_90 = NL;
  protected final String TEXT_91 = NL;
  protected final String TEXT_92 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_93 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_94 = " feature, ";
  protected final String TEXT_95 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_96 = NL;
  protected final String TEXT_97 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_98 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_99 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class UpdateManager extends ";
  protected final String TEXT_100 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_101 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_102 = " affectedEditParts = findAffectedParts(msg);" + NL + "\t\t\tfor(";
  protected final String TEXT_103 = " it = affectedEditParts.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\tIUpdatableEditPart next = (IUpdatableEditPart) it.next();" + NL + "\t\t\t\tIUpdatableEditPart.Refresher refresher = next.getRefresher((";
  protected final String TEXT_104 = ")msg.getFeature(), msg);" + NL + "\t\t\t\tif (refresher != null) {" + NL + "\t\t\t\t\trefresher.refresh();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_105 = "/*<IUpdatableEditPart>*/ findAffectedParts(";
  protected final String TEXT_106 = " msg) {" + NL + "\t\t\tObject notifier = msg.getNotifier();" + NL + "\t\t\tif (notifier instanceof ";
  protected final String TEXT_107 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_108 = " view = getView((EObject) notifier);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEditPart affectedEditPart = (EditPart) getViewer().getEditPartRegistry().get(view);" + NL + "\t\t\t\t\tif (affectedEditPart != null) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_109 = ".singleton(affectedEditPart);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_110 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_111 = " getView(EObject offspring) {" + NL + "\t\t\twhile (offspring != null && offspring instanceof View == false) {" + NL + "\t\t\t\toffspring = offspring.eContainer();" + NL + "\t\t\t}" + NL + "\t\t\treturn (";
  protected final String TEXT_112 = ") offspring;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagram().eAdapters().add(updateManager);" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(updateManager);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_113 = NL;
  protected final String TEXT_114 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_115 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_116 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_117 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate UpdateManager updateManager = new UpdateManager();" + NL + "}";
  protected final String TEXT_118 = NL;
d270 2
d338 1
a338 1
for(Iterator it = genDiagram.getTopLevelNodes().iterator(); it.hasNext(); ) {
d376 1
a376 1
for(Iterator it = genDiagram.getTopLevelNodes().iterator(); genDiagram.getPalette() != null && it.hasNext(); ) {
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d393 3
a396 2
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d398 1
a398 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d400 1
a400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d402 1
a402 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
d404 1
a404 1
    if (!isListLayout) {
d406 1
a406 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d408 1
a408 1
    }
a409 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_49);
d411 1
a411 2
if (next.getDomainMetaClass().isMapEntry()) {
/*Workaround for Ecore example: map entries cannot be created using factory, only using reflective EFactory.create() method*/
d413 2
d416 1
a416 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d418 9
a426 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
d428 1
a428 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()));
d430 1
a430 1
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
d433 1
a433 1
} else {
d436 3
a438 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getQualifiedInterfaceName()));
d440 1
a440 1
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
d442 1
a442 1
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
d444 2
a445 3
    
}

d447 1
a447 1
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
d449 2
a450 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
d452 2
a453 1
    stringBuffer.append(next.getUniqueIdentifier());
d455 1
a455 1
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
d457 1
a457 3
    
	if (!isListLayout) {

d459 1
a459 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d463 1
a463 9
    
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

d465 1
a465 1
    stringBuffer.append(defaultWidth);
d467 1
a467 1
    stringBuffer.append(defaultHeight);
d470 2
a471 1
	}
d474 1
a474 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d476 1
a476 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d478 24
d508 1
a508 1
    stringBuffer.append(TEXT_73);
d510 1
a510 1
    stringBuffer.append(TEXT_74);
d512 1
a512 1
    stringBuffer.append(TEXT_75);
d514 1
a514 1
    stringBuffer.append(TEXT_76);
d516 1
a516 1
    stringBuffer.append(TEXT_77);
d518 1
a518 1
    stringBuffer.append(TEXT_78);
d520 1
a520 1
    stringBuffer.append(TEXT_79);
d522 1
a522 1
    stringBuffer.append(TEXT_80);
d524 1
a524 1
    stringBuffer.append(TEXT_81);
d526 1
a526 1
    stringBuffer.append(TEXT_82);
d528 1
a528 1
    stringBuffer.append(TEXT_83);
d532 1
a532 1
    stringBuffer.append(TEXT_84);
d534 1
a534 1
    stringBuffer.append(TEXT_85);
d536 1
a536 1
    stringBuffer.append(TEXT_86);
d538 1
a538 1
    stringBuffer.append(TEXT_87);
d540 1
a540 1
    stringBuffer.append(TEXT_88);
d544 11
a554 1
    stringBuffer.append(TEXT_89);
d558 3
a560 3
    stringBuffer.append(TEXT_90);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(TEXT_92);
d562 1
a562 1
    stringBuffer.append(TEXT_93);
d564 1
a564 1
    stringBuffer.append(TEXT_94);
d566 3
a568 3
    stringBuffer.append(TEXT_95);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(TEXT_97);
d570 1
a570 1
    stringBuffer.append(TEXT_98);
d572 1
a572 1
    stringBuffer.append(TEXT_99);
d574 1
a574 1
    stringBuffer.append(TEXT_100);
d576 1
a576 1
    stringBuffer.append(TEXT_101);
d578 1
a578 1
    stringBuffer.append(TEXT_102);
d580 1
a580 1
    stringBuffer.append(TEXT_103);
d582 1
a582 1
    stringBuffer.append(TEXT_104);
d584 1
a584 1
    stringBuffer.append(TEXT_105);
d586 1
a586 1
    stringBuffer.append(TEXT_106);
d588 1
a588 1
    stringBuffer.append(TEXT_107);
d590 1
a590 1
    stringBuffer.append(TEXT_108);
d592 1
a592 1
    stringBuffer.append(TEXT_109);
d594 188
a781 1
    stringBuffer.append(TEXT_110);
d783 63
a845 1
    stringBuffer.append(TEXT_111);
d847 102
a948 3
    stringBuffer.append(TEXT_112);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(TEXT_114);
d950 1
a950 1
    stringBuffer.append(TEXT_115);
d952 1
a952 1
    stringBuffer.append(TEXT_116);
d954 1
a954 1
    stringBuffer.append(TEXT_117);
d956 1
a956 1
    stringBuffer.append(TEXT_118);
@


1.3
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d46 43
a88 43
  protected final String TEXT_27 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate Point moveDelta = request.getMoveDelta();" + NL + "\t\t\t\t\tprivate Dimension resizeDelta = request.getSizeDelta();" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn node.getLayoutConstraint() instanceof Bounds;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(Point move, Dimension resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_28 = ".getEditingDomain(getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_29 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_30 = "(this);" + NL + "\t\t}";
  protected final String TEXT_31 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_32 = NL;
  protected final String TEXT_33 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_34 = "static ";
  protected final String TEXT_35 = "class Create";
  protected final String TEXT_36 = "Command extends ";
  protected final String TEXT_37 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_38 = " parent;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_39 = " createdNode;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_40 = "Command(";
  protected final String TEXT_41 = " parent, ";
  protected final String TEXT_42 = ".CreateRequestEx request";
  protected final String TEXT_43 = ", ";
  protected final String TEXT_44 = " constraint";
  protected final String TEXT_45 = ") {" + NL + "\t\t\tthis.parent = parent;" + NL + "\t\t\tcreatedNode = ";
  protected final String TEXT_46 = ".eINSTANCE.createNode();";
  protected final String TEXT_47 = NL + "\t\t\t";
  protected final String TEXT_48 = " createdDomainElement = ";
  protected final String TEXT_49 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "());";
  protected final String TEXT_52 = NL + "\t\t\t";
  protected final String TEXT_53 = " createdDomainElement = ";
  protected final String TEXT_54 = ".eINSTANCE.create";
  protected final String TEXT_55 = "();";
  protected final String TEXT_56 = "\t\t\tcreatedNode.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_57 = NL + "\t\t\t";
  protected final String TEXT_58 = ".";
  protected final String TEXT_59 = ".initializeElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_60 = ".decorateView(createdNode);";
  protected final String TEXT_61 = NL + "\t\t\t";
  protected final String TEXT_62 = " bounds = ";
  protected final String TEXT_63 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_64 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_65 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_66 = "));";
  protected final String TEXT_67 = NL + "\t\t\t";
  protected final String TEXT_68 = " domainModelEditDomain = ";
  protected final String TEXT_69 = ".getEditingDomain(parent.getDiagram().getElement());";
d90 48
a137 45
  protected final String TEXT_71 = " compoundCommand = new ";
  protected final String TEXT_72 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_73 = ".create(domainModelEditDomain, ";
  protected final String TEXT_74 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_75 = ".eINSTANCE.get";
  protected final String TEXT_76 = "(), createdNode.getElement()));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_77 = ".create(domainModelEditDomain, ";
  protected final String TEXT_78 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_79 = ".eINSTANCE.get";
  protected final String TEXT_80 = "(), createdNode.getElement()));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_81 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_82 = ".create(domainModelEditDomain, ";
  protected final String TEXT_83 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_84 = ".eINSTANCE.get";
  protected final String TEXT_85 = "(), createdNode.getElement());";
  protected final String TEXT_86 = NL + "\t\t\trequest.setCreatedObject(createdNode);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tparent.insertChild(createdNode);" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tparent.getPersistedChildren().remove(createdNode);" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_87 = NL;
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_90 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_91 = " feature, ";
  protected final String TEXT_92 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
  protected final String TEXT_93 = NL;
  protected final String TEXT_94 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_95 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_96 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class UpdateManager extends ";
  protected final String TEXT_97 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_98 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_99 = " affectedEditParts = findAffectedParts(msg);" + NL + "\t\t\tfor(";
  protected final String TEXT_100 = " it = affectedEditParts.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\tIUpdatableEditPart next = (IUpdatableEditPart) it.next();" + NL + "\t\t\t\tIUpdatableEditPart.Refresher refresher = next.getRefresher((";
  protected final String TEXT_101 = ")msg.getFeature(), msg);" + NL + "\t\t\t\tif (refresher != null) {" + NL + "\t\t\t\t\trefresher.refresh();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_102 = "/*<IUpdatableEditPart>*/ findAffectedParts(";
  protected final String TEXT_103 = " msg) {" + NL + "\t\t\tObject notifier = msg.getNotifier();" + NL + "\t\t\tif (notifier instanceof ";
  protected final String TEXT_104 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_105 = " view = getView((EObject) notifier);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEditPart affectedEditPart = (EditPart) getViewer().getEditPartRegistry().get(view);" + NL + "\t\t\t\t\tif (affectedEditPart != null) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_106 = ".singleton(affectedEditPart);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_107 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_108 = " getView(EObject offspring) {" + NL + "\t\t\twhile (offspring != null && offspring instanceof View == false) {" + NL + "\t\t\t\toffspring = offspring.eContainer();" + NL + "\t\t\t}" + NL + "\t\t\treturn (";
  protected final String TEXT_109 = ") offspring;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagram().eAdapters().add(updateManager);" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(updateManager);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_110 = NL;
  protected final String TEXT_111 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_112 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_113 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_114 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate UpdateManager updateManager = new UpdateManager();" + NL + "}";
  protected final String TEXT_115 = NL;
a154 1
importManager.addImport("org.eclipse.gef.commands.CompoundCommand");
d234 6
d241 1
a241 1
    stringBuffer.append(TEXT_28);
d243 1
a243 1
    stringBuffer.append(TEXT_29);
d245 1
a245 1
    stringBuffer.append(TEXT_30);
d247 1
a247 1
    stringBuffer.append(TEXT_31);
d255 2
a256 2
    stringBuffer.append(TEXT_32);
    stringBuffer.append(TEXT_33);
d258 1
a258 1
    stringBuffer.append(TEXT_34);
d260 1
a260 1
    stringBuffer.append(TEXT_35);
d263 1
a263 1
    stringBuffer.append(TEXT_36);
d265 1
a265 1
    stringBuffer.append(TEXT_37);
d267 1
a267 1
    stringBuffer.append(TEXT_38);
d269 1
a269 1
    stringBuffer.append(TEXT_39);
d272 1
a272 1
    stringBuffer.append(TEXT_40);
d274 1
a274 1
    stringBuffer.append(TEXT_41);
d276 1
a276 1
    stringBuffer.append(TEXT_42);
d278 1
a278 1
    stringBuffer.append(TEXT_43);
d280 1
a280 1
    stringBuffer.append(TEXT_44);
d282 1
a282 1
    stringBuffer.append(TEXT_45);
d284 1
a284 1
    stringBuffer.append(TEXT_46);
d289 1
a289 1
    stringBuffer.append(TEXT_47);
d291 1
a291 1
    stringBuffer.append(TEXT_48);
d293 1
a293 1
    stringBuffer.append(TEXT_49);
d295 1
a295 1
    stringBuffer.append(TEXT_50);
d297 1
a297 1
    stringBuffer.append(TEXT_51);
d301 1
a301 1
    stringBuffer.append(TEXT_52);
d303 1
a303 1
    stringBuffer.append(TEXT_53);
d305 1
a305 1
    stringBuffer.append(TEXT_54);
d307 1
a307 1
    stringBuffer.append(TEXT_55);
d311 1
a311 1
    stringBuffer.append(TEXT_56);
d313 1
a313 1
    stringBuffer.append(TEXT_57);
d315 1
a315 1
    stringBuffer.append(TEXT_58);
d317 1
a317 1
    stringBuffer.append(TEXT_59);
d319 1
a319 1
    stringBuffer.append(TEXT_60);
d323 1
a323 1
    stringBuffer.append(TEXT_61);
d325 1
a325 1
    stringBuffer.append(TEXT_62);
d327 1
a327 1
    stringBuffer.append(TEXT_63);
d337 1
a337 1
    stringBuffer.append(TEXT_64);
d339 1
a339 1
    stringBuffer.append(TEXT_65);
d341 1
a341 1
    stringBuffer.append(TEXT_66);
d345 1
a345 1
    stringBuffer.append(TEXT_67);
d347 1
a347 1
    stringBuffer.append(TEXT_68);
d349 1
a349 1
    stringBuffer.append(TEXT_69);
d356 1
a356 1
    stringBuffer.append(TEXT_70);
d358 1
a358 1
    stringBuffer.append(TEXT_71);
d360 1
a360 1
    stringBuffer.append(TEXT_72);
d362 1
a362 1
    stringBuffer.append(TEXT_73);
d364 1
a364 1
    stringBuffer.append(TEXT_74);
d366 1
a366 1
    stringBuffer.append(TEXT_75);
d368 1
a368 1
    stringBuffer.append(TEXT_76);
d370 1
a370 1
    stringBuffer.append(TEXT_77);
d372 1
a372 1
    stringBuffer.append(TEXT_78);
d374 1
a374 1
    stringBuffer.append(TEXT_79);
d376 1
a376 1
    stringBuffer.append(TEXT_80);
d380 1
a380 1
    stringBuffer.append(TEXT_81);
d382 1
a382 1
    stringBuffer.append(TEXT_82);
d384 1
a384 1
    stringBuffer.append(TEXT_83);
d386 1
a386 1
    stringBuffer.append(TEXT_84);
d388 1
a388 1
    stringBuffer.append(TEXT_85);
d392 1
a392 1
    stringBuffer.append(TEXT_86);
a395 4
    stringBuffer.append(TEXT_87);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a396 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d399 1
d401 1
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a404 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.EContentAdapter"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d409 1
a409 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d431 1
d433 1
d435 4
d440 1
a440 1
    stringBuffer.append(TEXT_112);
d442 1
a442 1
    stringBuffer.append(TEXT_113);
d444 1
a444 1
    stringBuffer.append(TEXT_114);
d446 1
a446 1
    stringBuffer.append(TEXT_115);
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d35 45
a79 45
  protected final String TEXT_16 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\tCompoundCommand result = new CompoundCommand();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_17 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_18 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.add(new Create";
  protected final String TEXT_19 = "Command(getDiagram(), requestEx, (";
  protected final String TEXT_20 = ")getConstraintFor(request)));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_21 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn result.unwrap();" + NL + "\t\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ChangeBoundsRequest request, EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\treturn new Command(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate Point moveDelta = request.getMoveDelta();" + NL + "\t\t\t\t\tprivate Dimension resizeDelta = request.getSizeDelta();" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn node.getLayoutConstraint() instanceof Bounds;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(Point move, Dimension resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_23 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_24 = "(this);" + NL + "\t\t}";
  protected final String TEXT_25 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_26 = NL;
  protected final String TEXT_27 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_28 = "static ";
  protected final String TEXT_29 = "class Create";
  protected final String TEXT_30 = "Command extends ";
  protected final String TEXT_31 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_32 = " parent;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_33 = " createdNode;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_34 = "Command(";
  protected final String TEXT_35 = " parent, ";
  protected final String TEXT_36 = ".CreateRequestEx request";
  protected final String TEXT_37 = ", ";
  protected final String TEXT_38 = " constraint";
  protected final String TEXT_39 = ") {" + NL + "\t\t\tthis.parent = parent;" + NL + "\t\t\tcreatedNode = ";
  protected final String TEXT_40 = ".eINSTANCE.createNode();";
  protected final String TEXT_41 = NL + "\t\t\t";
  protected final String TEXT_42 = " createdDomainElement = ";
  protected final String TEXT_43 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_44 = ".eINSTANCE.get";
  protected final String TEXT_45 = "());";
  protected final String TEXT_46 = NL + "\t\t\t";
  protected final String TEXT_47 = " createdDomainElement = ";
  protected final String TEXT_48 = ".eINSTANCE.create";
  protected final String TEXT_49 = "();";
  protected final String TEXT_50 = "\t\t\tcreatedNode.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_51 = NL + "\t\t\t";
  protected final String TEXT_52 = ".";
  protected final String TEXT_53 = ".initializeElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_54 = ".decorateView(createdNode);";
  protected final String TEXT_55 = NL + "\t\t\t";
  protected final String TEXT_56 = " bounds = ";
  protected final String TEXT_57 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_58 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_59 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_60 = "));";
d81 25
a105 25
  protected final String TEXT_62 = " domainModelEditDomain = ";
  protected final String TEXT_63 = ".getEditingDomainFor(parent.getDiagram().getElement());";
  protected final String TEXT_64 = NL + "\t\t\t";
  protected final String TEXT_65 = " compoundCommand = new ";
  protected final String TEXT_66 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_67 = ".create(domainModelEditDomain, ";
  protected final String TEXT_68 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_69 = ".eINSTANCE.get";
  protected final String TEXT_70 = "(), createdNode.getElement()));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_71 = ".create(domainModelEditDomain, ";
  protected final String TEXT_72 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_73 = ".eINSTANCE.get";
  protected final String TEXT_74 = "(), createdNode.getElement()));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_75 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_76 = ".create(domainModelEditDomain, ";
  protected final String TEXT_77 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_78 = ".eINSTANCE.get";
  protected final String TEXT_79 = "(), createdNode.getElement());";
  protected final String TEXT_80 = NL + "\t\t\trequest.setCreatedObject(createdNode);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tparent.insertChild(createdNode);" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tparent.getPersistedChildren().remove(createdNode);" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_81 = NL;
  protected final String TEXT_82 = NL;
  protected final String TEXT_83 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_84 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_85 = " feature, ";
  protected final String TEXT_86 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
d107 28
a134 22
  protected final String TEXT_88 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_89 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_90 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class UpdateManager extends ";
  protected final String TEXT_91 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_92 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_93 = " affectedEditParts = findAffectedParts(msg);" + NL + "\t\t\tfor(";
  protected final String TEXT_94 = " it = affectedEditParts.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\tIUpdatableEditPart next = (IUpdatableEditPart) it.next();" + NL + "\t\t\t\tIUpdatableEditPart.Refresher refresher = next.getRefresher((";
  protected final String TEXT_95 = ")msg.getFeature(), msg);" + NL + "\t\t\t\tif (refresher != null) {" + NL + "\t\t\t\t\trefresher.refresh();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_96 = "/*<IUpdatableEditPart>*/ findAffectedParts(";
  protected final String TEXT_97 = " msg) {" + NL + "\t\t\tObject notifier = msg.getNotifier();" + NL + "\t\t\tif (notifier instanceof ";
  protected final String TEXT_98 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_99 = " view = getView((EObject) notifier);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEditPart affectedEditPart = (EditPart) getViewer().getEditPartRegistry().get(view);" + NL + "\t\t\t\t\tif (affectedEditPart != null) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_100 = ".singleton(affectedEditPart);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_101 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_102 = " getView(EObject offspring) {" + NL + "\t\t\twhile (offspring != null && offspring instanceof View == false) {" + NL + "\t\t\t\toffspring = offspring.eContainer();" + NL + "\t\t\t}" + NL + "\t\t\treturn (";
  protected final String TEXT_103 = ") offspring;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagram().eAdapters().add(updateManager);" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(updateManager);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_104 = NL;
  protected final String TEXT_105 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_106 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_107 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_108 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate UpdateManager updateManager = new UpdateManager();" + NL + "}";
  protected final String TEXT_109 = NL;
d204 4
d212 1
a212 1
    stringBuffer.append(TEXT_17);
d214 1
a214 1
    stringBuffer.append(TEXT_18);
d217 1
a217 1
    stringBuffer.append(TEXT_19);
d219 1
a219 1
    stringBuffer.append(TEXT_20);
d223 3
a225 1
    stringBuffer.append(TEXT_21);
d227 7
a233 1
    stringBuffer.append(TEXT_22);
d235 1
a235 1
    stringBuffer.append(TEXT_23);
d237 1
a237 1
    stringBuffer.append(TEXT_24);
d239 1
a239 1
    stringBuffer.append(TEXT_25);
d247 2
a248 2
    stringBuffer.append(TEXT_26);
    stringBuffer.append(TEXT_27);
d250 1
a250 1
    stringBuffer.append(TEXT_28);
d252 1
a252 1
    stringBuffer.append(TEXT_29);
d255 3
a257 3
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_31);
d259 1
a259 1
    stringBuffer.append(TEXT_32);
d261 1
a261 1
    stringBuffer.append(TEXT_33);
d264 1
a264 1
    stringBuffer.append(TEXT_34);
d266 1
a266 1
    stringBuffer.append(TEXT_35);
d268 1
a268 1
    stringBuffer.append(TEXT_36);
d270 1
a270 1
    stringBuffer.append(TEXT_37);
d272 1
a272 1
    stringBuffer.append(TEXT_38);
d274 1
a274 1
    stringBuffer.append(TEXT_39);
d276 1
a276 1
    stringBuffer.append(TEXT_40);
d281 1
a281 1
    stringBuffer.append(TEXT_41);
d283 1
a283 1
    stringBuffer.append(TEXT_42);
d285 1
a285 1
    stringBuffer.append(TEXT_43);
d287 1
a287 1
    stringBuffer.append(TEXT_44);
d289 1
a289 1
    stringBuffer.append(TEXT_45);
d293 1
a293 1
    stringBuffer.append(TEXT_46);
d295 1
a295 1
    stringBuffer.append(TEXT_47);
d297 1
a297 1
    stringBuffer.append(TEXT_48);
d299 1
a299 1
    stringBuffer.append(TEXT_49);
d303 1
a303 1
    stringBuffer.append(TEXT_50);
d305 1
a305 1
    stringBuffer.append(TEXT_51);
d307 1
a307 1
    stringBuffer.append(TEXT_52);
d309 1
a309 1
    stringBuffer.append(TEXT_53);
d311 1
a311 1
    stringBuffer.append(TEXT_54);
d315 1
a315 1
    stringBuffer.append(TEXT_55);
d317 1
a317 1
    stringBuffer.append(TEXT_56);
d319 1
a319 1
    stringBuffer.append(TEXT_57);
d329 1
a329 1
    stringBuffer.append(TEXT_58);
d331 1
a331 1
    stringBuffer.append(TEXT_59);
d333 1
a333 1
    stringBuffer.append(TEXT_60);
d337 5
a341 5
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_63);
d348 1
a348 1
    stringBuffer.append(TEXT_64);
d350 1
a350 1
    stringBuffer.append(TEXT_65);
d352 1
a352 1
    stringBuffer.append(TEXT_66);
d354 1
a354 1
    stringBuffer.append(TEXT_67);
d356 1
a356 1
    stringBuffer.append(TEXT_68);
d358 1
a358 1
    stringBuffer.append(TEXT_69);
d360 1
a360 1
    stringBuffer.append(TEXT_70);
d362 1
a362 1
    stringBuffer.append(TEXT_71);
d364 1
a364 1
    stringBuffer.append(TEXT_72);
d366 1
a366 1
    stringBuffer.append(TEXT_73);
d368 1
a368 1
    stringBuffer.append(TEXT_74);
d372 1
a372 1
    stringBuffer.append(TEXT_75);
d374 1
a374 1
    stringBuffer.append(TEXT_76);
d376 1
a376 1
    stringBuffer.append(TEXT_77);
d378 1
a378 1
    stringBuffer.append(TEXT_78);
d380 1
a380 1
    stringBuffer.append(TEXT_79);
d384 1
a384 1
    stringBuffer.append(TEXT_80);
a387 9
    stringBuffer.append(TEXT_81);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_86);
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.EContentAdapter"));
a396 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a397 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d403 2
a405 2
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d409 1
a409 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d417 1
d419 1
d421 10
d432 1
a432 1
    stringBuffer.append(TEXT_106);
d434 1
a434 1
    stringBuffer.append(TEXT_107);
d436 1
a436 1
    stringBuffer.append(TEXT_108);
d438 1
a438 1
    stringBuffer.append(TEXT_109);
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d22 38
a59 38
  protected final String TEXT_3 = " extends AbstractGraphicalEditPart implements IUpdatableEditPart {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_4 = "(";
  protected final String TEXT_5 = " model) {" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = " getDiagram() {" + NL + "\t\treturn (";
  protected final String TEXT_7 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {" + NL + "\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {" + NL + "\t\t\tprotected Command getCreateCommand(CreateRequest request) {";
  protected final String TEXT_8 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_9 = ".CreateRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_10 = ".CreateRequestEx requestEx = (";
  protected final String TEXT_11 = ".CreateRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\tCompoundCommand result = new CompoundCommand();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_12 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_13 = ":" + NL + "\t\t\t\t\t\t\tresult.add(new Create";
  protected final String TEXT_14 = "Command(getDiagram(), requestEx, (";
  protected final String TEXT_15 = ")getConstraintFor(request)));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_16 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn result.unwrap();" + NL + "\t\t\t\t}";
  protected final String TEXT_17 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(final ChangeBoundsRequest request, EditPart child, Object constraint) {" + NL + "\t\t\t\tfinal Node node = (Node) child.getModel();" + NL + "\t\t\t\treturn new Command(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate Point moveDelta = request.getMoveDelta();" + NL + "\t\t\t\t\tprivate Dimension resizeDelta = request.getSizeDelta();" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn node.getLayoutConstraint() instanceof Bounds;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(Point move, Dimension resize) {" + NL + "\t\t\t\t\t\tBounds bounds = (Bounds) node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(EditPart child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFigure() {" + NL + "\t\tIFigure f = new FreeformLayer();" + NL + "\t\tf.setBorder(new MarginBorder(5));" + NL + "\t\tf.setLayoutManager(new FreeformLayout());" + NL + "\t\treturn f;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_18 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_19 = "(this);" + NL + "\t\t}";
  protected final String TEXT_20 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getModelChildren() {" + NL + "\t\treturn getDiagram().getVisibleChildren();" + NL + "\t}" + NL;
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_23 = "static ";
  protected final String TEXT_24 = "class Create";
  protected final String TEXT_25 = "Command extends ";
  protected final String TEXT_26 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_27 = " parent;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_28 = " createdNode;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_29 = "Command(";
  protected final String TEXT_30 = " parent, ";
  protected final String TEXT_31 = ".CreateRequestEx request";
  protected final String TEXT_32 = ", ";
  protected final String TEXT_33 = " constraint";
  protected final String TEXT_34 = ") {" + NL + "\t\t\tthis.parent = parent;" + NL + "\t\t\tcreatedNode = ";
  protected final String TEXT_35 = ".eINSTANCE.createNode();";
  protected final String TEXT_36 = NL + "\t\t\t";
  protected final String TEXT_37 = " createdDomainElement = ";
  protected final String TEXT_38 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_39 = ".eINSTANCE.get";
  protected final String TEXT_40 = "());";
d62 3
a64 3
  protected final String TEXT_43 = ".eINSTANCE.create";
  protected final String TEXT_44 = "();";
  protected final String TEXT_45 = "\t\t\tcreatedNode.setElement(createdDomainElement);" + NL + "\t\t\t";
d66 24
a89 24
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = ".initializeElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_49 = ".decorateView(createdNode);";
  protected final String TEXT_50 = NL + "\t\t\t";
  protected final String TEXT_51 = " bounds = ";
  protected final String TEXT_52 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_53 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_54 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_55 = "));";
  protected final String TEXT_56 = NL + "\t\t\t";
  protected final String TEXT_57 = " domainModelEditDomain = ";
  protected final String TEXT_58 = ".getEditingDomainFor(parent.getDiagram().getElement());";
  protected final String TEXT_59 = NL + "\t\t\t";
  protected final String TEXT_60 = " compoundCommand = new ";
  protected final String TEXT_61 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_62 = ".create(domainModelEditDomain, ";
  protected final String TEXT_63 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_64 = ".eINSTANCE.get";
  protected final String TEXT_65 = "(), createdNode.getElement()));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_66 = ".create(domainModelEditDomain, ";
  protected final String TEXT_67 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_68 = ".eINSTANCE.get";
  protected final String TEXT_69 = "(), createdNode.getElement()));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_70 = NL + "\t\t\tthis.domainModelAddCommand = ";
d93 8
a100 8
  protected final String TEXT_74 = "(), createdNode.getElement());";
  protected final String TEXT_75 = NL + "\t\t\trequest.setCreatedObject(createdNode);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tparent.insertChild(createdNode);" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tparent.getPersistedChildren().remove(createdNode);" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_79 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_80 = " feature, ";
  protected final String TEXT_81 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new HashMap();";
d102 21
a122 21
  protected final String TEXT_83 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_84 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_85 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class UpdateManager extends ";
  protected final String TEXT_86 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_87 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_88 = " affectedEditParts = findAffectedParts(msg);" + NL + "\t\t\tfor(";
  protected final String TEXT_89 = " it = affectedEditParts.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\tIUpdatableEditPart next = (IUpdatableEditPart) it.next();" + NL + "\t\t\t\tIUpdatableEditPart.Refresher refresher = next.getRefresher((";
  protected final String TEXT_90 = ")msg.getFeature(), msg);" + NL + "\t\t\t\tif (refresher != null) {" + NL + "\t\t\t\t\trefresher.refresh();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_91 = "/*<IUpdatableEditPart>*/ findAffectedParts(";
  protected final String TEXT_92 = " msg) {" + NL + "\t\t\tObject notifier = msg.getNotifier();" + NL + "\t\t\tif (notifier instanceof ";
  protected final String TEXT_93 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_94 = " view = getView((EObject) notifier);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEditPart affectedEditPart = (EditPart) getViewer().getEditPartRegistry().get(view);" + NL + "\t\t\t\t\tif (affectedEditPart != null) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_95 = ".singleton(affectedEditPart);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_96 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_97 = " getView(EObject offspring) {" + NL + "\t\t\twhile (offspring != null && offspring instanceof View == false) {" + NL + "\t\t\t\toffspring = offspring.eContainer();" + NL + "\t\t\t}" + NL + "\t\t\treturn (";
  protected final String TEXT_98 = ") offspring;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagram().eAdapters().add(updateManager);" + NL + "\t\tgetDiagram().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagram().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tgetDiagram().eAdapters().remove(updateManager);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_99 = NL;
  protected final String TEXT_100 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_101 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_102 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_103 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate UpdateManager updateManager = new UpdateManager();" + NL + "}";
d124 5
d171 10
d182 1
a182 1
    stringBuffer.append(TEXT_4);
d184 1
a184 1
    stringBuffer.append(TEXT_5);
d186 1
a186 1
    stringBuffer.append(TEXT_6);
d188 1
a188 1
    stringBuffer.append(TEXT_7);
d191 1
a191 1
    stringBuffer.append(TEXT_8);
d193 1
a193 1
    stringBuffer.append(TEXT_9);
d195 1
a195 1
    stringBuffer.append(TEXT_10);
d197 1
a197 1
    stringBuffer.append(TEXT_11);
d202 3
a204 3
    stringBuffer.append(TEXT_12);
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_13);
d207 1
a207 1
    stringBuffer.append(TEXT_14);
d209 1
a209 1
    stringBuffer.append(TEXT_15);
d213 1
a213 1
    stringBuffer.append(TEXT_16);
d215 1
a215 1
    stringBuffer.append(TEXT_17);
d217 1
a217 1
    stringBuffer.append(TEXT_18);
d219 1
a219 1
    stringBuffer.append(TEXT_19);
d221 1
a221 1
    stringBuffer.append(TEXT_20);
d229 2
a230 2
    stringBuffer.append(TEXT_21);
    stringBuffer.append(TEXT_22);
d232 1
a232 1
    stringBuffer.append(TEXT_23);
d234 1
a234 1
    stringBuffer.append(TEXT_24);
d237 1
a237 1
    stringBuffer.append(TEXT_25);
d239 1
a239 1
    stringBuffer.append(TEXT_26);
d241 1
a241 1
    stringBuffer.append(TEXT_27);
d243 1
a243 1
    stringBuffer.append(TEXT_28);
d246 1
a246 1
    stringBuffer.append(TEXT_29);
d248 1
a248 1
    stringBuffer.append(TEXT_30);
d250 1
a250 1
    stringBuffer.append(TEXT_31);
d252 1
a252 1
    stringBuffer.append(TEXT_32);
d254 1
a254 1
    stringBuffer.append(TEXT_33);
d256 1
a256 1
    stringBuffer.append(TEXT_34);
d258 1
a258 1
    stringBuffer.append(TEXT_35);
d263 1
a263 1
    stringBuffer.append(TEXT_36);
d265 1
a265 1
    stringBuffer.append(TEXT_37);
d267 1
a267 1
    stringBuffer.append(TEXT_38);
d269 1
a269 1
    stringBuffer.append(TEXT_39);
d271 1
a271 1
    stringBuffer.append(TEXT_40);
d275 1
a275 1
    stringBuffer.append(TEXT_41);
d277 1
a277 1
    stringBuffer.append(TEXT_42);
d279 1
a279 1
    stringBuffer.append(TEXT_43);
d281 1
a281 1
    stringBuffer.append(TEXT_44);
d285 1
a285 1
    stringBuffer.append(TEXT_45);
d287 1
a287 1
    stringBuffer.append(TEXT_46);
d289 1
a289 1
    stringBuffer.append(TEXT_47);
d291 1
a291 1
    stringBuffer.append(TEXT_48);
d293 1
a293 1
    stringBuffer.append(TEXT_49);
d297 1
a297 1
    stringBuffer.append(TEXT_50);
d299 1
a299 1
    stringBuffer.append(TEXT_51);
d301 1
a301 1
    stringBuffer.append(TEXT_52);
d311 1
a311 1
    stringBuffer.append(TEXT_53);
d313 1
a313 1
    stringBuffer.append(TEXT_54);
d315 1
a315 1
    stringBuffer.append(TEXT_55);
d319 1
a319 1
    stringBuffer.append(TEXT_56);
d321 1
a321 1
    stringBuffer.append(TEXT_57);
d323 1
a323 1
    stringBuffer.append(TEXT_58);
d330 1
a330 1
    stringBuffer.append(TEXT_59);
d332 1
a332 1
    stringBuffer.append(TEXT_60);
d334 1
a334 1
    stringBuffer.append(TEXT_61);
d336 1
a336 1
    stringBuffer.append(TEXT_62);
d338 1
a338 1
    stringBuffer.append(TEXT_63);
d340 1
a340 1
    stringBuffer.append(TEXT_64);
d342 1
a342 1
    stringBuffer.append(TEXT_65);
d344 1
a344 1
    stringBuffer.append(TEXT_66);
d346 1
a346 1
    stringBuffer.append(TEXT_67);
d348 1
a348 1
    stringBuffer.append(TEXT_68);
d350 1
a350 1
    stringBuffer.append(TEXT_69);
d354 1
a354 1
    stringBuffer.append(TEXT_70);
d356 1
a356 1
    stringBuffer.append(TEXT_71);
d358 1
a358 1
    stringBuffer.append(TEXT_72);
d360 1
a360 1
    stringBuffer.append(TEXT_73);
d362 1
a362 1
    stringBuffer.append(TEXT_74);
d366 1
a366 1
    stringBuffer.append(TEXT_75);
a369 8
    stringBuffer.append(TEXT_76);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.EContentAdapter"));
a378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
a379 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d395 1
a395 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d399 2
a401 1
    stringBuffer.append(TEXT_98);
d403 1
d405 8
d414 1
a414 1
    stringBuffer.append(TEXT_101);
d416 1
a416 1
    stringBuffer.append(TEXT_102);
d418 1
a418 1
    stringBuffer.append(TEXT_103);
d420 1
a420 1
    stringBuffer.append(TEXT_104);
@

