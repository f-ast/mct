head	1.48;
access;
symbols
	v20080910-1520:1.48
	v20070403-1500:1.47
	v20070330-1300:1.47
	v20060330-1300:1.47
	v20070322-1100:1.47
	v20060316-0600:1.47
	v20070307-0700:1.45
	v20070228-2000:1.41
	v20070221-1500:1.40
	v20070208-1800:1.40
	v20070103-0300:1.34
	M4_20:1.34
	v20061222-1800:1.34
	v20061214-0000:1.34
	v20061120-1300:1.33
	M3_20:1.33
	v20061117-0800:1.33
	v20061013-1330:1.25
	v20061005-1700:1.13.2.2
	M1_20:1.20
	v20060904-1500:1.20
	v20060824-1600:1.13.2.2
	v20060713-1700:1.13.2.1
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060620-0400:1.11
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060530-1930:1.8
	v20060526-1200:1.6
	v20060519-1300:1.4
	v20060519-0800:1.4
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.48
date	2007.04.04.11.05.01;	author bblajer;	state dead;
branches;
next	1.47;
commitid	18c54613864d4567;

1.47
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.46;
commitid	617845f977b04567;

1.46
date	2007.03.09.17.19.35;	author bblajer;	state Exp;
branches;
next	1.45;
commitid	22ed45f197244567;

1.45
date	2007.03.05.12.58.41;	author bblajer;	state Exp;
branches;
next	1.44;
commitid	437c45ec14004567;

1.44
date	2007.03.03.23.45.11;	author bblajer;	state Exp;
branches;
next	1.43;
commitid	2e3145ea08814567;

1.43
date	2007.03.02.21.35.39;	author bblajer;	state Exp;
branches;
next	1.42;
commitid	403a45e898a74567;

1.42
date	2007.03.02.21.21.16;	author bblajer;	state Exp;
branches;
next	1.41;
commitid	2b1945e895484567;

1.41
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.40;
commitid	496945df14164567;

1.40
date	2007.02.08.16.44.13;	author bblajer;	state Exp;
branches;
next	1.39;
commitid	af945cb535c4567;

1.39
date	2007.02.02.18.09.21;	author bblajer;	state Exp;
branches;
next	1.38;
commitid	711b45c37e4f4567;

1.38
date	2007.02.02.17.14.33;	author bblajer;	state Exp;
branches;
next	1.37;
commitid	78d445c371764567;

1.37
date	2007.01.19.17.15.18;	author bblajer;	state Exp;
branches;
next	1.36;
commitid	781645b0fca44567;

1.36
date	2007.01.12.21.50.38;	author bblajer;	state Exp;
branches;
next	1.35;
commitid	252345a802aa4567;

1.35
date	2007.01.11.19.16.11;	author bblajer;	state Exp;
branches;
next	1.34;
commitid	6c2845a68cf94567;

1.34
date	2006.12.12.12.54.44;	author bblajer;	state Exp;
branches;
next	1.33;
commitid	355b457ea6574567;

1.33
date	2006.11.09.18.15.43;	author bblajer;	state Exp;
branches;
next	1.32;

1.32
date	2006.11.01.14.38.03;	author bblajer;	state Exp;
branches;
next	1.31;

1.31
date	2006.10.19.11.00.31;	author bblajer;	state Exp;
branches;
next	1.30;

1.30
date	2006.10.18.16.29.03;	author bblajer;	state Exp;
branches;
next	1.29;

1.29
date	2006.10.18.14.28.29;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.10.18.14.22.08;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.10.18.09.56.59;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.10.17.13.08.28;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.10.12.10.23.44;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.09.11.15.45.01;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.09.06.20.09.23;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.09.14.34.54;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.08.04.17.48.33;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.07.04.15.44.10;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.07.03.17.42.27;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.25.15.36.40;	author atikhomirov;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2006.06.21.15.22.44;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.19.19.14.13;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.16.07.52.07;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.31.15.54.57;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.29.12.27.00;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.29.12.23.05;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.25.14.26.26;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.18.19.18.26;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.17.12.40.01;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;

1.13.2.1
date	2006.07.04.15.54.41;	author ashatalin;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2006.08.24.12.09.01;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.48
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@package org.eclipse.gmf.codegen.templates.lite.parts;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.codegen.gmfgen.util.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.ecore.*;

public class NodeEditPartGenerator
{
  protected static String nl;
  public static synchronized NodeEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NodeEditPartGenerator result = new NodeEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL;
  protected final String TEXT_3 = "((";
  protected final String TEXT_4 = ")";
  protected final String TEXT_5 = "((";
  protected final String TEXT_6 = ")";
  protected final String TEXT_7 = ")";
  protected final String TEXT_8 = ".eGet(";
  protected final String TEXT_9 = ".eINSTANCE.get";
  protected final String TEXT_10 = "())";
  protected final String TEXT_11 = ")";
  protected final String TEXT_12 = "((";
  protected final String TEXT_13 = ")";
  protected final String TEXT_14 = ")";
  protected final String TEXT_15 = ".";
  protected final String TEXT_16 = "()";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = NL + "/*" + NL + " * ";
  protected final String TEXT_20 = NL + " */";
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_23 = " extends ";
  protected final String TEXT_24 = " implements ";
  protected final String TEXT_25 = ", ";
  protected final String TEXT_26 = ", ";
  protected final String TEXT_27 = ", ";
  protected final String TEXT_28 = " {";
  protected final String TEXT_29 = NL;
  protected final String TEXT_30 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_31 = ";";
  protected final String TEXT_32 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_33 = " contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_34 = " primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_35 = " myDecorationManager;" + NL;
  protected final String TEXT_36 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_37 = " childNodesPane;";
  protected final String TEXT_38 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_39 = "(";
  protected final String TEXT_40 = " model) {" + NL + "\t\tassert model instanceof ";
  protected final String TEXT_41 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL;
  protected final String TEXT_42 = NL;
  protected final String TEXT_43 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_44 = " view = (";
  protected final String TEXT_45 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_46 = " view = (";
  protected final String TEXT_47 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_48 = NL;
  protected final String TEXT_49 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_50 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_51 = "());";
  protected final String TEXT_52 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_53 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_54 = "());";
  protected final String TEXT_55 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_56 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_57 = "());";
  protected final String TEXT_58 = NL;
  protected final String TEXT_59 = NL + "installEditPolicy(";
  protected final String TEXT_60 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_61 = "());";
  protected final String TEXT_62 = NL;
  protected final String TEXT_63 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_64 = "\", new ";
  protected final String TEXT_65 = "()); //$NON-NLS-1$";
  protected final String TEXT_66 = NL;
  protected final String TEXT_67 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_68 = ".OPEN_ROLE";
  protected final String TEXT_69 = " + \"";
  protected final String TEXT_70 = "\" ";
  protected final String TEXT_71 = ", new ";
  protected final String TEXT_72 = "());";
  protected final String TEXT_73 = NL + "\t\tinstallEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());";
  protected final String TEXT_74 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_75 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_76 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_77 = " getPrimaryDragEditPolicy() {";
  protected final String TEXT_78 = NL + "\t\treturn new ";
  protected final String TEXT_79 = "();";
  protected final String TEXT_80 = NL + "\t\t";
  protected final String TEXT_81 = " result = new ";
  protected final String TEXT_82 = "();";
  protected final String TEXT_83 = NL + "\t\t";
  protected final String TEXT_84 = " result = new ";
  protected final String TEXT_85 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_86 = " createSelectionHandles() {" + NL + "\t\t\t\t";
  protected final String TEXT_87 = " result = super.createSelectionHandles();" + NL + "\t\t\t\tfor(";
  protected final String TEXT_88 = " it = getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_89 = " next = (";
  protected final String TEXT_90 = ") it.next();" + NL + "\t\t\t\t\t";
  protected final String TEXT_91 = " nextView = (";
  protected final String TEXT_92 = ") next.getModel();" + NL + "\t\t\t\t\tswitch (";
  protected final String TEXT_93 = ".getVisualID(nextView)) {";
  protected final String TEXT_94 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_95 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\tresult.addAll(((";
  protected final String TEXT_96 = ") next).createSelectionHandles());" + NL + "\t\t\t\t\t\tbreak;";
  protected final String TEXT_97 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_98 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_99 = ".NONE);";
  protected final String TEXT_100 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_101 = ".";
  protected final String TEXT_102 = " | ";
  protected final String TEXT_103 = ");";
  protected final String TEXT_104 = NL + "\t\treturn result;";
  protected final String TEXT_105 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_106 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_107 = " invisibleRectangle = new ";
  protected final String TEXT_108 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_109 = "());" + NL + "\t\t";
  protected final String TEXT_110 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_111 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_112 = NL + NL + "\t\t";
  protected final String TEXT_113 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tmyDecorationManager = createDecorationManager(decorationShape);" + NL + "\t\t\tinvisibleRectangle.add(decorationShape, 0);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_114 = " createDecorationManager(";
  protected final String TEXT_115 = " decorationShape) {" + NL + "\t\treturn new ";
  protected final String TEXT_116 = "(decorationShape);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_117 = " getDecorationManager() {" + NL + "\t\treturn myDecorationManager;" + NL + "\t}" + NL;
  protected final String TEXT_118 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_119 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_120 = " result = new ";
  protected final String TEXT_121 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_122 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_123 = " createNodeShape() {";
  protected final String TEXT_124 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_125 = "()";
  protected final String TEXT_126 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_127 = ";";
  protected final String TEXT_128 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_129 = ";";
  protected final String TEXT_130 = NL + "\t\t";
  protected final String TEXT_131 = " figure = new ";
  protected final String TEXT_132 = "();";
  protected final String TEXT_133 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_134 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_135 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_136 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_137 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_138 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_139 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_140 = " createDecorationPane() {" + NL + "\t\treturn new ";
  protected final String TEXT_141 = "();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_142 = " setupContentPane(";
  protected final String TEXT_143 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_144 = NL + "\t\t\t";
  protected final String TEXT_145 = " layout = new ";
  protected final String TEXT_146 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_147 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_148 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_149 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_150 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_151 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_152 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_153 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_154 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_155 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_156 = " childEditPart) {";
  protected final String TEXT_157 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_158 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_159 = ") childEditPart).";
  protected final String TEXT_160 = "(getPrimaryShape().";
  protected final String TEXT_161 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_162 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_163 = ") {" + NL + "\t\t\t";
  protected final String TEXT_164 = " pane = getPrimaryShape().";
  protected final String TEXT_165 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_166 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_167 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_168 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_169 = ") {" + NL + "\t\t\t";
  protected final String TEXT_170 = " pane = getPrimaryShape().";
  protected final String TEXT_171 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_172 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_173 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_174 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_175 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_176 = NL + "\t\tfor(";
  protected final String TEXT_177 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_178 = " nextChild = (";
  protected final String TEXT_179 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_180 = ".getVisualID(nextChild) == ";
  protected final String TEXT_181 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_182 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_183 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_184 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_185 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_186 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_187 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_188 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_189 = NL;
  protected final String TEXT_190 = "if (";
  protected final String TEXT_191 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_192 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_193 = " getLabelEditPart(";
  protected final String TEXT_194 = " req) {" + NL + "\t\t";
  protected final String TEXT_195 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_196 = " view = (";
  protected final String TEXT_197 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_198 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_199 = NL + "\t\t\t\tcase ";
  protected final String TEXT_200 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_201 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_202 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isExternalLabel(";
  protected final String TEXT_203 = " childEditPart) {";
  protected final String TEXT_204 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_205 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_206 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_207 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_208 = " root = (";
  protected final String TEXT_209 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_210 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_211 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isDirectChild(";
  protected final String TEXT_212 = " childEditPart) {";
  protected final String TEXT_213 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_214 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_215 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_216 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_217 = " childEditPart, int index) {";
  protected final String TEXT_218 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_219 = " labelFigure = ((";
  protected final String TEXT_220 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_221 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_222 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_223 = " childFigure = ((";
  protected final String TEXT_224 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_225 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_226 = " childEditPart) {";
  protected final String TEXT_227 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_228 = " labelFigure = ((";
  protected final String TEXT_229 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_230 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_231 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_232 = " childFigure = ((";
  protected final String TEXT_233 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_234 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_235 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_236 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_237 = " childEditPart = (";
  protected final String TEXT_238 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_239 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_240 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_241 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_242 = ";" + NL + "\t\t";
  protected final String TEXT_243 = " bounds = (";
  protected final String TEXT_244 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_245 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_246 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_247 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_248 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_249 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_250 = " getSourceConnectionAnchor(";
  protected final String TEXT_251 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_252 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_253 = " getSourceConnectionAnchor(";
  protected final String TEXT_254 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_255 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_256 = "  getTargetConnectionAnchor(";
  protected final String TEXT_257 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_258 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_259 = "  getTargetConnectionAnchor(";
  protected final String TEXT_260 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_261 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_262 = NL + "\t\tif (";
  protected final String TEXT_263 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_264 = "(this);" + NL + "\t\t}";
  protected final String TEXT_265 = NL + "\t\tif (";
  protected final String TEXT_266 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_267 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_268 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_269 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_270 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_271 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_272 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_273 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_274 = NL;
  protected final String TEXT_275 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_276 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_277 = " domainModelEditDomain = ";
  protected final String TEXT_278 = ".getEditingDomain(";
  protected final String TEXT_279 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_280 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_281 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_282 = " {";
  protected final String TEXT_283 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_284 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_285 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_286 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_287 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_288 = " createFilter() {";
  protected final String TEXT_289 = NL + "\t\t\t";
  protected final String TEXT_290 = " filter = ";
  protected final String TEXT_291 = ".createFeatureFilter(";
  protected final String TEXT_292 = ".eINSTANCE.get";
  protected final String TEXT_293 = "());";
  protected final String TEXT_294 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_295 = ".createFeatureFilter(";
  protected final String TEXT_296 = ".eINSTANCE.get";
  protected final String TEXT_297 = "()));";
  protected final String TEXT_298 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_299 = ".createNotifierFilter(";
  protected final String TEXT_300 = ".getElement()));";
  protected final String TEXT_301 = NL + "\t\t\t";
  protected final String TEXT_302 = " filter = ";
  protected final String TEXT_303 = ".createNotifierFilter(";
  protected final String TEXT_304 = ".getElement());";
  protected final String TEXT_305 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_306 = NL + "\t\t\t";
  protected final String TEXT_307 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_308 = NL + "\t\t\t";
  protected final String TEXT_309 = " filter = ";
  protected final String TEXT_310 = ".NOT_TOUCH;";
  protected final String TEXT_311 = NL + "\t\t\treturn filter;";
  protected final String TEXT_312 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_313 = " getCreateNotationalElementCommand(";
  protected final String TEXT_314 = " descriptor) {";
  protected final String TEXT_315 = NL;
  protected final String TEXT_316 = "\t\t\t";
  protected final String TEXT_317 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_318 = NL + "\t\t\tcase ";
  protected final String TEXT_319 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_320 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_321 = "(";
  protected final String TEXT_322 = ", domainElement, ";
  protected final String TEXT_323 = "new ";
  protected final String TEXT_324 = "(0, 0, ";
  protected final String TEXT_325 = ", ";
  protected final String TEXT_326 = ")";
  protected final String TEXT_327 = NL + "null";
  protected final String TEXT_328 = ", ";
  protected final String TEXT_329 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_330 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_331 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_332 = " getSemanticChildNodes() {";
  protected final String TEXT_333 = NL;
  protected final String TEXT_334 = NL + "\treturn ";
  protected final String TEXT_335 = ".EMPTY_LIST;";
  protected final String TEXT_336 = NL + "\t";
  protected final String TEXT_337 = " result = new ";
  protected final String TEXT_338 = "();";
  protected final String TEXT_339 = NL + "\t";
  protected final String TEXT_340 = " viewObject = ";
  protected final String TEXT_341 = ";" + NL + "\t";
  protected final String TEXT_342 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_343 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_344 = NL + "\tfor(";
  protected final String TEXT_345 = " it = ";
  protected final String TEXT_346 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_347 = ") it.next();";
  protected final String TEXT_348 = NL + "\tnextValue = (";
  protected final String TEXT_349 = ")";
  protected final String TEXT_350 = ";";
  protected final String TEXT_351 = NL + "\tnodeVID = ";
  protected final String TEXT_352 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_353 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_354 = NL + "\tcase ";
  protected final String TEXT_355 = ".VISUAL_ID: {";
  protected final String TEXT_356 = NL + "\tif (";
  protected final String TEXT_357 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_358 = NL + "\t\tresult.add(new ";
  protected final String TEXT_359 = "(nextValue, nodeVID));";
  protected final String TEXT_360 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_361 = NL + "\t\t}";
  protected final String TEXT_362 = NL + "\t}";
  protected final String TEXT_363 = NL + "\t}";
  protected final String TEXT_364 = NL + "\treturn result;";
  protected final String TEXT_365 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_366 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_367 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_368 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_369 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_370 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_371 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_372 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_373 = " domainModelEditDomain = ";
  protected final String TEXT_374 = ".getEditingDomain(";
  protected final String TEXT_375 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_376 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_377 = NL;
  protected final String TEXT_378 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_379 = " domainModelEditDomain = ";
  protected final String TEXT_380 = ".getEditingDomain(";
  protected final String TEXT_381 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_382 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_383 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_384 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_385 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_386 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_387 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_388 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_389 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_390 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_391 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_392 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_393 = ".createEventTypeFilter(";
  protected final String TEXT_394 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_395 = ".createEventTypeFilter(";
  protected final String TEXT_396 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_397 = ".createEventTypeFilter(";
  protected final String TEXT_398 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_399 = ".createEventTypeFilter(";
  protected final String TEXT_400 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_401 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_402 = " createFilter() {";
  protected final String TEXT_403 = NL;
  protected final String TEXT_404 = NL + "\t\t\t";
  protected final String TEXT_405 = " filter = ";
  protected final String TEXT_406 = ".createFeatureFilter(";
  protected final String TEXT_407 = ".eINSTANCE.get";
  protected final String TEXT_408 = "());";
  protected final String TEXT_409 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_410 = ".createFeatureFilter(";
  protected final String TEXT_411 = ".eINSTANCE.get";
  protected final String TEXT_412 = "()));";
  protected final String TEXT_413 = NL;
  protected final String TEXT_414 = NL + "\t\t\t";
  protected final String TEXT_415 = " filter = ";
  protected final String TEXT_416 = ".createFeatureFilter(";
  protected final String TEXT_417 = ".eINSTANCE.get";
  protected final String TEXT_418 = "());";
  protected final String TEXT_419 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_420 = ".createFeatureFilter(";
  protected final String TEXT_421 = ".eINSTANCE.get";
  protected final String TEXT_422 = "()));";
  protected final String TEXT_423 = NL;
  protected final String TEXT_424 = NL + "\t\t\t";
  protected final String TEXT_425 = " filter = ";
  protected final String TEXT_426 = ".createFeatureFilter(";
  protected final String TEXT_427 = ".eINSTANCE.get";
  protected final String TEXT_428 = "());";
  protected final String TEXT_429 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_430 = ".createFeatureFilter(";
  protected final String TEXT_431 = ".eINSTANCE.get";
  protected final String TEXT_432 = "()));";
  protected final String TEXT_433 = NL;
  protected final String TEXT_434 = NL + "\t\t\t";
  protected final String TEXT_435 = " filter = ";
  protected final String TEXT_436 = ".createFeatureFilter(";
  protected final String TEXT_437 = ".eINSTANCE.get";
  protected final String TEXT_438 = "());";
  protected final String TEXT_439 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_440 = ".createFeatureFilter(";
  protected final String TEXT_441 = ".eINSTANCE.get";
  protected final String TEXT_442 = "()));";
  protected final String TEXT_443 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_444 = NL + "\t\t\t";
  protected final String TEXT_445 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_446 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_447 = NL + "\t\t\t";
  protected final String TEXT_448 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_449 = NL + "\t\t\t";
  protected final String TEXT_450 = " filter = ";
  protected final String TEXT_451 = ".NOT_TOUCH;";
  protected final String TEXT_452 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_453 = " getCreateNotationalElementCommand(";
  protected final String TEXT_454 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_455 = " linkDescriptor = (";
  protected final String TEXT_456 = ") descriptor;";
  protected final String TEXT_457 = NL;
  protected final String TEXT_458 = "\t\t\t";
  protected final String TEXT_459 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_460 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_461 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_462 = NL + "\t\t\tcase ";
  protected final String TEXT_463 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_464 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_465 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_466 = NL + "\t\t\tcase ";
  protected final String TEXT_467 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_468 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_469 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_470 = "(";
  protected final String TEXT_471 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_472 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_473 = " getSemanticChildLinks() {";
  protected final String TEXT_474 = NL;
  protected final String TEXT_475 = "\t";
  protected final String TEXT_476 = " result = new ";
  protected final String TEXT_477 = "();";
  protected final String TEXT_478 = NL + "\t";
  protected final String TEXT_479 = " modelObject = ";
  protected final String TEXT_480 = ".getElement();" + NL + "\t";
  protected final String TEXT_481 = " nextValue;";
  protected final String TEXT_482 = NL + "\tint linkVID;";
  protected final String TEXT_483 = NL + "\tfor(";
  protected final String TEXT_484 = " it = ";
  protected final String TEXT_485 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_486 = ") it.next();";
  protected final String TEXT_487 = NL + "\tnextValue = (";
  protected final String TEXT_488 = ")";
  protected final String TEXT_489 = ";";
  protected final String TEXT_490 = NL + "\tlinkVID = ";
  protected final String TEXT_491 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_492 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_493 = NL + "\tcase ";
  protected final String TEXT_494 = ".VISUAL_ID: {";
  protected final String TEXT_495 = NL + "\tif (";
  protected final String TEXT_496 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_497 = NL + "\t\t";
  protected final String TEXT_498 = " source = (";
  protected final String TEXT_499 = ")";
  protected final String TEXT_500 = ";";
  protected final String TEXT_501 = NL + "\t\t";
  protected final String TEXT_502 = " source = ";
  protected final String TEXT_503 = ".getElement();";
  protected final String TEXT_504 = NL + "\t\t";
  protected final String TEXT_505 = " target = (";
  protected final String TEXT_506 = ")";
  protected final String TEXT_507 = ";";
  protected final String TEXT_508 = NL + "\t\t";
  protected final String TEXT_509 = " target = ";
  protected final String TEXT_510 = ".getElement();";
  protected final String TEXT_511 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_512 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_513 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_514 = NL + "\t}";
  protected final String TEXT_515 = NL + "\t}";
  protected final String TEXT_516 = NL + "\t}";
  protected final String TEXT_517 = NL + "\tfor(";
  protected final String TEXT_518 = " it = ";
  protected final String TEXT_519 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_520 = ") it.next();";
  protected final String TEXT_521 = NL + "\tnextValue = (";
  protected final String TEXT_522 = ")";
  protected final String TEXT_523 = ";";
  protected final String TEXT_524 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_525 = NL + "\t\tresult.add(new ";
  protected final String TEXT_526 = "(modelObject, nextValue, null, ";
  protected final String TEXT_527 = ".VISUAL_ID));";
  protected final String TEXT_528 = NL + "\t}";
  protected final String TEXT_529 = NL + "\t}";
  protected final String TEXT_530 = NL + "\treturn result;";
  protected final String TEXT_531 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_532 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_533 = " result = new ";
  protected final String TEXT_534 = "();" + NL + "\t\t\t";
  protected final String TEXT_535 = " allLinks = ";
  protected final String TEXT_536 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_537 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_538 = " next = (";
  protected final String TEXT_539 = ") it.next();";
  protected final String TEXT_540 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_541 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_542 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_543 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_544 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_545 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_546 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_547 = ".VISUAL_ID:";
  protected final String TEXT_548 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_549 = NL + "\t\t\t\t} else {";
  protected final String TEXT_550 = NL + "\t\t\t\t}";
  protected final String TEXT_551 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_552 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_553 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_554 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_555 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_556 = ".VISUAL_ID:";
  protected final String TEXT_557 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_558 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_559 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_560 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_561 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_562 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_563 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_564 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_565 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_566 = " domainModelEditDomain = ";
  protected final String TEXT_567 = ".getEditingDomain(";
  protected final String TEXT_568 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_569 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_570 = NL;
  protected final String TEXT_571 = NL;
  protected final String TEXT_572 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_573 = " domainModelRefresher = new ";
  protected final String TEXT_574 = "(this);" + NL;
  protected final String TEXT_575 = NL;
  protected final String TEXT_576 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_577 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_578 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_579 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_580 = NL;
  protected final String TEXT_581 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_582 = " externalRefreshers = new ";
  protected final String TEXT_583 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_584 = " getExternalRefreshers() {" + NL + "\t\treturn externalRefreshers;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addExternalRefresher(";
  protected final String TEXT_585 = ".ExternalRefresher externalRefresher) {" + NL + "\t\tif (externalRefresher != null && !externalRefreshers.contains(externalRefresher)) {" + NL + "\t\t\texternalRefreshers.add(externalRefresher);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeExternalRefresher(";
  protected final String TEXT_586 = ".ExternalRefresher externalRefresher) {" + NL + "\t\texternalRefreshers.remove(externalRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_587 = NL;
  protected final String TEXT_588 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_589 = NL + "\t\t";
  protected final String TEXT_590 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_591 = ") ";
  protected final String TEXT_592 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_593 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_594 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_595 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_596 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_597 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_598 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_599 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_600 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_601 = "\t" + NL + "\t}";
  protected final String TEXT_602 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_603 = " createdFont;";
  protected final String TEXT_604 = "\t" + NL;
  protected final String TEXT_605 = NL;
  protected final String TEXT_606 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_607 = " style = (";
  protected final String TEXT_608 = ")  ";
  protected final String TEXT_609 = ".getStyle(";
  protected final String TEXT_610 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_611 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_612 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_613 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_614 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_615 = " style = (";
  protected final String TEXT_616 = ")  ";
  protected final String TEXT_617 = ".getStyle(";
  protected final String TEXT_618 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_619 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_620 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_621 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_622 = " createdBackgroundColor;" + NL;
  protected final String TEXT_623 = NL;
  protected final String TEXT_624 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_625 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_626 = " feature, ";
  protected final String TEXT_627 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_628 = "();";
  protected final String TEXT_629 = NL;
  protected final String TEXT_630 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_631 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_632 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_633 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_634 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_635 = NL;
  protected final String TEXT_636 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_637 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_638 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_639 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_640 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_641 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_642 = NL;
  protected final String TEXT_643 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_644 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_645 = NL;
  protected final String TEXT_646 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_647 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_648 = NL;
  protected final String TEXT_649 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_650 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_651 = NL;
  protected final String TEXT_652 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_653 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_654 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_655 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_656 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_657 = NL;
  protected final String TEXT_658 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_659 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_660 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_661 = NL;
  protected final String TEXT_662 = NL;
  protected final String TEXT_663 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_664 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_665 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_666 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_667 = NL;
  protected final String TEXT_668 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_669 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_670 = "()";
  protected final String TEXT_671 = " {" + NL + "\t\t\tprotected ";
  protected final String TEXT_672 = " getGraphicalEditPart() {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_673 = ".this;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_674 = ");";
  protected final String TEXT_675 = NL;
  protected final String TEXT_676 = "\t\tinstallEditPolicy(";
  protected final String TEXT_677 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_678 = "());";
  protected final String TEXT_679 = NL + "\t\t}" + NL;
  protected final String TEXT_680 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_681 = " createLabelTextDisplayer() {" + NL + "\t\t\t";
  protected final String TEXT_682 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelTextDisplayer();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.createLabelTextDisplayer();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_683 = " getImage() {" + NL + "\t\t\t";
  protected final String TEXT_684 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelIcon();" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_685 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_686 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_687 = " nextChild = (";
  protected final String TEXT_688 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_689 = ".getVisualID(nextChild) == ";
  protected final String TEXT_690 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_691 = ") ";
  protected final String TEXT_692 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_693 = NL + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_694 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_695 = " result = new ";
  protected final String TEXT_696 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_697 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_698 = " next = (";
  protected final String TEXT_699 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_700 = " style = (";
  protected final String TEXT_701 = ") next.getStyle(";
  protected final String TEXT_702 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_703 = ".getVisualID(next)) {";
  protected final String TEXT_704 = NL + "\t\t\t\tcase ";
  protected final String TEXT_705 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_706 = NL + "\t\t\t\tcase ";
  protected final String TEXT_707 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_708 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_709 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final GenNode genNode = (GenNode) genElement;
final GenDiagram genDiagram = genNode.getDiagram();
boolean isXYLayout = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genNode);
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("LinkNotationModelRefresher");	//from linkNotationModelRefresher.jetinc
importManager.registerInnerClass("NotationModelRefresher");	//from notationModelRefresher.jetinc
importManager.registerInnerClass("TreeEditPartAdapter");

    stringBuffer.append(TEXT_1);
    stringBuffer.append(TEXT_2);
    
class FeatureGetAccessorHelper {
	/**
	 * @@param containerName the name of the container
	 * @@param feature the feature whose value is in interest
	 * @@param containerMetaClass the <code>GenClass</code> of the container, or <code>null</code>, if the container is declared as an <code>EObject</code>.
	 * @@param needsCastToResultType whether the cast to the result type is required (this parameter is only used if the <code>EClass</code> this feature belongs to is an external interface). 
	 */
	public void appendFeatureValueGetter(String containerName, GenFeature feature, GenClass containerMetaClass, boolean needsCastToResultType) {
		if (feature.getGenClass().isExternalInterface()) {
			boolean needsCastToEObject = containerMetaClass != null && containerMetaClass.isExternalInterface();
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_3);
    stringBuffer.append(importManager.getImportedName(feature.isListType() ? "java.util.Collection" : feature.getTypeGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_4);
    
			}
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_6);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_7);
    
			}

    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_10);
    
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_11);
    
			}
		} else {
			boolean needsCastToFeatureGenType = containerMetaClass == null || containerMetaClass.isExternalInterface();
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_13);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_14);
    
			}

    stringBuffer.append(TEXT_15);
    stringBuffer.append(feature.getGetAccessor());
    stringBuffer.append(TEXT_16);
    
		}
	}
}
final FeatureGetAccessorHelper myFeatureGetAccessorHelper = new FeatureGetAccessorHelper();

    stringBuffer.append(TEXT_17);
    
@@SuppressWarnings("unchecked")
class NodeEditPartHelper {
	private final List myInnerLabels = new LinkedList();
	private final List myAllLabels = new LinkedList();
	private final List myExternalLabels = new LinkedList();
	private final List myPinnedCompartments = new LinkedList();
	private final List myFloatingCompartments = new LinkedList();
	private final List myContainedFeatureModelFacetLinks = new LinkedList();
	private final List myContainedTypeModelFacetLinks = new LinkedList();
	private GenNodeLabel myPrimaryLabel;

	public NodeEditPartHelper(GenNode genNode){
		myPrimaryLabel = null;

		for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel next = (GenNodeLabel) labels.next();
			if (myPrimaryLabel == null && !next.isReadOnly()){
				myPrimaryLabel = next;
			}
			myAllLabels.add(next);
			if (next instanceof GenExternalNodeLabel) {
				myExternalLabels.add(next);
			} else {
				if (next.getViewmap() instanceof ParentAssignedViewmap) {
					myInnerLabels.add(next);
				}
			}
		}
		
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
			if (next.getViewmap() instanceof ParentAssignedViewmap){
				myPinnedCompartments.add(next);
			} else {
				myFloatingCompartments.add(next);
			}	
		}

		for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
			GenLink genLink = (GenLink)it.next();
			if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
				continue;
			}
			GenClass containerClass;
			if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
				TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
				if (modelFacet.getSourceMetaFeature() == null && modelFacet.getTargetMetaFeature() == null) {
					//if one link feature is null, the element is treated as this end of the link. If both are null, we cannot do anything about such a link.
					containerClass = null;
				} else {
					containerClass = modelFacet.getContainmentMetaFeature().getGenClass();
				}
			} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
				GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
				containerClass = metaFeature.getGenClass();
			} else {
				continue;
			}
			if (containerClass != null && containerClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
				if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
					myContainedTypeModelFacetLinks.add(genLink);
				} else {
					myContainedFeatureModelFacetLinks.add(genLink);
				}
			}
		}
	}

	public boolean hasBothChildrenAndCompartments() {
		return !genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty();
	}

	public boolean containsLinks() {
		return containsFeatureModelFacetLinks() || containsTypeModelFacetLinks();
	}

	public boolean containsFeatureModelFacetLinks() {
		return !myContainedFeatureModelFacetLinks.isEmpty();
	}

	public boolean containsTypeModelFacetLinks() {
		return !myContainedTypeModelFacetLinks.isEmpty();
	}

	public boolean hasInnerFixedLabels(){
		return !myInnerLabels.isEmpty();
	}
	
	public boolean hasPinnedCompartments(){
		return !myPinnedCompartments.isEmpty();
	}
	
	public boolean hasFixedChildren(){
		return hasInnerFixedLabels() || hasPinnedCompartments();
	}
	
	public boolean hasExternalLabels(){
		return !myExternalLabels.isEmpty();
	}
	
	public GenNodeLabel getPrimaryLabel(){
		return myPrimaryLabel;
	}
	
	public Iterator getInnerFixedLabels(){
		return myInnerLabels.iterator();
	}
	
	public Iterator getExternalLabels(){
		return myExternalLabels.iterator();
	}
	
	public Iterator getPinnedCompartments(){
		return myPinnedCompartments.iterator();
	}

	public Iterator getAllLabels() {
		return myAllLabels.iterator();
	}

	public Iterator getContainedFeatureModelFacetLinks() {
		return myContainedFeatureModelFacetLinks.iterator();
	}

	public Iterator getContainedTypeModelFacetLinks() {
		return myContainedTypeModelFacetLinks.iterator();
	}
}
final NodeEditPartHelper myHelper = new NodeEditPartHelper(genNode);

    stringBuffer.append(TEXT_18);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_19);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_20);
    }
    stringBuffer.append(TEXT_21);
    importManager.emitPackageStatement(stringBuffer);
    
importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_22);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.NodeEditPart"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart"));
    stringBuffer.append(TEXT_28);
    {
GenCommonBase genCommonBase = genNode;
    stringBuffer.append(TEXT_29);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_31);
    }
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager"));
    stringBuffer.append(TEXT_35);
    
	if (myHelper.hasBothChildrenAndCompartments()) {

    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_37);
    
	}

    stringBuffer.append(TEXT_38);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(TEXT_48);
    
{
	/*See xpt::diagram::policies::ClassNames.ext#getComponentEditPolicyClassName(GenCommonBase)*/
	String editPolicyClassName = genElement.getEditPartClassName();
	if (editPolicyClassName.endsWith(GenCommonBase.EDIT_PART_SUFFIX)) {
		editPolicyClassName = editPolicyClassName.substring(0, editPolicyClassName.length() - GenCommonBase.EDIT_PART_SUFFIX.length());
	}
	editPolicyClassName += "ComponentEditPolicy";

    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPoliciesPackageName() + "." + editPolicyClassName));
    stringBuffer.append(TEXT_51);
    
}

    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName(genNode.getGraphicalNodeEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_54);
    
if (myHelper.getPrimaryLabel() != null) {

    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.DelegatingDirectEditPolicy"));
    stringBuffer.append(TEXT_57);
    
}

    {
GenCommonBase genCommonBase = genNode;
    stringBuffer.append(TEXT_58);
    
String layoutEditPolicyClassName = genCommonBase.getEditPartClassName();
if (layoutEditPolicyClassName.endsWith(GenCommonBase.EDIT_PART_SUFFIX)) {
	layoutEditPolicyClassName = layoutEditPolicyClassName.substring(0, layoutEditPolicyClassName.length() - GenCommonBase.EDIT_PART_SUFFIX.length());
}
layoutEditPolicyClassName = genDiagram.getEditPoliciesPackageName() + "." + layoutEditPolicyClassName + "LayoutEditPolicy";

    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName(layoutEditPolicyClassName));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(TEXT_62);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_63);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_65);
    }
    stringBuffer.append(TEXT_66);
    
{
	List<OpenDiagramBehaviour> behaviours = genCommonBase.getBehaviour(OpenDiagramBehaviour.class);
	for(int i = 0, iMax = behaviours.size(); i < iMax; i++) {
	/*doesn't make sense to install more than one policy for the same role*/ 
		OpenDiagramBehaviour next = behaviours.get(i);

    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.EditPolicyRoles"));
    stringBuffer.append(TEXT_68);
    if (i > 0) {
    stringBuffer.append(TEXT_69);
    stringBuffer.append(i+1);
    stringBuffer.append(TEXT_70);
    }
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName(genCommonBase.getBehaviour(OpenDiagramBehaviour.class).get(0).getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_72);
    
	}
}

    }
    stringBuffer.append(TEXT_73);
    
if (!genNode.getChildNodes().isEmpty()) {

    stringBuffer.append(TEXT_74);
    
}

    
if (myHelper.containsLinks()) {

    stringBuffer.append(TEXT_75);
    
}

    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_77);
    
if (genNode.getPrimaryDragEditPolicyQualifiedClassName() != null) {

    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName(genNode.getPrimaryDragEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_79);
    
} else {
	if (genNode.getCompartments().isEmpty()) {

    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_82);
    
	} else {

    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_93);
    
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();

    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_96);
    
		}

    stringBuffer.append(TEXT_97);
    
	}
	ResizeConstraints rc = (ResizeConstraints) genNode.getViewmap().find(ResizeConstraints.class);
	if (rc != null) {
		if (rc.getResizeHandles() == 0) {

    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.PositionConstants"));
    stringBuffer.append(TEXT_99);
    
		} else {

    stringBuffer.append(TEXT_100);
    
			for (Iterator it = rc.getResizeHandleNames().iterator(); it.hasNext(); ) {
				String next = (String) it.next();

    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.PositionConstants"));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(next);
    
				if (it.hasNext()) {
    stringBuffer.append(TEXT_102);
    
				}
			}
		
    stringBuffer.append(TEXT_103);
    
		}
	}

    stringBuffer.append(TEXT_104);
    
}

    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.StackLayout"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_110);
    
	if (myHelper.hasBothChildrenAndCompartments()) {

    stringBuffer.append(TEXT_111);
    
	}

    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.PaneDecorationManager"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager"));
    stringBuffer.append(TEXT_117);
    
	if (!genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty()) {

    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RectangleFigure"));
    stringBuffer.append(TEXT_121);
    
	}

    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_123);
    
String figureQualifiedClassName = null;
Viewmap viewmap = genNode.getViewmap();
if (viewmap instanceof FigureViewmap) {
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.RectangleFigure";
	}

    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
    stringBuffer.append(TEXT_125);
    if (isXYLayout) {
    stringBuffer.append(TEXT_126);
    } /* use flow layout*/ 
    stringBuffer.append(TEXT_127);
    } else if (viewmap instanceof SnippetViewmap) {
    stringBuffer.append(TEXT_128);
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_129);
    } else if (viewmap instanceof InnerClassViewmap) {
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();

    stringBuffer.append(TEXT_130);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_131);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_132);
    if (!genNode.getChildNodes().isEmpty() && isXYLayout) { /*otherwise, leave to figure's default value*/
    stringBuffer.append(TEXT_133);
    }
    stringBuffer.append(TEXT_134);
    }
    stringBuffer.append(TEXT_135);
    if (figureQualifiedClassName != null) {
    stringBuffer.append(TEXT_136);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_138);
    }
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_143);
    
if (!isXYLayout) {
	String layoutClassName = importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout");

    stringBuffer.append(TEXT_144);
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_145);
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_146);
    } else {
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_150);
    }
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_154);
    
	if (myHelper.hasFixedChildren()) {

    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_156);
    
for (Iterator it = myHelper.getInnerFixedLabels(); it.hasNext(); ) {
	GenNodeLabel genLabel = (GenNodeLabel) it.next();
	final String labelEditPart = importManager.getImportedName(genLabel.getEditPartQualifiedClassName());
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) genLabel.getViewmap();
	final String childSetterName = childViewmap.getSetterName() == null ? "setLabel" : childViewmap.getSetterName();

    stringBuffer.append(TEXT_157);
    stringBuffer.append(labelEditPart);
    stringBuffer.append(TEXT_158);
    stringBuffer.append(labelEditPart);
    stringBuffer.append(TEXT_159);
    stringBuffer.append(childSetterName);
    stringBuffer.append(TEXT_160);
    stringBuffer.append(childViewmap.getGetterName());
    stringBuffer.append(TEXT_161);
    
}

for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());

    stringBuffer.append(TEXT_162);
    stringBuffer.append(compartmentEditPartFQN);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(childViewmap.getGetterName());
    stringBuffer.append(TEXT_165);
    stringBuffer.append(compartmentEditPartFQN);
    stringBuffer.append(TEXT_166);
    	
} // for pinned compartments

    stringBuffer.append(TEXT_167);
    
//XXX: ignore labels assuming that they never may be removed
for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());

    stringBuffer.append(TEXT_168);
    stringBuffer.append(compartmentEditPartFQN);
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(childViewmap.getGetterName());
    stringBuffer.append(TEXT_171);
    stringBuffer.append(compartmentEditPartFQN);
    stringBuffer.append(TEXT_172);
    
} // for pinned compartments

    stringBuffer.append(TEXT_173);
    
} // if myHelper.hasFixedChildren()

    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_175);
    
		if (myHelper.getPrimaryLabel() != null) {

    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_179);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_182);
    
		}

    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_184);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_186);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_188);
    stringBuffer.append(TEXT_189);
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_191);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_198);
    
		for (Iterator it = myHelper.getAllLabels(); it.hasNext(); ) {
			GenNodeLabel genLabel = (GenNodeLabel) it.next();
			if (genLabel.isReadOnly()) {
				continue;
			}

    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName(genLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_200);
    
		}

    stringBuffer.append(TEXT_201);
    
if (myHelper.hasExternalLabels()) {

    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_203);
    
	for (Iterator externalLabels = myHelper.getExternalLabels(); externalLabels.hasNext();) {
		GenNodeLabel next = (GenNodeLabel) externalLabels.next();

    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_205);
    
	}

    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.LayerManager"));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.LayerManager"));
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_210);
    
}
if (!genNode.getChildNodes().isEmpty()) {

    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_212);
    
	for(Iterator directChildren = genNode.getChildNodes().iterator(); directChildren.hasNext(); ) {
		GenChildNode next = (GenChildNode) directChildren.next();

    stringBuffer.append(TEXT_213);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_214);
    
	}

    stringBuffer.append(TEXT_215);
    
}
if (myHelper.hasExternalLabels() || myHelper.hasFixedChildren() || myHelper.hasBothChildrenAndCompartments()) {

    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_217);
    
	if (myHelper.hasExternalLabels()) {

    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_220);
    
	}
	if (myHelper.hasFixedChildren()) {

    stringBuffer.append(TEXT_221);
    
	}
	if (myHelper.hasBothChildrenAndCompartments()) {

    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_224);
    
	}

    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_226);
    
	if (myHelper.hasExternalLabels()) {

    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_229);
    
	}
	if (myHelper.hasFixedChildren()){

    stringBuffer.append(TEXT_230);
    
	}
	if (myHelper.hasBothChildrenAndCompartments()) {

    stringBuffer.append(TEXT_231);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_233);
    
	}

    stringBuffer.append(TEXT_234);
    
}

    
if (myHelper.hasExternalLabels()) {

    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_236);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_237);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_239);
    
}

    stringBuffer.append(TEXT_240);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_241);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
    stringBuffer.append(TEXT_242);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
    stringBuffer.append(TEXT_243);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
    stringBuffer.append(TEXT_244);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_245);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_246);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_247);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_248);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_249);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
    stringBuffer.append(TEXT_250);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
    stringBuffer.append(TEXT_251);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
    stringBuffer.append(TEXT_252);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
    stringBuffer.append(TEXT_253);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_254);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
    stringBuffer.append(TEXT_255);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
    stringBuffer.append(TEXT_256);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
    stringBuffer.append(TEXT_257);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
    stringBuffer.append(TEXT_258);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
    stringBuffer.append(TEXT_259);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_260);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
    stringBuffer.append(TEXT_261);
    
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {

    stringBuffer.append(TEXT_262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.SnapToHelper"));
    stringBuffer.append(TEXT_263);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.SnapToGrid"));
    stringBuffer.append(TEXT_264);
    
}

    stringBuffer.append(TEXT_265);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.TreeEditPart"));
    stringBuffer.append(TEXT_266);
    /*@@ include file="adapters/propertySource.javajetinc"*/
    stringBuffer.append(TEXT_267);
    
if (!genNode.getChildNodes().isEmpty()) {

    stringBuffer.append(TEXT_268);
    
}

    
if (myHelper.containsLinks()) {

    stringBuffer.append(TEXT_269);
    
}

    stringBuffer.append(TEXT_270);
    
if (myHelper.containsLinks()) {

    stringBuffer.append(TEXT_271);
    
}

    
if (!genNode.getChildNodes().isEmpty()) {

    stringBuffer.append(TEXT_272);
    
}

    stringBuffer.append(TEXT_273);
    
{
	final String _getViewCode = "getDiagramNode()";
	final String _getDiagramCode = "getDiagramNode().getDiagram()";
	final boolean _includeUncontainedLinks = false;
	if (!genNode.getChildNodes().isEmpty()) {
		final boolean isListLayout = !isXYLayout;
		final List childNodes = genNode.getChildNodes();

    stringBuffer.append(TEXT_274);
    stringBuffer.append(TEXT_275);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_276);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_277);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_278);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_279);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_280);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_281);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_282);
    
boolean hasConstraintsInChildren = false;
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet != null && typeModelFacet.getMetaClass() != null && typeModelFacet.getModelElementSelector() != null) {
		hasConstraintsInChildren = true;
		break;
	}
}

    
if (hasConstraintsInChildren) {

    stringBuffer.append(TEXT_283);
    stringBuffer.append(genDiagram.getVisualIDRegistryQualifiedClassName());
    stringBuffer.append(TEXT_284);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_285);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_286);
    
}

    stringBuffer.append(TEXT_287);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_288);
    
{
	boolean hasDeclaredFilter = false;
	Set genChildFeatures = new LinkedHashSet();
	for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode nextNode = (GenNode) it.next();
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (genChildFeatures.contains(childMetaFeature)) {
			continue;
		}
		genChildFeatures.add(childMetaFeature);
		if (!hasDeclaredFilter) {
			hasDeclaredFilter = true;

    stringBuffer.append(TEXT_289);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_290);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_291);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_292);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_293);
    
		} else {

    stringBuffer.append(TEXT_294);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_295);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_296);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_297);
    
		}
	}	//for

    
	if (hasDeclaredFilter) {

    stringBuffer.append(TEXT_298);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_299);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_300);
    
	} else {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_301);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_302);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_303);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_304);
    
	}

    
	if (hasConstraintsInChildren) {
		if (hasDeclaredFilter) {
			hasDeclaredFilter = true;

    stringBuffer.append(TEXT_305);
    
		} else {

    stringBuffer.append(TEXT_306);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_307);
    
		}
	}
	if (!hasDeclaredFilter) {

    stringBuffer.append(TEXT_308);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_309);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_310);
    
	}

    stringBuffer.append(TEXT_311);
    
}	//local declaration of hasDeclaredFilter

    stringBuffer.append(TEXT_312);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_313);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_314);
    
{
	String _parentNode = "getHost()";

    stringBuffer.append(TEXT_315);
    stringBuffer.append(TEXT_316);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_317);
    
for (Iterator it = childNodes.iterator(); it.hasNext(); ) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet == null) {
		continue;
	}
	String childNodeInterfaceName = importManager.getImportedName(nextNode.getDomainMetaClass().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_318);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_319);
    stringBuffer.append(childNodeInterfaceName);
    stringBuffer.append(TEXT_320);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_321);
    stringBuffer.append(_parentNode);
    stringBuffer.append(TEXT_322);
    
	if (!isListLayout) {
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) nextNode.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_323);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_324);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_325);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_326);
    
	} else {

    stringBuffer.append(TEXT_327);
    
	}

    stringBuffer.append(TEXT_328);
    stringBuffer.append(importManager.getImportedName(nextNode.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_329);
    
}

    stringBuffer.append(TEXT_330);
    
}

    stringBuffer.append(TEXT_331);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_332);
    stringBuffer.append(TEXT_333);
    
if (childNodes.size() == 0) {

    stringBuffer.append(TEXT_334);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_335);
    
} else {

    stringBuffer.append(TEXT_336);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_337);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_338);
    
	Map genFeature2genNodeMap = new LinkedHashMap();
	for (int nodeIndex = 0; nodeIndex < childNodes.size(); nodeIndex++) {
		GenNode nextNode = (GenNode) childNodes.get(nodeIndex);
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (!genFeature2genNodeMap.containsKey(childMetaFeature)) {
			genFeature2genNodeMap.put(childMetaFeature, new ArrayList());
		}
		((Collection) genFeature2genNodeMap.get(childMetaFeature)).add(nextNode);
	}
	Set entrySet = genFeature2genNodeMap.entrySet();
	if (entrySet.size() > 0) {

    stringBuffer.append(TEXT_339);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_340);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_341);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_342);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_343);
    
	}
	for (Iterator entries = entrySet.iterator(); entries.hasNext();) {
		Map.Entry nextEntry = (Map.Entry) entries.next();
		GenFeature childMetaFeature = (GenFeature) nextEntry.getKey();
		Collection genNodesCollection = (Collection) nextEntry.getValue();
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_344);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_345);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, true);
    stringBuffer.append(TEXT_346);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_347);
    
		} else {

    stringBuffer.append(TEXT_348);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_349);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, false);
    stringBuffer.append(TEXT_350);
    
	}

    stringBuffer.append(TEXT_351);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_352);
    
	boolean generateSwitch = genNodesCollection.size() != 1;
	if (generateSwitch) {

    stringBuffer.append(TEXT_353);
    
	}
	for (Iterator genNodesIterator = genNodesCollection.iterator(); genNodesIterator.hasNext();) {
		GenNode nextNode = (GenNode) genNodesIterator.next();
		if (generateSwitch) {

    stringBuffer.append(TEXT_354);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_355);
    
		} else {

    stringBuffer.append(TEXT_356);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_357);
    
		}

    stringBuffer.append(TEXT_358);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_359);
    
		if (generateSwitch) {

    stringBuffer.append(TEXT_360);
    
		} else {

    stringBuffer.append(TEXT_361);
    
		}
	}
	if (generateSwitch) {

    stringBuffer.append(TEXT_362);
    
	}
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_363);
    
	}
}

    stringBuffer.append(TEXT_364);
    
}

    stringBuffer.append(TEXT_365);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_366);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_367);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_368);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_369);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_370);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher"));
    stringBuffer.append(TEXT_371);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_372);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_373);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_374);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_375);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_376);
    
	}

    stringBuffer.append(TEXT_377);
    
if (myHelper.containsLinks() || _includeUncontainedLinks) {

    stringBuffer.append(TEXT_378);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_379);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_380);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_381);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_382);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_383);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService"));
    stringBuffer.append(TEXT_384);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.OwnedLinksNotationModelRefresher"));
    stringBuffer.append(TEXT_385);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_386);
    
	boolean hasConstraintsInContainedLinks = false;
	for (Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeModelFacet typeModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (typeModelFacet != null && typeModelFacet.getMetaClass() != null && typeModelFacet.getModelElementSelector() != null) {
			hasConstraintsInContainedLinks = true;
			break;
		}
	}
	if (hasConstraintsInContainedLinks) {

    stringBuffer.append(TEXT_387);
    stringBuffer.append(genDiagram.getVisualIDRegistryQualifiedClassName());
    stringBuffer.append(TEXT_388);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_389);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_390);
    
	}
	if (_includeUncontainedLinks) {

    stringBuffer.append(TEXT_391);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_392);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_393);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_394);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_395);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_396);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_397);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_398);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_399);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_400);
    
	}

    stringBuffer.append(TEXT_401);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_402);
    
	{
		boolean hasDeclaredFilter = false;
		Set genAffectingFeatures = new LinkedHashSet();
		for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
			if (modelFacet == null) {
				continue;
			}
			GenFeature _feature = modelFacet.getChildMetaFeature();

    stringBuffer.append(TEXT_403);
    
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
	}
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_404);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_405);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_406);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_407);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_408);
    
	} else {

    stringBuffer.append(TEXT_409);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_410);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_411);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_412);
    
	}

    
			_feature = modelFacet.getSourceMetaFeature();

    stringBuffer.append(TEXT_413);
    
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
	}
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_414);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_415);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_416);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_417);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_418);
    
	} else {

    stringBuffer.append(TEXT_419);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_420);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_421);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_422);
    
	}

    
			_feature = modelFacet.getTargetMetaFeature();

    stringBuffer.append(TEXT_423);
    
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
	}
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_424);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_425);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_426);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_427);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_428);
    
	} else {

    stringBuffer.append(TEXT_429);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_430);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_431);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_432);
    
	}

    
		}
		for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			GenFeature _feature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();

    stringBuffer.append(TEXT_433);
    
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
	}
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;

    stringBuffer.append(TEXT_434);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_435);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_436);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_437);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_438);
    
	} else {

    stringBuffer.append(TEXT_439);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_440);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_441);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_442);
    
	}

    
		}
		if (hasConstraintsInContainedLinks) {
			if (hasDeclaredFilter) {

    stringBuffer.append(TEXT_443);
    
			} else {
				hasDeclaredFilter = true;

    stringBuffer.append(TEXT_444);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_445);
    
			}
		}
		if (_includeUncontainedLinks) {
			if (hasDeclaredFilter) {

    stringBuffer.append(TEXT_446);
    
			} else {
				hasDeclaredFilter = true;

    stringBuffer.append(TEXT_447);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_448);
    
			}
		}
		if (!hasDeclaredFilter) {

    stringBuffer.append(TEXT_449);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_450);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_451);
    
		}
	}	//local declaration of hasDeclaredFilter

    stringBuffer.append(TEXT_452);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_453);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_454);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_455);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_456);
    
{
	Iterator _containedTypeModelFacetLinks = myHelper.getContainedTypeModelFacetLinks();
	Iterator _containedFeatureModelFacetLinks = myHelper.getContainedFeatureModelFacetLinks();
	String _diagramCode = "getHost().getDiagram()";

    stringBuffer.append(TEXT_457);
    stringBuffer.append(TEXT_458);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_459);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_460);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IViewDecorator"));
    stringBuffer.append(TEXT_461);
    
	for(Iterator it = _containedTypeModelFacetLinks; it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (modelFacet == null) {
			continue;
		}

    stringBuffer.append(TEXT_462);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_463);
    stringBuffer.append(importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_464);
    stringBuffer.append(importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_465);
    
	}
	for(Iterator it = _containedFeatureModelFacetLinks; it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_466);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_467);
    stringBuffer.append(importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_468);
    
	}

    stringBuffer.append(TEXT_469);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_470);
    stringBuffer.append(_diagramCode);
    stringBuffer.append(TEXT_471);
    
}

    stringBuffer.append(TEXT_472);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_473);
    
{
	Iterator _containedTypeModelFacetLinks = myHelper.getContainedTypeModelFacetLinks();
	Iterator _containedFeatureModelFacetLinks = myHelper.getContainedFeatureModelFacetLinks();

    stringBuffer.append(TEXT_474);
    stringBuffer.append(TEXT_475);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_476);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_477);
    
Map genFeature2genLinkMap = new LinkedHashMap();
for(Iterator it = _containedTypeModelFacetLinks; it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
	GenFeature metaFeature = modelFacet.getChildMetaFeature();
	if (!genFeature2genLinkMap.containsKey(metaFeature)) {
		genFeature2genLinkMap.put(metaFeature, new ArrayList());
	}
	((Collection) genFeature2genLinkMap.get(metaFeature)).add(genLink);
}
Map genFeature2featureGenLinkMap = new LinkedHashMap();
for(Iterator it = _containedFeatureModelFacetLinks; it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
	if (!genFeature2featureGenLinkMap.containsKey(metaFeature)) {
		genFeature2featureGenLinkMap.put(metaFeature, new ArrayList());
	}
	((Collection) genFeature2featureGenLinkMap.get(metaFeature)).add(genLink);
}
if (!genFeature2genLinkMap.isEmpty() || !genFeature2featureGenLinkMap.isEmpty()) {

    stringBuffer.append(TEXT_478);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_479);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_480);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_481);
    
}
if (!genFeature2genLinkMap.isEmpty()) {

    stringBuffer.append(TEXT_482);
    
}
for (Iterator entries = genFeature2genLinkMap.entrySet().iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature metaFeature = (GenFeature) nextEntry.getKey();
	Collection genLinksCollection = (Collection) nextEntry.getValue();
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_483);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_484);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, true);
    stringBuffer.append(TEXT_485);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_486);
    
	} else {

    stringBuffer.append(TEXT_487);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_488);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, false);
    stringBuffer.append(TEXT_489);
    
	}

    stringBuffer.append(TEXT_490);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_491);
    
	boolean generateSwitch = genLinksCollection.size() != 1;
	if (generateSwitch) {

    stringBuffer.append(TEXT_492);
    
	}
	for (Iterator genLinksIterator = genLinksCollection.iterator(); genLinksIterator.hasNext(); ) {
		GenLink nextLink = (GenLink) genLinksIterator.next();
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (generateSwitch) {

    stringBuffer.append(TEXT_493);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_494);
    
		} else {

    stringBuffer.append(TEXT_495);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_496);
    
		}
		if (modelFacet.getSourceMetaFeature() != null) {

    stringBuffer.append(TEXT_497);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_498);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_499);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("nextValue", modelFacet.getSourceMetaFeature(), null, false);
    stringBuffer.append(TEXT_500);
    
		} else {

    stringBuffer.append(TEXT_501);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_502);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_503);
    
		}
		if (modelFacet.getTargetMetaFeature() != null) {

    stringBuffer.append(TEXT_504);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_505);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_506);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("nextValue", modelFacet.getTargetMetaFeature(), null, false);
    stringBuffer.append(TEXT_507);
    
		} else {

    stringBuffer.append(TEXT_508);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_509);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_510);
    
		}

    stringBuffer.append(TEXT_511);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_512);
    
		if (generateSwitch) {

    stringBuffer.append(TEXT_513);
    
		} else {

    stringBuffer.append(TEXT_514);
    
		}

    
	}	//iterate over genLinksCollection
	if (generateSwitch) {

    stringBuffer.append(TEXT_515);
    
	}
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_516);
    
	}
}
for (Iterator entries = genFeature2featureGenLinkMap.entrySet().iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature metaFeature = (GenFeature) nextEntry.getKey();
	Collection genLinksCollection = (Collection) nextEntry.getValue();
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_517);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_518);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, true);
    stringBuffer.append(TEXT_519);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_520);
    
	} else {

    stringBuffer.append(TEXT_521);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_522);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", metaFeature, null, false);
    stringBuffer.append(TEXT_523);
    
	}

    stringBuffer.append(TEXT_524);
    
	for (Iterator genLinksIterator = genLinksCollection.iterator(); genLinksIterator.hasNext(); ) {
		GenLink nextLink = (GenLink) genLinksIterator.next();

    stringBuffer.append(TEXT_525);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_526);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_527);
    
	}

    stringBuffer.append(TEXT_528);
    
	if (metaFeature.isListType()) {

    stringBuffer.append(TEXT_529);
    
	}
}

    stringBuffer.append(TEXT_530);
    
}

    stringBuffer.append(TEXT_531);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_532);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_533);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_534);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_535);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_536);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_537);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_538);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_539);
    
	if (_includeUncontainedLinks) {

    stringBuffer.append(TEXT_540);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_541);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_542);
    
	}
	if (myHelper.containsFeatureModelFacetLinks()) {

    stringBuffer.append(TEXT_543);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_544);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_545);
    
		for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_546);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_547);
    
		}

    stringBuffer.append(TEXT_548);
    
		if (myHelper.containsTypeModelFacetLinks()) {

    stringBuffer.append(TEXT_549);
    
		} else {

    stringBuffer.append(TEXT_550);
    
		}
	}
	if (myHelper.containsTypeModelFacetLinks()) {
		if (!myHelper.containsFeatureModelFacetLinks()) {

    stringBuffer.append(TEXT_551);
    
		}

    stringBuffer.append(TEXT_552);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_553);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_554);
    
		for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_555);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_556);
    
		}

    stringBuffer.append(TEXT_557);
    
	}

    stringBuffer.append(TEXT_558);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_559);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
    stringBuffer.append(TEXT_560);
    stringBuffer.append(genDiagram.isSynchronized());
    stringBuffer.append(TEXT_561);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_562);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_563);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher"));
    stringBuffer.append(TEXT_564);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_565);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_566);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_567);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_568);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_569);
    
}

    
}	//end of local declarations

    stringBuffer.append(TEXT_570);
    stringBuffer.append(TEXT_571);
    stringBuffer.append(TEXT_572);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_573);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_574);
    stringBuffer.append(TEXT_575);
    stringBuffer.append(TEXT_576);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_577);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_578);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_579);
    stringBuffer.append(TEXT_580);
    stringBuffer.append(TEXT_581);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_582);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_583);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_584);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_585);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_586);
    
	final String primaryView = "getDiagramNode()";

    stringBuffer.append(TEXT_587);
    
boolean isFixedFontSetInFigure;
{
	StyleAttributes styleAttributes = (genElement.getViewmap() == null) ? null : (StyleAttributes)genElement.getViewmap().find(StyleAttributes.class);
	isFixedFontSetInFigure = styleAttributes != null && styleAttributes.isFixedFont();
}

    stringBuffer.append(TEXT_588);
    
if (!isFixedFontSetInFigure) {

    stringBuffer.append(TEXT_589);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_590);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_591);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_592);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_593);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_594);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_595);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_596);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_597);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_598);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
    stringBuffer.append(TEXT_599);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_600);
    
}

    stringBuffer.append(TEXT_601);
    
if (!isFixedFontSetInFigure) {

    stringBuffer.append(TEXT_602);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_603);
    
}

    stringBuffer.append(TEXT_604);
    stringBuffer.append(TEXT_605);
    stringBuffer.append(TEXT_606);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_607);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_608);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_609);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_610);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_611);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_612);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_613);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_614);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_615);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_616);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_617);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_618);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_619);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_620);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_621);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_622);
    stringBuffer.append(TEXT_623);
    stringBuffer.append(TEXT_624);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_625);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_626);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_627);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_628);
    stringBuffer.append(TEXT_629);
    stringBuffer.append(TEXT_630);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_631);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_632);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_633);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_634);
    stringBuffer.append(TEXT_635);
    stringBuffer.append(TEXT_636);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_637);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_638);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_639);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_640);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_641);
    stringBuffer.append(TEXT_642);
    stringBuffer.append(TEXT_643);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_644);
    stringBuffer.append(TEXT_645);
    stringBuffer.append(TEXT_646);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_647);
    stringBuffer.append(TEXT_648);
    stringBuffer.append(TEXT_649);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_650);
    stringBuffer.append(TEXT_651);
    stringBuffer.append(TEXT_652);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_653);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_654);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_655);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_656);
    stringBuffer.append(TEXT_657);
    stringBuffer.append(TEXT_658);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_659);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_660);
    
if (genNode.getViewmap() instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) genNode.getViewmap()).getClassBody();

    stringBuffer.append(TEXT_661);
    stringBuffer.append(classBody);
    stringBuffer.append(TEXT_662);
    
if (classBody.indexOf("DPtoLP") != -1) {

    stringBuffer.append(TEXT_663);
    
}

    
}

    stringBuffer.append(TEXT_664);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
    stringBuffer.append(TEXT_665);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_666);
    stringBuffer.append(TEXT_667);
    
{
	/*See xpt::diagram::policies::ClassNames.ext#getComponentEditPolicyClassName(GenCommonBase)*/
	String editPolicyClassName = genElement.getEditPartClassName();
	if (editPolicyClassName.endsWith(GenCommonBase.EDIT_PART_SUFFIX)) {
		editPolicyClassName = editPolicyClassName.substring(0, editPolicyClassName.length() - GenCommonBase.EDIT_PART_SUFFIX.length());
	}
	editPolicyClassName += "ComponentEditPolicy";

    stringBuffer.append(TEXT_668);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_669);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPoliciesPackageName() + "." + editPolicyClassName));
    stringBuffer.append(TEXT_670);
    
		if (genElement instanceof GenNode) {
    stringBuffer.append(TEXT_671);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_672);
    stringBuffer.append(genElement.getEditPartClassName());
    stringBuffer.append(TEXT_673);
    }
    stringBuffer.append(TEXT_674);
    
}

    
if (myHelper.getPrimaryLabel() != null) {

    stringBuffer.append(TEXT_675);
    stringBuffer.append(TEXT_676);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_677);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.LabelDirectEditPolicy"));
    stringBuffer.append(TEXT_678);
    
}

    stringBuffer.append(TEXT_679);
    
if (myHelper.getPrimaryLabel() != null) {

    stringBuffer.append(TEXT_680);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer"));
    stringBuffer.append(TEXT_681);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_682);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_683);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_684);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_685);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_686);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_687);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_688);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_689);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_690);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_691);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_692);
    
}

    stringBuffer.append(TEXT_693);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_694);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_695);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_696);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_697);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_698);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_699);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle"));
    stringBuffer.append(TEXT_700);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle"));
    stringBuffer.append(TEXT_701);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_702);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_703);
    
	for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
		GenChildNode next = (GenChildNode)it.next();

    stringBuffer.append(TEXT_704);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_705);
    
}

    
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();

    stringBuffer.append(TEXT_706);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_707);
    
}

    stringBuffer.append(TEXT_708);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_709);
    return stringBuffer.toString();
  }
}
@


1.47
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.46
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@d48 335
a382 335
  protected final String TEXT_27 = " {";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_30 = ";";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_32 = " contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_33 = " primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_34 = " myDecorationManager;" + NL;
  protected final String TEXT_35 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_36 = " childNodesPane;";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_38 = "(";
  protected final String TEXT_39 = " model) {" + NL + "\t\tassert model instanceof ";
  protected final String TEXT_40 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL;
  protected final String TEXT_41 = NL;
  protected final String TEXT_42 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_43 = " view = (";
  protected final String TEXT_44 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_45 = " view = (";
  protected final String TEXT_46 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_47 = NL;
  protected final String TEXT_48 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_49 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_50 = "());";
  protected final String TEXT_51 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_52 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_53 = "());";
  protected final String TEXT_54 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_55 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_56 = "());";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = NL + "installEditPolicy(";
  protected final String TEXT_59 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_60 = "());";
  protected final String TEXT_61 = NL;
  protected final String TEXT_62 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_63 = "\", new ";
  protected final String TEXT_64 = "()); //$NON-NLS-1$";
  protected final String TEXT_65 = NL;
  protected final String TEXT_66 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_67 = ".OPEN_ROLE";
  protected final String TEXT_68 = " + \"";
  protected final String TEXT_69 = "\" ";
  protected final String TEXT_70 = ", new ";
  protected final String TEXT_71 = "());";
  protected final String TEXT_72 = NL + "\t\tinstallEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());";
  protected final String TEXT_73 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_74 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_75 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_76 = " getPrimaryDragEditPolicy() {";
  protected final String TEXT_77 = NL + "\t\treturn new ";
  protected final String TEXT_78 = "();";
  protected final String TEXT_79 = NL + "\t\t";
  protected final String TEXT_80 = " result = new ";
  protected final String TEXT_81 = "();";
  protected final String TEXT_82 = NL + "\t\t";
  protected final String TEXT_83 = " result = new ";
  protected final String TEXT_84 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_85 = " createSelectionHandles() {" + NL + "\t\t\t\t";
  protected final String TEXT_86 = " result = super.createSelectionHandles();" + NL + "\t\t\t\tfor(";
  protected final String TEXT_87 = " it = getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_88 = " next = (";
  protected final String TEXT_89 = ") it.next();" + NL + "\t\t\t\t\t";
  protected final String TEXT_90 = " nextView = (";
  protected final String TEXT_91 = ") next.getModel();" + NL + "\t\t\t\t\tswitch (";
  protected final String TEXT_92 = ".getVisualID(nextView)) {";
  protected final String TEXT_93 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_94 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\tresult.addAll(((";
  protected final String TEXT_95 = ") next).createSelectionHandles());" + NL + "\t\t\t\t\t\tbreak;";
  protected final String TEXT_96 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_97 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_98 = ".NONE);";
  protected final String TEXT_99 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_100 = ".";
  protected final String TEXT_101 = " | ";
  protected final String TEXT_102 = ");";
  protected final String TEXT_103 = NL + "\t\treturn result;";
  protected final String TEXT_104 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_105 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_106 = " invisibleRectangle = new ";
  protected final String TEXT_107 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_108 = "());" + NL + "\t\t";
  protected final String TEXT_109 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_110 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_111 = NL + NL + "\t\t";
  protected final String TEXT_112 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tmyDecorationManager = createDecorationManager(decorationShape);" + NL + "\t\t\tinvisibleRectangle.add(decorationShape, 0);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_113 = " createDecorationManager(";
  protected final String TEXT_114 = " decorationShape) {" + NL + "\t\treturn new ";
  protected final String TEXT_115 = "(decorationShape);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_116 = " getDecorationManager() {" + NL + "\t\treturn myDecorationManager;" + NL + "\t}" + NL;
  protected final String TEXT_117 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_118 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_119 = " result = new ";
  protected final String TEXT_120 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_121 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_122 = " createNodeShape() {";
  protected final String TEXT_123 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_124 = "()";
  protected final String TEXT_125 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_126 = ";";
  protected final String TEXT_127 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_128 = ";";
  protected final String TEXT_129 = NL + "\t\t";
  protected final String TEXT_130 = " figure = new ";
  protected final String TEXT_131 = "();";
  protected final String TEXT_132 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_133 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_134 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_135 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_136 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_137 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_138 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " createDecorationPane() {" + NL + "\t\treturn new ";
  protected final String TEXT_140 = "();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_141 = " setupContentPane(";
  protected final String TEXT_142 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_143 = NL + "\t\t\t";
  protected final String TEXT_144 = " layout = new ";
  protected final String TEXT_145 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_146 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_147 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_148 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_149 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_150 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_151 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_152 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_153 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_154 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_155 = " childEditPart) {";
  protected final String TEXT_156 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_157 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_158 = ") childEditPart).";
  protected final String TEXT_159 = "(getPrimaryShape().";
  protected final String TEXT_160 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_161 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_162 = ") {" + NL + "\t\t\t";
  protected final String TEXT_163 = " pane = getPrimaryShape().";
  protected final String TEXT_164 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_165 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_166 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_167 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_168 = ") {" + NL + "\t\t\t";
  protected final String TEXT_169 = " pane = getPrimaryShape().";
  protected final String TEXT_170 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_171 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_172 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_173 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_174 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_175 = NL + "\t\tfor(";
  protected final String TEXT_176 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_177 = " nextChild = (";
  protected final String TEXT_178 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_179 = ".getVisualID(nextChild) == ";
  protected final String TEXT_180 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_181 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_182 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_183 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_184 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_185 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_186 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_187 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_188 = NL;
  protected final String TEXT_189 = "if (";
  protected final String TEXT_190 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_191 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_192 = " getLabelEditPart(";
  protected final String TEXT_193 = " req) {" + NL + "\t\t";
  protected final String TEXT_194 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_195 = " view = (";
  protected final String TEXT_196 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_197 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_198 = NL + "\t\t\t\tcase ";
  protected final String TEXT_199 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_200 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_201 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isExternalLabel(";
  protected final String TEXT_202 = " childEditPart) {";
  protected final String TEXT_203 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_204 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_205 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_206 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_207 = " root = (";
  protected final String TEXT_208 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_209 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_210 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isDirectChild(";
  protected final String TEXT_211 = " childEditPart) {";
  protected final String TEXT_212 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_213 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_214 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_215 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_216 = " childEditPart, int index) {";
  protected final String TEXT_217 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_218 = " labelFigure = ((";
  protected final String TEXT_219 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_220 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_221 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_222 = " childFigure = ((";
  protected final String TEXT_223 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_224 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_225 = " childEditPart) {";
  protected final String TEXT_226 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_227 = " labelFigure = ((";
  protected final String TEXT_228 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_229 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_230 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_231 = " childFigure = ((";
  protected final String TEXT_232 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_233 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_234 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_235 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_236 = " childEditPart = (";
  protected final String TEXT_237 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_238 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_239 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_240 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_241 = ";" + NL + "\t\t";
  protected final String TEXT_242 = " bounds = (";
  protected final String TEXT_243 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_244 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_245 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_246 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_247 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_248 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_249 = " getSourceConnectionAnchor(";
  protected final String TEXT_250 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_251 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_252 = " getSourceConnectionAnchor(";
  protected final String TEXT_253 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_254 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_255 = "  getTargetConnectionAnchor(";
  protected final String TEXT_256 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_257 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_258 = "  getTargetConnectionAnchor(";
  protected final String TEXT_259 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_260 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_261 = NL + "\t\tif (";
  protected final String TEXT_262 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_263 = "(this);" + NL + "\t\t}";
  protected final String TEXT_264 = NL + "\t\tif (";
  protected final String TEXT_265 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_266 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_267 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_268 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_269 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_270 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_271 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_272 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_273 = NL;
  protected final String TEXT_274 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_275 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_276 = " domainModelEditDomain = ";
  protected final String TEXT_277 = ".getEditingDomain(";
  protected final String TEXT_278 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_279 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_280 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_281 = " {";
  protected final String TEXT_282 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_283 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_284 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_285 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_286 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_287 = " createFilter() {";
  protected final String TEXT_288 = NL + "\t\t\t";
  protected final String TEXT_289 = " filter = ";
  protected final String TEXT_290 = ".createFeatureFilter(";
  protected final String TEXT_291 = ".eINSTANCE.get";
  protected final String TEXT_292 = "());";
  protected final String TEXT_293 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_294 = ".createFeatureFilter(";
  protected final String TEXT_295 = ".eINSTANCE.get";
  protected final String TEXT_296 = "()));";
  protected final String TEXT_297 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_298 = ".createNotifierFilter(";
  protected final String TEXT_299 = ".getElement()));";
  protected final String TEXT_300 = NL + "\t\t\t";
  protected final String TEXT_301 = " filter = ";
  protected final String TEXT_302 = ".createNotifierFilter(";
  protected final String TEXT_303 = ".getElement());";
  protected final String TEXT_304 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_305 = NL + "\t\t\t";
  protected final String TEXT_306 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_307 = NL + "\t\t\t";
  protected final String TEXT_308 = " filter = ";
  protected final String TEXT_309 = ".NOT_TOUCH;";
  protected final String TEXT_310 = NL + "\t\t\treturn filter;";
  protected final String TEXT_311 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_312 = " getCreateNotationalElementCommand(";
  protected final String TEXT_313 = " descriptor) {";
  protected final String TEXT_314 = NL;
  protected final String TEXT_315 = "\t\t\t";
  protected final String TEXT_316 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_317 = NL + "\t\t\tcase ";
  protected final String TEXT_318 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_319 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_320 = "(";
  protected final String TEXT_321 = ", domainElement, ";
  protected final String TEXT_322 = "new ";
  protected final String TEXT_323 = "(0, 0, ";
  protected final String TEXT_324 = ", ";
  protected final String TEXT_325 = ")";
  protected final String TEXT_326 = NL + "null";
  protected final String TEXT_327 = ", ";
  protected final String TEXT_328 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_329 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_330 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_331 = " getSemanticChildNodes() {";
  protected final String TEXT_332 = NL;
  protected final String TEXT_333 = NL + "\treturn ";
  protected final String TEXT_334 = ".EMPTY_LIST;";
  protected final String TEXT_335 = NL + "\t";
  protected final String TEXT_336 = " result = new ";
  protected final String TEXT_337 = "();";
  protected final String TEXT_338 = NL + "\t";
  protected final String TEXT_339 = " viewObject = ";
  protected final String TEXT_340 = ";" + NL + "\t";
  protected final String TEXT_341 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_342 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_343 = NL + "\tfor(";
  protected final String TEXT_344 = " it = ";
  protected final String TEXT_345 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_346 = ") it.next();";
  protected final String TEXT_347 = NL + "\tnextValue = (";
  protected final String TEXT_348 = ")";
  protected final String TEXT_349 = ";";
  protected final String TEXT_350 = NL + "\tnodeVID = ";
  protected final String TEXT_351 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_352 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_353 = NL + "\tcase ";
  protected final String TEXT_354 = ".VISUAL_ID: {";
  protected final String TEXT_355 = NL + "\tif (";
  protected final String TEXT_356 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_357 = NL + "\t\tresult.add(new ";
  protected final String TEXT_358 = "(nextValue, nodeVID));";
  protected final String TEXT_359 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_360 = NL + "\t\t}";
  protected final String TEXT_361 = NL + "\t}";
d384 151
a534 151
  protected final String TEXT_363 = NL + "\treturn result;";
  protected final String TEXT_364 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_365 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_366 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_367 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_368 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_369 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_370 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_371 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_372 = " domainModelEditDomain = ";
  protected final String TEXT_373 = ".getEditingDomain(";
  protected final String TEXT_374 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_375 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_376 = NL;
  protected final String TEXT_377 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_378 = " domainModelEditDomain = ";
  protected final String TEXT_379 = ".getEditingDomain(";
  protected final String TEXT_380 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_381 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_382 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_383 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_384 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_385 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_386 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_387 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_388 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_389 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_390 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_391 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_392 = ".createEventTypeFilter(";
  protected final String TEXT_393 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_394 = ".createEventTypeFilter(";
  protected final String TEXT_395 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_396 = ".createEventTypeFilter(";
  protected final String TEXT_397 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_398 = ".createEventTypeFilter(";
  protected final String TEXT_399 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_400 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_401 = " createFilter() {";
  protected final String TEXT_402 = NL;
  protected final String TEXT_403 = NL + "\t\t\t";
  protected final String TEXT_404 = " filter = ";
  protected final String TEXT_405 = ".createFeatureFilter(";
  protected final String TEXT_406 = ".eINSTANCE.get";
  protected final String TEXT_407 = "());";
  protected final String TEXT_408 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_409 = ".createFeatureFilter(";
  protected final String TEXT_410 = ".eINSTANCE.get";
  protected final String TEXT_411 = "()));";
  protected final String TEXT_412 = NL;
  protected final String TEXT_413 = NL + "\t\t\t";
  protected final String TEXT_414 = " filter = ";
  protected final String TEXT_415 = ".createFeatureFilter(";
  protected final String TEXT_416 = ".eINSTANCE.get";
  protected final String TEXT_417 = "());";
  protected final String TEXT_418 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_419 = ".createFeatureFilter(";
  protected final String TEXT_420 = ".eINSTANCE.get";
  protected final String TEXT_421 = "()));";
  protected final String TEXT_422 = NL;
  protected final String TEXT_423 = NL + "\t\t\t";
  protected final String TEXT_424 = " filter = ";
  protected final String TEXT_425 = ".createFeatureFilter(";
  protected final String TEXT_426 = ".eINSTANCE.get";
  protected final String TEXT_427 = "());";
  protected final String TEXT_428 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_429 = ".createFeatureFilter(";
  protected final String TEXT_430 = ".eINSTANCE.get";
  protected final String TEXT_431 = "()));";
  protected final String TEXT_432 = NL;
  protected final String TEXT_433 = NL + "\t\t\t";
  protected final String TEXT_434 = " filter = ";
  protected final String TEXT_435 = ".createFeatureFilter(";
  protected final String TEXT_436 = ".eINSTANCE.get";
  protected final String TEXT_437 = "());";
  protected final String TEXT_438 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_439 = ".createFeatureFilter(";
  protected final String TEXT_440 = ".eINSTANCE.get";
  protected final String TEXT_441 = "()));";
  protected final String TEXT_442 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_443 = NL + "\t\t\t";
  protected final String TEXT_444 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_445 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_446 = NL + "\t\t\t";
  protected final String TEXT_447 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_448 = NL + "\t\t\t";
  protected final String TEXT_449 = " filter = ";
  protected final String TEXT_450 = ".NOT_TOUCH;";
  protected final String TEXT_451 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_452 = " getCreateNotationalElementCommand(";
  protected final String TEXT_453 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_454 = " linkDescriptor = (";
  protected final String TEXT_455 = ") descriptor;";
  protected final String TEXT_456 = NL;
  protected final String TEXT_457 = "\t\t\t";
  protected final String TEXT_458 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_459 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_460 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_461 = NL + "\t\t\tcase ";
  protected final String TEXT_462 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_463 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_464 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_465 = NL + "\t\t\tcase ";
  protected final String TEXT_466 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_467 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_468 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_469 = "(";
  protected final String TEXT_470 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_471 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_472 = " getSemanticChildLinks() {";
  protected final String TEXT_473 = NL;
  protected final String TEXT_474 = "\t";
  protected final String TEXT_475 = " result = new ";
  protected final String TEXT_476 = "();";
  protected final String TEXT_477 = NL + "\t";
  protected final String TEXT_478 = " modelObject = ";
  protected final String TEXT_479 = ".getElement();" + NL + "\t";
  protected final String TEXT_480 = " nextValue;";
  protected final String TEXT_481 = NL + "\tint linkVID;";
  protected final String TEXT_482 = NL + "\tfor(";
  protected final String TEXT_483 = " it = ";
  protected final String TEXT_484 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_485 = ") it.next();";
  protected final String TEXT_486 = NL + "\tnextValue = (";
  protected final String TEXT_487 = ")";
  protected final String TEXT_488 = ";";
  protected final String TEXT_489 = NL + "\tlinkVID = ";
  protected final String TEXT_490 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_491 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_492 = NL + "\tcase ";
  protected final String TEXT_493 = ".VISUAL_ID: {";
  protected final String TEXT_494 = NL + "\tif (";
  protected final String TEXT_495 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_496 = NL + "\t\t";
  protected final String TEXT_497 = " source = (";
  protected final String TEXT_498 = ")";
  protected final String TEXT_499 = ";";
  protected final String TEXT_500 = NL + "\t\t";
  protected final String TEXT_501 = " source = ";
  protected final String TEXT_502 = ".getElement();";
  protected final String TEXT_503 = NL + "\t\t";
  protected final String TEXT_504 = " target = (";
  protected final String TEXT_505 = ")";
  protected final String TEXT_506 = ";";
  protected final String TEXT_507 = NL + "\t\t";
  protected final String TEXT_508 = " target = ";
  protected final String TEXT_509 = ".getElement();";
  protected final String TEXT_510 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_511 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_512 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_513 = NL + "\t}";
d537 12
a548 12
  protected final String TEXT_516 = NL + "\tfor(";
  protected final String TEXT_517 = " it = ";
  protected final String TEXT_518 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_519 = ") it.next();";
  protected final String TEXT_520 = NL + "\tnextValue = (";
  protected final String TEXT_521 = ")";
  protected final String TEXT_522 = ";";
  protected final String TEXT_523 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_524 = NL + "\t\tresult.add(new ";
  protected final String TEXT_525 = "(modelObject, nextValue, null, ";
  protected final String TEXT_526 = ".VISUAL_ID));";
  protected final String TEXT_527 = NL + "\t}";
d550 41
a590 41
  protected final String TEXT_529 = NL + "\treturn result;";
  protected final String TEXT_530 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_531 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_532 = " result = new ";
  protected final String TEXT_533 = "();" + NL + "\t\t\t";
  protected final String TEXT_534 = " allLinks = ";
  protected final String TEXT_535 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_536 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_537 = " next = (";
  protected final String TEXT_538 = ") it.next();";
  protected final String TEXT_539 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_540 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_541 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_542 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_543 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_544 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_545 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_546 = ".VISUAL_ID:";
  protected final String TEXT_547 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_548 = NL + "\t\t\t\t} else {";
  protected final String TEXT_549 = NL + "\t\t\t\t}";
  protected final String TEXT_550 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_551 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_552 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_553 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_554 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_555 = ".VISUAL_ID:";
  protected final String TEXT_556 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_557 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_558 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_559 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_560 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_561 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_562 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_563 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_564 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_565 = " domainModelEditDomain = ";
  protected final String TEXT_566 = ".getEditingDomain(";
  protected final String TEXT_567 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_568 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_569 = NL;
d592 36
a627 36
  protected final String TEXT_571 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_572 = " domainModelRefresher = new ";
  protected final String TEXT_573 = "(this);" + NL;
  protected final String TEXT_574 = NL;
  protected final String TEXT_575 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_576 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_577 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_578 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_579 = NL;
  protected final String TEXT_580 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_581 = NL + "\t\t";
  protected final String TEXT_582 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_583 = ") ";
  protected final String TEXT_584 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_585 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_586 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_587 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_588 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_589 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_590 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_591 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_592 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_593 = "\t" + NL + "\t}";
  protected final String TEXT_594 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_595 = " createdFont;";
  protected final String TEXT_596 = "\t" + NL;
  protected final String TEXT_597 = NL;
  protected final String TEXT_598 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_599 = " style = (";
  protected final String TEXT_600 = ")  ";
  protected final String TEXT_601 = ".getStyle(";
  protected final String TEXT_602 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_603 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_604 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_605 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_606 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
d631 57
a687 57
  protected final String TEXT_610 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_611 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_612 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_613 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_614 = " createdBackgroundColor;" + NL;
  protected final String TEXT_615 = NL;
  protected final String TEXT_616 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_617 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_618 = " feature, ";
  protected final String TEXT_619 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_620 = "();";
  protected final String TEXT_621 = NL;
  protected final String TEXT_622 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_623 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_624 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_625 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_626 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_627 = NL;
  protected final String TEXT_628 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_629 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_630 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_631 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_632 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_633 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_634 = NL;
  protected final String TEXT_635 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_636 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_637 = NL;
  protected final String TEXT_638 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_639 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_640 = NL;
  protected final String TEXT_641 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_642 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_643 = NL;
  protected final String TEXT_644 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_645 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_646 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_647 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_648 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_649 = NL;
  protected final String TEXT_650 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_651 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_652 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_653 = NL;
  protected final String TEXT_654 = NL;
  protected final String TEXT_655 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_656 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_657 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_658 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_659 = NL;
  protected final String TEXT_660 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_661 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_662 = "()";
  protected final String TEXT_663 = " {" + NL + "\t\t\tprotected ";
  protected final String TEXT_664 = " getGraphicalEditPart() {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_665 = ".this;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_666 = ");";
d689 42
a730 110
  protected final String TEXT_668 = "\t\tinstallEditPolicy(";
  protected final String TEXT_669 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_670 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_671 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_672 = NL;
  protected final String TEXT_673 = "\t\t\t\t\tprotected ";
  protected final String TEXT_674 = " getDirectEditCommand(";
  protected final String TEXT_675 = " request) {";
  protected final String TEXT_676 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_677 = ".INSTANCE;";
  protected final String TEXT_678 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_679 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_680 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_681 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_682 = "(";
  protected final String TEXT_683 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_684 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_685 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_686 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_687 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_688 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_689 = " editingDomain = ";
  protected final String TEXT_690 = ".getEditingDomain(";
  protected final String TEXT_691 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_692 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_693 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_694 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_695 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_696 = " createDomainModelCommand(";
  protected final String TEXT_697 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_698 = " element = ";
  protected final String TEXT_699 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_700 = " result = new ";
  protected final String TEXT_701 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_702 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_703 = " ";
  protected final String TEXT_704 = "feature = (";
  protected final String TEXT_705 = ") ";
  protected final String TEXT_706 = ".eINSTANCE.get";
  protected final String TEXT_707 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_708 = ".parseValue(feature, values[";
  protected final String TEXT_709 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_710 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_711 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_712 = " ";
  protected final String TEXT_713 = "values = new ";
  protected final String TEXT_714 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_715 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_716 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_717 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_718 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_719 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_720 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_721 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_722 = NL + "\t\t\t\t});";
  protected final String TEXT_723 = NL + "\t\t}" + NL;
  protected final String TEXT_724 = NL;
  protected final String TEXT_725 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_726 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_727 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_728 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_729 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_730 = "(this, ";
  protected final String TEXT_731 = ".class, new ";
  protected final String TEXT_732 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_733 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_734 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_735 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_736 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_737 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_738 = NL;
  protected final String TEXT_739 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_740 = " domainModelRefresher = new ";
  protected final String TEXT_741 = "(this);" + NL;
  protected final String TEXT_742 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_743 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_744 = " getImage() {" + NL + "\t\t\t";
  protected final String TEXT_745 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelIcon();" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_746 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_747 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_748 = " nextChild = (";
  protected final String TEXT_749 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_750 = ".getVisualID(nextChild) == ";
  protected final String TEXT_751 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_752 = ") ";
  protected final String TEXT_753 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_754 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_755 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_756 = ".eINSTANCE.get";
  protected final String TEXT_757 = "(), labelRefresher);";
  protected final String TEXT_758 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_759 = ".eINSTANCE.get";
  protected final String TEXT_760 = "(), labelRefresher);";
  protected final String TEXT_761 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_762 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_763 = " result = new ";
  protected final String TEXT_764 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_765 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_766 = " next = (";
  protected final String TEXT_767 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_768 = " style = (";
  protected final String TEXT_769 = ") next.getStyle(";
  protected final String TEXT_770 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_771 = ".getVisualID(next)) {";
  protected final String TEXT_772 = NL + "\t\t\t\tcase ";
  protected final String TEXT_773 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_774 = NL + "\t\t\t\tcase ";
  protected final String TEXT_775 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_776 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_777 = NL;
d974 2
d977 1
a977 1
    stringBuffer.append(TEXT_27);
a979 1
    stringBuffer.append(TEXT_28);
d981 1
d983 1
a983 1
    stringBuffer.append(TEXT_30);
a984 2
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d988 2
d991 1
a991 1
    stringBuffer.append(TEXT_34);
d995 1
a995 1
    stringBuffer.append(TEXT_35);
d997 1
a997 1
    stringBuffer.append(TEXT_36);
d1001 1
a1001 1
    stringBuffer.append(TEXT_37);
d1003 1
a1003 1
    stringBuffer.append(TEXT_38);
d1005 1
a1005 1
    stringBuffer.append(TEXT_39);
a1006 1
    stringBuffer.append(TEXT_40);
a1008 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1016 1
d1018 1
d1028 1
a1028 1
    stringBuffer.append(TEXT_48);
d1030 1
a1030 1
    stringBuffer.append(TEXT_49);
d1032 1
a1032 1
    stringBuffer.append(TEXT_50);
d1036 1
a1036 1
    stringBuffer.append(TEXT_51);
d1038 1
a1038 1
    stringBuffer.append(TEXT_52);
d1040 1
a1040 1
    stringBuffer.append(TEXT_53);
d1044 1
a1044 1
    stringBuffer.append(TEXT_54);
d1046 1
a1046 1
    stringBuffer.append(TEXT_55);
d1048 1
a1048 1
    stringBuffer.append(TEXT_56);
d1054 1
a1054 1
    stringBuffer.append(TEXT_57);
d1062 1
a1062 1
    stringBuffer.append(TEXT_58);
d1064 1
a1064 1
    stringBuffer.append(TEXT_59);
a1065 1
    stringBuffer.append(TEXT_60);
d1067 1
d1071 1
a1071 1
    stringBuffer.append(TEXT_62);
d1073 1
a1073 1
    stringBuffer.append(TEXT_63);
d1075 1
a1075 1
    stringBuffer.append(TEXT_64);
d1077 1
a1077 1
    stringBuffer.append(TEXT_65);
d1085 1
a1085 1
    stringBuffer.append(TEXT_66);
d1087 1
a1087 1
    stringBuffer.append(TEXT_67);
d1089 1
a1089 1
    stringBuffer.append(TEXT_68);
d1091 1
a1091 1
    stringBuffer.append(TEXT_69);
d1093 1
a1093 1
    stringBuffer.append(TEXT_70);
d1095 1
a1095 1
    stringBuffer.append(TEXT_71);
d1101 1
a1101 1
    stringBuffer.append(TEXT_72);
d1105 1
a1105 1
    stringBuffer.append(TEXT_73);
d1112 1
a1112 1
    stringBuffer.append(TEXT_74);
d1116 1
a1116 1
    stringBuffer.append(TEXT_75);
d1118 1
a1118 1
    stringBuffer.append(TEXT_76);
d1122 1
a1122 1
    stringBuffer.append(TEXT_77);
d1124 1
a1124 1
    stringBuffer.append(TEXT_78);
a1128 2
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d1132 2
a1136 2
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d1140 1
a1140 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1144 2
a1146 2
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1150 1
a1150 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1154 2
d1157 1
a1157 1
    stringBuffer.append(TEXT_92);
a1161 2
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
d1165 2
d1170 1
a1170 1
    stringBuffer.append(TEXT_96);
d1177 1
a1177 1
    stringBuffer.append(TEXT_97);
d1179 1
a1179 1
    stringBuffer.append(TEXT_98);
d1183 1
a1183 1
    stringBuffer.append(TEXT_99);
d1189 1
a1189 1
    stringBuffer.append(TEXT_100);
d1193 1
a1193 1
    stringBuffer.append(TEXT_101);
d1198 1
a1198 1
    stringBuffer.append(TEXT_102);
d1203 1
a1203 1
    stringBuffer.append(TEXT_103);
a1206 2
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d1210 2
d1213 1
a1213 1
    stringBuffer.append(TEXT_107);
d1215 1
a1215 1
    stringBuffer.append(TEXT_108);
d1217 1
a1217 1
    stringBuffer.append(TEXT_109);
d1221 1
a1221 1
    stringBuffer.append(TEXT_110);
d1225 1
a1225 1
    stringBuffer.append(TEXT_111);
d1227 1
a1227 1
    stringBuffer.append(TEXT_112);
d1229 1
a1229 1
    stringBuffer.append(TEXT_113);
d1231 1
a1231 1
    stringBuffer.append(TEXT_114);
d1233 1
a1233 1
    stringBuffer.append(TEXT_115);
d1235 1
a1235 1
    stringBuffer.append(TEXT_116);
a1238 2
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d1242 2
d1245 1
a1245 1
    stringBuffer.append(TEXT_120);
d1249 1
a1249 1
    stringBuffer.append(TEXT_121);
d1251 1
a1251 1
    stringBuffer.append(TEXT_122);
d1261 1
a1261 1
    stringBuffer.append(TEXT_123);
d1263 1
a1263 1
    stringBuffer.append(TEXT_124);
d1265 1
a1265 1
    stringBuffer.append(TEXT_125);
d1267 1
a1267 1
    stringBuffer.append(TEXT_126);
d1269 1
a1269 1
    stringBuffer.append(TEXT_127);
d1271 1
a1271 1
    stringBuffer.append(TEXT_128);
a1274 2
    stringBuffer.append(TEXT_129);
    stringBuffer.append(figureQualifiedClassName);
d1278 2
a1280 2
    stringBuffer.append(TEXT_132);
    }
d1284 2
a1286 2
    stringBuffer.append(TEXT_135);
    stringBuffer.append(figureQualifiedClassName);
d1290 2
d1293 1
a1293 1
    stringBuffer.append(TEXT_138);
d1295 1
a1295 1
    stringBuffer.append(TEXT_139);
a1296 2
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d1300 2
a1305 2
    stringBuffer.append(TEXT_143);
    stringBuffer.append(layoutClassName);
d1309 2
d1312 1
a1312 1
    stringBuffer.append(TEXT_146);
d1314 1
a1314 1
    stringBuffer.append(TEXT_147);
d1316 1
a1316 1
    stringBuffer.append(TEXT_148);
d1318 1
a1318 1
    stringBuffer.append(TEXT_149);
d1320 1
a1320 1
    stringBuffer.append(TEXT_150);
a1321 2
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1325 2
d1330 1
a1330 1
    stringBuffer.append(TEXT_154);
d1332 1
a1332 1
    stringBuffer.append(TEXT_155);
a1339 2
    stringBuffer.append(TEXT_156);
    stringBuffer.append(labelEditPart);
d1343 2
d1346 1
a1346 1
    stringBuffer.append(TEXT_159);
d1348 1
a1348 1
    stringBuffer.append(TEXT_160);
d1357 1
a1357 1
    stringBuffer.append(TEXT_161);
d1359 1
a1359 1
    stringBuffer.append(TEXT_162);
d1361 1
a1361 1
    stringBuffer.append(TEXT_163);
d1363 1
a1363 1
    stringBuffer.append(TEXT_164);
d1365 1
a1365 1
    stringBuffer.append(TEXT_165);
d1369 1
a1369 1
    stringBuffer.append(TEXT_166);
d1377 1
a1377 1
    stringBuffer.append(TEXT_167);
d1379 1
a1379 1
    stringBuffer.append(TEXT_168);
d1381 1
a1381 1
    stringBuffer.append(TEXT_169);
d1383 1
a1383 1
    stringBuffer.append(TEXT_170);
d1385 1
a1385 1
    stringBuffer.append(TEXT_171);
d1389 1
a1389 1
    stringBuffer.append(TEXT_172);
d1393 1
a1393 1
    stringBuffer.append(TEXT_173);
d1395 1
a1395 1
    stringBuffer.append(TEXT_174);
d1399 1
a1399 1
    stringBuffer.append(TEXT_175);
a1400 2
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1404 2
d1407 1
a1407 1
    stringBuffer.append(TEXT_179);
d1409 1
a1409 1
    stringBuffer.append(TEXT_180);
d1411 1
a1411 1
    stringBuffer.append(TEXT_181);
d1415 1
a1415 1
    stringBuffer.append(TEXT_182);
d1417 1
a1417 1
    stringBuffer.append(TEXT_183);
d1419 1
a1419 1
    stringBuffer.append(TEXT_184);
a1420 2
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1424 1
d1427 1
d1429 1
a1429 1
    stringBuffer.append(TEXT_190);
d1431 1
a1431 1
    stringBuffer.append(TEXT_191);
d1433 1
a1433 1
    stringBuffer.append(TEXT_192);
d1435 1
a1435 1
    stringBuffer.append(TEXT_193);
a1436 2
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1440 2
d1443 1
a1443 1
    stringBuffer.append(TEXT_197);
d1451 1
a1451 1
    stringBuffer.append(TEXT_198);
d1453 1
a1453 1
    stringBuffer.append(TEXT_199);
d1457 1
a1457 1
    stringBuffer.append(TEXT_200);
d1461 1
a1461 1
    stringBuffer.append(TEXT_201);
d1463 1
a1463 1
    stringBuffer.append(TEXT_202);
d1468 1
a1468 1
    stringBuffer.append(TEXT_203);
d1470 1
a1470 1
    stringBuffer.append(TEXT_204);
d1474 1
a1474 1
    stringBuffer.append(TEXT_205);
a1475 2
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.LayerManager"));
d1479 2
d1482 1
a1482 1
    stringBuffer.append(TEXT_209);
d1487 1
a1487 1
    stringBuffer.append(TEXT_210);
d1489 1
a1489 1
    stringBuffer.append(TEXT_211);
d1494 1
a1494 1
    stringBuffer.append(TEXT_212);
d1496 1
a1496 1
    stringBuffer.append(TEXT_213);
d1500 1
a1500 1
    stringBuffer.append(TEXT_214);
d1505 1
a1505 1
    stringBuffer.append(TEXT_215);
d1507 1
a1507 1
    stringBuffer.append(TEXT_216);
d1511 1
a1511 1
    stringBuffer.append(TEXT_217);
d1513 1
a1513 1
    stringBuffer.append(TEXT_218);
d1515 1
a1515 1
    stringBuffer.append(TEXT_219);
d1520 1
a1520 1
    stringBuffer.append(TEXT_220);
d1525 1
a1525 1
    stringBuffer.append(TEXT_221);
d1527 1
a1527 1
    stringBuffer.append(TEXT_222);
d1529 1
a1529 1
    stringBuffer.append(TEXT_223);
d1533 1
a1533 1
    stringBuffer.append(TEXT_224);
d1535 1
a1535 1
    stringBuffer.append(TEXT_225);
d1539 1
a1539 1
    stringBuffer.append(TEXT_226);
d1541 1
a1541 1
    stringBuffer.append(TEXT_227);
d1543 1
a1543 1
    stringBuffer.append(TEXT_228);
d1548 1
a1548 1
    stringBuffer.append(TEXT_229);
d1553 1
a1553 1
    stringBuffer.append(TEXT_230);
d1555 1
a1555 1
    stringBuffer.append(TEXT_231);
d1557 1
a1557 1
    stringBuffer.append(TEXT_232);
d1561 1
a1561 1
    stringBuffer.append(TEXT_233);
d1568 1
a1568 1
    stringBuffer.append(TEXT_234);
a1569 2
    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1573 2
d1576 1
a1576 1
    stringBuffer.append(TEXT_238);
d1580 1
a1580 1
    stringBuffer.append(TEXT_239);
a1581 2
    stringBuffer.append(TEXT_240);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1587 2
d1590 1
a1590 1
    stringBuffer.append(TEXT_244);
a1591 2
    stringBuffer.append(TEXT_245);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1597 2
d1600 1
a1600 1
    stringBuffer.append(TEXT_249);
d1602 1
a1602 1
    stringBuffer.append(TEXT_250);
d1604 1
a1604 1
    stringBuffer.append(TEXT_251);
d1606 1
a1606 1
    stringBuffer.append(TEXT_252);
d1608 1
a1608 1
    stringBuffer.append(TEXT_253);
d1610 1
a1610 1
    stringBuffer.append(TEXT_254);
d1612 1
a1612 1
    stringBuffer.append(TEXT_255);
d1614 1
a1614 1
    stringBuffer.append(TEXT_256);
d1616 1
a1616 1
    stringBuffer.append(TEXT_257);
d1618 1
a1618 1
    stringBuffer.append(TEXT_258);
d1620 1
a1620 1
    stringBuffer.append(TEXT_259);
d1622 1
a1622 1
    stringBuffer.append(TEXT_260);
d1626 1
a1626 1
    stringBuffer.append(TEXT_261);
d1628 1
a1628 1
    stringBuffer.append(TEXT_262);
d1630 1
a1630 1
    stringBuffer.append(TEXT_263);
d1634 1
a1634 1
    stringBuffer.append(TEXT_264);
d1636 1
a1636 1
    stringBuffer.append(TEXT_265);
d1638 1
a1638 1
    stringBuffer.append(TEXT_266);
d1642 1
a1642 1
    stringBuffer.append(TEXT_267);
d1649 1
a1649 1
    stringBuffer.append(TEXT_268);
d1653 1
a1653 1
    stringBuffer.append(TEXT_269);
d1657 1
a1657 1
    stringBuffer.append(TEXT_270);
d1664 1
a1664 1
    stringBuffer.append(TEXT_271);
d1668 1
a1668 1
    stringBuffer.append(TEXT_272);
a1677 1
    stringBuffer.append(TEXT_273);
d1679 1
d1681 1
a1681 1
    stringBuffer.append(TEXT_275);
d1683 1
a1683 1
    stringBuffer.append(TEXT_276);
d1685 1
a1685 1
    stringBuffer.append(TEXT_277);
a1686 2
    stringBuffer.append(TEXT_278);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
d1692 2
d1708 1
a1708 1
    stringBuffer.append(TEXT_282);
a1709 2
    stringBuffer.append(TEXT_283);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1713 2
d1718 1
a1718 1
    stringBuffer.append(TEXT_286);
d1720 1
a1720 1
    stringBuffer.append(TEXT_287);
a1738 2
    stringBuffer.append(TEXT_288);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1742 2
d1745 1
a1745 1
    stringBuffer.append(TEXT_291);
d1747 1
a1747 1
    stringBuffer.append(TEXT_292);
d1751 1
a1751 1
    stringBuffer.append(TEXT_293);
d1753 1
a1753 1
    stringBuffer.append(TEXT_294);
d1755 1
a1755 1
    stringBuffer.append(TEXT_295);
d1757 1
a1757 1
    stringBuffer.append(TEXT_296);
d1765 1
a1765 1
    stringBuffer.append(TEXT_297);
d1767 1
a1767 1
    stringBuffer.append(TEXT_298);
d1769 1
a1769 1
    stringBuffer.append(TEXT_299);
a1773 2
    stringBuffer.append(TEXT_300);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1777 2
d1780 1
a1780 1
    stringBuffer.append(TEXT_303);
d1789 1
a1789 1
    stringBuffer.append(TEXT_304);
d1793 1
a1793 1
    stringBuffer.append(TEXT_305);
d1795 1
a1795 1
    stringBuffer.append(TEXT_306);
a1800 2
    stringBuffer.append(TEXT_307);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d1804 2
d1809 1
a1809 1
    stringBuffer.append(TEXT_310);
d1813 1
a1813 1
    stringBuffer.append(TEXT_311);
d1815 1
a1815 1
    stringBuffer.append(TEXT_312);
d1817 1
a1817 1
    stringBuffer.append(TEXT_313);
a1821 1
    stringBuffer.append(TEXT_314);
d1823 1
d1825 1
a1825 1
    stringBuffer.append(TEXT_316);
d1835 1
a1835 1
    stringBuffer.append(TEXT_317);
d1837 1
a1837 1
    stringBuffer.append(TEXT_318);
d1839 1
a1839 1
    stringBuffer.append(TEXT_319);
d1841 1
a1841 1
    stringBuffer.append(TEXT_320);
d1843 1
a1843 1
    stringBuffer.append(TEXT_321);
d1854 1
a1854 1
    stringBuffer.append(TEXT_322);
d1856 1
a1856 1
    stringBuffer.append(TEXT_323);
d1858 1
a1858 1
    stringBuffer.append(TEXT_324);
d1860 1
a1860 1
    stringBuffer.append(TEXT_325);
d1864 1
a1864 1
    stringBuffer.append(TEXT_326);
d1868 1
a1868 1
    stringBuffer.append(TEXT_327);
d1870 1
a1870 1
    stringBuffer.append(TEXT_328);
d1874 1
a1874 1
    stringBuffer.append(TEXT_329);
d1878 1
a1878 1
    stringBuffer.append(TEXT_330);
a1879 1
    stringBuffer.append(TEXT_331);
d1881 1
d1885 1
a1885 1
    stringBuffer.append(TEXT_333);
d1887 1
a1887 1
    stringBuffer.append(TEXT_334);
d1891 1
a1891 1
    stringBuffer.append(TEXT_335);
d1893 1
a1893 1
    stringBuffer.append(TEXT_336);
d1895 1
a1895 1
    stringBuffer.append(TEXT_337);
d1913 1
a1913 1
    stringBuffer.append(TEXT_338);
d1915 1
a1915 1
    stringBuffer.append(TEXT_339);
a1916 2
    stringBuffer.append(TEXT_340);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1920 2
d1930 1
a1930 1
    stringBuffer.append(TEXT_343);
d1932 1
a1932 1
    stringBuffer.append(TEXT_344);
d1934 1
a1934 1
    stringBuffer.append(TEXT_345);
d1936 1
a1936 1
    stringBuffer.append(TEXT_346);
d1940 1
a1940 1
    stringBuffer.append(TEXT_347);
d1942 1
a1942 1
    stringBuffer.append(TEXT_348);
d1944 1
a1944 1
    stringBuffer.append(TEXT_349);
d1948 1
a1948 1
    stringBuffer.append(TEXT_350);
d1950 1
a1950 1
    stringBuffer.append(TEXT_351);
d1955 1
a1955 1
    stringBuffer.append(TEXT_352);
d1962 1
a1962 1
    stringBuffer.append(TEXT_353);
d1964 1
a1964 1
    stringBuffer.append(TEXT_354);
d1968 1
a1968 1
    stringBuffer.append(TEXT_355);
d1970 1
a1970 1
    stringBuffer.append(TEXT_356);
d1974 1
a1974 1
    stringBuffer.append(TEXT_357);
d1976 1
a1976 1
    stringBuffer.append(TEXT_358);
d1980 1
a1980 1
    stringBuffer.append(TEXT_359);
d1984 1
a1984 1
    stringBuffer.append(TEXT_360);
d1990 1
a1990 1
    stringBuffer.append(TEXT_361);
d1995 1
a1995 1
    stringBuffer.append(TEXT_362);
d2000 1
a2000 1
    stringBuffer.append(TEXT_363);
d2004 1
a2004 1
    stringBuffer.append(TEXT_364);
d2006 1
a2006 1
    stringBuffer.append(TEXT_365);
d2008 1
a2008 1
    stringBuffer.append(TEXT_366);
d2010 1
a2010 1
    stringBuffer.append(TEXT_367);
d2012 1
a2012 1
    stringBuffer.append(TEXT_368);
d2014 1
a2014 1
    stringBuffer.append(TEXT_369);
d2016 1
a2016 1
    stringBuffer.append(TEXT_370);
d2018 1
a2018 1
    stringBuffer.append(TEXT_371);
d2020 1
a2020 1
    stringBuffer.append(TEXT_372);
d2022 1
a2022 1
    stringBuffer.append(TEXT_373);
d2024 1
a2024 1
    stringBuffer.append(TEXT_374);
d2026 1
a2026 1
    stringBuffer.append(TEXT_375);
d2030 1
a2030 1
    stringBuffer.append(TEXT_376);
d2034 1
a2034 1
    stringBuffer.append(TEXT_377);
d2036 1
a2036 1
    stringBuffer.append(TEXT_378);
d2038 1
a2038 1
    stringBuffer.append(TEXT_379);
a2039 2
    stringBuffer.append(TEXT_380);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
d2043 2
d2046 1
a2046 1
    stringBuffer.append(TEXT_383);
d2048 1
a2048 1
    stringBuffer.append(TEXT_384);
d2050 1
a2050 1
    stringBuffer.append(TEXT_385);
d2063 1
a2063 1
    stringBuffer.append(TEXT_386);
a2064 2
    stringBuffer.append(TEXT_387);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d2068 2
a2073 2
    stringBuffer.append(TEXT_390);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d2077 2
d2080 1
a2080 1
    stringBuffer.append(TEXT_393);
d2082 1
a2082 1
    stringBuffer.append(TEXT_394);
d2084 1
a2084 1
    stringBuffer.append(TEXT_395);
d2086 1
a2086 1
    stringBuffer.append(TEXT_396);
d2088 1
a2088 1
    stringBuffer.append(TEXT_397);
d2090 1
a2090 1
    stringBuffer.append(TEXT_398);
d2092 1
a2092 1
    stringBuffer.append(TEXT_399);
d2096 1
a2096 1
    stringBuffer.append(TEXT_400);
d2098 1
a2098 1
    stringBuffer.append(TEXT_401);
d2111 1
a2111 1
    stringBuffer.append(TEXT_402);
a2124 2
    stringBuffer.append(TEXT_403);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d2128 2
d2131 1
a2131 1
    stringBuffer.append(TEXT_406);
d2133 1
a2133 1
    stringBuffer.append(TEXT_407);
d2137 1
a2137 1
    stringBuffer.append(TEXT_408);
d2139 1
a2139 1
    stringBuffer.append(TEXT_409);
d2141 1
a2141 1
    stringBuffer.append(TEXT_410);
d2143 1
a2143 1
    stringBuffer.append(TEXT_411);
d2150 1
a2150 1
    stringBuffer.append(TEXT_412);
a2163 2
    stringBuffer.append(TEXT_413);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d2167 2
d2170 1
a2170 1
    stringBuffer.append(TEXT_416);
d2172 1
a2172 1
    stringBuffer.append(TEXT_417);
d2176 1
a2176 1
    stringBuffer.append(TEXT_418);
d2178 1
a2178 1
    stringBuffer.append(TEXT_419);
d2180 1
a2180 1
    stringBuffer.append(TEXT_420);
d2182 1
a2182 1
    stringBuffer.append(TEXT_421);
d2189 1
a2189 1
    stringBuffer.append(TEXT_422);
a2202 2
    stringBuffer.append(TEXT_423);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d2206 2
d2209 1
a2209 1
    stringBuffer.append(TEXT_426);
d2211 1
a2211 1
    stringBuffer.append(TEXT_427);
d2215 1
a2215 1
    stringBuffer.append(TEXT_428);
d2217 1
a2217 1
    stringBuffer.append(TEXT_429);
d2219 1
a2219 1
    stringBuffer.append(TEXT_430);
d2221 1
a2221 1
    stringBuffer.append(TEXT_431);
d2231 1
a2231 1
    stringBuffer.append(TEXT_432);
a2244 2
    stringBuffer.append(TEXT_433);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d2248 2
d2251 1
a2251 1
    stringBuffer.append(TEXT_436);
d2253 1
a2253 1
    stringBuffer.append(TEXT_437);
d2257 1
a2257 1
    stringBuffer.append(TEXT_438);
d2259 1
a2259 1
    stringBuffer.append(TEXT_439);
d2261 1
a2261 1
    stringBuffer.append(TEXT_440);
d2263 1
a2263 1
    stringBuffer.append(TEXT_441);
d2272 1
a2272 1
    stringBuffer.append(TEXT_442);
d2277 1
a2277 1
    stringBuffer.append(TEXT_443);
d2279 1
a2279 1
    stringBuffer.append(TEXT_444);
d2286 1
a2286 1
    stringBuffer.append(TEXT_445);
d2291 1
a2291 1
    stringBuffer.append(TEXT_446);
d2293 1
a2293 1
    stringBuffer.append(TEXT_447);
a2298 2
    stringBuffer.append(TEXT_448);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
d2302 2
d2308 1
a2308 1
    stringBuffer.append(TEXT_451);
d2310 1
a2310 1
    stringBuffer.append(TEXT_452);
a2311 2
    stringBuffer.append(TEXT_453);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
d2315 2
a2322 1
    stringBuffer.append(TEXT_456);
a2323 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d2327 2
d2330 1
a2330 1
    stringBuffer.append(TEXT_460);
d2339 1
a2339 1
    stringBuffer.append(TEXT_461);
d2341 1
a2341 1
    stringBuffer.append(TEXT_462);
d2343 1
a2343 1
    stringBuffer.append(TEXT_463);
d2345 1
a2345 1
    stringBuffer.append(TEXT_464);
d2351 1
a2351 1
    stringBuffer.append(TEXT_465);
d2353 1
a2353 1
    stringBuffer.append(TEXT_466);
d2355 1
a2355 1
    stringBuffer.append(TEXT_467);
d2359 1
a2359 1
    stringBuffer.append(TEXT_468);
d2361 1
a2361 1
    stringBuffer.append(TEXT_469);
d2363 1
a2363 1
    stringBuffer.append(TEXT_470);
d2367 1
a2367 1
    stringBuffer.append(TEXT_471);
d2369 1
a2369 1
    stringBuffer.append(TEXT_472);
a2374 1
    stringBuffer.append(TEXT_473);
d2376 1
d2378 1
a2378 1
    stringBuffer.append(TEXT_475);
d2380 1
a2380 1
    stringBuffer.append(TEXT_476);
d2403 1
a2403 1
    stringBuffer.append(TEXT_477);
d2405 1
a2405 1
    stringBuffer.append(TEXT_478);
d2407 1
a2407 1
    stringBuffer.append(TEXT_479);
d2409 1
a2409 1
    stringBuffer.append(TEXT_480);
d2414 1
a2414 1
    stringBuffer.append(TEXT_481);
d2423 1
a2423 1
    stringBuffer.append(TEXT_482);
d2425 1
a2425 1
    stringBuffer.append(TEXT_483);
d2427 1
a2427 1
    stringBuffer.append(TEXT_484);
d2429 1
a2429 1
    stringBuffer.append(TEXT_485);
d2433 1
a2433 1
    stringBuffer.append(TEXT_486);
d2435 1
a2435 1
    stringBuffer.append(TEXT_487);
d2437 1
a2437 1
    stringBuffer.append(TEXT_488);
d2441 1
a2441 1
    stringBuffer.append(TEXT_489);
d2443 1
a2443 1
    stringBuffer.append(TEXT_490);
d2448 1
a2448 1
    stringBuffer.append(TEXT_491);
d2456 1
a2456 1
    stringBuffer.append(TEXT_492);
d2458 1
a2458 1
    stringBuffer.append(TEXT_493);
d2462 1
a2462 1
    stringBuffer.append(TEXT_494);
d2464 1
a2464 1
    stringBuffer.append(TEXT_495);
a2468 2
    stringBuffer.append(TEXT_496);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d2472 2
d2475 1
a2475 1
    stringBuffer.append(TEXT_499);
d2479 1
a2479 1
    stringBuffer.append(TEXT_500);
d2481 1
a2481 1
    stringBuffer.append(TEXT_501);
d2483 1
a2483 1
    stringBuffer.append(TEXT_502);
a2487 2
    stringBuffer.append(TEXT_503);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d2491 2
d2494 1
a2494 1
    stringBuffer.append(TEXT_506);
d2498 1
a2498 1
    stringBuffer.append(TEXT_507);
d2500 1
a2500 1
    stringBuffer.append(TEXT_508);
d2502 1
a2502 1
    stringBuffer.append(TEXT_509);
d2506 1
a2506 1
    stringBuffer.append(TEXT_510);
d2508 1
a2508 1
    stringBuffer.append(TEXT_511);
d2512 1
a2512 1
    stringBuffer.append(TEXT_512);
d2516 1
a2516 1
    stringBuffer.append(TEXT_513);
d2524 1
a2524 1
    stringBuffer.append(TEXT_514);
d2529 1
a2529 1
    stringBuffer.append(TEXT_515);
d2539 1
a2539 1
    stringBuffer.append(TEXT_516);
d2541 1
a2541 1
    stringBuffer.append(TEXT_517);
d2543 1
a2543 1
    stringBuffer.append(TEXT_518);
d2545 1
a2545 1
    stringBuffer.append(TEXT_519);
d2549 1
a2549 1
    stringBuffer.append(TEXT_520);
d2551 1
a2551 1
    stringBuffer.append(TEXT_521);
d2553 1
a2553 1
    stringBuffer.append(TEXT_522);
d2557 1
a2557 1
    stringBuffer.append(TEXT_523);
d2562 1
a2562 1
    stringBuffer.append(TEXT_524);
d2564 1
a2564 1
    stringBuffer.append(TEXT_525);
d2566 1
a2566 1
    stringBuffer.append(TEXT_526);
d2570 1
a2570 1
    stringBuffer.append(TEXT_527);
d2574 1
a2574 1
    stringBuffer.append(TEXT_528);
d2579 1
a2579 1
    stringBuffer.append(TEXT_529);
a2582 2
    stringBuffer.append(TEXT_530);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d2586 2
d2589 1
a2589 1
    stringBuffer.append(TEXT_533);
d2591 1
a2591 1
    stringBuffer.append(TEXT_534);
d2593 1
a2593 1
    stringBuffer.append(TEXT_535);
a2594 2
    stringBuffer.append(TEXT_536);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d2598 2
a2602 2
    stringBuffer.append(TEXT_539);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d2606 2
d2612 1
a2612 1
    stringBuffer.append(TEXT_542);
d2614 1
a2614 1
    stringBuffer.append(TEXT_543);
d2616 1
a2616 1
    stringBuffer.append(TEXT_544);
d2621 1
a2621 1
    stringBuffer.append(TEXT_545);
d2623 1
a2623 1
    stringBuffer.append(TEXT_546);
d2627 1
a2627 1
    stringBuffer.append(TEXT_547);
d2631 1
a2631 1
    stringBuffer.append(TEXT_548);
d2635 1
a2635 1
    stringBuffer.append(TEXT_549);
d2642 1
a2642 1
    stringBuffer.append(TEXT_550);
d2646 1
a2646 1
    stringBuffer.append(TEXT_551);
d2648 1
a2648 1
    stringBuffer.append(TEXT_552);
d2650 1
a2650 1
    stringBuffer.append(TEXT_553);
d2655 1
a2655 1
    stringBuffer.append(TEXT_554);
d2657 1
a2657 1
    stringBuffer.append(TEXT_555);
d2661 1
a2661 1
    stringBuffer.append(TEXT_556);
d2665 1
a2665 1
    stringBuffer.append(TEXT_557);
d2667 1
a2667 1
    stringBuffer.append(TEXT_558);
d2669 1
a2669 1
    stringBuffer.append(TEXT_559);
d2671 1
a2671 1
    stringBuffer.append(TEXT_560);
d2673 1
a2673 1
    stringBuffer.append(TEXT_561);
d2675 1
a2675 1
    stringBuffer.append(TEXT_562);
d2677 1
a2677 1
    stringBuffer.append(TEXT_563);
d2679 1
a2679 1
    stringBuffer.append(TEXT_564);
d2681 1
a2681 1
    stringBuffer.append(TEXT_565);
d2683 1
a2683 1
    stringBuffer.append(TEXT_566);
d2685 1
a2685 1
    stringBuffer.append(TEXT_567);
d2687 1
a2687 1
    stringBuffer.append(TEXT_568);
a2693 1
    stringBuffer.append(TEXT_569);
a2695 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d2699 1
a2701 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d2707 14
d2724 1
a2724 1
    stringBuffer.append(TEXT_579);
d2732 1
a2732 1
    stringBuffer.append(TEXT_580);
d2736 1
a2736 1
    stringBuffer.append(TEXT_581);
d2738 1
a2738 1
    stringBuffer.append(TEXT_582);
d2740 1
a2740 1
    stringBuffer.append(TEXT_583);
d2742 1
a2742 1
    stringBuffer.append(TEXT_584);
d2744 1
a2744 1
    stringBuffer.append(TEXT_585);
d2746 1
a2746 1
    stringBuffer.append(TEXT_586);
d2748 1
a2748 1
    stringBuffer.append(TEXT_587);
d2750 1
a2750 1
    stringBuffer.append(TEXT_588);
d2752 1
a2752 1
    stringBuffer.append(TEXT_589);
d2754 1
a2754 1
    stringBuffer.append(TEXT_590);
d2756 1
a2756 1
    stringBuffer.append(TEXT_591);
d2758 1
a2758 1
    stringBuffer.append(TEXT_592);
d2762 1
a2762 1
    stringBuffer.append(TEXT_593);
d2766 1
a2766 1
    stringBuffer.append(TEXT_594);
d2768 1
a2768 1
    stringBuffer.append(TEXT_595);
a2771 14
    stringBuffer.append(TEXT_596);
    stringBuffer.append(TEXT_597);
    stringBuffer.append(TEXT_598);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_599);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_600);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_601);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_602);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_603);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a2772 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a2773 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d2775 1
a2775 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d2777 1
a2777 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d2791 1
d2793 1
d2795 1
a2795 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d2797 1
a2797 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d2799 1
a2799 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d2801 1
a2801 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d2803 1
d2805 1
a2806 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a2807 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2809 1
a2809 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2811 1
a2811 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2813 1
d2815 1
a2816 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a2817 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2825 1
d2828 1
a2829 1
    stringBuffer.append(TEXT_636);
d2831 1
d2835 1
d2837 1
a2838 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2841 1
a2842 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a2843 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a2846 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2849 1
d2851 12
d2864 1
a2864 1
    stringBuffer.append(TEXT_651);
d2866 1
a2866 1
    stringBuffer.append(TEXT_652);
d2871 1
a2871 1
    stringBuffer.append(TEXT_653);
d2873 1
a2873 1
    stringBuffer.append(TEXT_654);
d2877 1
a2877 1
    stringBuffer.append(TEXT_655);
d2884 1
a2884 1
    stringBuffer.append(TEXT_656);
d2886 1
a2886 1
    stringBuffer.append(TEXT_657);
d2888 2
a2889 2
    stringBuffer.append(TEXT_658);
    stringBuffer.append(TEXT_659);
d2899 1
a2899 1
    stringBuffer.append(TEXT_660);
d2901 1
a2901 1
    stringBuffer.append(TEXT_661);
d2903 1
a2903 1
    stringBuffer.append(TEXT_662);
d2906 1
a2906 1
    stringBuffer.append(TEXT_663);
d2908 1
a2908 1
    stringBuffer.append(TEXT_664);
d2910 1
a2910 1
    stringBuffer.append(TEXT_665);
d2912 1
a2912 1
    stringBuffer.append(TEXT_666);
a2917 4
		String editPatternCode = importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()) + ".EDIT_PATTERN";
		String resolvedSemanticElement = "(" + importManager.getImportedName(genNode.getDomainMetaClass().getQualifiedInterfaceName()) + ") getDiagramNode().getElement()";
		LabelModelFacet labelModelFacet = myHelper.getPrimaryLabel().getModelFacet();
		GenClass underlyingMetaClass = genNode.getDomainMetaClass();
a2918 13
    stringBuffer.append(TEXT_667);
    stringBuffer.append(TEXT_668);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_669);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
    stringBuffer.append(TEXT_670);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_671);
    stringBuffer.append(TEXT_672);
    stringBuffer.append(TEXT_673);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_674);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
a2919 3
    
if (labelModelFacet instanceof FeatureLabelModelFacet == false) {

d2921 1
a2921 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d2923 2
d2926 1
a2926 3
} else {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = featureLabelModelFacet.getMetaFeatures();
a2927 2
    stringBuffer.append(TEXT_678);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d2930 1
a2930 1
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {
d2933 1
a2933 3
    
	}

d2935 1
a2935 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d2937 1
a2937 1
    stringBuffer.append(editPatternCode);
d2939 1
a2939 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d2941 1
a2941 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d2943 1
a2943 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d2945 1
a2945 3
    
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {

d2947 1
a2947 3
    
	}

d2949 1
a2949 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d2951 1
a2951 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d2953 1
a2953 1
    stringBuffer.append(primaryView);
d2955 1
a2955 1
    stringBuffer.append(metaFeatures.size());
a2956 74
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_693);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_694);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_695);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_696);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_697);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_698);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_699);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_700);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_701);
    
	boolean haveDeclaredValues = false;
	for(int i = 0; i < metaFeatures.size(); i++) {
		GenFeature nextFeatureToSet = (GenFeature) metaFeatures.get(i);
		EStructuralFeature nextEcoreFeature = nextFeatureToSet.getEcoreFeature();

    stringBuffer.append(TEXT_702);
    if (i == 0) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_703);
    }
    stringBuffer.append(TEXT_704);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_705);
    stringBuffer.append(importManager.getImportedName(nextFeatureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_706);
    stringBuffer.append(nextFeatureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_707);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_708);
    stringBuffer.append(i);
    stringBuffer.append(TEXT_709);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_710);
    
		if (nextEcoreFeature.isMany()) {

    stringBuffer.append(TEXT_711);
    if (!haveDeclaredValues) { haveDeclaredValues = true;
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_712);
    }
    stringBuffer.append(TEXT_713);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_714);
    stringBuffer.append(nextFeatureToSet.getAccessorName());
    stringBuffer.append(TEXT_715);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_716);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_717);
    
		} else {

    stringBuffer.append(TEXT_718);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_719);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_720);
    
		}

    
	}

    stringBuffer.append(TEXT_721);
d2960 1
a2960 108
    stringBuffer.append(TEXT_722);
    
}

    stringBuffer.append(TEXT_723);
    
if (myHelper.getPrimaryLabel() != null) {

    stringBuffer.append(TEXT_724);
    stringBuffer.append(TEXT_725);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_726);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_727);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_728);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_729);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
    stringBuffer.append(TEXT_730);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
    stringBuffer.append(TEXT_731);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
    stringBuffer.append(TEXT_732);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
    stringBuffer.append(TEXT_733);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
    stringBuffer.append(TEXT_734);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
    stringBuffer.append(TEXT_735);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_736);
    
}

    stringBuffer.append(TEXT_737);
    stringBuffer.append(TEXT_738);
    stringBuffer.append(TEXT_739);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_740);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_741);
    
if (myHelper.getPrimaryLabel() != null) {

    stringBuffer.append(TEXT_742);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_743);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_744);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_745);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_746);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_747);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_748);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_749);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_750);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_751);
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_752);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_753);
    
}

    stringBuffer.append(TEXT_754);
    
if (myHelper.getPrimaryLabel() != null) {
	LabelModelFacet labelModelFacet = myHelper.getPrimaryLabel().getModelFacet();
	if (labelModelFacet instanceof FeatureLabelModelFacet) {
		FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
		for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
			GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_755);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_756);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_757);
    
		}
	}
} else {
	GenClass metaClass = genNode.getDomainMetaClass();
	if (metaClass != null) {
		List labelNotifyFeatures = metaClass.getLabelNotifyFeatures();
		for(Iterator it = labelNotifyFeatures.iterator(); it.hasNext(); ) {
			GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_758);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_759);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_760);
    
		}
	}

    
}

    stringBuffer.append(TEXT_761);
d2962 1
a2962 1
    stringBuffer.append(TEXT_762);
d2964 1
a2964 1
    stringBuffer.append(TEXT_763);
d2966 1
a2966 1
    stringBuffer.append(TEXT_764);
d2968 1
a2968 1
    stringBuffer.append(TEXT_765);
d2970 1
a2970 1
    stringBuffer.append(TEXT_766);
d2972 1
a2972 1
    stringBuffer.append(TEXT_767);
d2974 1
a2974 1
    stringBuffer.append(TEXT_768);
d2976 1
a2976 1
    stringBuffer.append(TEXT_769);
d2978 1
a2978 1
    stringBuffer.append(TEXT_770);
d2980 1
a2980 1
    stringBuffer.append(TEXT_771);
d2985 1
a2985 1
    stringBuffer.append(TEXT_772);
d2987 1
a2987 1
    stringBuffer.append(TEXT_773);
d2995 1
a2995 1
    stringBuffer.append(TEXT_774);
d2997 1
a2997 1
    stringBuffer.append(TEXT_775);
d3001 1
a3001 1
    stringBuffer.append(TEXT_776);
d3003 1
a3003 1
    stringBuffer.append(TEXT_777);
@


1.45
log
@[176362]: ClassCastException while selecting items in tree outline of the generated diagram + test to reproduce;
ComponentEditPolicy.xpt: replace int constant with a reference thereto to facilitate readability
@
text
@d73 607
a679 607
  protected final String TEXT_52 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_53 = "() {";
  protected final String TEXT_54 = NL;
  protected final String TEXT_55 = NL + "protected ";
  protected final String TEXT_56 = " createAddCommand(final ";
  protected final String TEXT_57 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_58 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_59 = " childNode = (";
  protected final String TEXT_60 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_61 = " editingDomain = ";
  protected final String TEXT_62 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_63 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_64 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_65 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_66 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_67 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_68 = NL + "\t\t\tcase ";
  protected final String TEXT_69 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_70 = "(";
  protected final String TEXT_71 = ", childNode, newVisualID, ";
  protected final String TEXT_72 = "null";
  protected final String TEXT_73 = "(";
  protected final String TEXT_74 = ") constraint";
  protected final String TEXT_75 = ");" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_76 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_77 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_78 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = NL + "protected ";
  protected final String TEXT_81 = " createCloneCommand(final ";
  protected final String TEXT_82 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_83 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_84 = " childNode = (";
  protected final String TEXT_85 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_86 = " editingDomain = ";
  protected final String TEXT_87 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_88 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_89 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_90 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_91 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_92 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_93 = NL + "\t\t\tcase ";
  protected final String TEXT_94 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = ", childNode, ";
  protected final String TEXT_97 = "null";
  protected final String TEXT_98 = "(";
  protected final String TEXT_99 = ") constraint";
  protected final String TEXT_100 = ");" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_101 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_102 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_103 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_104 = NL + "\t\t\tprotected ";
  protected final String TEXT_105 = " getCreateCommand(";
  protected final String TEXT_106 = " request) {";
  protected final String TEXT_107 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_108 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_109 = " requestEx = (";
  protected final String TEXT_110 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\tif (!";
  protected final String TEXT_111 = ".MODEL_ID.equals(requestEx.getModelID())) {" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_112 = " result = new ";
  protected final String TEXT_113 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_114 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_115 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_116 = "((View) getModel(), requestEx";
  protected final String TEXT_117 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_118 = ")getConstraintFor(request)";
  protected final String TEXT_119 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_120 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_121 = "(";
  protected final String TEXT_122 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_123 = NL + "\t\t\t\treturn ";
  protected final String TEXT_124 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_125 = NL + "\t\t\tprotected ";
  protected final String TEXT_126 = " createChangeConstraintCommand(final ";
  protected final String TEXT_127 = " request, final ";
  protected final String TEXT_128 = " child, Object constraint) {" + NL + "\t\t\t\tif (!isDirectChild(child)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_129 = ".INSTANCE;" + NL + "\t\t\t\t}";
  protected final String TEXT_130 = NL;
  protected final String TEXT_131 = "\t\t\t\tfinal ";
  protected final String TEXT_132 = " node = (";
  protected final String TEXT_133 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_134 = " emfCommand = new ";
  protected final String TEXT_135 = "(node, request, ((";
  protected final String TEXT_136 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_137 = "(";
  protected final String TEXT_138 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_139 = " createChangeConstraintCommand(";
  protected final String TEXT_140 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_141 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_142 = NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_143 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_144 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_145 = " createChangeConstraintCommand(";
  protected final String TEXT_146 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_147 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_148 = NL + "\t\t\tprotected ";
  protected final String TEXT_149 = " createChildEditPolicy(";
  protected final String TEXT_150 = " child) {" + NL + "\t\t\t\t";
  protected final String TEXT_151 = " result = child.getEditPolicy(";
  protected final String TEXT_152 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}";
  protected final String TEXT_153 = NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_154 = "() {" + NL + "\t\t\t\t\t\tpublic ";
  protected final String TEXT_155 = " getTargetEditPart(";
  protected final String TEXT_156 = " request) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_157 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_158 = ".this;" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t}";
  protected final String TEXT_159 = NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_160 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_161 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_162 = " getReconnectTargetCommand(";
  protected final String TEXT_163 = " request) {";
  protected final String TEXT_164 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_165 = ".INSTANCE;";
  protected final String TEXT_166 = NL + "\t\t\t\t";
  protected final String TEXT_167 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_168 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_169 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_170 = " edge = (";
  protected final String TEXT_171 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_172 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_173 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_174 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_175 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_176 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_177 = NL + "\t\t\t\tcase ";
  protected final String TEXT_178 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_179 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_180 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_181 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_182 = "(";
  protected final String TEXT_183 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_184 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_185 = " getReconnectSourceCommand(";
  protected final String TEXT_186 = " request) {";
  protected final String TEXT_187 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_188 = ".INSTANCE;";
  protected final String TEXT_189 = NL + "\t\t\t\t";
  protected final String TEXT_190 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_191 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_192 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_193 = " edge = (";
  protected final String TEXT_194 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_195 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_196 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_197 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_198 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_199 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_200 = NL + "\t\t\t\tcase ";
  protected final String TEXT_201 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_202 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_203 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_204 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_205 = "(";
  protected final String TEXT_206 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_207 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_208 = " getConnectionCreateCommand(";
  protected final String TEXT_209 = " request) {";
  protected final String TEXT_210 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_211 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_212 = " requestEx = (";
  protected final String TEXT_213 = ") request;" + NL + "\t\t\t\t\tif (!";
  protected final String TEXT_214 = ".MODEL_ID.equals(requestEx.getModelID())) {" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_215 = " result = new ";
  protected final String TEXT_216 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_217 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_218 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_219 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_220 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (!result.canExecute()) {" + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_221 = " wrappedResult = new ";
  protected final String TEXT_222 = "(";
  protected final String TEXT_223 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_224 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_225 = " getConnectionCompleteCommand(";
  protected final String TEXT_226 = " request) {";
  protected final String TEXT_227 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_228 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_229 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_230 = " requestEx = (";
  protected final String TEXT_231 = ") request;" + NL + "\t\t\t\t\tif (!";
  protected final String TEXT_232 = ".MODEL_ID.equals(requestEx.getModelID())) {" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_233 = " result = new ";
  protected final String TEXT_234 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_235 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_236 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_237 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_238 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_239 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_240 = "(";
  protected final String TEXT_241 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_242 = NL + "\t\t\t\treturn ";
  protected final String TEXT_243 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_244 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_245 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_246 = "());";
  protected final String TEXT_247 = NL;
  protected final String TEXT_248 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_249 = "\", new ";
  protected final String TEXT_250 = "()); //$NON-NLS-1$";
  protected final String TEXT_251 = NL;
  protected final String TEXT_252 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_253 = ".OPEN_ROLE";
  protected final String TEXT_254 = " + \"";
  protected final String TEXT_255 = "\" ";
  protected final String TEXT_256 = ", new ";
  protected final String TEXT_257 = "());";
  protected final String TEXT_258 = NL + "\t\tinstallEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());";
  protected final String TEXT_259 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_260 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_261 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_262 = " getPrimaryDragEditPolicy() {";
  protected final String TEXT_263 = NL + "\t\treturn new ";
  protected final String TEXT_264 = "();";
  protected final String TEXT_265 = NL + "\t\t";
  protected final String TEXT_266 = " result = new ";
  protected final String TEXT_267 = "();";
  protected final String TEXT_268 = NL + "\t\t";
  protected final String TEXT_269 = " result = new ";
  protected final String TEXT_270 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_271 = " createSelectionHandles() {" + NL + "\t\t\t\t";
  protected final String TEXT_272 = " result = super.createSelectionHandles();" + NL + "\t\t\t\tfor(";
  protected final String TEXT_273 = " it = getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_274 = " next = (";
  protected final String TEXT_275 = ") it.next();" + NL + "\t\t\t\t\t";
  protected final String TEXT_276 = " nextView = (";
  protected final String TEXT_277 = ") next.getModel();" + NL + "\t\t\t\t\tswitch (";
  protected final String TEXT_278 = ".getVisualID(nextView)) {";
  protected final String TEXT_279 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_280 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\tresult.addAll(((";
  protected final String TEXT_281 = ") next).createSelectionHandles());" + NL + "\t\t\t\t\t\tbreak;";
  protected final String TEXT_282 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_283 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_284 = ".NONE);";
  protected final String TEXT_285 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_286 = ".";
  protected final String TEXT_287 = " | ";
  protected final String TEXT_288 = ");";
  protected final String TEXT_289 = NL + "\t\treturn result;";
  protected final String TEXT_290 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_291 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_292 = " invisibleRectangle = new ";
  protected final String TEXT_293 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_294 = "());" + NL + "\t\t";
  protected final String TEXT_295 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_296 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_297 = NL + NL + "\t\t";
  protected final String TEXT_298 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tmyDecorationManager = createDecorationManager(decorationShape);" + NL + "\t\t\tinvisibleRectangle.add(decorationShape, 0);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_299 = " createDecorationManager(";
  protected final String TEXT_300 = " decorationShape) {" + NL + "\t\treturn new ";
  protected final String TEXT_301 = "(decorationShape);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_302 = " getDecorationManager() {" + NL + "\t\treturn myDecorationManager;" + NL + "\t}" + NL;
  protected final String TEXT_303 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_304 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_305 = " result = new ";
  protected final String TEXT_306 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_307 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_308 = " createNodeShape() {";
  protected final String TEXT_309 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_310 = "()";
  protected final String TEXT_311 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_312 = ";";
  protected final String TEXT_313 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_314 = ";";
  protected final String TEXT_315 = NL + "\t\t";
  protected final String TEXT_316 = " figure = new ";
  protected final String TEXT_317 = "();";
  protected final String TEXT_318 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_319 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_320 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_321 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_322 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_323 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_324 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_325 = " createDecorationPane() {" + NL + "\t\treturn new ";
  protected final String TEXT_326 = "();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_327 = " setupContentPane(";
  protected final String TEXT_328 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_329 = NL + "\t\t\t";
  protected final String TEXT_330 = " layout = new ";
  protected final String TEXT_331 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_332 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_333 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_334 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_335 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_336 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_337 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_338 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_339 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_340 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_341 = " childEditPart) {";
  protected final String TEXT_342 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_343 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_344 = ") childEditPart).";
  protected final String TEXT_345 = "(getPrimaryShape().";
  protected final String TEXT_346 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_347 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_348 = ") {" + NL + "\t\t\t";
  protected final String TEXT_349 = " pane = getPrimaryShape().";
  protected final String TEXT_350 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_351 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_352 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_353 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_354 = ") {" + NL + "\t\t\t";
  protected final String TEXT_355 = " pane = getPrimaryShape().";
  protected final String TEXT_356 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_357 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_358 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_359 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_360 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_361 = NL + "\t\tfor(";
  protected final String TEXT_362 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_363 = " nextChild = (";
  protected final String TEXT_364 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_365 = ".getVisualID(nextChild) == ";
  protected final String TEXT_366 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_367 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_368 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_369 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_370 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_371 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_372 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_373 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_374 = NL;
  protected final String TEXT_375 = "if (";
  protected final String TEXT_376 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_377 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_378 = " getLabelEditPart(";
  protected final String TEXT_379 = " req) {" + NL + "\t\t";
  protected final String TEXT_380 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_381 = " view = (";
  protected final String TEXT_382 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_383 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_384 = NL + "\t\t\t\tcase ";
  protected final String TEXT_385 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_386 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_387 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_388 = " childEditPart) {";
  protected final String TEXT_389 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_390 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_391 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_392 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_393 = " root = (";
  protected final String TEXT_394 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_395 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_396 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_397 = " childEditPart) {";
  protected final String TEXT_398 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_399 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_400 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_401 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_402 = " childEditPart, int index) {";
  protected final String TEXT_403 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_404 = " labelFigure = ((";
  protected final String TEXT_405 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_406 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_407 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_408 = " childFigure = ((";
  protected final String TEXT_409 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_410 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_411 = " childEditPart) {";
  protected final String TEXT_412 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_413 = " labelFigure = ((";
  protected final String TEXT_414 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_415 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_416 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_417 = " childFigure = ((";
  protected final String TEXT_418 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_419 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_420 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_421 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_422 = " childEditPart = (";
  protected final String TEXT_423 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_424 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_425 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_426 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_427 = ";" + NL + "\t\t";
  protected final String TEXT_428 = " bounds = (";
  protected final String TEXT_429 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_430 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_431 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_432 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_433 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_434 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_435 = " getSourceConnectionAnchor(";
  protected final String TEXT_436 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_437 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_438 = " getSourceConnectionAnchor(";
  protected final String TEXT_439 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_440 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_441 = "  getTargetConnectionAnchor(";
  protected final String TEXT_442 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_443 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_444 = "  getTargetConnectionAnchor(";
  protected final String TEXT_445 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_446 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_447 = NL + "\t\tif (";
  protected final String TEXT_448 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_449 = "(this);" + NL + "\t\t}";
  protected final String TEXT_450 = NL + "\t\tif (";
  protected final String TEXT_451 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_452 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_453 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_454 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_455 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_456 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_457 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_458 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_459 = NL;
  protected final String TEXT_460 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_461 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_462 = " domainModelEditDomain = ";
  protected final String TEXT_463 = ".getEditingDomain(";
  protected final String TEXT_464 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_465 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_466 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_467 = " {";
  protected final String TEXT_468 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_469 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_470 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_471 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_472 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_473 = " createFilter() {";
  protected final String TEXT_474 = NL + "\t\t\t";
  protected final String TEXT_475 = " filter = ";
  protected final String TEXT_476 = ".createFeatureFilter(";
  protected final String TEXT_477 = ".eINSTANCE.get";
  protected final String TEXT_478 = "());";
  protected final String TEXT_479 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_480 = ".createFeatureFilter(";
  protected final String TEXT_481 = ".eINSTANCE.get";
  protected final String TEXT_482 = "()));";
  protected final String TEXT_483 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_484 = ".createNotifierFilter(";
  protected final String TEXT_485 = ".getElement()));";
  protected final String TEXT_486 = NL + "\t\t\t";
  protected final String TEXT_487 = " filter = ";
  protected final String TEXT_488 = ".createNotifierFilter(";
  protected final String TEXT_489 = ".getElement());";
  protected final String TEXT_490 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_491 = NL + "\t\t\t";
  protected final String TEXT_492 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_493 = NL + "\t\t\t";
  protected final String TEXT_494 = " filter = ";
  protected final String TEXT_495 = ".NOT_TOUCH;";
  protected final String TEXT_496 = NL + "\t\t\treturn filter;";
  protected final String TEXT_497 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_498 = " getCreateNotationalElementCommand(";
  protected final String TEXT_499 = " descriptor) {";
  protected final String TEXT_500 = NL;
  protected final String TEXT_501 = "\t\t\t";
  protected final String TEXT_502 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_503 = NL + "\t\t\tcase ";
  protected final String TEXT_504 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_505 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_506 = "(";
  protected final String TEXT_507 = ", domainElement, ";
  protected final String TEXT_508 = "new ";
  protected final String TEXT_509 = "(0, 0, ";
  protected final String TEXT_510 = ", ";
  protected final String TEXT_511 = ")";
  protected final String TEXT_512 = NL + "null";
  protected final String TEXT_513 = ", ";
  protected final String TEXT_514 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_515 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_516 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_517 = " getSemanticChildNodes() {";
  protected final String TEXT_518 = NL;
  protected final String TEXT_519 = NL + "\treturn ";
  protected final String TEXT_520 = ".EMPTY_LIST;";
  protected final String TEXT_521 = NL + "\t";
  protected final String TEXT_522 = " result = new ";
  protected final String TEXT_523 = "();";
  protected final String TEXT_524 = NL + "\t";
  protected final String TEXT_525 = " viewObject = ";
  protected final String TEXT_526 = ";" + NL + "\t";
  protected final String TEXT_527 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_528 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_529 = NL + "\tfor(";
  protected final String TEXT_530 = " it = ";
  protected final String TEXT_531 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_532 = ") it.next();";
  protected final String TEXT_533 = NL + "\tnextValue = (";
  protected final String TEXT_534 = ")";
  protected final String TEXT_535 = ";";
  protected final String TEXT_536 = NL + "\tnodeVID = ";
  protected final String TEXT_537 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_538 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_539 = NL + "\tcase ";
  protected final String TEXT_540 = ".VISUAL_ID: {";
  protected final String TEXT_541 = NL + "\tif (";
  protected final String TEXT_542 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_543 = NL + "\t\tresult.add(new ";
  protected final String TEXT_544 = "(nextValue, nodeVID));";
  protected final String TEXT_545 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_546 = NL + "\t\t}";
  protected final String TEXT_547 = NL + "\t}";
  protected final String TEXT_548 = NL + "\t}";
  protected final String TEXT_549 = NL + "\treturn result;";
  protected final String TEXT_550 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_551 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_552 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_553 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_554 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_555 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_556 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_557 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_558 = " domainModelEditDomain = ";
  protected final String TEXT_559 = ".getEditingDomain(";
  protected final String TEXT_560 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_561 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_562 = NL;
  protected final String TEXT_563 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_564 = " domainModelEditDomain = ";
  protected final String TEXT_565 = ".getEditingDomain(";
  protected final String TEXT_566 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_567 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_568 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_569 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_570 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_571 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_572 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_573 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_574 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_575 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_576 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_577 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_578 = ".createEventTypeFilter(";
  protected final String TEXT_579 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_580 = ".createEventTypeFilter(";
  protected final String TEXT_581 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_582 = ".createEventTypeFilter(";
  protected final String TEXT_583 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_584 = ".createEventTypeFilter(";
  protected final String TEXT_585 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_586 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_587 = " createFilter() {";
  protected final String TEXT_588 = NL;
  protected final String TEXT_589 = NL + "\t\t\t";
  protected final String TEXT_590 = " filter = ";
  protected final String TEXT_591 = ".createFeatureFilter(";
  protected final String TEXT_592 = ".eINSTANCE.get";
  protected final String TEXT_593 = "());";
  protected final String TEXT_594 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_595 = ".createFeatureFilter(";
  protected final String TEXT_596 = ".eINSTANCE.get";
  protected final String TEXT_597 = "()));";
  protected final String TEXT_598 = NL;
  protected final String TEXT_599 = NL + "\t\t\t";
  protected final String TEXT_600 = " filter = ";
  protected final String TEXT_601 = ".createFeatureFilter(";
  protected final String TEXT_602 = ".eINSTANCE.get";
  protected final String TEXT_603 = "());";
  protected final String TEXT_604 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_605 = ".createFeatureFilter(";
  protected final String TEXT_606 = ".eINSTANCE.get";
  protected final String TEXT_607 = "()));";
  protected final String TEXT_608 = NL;
  protected final String TEXT_609 = NL + "\t\t\t";
  protected final String TEXT_610 = " filter = ";
  protected final String TEXT_611 = ".createFeatureFilter(";
  protected final String TEXT_612 = ".eINSTANCE.get";
  protected final String TEXT_613 = "());";
  protected final String TEXT_614 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_615 = ".createFeatureFilter(";
  protected final String TEXT_616 = ".eINSTANCE.get";
  protected final String TEXT_617 = "()));";
  protected final String TEXT_618 = NL;
  protected final String TEXT_619 = NL + "\t\t\t";
  protected final String TEXT_620 = " filter = ";
  protected final String TEXT_621 = ".createFeatureFilter(";
  protected final String TEXT_622 = ".eINSTANCE.get";
  protected final String TEXT_623 = "());";
  protected final String TEXT_624 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_625 = ".createFeatureFilter(";
  protected final String TEXT_626 = ".eINSTANCE.get";
  protected final String TEXT_627 = "()));";
  protected final String TEXT_628 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_629 = NL + "\t\t\t";
  protected final String TEXT_630 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_631 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_632 = NL + "\t\t\t";
  protected final String TEXT_633 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_634 = NL + "\t\t\t";
  protected final String TEXT_635 = " filter = ";
  protected final String TEXT_636 = ".NOT_TOUCH;";
  protected final String TEXT_637 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_638 = " getCreateNotationalElementCommand(";
  protected final String TEXT_639 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_640 = " linkDescriptor = (";
  protected final String TEXT_641 = ") descriptor;";
  protected final String TEXT_642 = NL;
  protected final String TEXT_643 = "\t\t\t";
  protected final String TEXT_644 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_645 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_646 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_647 = NL + "\t\t\tcase ";
  protected final String TEXT_648 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_649 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_650 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_651 = NL + "\t\t\tcase ";
  protected final String TEXT_652 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_653 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_654 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_655 = "(";
  protected final String TEXT_656 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_657 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_658 = " getSemanticChildLinks() {";
d681 118
a798 304
  protected final String TEXT_660 = "\t";
  protected final String TEXT_661 = " result = new ";
  protected final String TEXT_662 = "();";
  protected final String TEXT_663 = NL + "\t";
  protected final String TEXT_664 = " modelObject = ";
  protected final String TEXT_665 = ".getElement();" + NL + "\t";
  protected final String TEXT_666 = " nextValue;";
  protected final String TEXT_667 = NL + "\tint linkVID;";
  protected final String TEXT_668 = NL + "\tfor(";
  protected final String TEXT_669 = " it = ";
  protected final String TEXT_670 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_671 = ") it.next();";
  protected final String TEXT_672 = NL + "\tnextValue = (";
  protected final String TEXT_673 = ")";
  protected final String TEXT_674 = ";";
  protected final String TEXT_675 = NL + "\tlinkVID = ";
  protected final String TEXT_676 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_677 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_678 = NL + "\tcase ";
  protected final String TEXT_679 = ".VISUAL_ID: {";
  protected final String TEXT_680 = NL + "\tif (";
  protected final String TEXT_681 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_682 = NL + "\t\t";
  protected final String TEXT_683 = " source = (";
  protected final String TEXT_684 = ")";
  protected final String TEXT_685 = ";";
  protected final String TEXT_686 = NL + "\t\t";
  protected final String TEXT_687 = " source = ";
  protected final String TEXT_688 = ".getElement();";
  protected final String TEXT_689 = NL + "\t\t";
  protected final String TEXT_690 = " target = (";
  protected final String TEXT_691 = ")";
  protected final String TEXT_692 = ";";
  protected final String TEXT_693 = NL + "\t\t";
  protected final String TEXT_694 = " target = ";
  protected final String TEXT_695 = ".getElement();";
  protected final String TEXT_696 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_697 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_698 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_699 = NL + "\t}";
  protected final String TEXT_700 = NL + "\t}";
  protected final String TEXT_701 = NL + "\t}";
  protected final String TEXT_702 = NL + "\tfor(";
  protected final String TEXT_703 = " it = ";
  protected final String TEXT_704 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_705 = ") it.next();";
  protected final String TEXT_706 = NL + "\tnextValue = (";
  protected final String TEXT_707 = ")";
  protected final String TEXT_708 = ";";
  protected final String TEXT_709 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_710 = NL + "\t\tresult.add(new ";
  protected final String TEXT_711 = "(modelObject, nextValue, null, ";
  protected final String TEXT_712 = ".VISUAL_ID));";
  protected final String TEXT_713 = NL + "\t}";
  protected final String TEXT_714 = NL + "\t}";
  protected final String TEXT_715 = NL + "\treturn result;";
  protected final String TEXT_716 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_717 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_718 = " result = new ";
  protected final String TEXT_719 = "();" + NL + "\t\t\t";
  protected final String TEXT_720 = " allLinks = ";
  protected final String TEXT_721 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_722 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_723 = " next = (";
  protected final String TEXT_724 = ") it.next();";
  protected final String TEXT_725 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_726 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_727 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_728 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_729 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_730 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_731 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_732 = ".VISUAL_ID:";
  protected final String TEXT_733 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_734 = NL + "\t\t\t\t} else {";
  protected final String TEXT_735 = NL + "\t\t\t\t}";
  protected final String TEXT_736 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_737 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_738 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_739 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_740 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_741 = ".VISUAL_ID:";
  protected final String TEXT_742 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_743 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_744 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_745 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_746 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_747 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_748 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_749 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_750 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_751 = " domainModelEditDomain = ";
  protected final String TEXT_752 = ".getEditingDomain(";
  protected final String TEXT_753 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_754 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_755 = NL;
  protected final String TEXT_756 = NL;
  protected final String TEXT_757 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_758 = " domainModelRefresher = new ";
  protected final String TEXT_759 = "(this);" + NL;
  protected final String TEXT_760 = NL;
  protected final String TEXT_761 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_762 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_763 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_764 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_765 = NL;
  protected final String TEXT_766 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_767 = NL + "\t\t";
  protected final String TEXT_768 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_769 = ") ";
  protected final String TEXT_770 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_771 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_772 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_773 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_774 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_775 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_776 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_777 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_778 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_779 = "\t" + NL + "\t}";
  protected final String TEXT_780 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_781 = " createdFont;";
  protected final String TEXT_782 = "\t" + NL;
  protected final String TEXT_783 = NL;
  protected final String TEXT_784 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_785 = " style = (";
  protected final String TEXT_786 = ")  ";
  protected final String TEXT_787 = ".getStyle(";
  protected final String TEXT_788 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_789 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_790 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_791 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_792 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_793 = " style = (";
  protected final String TEXT_794 = ")  ";
  protected final String TEXT_795 = ".getStyle(";
  protected final String TEXT_796 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_797 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_798 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_799 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_800 = " createdBackgroundColor;" + NL;
  protected final String TEXT_801 = NL;
  protected final String TEXT_802 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_803 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_804 = " feature, ";
  protected final String TEXT_805 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_806 = "();";
  protected final String TEXT_807 = NL;
  protected final String TEXT_808 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_809 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_810 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_811 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_812 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_813 = NL;
  protected final String TEXT_814 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_815 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_816 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_817 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_818 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_819 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_820 = NL;
  protected final String TEXT_821 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_822 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_823 = NL;
  protected final String TEXT_824 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_825 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_826 = NL;
  protected final String TEXT_827 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_828 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_829 = NL;
  protected final String TEXT_830 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_831 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_832 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_833 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_834 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_835 = NL;
  protected final String TEXT_836 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_837 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_838 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_839 = NL;
  protected final String TEXT_840 = NL;
  protected final String TEXT_841 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_842 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_843 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_844 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_845 = NL;
  protected final String TEXT_846 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_847 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_848 = "()";
  protected final String TEXT_849 = " {" + NL + "\t\t\tprotected ";
  protected final String TEXT_850 = " getGraphicalEditPart() {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_851 = ".this;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_852 = ");";
  protected final String TEXT_853 = NL;
  protected final String TEXT_854 = "\t\tinstallEditPolicy(";
  protected final String TEXT_855 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_856 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_857 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_858 = NL;
  protected final String TEXT_859 = "\t\t\t\t\tprotected ";
  protected final String TEXT_860 = " getDirectEditCommand(";
  protected final String TEXT_861 = " request) {";
  protected final String TEXT_862 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_863 = ".INSTANCE;";
  protected final String TEXT_864 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_865 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_866 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_867 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_868 = "(";
  protected final String TEXT_869 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_870 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_871 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_872 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_873 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_874 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_875 = " editingDomain = ";
  protected final String TEXT_876 = ".getEditingDomain(";
  protected final String TEXT_877 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_878 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_879 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_880 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_881 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_882 = " createDomainModelCommand(";
  protected final String TEXT_883 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_884 = " element = ";
  protected final String TEXT_885 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_886 = " result = new ";
  protected final String TEXT_887 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_888 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_889 = " ";
  protected final String TEXT_890 = "feature = (";
  protected final String TEXT_891 = ") ";
  protected final String TEXT_892 = ".eINSTANCE.get";
  protected final String TEXT_893 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_894 = ".parseValue(feature, values[";
  protected final String TEXT_895 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_896 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_897 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_898 = " ";
  protected final String TEXT_899 = "values = new ";
  protected final String TEXT_900 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_901 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_902 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_903 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_904 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_905 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_906 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_907 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_908 = NL + "\t\t\t\t});";
  protected final String TEXT_909 = NL + "\t\t}" + NL;
  protected final String TEXT_910 = NL;
  protected final String TEXT_911 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_912 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_913 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_914 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_915 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_916 = "(this, ";
  protected final String TEXT_917 = ".class, new ";
  protected final String TEXT_918 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_919 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_920 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_921 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_922 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_923 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_924 = NL;
  protected final String TEXT_925 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_926 = " domainModelRefresher = new ";
  protected final String TEXT_927 = "(this);" + NL;
  protected final String TEXT_928 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_929 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_930 = " getImage() {" + NL + "\t\t\t";
  protected final String TEXT_931 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelIcon();" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_932 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_933 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_934 = " nextChild = (";
  protected final String TEXT_935 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_936 = ".getVisualID(nextChild) == ";
  protected final String TEXT_937 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_938 = ") ";
  protected final String TEXT_939 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_940 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_941 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_942 = ".eINSTANCE.get";
  protected final String TEXT_943 = "(), labelRefresher);";
  protected final String TEXT_944 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_945 = ".eINSTANCE.get";
  protected final String TEXT_946 = "(), labelRefresher);";
  protected final String TEXT_947 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_948 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_949 = " result = new ";
  protected final String TEXT_950 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_951 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_952 = " next = (";
  protected final String TEXT_953 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_954 = " style = (";
  protected final String TEXT_955 = ") next.getStyle(";
  protected final String TEXT_956 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_957 = ".getVisualID(next)) {";
  protected final String TEXT_958 = NL + "\t\t\t\tcase ";
  protected final String TEXT_959 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_960 = NL + "\t\t\t\tcase ";
  protected final String TEXT_961 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_962 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_963 = NL;
a806 1
Palette palette = genDiagram.getPalette();
d889 1
a898 3
	private boolean myHasChildrenInListCompartments = false;
	private boolean hasIncomingLinks = false;
	private boolean hasOutgoingLinks = false;
a924 2
			
			myHasChildrenInListCompartments |= next.isListLayout() && !next.getChildNodes().isEmpty();
a931 2
			GenClass incomingClass;
			GenClass outgoingClass;
a934 4
				incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
				outgoingClass = modelFacet.getSourceMetaFeature() == null
					? modelFacet.getContainmentMetaFeature().getGenClass()
					: modelFacet.getSourceMetaFeature().getTypeGenClass();
a942 2
				incomingClass = metaFeature.getTypeGenClass();
				outgoingClass = metaFeature.getGenClass();
a946 2
			hasIncomingLinks |= (incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass()));
			hasOutgoingLinks |= (outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass()));
a972 12
	public boolean hasIncomingLinks() {
		return hasIncomingLinks;
	}

	public boolean hasOutgoingLinks() {
		return hasOutgoingLinks;
	}

	public boolean hasChildrenInListCompartments(){
		return myHasChildrenInListCompartments;
	}
	
a1101 8
    
String layoutEditPolicyBaseClass;
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {
	layoutEditPolicyBaseClass = "org.eclipse.gmf.runtime.lite.edit.policies.XYLayoutEditPolicyEx";
} else {
	layoutEditPolicyBaseClass = "org.eclipse.gmf.runtime.lite.edit.policies.ListLayoutEditPolicy";
}

d1105 1
a1105 1
    stringBuffer.append(importManager.getImportedName(layoutEditPolicyBaseClass));
d1108 1
a1108 4
{
	String _getViewCode = "getDiagramNode()";
	List childNodes = genNode.getChildNodes();
	boolean isListLayout = !isXYLayout;
d1111 4
d1116 1
a1116 1
if (!childNodes.isEmpty()) {
d1118 2
a1119 4
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1121 7
a1127 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1129 1
a1129 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1131 1
a1131 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
a1132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1134 3
a1136 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1138 1
a1138 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1140 1
a1140 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1142 1
a1142 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1144 7
a1150 1
    stringBuffer.append(_getViewCode);
d1152 1
a1152 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d1154 1
a1154 4
    
	for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode next = (GenNode) it.next();

d1156 1
a1156 1
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
d1158 1
a1158 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Add" + next.getModelFacet().getMetaClass().getName() + next.getVisualID() + "Command"));
d1160 1
a1160 1
    stringBuffer.append(_getViewCode);
d1162 5
a1166 1
    if (isListLayout) {
d1168 3
a1170 1
    } else {
d1172 6
a1177 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1179 3
a1181 1
    }
d1183 2
d1186 1
a1186 1
	}	//for
a1187 2
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d1189 1
a1189 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1192 2
a1193 1
}	//if (!childNodes.isEmpty()) in createAddCommand
d1196 4
d1201 1
a1201 1
if (!childNodes.isEmpty()) {
a1202 4
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1204 1
a1204 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1206 1
a1206 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1208 1
a1208 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1210 1
a1210 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1212 1
a1212 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1214 1
a1214 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1216 1
a1216 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1218 1
a1218 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1220 1
a1220 1
    stringBuffer.append(_getViewCode);
d1222 1
a1222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d1225 2
a1226 2
	for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode next = (GenNode) it.next();
d1231 1
a1231 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Clone" + next.getModelFacet().getMetaClass().getName() + next.getVisualID() + "Command"));
d1233 3
a1235 1
    stringBuffer.append(_getViewCode);
d1237 6
a1242 1
    if (isListLayout) {
d1244 1
a1244 1
    } else {
d1246 3
a1248 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1250 5
a1254 1
    }
d1256 1
d1258 1
a1258 2
	}	//for

d1260 4
a1263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
a1264 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_103);
d1266 2
a1267 1
}	//if (!childNodes.isEmpty())
d1269 1
d1274 1
a1274 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1276 1
a1276 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
d1278 1
a1278 3
    
if (palette != null && !genNode.getChildNodes().isEmpty()) {

d1280 1
a1280 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d1282 1
a1282 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d1284 3
a1286 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d1288 3
a1290 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1292 1
a1292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1294 1
a1294 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1296 1
a1296 7
    
	for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
		GenChildNode next = (GenChildNode)it.next();
		if (next.isSansDomain() || next.getDomainMetaClass().isAbstract()) {
			continue;
		}

d1298 1
a1298 1
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
d1300 1
a1300 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + next.getDomainMetaClass().getName() + next.getVisualID() + "Command"));
d1302 3
a1304 1
    if (isXYLayout) {
d1306 1
a1306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1308 1
a1308 1
    }
d1310 2
a1314 2
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d1316 1
a1316 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1319 7
a1325 1
}
d1328 1
a1328 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1330 1
a1330 3
    
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {

d1332 1
a1332 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1334 1
a1334 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
d1336 1
a1336 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1338 3
a1340 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1342 1
d1344 1
d1346 1
a1346 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1348 1
a1348 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1350 1
a1350 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d1352 1
a1352 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ChangeBoundsCommand"));
d1354 1
a1354 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d1356 1
a1356 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d1358 1
a1358 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1360 1
a1360 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1362 1
a1362 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1364 1
a1364 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1366 2
d1369 2
a1370 1
} else {
a1371 2
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1373 1
a1373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d1375 1
a1375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1377 1
a1377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1379 1
a1379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
a1380 464
    
}

    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_152);
    
if (myHelper.hasExternalLabels()) {

    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_158);
    
}

    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.GraphicalNodeEditPolicy"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
    stringBuffer.append(TEXT_163);
    
if (!myHelper.hasIncomingLinks()) {

    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_165);
    
} else {

    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_176);
    
	for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
		GenLink genLink = (GenLink)it.next();
		if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
			continue;
		}
		GenClass incomingClass;
		String reconnectCommandNameInfix;
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
			reconnectCommandNameInfix = modelFacet.getMetaClass().getName();
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			incomingClass = metaFeature.getTypeGenClass();
			reconnectCommandNameInfix = metaFeature.getFeatureAccessorName();
		} else {
			continue;
		}
		if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
			continue;
		}

    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Reconnect" + reconnectCommandNameInfix + genLink.getVisualID() + "TargetCommand"));
    stringBuffer.append(TEXT_179);
    
	}

    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_183);
    
}

    stringBuffer.append(TEXT_184);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
    stringBuffer.append(TEXT_186);
    
if (!myHelper.hasOutgoingLinks()) {

    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_188);
    
} else {

    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_191);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_199);
    
	for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
		GenLink genLink = (GenLink)it.next();
		if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
			continue;
		}
		GenClass outgoingClass;
		String reconnectCommandNameInfix;
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			outgoingClass = modelFacet.getSourceMetaFeature() == null
				? modelFacet.getContainmentMetaFeature().getGenClass()
				: modelFacet.getSourceMetaFeature().getTypeGenClass();
			reconnectCommandNameInfix = modelFacet.getMetaClass().getName();
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			outgoingClass = metaFeature.getGenClass();
			reconnectCommandNameInfix = metaFeature.getFeatureAccessorName();
		} else {
			continue;
		}
		if (!outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
			continue;
		}

    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Reconnect" + reconnectCommandNameInfix + genLink.getVisualID() + "SourceCommand"));
    stringBuffer.append(TEXT_202);
    
	}

    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_206);
    
}

    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
    stringBuffer.append(TEXT_209);
    if (palette != null && myHelper.hasOutgoingLinks()) {
    stringBuffer.append(TEXT_210);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_216);
    
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass outgoingClass;
	String createCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}

    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + createCommandNameInfix + genLink.getVisualID() + "StartCommand"));
    stringBuffer.append(TEXT_219);
    
}

    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_223);
    }/*when there's palette*/
    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
    stringBuffer.append(TEXT_226);
    if (palette != null && myHelper.hasIncomingLinks()) {
    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_233);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_234);
    
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass incomingClass;
	String createCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		incomingClass = metaFeature.getTypeGenClass();
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}

    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_236);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + createCommandNameInfix + genLink.getVisualID() + "Command"));
    stringBuffer.append(TEXT_237);
    
}

    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_239);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_240);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_241);
    }/*when there's palette*/
    stringBuffer.append(TEXT_242);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_243);
    
if (myHelper.getPrimaryLabel() != null) {

    stringBuffer.append(TEXT_244);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_245);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.DelegatingDirectEditPolicy"));
    stringBuffer.append(TEXT_246);
    
}

    {
GenCommonBase genCommonBase = genNode;
    stringBuffer.append(TEXT_247);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_248);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_249);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_250);
    }
    stringBuffer.append(TEXT_251);
    
{
	List<OpenDiagramBehaviour> behaviours = genCommonBase.getBehaviour(OpenDiagramBehaviour.class);
	for(int i = 0, iMax = behaviours.size(); i < iMax; i++) {
	/*doesn't make sense to install more than one policy for the same role*/ 
		OpenDiagramBehaviour next = behaviours.get(i);

    stringBuffer.append(TEXT_252);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.EditPolicyRoles"));
    stringBuffer.append(TEXT_253);
    if (i > 0) {
    stringBuffer.append(TEXT_254);
    stringBuffer.append(i+1);
    stringBuffer.append(TEXT_255);
    }
    stringBuffer.append(TEXT_256);
    stringBuffer.append(importManager.getImportedName(genCommonBase.getBehaviour(OpenDiagramBehaviour.class).get(0).getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_257);
    
	}
}

    }
    stringBuffer.append(TEXT_258);
    
if (!genNode.getChildNodes().isEmpty()) {

    stringBuffer.append(TEXT_259);
    
}

    
if (myHelper.containsLinks()) {

    stringBuffer.append(TEXT_260);
    
}

    stringBuffer.append(TEXT_261);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_262);
    
if (genNode.getPrimaryDragEditPolicyQualifiedClassName() != null) {

    stringBuffer.append(TEXT_263);
    stringBuffer.append(importManager.getImportedName(genNode.getPrimaryDragEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_264);
    
} else {
	if (genNode.getCompartments().isEmpty()) {

    stringBuffer.append(TEXT_265);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_266);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_267);
    
	} else {

    stringBuffer.append(TEXT_268);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_269);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_270);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_271);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_272);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_273);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_274);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_275);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_276);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_277);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_278);
    
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();

    stringBuffer.append(TEXT_279);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_280);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_281);
    
		}

    stringBuffer.append(TEXT_282);
    
	}
	ResizeConstraints rc = (ResizeConstraints) genNode.getViewmap().find(ResizeConstraints.class);
	if (rc != null) {
		if (rc.getResizeHandles() == 0) {

    stringBuffer.append(TEXT_283);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.PositionConstants"));
    stringBuffer.append(TEXT_284);
    
		} else {

    stringBuffer.append(TEXT_285);
    
			for (Iterator it = rc.getResizeHandleNames().iterator(); it.hasNext(); ) {
				String next = (String) it.next();

    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.PositionConstants"));
    stringBuffer.append(TEXT_286);
    stringBuffer.append(next);
    
				if (it.hasNext()) {
    stringBuffer.append(TEXT_287);
    
				}
			}
		
    stringBuffer.append(TEXT_288);
    
		}
	}

    stringBuffer.append(TEXT_289);
    
}

    stringBuffer.append(TEXT_290);
d1382 1
a1382 108
    stringBuffer.append(TEXT_291);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_292);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_293);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.StackLayout"));
    stringBuffer.append(TEXT_294);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_295);
    
	if (myHelper.hasBothChildrenAndCompartments()) {

    stringBuffer.append(TEXT_296);
    
	}

    stringBuffer.append(TEXT_297);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_298);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager"));
    stringBuffer.append(TEXT_299);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_300);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.PaneDecorationManager"));
    stringBuffer.append(TEXT_301);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager"));
    stringBuffer.append(TEXT_302);
    
	if (!genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty()) {

    stringBuffer.append(TEXT_303);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_304);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_305);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RectangleFigure"));
    stringBuffer.append(TEXT_306);
    
	}

    stringBuffer.append(TEXT_307);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_308);
    
String figureQualifiedClassName = null;
Viewmap viewmap = genNode.getViewmap();
if (viewmap instanceof FigureViewmap) {
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.RectangleFigure";
	}

    stringBuffer.append(TEXT_309);
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
    stringBuffer.append(TEXT_310);
    if (isXYLayout) {
    stringBuffer.append(TEXT_311);
    } /* use flow layout*/ 
    stringBuffer.append(TEXT_312);
    } else if (viewmap instanceof SnippetViewmap) {
    stringBuffer.append(TEXT_313);
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_314);
    } else if (viewmap instanceof InnerClassViewmap) {
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();

    stringBuffer.append(TEXT_315);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_316);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_317);
    if (!genNode.getChildNodes().isEmpty() && isXYLayout) { /*otherwise, leave to figure's default value*/
    stringBuffer.append(TEXT_318);
    }
    stringBuffer.append(TEXT_319);
    }
    stringBuffer.append(TEXT_320);
    if (figureQualifiedClassName != null) {
    stringBuffer.append(TEXT_321);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_322);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_323);
    }
    stringBuffer.append(TEXT_324);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_325);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_326);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_327);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_328);
    
if (!isXYLayout) {
	String layoutClassName = importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout");

    stringBuffer.append(TEXT_329);
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_330);
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_331);
    } else {
    stringBuffer.append(TEXT_332);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
    stringBuffer.append(TEXT_333);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_334);
d1384 1
a1384 1
    stringBuffer.append(TEXT_335);
d1386 1
a1386 1
    stringBuffer.append(TEXT_336);
d1388 1
a1388 1
    stringBuffer.append(TEXT_337);
d1390 1
a1390 1
    stringBuffer.append(TEXT_338);
d1392 1
a1392 1
    stringBuffer.append(TEXT_339);
d1396 1
a1396 1
    stringBuffer.append(TEXT_340);
d1398 1
a1398 1
    stringBuffer.append(TEXT_341);
d1406 1
a1406 1
    stringBuffer.append(TEXT_342);
d1408 1
a1408 1
    stringBuffer.append(TEXT_343);
d1410 1
a1410 1
    stringBuffer.append(TEXT_344);
d1412 1
a1412 1
    stringBuffer.append(TEXT_345);
d1414 1
a1414 1
    stringBuffer.append(TEXT_346);
d1423 1
a1423 1
    stringBuffer.append(TEXT_347);
d1425 1
a1425 1
    stringBuffer.append(TEXT_348);
d1427 1
a1427 1
    stringBuffer.append(TEXT_349);
d1429 1
a1429 1
    stringBuffer.append(TEXT_350);
d1431 1
a1431 1
    stringBuffer.append(TEXT_351);
d1435 1
a1435 1
    stringBuffer.append(TEXT_352);
d1443 1
a1443 1
    stringBuffer.append(TEXT_353);
d1445 1
a1445 1
    stringBuffer.append(TEXT_354);
d1447 1
a1447 1
    stringBuffer.append(TEXT_355);
d1449 1
a1449 1
    stringBuffer.append(TEXT_356);
d1451 1
a1451 1
    stringBuffer.append(TEXT_357);
d1455 1
a1455 1
    stringBuffer.append(TEXT_358);
d1459 1
a1459 1
    stringBuffer.append(TEXT_359);
d1461 1
a1461 1
    stringBuffer.append(TEXT_360);
d1465 1
a1465 1
    stringBuffer.append(TEXT_361);
d1467 1
a1467 1
    stringBuffer.append(TEXT_362);
d1469 1
a1469 1
    stringBuffer.append(TEXT_363);
d1471 1
a1471 1
    stringBuffer.append(TEXT_364);
d1473 1
a1473 1
    stringBuffer.append(TEXT_365);
d1475 1
a1475 1
    stringBuffer.append(TEXT_366);
d1477 1
a1477 1
    stringBuffer.append(TEXT_367);
d1481 1
a1481 1
    stringBuffer.append(TEXT_368);
d1483 1
a1483 1
    stringBuffer.append(TEXT_369);
d1485 1
a1485 1
    stringBuffer.append(TEXT_370);
d1487 1
a1487 1
    stringBuffer.append(TEXT_371);
d1489 1
a1489 1
    stringBuffer.append(TEXT_372);
d1491 3
a1493 3
    stringBuffer.append(TEXT_373);
    stringBuffer.append(TEXT_374);
    stringBuffer.append(TEXT_375);
d1495 1
a1495 1
    stringBuffer.append(TEXT_376);
d1497 1
a1497 1
    stringBuffer.append(TEXT_377);
d1499 1
a1499 1
    stringBuffer.append(TEXT_378);
d1501 1
a1501 1
    stringBuffer.append(TEXT_379);
d1503 1
a1503 1
    stringBuffer.append(TEXT_380);
d1505 1
a1505 1
    stringBuffer.append(TEXT_381);
d1507 1
a1507 1
    stringBuffer.append(TEXT_382);
d1509 1
a1509 1
    stringBuffer.append(TEXT_383);
d1517 1
a1517 1
    stringBuffer.append(TEXT_384);
d1519 1
a1519 1
    stringBuffer.append(TEXT_385);
d1523 1
a1523 1
    stringBuffer.append(TEXT_386);
d1527 1
a1527 1
    stringBuffer.append(TEXT_387);
d1529 1
a1529 1
    stringBuffer.append(TEXT_388);
d1534 1
a1534 1
    stringBuffer.append(TEXT_389);
d1536 1
a1536 1
    stringBuffer.append(TEXT_390);
d1540 1
a1540 1
    stringBuffer.append(TEXT_391);
d1542 1
a1542 1
    stringBuffer.append(TEXT_392);
d1544 1
a1544 1
    stringBuffer.append(TEXT_393);
d1546 1
a1546 1
    stringBuffer.append(TEXT_394);
d1548 1
a1548 1
    stringBuffer.append(TEXT_395);
d1553 1
a1553 1
    stringBuffer.append(TEXT_396);
d1555 1
a1555 1
    stringBuffer.append(TEXT_397);
d1560 1
a1560 1
    stringBuffer.append(TEXT_398);
d1562 1
a1562 1
    stringBuffer.append(TEXT_399);
d1566 1
a1566 1
    stringBuffer.append(TEXT_400);
d1571 1
a1571 1
    stringBuffer.append(TEXT_401);
d1573 1
a1573 1
    stringBuffer.append(TEXT_402);
d1577 1
a1577 1
    stringBuffer.append(TEXT_403);
d1579 1
a1579 1
    stringBuffer.append(TEXT_404);
d1581 1
a1581 1
    stringBuffer.append(TEXT_405);
d1586 1
a1586 1
    stringBuffer.append(TEXT_406);
d1591 1
a1591 1
    stringBuffer.append(TEXT_407);
d1593 1
a1593 1
    stringBuffer.append(TEXT_408);
d1595 1
a1595 1
    stringBuffer.append(TEXT_409);
d1599 1
a1599 1
    stringBuffer.append(TEXT_410);
d1601 1
a1601 1
    stringBuffer.append(TEXT_411);
d1605 1
a1605 1
    stringBuffer.append(TEXT_412);
d1607 1
a1607 1
    stringBuffer.append(TEXT_413);
d1609 1
a1609 1
    stringBuffer.append(TEXT_414);
d1614 1
a1614 1
    stringBuffer.append(TEXT_415);
d1619 1
a1619 1
    stringBuffer.append(TEXT_416);
d1621 1
a1621 1
    stringBuffer.append(TEXT_417);
d1623 1
a1623 1
    stringBuffer.append(TEXT_418);
d1627 1
a1627 1
    stringBuffer.append(TEXT_419);
d1634 1
a1634 1
    stringBuffer.append(TEXT_420);
d1636 1
a1636 1
    stringBuffer.append(TEXT_421);
d1638 1
a1638 1
    stringBuffer.append(TEXT_422);
d1640 1
a1640 1
    stringBuffer.append(TEXT_423);
d1642 1
a1642 1
    stringBuffer.append(TEXT_424);
d1646 1
a1646 1
    stringBuffer.append(TEXT_425);
d1648 1
a1648 1
    stringBuffer.append(TEXT_426);
d1650 1
a1650 1
    stringBuffer.append(TEXT_427);
d1652 1
a1652 1
    stringBuffer.append(TEXT_428);
d1654 1
a1654 1
    stringBuffer.append(TEXT_429);
d1656 1
a1656 1
    stringBuffer.append(TEXT_430);
d1658 1
a1658 1
    stringBuffer.append(TEXT_431);
d1660 1
a1660 1
    stringBuffer.append(TEXT_432);
d1662 1
a1662 1
    stringBuffer.append(TEXT_433);
d1664 1
a1664 1
    stringBuffer.append(TEXT_434);
d1666 1
a1666 1
    stringBuffer.append(TEXT_435);
d1668 1
a1668 1
    stringBuffer.append(TEXT_436);
d1670 1
a1670 1
    stringBuffer.append(TEXT_437);
d1672 1
a1672 1
    stringBuffer.append(TEXT_438);
d1674 1
a1674 1
    stringBuffer.append(TEXT_439);
d1676 1
a1676 1
    stringBuffer.append(TEXT_440);
d1678 1
a1678 1
    stringBuffer.append(TEXT_441);
d1680 1
a1680 1
    stringBuffer.append(TEXT_442);
d1682 1
a1682 1
    stringBuffer.append(TEXT_443);
d1684 1
a1684 1
    stringBuffer.append(TEXT_444);
d1686 1
a1686 1
    stringBuffer.append(TEXT_445);
d1688 1
a1688 1
    stringBuffer.append(TEXT_446);
d1692 1
a1692 1
    stringBuffer.append(TEXT_447);
d1694 1
a1694 1
    stringBuffer.append(TEXT_448);
d1696 1
a1696 1
    stringBuffer.append(TEXT_449);
d1700 1
a1700 1
    stringBuffer.append(TEXT_450);
d1702 1
a1702 1
    stringBuffer.append(TEXT_451);
d1704 1
a1704 1
    stringBuffer.append(TEXT_452);
d1708 1
a1708 1
    stringBuffer.append(TEXT_453);
d1715 1
a1715 1
    stringBuffer.append(TEXT_454);
d1719 1
a1719 1
    stringBuffer.append(TEXT_455);
d1723 1
a1723 1
    stringBuffer.append(TEXT_456);
d1730 1
a1730 1
    stringBuffer.append(TEXT_457);
d1734 1
a1734 1
    stringBuffer.append(TEXT_458);
d1744 2
a1745 2
    stringBuffer.append(TEXT_459);
    stringBuffer.append(TEXT_460);
d1747 1
a1747 1
    stringBuffer.append(TEXT_461);
d1749 1
a1749 1
    stringBuffer.append(TEXT_462);
d1751 1
a1751 1
    stringBuffer.append(TEXT_463);
d1753 1
a1753 1
    stringBuffer.append(TEXT_464);
d1755 1
a1755 1
    stringBuffer.append(TEXT_465);
d1757 1
a1757 1
    stringBuffer.append(TEXT_466);
d1759 1
a1759 1
    stringBuffer.append(TEXT_467);
d1774 1
a1774 1
    stringBuffer.append(TEXT_468);
d1776 1
a1776 1
    stringBuffer.append(TEXT_469);
d1778 1
a1778 1
    stringBuffer.append(TEXT_470);
d1780 1
a1780 1
    stringBuffer.append(TEXT_471);
d1784 1
a1784 1
    stringBuffer.append(TEXT_472);
d1786 1
a1786 1
    stringBuffer.append(TEXT_473);
d1805 1
a1805 1
    stringBuffer.append(TEXT_474);
d1807 1
a1807 1
    stringBuffer.append(TEXT_475);
d1809 1
a1809 1
    stringBuffer.append(TEXT_476);
d1811 1
a1811 1
    stringBuffer.append(TEXT_477);
d1813 1
a1813 1
    stringBuffer.append(TEXT_478);
d1817 1
a1817 1
    stringBuffer.append(TEXT_479);
d1819 1
a1819 1
    stringBuffer.append(TEXT_480);
d1821 1
a1821 1
    stringBuffer.append(TEXT_481);
d1823 1
a1823 1
    stringBuffer.append(TEXT_482);
d1831 1
a1831 1
    stringBuffer.append(TEXT_483);
d1833 1
a1833 1
    stringBuffer.append(TEXT_484);
d1835 1
a1835 1
    stringBuffer.append(TEXT_485);
d1840 1
a1840 1
    stringBuffer.append(TEXT_486);
d1842 1
a1842 1
    stringBuffer.append(TEXT_487);
d1844 1
a1844 1
    stringBuffer.append(TEXT_488);
d1846 1
a1846 1
    stringBuffer.append(TEXT_489);
d1855 1
a1855 1
    stringBuffer.append(TEXT_490);
d1859 1
a1859 1
    stringBuffer.append(TEXT_491);
d1861 1
a1861 1
    stringBuffer.append(TEXT_492);
d1867 1
a1867 1
    stringBuffer.append(TEXT_493);
d1869 1
a1869 1
    stringBuffer.append(TEXT_494);
d1871 1
a1871 1
    stringBuffer.append(TEXT_495);
d1875 1
a1875 1
    stringBuffer.append(TEXT_496);
d1879 1
a1879 1
    stringBuffer.append(TEXT_497);
d1881 1
a1881 1
    stringBuffer.append(TEXT_498);
d1883 1
a1883 1
    stringBuffer.append(TEXT_499);
d1888 2
a1889 2
    stringBuffer.append(TEXT_500);
    stringBuffer.append(TEXT_501);
d1891 1
a1891 1
    stringBuffer.append(TEXT_502);
d1901 1
a1901 1
    stringBuffer.append(TEXT_503);
d1903 1
a1903 1
    stringBuffer.append(TEXT_504);
d1905 1
a1905 1
    stringBuffer.append(TEXT_505);
d1907 1
a1907 1
    stringBuffer.append(TEXT_506);
d1909 1
a1909 1
    stringBuffer.append(TEXT_507);
d1920 1
a1920 1
    stringBuffer.append(TEXT_508);
d1922 1
a1922 1
    stringBuffer.append(TEXT_509);
d1924 1
a1924 1
    stringBuffer.append(TEXT_510);
d1926 1
a1926 1
    stringBuffer.append(TEXT_511);
d1930 1
a1930 1
    stringBuffer.append(TEXT_512);
d1934 1
a1934 1
    stringBuffer.append(TEXT_513);
d1936 1
a1936 1
    stringBuffer.append(TEXT_514);
d1940 1
a1940 1
    stringBuffer.append(TEXT_515);
d1944 1
a1944 1
    stringBuffer.append(TEXT_516);
d1946 2
a1947 2
    stringBuffer.append(TEXT_517);
    stringBuffer.append(TEXT_518);
d1951 1
a1951 1
    stringBuffer.append(TEXT_519);
d1953 1
a1953 1
    stringBuffer.append(TEXT_520);
d1957 1
a1957 1
    stringBuffer.append(TEXT_521);
d1959 1
a1959 1
    stringBuffer.append(TEXT_522);
d1961 1
a1961 1
    stringBuffer.append(TEXT_523);
d1979 1
a1979 1
    stringBuffer.append(TEXT_524);
d1981 1
a1981 1
    stringBuffer.append(TEXT_525);
d1983 1
a1983 1
    stringBuffer.append(TEXT_526);
d1985 1
a1985 1
    stringBuffer.append(TEXT_527);
d1987 1
a1987 1
    stringBuffer.append(TEXT_528);
d1996 1
a1996 1
    stringBuffer.append(TEXT_529);
d1998 1
a1998 1
    stringBuffer.append(TEXT_530);
d2000 1
a2000 1
    stringBuffer.append(TEXT_531);
d2002 1
a2002 1
    stringBuffer.append(TEXT_532);
d2006 1
a2006 1
    stringBuffer.append(TEXT_533);
d2008 1
a2008 1
    stringBuffer.append(TEXT_534);
d2010 1
a2010 1
    stringBuffer.append(TEXT_535);
d2014 1
a2014 1
    stringBuffer.append(TEXT_536);
d2016 1
a2016 1
    stringBuffer.append(TEXT_537);
d2021 1
a2021 1
    stringBuffer.append(TEXT_538);
d2028 1
a2028 1
    stringBuffer.append(TEXT_539);
d2030 1
a2030 1
    stringBuffer.append(TEXT_540);
d2034 1
a2034 1
    stringBuffer.append(TEXT_541);
d2036 1
a2036 1
    stringBuffer.append(TEXT_542);
d2040 1
a2040 1
    stringBuffer.append(TEXT_543);
d2042 1
a2042 1
    stringBuffer.append(TEXT_544);
d2046 1
a2046 1
    stringBuffer.append(TEXT_545);
d2050 1
a2050 1
    stringBuffer.append(TEXT_546);
d2056 1
a2056 1
    stringBuffer.append(TEXT_547);
d2061 1
a2061 1
    stringBuffer.append(TEXT_548);
d2066 1
a2066 1
    stringBuffer.append(TEXT_549);
d2070 1
a2070 1
    stringBuffer.append(TEXT_550);
d2072 1
a2072 1
    stringBuffer.append(TEXT_551);
d2074 1
a2074 1
    stringBuffer.append(TEXT_552);
d2076 1
a2076 1
    stringBuffer.append(TEXT_553);
d2078 1
a2078 1
    stringBuffer.append(TEXT_554);
d2080 1
a2080 1
    stringBuffer.append(TEXT_555);
d2082 1
a2082 1
    stringBuffer.append(TEXT_556);
d2084 1
a2084 1
    stringBuffer.append(TEXT_557);
d2086 1
a2086 1
    stringBuffer.append(TEXT_558);
d2088 1
a2088 1
    stringBuffer.append(TEXT_559);
d2090 1
a2090 1
    stringBuffer.append(TEXT_560);
d2092 1
a2092 1
    stringBuffer.append(TEXT_561);
d2096 1
a2096 1
    stringBuffer.append(TEXT_562);
d2100 1
a2100 1
    stringBuffer.append(TEXT_563);
d2102 1
a2102 1
    stringBuffer.append(TEXT_564);
d2104 1
a2104 1
    stringBuffer.append(TEXT_565);
d2106 1
a2106 1
    stringBuffer.append(TEXT_566);
d2108 1
a2108 1
    stringBuffer.append(TEXT_567);
d2110 1
a2110 1
    stringBuffer.append(TEXT_568);
d2112 1
a2112 1
    stringBuffer.append(TEXT_569);
d2114 1
a2114 1
    stringBuffer.append(TEXT_570);
d2116 1
a2116 1
    stringBuffer.append(TEXT_571);
d2129 1
a2129 1
    stringBuffer.append(TEXT_572);
d2131 1
a2131 1
    stringBuffer.append(TEXT_573);
d2133 1
a2133 1
    stringBuffer.append(TEXT_574);
d2135 1
a2135 1
    stringBuffer.append(TEXT_575);
d2140 1
a2140 1
    stringBuffer.append(TEXT_576);
d2142 1
a2142 1
    stringBuffer.append(TEXT_577);
d2144 1
a2144 1
    stringBuffer.append(TEXT_578);
d2146 1
a2146 1
    stringBuffer.append(TEXT_579);
d2148 1
a2148 1
    stringBuffer.append(TEXT_580);
d2150 1
a2150 1
    stringBuffer.append(TEXT_581);
d2152 1
a2152 1
    stringBuffer.append(TEXT_582);
d2154 1
a2154 1
    stringBuffer.append(TEXT_583);
d2156 1
a2156 1
    stringBuffer.append(TEXT_584);
d2158 1
a2158 1
    stringBuffer.append(TEXT_585);
d2162 1
a2162 1
    stringBuffer.append(TEXT_586);
d2164 1
a2164 1
    stringBuffer.append(TEXT_587);
d2177 1
a2177 1
    stringBuffer.append(TEXT_588);
d2191 1
a2191 1
    stringBuffer.append(TEXT_589);
d2193 1
a2193 1
    stringBuffer.append(TEXT_590);
d2195 1
a2195 1
    stringBuffer.append(TEXT_591);
d2197 1
a2197 1
    stringBuffer.append(TEXT_592);
d2199 1
a2199 1
    stringBuffer.append(TEXT_593);
d2203 1
a2203 1
    stringBuffer.append(TEXT_594);
d2205 1
a2205 1
    stringBuffer.append(TEXT_595);
d2207 1
a2207 1
    stringBuffer.append(TEXT_596);
d2209 1
a2209 1
    stringBuffer.append(TEXT_597);
d2216 1
a2216 1
    stringBuffer.append(TEXT_598);
d2230 1
a2230 1
    stringBuffer.append(TEXT_599);
d2232 1
a2232 1
    stringBuffer.append(TEXT_600);
d2234 1
a2234 1
    stringBuffer.append(TEXT_601);
d2236 1
a2236 1
    stringBuffer.append(TEXT_602);
d2238 1
a2238 1
    stringBuffer.append(TEXT_603);
d2242 1
a2242 1
    stringBuffer.append(TEXT_604);
d2244 1
a2244 1
    stringBuffer.append(TEXT_605);
d2246 1
a2246 1
    stringBuffer.append(TEXT_606);
d2248 1
a2248 1
    stringBuffer.append(TEXT_607);
d2255 1
a2255 1
    stringBuffer.append(TEXT_608);
d2269 1
a2269 1
    stringBuffer.append(TEXT_609);
d2271 1
a2271 1
    stringBuffer.append(TEXT_610);
d2273 1
a2273 1
    stringBuffer.append(TEXT_611);
d2275 1
a2275 1
    stringBuffer.append(TEXT_612);
d2277 1
a2277 1
    stringBuffer.append(TEXT_613);
d2281 1
a2281 1
    stringBuffer.append(TEXT_614);
d2283 1
a2283 1
    stringBuffer.append(TEXT_615);
d2285 1
a2285 1
    stringBuffer.append(TEXT_616);
d2287 1
a2287 1
    stringBuffer.append(TEXT_617);
d2297 1
a2297 1
    stringBuffer.append(TEXT_618);
d2311 1
a2311 1
    stringBuffer.append(TEXT_619);
d2313 1
a2313 1
    stringBuffer.append(TEXT_620);
d2315 1
a2315 1
    stringBuffer.append(TEXT_621);
d2317 1
a2317 1
    stringBuffer.append(TEXT_622);
d2319 1
a2319 1
    stringBuffer.append(TEXT_623);
d2323 1
a2323 1
    stringBuffer.append(TEXT_624);
d2325 1
a2325 1
    stringBuffer.append(TEXT_625);
d2327 1
a2327 1
    stringBuffer.append(TEXT_626);
d2329 1
a2329 1
    stringBuffer.append(TEXT_627);
d2338 1
a2338 1
    stringBuffer.append(TEXT_628);
d2343 1
a2343 1
    stringBuffer.append(TEXT_629);
d2345 1
a2345 1
    stringBuffer.append(TEXT_630);
d2352 1
a2352 1
    stringBuffer.append(TEXT_631);
d2357 1
a2357 1
    stringBuffer.append(TEXT_632);
d2359 1
a2359 1
    stringBuffer.append(TEXT_633);
d2365 1
a2365 1
    stringBuffer.append(TEXT_634);
d2367 1
a2367 1
    stringBuffer.append(TEXT_635);
d2369 1
a2369 1
    stringBuffer.append(TEXT_636);
d2374 1
a2374 1
    stringBuffer.append(TEXT_637);
d2376 1
a2376 1
    stringBuffer.append(TEXT_638);
d2378 1
a2378 1
    stringBuffer.append(TEXT_639);
d2380 1
a2380 1
    stringBuffer.append(TEXT_640);
d2382 1
a2382 1
    stringBuffer.append(TEXT_641);
d2389 2
a2390 2
    stringBuffer.append(TEXT_642);
    stringBuffer.append(TEXT_643);
d2392 1
a2392 1
    stringBuffer.append(TEXT_644);
d2394 1
a2394 1
    stringBuffer.append(TEXT_645);
d2396 1
a2396 1
    stringBuffer.append(TEXT_646);
d2405 1
a2405 1
    stringBuffer.append(TEXT_647);
d2407 1
a2407 1
    stringBuffer.append(TEXT_648);
d2409 1
a2409 1
    stringBuffer.append(TEXT_649);
d2411 1
a2411 1
    stringBuffer.append(TEXT_650);
d2417 1
a2417 1
    stringBuffer.append(TEXT_651);
d2419 1
a2419 1
    stringBuffer.append(TEXT_652);
d2421 1
a2421 1
    stringBuffer.append(TEXT_653);
d2425 1
a2425 1
    stringBuffer.append(TEXT_654);
d2427 1
a2427 1
    stringBuffer.append(TEXT_655);
d2429 1
a2429 1
    stringBuffer.append(TEXT_656);
d2433 1
a2433 1
    stringBuffer.append(TEXT_657);
d2435 1
a2435 1
    stringBuffer.append(TEXT_658);
d2441 2
a2442 2
    stringBuffer.append(TEXT_659);
    stringBuffer.append(TEXT_660);
d2444 1
a2444 1
    stringBuffer.append(TEXT_661);
d2446 1
a2446 1
    stringBuffer.append(TEXT_662);
d2469 1
a2469 1
    stringBuffer.append(TEXT_663);
d2471 1
a2471 1
    stringBuffer.append(TEXT_664);
d2473 1
a2473 1
    stringBuffer.append(TEXT_665);
d2475 1
a2475 1
    stringBuffer.append(TEXT_666);
d2480 1
a2480 1
    stringBuffer.append(TEXT_667);
d2489 1
a2489 1
    stringBuffer.append(TEXT_668);
d2491 1
a2491 1
    stringBuffer.append(TEXT_669);
d2493 1
a2493 1
    stringBuffer.append(TEXT_670);
d2495 1
a2495 1
    stringBuffer.append(TEXT_671);
d2499 1
a2499 1
    stringBuffer.append(TEXT_672);
d2501 1
a2501 1
    stringBuffer.append(TEXT_673);
d2503 1
a2503 1
    stringBuffer.append(TEXT_674);
d2507 1
a2507 1
    stringBuffer.append(TEXT_675);
d2509 1
a2509 1
    stringBuffer.append(TEXT_676);
d2514 1
a2514 1
    stringBuffer.append(TEXT_677);
d2522 1
a2522 1
    stringBuffer.append(TEXT_678);
d2524 1
a2524 1
    stringBuffer.append(TEXT_679);
d2528 1
a2528 1
    stringBuffer.append(TEXT_680);
d2530 1
a2530 1
    stringBuffer.append(TEXT_681);
d2535 1
a2535 1
    stringBuffer.append(TEXT_682);
d2537 1
a2537 1
    stringBuffer.append(TEXT_683);
d2539 1
a2539 1
    stringBuffer.append(TEXT_684);
d2541 1
a2541 1
    stringBuffer.append(TEXT_685);
d2545 1
a2545 1
    stringBuffer.append(TEXT_686);
d2547 1
a2547 1
    stringBuffer.append(TEXT_687);
d2549 1
a2549 1
    stringBuffer.append(TEXT_688);
d2554 1
a2554 1
    stringBuffer.append(TEXT_689);
d2556 1
a2556 1
    stringBuffer.append(TEXT_690);
d2558 1
a2558 1
    stringBuffer.append(TEXT_691);
d2560 1
a2560 1
    stringBuffer.append(TEXT_692);
d2564 1
a2564 1
    stringBuffer.append(TEXT_693);
d2566 1
a2566 1
    stringBuffer.append(TEXT_694);
d2568 1
a2568 1
    stringBuffer.append(TEXT_695);
d2572 1
a2572 1
    stringBuffer.append(TEXT_696);
d2574 1
a2574 1
    stringBuffer.append(TEXT_697);
d2578 1
a2578 1
    stringBuffer.append(TEXT_698);
d2582 1
a2582 1
    stringBuffer.append(TEXT_699);
d2590 1
a2590 1
    stringBuffer.append(TEXT_700);
d2595 1
a2595 1
    stringBuffer.append(TEXT_701);
d2605 1
a2605 1
    stringBuffer.append(TEXT_702);
d2607 1
a2607 1
    stringBuffer.append(TEXT_703);
d2609 1
a2609 1
    stringBuffer.append(TEXT_704);
d2611 1
a2611 1
    stringBuffer.append(TEXT_705);
d2615 1
a2615 1
    stringBuffer.append(TEXT_706);
d2617 1
a2617 1
    stringBuffer.append(TEXT_707);
d2619 1
a2619 1
    stringBuffer.append(TEXT_708);
d2623 1
a2623 1
    stringBuffer.append(TEXT_709);
d2628 1
a2628 1
    stringBuffer.append(TEXT_710);
d2630 1
a2630 1
    stringBuffer.append(TEXT_711);
d2632 1
a2632 1
    stringBuffer.append(TEXT_712);
d2636 1
a2636 1
    stringBuffer.append(TEXT_713);
d2640 1
a2640 1
    stringBuffer.append(TEXT_714);
d2645 1
a2645 1
    stringBuffer.append(TEXT_715);
d2649 1
a2649 1
    stringBuffer.append(TEXT_716);
d2651 1
a2651 1
    stringBuffer.append(TEXT_717);
d2653 1
a2653 1
    stringBuffer.append(TEXT_718);
d2655 1
a2655 1
    stringBuffer.append(TEXT_719);
d2657 1
a2657 1
    stringBuffer.append(TEXT_720);
d2659 1
a2659 1
    stringBuffer.append(TEXT_721);
d2661 1
a2661 1
    stringBuffer.append(TEXT_722);
d2663 1
a2663 1
    stringBuffer.append(TEXT_723);
d2665 1
a2665 1
    stringBuffer.append(TEXT_724);
d2669 1
a2669 1
    stringBuffer.append(TEXT_725);
d2671 1
a2671 1
    stringBuffer.append(TEXT_726);
d2673 1
a2673 1
    stringBuffer.append(TEXT_727);
d2678 1
a2678 1
    stringBuffer.append(TEXT_728);
d2680 1
a2680 1
    stringBuffer.append(TEXT_729);
d2682 1
a2682 1
    stringBuffer.append(TEXT_730);
d2687 1
a2687 1
    stringBuffer.append(TEXT_731);
d2689 1
a2689 1
    stringBuffer.append(TEXT_732);
d2693 1
a2693 1
    stringBuffer.append(TEXT_733);
d2697 1
a2697 1
    stringBuffer.append(TEXT_734);
d2701 1
a2701 1
    stringBuffer.append(TEXT_735);
d2708 1
a2708 1
    stringBuffer.append(TEXT_736);
d2712 1
a2712 1
    stringBuffer.append(TEXT_737);
d2714 1
a2714 1
    stringBuffer.append(TEXT_738);
d2716 1
a2716 1
    stringBuffer.append(TEXT_739);
d2721 1
a2721 1
    stringBuffer.append(TEXT_740);
d2723 1
a2723 1
    stringBuffer.append(TEXT_741);
d2727 1
a2727 1
    stringBuffer.append(TEXT_742);
d2731 1
a2731 1
    stringBuffer.append(TEXT_743);
d2733 1
a2733 1
    stringBuffer.append(TEXT_744);
d2735 1
a2735 1
    stringBuffer.append(TEXT_745);
d2737 1
a2737 1
    stringBuffer.append(TEXT_746);
d2739 1
a2739 1
    stringBuffer.append(TEXT_747);
d2741 1
a2741 1
    stringBuffer.append(TEXT_748);
d2743 1
a2743 1
    stringBuffer.append(TEXT_749);
d2745 1
a2745 1
    stringBuffer.append(TEXT_750);
d2747 1
a2747 1
    stringBuffer.append(TEXT_751);
d2749 1
a2749 1
    stringBuffer.append(TEXT_752);
d2751 1
a2751 1
    stringBuffer.append(TEXT_753);
d2753 1
a2753 1
    stringBuffer.append(TEXT_754);
d2760 3
a2762 3
    stringBuffer.append(TEXT_755);
    stringBuffer.append(TEXT_756);
    stringBuffer.append(TEXT_757);
d2764 1
a2764 1
    stringBuffer.append(TEXT_758);
d2766 3
a2768 3
    stringBuffer.append(TEXT_759);
    stringBuffer.append(TEXT_760);
    stringBuffer.append(TEXT_761);
d2770 1
a2770 1
    stringBuffer.append(TEXT_762);
d2772 1
a2772 1
    stringBuffer.append(TEXT_763);
d2774 1
a2774 1
    stringBuffer.append(TEXT_764);
d2778 1
a2778 1
    stringBuffer.append(TEXT_765);
d2786 1
a2786 1
    stringBuffer.append(TEXT_766);
d2790 1
a2790 1
    stringBuffer.append(TEXT_767);
d2792 1
a2792 1
    stringBuffer.append(TEXT_768);
d2794 1
a2794 1
    stringBuffer.append(TEXT_769);
d2796 1
a2796 1
    stringBuffer.append(TEXT_770);
d2798 1
a2798 1
    stringBuffer.append(TEXT_771);
d2800 1
a2800 1
    stringBuffer.append(TEXT_772);
d2802 1
a2802 1
    stringBuffer.append(TEXT_773);
d2804 1
a2804 1
    stringBuffer.append(TEXT_774);
d2806 1
a2806 1
    stringBuffer.append(TEXT_775);
d2808 1
a2808 1
    stringBuffer.append(TEXT_776);
d2810 1
a2810 1
    stringBuffer.append(TEXT_777);
d2812 1
a2812 1
    stringBuffer.append(TEXT_778);
d2816 1
a2816 1
    stringBuffer.append(TEXT_779);
d2820 1
a2820 1
    stringBuffer.append(TEXT_780);
d2822 1
a2822 1
    stringBuffer.append(TEXT_781);
d2826 3
a2828 3
    stringBuffer.append(TEXT_782);
    stringBuffer.append(TEXT_783);
    stringBuffer.append(TEXT_784);
d2830 1
a2830 1
    stringBuffer.append(TEXT_785);
d2832 1
a2832 1
    stringBuffer.append(TEXT_786);
d2834 1
a2834 1
    stringBuffer.append(TEXT_787);
d2836 1
a2836 1
    stringBuffer.append(TEXT_788);
d2838 1
a2838 1
    stringBuffer.append(TEXT_789);
d2840 1
a2840 1
    stringBuffer.append(TEXT_790);
d2842 1
a2842 1
    stringBuffer.append(TEXT_791);
d2844 1
a2844 1
    stringBuffer.append(TEXT_792);
d2846 1
a2846 1
    stringBuffer.append(TEXT_793);
d2848 1
a2848 1
    stringBuffer.append(TEXT_794);
d2850 1
a2850 1
    stringBuffer.append(TEXT_795);
d2852 1
a2852 1
    stringBuffer.append(TEXT_796);
d2854 1
a2854 1
    stringBuffer.append(TEXT_797);
d2856 1
a2856 1
    stringBuffer.append(TEXT_798);
d2858 1
a2858 1
    stringBuffer.append(TEXT_799);
d2860 3
a2862 3
    stringBuffer.append(TEXT_800);
    stringBuffer.append(TEXT_801);
    stringBuffer.append(TEXT_802);
d2864 1
a2864 1
    stringBuffer.append(TEXT_803);
d2866 1
a2866 1
    stringBuffer.append(TEXT_804);
d2868 1
a2868 1
    stringBuffer.append(TEXT_805);
d2870 3
a2872 3
    stringBuffer.append(TEXT_806);
    stringBuffer.append(TEXT_807);
    stringBuffer.append(TEXT_808);
d2874 1
a2874 1
    stringBuffer.append(TEXT_809);
d2876 1
a2876 1
    stringBuffer.append(TEXT_810);
d2878 1
a2878 1
    stringBuffer.append(TEXT_811);
d2880 3
a2882 3
    stringBuffer.append(TEXT_812);
    stringBuffer.append(TEXT_813);
    stringBuffer.append(TEXT_814);
d2884 1
a2884 1
    stringBuffer.append(TEXT_815);
d2886 1
a2886 1
    stringBuffer.append(TEXT_816);
d2888 1
a2888 1
    stringBuffer.append(TEXT_817);
d2890 1
a2890 1
    stringBuffer.append(TEXT_818);
d2892 3
a2894 3
    stringBuffer.append(TEXT_819);
    stringBuffer.append(TEXT_820);
    stringBuffer.append(TEXT_821);
d2896 3
a2898 3
    stringBuffer.append(TEXT_822);
    stringBuffer.append(TEXT_823);
    stringBuffer.append(TEXT_824);
d2900 3
a2902 3
    stringBuffer.append(TEXT_825);
    stringBuffer.append(TEXT_826);
    stringBuffer.append(TEXT_827);
d2904 3
a2906 3
    stringBuffer.append(TEXT_828);
    stringBuffer.append(TEXT_829);
    stringBuffer.append(TEXT_830);
d2908 1
a2908 1
    stringBuffer.append(TEXT_831);
d2910 1
a2910 1
    stringBuffer.append(TEXT_832);
d2912 1
a2912 1
    stringBuffer.append(TEXT_833);
d2914 3
a2916 3
    stringBuffer.append(TEXT_834);
    stringBuffer.append(TEXT_835);
    stringBuffer.append(TEXT_836);
d2918 1
a2918 1
    stringBuffer.append(TEXT_837);
d2920 1
a2920 1
    stringBuffer.append(TEXT_838);
d2925 1
a2925 1
    stringBuffer.append(TEXT_839);
d2927 1
a2927 1
    stringBuffer.append(TEXT_840);
d2931 1
a2931 1
    stringBuffer.append(TEXT_841);
d2938 1
a2938 1
    stringBuffer.append(TEXT_842);
d2940 1
a2940 1
    stringBuffer.append(TEXT_843);
d2942 2
a2943 2
    stringBuffer.append(TEXT_844);
    stringBuffer.append(TEXT_845);
d2953 1
a2953 1
    stringBuffer.append(TEXT_846);
d2955 1
a2955 1
    stringBuffer.append(TEXT_847);
d2957 1
a2957 1
    stringBuffer.append(TEXT_848);
d2960 1
a2960 1
    stringBuffer.append(TEXT_849);
d2962 1
a2962 1
    stringBuffer.append(TEXT_850);
d2964 1
a2964 1
    stringBuffer.append(TEXT_851);
d2966 1
a2966 1
    stringBuffer.append(TEXT_852);
d2977 2
a2978 2
    stringBuffer.append(TEXT_853);
    stringBuffer.append(TEXT_854);
d2980 1
a2980 1
    stringBuffer.append(TEXT_855);
d2982 1
a2982 1
    stringBuffer.append(TEXT_856);
d2984 3
a2986 3
    stringBuffer.append(TEXT_857);
    stringBuffer.append(TEXT_858);
    stringBuffer.append(TEXT_859);
d2988 1
a2988 1
    stringBuffer.append(TEXT_860);
d2990 1
a2990 1
    stringBuffer.append(TEXT_861);
d2994 1
a2994 1
    stringBuffer.append(TEXT_862);
d2996 1
a2996 1
    stringBuffer.append(TEXT_863);
d3002 1
a3002 1
    stringBuffer.append(TEXT_864);
d3004 1
a3004 1
    stringBuffer.append(TEXT_865);
d3008 1
a3008 1
    stringBuffer.append(TEXT_866);
d3012 1
a3012 1
    stringBuffer.append(TEXT_867);
d3014 1
a3014 1
    stringBuffer.append(TEXT_868);
d3016 1
a3016 1
    stringBuffer.append(TEXT_869);
d3018 1
a3018 1
    stringBuffer.append(TEXT_870);
d3020 1
a3020 1
    stringBuffer.append(TEXT_871);
d3022 1
a3022 1
    stringBuffer.append(TEXT_872);
d3026 1
a3026 1
    stringBuffer.append(TEXT_873);
d3030 1
a3030 1
    stringBuffer.append(TEXT_874);
d3032 1
a3032 1
    stringBuffer.append(TEXT_875);
d3034 1
a3034 1
    stringBuffer.append(TEXT_876);
d3036 1
a3036 1
    stringBuffer.append(TEXT_877);
d3038 1
a3038 1
    stringBuffer.append(TEXT_878);
d3040 1
a3040 1
    stringBuffer.append(TEXT_879);
d3042 1
a3042 1
    stringBuffer.append(TEXT_880);
d3044 1
a3044 1
    stringBuffer.append(TEXT_881);
d3046 1
a3046 1
    stringBuffer.append(TEXT_882);
d3048 1
a3048 1
    stringBuffer.append(TEXT_883);
d3050 1
a3050 1
    stringBuffer.append(TEXT_884);
d3052 1
a3052 1
    stringBuffer.append(TEXT_885);
d3054 1
a3054 1
    stringBuffer.append(TEXT_886);
d3056 1
a3056 1
    stringBuffer.append(TEXT_887);
d3063 1
a3063 1
    stringBuffer.append(TEXT_888);
d3066 1
a3066 1
    stringBuffer.append(TEXT_889);
d3068 1
a3068 1
    stringBuffer.append(TEXT_890);
d3070 1
a3070 1
    stringBuffer.append(TEXT_891);
d3072 1
a3072 1
    stringBuffer.append(TEXT_892);
d3074 1
a3074 1
    stringBuffer.append(TEXT_893);
d3076 1
a3076 1
    stringBuffer.append(TEXT_894);
d3078 1
a3078 1
    stringBuffer.append(TEXT_895);
d3080 1
a3080 1
    stringBuffer.append(TEXT_896);
d3084 1
a3084 1
    stringBuffer.append(TEXT_897);
d3087 1
a3087 1
    stringBuffer.append(TEXT_898);
d3089 1
a3089 1
    stringBuffer.append(TEXT_899);
d3091 1
a3091 1
    stringBuffer.append(TEXT_900);
d3093 1
a3093 1
    stringBuffer.append(TEXT_901);
d3095 1
a3095 1
    stringBuffer.append(TEXT_902);
d3097 1
a3097 1
    stringBuffer.append(TEXT_903);
d3101 1
a3101 1
    stringBuffer.append(TEXT_904);
d3103 1
a3103 1
    stringBuffer.append(TEXT_905);
d3105 1
a3105 1
    stringBuffer.append(TEXT_906);
d3112 1
a3112 1
    stringBuffer.append(TEXT_907);
d3116 1
a3116 1
    stringBuffer.append(TEXT_908);
d3120 1
a3120 1
    stringBuffer.append(TEXT_909);
d3124 2
a3125 2
    stringBuffer.append(TEXT_910);
    stringBuffer.append(TEXT_911);
d3127 1
a3127 1
    stringBuffer.append(TEXT_912);
d3129 1
a3129 1
    stringBuffer.append(TEXT_913);
d3131 1
a3131 1
    stringBuffer.append(TEXT_914);
d3133 1
a3133 1
    stringBuffer.append(TEXT_915);
d3135 1
a3135 1
    stringBuffer.append(TEXT_916);
d3137 1
a3137 1
    stringBuffer.append(TEXT_917);
d3139 1
a3139 1
    stringBuffer.append(TEXT_918);
d3141 1
a3141 1
    stringBuffer.append(TEXT_919);
d3143 1
a3143 1
    stringBuffer.append(TEXT_920);
d3145 1
a3145 1
    stringBuffer.append(TEXT_921);
d3147 1
a3147 1
    stringBuffer.append(TEXT_922);
d3151 3
a3153 3
    stringBuffer.append(TEXT_923);
    stringBuffer.append(TEXT_924);
    stringBuffer.append(TEXT_925);
d3155 1
a3155 1
    stringBuffer.append(TEXT_926);
d3157 1
a3157 1
    stringBuffer.append(TEXT_927);
d3161 1
a3161 1
    stringBuffer.append(TEXT_928);
d3163 1
a3163 1
    stringBuffer.append(TEXT_929);
d3165 1
a3165 1
    stringBuffer.append(TEXT_930);
d3167 1
a3167 1
    stringBuffer.append(TEXT_931);
d3169 1
a3169 1
    stringBuffer.append(TEXT_932);
d3171 1
a3171 1
    stringBuffer.append(TEXT_933);
d3173 1
a3173 1
    stringBuffer.append(TEXT_934);
d3175 1
a3175 1
    stringBuffer.append(TEXT_935);
d3177 1
a3177 1
    stringBuffer.append(TEXT_936);
d3179 1
a3179 1
    stringBuffer.append(TEXT_937);
d3181 1
a3181 1
    stringBuffer.append(TEXT_938);
d3183 1
a3183 1
    stringBuffer.append(TEXT_939);
d3187 1
a3187 1
    stringBuffer.append(TEXT_940);
d3196 1
a3196 1
    stringBuffer.append(TEXT_941);
d3198 1
a3198 1
    stringBuffer.append(TEXT_942);
d3200 1
a3200 1
    stringBuffer.append(TEXT_943);
d3211 1
a3211 1
    stringBuffer.append(TEXT_944);
d3213 1
a3213 1
    stringBuffer.append(TEXT_945);
d3215 1
a3215 1
    stringBuffer.append(TEXT_946);
d3223 1
a3223 1
    stringBuffer.append(TEXT_947);
d3225 1
a3225 1
    stringBuffer.append(TEXT_948);
d3227 1
a3227 1
    stringBuffer.append(TEXT_949);
d3229 1
a3229 1
    stringBuffer.append(TEXT_950);
d3231 1
a3231 1
    stringBuffer.append(TEXT_951);
d3233 1
a3233 1
    stringBuffer.append(TEXT_952);
d3235 1
a3235 1
    stringBuffer.append(TEXT_953);
d3237 1
a3237 1
    stringBuffer.append(TEXT_954);
d3239 1
a3239 1
    stringBuffer.append(TEXT_955);
d3241 1
a3241 1
    stringBuffer.append(TEXT_956);
d3243 1
a3243 1
    stringBuffer.append(TEXT_957);
d3248 1
a3248 1
    stringBuffer.append(TEXT_958);
d3250 1
a3250 1
    stringBuffer.append(TEXT_959);
d3258 1
a3258 1
    stringBuffer.append(TEXT_960);
d3260 1
a3260 1
    stringBuffer.append(TEXT_961);
d3264 1
a3264 1
    stringBuffer.append(TEXT_962);
d3266 1
a3266 1
    stringBuffer.append(TEXT_963);
@


1.44
log
@Images should be reused across the editparts that represent same model element types (prevent SWTErrors when opening huge diagrams)
@
text
@d869 116
a984 112
  protected final String TEXT_848 = "());";
  protected final String TEXT_849 = NL;
  protected final String TEXT_850 = "\t\tinstallEditPolicy(";
  protected final String TEXT_851 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_852 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_853 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_854 = NL;
  protected final String TEXT_855 = "\t\t\t\t\tprotected ";
  protected final String TEXT_856 = " getDirectEditCommand(";
  protected final String TEXT_857 = " request) {";
  protected final String TEXT_858 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_859 = ".INSTANCE;";
  protected final String TEXT_860 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_861 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_862 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_863 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_864 = "(";
  protected final String TEXT_865 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_866 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_867 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_868 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_869 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_870 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_871 = " editingDomain = ";
  protected final String TEXT_872 = ".getEditingDomain(";
  protected final String TEXT_873 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_874 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_875 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_876 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_877 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_878 = " createDomainModelCommand(";
  protected final String TEXT_879 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_880 = " element = ";
  protected final String TEXT_881 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_882 = " result = new ";
  protected final String TEXT_883 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_884 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_885 = " ";
  protected final String TEXT_886 = "feature = (";
  protected final String TEXT_887 = ") ";
  protected final String TEXT_888 = ".eINSTANCE.get";
  protected final String TEXT_889 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_890 = ".parseValue(feature, values[";
  protected final String TEXT_891 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_892 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_893 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_894 = " ";
  protected final String TEXT_895 = "values = new ";
  protected final String TEXT_896 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_897 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_898 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_899 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_900 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_901 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_902 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_903 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_904 = NL + "\t\t\t\t});";
  protected final String TEXT_905 = NL + "\t\t}" + NL;
  protected final String TEXT_906 = NL;
  protected final String TEXT_907 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_908 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_909 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_910 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_911 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_912 = "(this, ";
  protected final String TEXT_913 = ".class, new ";
  protected final String TEXT_914 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_915 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_916 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_917 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_918 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_919 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_920 = NL;
  protected final String TEXT_921 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_922 = " domainModelRefresher = new ";
  protected final String TEXT_923 = "(this);" + NL;
  protected final String TEXT_924 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_925 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_926 = " getImage() {" + NL + "\t\t\t";
  protected final String TEXT_927 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelIcon();" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_928 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_929 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_930 = " nextChild = (";
  protected final String TEXT_931 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_932 = ".getVisualID(nextChild) == ";
  protected final String TEXT_933 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_934 = ") ";
  protected final String TEXT_935 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_936 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_937 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_938 = ".eINSTANCE.get";
  protected final String TEXT_939 = "(), labelRefresher);";
  protected final String TEXT_940 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_941 = ".eINSTANCE.get";
  protected final String TEXT_942 = "(), labelRefresher);";
  protected final String TEXT_943 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_944 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_945 = " result = new ";
  protected final String TEXT_946 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_947 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_948 = " next = (";
  protected final String TEXT_949 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_950 = " style = (";
  protected final String TEXT_951 = ") next.getStyle(";
  protected final String TEXT_952 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_953 = ".getVisualID(next)) {";
  protected final String TEXT_954 = NL + "\t\t\t\tcase ";
  protected final String TEXT_955 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_956 = NL + "\t\t\t\tcase ";
  protected final String TEXT_957 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_958 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_959 = NL;
d3705 9
a3722 7
    stringBuffer.append(TEXT_849);
    stringBuffer.append(TEXT_850);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_851);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
    stringBuffer.append(TEXT_852);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d3725 1
d3727 1
a3727 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d3731 6
d3740 1
a3740 1
    stringBuffer.append(TEXT_858);
d3742 1
a3742 1
    stringBuffer.append(TEXT_859);
d3748 1
a3748 1
    stringBuffer.append(TEXT_860);
d3750 1
a3750 1
    stringBuffer.append(TEXT_861);
d3754 1
a3754 1
    stringBuffer.append(TEXT_862);
d3758 1
a3758 1
    stringBuffer.append(TEXT_863);
d3760 1
a3760 1
    stringBuffer.append(TEXT_864);
d3762 1
a3762 1
    stringBuffer.append(TEXT_865);
d3764 1
a3764 1
    stringBuffer.append(TEXT_866);
d3766 1
a3766 1
    stringBuffer.append(TEXT_867);
d3768 1
a3768 1
    stringBuffer.append(TEXT_868);
d3772 1
a3772 1
    stringBuffer.append(TEXT_869);
d3776 1
a3776 1
    stringBuffer.append(TEXT_870);
d3778 1
a3778 1
    stringBuffer.append(TEXT_871);
d3780 1
a3780 1
    stringBuffer.append(TEXT_872);
d3782 1
a3782 1
    stringBuffer.append(TEXT_873);
d3784 1
a3784 1
    stringBuffer.append(TEXT_874);
d3786 1
a3786 1
    stringBuffer.append(TEXT_875);
d3788 1
a3788 1
    stringBuffer.append(TEXT_876);
d3790 1
a3790 1
    stringBuffer.append(TEXT_877);
d3792 1
a3792 1
    stringBuffer.append(TEXT_878);
d3794 1
a3794 1
    stringBuffer.append(TEXT_879);
d3796 1
a3796 1
    stringBuffer.append(TEXT_880);
d3798 1
a3798 1
    stringBuffer.append(TEXT_881);
d3800 1
a3800 1
    stringBuffer.append(TEXT_882);
d3802 1
a3802 1
    stringBuffer.append(TEXT_883);
d3809 1
a3809 1
    stringBuffer.append(TEXT_884);
d3812 1
a3812 1
    stringBuffer.append(TEXT_885);
d3814 1
a3814 1
    stringBuffer.append(TEXT_886);
d3816 1
a3816 1
    stringBuffer.append(TEXT_887);
d3818 1
a3818 1
    stringBuffer.append(TEXT_888);
d3820 1
a3820 1
    stringBuffer.append(TEXT_889);
d3822 1
a3822 1
    stringBuffer.append(TEXT_890);
d3824 1
a3824 1
    stringBuffer.append(TEXT_891);
d3826 1
a3826 1
    stringBuffer.append(TEXT_892);
d3830 1
a3830 1
    stringBuffer.append(TEXT_893);
d3833 1
a3833 1
    stringBuffer.append(TEXT_894);
d3835 1
a3835 1
    stringBuffer.append(TEXT_895);
d3837 1
a3837 1
    stringBuffer.append(TEXT_896);
d3839 1
a3839 1
    stringBuffer.append(TEXT_897);
d3841 1
a3841 1
    stringBuffer.append(TEXT_898);
d3843 1
a3843 1
    stringBuffer.append(TEXT_899);
d3847 1
a3847 1
    stringBuffer.append(TEXT_900);
d3849 1
a3849 1
    stringBuffer.append(TEXT_901);
d3851 1
a3851 1
    stringBuffer.append(TEXT_902);
d3858 1
a3858 1
    stringBuffer.append(TEXT_903);
d3862 1
a3862 1
    stringBuffer.append(TEXT_904);
d3866 1
a3866 1
    stringBuffer.append(TEXT_905);
d3870 2
a3871 2
    stringBuffer.append(TEXT_906);
    stringBuffer.append(TEXT_907);
d3873 1
a3873 1
    stringBuffer.append(TEXT_908);
d3875 1
a3875 1
    stringBuffer.append(TEXT_909);
d3877 1
a3877 1
    stringBuffer.append(TEXT_910);
d3879 1
a3879 1
    stringBuffer.append(TEXT_911);
d3881 1
a3881 1
    stringBuffer.append(TEXT_912);
d3883 1
a3883 1
    stringBuffer.append(TEXT_913);
d3885 1
a3885 1
    stringBuffer.append(TEXT_914);
d3887 1
a3887 1
    stringBuffer.append(TEXT_915);
d3889 1
a3889 1
    stringBuffer.append(TEXT_916);
d3891 1
a3891 1
    stringBuffer.append(TEXT_917);
d3893 1
a3893 1
    stringBuffer.append(TEXT_918);
d3897 3
a3899 3
    stringBuffer.append(TEXT_919);
    stringBuffer.append(TEXT_920);
    stringBuffer.append(TEXT_921);
d3901 1
a3901 1
    stringBuffer.append(TEXT_922);
d3903 1
a3903 1
    stringBuffer.append(TEXT_923);
d3907 1
a3907 1
    stringBuffer.append(TEXT_924);
d3909 1
a3909 1
    stringBuffer.append(TEXT_925);
d3911 1
a3911 1
    stringBuffer.append(TEXT_926);
d3913 1
a3913 1
    stringBuffer.append(TEXT_927);
d3915 1
a3915 1
    stringBuffer.append(TEXT_928);
d3917 1
a3917 1
    stringBuffer.append(TEXT_929);
d3919 1
a3919 1
    stringBuffer.append(TEXT_930);
d3921 1
a3921 1
    stringBuffer.append(TEXT_931);
d3923 1
a3923 1
    stringBuffer.append(TEXT_932);
d3925 1
a3925 1
    stringBuffer.append(TEXT_933);
d3927 1
a3927 1
    stringBuffer.append(TEXT_934);
d3929 1
a3929 1
    stringBuffer.append(TEXT_935);
d3933 1
a3933 1
    stringBuffer.append(TEXT_936);
d3942 1
a3942 1
    stringBuffer.append(TEXT_937);
d3944 1
a3944 1
    stringBuffer.append(TEXT_938);
d3946 1
a3946 1
    stringBuffer.append(TEXT_939);
d3957 1
a3957 1
    stringBuffer.append(TEXT_940);
d3959 1
a3959 1
    stringBuffer.append(TEXT_941);
d3961 1
a3961 1
    stringBuffer.append(TEXT_942);
d3969 1
a3969 1
    stringBuffer.append(TEXT_943);
d3971 1
a3971 1
    stringBuffer.append(TEXT_944);
d3973 1
a3973 1
    stringBuffer.append(TEXT_945);
d3975 1
a3975 1
    stringBuffer.append(TEXT_946);
d3977 1
a3977 1
    stringBuffer.append(TEXT_947);
d3979 1
a3979 1
    stringBuffer.append(TEXT_948);
d3981 1
a3981 1
    stringBuffer.append(TEXT_949);
d3983 1
a3983 1
    stringBuffer.append(TEXT_950);
d3985 1
a3985 1
    stringBuffer.append(TEXT_951);
d3987 1
a3987 1
    stringBuffer.append(TEXT_952);
d3989 1
a3989 1
    stringBuffer.append(TEXT_953);
d3994 1
a3994 1
    stringBuffer.append(TEXT_954);
d3996 1
a3996 1
    stringBuffer.append(TEXT_955);
d4004 1
a4004 1
    stringBuffer.append(TEXT_956);
d4006 1
a4006 1
    stringBuffer.append(TEXT_957);
d4010 1
a4010 1
    stringBuffer.append(TEXT_958);
d4012 1
a4012 1
    stringBuffer.append(TEXT_959);
@


1.43
log
@Generated diagram plugin should at least compile when there's a node with  an abstract underlying element.
@
text
@d946 29
a974 29
  protected final String TEXT_925 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_926 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_927 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_928 = " nextChild = (";
  protected final String TEXT_929 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_930 = ".getVisualID(nextChild) == ";
  protected final String TEXT_931 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_932 = ") ";
  protected final String TEXT_933 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_934 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_935 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_936 = ".eINSTANCE.get";
  protected final String TEXT_937 = "(), labelRefresher);";
  protected final String TEXT_938 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_939 = ".eINSTANCE.get";
  protected final String TEXT_940 = "(), labelRefresher);";
  protected final String TEXT_941 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_942 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_943 = " result = new ";
  protected final String TEXT_944 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_945 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_946 = " next = (";
  protected final String TEXT_947 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_948 = " style = (";
  protected final String TEXT_949 = ") next.getStyle(";
  protected final String TEXT_950 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_951 = ".getVisualID(next)) {";
  protected final String TEXT_952 = NL + "\t\t\t\tcase ";
  protected final String TEXT_953 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
d976 5
a980 3
  protected final String TEXT_955 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_956 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_957 = NL;
d3897 4
d3902 1
a3902 1
    stringBuffer.append(TEXT_926);
d3904 1
a3904 1
    stringBuffer.append(TEXT_927);
d3906 1
a3906 1
    stringBuffer.append(TEXT_928);
d3908 1
a3908 1
    stringBuffer.append(TEXT_929);
d3910 1
a3910 1
    stringBuffer.append(TEXT_930);
d3912 1
a3912 1
    stringBuffer.append(TEXT_931);
d3914 1
a3914 1
    stringBuffer.append(TEXT_932);
d3916 1
a3916 1
    stringBuffer.append(TEXT_933);
d3920 1
a3920 1
    stringBuffer.append(TEXT_934);
d3929 1
a3929 1
    stringBuffer.append(TEXT_935);
d3931 1
a3931 1
    stringBuffer.append(TEXT_936);
d3933 1
a3933 1
    stringBuffer.append(TEXT_937);
d3944 1
a3944 1
    stringBuffer.append(TEXT_938);
d3946 1
a3946 1
    stringBuffer.append(TEXT_939);
d3948 1
a3948 1
    stringBuffer.append(TEXT_940);
d3956 1
a3956 1
    stringBuffer.append(TEXT_941);
d3958 1
a3958 1
    stringBuffer.append(TEXT_942);
d3960 1
a3960 1
    stringBuffer.append(TEXT_943);
d3962 1
a3962 1
    stringBuffer.append(TEXT_944);
d3964 1
a3964 1
    stringBuffer.append(TEXT_945);
d3966 1
a3966 1
    stringBuffer.append(TEXT_946);
d3968 1
a3968 1
    stringBuffer.append(TEXT_947);
d3970 1
a3970 1
    stringBuffer.append(TEXT_948);
d3972 1
a3972 1
    stringBuffer.append(TEXT_949);
d3974 1
a3974 1
    stringBuffer.append(TEXT_950);
d3976 1
a3976 1
    stringBuffer.append(TEXT_951);
d3981 1
a3981 1
    stringBuffer.append(TEXT_952);
d3983 1
a3983 1
    stringBuffer.append(TEXT_953);
d3991 1
a3991 1
    stringBuffer.append(TEXT_954);
d3993 1
a3993 1
    stringBuffer.append(TEXT_955);
d3997 1
a3997 1
    stringBuffer.append(TEXT_956);
d3999 1
a3999 1
    stringBuffer.append(TEXT_957);
@


1.42
log
@[164018]: Add<>Command and Clone<>Command moved to separate classes;
Common methods from edit policies moved to runtime superclasses
@
text
@d1473 3
@


1.41
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@d40 7
a46 7
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = NL + "/*" + NL + " * ";
  protected final String TEXT_21 = NL + " */";
  protected final String TEXT_22 = NL;
  protected final String TEXT_23 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_24 = " extends ";
  protected final String TEXT_25 = " implements ";
d48 572
a619 572
  protected final String TEXT_27 = ", ";
  protected final String TEXT_28 = " {";
  protected final String TEXT_29 = NL;
  protected final String TEXT_30 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_31 = ";";
  protected final String TEXT_32 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_33 = " contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_34 = " primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_35 = " myDecorationManager;" + NL;
  protected final String TEXT_36 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_37 = " childNodesPane;";
  protected final String TEXT_38 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_39 = "(";
  protected final String TEXT_40 = " model) {" + NL + "\t\tassert model instanceof ";
  protected final String TEXT_41 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL;
  protected final String TEXT_42 = NL;
  protected final String TEXT_43 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_44 = " view = (";
  protected final String TEXT_45 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_46 = " view = (";
  protected final String TEXT_47 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_48 = NL;
  protected final String TEXT_49 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_50 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_51 = "());";
  protected final String TEXT_52 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_53 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_54 = "() {";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = NL + "protected ";
  protected final String TEXT_57 = " createAddCommand(final ";
  protected final String TEXT_58 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_59 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_60 = " childNode = (";
  protected final String TEXT_61 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_62 = " editingDomain = ";
  protected final String TEXT_63 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_64 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_65 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int visualID = ";
  protected final String TEXT_66 = ".getVisualID(childNode);" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_67 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_68 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_69 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_70 = NL + "\t\t\tcase ";
  protected final String TEXT_71 = ".VISUAL_ID:" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t";
  protected final String TEXT_72 = " result = new ";
  protected final String TEXT_73 = "();" + NL + "\t\t\t\t\t";
  protected final String TEXT_74 = " element = childNode.getElement();";
  protected final String TEXT_75 = NL + "\t\t\t\t\tswitch (visualID) {";
  protected final String TEXT_76 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_77 = ".VISUAL_ID:";
  protected final String TEXT_78 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_79 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_80 = ".eINSTANCE.get";
  protected final String TEXT_81 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_82 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_83 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_84 = ".eINSTANCE.get";
  protected final String TEXT_85 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_86 = ".UNSET_VALUE));";
  protected final String TEXT_87 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_88 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_89 = ".eINSTANCE.get";
  protected final String TEXT_90 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_91 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_92 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_93 = ".eINSTANCE.get";
  protected final String TEXT_94 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_95 = ".UNSET_VALUE));";
  protected final String TEXT_96 = NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_97 = NL + "\t\t\t\t\t}\t";
  protected final String TEXT_98 = NL;
  protected final String TEXT_99 = NL + "\t\tif (";
  protected final String TEXT_100 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_101 = NL + "\t\t}";
  protected final String TEXT_102 = NL + "\t\tif (";
  protected final String TEXT_103 = ".size() >= ";
  protected final String TEXT_104 = ".eINSTANCE.get";
  protected final String TEXT_105 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_106 = NL + "\t\t}";
  protected final String TEXT_107 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_108 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_109 = ".getElement(), ";
  protected final String TEXT_110 = ".eINSTANCE.get";
  protected final String TEXT_111 = "(), element));";
  protected final String TEXT_112 = NL;
  protected final String TEXT_113 = NL + "\t\tif (";
  protected final String TEXT_114 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_115 = NL + "\t\t}";
  protected final String TEXT_116 = NL + "\t\tif (";
  protected final String TEXT_117 = ".size() >= ";
  protected final String TEXT_118 = ".eINSTANCE.get";
  protected final String TEXT_119 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_120 = NL + "\t\t}";
  protected final String TEXT_121 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_122 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_123 = ".getElement(), ";
  protected final String TEXT_124 = ".eINSTANCE.get";
  protected final String TEXT_125 = "(), element));";
  protected final String TEXT_126 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_127 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_128 = "(";
  protected final String TEXT_129 = "));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_130 = ".create(editingDomain, ";
  protected final String TEXT_131 = ", ";
  protected final String TEXT_132 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_133 = "(childNode, ";
  protected final String TEXT_134 = "null";
  protected final String TEXT_135 = "(";
  protected final String TEXT_136 = ") constraint";
  protected final String TEXT_137 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_138 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_139 = "(";
  protected final String TEXT_140 = ", element, ";
  protected final String TEXT_141 = "null";
  protected final String TEXT_142 = "((";
  protected final String TEXT_143 = ") constraint).getCopy().union(new ";
  protected final String TEXT_144 = "(";
  protected final String TEXT_145 = ", ";
  protected final String TEXT_146 = "))";
  protected final String TEXT_147 = ", ";
  protected final String TEXT_148 = ".INSTANCE));";
  protected final String TEXT_149 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_150 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_151 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_152 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_153 = NL;
  protected final String TEXT_154 = NL + "protected ";
  protected final String TEXT_155 = " getCloneCommand(";
  protected final String TEXT_156 = " request) {" + NL + "\t";
  protected final String TEXT_157 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_158 = " command = new ";
  protected final String TEXT_159 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_160 = " childPart;" + NL + "\t";
  protected final String TEXT_161 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_162 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_163 = " createCloneCommand(final ";
  protected final String TEXT_164 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_165 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_166 = " childNode = (";
  protected final String TEXT_167 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_168 = " editingDomain = ";
  protected final String TEXT_169 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_170 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_171 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_172 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_173 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_174 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_175 = NL + "\t\t\tcase ";
  protected final String TEXT_176 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_177 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_178 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_179 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_180 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_181 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_182 = NL;
  protected final String TEXT_183 = NL + "\t\tif (";
  protected final String TEXT_184 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_185 = NL + "\t\t}";
  protected final String TEXT_186 = NL + "\t\tif (";
  protected final String TEXT_187 = ".size() >= ";
  protected final String TEXT_188 = ".eINSTANCE.get";
  protected final String TEXT_189 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_190 = NL + "\t\t}";
  protected final String TEXT_191 = NL;
  protected final String TEXT_192 = NL + "\t\tif (";
  protected final String TEXT_193 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_194 = NL + "\t\t}";
  protected final String TEXT_195 = NL + "\t\tif (";
  protected final String TEXT_196 = ".size() >= ";
  protected final String TEXT_197 = ".eINSTANCE.get";
  protected final String TEXT_198 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_199 = NL + "\t\t}";
  protected final String TEXT_200 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_201 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_202 = " result = (";
  protected final String TEXT_203 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_204 = "();";
  protected final String TEXT_205 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_206 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_207 = ".getElement(), ";
  protected final String TEXT_208 = ".eINSTANCE.get";
  protected final String TEXT_209 = "(), result));";
  protected final String TEXT_210 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_211 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_212 = ".getElement(), ";
  protected final String TEXT_213 = ".eINSTANCE.get";
  protected final String TEXT_214 = "(), result));";
  protected final String TEXT_215 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_216 = "(";
  protected final String TEXT_217 = ", result, ";
  protected final String TEXT_218 = "null";
  protected final String TEXT_219 = "((";
  protected final String TEXT_220 = ") constraint).getCopy().union(new ";
  protected final String TEXT_221 = "(";
  protected final String TEXT_222 = ", ";
  protected final String TEXT_223 = "))";
  protected final String TEXT_224 = ", ";
  protected final String TEXT_225 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_226 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_227 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_228 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_229 = NL + "\t\t\tprotected ";
  protected final String TEXT_230 = " getCreateCommand(";
  protected final String TEXT_231 = " request) {";
  protected final String TEXT_232 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_233 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_234 = " requestEx = (";
  protected final String TEXT_235 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\tif (!";
  protected final String TEXT_236 = ".MODEL_ID.equals(requestEx.getModelID())) {" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_237 = " result = new ";
  protected final String TEXT_238 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_239 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_240 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_241 = "((View) getModel(), requestEx";
  protected final String TEXT_242 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_243 = ")getConstraintFor(request)";
  protected final String TEXT_244 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_245 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_246 = "(";
  protected final String TEXT_247 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_248 = NL + "\t\t\t\treturn ";
  protected final String TEXT_249 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_250 = NL + "\t\t\tprotected ";
  protected final String TEXT_251 = " createChangeConstraintCommand(final ";
  protected final String TEXT_252 = " request, final ";
  protected final String TEXT_253 = " child, Object constraint) {" + NL + "\t\t\t\tif (!isDirectChild(child)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_254 = ".INSTANCE;" + NL + "\t\t\t\t}";
  protected final String TEXT_255 = NL;
  protected final String TEXT_256 = "\t\t\t\tfinal ";
  protected final String TEXT_257 = " node = (";
  protected final String TEXT_258 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_259 = " emfCommand = new ";
  protected final String TEXT_260 = "(node, request, ((";
  protected final String TEXT_261 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_262 = "(";
  protected final String TEXT_263 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_264 = " createChangeConstraintCommand(";
  protected final String TEXT_265 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_266 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_267 = NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_268 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_269 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_270 = " createChangeConstraintCommand(";
  protected final String TEXT_271 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_272 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_273 = NL + "\t\t\tprotected ";
  protected final String TEXT_274 = " createChildEditPolicy(";
  protected final String TEXT_275 = " child) {" + NL + "\t\t\t\t";
  protected final String TEXT_276 = " result = child.getEditPolicy(";
  protected final String TEXT_277 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}";
  protected final String TEXT_278 = NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_279 = "() {" + NL + "\t\t\t\t\t\tpublic ";
  protected final String TEXT_280 = " getTargetEditPart(";
  protected final String TEXT_281 = " request) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_282 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_283 = ".this;" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t}";
  protected final String TEXT_284 = NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_285 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_286 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_287 = " getReconnectTargetCommand(";
  protected final String TEXT_288 = " request) {";
  protected final String TEXT_289 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_290 = ".INSTANCE;";
  protected final String TEXT_291 = NL + "\t\t\t\t";
  protected final String TEXT_292 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_293 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_294 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_295 = " edge = (";
  protected final String TEXT_296 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_297 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_298 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_299 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_300 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_301 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_302 = NL + "\t\t\t\tcase ";
  protected final String TEXT_303 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_304 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_305 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_306 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_307 = "(";
  protected final String TEXT_308 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_309 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_310 = " getReconnectSourceCommand(";
  protected final String TEXT_311 = " request) {";
  protected final String TEXT_312 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_313 = ".INSTANCE;";
  protected final String TEXT_314 = NL + "\t\t\t\t";
  protected final String TEXT_315 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_316 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_317 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_318 = " edge = (";
  protected final String TEXT_319 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_320 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_321 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_322 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_323 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_324 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_325 = NL + "\t\t\t\tcase ";
  protected final String TEXT_326 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_327 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_328 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_329 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_330 = "(";
  protected final String TEXT_331 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_332 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_333 = " getConnectionCreateCommand(";
  protected final String TEXT_334 = " request) {";
  protected final String TEXT_335 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_336 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_337 = " requestEx = (";
  protected final String TEXT_338 = ") request;" + NL + "\t\t\t\t\tif (!";
  protected final String TEXT_339 = ".MODEL_ID.equals(requestEx.getModelID())) {" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_340 = " result = new ";
  protected final String TEXT_341 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_342 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_343 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_344 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_345 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (!result.canExecute()) {" + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_346 = " wrappedResult = new ";
  protected final String TEXT_347 = "(";
  protected final String TEXT_348 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_349 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_350 = " getConnectionCompleteCommand(";
  protected final String TEXT_351 = " request) {";
  protected final String TEXT_352 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_353 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_354 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_355 = " requestEx = (";
  protected final String TEXT_356 = ") request;" + NL + "\t\t\t\t\tif (!";
  protected final String TEXT_357 = ".MODEL_ID.equals(requestEx.getModelID())) {" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_358 = " result = new ";
  protected final String TEXT_359 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_360 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_361 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_362 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_363 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_364 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_365 = "(";
  protected final String TEXT_366 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_367 = NL + "\t\t\t\treturn ";
  protected final String TEXT_368 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_369 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_370 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_371 = "());";
  protected final String TEXT_372 = NL;
  protected final String TEXT_373 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_374 = "\", new ";
  protected final String TEXT_375 = "()); //$NON-NLS-1$";
  protected final String TEXT_376 = NL;
  protected final String TEXT_377 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_378 = ".OPEN_ROLE";
  protected final String TEXT_379 = " + \"";
  protected final String TEXT_380 = "\" ";
  protected final String TEXT_381 = ", new ";
  protected final String TEXT_382 = "());";
  protected final String TEXT_383 = NL + "\t\tinstallEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());";
  protected final String TEXT_384 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_385 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_386 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_387 = " getPrimaryDragEditPolicy() {";
  protected final String TEXT_388 = NL + "\t\treturn new ";
  protected final String TEXT_389 = "();";
  protected final String TEXT_390 = NL + "\t\t";
  protected final String TEXT_391 = " result = new ";
  protected final String TEXT_392 = "();";
  protected final String TEXT_393 = NL + "\t\t";
  protected final String TEXT_394 = " result = new ";
  protected final String TEXT_395 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_396 = " createSelectionHandles() {" + NL + "\t\t\t\t";
  protected final String TEXT_397 = " result = super.createSelectionHandles();" + NL + "\t\t\t\tfor(";
  protected final String TEXT_398 = " it = getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_399 = " next = (";
  protected final String TEXT_400 = ") it.next();" + NL + "\t\t\t\t\t";
  protected final String TEXT_401 = " nextView = (";
  protected final String TEXT_402 = ") next.getModel();" + NL + "\t\t\t\t\tswitch (";
  protected final String TEXT_403 = ".getVisualID(nextView)) {";
  protected final String TEXT_404 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_405 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\tresult.addAll(((";
  protected final String TEXT_406 = ") next).createSelectionHandles());" + NL + "\t\t\t\t\t\tbreak;";
  protected final String TEXT_407 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_408 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_409 = ".NONE);";
  protected final String TEXT_410 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_411 = ".";
  protected final String TEXT_412 = " | ";
  protected final String TEXT_413 = ");";
  protected final String TEXT_414 = NL + "\t\treturn result;";
  protected final String TEXT_415 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_416 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_417 = " invisibleRectangle = new ";
  protected final String TEXT_418 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_419 = "());" + NL + "\t\t";
  protected final String TEXT_420 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_421 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_422 = NL + NL + "\t\t";
  protected final String TEXT_423 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tmyDecorationManager = createDecorationManager(decorationShape);" + NL + "\t\t\tinvisibleRectangle.add(decorationShape, 0);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_424 = " createDecorationManager(";
  protected final String TEXT_425 = " decorationShape) {" + NL + "\t\treturn new ";
  protected final String TEXT_426 = "(decorationShape);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_427 = " getDecorationManager() {" + NL + "\t\treturn myDecorationManager;" + NL + "\t}" + NL;
  protected final String TEXT_428 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_429 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_430 = " result = new ";
  protected final String TEXT_431 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_432 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_433 = " createNodeShape() {";
  protected final String TEXT_434 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_435 = "()";
  protected final String TEXT_436 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_437 = ";";
  protected final String TEXT_438 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_439 = ";";
  protected final String TEXT_440 = NL + "\t\t";
  protected final String TEXT_441 = " figure = new ";
  protected final String TEXT_442 = "();";
  protected final String TEXT_443 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_444 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_445 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_446 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_447 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_448 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_449 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_450 = " createDecorationPane() {" + NL + "\t\treturn new ";
  protected final String TEXT_451 = "();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_452 = " setupContentPane(";
  protected final String TEXT_453 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_454 = NL + "\t\t\t";
  protected final String TEXT_455 = " layout = new ";
  protected final String TEXT_456 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_457 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_458 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_459 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_460 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_461 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_462 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_463 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_464 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_465 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_466 = " childEditPart) {";
  protected final String TEXT_467 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_468 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_469 = ") childEditPart).";
  protected final String TEXT_470 = "(getPrimaryShape().";
  protected final String TEXT_471 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_472 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_473 = ") {" + NL + "\t\t\t";
  protected final String TEXT_474 = " pane = getPrimaryShape().";
  protected final String TEXT_475 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_476 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_477 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_478 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_479 = ") {" + NL + "\t\t\t";
  protected final String TEXT_480 = " pane = getPrimaryShape().";
  protected final String TEXT_481 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_482 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_483 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_484 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_485 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_486 = NL + "\t\tfor(";
  protected final String TEXT_487 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_488 = " nextChild = (";
  protected final String TEXT_489 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_490 = ".getVisualID(nextChild) == ";
  protected final String TEXT_491 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_492 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_493 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_494 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_495 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_496 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_497 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_498 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_499 = NL;
  protected final String TEXT_500 = "if (";
  protected final String TEXT_501 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_502 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_503 = " getLabelEditPart(";
  protected final String TEXT_504 = " req) {" + NL + "\t\t";
  protected final String TEXT_505 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_506 = " view = (";
  protected final String TEXT_507 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_508 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_509 = NL + "\t\t\t\tcase ";
  protected final String TEXT_510 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_511 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_512 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_513 = " childEditPart) {";
  protected final String TEXT_514 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_515 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_516 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_517 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_518 = " root = (";
  protected final String TEXT_519 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_520 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_521 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_522 = " childEditPart) {";
  protected final String TEXT_523 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_524 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_525 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_526 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_527 = " childEditPart, int index) {";
  protected final String TEXT_528 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_529 = " labelFigure = ((";
  protected final String TEXT_530 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_531 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_532 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_533 = " childFigure = ((";
  protected final String TEXT_534 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_535 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_536 = " childEditPart) {";
  protected final String TEXT_537 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_538 = " labelFigure = ((";
  protected final String TEXT_539 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_540 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_541 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_542 = " childFigure = ((";
  protected final String TEXT_543 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_544 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_545 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_546 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_547 = " childEditPart = (";
  protected final String TEXT_548 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_549 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_550 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_551 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_552 = ";" + NL + "\t\t";
  protected final String TEXT_553 = " bounds = (";
  protected final String TEXT_554 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_555 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_556 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_557 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_558 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_559 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_560 = " getSourceConnectionAnchor(";
  protected final String TEXT_561 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_562 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_563 = " getSourceConnectionAnchor(";
  protected final String TEXT_564 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_565 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_566 = "  getTargetConnectionAnchor(";
  protected final String TEXT_567 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_568 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_569 = "  getTargetConnectionAnchor(";
  protected final String TEXT_570 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_571 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_572 = NL + "\t\tif (";
  protected final String TEXT_573 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_574 = "(this);" + NL + "\t\t}";
  protected final String TEXT_575 = NL + "\t\tif (";
  protected final String TEXT_576 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_577 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_578 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_579 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_580 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_581 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_582 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_583 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_584 = NL;
  protected final String TEXT_585 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_586 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_587 = " domainModelEditDomain = ";
  protected final String TEXT_588 = ".getEditingDomain(";
  protected final String TEXT_589 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_590 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_591 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_592 = " {";
  protected final String TEXT_593 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_594 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_595 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_596 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_597 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_598 = " createFilter() {";
d629 350
a978 475
  protected final String TEXT_608 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_609 = ".createNotifierFilter(";
  protected final String TEXT_610 = ".getElement()));";
  protected final String TEXT_611 = NL + "\t\t\t";
  protected final String TEXT_612 = " filter = ";
  protected final String TEXT_613 = ".createNotifierFilter(";
  protected final String TEXT_614 = ".getElement());";
  protected final String TEXT_615 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_616 = NL + "\t\t\t";
  protected final String TEXT_617 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_618 = NL + "\t\t\t";
  protected final String TEXT_619 = " filter = ";
  protected final String TEXT_620 = ".NOT_TOUCH;";
  protected final String TEXT_621 = NL + "\t\t\treturn filter;";
  protected final String TEXT_622 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_623 = " getCreateNotationalElementCommand(";
  protected final String TEXT_624 = " descriptor) {";
  protected final String TEXT_625 = NL;
  protected final String TEXT_626 = "\t\t\t";
  protected final String TEXT_627 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_628 = NL + "\t\t\tcase ";
  protected final String TEXT_629 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_630 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_631 = "(";
  protected final String TEXT_632 = ", domainElement, ";
  protected final String TEXT_633 = "new ";
  protected final String TEXT_634 = "(0, 0, ";
  protected final String TEXT_635 = ", ";
  protected final String TEXT_636 = ")";
  protected final String TEXT_637 = NL + "null";
  protected final String TEXT_638 = ", ";
  protected final String TEXT_639 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_640 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_641 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_642 = " getSemanticChildNodes() {";
  protected final String TEXT_643 = NL;
  protected final String TEXT_644 = NL + "\treturn ";
  protected final String TEXT_645 = ".EMPTY_LIST;";
  protected final String TEXT_646 = NL + "\t";
  protected final String TEXT_647 = " result = new ";
  protected final String TEXT_648 = "();";
  protected final String TEXT_649 = NL + "\t";
  protected final String TEXT_650 = " viewObject = ";
  protected final String TEXT_651 = ";" + NL + "\t";
  protected final String TEXT_652 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_653 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_654 = NL + "\tfor(";
  protected final String TEXT_655 = " it = ";
  protected final String TEXT_656 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_657 = ") it.next();";
  protected final String TEXT_658 = NL + "\tnextValue = (";
  protected final String TEXT_659 = ")";
  protected final String TEXT_660 = ";";
  protected final String TEXT_661 = NL + "\tnodeVID = ";
  protected final String TEXT_662 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_663 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_664 = NL + "\tcase ";
  protected final String TEXT_665 = ".VISUAL_ID: {";
  protected final String TEXT_666 = NL + "\tif (";
  protected final String TEXT_667 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_668 = NL + "\t\tresult.add(new ";
  protected final String TEXT_669 = "(nextValue, nodeVID));";
  protected final String TEXT_670 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_671 = NL + "\t\t}";
  protected final String TEXT_672 = NL + "\t}";
  protected final String TEXT_673 = NL + "\t}";
  protected final String TEXT_674 = NL + "\treturn result;";
  protected final String TEXT_675 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_676 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_677 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_678 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_679 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_680 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_681 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_682 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_683 = " domainModelEditDomain = ";
  protected final String TEXT_684 = ".getEditingDomain(";
  protected final String TEXT_685 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_686 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_687 = NL;
  protected final String TEXT_688 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_689 = " domainModelEditDomain = ";
  protected final String TEXT_690 = ".getEditingDomain(";
  protected final String TEXT_691 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_692 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_693 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_694 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_695 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_696 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_697 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_698 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_699 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_700 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_701 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_702 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_703 = ".createEventTypeFilter(";
  protected final String TEXT_704 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_705 = ".createEventTypeFilter(";
  protected final String TEXT_706 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_707 = ".createEventTypeFilter(";
  protected final String TEXT_708 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_709 = ".createEventTypeFilter(";
  protected final String TEXT_710 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_711 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_712 = " createFilter() {";
  protected final String TEXT_713 = NL;
  protected final String TEXT_714 = NL + "\t\t\t";
  protected final String TEXT_715 = " filter = ";
  protected final String TEXT_716 = ".createFeatureFilter(";
  protected final String TEXT_717 = ".eINSTANCE.get";
  protected final String TEXT_718 = "());";
  protected final String TEXT_719 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_720 = ".createFeatureFilter(";
  protected final String TEXT_721 = ".eINSTANCE.get";
  protected final String TEXT_722 = "()));";
  protected final String TEXT_723 = NL;
  protected final String TEXT_724 = NL + "\t\t\t";
  protected final String TEXT_725 = " filter = ";
  protected final String TEXT_726 = ".createFeatureFilter(";
  protected final String TEXT_727 = ".eINSTANCE.get";
  protected final String TEXT_728 = "());";
  protected final String TEXT_729 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_730 = ".createFeatureFilter(";
  protected final String TEXT_731 = ".eINSTANCE.get";
  protected final String TEXT_732 = "()));";
  protected final String TEXT_733 = NL;
  protected final String TEXT_734 = NL + "\t\t\t";
  protected final String TEXT_735 = " filter = ";
  protected final String TEXT_736 = ".createFeatureFilter(";
  protected final String TEXT_737 = ".eINSTANCE.get";
  protected final String TEXT_738 = "());";
  protected final String TEXT_739 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_740 = ".createFeatureFilter(";
  protected final String TEXT_741 = ".eINSTANCE.get";
  protected final String TEXT_742 = "()));";
  protected final String TEXT_743 = NL;
  protected final String TEXT_744 = NL + "\t\t\t";
  protected final String TEXT_745 = " filter = ";
  protected final String TEXT_746 = ".createFeatureFilter(";
  protected final String TEXT_747 = ".eINSTANCE.get";
  protected final String TEXT_748 = "());";
  protected final String TEXT_749 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_750 = ".createFeatureFilter(";
  protected final String TEXT_751 = ".eINSTANCE.get";
  protected final String TEXT_752 = "()));";
  protected final String TEXT_753 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_754 = NL + "\t\t\t";
  protected final String TEXT_755 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_756 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_757 = NL + "\t\t\t";
  protected final String TEXT_758 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_759 = NL + "\t\t\t";
  protected final String TEXT_760 = " filter = ";
  protected final String TEXT_761 = ".NOT_TOUCH;";
  protected final String TEXT_762 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_763 = " getCreateNotationalElementCommand(";
  protected final String TEXT_764 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_765 = " linkDescriptor = (";
  protected final String TEXT_766 = ") descriptor;";
  protected final String TEXT_767 = NL;
  protected final String TEXT_768 = "\t\t\t";
  protected final String TEXT_769 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_770 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_771 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_772 = NL + "\t\t\tcase ";
  protected final String TEXT_773 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_774 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_775 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_776 = NL + "\t\t\tcase ";
  protected final String TEXT_777 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_778 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_779 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_780 = "(";
  protected final String TEXT_781 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_782 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_783 = " getSemanticChildLinks() {";
  protected final String TEXT_784 = NL;
  protected final String TEXT_785 = "\t";
  protected final String TEXT_786 = " result = new ";
  protected final String TEXT_787 = "();";
  protected final String TEXT_788 = NL + "\t";
  protected final String TEXT_789 = " modelObject = ";
  protected final String TEXT_790 = ".getElement();" + NL + "\t";
  protected final String TEXT_791 = " nextValue;";
  protected final String TEXT_792 = NL + "\tint linkVID;";
  protected final String TEXT_793 = NL + "\tfor(";
  protected final String TEXT_794 = " it = ";
  protected final String TEXT_795 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_796 = ") it.next();";
  protected final String TEXT_797 = NL + "\tnextValue = (";
  protected final String TEXT_798 = ")";
  protected final String TEXT_799 = ";";
  protected final String TEXT_800 = NL + "\tlinkVID = ";
  protected final String TEXT_801 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_802 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_803 = NL + "\tcase ";
  protected final String TEXT_804 = ".VISUAL_ID: {";
  protected final String TEXT_805 = NL + "\tif (";
  protected final String TEXT_806 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_807 = NL + "\t\t";
  protected final String TEXT_808 = " source = (";
  protected final String TEXT_809 = ")";
  protected final String TEXT_810 = ";";
  protected final String TEXT_811 = NL + "\t\t";
  protected final String TEXT_812 = " source = ";
  protected final String TEXT_813 = ".getElement();";
  protected final String TEXT_814 = NL + "\t\t";
  protected final String TEXT_815 = " target = (";
  protected final String TEXT_816 = ")";
  protected final String TEXT_817 = ";";
  protected final String TEXT_818 = NL + "\t\t";
  protected final String TEXT_819 = " target = ";
  protected final String TEXT_820 = ".getElement();";
  protected final String TEXT_821 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_822 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_823 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_824 = NL + "\t}";
  protected final String TEXT_825 = NL + "\t}";
  protected final String TEXT_826 = NL + "\t}";
  protected final String TEXT_827 = NL + "\tfor(";
  protected final String TEXT_828 = " it = ";
  protected final String TEXT_829 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_830 = ") it.next();";
  protected final String TEXT_831 = NL + "\tnextValue = (";
  protected final String TEXT_832 = ")";
  protected final String TEXT_833 = ";";
  protected final String TEXT_834 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_835 = NL + "\t\tresult.add(new ";
  protected final String TEXT_836 = "(modelObject, nextValue, null, ";
  protected final String TEXT_837 = ".VISUAL_ID));";
  protected final String TEXT_838 = NL + "\t}";
  protected final String TEXT_839 = NL + "\t}";
  protected final String TEXT_840 = NL + "\treturn result;";
  protected final String TEXT_841 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_842 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_843 = " result = new ";
  protected final String TEXT_844 = "();" + NL + "\t\t\t";
  protected final String TEXT_845 = " allLinks = ";
  protected final String TEXT_846 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_847 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_848 = " next = (";
  protected final String TEXT_849 = ") it.next();";
  protected final String TEXT_850 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_851 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_852 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_853 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_854 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_855 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_856 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_857 = ".VISUAL_ID:";
  protected final String TEXT_858 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_859 = NL + "\t\t\t\t} else {";
  protected final String TEXT_860 = NL + "\t\t\t\t}";
  protected final String TEXT_861 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_862 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_863 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_864 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_865 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_866 = ".VISUAL_ID:";
  protected final String TEXT_867 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_868 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_869 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_870 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_871 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_872 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_873 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_874 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_875 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_876 = " domainModelEditDomain = ";
  protected final String TEXT_877 = ".getEditingDomain(";
  protected final String TEXT_878 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_879 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_880 = NL;
  protected final String TEXT_881 = NL;
  protected final String TEXT_882 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_883 = " domainModelRefresher = new ";
  protected final String TEXT_884 = "(this);" + NL;
  protected final String TEXT_885 = NL;
  protected final String TEXT_886 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_887 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_888 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_889 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_890 = NL;
  protected final String TEXT_891 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_892 = NL + "\t\t";
  protected final String TEXT_893 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_894 = ") ";
  protected final String TEXT_895 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_896 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_897 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_898 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_899 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_900 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_901 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_902 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_903 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_904 = "\t" + NL + "\t}";
  protected final String TEXT_905 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_906 = " createdFont;";
  protected final String TEXT_907 = "\t" + NL;
  protected final String TEXT_908 = NL;
  protected final String TEXT_909 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_910 = " style = (";
  protected final String TEXT_911 = ")  ";
  protected final String TEXT_912 = ".getStyle(";
  protected final String TEXT_913 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_914 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_915 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_916 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_917 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_918 = " style = (";
  protected final String TEXT_919 = ")  ";
  protected final String TEXT_920 = ".getStyle(";
  protected final String TEXT_921 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_922 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_923 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_924 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_925 = " createdBackgroundColor;" + NL;
  protected final String TEXT_926 = NL;
  protected final String TEXT_927 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_928 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_929 = " feature, ";
  protected final String TEXT_930 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_931 = "();";
  protected final String TEXT_932 = NL;
  protected final String TEXT_933 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_934 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_935 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_936 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_937 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_938 = NL;
  protected final String TEXT_939 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_940 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_941 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_942 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_943 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_944 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_945 = NL;
  protected final String TEXT_946 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_947 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_948 = NL;
  protected final String TEXT_949 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_950 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_951 = NL;
  protected final String TEXT_952 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_953 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_954 = NL;
  protected final String TEXT_955 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_956 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_957 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_958 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_959 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_960 = NL;
  protected final String TEXT_961 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_962 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_963 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_964 = NL;
  protected final String TEXT_965 = NL;
  protected final String TEXT_966 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_967 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_968 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_969 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_970 = NL;
  protected final String TEXT_971 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_972 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_973 = "());";
  protected final String TEXT_974 = NL;
  protected final String TEXT_975 = "\t\tinstallEditPolicy(";
  protected final String TEXT_976 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_977 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_978 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_979 = NL;
  protected final String TEXT_980 = "\t\t\t\t\tprotected ";
  protected final String TEXT_981 = " getDirectEditCommand(";
  protected final String TEXT_982 = " request) {";
  protected final String TEXT_983 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_984 = ".INSTANCE;";
  protected final String TEXT_985 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_986 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_987 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_988 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_989 = "(";
  protected final String TEXT_990 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_991 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_992 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_993 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_994 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_995 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_996 = " editingDomain = ";
  protected final String TEXT_997 = ".getEditingDomain(";
  protected final String TEXT_998 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_999 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1000 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1001 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1002 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1003 = " createDomainModelCommand(";
  protected final String TEXT_1004 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1005 = " element = ";
  protected final String TEXT_1006 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1007 = " result = new ";
  protected final String TEXT_1008 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1009 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1010 = " ";
  protected final String TEXT_1011 = "feature = (";
  protected final String TEXT_1012 = ") ";
  protected final String TEXT_1013 = ".eINSTANCE.get";
  protected final String TEXT_1014 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1015 = ".parseValue(feature, values[";
  protected final String TEXT_1016 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1017 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1018 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1019 = " ";
  protected final String TEXT_1020 = "values = new ";
  protected final String TEXT_1021 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1022 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1023 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1024 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1025 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1026 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_1027 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_1028 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1029 = NL + "\t\t\t\t});";
  protected final String TEXT_1030 = NL + "\t\t}" + NL;
  protected final String TEXT_1031 = NL;
  protected final String TEXT_1032 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1033 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1034 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1035 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1036 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1037 = "(this, ";
  protected final String TEXT_1038 = ".class, new ";
  protected final String TEXT_1039 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1040 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1041 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1042 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1043 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1044 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1045 = NL;
  protected final String TEXT_1046 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1047 = " domainModelRefresher = new ";
  protected final String TEXT_1048 = "(this);" + NL;
  protected final String TEXT_1049 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1050 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1051 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1052 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1053 = " nextChild = (";
  protected final String TEXT_1054 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1055 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1056 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1057 = ") ";
  protected final String TEXT_1058 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1059 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1060 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1061 = ".eINSTANCE.get";
  protected final String TEXT_1062 = "(), labelRefresher);";
  protected final String TEXT_1063 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1064 = ".eINSTANCE.get";
  protected final String TEXT_1065 = "(), labelRefresher);";
  protected final String TEXT_1066 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1067 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1068 = " result = new ";
  protected final String TEXT_1069 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1070 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1071 = " next = (";
  protected final String TEXT_1072 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_1073 = " style = (";
  protected final String TEXT_1074 = ") next.getStyle(";
  protected final String TEXT_1075 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1076 = ".getVisualID(next)) {";
  protected final String TEXT_1077 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1078 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1079 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1080 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1081 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1082 = NL;
a1069 27
class RelatedNodesFinder {
	private HashMap<GenClass, Collection<GenNode>> myCache = new HashMap<GenClass, Collection<GenNode>>();
	private final GenDiagram myDiagram;

	public RelatedNodesFinder(GenDiagram genDiagram) {
		myDiagram = genDiagram;
	}

	public Collection<GenNode> getRelatedGenNodes(GenClass genClass) {
		Collection<GenNode> result = myCache.get(genClass);
		if (result == null) {
			result = new LinkedList<GenNode>();
			myCache.put(genClass, result);
			for(Iterator it = myDiagram.getAllNodes().iterator(); it.hasNext(); ) {
				GenNode next = (GenNode) it.next();
				if (genClass.equals(next.getDomainMetaClass())) {
					result.add(next);
				}
			}
		}
		return result;
	}
}
RelatedNodesFinder myRelatedNodesFinder = new RelatedNodesFinder(genDiagram);

    stringBuffer.append(TEXT_18);
    
d1226 1
a1226 1
    stringBuffer.append(TEXT_19);
d1231 2
d1234 1
a1234 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
a1235 2
    }
    stringBuffer.append(TEXT_22);
d1240 2
d1243 1
a1243 1
    stringBuffer.append(genNode.getEditPartClassName());
d1245 1
a1245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart"));
d1247 1
a1247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.NodeEditPart"));
d1249 1
a1249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
a1250 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart"));
    stringBuffer.append(TEXT_28);
d1253 1
d1255 1
d1257 1
a1257 1
    stringBuffer.append(genCommonBase.getVisualID());
d1259 1
a1259 1
    }
d1263 1
a1263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
a1264 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager"));
    stringBuffer.append(TEXT_35);
d1268 2
a1270 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_37);
d1274 2
d1277 1
a1277 1
    stringBuffer.append(genNode.getEditPartClassName());
d1279 1
a1279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1280 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1283 1
a1290 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1291 1
    stringBuffer.append(TEXT_48);
d1301 2
d1304 1
a1304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a1305 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPoliciesPackageName() + "." + editPolicyClassName));
    stringBuffer.append(TEXT_51);
d1312 1
a1312 1
	layoutEditPolicyBaseClass = "org.eclipse.gef.editpolicies.XYLayoutEditPolicy";
d1314 1
a1314 1
	layoutEditPolicyBaseClass = "org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy";
d1317 2
d1320 1
a1320 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a1321 2
    stringBuffer.append(importManager.getImportedName(layoutEditPolicyBaseClass));
    stringBuffer.append(TEXT_54);
d1328 1
a1328 1
    stringBuffer.append(TEXT_55);
d1332 2
d1335 1
a1335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1337 1
a1337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1343 1
a1343 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1345 1
a1345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1347 1
a1347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1349 2
a1351 2
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1353 1
a1353 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1355 1
a1355 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a1356 4
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_69);
d1361 4
d1366 1
a1366 1
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
d1368 1
a1368 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1370 1
a1370 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1372 1
a1372 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1374 1
a1374 5
    
		{
			Collection<GenNode> relatedNodes = myRelatedNodesFinder.getRelatedGenNodes(next.getDomainMetaClass());
			if (relatedNodes.size() != 1) {

d1377 1
a1377 6
			}
			for(GenNode nextRelated : relatedNodes) {
				TypeModelFacet facet = nextRelated.getModelFacet();
				GenFeature childFeature = facet.getChildMetaFeature();
				GenFeature containmentFeature = facet.getContainmentMetaFeature();
				if (relatedNodes.size() != 1) {
d1380 1
a1380 1
    stringBuffer.append(importManager.getImportedName(nextRelated.getEditPartQualifiedClassName()));
d1382 2
d1385 1
a1385 3
				}
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					if (childFeature.getEcoreFeature().isMany()) {
a1386 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d1388 3
a1390 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1392 1
a1392 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
d1394 1
a1394 3
    
					} else {

d1396 1
a1396 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d1398 1
a1398 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1400 1
a1400 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
d1402 1
a1402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d1404 1
a1404 5
    
					}
				}
				if (containmentFeature.getEcoreFeature().isMany()) {

d1406 1
a1406 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d1408 1
a1408 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1410 1
a1410 1
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
d1412 4
d1417 2
a1418 1
				} else {
a1419 4
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1421 1
a1421 1
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
d1423 1
a1423 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d1425 1
a1425 4
    
				}
				if (relatedNodes.size() != 1) {

d1427 1
a1427 5
    
				}
			}	//for(GenNode nextRelated : relatedNodes)
			if (relatedNodes.size() != 1) {

d1429 1
a1429 12
    /*switch(visualID)*/
    
			}
			TypeModelFacet facet = next.getModelFacet();
			GenFeature childFeature = facet.getChildMetaFeature();
			GenFeature containmentFeature = facet.getContainmentMetaFeature();
			if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
				GenFeature _feature = childFeature;
				String _ownerInstance = _getViewCode + ".getElement()";
				String _exceedsUpperBound = "return " + importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand") + ".INSTANCE;";
				GenClass _ownerGenClass = null;

d1431 1
a1431 4
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

d1433 1
a1433 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
a1434 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_101);
d1436 1
a1436 2
} else {
	if (upperBound > 0) {
d1438 2
d1441 1
a1441 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d1443 6
a1448 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d1450 1
a1450 1
    stringBuffer.append(_feature.getFeatureAccessorName());
d1452 1
a1452 1
    stringBuffer.append(_exceedsUpperBound);
d1455 1
a1455 2
	}
}
d1458 1
a1458 1
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1460 1
a1460 1
    stringBuffer.append(_getViewCode);
d1462 1
a1462 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1464 1
a1464 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
d1466 1
a1466 8
    
			}
			{
				GenFeature _feature = containmentFeature;
				String _ownerInstance = _getViewCode + ".getElement()";
				String _exceedsUpperBound = "return " + importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand") + ".INSTANCE;";
				GenClass _ownerGenClass = null;

d1468 2
d1471 2
a1472 2
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {
a1473 2
    stringBuffer.append(TEXT_113);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
d1475 1
a1475 1
    stringBuffer.append(_exceedsUpperBound);
d1477 1
a1477 4
    
} else {
	if (upperBound > 0) {

d1479 1
a1479 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d1481 1
a1481 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d1483 1
a1483 1
    stringBuffer.append(_feature.getFeatureAccessorName());
a1484 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_120);
a1486 1
}
d1488 5
d1494 1
a1494 1
			}
a1495 4
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(_getViewCode);
d1497 1
a1497 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a1498 2
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_125);
d1500 1
a1500 1
		}	//local declaration for related nodes.
d1502 2
d1505 1
a1505 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d1507 1
a1507 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ExpandDrawerCommand"));
d1509 1
a1509 1
    stringBuffer.append(_getViewCode);
a1510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
a1511 1
    stringBuffer.append(_getViewCode);
d1513 1
a1513 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1515 1
a1515 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.SetBoundsCommand"));
d1517 1
a1517 1
    if (isListLayout) {
d1519 1
a1519 1
    } else {
d1521 1
a1521 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1523 1
a1523 1
    }
d1525 1
a1525 10
    
		{
			int defaultWidth = 40;
			int defaultHeight = 40;
			DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
			if (defSizeAttrs != null) {
				defaultWidth = defSizeAttrs.getWidth();
				defaultHeight = defSizeAttrs.getHeight();
			}

d1527 1
a1527 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
d1529 1
a1529 1
    stringBuffer.append(_getViewCode);
d1531 1
a1531 1
    if (isListLayout) {
d1533 3
a1535 1
    } else {
d1539 1
a1539 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d1541 1
a1541 1
    stringBuffer.append(defaultWidth);
d1543 1
a1543 1
    stringBuffer.append(defaultHeight);
d1545 1
a1545 1
    }
a1546 102
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_148);
    
		}

    stringBuffer.append(TEXT_149);
    
	}	//for

    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_152);
    
}	//if (!childNodes.isEmpty()) in createAddCommand

    stringBuffer.append(TEXT_153);
    
/* delegation from getCloneCommand to createCloneCommand is 100% analogous to delegation from getAddCommand() to createAddCommand() in ConstrainedLayoutEditPolicy. */

    
if (!childNodes.isEmpty()) {

    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_172);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_174);
    
	for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode next = (GenNode) it.next();
		TypeModelFacet facet = next.getModelFacet();
		GenFeature childFeature = facet.getChildMetaFeature();
		GenFeature containmentFeature = facet.getContainmentMetaFeature();

    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CommandWrapper"));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_179);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.CopyCommand"));
    stringBuffer.append(TEXT_181);
    
		if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
			GenFeature _feature = childFeature;
			String _ownerInstance = _getViewCode + ".getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_182);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_183);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_184);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_185);
a1547 14
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_186);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_188);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_189);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_190);
    
	}
d1550 1
a1550 219
    
		}
		{
			GenFeature _feature = containmentFeature;
			String _ownerInstance = _getViewCode + ".getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_191);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound == 1) {

    stringBuffer.append(TEXT_192);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_193);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_194);
    
} else {
	if (upperBound > 0) {

    stringBuffer.append(TEXT_195);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_197);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_198);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_199);
    
	}
}

    
		}

    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_204);
    
		if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {

    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_206);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_209);
    
		}

    stringBuffer.append(TEXT_210);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_211);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_214);
    
		{
			int defaultWidth = 40;
			int defaultHeight = 40;
			DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
			if (defSizeAttrs != null) {
				defaultWidth = defSizeAttrs.getWidth();
				defaultHeight = defSizeAttrs.getHeight();
			}

    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_216);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_217);
    if (isListLayout) {
    stringBuffer.append(TEXT_218);
    } else {
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_222);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_223);
    }
    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_225);
    
		}
	}	//for

    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_228);
    
}	//if (!childNodes.isEmpty())

    
}

    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
    stringBuffer.append(TEXT_231);
    
if (palette != null && !genNode.getChildNodes().isEmpty()) {

    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_233);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_236);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_237);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_238);
    
	for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
		GenChildNode next = (GenChildNode)it.next();

    stringBuffer.append(TEXT_239);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_240);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + next.getDomainMetaClass().getName() + next.getVisualID() + "Command"));
    stringBuffer.append(TEXT_241);
    if (isXYLayout) {
    stringBuffer.append(TEXT_242);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_243);
    }
    stringBuffer.append(TEXT_244);
    
	}

    stringBuffer.append(TEXT_245);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_246);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_247);
    
}

    stringBuffer.append(TEXT_248);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_249);
    
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {

    stringBuffer.append(TEXT_250);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_251);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
    stringBuffer.append(TEXT_252);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_253);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_254);
    stringBuffer.append(TEXT_255);
    stringBuffer.append(TEXT_256);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_257);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_258);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_259);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ChangeBoundsCommand"));
    stringBuffer.append(TEXT_260);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_261);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_263);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_264);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_265);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_266);
    
} else {

    stringBuffer.append(TEXT_267);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_268);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_269);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_270);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_271);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_272);
    
}

    stringBuffer.append(TEXT_273);
d1552 1
a1552 1
    stringBuffer.append(TEXT_274);
d1554 1
a1554 1
    stringBuffer.append(TEXT_275);
d1556 1
a1556 1
    stringBuffer.append(TEXT_276);
d1558 1
a1558 1
    stringBuffer.append(TEXT_277);
d1562 1
a1562 1
    stringBuffer.append(TEXT_278);
d1564 1
a1564 1
    stringBuffer.append(TEXT_279);
d1566 1
a1566 1
    stringBuffer.append(TEXT_280);
d1568 1
a1568 1
    stringBuffer.append(TEXT_281);
d1570 1
a1570 1
    stringBuffer.append(TEXT_282);
d1572 1
a1572 1
    stringBuffer.append(TEXT_283);
d1576 1
a1576 1
    stringBuffer.append(TEXT_284);
d1578 1
a1578 1
    stringBuffer.append(TEXT_285);
d1580 1
a1580 1
    stringBuffer.append(TEXT_286);
d1582 1
a1582 1
    stringBuffer.append(TEXT_287);
d1584 1
a1584 1
    stringBuffer.append(TEXT_288);
d1588 1
a1588 1
    stringBuffer.append(TEXT_289);
d1590 1
a1590 1
    stringBuffer.append(TEXT_290);
d1594 1
a1594 1
    stringBuffer.append(TEXT_291);
d1596 1
a1596 1
    stringBuffer.append(TEXT_292);
d1598 1
a1598 1
    stringBuffer.append(TEXT_293);
d1600 1
a1600 1
    stringBuffer.append(TEXT_294);
d1602 1
a1602 1
    stringBuffer.append(TEXT_295);
d1604 1
a1604 1
    stringBuffer.append(TEXT_296);
d1606 1
a1606 1
    stringBuffer.append(TEXT_297);
d1608 1
a1608 1
    stringBuffer.append(TEXT_298);
d1610 1
a1610 1
    stringBuffer.append(TEXT_299);
d1612 1
a1612 1
    stringBuffer.append(TEXT_300);
d1614 1
a1614 1
    stringBuffer.append(TEXT_301);
d1638 1
a1638 1
    stringBuffer.append(TEXT_302);
d1640 1
a1640 1
    stringBuffer.append(TEXT_303);
d1642 1
a1642 1
    stringBuffer.append(TEXT_304);
d1646 1
a1646 1
    stringBuffer.append(TEXT_305);
d1648 1
a1648 1
    stringBuffer.append(TEXT_306);
d1650 1
a1650 1
    stringBuffer.append(TEXT_307);
d1652 1
a1652 1
    stringBuffer.append(TEXT_308);
d1656 1
a1656 1
    stringBuffer.append(TEXT_309);
d1658 1
a1658 1
    stringBuffer.append(TEXT_310);
d1660 1
a1660 1
    stringBuffer.append(TEXT_311);
d1664 1
a1664 1
    stringBuffer.append(TEXT_312);
d1666 1
a1666 1
    stringBuffer.append(TEXT_313);
d1670 1
a1670 1
    stringBuffer.append(TEXT_314);
d1672 1
a1672 1
    stringBuffer.append(TEXT_315);
d1674 1
a1674 1
    stringBuffer.append(TEXT_316);
d1676 1
a1676 1
    stringBuffer.append(TEXT_317);
d1678 1
a1678 1
    stringBuffer.append(TEXT_318);
d1680 1
a1680 1
    stringBuffer.append(TEXT_319);
d1682 1
a1682 1
    stringBuffer.append(TEXT_320);
d1684 1
a1684 1
    stringBuffer.append(TEXT_321);
d1686 1
a1686 1
    stringBuffer.append(TEXT_322);
d1688 1
a1688 1
    stringBuffer.append(TEXT_323);
d1690 1
a1690 1
    stringBuffer.append(TEXT_324);
d1716 1
a1716 1
    stringBuffer.append(TEXT_325);
d1718 1
a1718 1
    stringBuffer.append(TEXT_326);
d1720 1
a1720 1
    stringBuffer.append(TEXT_327);
d1724 1
a1724 1
    stringBuffer.append(TEXT_328);
d1726 1
a1726 1
    stringBuffer.append(TEXT_329);
d1728 1
a1728 1
    stringBuffer.append(TEXT_330);
d1730 1
a1730 1
    stringBuffer.append(TEXT_331);
d1734 1
a1734 1
    stringBuffer.append(TEXT_332);
d1736 1
a1736 1
    stringBuffer.append(TEXT_333);
d1738 1
a1738 1
    stringBuffer.append(TEXT_334);
d1740 1
a1740 1
    stringBuffer.append(TEXT_335);
d1742 1
a1742 1
    stringBuffer.append(TEXT_336);
d1744 1
a1744 1
    stringBuffer.append(TEXT_337);
d1746 1
a1746 1
    stringBuffer.append(TEXT_338);
d1748 1
a1748 1
    stringBuffer.append(TEXT_339);
d1750 1
a1750 1
    stringBuffer.append(TEXT_340);
d1752 1
a1752 1
    stringBuffer.append(TEXT_341);
d1778 1
a1778 1
    stringBuffer.append(TEXT_342);
d1780 1
a1780 1
    stringBuffer.append(TEXT_343);
d1782 1
a1782 1
    stringBuffer.append(TEXT_344);
d1786 1
a1786 1
    stringBuffer.append(TEXT_345);
d1788 1
a1788 1
    stringBuffer.append(TEXT_346);
d1790 1
a1790 1
    stringBuffer.append(TEXT_347);
d1792 1
a1792 1
    stringBuffer.append(TEXT_348);
d1794 1
a1794 1
    stringBuffer.append(TEXT_349);
d1796 1
a1796 1
    stringBuffer.append(TEXT_350);
d1798 1
a1798 1
    stringBuffer.append(TEXT_351);
d1800 1
a1800 1
    stringBuffer.append(TEXT_352);
d1802 1
a1802 1
    stringBuffer.append(TEXT_353);
d1804 1
a1804 1
    stringBuffer.append(TEXT_354);
d1806 1
a1806 1
    stringBuffer.append(TEXT_355);
d1808 1
a1808 1
    stringBuffer.append(TEXT_356);
d1810 1
a1810 1
    stringBuffer.append(TEXT_357);
d1812 1
a1812 1
    stringBuffer.append(TEXT_358);
d1814 1
a1814 1
    stringBuffer.append(TEXT_359);
d1838 1
a1838 1
    stringBuffer.append(TEXT_360);
d1840 1
a1840 1
    stringBuffer.append(TEXT_361);
d1842 1
a1842 1
    stringBuffer.append(TEXT_362);
d1846 1
a1846 1
    stringBuffer.append(TEXT_363);
d1848 1
a1848 1
    stringBuffer.append(TEXT_364);
d1850 1
a1850 1
    stringBuffer.append(TEXT_365);
d1852 1
a1852 1
    stringBuffer.append(TEXT_366);
d1854 1
a1854 1
    stringBuffer.append(TEXT_367);
d1856 1
a1856 1
    stringBuffer.append(TEXT_368);
d1860 1
a1860 1
    stringBuffer.append(TEXT_369);
d1862 1
a1862 1
    stringBuffer.append(TEXT_370);
d1864 1
a1864 1
    stringBuffer.append(TEXT_371);
d1870 1
a1870 1
    stringBuffer.append(TEXT_372);
d1874 1
a1874 1
    stringBuffer.append(TEXT_373);
d1876 1
a1876 1
    stringBuffer.append(TEXT_374);
d1878 1
a1878 1
    stringBuffer.append(TEXT_375);
d1880 1
a1880 1
    stringBuffer.append(TEXT_376);
d1888 1
a1888 1
    stringBuffer.append(TEXT_377);
d1890 1
a1890 1
    stringBuffer.append(TEXT_378);
d1892 1
a1892 1
    stringBuffer.append(TEXT_379);
d1894 1
a1894 1
    stringBuffer.append(TEXT_380);
d1896 1
a1896 1
    stringBuffer.append(TEXT_381);
d1898 1
a1898 1
    stringBuffer.append(TEXT_382);
d1904 1
a1904 1
    stringBuffer.append(TEXT_383);
d1908 1
a1908 1
    stringBuffer.append(TEXT_384);
d1915 1
a1915 1
    stringBuffer.append(TEXT_385);
d1919 1
a1919 1
    stringBuffer.append(TEXT_386);
d1921 1
a1921 1
    stringBuffer.append(TEXT_387);
d1925 1
a1925 1
    stringBuffer.append(TEXT_388);
d1927 1
a1927 1
    stringBuffer.append(TEXT_389);
d1932 1
a1932 1
    stringBuffer.append(TEXT_390);
d1934 1
a1934 1
    stringBuffer.append(TEXT_391);
d1936 1
a1936 1
    stringBuffer.append(TEXT_392);
d1940 1
a1940 1
    stringBuffer.append(TEXT_393);
d1942 1
a1942 1
    stringBuffer.append(TEXT_394);
d1944 1
a1944 1
    stringBuffer.append(TEXT_395);
d1946 1
a1946 1
    stringBuffer.append(TEXT_396);
d1948 1
a1948 1
    stringBuffer.append(TEXT_397);
d1950 1
a1950 1
    stringBuffer.append(TEXT_398);
d1952 1
a1952 1
    stringBuffer.append(TEXT_399);
d1954 1
a1954 1
    stringBuffer.append(TEXT_400);
d1956 1
a1956 1
    stringBuffer.append(TEXT_401);
d1958 1
a1958 1
    stringBuffer.append(TEXT_402);
d1960 1
a1960 1
    stringBuffer.append(TEXT_403);
d1965 1
a1965 1
    stringBuffer.append(TEXT_404);
d1967 1
a1967 1
    stringBuffer.append(TEXT_405);
d1969 1
a1969 1
    stringBuffer.append(TEXT_406);
d1973 1
a1973 1
    stringBuffer.append(TEXT_407);
d1980 1
a1980 1
    stringBuffer.append(TEXT_408);
d1982 1
a1982 1
    stringBuffer.append(TEXT_409);
d1986 1
a1986 1
    stringBuffer.append(TEXT_410);
d1992 1
a1992 1
    stringBuffer.append(TEXT_411);
d1996 1
a1996 1
    stringBuffer.append(TEXT_412);
d2001 1
a2001 1
    stringBuffer.append(TEXT_413);
d2006 1
a2006 1
    stringBuffer.append(TEXT_414);
d2010 1
a2010 1
    stringBuffer.append(TEXT_415);
d2012 1
a2012 1
    stringBuffer.append(TEXT_416);
d2014 1
a2014 1
    stringBuffer.append(TEXT_417);
d2016 1
a2016 1
    stringBuffer.append(TEXT_418);
d2018 1
a2018 1
    stringBuffer.append(TEXT_419);
d2020 1
a2020 1
    stringBuffer.append(TEXT_420);
d2024 1
a2024 1
    stringBuffer.append(TEXT_421);
d2028 1
a2028 1
    stringBuffer.append(TEXT_422);
d2030 1
a2030 1
    stringBuffer.append(TEXT_423);
d2032 1
a2032 1
    stringBuffer.append(TEXT_424);
d2034 1
a2034 1
    stringBuffer.append(TEXT_425);
d2036 1
a2036 1
    stringBuffer.append(TEXT_426);
d2038 1
a2038 1
    stringBuffer.append(TEXT_427);
d2042 1
a2042 1
    stringBuffer.append(TEXT_428);
d2044 1
a2044 1
    stringBuffer.append(TEXT_429);
d2046 1
a2046 1
    stringBuffer.append(TEXT_430);
d2048 1
a2048 1
    stringBuffer.append(TEXT_431);
d2052 1
a2052 1
    stringBuffer.append(TEXT_432);
d2054 1
a2054 1
    stringBuffer.append(TEXT_433);
d2064 1
a2064 1
    stringBuffer.append(TEXT_434);
d2066 1
a2066 1
    stringBuffer.append(TEXT_435);
d2068 1
a2068 1
    stringBuffer.append(TEXT_436);
d2070 1
a2070 1
    stringBuffer.append(TEXT_437);
d2072 1
a2072 1
    stringBuffer.append(TEXT_438);
d2074 1
a2074 1
    stringBuffer.append(TEXT_439);
d2078 1
a2078 1
    stringBuffer.append(TEXT_440);
d2080 1
a2080 1
    stringBuffer.append(TEXT_441);
d2082 1
a2082 1
    stringBuffer.append(TEXT_442);
d2084 1
a2084 1
    stringBuffer.append(TEXT_443);
d2086 1
a2086 1
    stringBuffer.append(TEXT_444);
d2088 1
a2088 1
    stringBuffer.append(TEXT_445);
d2090 1
a2090 1
    stringBuffer.append(TEXT_446);
d2092 1
a2092 1
    stringBuffer.append(TEXT_447);
d2094 1
a2094 1
    stringBuffer.append(TEXT_448);
d2096 1
a2096 1
    stringBuffer.append(TEXT_449);
d2098 1
a2098 1
    stringBuffer.append(TEXT_450);
d2100 1
a2100 1
    stringBuffer.append(TEXT_451);
d2102 1
a2102 1
    stringBuffer.append(TEXT_452);
d2104 1
a2104 1
    stringBuffer.append(TEXT_453);
d2109 1
a2109 1
    stringBuffer.append(TEXT_454);
d2111 1
a2111 1
    stringBuffer.append(TEXT_455);
d2113 1
a2113 1
    stringBuffer.append(TEXT_456);
d2115 1
a2115 1
    stringBuffer.append(TEXT_457);
d2117 1
a2117 1
    stringBuffer.append(TEXT_458);
d2119 1
a2119 1
    stringBuffer.append(TEXT_459);
d2121 1
a2121 1
    stringBuffer.append(TEXT_460);
d2123 1
a2123 1
    stringBuffer.append(TEXT_461);
d2125 1
a2125 1
    stringBuffer.append(TEXT_462);
d2127 1
a2127 1
    stringBuffer.append(TEXT_463);
d2129 1
a2129 1
    stringBuffer.append(TEXT_464);
d2133 1
a2133 1
    stringBuffer.append(TEXT_465);
d2135 1
a2135 1
    stringBuffer.append(TEXT_466);
d2143 1
a2143 1
    stringBuffer.append(TEXT_467);
d2145 1
a2145 1
    stringBuffer.append(TEXT_468);
d2147 1
a2147 1
    stringBuffer.append(TEXT_469);
d2149 1
a2149 1
    stringBuffer.append(TEXT_470);
d2151 1
a2151 1
    stringBuffer.append(TEXT_471);
d2160 1
a2160 1
    stringBuffer.append(TEXT_472);
d2162 1
a2162 1
    stringBuffer.append(TEXT_473);
d2164 1
a2164 1
    stringBuffer.append(TEXT_474);
d2166 1
a2166 1
    stringBuffer.append(TEXT_475);
d2168 1
a2168 1
    stringBuffer.append(TEXT_476);
d2172 1
a2172 1
    stringBuffer.append(TEXT_477);
d2180 1
a2180 1
    stringBuffer.append(TEXT_478);
d2182 1
a2182 1
    stringBuffer.append(TEXT_479);
d2184 1
a2184 1
    stringBuffer.append(TEXT_480);
d2186 1
a2186 1
    stringBuffer.append(TEXT_481);
d2188 1
a2188 1
    stringBuffer.append(TEXT_482);
d2192 1
a2192 1
    stringBuffer.append(TEXT_483);
d2196 1
a2196 1
    stringBuffer.append(TEXT_484);
d2198 1
a2198 1
    stringBuffer.append(TEXT_485);
d2202 1
a2202 1
    stringBuffer.append(TEXT_486);
d2204 1
a2204 1
    stringBuffer.append(TEXT_487);
d2206 1
a2206 1
    stringBuffer.append(TEXT_488);
d2208 1
a2208 1
    stringBuffer.append(TEXT_489);
d2210 1
a2210 1
    stringBuffer.append(TEXT_490);
d2212 1
a2212 1
    stringBuffer.append(TEXT_491);
d2214 1
a2214 1
    stringBuffer.append(TEXT_492);
d2218 1
a2218 1
    stringBuffer.append(TEXT_493);
d2220 1
a2220 1
    stringBuffer.append(TEXT_494);
d2222 1
a2222 1
    stringBuffer.append(TEXT_495);
d2224 1
a2224 1
    stringBuffer.append(TEXT_496);
d2226 1
a2226 1
    stringBuffer.append(TEXT_497);
d2228 3
a2230 3
    stringBuffer.append(TEXT_498);
    stringBuffer.append(TEXT_499);
    stringBuffer.append(TEXT_500);
d2232 1
a2232 1
    stringBuffer.append(TEXT_501);
d2234 1
a2234 1
    stringBuffer.append(TEXT_502);
d2236 1
a2236 1
    stringBuffer.append(TEXT_503);
d2238 1
a2238 1
    stringBuffer.append(TEXT_504);
d2240 1
a2240 1
    stringBuffer.append(TEXT_505);
d2242 1
a2242 1
    stringBuffer.append(TEXT_506);
d2244 1
a2244 1
    stringBuffer.append(TEXT_507);
d2246 1
a2246 1
    stringBuffer.append(TEXT_508);
d2254 1
a2254 1
    stringBuffer.append(TEXT_509);
d2256 1
a2256 1
    stringBuffer.append(TEXT_510);
d2260 1
a2260 1
    stringBuffer.append(TEXT_511);
d2264 1
a2264 1
    stringBuffer.append(TEXT_512);
d2266 1
a2266 1
    stringBuffer.append(TEXT_513);
d2271 1
a2271 1
    stringBuffer.append(TEXT_514);
d2273 1
a2273 1
    stringBuffer.append(TEXT_515);
d2277 1
a2277 1
    stringBuffer.append(TEXT_516);
d2279 1
a2279 1
    stringBuffer.append(TEXT_517);
d2281 1
a2281 1
    stringBuffer.append(TEXT_518);
d2283 1
a2283 1
    stringBuffer.append(TEXT_519);
d2285 1
a2285 1
    stringBuffer.append(TEXT_520);
d2290 1
a2290 1
    stringBuffer.append(TEXT_521);
d2292 1
a2292 1
    stringBuffer.append(TEXT_522);
d2297 1
a2297 1
    stringBuffer.append(TEXT_523);
d2299 1
a2299 1
    stringBuffer.append(TEXT_524);
d2303 1
a2303 1
    stringBuffer.append(TEXT_525);
d2308 1
a2308 1
    stringBuffer.append(TEXT_526);
d2310 1
a2310 1
    stringBuffer.append(TEXT_527);
d2314 1
a2314 1
    stringBuffer.append(TEXT_528);
d2316 1
a2316 1
    stringBuffer.append(TEXT_529);
d2318 1
a2318 1
    stringBuffer.append(TEXT_530);
d2323 1
a2323 1
    stringBuffer.append(TEXT_531);
d2328 1
a2328 1
    stringBuffer.append(TEXT_532);
d2330 1
a2330 1
    stringBuffer.append(TEXT_533);
d2332 1
a2332 1
    stringBuffer.append(TEXT_534);
d2336 1
a2336 1
    stringBuffer.append(TEXT_535);
d2338 1
a2338 1
    stringBuffer.append(TEXT_536);
d2342 1
a2342 1
    stringBuffer.append(TEXT_537);
d2344 1
a2344 1
    stringBuffer.append(TEXT_538);
d2346 1
a2346 1
    stringBuffer.append(TEXT_539);
d2351 1
a2351 1
    stringBuffer.append(TEXT_540);
d2356 1
a2356 1
    stringBuffer.append(TEXT_541);
d2358 1
a2358 1
    stringBuffer.append(TEXT_542);
d2360 1
a2360 1
    stringBuffer.append(TEXT_543);
d2364 1
a2364 1
    stringBuffer.append(TEXT_544);
d2371 1
a2371 1
    stringBuffer.append(TEXT_545);
d2373 1
a2373 1
    stringBuffer.append(TEXT_546);
d2375 1
a2375 1
    stringBuffer.append(TEXT_547);
d2377 1
a2377 1
    stringBuffer.append(TEXT_548);
d2379 1
a2379 1
    stringBuffer.append(TEXT_549);
d2383 1
a2383 1
    stringBuffer.append(TEXT_550);
d2385 1
a2385 1
    stringBuffer.append(TEXT_551);
d2387 1
a2387 1
    stringBuffer.append(TEXT_552);
d2389 1
a2389 1
    stringBuffer.append(TEXT_553);
d2391 1
a2391 1
    stringBuffer.append(TEXT_554);
d2393 1
a2393 1
    stringBuffer.append(TEXT_555);
d2395 1
a2395 1
    stringBuffer.append(TEXT_556);
d2397 1
a2397 1
    stringBuffer.append(TEXT_557);
d2399 1
a2399 1
    stringBuffer.append(TEXT_558);
d2401 1
a2401 1
    stringBuffer.append(TEXT_559);
d2403 1
a2403 1
    stringBuffer.append(TEXT_560);
d2405 1
a2405 1
    stringBuffer.append(TEXT_561);
d2407 1
a2407 1
    stringBuffer.append(TEXT_562);
d2409 1
a2409 1
    stringBuffer.append(TEXT_563);
d2411 1
a2411 1
    stringBuffer.append(TEXT_564);
d2413 1
a2413 1
    stringBuffer.append(TEXT_565);
d2415 1
a2415 1
    stringBuffer.append(TEXT_566);
d2417 1
a2417 1
    stringBuffer.append(TEXT_567);
d2419 1
a2419 1
    stringBuffer.append(TEXT_568);
d2421 1
a2421 1
    stringBuffer.append(TEXT_569);
d2423 1
a2423 1
    stringBuffer.append(TEXT_570);
d2425 1
a2425 1
    stringBuffer.append(TEXT_571);
d2429 1
a2429 1
    stringBuffer.append(TEXT_572);
d2431 1
a2431 1
    stringBuffer.append(TEXT_573);
d2433 1
a2433 1
    stringBuffer.append(TEXT_574);
d2437 1
a2437 1
    stringBuffer.append(TEXT_575);
d2439 1
a2439 1
    stringBuffer.append(TEXT_576);
d2441 1
a2441 1
    stringBuffer.append(TEXT_577);
d2445 1
a2445 1
    stringBuffer.append(TEXT_578);
d2452 1
a2452 1
    stringBuffer.append(TEXT_579);
d2456 1
a2456 1
    stringBuffer.append(TEXT_580);
d2460 1
a2460 1
    stringBuffer.append(TEXT_581);
d2467 1
a2467 1
    stringBuffer.append(TEXT_582);
d2471 1
a2471 1
    stringBuffer.append(TEXT_583);
d2481 2
a2482 2
    stringBuffer.append(TEXT_584);
    stringBuffer.append(TEXT_585);
d2484 1
a2484 1
    stringBuffer.append(TEXT_586);
d2486 1
a2486 1
    stringBuffer.append(TEXT_587);
d2488 1
a2488 1
    stringBuffer.append(TEXT_588);
d2490 1
a2490 1
    stringBuffer.append(TEXT_589);
d2492 1
a2492 1
    stringBuffer.append(TEXT_590);
d2494 1
a2494 1
    stringBuffer.append(TEXT_591);
d2496 1
a2496 1
    stringBuffer.append(TEXT_592);
d2511 1
a2511 1
    stringBuffer.append(TEXT_593);
d2513 1
a2513 1
    stringBuffer.append(TEXT_594);
d2515 1
a2515 1
    stringBuffer.append(TEXT_595);
d2517 1
a2517 1
    stringBuffer.append(TEXT_596);
d2521 1
a2521 1
    stringBuffer.append(TEXT_597);
d2523 1
a2523 1
    stringBuffer.append(TEXT_598);
d2542 1
a2542 1
    stringBuffer.append(TEXT_599);
d2544 1
a2544 1
    stringBuffer.append(TEXT_600);
d2546 1
a2546 1
    stringBuffer.append(TEXT_601);
d2548 1
a2548 1
    stringBuffer.append(TEXT_602);
d2550 1
a2550 1
    stringBuffer.append(TEXT_603);
d2554 1
a2554 1
    stringBuffer.append(TEXT_604);
d2556 1
a2556 1
    stringBuffer.append(TEXT_605);
d2558 1
a2558 1
    stringBuffer.append(TEXT_606);
d2560 1
a2560 1
    stringBuffer.append(TEXT_607);
d2568 1
a2568 1
    stringBuffer.append(TEXT_608);
d2570 1
a2570 1
    stringBuffer.append(TEXT_609);
d2572 1
a2572 1
    stringBuffer.append(TEXT_610);
d2577 1
a2577 1
    stringBuffer.append(TEXT_611);
d2579 1
a2579 1
    stringBuffer.append(TEXT_612);
d2581 1
a2581 1
    stringBuffer.append(TEXT_613);
d2583 1
a2583 1
    stringBuffer.append(TEXT_614);
d2592 1
a2592 1
    stringBuffer.append(TEXT_615);
d2596 1
a2596 1
    stringBuffer.append(TEXT_616);
d2598 1
a2598 1
    stringBuffer.append(TEXT_617);
d2604 1
a2604 1
    stringBuffer.append(TEXT_618);
d2606 1
a2606 1
    stringBuffer.append(TEXT_619);
d2608 1
a2608 1
    stringBuffer.append(TEXT_620);
d2612 1
a2612 1
    stringBuffer.append(TEXT_621);
d2616 1
a2616 1
    stringBuffer.append(TEXT_622);
d2618 1
a2618 1
    stringBuffer.append(TEXT_623);
d2620 1
a2620 1
    stringBuffer.append(TEXT_624);
d2625 2
a2626 2
    stringBuffer.append(TEXT_625);
    stringBuffer.append(TEXT_626);
d2628 1
a2628 1
    stringBuffer.append(TEXT_627);
d2638 1
a2638 1
    stringBuffer.append(TEXT_628);
d2640 1
a2640 1
    stringBuffer.append(TEXT_629);
d2642 1
a2642 1
    stringBuffer.append(TEXT_630);
d2644 1
a2644 1
    stringBuffer.append(TEXT_631);
d2646 1
a2646 1
    stringBuffer.append(TEXT_632);
d2657 1
a2657 1
    stringBuffer.append(TEXT_633);
d2659 1
a2659 1
    stringBuffer.append(TEXT_634);
d2661 1
a2661 1
    stringBuffer.append(TEXT_635);
d2663 1
a2663 1
    stringBuffer.append(TEXT_636);
d2667 1
a2667 1
    stringBuffer.append(TEXT_637);
d2671 1
a2671 1
    stringBuffer.append(TEXT_638);
d2673 1
a2673 1
    stringBuffer.append(TEXT_639);
d2677 1
a2677 1
    stringBuffer.append(TEXT_640);
d2681 1
a2681 1
    stringBuffer.append(TEXT_641);
d2683 2
a2684 2
    stringBuffer.append(TEXT_642);
    stringBuffer.append(TEXT_643);
d2688 1
a2688 1
    stringBuffer.append(TEXT_644);
d2690 1
a2690 1
    stringBuffer.append(TEXT_645);
d2694 1
a2694 1
    stringBuffer.append(TEXT_646);
d2696 1
a2696 1
    stringBuffer.append(TEXT_647);
d2698 1
a2698 1
    stringBuffer.append(TEXT_648);
d2716 1
a2716 1
    stringBuffer.append(TEXT_649);
d2718 1
a2718 1
    stringBuffer.append(TEXT_650);
d2720 1
a2720 1
    stringBuffer.append(TEXT_651);
d2722 1
a2722 1
    stringBuffer.append(TEXT_652);
d2724 1
a2724 1
    stringBuffer.append(TEXT_653);
d2733 1
a2733 1
    stringBuffer.append(TEXT_654);
d2735 1
a2735 1
    stringBuffer.append(TEXT_655);
d2737 1
a2737 1
    stringBuffer.append(TEXT_656);
d2739 1
a2739 1
    stringBuffer.append(TEXT_657);
d2743 1
a2743 1
    stringBuffer.append(TEXT_658);
d2745 1
a2745 1
    stringBuffer.append(TEXT_659);
d2747 1
a2747 1
    stringBuffer.append(TEXT_660);
d2751 1
a2751 1
    stringBuffer.append(TEXT_661);
d2753 1
a2753 1
    stringBuffer.append(TEXT_662);
d2758 1
a2758 1
    stringBuffer.append(TEXT_663);
d2765 1
a2765 1
    stringBuffer.append(TEXT_664);
d2767 1
a2767 1
    stringBuffer.append(TEXT_665);
d2771 1
a2771 1
    stringBuffer.append(TEXT_666);
d2773 1
a2773 1
    stringBuffer.append(TEXT_667);
d2777 1
a2777 1
    stringBuffer.append(TEXT_668);
d2779 1
a2779 1
    stringBuffer.append(TEXT_669);
d2783 1
a2783 1
    stringBuffer.append(TEXT_670);
d2787 1
a2787 1
    stringBuffer.append(TEXT_671);
d2793 1
a2793 1
    stringBuffer.append(TEXT_672);
d2798 1
a2798 1
    stringBuffer.append(TEXT_673);
d2803 1
a2803 1
    stringBuffer.append(TEXT_674);
d2807 1
a2807 1
    stringBuffer.append(TEXT_675);
d2809 1
a2809 1
    stringBuffer.append(TEXT_676);
d2811 1
a2811 1
    stringBuffer.append(TEXT_677);
d2813 1
a2813 1
    stringBuffer.append(TEXT_678);
d2815 1
a2815 1
    stringBuffer.append(TEXT_679);
d2817 1
a2817 1
    stringBuffer.append(TEXT_680);
d2819 1
a2819 1
    stringBuffer.append(TEXT_681);
d2821 1
a2821 1
    stringBuffer.append(TEXT_682);
d2823 1
a2823 1
    stringBuffer.append(TEXT_683);
d2825 1
a2825 1
    stringBuffer.append(TEXT_684);
d2827 1
a2827 1
    stringBuffer.append(TEXT_685);
d2829 1
a2829 1
    stringBuffer.append(TEXT_686);
d2833 1
a2833 1
    stringBuffer.append(TEXT_687);
d2837 1
a2837 1
    stringBuffer.append(TEXT_688);
d2839 1
a2839 1
    stringBuffer.append(TEXT_689);
d2841 1
a2841 1
    stringBuffer.append(TEXT_690);
d2843 1
a2843 1
    stringBuffer.append(TEXT_691);
d2845 1
a2845 1
    stringBuffer.append(TEXT_692);
d2847 1
a2847 1
    stringBuffer.append(TEXT_693);
d2849 1
a2849 1
    stringBuffer.append(TEXT_694);
d2851 1
a2851 1
    stringBuffer.append(TEXT_695);
d2853 1
a2853 1
    stringBuffer.append(TEXT_696);
d2866 1
a2866 1
    stringBuffer.append(TEXT_697);
d2868 1
a2868 1
    stringBuffer.append(TEXT_698);
d2870 1
a2870 1
    stringBuffer.append(TEXT_699);
d2872 1
a2872 1
    stringBuffer.append(TEXT_700);
d2877 1
a2877 1
    stringBuffer.append(TEXT_701);
d2879 1
a2879 1
    stringBuffer.append(TEXT_702);
d2881 1
a2881 1
    stringBuffer.append(TEXT_703);
d2883 1
a2883 1
    stringBuffer.append(TEXT_704);
d2885 1
a2885 1
    stringBuffer.append(TEXT_705);
d2887 1
a2887 1
    stringBuffer.append(TEXT_706);
d2889 1
a2889 1
    stringBuffer.append(TEXT_707);
d2891 1
a2891 1
    stringBuffer.append(TEXT_708);
d2893 1
a2893 1
    stringBuffer.append(TEXT_709);
d2895 1
a2895 1
    stringBuffer.append(TEXT_710);
d2899 1
a2899 1
    stringBuffer.append(TEXT_711);
d2901 1
a2901 1
    stringBuffer.append(TEXT_712);
d2914 1
a2914 1
    stringBuffer.append(TEXT_713);
d2928 1
a2928 1
    stringBuffer.append(TEXT_714);
d2930 1
a2930 1
    stringBuffer.append(TEXT_715);
d2932 1
a2932 1
    stringBuffer.append(TEXT_716);
d2934 1
a2934 1
    stringBuffer.append(TEXT_717);
d2936 1
a2936 1
    stringBuffer.append(TEXT_718);
d2940 1
a2940 1
    stringBuffer.append(TEXT_719);
d2942 1
a2942 1
    stringBuffer.append(TEXT_720);
d2944 1
a2944 1
    stringBuffer.append(TEXT_721);
d2946 1
a2946 1
    stringBuffer.append(TEXT_722);
d2953 1
a2953 1
    stringBuffer.append(TEXT_723);
d2967 1
a2967 1
    stringBuffer.append(TEXT_724);
d2969 1
a2969 1
    stringBuffer.append(TEXT_725);
d2971 1
a2971 1
    stringBuffer.append(TEXT_726);
d2973 1
a2973 1
    stringBuffer.append(TEXT_727);
d2975 1
a2975 1
    stringBuffer.append(TEXT_728);
d2979 1
a2979 1
    stringBuffer.append(TEXT_729);
d2981 1
a2981 1
    stringBuffer.append(TEXT_730);
d2983 1
a2983 1
    stringBuffer.append(TEXT_731);
d2985 1
a2985 1
    stringBuffer.append(TEXT_732);
d2992 1
a2992 1
    stringBuffer.append(TEXT_733);
d3006 1
a3006 1
    stringBuffer.append(TEXT_734);
d3008 1
a3008 1
    stringBuffer.append(TEXT_735);
d3010 1
a3010 1
    stringBuffer.append(TEXT_736);
d3012 1
a3012 1
    stringBuffer.append(TEXT_737);
d3014 1
a3014 1
    stringBuffer.append(TEXT_738);
d3018 1
a3018 1
    stringBuffer.append(TEXT_739);
d3020 1
a3020 1
    stringBuffer.append(TEXT_740);
d3022 1
a3022 1
    stringBuffer.append(TEXT_741);
d3024 1
a3024 1
    stringBuffer.append(TEXT_742);
d3034 1
a3034 1
    stringBuffer.append(TEXT_743);
d3048 1
a3048 1
    stringBuffer.append(TEXT_744);
d3050 1
a3050 1
    stringBuffer.append(TEXT_745);
d3052 1
a3052 1
    stringBuffer.append(TEXT_746);
d3054 1
a3054 1
    stringBuffer.append(TEXT_747);
d3056 1
a3056 1
    stringBuffer.append(TEXT_748);
d3060 1
a3060 1
    stringBuffer.append(TEXT_749);
d3062 1
a3062 1
    stringBuffer.append(TEXT_750);
d3064 1
a3064 1
    stringBuffer.append(TEXT_751);
d3066 1
a3066 1
    stringBuffer.append(TEXT_752);
d3075 1
a3075 1
    stringBuffer.append(TEXT_753);
d3080 1
a3080 1
    stringBuffer.append(TEXT_754);
d3082 1
a3082 1
    stringBuffer.append(TEXT_755);
d3089 1
a3089 1
    stringBuffer.append(TEXT_756);
d3094 1
a3094 1
    stringBuffer.append(TEXT_757);
d3096 1
a3096 1
    stringBuffer.append(TEXT_758);
d3102 1
a3102 1
    stringBuffer.append(TEXT_759);
d3104 1
a3104 1
    stringBuffer.append(TEXT_760);
d3106 1
a3106 1
    stringBuffer.append(TEXT_761);
d3111 1
a3111 1
    stringBuffer.append(TEXT_762);
d3113 1
a3113 1
    stringBuffer.append(TEXT_763);
d3115 1
a3115 1
    stringBuffer.append(TEXT_764);
d3117 1
a3117 1
    stringBuffer.append(TEXT_765);
d3119 1
a3119 1
    stringBuffer.append(TEXT_766);
d3126 2
a3127 2
    stringBuffer.append(TEXT_767);
    stringBuffer.append(TEXT_768);
d3129 1
a3129 1
    stringBuffer.append(TEXT_769);
d3131 1
a3131 1
    stringBuffer.append(TEXT_770);
d3133 1
a3133 1
    stringBuffer.append(TEXT_771);
d3142 1
a3142 1
    stringBuffer.append(TEXT_772);
d3144 1
a3144 1
    stringBuffer.append(TEXT_773);
d3146 1
a3146 1
    stringBuffer.append(TEXT_774);
d3148 1
a3148 1
    stringBuffer.append(TEXT_775);
d3154 1
a3154 1
    stringBuffer.append(TEXT_776);
d3156 1
a3156 1
    stringBuffer.append(TEXT_777);
d3158 1
a3158 1
    stringBuffer.append(TEXT_778);
d3162 1
a3162 1
    stringBuffer.append(TEXT_779);
d3164 1
a3164 1
    stringBuffer.append(TEXT_780);
d3166 1
a3166 1
    stringBuffer.append(TEXT_781);
d3170 1
a3170 1
    stringBuffer.append(TEXT_782);
d3172 1
a3172 1
    stringBuffer.append(TEXT_783);
d3178 2
a3179 2
    stringBuffer.append(TEXT_784);
    stringBuffer.append(TEXT_785);
d3181 1
a3181 1
    stringBuffer.append(TEXT_786);
d3183 1
a3183 1
    stringBuffer.append(TEXT_787);
d3206 1
a3206 1
    stringBuffer.append(TEXT_788);
d3208 1
a3208 1
    stringBuffer.append(TEXT_789);
d3210 1
a3210 1
    stringBuffer.append(TEXT_790);
d3212 1
a3212 1
    stringBuffer.append(TEXT_791);
d3217 1
a3217 1
    stringBuffer.append(TEXT_792);
d3226 1
a3226 1
    stringBuffer.append(TEXT_793);
d3228 1
a3228 1
    stringBuffer.append(TEXT_794);
d3230 1
a3230 1
    stringBuffer.append(TEXT_795);
d3232 1
a3232 1
    stringBuffer.append(TEXT_796);
d3236 1
a3236 1
    stringBuffer.append(TEXT_797);
d3238 1
a3238 1
    stringBuffer.append(TEXT_798);
d3240 1
a3240 1
    stringBuffer.append(TEXT_799);
d3244 1
a3244 1
    stringBuffer.append(TEXT_800);
d3246 1
a3246 1
    stringBuffer.append(TEXT_801);
d3251 1
a3251 1
    stringBuffer.append(TEXT_802);
d3259 1
a3259 1
    stringBuffer.append(TEXT_803);
d3261 1
a3261 1
    stringBuffer.append(TEXT_804);
d3265 1
a3265 1
    stringBuffer.append(TEXT_805);
d3267 1
a3267 1
    stringBuffer.append(TEXT_806);
d3272 1
a3272 1
    stringBuffer.append(TEXT_807);
d3274 1
a3274 1
    stringBuffer.append(TEXT_808);
d3276 1
a3276 1
    stringBuffer.append(TEXT_809);
d3278 1
a3278 1
    stringBuffer.append(TEXT_810);
d3282 1
a3282 1
    stringBuffer.append(TEXT_811);
d3284 1
a3284 1
    stringBuffer.append(TEXT_812);
d3286 1
a3286 1
    stringBuffer.append(TEXT_813);
d3291 1
a3291 1
    stringBuffer.append(TEXT_814);
d3293 1
a3293 1
    stringBuffer.append(TEXT_815);
d3295 1
a3295 1
    stringBuffer.append(TEXT_816);
d3297 1
a3297 1
    stringBuffer.append(TEXT_817);
d3301 1
a3301 1
    stringBuffer.append(TEXT_818);
d3303 1
a3303 1
    stringBuffer.append(TEXT_819);
d3305 1
a3305 1
    stringBuffer.append(TEXT_820);
d3309 1
a3309 1
    stringBuffer.append(TEXT_821);
d3311 1
a3311 1
    stringBuffer.append(TEXT_822);
d3315 1
a3315 1
    stringBuffer.append(TEXT_823);
d3319 1
a3319 1
    stringBuffer.append(TEXT_824);
d3327 1
a3327 1
    stringBuffer.append(TEXT_825);
d3332 1
a3332 1
    stringBuffer.append(TEXT_826);
d3342 1
a3342 1
    stringBuffer.append(TEXT_827);
d3344 1
a3344 1
    stringBuffer.append(TEXT_828);
d3346 1
a3346 1
    stringBuffer.append(TEXT_829);
d3348 1
a3348 1
    stringBuffer.append(TEXT_830);
d3352 1
a3352 1
    stringBuffer.append(TEXT_831);
d3354 1
a3354 1
    stringBuffer.append(TEXT_832);
d3356 1
a3356 1
    stringBuffer.append(TEXT_833);
d3360 1
a3360 1
    stringBuffer.append(TEXT_834);
d3365 1
a3365 1
    stringBuffer.append(TEXT_835);
d3367 1
a3367 1
    stringBuffer.append(TEXT_836);
d3369 1
a3369 1
    stringBuffer.append(TEXT_837);
d3373 1
a3373 1
    stringBuffer.append(TEXT_838);
d3377 1
a3377 1
    stringBuffer.append(TEXT_839);
d3382 1
a3382 1
    stringBuffer.append(TEXT_840);
d3386 1
a3386 1
    stringBuffer.append(TEXT_841);
d3388 1
a3388 1
    stringBuffer.append(TEXT_842);
d3390 1
a3390 1
    stringBuffer.append(TEXT_843);
d3392 1
a3392 1
    stringBuffer.append(TEXT_844);
d3394 1
a3394 1
    stringBuffer.append(TEXT_845);
d3396 1
a3396 1
    stringBuffer.append(TEXT_846);
d3398 1
a3398 1
    stringBuffer.append(TEXT_847);
d3400 1
a3400 1
    stringBuffer.append(TEXT_848);
d3402 1
a3402 1
    stringBuffer.append(TEXT_849);
d3406 1
a3406 1
    stringBuffer.append(TEXT_850);
d3408 1
a3408 1
    stringBuffer.append(TEXT_851);
d3410 1
a3410 1
    stringBuffer.append(TEXT_852);
d3415 1
a3415 1
    stringBuffer.append(TEXT_853);
d3417 1
a3417 1
    stringBuffer.append(TEXT_854);
d3419 1
a3419 1
    stringBuffer.append(TEXT_855);
d3424 1
a3424 1
    stringBuffer.append(TEXT_856);
d3426 1
a3426 1
    stringBuffer.append(TEXT_857);
d3430 1
a3430 1
    stringBuffer.append(TEXT_858);
d3434 1
a3434 1
    stringBuffer.append(TEXT_859);
d3438 1
a3438 1
    stringBuffer.append(TEXT_860);
d3445 1
a3445 1
    stringBuffer.append(TEXT_861);
d3449 1
a3449 1
    stringBuffer.append(TEXT_862);
d3451 1
a3451 1
    stringBuffer.append(TEXT_863);
d3453 1
a3453 1
    stringBuffer.append(TEXT_864);
d3458 1
a3458 1
    stringBuffer.append(TEXT_865);
d3460 1
a3460 1
    stringBuffer.append(TEXT_866);
d3464 1
a3464 1
    stringBuffer.append(TEXT_867);
d3468 1
a3468 1
    stringBuffer.append(TEXT_868);
d3470 1
a3470 1
    stringBuffer.append(TEXT_869);
d3472 1
a3472 1
    stringBuffer.append(TEXT_870);
d3474 1
a3474 1
    stringBuffer.append(TEXT_871);
d3476 1
a3476 1
    stringBuffer.append(TEXT_872);
d3478 1
a3478 1
    stringBuffer.append(TEXT_873);
d3480 1
a3480 1
    stringBuffer.append(TEXT_874);
d3482 1
a3482 1
    stringBuffer.append(TEXT_875);
d3484 1
a3484 1
    stringBuffer.append(TEXT_876);
d3486 1
a3486 1
    stringBuffer.append(TEXT_877);
d3488 1
a3488 1
    stringBuffer.append(TEXT_878);
d3490 1
a3490 1
    stringBuffer.append(TEXT_879);
d3497 3
a3499 3
    stringBuffer.append(TEXT_880);
    stringBuffer.append(TEXT_881);
    stringBuffer.append(TEXT_882);
d3501 1
a3501 1
    stringBuffer.append(TEXT_883);
d3503 3
a3505 3
    stringBuffer.append(TEXT_884);
    stringBuffer.append(TEXT_885);
    stringBuffer.append(TEXT_886);
d3507 1
a3507 1
    stringBuffer.append(TEXT_887);
d3509 1
a3509 1
    stringBuffer.append(TEXT_888);
d3511 1
a3511 1
    stringBuffer.append(TEXT_889);
d3515 1
a3515 1
    stringBuffer.append(TEXT_890);
d3523 1
a3523 1
    stringBuffer.append(TEXT_891);
d3527 1
a3527 1
    stringBuffer.append(TEXT_892);
d3529 1
a3529 1
    stringBuffer.append(TEXT_893);
d3531 1
a3531 1
    stringBuffer.append(TEXT_894);
d3533 1
a3533 1
    stringBuffer.append(TEXT_895);
d3535 1
a3535 1
    stringBuffer.append(TEXT_896);
d3537 1
a3537 1
    stringBuffer.append(TEXT_897);
d3539 1
a3539 1
    stringBuffer.append(TEXT_898);
d3541 1
a3541 1
    stringBuffer.append(TEXT_899);
d3543 1
a3543 1
    stringBuffer.append(TEXT_900);
d3545 1
a3545 1
    stringBuffer.append(TEXT_901);
d3547 1
a3547 1
    stringBuffer.append(TEXT_902);
d3549 1
a3549 1
    stringBuffer.append(TEXT_903);
d3553 1
a3553 1
    stringBuffer.append(TEXT_904);
d3557 1
a3557 1
    stringBuffer.append(TEXT_905);
d3559 1
a3559 1
    stringBuffer.append(TEXT_906);
d3563 3
a3565 3
    stringBuffer.append(TEXT_907);
    stringBuffer.append(TEXT_908);
    stringBuffer.append(TEXT_909);
d3567 1
a3567 1
    stringBuffer.append(TEXT_910);
d3569 1
a3569 1
    stringBuffer.append(TEXT_911);
d3571 1
a3571 1
    stringBuffer.append(TEXT_912);
d3573 1
a3573 1
    stringBuffer.append(TEXT_913);
d3575 1
a3575 1
    stringBuffer.append(TEXT_914);
d3577 1
a3577 1
    stringBuffer.append(TEXT_915);
d3579 1
a3579 1
    stringBuffer.append(TEXT_916);
d3581 1
a3581 1
    stringBuffer.append(TEXT_917);
d3583 1
a3583 1
    stringBuffer.append(TEXT_918);
d3585 1
a3585 1
    stringBuffer.append(TEXT_919);
d3587 1
a3587 1
    stringBuffer.append(TEXT_920);
d3589 1
a3589 1
    stringBuffer.append(TEXT_921);
d3591 1
a3591 1
    stringBuffer.append(TEXT_922);
d3593 1
a3593 1
    stringBuffer.append(TEXT_923);
d3595 1
a3595 1
    stringBuffer.append(TEXT_924);
d3597 3
a3599 3
    stringBuffer.append(TEXT_925);
    stringBuffer.append(TEXT_926);
    stringBuffer.append(TEXT_927);
d3601 1
a3601 1
    stringBuffer.append(TEXT_928);
d3603 1
a3603 1
    stringBuffer.append(TEXT_929);
d3605 1
a3605 1
    stringBuffer.append(TEXT_930);
d3607 3
a3609 3
    stringBuffer.append(TEXT_931);
    stringBuffer.append(TEXT_932);
    stringBuffer.append(TEXT_933);
d3611 1
a3611 1
    stringBuffer.append(TEXT_934);
d3613 1
a3613 1
    stringBuffer.append(TEXT_935);
d3615 1
a3615 1
    stringBuffer.append(TEXT_936);
d3617 3
a3619 3
    stringBuffer.append(TEXT_937);
    stringBuffer.append(TEXT_938);
    stringBuffer.append(TEXT_939);
d3621 1
a3621 1
    stringBuffer.append(TEXT_940);
d3623 1
a3623 1
    stringBuffer.append(TEXT_941);
d3625 1
a3625 1
    stringBuffer.append(TEXT_942);
d3627 1
a3627 1
    stringBuffer.append(TEXT_943);
d3629 3
a3631 3
    stringBuffer.append(TEXT_944);
    stringBuffer.append(TEXT_945);
    stringBuffer.append(TEXT_946);
d3633 3
a3635 3
    stringBuffer.append(TEXT_947);
    stringBuffer.append(TEXT_948);
    stringBuffer.append(TEXT_949);
d3637 3
a3639 3
    stringBuffer.append(TEXT_950);
    stringBuffer.append(TEXT_951);
    stringBuffer.append(TEXT_952);
d3641 3
a3643 3
    stringBuffer.append(TEXT_953);
    stringBuffer.append(TEXT_954);
    stringBuffer.append(TEXT_955);
d3645 1
a3645 1
    stringBuffer.append(TEXT_956);
d3647 1
a3647 1
    stringBuffer.append(TEXT_957);
d3649 1
a3649 1
    stringBuffer.append(TEXT_958);
d3651 3
a3653 3
    stringBuffer.append(TEXT_959);
    stringBuffer.append(TEXT_960);
    stringBuffer.append(TEXT_961);
d3655 1
a3655 1
    stringBuffer.append(TEXT_962);
d3657 1
a3657 1
    stringBuffer.append(TEXT_963);
d3662 1
a3662 1
    stringBuffer.append(TEXT_964);
d3664 1
a3664 1
    stringBuffer.append(TEXT_965);
d3668 1
a3668 1
    stringBuffer.append(TEXT_966);
d3675 1
a3675 1
    stringBuffer.append(TEXT_967);
d3677 1
a3677 1
    stringBuffer.append(TEXT_968);
d3679 2
a3680 2
    stringBuffer.append(TEXT_969);
    stringBuffer.append(TEXT_970);
d3690 1
a3690 1
    stringBuffer.append(TEXT_971);
d3692 1
a3692 1
    stringBuffer.append(TEXT_972);
d3694 1
a3694 1
    stringBuffer.append(TEXT_973);
d3705 2
a3706 2
    stringBuffer.append(TEXT_974);
    stringBuffer.append(TEXT_975);
d3708 1
a3708 1
    stringBuffer.append(TEXT_976);
d3710 1
a3710 1
    stringBuffer.append(TEXT_977);
d3712 3
a3714 3
    stringBuffer.append(TEXT_978);
    stringBuffer.append(TEXT_979);
    stringBuffer.append(TEXT_980);
d3716 1
a3716 1
    stringBuffer.append(TEXT_981);
d3718 1
a3718 1
    stringBuffer.append(TEXT_982);
d3722 1
a3722 1
    stringBuffer.append(TEXT_983);
d3724 1
a3724 1
    stringBuffer.append(TEXT_984);
d3730 1
a3730 1
    stringBuffer.append(TEXT_985);
d3732 1
a3732 1
    stringBuffer.append(TEXT_986);
d3736 1
a3736 1
    stringBuffer.append(TEXT_987);
d3740 1
a3740 1
    stringBuffer.append(TEXT_988);
d3742 1
a3742 1
    stringBuffer.append(TEXT_989);
d3744 1
a3744 1
    stringBuffer.append(TEXT_990);
d3746 1
a3746 1
    stringBuffer.append(TEXT_991);
d3748 1
a3748 1
    stringBuffer.append(TEXT_992);
d3750 1
a3750 1
    stringBuffer.append(TEXT_993);
d3754 1
a3754 1
    stringBuffer.append(TEXT_994);
d3758 1
a3758 1
    stringBuffer.append(TEXT_995);
d3760 1
a3760 1
    stringBuffer.append(TEXT_996);
d3762 1
a3762 1
    stringBuffer.append(TEXT_997);
d3764 1
a3764 1
    stringBuffer.append(TEXT_998);
d3766 1
a3766 1
    stringBuffer.append(TEXT_999);
d3768 1
a3768 1
    stringBuffer.append(TEXT_1000);
d3770 1
a3770 1
    stringBuffer.append(TEXT_1001);
d3772 1
a3772 1
    stringBuffer.append(TEXT_1002);
d3774 1
a3774 1
    stringBuffer.append(TEXT_1003);
d3776 1
a3776 1
    stringBuffer.append(TEXT_1004);
d3778 1
a3778 1
    stringBuffer.append(TEXT_1005);
d3780 1
a3780 1
    stringBuffer.append(TEXT_1006);
d3782 1
a3782 1
    stringBuffer.append(TEXT_1007);
d3784 1
a3784 1
    stringBuffer.append(TEXT_1008);
d3791 1
a3791 1
    stringBuffer.append(TEXT_1009);
d3794 1
a3794 1
    stringBuffer.append(TEXT_1010);
d3796 1
a3796 1
    stringBuffer.append(TEXT_1011);
d3798 1
a3798 1
    stringBuffer.append(TEXT_1012);
d3800 1
a3800 1
    stringBuffer.append(TEXT_1013);
d3802 1
a3802 1
    stringBuffer.append(TEXT_1014);
d3804 1
a3804 1
    stringBuffer.append(TEXT_1015);
d3806 1
a3806 1
    stringBuffer.append(TEXT_1016);
d3808 1
a3808 1
    stringBuffer.append(TEXT_1017);
d3812 1
a3812 1
    stringBuffer.append(TEXT_1018);
d3815 1
a3815 1
    stringBuffer.append(TEXT_1019);
d3817 1
a3817 1
    stringBuffer.append(TEXT_1020);
d3819 1
a3819 1
    stringBuffer.append(TEXT_1021);
d3821 1
a3821 1
    stringBuffer.append(TEXT_1022);
d3823 1
a3823 1
    stringBuffer.append(TEXT_1023);
d3825 1
a3825 1
    stringBuffer.append(TEXT_1024);
d3829 1
a3829 1
    stringBuffer.append(TEXT_1025);
d3831 1
a3831 1
    stringBuffer.append(TEXT_1026);
d3833 1
a3833 1
    stringBuffer.append(TEXT_1027);
d3840 1
a3840 1
    stringBuffer.append(TEXT_1028);
d3844 1
a3844 1
    stringBuffer.append(TEXT_1029);
d3848 1
a3848 1
    stringBuffer.append(TEXT_1030);
d3852 2
a3853 2
    stringBuffer.append(TEXT_1031);
    stringBuffer.append(TEXT_1032);
d3855 1
a3855 1
    stringBuffer.append(TEXT_1033);
d3857 1
a3857 1
    stringBuffer.append(TEXT_1034);
d3859 1
a3859 1
    stringBuffer.append(TEXT_1035);
d3861 1
a3861 1
    stringBuffer.append(TEXT_1036);
d3863 1
a3863 1
    stringBuffer.append(TEXT_1037);
d3865 1
a3865 1
    stringBuffer.append(TEXT_1038);
d3867 1
a3867 1
    stringBuffer.append(TEXT_1039);
d3869 1
a3869 1
    stringBuffer.append(TEXT_1040);
d3871 1
a3871 1
    stringBuffer.append(TEXT_1041);
d3873 1
a3873 1
    stringBuffer.append(TEXT_1042);
d3875 1
a3875 1
    stringBuffer.append(TEXT_1043);
d3879 3
a3881 3
    stringBuffer.append(TEXT_1044);
    stringBuffer.append(TEXT_1045);
    stringBuffer.append(TEXT_1046);
d3883 1
a3883 1
    stringBuffer.append(TEXT_1047);
d3885 1
a3885 1
    stringBuffer.append(TEXT_1048);
d3889 1
a3889 1
    stringBuffer.append(TEXT_1049);
d3891 1
a3891 1
    stringBuffer.append(TEXT_1050);
d3893 1
a3893 1
    stringBuffer.append(TEXT_1051);
d3895 1
a3895 1
    stringBuffer.append(TEXT_1052);
d3897 1
a3897 1
    stringBuffer.append(TEXT_1053);
d3899 1
a3899 1
    stringBuffer.append(TEXT_1054);
d3901 1
a3901 1
    stringBuffer.append(TEXT_1055);
d3903 1
a3903 1
    stringBuffer.append(TEXT_1056);
d3905 1
a3905 1
    stringBuffer.append(TEXT_1057);
d3907 1
a3907 1
    stringBuffer.append(TEXT_1058);
d3911 1
a3911 1
    stringBuffer.append(TEXT_1059);
d3920 1
a3920 1
    stringBuffer.append(TEXT_1060);
d3922 1
a3922 1
    stringBuffer.append(TEXT_1061);
d3924 1
a3924 1
    stringBuffer.append(TEXT_1062);
d3935 1
a3935 1
    stringBuffer.append(TEXT_1063);
d3937 1
a3937 1
    stringBuffer.append(TEXT_1064);
d3939 1
a3939 1
    stringBuffer.append(TEXT_1065);
d3947 1
a3947 1
    stringBuffer.append(TEXT_1066);
d3949 1
a3949 1
    stringBuffer.append(TEXT_1067);
d3951 1
a3951 1
    stringBuffer.append(TEXT_1068);
d3953 1
a3953 1
    stringBuffer.append(TEXT_1069);
d3955 1
a3955 1
    stringBuffer.append(TEXT_1070);
d3957 1
a3957 1
    stringBuffer.append(TEXT_1071);
d3959 1
a3959 1
    stringBuffer.append(TEXT_1072);
d3961 1
a3961 1
    stringBuffer.append(TEXT_1073);
d3963 1
a3963 1
    stringBuffer.append(TEXT_1074);
d3965 1
a3965 1
    stringBuffer.append(TEXT_1075);
d3967 1
a3967 1
    stringBuffer.append(TEXT_1076);
d3972 1
a3972 1
    stringBuffer.append(TEXT_1077);
d3974 1
a3974 1
    stringBuffer.append(TEXT_1078);
d3982 1
a3982 1
    stringBuffer.append(TEXT_1079);
d3984 1
a3984 1
    stringBuffer.append(TEXT_1080);
d3988 1
a3988 1
    stringBuffer.append(TEXT_1081);
d3990 1
a3990 1
    stringBuffer.append(TEXT_1082);
@


1.40
log
@Ensure unselectability of the inner auxiliary edit parts by more standard GEF means (isSelectable() returns false instead of using EditPolicy with getHost() delegation)
@
text
@d70 1
a70 1
  protected final String TEXT_49 = "\t\tinstallEditPolicy(";
d72 29
a100 29
  protected final String TEXT_51 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_52 = " createDeleteCommand(";
  protected final String TEXT_53 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_54 = " editingDomain = ";
  protected final String TEXT_55 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_56 = " cc = new ";
  protected final String TEXT_57 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_58 = "((";
  protected final String TEXT_59 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_60 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_61 = " editingDomain) {";
  protected final String TEXT_62 = NL + "\t\t\t\t";
  protected final String TEXT_63 = " result = new ";
  protected final String TEXT_64 = "();";
  protected final String TEXT_65 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_66 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_67 = ".eINSTANCE.get";
  protected final String TEXT_68 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_69 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_70 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_71 = ".eINSTANCE.get";
  protected final String TEXT_72 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_73 = ".UNSET_VALUE));";
  protected final String TEXT_74 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_75 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_76 = ".eINSTANCE.get";
  protected final String TEXT_77 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_78 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_79 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
d102 72
a173 72
  protected final String TEXT_81 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_82 = ".UNSET_VALUE));";
  protected final String TEXT_83 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_84 = NL + "\t\t\t\treturn ";
  protected final String TEXT_85 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_86 = ".eINSTANCE.get";
  protected final String TEXT_87 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_88 = NL + "\t\t\t\treturn ";
  protected final String TEXT_89 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_90 = ".eINSTANCE.get";
  protected final String TEXT_91 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_92 = ".UNSET_VALUE);";
  protected final String TEXT_93 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_94 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_95 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_96 = "() {";
  protected final String TEXT_97 = NL;
  protected final String TEXT_98 = NL + "protected Command createAddCommand(final ";
  protected final String TEXT_99 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_100 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_101 = " childNode = (";
  protected final String TEXT_102 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_103 = " editingDomain = ";
  protected final String TEXT_104 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_105 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_106 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int visualID = ";
  protected final String TEXT_107 = ".getVisualID(childNode);" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_108 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_109 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_110 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_111 = NL + "\t\t\tcase ";
  protected final String TEXT_112 = ".VISUAL_ID:" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t";
  protected final String TEXT_113 = " result = new ";
  protected final String TEXT_114 = "();" + NL + "\t\t\t\t\t";
  protected final String TEXT_115 = " element = childNode.getElement();";
  protected final String TEXT_116 = NL + "\t\t\t\t\tswitch (visualID) {";
  protected final String TEXT_117 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_118 = ".VISUAL_ID:";
  protected final String TEXT_119 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_120 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_121 = ".eINSTANCE.get";
  protected final String TEXT_122 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_123 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_124 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_125 = ".eINSTANCE.get";
  protected final String TEXT_126 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_127 = ".UNSET_VALUE));";
  protected final String TEXT_128 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_129 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_130 = ".eINSTANCE.get";
  protected final String TEXT_131 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_132 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_133 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_134 = ".eINSTANCE.get";
  protected final String TEXT_135 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_136 = ".UNSET_VALUE));";
  protected final String TEXT_137 = NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_138 = NL + "\t\t\t\t\t}\t";
  protected final String TEXT_139 = NL;
  protected final String TEXT_140 = NL + "\t\tif (";
  protected final String TEXT_141 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_142 = NL + "\t\t}";
  protected final String TEXT_143 = NL + "\t\tif (";
  protected final String TEXT_144 = ".size() >= ";
  protected final String TEXT_145 = ".eINSTANCE.get";
  protected final String TEXT_146 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_147 = NL + "\t\t}";
  protected final String TEXT_148 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_149 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_150 = ".getElement(), ";
  protected final String TEXT_151 = ".eINSTANCE.get";
  protected final String TEXT_152 = "(), element));";
d175 108
a282 108
  protected final String TEXT_154 = NL + "\t\tif (";
  protected final String TEXT_155 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_156 = NL + "\t\t}";
  protected final String TEXT_157 = NL + "\t\tif (";
  protected final String TEXT_158 = ".size() >= ";
  protected final String TEXT_159 = ".eINSTANCE.get";
  protected final String TEXT_160 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_161 = NL + "\t\t}";
  protected final String TEXT_162 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_163 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_164 = ".getElement(), ";
  protected final String TEXT_165 = ".eINSTANCE.get";
  protected final String TEXT_166 = "(), element));";
  protected final String TEXT_167 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_168 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_169 = "(";
  protected final String TEXT_170 = "));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_171 = ".create(editingDomain, ";
  protected final String TEXT_172 = ", ";
  protected final String TEXT_173 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_174 = "(childNode, ";
  protected final String TEXT_175 = "null";
  protected final String TEXT_176 = "(";
  protected final String TEXT_177 = ") constraint";
  protected final String TEXT_178 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_179 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_180 = "(";
  protected final String TEXT_181 = ", element, ";
  protected final String TEXT_182 = "null";
  protected final String TEXT_183 = "((";
  protected final String TEXT_184 = ") constraint).getCopy().union(new ";
  protected final String TEXT_185 = "(";
  protected final String TEXT_186 = ", ";
  protected final String TEXT_187 = "))";
  protected final String TEXT_188 = ", ";
  protected final String TEXT_189 = ".INSTANCE));";
  protected final String TEXT_190 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_191 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_192 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_193 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_194 = NL;
  protected final String TEXT_195 = NL + "protected ";
  protected final String TEXT_196 = " getCloneCommand(";
  protected final String TEXT_197 = " request) {" + NL + "\t";
  protected final String TEXT_198 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_199 = " command = new ";
  protected final String TEXT_200 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_201 = " childPart;" + NL + "\t";
  protected final String TEXT_202 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_203 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_204 = " createCloneCommand(final ";
  protected final String TEXT_205 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_206 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_207 = " childNode = (";
  protected final String TEXT_208 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_209 = " editingDomain = ";
  protected final String TEXT_210 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_211 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_212 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_213 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_214 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_215 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_216 = NL + "\t\t\tcase ";
  protected final String TEXT_217 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_218 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_219 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_220 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_221 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_222 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_223 = NL;
  protected final String TEXT_224 = NL + "\t\tif (";
  protected final String TEXT_225 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_226 = NL + "\t\t}";
  protected final String TEXT_227 = NL + "\t\tif (";
  protected final String TEXT_228 = ".size() >= ";
  protected final String TEXT_229 = ".eINSTANCE.get";
  protected final String TEXT_230 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_231 = NL + "\t\t}";
  protected final String TEXT_232 = NL;
  protected final String TEXT_233 = NL + "\t\tif (";
  protected final String TEXT_234 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_235 = NL + "\t\t}";
  protected final String TEXT_236 = NL + "\t\tif (";
  protected final String TEXT_237 = ".size() >= ";
  protected final String TEXT_238 = ".eINSTANCE.get";
  protected final String TEXT_239 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_240 = NL + "\t\t}";
  protected final String TEXT_241 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_242 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_243 = " result = (";
  protected final String TEXT_244 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_245 = "();";
  protected final String TEXT_246 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_247 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_248 = ".getElement(), ";
  protected final String TEXT_249 = ".eINSTANCE.get";
  protected final String TEXT_250 = "(), result));";
  protected final String TEXT_251 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_252 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_253 = ".getElement(), ";
  protected final String TEXT_254 = ".eINSTANCE.get";
  protected final String TEXT_255 = "(), result));";
  protected final String TEXT_256 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_257 = "(";
  protected final String TEXT_258 = ", result, ";
  protected final String TEXT_259 = "null";
  protected final String TEXT_260 = "((";
  protected final String TEXT_261 = ") constraint).getCopy().union(new ";
d284 682
a965 682
  protected final String TEXT_263 = ", ";
  protected final String TEXT_264 = "))";
  protected final String TEXT_265 = ", ";
  protected final String TEXT_266 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_267 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_268 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_269 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_270 = NL + "\t\t\tprotected ";
  protected final String TEXT_271 = " getCreateCommand(";
  protected final String TEXT_272 = " request) {";
  protected final String TEXT_273 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_274 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_275 = " requestEx = (";
  protected final String TEXT_276 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_277 = " result = new ";
  protected final String TEXT_278 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_279 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_280 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_281 = "((View) getModel(), requestEx";
  protected final String TEXT_282 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_283 = ")getConstraintFor(request)";
  protected final String TEXT_284 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_285 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_286 = "(";
  protected final String TEXT_287 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_288 = NL + "\t\t\t\treturn ";
  protected final String TEXT_289 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_290 = NL + "\t\t\tprotected ";
  protected final String TEXT_291 = " createChangeConstraintCommand(final ";
  protected final String TEXT_292 = " request, final ";
  protected final String TEXT_293 = " child, Object constraint) {" + NL + "\t\t\t\tif (!isDirectChild(child)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_294 = ".INSTANCE;" + NL + "\t\t\t\t}";
  protected final String TEXT_295 = NL;
  protected final String TEXT_296 = "\t\t\t\tfinal ";
  protected final String TEXT_297 = " node = (";
  protected final String TEXT_298 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_299 = " emfCommand = new ";
  protected final String TEXT_300 = "(node, request, ((";
  protected final String TEXT_301 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_302 = "(";
  protected final String TEXT_303 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_304 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_305 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_306 = NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_307 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_308 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_309 = " createChangeConstraintCommand(";
  protected final String TEXT_310 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_311 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_312 = NL + "\t\t\tprotected ";
  protected final String TEXT_313 = " createChildEditPolicy(";
  protected final String TEXT_314 = " child) {" + NL + "\t\t\t\t";
  protected final String TEXT_315 = " result = child.getEditPolicy(";
  protected final String TEXT_316 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}";
  protected final String TEXT_317 = NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_318 = "() {" + NL + "\t\t\t\t\t\tpublic ";
  protected final String TEXT_319 = " getTargetEditPart(";
  protected final String TEXT_320 = " request) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_321 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_322 = ".this;" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t}";
  protected final String TEXT_323 = NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_324 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_325 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_326 = " getReconnectTargetCommand(";
  protected final String TEXT_327 = " request) {";
  protected final String TEXT_328 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_329 = ".INSTANCE;";
  protected final String TEXT_330 = NL + "\t\t\t\t";
  protected final String TEXT_331 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_332 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_333 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_334 = " edge = (";
  protected final String TEXT_335 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_336 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_337 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_338 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_339 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_340 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_341 = NL + "\t\t\t\tcase ";
  protected final String TEXT_342 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_343 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_344 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_345 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_346 = "(";
  protected final String TEXT_347 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_348 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_349 = " getReconnectSourceCommand(";
  protected final String TEXT_350 = " request) {";
  protected final String TEXT_351 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_352 = ".INSTANCE;";
  protected final String TEXT_353 = NL + "\t\t\t\t";
  protected final String TEXT_354 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_355 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_356 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_357 = " edge = (";
  protected final String TEXT_358 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_359 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_360 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_361 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_362 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_363 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_364 = NL + "\t\t\t\tcase ";
  protected final String TEXT_365 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_366 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_367 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_368 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_369 = "(";
  protected final String TEXT_370 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_371 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_372 = " getConnectionCreateCommand(";
  protected final String TEXT_373 = " request) {";
  protected final String TEXT_374 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_375 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_376 = " requestEx = (";
  protected final String TEXT_377 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_378 = " result = new ";
  protected final String TEXT_379 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_380 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_381 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_382 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_383 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (!result.canExecute()) {" + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_384 = " wrappedResult = new ";
  protected final String TEXT_385 = "(";
  protected final String TEXT_386 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_387 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_388 = " getConnectionCompleteCommand(";
  protected final String TEXT_389 = " request) {";
  protected final String TEXT_390 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_391 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_392 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_393 = " requestEx = (";
  protected final String TEXT_394 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_395 = " result = new ";
  protected final String TEXT_396 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_397 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_398 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_399 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_400 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_401 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_402 = "(";
  protected final String TEXT_403 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_404 = NL + "\t\t\t\treturn ";
  protected final String TEXT_405 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_406 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_407 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_408 = "());";
  protected final String TEXT_409 = NL;
  protected final String TEXT_410 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_411 = "\", new ";
  protected final String TEXT_412 = "()); //$NON-NLS-1$";
  protected final String TEXT_413 = NL;
  protected final String TEXT_414 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_415 = ".OPEN_ROLE";
  protected final String TEXT_416 = " + \"";
  protected final String TEXT_417 = "\" ";
  protected final String TEXT_418 = ", new ";
  protected final String TEXT_419 = "());";
  protected final String TEXT_420 = NL + "\t\tinstallEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());";
  protected final String TEXT_421 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_422 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_423 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_424 = " getPrimaryDragEditPolicy() {";
  protected final String TEXT_425 = NL + "\t\treturn new ";
  protected final String TEXT_426 = "();";
  protected final String TEXT_427 = NL + "\t\t";
  protected final String TEXT_428 = " result = new ";
  protected final String TEXT_429 = "();";
  protected final String TEXT_430 = NL + "\t\t";
  protected final String TEXT_431 = " result = new ";
  protected final String TEXT_432 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_433 = " createSelectionHandles() {" + NL + "\t\t\t\t";
  protected final String TEXT_434 = " result = super.createSelectionHandles();" + NL + "\t\t\t\tfor(";
  protected final String TEXT_435 = " it = getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_436 = " next = (";
  protected final String TEXT_437 = ") it.next();" + NL + "\t\t\t\t\t";
  protected final String TEXT_438 = " nextView = (";
  protected final String TEXT_439 = ") next.getModel();" + NL + "\t\t\t\t\tswitch (";
  protected final String TEXT_440 = ".getVisualID(nextView)) {";
  protected final String TEXT_441 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_442 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\tresult.addAll(((";
  protected final String TEXT_443 = ") next).createSelectionHandles());" + NL + "\t\t\t\t\t\tbreak;";
  protected final String TEXT_444 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_445 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_446 = ".NONE);";
  protected final String TEXT_447 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_448 = ".";
  protected final String TEXT_449 = " | ";
  protected final String TEXT_450 = ");";
  protected final String TEXT_451 = NL + "\t\treturn result;";
  protected final String TEXT_452 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_453 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_454 = " invisibleRectangle = new ";
  protected final String TEXT_455 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_456 = "());" + NL + "\t\t";
  protected final String TEXT_457 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_458 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_459 = NL + NL + "\t\t";
  protected final String TEXT_460 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tmyDecorationManager = createDecorationManager(decorationShape);" + NL + "\t\t\tinvisibleRectangle.add(decorationShape, 0);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_461 = " createDecorationManager(";
  protected final String TEXT_462 = " decorationShape) {" + NL + "\t\treturn new ";
  protected final String TEXT_463 = "(decorationShape);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_464 = " getDecorationManager() {" + NL + "\t\treturn myDecorationManager;" + NL + "\t}" + NL;
  protected final String TEXT_465 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_466 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_467 = " result = new ";
  protected final String TEXT_468 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_469 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_470 = " createNodeShape() {";
  protected final String TEXT_471 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_472 = "()";
  protected final String TEXT_473 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_474 = ";";
  protected final String TEXT_475 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_476 = ";";
  protected final String TEXT_477 = NL + "\t\t";
  protected final String TEXT_478 = " figure = new ";
  protected final String TEXT_479 = "();";
  protected final String TEXT_480 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_481 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_482 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_483 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_484 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_485 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_486 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_487 = " createDecorationPane() {" + NL + "\t\treturn new ";
  protected final String TEXT_488 = "();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_489 = " setupContentPane(";
  protected final String TEXT_490 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_491 = NL + "\t\t\t";
  protected final String TEXT_492 = " layout = new ";
  protected final String TEXT_493 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_494 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_495 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_496 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_497 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_498 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_499 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_500 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_501 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_502 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_503 = " childEditPart) {";
  protected final String TEXT_504 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_505 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_506 = ") childEditPart).";
  protected final String TEXT_507 = "(getPrimaryShape().";
  protected final String TEXT_508 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_509 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_510 = ") {" + NL + "\t\t\t";
  protected final String TEXT_511 = " pane = getPrimaryShape().";
  protected final String TEXT_512 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_513 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_514 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_515 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_516 = ") {" + NL + "\t\t\t";
  protected final String TEXT_517 = " pane = getPrimaryShape().";
  protected final String TEXT_518 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_519 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_520 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_521 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_522 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_523 = NL + "\t\tfor(";
  protected final String TEXT_524 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_525 = " nextChild = (";
  protected final String TEXT_526 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_527 = ".getVisualID(nextChild) == ";
  protected final String TEXT_528 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_529 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_530 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_531 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_532 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_533 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_534 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_535 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_536 = NL;
  protected final String TEXT_537 = "if (";
  protected final String TEXT_538 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_539 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_540 = " getLabelEditPart(";
  protected final String TEXT_541 = " req) {" + NL + "\t\t";
  protected final String TEXT_542 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_543 = " view = (";
  protected final String TEXT_544 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_545 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_546 = NL + "\t\t\t\tcase ";
  protected final String TEXT_547 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_548 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_549 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_550 = " childEditPart) {";
  protected final String TEXT_551 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_552 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_553 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_554 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_555 = " root = (";
  protected final String TEXT_556 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_557 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_558 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_559 = " childEditPart) {";
  protected final String TEXT_560 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_561 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_562 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_563 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_564 = " childEditPart, int index) {";
  protected final String TEXT_565 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_566 = " labelFigure = ((";
  protected final String TEXT_567 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_568 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_569 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_570 = " childFigure = ((";
  protected final String TEXT_571 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_572 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_573 = " childEditPart) {";
  protected final String TEXT_574 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_575 = " labelFigure = ((";
  protected final String TEXT_576 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_577 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_578 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_579 = " childFigure = ((";
  protected final String TEXT_580 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_581 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_582 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_583 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_584 = " childEditPart = (";
  protected final String TEXT_585 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_586 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_587 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_588 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_589 = ";" + NL + "\t\t";
  protected final String TEXT_590 = " bounds = (";
  protected final String TEXT_591 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_592 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_593 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_594 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_595 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_596 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_597 = " getSourceConnectionAnchor(";
  protected final String TEXT_598 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_599 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_600 = " getSourceConnectionAnchor(";
  protected final String TEXT_601 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_602 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_603 = "  getTargetConnectionAnchor(";
  protected final String TEXT_604 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_605 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_606 = "  getTargetConnectionAnchor(";
  protected final String TEXT_607 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_608 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_609 = NL + "\t\tif (";
  protected final String TEXT_610 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_611 = "(this);" + NL + "\t\t}";
  protected final String TEXT_612 = NL + "\t\tif (";
  protected final String TEXT_613 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_614 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_615 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_616 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_617 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_618 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_619 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_620 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_621 = NL;
  protected final String TEXT_622 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_623 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_624 = " domainModelEditDomain = ";
  protected final String TEXT_625 = ".getEditingDomain(";
  protected final String TEXT_626 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_627 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_628 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_629 = " {";
  protected final String TEXT_630 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_631 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_632 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_633 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_634 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_635 = " createFilter() {";
  protected final String TEXT_636 = NL + "\t\t\t";
  protected final String TEXT_637 = " filter = ";
  protected final String TEXT_638 = ".createFeatureFilter(";
  protected final String TEXT_639 = ".eINSTANCE.get";
  protected final String TEXT_640 = "());";
  protected final String TEXT_641 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_642 = ".createFeatureFilter(";
  protected final String TEXT_643 = ".eINSTANCE.get";
  protected final String TEXT_644 = "()));";
  protected final String TEXT_645 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_646 = ".createNotifierFilter(";
  protected final String TEXT_647 = ".getElement()));";
  protected final String TEXT_648 = NL + "\t\t\t";
  protected final String TEXT_649 = " filter = ";
  protected final String TEXT_650 = ".createNotifierFilter(";
  protected final String TEXT_651 = ".getElement());";
  protected final String TEXT_652 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_653 = NL + "\t\t\t";
  protected final String TEXT_654 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_655 = NL + "\t\t\t";
  protected final String TEXT_656 = " filter = ";
  protected final String TEXT_657 = ".NOT_TOUCH;";
  protected final String TEXT_658 = NL + "\t\t\treturn filter;";
  protected final String TEXT_659 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_660 = " getCreateNotationalElementCommand(";
  protected final String TEXT_661 = " descriptor) {";
  protected final String TEXT_662 = NL;
  protected final String TEXT_663 = "\t\t\t";
  protected final String TEXT_664 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_665 = NL + "\t\t\tcase ";
  protected final String TEXT_666 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_667 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_668 = "(";
  protected final String TEXT_669 = ", domainElement, ";
  protected final String TEXT_670 = "new ";
  protected final String TEXT_671 = "(0, 0, ";
  protected final String TEXT_672 = ", ";
  protected final String TEXT_673 = ")";
  protected final String TEXT_674 = NL + "null";
  protected final String TEXT_675 = ", ";
  protected final String TEXT_676 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_677 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_678 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_679 = " getSemanticChildNodes() {";
  protected final String TEXT_680 = NL;
  protected final String TEXT_681 = NL + "\treturn ";
  protected final String TEXT_682 = ".EMPTY_LIST;";
  protected final String TEXT_683 = NL + "\t";
  protected final String TEXT_684 = " result = new ";
  protected final String TEXT_685 = "();";
  protected final String TEXT_686 = NL + "\t";
  protected final String TEXT_687 = " viewObject = ";
  protected final String TEXT_688 = ";" + NL + "\t";
  protected final String TEXT_689 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_690 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_691 = NL + "\tfor(";
  protected final String TEXT_692 = " it = ";
  protected final String TEXT_693 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_694 = ") it.next();";
  protected final String TEXT_695 = NL + "\tnextValue = (";
  protected final String TEXT_696 = ")";
  protected final String TEXT_697 = ";";
  protected final String TEXT_698 = NL + "\tnodeVID = ";
  protected final String TEXT_699 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_700 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_701 = NL + "\tcase ";
  protected final String TEXT_702 = ".VISUAL_ID: {";
  protected final String TEXT_703 = NL + "\tif (";
  protected final String TEXT_704 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_705 = NL + "\t\tresult.add(new ";
  protected final String TEXT_706 = "(nextValue, nodeVID));";
  protected final String TEXT_707 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_708 = NL + "\t\t}";
  protected final String TEXT_709 = NL + "\t}";
  protected final String TEXT_710 = NL + "\t}";
  protected final String TEXT_711 = NL + "\treturn result;";
  protected final String TEXT_712 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_713 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_714 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_715 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_716 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_717 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_718 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_719 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_720 = " domainModelEditDomain = ";
  protected final String TEXT_721 = ".getEditingDomain(";
  protected final String TEXT_722 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_723 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_724 = NL;
  protected final String TEXT_725 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_726 = " domainModelEditDomain = ";
  protected final String TEXT_727 = ".getEditingDomain(";
  protected final String TEXT_728 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_729 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_730 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_731 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_732 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_733 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_734 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_735 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_736 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_737 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_738 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_739 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_740 = ".createEventTypeFilter(";
  protected final String TEXT_741 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_742 = ".createEventTypeFilter(";
  protected final String TEXT_743 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_744 = ".createEventTypeFilter(";
  protected final String TEXT_745 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_746 = ".createEventTypeFilter(";
  protected final String TEXT_747 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_748 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_749 = " createFilter() {";
  protected final String TEXT_750 = NL;
  protected final String TEXT_751 = NL + "\t\t\t";
  protected final String TEXT_752 = " filter = ";
  protected final String TEXT_753 = ".createFeatureFilter(";
  protected final String TEXT_754 = ".eINSTANCE.get";
  protected final String TEXT_755 = "());";
  protected final String TEXT_756 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_757 = ".createFeatureFilter(";
  protected final String TEXT_758 = ".eINSTANCE.get";
  protected final String TEXT_759 = "()));";
  protected final String TEXT_760 = NL;
  protected final String TEXT_761 = NL + "\t\t\t";
  protected final String TEXT_762 = " filter = ";
  protected final String TEXT_763 = ".createFeatureFilter(";
  protected final String TEXT_764 = ".eINSTANCE.get";
  protected final String TEXT_765 = "());";
  protected final String TEXT_766 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_767 = ".createFeatureFilter(";
  protected final String TEXT_768 = ".eINSTANCE.get";
  protected final String TEXT_769 = "()));";
  protected final String TEXT_770 = NL;
  protected final String TEXT_771 = NL + "\t\t\t";
  protected final String TEXT_772 = " filter = ";
  protected final String TEXT_773 = ".createFeatureFilter(";
  protected final String TEXT_774 = ".eINSTANCE.get";
  protected final String TEXT_775 = "());";
  protected final String TEXT_776 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_777 = ".createFeatureFilter(";
  protected final String TEXT_778 = ".eINSTANCE.get";
  protected final String TEXT_779 = "()));";
  protected final String TEXT_780 = NL;
  protected final String TEXT_781 = NL + "\t\t\t";
  protected final String TEXT_782 = " filter = ";
  protected final String TEXT_783 = ".createFeatureFilter(";
  protected final String TEXT_784 = ".eINSTANCE.get";
  protected final String TEXT_785 = "());";
  protected final String TEXT_786 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_787 = ".createFeatureFilter(";
  protected final String TEXT_788 = ".eINSTANCE.get";
  protected final String TEXT_789 = "()));";
  protected final String TEXT_790 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_791 = NL + "\t\t\t";
  protected final String TEXT_792 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_793 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_794 = NL + "\t\t\t";
  protected final String TEXT_795 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_796 = NL + "\t\t\t";
  protected final String TEXT_797 = " filter = ";
  protected final String TEXT_798 = ".NOT_TOUCH;";
  protected final String TEXT_799 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_800 = " getCreateNotationalElementCommand(";
  protected final String TEXT_801 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_802 = " linkDescriptor = (";
  protected final String TEXT_803 = ") descriptor;";
  protected final String TEXT_804 = NL;
  protected final String TEXT_805 = "\t\t\t";
  protected final String TEXT_806 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_807 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_808 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_809 = NL + "\t\t\tcase ";
  protected final String TEXT_810 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_811 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_812 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_813 = NL + "\t\t\tcase ";
  protected final String TEXT_814 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_815 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_816 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_817 = "(";
  protected final String TEXT_818 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_819 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_820 = " getSemanticChildLinks() {";
  protected final String TEXT_821 = NL;
  protected final String TEXT_822 = "\t";
  protected final String TEXT_823 = " result = new ";
  protected final String TEXT_824 = "();";
  protected final String TEXT_825 = NL + "\t";
  protected final String TEXT_826 = " modelObject = ";
  protected final String TEXT_827 = ".getElement();" + NL + "\t";
  protected final String TEXT_828 = " nextValue;";
  protected final String TEXT_829 = NL + "\tint linkVID;";
  protected final String TEXT_830 = NL + "\tfor(";
  protected final String TEXT_831 = " it = ";
  protected final String TEXT_832 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_833 = ") it.next();";
  protected final String TEXT_834 = NL + "\tnextValue = (";
  protected final String TEXT_835 = ")";
  protected final String TEXT_836 = ";";
  protected final String TEXT_837 = NL + "\tlinkVID = ";
  protected final String TEXT_838 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_839 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_840 = NL + "\tcase ";
  protected final String TEXT_841 = ".VISUAL_ID: {";
  protected final String TEXT_842 = NL + "\tif (";
  protected final String TEXT_843 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_844 = NL + "\t\t";
  protected final String TEXT_845 = " source = (";
  protected final String TEXT_846 = ")";
  protected final String TEXT_847 = ";";
  protected final String TEXT_848 = NL + "\t\t";
  protected final String TEXT_849 = " source = ";
  protected final String TEXT_850 = ".getElement();";
  protected final String TEXT_851 = NL + "\t\t";
  protected final String TEXT_852 = " target = (";
  protected final String TEXT_853 = ")";
  protected final String TEXT_854 = ";";
  protected final String TEXT_855 = NL + "\t\t";
  protected final String TEXT_856 = " target = ";
  protected final String TEXT_857 = ".getElement();";
  protected final String TEXT_858 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_859 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_860 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_861 = NL + "\t}";
  protected final String TEXT_862 = NL + "\t}";
  protected final String TEXT_863 = NL + "\t}";
  protected final String TEXT_864 = NL + "\tfor(";
  protected final String TEXT_865 = " it = ";
  protected final String TEXT_866 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_867 = ") it.next();";
  protected final String TEXT_868 = NL + "\tnextValue = (";
  protected final String TEXT_869 = ")";
  protected final String TEXT_870 = ";";
  protected final String TEXT_871 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_872 = NL + "\t\tresult.add(new ";
  protected final String TEXT_873 = "(modelObject, nextValue, null, ";
  protected final String TEXT_874 = ".VISUAL_ID));";
  protected final String TEXT_875 = NL + "\t}";
  protected final String TEXT_876 = NL + "\t}";
  protected final String TEXT_877 = NL + "\treturn result;";
  protected final String TEXT_878 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_879 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_880 = " result = new ";
  protected final String TEXT_881 = "();" + NL + "\t\t\t";
  protected final String TEXT_882 = " allLinks = ";
  protected final String TEXT_883 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_884 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_885 = " next = (";
  protected final String TEXT_886 = ") it.next();";
  protected final String TEXT_887 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_888 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_889 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_890 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_891 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_892 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_893 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_894 = ".VISUAL_ID:";
  protected final String TEXT_895 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_896 = NL + "\t\t\t\t} else {";
  protected final String TEXT_897 = NL + "\t\t\t\t}";
  protected final String TEXT_898 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_899 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_900 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_901 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_902 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_903 = ".VISUAL_ID:";
  protected final String TEXT_904 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_905 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_906 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_907 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_908 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_909 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_910 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_911 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_912 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_913 = " domainModelEditDomain = ";
  protected final String TEXT_914 = ".getEditingDomain(";
  protected final String TEXT_915 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_916 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_917 = NL;
  protected final String TEXT_918 = NL;
  protected final String TEXT_919 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_920 = " domainModelRefresher = new ";
  protected final String TEXT_921 = "(this);" + NL;
  protected final String TEXT_922 = NL;
  protected final String TEXT_923 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_924 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_925 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_926 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_927 = NL;
  protected final String TEXT_928 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_929 = NL + "\t\t";
  protected final String TEXT_930 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_931 = ") ";
  protected final String TEXT_932 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_933 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_934 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_935 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_936 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_937 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_938 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_939 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_940 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_941 = "\t" + NL + "\t}";
  protected final String TEXT_942 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_943 = " createdFont;";
  protected final String TEXT_944 = "\t" + NL;
d967 137
a1103 216
  protected final String TEXT_946 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_947 = " style = (";
  protected final String TEXT_948 = ")  ";
  protected final String TEXT_949 = ".getStyle(";
  protected final String TEXT_950 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_951 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_952 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_953 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_954 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_955 = " style = (";
  protected final String TEXT_956 = ")  ";
  protected final String TEXT_957 = ".getStyle(";
  protected final String TEXT_958 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_959 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_960 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_961 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_962 = " createdBackgroundColor;" + NL;
  protected final String TEXT_963 = NL;
  protected final String TEXT_964 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_965 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_966 = " feature, ";
  protected final String TEXT_967 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_968 = "();";
  protected final String TEXT_969 = NL;
  protected final String TEXT_970 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_971 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_972 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_973 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_974 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_975 = NL;
  protected final String TEXT_976 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_977 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_978 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_979 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_980 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_981 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_982 = NL;
  protected final String TEXT_983 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_984 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_985 = NL;
  protected final String TEXT_986 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_987 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_988 = NL;
  protected final String TEXT_989 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_990 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_991 = NL;
  protected final String TEXT_992 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_993 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_994 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_995 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_996 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_997 = NL;
  protected final String TEXT_998 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_999 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_1000 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_1001 = NL;
  protected final String TEXT_1002 = NL;
  protected final String TEXT_1003 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1004 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_1005 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_1006 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_1007 = NL;
  protected final String TEXT_1008 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1009 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_1010 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_1011 = " createDeleteCommand(";
  protected final String TEXT_1012 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_1013 = " editingDomain = ";
  protected final String TEXT_1014 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_1015 = " cc = new ";
  protected final String TEXT_1016 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_1017 = "((";
  protected final String TEXT_1018 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_1019 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_1020 = " editingDomain) {";
  protected final String TEXT_1021 = NL + "\t\t\t\t";
  protected final String TEXT_1022 = " result = new ";
  protected final String TEXT_1023 = "();";
  protected final String TEXT_1024 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1025 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1026 = ".eINSTANCE.get";
  protected final String TEXT_1027 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1028 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1029 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1030 = ".eINSTANCE.get";
  protected final String TEXT_1031 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1032 = ".UNSET_VALUE));";
  protected final String TEXT_1033 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1034 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1035 = ".eINSTANCE.get";
  protected final String TEXT_1036 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1037 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1038 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1039 = ".eINSTANCE.get";
  protected final String TEXT_1040 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1041 = ".UNSET_VALUE));";
  protected final String TEXT_1042 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1043 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1044 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1045 = ".eINSTANCE.get";
  protected final String TEXT_1046 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_1047 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1048 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1049 = ".eINSTANCE.get";
  protected final String TEXT_1050 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1051 = ".UNSET_VALUE);";
  protected final String TEXT_1052 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1053 = NL;
  protected final String TEXT_1054 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1055 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1056 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1057 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1058 = NL;
  protected final String TEXT_1059 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1060 = " getDirectEditCommand(";
  protected final String TEXT_1061 = " request) {";
  protected final String TEXT_1062 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_1063 = ".INSTANCE;";
  protected final String TEXT_1064 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1065 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_1066 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_1067 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1068 = "(";
  protected final String TEXT_1069 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1070 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1071 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1072 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1073 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1074 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1075 = " editingDomain = ";
  protected final String TEXT_1076 = ".getEditingDomain(";
  protected final String TEXT_1077 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1078 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1079 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1080 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1081 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1082 = " createDomainModelCommand(";
  protected final String TEXT_1083 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1084 = " element = ";
  protected final String TEXT_1085 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1086 = " result = new ";
  protected final String TEXT_1087 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1088 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1089 = " ";
  protected final String TEXT_1090 = "feature = (";
  protected final String TEXT_1091 = ") ";
  protected final String TEXT_1092 = ".eINSTANCE.get";
  protected final String TEXT_1093 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1094 = ".parseValue(feature, values[";
  protected final String TEXT_1095 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1096 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1097 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1098 = " ";
  protected final String TEXT_1099 = "values = new ";
  protected final String TEXT_1100 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1101 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1102 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1103 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1104 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1105 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_1106 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_1107 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1108 = NL + "\t\t\t\t});";
  protected final String TEXT_1109 = NL + "\t\t}" + NL;
  protected final String TEXT_1110 = NL;
  protected final String TEXT_1111 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1112 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1113 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1114 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1115 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1116 = "(this, ";
  protected final String TEXT_1117 = ".class, new ";
  protected final String TEXT_1118 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1119 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1120 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1121 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1122 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1123 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1124 = NL;
  protected final String TEXT_1125 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1126 = " domainModelRefresher = new ";
  protected final String TEXT_1127 = "(this);" + NL;
  protected final String TEXT_1128 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1129 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1130 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1131 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1132 = " nextChild = (";
  protected final String TEXT_1133 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1134 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1135 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1136 = ") ";
  protected final String TEXT_1137 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1138 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1139 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1140 = ".eINSTANCE.get";
  protected final String TEXT_1141 = "(), labelRefresher);";
  protected final String TEXT_1142 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1143 = ".eINSTANCE.get";
  protected final String TEXT_1144 = "(), labelRefresher);";
  protected final String TEXT_1145 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1146 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1147 = " result = new ";
  protected final String TEXT_1148 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1149 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1150 = " next = (";
  protected final String TEXT_1151 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_1152 = " style = (";
  protected final String TEXT_1153 = ") next.getStyle(";
  protected final String TEXT_1154 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1155 = ".getVisualID(next)) {";
  protected final String TEXT_1156 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1157 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1158 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1159 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1160 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1161 = NL;
d1444 9
d1456 1
a1456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
a1457 106
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.RemoveNotationalElementCommand"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_61);
    
{
TypeModelFacet facet = genNode.getModelFacet();
GenFeature childFeature = facet.getChildMetaFeature();
GenFeature containmentFeature = facet.getContainmentMetaFeature();
if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {

    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_64);
    
	if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_68);
    
	} else {

    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_73);
    
	}

    
	if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_77);
    
	} else {

    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_82);
    
	}

    stringBuffer.append(TEXT_83);
    
} else {
	if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_87);
    
	} else {

    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_92);
a1458 1
	}
a1460 4
    stringBuffer.append(TEXT_93);
    
}	/*restrict local vars used in component edit policy*/

d1469 1
a1469 1
    stringBuffer.append(TEXT_94);
d1471 1
a1471 1
    stringBuffer.append(TEXT_95);
d1473 1
a1473 1
    stringBuffer.append(TEXT_96);
d1480 1
a1480 1
    stringBuffer.append(TEXT_97);
d1484 3
a1486 1
    stringBuffer.append(TEXT_98);
d1488 1
a1488 1
    stringBuffer.append(TEXT_99);
d1490 1
a1490 1
    stringBuffer.append(TEXT_100);
d1492 1
a1492 1
    stringBuffer.append(TEXT_101);
d1494 1
a1494 1
    stringBuffer.append(TEXT_102);
d1496 1
a1496 1
    stringBuffer.append(TEXT_103);
d1498 1
a1498 1
    stringBuffer.append(TEXT_104);
d1500 1
a1500 1
    stringBuffer.append(TEXT_105);
d1502 1
a1502 1
    stringBuffer.append(TEXT_106);
d1504 1
a1504 1
    stringBuffer.append(TEXT_107);
d1506 1
a1506 1
    stringBuffer.append(TEXT_108);
d1508 1
a1508 1
    stringBuffer.append(TEXT_109);
d1510 1
a1510 1
    stringBuffer.append(TEXT_110);
d1515 1
a1515 1
    stringBuffer.append(TEXT_111);
d1517 1
a1517 1
    stringBuffer.append(TEXT_112);
d1519 1
a1519 1
    stringBuffer.append(TEXT_113);
d1521 1
a1521 1
    stringBuffer.append(TEXT_114);
d1523 1
a1523 1
    stringBuffer.append(TEXT_115);
d1529 1
a1529 1
    stringBuffer.append(TEXT_116);
d1538 1
a1538 1
    stringBuffer.append(TEXT_117);
d1540 1
a1540 1
    stringBuffer.append(TEXT_118);
d1546 1
a1546 1
    stringBuffer.append(TEXT_119);
d1548 1
a1548 1
    stringBuffer.append(TEXT_120);
d1550 1
a1550 1
    stringBuffer.append(TEXT_121);
d1552 1
a1552 1
    stringBuffer.append(TEXT_122);
d1556 1
a1556 1
    stringBuffer.append(TEXT_123);
d1558 1
a1558 1
    stringBuffer.append(TEXT_124);
d1560 1
a1560 1
    stringBuffer.append(TEXT_125);
d1562 1
a1562 1
    stringBuffer.append(TEXT_126);
d1564 1
a1564 1
    stringBuffer.append(TEXT_127);
d1570 1
a1570 1
    stringBuffer.append(TEXT_128);
d1572 1
a1572 1
    stringBuffer.append(TEXT_129);
d1574 1
a1574 1
    stringBuffer.append(TEXT_130);
d1576 1
a1576 1
    stringBuffer.append(TEXT_131);
d1580 1
a1580 1
    stringBuffer.append(TEXT_132);
d1582 1
a1582 1
    stringBuffer.append(TEXT_133);
d1584 1
a1584 1
    stringBuffer.append(TEXT_134);
d1586 1
a1586 1
    stringBuffer.append(TEXT_135);
d1588 1
a1588 1
    stringBuffer.append(TEXT_136);
d1593 1
a1593 1
    stringBuffer.append(TEXT_137);
d1599 1
a1599 1
    stringBuffer.append(TEXT_138);
d1612 1
a1612 1
    stringBuffer.append(TEXT_139);
d1617 1
a1617 1
    stringBuffer.append(TEXT_140);
d1619 1
a1619 1
    stringBuffer.append(TEXT_141);
d1621 1
a1621 1
    stringBuffer.append(TEXT_142);
d1626 1
a1626 1
    stringBuffer.append(TEXT_143);
d1628 1
a1628 1
    stringBuffer.append(TEXT_144);
d1630 1
a1630 1
    stringBuffer.append(TEXT_145);
d1632 1
a1632 1
    stringBuffer.append(TEXT_146);
d1634 1
a1634 1
    stringBuffer.append(TEXT_147);
d1639 1
a1639 1
    stringBuffer.append(TEXT_148);
d1641 1
a1641 1
    stringBuffer.append(TEXT_149);
d1643 1
a1643 1
    stringBuffer.append(TEXT_150);
d1645 1
a1645 1
    stringBuffer.append(TEXT_151);
d1647 1
a1647 1
    stringBuffer.append(TEXT_152);
d1656 1
a1656 1
    stringBuffer.append(TEXT_153);
d1661 1
a1661 1
    stringBuffer.append(TEXT_154);
d1663 1
a1663 1
    stringBuffer.append(TEXT_155);
d1665 1
a1665 1
    stringBuffer.append(TEXT_156);
d1670 1
a1670 1
    stringBuffer.append(TEXT_157);
d1672 1
a1672 1
    stringBuffer.append(TEXT_158);
d1674 1
a1674 1
    stringBuffer.append(TEXT_159);
d1676 1
a1676 1
    stringBuffer.append(TEXT_160);
d1678 1
a1678 1
    stringBuffer.append(TEXT_161);
d1686 1
a1686 1
    stringBuffer.append(TEXT_162);
d1688 1
a1688 1
    stringBuffer.append(TEXT_163);
d1690 1
a1690 1
    stringBuffer.append(TEXT_164);
d1692 1
a1692 1
    stringBuffer.append(TEXT_165);
d1694 1
a1694 1
    stringBuffer.append(TEXT_166);
d1698 1
a1698 1
    stringBuffer.append(TEXT_167);
d1700 1
a1700 1
    stringBuffer.append(TEXT_168);
d1702 1
a1702 1
    stringBuffer.append(TEXT_169);
d1704 1
a1704 1
    stringBuffer.append(TEXT_170);
d1706 1
a1706 1
    stringBuffer.append(TEXT_171);
d1708 1
a1708 1
    stringBuffer.append(TEXT_172);
d1710 1
a1710 1
    stringBuffer.append(TEXT_173);
d1712 1
a1712 1
    stringBuffer.append(TEXT_174);
d1714 1
a1714 1
    stringBuffer.append(TEXT_175);
d1716 1
a1716 1
    stringBuffer.append(TEXT_176);
d1718 1
a1718 1
    stringBuffer.append(TEXT_177);
d1720 1
a1720 1
    stringBuffer.append(TEXT_178);
d1731 1
a1731 1
    stringBuffer.append(TEXT_179);
d1733 1
a1733 1
    stringBuffer.append(TEXT_180);
d1735 1
a1735 1
    stringBuffer.append(TEXT_181);
d1737 1
a1737 1
    stringBuffer.append(TEXT_182);
d1739 1
a1739 1
    stringBuffer.append(TEXT_183);
d1741 1
a1741 1
    stringBuffer.append(TEXT_184);
d1743 1
a1743 1
    stringBuffer.append(TEXT_185);
d1745 1
a1745 1
    stringBuffer.append(TEXT_186);
d1747 1
a1747 1
    stringBuffer.append(TEXT_187);
d1749 1
a1749 1
    stringBuffer.append(TEXT_188);
d1751 1
a1751 1
    stringBuffer.append(TEXT_189);
d1755 1
a1755 1
    stringBuffer.append(TEXT_190);
d1759 1
a1759 1
    stringBuffer.append(TEXT_191);
d1761 1
a1761 1
    stringBuffer.append(TEXT_192);
d1763 1
a1763 1
    stringBuffer.append(TEXT_193);
d1767 1
a1767 1
    stringBuffer.append(TEXT_194);
d1774 1
a1774 1
    stringBuffer.append(TEXT_195);
d1776 1
a1776 1
    stringBuffer.append(TEXT_196);
d1778 1
a1778 1
    stringBuffer.append(TEXT_197);
d1780 1
a1780 1
    stringBuffer.append(TEXT_198);
d1782 1
a1782 1
    stringBuffer.append(TEXT_199);
d1784 1
a1784 1
    stringBuffer.append(TEXT_200);
d1786 1
a1786 1
    stringBuffer.append(TEXT_201);
d1788 1
a1788 1
    stringBuffer.append(TEXT_202);
d1790 1
a1790 1
    stringBuffer.append(TEXT_203);
d1792 1
a1792 1
    stringBuffer.append(TEXT_204);
d1794 1
a1794 1
    stringBuffer.append(TEXT_205);
d1796 1
a1796 1
    stringBuffer.append(TEXT_206);
d1798 1
a1798 1
    stringBuffer.append(TEXT_207);
d1800 1
a1800 1
    stringBuffer.append(TEXT_208);
d1802 1
a1802 1
    stringBuffer.append(TEXT_209);
d1804 1
a1804 1
    stringBuffer.append(TEXT_210);
d1806 1
a1806 1
    stringBuffer.append(TEXT_211);
d1808 1
a1808 1
    stringBuffer.append(TEXT_212);
d1810 1
a1810 1
    stringBuffer.append(TEXT_213);
d1812 1
a1812 1
    stringBuffer.append(TEXT_214);
d1814 1
a1814 1
    stringBuffer.append(TEXT_215);
d1822 1
a1822 1
    stringBuffer.append(TEXT_216);
d1824 1
a1824 1
    stringBuffer.append(TEXT_217);
d1826 1
a1826 1
    stringBuffer.append(TEXT_218);
d1828 1
a1828 1
    stringBuffer.append(TEXT_219);
d1830 1
a1830 1
    stringBuffer.append(TEXT_220);
d1832 1
a1832 1
    stringBuffer.append(TEXT_221);
d1834 1
a1834 1
    stringBuffer.append(TEXT_222);
d1842 1
a1842 1
    stringBuffer.append(TEXT_223);
d1847 1
a1847 1
    stringBuffer.append(TEXT_224);
d1849 1
a1849 1
    stringBuffer.append(TEXT_225);
d1851 1
a1851 1
    stringBuffer.append(TEXT_226);
d1856 1
a1856 1
    stringBuffer.append(TEXT_227);
d1858 1
a1858 1
    stringBuffer.append(TEXT_228);
d1860 1
a1860 1
    stringBuffer.append(TEXT_229);
d1862 1
a1862 1
    stringBuffer.append(TEXT_230);
d1864 1
a1864 1
    stringBuffer.append(TEXT_231);
d1877 1
a1877 1
    stringBuffer.append(TEXT_232);
d1882 1
a1882 1
    stringBuffer.append(TEXT_233);
d1884 1
a1884 1
    stringBuffer.append(TEXT_234);
d1886 1
a1886 1
    stringBuffer.append(TEXT_235);
d1891 1
a1891 1
    stringBuffer.append(TEXT_236);
d1893 1
a1893 1
    stringBuffer.append(TEXT_237);
d1895 1
a1895 1
    stringBuffer.append(TEXT_238);
d1897 1
a1897 1
    stringBuffer.append(TEXT_239);
d1899 1
a1899 1
    stringBuffer.append(TEXT_240);
d1907 1
a1907 1
    stringBuffer.append(TEXT_241);
d1909 1
a1909 1
    stringBuffer.append(TEXT_242);
d1911 1
a1911 1
    stringBuffer.append(TEXT_243);
d1913 1
a1913 1
    stringBuffer.append(TEXT_244);
d1915 1
a1915 1
    stringBuffer.append(TEXT_245);
d1919 1
a1919 1
    stringBuffer.append(TEXT_246);
d1921 1
a1921 1
    stringBuffer.append(TEXT_247);
d1923 1
a1923 1
    stringBuffer.append(TEXT_248);
d1925 1
a1925 1
    stringBuffer.append(TEXT_249);
d1927 1
a1927 1
    stringBuffer.append(TEXT_250);
d1931 1
a1931 1
    stringBuffer.append(TEXT_251);
d1933 1
a1933 1
    stringBuffer.append(TEXT_252);
d1935 1
a1935 1
    stringBuffer.append(TEXT_253);
d1937 1
a1937 1
    stringBuffer.append(TEXT_254);
d1939 1
a1939 1
    stringBuffer.append(TEXT_255);
d1950 1
a1950 1
    stringBuffer.append(TEXT_256);
d1952 1
a1952 1
    stringBuffer.append(TEXT_257);
d1954 1
a1954 1
    stringBuffer.append(TEXT_258);
d1956 1
a1956 1
    stringBuffer.append(TEXT_259);
d1958 1
a1958 1
    stringBuffer.append(TEXT_260);
d1960 1
a1960 1
    stringBuffer.append(TEXT_261);
d1962 1
a1962 1
    stringBuffer.append(TEXT_262);
d1964 1
a1964 1
    stringBuffer.append(TEXT_263);
d1966 1
a1966 1
    stringBuffer.append(TEXT_264);
d1968 1
a1968 1
    stringBuffer.append(TEXT_265);
d1970 1
a1970 1
    stringBuffer.append(TEXT_266);
d1975 1
a1975 1
    stringBuffer.append(TEXT_267);
d1977 1
a1977 1
    stringBuffer.append(TEXT_268);
d1979 1
a1979 1
    stringBuffer.append(TEXT_269);
d1986 1
a1986 1
    stringBuffer.append(TEXT_270);
d1988 1
a1988 1
    stringBuffer.append(TEXT_271);
d1990 1
a1990 1
    stringBuffer.append(TEXT_272);
d1994 1
a1994 1
    stringBuffer.append(TEXT_273);
d1996 1
a1996 1
    stringBuffer.append(TEXT_274);
d1998 1
a1998 1
    stringBuffer.append(TEXT_275);
d2000 3
a2002 1
    stringBuffer.append(TEXT_276);
d2004 1
a2004 1
    stringBuffer.append(TEXT_277);
d2006 1
a2006 1
    stringBuffer.append(TEXT_278);
d2011 1
a2011 1
    stringBuffer.append(TEXT_279);
d2013 1
a2013 1
    stringBuffer.append(TEXT_280);
d2015 1
a2015 1
    stringBuffer.append(TEXT_281);
d2017 1
a2017 1
    stringBuffer.append(TEXT_282);
d2019 1
a2019 1
    stringBuffer.append(TEXT_283);
d2021 1
a2021 1
    stringBuffer.append(TEXT_284);
d2025 1
a2025 1
    stringBuffer.append(TEXT_285);
d2027 1
a2027 1
    stringBuffer.append(TEXT_286);
d2029 1
a2029 1
    stringBuffer.append(TEXT_287);
d2033 1
a2033 1
    stringBuffer.append(TEXT_288);
d2035 1
a2035 1
    stringBuffer.append(TEXT_289);
d2039 1
a2039 1
    stringBuffer.append(TEXT_290);
d2041 1
a2041 1
    stringBuffer.append(TEXT_291);
d2043 1
a2043 1
    stringBuffer.append(TEXT_292);
d2045 1
a2045 1
    stringBuffer.append(TEXT_293);
d2047 3
a2049 3
    stringBuffer.append(TEXT_294);
    stringBuffer.append(TEXT_295);
    stringBuffer.append(TEXT_296);
d2051 1
a2051 1
    stringBuffer.append(TEXT_297);
d2053 1
a2053 1
    stringBuffer.append(TEXT_298);
d2055 1
a2055 1
    stringBuffer.append(TEXT_299);
d2057 1
a2057 1
    stringBuffer.append(TEXT_300);
d2059 1
a2059 1
    stringBuffer.append(TEXT_301);
d2061 1
a2061 1
    stringBuffer.append(TEXT_302);
d2063 3
a2065 1
    stringBuffer.append(TEXT_303);
d2067 1
a2067 1
    stringBuffer.append(TEXT_304);
d2069 1
a2069 1
    stringBuffer.append(TEXT_305);
d2073 1
a2073 1
    stringBuffer.append(TEXT_306);
d2075 1
a2075 1
    stringBuffer.append(TEXT_307);
d2077 1
a2077 1
    stringBuffer.append(TEXT_308);
d2079 1
a2079 1
    stringBuffer.append(TEXT_309);
d2081 1
a2081 1
    stringBuffer.append(TEXT_310);
d2083 1
a2083 1
    stringBuffer.append(TEXT_311);
d2087 1
a2087 1
    stringBuffer.append(TEXT_312);
d2089 1
a2089 1
    stringBuffer.append(TEXT_313);
d2091 1
a2091 1
    stringBuffer.append(TEXT_314);
d2093 1
a2093 1
    stringBuffer.append(TEXT_315);
d2095 1
a2095 1
    stringBuffer.append(TEXT_316);
d2099 1
a2099 1
    stringBuffer.append(TEXT_317);
d2101 1
a2101 1
    stringBuffer.append(TEXT_318);
d2103 1
a2103 1
    stringBuffer.append(TEXT_319);
d2105 1
a2105 1
    stringBuffer.append(TEXT_320);
d2107 1
a2107 1
    stringBuffer.append(TEXT_321);
d2109 1
a2109 1
    stringBuffer.append(TEXT_322);
d2113 1
a2113 1
    stringBuffer.append(TEXT_323);
d2115 1
a2115 1
    stringBuffer.append(TEXT_324);
d2117 1
a2117 1
    stringBuffer.append(TEXT_325);
d2119 1
a2119 1
    stringBuffer.append(TEXT_326);
d2121 1
a2121 1
    stringBuffer.append(TEXT_327);
d2125 1
a2125 1
    stringBuffer.append(TEXT_328);
d2127 1
a2127 1
    stringBuffer.append(TEXT_329);
d2131 1
a2131 1
    stringBuffer.append(TEXT_330);
d2133 1
a2133 1
    stringBuffer.append(TEXT_331);
d2135 1
a2135 1
    stringBuffer.append(TEXT_332);
d2137 1
a2137 1
    stringBuffer.append(TEXT_333);
d2139 1
a2139 1
    stringBuffer.append(TEXT_334);
d2141 1
a2141 1
    stringBuffer.append(TEXT_335);
d2143 1
a2143 1
    stringBuffer.append(TEXT_336);
d2145 1
a2145 1
    stringBuffer.append(TEXT_337);
d2147 1
a2147 1
    stringBuffer.append(TEXT_338);
d2149 1
a2149 1
    stringBuffer.append(TEXT_339);
d2151 1
a2151 1
    stringBuffer.append(TEXT_340);
d2175 1
a2175 1
    stringBuffer.append(TEXT_341);
d2177 1
a2177 1
    stringBuffer.append(TEXT_342);
d2179 1
a2179 1
    stringBuffer.append(TEXT_343);
d2183 1
a2183 1
    stringBuffer.append(TEXT_344);
d2185 1
a2185 1
    stringBuffer.append(TEXT_345);
d2187 1
a2187 1
    stringBuffer.append(TEXT_346);
d2189 1
a2189 1
    stringBuffer.append(TEXT_347);
d2193 1
a2193 1
    stringBuffer.append(TEXT_348);
d2195 1
a2195 1
    stringBuffer.append(TEXT_349);
d2197 1
a2197 1
    stringBuffer.append(TEXT_350);
d2201 1
a2201 1
    stringBuffer.append(TEXT_351);
d2203 1
a2203 1
    stringBuffer.append(TEXT_352);
d2207 1
a2207 1
    stringBuffer.append(TEXT_353);
d2209 1
a2209 1
    stringBuffer.append(TEXT_354);
d2211 1
a2211 1
    stringBuffer.append(TEXT_355);
d2213 1
a2213 1
    stringBuffer.append(TEXT_356);
d2215 1
a2215 1
    stringBuffer.append(TEXT_357);
d2217 1
a2217 1
    stringBuffer.append(TEXT_358);
d2219 1
a2219 1
    stringBuffer.append(TEXT_359);
d2221 1
a2221 1
    stringBuffer.append(TEXT_360);
d2223 1
a2223 1
    stringBuffer.append(TEXT_361);
d2225 1
a2225 1
    stringBuffer.append(TEXT_362);
d2227 1
a2227 1
    stringBuffer.append(TEXT_363);
d2253 1
a2253 1
    stringBuffer.append(TEXT_364);
d2255 1
a2255 1
    stringBuffer.append(TEXT_365);
d2257 1
a2257 1
    stringBuffer.append(TEXT_366);
d2261 1
a2261 1
    stringBuffer.append(TEXT_367);
d2263 1
a2263 1
    stringBuffer.append(TEXT_368);
d2265 1
a2265 1
    stringBuffer.append(TEXT_369);
d2267 1
a2267 1
    stringBuffer.append(TEXT_370);
d2271 1
a2271 1
    stringBuffer.append(TEXT_371);
d2273 1
a2273 1
    stringBuffer.append(TEXT_372);
d2275 1
a2275 1
    stringBuffer.append(TEXT_373);
d2277 1
a2277 1
    stringBuffer.append(TEXT_374);
d2279 1
a2279 1
    stringBuffer.append(TEXT_375);
d2281 1
a2281 1
    stringBuffer.append(TEXT_376);
d2283 3
a2285 1
    stringBuffer.append(TEXT_377);
d2287 1
a2287 1
    stringBuffer.append(TEXT_378);
d2289 1
a2289 1
    stringBuffer.append(TEXT_379);
d2315 1
a2315 1
    stringBuffer.append(TEXT_380);
d2317 1
a2317 1
    stringBuffer.append(TEXT_381);
d2319 1
a2319 1
    stringBuffer.append(TEXT_382);
d2323 1
a2323 1
    stringBuffer.append(TEXT_383);
d2325 1
a2325 1
    stringBuffer.append(TEXT_384);
d2327 1
a2327 1
    stringBuffer.append(TEXT_385);
d2329 1
a2329 1
    stringBuffer.append(TEXT_386);
d2331 1
a2331 1
    stringBuffer.append(TEXT_387);
d2333 1
a2333 1
    stringBuffer.append(TEXT_388);
d2335 1
a2335 1
    stringBuffer.append(TEXT_389);
d2337 1
a2337 1
    stringBuffer.append(TEXT_390);
d2339 1
a2339 1
    stringBuffer.append(TEXT_391);
d2341 1
a2341 1
    stringBuffer.append(TEXT_392);
d2343 1
a2343 1
    stringBuffer.append(TEXT_393);
d2345 3
a2347 1
    stringBuffer.append(TEXT_394);
d2349 1
a2349 1
    stringBuffer.append(TEXT_395);
d2351 1
a2351 1
    stringBuffer.append(TEXT_396);
d2375 1
a2375 1
    stringBuffer.append(TEXT_397);
d2377 1
a2377 1
    stringBuffer.append(TEXT_398);
d2379 1
a2379 1
    stringBuffer.append(TEXT_399);
d2383 1
a2383 1
    stringBuffer.append(TEXT_400);
d2385 1
a2385 1
    stringBuffer.append(TEXT_401);
d2387 1
a2387 1
    stringBuffer.append(TEXT_402);
d2389 1
a2389 1
    stringBuffer.append(TEXT_403);
d2391 1
a2391 1
    stringBuffer.append(TEXT_404);
d2393 1
a2393 1
    stringBuffer.append(TEXT_405);
d2397 1
a2397 1
    stringBuffer.append(TEXT_406);
d2399 1
a2399 1
    stringBuffer.append(TEXT_407);
d2401 1
a2401 1
    stringBuffer.append(TEXT_408);
d2407 1
a2407 1
    stringBuffer.append(TEXT_409);
d2411 1
a2411 1
    stringBuffer.append(TEXT_410);
d2413 1
a2413 1
    stringBuffer.append(TEXT_411);
d2415 1
a2415 1
    stringBuffer.append(TEXT_412);
d2417 1
a2417 1
    stringBuffer.append(TEXT_413);
d2425 1
a2425 1
    stringBuffer.append(TEXT_414);
d2427 1
a2427 1
    stringBuffer.append(TEXT_415);
d2429 1
a2429 1
    stringBuffer.append(TEXT_416);
d2431 1
a2431 1
    stringBuffer.append(TEXT_417);
d2433 1
a2433 1
    stringBuffer.append(TEXT_418);
d2435 1
a2435 1
    stringBuffer.append(TEXT_419);
d2441 1
a2441 1
    stringBuffer.append(TEXT_420);
d2445 1
a2445 1
    stringBuffer.append(TEXT_421);
d2452 1
a2452 1
    stringBuffer.append(TEXT_422);
d2456 1
a2456 1
    stringBuffer.append(TEXT_423);
d2458 1
a2458 1
    stringBuffer.append(TEXT_424);
d2462 1
a2462 1
    stringBuffer.append(TEXT_425);
d2464 1
a2464 1
    stringBuffer.append(TEXT_426);
d2469 1
a2469 1
    stringBuffer.append(TEXT_427);
d2471 1
a2471 1
    stringBuffer.append(TEXT_428);
d2473 1
a2473 1
    stringBuffer.append(TEXT_429);
d2477 1
a2477 1
    stringBuffer.append(TEXT_430);
d2479 1
a2479 1
    stringBuffer.append(TEXT_431);
d2481 1
a2481 1
    stringBuffer.append(TEXT_432);
d2483 1
a2483 1
    stringBuffer.append(TEXT_433);
d2485 1
a2485 1
    stringBuffer.append(TEXT_434);
d2487 1
a2487 1
    stringBuffer.append(TEXT_435);
d2489 1
a2489 1
    stringBuffer.append(TEXT_436);
d2491 1
a2491 1
    stringBuffer.append(TEXT_437);
d2493 1
a2493 1
    stringBuffer.append(TEXT_438);
d2495 1
a2495 1
    stringBuffer.append(TEXT_439);
d2497 1
a2497 1
    stringBuffer.append(TEXT_440);
d2502 1
a2502 1
    stringBuffer.append(TEXT_441);
d2504 1
a2504 1
    stringBuffer.append(TEXT_442);
d2506 1
a2506 1
    stringBuffer.append(TEXT_443);
d2510 1
a2510 1
    stringBuffer.append(TEXT_444);
d2517 1
a2517 1
    stringBuffer.append(TEXT_445);
d2519 1
a2519 1
    stringBuffer.append(TEXT_446);
d2523 1
a2523 1
    stringBuffer.append(TEXT_447);
d2529 1
a2529 1
    stringBuffer.append(TEXT_448);
d2533 1
a2533 1
    stringBuffer.append(TEXT_449);
d2538 1
a2538 1
    stringBuffer.append(TEXT_450);
d2543 1
a2543 1
    stringBuffer.append(TEXT_451);
d2547 1
a2547 1
    stringBuffer.append(TEXT_452);
d2549 1
a2549 1
    stringBuffer.append(TEXT_453);
d2551 1
a2551 1
    stringBuffer.append(TEXT_454);
d2553 1
a2553 1
    stringBuffer.append(TEXT_455);
d2555 1
a2555 1
    stringBuffer.append(TEXT_456);
d2557 1
a2557 1
    stringBuffer.append(TEXT_457);
d2561 1
a2561 1
    stringBuffer.append(TEXT_458);
d2565 1
a2565 1
    stringBuffer.append(TEXT_459);
d2567 1
a2567 1
    stringBuffer.append(TEXT_460);
d2569 1
a2569 1
    stringBuffer.append(TEXT_461);
d2571 1
a2571 1
    stringBuffer.append(TEXT_462);
d2573 1
a2573 1
    stringBuffer.append(TEXT_463);
d2575 1
a2575 1
    stringBuffer.append(TEXT_464);
d2579 1
a2579 1
    stringBuffer.append(TEXT_465);
d2581 1
a2581 1
    stringBuffer.append(TEXT_466);
d2583 1
a2583 1
    stringBuffer.append(TEXT_467);
d2585 1
a2585 1
    stringBuffer.append(TEXT_468);
d2589 1
a2589 1
    stringBuffer.append(TEXT_469);
d2591 1
a2591 1
    stringBuffer.append(TEXT_470);
d2601 1
a2601 1
    stringBuffer.append(TEXT_471);
d2603 1
a2603 1
    stringBuffer.append(TEXT_472);
d2605 1
a2605 1
    stringBuffer.append(TEXT_473);
d2607 1
a2607 1
    stringBuffer.append(TEXT_474);
d2609 1
a2609 1
    stringBuffer.append(TEXT_475);
d2611 1
a2611 1
    stringBuffer.append(TEXT_476);
d2615 1
a2615 1
    stringBuffer.append(TEXT_477);
d2617 1
a2617 1
    stringBuffer.append(TEXT_478);
d2619 1
a2619 1
    stringBuffer.append(TEXT_479);
d2621 1
a2621 1
    stringBuffer.append(TEXT_480);
d2623 1
a2623 1
    stringBuffer.append(TEXT_481);
d2625 1
a2625 1
    stringBuffer.append(TEXT_482);
d2627 1
a2627 1
    stringBuffer.append(TEXT_483);
d2629 1
a2629 1
    stringBuffer.append(TEXT_484);
d2631 1
a2631 1
    stringBuffer.append(TEXT_485);
d2633 1
a2633 1
    stringBuffer.append(TEXT_486);
d2635 1
a2635 1
    stringBuffer.append(TEXT_487);
d2637 1
a2637 1
    stringBuffer.append(TEXT_488);
d2639 1
a2639 1
    stringBuffer.append(TEXT_489);
d2641 1
a2641 1
    stringBuffer.append(TEXT_490);
d2646 1
a2646 1
    stringBuffer.append(TEXT_491);
d2648 1
a2648 1
    stringBuffer.append(TEXT_492);
d2650 1
a2650 1
    stringBuffer.append(TEXT_493);
d2652 1
a2652 1
    stringBuffer.append(TEXT_494);
d2654 1
a2654 1
    stringBuffer.append(TEXT_495);
d2656 1
a2656 1
    stringBuffer.append(TEXT_496);
d2658 1
a2658 1
    stringBuffer.append(TEXT_497);
d2660 1
a2660 1
    stringBuffer.append(TEXT_498);
d2662 1
a2662 1
    stringBuffer.append(TEXT_499);
d2664 1
a2664 1
    stringBuffer.append(TEXT_500);
d2666 1
a2666 1
    stringBuffer.append(TEXT_501);
d2670 1
a2670 1
    stringBuffer.append(TEXT_502);
d2672 1
a2672 1
    stringBuffer.append(TEXT_503);
d2680 1
a2680 1
    stringBuffer.append(TEXT_504);
d2682 1
a2682 1
    stringBuffer.append(TEXT_505);
d2684 1
a2684 1
    stringBuffer.append(TEXT_506);
d2686 1
a2686 1
    stringBuffer.append(TEXT_507);
d2688 1
a2688 1
    stringBuffer.append(TEXT_508);
d2697 1
a2697 1
    stringBuffer.append(TEXT_509);
d2699 1
a2699 1
    stringBuffer.append(TEXT_510);
d2701 1
a2701 1
    stringBuffer.append(TEXT_511);
d2703 1
a2703 1
    stringBuffer.append(TEXT_512);
d2705 1
a2705 1
    stringBuffer.append(TEXT_513);
d2709 1
a2709 1
    stringBuffer.append(TEXT_514);
d2717 1
a2717 1
    stringBuffer.append(TEXT_515);
d2719 1
a2719 1
    stringBuffer.append(TEXT_516);
d2721 1
a2721 1
    stringBuffer.append(TEXT_517);
d2723 1
a2723 1
    stringBuffer.append(TEXT_518);
d2725 1
a2725 1
    stringBuffer.append(TEXT_519);
d2729 1
a2729 1
    stringBuffer.append(TEXT_520);
d2733 1
a2733 1
    stringBuffer.append(TEXT_521);
d2735 1
a2735 1
    stringBuffer.append(TEXT_522);
d2739 1
a2739 1
    stringBuffer.append(TEXT_523);
d2741 1
a2741 1
    stringBuffer.append(TEXT_524);
d2743 1
a2743 1
    stringBuffer.append(TEXT_525);
d2745 1
a2745 1
    stringBuffer.append(TEXT_526);
d2747 1
a2747 1
    stringBuffer.append(TEXT_527);
d2749 1
a2749 1
    stringBuffer.append(TEXT_528);
d2751 1
a2751 1
    stringBuffer.append(TEXT_529);
d2755 1
a2755 1
    stringBuffer.append(TEXT_530);
d2757 1
a2757 1
    stringBuffer.append(TEXT_531);
d2759 1
a2759 1
    stringBuffer.append(TEXT_532);
d2761 1
a2761 1
    stringBuffer.append(TEXT_533);
d2763 1
a2763 1
    stringBuffer.append(TEXT_534);
d2765 3
a2767 3
    stringBuffer.append(TEXT_535);
    stringBuffer.append(TEXT_536);
    stringBuffer.append(TEXT_537);
d2769 1
a2769 1
    stringBuffer.append(TEXT_538);
d2771 1
a2771 1
    stringBuffer.append(TEXT_539);
d2773 1
a2773 1
    stringBuffer.append(TEXT_540);
d2775 1
a2775 1
    stringBuffer.append(TEXT_541);
d2777 1
a2777 1
    stringBuffer.append(TEXT_542);
d2779 1
a2779 1
    stringBuffer.append(TEXT_543);
d2781 1
a2781 1
    stringBuffer.append(TEXT_544);
d2783 1
a2783 1
    stringBuffer.append(TEXT_545);
d2791 1
a2791 1
    stringBuffer.append(TEXT_546);
d2793 1
a2793 1
    stringBuffer.append(TEXT_547);
d2797 1
a2797 1
    stringBuffer.append(TEXT_548);
d2801 1
a2801 1
    stringBuffer.append(TEXT_549);
d2803 1
a2803 1
    stringBuffer.append(TEXT_550);
d2808 1
a2808 1
    stringBuffer.append(TEXT_551);
d2810 1
a2810 1
    stringBuffer.append(TEXT_552);
d2814 1
a2814 1
    stringBuffer.append(TEXT_553);
d2816 1
a2816 1
    stringBuffer.append(TEXT_554);
d2818 1
a2818 1
    stringBuffer.append(TEXT_555);
d2820 1
a2820 1
    stringBuffer.append(TEXT_556);
d2822 1
a2822 1
    stringBuffer.append(TEXT_557);
d2827 1
a2827 1
    stringBuffer.append(TEXT_558);
d2829 1
a2829 1
    stringBuffer.append(TEXT_559);
d2834 1
a2834 1
    stringBuffer.append(TEXT_560);
d2836 1
a2836 1
    stringBuffer.append(TEXT_561);
d2840 1
a2840 1
    stringBuffer.append(TEXT_562);
d2845 1
a2845 1
    stringBuffer.append(TEXT_563);
d2847 1
a2847 1
    stringBuffer.append(TEXT_564);
d2851 1
a2851 1
    stringBuffer.append(TEXT_565);
d2853 1
a2853 1
    stringBuffer.append(TEXT_566);
d2855 1
a2855 1
    stringBuffer.append(TEXT_567);
d2860 1
a2860 1
    stringBuffer.append(TEXT_568);
d2865 1
a2865 1
    stringBuffer.append(TEXT_569);
d2867 1
a2867 1
    stringBuffer.append(TEXT_570);
d2869 1
a2869 1
    stringBuffer.append(TEXT_571);
d2873 1
a2873 1
    stringBuffer.append(TEXT_572);
d2875 1
a2875 1
    stringBuffer.append(TEXT_573);
d2879 1
a2879 1
    stringBuffer.append(TEXT_574);
d2881 1
a2881 1
    stringBuffer.append(TEXT_575);
d2883 1
a2883 1
    stringBuffer.append(TEXT_576);
d2888 1
a2888 1
    stringBuffer.append(TEXT_577);
d2893 1
a2893 1
    stringBuffer.append(TEXT_578);
d2895 1
a2895 1
    stringBuffer.append(TEXT_579);
d2897 1
a2897 1
    stringBuffer.append(TEXT_580);
d2901 1
a2901 1
    stringBuffer.append(TEXT_581);
d2908 1
a2908 1
    stringBuffer.append(TEXT_582);
d2910 1
a2910 1
    stringBuffer.append(TEXT_583);
d2912 1
a2912 1
    stringBuffer.append(TEXT_584);
d2914 1
a2914 1
    stringBuffer.append(TEXT_585);
d2916 1
a2916 1
    stringBuffer.append(TEXT_586);
d2920 1
a2920 1
    stringBuffer.append(TEXT_587);
d2922 1
a2922 1
    stringBuffer.append(TEXT_588);
d2924 1
a2924 1
    stringBuffer.append(TEXT_589);
d2926 1
a2926 1
    stringBuffer.append(TEXT_590);
d2928 1
a2928 1
    stringBuffer.append(TEXT_591);
d2930 1
a2930 1
    stringBuffer.append(TEXT_592);
d2932 1
a2932 1
    stringBuffer.append(TEXT_593);
d2934 1
a2934 1
    stringBuffer.append(TEXT_594);
d2936 1
a2936 1
    stringBuffer.append(TEXT_595);
d2938 1
a2938 1
    stringBuffer.append(TEXT_596);
d2940 1
a2940 1
    stringBuffer.append(TEXT_597);
d2942 1
a2942 1
    stringBuffer.append(TEXT_598);
d2944 1
a2944 1
    stringBuffer.append(TEXT_599);
d2946 1
a2946 1
    stringBuffer.append(TEXT_600);
d2948 1
a2948 1
    stringBuffer.append(TEXT_601);
d2950 1
a2950 1
    stringBuffer.append(TEXT_602);
d2952 1
a2952 1
    stringBuffer.append(TEXT_603);
d2954 1
a2954 1
    stringBuffer.append(TEXT_604);
d2956 1
a2956 1
    stringBuffer.append(TEXT_605);
d2958 1
a2958 1
    stringBuffer.append(TEXT_606);
d2960 1
a2960 1
    stringBuffer.append(TEXT_607);
d2962 1
a2962 1
    stringBuffer.append(TEXT_608);
d2966 1
a2966 1
    stringBuffer.append(TEXT_609);
d2968 1
a2968 1
    stringBuffer.append(TEXT_610);
d2970 1
a2970 1
    stringBuffer.append(TEXT_611);
d2974 1
a2974 1
    stringBuffer.append(TEXT_612);
d2976 1
a2976 1
    stringBuffer.append(TEXT_613);
d2978 1
a2978 1
    stringBuffer.append(TEXT_614);
d2982 1
a2982 1
    stringBuffer.append(TEXT_615);
d2989 1
a2989 1
    stringBuffer.append(TEXT_616);
d2993 1
a2993 1
    stringBuffer.append(TEXT_617);
d2997 1
a2997 1
    stringBuffer.append(TEXT_618);
d3004 1
a3004 1
    stringBuffer.append(TEXT_619);
d3008 1
a3008 1
    stringBuffer.append(TEXT_620);
d3018 2
a3019 2
    stringBuffer.append(TEXT_621);
    stringBuffer.append(TEXT_622);
d3021 1
a3021 1
    stringBuffer.append(TEXT_623);
d3023 1
a3023 1
    stringBuffer.append(TEXT_624);
d3025 1
a3025 1
    stringBuffer.append(TEXT_625);
d3027 1
a3027 1
    stringBuffer.append(TEXT_626);
d3029 1
a3029 1
    stringBuffer.append(TEXT_627);
d3031 1
a3031 1
    stringBuffer.append(TEXT_628);
d3033 1
a3033 1
    stringBuffer.append(TEXT_629);
d3048 1
a3048 1
    stringBuffer.append(TEXT_630);
d3050 1
a3050 1
    stringBuffer.append(TEXT_631);
d3052 1
a3052 1
    stringBuffer.append(TEXT_632);
d3054 1
a3054 1
    stringBuffer.append(TEXT_633);
d3058 1
a3058 1
    stringBuffer.append(TEXT_634);
d3060 1
a3060 1
    stringBuffer.append(TEXT_635);
d3079 1
a3079 1
    stringBuffer.append(TEXT_636);
d3081 1
a3081 1
    stringBuffer.append(TEXT_637);
d3083 1
a3083 1
    stringBuffer.append(TEXT_638);
d3085 1
a3085 1
    stringBuffer.append(TEXT_639);
d3087 1
a3087 1
    stringBuffer.append(TEXT_640);
d3091 1
a3091 1
    stringBuffer.append(TEXT_641);
d3093 1
a3093 1
    stringBuffer.append(TEXT_642);
d3095 1
a3095 1
    stringBuffer.append(TEXT_643);
d3097 1
a3097 1
    stringBuffer.append(TEXT_644);
d3105 1
a3105 1
    stringBuffer.append(TEXT_645);
d3107 1
a3107 1
    stringBuffer.append(TEXT_646);
d3109 1
a3109 1
    stringBuffer.append(TEXT_647);
d3114 1
a3114 1
    stringBuffer.append(TEXT_648);
d3116 1
a3116 1
    stringBuffer.append(TEXT_649);
d3118 1
a3118 1
    stringBuffer.append(TEXT_650);
d3120 1
a3120 1
    stringBuffer.append(TEXT_651);
d3129 1
a3129 1
    stringBuffer.append(TEXT_652);
d3133 1
a3133 1
    stringBuffer.append(TEXT_653);
d3135 1
a3135 1
    stringBuffer.append(TEXT_654);
d3141 1
a3141 1
    stringBuffer.append(TEXT_655);
d3143 1
a3143 1
    stringBuffer.append(TEXT_656);
d3145 1
a3145 1
    stringBuffer.append(TEXT_657);
d3149 1
a3149 1
    stringBuffer.append(TEXT_658);
d3153 1
a3153 1
    stringBuffer.append(TEXT_659);
d3155 1
a3155 1
    stringBuffer.append(TEXT_660);
d3157 1
a3157 1
    stringBuffer.append(TEXT_661);
d3162 2
a3163 2
    stringBuffer.append(TEXT_662);
    stringBuffer.append(TEXT_663);
d3165 1
a3165 1
    stringBuffer.append(TEXT_664);
d3175 1
a3175 1
    stringBuffer.append(TEXT_665);
d3177 1
a3177 1
    stringBuffer.append(TEXT_666);
d3179 1
a3179 1
    stringBuffer.append(TEXT_667);
d3181 1
a3181 1
    stringBuffer.append(TEXT_668);
d3183 1
a3183 1
    stringBuffer.append(TEXT_669);
d3194 1
a3194 1
    stringBuffer.append(TEXT_670);
d3196 1
a3196 1
    stringBuffer.append(TEXT_671);
d3198 1
a3198 1
    stringBuffer.append(TEXT_672);
d3200 1
a3200 1
    stringBuffer.append(TEXT_673);
d3204 1
a3204 1
    stringBuffer.append(TEXT_674);
d3208 1
a3208 1
    stringBuffer.append(TEXT_675);
d3210 1
a3210 1
    stringBuffer.append(TEXT_676);
d3214 1
a3214 1
    stringBuffer.append(TEXT_677);
d3218 1
a3218 1
    stringBuffer.append(TEXT_678);
d3220 2
a3221 2
    stringBuffer.append(TEXT_679);
    stringBuffer.append(TEXT_680);
d3225 1
a3225 1
    stringBuffer.append(TEXT_681);
d3227 1
a3227 1
    stringBuffer.append(TEXT_682);
d3231 1
a3231 1
    stringBuffer.append(TEXT_683);
d3233 1
a3233 1
    stringBuffer.append(TEXT_684);
d3235 1
a3235 1
    stringBuffer.append(TEXT_685);
d3253 1
a3253 1
    stringBuffer.append(TEXT_686);
d3255 1
a3255 1
    stringBuffer.append(TEXT_687);
d3257 1
a3257 1
    stringBuffer.append(TEXT_688);
d3259 1
a3259 1
    stringBuffer.append(TEXT_689);
d3261 1
a3261 1
    stringBuffer.append(TEXT_690);
d3270 1
a3270 1
    stringBuffer.append(TEXT_691);
d3272 1
a3272 1
    stringBuffer.append(TEXT_692);
d3274 1
a3274 1
    stringBuffer.append(TEXT_693);
d3276 1
a3276 1
    stringBuffer.append(TEXT_694);
d3280 1
a3280 1
    stringBuffer.append(TEXT_695);
d3282 1
a3282 1
    stringBuffer.append(TEXT_696);
d3284 1
a3284 1
    stringBuffer.append(TEXT_697);
d3288 1
a3288 1
    stringBuffer.append(TEXT_698);
d3290 1
a3290 1
    stringBuffer.append(TEXT_699);
d3295 1
a3295 1
    stringBuffer.append(TEXT_700);
d3302 1
a3302 1
    stringBuffer.append(TEXT_701);
d3304 1
a3304 1
    stringBuffer.append(TEXT_702);
d3308 1
a3308 1
    stringBuffer.append(TEXT_703);
d3310 1
a3310 1
    stringBuffer.append(TEXT_704);
d3314 1
a3314 1
    stringBuffer.append(TEXT_705);
d3316 1
a3316 1
    stringBuffer.append(TEXT_706);
d3320 1
a3320 1
    stringBuffer.append(TEXT_707);
d3324 1
a3324 1
    stringBuffer.append(TEXT_708);
d3330 1
a3330 1
    stringBuffer.append(TEXT_709);
d3335 1
a3335 1
    stringBuffer.append(TEXT_710);
d3340 1
a3340 1
    stringBuffer.append(TEXT_711);
d3344 1
a3344 1
    stringBuffer.append(TEXT_712);
d3346 1
a3346 1
    stringBuffer.append(TEXT_713);
d3348 1
a3348 1
    stringBuffer.append(TEXT_714);
d3350 1
a3350 1
    stringBuffer.append(TEXT_715);
d3352 1
a3352 1
    stringBuffer.append(TEXT_716);
d3354 1
a3354 1
    stringBuffer.append(TEXT_717);
d3356 1
a3356 1
    stringBuffer.append(TEXT_718);
d3358 1
a3358 1
    stringBuffer.append(TEXT_719);
d3360 1
a3360 1
    stringBuffer.append(TEXT_720);
d3362 1
a3362 1
    stringBuffer.append(TEXT_721);
d3364 1
a3364 1
    stringBuffer.append(TEXT_722);
d3366 1
a3366 1
    stringBuffer.append(TEXT_723);
d3370 1
a3370 1
    stringBuffer.append(TEXT_724);
d3374 1
a3374 1
    stringBuffer.append(TEXT_725);
d3376 1
a3376 1
    stringBuffer.append(TEXT_726);
d3378 1
a3378 1
    stringBuffer.append(TEXT_727);
d3380 1
a3380 1
    stringBuffer.append(TEXT_728);
d3382 1
a3382 1
    stringBuffer.append(TEXT_729);
d3384 1
a3384 1
    stringBuffer.append(TEXT_730);
d3386 1
a3386 1
    stringBuffer.append(TEXT_731);
d3388 1
a3388 1
    stringBuffer.append(TEXT_732);
d3390 1
a3390 1
    stringBuffer.append(TEXT_733);
d3403 1
a3403 1
    stringBuffer.append(TEXT_734);
d3405 1
a3405 1
    stringBuffer.append(TEXT_735);
d3407 1
a3407 1
    stringBuffer.append(TEXT_736);
d3409 1
a3409 1
    stringBuffer.append(TEXT_737);
d3414 1
a3414 1
    stringBuffer.append(TEXT_738);
d3416 1
a3416 1
    stringBuffer.append(TEXT_739);
d3418 1
a3418 1
    stringBuffer.append(TEXT_740);
d3420 1
a3420 1
    stringBuffer.append(TEXT_741);
d3422 1
a3422 1
    stringBuffer.append(TEXT_742);
d3424 1
a3424 1
    stringBuffer.append(TEXT_743);
d3426 1
a3426 1
    stringBuffer.append(TEXT_744);
d3428 1
a3428 1
    stringBuffer.append(TEXT_745);
d3430 1
a3430 1
    stringBuffer.append(TEXT_746);
d3432 1
a3432 1
    stringBuffer.append(TEXT_747);
d3436 1
a3436 1
    stringBuffer.append(TEXT_748);
d3438 1
a3438 1
    stringBuffer.append(TEXT_749);
d3451 1
a3451 1
    stringBuffer.append(TEXT_750);
d3465 1
a3465 1
    stringBuffer.append(TEXT_751);
d3467 1
a3467 1
    stringBuffer.append(TEXT_752);
d3469 1
a3469 1
    stringBuffer.append(TEXT_753);
d3471 1
a3471 1
    stringBuffer.append(TEXT_754);
d3473 1
a3473 1
    stringBuffer.append(TEXT_755);
d3477 1
a3477 1
    stringBuffer.append(TEXT_756);
d3479 1
a3479 1
    stringBuffer.append(TEXT_757);
d3481 1
a3481 1
    stringBuffer.append(TEXT_758);
d3483 1
a3483 1
    stringBuffer.append(TEXT_759);
d3490 1
a3490 1
    stringBuffer.append(TEXT_760);
d3504 1
a3504 1
    stringBuffer.append(TEXT_761);
d3506 1
a3506 1
    stringBuffer.append(TEXT_762);
d3508 1
a3508 1
    stringBuffer.append(TEXT_763);
d3510 1
a3510 1
    stringBuffer.append(TEXT_764);
d3512 1
a3512 1
    stringBuffer.append(TEXT_765);
d3516 1
a3516 1
    stringBuffer.append(TEXT_766);
d3518 1
a3518 1
    stringBuffer.append(TEXT_767);
d3520 1
a3520 1
    stringBuffer.append(TEXT_768);
d3522 1
a3522 1
    stringBuffer.append(TEXT_769);
d3529 1
a3529 1
    stringBuffer.append(TEXT_770);
d3543 1
a3543 1
    stringBuffer.append(TEXT_771);
d3545 1
a3545 1
    stringBuffer.append(TEXT_772);
d3547 1
a3547 1
    stringBuffer.append(TEXT_773);
d3549 1
a3549 1
    stringBuffer.append(TEXT_774);
d3551 1
a3551 1
    stringBuffer.append(TEXT_775);
d3555 1
a3555 1
    stringBuffer.append(TEXT_776);
d3557 1
a3557 1
    stringBuffer.append(TEXT_777);
d3559 1
a3559 1
    stringBuffer.append(TEXT_778);
d3561 1
a3561 1
    stringBuffer.append(TEXT_779);
d3571 1
a3571 1
    stringBuffer.append(TEXT_780);
d3585 1
a3585 1
    stringBuffer.append(TEXT_781);
d3587 1
a3587 1
    stringBuffer.append(TEXT_782);
d3589 1
a3589 1
    stringBuffer.append(TEXT_783);
d3591 1
a3591 1
    stringBuffer.append(TEXT_784);
d3593 1
a3593 1
    stringBuffer.append(TEXT_785);
d3597 1
a3597 1
    stringBuffer.append(TEXT_786);
d3599 1
a3599 1
    stringBuffer.append(TEXT_787);
d3601 1
a3601 1
    stringBuffer.append(TEXT_788);
d3603 1
a3603 1
    stringBuffer.append(TEXT_789);
d3612 1
a3612 1
    stringBuffer.append(TEXT_790);
d3617 1
a3617 1
    stringBuffer.append(TEXT_791);
d3619 1
a3619 1
    stringBuffer.append(TEXT_792);
d3626 1
a3626 1
    stringBuffer.append(TEXT_793);
d3631 1
a3631 1
    stringBuffer.append(TEXT_794);
d3633 1
a3633 1
    stringBuffer.append(TEXT_795);
d3639 1
a3639 1
    stringBuffer.append(TEXT_796);
d3641 1
a3641 1
    stringBuffer.append(TEXT_797);
d3643 1
a3643 1
    stringBuffer.append(TEXT_798);
d3648 1
a3648 1
    stringBuffer.append(TEXT_799);
d3650 1
a3650 1
    stringBuffer.append(TEXT_800);
d3652 1
a3652 1
    stringBuffer.append(TEXT_801);
d3654 1
a3654 1
    stringBuffer.append(TEXT_802);
d3656 1
a3656 1
    stringBuffer.append(TEXT_803);
d3663 2
a3664 2
    stringBuffer.append(TEXT_804);
    stringBuffer.append(TEXT_805);
d3666 1
a3666 1
    stringBuffer.append(TEXT_806);
d3668 1
a3668 1
    stringBuffer.append(TEXT_807);
d3670 1
a3670 1
    stringBuffer.append(TEXT_808);
d3679 1
a3679 1
    stringBuffer.append(TEXT_809);
d3681 1
a3681 1
    stringBuffer.append(TEXT_810);
d3683 1
a3683 1
    stringBuffer.append(TEXT_811);
d3685 1
a3685 1
    stringBuffer.append(TEXT_812);
d3691 1
a3691 1
    stringBuffer.append(TEXT_813);
d3693 1
a3693 1
    stringBuffer.append(TEXT_814);
d3695 1
a3695 1
    stringBuffer.append(TEXT_815);
d3699 1
a3699 1
    stringBuffer.append(TEXT_816);
d3701 1
a3701 1
    stringBuffer.append(TEXT_817);
d3703 1
a3703 1
    stringBuffer.append(TEXT_818);
d3707 1
a3707 1
    stringBuffer.append(TEXT_819);
d3709 1
a3709 1
    stringBuffer.append(TEXT_820);
d3715 2
a3716 2
    stringBuffer.append(TEXT_821);
    stringBuffer.append(TEXT_822);
d3718 1
a3718 1
    stringBuffer.append(TEXT_823);
d3720 1
a3720 1
    stringBuffer.append(TEXT_824);
d3743 1
a3743 1
    stringBuffer.append(TEXT_825);
d3745 1
a3745 1
    stringBuffer.append(TEXT_826);
d3747 1
a3747 1
    stringBuffer.append(TEXT_827);
d3749 1
a3749 1
    stringBuffer.append(TEXT_828);
d3754 1
a3754 1
    stringBuffer.append(TEXT_829);
d3763 1
a3763 1
    stringBuffer.append(TEXT_830);
d3765 1
a3765 1
    stringBuffer.append(TEXT_831);
d3767 1
a3767 1
    stringBuffer.append(TEXT_832);
d3769 1
a3769 1
    stringBuffer.append(TEXT_833);
d3773 1
a3773 1
    stringBuffer.append(TEXT_834);
d3775 1
a3775 1
    stringBuffer.append(TEXT_835);
d3777 1
a3777 1
    stringBuffer.append(TEXT_836);
d3781 1
a3781 1
    stringBuffer.append(TEXT_837);
d3783 1
a3783 1
    stringBuffer.append(TEXT_838);
d3788 1
a3788 1
    stringBuffer.append(TEXT_839);
d3796 1
a3796 1
    stringBuffer.append(TEXT_840);
d3798 1
a3798 1
    stringBuffer.append(TEXT_841);
d3802 1
a3802 1
    stringBuffer.append(TEXT_842);
d3804 1
a3804 1
    stringBuffer.append(TEXT_843);
d3809 1
a3809 1
    stringBuffer.append(TEXT_844);
d3811 1
a3811 1
    stringBuffer.append(TEXT_845);
d3813 1
a3813 1
    stringBuffer.append(TEXT_846);
d3815 1
a3815 1
    stringBuffer.append(TEXT_847);
d3819 1
a3819 1
    stringBuffer.append(TEXT_848);
d3821 1
a3821 1
    stringBuffer.append(TEXT_849);
d3823 1
a3823 1
    stringBuffer.append(TEXT_850);
d3828 1
a3828 1
    stringBuffer.append(TEXT_851);
d3830 1
a3830 1
    stringBuffer.append(TEXT_852);
d3832 1
a3832 1
    stringBuffer.append(TEXT_853);
d3834 1
a3834 1
    stringBuffer.append(TEXT_854);
d3838 1
a3838 1
    stringBuffer.append(TEXT_855);
d3840 1
a3840 1
    stringBuffer.append(TEXT_856);
d3842 1
a3842 1
    stringBuffer.append(TEXT_857);
d3846 1
a3846 1
    stringBuffer.append(TEXT_858);
d3848 1
a3848 1
    stringBuffer.append(TEXT_859);
d3852 1
a3852 1
    stringBuffer.append(TEXT_860);
d3856 1
a3856 1
    stringBuffer.append(TEXT_861);
d3864 1
a3864 1
    stringBuffer.append(TEXT_862);
d3869 1
a3869 1
    stringBuffer.append(TEXT_863);
d3879 1
a3879 1
    stringBuffer.append(TEXT_864);
d3881 1
a3881 1
    stringBuffer.append(TEXT_865);
d3883 1
a3883 1
    stringBuffer.append(TEXT_866);
d3885 1
a3885 1
    stringBuffer.append(TEXT_867);
d3889 1
a3889 1
    stringBuffer.append(TEXT_868);
d3891 1
a3891 1
    stringBuffer.append(TEXT_869);
d3893 1
a3893 1
    stringBuffer.append(TEXT_870);
d3897 1
a3897 1
    stringBuffer.append(TEXT_871);
d3902 1
a3902 1
    stringBuffer.append(TEXT_872);
d3904 1
a3904 1
    stringBuffer.append(TEXT_873);
d3906 1
a3906 1
    stringBuffer.append(TEXT_874);
d3910 1
a3910 1
    stringBuffer.append(TEXT_875);
d3914 1
a3914 1
    stringBuffer.append(TEXT_876);
d3919 1
a3919 1
    stringBuffer.append(TEXT_877);
d3923 1
a3923 1
    stringBuffer.append(TEXT_878);
d3925 1
a3925 1
    stringBuffer.append(TEXT_879);
d3927 1
a3927 1
    stringBuffer.append(TEXT_880);
d3929 1
a3929 1
    stringBuffer.append(TEXT_881);
d3931 1
a3931 1
    stringBuffer.append(TEXT_882);
d3933 1
a3933 1
    stringBuffer.append(TEXT_883);
d3935 1
a3935 1
    stringBuffer.append(TEXT_884);
d3937 1
a3937 1
    stringBuffer.append(TEXT_885);
d3939 1
a3939 1
    stringBuffer.append(TEXT_886);
d3943 1
a3943 1
    stringBuffer.append(TEXT_887);
d3945 1
a3945 1
    stringBuffer.append(TEXT_888);
d3947 1
a3947 1
    stringBuffer.append(TEXT_889);
d3952 1
a3952 1
    stringBuffer.append(TEXT_890);
d3954 1
a3954 1
    stringBuffer.append(TEXT_891);
d3956 1
a3956 1
    stringBuffer.append(TEXT_892);
d3961 1
a3961 1
    stringBuffer.append(TEXT_893);
d3963 1
a3963 1
    stringBuffer.append(TEXT_894);
d3967 1
a3967 1
    stringBuffer.append(TEXT_895);
d3971 1
a3971 1
    stringBuffer.append(TEXT_896);
d3975 1
a3975 1
    stringBuffer.append(TEXT_897);
d3982 1
a3982 1
    stringBuffer.append(TEXT_898);
d3986 1
a3986 1
    stringBuffer.append(TEXT_899);
d3988 1
a3988 1
    stringBuffer.append(TEXT_900);
d3990 1
a3990 1
    stringBuffer.append(TEXT_901);
d3995 1
a3995 1
    stringBuffer.append(TEXT_902);
d3997 1
a3997 1
    stringBuffer.append(TEXT_903);
d4001 1
a4001 1
    stringBuffer.append(TEXT_904);
d4005 1
a4005 1
    stringBuffer.append(TEXT_905);
d4007 1
a4007 1
    stringBuffer.append(TEXT_906);
d4009 1
a4009 1
    stringBuffer.append(TEXT_907);
d4011 1
a4011 1
    stringBuffer.append(TEXT_908);
d4013 1
a4013 1
    stringBuffer.append(TEXT_909);
d4015 1
a4015 1
    stringBuffer.append(TEXT_910);
d4017 1
a4017 1
    stringBuffer.append(TEXT_911);
d4019 1
a4019 1
    stringBuffer.append(TEXT_912);
d4021 1
a4021 1
    stringBuffer.append(TEXT_913);
d4023 1
a4023 1
    stringBuffer.append(TEXT_914);
d4025 1
a4025 1
    stringBuffer.append(TEXT_915);
d4027 1
a4027 1
    stringBuffer.append(TEXT_916);
d4034 3
a4036 3
    stringBuffer.append(TEXT_917);
    stringBuffer.append(TEXT_918);
    stringBuffer.append(TEXT_919);
d4038 1
a4038 1
    stringBuffer.append(TEXT_920);
d4040 3
a4042 3
    stringBuffer.append(TEXT_921);
    stringBuffer.append(TEXT_922);
    stringBuffer.append(TEXT_923);
d4044 1
a4044 1
    stringBuffer.append(TEXT_924);
d4046 1
a4046 1
    stringBuffer.append(TEXT_925);
d4048 1
a4048 1
    stringBuffer.append(TEXT_926);
d4052 1
a4052 1
    stringBuffer.append(TEXT_927);
d4060 1
a4060 1
    stringBuffer.append(TEXT_928);
d4064 1
a4064 1
    stringBuffer.append(TEXT_929);
d4066 1
a4066 1
    stringBuffer.append(TEXT_930);
d4068 1
a4068 1
    stringBuffer.append(TEXT_931);
d4070 1
a4070 1
    stringBuffer.append(TEXT_932);
d4072 1
a4072 1
    stringBuffer.append(TEXT_933);
d4074 1
a4074 1
    stringBuffer.append(TEXT_934);
d4076 1
a4076 1
    stringBuffer.append(TEXT_935);
d4078 1
a4078 1
    stringBuffer.append(TEXT_936);
d4080 1
a4080 1
    stringBuffer.append(TEXT_937);
d4082 1
a4082 1
    stringBuffer.append(TEXT_938);
d4084 1
a4084 1
    stringBuffer.append(TEXT_939);
d4086 1
a4086 1
    stringBuffer.append(TEXT_940);
d4090 1
a4090 1
    stringBuffer.append(TEXT_941);
d4094 1
a4094 1
    stringBuffer.append(TEXT_942);
d4096 1
a4096 1
    stringBuffer.append(TEXT_943);
d4100 3
a4102 3
    stringBuffer.append(TEXT_944);
    stringBuffer.append(TEXT_945);
    stringBuffer.append(TEXT_946);
d4104 1
a4104 1
    stringBuffer.append(TEXT_947);
d4106 1
a4106 1
    stringBuffer.append(TEXT_948);
d4108 1
a4108 1
    stringBuffer.append(TEXT_949);
d4110 1
a4110 1
    stringBuffer.append(TEXT_950);
d4112 1
a4112 1
    stringBuffer.append(TEXT_951);
d4114 1
a4114 1
    stringBuffer.append(TEXT_952);
d4116 1
a4116 1
    stringBuffer.append(TEXT_953);
d4118 1
a4118 1
    stringBuffer.append(TEXT_954);
d4120 1
a4120 1
    stringBuffer.append(TEXT_955);
d4122 1
a4122 1
    stringBuffer.append(TEXT_956);
d4124 1
a4124 1
    stringBuffer.append(TEXT_957);
d4126 1
a4126 1
    stringBuffer.append(TEXT_958);
d4128 1
a4128 1
    stringBuffer.append(TEXT_959);
d4130 1
a4130 1
    stringBuffer.append(TEXT_960);
d4132 1
a4132 1
    stringBuffer.append(TEXT_961);
d4134 3
a4136 3
    stringBuffer.append(TEXT_962);
    stringBuffer.append(TEXT_963);
    stringBuffer.append(TEXT_964);
d4138 1
a4138 1
    stringBuffer.append(TEXT_965);
d4140 1
a4140 1
    stringBuffer.append(TEXT_966);
d4142 1
a4142 1
    stringBuffer.append(TEXT_967);
d4144 3
a4146 3
    stringBuffer.append(TEXT_968);
    stringBuffer.append(TEXT_969);
    stringBuffer.append(TEXT_970);
d4148 1
a4148 1
    stringBuffer.append(TEXT_971);
d4150 1
a4150 1
    stringBuffer.append(TEXT_972);
d4152 1
a4152 1
    stringBuffer.append(TEXT_973);
d4154 3
a4156 3
    stringBuffer.append(TEXT_974);
    stringBuffer.append(TEXT_975);
    stringBuffer.append(TEXT_976);
d4158 1
a4158 1
    stringBuffer.append(TEXT_977);
d4160 1
a4160 1
    stringBuffer.append(TEXT_978);
d4162 1
a4162 1
    stringBuffer.append(TEXT_979);
d4164 1
a4164 1
    stringBuffer.append(TEXT_980);
d4166 3
a4168 3
    stringBuffer.append(TEXT_981);
    stringBuffer.append(TEXT_982);
    stringBuffer.append(TEXT_983);
d4170 3
a4172 3
    stringBuffer.append(TEXT_984);
    stringBuffer.append(TEXT_985);
    stringBuffer.append(TEXT_986);
d4174 3
a4176 3
    stringBuffer.append(TEXT_987);
    stringBuffer.append(TEXT_988);
    stringBuffer.append(TEXT_989);
d4178 3
a4180 3
    stringBuffer.append(TEXT_990);
    stringBuffer.append(TEXT_991);
    stringBuffer.append(TEXT_992);
d4182 1
a4182 1
    stringBuffer.append(TEXT_993);
d4184 1
a4184 1
    stringBuffer.append(TEXT_994);
d4186 1
a4186 1
    stringBuffer.append(TEXT_995);
d4188 3
a4190 3
    stringBuffer.append(TEXT_996);
    stringBuffer.append(TEXT_997);
    stringBuffer.append(TEXT_998);
d4192 1
a4192 1
    stringBuffer.append(TEXT_999);
d4194 1
a4194 1
    stringBuffer.append(TEXT_1000);
d4199 1
a4199 1
    stringBuffer.append(TEXT_1001);
d4201 1
a4201 1
    stringBuffer.append(TEXT_1002);
d4205 1
a4205 1
    stringBuffer.append(TEXT_1003);
d4212 1
a4212 1
    stringBuffer.append(TEXT_1004);
d4214 1
a4214 1
    stringBuffer.append(TEXT_1005);
d4216 2
a4217 27
    stringBuffer.append(TEXT_1006);
    stringBuffer.append(TEXT_1007);
    stringBuffer.append(TEXT_1008);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_1009);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
    stringBuffer.append(TEXT_1010);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_1011);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
    stringBuffer.append(TEXT_1012);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1013);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_1014);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1015);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1016);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.RemoveNotationalElementCommand"));
    stringBuffer.append(TEXT_1017);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1018);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_1019);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1020);
d4220 4
a4223 33
TypeModelFacet facet = genNode.getModelFacet();
GenFeature childFeature = facet.getChildMetaFeature();
GenFeature containmentFeature = facet.getContainmentMetaFeature();
if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {

    stringBuffer.append(TEXT_1021);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1022);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1023);
    
	if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1024);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1025);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1026);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1027);
    
	} else {

    stringBuffer.append(TEXT_1028);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1029);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1030);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1031);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1032);
    
d4225 1
d4227 5
a4232 50
	if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1033);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1034);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1035);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1036);
    
	} else {

    stringBuffer.append(TEXT_1037);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1038);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1039);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1040);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1041);
    
	}

    stringBuffer.append(TEXT_1042);
    
} else {
	if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1043);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1044);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1045);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1046);
    
	} else {

    stringBuffer.append(TEXT_1047);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1048);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1049);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1050);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1051);
    
	}
a4234 4
    stringBuffer.append(TEXT_1052);
    
}	/*restrict local vars used in component edit policy*/

d4242 2
a4243 2
    stringBuffer.append(TEXT_1053);
    stringBuffer.append(TEXT_1054);
d4245 1
a4245 1
    stringBuffer.append(TEXT_1055);
d4247 1
a4247 1
    stringBuffer.append(TEXT_1056);
d4249 3
a4251 3
    stringBuffer.append(TEXT_1057);
    stringBuffer.append(TEXT_1058);
    stringBuffer.append(TEXT_1059);
d4253 1
a4253 1
    stringBuffer.append(TEXT_1060);
d4255 1
a4255 1
    stringBuffer.append(TEXT_1061);
d4259 1
a4259 1
    stringBuffer.append(TEXT_1062);
d4261 1
a4261 1
    stringBuffer.append(TEXT_1063);
d4267 1
a4267 1
    stringBuffer.append(TEXT_1064);
d4269 1
a4269 1
    stringBuffer.append(TEXT_1065);
d4273 1
a4273 1
    stringBuffer.append(TEXT_1066);
d4277 1
a4277 1
    stringBuffer.append(TEXT_1067);
d4279 1
a4279 1
    stringBuffer.append(TEXT_1068);
d4281 1
a4281 1
    stringBuffer.append(TEXT_1069);
d4283 1
a4283 1
    stringBuffer.append(TEXT_1070);
d4285 1
a4285 1
    stringBuffer.append(TEXT_1071);
d4287 1
a4287 1
    stringBuffer.append(TEXT_1072);
d4291 1
a4291 1
    stringBuffer.append(TEXT_1073);
d4295 1
a4295 1
    stringBuffer.append(TEXT_1074);
d4297 1
a4297 1
    stringBuffer.append(TEXT_1075);
d4299 1
a4299 1
    stringBuffer.append(TEXT_1076);
d4301 1
a4301 1
    stringBuffer.append(TEXT_1077);
d4303 1
a4303 1
    stringBuffer.append(TEXT_1078);
d4305 1
a4305 1
    stringBuffer.append(TEXT_1079);
d4307 1
a4307 1
    stringBuffer.append(TEXT_1080);
d4309 1
a4309 1
    stringBuffer.append(TEXT_1081);
d4311 1
a4311 1
    stringBuffer.append(TEXT_1082);
d4313 1
a4313 1
    stringBuffer.append(TEXT_1083);
d4315 1
a4315 1
    stringBuffer.append(TEXT_1084);
d4317 1
a4317 1
    stringBuffer.append(TEXT_1085);
d4319 1
a4319 1
    stringBuffer.append(TEXT_1086);
d4321 1
a4321 1
    stringBuffer.append(TEXT_1087);
d4328 1
a4328 1
    stringBuffer.append(TEXT_1088);
d4331 1
a4331 1
    stringBuffer.append(TEXT_1089);
d4333 1
a4333 1
    stringBuffer.append(TEXT_1090);
d4335 1
a4335 1
    stringBuffer.append(TEXT_1091);
d4337 1
a4337 1
    stringBuffer.append(TEXT_1092);
d4339 1
a4339 1
    stringBuffer.append(TEXT_1093);
d4341 1
a4341 1
    stringBuffer.append(TEXT_1094);
d4343 1
a4343 1
    stringBuffer.append(TEXT_1095);
d4345 1
a4345 1
    stringBuffer.append(TEXT_1096);
d4349 1
a4349 1
    stringBuffer.append(TEXT_1097);
d4352 1
a4352 1
    stringBuffer.append(TEXT_1098);
d4354 1
a4354 1
    stringBuffer.append(TEXT_1099);
d4356 1
a4356 1
    stringBuffer.append(TEXT_1100);
d4358 1
a4358 1
    stringBuffer.append(TEXT_1101);
d4360 1
a4360 1
    stringBuffer.append(TEXT_1102);
d4362 1
a4362 1
    stringBuffer.append(TEXT_1103);
d4366 1
a4366 1
    stringBuffer.append(TEXT_1104);
d4368 1
a4368 1
    stringBuffer.append(TEXT_1105);
d4370 1
a4370 1
    stringBuffer.append(TEXT_1106);
d4377 1
a4377 1
    stringBuffer.append(TEXT_1107);
d4381 1
a4381 1
    stringBuffer.append(TEXT_1108);
d4385 1
a4385 1
    stringBuffer.append(TEXT_1109);
d4389 2
a4390 2
    stringBuffer.append(TEXT_1110);
    stringBuffer.append(TEXT_1111);
d4392 1
a4392 1
    stringBuffer.append(TEXT_1112);
d4394 1
a4394 1
    stringBuffer.append(TEXT_1113);
d4396 1
a4396 1
    stringBuffer.append(TEXT_1114);
d4398 1
a4398 1
    stringBuffer.append(TEXT_1115);
d4400 1
a4400 1
    stringBuffer.append(TEXT_1116);
d4402 1
a4402 1
    stringBuffer.append(TEXT_1117);
d4404 1
a4404 1
    stringBuffer.append(TEXT_1118);
d4406 1
a4406 1
    stringBuffer.append(TEXT_1119);
d4408 1
a4408 1
    stringBuffer.append(TEXT_1120);
d4410 1
a4410 1
    stringBuffer.append(TEXT_1121);
d4412 1
a4412 1
    stringBuffer.append(TEXT_1122);
d4416 3
a4418 3
    stringBuffer.append(TEXT_1123);
    stringBuffer.append(TEXT_1124);
    stringBuffer.append(TEXT_1125);
d4420 1
a4420 1
    stringBuffer.append(TEXT_1126);
d4422 1
a4422 1
    stringBuffer.append(TEXT_1127);
d4426 1
a4426 1
    stringBuffer.append(TEXT_1128);
d4428 1
a4428 1
    stringBuffer.append(TEXT_1129);
d4430 1
a4430 1
    stringBuffer.append(TEXT_1130);
d4432 1
a4432 1
    stringBuffer.append(TEXT_1131);
d4434 1
a4434 1
    stringBuffer.append(TEXT_1132);
d4436 1
a4436 1
    stringBuffer.append(TEXT_1133);
d4438 1
a4438 1
    stringBuffer.append(TEXT_1134);
d4440 1
a4440 1
    stringBuffer.append(TEXT_1135);
d4442 1
a4442 1
    stringBuffer.append(TEXT_1136);
d4444 1
a4444 1
    stringBuffer.append(TEXT_1137);
d4448 1
a4448 1
    stringBuffer.append(TEXT_1138);
d4457 1
a4457 1
    stringBuffer.append(TEXT_1139);
d4459 1
a4459 1
    stringBuffer.append(TEXT_1140);
d4461 1
a4461 1
    stringBuffer.append(TEXT_1141);
d4472 1
a4472 1
    stringBuffer.append(TEXT_1142);
d4474 1
a4474 1
    stringBuffer.append(TEXT_1143);
d4476 1
a4476 1
    stringBuffer.append(TEXT_1144);
d4484 1
a4484 1
    stringBuffer.append(TEXT_1145);
d4486 1
a4486 1
    stringBuffer.append(TEXT_1146);
d4488 1
a4488 1
    stringBuffer.append(TEXT_1147);
d4490 1
a4490 1
    stringBuffer.append(TEXT_1148);
d4492 1
a4492 1
    stringBuffer.append(TEXT_1149);
d4494 1
a4494 1
    stringBuffer.append(TEXT_1150);
d4496 1
a4496 1
    stringBuffer.append(TEXT_1151);
d4498 1
a4498 1
    stringBuffer.append(TEXT_1152);
d4500 1
a4500 1
    stringBuffer.append(TEXT_1153);
d4502 1
a4502 1
    stringBuffer.append(TEXT_1154);
d4504 1
a4504 1
    stringBuffer.append(TEXT_1155);
d4509 1
a4509 1
    stringBuffer.append(TEXT_1156);
d4511 1
a4511 1
    stringBuffer.append(TEXT_1157);
d4519 1
a4519 1
    stringBuffer.append(TEXT_1158);
d4521 1
a4521 1
    stringBuffer.append(TEXT_1159);
d4525 1
a4525 1
    stringBuffer.append(TEXT_1160);
d4527 1
a4527 1
    stringBuffer.append(TEXT_1161);
@


1.39
log
@Fixed inselectability of child editparts caused by validation decoration managers
@
text
@d335 10
a344 10
  protected final String TEXT_314 = " child) {";
  protected final String TEXT_315 = NL + "\t\t\t\tif (isDirectChild(child)) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_316 = " result = child.getEditPolicy(";
  protected final String TEXT_317 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t\t}";
  protected final String TEXT_318 = NL + "\t\t\t\treturn new ";
  protected final String TEXT_319 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_320 = " getTargetEditPart(";
  protected final String TEXT_321 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_322 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_323 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
d2267 1
a2267 3
    
if (!genNode.getChildNodes().isEmpty()) {

a2270 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_317);
d2272 1
a2272 1
}
d2274 2
d2277 1
a2277 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d2279 1
a2279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d2281 1
a2281 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d2283 1
a2283 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d2285 3
a2287 1
    stringBuffer.append(genNode.getEditPartClassName());
@


1.38
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@d481 1
a481 1
  protected final String TEXT_460 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tmyDecorationManager = createDecorationManager(decorationShape);" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
@


1.37
log
@Default label text should be displayed instead of the "null" string when the corresponding feature is not set;
It should be possible to unset the value of a feature using a diagram label;
Fixed compilation errors when a label is not feature-based
@
text
@d48 17
a64 17
  protected final String TEXT_27 = " {";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_30 = ";";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_32 = " contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_33 = " primaryShape;" + NL;
  protected final String TEXT_34 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_35 = " childNodesPane;";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_37 = "(";
  protected final String TEXT_38 = " model) {" + NL + "\t\tassert model instanceof ";
  protected final String TEXT_39 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL;
  protected final String TEXT_40 = NL;
  protected final String TEXT_41 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_42 = " view = (";
  protected final String TEXT_43 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
d66 141
a206 141
  protected final String TEXT_45 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_46 = NL;
  protected final String TEXT_47 = "\t\tinstallEditPolicy(";
  protected final String TEXT_48 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_49 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_50 = " createDeleteCommand(";
  protected final String TEXT_51 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_52 = " editingDomain = ";
  protected final String TEXT_53 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_54 = " cc = new ";
  protected final String TEXT_55 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_56 = "((";
  protected final String TEXT_57 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_58 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_59 = " editingDomain) {";
  protected final String TEXT_60 = NL + "\t\t\t\t";
  protected final String TEXT_61 = " result = new ";
  protected final String TEXT_62 = "();";
  protected final String TEXT_63 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_64 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_65 = ".eINSTANCE.get";
  protected final String TEXT_66 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_67 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_68 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_69 = ".eINSTANCE.get";
  protected final String TEXT_70 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_71 = ".UNSET_VALUE));";
  protected final String TEXT_72 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_73 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_74 = ".eINSTANCE.get";
  protected final String TEXT_75 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_76 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_77 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_78 = ".eINSTANCE.get";
  protected final String TEXT_79 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_80 = ".UNSET_VALUE));";
  protected final String TEXT_81 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_82 = NL + "\t\t\t\treturn ";
  protected final String TEXT_83 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_84 = ".eINSTANCE.get";
  protected final String TEXT_85 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_86 = NL + "\t\t\t\treturn ";
  protected final String TEXT_87 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_88 = ".eINSTANCE.get";
  protected final String TEXT_89 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_90 = ".UNSET_VALUE);";
  protected final String TEXT_91 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_92 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_93 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_94 = "() {";
  protected final String TEXT_95 = NL;
  protected final String TEXT_96 = NL + "protected Command createAddCommand(final ";
  protected final String TEXT_97 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_98 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_99 = " childNode = (";
  protected final String TEXT_100 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_101 = " editingDomain = ";
  protected final String TEXT_102 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_103 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_104 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int visualID = ";
  protected final String TEXT_105 = ".getVisualID(childNode);" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_106 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_107 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_108 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_109 = NL + "\t\t\tcase ";
  protected final String TEXT_110 = ".VISUAL_ID:" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t";
  protected final String TEXT_111 = " result = new ";
  protected final String TEXT_112 = "();" + NL + "\t\t\t\t\t";
  protected final String TEXT_113 = " element = childNode.getElement();";
  protected final String TEXT_114 = NL + "\t\t\t\t\tswitch (visualID) {";
  protected final String TEXT_115 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_116 = ".VISUAL_ID:";
  protected final String TEXT_117 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_118 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_119 = ".eINSTANCE.get";
  protected final String TEXT_120 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_121 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_122 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_123 = ".eINSTANCE.get";
  protected final String TEXT_124 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_125 = ".UNSET_VALUE));";
  protected final String TEXT_126 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_127 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_128 = ".eINSTANCE.get";
  protected final String TEXT_129 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_130 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_131 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_132 = ".eINSTANCE.get";
  protected final String TEXT_133 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_134 = ".UNSET_VALUE));";
  protected final String TEXT_135 = NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_136 = NL + "\t\t\t\t\t}\t";
  protected final String TEXT_137 = NL;
  protected final String TEXT_138 = NL + "\t\tif (";
  protected final String TEXT_139 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_140 = NL + "\t\t}";
  protected final String TEXT_141 = NL + "\t\tif (";
  protected final String TEXT_142 = ".size() >= ";
  protected final String TEXT_143 = ".eINSTANCE.get";
  protected final String TEXT_144 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_145 = NL + "\t\t}";
  protected final String TEXT_146 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_147 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_148 = ".getElement(), ";
  protected final String TEXT_149 = ".eINSTANCE.get";
  protected final String TEXT_150 = "(), element));";
  protected final String TEXT_151 = NL;
  protected final String TEXT_152 = NL + "\t\tif (";
  protected final String TEXT_153 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_154 = NL + "\t\t}";
  protected final String TEXT_155 = NL + "\t\tif (";
  protected final String TEXT_156 = ".size() >= ";
  protected final String TEXT_157 = ".eINSTANCE.get";
  protected final String TEXT_158 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_159 = NL + "\t\t}";
  protected final String TEXT_160 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_161 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_162 = ".getElement(), ";
  protected final String TEXT_163 = ".eINSTANCE.get";
  protected final String TEXT_164 = "(), element));";
  protected final String TEXT_165 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_166 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_167 = "(";
  protected final String TEXT_168 = "));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_169 = ".create(editingDomain, ";
  protected final String TEXT_170 = ", ";
  protected final String TEXT_171 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_172 = "(childNode, ";
  protected final String TEXT_173 = "null";
  protected final String TEXT_174 = "(";
  protected final String TEXT_175 = ") constraint";
  protected final String TEXT_176 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_177 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_178 = "(";
  protected final String TEXT_179 = ", element, ";
  protected final String TEXT_180 = "null";
  protected final String TEXT_181 = "((";
  protected final String TEXT_182 = ") constraint).getCopy().union(new ";
  protected final String TEXT_183 = "(";
  protected final String TEXT_184 = ", ";
  protected final String TEXT_185 = "))";
d208 76
a283 76
  protected final String TEXT_187 = ".INSTANCE));";
  protected final String TEXT_188 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_189 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_190 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_191 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_192 = NL;
  protected final String TEXT_193 = NL + "protected ";
  protected final String TEXT_194 = " getCloneCommand(";
  protected final String TEXT_195 = " request) {" + NL + "\t";
  protected final String TEXT_196 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_197 = " command = new ";
  protected final String TEXT_198 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_199 = " childPart;" + NL + "\t";
  protected final String TEXT_200 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_201 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_202 = " createCloneCommand(final ";
  protected final String TEXT_203 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_204 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_205 = " childNode = (";
  protected final String TEXT_206 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_207 = " editingDomain = ";
  protected final String TEXT_208 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_209 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_210 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_211 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_212 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_213 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_214 = NL + "\t\t\tcase ";
  protected final String TEXT_215 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_216 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_217 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_218 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_219 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_220 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_221 = NL;
  protected final String TEXT_222 = NL + "\t\tif (";
  protected final String TEXT_223 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_224 = NL + "\t\t}";
  protected final String TEXT_225 = NL + "\t\tif (";
  protected final String TEXT_226 = ".size() >= ";
  protected final String TEXT_227 = ".eINSTANCE.get";
  protected final String TEXT_228 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_229 = NL + "\t\t}";
  protected final String TEXT_230 = NL;
  protected final String TEXT_231 = NL + "\t\tif (";
  protected final String TEXT_232 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_233 = NL + "\t\t}";
  protected final String TEXT_234 = NL + "\t\tif (";
  protected final String TEXT_235 = ".size() >= ";
  protected final String TEXT_236 = ".eINSTANCE.get";
  protected final String TEXT_237 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_238 = NL + "\t\t}";
  protected final String TEXT_239 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_240 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_241 = " result = (";
  protected final String TEXT_242 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_243 = "();";
  protected final String TEXT_244 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_245 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_246 = ".getElement(), ";
  protected final String TEXT_247 = ".eINSTANCE.get";
  protected final String TEXT_248 = "(), result));";
  protected final String TEXT_249 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_250 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_251 = ".getElement(), ";
  protected final String TEXT_252 = ".eINSTANCE.get";
  protected final String TEXT_253 = "(), result));";
  protected final String TEXT_254 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_255 = "(";
  protected final String TEXT_256 = ", result, ";
  protected final String TEXT_257 = "null";
  protected final String TEXT_258 = "((";
  protected final String TEXT_259 = ") constraint).getCopy().union(new ";
  protected final String TEXT_260 = "(";
  protected final String TEXT_261 = ", ";
  protected final String TEXT_262 = "))";
d285 181
a465 181
  protected final String TEXT_264 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_265 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_266 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_267 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_268 = NL + "\t\t\tprotected ";
  protected final String TEXT_269 = " getCreateCommand(";
  protected final String TEXT_270 = " request) {";
  protected final String TEXT_271 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_272 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_273 = " requestEx = (";
  protected final String TEXT_274 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_275 = " result = new ";
  protected final String TEXT_276 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_277 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_278 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_279 = "((View) getModel(), requestEx";
  protected final String TEXT_280 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_281 = ")getConstraintFor(request)";
  protected final String TEXT_282 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_283 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_284 = "(";
  protected final String TEXT_285 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_286 = NL + "\t\t\t\treturn ";
  protected final String TEXT_287 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_288 = NL + "\t\t\tprotected ";
  protected final String TEXT_289 = " createChangeConstraintCommand(final ";
  protected final String TEXT_290 = " request, final ";
  protected final String TEXT_291 = " child, Object constraint) {" + NL + "\t\t\t\tif (!isDirectChild(child)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_292 = ".INSTANCE;" + NL + "\t\t\t\t}";
  protected final String TEXT_293 = NL;
  protected final String TEXT_294 = "\t\t\t\tfinal ";
  protected final String TEXT_295 = " node = (";
  protected final String TEXT_296 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_297 = " emfCommand = new ";
  protected final String TEXT_298 = "(node, request, ((";
  protected final String TEXT_299 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_300 = "(";
  protected final String TEXT_301 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_302 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_303 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_304 = NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_305 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_306 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_307 = " createChangeConstraintCommand(";
  protected final String TEXT_308 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_309 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_310 = NL + "\t\t\tprotected ";
  protected final String TEXT_311 = " createChildEditPolicy(";
  protected final String TEXT_312 = " child) {";
  protected final String TEXT_313 = NL + "\t\t\t\tif (isDirectChild(child)) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_314 = " result = child.getEditPolicy(";
  protected final String TEXT_315 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t\t}";
  protected final String TEXT_316 = NL + "\t\t\t\treturn new ";
  protected final String TEXT_317 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_318 = " getTargetEditPart(";
  protected final String TEXT_319 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_320 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_321 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_322 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_323 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_324 = " getReconnectTargetCommand(";
  protected final String TEXT_325 = " request) {";
  protected final String TEXT_326 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_327 = ".INSTANCE;";
  protected final String TEXT_328 = NL + "\t\t\t\t";
  protected final String TEXT_329 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_330 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_331 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_332 = " edge = (";
  protected final String TEXT_333 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_334 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_335 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_336 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_337 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_338 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_339 = NL + "\t\t\t\tcase ";
  protected final String TEXT_340 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_341 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_342 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_343 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_344 = "(";
  protected final String TEXT_345 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_346 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_347 = " getReconnectSourceCommand(";
  protected final String TEXT_348 = " request) {";
  protected final String TEXT_349 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_350 = ".INSTANCE;";
  protected final String TEXT_351 = NL + "\t\t\t\t";
  protected final String TEXT_352 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_353 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_354 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_355 = " edge = (";
  protected final String TEXT_356 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_357 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_358 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_359 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_360 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_361 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_362 = NL + "\t\t\t\tcase ";
  protected final String TEXT_363 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_364 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_365 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_366 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_367 = "(";
  protected final String TEXT_368 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_369 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_370 = " getConnectionCreateCommand(";
  protected final String TEXT_371 = " request) {";
  protected final String TEXT_372 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_373 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_374 = " requestEx = (";
  protected final String TEXT_375 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_376 = " result = new ";
  protected final String TEXT_377 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_378 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_379 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_380 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_381 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (!result.canExecute()) {" + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_382 = " wrappedResult = new ";
  protected final String TEXT_383 = "(";
  protected final String TEXT_384 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_385 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_386 = " getConnectionCompleteCommand(";
  protected final String TEXT_387 = " request) {";
  protected final String TEXT_388 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_389 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_390 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_391 = " requestEx = (";
  protected final String TEXT_392 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_393 = " result = new ";
  protected final String TEXT_394 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_395 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_396 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_397 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_398 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_399 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_400 = "(";
  protected final String TEXT_401 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_402 = NL + "\t\t\t\treturn ";
  protected final String TEXT_403 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_404 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_405 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_406 = "());";
  protected final String TEXT_407 = NL;
  protected final String TEXT_408 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_409 = "\", new ";
  protected final String TEXT_410 = "()); //$NON-NLS-1$";
  protected final String TEXT_411 = NL;
  protected final String TEXT_412 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_413 = ".OPEN_ROLE";
  protected final String TEXT_414 = " + \"";
  protected final String TEXT_415 = "\" ";
  protected final String TEXT_416 = ", new ";
  protected final String TEXT_417 = "());";
  protected final String TEXT_418 = NL + "\t\tinstallEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());";
  protected final String TEXT_419 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_420 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_421 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_422 = " getPrimaryDragEditPolicy() {";
  protected final String TEXT_423 = NL + "\t\treturn new ";
  protected final String TEXT_424 = "();";
  protected final String TEXT_425 = NL + "\t\t";
  protected final String TEXT_426 = " result = new ";
  protected final String TEXT_427 = "();";
  protected final String TEXT_428 = NL + "\t\t";
  protected final String TEXT_429 = " result = new ";
  protected final String TEXT_430 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_431 = " createSelectionHandles() {" + NL + "\t\t\t\t";
  protected final String TEXT_432 = " result = super.createSelectionHandles();" + NL + "\t\t\t\tfor(";
  protected final String TEXT_433 = " it = getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_434 = " next = (";
  protected final String TEXT_435 = ") it.next();" + NL + "\t\t\t\t\t";
  protected final String TEXT_436 = " nextView = (";
  protected final String TEXT_437 = ") next.getModel();" + NL + "\t\t\t\t\tswitch (";
  protected final String TEXT_438 = ".getVisualID(nextView)) {";
  protected final String TEXT_439 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_440 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\tresult.addAll(((";
  protected final String TEXT_441 = ") next).createSelectionHandles());" + NL + "\t\t\t\t\t\tbreak;";
  protected final String TEXT_442 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_443 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_444 = ".NONE);";
d467 196
a662 196
  protected final String TEXT_446 = ".";
  protected final String TEXT_447 = " | ";
  protected final String TEXT_448 = ");";
  protected final String TEXT_449 = NL + "\t\treturn result;";
  protected final String TEXT_450 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_451 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_452 = " invisibleRectangle = new ";
  protected final String TEXT_453 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_454 = "());" + NL + "\t\t";
  protected final String TEXT_455 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_456 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_457 = NL + NL + "\t\t";
  protected final String TEXT_458 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL;
  protected final String TEXT_459 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_460 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_461 = " result = new ";
  protected final String TEXT_462 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_463 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_464 = " createNodeShape() {";
  protected final String TEXT_465 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_466 = "()";
  protected final String TEXT_467 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_468 = ";";
  protected final String TEXT_469 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_470 = ";";
  protected final String TEXT_471 = NL + "\t\t";
  protected final String TEXT_472 = " figure = new ";
  protected final String TEXT_473 = "();";
  protected final String TEXT_474 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_475 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_476 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_477 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_478 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_479 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_480 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_481 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_482 = " view = (";
  protected final String TEXT_483 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_484 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_485 = " decorationPane = new ";
  protected final String TEXT_486 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_487 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_488 = " imageFigure = new ";
  protected final String TEXT_489 = "(";
  protected final String TEXT_490 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_491 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_492 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_493 = " setupContentPane(";
  protected final String TEXT_494 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_495 = NL + "\t\t\t";
  protected final String TEXT_496 = " layout = new ";
  protected final String TEXT_497 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_498 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_499 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_500 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_501 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_502 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_503 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_504 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_505 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_506 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_507 = " childEditPart) {";
  protected final String TEXT_508 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_509 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_510 = ") childEditPart).";
  protected final String TEXT_511 = "(getPrimaryShape().";
  protected final String TEXT_512 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_513 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_514 = ") {" + NL + "\t\t\t";
  protected final String TEXT_515 = " pane = getPrimaryShape().";
  protected final String TEXT_516 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_517 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_518 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_519 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_520 = ") {" + NL + "\t\t\t";
  protected final String TEXT_521 = " pane = getPrimaryShape().";
  protected final String TEXT_522 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_523 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_524 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_525 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_526 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_527 = NL + "\t\tfor(";
  protected final String TEXT_528 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_529 = " nextChild = (";
  protected final String TEXT_530 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_531 = ".getVisualID(nextChild) == ";
  protected final String TEXT_532 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_533 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_534 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_535 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_536 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_537 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_538 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_539 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_540 = NL;
  protected final String TEXT_541 = "if (";
  protected final String TEXT_542 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_543 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_544 = " getLabelEditPart(";
  protected final String TEXT_545 = " req) {" + NL + "\t\t";
  protected final String TEXT_546 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_547 = " view = (";
  protected final String TEXT_548 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_549 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_550 = NL + "\t\t\t\tcase ";
  protected final String TEXT_551 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_552 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_553 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_554 = " childEditPart) {";
  protected final String TEXT_555 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_556 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_557 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_558 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_559 = " root = (";
  protected final String TEXT_560 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_561 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_562 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_563 = " childEditPart) {";
  protected final String TEXT_564 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_565 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_566 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_567 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_568 = " childEditPart, int index) {";
  protected final String TEXT_569 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_570 = " labelFigure = ((";
  protected final String TEXT_571 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_572 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_573 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_574 = " childFigure = ((";
  protected final String TEXT_575 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_576 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_577 = " childEditPart) {";
  protected final String TEXT_578 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_579 = " labelFigure = ((";
  protected final String TEXT_580 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_581 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_582 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_583 = " childFigure = ((";
  protected final String TEXT_584 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_585 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_586 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_587 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_588 = " childEditPart = (";
  protected final String TEXT_589 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_590 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_591 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_592 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_593 = ";" + NL + "\t\t";
  protected final String TEXT_594 = " bounds = (";
  protected final String TEXT_595 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_596 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_597 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_598 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_599 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_600 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_601 = " getSourceConnectionAnchor(";
  protected final String TEXT_602 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_603 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_604 = " getSourceConnectionAnchor(";
  protected final String TEXT_605 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_606 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_607 = "  getTargetConnectionAnchor(";
  protected final String TEXT_608 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_609 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_610 = "  getTargetConnectionAnchor(";
  protected final String TEXT_611 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_612 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_613 = NL + "\t\tif (";
  protected final String TEXT_614 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_615 = "(this);" + NL + "\t\t}";
  protected final String TEXT_616 = NL + "\t\tif (";
  protected final String TEXT_617 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_618 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_619 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_620 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_621 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_622 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_623 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_624 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_625 = NL;
  protected final String TEXT_626 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_627 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_628 = " domainModelEditDomain = ";
  protected final String TEXT_629 = ".getEditingDomain(";
  protected final String TEXT_630 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_631 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_632 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_633 = " {";
  protected final String TEXT_634 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_635 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_636 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_637 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_638 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_639 = " createFilter() {";
  protected final String TEXT_640 = NL + "\t\t\t";
  protected final String TEXT_641 = " filter = ";
d665 6
a670 6
  protected final String TEXT_644 = "());";
  protected final String TEXT_645 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_646 = ".createFeatureFilter(";
  protected final String TEXT_647 = ".eINSTANCE.get";
  protected final String TEXT_648 = "()));";
  protected final String TEXT_649 = NL + "\t\t\tfilter = filter.and(";
d672 93
a764 93
  protected final String TEXT_651 = ".getElement()));";
  protected final String TEXT_652 = NL + "\t\t\t";
  protected final String TEXT_653 = " filter = ";
  protected final String TEXT_654 = ".createNotifierFilter(";
  protected final String TEXT_655 = ".getElement());";
  protected final String TEXT_656 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_657 = NL + "\t\t\t";
  protected final String TEXT_658 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_659 = NL + "\t\t\t";
  protected final String TEXT_660 = " filter = ";
  protected final String TEXT_661 = ".NOT_TOUCH;";
  protected final String TEXT_662 = NL + "\t\t\treturn filter;";
  protected final String TEXT_663 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_664 = " getCreateNotationalElementCommand(";
  protected final String TEXT_665 = " descriptor) {";
  protected final String TEXT_666 = NL;
  protected final String TEXT_667 = "\t\t\t";
  protected final String TEXT_668 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_669 = NL + "\t\t\tcase ";
  protected final String TEXT_670 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_671 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_672 = "(";
  protected final String TEXT_673 = ", domainElement, ";
  protected final String TEXT_674 = "new ";
  protected final String TEXT_675 = "(0, 0, ";
  protected final String TEXT_676 = ", ";
  protected final String TEXT_677 = ")";
  protected final String TEXT_678 = NL + "null";
  protected final String TEXT_679 = ", ";
  protected final String TEXT_680 = ".INSTANCE, false);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_681 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_682 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_683 = " getSemanticChildNodes() {";
  protected final String TEXT_684 = NL;
  protected final String TEXT_685 = NL + "\treturn ";
  protected final String TEXT_686 = ".EMPTY_LIST;";
  protected final String TEXT_687 = NL + "\t";
  protected final String TEXT_688 = " result = new ";
  protected final String TEXT_689 = "();";
  protected final String TEXT_690 = NL + "\t";
  protected final String TEXT_691 = " viewObject = ";
  protected final String TEXT_692 = ";" + NL + "\t";
  protected final String TEXT_693 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_694 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_695 = NL + "\tfor(";
  protected final String TEXT_696 = " it = ";
  protected final String TEXT_697 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_698 = ") it.next();";
  protected final String TEXT_699 = NL + "\tnextValue = (";
  protected final String TEXT_700 = ")";
  protected final String TEXT_701 = ";";
  protected final String TEXT_702 = NL + "\tnodeVID = ";
  protected final String TEXT_703 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_704 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_705 = NL + "\tcase ";
  protected final String TEXT_706 = ".VISUAL_ID: {";
  protected final String TEXT_707 = NL + "\tif (";
  protected final String TEXT_708 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_709 = NL + "\t\tresult.add(new ";
  protected final String TEXT_710 = "(nextValue, nodeVID));";
  protected final String TEXT_711 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_712 = NL + "\t\t}";
  protected final String TEXT_713 = NL + "\t}";
  protected final String TEXT_714 = NL + "\t}";
  protected final String TEXT_715 = NL + "\treturn result;";
  protected final String TEXT_716 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_717 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_718 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_719 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_720 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_721 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_722 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_723 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_724 = " domainModelEditDomain = ";
  protected final String TEXT_725 = ".getEditingDomain(";
  protected final String TEXT_726 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_727 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_728 = NL;
  protected final String TEXT_729 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_730 = " domainModelEditDomain = ";
  protected final String TEXT_731 = ".getEditingDomain(";
  protected final String TEXT_732 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_733 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_734 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_735 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_736 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_737 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_738 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_739 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_740 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_741 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_742 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_743 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
d766 1
a766 1
  protected final String TEXT_745 = ".SET).or(" + NL + "\t\t\t\t";
d768 10
a777 10
  protected final String TEXT_747 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_748 = ".createEventTypeFilter(";
  protected final String TEXT_749 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_750 = ".createEventTypeFilter(";
  protected final String TEXT_751 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_752 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_753 = " createFilter() {";
  protected final String TEXT_754 = NL;
  protected final String TEXT_755 = NL + "\t\t\t";
  protected final String TEXT_756 = " filter = ";
d780 8
a787 8
  protected final String TEXT_759 = "());";
  protected final String TEXT_760 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_761 = ".createFeatureFilter(";
  protected final String TEXT_762 = ".eINSTANCE.get";
  protected final String TEXT_763 = "()));";
  protected final String TEXT_764 = NL;
  protected final String TEXT_765 = NL + "\t\t\t";
  protected final String TEXT_766 = " filter = ";
d790 8
a797 8
  protected final String TEXT_769 = "());";
  protected final String TEXT_770 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_771 = ".createFeatureFilter(";
  protected final String TEXT_772 = ".eINSTANCE.get";
  protected final String TEXT_773 = "()));";
  protected final String TEXT_774 = NL;
  protected final String TEXT_775 = NL + "\t\t\t";
  protected final String TEXT_776 = " filter = ";
d800 8
a807 8
  protected final String TEXT_779 = "());";
  protected final String TEXT_780 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_781 = ".createFeatureFilter(";
  protected final String TEXT_782 = ".eINSTANCE.get";
  protected final String TEXT_783 = "()));";
  protected final String TEXT_784 = NL;
  protected final String TEXT_785 = NL + "\t\t\t";
  protected final String TEXT_786 = " filter = ";
d810 24
a833 24
  protected final String TEXT_789 = "());";
  protected final String TEXT_790 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_791 = ".createFeatureFilter(";
  protected final String TEXT_792 = ".eINSTANCE.get";
  protected final String TEXT_793 = "()));";
  protected final String TEXT_794 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_795 = NL + "\t\t\t";
  protected final String TEXT_796 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_797 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_798 = NL + "\t\t\t";
  protected final String TEXT_799 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_800 = NL + "\t\t\t";
  protected final String TEXT_801 = " filter = ";
  protected final String TEXT_802 = ".NOT_TOUCH;";
  protected final String TEXT_803 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_804 = " getCreateNotationalElementCommand(";
  protected final String TEXT_805 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_806 = " linkDescriptor = (";
  protected final String TEXT_807 = ") descriptor;";
  protected final String TEXT_808 = NL;
  protected final String TEXT_809 = "\t\t\t";
  protected final String TEXT_810 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_811 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_812 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
d835 34
a868 34
  protected final String TEXT_814 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_815 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_816 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_817 = NL + "\t\t\tcase ";
  protected final String TEXT_818 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_819 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_820 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_821 = "(";
  protected final String TEXT_822 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_823 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_824 = " getSemanticChildLinks() {";
  protected final String TEXT_825 = NL;
  protected final String TEXT_826 = "\t";
  protected final String TEXT_827 = " result = new ";
  protected final String TEXT_828 = "();";
  protected final String TEXT_829 = NL + "\t";
  protected final String TEXT_830 = " modelObject = ";
  protected final String TEXT_831 = ".getElement();" + NL + "\t";
  protected final String TEXT_832 = " nextValue;";
  protected final String TEXT_833 = NL + "\tint linkVID;";
  protected final String TEXT_834 = NL + "\tfor(";
  protected final String TEXT_835 = " it = ";
  protected final String TEXT_836 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_837 = ") it.next();";
  protected final String TEXT_838 = NL + "\tnextValue = (";
  protected final String TEXT_839 = ")";
  protected final String TEXT_840 = ";";
  protected final String TEXT_841 = NL + "\tlinkVID = ";
  protected final String TEXT_842 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_843 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_844 = NL + "\tcase ";
  protected final String TEXT_845 = ".VISUAL_ID: {";
  protected final String TEXT_846 = NL + "\tif (";
  protected final String TEXT_847 = ".VISUAL_ID == linkVID) {";
d870 6
a875 6
  protected final String TEXT_849 = " source = (";
  protected final String TEXT_850 = ")";
  protected final String TEXT_851 = ";";
  protected final String TEXT_852 = NL + "\t\t";
  protected final String TEXT_853 = " source = ";
  protected final String TEXT_854 = ".getElement();";
d877 66
a942 66
  protected final String TEXT_856 = " target = (";
  protected final String TEXT_857 = ")";
  protected final String TEXT_858 = ";";
  protected final String TEXT_859 = NL + "\t\t";
  protected final String TEXT_860 = " target = ";
  protected final String TEXT_861 = ".getElement();";
  protected final String TEXT_862 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_863 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_864 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_865 = NL + "\t}";
  protected final String TEXT_866 = NL + "\t}";
  protected final String TEXT_867 = NL + "\t}";
  protected final String TEXT_868 = NL + "\tfor(";
  protected final String TEXT_869 = " it = ";
  protected final String TEXT_870 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_871 = ") it.next();";
  protected final String TEXT_872 = NL + "\tnextValue = (";
  protected final String TEXT_873 = ")";
  protected final String TEXT_874 = ";";
  protected final String TEXT_875 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_876 = NL + "\t\tresult.add(new ";
  protected final String TEXT_877 = "(modelObject, nextValue, null, ";
  protected final String TEXT_878 = ".VISUAL_ID));";
  protected final String TEXT_879 = NL + "\t}";
  protected final String TEXT_880 = NL + "\t}";
  protected final String TEXT_881 = NL + "\treturn result;";
  protected final String TEXT_882 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_883 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_884 = " result = new ";
  protected final String TEXT_885 = "();" + NL + "\t\t\t";
  protected final String TEXT_886 = " allLinks = ";
  protected final String TEXT_887 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_888 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_889 = " next = (";
  protected final String TEXT_890 = ") it.next();";
  protected final String TEXT_891 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_892 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_893 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_894 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_895 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_896 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_897 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_898 = ".VISUAL_ID:";
  protected final String TEXT_899 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_900 = NL + "\t\t\t\t} else {";
  protected final String TEXT_901 = NL + "\t\t\t\t}";
  protected final String TEXT_902 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_903 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_904 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_905 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_906 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_907 = ".VISUAL_ID:";
  protected final String TEXT_908 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_909 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_910 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_911 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_912 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_913 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_914 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_915 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_916 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_917 = " domainModelEditDomain = ";
  protected final String TEXT_918 = ".getEditingDomain(";
  protected final String TEXT_919 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_920 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_921 = NL;
d944 78
a1021 78
  protected final String TEXT_923 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_924 = " domainModelRefresher = new ";
  protected final String TEXT_925 = "(this);" + NL;
  protected final String TEXT_926 = NL;
  protected final String TEXT_927 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_928 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_929 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_930 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_931 = NL;
  protected final String TEXT_932 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_933 = NL + "\t\t";
  protected final String TEXT_934 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_935 = ") ";
  protected final String TEXT_936 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_937 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_938 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_939 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_940 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_941 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_942 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_943 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_944 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_945 = "\t" + NL + "\t}";
  protected final String TEXT_946 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_947 = " createdFont;";
  protected final String TEXT_948 = "\t" + NL;
  protected final String TEXT_949 = NL;
  protected final String TEXT_950 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_951 = " style = (";
  protected final String TEXT_952 = ")  ";
  protected final String TEXT_953 = ".getStyle(";
  protected final String TEXT_954 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_955 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_956 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_957 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_958 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_959 = " style = (";
  protected final String TEXT_960 = ")  ";
  protected final String TEXT_961 = ".getStyle(";
  protected final String TEXT_962 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_963 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_964 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_965 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_966 = " createdBackgroundColor;" + NL;
  protected final String TEXT_967 = NL;
  protected final String TEXT_968 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_969 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_970 = " feature, ";
  protected final String TEXT_971 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_972 = "();";
  protected final String TEXT_973 = NL;
  protected final String TEXT_974 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_975 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_976 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_977 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_978 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_979 = NL;
  protected final String TEXT_980 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_981 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_982 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_983 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_984 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_985 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_986 = NL;
  protected final String TEXT_987 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_988 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_989 = NL;
  protected final String TEXT_990 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_991 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_992 = NL;
  protected final String TEXT_993 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_994 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_995 = NL;
  protected final String TEXT_996 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_997 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_998 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_999 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_1000 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d1023 26
a1048 26
  protected final String TEXT_1002 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_1003 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_1004 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_1005 = NL;
  protected final String TEXT_1006 = NL;
  protected final String TEXT_1007 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1008 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_1009 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_1010 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_1011 = NL;
  protected final String TEXT_1012 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1013 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_1014 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_1015 = " createDeleteCommand(";
  protected final String TEXT_1016 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_1017 = " editingDomain = ";
  protected final String TEXT_1018 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_1019 = " cc = new ";
  protected final String TEXT_1020 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_1021 = "((";
  protected final String TEXT_1022 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_1023 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_1024 = " editingDomain) {";
  protected final String TEXT_1025 = NL + "\t\t\t\t";
  protected final String TEXT_1026 = " result = new ";
  protected final String TEXT_1027 = "();";
d1052 6
a1057 6
  protected final String TEXT_1031 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1032 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1033 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1034 = ".eINSTANCE.get";
  protected final String TEXT_1035 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1036 = ".UNSET_VALUE));";
d1061 7
a1067 7
  protected final String TEXT_1040 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1041 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1042 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1043 = ".eINSTANCE.get";
  protected final String TEXT_1044 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1045 = ".UNSET_VALUE));";
  protected final String TEXT_1046 = NL + "\t\t\t\treturn result;";
d1071 112
a1182 116
  protected final String TEXT_1050 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_1051 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1052 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1053 = ".eINSTANCE.get";
  protected final String TEXT_1054 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1055 = ".UNSET_VALUE);";
  protected final String TEXT_1056 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1057 = NL;
  protected final String TEXT_1058 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1059 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1060 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1061 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1062 = NL;
  protected final String TEXT_1063 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1064 = " getDirectEditCommand(";
  protected final String TEXT_1065 = " request) {";
  protected final String TEXT_1066 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_1067 = ".INSTANCE;";
  protected final String TEXT_1068 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1069 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_1070 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_1071 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1072 = "(";
  protected final String TEXT_1073 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1074 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1075 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1076 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1077 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1078 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1079 = " editingDomain = ";
  protected final String TEXT_1080 = ".getEditingDomain(";
  protected final String TEXT_1081 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1082 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1083 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1084 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1085 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1086 = " createDomainModelCommand(";
  protected final String TEXT_1087 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1088 = " element = ";
  protected final String TEXT_1089 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1090 = " result = new ";
  protected final String TEXT_1091 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1092 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1093 = " ";
  protected final String TEXT_1094 = "feature = (";
  protected final String TEXT_1095 = ") ";
  protected final String TEXT_1096 = ".eINSTANCE.get";
  protected final String TEXT_1097 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1098 = ".parseValue(feature, values[";
  protected final String TEXT_1099 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1100 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1101 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1102 = " ";
  protected final String TEXT_1103 = "values = new ";
  protected final String TEXT_1104 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1105 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1106 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1107 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1108 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1109 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_1110 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_1111 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1112 = NL + "\t\t\t\t});";
  protected final String TEXT_1113 = NL + "\t\t}" + NL;
  protected final String TEXT_1114 = NL;
  protected final String TEXT_1115 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1116 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1117 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1118 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1119 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1120 = "(this, ";
  protected final String TEXT_1121 = ".class, new ";
  protected final String TEXT_1122 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1123 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1124 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1125 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1126 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1127 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1128 = NL;
  protected final String TEXT_1129 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1130 = " domainModelRefresher = new ";
  protected final String TEXT_1131 = "(this);" + NL;
  protected final String TEXT_1132 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1133 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1134 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1135 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1136 = " nextChild = (";
  protected final String TEXT_1137 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1138 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1139 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1140 = ") ";
  protected final String TEXT_1141 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1142 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1143 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1144 = ".eINSTANCE.get";
  protected final String TEXT_1145 = "(), labelRefresher);";
  protected final String TEXT_1146 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1147 = ".eINSTANCE.get";
  protected final String TEXT_1148 = "(), labelRefresher);";
  protected final String TEXT_1149 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1150 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1151 = " result = new ";
  protected final String TEXT_1152 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1153 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1154 = " next = (";
  protected final String TEXT_1155 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_1156 = " style = (";
  protected final String TEXT_1157 = ") next.getStyle(";
  protected final String TEXT_1158 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1159 = ".getVisualID(next)) {";
  protected final String TEXT_1160 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1161 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1162 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1163 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1164 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1165 = NL;
d1480 2
a1483 1
    stringBuffer.append(TEXT_28);
d1485 1
d1487 1
a1487 1
    stringBuffer.append(TEXT_30);
a1488 2
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d1492 4
d1499 1
a1499 1
    stringBuffer.append(TEXT_34);
d1501 1
a1501 1
    stringBuffer.append(TEXT_35);
d1505 1
a1505 1
    stringBuffer.append(TEXT_36);
d1507 1
a1507 1
    stringBuffer.append(TEXT_37);
d1509 1
a1509 1
    stringBuffer.append(TEXT_38);
a1510 2
    stringBuffer.append(TEXT_39);
    stringBuffer.append(TEXT_40);
a1511 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1518 1
d1520 1
d1522 2
d1525 1
a1525 1
    stringBuffer.append(TEXT_48);
d1527 1
a1527 1
    stringBuffer.append(TEXT_49);
d1529 1
a1529 1
    stringBuffer.append(TEXT_50);
d1531 1
a1531 1
    stringBuffer.append(TEXT_51);
d1533 1
a1533 1
    stringBuffer.append(TEXT_52);
d1535 1
a1535 1
    stringBuffer.append(TEXT_53);
d1537 1
a1537 1
    stringBuffer.append(TEXT_54);
d1539 1
a1539 1
    stringBuffer.append(TEXT_55);
d1541 1
a1541 1
    stringBuffer.append(TEXT_56);
d1543 1
a1543 1
    stringBuffer.append(TEXT_57);
d1545 1
a1545 1
    stringBuffer.append(TEXT_58);
d1547 1
a1547 1
    stringBuffer.append(TEXT_59);
d1555 1
a1555 1
    stringBuffer.append(TEXT_60);
d1557 1
a1557 1
    stringBuffer.append(TEXT_61);
d1559 1
a1559 1
    stringBuffer.append(TEXT_62);
d1563 1
a1563 1
    stringBuffer.append(TEXT_63);
d1565 1
a1565 1
    stringBuffer.append(TEXT_64);
d1567 1
a1567 1
    stringBuffer.append(TEXT_65);
d1569 1
a1569 1
    stringBuffer.append(TEXT_66);
d1573 1
a1573 1
    stringBuffer.append(TEXT_67);
d1575 1
a1575 1
    stringBuffer.append(TEXT_68);
d1577 1
a1577 1
    stringBuffer.append(TEXT_69);
d1579 1
a1579 1
    stringBuffer.append(TEXT_70);
d1581 1
a1581 1
    stringBuffer.append(TEXT_71);
d1588 1
a1588 1
    stringBuffer.append(TEXT_72);
d1590 1
a1590 1
    stringBuffer.append(TEXT_73);
d1592 1
a1592 1
    stringBuffer.append(TEXT_74);
d1594 1
a1594 1
    stringBuffer.append(TEXT_75);
d1598 1
a1598 1
    stringBuffer.append(TEXT_76);
d1600 1
a1600 1
    stringBuffer.append(TEXT_77);
d1602 1
a1602 1
    stringBuffer.append(TEXT_78);
d1604 1
a1604 1
    stringBuffer.append(TEXT_79);
d1606 1
a1606 1
    stringBuffer.append(TEXT_80);
d1610 1
a1610 1
    stringBuffer.append(TEXT_81);
d1615 1
a1615 1
    stringBuffer.append(TEXT_82);
d1617 1
a1617 1
    stringBuffer.append(TEXT_83);
d1619 1
a1619 1
    stringBuffer.append(TEXT_84);
d1621 1
a1621 1
    stringBuffer.append(TEXT_85);
d1625 1
a1625 1
    stringBuffer.append(TEXT_86);
d1627 1
a1627 1
    stringBuffer.append(TEXT_87);
d1629 1
a1629 1
    stringBuffer.append(TEXT_88);
d1631 1
a1631 1
    stringBuffer.append(TEXT_89);
d1633 1
a1633 1
    stringBuffer.append(TEXT_90);
d1638 1
a1638 1
    stringBuffer.append(TEXT_91);
d1650 1
a1650 1
    stringBuffer.append(TEXT_92);
d1652 1
a1652 1
    stringBuffer.append(TEXT_93);
d1654 1
a1654 1
    stringBuffer.append(TEXT_94);
d1661 1
a1661 1
    stringBuffer.append(TEXT_95);
d1665 1
a1665 1
    stringBuffer.append(TEXT_96);
a1666 4
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1670 1
a1670 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1672 1
a1672 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1674 1
a1674 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1676 1
a1676 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1680 2
d1683 3
a1685 1
    stringBuffer.append(TEXT_106);
d1687 1
a1687 1
    stringBuffer.append(TEXT_107);
d1689 1
a1689 1
    stringBuffer.append(TEXT_108);
d1694 1
a1694 1
    stringBuffer.append(TEXT_109);
d1696 1
a1696 1
    stringBuffer.append(TEXT_110);
d1698 1
a1698 1
    stringBuffer.append(TEXT_111);
d1700 1
a1700 1
    stringBuffer.append(TEXT_112);
d1702 1
a1702 1
    stringBuffer.append(TEXT_113);
d1708 1
a1708 1
    stringBuffer.append(TEXT_114);
d1717 1
a1717 1
    stringBuffer.append(TEXT_115);
d1719 1
a1719 1
    stringBuffer.append(TEXT_116);
d1725 1
a1725 1
    stringBuffer.append(TEXT_117);
d1727 1
a1727 1
    stringBuffer.append(TEXT_118);
d1729 1
a1729 1
    stringBuffer.append(TEXT_119);
d1731 1
a1731 1
    stringBuffer.append(TEXT_120);
d1735 1
a1735 1
    stringBuffer.append(TEXT_121);
d1737 1
a1737 1
    stringBuffer.append(TEXT_122);
d1739 1
a1739 1
    stringBuffer.append(TEXT_123);
d1741 1
a1741 1
    stringBuffer.append(TEXT_124);
d1743 1
a1743 1
    stringBuffer.append(TEXT_125);
d1749 1
a1749 1
    stringBuffer.append(TEXT_126);
d1751 1
a1751 1
    stringBuffer.append(TEXT_127);
d1753 1
a1753 1
    stringBuffer.append(TEXT_128);
d1755 1
a1755 1
    stringBuffer.append(TEXT_129);
d1759 1
a1759 1
    stringBuffer.append(TEXT_130);
d1761 1
a1761 1
    stringBuffer.append(TEXT_131);
d1763 1
a1763 1
    stringBuffer.append(TEXT_132);
d1765 1
a1765 1
    stringBuffer.append(TEXT_133);
d1767 1
a1767 1
    stringBuffer.append(TEXT_134);
d1772 1
a1772 1
    stringBuffer.append(TEXT_135);
d1778 1
a1778 1
    stringBuffer.append(TEXT_136);
d1791 1
a1791 1
    stringBuffer.append(TEXT_137);
d1796 1
a1796 1
    stringBuffer.append(TEXT_138);
d1798 1
a1798 1
    stringBuffer.append(TEXT_139);
d1800 1
a1800 1
    stringBuffer.append(TEXT_140);
d1805 1
a1805 1
    stringBuffer.append(TEXT_141);
d1807 1
a1807 1
    stringBuffer.append(TEXT_142);
d1809 1
a1809 1
    stringBuffer.append(TEXT_143);
d1811 1
a1811 1
    stringBuffer.append(TEXT_144);
d1813 1
a1813 1
    stringBuffer.append(TEXT_145);
d1818 1
a1818 1
    stringBuffer.append(TEXT_146);
d1820 1
a1820 1
    stringBuffer.append(TEXT_147);
d1822 1
a1822 1
    stringBuffer.append(TEXT_148);
d1824 1
a1824 1
    stringBuffer.append(TEXT_149);
d1826 1
a1826 1
    stringBuffer.append(TEXT_150);
d1835 1
a1835 1
    stringBuffer.append(TEXT_151);
d1840 1
a1840 1
    stringBuffer.append(TEXT_152);
d1842 1
a1842 1
    stringBuffer.append(TEXT_153);
d1844 1
a1844 1
    stringBuffer.append(TEXT_154);
d1849 1
a1849 1
    stringBuffer.append(TEXT_155);
d1851 1
a1851 1
    stringBuffer.append(TEXT_156);
d1853 1
a1853 1
    stringBuffer.append(TEXT_157);
d1855 1
a1855 1
    stringBuffer.append(TEXT_158);
d1857 1
a1857 1
    stringBuffer.append(TEXT_159);
d1865 1
a1865 1
    stringBuffer.append(TEXT_160);
d1867 1
a1867 1
    stringBuffer.append(TEXT_161);
d1869 1
a1869 1
    stringBuffer.append(TEXT_162);
d1871 1
a1871 1
    stringBuffer.append(TEXT_163);
d1873 1
a1873 1
    stringBuffer.append(TEXT_164);
d1877 1
a1877 1
    stringBuffer.append(TEXT_165);
d1879 1
a1879 1
    stringBuffer.append(TEXT_166);
d1881 1
a1881 1
    stringBuffer.append(TEXT_167);
d1883 1
a1883 1
    stringBuffer.append(TEXT_168);
d1885 1
a1885 1
    stringBuffer.append(TEXT_169);
d1887 1
a1887 1
    stringBuffer.append(TEXT_170);
d1889 1
a1889 1
    stringBuffer.append(TEXT_171);
d1891 1
a1891 1
    stringBuffer.append(TEXT_172);
d1893 1
a1893 1
    stringBuffer.append(TEXT_173);
d1895 1
a1895 1
    stringBuffer.append(TEXT_174);
d1897 1
a1897 1
    stringBuffer.append(TEXT_175);
d1899 1
a1899 1
    stringBuffer.append(TEXT_176);
d1910 1
a1910 1
    stringBuffer.append(TEXT_177);
d1912 1
a1912 1
    stringBuffer.append(TEXT_178);
d1914 1
a1914 1
    stringBuffer.append(TEXT_179);
d1916 1
a1916 1
    stringBuffer.append(TEXT_180);
d1918 1
a1918 1
    stringBuffer.append(TEXT_181);
d1920 1
a1920 1
    stringBuffer.append(TEXT_182);
d1922 1
a1922 1
    stringBuffer.append(TEXT_183);
d1924 1
a1924 1
    stringBuffer.append(TEXT_184);
d1926 1
a1926 1
    stringBuffer.append(TEXT_185);
d1928 1
a1928 1
    stringBuffer.append(TEXT_186);
d1930 1
a1930 1
    stringBuffer.append(TEXT_187);
d1934 1
a1934 1
    stringBuffer.append(TEXT_188);
d1938 1
a1938 1
    stringBuffer.append(TEXT_189);
d1940 1
a1940 1
    stringBuffer.append(TEXT_190);
d1942 1
a1942 1
    stringBuffer.append(TEXT_191);
d1946 1
a1946 1
    stringBuffer.append(TEXT_192);
d1953 1
a1953 1
    stringBuffer.append(TEXT_193);
d1955 1
a1955 1
    stringBuffer.append(TEXT_194);
d1957 1
a1957 1
    stringBuffer.append(TEXT_195);
d1959 1
a1959 1
    stringBuffer.append(TEXT_196);
d1961 1
a1961 1
    stringBuffer.append(TEXT_197);
a1962 4
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1966 1
a1966 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1968 1
a1968 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1970 1
a1970 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1972 1
a1972 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1976 1
a1976 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1978 1
a1978 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1980 1
a1980 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1982 1
a1982 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1986 4
d1991 1
a1991 1
    stringBuffer.append(TEXT_212);
d1993 1
a1993 1
    stringBuffer.append(TEXT_213);
d2001 1
a2001 1
    stringBuffer.append(TEXT_214);
d2003 1
a2003 1
    stringBuffer.append(TEXT_215);
d2005 1
a2005 1
    stringBuffer.append(TEXT_216);
d2007 1
a2007 1
    stringBuffer.append(TEXT_217);
d2009 1
a2009 1
    stringBuffer.append(TEXT_218);
d2011 1
a2011 1
    stringBuffer.append(TEXT_219);
d2013 1
a2013 1
    stringBuffer.append(TEXT_220);
d2021 1
a2021 1
    stringBuffer.append(TEXT_221);
d2026 1
a2026 1
    stringBuffer.append(TEXT_222);
d2028 1
a2028 1
    stringBuffer.append(TEXT_223);
d2030 1
a2030 1
    stringBuffer.append(TEXT_224);
d2035 1
a2035 1
    stringBuffer.append(TEXT_225);
d2037 1
a2037 1
    stringBuffer.append(TEXT_226);
d2039 1
a2039 1
    stringBuffer.append(TEXT_227);
d2041 1
a2041 1
    stringBuffer.append(TEXT_228);
d2043 1
a2043 1
    stringBuffer.append(TEXT_229);
d2056 1
a2056 1
    stringBuffer.append(TEXT_230);
d2061 1
a2061 1
    stringBuffer.append(TEXT_231);
d2063 1
a2063 1
    stringBuffer.append(TEXT_232);
d2065 1
a2065 1
    stringBuffer.append(TEXT_233);
d2070 1
a2070 1
    stringBuffer.append(TEXT_234);
d2072 1
a2072 1
    stringBuffer.append(TEXT_235);
d2074 1
a2074 1
    stringBuffer.append(TEXT_236);
d2076 1
a2076 1
    stringBuffer.append(TEXT_237);
d2078 1
a2078 1
    stringBuffer.append(TEXT_238);
d2086 1
a2086 1
    stringBuffer.append(TEXT_239);
d2088 1
a2088 1
    stringBuffer.append(TEXT_240);
d2090 1
a2090 1
    stringBuffer.append(TEXT_241);
d2092 1
a2092 1
    stringBuffer.append(TEXT_242);
d2094 1
a2094 1
    stringBuffer.append(TEXT_243);
d2098 1
a2098 1
    stringBuffer.append(TEXT_244);
d2100 1
a2100 1
    stringBuffer.append(TEXT_245);
d2102 1
a2102 1
    stringBuffer.append(TEXT_246);
d2104 1
a2104 1
    stringBuffer.append(TEXT_247);
d2106 1
a2106 1
    stringBuffer.append(TEXT_248);
d2110 1
a2110 1
    stringBuffer.append(TEXT_249);
d2112 1
a2112 1
    stringBuffer.append(TEXT_250);
d2114 1
a2114 1
    stringBuffer.append(TEXT_251);
d2116 1
a2116 1
    stringBuffer.append(TEXT_252);
d2118 1
a2118 1
    stringBuffer.append(TEXT_253);
d2129 1
a2129 1
    stringBuffer.append(TEXT_254);
d2131 1
a2131 1
    stringBuffer.append(TEXT_255);
d2133 1
a2133 1
    stringBuffer.append(TEXT_256);
d2135 1
a2135 1
    stringBuffer.append(TEXT_257);
d2137 1
a2137 1
    stringBuffer.append(TEXT_258);
d2139 1
a2139 1
    stringBuffer.append(TEXT_259);
d2141 1
a2141 1
    stringBuffer.append(TEXT_260);
d2143 1
a2143 1
    stringBuffer.append(TEXT_261);
d2145 1
a2145 1
    stringBuffer.append(TEXT_262);
d2147 1
a2147 1
    stringBuffer.append(TEXT_263);
d2149 1
a2149 1
    stringBuffer.append(TEXT_264);
d2154 1
a2154 1
    stringBuffer.append(TEXT_265);
d2156 1
a2156 1
    stringBuffer.append(TEXT_266);
d2158 1
a2158 1
    stringBuffer.append(TEXT_267);
d2165 1
a2165 1
    stringBuffer.append(TEXT_268);
d2167 1
a2167 1
    stringBuffer.append(TEXT_269);
d2169 1
a2169 1
    stringBuffer.append(TEXT_270);
d2173 1
a2173 1
    stringBuffer.append(TEXT_271);
d2175 1
a2175 1
    stringBuffer.append(TEXT_272);
d2177 1
a2177 1
    stringBuffer.append(TEXT_273);
d2179 1
a2179 1
    stringBuffer.append(TEXT_274);
d2181 1
a2181 1
    stringBuffer.append(TEXT_275);
d2183 1
a2183 1
    stringBuffer.append(TEXT_276);
d2188 1
a2188 1
    stringBuffer.append(TEXT_277);
d2190 1
a2190 1
    stringBuffer.append(TEXT_278);
d2192 1
a2192 1
    stringBuffer.append(TEXT_279);
d2194 1
a2194 1
    stringBuffer.append(TEXT_280);
d2196 1
a2196 1
    stringBuffer.append(TEXT_281);
d2198 1
a2198 1
    stringBuffer.append(TEXT_282);
d2202 1
a2202 1
    stringBuffer.append(TEXT_283);
d2204 1
a2204 1
    stringBuffer.append(TEXT_284);
d2206 1
a2206 1
    stringBuffer.append(TEXT_285);
d2210 1
a2210 1
    stringBuffer.append(TEXT_286);
d2212 1
a2212 1
    stringBuffer.append(TEXT_287);
d2216 1
a2216 1
    stringBuffer.append(TEXT_288);
d2218 1
a2218 1
    stringBuffer.append(TEXT_289);
d2220 1
a2220 1
    stringBuffer.append(TEXT_290);
d2222 1
a2222 1
    stringBuffer.append(TEXT_291);
a2223 2
    stringBuffer.append(TEXT_292);
    stringBuffer.append(TEXT_293);
d2225 2
d2228 1
a2228 1
    stringBuffer.append(TEXT_295);
d2230 1
a2230 1
    stringBuffer.append(TEXT_296);
d2232 1
a2232 1
    stringBuffer.append(TEXT_297);
d2234 1
a2234 1
    stringBuffer.append(TEXT_298);
d2236 1
a2236 1
    stringBuffer.append(TEXT_299);
d2238 1
a2238 1
    stringBuffer.append(TEXT_300);
d2240 1
a2240 1
    stringBuffer.append(TEXT_301);
d2242 1
a2242 1
    stringBuffer.append(TEXT_302);
d2244 1
a2244 1
    stringBuffer.append(TEXT_303);
d2248 1
a2248 1
    stringBuffer.append(TEXT_304);
d2250 1
a2250 1
    stringBuffer.append(TEXT_305);
d2252 1
a2252 1
    stringBuffer.append(TEXT_306);
d2254 1
a2254 1
    stringBuffer.append(TEXT_307);
d2256 1
a2256 1
    stringBuffer.append(TEXT_308);
d2258 1
a2258 1
    stringBuffer.append(TEXT_309);
d2262 1
a2262 1
    stringBuffer.append(TEXT_310);
d2264 1
a2264 1
    stringBuffer.append(TEXT_311);
d2266 1
a2266 1
    stringBuffer.append(TEXT_312);
d2270 1
a2270 1
    stringBuffer.append(TEXT_313);
d2272 1
a2272 1
    stringBuffer.append(TEXT_314);
d2274 1
a2274 1
    stringBuffer.append(TEXT_315);
d2278 1
a2278 1
    stringBuffer.append(TEXT_316);
d2280 1
a2280 1
    stringBuffer.append(TEXT_317);
d2282 1
a2282 1
    stringBuffer.append(TEXT_318);
d2284 1
a2284 1
    stringBuffer.append(TEXT_319);
d2286 1
a2286 1
    stringBuffer.append(TEXT_320);
d2288 1
a2288 1
    stringBuffer.append(TEXT_321);
d2290 1
a2290 1
    stringBuffer.append(TEXT_322);
d2292 1
a2292 1
    stringBuffer.append(TEXT_323);
d2294 1
a2294 1
    stringBuffer.append(TEXT_324);
d2296 1
a2296 1
    stringBuffer.append(TEXT_325);
d2300 1
a2300 1
    stringBuffer.append(TEXT_326);
d2302 1
a2302 1
    stringBuffer.append(TEXT_327);
d2306 1
a2306 1
    stringBuffer.append(TEXT_328);
d2308 1
a2308 1
    stringBuffer.append(TEXT_329);
d2310 1
a2310 1
    stringBuffer.append(TEXT_330);
d2312 1
a2312 1
    stringBuffer.append(TEXT_331);
d2314 1
a2314 1
    stringBuffer.append(TEXT_332);
d2316 1
a2316 1
    stringBuffer.append(TEXT_333);
d2318 1
a2318 1
    stringBuffer.append(TEXT_334);
d2320 1
a2320 1
    stringBuffer.append(TEXT_335);
d2322 1
a2322 1
    stringBuffer.append(TEXT_336);
d2324 1
a2324 1
    stringBuffer.append(TEXT_337);
d2326 1
a2326 1
    stringBuffer.append(TEXT_338);
d2350 1
a2350 1
    stringBuffer.append(TEXT_339);
d2352 1
a2352 1
    stringBuffer.append(TEXT_340);
d2354 1
a2354 1
    stringBuffer.append(TEXT_341);
d2358 1
a2358 1
    stringBuffer.append(TEXT_342);
d2360 1
a2360 1
    stringBuffer.append(TEXT_343);
d2362 1
a2362 1
    stringBuffer.append(TEXT_344);
d2364 1
a2364 1
    stringBuffer.append(TEXT_345);
d2368 1
a2368 1
    stringBuffer.append(TEXT_346);
d2370 1
a2370 1
    stringBuffer.append(TEXT_347);
d2372 1
a2372 1
    stringBuffer.append(TEXT_348);
d2376 1
a2376 1
    stringBuffer.append(TEXT_349);
d2378 1
a2378 1
    stringBuffer.append(TEXT_350);
d2382 1
a2382 1
    stringBuffer.append(TEXT_351);
d2384 1
a2384 1
    stringBuffer.append(TEXT_352);
d2386 1
a2386 1
    stringBuffer.append(TEXT_353);
d2388 1
a2388 1
    stringBuffer.append(TEXT_354);
d2390 1
a2390 1
    stringBuffer.append(TEXT_355);
d2392 1
a2392 1
    stringBuffer.append(TEXT_356);
d2394 1
a2394 1
    stringBuffer.append(TEXT_357);
d2396 1
a2396 1
    stringBuffer.append(TEXT_358);
d2398 1
a2398 1
    stringBuffer.append(TEXT_359);
d2400 1
a2400 1
    stringBuffer.append(TEXT_360);
d2402 1
a2402 1
    stringBuffer.append(TEXT_361);
d2428 1
a2428 1
    stringBuffer.append(TEXT_362);
d2430 1
a2430 1
    stringBuffer.append(TEXT_363);
d2432 1
a2432 1
    stringBuffer.append(TEXT_364);
d2436 1
a2436 1
    stringBuffer.append(TEXT_365);
d2438 1
a2438 1
    stringBuffer.append(TEXT_366);
d2440 1
a2440 1
    stringBuffer.append(TEXT_367);
d2442 1
a2442 1
    stringBuffer.append(TEXT_368);
d2446 1
a2446 1
    stringBuffer.append(TEXT_369);
d2448 1
a2448 1
    stringBuffer.append(TEXT_370);
d2450 1
a2450 1
    stringBuffer.append(TEXT_371);
d2452 1
a2452 1
    stringBuffer.append(TEXT_372);
d2454 1
a2454 1
    stringBuffer.append(TEXT_373);
d2456 1
a2456 1
    stringBuffer.append(TEXT_374);
d2458 1
a2458 1
    stringBuffer.append(TEXT_375);
d2460 1
a2460 1
    stringBuffer.append(TEXT_376);
d2462 1
a2462 1
    stringBuffer.append(TEXT_377);
d2488 1
a2488 1
    stringBuffer.append(TEXT_378);
d2490 1
a2490 1
    stringBuffer.append(TEXT_379);
d2492 1
a2492 1
    stringBuffer.append(TEXT_380);
d2496 1
a2496 1
    stringBuffer.append(TEXT_381);
d2498 1
a2498 1
    stringBuffer.append(TEXT_382);
d2500 1
a2500 1
    stringBuffer.append(TEXT_383);
d2502 1
a2502 1
    stringBuffer.append(TEXT_384);
d2504 1
a2504 1
    stringBuffer.append(TEXT_385);
d2506 1
a2506 1
    stringBuffer.append(TEXT_386);
d2508 1
a2508 1
    stringBuffer.append(TEXT_387);
d2510 1
a2510 1
    stringBuffer.append(TEXT_388);
d2512 1
a2512 1
    stringBuffer.append(TEXT_389);
d2514 1
a2514 1
    stringBuffer.append(TEXT_390);
d2516 1
a2516 1
    stringBuffer.append(TEXT_391);
d2518 1
a2518 1
    stringBuffer.append(TEXT_392);
d2520 1
a2520 1
    stringBuffer.append(TEXT_393);
d2522 1
a2522 1
    stringBuffer.append(TEXT_394);
d2546 1
a2546 1
    stringBuffer.append(TEXT_395);
d2548 1
a2548 1
    stringBuffer.append(TEXT_396);
d2550 1
a2550 1
    stringBuffer.append(TEXT_397);
d2554 1
a2554 1
    stringBuffer.append(TEXT_398);
d2556 1
a2556 1
    stringBuffer.append(TEXT_399);
d2558 1
a2558 1
    stringBuffer.append(TEXT_400);
d2560 1
a2560 1
    stringBuffer.append(TEXT_401);
d2562 1
a2562 1
    stringBuffer.append(TEXT_402);
d2564 1
a2564 1
    stringBuffer.append(TEXT_403);
d2568 1
a2568 1
    stringBuffer.append(TEXT_404);
d2570 1
a2570 1
    stringBuffer.append(TEXT_405);
d2572 1
a2572 1
    stringBuffer.append(TEXT_406);
d2578 1
a2578 1
    stringBuffer.append(TEXT_407);
d2582 1
a2582 1
    stringBuffer.append(TEXT_408);
d2584 1
a2584 1
    stringBuffer.append(TEXT_409);
d2586 1
a2586 1
    stringBuffer.append(TEXT_410);
d2588 1
a2588 1
    stringBuffer.append(TEXT_411);
d2596 1
a2596 1
    stringBuffer.append(TEXT_412);
d2598 1
a2598 1
    stringBuffer.append(TEXT_413);
d2600 1
a2600 1
    stringBuffer.append(TEXT_414);
d2602 1
a2602 1
    stringBuffer.append(TEXT_415);
d2604 1
a2604 1
    stringBuffer.append(TEXT_416);
d2606 1
a2606 1
    stringBuffer.append(TEXT_417);
d2612 1
a2612 1
    stringBuffer.append(TEXT_418);
d2616 1
a2616 1
    stringBuffer.append(TEXT_419);
d2623 1
a2623 1
    stringBuffer.append(TEXT_420);
d2627 1
a2627 1
    stringBuffer.append(TEXT_421);
d2629 1
a2629 1
    stringBuffer.append(TEXT_422);
d2633 1
a2633 1
    stringBuffer.append(TEXT_423);
d2635 1
a2635 1
    stringBuffer.append(TEXT_424);
d2640 1
a2640 1
    stringBuffer.append(TEXT_425);
d2642 1
a2642 1
    stringBuffer.append(TEXT_426);
d2644 1
a2644 1
    stringBuffer.append(TEXT_427);
d2648 1
a2648 1
    stringBuffer.append(TEXT_428);
d2650 1
a2650 1
    stringBuffer.append(TEXT_429);
d2652 1
a2652 1
    stringBuffer.append(TEXT_430);
d2654 1
a2654 1
    stringBuffer.append(TEXT_431);
d2656 1
a2656 1
    stringBuffer.append(TEXT_432);
d2658 1
a2658 1
    stringBuffer.append(TEXT_433);
d2660 1
a2660 1
    stringBuffer.append(TEXT_434);
d2662 1
a2662 1
    stringBuffer.append(TEXT_435);
d2664 1
a2664 1
    stringBuffer.append(TEXT_436);
d2666 1
a2666 1
    stringBuffer.append(TEXT_437);
d2668 1
a2668 1
    stringBuffer.append(TEXT_438);
d2673 1
a2673 1
    stringBuffer.append(TEXT_439);
d2675 1
a2675 1
    stringBuffer.append(TEXT_440);
d2677 1
a2677 1
    stringBuffer.append(TEXT_441);
d2681 1
a2681 1
    stringBuffer.append(TEXT_442);
d2688 1
a2688 1
    stringBuffer.append(TEXT_443);
d2690 1
a2690 1
    stringBuffer.append(TEXT_444);
d2694 1
a2694 1
    stringBuffer.append(TEXT_445);
d2700 1
a2700 1
    stringBuffer.append(TEXT_446);
d2704 1
a2704 1
    stringBuffer.append(TEXT_447);
d2709 1
a2709 1
    stringBuffer.append(TEXT_448);
d2714 1
a2714 1
    stringBuffer.append(TEXT_449);
d2718 1
a2718 1
    stringBuffer.append(TEXT_450);
d2720 1
a2720 1
    stringBuffer.append(TEXT_451);
d2722 1
a2722 1
    stringBuffer.append(TEXT_452);
d2724 1
a2724 1
    stringBuffer.append(TEXT_453);
d2726 1
a2726 1
    stringBuffer.append(TEXT_454);
d2728 1
a2728 1
    stringBuffer.append(TEXT_455);
d2732 1
a2732 1
    stringBuffer.append(TEXT_456);
d2736 5
a2740 1
    stringBuffer.append(TEXT_457);
d2742 5
a2746 1
    stringBuffer.append(TEXT_458);
d2750 1
a2750 1
    stringBuffer.append(TEXT_459);
d2752 1
a2752 1
    stringBuffer.append(TEXT_460);
d2754 1
a2754 1
    stringBuffer.append(TEXT_461);
d2756 1
a2756 1
    stringBuffer.append(TEXT_462);
d2760 1
a2760 1
    stringBuffer.append(TEXT_463);
d2762 1
a2762 1
    stringBuffer.append(TEXT_464);
d2772 1
a2772 1
    stringBuffer.append(TEXT_465);
d2774 1
a2774 1
    stringBuffer.append(TEXT_466);
d2776 1
a2776 1
    stringBuffer.append(TEXT_467);
d2778 1
a2778 1
    stringBuffer.append(TEXT_468);
d2780 1
a2780 1
    stringBuffer.append(TEXT_469);
d2782 1
a2782 1
    stringBuffer.append(TEXT_470);
a2785 12
    stringBuffer.append(TEXT_471);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_472);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_473);
    if (!genNode.getChildNodes().isEmpty() && isXYLayout) { /*otherwise, leave to figure's default value*/
    stringBuffer.append(TEXT_474);
    }
    stringBuffer.append(TEXT_475);
    }
    stringBuffer.append(TEXT_476);
    if (figureQualifiedClassName != null) {
d2791 2
a2793 2
    stringBuffer.append(TEXT_480);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d2795 1
a2795 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d2797 1
a2797 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d2799 1
a2799 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d2801 1
a2801 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
d2803 1
a2803 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
d2805 1
a2805 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.BorderLayout"));
d2807 1
a2807 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ImageFigure"));
d2809 1
a2809 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ImageFigure"));
d2811 1
a2811 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a2812 8
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.PositionConstants"));
    stringBuffer.append(TEXT_491);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.BorderLayout"));
    stringBuffer.append(TEXT_492);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_493);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_494);
d2817 1
a2817 1
    stringBuffer.append(TEXT_495);
d2819 1
a2819 1
    stringBuffer.append(TEXT_496);
d2821 1
a2821 1
    stringBuffer.append(TEXT_497);
d2823 1
a2823 1
    stringBuffer.append(TEXT_498);
d2825 1
a2825 1
    stringBuffer.append(TEXT_499);
d2827 1
a2827 1
    stringBuffer.append(TEXT_500);
d2829 1
a2829 1
    stringBuffer.append(TEXT_501);
d2831 1
a2831 1
    stringBuffer.append(TEXT_502);
d2833 1
a2833 1
    stringBuffer.append(TEXT_503);
d2835 1
a2835 1
    stringBuffer.append(TEXT_504);
d2837 1
a2837 1
    stringBuffer.append(TEXT_505);
d2841 1
a2841 1
    stringBuffer.append(TEXT_506);
d2843 1
a2843 1
    stringBuffer.append(TEXT_507);
d2851 1
a2851 1
    stringBuffer.append(TEXT_508);
d2853 1
a2853 1
    stringBuffer.append(TEXT_509);
d2855 1
a2855 1
    stringBuffer.append(TEXT_510);
d2857 1
a2857 1
    stringBuffer.append(TEXT_511);
d2859 1
a2859 1
    stringBuffer.append(TEXT_512);
d2868 1
a2868 1
    stringBuffer.append(TEXT_513);
d2870 1
a2870 1
    stringBuffer.append(TEXT_514);
d2872 1
a2872 1
    stringBuffer.append(TEXT_515);
d2874 1
a2874 1
    stringBuffer.append(TEXT_516);
d2876 1
a2876 1
    stringBuffer.append(TEXT_517);
d2880 1
a2880 1
    stringBuffer.append(TEXT_518);
d2888 1
a2888 1
    stringBuffer.append(TEXT_519);
d2890 1
a2890 1
    stringBuffer.append(TEXT_520);
d2892 1
a2892 1
    stringBuffer.append(TEXT_521);
d2894 1
a2894 1
    stringBuffer.append(TEXT_522);
d2896 1
a2896 1
    stringBuffer.append(TEXT_523);
d2900 1
a2900 1
    stringBuffer.append(TEXT_524);
d2904 1
a2904 1
    stringBuffer.append(TEXT_525);
d2906 1
a2906 1
    stringBuffer.append(TEXT_526);
d2910 1
a2910 1
    stringBuffer.append(TEXT_527);
d2912 1
a2912 1
    stringBuffer.append(TEXT_528);
d2914 1
a2914 1
    stringBuffer.append(TEXT_529);
d2916 1
a2916 1
    stringBuffer.append(TEXT_530);
d2918 1
a2918 1
    stringBuffer.append(TEXT_531);
d2920 1
a2920 1
    stringBuffer.append(TEXT_532);
d2922 1
a2922 1
    stringBuffer.append(TEXT_533);
d2926 1
a2926 1
    stringBuffer.append(TEXT_534);
d2928 1
a2928 1
    stringBuffer.append(TEXT_535);
d2930 1
a2930 1
    stringBuffer.append(TEXT_536);
d2932 1
a2932 1
    stringBuffer.append(TEXT_537);
d2934 1
a2934 1
    stringBuffer.append(TEXT_538);
d2936 3
a2938 3
    stringBuffer.append(TEXT_539);
    stringBuffer.append(TEXT_540);
    stringBuffer.append(TEXT_541);
d2940 1
a2940 1
    stringBuffer.append(TEXT_542);
d2942 1
a2942 1
    stringBuffer.append(TEXT_543);
d2944 1
a2944 1
    stringBuffer.append(TEXT_544);
d2946 1
a2946 1
    stringBuffer.append(TEXT_545);
d2948 1
a2948 1
    stringBuffer.append(TEXT_546);
d2950 1
a2950 1
    stringBuffer.append(TEXT_547);
d2952 1
a2952 1
    stringBuffer.append(TEXT_548);
d2954 1
a2954 1
    stringBuffer.append(TEXT_549);
d2962 1
a2962 1
    stringBuffer.append(TEXT_550);
d2964 1
a2964 1
    stringBuffer.append(TEXT_551);
d2968 1
a2968 1
    stringBuffer.append(TEXT_552);
d2972 1
a2972 1
    stringBuffer.append(TEXT_553);
d2974 1
a2974 1
    stringBuffer.append(TEXT_554);
d2979 1
a2979 1
    stringBuffer.append(TEXT_555);
d2981 1
a2981 1
    stringBuffer.append(TEXT_556);
d2985 1
a2985 1
    stringBuffer.append(TEXT_557);
d2987 1
a2987 1
    stringBuffer.append(TEXT_558);
d2989 1
a2989 1
    stringBuffer.append(TEXT_559);
d2991 1
a2991 1
    stringBuffer.append(TEXT_560);
d2993 1
a2993 1
    stringBuffer.append(TEXT_561);
d2998 1
a2998 1
    stringBuffer.append(TEXT_562);
d3000 1
a3000 1
    stringBuffer.append(TEXT_563);
d3005 1
a3005 1
    stringBuffer.append(TEXT_564);
d3007 1
a3007 1
    stringBuffer.append(TEXT_565);
d3011 1
a3011 1
    stringBuffer.append(TEXT_566);
d3016 1
a3016 1
    stringBuffer.append(TEXT_567);
d3018 1
a3018 1
    stringBuffer.append(TEXT_568);
d3022 1
a3022 1
    stringBuffer.append(TEXT_569);
d3024 1
a3024 1
    stringBuffer.append(TEXT_570);
d3026 1
a3026 1
    stringBuffer.append(TEXT_571);
d3031 1
a3031 1
    stringBuffer.append(TEXT_572);
d3036 1
a3036 1
    stringBuffer.append(TEXT_573);
d3038 1
a3038 1
    stringBuffer.append(TEXT_574);
d3040 1
a3040 1
    stringBuffer.append(TEXT_575);
d3044 1
a3044 1
    stringBuffer.append(TEXT_576);
d3046 1
a3046 1
    stringBuffer.append(TEXT_577);
d3050 1
a3050 1
    stringBuffer.append(TEXT_578);
d3052 1
a3052 1
    stringBuffer.append(TEXT_579);
d3054 1
a3054 1
    stringBuffer.append(TEXT_580);
d3059 1
a3059 1
    stringBuffer.append(TEXT_581);
d3064 1
a3064 1
    stringBuffer.append(TEXT_582);
d3066 1
a3066 1
    stringBuffer.append(TEXT_583);
d3068 1
a3068 1
    stringBuffer.append(TEXT_584);
d3072 1
a3072 1
    stringBuffer.append(TEXT_585);
d3079 1
a3079 1
    stringBuffer.append(TEXT_586);
d3081 1
a3081 1
    stringBuffer.append(TEXT_587);
d3083 1
a3083 1
    stringBuffer.append(TEXT_588);
d3085 1
a3085 1
    stringBuffer.append(TEXT_589);
d3087 1
a3087 1
    stringBuffer.append(TEXT_590);
d3091 1
a3091 1
    stringBuffer.append(TEXT_591);
d3093 1
a3093 1
    stringBuffer.append(TEXT_592);
d3095 1
a3095 1
    stringBuffer.append(TEXT_593);
d3097 1
a3097 1
    stringBuffer.append(TEXT_594);
d3099 1
a3099 1
    stringBuffer.append(TEXT_595);
d3101 1
a3101 1
    stringBuffer.append(TEXT_596);
d3103 1
a3103 1
    stringBuffer.append(TEXT_597);
d3105 1
a3105 1
    stringBuffer.append(TEXT_598);
d3107 1
a3107 1
    stringBuffer.append(TEXT_599);
d3109 1
a3109 1
    stringBuffer.append(TEXT_600);
d3111 1
a3111 1
    stringBuffer.append(TEXT_601);
d3113 1
a3113 1
    stringBuffer.append(TEXT_602);
d3115 1
a3115 1
    stringBuffer.append(TEXT_603);
d3117 1
a3117 1
    stringBuffer.append(TEXT_604);
d3119 1
a3119 1
    stringBuffer.append(TEXT_605);
d3121 1
a3121 1
    stringBuffer.append(TEXT_606);
d3123 1
a3123 1
    stringBuffer.append(TEXT_607);
d3125 1
a3125 1
    stringBuffer.append(TEXT_608);
d3127 1
a3127 1
    stringBuffer.append(TEXT_609);
d3129 1
a3129 1
    stringBuffer.append(TEXT_610);
d3131 1
a3131 1
    stringBuffer.append(TEXT_611);
d3133 1
a3133 1
    stringBuffer.append(TEXT_612);
d3137 1
a3137 1
    stringBuffer.append(TEXT_613);
d3139 1
a3139 1
    stringBuffer.append(TEXT_614);
d3141 1
a3141 1
    stringBuffer.append(TEXT_615);
d3145 1
a3145 1
    stringBuffer.append(TEXT_616);
d3147 1
a3147 1
    stringBuffer.append(TEXT_617);
d3149 1
a3149 1
    stringBuffer.append(TEXT_618);
d3153 1
a3153 1
    stringBuffer.append(TEXT_619);
d3160 1
a3160 1
    stringBuffer.append(TEXT_620);
d3164 1
a3164 1
    stringBuffer.append(TEXT_621);
d3168 1
a3168 1
    stringBuffer.append(TEXT_622);
d3175 1
a3175 1
    stringBuffer.append(TEXT_623);
d3179 1
a3179 1
    stringBuffer.append(TEXT_624);
d3189 2
a3190 2
    stringBuffer.append(TEXT_625);
    stringBuffer.append(TEXT_626);
d3192 1
a3192 1
    stringBuffer.append(TEXT_627);
d3194 1
a3194 1
    stringBuffer.append(TEXT_628);
d3196 1
a3196 1
    stringBuffer.append(TEXT_629);
d3198 1
a3198 1
    stringBuffer.append(TEXT_630);
d3200 1
a3200 1
    stringBuffer.append(TEXT_631);
d3202 1
a3202 1
    stringBuffer.append(TEXT_632);
d3204 1
a3204 1
    stringBuffer.append(TEXT_633);
d3219 1
a3219 1
    stringBuffer.append(TEXT_634);
d3221 1
a3221 1
    stringBuffer.append(TEXT_635);
d3223 1
a3223 1
    stringBuffer.append(TEXT_636);
d3225 1
a3225 1
    stringBuffer.append(TEXT_637);
d3229 1
a3229 1
    stringBuffer.append(TEXT_638);
d3231 1
a3231 1
    stringBuffer.append(TEXT_639);
d3250 1
a3250 1
    stringBuffer.append(TEXT_640);
d3252 1
a3252 1
    stringBuffer.append(TEXT_641);
d3254 1
a3254 1
    stringBuffer.append(TEXT_642);
d3256 1
a3256 1
    stringBuffer.append(TEXT_643);
d3258 1
a3258 1
    stringBuffer.append(TEXT_644);
d3262 1
a3262 1
    stringBuffer.append(TEXT_645);
d3264 1
a3264 1
    stringBuffer.append(TEXT_646);
d3266 1
a3266 1
    stringBuffer.append(TEXT_647);
d3268 1
a3268 1
    stringBuffer.append(TEXT_648);
d3276 1
a3276 1
    stringBuffer.append(TEXT_649);
d3278 1
a3278 1
    stringBuffer.append(TEXT_650);
d3280 1
a3280 1
    stringBuffer.append(TEXT_651);
d3285 1
a3285 1
    stringBuffer.append(TEXT_652);
d3287 1
a3287 1
    stringBuffer.append(TEXT_653);
d3289 1
a3289 1
    stringBuffer.append(TEXT_654);
d3291 1
a3291 1
    stringBuffer.append(TEXT_655);
d3300 1
a3300 1
    stringBuffer.append(TEXT_656);
d3304 1
a3304 1
    stringBuffer.append(TEXT_657);
d3306 1
a3306 1
    stringBuffer.append(TEXT_658);
d3312 1
a3312 1
    stringBuffer.append(TEXT_659);
d3314 1
a3314 1
    stringBuffer.append(TEXT_660);
d3316 1
a3316 1
    stringBuffer.append(TEXT_661);
d3320 1
a3320 1
    stringBuffer.append(TEXT_662);
d3324 1
a3324 1
    stringBuffer.append(TEXT_663);
d3326 1
a3326 1
    stringBuffer.append(TEXT_664);
d3328 1
a3328 1
    stringBuffer.append(TEXT_665);
d3333 2
a3334 2
    stringBuffer.append(TEXT_666);
    stringBuffer.append(TEXT_667);
d3336 1
a3336 1
    stringBuffer.append(TEXT_668);
d3346 1
a3346 1
    stringBuffer.append(TEXT_669);
d3348 1
a3348 1
    stringBuffer.append(TEXT_670);
d3350 1
a3350 1
    stringBuffer.append(TEXT_671);
d3352 1
a3352 1
    stringBuffer.append(TEXT_672);
d3354 1
a3354 1
    stringBuffer.append(TEXT_673);
d3365 1
a3365 1
    stringBuffer.append(TEXT_674);
d3367 1
a3367 1
    stringBuffer.append(TEXT_675);
d3369 1
a3369 1
    stringBuffer.append(TEXT_676);
d3371 1
a3371 1
    stringBuffer.append(TEXT_677);
d3375 1
a3375 1
    stringBuffer.append(TEXT_678);
d3379 1
a3379 1
    stringBuffer.append(TEXT_679);
d3381 1
a3381 1
    stringBuffer.append(TEXT_680);
d3385 1
a3385 1
    stringBuffer.append(TEXT_681);
d3389 1
a3389 1
    stringBuffer.append(TEXT_682);
d3391 2
a3392 2
    stringBuffer.append(TEXT_683);
    stringBuffer.append(TEXT_684);
d3396 1
a3396 1
    stringBuffer.append(TEXT_685);
d3398 1
a3398 1
    stringBuffer.append(TEXT_686);
d3402 1
a3402 1
    stringBuffer.append(TEXT_687);
d3404 1
a3404 1
    stringBuffer.append(TEXT_688);
d3406 1
a3406 1
    stringBuffer.append(TEXT_689);
d3424 1
a3424 1
    stringBuffer.append(TEXT_690);
d3426 1
a3426 1
    stringBuffer.append(TEXT_691);
d3428 1
a3428 1
    stringBuffer.append(TEXT_692);
d3430 1
a3430 1
    stringBuffer.append(TEXT_693);
d3432 1
a3432 1
    stringBuffer.append(TEXT_694);
d3441 1
a3441 1
    stringBuffer.append(TEXT_695);
d3443 1
a3443 1
    stringBuffer.append(TEXT_696);
d3445 1
a3445 1
    stringBuffer.append(TEXT_697);
d3447 1
a3447 1
    stringBuffer.append(TEXT_698);
d3451 1
a3451 1
    stringBuffer.append(TEXT_699);
d3453 1
a3453 1
    stringBuffer.append(TEXT_700);
d3455 1
a3455 1
    stringBuffer.append(TEXT_701);
d3459 1
a3459 1
    stringBuffer.append(TEXT_702);
d3461 1
a3461 1
    stringBuffer.append(TEXT_703);
d3466 1
a3466 1
    stringBuffer.append(TEXT_704);
d3473 1
a3473 1
    stringBuffer.append(TEXT_705);
d3475 1
a3475 1
    stringBuffer.append(TEXT_706);
d3479 1
a3479 1
    stringBuffer.append(TEXT_707);
d3481 1
a3481 1
    stringBuffer.append(TEXT_708);
d3485 1
a3485 1
    stringBuffer.append(TEXT_709);
d3487 1
a3487 1
    stringBuffer.append(TEXT_710);
d3491 1
a3491 1
    stringBuffer.append(TEXT_711);
d3495 1
a3495 1
    stringBuffer.append(TEXT_712);
d3501 1
a3501 1
    stringBuffer.append(TEXT_713);
d3506 1
a3506 1
    stringBuffer.append(TEXT_714);
d3511 1
a3511 1
    stringBuffer.append(TEXT_715);
d3515 1
a3515 1
    stringBuffer.append(TEXT_716);
d3517 1
a3517 1
    stringBuffer.append(TEXT_717);
d3519 1
a3519 1
    stringBuffer.append(TEXT_718);
d3521 1
a3521 1
    stringBuffer.append(TEXT_719);
d3523 1
a3523 1
    stringBuffer.append(TEXT_720);
d3525 1
a3525 1
    stringBuffer.append(TEXT_721);
d3527 1
a3527 1
    stringBuffer.append(TEXT_722);
d3529 1
a3529 1
    stringBuffer.append(TEXT_723);
d3531 1
a3531 1
    stringBuffer.append(TEXT_724);
d3533 1
a3533 1
    stringBuffer.append(TEXT_725);
d3535 1
a3535 1
    stringBuffer.append(TEXT_726);
d3537 1
a3537 1
    stringBuffer.append(TEXT_727);
d3541 1
a3541 1
    stringBuffer.append(TEXT_728);
d3545 1
a3545 1
    stringBuffer.append(TEXT_729);
d3547 1
a3547 1
    stringBuffer.append(TEXT_730);
d3549 1
a3549 1
    stringBuffer.append(TEXT_731);
d3551 1
a3551 1
    stringBuffer.append(TEXT_732);
d3553 1
a3553 1
    stringBuffer.append(TEXT_733);
d3555 1
a3555 1
    stringBuffer.append(TEXT_734);
d3557 1
a3557 1
    stringBuffer.append(TEXT_735);
d3559 1
a3559 1
    stringBuffer.append(TEXT_736);
d3561 1
a3561 1
    stringBuffer.append(TEXT_737);
d3574 1
a3574 1
    stringBuffer.append(TEXT_738);
d3576 1
a3576 1
    stringBuffer.append(TEXT_739);
d3578 1
a3578 1
    stringBuffer.append(TEXT_740);
d3580 1
a3580 1
    stringBuffer.append(TEXT_741);
d3585 8
d3594 1
a3594 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
a3603 8
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_748);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_749);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_750);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_751);
d3607 1
a3607 1
    stringBuffer.append(TEXT_752);
d3609 1
a3609 1
    stringBuffer.append(TEXT_753);
d3622 1
a3622 1
    stringBuffer.append(TEXT_754);
d3636 1
a3636 1
    stringBuffer.append(TEXT_755);
d3638 1
a3638 1
    stringBuffer.append(TEXT_756);
d3640 1
a3640 1
    stringBuffer.append(TEXT_757);
d3642 1
a3642 1
    stringBuffer.append(TEXT_758);
d3644 1
a3644 1
    stringBuffer.append(TEXT_759);
d3648 1
a3648 1
    stringBuffer.append(TEXT_760);
d3650 1
a3650 1
    stringBuffer.append(TEXT_761);
d3652 1
a3652 1
    stringBuffer.append(TEXT_762);
d3654 1
a3654 1
    stringBuffer.append(TEXT_763);
d3661 1
a3661 1
    stringBuffer.append(TEXT_764);
d3675 1
a3675 1
    stringBuffer.append(TEXT_765);
d3677 1
a3677 1
    stringBuffer.append(TEXT_766);
d3679 1
a3679 1
    stringBuffer.append(TEXT_767);
d3681 1
a3681 1
    stringBuffer.append(TEXT_768);
d3683 1
a3683 1
    stringBuffer.append(TEXT_769);
d3687 1
a3687 1
    stringBuffer.append(TEXT_770);
d3689 1
a3689 1
    stringBuffer.append(TEXT_771);
d3691 1
a3691 1
    stringBuffer.append(TEXT_772);
d3693 1
a3693 1
    stringBuffer.append(TEXT_773);
d3700 1
a3700 1
    stringBuffer.append(TEXT_774);
d3714 1
a3714 1
    stringBuffer.append(TEXT_775);
d3716 1
a3716 1
    stringBuffer.append(TEXT_776);
d3718 1
a3718 1
    stringBuffer.append(TEXT_777);
d3720 1
a3720 1
    stringBuffer.append(TEXT_778);
d3722 1
a3722 1
    stringBuffer.append(TEXT_779);
d3726 1
a3726 1
    stringBuffer.append(TEXT_780);
d3728 1
a3728 1
    stringBuffer.append(TEXT_781);
d3730 1
a3730 1
    stringBuffer.append(TEXT_782);
d3732 1
a3732 1
    stringBuffer.append(TEXT_783);
d3742 1
a3742 1
    stringBuffer.append(TEXT_784);
d3756 1
a3756 1
    stringBuffer.append(TEXT_785);
d3758 1
a3758 1
    stringBuffer.append(TEXT_786);
d3760 1
a3760 1
    stringBuffer.append(TEXT_787);
d3762 1
a3762 1
    stringBuffer.append(TEXT_788);
d3764 1
a3764 1
    stringBuffer.append(TEXT_789);
d3768 1
a3768 1
    stringBuffer.append(TEXT_790);
d3770 1
a3770 1
    stringBuffer.append(TEXT_791);
d3772 1
a3772 1
    stringBuffer.append(TEXT_792);
d3774 1
a3774 1
    stringBuffer.append(TEXT_793);
d3783 1
a3783 1
    stringBuffer.append(TEXT_794);
d3788 1
a3788 1
    stringBuffer.append(TEXT_795);
d3790 1
a3790 1
    stringBuffer.append(TEXT_796);
d3797 1
a3797 1
    stringBuffer.append(TEXT_797);
d3802 1
a3802 1
    stringBuffer.append(TEXT_798);
d3804 1
a3804 1
    stringBuffer.append(TEXT_799);
d3810 1
a3810 1
    stringBuffer.append(TEXT_800);
d3812 1
a3812 1
    stringBuffer.append(TEXT_801);
d3814 1
a3814 1
    stringBuffer.append(TEXT_802);
d3819 1
a3819 1
    stringBuffer.append(TEXT_803);
d3821 1
a3821 1
    stringBuffer.append(TEXT_804);
d3823 1
a3823 1
    stringBuffer.append(TEXT_805);
d3825 1
a3825 1
    stringBuffer.append(TEXT_806);
d3827 1
a3827 1
    stringBuffer.append(TEXT_807);
d3834 2
a3835 2
    stringBuffer.append(TEXT_808);
    stringBuffer.append(TEXT_809);
d3837 1
a3837 1
    stringBuffer.append(TEXT_810);
d3839 1
a3839 1
    stringBuffer.append(TEXT_811);
d3841 1
a3841 1
    stringBuffer.append(TEXT_812);
d3850 1
a3850 1
    stringBuffer.append(TEXT_813);
d3852 1
a3852 1
    stringBuffer.append(TEXT_814);
d3854 1
a3854 1
    stringBuffer.append(TEXT_815);
d3856 1
a3856 1
    stringBuffer.append(TEXT_816);
d3862 1
a3862 1
    stringBuffer.append(TEXT_817);
d3864 1
a3864 1
    stringBuffer.append(TEXT_818);
d3866 1
a3866 1
    stringBuffer.append(TEXT_819);
d3870 1
a3870 1
    stringBuffer.append(TEXT_820);
d3872 1
a3872 1
    stringBuffer.append(TEXT_821);
d3874 1
a3874 1
    stringBuffer.append(TEXT_822);
d3878 1
a3878 1
    stringBuffer.append(TEXT_823);
d3880 1
a3880 1
    stringBuffer.append(TEXT_824);
d3886 2
a3887 2
    stringBuffer.append(TEXT_825);
    stringBuffer.append(TEXT_826);
d3889 1
a3889 1
    stringBuffer.append(TEXT_827);
d3891 1
a3891 1
    stringBuffer.append(TEXT_828);
d3914 1
a3914 1
    stringBuffer.append(TEXT_829);
d3916 1
a3916 1
    stringBuffer.append(TEXT_830);
d3918 1
a3918 1
    stringBuffer.append(TEXT_831);
d3920 1
a3920 1
    stringBuffer.append(TEXT_832);
d3925 1
a3925 1
    stringBuffer.append(TEXT_833);
d3934 1
a3934 1
    stringBuffer.append(TEXT_834);
d3936 1
a3936 1
    stringBuffer.append(TEXT_835);
d3938 1
a3938 1
    stringBuffer.append(TEXT_836);
d3940 1
a3940 1
    stringBuffer.append(TEXT_837);
d3944 1
a3944 1
    stringBuffer.append(TEXT_838);
d3946 1
a3946 1
    stringBuffer.append(TEXT_839);
d3948 1
a3948 1
    stringBuffer.append(TEXT_840);
d3952 1
a3952 1
    stringBuffer.append(TEXT_841);
d3954 1
a3954 1
    stringBuffer.append(TEXT_842);
d3959 1
a3959 1
    stringBuffer.append(TEXT_843);
d3967 1
a3967 1
    stringBuffer.append(TEXT_844);
d3969 1
a3969 1
    stringBuffer.append(TEXT_845);
d3973 1
a3973 1
    stringBuffer.append(TEXT_846);
d3975 1
a3975 1
    stringBuffer.append(TEXT_847);
d3980 1
a3980 1
    stringBuffer.append(TEXT_848);
d3982 1
a3982 1
    stringBuffer.append(TEXT_849);
d3984 1
a3984 1
    stringBuffer.append(TEXT_850);
d3986 1
a3986 1
    stringBuffer.append(TEXT_851);
d3990 1
a3990 1
    stringBuffer.append(TEXT_852);
d3992 1
a3992 1
    stringBuffer.append(TEXT_853);
d3994 1
a3994 1
    stringBuffer.append(TEXT_854);
d3999 1
a3999 1
    stringBuffer.append(TEXT_855);
d4001 1
a4001 1
    stringBuffer.append(TEXT_856);
d4003 1
a4003 1
    stringBuffer.append(TEXT_857);
d4005 1
a4005 1
    stringBuffer.append(TEXT_858);
d4009 1
a4009 1
    stringBuffer.append(TEXT_859);
d4011 1
a4011 1
    stringBuffer.append(TEXT_860);
d4013 1
a4013 1
    stringBuffer.append(TEXT_861);
d4017 1
a4017 1
    stringBuffer.append(TEXT_862);
d4019 1
a4019 1
    stringBuffer.append(TEXT_863);
d4023 1
a4023 1
    stringBuffer.append(TEXT_864);
d4027 1
a4027 1
    stringBuffer.append(TEXT_865);
d4035 1
a4035 1
    stringBuffer.append(TEXT_866);
d4040 1
a4040 1
    stringBuffer.append(TEXT_867);
d4050 1
a4050 1
    stringBuffer.append(TEXT_868);
d4052 1
a4052 1
    stringBuffer.append(TEXT_869);
d4054 1
a4054 1
    stringBuffer.append(TEXT_870);
d4056 1
a4056 1
    stringBuffer.append(TEXT_871);
d4060 1
a4060 1
    stringBuffer.append(TEXT_872);
d4062 1
a4062 1
    stringBuffer.append(TEXT_873);
d4064 1
a4064 1
    stringBuffer.append(TEXT_874);
d4068 1
a4068 1
    stringBuffer.append(TEXT_875);
d4073 1
a4073 1
    stringBuffer.append(TEXT_876);
d4075 1
a4075 1
    stringBuffer.append(TEXT_877);
d4077 1
a4077 1
    stringBuffer.append(TEXT_878);
d4081 1
a4081 1
    stringBuffer.append(TEXT_879);
d4085 1
a4085 1
    stringBuffer.append(TEXT_880);
d4090 1
a4090 1
    stringBuffer.append(TEXT_881);
d4094 1
a4094 1
    stringBuffer.append(TEXT_882);
d4096 1
a4096 1
    stringBuffer.append(TEXT_883);
d4098 1
a4098 1
    stringBuffer.append(TEXT_884);
d4100 1
a4100 1
    stringBuffer.append(TEXT_885);
d4102 1
a4102 1
    stringBuffer.append(TEXT_886);
d4104 1
a4104 1
    stringBuffer.append(TEXT_887);
d4106 1
a4106 1
    stringBuffer.append(TEXT_888);
d4108 1
a4108 1
    stringBuffer.append(TEXT_889);
d4110 1
a4110 1
    stringBuffer.append(TEXT_890);
d4114 1
a4114 1
    stringBuffer.append(TEXT_891);
d4116 1
a4116 1
    stringBuffer.append(TEXT_892);
d4118 1
a4118 1
    stringBuffer.append(TEXT_893);
d4123 1
a4123 1
    stringBuffer.append(TEXT_894);
d4125 1
a4125 1
    stringBuffer.append(TEXT_895);
d4127 1
a4127 1
    stringBuffer.append(TEXT_896);
d4132 1
a4132 1
    stringBuffer.append(TEXT_897);
d4134 1
a4134 1
    stringBuffer.append(TEXT_898);
d4138 1
a4138 1
    stringBuffer.append(TEXT_899);
d4142 1
a4142 1
    stringBuffer.append(TEXT_900);
d4146 1
a4146 1
    stringBuffer.append(TEXT_901);
d4153 1
a4153 1
    stringBuffer.append(TEXT_902);
d4157 1
a4157 1
    stringBuffer.append(TEXT_903);
d4159 1
a4159 1
    stringBuffer.append(TEXT_904);
d4161 1
a4161 1
    stringBuffer.append(TEXT_905);
d4166 1
a4166 1
    stringBuffer.append(TEXT_906);
d4168 1
a4168 1
    stringBuffer.append(TEXT_907);
d4172 1
a4172 1
    stringBuffer.append(TEXT_908);
d4176 1
a4176 1
    stringBuffer.append(TEXT_909);
d4178 1
a4178 1
    stringBuffer.append(TEXT_910);
d4180 1
a4180 1
    stringBuffer.append(TEXT_911);
d4182 1
a4182 1
    stringBuffer.append(TEXT_912);
d4184 1
a4184 1
    stringBuffer.append(TEXT_913);
d4186 1
a4186 1
    stringBuffer.append(TEXT_914);
d4188 1
a4188 1
    stringBuffer.append(TEXT_915);
d4190 1
a4190 1
    stringBuffer.append(TEXT_916);
d4192 1
a4192 1
    stringBuffer.append(TEXT_917);
d4194 1
a4194 1
    stringBuffer.append(TEXT_918);
d4196 1
a4196 1
    stringBuffer.append(TEXT_919);
d4198 1
a4198 1
    stringBuffer.append(TEXT_920);
d4205 6
d4214 1
a4214 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d4216 1
a4216 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d4218 1
a4219 7
    stringBuffer.append(TEXT_927);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_928);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_929);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_930);
d4223 1
a4223 1
    stringBuffer.append(TEXT_931);
d4231 1
a4231 1
    stringBuffer.append(TEXT_932);
d4235 1
a4235 1
    stringBuffer.append(TEXT_933);
d4237 1
a4237 1
    stringBuffer.append(TEXT_934);
d4239 1
a4239 1
    stringBuffer.append(TEXT_935);
d4241 1
a4241 1
    stringBuffer.append(TEXT_936);
d4243 1
a4243 1
    stringBuffer.append(TEXT_937);
d4245 1
a4245 1
    stringBuffer.append(TEXT_938);
d4247 1
a4247 1
    stringBuffer.append(TEXT_939);
d4249 1
a4249 1
    stringBuffer.append(TEXT_940);
d4251 1
a4251 1
    stringBuffer.append(TEXT_941);
d4253 1
a4253 1
    stringBuffer.append(TEXT_942);
d4255 1
a4255 1
    stringBuffer.append(TEXT_943);
d4257 1
a4257 1
    stringBuffer.append(TEXT_944);
d4261 1
a4261 1
    stringBuffer.append(TEXT_945);
d4265 1
a4265 1
    stringBuffer.append(TEXT_946);
d4267 1
a4267 1
    stringBuffer.append(TEXT_947);
d4271 6
d4278 1
d4280 1
d4282 1
a4282 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d4284 1
a4284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d4286 1
a4286 1
    stringBuffer.append(primaryView);
d4288 1
a4288 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4290 1
a4290 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4292 1
a4292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4294 1
a4294 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4296 2
a4298 2
    stringBuffer.append(TEXT_958);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d4300 1
a4300 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d4302 1
a4302 1
    stringBuffer.append(primaryView);
d4304 1
a4304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4305 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a4306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4308 1
a4308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4310 1
a4310 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4312 1
d4314 1
a4315 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a4316 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d4318 1
a4318 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d4320 1
a4320 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d4322 1
d4324 1
a4325 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4332 1
d4334 1
a4337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4338 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4341 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4344 1
a4345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4348 1
a4349 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4352 1
d4356 1
d4358 1
a4359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4360 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4365 6
    stringBuffer.append(TEXT_1001);
    stringBuffer.append(TEXT_1002);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_1003);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_1004);
d4370 1
a4370 1
    stringBuffer.append(TEXT_1005);
d4372 1
a4372 1
    stringBuffer.append(TEXT_1006);
d4376 1
a4376 1
    stringBuffer.append(TEXT_1007);
d4383 1
a4383 1
    stringBuffer.append(TEXT_1008);
d4385 1
a4385 1
    stringBuffer.append(TEXT_1009);
d4387 3
a4389 3
    stringBuffer.append(TEXT_1010);
    stringBuffer.append(TEXT_1011);
    stringBuffer.append(TEXT_1012);
d4391 1
a4391 1
    stringBuffer.append(TEXT_1013);
d4393 1
a4393 1
    stringBuffer.append(TEXT_1014);
d4395 1
a4395 1
    stringBuffer.append(TEXT_1015);
d4397 1
a4397 1
    stringBuffer.append(TEXT_1016);
d4399 1
a4399 1
    stringBuffer.append(TEXT_1017);
d4401 1
a4401 1
    stringBuffer.append(TEXT_1018);
d4403 1
a4403 1
    stringBuffer.append(TEXT_1019);
d4405 1
a4405 1
    stringBuffer.append(TEXT_1020);
d4407 1
a4407 1
    stringBuffer.append(TEXT_1021);
d4409 1
a4409 1
    stringBuffer.append(TEXT_1022);
d4411 1
a4411 1
    stringBuffer.append(TEXT_1023);
d4413 1
a4413 1
    stringBuffer.append(TEXT_1024);
d4421 1
a4421 1
    stringBuffer.append(TEXT_1025);
d4423 1
a4423 1
    stringBuffer.append(TEXT_1026);
d4425 1
a4425 1
    stringBuffer.append(TEXT_1027);
d4429 1
a4429 1
    stringBuffer.append(TEXT_1028);
d4431 1
a4431 1
    stringBuffer.append(TEXT_1029);
d4433 1
a4433 1
    stringBuffer.append(TEXT_1030);
d4435 1
a4435 1
    stringBuffer.append(TEXT_1031);
d4439 1
a4439 1
    stringBuffer.append(TEXT_1032);
d4441 1
a4441 1
    stringBuffer.append(TEXT_1033);
d4443 1
a4443 1
    stringBuffer.append(TEXT_1034);
d4445 1
a4445 1
    stringBuffer.append(TEXT_1035);
d4447 1
a4447 1
    stringBuffer.append(TEXT_1036);
d4454 1
a4454 1
    stringBuffer.append(TEXT_1037);
d4456 1
a4456 1
    stringBuffer.append(TEXT_1038);
d4458 1
a4458 1
    stringBuffer.append(TEXT_1039);
d4460 1
a4460 1
    stringBuffer.append(TEXT_1040);
d4464 1
a4464 1
    stringBuffer.append(TEXT_1041);
d4466 1
a4466 1
    stringBuffer.append(TEXT_1042);
d4468 1
a4468 1
    stringBuffer.append(TEXT_1043);
d4470 1
a4470 1
    stringBuffer.append(TEXT_1044);
d4472 1
a4472 1
    stringBuffer.append(TEXT_1045);
d4476 1
a4476 1
    stringBuffer.append(TEXT_1046);
d4481 1
a4481 1
    stringBuffer.append(TEXT_1047);
d4483 1
a4483 1
    stringBuffer.append(TEXT_1048);
d4485 1
a4485 1
    stringBuffer.append(TEXT_1049);
d4487 1
a4487 1
    stringBuffer.append(TEXT_1050);
d4491 1
a4491 1
    stringBuffer.append(TEXT_1051);
d4493 1
a4493 1
    stringBuffer.append(TEXT_1052);
d4495 1
a4495 1
    stringBuffer.append(TEXT_1053);
d4497 1
a4497 1
    stringBuffer.append(TEXT_1054);
d4499 1
a4499 1
    stringBuffer.append(TEXT_1055);
d4504 1
a4504 1
    stringBuffer.append(TEXT_1056);
d4515 7
a4523 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d4525 1
a4525 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
a4528 6
    stringBuffer.append(TEXT_1062);
    stringBuffer.append(TEXT_1063);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_1064);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_1065);
d4532 1
a4532 1
    stringBuffer.append(TEXT_1066);
d4534 1
a4534 1
    stringBuffer.append(TEXT_1067);
d4540 1
a4540 1
    stringBuffer.append(TEXT_1068);
d4542 1
a4542 1
    stringBuffer.append(TEXT_1069);
d4546 1
a4546 1
    stringBuffer.append(TEXT_1070);
d4550 1
a4550 1
    stringBuffer.append(TEXT_1071);
d4552 1
a4552 1
    stringBuffer.append(TEXT_1072);
d4554 1
a4554 1
    stringBuffer.append(TEXT_1073);
d4556 1
a4556 1
    stringBuffer.append(TEXT_1074);
d4558 1
a4558 1
    stringBuffer.append(TEXT_1075);
d4560 1
a4560 1
    stringBuffer.append(TEXT_1076);
d4564 1
a4564 1
    stringBuffer.append(TEXT_1077);
d4568 1
a4568 1
    stringBuffer.append(TEXT_1078);
d4570 1
a4570 1
    stringBuffer.append(TEXT_1079);
d4572 1
a4572 1
    stringBuffer.append(TEXT_1080);
d4574 1
a4574 1
    stringBuffer.append(TEXT_1081);
d4576 1
a4576 1
    stringBuffer.append(TEXT_1082);
d4578 1
a4578 1
    stringBuffer.append(TEXT_1083);
d4580 1
a4580 1
    stringBuffer.append(TEXT_1084);
d4582 1
a4582 1
    stringBuffer.append(TEXT_1085);
d4584 1
a4584 1
    stringBuffer.append(TEXT_1086);
d4586 1
a4586 1
    stringBuffer.append(TEXT_1087);
d4588 1
a4588 1
    stringBuffer.append(TEXT_1088);
d4590 1
a4590 1
    stringBuffer.append(TEXT_1089);
d4592 1
a4592 1
    stringBuffer.append(TEXT_1090);
d4594 1
a4594 1
    stringBuffer.append(TEXT_1091);
d4601 1
a4601 1
    stringBuffer.append(TEXT_1092);
d4604 1
a4604 1
    stringBuffer.append(TEXT_1093);
d4606 1
a4606 1
    stringBuffer.append(TEXT_1094);
d4608 1
a4608 1
    stringBuffer.append(TEXT_1095);
d4610 1
a4610 1
    stringBuffer.append(TEXT_1096);
d4612 1
a4612 1
    stringBuffer.append(TEXT_1097);
d4614 1
a4614 1
    stringBuffer.append(TEXT_1098);
d4616 1
a4616 1
    stringBuffer.append(TEXT_1099);
d4618 1
a4618 1
    stringBuffer.append(TEXT_1100);
d4622 1
a4622 1
    stringBuffer.append(TEXT_1101);
d4625 1
a4625 1
    stringBuffer.append(TEXT_1102);
d4627 1
a4627 1
    stringBuffer.append(TEXT_1103);
d4629 1
a4629 1
    stringBuffer.append(TEXT_1104);
d4631 1
a4631 1
    stringBuffer.append(TEXT_1105);
d4633 1
a4633 1
    stringBuffer.append(TEXT_1106);
d4635 1
a4635 1
    stringBuffer.append(TEXT_1107);
d4639 1
a4639 1
    stringBuffer.append(TEXT_1108);
d4641 1
a4641 1
    stringBuffer.append(TEXT_1109);
d4643 1
a4643 1
    stringBuffer.append(TEXT_1110);
d4650 1
a4650 1
    stringBuffer.append(TEXT_1111);
d4654 1
a4654 1
    stringBuffer.append(TEXT_1112);
d4658 1
a4658 1
    stringBuffer.append(TEXT_1113);
d4662 2
a4663 2
    stringBuffer.append(TEXT_1114);
    stringBuffer.append(TEXT_1115);
d4665 1
a4665 1
    stringBuffer.append(TEXT_1116);
d4667 1
a4667 1
    stringBuffer.append(TEXT_1117);
d4669 1
a4669 1
    stringBuffer.append(TEXT_1118);
d4671 1
a4671 1
    stringBuffer.append(TEXT_1119);
d4673 1
a4673 1
    stringBuffer.append(TEXT_1120);
d4675 1
a4675 1
    stringBuffer.append(TEXT_1121);
d4677 1
a4677 1
    stringBuffer.append(TEXT_1122);
d4679 1
a4679 1
    stringBuffer.append(TEXT_1123);
d4681 1
a4681 1
    stringBuffer.append(TEXT_1124);
d4683 1
a4683 1
    stringBuffer.append(TEXT_1125);
d4685 1
a4685 1
    stringBuffer.append(TEXT_1126);
d4689 3
a4691 3
    stringBuffer.append(TEXT_1127);
    stringBuffer.append(TEXT_1128);
    stringBuffer.append(TEXT_1129);
d4693 1
a4693 1
    stringBuffer.append(TEXT_1130);
d4695 1
a4695 1
    stringBuffer.append(TEXT_1131);
d4699 1
a4699 1
    stringBuffer.append(TEXT_1132);
d4701 1
a4701 1
    stringBuffer.append(TEXT_1133);
d4703 1
a4703 1
    stringBuffer.append(TEXT_1134);
d4705 1
a4705 1
    stringBuffer.append(TEXT_1135);
d4707 1
a4707 1
    stringBuffer.append(TEXT_1136);
d4709 1
a4709 1
    stringBuffer.append(TEXT_1137);
d4711 1
a4711 1
    stringBuffer.append(TEXT_1138);
d4713 1
a4713 1
    stringBuffer.append(TEXT_1139);
d4715 1
a4715 1
    stringBuffer.append(TEXT_1140);
d4717 1
a4717 1
    stringBuffer.append(TEXT_1141);
d4721 1
a4721 1
    stringBuffer.append(TEXT_1142);
d4730 1
a4730 1
    stringBuffer.append(TEXT_1143);
d4732 1
a4732 1
    stringBuffer.append(TEXT_1144);
d4734 1
a4734 1
    stringBuffer.append(TEXT_1145);
d4745 1
a4745 1
    stringBuffer.append(TEXT_1146);
d4747 1
a4747 1
    stringBuffer.append(TEXT_1147);
d4749 1
a4749 1
    stringBuffer.append(TEXT_1148);
d4757 1
a4757 1
    stringBuffer.append(TEXT_1149);
d4759 1
a4759 1
    stringBuffer.append(TEXT_1150);
d4761 1
a4761 1
    stringBuffer.append(TEXT_1151);
d4763 1
a4763 1
    stringBuffer.append(TEXT_1152);
d4765 1
a4765 1
    stringBuffer.append(TEXT_1153);
d4767 1
a4767 1
    stringBuffer.append(TEXT_1154);
d4769 1
a4769 1
    stringBuffer.append(TEXT_1155);
d4771 1
a4771 1
    stringBuffer.append(TEXT_1156);
d4773 1
a4773 1
    stringBuffer.append(TEXT_1157);
d4775 1
a4775 1
    stringBuffer.append(TEXT_1158);
d4777 1
a4777 1
    stringBuffer.append(TEXT_1159);
d4782 1
a4782 1
    stringBuffer.append(TEXT_1160);
d4784 1
a4784 1
    stringBuffer.append(TEXT_1161);
d4792 1
a4792 1
    stringBuffer.append(TEXT_1162);
d4794 1
a4794 1
    stringBuffer.append(TEXT_1163);
d4798 1
a4798 1
    stringBuffer.append(TEXT_1164);
d4800 1
a4800 1
    stringBuffer.append(TEXT_1165);
@


1.36
log
@[170340]: Expand collapsed compartments automatically when new elements are added to it;
[170341]: Expand/Collapse handles should not be available for empty compartments.
@
text
@d1086 101
a1186 94
  protected final String TEXT_1065 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1066 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1067 = "(";
  protected final String TEXT_1068 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1069 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1070 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1071 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1072 = " editingDomain = ";
  protected final String TEXT_1073 = ".getEditingDomain(";
  protected final String TEXT_1074 = ".getDiagram().getElement());";
  protected final String TEXT_1075 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1076 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1077 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1078 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1079 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1080 = " createDomainModelCommand(";
  protected final String TEXT_1081 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1082 = " element = ";
  protected final String TEXT_1083 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1084 = " result = new ";
  protected final String TEXT_1085 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1086 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1087 = " ";
  protected final String TEXT_1088 = "feature = (";
  protected final String TEXT_1089 = ") ";
  protected final String TEXT_1090 = ".eINSTANCE.get";
  protected final String TEXT_1091 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1092 = ".parseValue(feature, values[";
  protected final String TEXT_1093 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1094 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1095 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1096 = " ";
  protected final String TEXT_1097 = "values = new ";
  protected final String TEXT_1098 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1099 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1100 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1101 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1102 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1103 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1104 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1105 = NL + "\t\t\t\t});";
  protected final String TEXT_1106 = NL + "\t\t}" + NL;
  protected final String TEXT_1107 = NL;
  protected final String TEXT_1108 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1109 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1110 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1111 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1112 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1113 = "(this, ";
  protected final String TEXT_1114 = ".class, new ";
  protected final String TEXT_1115 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1116 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1117 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1118 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1119 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1120 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1121 = NL;
  protected final String TEXT_1122 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1123 = " domainModelRefresher = new ";
  protected final String TEXT_1124 = "(this);" + NL;
  protected final String TEXT_1125 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1126 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1127 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1128 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1129 = " nextChild = (";
  protected final String TEXT_1130 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1131 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1132 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1133 = ") ";
  protected final String TEXT_1134 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1135 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1136 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1137 = ".eINSTANCE.get";
  protected final String TEXT_1138 = "(), labelRefresher);";
  protected final String TEXT_1139 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1140 = ".eINSTANCE.get";
  protected final String TEXT_1141 = "(), labelRefresher);";
  protected final String TEXT_1142 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1143 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1144 = " result = new ";
  protected final String TEXT_1145 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1146 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1147 = " next = (";
  protected final String TEXT_1148 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_1149 = " style = (";
  protected final String TEXT_1150 = ") next.getStyle(";
  protected final String TEXT_1151 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1152 = ".getVisualID(next)) {";
  protected final String TEXT_1153 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1154 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1155 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1156 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1157 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1158 = NL;
d4541 4
a4545 2
    stringBuffer.append(TEXT_1066);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d4547 5
a4551 1
    stringBuffer.append(editPatternCode);
d4555 3
a4557 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d4559 3
a4561 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d4563 1
a4563 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d4565 1
a4565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d4567 1
a4567 1
    stringBuffer.append(primaryView);
d4569 4
d4574 5
a4578 3
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = featureLabelModelFacet.getMetaFeatures();
d4580 7
a4586 1
    stringBuffer.append(TEXT_1075);
d4588 1
a4588 1
    stringBuffer.append(TEXT_1076);
d4590 1
a4590 1
    stringBuffer.append(TEXT_1077);
d4592 1
a4592 1
    stringBuffer.append(TEXT_1078);
d4594 1
a4594 1
    stringBuffer.append(TEXT_1079);
d4596 1
a4596 1
    stringBuffer.append(TEXT_1080);
d4598 1
a4598 1
    stringBuffer.append(TEXT_1081);
d4600 1
a4600 1
    stringBuffer.append(TEXT_1082);
d4602 1
a4602 1
    stringBuffer.append(TEXT_1083);
d4604 1
a4604 1
    stringBuffer.append(TEXT_1084);
d4606 1
a4606 1
    stringBuffer.append(TEXT_1085);
d4613 1
a4613 1
    stringBuffer.append(TEXT_1086);
d4616 1
a4616 1
    stringBuffer.append(TEXT_1087);
d4618 1
a4618 1
    stringBuffer.append(TEXT_1088);
d4620 1
a4620 1
    stringBuffer.append(TEXT_1089);
d4622 1
a4622 1
    stringBuffer.append(TEXT_1090);
d4624 1
a4624 1
    stringBuffer.append(TEXT_1091);
d4626 1
a4626 1
    stringBuffer.append(TEXT_1092);
d4628 1
a4628 1
    stringBuffer.append(TEXT_1093);
d4630 1
a4630 1
    stringBuffer.append(TEXT_1094);
d4634 1
a4634 1
    stringBuffer.append(TEXT_1095);
d4637 1
a4637 1
    stringBuffer.append(TEXT_1096);
d4639 1
a4639 1
    stringBuffer.append(TEXT_1097);
d4641 1
a4641 1
    stringBuffer.append(TEXT_1098);
d4643 1
a4643 1
    stringBuffer.append(TEXT_1099);
d4645 1
a4645 1
    stringBuffer.append(TEXT_1100);
d4647 1
a4647 1
    stringBuffer.append(TEXT_1101);
d4651 3
a4653 1
    stringBuffer.append(TEXT_1102);
d4655 1
a4655 1
    stringBuffer.append(TEXT_1103);
d4662 1
a4662 1
    stringBuffer.append(TEXT_1104);
d4666 1
a4666 1
    stringBuffer.append(TEXT_1105);
d4670 1
a4670 1
    stringBuffer.append(TEXT_1106);
d4674 2
a4675 2
    stringBuffer.append(TEXT_1107);
    stringBuffer.append(TEXT_1108);
d4677 1
a4677 1
    stringBuffer.append(TEXT_1109);
d4679 1
a4679 1
    stringBuffer.append(TEXT_1110);
d4681 1
a4681 1
    stringBuffer.append(TEXT_1111);
d4683 1
a4683 1
    stringBuffer.append(TEXT_1112);
d4685 1
a4685 1
    stringBuffer.append(TEXT_1113);
d4687 1
a4687 1
    stringBuffer.append(TEXT_1114);
d4689 1
a4689 1
    stringBuffer.append(TEXT_1115);
d4691 1
a4691 1
    stringBuffer.append(TEXT_1116);
d4693 1
a4693 1
    stringBuffer.append(TEXT_1117);
d4695 1
a4695 1
    stringBuffer.append(TEXT_1118);
d4697 1
a4697 1
    stringBuffer.append(TEXT_1119);
d4701 3
a4703 3
    stringBuffer.append(TEXT_1120);
    stringBuffer.append(TEXT_1121);
    stringBuffer.append(TEXT_1122);
d4705 1
a4705 1
    stringBuffer.append(TEXT_1123);
d4707 1
a4707 1
    stringBuffer.append(TEXT_1124);
d4711 1
a4711 1
    stringBuffer.append(TEXT_1125);
d4713 1
a4713 1
    stringBuffer.append(TEXT_1126);
d4715 1
a4715 1
    stringBuffer.append(TEXT_1127);
d4717 1
a4717 1
    stringBuffer.append(TEXT_1128);
d4719 1
a4719 1
    stringBuffer.append(TEXT_1129);
d4721 1
a4721 1
    stringBuffer.append(TEXT_1130);
d4723 1
a4723 1
    stringBuffer.append(TEXT_1131);
d4725 1
a4725 1
    stringBuffer.append(TEXT_1132);
d4727 1
a4727 1
    stringBuffer.append(TEXT_1133);
d4729 1
a4729 1
    stringBuffer.append(TEXT_1134);
d4733 1
a4733 1
    stringBuffer.append(TEXT_1135);
d4742 1
a4742 1
    stringBuffer.append(TEXT_1136);
d4744 1
a4744 1
    stringBuffer.append(TEXT_1137);
d4746 1
a4746 1
    stringBuffer.append(TEXT_1138);
d4757 1
a4757 1
    stringBuffer.append(TEXT_1139);
d4759 1
a4759 1
    stringBuffer.append(TEXT_1140);
d4761 1
a4761 1
    stringBuffer.append(TEXT_1141);
d4769 1
a4769 1
    stringBuffer.append(TEXT_1142);
d4771 1
a4771 1
    stringBuffer.append(TEXT_1143);
d4773 1
a4773 1
    stringBuffer.append(TEXT_1144);
d4775 1
a4775 1
    stringBuffer.append(TEXT_1145);
d4777 1
a4777 1
    stringBuffer.append(TEXT_1146);
d4779 1
a4779 1
    stringBuffer.append(TEXT_1147);
d4781 1
a4781 1
    stringBuffer.append(TEXT_1148);
d4783 1
a4783 1
    stringBuffer.append(TEXT_1149);
d4785 1
a4785 1
    stringBuffer.append(TEXT_1150);
d4787 1
a4787 1
    stringBuffer.append(TEXT_1151);
d4789 1
a4789 1
    stringBuffer.append(TEXT_1152);
d4794 1
a4794 1
    stringBuffer.append(TEXT_1153);
d4796 1
a4796 1
    stringBuffer.append(TEXT_1154);
d4804 1
a4804 1
    stringBuffer.append(TEXT_1155);
d4806 1
a4806 1
    stringBuffer.append(TEXT_1156);
d4810 1
a4810 1
    stringBuffer.append(TEXT_1157);
d4812 1
a4812 1
    stringBuffer.append(TEXT_1158);
@


1.35
log
@[170248]: Beautify compartments generated for the lite version
@
text
@d187 18
a204 18
  protected final String TEXT_166 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_167 = ".create(editingDomain, ";
  protected final String TEXT_168 = ", ";
  protected final String TEXT_169 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_170 = "(childNode, ";
  protected final String TEXT_171 = "null";
  protected final String TEXT_172 = "(";
  protected final String TEXT_173 = ") constraint";
  protected final String TEXT_174 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_175 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_176 = "(";
  protected final String TEXT_177 = ", element, ";
  protected final String TEXT_178 = "null";
  protected final String TEXT_179 = "((";
  protected final String TEXT_180 = ") constraint).getCopy().union(new ";
  protected final String TEXT_181 = "(";
  protected final String TEXT_182 = ", ";
  protected final String TEXT_183 = "))";
d206 76
a281 76
  protected final String TEXT_185 = ".INSTANCE));";
  protected final String TEXT_186 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_187 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_188 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_189 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_190 = NL;
  protected final String TEXT_191 = NL + "protected ";
  protected final String TEXT_192 = " getCloneCommand(";
  protected final String TEXT_193 = " request) {" + NL + "\t";
  protected final String TEXT_194 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_195 = " command = new ";
  protected final String TEXT_196 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_197 = " childPart;" + NL + "\t";
  protected final String TEXT_198 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_199 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_200 = " createCloneCommand(final ";
  protected final String TEXT_201 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_202 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_203 = " childNode = (";
  protected final String TEXT_204 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_205 = " editingDomain = ";
  protected final String TEXT_206 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_207 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_208 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_209 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_210 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_211 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_212 = NL + "\t\t\tcase ";
  protected final String TEXT_213 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_214 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_215 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_216 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_217 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_218 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = NL + "\t\tif (";
  protected final String TEXT_221 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_222 = NL + "\t\t}";
  protected final String TEXT_223 = NL + "\t\tif (";
  protected final String TEXT_224 = ".size() >= ";
  protected final String TEXT_225 = ".eINSTANCE.get";
  protected final String TEXT_226 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_227 = NL + "\t\t}";
  protected final String TEXT_228 = NL;
  protected final String TEXT_229 = NL + "\t\tif (";
  protected final String TEXT_230 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_231 = NL + "\t\t}";
  protected final String TEXT_232 = NL + "\t\tif (";
  protected final String TEXT_233 = ".size() >= ";
  protected final String TEXT_234 = ".eINSTANCE.get";
  protected final String TEXT_235 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_236 = NL + "\t\t}";
  protected final String TEXT_237 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_238 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_239 = " result = (";
  protected final String TEXT_240 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_241 = "();";
  protected final String TEXT_242 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_243 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_244 = ".getElement(), ";
  protected final String TEXT_245 = ".eINSTANCE.get";
  protected final String TEXT_246 = "(), result));";
  protected final String TEXT_247 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_248 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_249 = ".getElement(), ";
  protected final String TEXT_250 = ".eINSTANCE.get";
  protected final String TEXT_251 = "(), result));";
  protected final String TEXT_252 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_253 = "(";
  protected final String TEXT_254 = ", result, ";
  protected final String TEXT_255 = "null";
  protected final String TEXT_256 = "((";
  protected final String TEXT_257 = ") constraint).getCopy().union(new ";
  protected final String TEXT_258 = "(";
  protected final String TEXT_259 = ", ";
  protected final String TEXT_260 = "))";
d283 181
a463 181
  protected final String TEXT_262 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_263 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_264 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_265 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_266 = NL + "\t\t\tprotected ";
  protected final String TEXT_267 = " getCreateCommand(";
  protected final String TEXT_268 = " request) {";
  protected final String TEXT_269 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_270 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_271 = " requestEx = (";
  protected final String TEXT_272 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_273 = " result = new ";
  protected final String TEXT_274 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_275 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_276 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_277 = "((View) getModel(), requestEx";
  protected final String TEXT_278 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_279 = ")getConstraintFor(request)";
  protected final String TEXT_280 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_281 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_282 = "(";
  protected final String TEXT_283 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_284 = NL + "\t\t\t\treturn ";
  protected final String TEXT_285 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_286 = NL + "\t\t\tprotected ";
  protected final String TEXT_287 = " createChangeConstraintCommand(final ";
  protected final String TEXT_288 = " request, final ";
  protected final String TEXT_289 = " child, Object constraint) {" + NL + "\t\t\t\tif (!isDirectChild(child)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_290 = ".INSTANCE;" + NL + "\t\t\t\t}";
  protected final String TEXT_291 = NL;
  protected final String TEXT_292 = "\t\t\t\tfinal ";
  protected final String TEXT_293 = " node = (";
  protected final String TEXT_294 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_295 = " emfCommand = new ";
  protected final String TEXT_296 = "(node, request, ((";
  protected final String TEXT_297 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_298 = "(";
  protected final String TEXT_299 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_300 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_301 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_302 = NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_303 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_304 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_305 = " createChangeConstraintCommand(";
  protected final String TEXT_306 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_307 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_308 = NL + "\t\t\tprotected ";
  protected final String TEXT_309 = " createChildEditPolicy(";
  protected final String TEXT_310 = " child) {";
  protected final String TEXT_311 = NL + "\t\t\t\tif (isDirectChild(child)) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_312 = " result = child.getEditPolicy(";
  protected final String TEXT_313 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t\t}";
  protected final String TEXT_314 = NL + "\t\t\t\treturn new ";
  protected final String TEXT_315 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_316 = " getTargetEditPart(";
  protected final String TEXT_317 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_318 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_319 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_320 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_321 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_322 = " getReconnectTargetCommand(";
  protected final String TEXT_323 = " request) {";
  protected final String TEXT_324 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_325 = ".INSTANCE;";
  protected final String TEXT_326 = NL + "\t\t\t\t";
  protected final String TEXT_327 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_328 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_329 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_330 = " edge = (";
  protected final String TEXT_331 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_332 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_333 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_334 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_335 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_336 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_337 = NL + "\t\t\t\tcase ";
  protected final String TEXT_338 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_339 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_340 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_341 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_342 = "(";
  protected final String TEXT_343 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_344 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_345 = " getReconnectSourceCommand(";
  protected final String TEXT_346 = " request) {";
  protected final String TEXT_347 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_348 = ".INSTANCE;";
  protected final String TEXT_349 = NL + "\t\t\t\t";
  protected final String TEXT_350 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_351 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_352 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_353 = " edge = (";
  protected final String TEXT_354 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_355 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_356 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_357 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_358 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_359 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_360 = NL + "\t\t\t\tcase ";
  protected final String TEXT_361 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_362 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_363 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_364 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_365 = "(";
  protected final String TEXT_366 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_367 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_368 = " getConnectionCreateCommand(";
  protected final String TEXT_369 = " request) {";
  protected final String TEXT_370 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_371 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_372 = " requestEx = (";
  protected final String TEXT_373 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_374 = " result = new ";
  protected final String TEXT_375 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_376 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_377 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_378 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_379 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (!result.canExecute()) {" + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_380 = " wrappedResult = new ";
  protected final String TEXT_381 = "(";
  protected final String TEXT_382 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_383 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_384 = " getConnectionCompleteCommand(";
  protected final String TEXT_385 = " request) {";
  protected final String TEXT_386 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_387 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_388 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_389 = " requestEx = (";
  protected final String TEXT_390 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_391 = " result = new ";
  protected final String TEXT_392 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_393 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_394 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_395 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_396 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_397 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_398 = "(";
  protected final String TEXT_399 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_400 = NL + "\t\t\t\treturn ";
  protected final String TEXT_401 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_402 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_403 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_404 = "());";
  protected final String TEXT_405 = NL;
  protected final String TEXT_406 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_407 = "\", new ";
  protected final String TEXT_408 = "()); //$NON-NLS-1$";
  protected final String TEXT_409 = NL;
  protected final String TEXT_410 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_411 = ".OPEN_ROLE";
  protected final String TEXT_412 = " + \"";
  protected final String TEXT_413 = "\" ";
  protected final String TEXT_414 = ", new ";
  protected final String TEXT_415 = "());";
  protected final String TEXT_416 = NL + "\t\tinstallEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());";
  protected final String TEXT_417 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_418 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_419 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_420 = " getPrimaryDragEditPolicy() {";
  protected final String TEXT_421 = NL + "\t\treturn new ";
  protected final String TEXT_422 = "();";
  protected final String TEXT_423 = NL + "\t\t";
  protected final String TEXT_424 = " result = new ";
  protected final String TEXT_425 = "();";
  protected final String TEXT_426 = NL + "\t\t";
  protected final String TEXT_427 = " result = new ";
  protected final String TEXT_428 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_429 = " createSelectionHandles() {" + NL + "\t\t\t\t";
  protected final String TEXT_430 = " result = super.createSelectionHandles();" + NL + "\t\t\t\tfor(";
  protected final String TEXT_431 = " it = getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_432 = " next = (";
  protected final String TEXT_433 = ") it.next();" + NL + "\t\t\t\t\t";
  protected final String TEXT_434 = " nextView = (";
  protected final String TEXT_435 = ") next.getModel();" + NL + "\t\t\t\t\tswitch (";
  protected final String TEXT_436 = ".getVisualID(nextView)) {";
  protected final String TEXT_437 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_438 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\tresult.addAll(((";
  protected final String TEXT_439 = ") next).createSelectionHandles());" + NL + "\t\t\t\t\t\tbreak;";
  protected final String TEXT_440 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_441 = NL + "\t\tresult.setResizeDirections(";
  protected final String TEXT_442 = ".NONE);";
d465 24
a488 24
  protected final String TEXT_444 = ".";
  protected final String TEXT_445 = " | ";
  protected final String TEXT_446 = ");";
  protected final String TEXT_447 = NL + "\t\treturn result;";
  protected final String TEXT_448 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_449 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_450 = " invisibleRectangle = new ";
  protected final String TEXT_451 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_452 = "());" + NL + "\t\t";
  protected final String TEXT_453 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_454 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_455 = NL + NL + "\t\t";
  protected final String TEXT_456 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL;
  protected final String TEXT_457 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_458 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_459 = " result = new ";
  protected final String TEXT_460 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_461 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_462 = " createNodeShape() {";
  protected final String TEXT_463 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_464 = "()";
  protected final String TEXT_465 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_466 = ";";
  protected final String TEXT_467 = NL + "\t\tprimaryShape = ";
d490 188
a677 188
  protected final String TEXT_469 = NL + "\t\t";
  protected final String TEXT_470 = " figure = new ";
  protected final String TEXT_471 = "();";
  protected final String TEXT_472 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_473 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_474 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_475 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_476 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_477 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_478 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_479 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_480 = " view = (";
  protected final String TEXT_481 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_482 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_483 = " decorationPane = new ";
  protected final String TEXT_484 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_485 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_486 = " imageFigure = new ";
  protected final String TEXT_487 = "(";
  protected final String TEXT_488 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_489 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_490 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_491 = " setupContentPane(";
  protected final String TEXT_492 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_493 = NL + "\t\t\t";
  protected final String TEXT_494 = " layout = new ";
  protected final String TEXT_495 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_496 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_497 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_498 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_499 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_500 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_501 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_502 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_503 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_504 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_505 = " childEditPart) {";
  protected final String TEXT_506 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_507 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_508 = ") childEditPart).";
  protected final String TEXT_509 = "(getPrimaryShape().";
  protected final String TEXT_510 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_511 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_512 = ") {" + NL + "\t\t\t";
  protected final String TEXT_513 = " pane = getPrimaryShape().";
  protected final String TEXT_514 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_515 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_516 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_517 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_518 = ") {" + NL + "\t\t\t";
  protected final String TEXT_519 = " pane = getPrimaryShape().";
  protected final String TEXT_520 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_521 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_522 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_523 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_524 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_525 = NL + "\t\tfor(";
  protected final String TEXT_526 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_527 = " nextChild = (";
  protected final String TEXT_528 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_529 = ".getVisualID(nextChild) == ";
  protected final String TEXT_530 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_531 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_532 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_533 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_534 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_535 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_536 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_537 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_538 = NL;
  protected final String TEXT_539 = "if (";
  protected final String TEXT_540 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_541 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_542 = " getLabelEditPart(";
  protected final String TEXT_543 = " req) {" + NL + "\t\t";
  protected final String TEXT_544 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_545 = " view = (";
  protected final String TEXT_546 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_547 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_548 = NL + "\t\t\t\tcase ";
  protected final String TEXT_549 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_550 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_551 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_552 = " childEditPart) {";
  protected final String TEXT_553 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_554 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_555 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_556 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_557 = " root = (";
  protected final String TEXT_558 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_559 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_560 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_561 = " childEditPart) {";
  protected final String TEXT_562 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_563 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_564 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_565 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_566 = " childEditPart, int index) {";
  protected final String TEXT_567 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_568 = " labelFigure = ((";
  protected final String TEXT_569 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_570 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_571 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_572 = " childFigure = ((";
  protected final String TEXT_573 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_574 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_575 = " childEditPart) {";
  protected final String TEXT_576 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_577 = " labelFigure = ((";
  protected final String TEXT_578 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_579 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_580 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_581 = " childFigure = ((";
  protected final String TEXT_582 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_583 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_584 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_585 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_586 = " childEditPart = (";
  protected final String TEXT_587 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_588 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_589 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_590 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_591 = ";" + NL + "\t\t";
  protected final String TEXT_592 = " bounds = (";
  protected final String TEXT_593 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_594 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_595 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_596 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_597 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_598 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_599 = " getSourceConnectionAnchor(";
  protected final String TEXT_600 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_601 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_602 = " getSourceConnectionAnchor(";
  protected final String TEXT_603 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_604 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_605 = "  getTargetConnectionAnchor(";
  protected final String TEXT_606 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_607 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_608 = "  getTargetConnectionAnchor(";
  protected final String TEXT_609 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_610 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_611 = NL + "\t\tif (";
  protected final String TEXT_612 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_613 = "(this);" + NL + "\t\t}";
  protected final String TEXT_614 = NL + "\t\tif (";
  protected final String TEXT_615 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_616 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_617 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_618 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_619 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_620 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_621 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_622 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_623 = NL;
  protected final String TEXT_624 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_625 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_626 = " domainModelEditDomain = ";
  protected final String TEXT_627 = ".getEditingDomain(";
  protected final String TEXT_628 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_629 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_630 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_631 = " {";
  protected final String TEXT_632 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_633 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_634 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_635 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_636 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_637 = " createFilter() {";
  protected final String TEXT_638 = NL + "\t\t\t";
  protected final String TEXT_639 = " filter = ";
  protected final String TEXT_640 = ".createFeatureFilter(";
  protected final String TEXT_641 = ".eINSTANCE.get";
  protected final String TEXT_642 = "());";
  protected final String TEXT_643 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_644 = ".createFeatureFilter(";
  protected final String TEXT_645 = ".eINSTANCE.get";
  protected final String TEXT_646 = "()));";
  protected final String TEXT_647 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_648 = ".createNotifierFilter(";
  protected final String TEXT_649 = ".getElement()));";
  protected final String TEXT_650 = NL + "\t\t\t";
  protected final String TEXT_651 = " filter = ";
  protected final String TEXT_652 = ".createNotifierFilter(";
  protected final String TEXT_653 = ".getElement());";
  protected final String TEXT_654 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_655 = NL + "\t\t\t";
  protected final String TEXT_656 = " filter = getConstrainedChildrenFilter();";
d679 86
a764 86
  protected final String TEXT_658 = " filter = ";
  protected final String TEXT_659 = ".NOT_TOUCH;";
  protected final String TEXT_660 = NL + "\t\t\treturn filter;";
  protected final String TEXT_661 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_662 = " getCreateNotationalElementCommand(";
  protected final String TEXT_663 = " descriptor) {";
  protected final String TEXT_664 = NL;
  protected final String TEXT_665 = "\t\t\t";
  protected final String TEXT_666 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_667 = NL + "\t\t\tcase ";
  protected final String TEXT_668 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_669 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_670 = "(";
  protected final String TEXT_671 = ", domainElement, ";
  protected final String TEXT_672 = "new ";
  protected final String TEXT_673 = "(0, 0, ";
  protected final String TEXT_674 = ", ";
  protected final String TEXT_675 = ")";
  protected final String TEXT_676 = NL + "null";
  protected final String TEXT_677 = ", ";
  protected final String TEXT_678 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_679 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_680 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_681 = " getSemanticChildNodes() {";
  protected final String TEXT_682 = NL;
  protected final String TEXT_683 = NL + "\treturn ";
  protected final String TEXT_684 = ".EMPTY_LIST;";
  protected final String TEXT_685 = NL + "\t";
  protected final String TEXT_686 = " result = new ";
  protected final String TEXT_687 = "();";
  protected final String TEXT_688 = NL + "\t";
  protected final String TEXT_689 = " viewObject = ";
  protected final String TEXT_690 = ";" + NL + "\t";
  protected final String TEXT_691 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_692 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_693 = NL + "\tfor(";
  protected final String TEXT_694 = " it = ";
  protected final String TEXT_695 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_696 = ") it.next();";
  protected final String TEXT_697 = NL + "\tnextValue = (";
  protected final String TEXT_698 = ")";
  protected final String TEXT_699 = ";";
  protected final String TEXT_700 = NL + "\tnodeVID = ";
  protected final String TEXT_701 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_702 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_703 = NL + "\tcase ";
  protected final String TEXT_704 = ".VISUAL_ID: {";
  protected final String TEXT_705 = NL + "\tif (";
  protected final String TEXT_706 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_707 = NL + "\t\tresult.add(new ";
  protected final String TEXT_708 = "(nextValue, nodeVID));";
  protected final String TEXT_709 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_710 = NL + "\t\t}";
  protected final String TEXT_711 = NL + "\t}";
  protected final String TEXT_712 = NL + "\t}";
  protected final String TEXT_713 = NL + "\treturn result;";
  protected final String TEXT_714 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_715 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_716 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_717 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_718 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_719 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_720 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_721 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_722 = " domainModelEditDomain = ";
  protected final String TEXT_723 = ".getEditingDomain(";
  protected final String TEXT_724 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_725 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_726 = NL;
  protected final String TEXT_727 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_728 = " domainModelEditDomain = ";
  protected final String TEXT_729 = ".getEditingDomain(";
  protected final String TEXT_730 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_731 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_732 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_733 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_734 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_735 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_736 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_737 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_738 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_739 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_740 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_741 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_742 = ".createEventTypeFilter(";
  protected final String TEXT_743 = ".SET).or(" + NL + "\t\t\t\t";
d766 1
a766 1
  protected final String TEXT_745 = ".UNSET).or(" + NL + "\t\t\t\t";
d768 1
a768 1
  protected final String TEXT_747 = ".REMOVE).or(" + NL + "\t\t\t\t";
d770 49
a818 49
  protected final String TEXT_749 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_750 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_751 = " createFilter() {";
  protected final String TEXT_752 = NL;
  protected final String TEXT_753 = NL + "\t\t\t";
  protected final String TEXT_754 = " filter = ";
  protected final String TEXT_755 = ".createFeatureFilter(";
  protected final String TEXT_756 = ".eINSTANCE.get";
  protected final String TEXT_757 = "());";
  protected final String TEXT_758 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_759 = ".createFeatureFilter(";
  protected final String TEXT_760 = ".eINSTANCE.get";
  protected final String TEXT_761 = "()));";
  protected final String TEXT_762 = NL;
  protected final String TEXT_763 = NL + "\t\t\t";
  protected final String TEXT_764 = " filter = ";
  protected final String TEXT_765 = ".createFeatureFilter(";
  protected final String TEXT_766 = ".eINSTANCE.get";
  protected final String TEXT_767 = "());";
  protected final String TEXT_768 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_769 = ".createFeatureFilter(";
  protected final String TEXT_770 = ".eINSTANCE.get";
  protected final String TEXT_771 = "()));";
  protected final String TEXT_772 = NL;
  protected final String TEXT_773 = NL + "\t\t\t";
  protected final String TEXT_774 = " filter = ";
  protected final String TEXT_775 = ".createFeatureFilter(";
  protected final String TEXT_776 = ".eINSTANCE.get";
  protected final String TEXT_777 = "());";
  protected final String TEXT_778 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_779 = ".createFeatureFilter(";
  protected final String TEXT_780 = ".eINSTANCE.get";
  protected final String TEXT_781 = "()));";
  protected final String TEXT_782 = NL;
  protected final String TEXT_783 = NL + "\t\t\t";
  protected final String TEXT_784 = " filter = ";
  protected final String TEXT_785 = ".createFeatureFilter(";
  protected final String TEXT_786 = ".eINSTANCE.get";
  protected final String TEXT_787 = "());";
  protected final String TEXT_788 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_789 = ".createFeatureFilter(";
  protected final String TEXT_790 = ".eINSTANCE.get";
  protected final String TEXT_791 = "()));";
  protected final String TEXT_792 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_793 = NL + "\t\t\t";
  protected final String TEXT_794 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_795 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_796 = NL + "\t\t\t";
  protected final String TEXT_797 = " filter = createUncontainedLinksFilter();";
d820 66
a885 66
  protected final String TEXT_799 = " filter = ";
  protected final String TEXT_800 = ".NOT_TOUCH;";
  protected final String TEXT_801 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_802 = " getCreateNotationalElementCommand(";
  protected final String TEXT_803 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_804 = " linkDescriptor = (";
  protected final String TEXT_805 = ") descriptor;";
  protected final String TEXT_806 = NL;
  protected final String TEXT_807 = "\t\t\t";
  protected final String TEXT_808 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_809 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_810 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_811 = NL + "\t\t\tcase ";
  protected final String TEXT_812 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_813 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_814 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_815 = NL + "\t\t\tcase ";
  protected final String TEXT_816 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_817 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_818 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_819 = "(";
  protected final String TEXT_820 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_821 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_822 = " getSemanticChildLinks() {";
  protected final String TEXT_823 = NL;
  protected final String TEXT_824 = "\t";
  protected final String TEXT_825 = " result = new ";
  protected final String TEXT_826 = "();";
  protected final String TEXT_827 = NL + "\t";
  protected final String TEXT_828 = " modelObject = ";
  protected final String TEXT_829 = ".getElement();" + NL + "\t";
  protected final String TEXT_830 = " nextValue;";
  protected final String TEXT_831 = NL + "\tint linkVID;";
  protected final String TEXT_832 = NL + "\tfor(";
  protected final String TEXT_833 = " it = ";
  protected final String TEXT_834 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_835 = ") it.next();";
  protected final String TEXT_836 = NL + "\tnextValue = (";
  protected final String TEXT_837 = ")";
  protected final String TEXT_838 = ";";
  protected final String TEXT_839 = NL + "\tlinkVID = ";
  protected final String TEXT_840 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_841 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_842 = NL + "\tcase ";
  protected final String TEXT_843 = ".VISUAL_ID: {";
  protected final String TEXT_844 = NL + "\tif (";
  protected final String TEXT_845 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_846 = NL + "\t\t";
  protected final String TEXT_847 = " source = (";
  protected final String TEXT_848 = ")";
  protected final String TEXT_849 = ";";
  protected final String TEXT_850 = NL + "\t\t";
  protected final String TEXT_851 = " source = ";
  protected final String TEXT_852 = ".getElement();";
  protected final String TEXT_853 = NL + "\t\t";
  protected final String TEXT_854 = " target = (";
  protected final String TEXT_855 = ")";
  protected final String TEXT_856 = ";";
  protected final String TEXT_857 = NL + "\t\t";
  protected final String TEXT_858 = " target = ";
  protected final String TEXT_859 = ".getElement();";
  protected final String TEXT_860 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_861 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_862 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_863 = NL + "\t}";
  protected final String TEXT_864 = NL + "\t}";
d887 235
a1121 235
  protected final String TEXT_866 = NL + "\tfor(";
  protected final String TEXT_867 = " it = ";
  protected final String TEXT_868 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_869 = ") it.next();";
  protected final String TEXT_870 = NL + "\tnextValue = (";
  protected final String TEXT_871 = ")";
  protected final String TEXT_872 = ";";
  protected final String TEXT_873 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_874 = NL + "\t\tresult.add(new ";
  protected final String TEXT_875 = "(modelObject, nextValue, null, ";
  protected final String TEXT_876 = ".VISUAL_ID));";
  protected final String TEXT_877 = NL + "\t}";
  protected final String TEXT_878 = NL + "\t}";
  protected final String TEXT_879 = NL + "\treturn result;";
  protected final String TEXT_880 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_881 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_882 = " result = new ";
  protected final String TEXT_883 = "();" + NL + "\t\t\t";
  protected final String TEXT_884 = " allLinks = ";
  protected final String TEXT_885 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_886 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_887 = " next = (";
  protected final String TEXT_888 = ") it.next();";
  protected final String TEXT_889 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_890 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_891 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_892 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_893 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_894 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_895 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_896 = ".VISUAL_ID:";
  protected final String TEXT_897 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_898 = NL + "\t\t\t\t} else {";
  protected final String TEXT_899 = NL + "\t\t\t\t}";
  protected final String TEXT_900 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_901 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_902 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_903 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_904 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_905 = ".VISUAL_ID:";
  protected final String TEXT_906 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_907 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_908 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_909 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_910 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_911 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_912 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_913 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_914 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_915 = " domainModelEditDomain = ";
  protected final String TEXT_916 = ".getEditingDomain(";
  protected final String TEXT_917 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_918 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_919 = NL;
  protected final String TEXT_920 = NL;
  protected final String TEXT_921 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_922 = " domainModelRefresher = new ";
  protected final String TEXT_923 = "(this);" + NL;
  protected final String TEXT_924 = NL;
  protected final String TEXT_925 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_926 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_927 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_928 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_929 = NL;
  protected final String TEXT_930 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_931 = NL + "\t\t";
  protected final String TEXT_932 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_933 = ") ";
  protected final String TEXT_934 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_935 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_936 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_937 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_938 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_939 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_940 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_941 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_942 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_943 = "\t" + NL + "\t}";
  protected final String TEXT_944 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_945 = " createdFont;";
  protected final String TEXT_946 = "\t" + NL;
  protected final String TEXT_947 = NL;
  protected final String TEXT_948 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_949 = " style = (";
  protected final String TEXT_950 = ")  ";
  protected final String TEXT_951 = ".getStyle(";
  protected final String TEXT_952 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_953 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_954 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_955 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_956 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_957 = " style = (";
  protected final String TEXT_958 = ")  ";
  protected final String TEXT_959 = ".getStyle(";
  protected final String TEXT_960 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_961 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_962 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_963 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_964 = " createdBackgroundColor;" + NL;
  protected final String TEXT_965 = NL;
  protected final String TEXT_966 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_967 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_968 = " feature, ";
  protected final String TEXT_969 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_970 = "();";
  protected final String TEXT_971 = NL;
  protected final String TEXT_972 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_973 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_974 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_975 = ".eINSTANCE.getView_Styles(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_976 = ".eINSTANCE.getDrawerStyle_Collapsed(), childrenRefresher);" + NL + "\t\t";
  protected final String TEXT_977 = NL;
  protected final String TEXT_978 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_979 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_980 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_981 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_982 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_983 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_984 = NL;
  protected final String TEXT_985 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_986 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_987 = NL;
  protected final String TEXT_988 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_989 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_990 = NL;
  protected final String TEXT_991 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_992 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_993 = NL;
  protected final String TEXT_994 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_995 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_996 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_997 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_998 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_999 = NL;
  protected final String TEXT_1000 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_1001 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_1002 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_1003 = NL;
  protected final String TEXT_1004 = NL;
  protected final String TEXT_1005 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1006 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_1007 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_1008 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_1009 = NL;
  protected final String TEXT_1010 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1011 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_1012 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_1013 = " createDeleteCommand(";
  protected final String TEXT_1014 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_1015 = " editingDomain = ";
  protected final String TEXT_1016 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_1017 = " cc = new ";
  protected final String TEXT_1018 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_1019 = "((";
  protected final String TEXT_1020 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_1021 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_1022 = " editingDomain) {";
  protected final String TEXT_1023 = NL + "\t\t\t\t";
  protected final String TEXT_1024 = " result = new ";
  protected final String TEXT_1025 = "();";
  protected final String TEXT_1026 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1027 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1028 = ".eINSTANCE.get";
  protected final String TEXT_1029 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1030 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1031 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1032 = ".eINSTANCE.get";
  protected final String TEXT_1033 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1034 = ".UNSET_VALUE));";
  protected final String TEXT_1035 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1036 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1037 = ".eINSTANCE.get";
  protected final String TEXT_1038 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1039 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1040 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1041 = ".eINSTANCE.get";
  protected final String TEXT_1042 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1043 = ".UNSET_VALUE));";
  protected final String TEXT_1044 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1045 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1046 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1047 = ".eINSTANCE.get";
  protected final String TEXT_1048 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_1049 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1050 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1051 = ".eINSTANCE.get";
  protected final String TEXT_1052 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1053 = ".UNSET_VALUE);";
  protected final String TEXT_1054 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1055 = NL;
  protected final String TEXT_1056 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1057 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1058 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1059 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1060 = NL;
  protected final String TEXT_1061 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1062 = " getDirectEditCommand(";
  protected final String TEXT_1063 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1064 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1065 = "(";
  protected final String TEXT_1066 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1067 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1068 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1069 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1070 = " editingDomain = ";
  protected final String TEXT_1071 = ".getEditingDomain(";
  protected final String TEXT_1072 = ".getDiagram().getElement());";
  protected final String TEXT_1073 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1074 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1075 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1076 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1077 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1078 = " createDomainModelCommand(";
  protected final String TEXT_1079 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1080 = " element = ";
  protected final String TEXT_1081 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1082 = " result = new ";
  protected final String TEXT_1083 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1084 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1085 = " ";
  protected final String TEXT_1086 = "feature = (";
  protected final String TEXT_1087 = ") ";
  protected final String TEXT_1088 = ".eINSTANCE.get";
  protected final String TEXT_1089 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1090 = ".parseValue(feature, values[";
  protected final String TEXT_1091 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1092 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1093 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1094 = " ";
  protected final String TEXT_1095 = "values = new ";
  protected final String TEXT_1096 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1097 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1098 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1099 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1100 = NL + "\t\t\t\t\t\tresult.append(";
d1123 51
a1173 51
  protected final String TEXT_1102 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1103 = NL + "\t\t\t\t});";
  protected final String TEXT_1104 = NL + "\t\t}" + NL;
  protected final String TEXT_1105 = NL;
  protected final String TEXT_1106 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1107 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1108 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1109 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1110 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1111 = "(this, ";
  protected final String TEXT_1112 = ".class, new ";
  protected final String TEXT_1113 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1114 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1115 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1116 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1117 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1118 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1119 = NL;
  protected final String TEXT_1120 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1121 = " domainModelRefresher = new ";
  protected final String TEXT_1122 = "(this);" + NL;
  protected final String TEXT_1123 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1124 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1125 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1126 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1127 = " nextChild = (";
  protected final String TEXT_1128 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1129 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1130 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1131 = ") ";
  protected final String TEXT_1132 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1133 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1134 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1135 = ".eINSTANCE.get";
  protected final String TEXT_1136 = "(), labelRefresher);";
  protected final String TEXT_1137 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1138 = ".eINSTANCE.get";
  protected final String TEXT_1139 = "(), labelRefresher);";
  protected final String TEXT_1140 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1141 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1142 = " result = new ";
  protected final String TEXT_1143 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1144 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1145 = " next = (";
  protected final String TEXT_1146 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_1147 = " style = (";
  protected final String TEXT_1148 = ") next.getStyle(";
  protected final String TEXT_1149 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t\t\tif (style != null && style.isCollapsed()) {" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1150 = ".getVisualID(next)) {";
  protected final String TEXT_1151 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1152 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
d1175 5
a1179 3
  protected final String TEXT_1154 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1155 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1156 = NL;
d1873 1
a1873 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
d1877 4
d1882 1
a1882 1
    stringBuffer.append(TEXT_169);
d1884 1
a1884 1
    stringBuffer.append(TEXT_170);
d1886 1
a1886 1
    stringBuffer.append(TEXT_171);
d1888 1
a1888 1
    stringBuffer.append(TEXT_172);
d1890 1
a1890 1
    stringBuffer.append(TEXT_173);
d1892 1
a1892 1
    stringBuffer.append(TEXT_174);
d1903 1
a1903 1
    stringBuffer.append(TEXT_175);
d1905 1
a1905 1
    stringBuffer.append(TEXT_176);
d1907 1
a1907 1
    stringBuffer.append(TEXT_177);
d1909 1
a1909 1
    stringBuffer.append(TEXT_178);
d1911 1
a1911 1
    stringBuffer.append(TEXT_179);
d1913 1
a1913 1
    stringBuffer.append(TEXT_180);
d1915 1
a1915 1
    stringBuffer.append(TEXT_181);
d1917 1
a1917 1
    stringBuffer.append(TEXT_182);
d1919 1
a1919 1
    stringBuffer.append(TEXT_183);
d1921 1
a1921 1
    stringBuffer.append(TEXT_184);
d1923 1
a1923 1
    stringBuffer.append(TEXT_185);
d1927 1
a1927 1
    stringBuffer.append(TEXT_186);
d1931 1
a1931 1
    stringBuffer.append(TEXT_187);
d1933 1
a1933 1
    stringBuffer.append(TEXT_188);
d1935 1
a1935 1
    stringBuffer.append(TEXT_189);
d1939 1
a1939 1
    stringBuffer.append(TEXT_190);
d1946 1
a1946 1
    stringBuffer.append(TEXT_191);
d1948 1
a1948 1
    stringBuffer.append(TEXT_192);
d1950 1
a1950 1
    stringBuffer.append(TEXT_193);
d1952 1
a1952 1
    stringBuffer.append(TEXT_194);
d1954 1
a1954 1
    stringBuffer.append(TEXT_195);
a1955 4
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1959 1
a1959 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1961 1
a1961 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1963 1
a1963 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1965 1
a1965 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1969 1
a1969 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d1971 1
a1971 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1973 1
a1973 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1975 1
a1975 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1979 4
d1984 1
a1984 1
    stringBuffer.append(TEXT_210);
d1986 1
a1986 1
    stringBuffer.append(TEXT_211);
d1994 1
a1994 1
    stringBuffer.append(TEXT_212);
d1996 1
a1996 1
    stringBuffer.append(TEXT_213);
d1998 1
a1998 1
    stringBuffer.append(TEXT_214);
d2000 1
a2000 1
    stringBuffer.append(TEXT_215);
d2002 1
a2002 1
    stringBuffer.append(TEXT_216);
d2004 1
a2004 1
    stringBuffer.append(TEXT_217);
d2006 1
a2006 1
    stringBuffer.append(TEXT_218);
d2014 1
a2014 1
    stringBuffer.append(TEXT_219);
d2019 1
a2019 1
    stringBuffer.append(TEXT_220);
d2021 1
a2021 1
    stringBuffer.append(TEXT_221);
d2023 1
a2023 1
    stringBuffer.append(TEXT_222);
d2028 1
a2028 1
    stringBuffer.append(TEXT_223);
d2030 1
a2030 1
    stringBuffer.append(TEXT_224);
d2032 1
a2032 1
    stringBuffer.append(TEXT_225);
d2034 1
a2034 1
    stringBuffer.append(TEXT_226);
d2036 1
a2036 1
    stringBuffer.append(TEXT_227);
d2049 1
a2049 1
    stringBuffer.append(TEXT_228);
d2054 1
a2054 1
    stringBuffer.append(TEXT_229);
d2056 1
a2056 1
    stringBuffer.append(TEXT_230);
d2058 1
a2058 1
    stringBuffer.append(TEXT_231);
d2063 1
a2063 1
    stringBuffer.append(TEXT_232);
d2065 1
a2065 1
    stringBuffer.append(TEXT_233);
d2067 1
a2067 1
    stringBuffer.append(TEXT_234);
d2069 1
a2069 1
    stringBuffer.append(TEXT_235);
d2071 1
a2071 1
    stringBuffer.append(TEXT_236);
d2079 1
a2079 1
    stringBuffer.append(TEXT_237);
d2081 1
a2081 1
    stringBuffer.append(TEXT_238);
d2083 1
a2083 1
    stringBuffer.append(TEXT_239);
d2085 1
a2085 1
    stringBuffer.append(TEXT_240);
d2087 1
a2087 1
    stringBuffer.append(TEXT_241);
d2091 1
a2091 1
    stringBuffer.append(TEXT_242);
d2093 1
a2093 1
    stringBuffer.append(TEXT_243);
d2095 1
a2095 1
    stringBuffer.append(TEXT_244);
d2097 1
a2097 1
    stringBuffer.append(TEXT_245);
d2099 1
a2099 1
    stringBuffer.append(TEXT_246);
d2103 1
a2103 1
    stringBuffer.append(TEXT_247);
d2105 1
a2105 1
    stringBuffer.append(TEXT_248);
d2107 1
a2107 1
    stringBuffer.append(TEXT_249);
d2109 1
a2109 1
    stringBuffer.append(TEXT_250);
d2111 1
a2111 1
    stringBuffer.append(TEXT_251);
d2122 1
a2122 1
    stringBuffer.append(TEXT_252);
d2124 1
a2124 1
    stringBuffer.append(TEXT_253);
d2126 1
a2126 1
    stringBuffer.append(TEXT_254);
d2128 1
a2128 1
    stringBuffer.append(TEXT_255);
d2130 1
a2130 1
    stringBuffer.append(TEXT_256);
d2132 1
a2132 1
    stringBuffer.append(TEXT_257);
d2134 1
a2134 1
    stringBuffer.append(TEXT_258);
d2136 1
a2136 1
    stringBuffer.append(TEXT_259);
d2138 1
a2138 1
    stringBuffer.append(TEXT_260);
d2140 1
a2140 1
    stringBuffer.append(TEXT_261);
d2142 1
a2142 1
    stringBuffer.append(TEXT_262);
d2147 1
a2147 1
    stringBuffer.append(TEXT_263);
d2149 1
a2149 1
    stringBuffer.append(TEXT_264);
d2151 1
a2151 1
    stringBuffer.append(TEXT_265);
d2158 1
a2158 1
    stringBuffer.append(TEXT_266);
d2160 1
a2160 1
    stringBuffer.append(TEXT_267);
d2162 1
a2162 1
    stringBuffer.append(TEXT_268);
d2166 1
a2166 1
    stringBuffer.append(TEXT_269);
d2168 1
a2168 1
    stringBuffer.append(TEXT_270);
d2170 1
a2170 1
    stringBuffer.append(TEXT_271);
d2172 1
a2172 1
    stringBuffer.append(TEXT_272);
d2174 1
a2174 1
    stringBuffer.append(TEXT_273);
d2176 1
a2176 1
    stringBuffer.append(TEXT_274);
d2181 1
a2181 1
    stringBuffer.append(TEXT_275);
d2183 1
a2183 1
    stringBuffer.append(TEXT_276);
d2185 1
a2185 1
    stringBuffer.append(TEXT_277);
d2187 1
a2187 1
    stringBuffer.append(TEXT_278);
d2189 1
a2189 1
    stringBuffer.append(TEXT_279);
d2191 1
a2191 1
    stringBuffer.append(TEXT_280);
d2195 1
a2195 1
    stringBuffer.append(TEXT_281);
d2197 1
a2197 1
    stringBuffer.append(TEXT_282);
d2199 1
a2199 1
    stringBuffer.append(TEXT_283);
d2203 1
a2203 1
    stringBuffer.append(TEXT_284);
d2205 1
a2205 1
    stringBuffer.append(TEXT_285);
d2209 1
a2209 1
    stringBuffer.append(TEXT_286);
d2211 1
a2211 1
    stringBuffer.append(TEXT_287);
d2213 1
a2213 1
    stringBuffer.append(TEXT_288);
d2215 1
a2215 1
    stringBuffer.append(TEXT_289);
a2216 2
    stringBuffer.append(TEXT_290);
    stringBuffer.append(TEXT_291);
a2217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d2219 1
a2220 2
    stringBuffer.append(TEXT_294);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d2222 1
a2222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ChangeBoundsCommand"));
d2224 1
a2224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d2226 1
a2226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d2228 4
d2233 1
a2233 1
    stringBuffer.append(TEXT_299);
d2235 1
a2235 1
    stringBuffer.append(TEXT_300);
d2237 1
a2237 1
    stringBuffer.append(TEXT_301);
d2241 1
a2241 1
    stringBuffer.append(TEXT_302);
d2243 1
a2243 1
    stringBuffer.append(TEXT_303);
d2245 1
a2245 1
    stringBuffer.append(TEXT_304);
d2247 1
a2247 1
    stringBuffer.append(TEXT_305);
d2249 1
a2249 1
    stringBuffer.append(TEXT_306);
d2251 1
a2251 1
    stringBuffer.append(TEXT_307);
d2255 1
a2255 1
    stringBuffer.append(TEXT_308);
d2257 1
a2257 1
    stringBuffer.append(TEXT_309);
d2259 1
a2259 1
    stringBuffer.append(TEXT_310);
d2263 1
a2263 1
    stringBuffer.append(TEXT_311);
d2265 1
a2265 1
    stringBuffer.append(TEXT_312);
d2267 1
a2267 1
    stringBuffer.append(TEXT_313);
d2271 1
a2271 1
    stringBuffer.append(TEXT_314);
d2273 1
a2273 1
    stringBuffer.append(TEXT_315);
d2275 1
a2275 1
    stringBuffer.append(TEXT_316);
d2277 1
a2277 1
    stringBuffer.append(TEXT_317);
d2279 1
a2279 1
    stringBuffer.append(TEXT_318);
d2281 1
a2281 1
    stringBuffer.append(TEXT_319);
d2283 1
a2283 1
    stringBuffer.append(TEXT_320);
d2285 1
a2285 1
    stringBuffer.append(TEXT_321);
d2287 1
a2287 1
    stringBuffer.append(TEXT_322);
d2289 1
a2289 1
    stringBuffer.append(TEXT_323);
d2293 1
a2293 1
    stringBuffer.append(TEXT_324);
d2295 1
a2295 1
    stringBuffer.append(TEXT_325);
d2299 1
a2299 1
    stringBuffer.append(TEXT_326);
d2301 1
a2301 1
    stringBuffer.append(TEXT_327);
d2303 1
a2303 1
    stringBuffer.append(TEXT_328);
d2305 1
a2305 1
    stringBuffer.append(TEXT_329);
d2307 1
a2307 1
    stringBuffer.append(TEXT_330);
d2309 1
a2309 1
    stringBuffer.append(TEXT_331);
d2311 1
a2311 1
    stringBuffer.append(TEXT_332);
d2313 1
a2313 1
    stringBuffer.append(TEXT_333);
d2315 1
a2315 1
    stringBuffer.append(TEXT_334);
d2317 1
a2317 1
    stringBuffer.append(TEXT_335);
d2319 1
a2319 1
    stringBuffer.append(TEXT_336);
d2343 1
a2343 1
    stringBuffer.append(TEXT_337);
d2345 1
a2345 1
    stringBuffer.append(TEXT_338);
d2347 1
a2347 1
    stringBuffer.append(TEXT_339);
d2351 1
a2351 1
    stringBuffer.append(TEXT_340);
d2353 1
a2353 1
    stringBuffer.append(TEXT_341);
d2355 1
a2355 1
    stringBuffer.append(TEXT_342);
d2357 1
a2357 1
    stringBuffer.append(TEXT_343);
d2361 1
a2361 1
    stringBuffer.append(TEXT_344);
d2363 1
a2363 1
    stringBuffer.append(TEXT_345);
d2365 1
a2365 1
    stringBuffer.append(TEXT_346);
d2369 1
a2369 1
    stringBuffer.append(TEXT_347);
d2371 1
a2371 1
    stringBuffer.append(TEXT_348);
d2375 1
a2375 1
    stringBuffer.append(TEXT_349);
d2377 1
a2377 1
    stringBuffer.append(TEXT_350);
d2379 1
a2379 1
    stringBuffer.append(TEXT_351);
d2381 1
a2381 1
    stringBuffer.append(TEXT_352);
d2383 1
a2383 1
    stringBuffer.append(TEXT_353);
d2385 1
a2385 1
    stringBuffer.append(TEXT_354);
d2387 1
a2387 1
    stringBuffer.append(TEXT_355);
d2389 1
a2389 1
    stringBuffer.append(TEXT_356);
d2391 1
a2391 1
    stringBuffer.append(TEXT_357);
d2393 1
a2393 1
    stringBuffer.append(TEXT_358);
d2395 1
a2395 1
    stringBuffer.append(TEXT_359);
d2421 1
a2421 1
    stringBuffer.append(TEXT_360);
d2423 1
a2423 1
    stringBuffer.append(TEXT_361);
d2425 1
a2425 1
    stringBuffer.append(TEXT_362);
d2429 1
a2429 1
    stringBuffer.append(TEXT_363);
d2431 1
a2431 1
    stringBuffer.append(TEXT_364);
d2433 1
a2433 1
    stringBuffer.append(TEXT_365);
d2435 1
a2435 1
    stringBuffer.append(TEXT_366);
d2439 1
a2439 1
    stringBuffer.append(TEXT_367);
d2441 1
a2441 1
    stringBuffer.append(TEXT_368);
d2443 1
a2443 1
    stringBuffer.append(TEXT_369);
d2445 1
a2445 1
    stringBuffer.append(TEXT_370);
d2447 1
a2447 1
    stringBuffer.append(TEXT_371);
d2449 1
a2449 1
    stringBuffer.append(TEXT_372);
d2451 1
a2451 1
    stringBuffer.append(TEXT_373);
d2453 1
a2453 1
    stringBuffer.append(TEXT_374);
d2455 1
a2455 1
    stringBuffer.append(TEXT_375);
d2481 1
a2481 1
    stringBuffer.append(TEXT_376);
d2483 1
a2483 1
    stringBuffer.append(TEXT_377);
d2485 1
a2485 1
    stringBuffer.append(TEXT_378);
d2489 1
a2489 1
    stringBuffer.append(TEXT_379);
d2491 1
a2491 1
    stringBuffer.append(TEXT_380);
d2493 1
a2493 1
    stringBuffer.append(TEXT_381);
d2495 1
a2495 1
    stringBuffer.append(TEXT_382);
d2497 1
a2497 1
    stringBuffer.append(TEXT_383);
d2499 1
a2499 1
    stringBuffer.append(TEXT_384);
d2501 1
a2501 1
    stringBuffer.append(TEXT_385);
d2503 1
a2503 1
    stringBuffer.append(TEXT_386);
d2505 1
a2505 1
    stringBuffer.append(TEXT_387);
d2507 1
a2507 1
    stringBuffer.append(TEXT_388);
d2509 1
a2509 1
    stringBuffer.append(TEXT_389);
d2511 1
a2511 1
    stringBuffer.append(TEXT_390);
d2513 1
a2513 1
    stringBuffer.append(TEXT_391);
d2515 1
a2515 1
    stringBuffer.append(TEXT_392);
d2539 1
a2539 1
    stringBuffer.append(TEXT_393);
d2541 1
a2541 1
    stringBuffer.append(TEXT_394);
d2543 1
a2543 1
    stringBuffer.append(TEXT_395);
d2547 1
a2547 1
    stringBuffer.append(TEXT_396);
d2549 1
a2549 1
    stringBuffer.append(TEXT_397);
d2551 1
a2551 1
    stringBuffer.append(TEXT_398);
d2553 1
a2553 1
    stringBuffer.append(TEXT_399);
d2555 1
a2555 1
    stringBuffer.append(TEXT_400);
d2557 1
a2557 1
    stringBuffer.append(TEXT_401);
d2561 1
a2561 1
    stringBuffer.append(TEXT_402);
d2563 1
a2563 1
    stringBuffer.append(TEXT_403);
d2565 1
a2565 1
    stringBuffer.append(TEXT_404);
d2571 1
a2571 1
    stringBuffer.append(TEXT_405);
d2575 1
a2575 1
    stringBuffer.append(TEXT_406);
d2577 1
a2577 1
    stringBuffer.append(TEXT_407);
d2579 1
a2579 1
    stringBuffer.append(TEXT_408);
d2581 1
a2581 1
    stringBuffer.append(TEXT_409);
d2589 1
a2589 1
    stringBuffer.append(TEXT_410);
d2591 1
a2591 1
    stringBuffer.append(TEXT_411);
d2593 1
a2593 1
    stringBuffer.append(TEXT_412);
d2595 1
a2595 1
    stringBuffer.append(TEXT_413);
d2597 1
a2597 1
    stringBuffer.append(TEXT_414);
d2599 1
a2599 1
    stringBuffer.append(TEXT_415);
d2605 1
a2605 1
    stringBuffer.append(TEXT_416);
d2609 1
a2609 1
    stringBuffer.append(TEXT_417);
d2616 1
a2616 1
    stringBuffer.append(TEXT_418);
d2620 1
a2620 1
    stringBuffer.append(TEXT_419);
d2622 1
a2622 1
    stringBuffer.append(TEXT_420);
d2626 1
a2626 1
    stringBuffer.append(TEXT_421);
d2628 1
a2628 1
    stringBuffer.append(TEXT_422);
d2633 1
a2633 1
    stringBuffer.append(TEXT_423);
d2635 1
a2635 1
    stringBuffer.append(TEXT_424);
d2637 1
a2637 1
    stringBuffer.append(TEXT_425);
d2641 1
a2641 1
    stringBuffer.append(TEXT_426);
d2643 1
a2643 1
    stringBuffer.append(TEXT_427);
d2645 1
a2645 1
    stringBuffer.append(TEXT_428);
d2647 1
a2647 1
    stringBuffer.append(TEXT_429);
d2649 1
a2649 1
    stringBuffer.append(TEXT_430);
d2651 1
a2651 1
    stringBuffer.append(TEXT_431);
d2653 1
a2653 1
    stringBuffer.append(TEXT_432);
d2655 1
a2655 1
    stringBuffer.append(TEXT_433);
d2657 1
a2657 1
    stringBuffer.append(TEXT_434);
d2659 1
a2659 1
    stringBuffer.append(TEXT_435);
d2661 1
a2661 1
    stringBuffer.append(TEXT_436);
d2666 1
a2666 1
    stringBuffer.append(TEXT_437);
d2668 1
a2668 1
    stringBuffer.append(TEXT_438);
d2670 1
a2670 1
    stringBuffer.append(TEXT_439);
d2674 1
a2674 1
    stringBuffer.append(TEXT_440);
d2681 1
a2681 1
    stringBuffer.append(TEXT_441);
d2683 1
a2683 1
    stringBuffer.append(TEXT_442);
d2687 1
a2687 1
    stringBuffer.append(TEXT_443);
d2693 1
a2693 1
    stringBuffer.append(TEXT_444);
d2697 1
a2697 1
    stringBuffer.append(TEXT_445);
d2702 1
a2702 1
    stringBuffer.append(TEXT_446);
d2707 1
a2707 1
    stringBuffer.append(TEXT_447);
d2711 1
a2711 1
    stringBuffer.append(TEXT_448);
d2713 1
a2713 1
    stringBuffer.append(TEXT_449);
d2715 1
a2715 1
    stringBuffer.append(TEXT_450);
d2717 1
a2717 1
    stringBuffer.append(TEXT_451);
d2719 1
a2719 1
    stringBuffer.append(TEXT_452);
d2721 1
a2721 1
    stringBuffer.append(TEXT_453);
d2725 1
a2725 1
    stringBuffer.append(TEXT_454);
d2729 1
a2729 1
    stringBuffer.append(TEXT_455);
d2731 1
a2731 1
    stringBuffer.append(TEXT_456);
d2735 1
a2735 1
    stringBuffer.append(TEXT_457);
d2737 1
a2737 1
    stringBuffer.append(TEXT_458);
d2739 1
a2739 1
    stringBuffer.append(TEXT_459);
d2741 1
a2741 1
    stringBuffer.append(TEXT_460);
d2745 1
a2745 1
    stringBuffer.append(TEXT_461);
d2747 1
a2747 1
    stringBuffer.append(TEXT_462);
d2757 1
a2757 1
    stringBuffer.append(TEXT_463);
d2759 1
a2759 1
    stringBuffer.append(TEXT_464);
d2761 1
a2761 1
    stringBuffer.append(TEXT_465);
d2763 1
a2763 1
    stringBuffer.append(TEXT_466);
d2765 1
a2765 1
    stringBuffer.append(TEXT_467);
d2767 1
a2767 1
    stringBuffer.append(TEXT_468);
d2771 1
a2771 1
    stringBuffer.append(TEXT_469);
d2773 1
a2773 1
    stringBuffer.append(TEXT_470);
d2775 1
a2775 1
    stringBuffer.append(TEXT_471);
d2777 1
a2777 1
    stringBuffer.append(TEXT_472);
d2779 1
a2779 1
    stringBuffer.append(TEXT_473);
d2781 1
a2781 1
    stringBuffer.append(TEXT_474);
d2783 1
a2783 1
    stringBuffer.append(TEXT_475);
d2785 1
a2785 1
    stringBuffer.append(TEXT_476);
d2787 1
a2787 1
    stringBuffer.append(TEXT_477);
d2789 1
a2789 1
    stringBuffer.append(TEXT_478);
d2791 1
a2791 1
    stringBuffer.append(TEXT_479);
d2793 1
a2793 1
    stringBuffer.append(TEXT_480);
d2795 1
a2795 1
    stringBuffer.append(TEXT_481);
d2797 1
a2797 1
    stringBuffer.append(TEXT_482);
d2799 1
a2799 1
    stringBuffer.append(TEXT_483);
d2801 1
a2801 1
    stringBuffer.append(TEXT_484);
d2803 1
a2803 1
    stringBuffer.append(TEXT_485);
d2805 1
a2805 1
    stringBuffer.append(TEXT_486);
d2807 1
a2807 1
    stringBuffer.append(TEXT_487);
d2809 1
a2809 1
    stringBuffer.append(TEXT_488);
d2811 1
a2811 1
    stringBuffer.append(TEXT_489);
d2813 1
a2813 1
    stringBuffer.append(TEXT_490);
d2815 1
a2815 1
    stringBuffer.append(TEXT_491);
d2817 1
a2817 1
    stringBuffer.append(TEXT_492);
d2822 1
a2822 1
    stringBuffer.append(TEXT_493);
d2824 1
a2824 1
    stringBuffer.append(TEXT_494);
d2826 1
a2826 1
    stringBuffer.append(TEXT_495);
d2828 1
a2828 1
    stringBuffer.append(TEXT_496);
d2830 1
a2830 1
    stringBuffer.append(TEXT_497);
d2832 1
a2832 1
    stringBuffer.append(TEXT_498);
d2834 1
a2834 1
    stringBuffer.append(TEXT_499);
d2836 1
a2836 1
    stringBuffer.append(TEXT_500);
d2838 1
a2838 1
    stringBuffer.append(TEXT_501);
d2840 1
a2840 1
    stringBuffer.append(TEXT_502);
d2842 1
a2842 1
    stringBuffer.append(TEXT_503);
d2846 1
a2846 1
    stringBuffer.append(TEXT_504);
d2848 1
a2848 1
    stringBuffer.append(TEXT_505);
d2856 1
a2856 1
    stringBuffer.append(TEXT_506);
d2858 1
a2858 1
    stringBuffer.append(TEXT_507);
d2860 1
a2860 1
    stringBuffer.append(TEXT_508);
d2862 1
a2862 1
    stringBuffer.append(TEXT_509);
d2864 1
a2864 1
    stringBuffer.append(TEXT_510);
d2873 1
a2873 1
    stringBuffer.append(TEXT_511);
d2875 1
a2875 1
    stringBuffer.append(TEXT_512);
d2877 1
a2877 1
    stringBuffer.append(TEXT_513);
d2879 1
a2879 1
    stringBuffer.append(TEXT_514);
d2881 1
a2881 1
    stringBuffer.append(TEXT_515);
d2885 1
a2885 1
    stringBuffer.append(TEXT_516);
d2893 1
a2893 1
    stringBuffer.append(TEXT_517);
d2895 1
a2895 1
    stringBuffer.append(TEXT_518);
d2897 1
a2897 1
    stringBuffer.append(TEXT_519);
d2899 1
a2899 1
    stringBuffer.append(TEXT_520);
d2901 1
a2901 1
    stringBuffer.append(TEXT_521);
d2905 1
a2905 1
    stringBuffer.append(TEXT_522);
d2909 1
a2909 1
    stringBuffer.append(TEXT_523);
d2911 1
a2911 1
    stringBuffer.append(TEXT_524);
d2915 1
a2915 1
    stringBuffer.append(TEXT_525);
d2917 1
a2917 1
    stringBuffer.append(TEXT_526);
d2919 1
a2919 1
    stringBuffer.append(TEXT_527);
d2921 1
a2921 1
    stringBuffer.append(TEXT_528);
d2923 1
a2923 1
    stringBuffer.append(TEXT_529);
d2925 1
a2925 1
    stringBuffer.append(TEXT_530);
d2927 1
a2927 1
    stringBuffer.append(TEXT_531);
d2931 1
a2931 1
    stringBuffer.append(TEXT_532);
d2933 1
a2933 1
    stringBuffer.append(TEXT_533);
d2935 1
a2935 1
    stringBuffer.append(TEXT_534);
d2937 1
a2937 1
    stringBuffer.append(TEXT_535);
d2939 1
a2939 1
    stringBuffer.append(TEXT_536);
a2940 2
    stringBuffer.append(TEXT_537);
    stringBuffer.append(TEXT_538);
a2941 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
a2942 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d2944 1
a2944 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d2946 1
a2946 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d2950 4
d2955 1
a2955 1
    stringBuffer.append(TEXT_545);
d2957 1
a2957 1
    stringBuffer.append(TEXT_546);
d2959 1
a2959 1
    stringBuffer.append(TEXT_547);
d2967 1
a2967 1
    stringBuffer.append(TEXT_548);
d2969 1
a2969 1
    stringBuffer.append(TEXT_549);
d2973 1
a2973 1
    stringBuffer.append(TEXT_550);
d2977 1
a2977 1
    stringBuffer.append(TEXT_551);
d2979 1
a2979 1
    stringBuffer.append(TEXT_552);
d2984 1
a2984 1
    stringBuffer.append(TEXT_553);
d2986 1
a2986 1
    stringBuffer.append(TEXT_554);
d2990 1
a2990 1
    stringBuffer.append(TEXT_555);
d2992 1
a2992 1
    stringBuffer.append(TEXT_556);
d2994 1
a2994 1
    stringBuffer.append(TEXT_557);
d2996 1
a2996 1
    stringBuffer.append(TEXT_558);
d2998 1
a2998 1
    stringBuffer.append(TEXT_559);
d3003 1
a3003 1
    stringBuffer.append(TEXT_560);
d3005 1
a3005 1
    stringBuffer.append(TEXT_561);
d3010 1
a3010 1
    stringBuffer.append(TEXT_562);
d3012 1
a3012 1
    stringBuffer.append(TEXT_563);
d3016 1
a3016 1
    stringBuffer.append(TEXT_564);
d3021 1
a3021 1
    stringBuffer.append(TEXT_565);
d3023 1
a3023 1
    stringBuffer.append(TEXT_566);
d3027 1
a3027 1
    stringBuffer.append(TEXT_567);
d3029 1
a3029 1
    stringBuffer.append(TEXT_568);
d3031 1
a3031 1
    stringBuffer.append(TEXT_569);
d3036 1
a3036 1
    stringBuffer.append(TEXT_570);
d3041 1
a3041 1
    stringBuffer.append(TEXT_571);
d3043 1
a3043 1
    stringBuffer.append(TEXT_572);
d3045 1
a3045 1
    stringBuffer.append(TEXT_573);
d3049 1
a3049 1
    stringBuffer.append(TEXT_574);
d3051 1
a3051 1
    stringBuffer.append(TEXT_575);
d3055 1
a3055 1
    stringBuffer.append(TEXT_576);
d3057 1
a3057 1
    stringBuffer.append(TEXT_577);
d3059 1
a3059 1
    stringBuffer.append(TEXT_578);
d3064 1
a3064 1
    stringBuffer.append(TEXT_579);
d3069 1
a3069 1
    stringBuffer.append(TEXT_580);
d3071 1
a3071 1
    stringBuffer.append(TEXT_581);
d3073 1
a3073 1
    stringBuffer.append(TEXT_582);
d3077 1
a3077 1
    stringBuffer.append(TEXT_583);
d3084 1
a3084 1
    stringBuffer.append(TEXT_584);
d3086 1
a3086 1
    stringBuffer.append(TEXT_585);
d3088 1
a3088 1
    stringBuffer.append(TEXT_586);
d3090 1
a3090 1
    stringBuffer.append(TEXT_587);
d3092 1
a3092 1
    stringBuffer.append(TEXT_588);
d3096 1
a3096 1
    stringBuffer.append(TEXT_589);
a3097 4
    stringBuffer.append(TEXT_590);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
    stringBuffer.append(TEXT_591);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d3101 1
a3101 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d3103 1
a3103 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d3105 1
a3105 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d3107 1
a3107 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d3111 4
d3116 1
a3116 1
    stringBuffer.append(TEXT_599);
d3118 1
a3118 1
    stringBuffer.append(TEXT_600);
d3120 1
a3120 1
    stringBuffer.append(TEXT_601);
d3122 1
a3122 1
    stringBuffer.append(TEXT_602);
d3124 1
a3124 1
    stringBuffer.append(TEXT_603);
d3126 1
a3126 1
    stringBuffer.append(TEXT_604);
d3128 1
a3128 1
    stringBuffer.append(TEXT_605);
d3130 1
a3130 1
    stringBuffer.append(TEXT_606);
d3132 1
a3132 1
    stringBuffer.append(TEXT_607);
d3134 1
a3134 1
    stringBuffer.append(TEXT_608);
d3136 1
a3136 1
    stringBuffer.append(TEXT_609);
d3138 1
a3138 1
    stringBuffer.append(TEXT_610);
d3142 1
a3142 1
    stringBuffer.append(TEXT_611);
d3144 1
a3144 1
    stringBuffer.append(TEXT_612);
d3146 1
a3146 1
    stringBuffer.append(TEXT_613);
d3150 1
a3150 1
    stringBuffer.append(TEXT_614);
d3152 1
a3152 1
    stringBuffer.append(TEXT_615);
d3154 1
a3154 1
    stringBuffer.append(TEXT_616);
d3158 1
a3158 1
    stringBuffer.append(TEXT_617);
d3165 1
a3165 1
    stringBuffer.append(TEXT_618);
d3169 1
a3169 1
    stringBuffer.append(TEXT_619);
d3173 1
a3173 1
    stringBuffer.append(TEXT_620);
d3180 1
a3180 1
    stringBuffer.append(TEXT_621);
d3184 1
a3184 1
    stringBuffer.append(TEXT_622);
a3193 3
    stringBuffer.append(TEXT_623);
    stringBuffer.append(TEXT_624);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
a3194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d3196 1
a3196 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d3198 1
a3198 1
    stringBuffer.append(_getDiagramCode);
d3200 1
a3200 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
d3202 1
a3202 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
d3206 4
d3224 1
a3224 1
    stringBuffer.append(TEXT_632);
d3226 1
a3226 1
    stringBuffer.append(TEXT_633);
d3228 1
a3228 1
    stringBuffer.append(TEXT_634);
d3230 1
a3230 1
    stringBuffer.append(TEXT_635);
d3234 1
a3234 1
    stringBuffer.append(TEXT_636);
d3236 1
a3236 1
    stringBuffer.append(TEXT_637);
d3255 1
a3255 1
    stringBuffer.append(TEXT_638);
d3257 1
a3257 1
    stringBuffer.append(TEXT_639);
d3259 1
a3259 1
    stringBuffer.append(TEXT_640);
d3261 1
a3261 1
    stringBuffer.append(TEXT_641);
d3263 1
a3263 1
    stringBuffer.append(TEXT_642);
d3267 1
a3267 1
    stringBuffer.append(TEXT_643);
d3269 1
a3269 1
    stringBuffer.append(TEXT_644);
d3271 1
a3271 1
    stringBuffer.append(TEXT_645);
d3273 1
a3273 1
    stringBuffer.append(TEXT_646);
d3281 1
a3281 1
    stringBuffer.append(TEXT_647);
d3283 1
a3283 1
    stringBuffer.append(TEXT_648);
d3285 1
a3285 1
    stringBuffer.append(TEXT_649);
d3290 1
a3290 1
    stringBuffer.append(TEXT_650);
d3292 1
a3292 1
    stringBuffer.append(TEXT_651);
d3294 1
a3294 1
    stringBuffer.append(TEXT_652);
d3296 1
a3296 1
    stringBuffer.append(TEXT_653);
d3305 1
a3305 1
    stringBuffer.append(TEXT_654);
d3309 1
a3309 1
    stringBuffer.append(TEXT_655);
d3311 1
a3311 1
    stringBuffer.append(TEXT_656);
d3317 1
a3317 1
    stringBuffer.append(TEXT_657);
d3319 1
a3319 1
    stringBuffer.append(TEXT_658);
d3321 1
a3321 1
    stringBuffer.append(TEXT_659);
d3325 1
a3325 1
    stringBuffer.append(TEXT_660);
d3329 1
a3329 1
    stringBuffer.append(TEXT_661);
d3331 1
a3331 1
    stringBuffer.append(TEXT_662);
d3333 1
a3333 1
    stringBuffer.append(TEXT_663);
d3338 2
a3339 2
    stringBuffer.append(TEXT_664);
    stringBuffer.append(TEXT_665);
d3341 1
a3341 1
    stringBuffer.append(TEXT_666);
d3351 1
a3351 1
    stringBuffer.append(TEXT_667);
d3353 1
a3353 1
    stringBuffer.append(TEXT_668);
d3355 1
a3355 1
    stringBuffer.append(TEXT_669);
d3357 1
a3357 1
    stringBuffer.append(TEXT_670);
d3359 1
a3359 1
    stringBuffer.append(TEXT_671);
d3370 1
a3370 1
    stringBuffer.append(TEXT_672);
d3372 1
a3372 1
    stringBuffer.append(TEXT_673);
d3374 1
a3374 1
    stringBuffer.append(TEXT_674);
d3376 1
a3376 1
    stringBuffer.append(TEXT_675);
d3380 1
a3380 1
    stringBuffer.append(TEXT_676);
d3384 1
a3384 1
    stringBuffer.append(TEXT_677);
d3386 1
a3386 1
    stringBuffer.append(TEXT_678);
d3390 1
a3390 1
    stringBuffer.append(TEXT_679);
d3394 1
a3394 1
    stringBuffer.append(TEXT_680);
d3396 2
a3397 2
    stringBuffer.append(TEXT_681);
    stringBuffer.append(TEXT_682);
d3401 1
a3401 1
    stringBuffer.append(TEXT_683);
d3403 1
a3403 1
    stringBuffer.append(TEXT_684);
d3407 1
a3407 1
    stringBuffer.append(TEXT_685);
d3409 1
a3409 1
    stringBuffer.append(TEXT_686);
d3411 1
a3411 1
    stringBuffer.append(TEXT_687);
d3429 1
a3429 1
    stringBuffer.append(TEXT_688);
d3431 1
a3431 1
    stringBuffer.append(TEXT_689);
d3433 1
a3433 1
    stringBuffer.append(TEXT_690);
d3435 1
a3435 1
    stringBuffer.append(TEXT_691);
d3437 1
a3437 1
    stringBuffer.append(TEXT_692);
d3446 1
a3446 1
    stringBuffer.append(TEXT_693);
d3448 1
a3448 1
    stringBuffer.append(TEXT_694);
d3450 1
a3450 1
    stringBuffer.append(TEXT_695);
d3452 1
a3452 1
    stringBuffer.append(TEXT_696);
d3456 1
a3456 1
    stringBuffer.append(TEXT_697);
d3458 1
a3458 1
    stringBuffer.append(TEXT_698);
d3460 1
a3460 1
    stringBuffer.append(TEXT_699);
d3464 1
a3464 1
    stringBuffer.append(TEXT_700);
d3466 1
a3466 1
    stringBuffer.append(TEXT_701);
d3471 1
a3471 1
    stringBuffer.append(TEXT_702);
d3478 1
a3478 1
    stringBuffer.append(TEXT_703);
d3480 1
a3480 1
    stringBuffer.append(TEXT_704);
d3484 1
a3484 1
    stringBuffer.append(TEXT_705);
d3486 1
a3486 1
    stringBuffer.append(TEXT_706);
d3490 1
a3490 1
    stringBuffer.append(TEXT_707);
d3492 1
a3492 1
    stringBuffer.append(TEXT_708);
d3496 1
a3496 1
    stringBuffer.append(TEXT_709);
d3500 1
a3500 1
    stringBuffer.append(TEXT_710);
d3506 1
a3506 1
    stringBuffer.append(TEXT_711);
d3511 1
a3511 1
    stringBuffer.append(TEXT_712);
d3516 1
a3516 1
    stringBuffer.append(TEXT_713);
d3520 1
a3520 1
    stringBuffer.append(TEXT_714);
d3522 1
a3522 1
    stringBuffer.append(TEXT_715);
d3524 1
a3524 1
    stringBuffer.append(TEXT_716);
d3526 1
a3526 1
    stringBuffer.append(TEXT_717);
d3528 1
a3528 1
    stringBuffer.append(TEXT_718);
d3530 1
a3530 1
    stringBuffer.append(TEXT_719);
d3532 1
a3532 1
    stringBuffer.append(TEXT_720);
d3534 1
a3534 1
    stringBuffer.append(TEXT_721);
d3536 1
a3536 1
    stringBuffer.append(TEXT_722);
d3538 1
a3538 1
    stringBuffer.append(TEXT_723);
d3540 1
a3540 1
    stringBuffer.append(TEXT_724);
d3542 1
a3542 1
    stringBuffer.append(TEXT_725);
d3546 1
a3546 1
    stringBuffer.append(TEXT_726);
d3550 1
a3550 1
    stringBuffer.append(TEXT_727);
d3552 1
a3552 1
    stringBuffer.append(TEXT_728);
d3554 1
a3554 1
    stringBuffer.append(TEXT_729);
d3556 1
a3556 1
    stringBuffer.append(TEXT_730);
d3558 1
a3558 1
    stringBuffer.append(TEXT_731);
d3560 1
a3560 1
    stringBuffer.append(TEXT_732);
d3562 1
a3562 1
    stringBuffer.append(TEXT_733);
d3564 1
a3564 1
    stringBuffer.append(TEXT_734);
d3566 1
a3566 1
    stringBuffer.append(TEXT_735);
d3579 1
a3579 1
    stringBuffer.append(TEXT_736);
d3581 1
a3581 1
    stringBuffer.append(TEXT_737);
d3583 1
a3583 1
    stringBuffer.append(TEXT_738);
d3585 1
a3585 1
    stringBuffer.append(TEXT_739);
d3590 1
a3590 1
    stringBuffer.append(TEXT_740);
a3591 4
    stringBuffer.append(TEXT_741);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_742);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d3605 4
d3612 1
a3612 1
    stringBuffer.append(TEXT_750);
d3614 1
a3614 1
    stringBuffer.append(TEXT_751);
d3627 1
a3627 1
    stringBuffer.append(TEXT_752);
d3641 1
a3641 1
    stringBuffer.append(TEXT_753);
d3643 1
a3643 1
    stringBuffer.append(TEXT_754);
d3645 1
a3645 1
    stringBuffer.append(TEXT_755);
d3647 1
a3647 1
    stringBuffer.append(TEXT_756);
d3649 1
a3649 1
    stringBuffer.append(TEXT_757);
d3653 1
a3653 1
    stringBuffer.append(TEXT_758);
d3655 1
a3655 1
    stringBuffer.append(TEXT_759);
d3657 1
a3657 1
    stringBuffer.append(TEXT_760);
d3659 1
a3659 1
    stringBuffer.append(TEXT_761);
d3666 1
a3666 1
    stringBuffer.append(TEXT_762);
d3680 1
a3680 1
    stringBuffer.append(TEXT_763);
d3682 1
a3682 1
    stringBuffer.append(TEXT_764);
d3684 1
a3684 1
    stringBuffer.append(TEXT_765);
d3686 1
a3686 1
    stringBuffer.append(TEXT_766);
d3688 1
a3688 1
    stringBuffer.append(TEXT_767);
d3692 1
a3692 1
    stringBuffer.append(TEXT_768);
d3694 1
a3694 1
    stringBuffer.append(TEXT_769);
d3696 1
a3696 1
    stringBuffer.append(TEXT_770);
d3698 1
a3698 1
    stringBuffer.append(TEXT_771);
d3705 1
a3705 1
    stringBuffer.append(TEXT_772);
d3719 1
a3719 1
    stringBuffer.append(TEXT_773);
d3721 1
a3721 1
    stringBuffer.append(TEXT_774);
d3723 1
a3723 1
    stringBuffer.append(TEXT_775);
d3725 1
a3725 1
    stringBuffer.append(TEXT_776);
d3727 1
a3727 1
    stringBuffer.append(TEXT_777);
d3731 1
a3731 1
    stringBuffer.append(TEXT_778);
d3733 1
a3733 1
    stringBuffer.append(TEXT_779);
d3735 1
a3735 1
    stringBuffer.append(TEXT_780);
d3737 1
a3737 1
    stringBuffer.append(TEXT_781);
d3747 1
a3747 1
    stringBuffer.append(TEXT_782);
d3761 1
a3761 1
    stringBuffer.append(TEXT_783);
d3763 1
a3763 1
    stringBuffer.append(TEXT_784);
d3765 1
a3765 1
    stringBuffer.append(TEXT_785);
d3767 1
a3767 1
    stringBuffer.append(TEXT_786);
d3769 1
a3769 1
    stringBuffer.append(TEXT_787);
d3773 1
a3773 1
    stringBuffer.append(TEXT_788);
d3775 1
a3775 1
    stringBuffer.append(TEXT_789);
d3777 1
a3777 1
    stringBuffer.append(TEXT_790);
d3779 1
a3779 1
    stringBuffer.append(TEXT_791);
d3788 1
a3788 1
    stringBuffer.append(TEXT_792);
d3793 1
a3793 1
    stringBuffer.append(TEXT_793);
d3795 1
a3795 1
    stringBuffer.append(TEXT_794);
d3802 1
a3802 1
    stringBuffer.append(TEXT_795);
d3807 1
a3807 1
    stringBuffer.append(TEXT_796);
d3809 1
a3809 1
    stringBuffer.append(TEXT_797);
d3815 1
a3815 1
    stringBuffer.append(TEXT_798);
d3817 1
a3817 1
    stringBuffer.append(TEXT_799);
d3819 1
a3819 1
    stringBuffer.append(TEXT_800);
d3824 1
a3824 1
    stringBuffer.append(TEXT_801);
d3826 1
a3826 1
    stringBuffer.append(TEXT_802);
d3828 1
a3828 1
    stringBuffer.append(TEXT_803);
d3830 1
a3830 1
    stringBuffer.append(TEXT_804);
d3832 1
a3832 1
    stringBuffer.append(TEXT_805);
d3839 2
a3840 2
    stringBuffer.append(TEXT_806);
    stringBuffer.append(TEXT_807);
d3842 1
a3842 1
    stringBuffer.append(TEXT_808);
d3844 1
a3844 1
    stringBuffer.append(TEXT_809);
d3846 1
a3846 1
    stringBuffer.append(TEXT_810);
d3855 1
a3855 1
    stringBuffer.append(TEXT_811);
d3857 1
a3857 1
    stringBuffer.append(TEXT_812);
d3859 1
a3859 1
    stringBuffer.append(TEXT_813);
d3861 1
a3861 1
    stringBuffer.append(TEXT_814);
d3867 1
a3867 1
    stringBuffer.append(TEXT_815);
d3869 1
a3869 1
    stringBuffer.append(TEXT_816);
d3871 1
a3871 1
    stringBuffer.append(TEXT_817);
d3875 1
a3875 1
    stringBuffer.append(TEXT_818);
d3877 1
a3877 1
    stringBuffer.append(TEXT_819);
d3879 1
a3879 1
    stringBuffer.append(TEXT_820);
d3883 1
a3883 1
    stringBuffer.append(TEXT_821);
d3885 1
a3885 1
    stringBuffer.append(TEXT_822);
d3891 2
a3892 2
    stringBuffer.append(TEXT_823);
    stringBuffer.append(TEXT_824);
d3894 1
a3894 1
    stringBuffer.append(TEXT_825);
d3896 1
a3896 1
    stringBuffer.append(TEXT_826);
d3919 1
a3919 1
    stringBuffer.append(TEXT_827);
d3921 1
a3921 1
    stringBuffer.append(TEXT_828);
d3923 1
a3923 1
    stringBuffer.append(TEXT_829);
d3925 1
a3925 1
    stringBuffer.append(TEXT_830);
d3930 1
a3930 1
    stringBuffer.append(TEXT_831);
d3939 1
a3939 1
    stringBuffer.append(TEXT_832);
d3941 1
a3941 1
    stringBuffer.append(TEXT_833);
d3943 1
a3943 1
    stringBuffer.append(TEXT_834);
d3945 1
a3945 1
    stringBuffer.append(TEXT_835);
d3949 1
a3949 1
    stringBuffer.append(TEXT_836);
d3951 1
a3951 1
    stringBuffer.append(TEXT_837);
d3953 1
a3953 1
    stringBuffer.append(TEXT_838);
d3957 1
a3957 1
    stringBuffer.append(TEXT_839);
d3959 1
a3959 1
    stringBuffer.append(TEXT_840);
d3964 1
a3964 1
    stringBuffer.append(TEXT_841);
d3972 1
a3972 1
    stringBuffer.append(TEXT_842);
d3974 1
a3974 1
    stringBuffer.append(TEXT_843);
d3978 1
a3978 1
    stringBuffer.append(TEXT_844);
d3980 1
a3980 1
    stringBuffer.append(TEXT_845);
d3985 1
a3985 1
    stringBuffer.append(TEXT_846);
d3987 1
a3987 1
    stringBuffer.append(TEXT_847);
d3989 1
a3989 1
    stringBuffer.append(TEXT_848);
d3991 1
a3991 1
    stringBuffer.append(TEXT_849);
d3995 1
a3995 1
    stringBuffer.append(TEXT_850);
d3997 1
a3997 1
    stringBuffer.append(TEXT_851);
d3999 1
a3999 1
    stringBuffer.append(TEXT_852);
d4004 1
a4004 1
    stringBuffer.append(TEXT_853);
d4006 1
a4006 1
    stringBuffer.append(TEXT_854);
d4008 1
a4008 1
    stringBuffer.append(TEXT_855);
d4010 1
a4010 1
    stringBuffer.append(TEXT_856);
d4014 1
a4014 1
    stringBuffer.append(TEXT_857);
d4016 1
a4016 1
    stringBuffer.append(TEXT_858);
d4018 1
a4018 1
    stringBuffer.append(TEXT_859);
d4022 1
a4022 1
    stringBuffer.append(TEXT_860);
d4024 1
a4024 1
    stringBuffer.append(TEXT_861);
d4028 1
a4028 1
    stringBuffer.append(TEXT_862);
d4032 1
a4032 1
    stringBuffer.append(TEXT_863);
d4040 1
a4040 1
    stringBuffer.append(TEXT_864);
d4045 1
a4045 1
    stringBuffer.append(TEXT_865);
d4055 1
a4055 1
    stringBuffer.append(TEXT_866);
d4057 1
a4057 1
    stringBuffer.append(TEXT_867);
d4059 1
a4059 1
    stringBuffer.append(TEXT_868);
d4061 1
a4061 1
    stringBuffer.append(TEXT_869);
d4065 1
a4065 1
    stringBuffer.append(TEXT_870);
d4067 1
a4067 1
    stringBuffer.append(TEXT_871);
d4069 1
a4069 1
    stringBuffer.append(TEXT_872);
d4073 1
a4073 1
    stringBuffer.append(TEXT_873);
d4078 1
a4078 1
    stringBuffer.append(TEXT_874);
d4080 1
a4080 1
    stringBuffer.append(TEXT_875);
d4082 1
a4082 1
    stringBuffer.append(TEXT_876);
d4086 1
a4086 1
    stringBuffer.append(TEXT_877);
d4090 1
a4090 1
    stringBuffer.append(TEXT_878);
d4095 1
a4095 1
    stringBuffer.append(TEXT_879);
d4099 1
a4099 1
    stringBuffer.append(TEXT_880);
d4101 1
a4101 1
    stringBuffer.append(TEXT_881);
d4103 1
a4103 1
    stringBuffer.append(TEXT_882);
d4105 1
a4105 1
    stringBuffer.append(TEXT_883);
d4107 1
a4107 1
    stringBuffer.append(TEXT_884);
d4109 1
a4109 1
    stringBuffer.append(TEXT_885);
d4111 1
a4111 1
    stringBuffer.append(TEXT_886);
d4113 1
a4113 1
    stringBuffer.append(TEXT_887);
d4115 1
a4115 1
    stringBuffer.append(TEXT_888);
d4119 1
a4119 1
    stringBuffer.append(TEXT_889);
d4121 1
a4121 1
    stringBuffer.append(TEXT_890);
d4123 1
a4123 1
    stringBuffer.append(TEXT_891);
d4128 1
a4128 1
    stringBuffer.append(TEXT_892);
d4130 1
a4130 1
    stringBuffer.append(TEXT_893);
d4132 1
a4132 1
    stringBuffer.append(TEXT_894);
d4137 1
a4137 1
    stringBuffer.append(TEXT_895);
d4139 1
a4139 1
    stringBuffer.append(TEXT_896);
d4143 1
a4143 1
    stringBuffer.append(TEXT_897);
d4147 1
a4147 1
    stringBuffer.append(TEXT_898);
d4151 1
a4151 1
    stringBuffer.append(TEXT_899);
d4158 1
a4158 1
    stringBuffer.append(TEXT_900);
d4162 1
a4162 1
    stringBuffer.append(TEXT_901);
d4164 1
a4164 1
    stringBuffer.append(TEXT_902);
d4166 1
a4166 1
    stringBuffer.append(TEXT_903);
d4171 1
a4171 1
    stringBuffer.append(TEXT_904);
d4173 1
a4173 1
    stringBuffer.append(TEXT_905);
d4177 1
a4177 1
    stringBuffer.append(TEXT_906);
d4181 1
a4181 1
    stringBuffer.append(TEXT_907);
d4183 1
a4183 1
    stringBuffer.append(TEXT_908);
d4185 1
a4185 1
    stringBuffer.append(TEXT_909);
d4187 1
a4187 1
    stringBuffer.append(TEXT_910);
d4189 1
a4189 1
    stringBuffer.append(TEXT_911);
d4191 1
a4191 1
    stringBuffer.append(TEXT_912);
d4193 1
a4193 1
    stringBuffer.append(TEXT_913);
d4195 1
a4195 1
    stringBuffer.append(TEXT_914);
d4197 1
a4197 1
    stringBuffer.append(TEXT_915);
d4199 1
a4199 1
    stringBuffer.append(TEXT_916);
d4201 1
a4201 1
    stringBuffer.append(TEXT_917);
d4203 1
a4203 1
    stringBuffer.append(TEXT_918);
a4209 2
    stringBuffer.append(TEXT_919);
    stringBuffer.append(TEXT_920);
a4210 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d4212 1
a4213 1
    stringBuffer.append(TEXT_923);
d4215 1
a4216 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a4217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d4221 4
d4228 1
a4228 1
    stringBuffer.append(TEXT_929);
d4236 1
a4236 1
    stringBuffer.append(TEXT_930);
d4240 1
a4240 1
    stringBuffer.append(TEXT_931);
d4242 1
a4242 1
    stringBuffer.append(TEXT_932);
d4244 1
a4244 1
    stringBuffer.append(TEXT_933);
d4246 1
a4246 1
    stringBuffer.append(TEXT_934);
d4248 1
a4248 1
    stringBuffer.append(TEXT_935);
a4249 4
    stringBuffer.append(TEXT_936);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_937);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d4253 1
a4253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d4255 1
a4255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d4259 4
d4266 1
a4266 1
    stringBuffer.append(TEXT_943);
d4270 1
a4270 1
    stringBuffer.append(TEXT_944);
d4272 1
a4272 1
    stringBuffer.append(TEXT_945);
a4275 2
    stringBuffer.append(TEXT_946);
    stringBuffer.append(TEXT_947);
a4276 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d4278 1
a4279 2
    stringBuffer.append(TEXT_950);
    stringBuffer.append(primaryView);
d4281 1
a4281 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4283 1
a4283 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4285 1
a4285 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4291 1
a4291 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d4293 2
a4295 2
    stringBuffer.append(TEXT_958);
    stringBuffer.append(primaryView);
d4297 1
a4297 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4299 1
a4299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4301 1
a4301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4307 1
d4309 1
a4310 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a4311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d4313 1
a4313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d4315 1
a4315 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d4317 1
d4319 1
a4320 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4327 1
d4329 1
a4330 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4331 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4339 1
d4341 1
a4342 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4345 1
a4346 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4349 1
a4350 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4353 1
a4354 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4361 1
d4363 1
d4365 2
d4368 1
a4368 1
    stringBuffer.append(TEXT_1001);
d4370 1
a4370 1
    stringBuffer.append(TEXT_1002);
d4375 1
a4375 1
    stringBuffer.append(TEXT_1003);
d4377 1
a4377 1
    stringBuffer.append(TEXT_1004);
d4381 1
a4381 1
    stringBuffer.append(TEXT_1005);
d4388 1
a4388 1
    stringBuffer.append(TEXT_1006);
d4390 1
a4390 1
    stringBuffer.append(TEXT_1007);
a4391 2
    stringBuffer.append(TEXT_1008);
    stringBuffer.append(TEXT_1009);
d4393 2
d4396 1
a4396 1
    stringBuffer.append(TEXT_1011);
d4398 1
a4398 1
    stringBuffer.append(TEXT_1012);
d4400 1
a4400 1
    stringBuffer.append(TEXT_1013);
d4402 1
a4402 1
    stringBuffer.append(TEXT_1014);
d4404 1
a4404 1
    stringBuffer.append(TEXT_1015);
d4406 1
a4406 1
    stringBuffer.append(TEXT_1016);
d4408 1
a4408 1
    stringBuffer.append(TEXT_1017);
d4410 1
a4410 1
    stringBuffer.append(TEXT_1018);
d4412 1
a4412 1
    stringBuffer.append(TEXT_1019);
d4414 1
a4414 1
    stringBuffer.append(TEXT_1020);
d4416 1
a4416 1
    stringBuffer.append(TEXT_1021);
d4418 1
a4418 1
    stringBuffer.append(TEXT_1022);
d4426 1
a4426 1
    stringBuffer.append(TEXT_1023);
d4428 1
a4428 1
    stringBuffer.append(TEXT_1024);
d4430 1
a4430 1
    stringBuffer.append(TEXT_1025);
d4434 1
a4434 1
    stringBuffer.append(TEXT_1026);
d4436 1
a4436 1
    stringBuffer.append(TEXT_1027);
d4438 1
a4438 1
    stringBuffer.append(TEXT_1028);
d4440 1
a4440 1
    stringBuffer.append(TEXT_1029);
d4444 1
a4444 1
    stringBuffer.append(TEXT_1030);
d4446 1
a4446 1
    stringBuffer.append(TEXT_1031);
d4448 1
a4448 1
    stringBuffer.append(TEXT_1032);
d4450 1
a4450 1
    stringBuffer.append(TEXT_1033);
d4452 1
a4452 1
    stringBuffer.append(TEXT_1034);
d4459 1
a4459 1
    stringBuffer.append(TEXT_1035);
d4461 1
a4461 1
    stringBuffer.append(TEXT_1036);
d4463 1
a4463 1
    stringBuffer.append(TEXT_1037);
d4465 1
a4465 1
    stringBuffer.append(TEXT_1038);
d4469 1
a4469 1
    stringBuffer.append(TEXT_1039);
d4471 1
a4471 1
    stringBuffer.append(TEXT_1040);
d4473 1
a4473 1
    stringBuffer.append(TEXT_1041);
d4475 1
a4475 1
    stringBuffer.append(TEXT_1042);
d4477 1
a4477 1
    stringBuffer.append(TEXT_1043);
d4481 1
a4481 1
    stringBuffer.append(TEXT_1044);
d4486 1
a4486 1
    stringBuffer.append(TEXT_1045);
d4488 1
a4488 1
    stringBuffer.append(TEXT_1046);
d4490 1
a4490 1
    stringBuffer.append(TEXT_1047);
d4492 1
a4492 1
    stringBuffer.append(TEXT_1048);
d4496 1
a4496 1
    stringBuffer.append(TEXT_1049);
d4498 1
a4498 1
    stringBuffer.append(TEXT_1050);
d4500 1
a4500 1
    stringBuffer.append(TEXT_1051);
d4502 1
a4502 1
    stringBuffer.append(TEXT_1052);
d4504 1
a4504 1
    stringBuffer.append(TEXT_1053);
d4509 1
a4509 1
    stringBuffer.append(TEXT_1054);
a4519 3
    stringBuffer.append(TEXT_1055);
    stringBuffer.append(TEXT_1056);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a4520 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
d4522 1
a4522 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d4524 1
d4526 1
a4527 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a4528 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d4530 1
a4530 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d4532 1
a4532 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d4534 1
a4534 1
    stringBuffer.append(editPatternCode);
d4536 1
a4536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d4538 1
a4538 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d4542 4
d4547 1
a4547 1
    stringBuffer.append(TEXT_1070);
d4549 1
a4549 1
    stringBuffer.append(TEXT_1071);
d4551 1
a4551 1
    stringBuffer.append(TEXT_1072);
d4557 1
a4557 1
    stringBuffer.append(TEXT_1073);
d4559 1
a4559 1
    stringBuffer.append(TEXT_1074);
d4561 1
a4561 1
    stringBuffer.append(TEXT_1075);
d4563 1
a4563 1
    stringBuffer.append(TEXT_1076);
d4565 1
a4565 1
    stringBuffer.append(TEXT_1077);
d4567 1
a4567 1
    stringBuffer.append(TEXT_1078);
d4569 1
a4569 1
    stringBuffer.append(TEXT_1079);
d4571 1
a4571 1
    stringBuffer.append(TEXT_1080);
d4573 1
a4573 1
    stringBuffer.append(TEXT_1081);
d4575 1
a4575 1
    stringBuffer.append(TEXT_1082);
d4577 1
a4577 1
    stringBuffer.append(TEXT_1083);
d4584 1
a4584 1
    stringBuffer.append(TEXT_1084);
d4587 1
a4587 1
    stringBuffer.append(TEXT_1085);
d4589 1
a4589 1
    stringBuffer.append(TEXT_1086);
d4591 1
a4591 1
    stringBuffer.append(TEXT_1087);
d4593 1
a4593 1
    stringBuffer.append(TEXT_1088);
d4595 1
a4595 1
    stringBuffer.append(TEXT_1089);
d4597 1
a4597 1
    stringBuffer.append(TEXT_1090);
d4599 1
a4599 1
    stringBuffer.append(TEXT_1091);
d4601 1
a4601 1
    stringBuffer.append(TEXT_1092);
d4605 1
a4605 1
    stringBuffer.append(TEXT_1093);
d4608 1
a4608 1
    stringBuffer.append(TEXT_1094);
d4610 1
a4610 1
    stringBuffer.append(TEXT_1095);
d4612 1
a4612 1
    stringBuffer.append(TEXT_1096);
d4614 1
a4614 1
    stringBuffer.append(TEXT_1097);
d4616 1
a4616 1
    stringBuffer.append(TEXT_1098);
d4618 1
a4618 1
    stringBuffer.append(TEXT_1099);
d4622 1
a4622 1
    stringBuffer.append(TEXT_1100);
d4624 1
a4624 1
    stringBuffer.append(TEXT_1101);
d4631 1
a4631 1
    stringBuffer.append(TEXT_1102);
d4635 1
a4635 1
    stringBuffer.append(TEXT_1103);
d4639 1
a4639 1
    stringBuffer.append(TEXT_1104);
d4643 2
a4644 2
    stringBuffer.append(TEXT_1105);
    stringBuffer.append(TEXT_1106);
d4646 1
a4646 1
    stringBuffer.append(TEXT_1107);
d4648 1
a4648 1
    stringBuffer.append(TEXT_1108);
d4650 1
a4650 1
    stringBuffer.append(TEXT_1109);
d4652 1
a4652 1
    stringBuffer.append(TEXT_1110);
d4654 1
a4654 1
    stringBuffer.append(TEXT_1111);
d4656 1
a4656 1
    stringBuffer.append(TEXT_1112);
d4658 1
a4658 1
    stringBuffer.append(TEXT_1113);
d4660 1
a4660 1
    stringBuffer.append(TEXT_1114);
d4662 1
a4662 1
    stringBuffer.append(TEXT_1115);
d4664 1
a4664 1
    stringBuffer.append(TEXT_1116);
d4666 1
a4666 1
    stringBuffer.append(TEXT_1117);
a4669 2
    stringBuffer.append(TEXT_1118);
    stringBuffer.append(TEXT_1119);
d4671 2
d4674 1
a4674 1
    stringBuffer.append(TEXT_1121);
d4676 1
a4676 1
    stringBuffer.append(TEXT_1122);
d4680 1
a4680 1
    stringBuffer.append(TEXT_1123);
d4682 1
a4682 1
    stringBuffer.append(TEXT_1124);
d4684 1
a4684 1
    stringBuffer.append(TEXT_1125);
d4686 1
a4686 1
    stringBuffer.append(TEXT_1126);
d4688 1
a4688 1
    stringBuffer.append(TEXT_1127);
d4690 1
a4690 1
    stringBuffer.append(TEXT_1128);
d4692 1
a4692 1
    stringBuffer.append(TEXT_1129);
d4694 1
a4694 1
    stringBuffer.append(TEXT_1130);
d4696 1
a4696 1
    stringBuffer.append(TEXT_1131);
d4698 1
a4698 1
    stringBuffer.append(TEXT_1132);
d4702 1
a4702 1
    stringBuffer.append(TEXT_1133);
d4711 1
a4711 1
    stringBuffer.append(TEXT_1134);
d4713 1
a4713 1
    stringBuffer.append(TEXT_1135);
d4715 1
a4715 1
    stringBuffer.append(TEXT_1136);
d4726 1
a4726 1
    stringBuffer.append(TEXT_1137);
d4728 1
a4728 1
    stringBuffer.append(TEXT_1138);
d4730 1
a4730 1
    stringBuffer.append(TEXT_1139);
d4738 1
a4738 1
    stringBuffer.append(TEXT_1140);
d4740 1
a4740 1
    stringBuffer.append(TEXT_1141);
d4742 1
a4742 1
    stringBuffer.append(TEXT_1142);
d4744 1
a4744 1
    stringBuffer.append(TEXT_1143);
d4746 1
a4746 1
    stringBuffer.append(TEXT_1144);
d4748 1
a4748 1
    stringBuffer.append(TEXT_1145);
d4750 1
a4750 1
    stringBuffer.append(TEXT_1146);
d4752 1
a4752 1
    stringBuffer.append(TEXT_1147);
d4754 1
a4754 1
    stringBuffer.append(TEXT_1148);
d4756 1
a4756 1
    stringBuffer.append(TEXT_1149);
d4758 1
a4758 1
    stringBuffer.append(TEXT_1150);
d4763 1
a4763 1
    stringBuffer.append(TEXT_1151);
d4765 1
a4765 1
    stringBuffer.append(TEXT_1152);
d4773 1
a4773 1
    stringBuffer.append(TEXT_1153);
d4775 1
a4775 1
    stringBuffer.append(TEXT_1154);
d4779 1
a4779 1
    stringBuffer.append(TEXT_1155);
d4781 1
a4781 1
    stringBuffer.append(TEXT_1156);
@


1.34
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d332 116
a447 116
  protected final String TEXT_311 = NL + "\t\t\t\tif (isDirectChild(child)) {" + NL + "\t\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t\t}";
  protected final String TEXT_312 = NL + "\t\t\t\treturn new ";
  protected final String TEXT_313 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_314 = " getTargetEditPart(";
  protected final String TEXT_315 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_316 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_317 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_318 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_319 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_320 = " getReconnectTargetCommand(";
  protected final String TEXT_321 = " request) {";
  protected final String TEXT_322 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_323 = ".INSTANCE;";
  protected final String TEXT_324 = NL + "\t\t\t\t";
  protected final String TEXT_325 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_326 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_327 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_328 = " edge = (";
  protected final String TEXT_329 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_330 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_331 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_332 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_333 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_334 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_335 = NL + "\t\t\t\tcase ";
  protected final String TEXT_336 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_337 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_338 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_339 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_340 = "(";
  protected final String TEXT_341 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_342 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_343 = " getReconnectSourceCommand(";
  protected final String TEXT_344 = " request) {";
  protected final String TEXT_345 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_346 = ".INSTANCE;";
  protected final String TEXT_347 = NL + "\t\t\t\t";
  protected final String TEXT_348 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_349 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_350 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_351 = " edge = (";
  protected final String TEXT_352 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_353 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_354 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_355 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_356 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_357 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_358 = NL + "\t\t\t\tcase ";
  protected final String TEXT_359 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_360 = "(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_361 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_362 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_363 = "(";
  protected final String TEXT_364 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_365 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_366 = " getConnectionCreateCommand(";
  protected final String TEXT_367 = " request) {";
  protected final String TEXT_368 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_369 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_370 = " requestEx = (";
  protected final String TEXT_371 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_372 = " result = new ";
  protected final String TEXT_373 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_374 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_375 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_376 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_377 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (!result.canExecute()) {" + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_378 = " wrappedResult = new ";
  protected final String TEXT_379 = "(";
  protected final String TEXT_380 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_381 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_382 = " getConnectionCompleteCommand(";
  protected final String TEXT_383 = " request) {";
  protected final String TEXT_384 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_385 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_386 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_387 = " requestEx = (";
  protected final String TEXT_388 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_389 = " result = new ";
  protected final String TEXT_390 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_391 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_392 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new ";
  protected final String TEXT_393 = "(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_394 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_395 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_396 = "(";
  protected final String TEXT_397 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_398 = NL + "\t\t\t\treturn ";
  protected final String TEXT_399 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_400 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_401 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_402 = "());";
  protected final String TEXT_403 = NL;
  protected final String TEXT_404 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_405 = "\", new ";
  protected final String TEXT_406 = "()); //$NON-NLS-1$";
  protected final String TEXT_407 = NL;
  protected final String TEXT_408 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_409 = ".OPEN_ROLE";
  protected final String TEXT_410 = " + \"";
  protected final String TEXT_411 = "\" ";
  protected final String TEXT_412 = ", new ";
  protected final String TEXT_413 = "());";
  protected final String TEXT_414 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_415 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_416 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_417 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_418 = " invisibleRectangle = new ";
  protected final String TEXT_419 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_420 = "());" + NL + "\t\t";
  protected final String TEXT_421 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_422 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_423 = NL + NL + "\t\t";
  protected final String TEXT_424 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL;
  protected final String TEXT_425 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_426 = " createChildNodesPane() {" + NL + "\t\t";
d449 537
a985 537
  protected final String TEXT_428 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_429 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_430 = " createNodeShape() {";
  protected final String TEXT_431 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_432 = "()";
  protected final String TEXT_433 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_434 = ";";
  protected final String TEXT_435 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_436 = ";";
  protected final String TEXT_437 = NL + "\t\t";
  protected final String TEXT_438 = " figure = new ";
  protected final String TEXT_439 = "();";
  protected final String TEXT_440 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_441 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_442 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_443 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_444 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_445 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_446 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_447 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_448 = " view = (";
  protected final String TEXT_449 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_450 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_451 = " decorationPane = new ";
  protected final String TEXT_452 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_453 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_454 = " imageFigure = new ";
  protected final String TEXT_455 = "(";
  protected final String TEXT_456 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_457 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_458 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_459 = " setupContentPane(";
  protected final String TEXT_460 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_461 = NL + "\t\t\t";
  protected final String TEXT_462 = " layout = new ";
  protected final String TEXT_463 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_464 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_465 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_466 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_467 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_468 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_469 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_470 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_471 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_472 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_473 = " childEditPart) {";
  protected final String TEXT_474 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_475 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_476 = ") childEditPart).";
  protected final String TEXT_477 = "(getPrimaryShape().";
  protected final String TEXT_478 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_479 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_480 = ") {" + NL + "\t\t\t";
  protected final String TEXT_481 = " pane = getPrimaryShape().";
  protected final String TEXT_482 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_483 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_484 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_485 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_486 = ") {" + NL + "\t\t\t";
  protected final String TEXT_487 = " pane = getPrimaryShape().";
  protected final String TEXT_488 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_489 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_490 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_491 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_492 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_493 = NL + "\t\tfor(";
  protected final String TEXT_494 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_495 = " nextChild = (";
  protected final String TEXT_496 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_497 = ".getVisualID(nextChild) == ";
  protected final String TEXT_498 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_499 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_500 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_501 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_502 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_503 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_504 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_505 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_506 = NL;
  protected final String TEXT_507 = "if (";
  protected final String TEXT_508 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_509 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_510 = " getLabelEditPart(";
  protected final String TEXT_511 = " req) {" + NL + "\t\t";
  protected final String TEXT_512 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_513 = " view = (";
  protected final String TEXT_514 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_515 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_516 = NL + "\t\t\t\tcase ";
  protected final String TEXT_517 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_518 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_519 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_520 = " childEditPart) {";
  protected final String TEXT_521 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_522 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_523 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_524 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_525 = " root = (";
  protected final String TEXT_526 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_527 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_528 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_529 = " childEditPart) {";
  protected final String TEXT_530 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_531 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_532 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_533 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_534 = " childEditPart, int index) {";
  protected final String TEXT_535 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_536 = " labelFigure = ((";
  protected final String TEXT_537 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_538 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_539 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_540 = " childFigure = ((";
  protected final String TEXT_541 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_542 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_543 = " childEditPart) {";
  protected final String TEXT_544 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_545 = " labelFigure = ((";
  protected final String TEXT_546 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_547 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_548 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_549 = " childFigure = ((";
  protected final String TEXT_550 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_551 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_552 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_553 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_554 = " childEditPart = (";
  protected final String TEXT_555 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_556 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_557 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_558 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_559 = ";" + NL + "\t\t";
  protected final String TEXT_560 = " bounds = (";
  protected final String TEXT_561 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_562 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_563 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_564 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_565 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_566 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_567 = " getSourceConnectionAnchor(";
  protected final String TEXT_568 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_569 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_570 = " getSourceConnectionAnchor(";
  protected final String TEXT_571 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_572 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_573 = "  getTargetConnectionAnchor(";
  protected final String TEXT_574 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_575 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_576 = "  getTargetConnectionAnchor(";
  protected final String TEXT_577 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_578 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_579 = NL + "\t\tif (";
  protected final String TEXT_580 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_581 = "(this);" + NL + "\t\t}";
  protected final String TEXT_582 = NL + "\t\tif (";
  protected final String TEXT_583 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_584 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_585 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_586 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_587 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_588 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_589 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_590 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_591 = NL;
  protected final String TEXT_592 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_593 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_594 = " domainModelEditDomain = ";
  protected final String TEXT_595 = ".getEditingDomain(";
  protected final String TEXT_596 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_597 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_598 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_599 = " {";
  protected final String TEXT_600 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_601 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_602 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_603 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_604 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_605 = " createFilter() {";
  protected final String TEXT_606 = NL + "\t\t\t";
  protected final String TEXT_607 = " filter = ";
  protected final String TEXT_608 = ".createFeatureFilter(";
  protected final String TEXT_609 = ".eINSTANCE.get";
  protected final String TEXT_610 = "());";
  protected final String TEXT_611 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_612 = ".createFeatureFilter(";
  protected final String TEXT_613 = ".eINSTANCE.get";
  protected final String TEXT_614 = "()));";
  protected final String TEXT_615 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_616 = ".createNotifierFilter(";
  protected final String TEXT_617 = ".getElement()));";
  protected final String TEXT_618 = NL + "\t\t\t";
  protected final String TEXT_619 = " filter = ";
  protected final String TEXT_620 = ".createNotifierFilter(";
  protected final String TEXT_621 = ".getElement());";
  protected final String TEXT_622 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_623 = NL + "\t\t\t";
  protected final String TEXT_624 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_625 = NL + "\t\t\t";
  protected final String TEXT_626 = " filter = ";
  protected final String TEXT_627 = ".NOT_TOUCH;";
  protected final String TEXT_628 = NL + "\t\t\treturn filter;";
  protected final String TEXT_629 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_630 = " getCreateNotationalElementCommand(";
  protected final String TEXT_631 = " descriptor) {";
  protected final String TEXT_632 = NL;
  protected final String TEXT_633 = "\t\t\t";
  protected final String TEXT_634 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_635 = NL + "\t\t\tcase ";
  protected final String TEXT_636 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_637 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_638 = "(";
  protected final String TEXT_639 = ", domainElement, ";
  protected final String TEXT_640 = "new ";
  protected final String TEXT_641 = "(0, 0, ";
  protected final String TEXT_642 = ", ";
  protected final String TEXT_643 = ")";
  protected final String TEXT_644 = NL + "null";
  protected final String TEXT_645 = ", ";
  protected final String TEXT_646 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_647 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_648 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_649 = " getSemanticChildNodes() {";
  protected final String TEXT_650 = NL;
  protected final String TEXT_651 = NL + "\treturn ";
  protected final String TEXT_652 = ".EMPTY_LIST;";
  protected final String TEXT_653 = NL + "\t";
  protected final String TEXT_654 = " result = new ";
  protected final String TEXT_655 = "();";
  protected final String TEXT_656 = NL + "\t";
  protected final String TEXT_657 = " viewObject = ";
  protected final String TEXT_658 = ";" + NL + "\t";
  protected final String TEXT_659 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_660 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_661 = NL + "\tfor(";
  protected final String TEXT_662 = " it = ";
  protected final String TEXT_663 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_664 = ") it.next();";
  protected final String TEXT_665 = NL + "\tnextValue = (";
  protected final String TEXT_666 = ")";
  protected final String TEXT_667 = ";";
  protected final String TEXT_668 = NL + "\tnodeVID = ";
  protected final String TEXT_669 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_670 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_671 = NL + "\tcase ";
  protected final String TEXT_672 = ".VISUAL_ID: {";
  protected final String TEXT_673 = NL + "\tif (";
  protected final String TEXT_674 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_675 = NL + "\t\tresult.add(new ";
  protected final String TEXT_676 = "(nextValue, nodeVID));";
  protected final String TEXT_677 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_678 = NL + "\t\t}";
  protected final String TEXT_679 = NL + "\t}";
  protected final String TEXT_680 = NL + "\t}";
  protected final String TEXT_681 = NL + "\treturn result;";
  protected final String TEXT_682 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_683 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_684 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_685 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_686 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_687 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_688 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_689 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_690 = " domainModelEditDomain = ";
  protected final String TEXT_691 = ".getEditingDomain(";
  protected final String TEXT_692 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_693 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_694 = NL;
  protected final String TEXT_695 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_696 = " domainModelEditDomain = ";
  protected final String TEXT_697 = ".getEditingDomain(";
  protected final String TEXT_698 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_699 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_700 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_701 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_702 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_703 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_704 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_705 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_706 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_707 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_708 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_709 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_710 = ".createEventTypeFilter(";
  protected final String TEXT_711 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_712 = ".createEventTypeFilter(";
  protected final String TEXT_713 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_714 = ".createEventTypeFilter(";
  protected final String TEXT_715 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_716 = ".createEventTypeFilter(";
  protected final String TEXT_717 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_718 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_719 = " createFilter() {";
  protected final String TEXT_720 = NL;
  protected final String TEXT_721 = NL + "\t\t\t";
  protected final String TEXT_722 = " filter = ";
  protected final String TEXT_723 = ".createFeatureFilter(";
  protected final String TEXT_724 = ".eINSTANCE.get";
  protected final String TEXT_725 = "());";
  protected final String TEXT_726 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_727 = ".createFeatureFilter(";
  protected final String TEXT_728 = ".eINSTANCE.get";
  protected final String TEXT_729 = "()));";
  protected final String TEXT_730 = NL;
  protected final String TEXT_731 = NL + "\t\t\t";
  protected final String TEXT_732 = " filter = ";
  protected final String TEXT_733 = ".createFeatureFilter(";
  protected final String TEXT_734 = ".eINSTANCE.get";
  protected final String TEXT_735 = "());";
  protected final String TEXT_736 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_737 = ".createFeatureFilter(";
  protected final String TEXT_738 = ".eINSTANCE.get";
  protected final String TEXT_739 = "()));";
  protected final String TEXT_740 = NL;
  protected final String TEXT_741 = NL + "\t\t\t";
  protected final String TEXT_742 = " filter = ";
  protected final String TEXT_743 = ".createFeatureFilter(";
  protected final String TEXT_744 = ".eINSTANCE.get";
  protected final String TEXT_745 = "());";
  protected final String TEXT_746 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_747 = ".createFeatureFilter(";
  protected final String TEXT_748 = ".eINSTANCE.get";
  protected final String TEXT_749 = "()));";
  protected final String TEXT_750 = NL;
  protected final String TEXT_751 = NL + "\t\t\t";
  protected final String TEXT_752 = " filter = ";
  protected final String TEXT_753 = ".createFeatureFilter(";
  protected final String TEXT_754 = ".eINSTANCE.get";
  protected final String TEXT_755 = "());";
  protected final String TEXT_756 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_757 = ".createFeatureFilter(";
  protected final String TEXT_758 = ".eINSTANCE.get";
  protected final String TEXT_759 = "()));";
  protected final String TEXT_760 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_761 = NL + "\t\t\t";
  protected final String TEXT_762 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_763 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_764 = NL + "\t\t\t";
  protected final String TEXT_765 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_766 = NL + "\t\t\t";
  protected final String TEXT_767 = " filter = ";
  protected final String TEXT_768 = ".NOT_TOUCH;";
  protected final String TEXT_769 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_770 = " getCreateNotationalElementCommand(";
  protected final String TEXT_771 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_772 = " linkDescriptor = (";
  protected final String TEXT_773 = ") descriptor;";
  protected final String TEXT_774 = NL;
  protected final String TEXT_775 = "\t\t\t";
  protected final String TEXT_776 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_777 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_778 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_779 = NL + "\t\t\tcase ";
  protected final String TEXT_780 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_781 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_782 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_783 = NL + "\t\t\tcase ";
  protected final String TEXT_784 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_785 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_786 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_787 = "(";
  protected final String TEXT_788 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_789 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_790 = " getSemanticChildLinks() {";
  protected final String TEXT_791 = NL;
  protected final String TEXT_792 = "\t";
  protected final String TEXT_793 = " result = new ";
  protected final String TEXT_794 = "();";
  protected final String TEXT_795 = NL + "\t";
  protected final String TEXT_796 = " modelObject = ";
  protected final String TEXT_797 = ".getElement();" + NL + "\t";
  protected final String TEXT_798 = " nextValue;";
  protected final String TEXT_799 = NL + "\tint linkVID;";
  protected final String TEXT_800 = NL + "\tfor(";
  protected final String TEXT_801 = " it = ";
  protected final String TEXT_802 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_803 = ") it.next();";
  protected final String TEXT_804 = NL + "\tnextValue = (";
  protected final String TEXT_805 = ")";
  protected final String TEXT_806 = ";";
  protected final String TEXT_807 = NL + "\tlinkVID = ";
  protected final String TEXT_808 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_809 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_810 = NL + "\tcase ";
  protected final String TEXT_811 = ".VISUAL_ID: {";
  protected final String TEXT_812 = NL + "\tif (";
  protected final String TEXT_813 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_814 = NL + "\t\t";
  protected final String TEXT_815 = " source = (";
  protected final String TEXT_816 = ")";
  protected final String TEXT_817 = ";";
  protected final String TEXT_818 = NL + "\t\t";
  protected final String TEXT_819 = " source = ";
  protected final String TEXT_820 = ".getElement();";
  protected final String TEXT_821 = NL + "\t\t";
  protected final String TEXT_822 = " target = (";
  protected final String TEXT_823 = ")";
  protected final String TEXT_824 = ";";
  protected final String TEXT_825 = NL + "\t\t";
  protected final String TEXT_826 = " target = ";
  protected final String TEXT_827 = ".getElement();";
  protected final String TEXT_828 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_829 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_830 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_831 = NL + "\t}";
  protected final String TEXT_832 = NL + "\t}";
  protected final String TEXT_833 = NL + "\t}";
  protected final String TEXT_834 = NL + "\tfor(";
  protected final String TEXT_835 = " it = ";
  protected final String TEXT_836 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_837 = ") it.next();";
  protected final String TEXT_838 = NL + "\tnextValue = (";
  protected final String TEXT_839 = ")";
  protected final String TEXT_840 = ";";
  protected final String TEXT_841 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_842 = NL + "\t\tresult.add(new ";
  protected final String TEXT_843 = "(modelObject, nextValue, null, ";
  protected final String TEXT_844 = ".VISUAL_ID));";
  protected final String TEXT_845 = NL + "\t}";
  protected final String TEXT_846 = NL + "\t}";
  protected final String TEXT_847 = NL + "\treturn result;";
  protected final String TEXT_848 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_849 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_850 = " result = new ";
  protected final String TEXT_851 = "();" + NL + "\t\t\t";
  protected final String TEXT_852 = " allLinks = ";
  protected final String TEXT_853 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_854 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_855 = " next = (";
  protected final String TEXT_856 = ") it.next();";
  protected final String TEXT_857 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_858 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_859 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_860 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_861 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_862 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_863 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_864 = ".VISUAL_ID:";
  protected final String TEXT_865 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_866 = NL + "\t\t\t\t} else {";
  protected final String TEXT_867 = NL + "\t\t\t\t}";
  protected final String TEXT_868 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_869 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_870 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_871 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_872 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_873 = ".VISUAL_ID:";
  protected final String TEXT_874 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_875 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_876 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_877 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_878 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_879 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_880 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_881 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_882 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_883 = " domainModelEditDomain = ";
  protected final String TEXT_884 = ".getEditingDomain(";
  protected final String TEXT_885 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_886 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_887 = NL;
  protected final String TEXT_888 = NL;
  protected final String TEXT_889 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_890 = " domainModelRefresher = new ";
  protected final String TEXT_891 = "(this);" + NL;
  protected final String TEXT_892 = NL;
  protected final String TEXT_893 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_894 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_895 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_896 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_897 = NL;
  protected final String TEXT_898 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_899 = NL + "\t\t";
  protected final String TEXT_900 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_901 = ") ";
  protected final String TEXT_902 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_903 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_904 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_905 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_906 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_907 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_908 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_909 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_910 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_911 = "\t" + NL + "\t}";
  protected final String TEXT_912 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_913 = " createdFont;";
  protected final String TEXT_914 = "\t" + NL;
  protected final String TEXT_915 = NL;
  protected final String TEXT_916 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_917 = " style = (";
  protected final String TEXT_918 = ")  ";
  protected final String TEXT_919 = ".getStyle(";
  protected final String TEXT_920 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_921 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_922 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_923 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_924 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_925 = " style = (";
  protected final String TEXT_926 = ")  ";
  protected final String TEXT_927 = ".getStyle(";
  protected final String TEXT_928 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_929 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_930 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_931 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_932 = " createdBackgroundColor;" + NL;
  protected final String TEXT_933 = NL;
  protected final String TEXT_934 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_935 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_936 = " feature, ";
  protected final String TEXT_937 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_938 = "();";
  protected final String TEXT_939 = NL;
  protected final String TEXT_940 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_941 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_942 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_943 = NL;
  protected final String TEXT_944 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_945 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_946 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_947 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_948 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_949 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_950 = NL;
  protected final String TEXT_951 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_952 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_953 = NL;
  protected final String TEXT_954 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_955 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_956 = NL;
  protected final String TEXT_957 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_958 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_959 = NL;
  protected final String TEXT_960 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_961 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_962 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_963 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_964 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d987 153
a1139 153
  protected final String TEXT_966 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_967 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_968 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_969 = NL;
  protected final String TEXT_970 = NL;
  protected final String TEXT_971 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_972 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_973 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_974 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_975 = NL;
  protected final String TEXT_976 = "\t\tinstallEditPolicy(";
  protected final String TEXT_977 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_978 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_979 = " createDeleteCommand(";
  protected final String TEXT_980 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_981 = " editingDomain = ";
  protected final String TEXT_982 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_983 = " cc = new ";
  protected final String TEXT_984 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(new ";
  protected final String TEXT_985 = "((";
  protected final String TEXT_986 = ") getDiagramNode().eContainer(), getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_987 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_988 = " editingDomain) {";
  protected final String TEXT_989 = NL + "\t\t\t\t";
  protected final String TEXT_990 = " result = new ";
  protected final String TEXT_991 = "();";
  protected final String TEXT_992 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_993 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_994 = ".eINSTANCE.get";
  protected final String TEXT_995 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_996 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_997 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_998 = ".eINSTANCE.get";
  protected final String TEXT_999 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1000 = ".UNSET_VALUE));";
  protected final String TEXT_1001 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1002 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1003 = ".eINSTANCE.get";
  protected final String TEXT_1004 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1005 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1006 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1007 = ".eINSTANCE.get";
  protected final String TEXT_1008 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1009 = ".UNSET_VALUE));";
  protected final String TEXT_1010 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1011 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1012 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1013 = ".eINSTANCE.get";
  protected final String TEXT_1014 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_1015 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1016 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1017 = ".eINSTANCE.get";
  protected final String TEXT_1018 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1019 = ".UNSET_VALUE);";
  protected final String TEXT_1020 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1021 = NL;
  protected final String TEXT_1022 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1023 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1024 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1025 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1026 = NL;
  protected final String TEXT_1027 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1028 = " getDirectEditCommand(";
  protected final String TEXT_1029 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1030 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1031 = "(";
  protected final String TEXT_1032 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1033 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1034 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1035 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1036 = " editingDomain = ";
  protected final String TEXT_1037 = ".getEditingDomain(";
  protected final String TEXT_1038 = ".getDiagram().getElement());";
  protected final String TEXT_1039 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1040 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1041 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1042 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1043 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1044 = " createDomainModelCommand(";
  protected final String TEXT_1045 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1046 = " element = ";
  protected final String TEXT_1047 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1048 = " result = new ";
  protected final String TEXT_1049 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1050 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1051 = " ";
  protected final String TEXT_1052 = "feature = (";
  protected final String TEXT_1053 = ") ";
  protected final String TEXT_1054 = ".eINSTANCE.get";
  protected final String TEXT_1055 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1056 = ".parseValue(feature, values[";
  protected final String TEXT_1057 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1058 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1059 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1060 = " ";
  protected final String TEXT_1061 = "values = new ";
  protected final String TEXT_1062 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1063 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1064 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1065 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1066 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1067 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1068 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1069 = NL + "\t\t\t\t});";
  protected final String TEXT_1070 = NL + "\t\t}" + NL;
  protected final String TEXT_1071 = NL;
  protected final String TEXT_1072 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1073 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1074 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1075 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1076 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1077 = "(this, ";
  protected final String TEXT_1078 = ".class, new ";
  protected final String TEXT_1079 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1080 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1081 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1082 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1083 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1084 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1085 = NL;
  protected final String TEXT_1086 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1087 = " domainModelRefresher = new ";
  protected final String TEXT_1088 = "(this);" + NL;
  protected final String TEXT_1089 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1090 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1091 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1092 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1093 = " nextChild = (";
  protected final String TEXT_1094 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1095 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1096 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1097 = ") ";
  protected final String TEXT_1098 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1099 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1100 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1101 = ".eINSTANCE.get";
  protected final String TEXT_1102 = "(), labelRefresher);";
  protected final String TEXT_1103 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1104 = ".eINSTANCE.get";
  protected final String TEXT_1105 = "(), labelRefresher);";
  protected final String TEXT_1106 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1107 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1108 = " result = new ";
  protected final String TEXT_1109 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1110 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1111 = " next = (";
  protected final String TEXT_1112 = ") it.next();" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1113 = ".getVisualID(next)) {";
  protected final String TEXT_1114 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1115 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1116 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1117 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1118 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
d1141 37
d2258 4
d2265 1
a2265 1
    stringBuffer.append(TEXT_312);
d2267 1
a2267 1
    stringBuffer.append(TEXT_313);
d2269 1
a2269 1
    stringBuffer.append(TEXT_314);
d2271 1
a2271 1
    stringBuffer.append(TEXT_315);
d2273 1
a2273 1
    stringBuffer.append(TEXT_316);
d2275 1
a2275 1
    stringBuffer.append(TEXT_317);
d2277 1
a2277 1
    stringBuffer.append(TEXT_318);
d2279 1
a2279 1
    stringBuffer.append(TEXT_319);
d2281 1
a2281 1
    stringBuffer.append(TEXT_320);
d2283 1
a2283 1
    stringBuffer.append(TEXT_321);
d2287 1
a2287 1
    stringBuffer.append(TEXT_322);
d2289 1
a2289 1
    stringBuffer.append(TEXT_323);
d2293 1
a2293 1
    stringBuffer.append(TEXT_324);
d2295 1
a2295 1
    stringBuffer.append(TEXT_325);
d2297 1
a2297 1
    stringBuffer.append(TEXT_326);
d2299 1
a2299 1
    stringBuffer.append(TEXT_327);
d2301 1
a2301 1
    stringBuffer.append(TEXT_328);
d2303 1
a2303 1
    stringBuffer.append(TEXT_329);
d2305 1
a2305 1
    stringBuffer.append(TEXT_330);
d2307 1
a2307 1
    stringBuffer.append(TEXT_331);
d2309 1
a2309 1
    stringBuffer.append(TEXT_332);
d2311 1
a2311 1
    stringBuffer.append(TEXT_333);
d2313 1
a2313 1
    stringBuffer.append(TEXT_334);
d2337 1
a2337 1
    stringBuffer.append(TEXT_335);
d2339 1
a2339 1
    stringBuffer.append(TEXT_336);
d2341 1
a2341 1
    stringBuffer.append(TEXT_337);
d2345 1
a2345 1
    stringBuffer.append(TEXT_338);
d2347 1
a2347 1
    stringBuffer.append(TEXT_339);
d2349 1
a2349 1
    stringBuffer.append(TEXT_340);
d2351 1
a2351 1
    stringBuffer.append(TEXT_341);
d2355 1
a2355 1
    stringBuffer.append(TEXT_342);
d2357 1
a2357 1
    stringBuffer.append(TEXT_343);
d2359 1
a2359 1
    stringBuffer.append(TEXT_344);
d2363 1
a2363 1
    stringBuffer.append(TEXT_345);
d2365 1
a2365 1
    stringBuffer.append(TEXT_346);
d2369 1
a2369 1
    stringBuffer.append(TEXT_347);
d2371 1
a2371 1
    stringBuffer.append(TEXT_348);
d2373 1
a2373 1
    stringBuffer.append(TEXT_349);
d2375 1
a2375 1
    stringBuffer.append(TEXT_350);
d2377 1
a2377 1
    stringBuffer.append(TEXT_351);
d2379 1
a2379 1
    stringBuffer.append(TEXT_352);
d2381 1
a2381 1
    stringBuffer.append(TEXT_353);
d2383 1
a2383 1
    stringBuffer.append(TEXT_354);
d2385 1
a2385 1
    stringBuffer.append(TEXT_355);
d2387 1
a2387 1
    stringBuffer.append(TEXT_356);
d2389 1
a2389 1
    stringBuffer.append(TEXT_357);
d2415 1
a2415 1
    stringBuffer.append(TEXT_358);
d2417 1
a2417 1
    stringBuffer.append(TEXT_359);
d2419 1
a2419 1
    stringBuffer.append(TEXT_360);
d2423 1
a2423 1
    stringBuffer.append(TEXT_361);
d2425 1
a2425 1
    stringBuffer.append(TEXT_362);
d2427 1
a2427 1
    stringBuffer.append(TEXT_363);
d2429 1
a2429 1
    stringBuffer.append(TEXT_364);
d2433 1
a2433 1
    stringBuffer.append(TEXT_365);
d2435 1
a2435 1
    stringBuffer.append(TEXT_366);
d2437 1
a2437 1
    stringBuffer.append(TEXT_367);
d2439 1
a2439 1
    stringBuffer.append(TEXT_368);
d2441 1
a2441 1
    stringBuffer.append(TEXT_369);
d2443 1
a2443 1
    stringBuffer.append(TEXT_370);
d2445 1
a2445 1
    stringBuffer.append(TEXT_371);
d2447 1
a2447 1
    stringBuffer.append(TEXT_372);
d2449 1
a2449 1
    stringBuffer.append(TEXT_373);
d2475 1
a2475 1
    stringBuffer.append(TEXT_374);
d2477 1
a2477 1
    stringBuffer.append(TEXT_375);
d2479 1
a2479 1
    stringBuffer.append(TEXT_376);
d2483 1
a2483 1
    stringBuffer.append(TEXT_377);
d2485 1
a2485 1
    stringBuffer.append(TEXT_378);
d2487 1
a2487 1
    stringBuffer.append(TEXT_379);
d2489 1
a2489 1
    stringBuffer.append(TEXT_380);
d2491 1
a2491 1
    stringBuffer.append(TEXT_381);
d2493 1
a2493 1
    stringBuffer.append(TEXT_382);
d2495 1
a2495 1
    stringBuffer.append(TEXT_383);
d2497 1
a2497 1
    stringBuffer.append(TEXT_384);
d2499 1
a2499 1
    stringBuffer.append(TEXT_385);
d2501 1
a2501 1
    stringBuffer.append(TEXT_386);
d2503 1
a2503 1
    stringBuffer.append(TEXT_387);
d2505 1
a2505 1
    stringBuffer.append(TEXT_388);
d2507 1
a2507 1
    stringBuffer.append(TEXT_389);
d2509 1
a2509 1
    stringBuffer.append(TEXT_390);
d2533 1
a2533 1
    stringBuffer.append(TEXT_391);
d2535 1
a2535 1
    stringBuffer.append(TEXT_392);
d2537 1
a2537 1
    stringBuffer.append(TEXT_393);
d2541 1
a2541 1
    stringBuffer.append(TEXT_394);
d2543 1
a2543 1
    stringBuffer.append(TEXT_395);
d2545 1
a2545 1
    stringBuffer.append(TEXT_396);
d2547 1
a2547 1
    stringBuffer.append(TEXT_397);
d2549 1
a2549 1
    stringBuffer.append(TEXT_398);
d2551 1
a2551 1
    stringBuffer.append(TEXT_399);
d2555 1
a2555 1
    stringBuffer.append(TEXT_400);
d2557 1
a2557 1
    stringBuffer.append(TEXT_401);
d2559 1
a2559 1
    stringBuffer.append(TEXT_402);
d2565 1
a2565 1
    stringBuffer.append(TEXT_403);
d2569 1
a2569 1
    stringBuffer.append(TEXT_404);
d2571 1
a2571 1
    stringBuffer.append(TEXT_405);
d2573 1
a2573 1
    stringBuffer.append(TEXT_406);
d2575 1
a2575 1
    stringBuffer.append(TEXT_407);
d2583 1
a2583 1
    stringBuffer.append(TEXT_408);
d2585 1
a2585 1
    stringBuffer.append(TEXT_409);
d2587 1
a2587 1
    stringBuffer.append(TEXT_410);
d2589 1
a2589 1
    stringBuffer.append(TEXT_411);
d2591 1
a2591 1
    stringBuffer.append(TEXT_412);
d2593 1
a2593 1
    stringBuffer.append(TEXT_413);
d2599 1
d2603 1
a2603 1
    stringBuffer.append(TEXT_414);
d2610 1
a2610 1
    stringBuffer.append(TEXT_415);
a2613 6
    stringBuffer.append(TEXT_416);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_417);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_418);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
d2615 1
a2615 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.StackLayout"));
a2616 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_421);
d2618 1
a2618 1
	if (myHelper.hasBothChildrenAndCompartments()) {
d2620 2
d2624 2
a2625 1
	}
d2628 1
a2628 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d2630 2
d2633 1
a2633 1
	if (!genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty()) {
a2634 2
    stringBuffer.append(TEXT_425);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d2636 1
a2636 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d2638 1
a2638 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.RectangleFigure"));
d2640 1
a2640 3
    
	}

d2642 1
a2642 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d2644 1
a2644 9
    
String figureQualifiedClassName = null;
Viewmap viewmap = genNode.getViewmap();
if (viewmap instanceof FigureViewmap) {
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.RectangleFigure";
	}

d2646 1
a2646 1
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
d2648 1
a2648 1
    if (isXYLayout) {
d2650 1
a2650 1
    } /* use flow layout*/ 
d2652 1
a2652 1
    } else if (viewmap instanceof SnippetViewmap) {
d2654 1
a2654 1
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
d2656 3
a2658 2
    } else if (viewmap instanceof InnerClassViewmap) {
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();
d2661 1
a2661 1
    stringBuffer.append(figureQualifiedClassName);
d2663 1
a2663 1
    stringBuffer.append(figureQualifiedClassName);
d2665 3
a2667 1
    if (!genNode.getChildNodes().isEmpty() && isXYLayout) { /*otherwise, leave to figure's default value*/
d2669 6
a2674 1
    }
d2676 1
a2676 1
    }
d2678 3
a2680 1
    if (figureQualifiedClassName != null) {
d2682 5
a2686 1
    stringBuffer.append(figureQualifiedClassName);
d2688 3
a2690 1
    stringBuffer.append(figureQualifiedClassName);
d2692 4
a2695 1
    }
d2697 4
a2700 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d2702 3
a2704 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d2706 1
a2706 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d2708 1
a2708 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d2712 1
a2712 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
d2714 1
a2714 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.BorderLayout"));
d2716 3
a2718 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ImageFigure"));
d2720 3
a2722 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ImageFigure"));
d2724 1
a2724 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d2726 3
a2728 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.PositionConstants"));
d2730 1
a2730 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.BorderLayout"));
d2734 50
d2785 27
a2811 1
    stringBuffer.append(TEXT_460);
d2816 1
a2816 1
    stringBuffer.append(TEXT_461);
d2818 1
a2818 1
    stringBuffer.append(TEXT_462);
d2820 1
a2820 1
    stringBuffer.append(TEXT_463);
d2822 1
a2822 1
    stringBuffer.append(TEXT_464);
d2824 1
a2824 1
    stringBuffer.append(TEXT_465);
d2826 1
a2826 1
    stringBuffer.append(TEXT_466);
d2828 1
a2828 1
    stringBuffer.append(TEXT_467);
d2830 1
a2830 1
    stringBuffer.append(TEXT_468);
d2832 1
a2832 1
    stringBuffer.append(TEXT_469);
d2834 1
a2834 1
    stringBuffer.append(TEXT_470);
d2836 1
a2836 1
    stringBuffer.append(TEXT_471);
d2840 1
a2840 1
    stringBuffer.append(TEXT_472);
d2842 1
a2842 1
    stringBuffer.append(TEXT_473);
d2850 1
a2850 1
    stringBuffer.append(TEXT_474);
d2852 1
a2852 1
    stringBuffer.append(TEXT_475);
d2854 1
a2854 1
    stringBuffer.append(TEXT_476);
d2856 1
a2856 1
    stringBuffer.append(TEXT_477);
d2858 1
a2858 1
    stringBuffer.append(TEXT_478);
d2867 1
a2867 1
    stringBuffer.append(TEXT_479);
d2869 1
a2869 1
    stringBuffer.append(TEXT_480);
d2871 1
a2871 1
    stringBuffer.append(TEXT_481);
d2873 1
a2873 1
    stringBuffer.append(TEXT_482);
d2875 1
a2875 1
    stringBuffer.append(TEXT_483);
d2879 1
a2879 1
    stringBuffer.append(TEXT_484);
d2887 1
a2887 1
    stringBuffer.append(TEXT_485);
d2889 1
a2889 1
    stringBuffer.append(TEXT_486);
d2891 1
a2891 1
    stringBuffer.append(TEXT_487);
d2893 1
a2893 1
    stringBuffer.append(TEXT_488);
d2895 1
a2895 1
    stringBuffer.append(TEXT_489);
d2899 1
a2899 1
    stringBuffer.append(TEXT_490);
d2903 1
a2903 1
    stringBuffer.append(TEXT_491);
d2905 1
a2905 1
    stringBuffer.append(TEXT_492);
d2909 1
a2909 1
    stringBuffer.append(TEXT_493);
d2911 1
a2911 1
    stringBuffer.append(TEXT_494);
d2913 1
a2913 1
    stringBuffer.append(TEXT_495);
d2915 1
a2915 1
    stringBuffer.append(TEXT_496);
d2917 1
a2917 1
    stringBuffer.append(TEXT_497);
d2919 1
a2919 1
    stringBuffer.append(TEXT_498);
d2921 1
a2921 1
    stringBuffer.append(TEXT_499);
d2925 1
a2925 1
    stringBuffer.append(TEXT_500);
d2927 1
a2927 1
    stringBuffer.append(TEXT_501);
d2929 1
a2929 1
    stringBuffer.append(TEXT_502);
d2931 1
a2931 1
    stringBuffer.append(TEXT_503);
d2933 1
a2933 1
    stringBuffer.append(TEXT_504);
d2935 3
a2937 3
    stringBuffer.append(TEXT_505);
    stringBuffer.append(TEXT_506);
    stringBuffer.append(TEXT_507);
d2939 1
a2939 1
    stringBuffer.append(TEXT_508);
d2941 1
a2941 1
    stringBuffer.append(TEXT_509);
d2943 1
a2943 1
    stringBuffer.append(TEXT_510);
d2945 1
a2945 1
    stringBuffer.append(TEXT_511);
d2947 1
a2947 1
    stringBuffer.append(TEXT_512);
d2949 1
a2949 1
    stringBuffer.append(TEXT_513);
d2951 1
a2951 1
    stringBuffer.append(TEXT_514);
d2953 1
a2953 1
    stringBuffer.append(TEXT_515);
d2961 1
a2961 1
    stringBuffer.append(TEXT_516);
d2963 1
a2963 1
    stringBuffer.append(TEXT_517);
d2967 1
a2967 1
    stringBuffer.append(TEXT_518);
d2971 1
a2971 1
    stringBuffer.append(TEXT_519);
d2973 1
a2973 1
    stringBuffer.append(TEXT_520);
d2978 1
a2978 1
    stringBuffer.append(TEXT_521);
d2980 1
a2980 1
    stringBuffer.append(TEXT_522);
d2984 1
a2984 1
    stringBuffer.append(TEXT_523);
d2986 1
a2986 1
    stringBuffer.append(TEXT_524);
d2988 1
a2988 1
    stringBuffer.append(TEXT_525);
d2990 1
a2990 1
    stringBuffer.append(TEXT_526);
d2992 1
a2992 1
    stringBuffer.append(TEXT_527);
d2997 1
a2997 1
    stringBuffer.append(TEXT_528);
d2999 1
a2999 1
    stringBuffer.append(TEXT_529);
d3004 1
a3004 1
    stringBuffer.append(TEXT_530);
d3006 1
a3006 1
    stringBuffer.append(TEXT_531);
d3010 1
a3010 1
    stringBuffer.append(TEXT_532);
d3015 1
a3015 1
    stringBuffer.append(TEXT_533);
d3017 1
a3017 1
    stringBuffer.append(TEXT_534);
d3021 1
a3021 1
    stringBuffer.append(TEXT_535);
d3023 1
a3023 1
    stringBuffer.append(TEXT_536);
d3025 1
a3025 1
    stringBuffer.append(TEXT_537);
d3030 1
a3030 1
    stringBuffer.append(TEXT_538);
d3035 1
a3035 1
    stringBuffer.append(TEXT_539);
d3037 1
a3037 1
    stringBuffer.append(TEXT_540);
d3039 1
a3039 1
    stringBuffer.append(TEXT_541);
d3043 1
a3043 1
    stringBuffer.append(TEXT_542);
d3045 1
a3045 1
    stringBuffer.append(TEXT_543);
d3049 1
a3049 1
    stringBuffer.append(TEXT_544);
d3051 1
a3051 1
    stringBuffer.append(TEXT_545);
d3053 1
a3053 1
    stringBuffer.append(TEXT_546);
d3058 1
a3058 1
    stringBuffer.append(TEXT_547);
d3063 1
a3063 1
    stringBuffer.append(TEXT_548);
d3065 1
a3065 1
    stringBuffer.append(TEXT_549);
d3067 1
a3067 1
    stringBuffer.append(TEXT_550);
d3071 1
a3071 1
    stringBuffer.append(TEXT_551);
d3078 1
a3078 1
    stringBuffer.append(TEXT_552);
d3080 1
a3080 1
    stringBuffer.append(TEXT_553);
d3082 1
a3082 1
    stringBuffer.append(TEXT_554);
d3084 1
a3084 1
    stringBuffer.append(TEXT_555);
d3086 1
a3086 1
    stringBuffer.append(TEXT_556);
d3090 1
a3090 1
    stringBuffer.append(TEXT_557);
d3092 1
a3092 1
    stringBuffer.append(TEXT_558);
d3094 1
a3094 1
    stringBuffer.append(TEXT_559);
d3096 1
a3096 1
    stringBuffer.append(TEXT_560);
d3098 1
a3098 1
    stringBuffer.append(TEXT_561);
d3100 1
a3100 1
    stringBuffer.append(TEXT_562);
d3102 1
a3102 1
    stringBuffer.append(TEXT_563);
d3104 1
a3104 1
    stringBuffer.append(TEXT_564);
d3106 1
a3106 1
    stringBuffer.append(TEXT_565);
d3108 1
a3108 1
    stringBuffer.append(TEXT_566);
d3110 1
a3110 1
    stringBuffer.append(TEXT_567);
d3112 1
a3112 1
    stringBuffer.append(TEXT_568);
d3114 1
a3114 1
    stringBuffer.append(TEXT_569);
d3116 1
a3116 1
    stringBuffer.append(TEXT_570);
d3118 1
a3118 1
    stringBuffer.append(TEXT_571);
d3120 1
a3120 1
    stringBuffer.append(TEXT_572);
d3122 1
a3122 1
    stringBuffer.append(TEXT_573);
d3124 1
a3124 1
    stringBuffer.append(TEXT_574);
d3126 1
a3126 1
    stringBuffer.append(TEXT_575);
d3128 1
a3128 1
    stringBuffer.append(TEXT_576);
d3130 1
a3130 1
    stringBuffer.append(TEXT_577);
d3132 1
a3132 1
    stringBuffer.append(TEXT_578);
d3136 1
a3136 1
    stringBuffer.append(TEXT_579);
d3138 1
a3138 1
    stringBuffer.append(TEXT_580);
d3140 1
a3140 1
    stringBuffer.append(TEXT_581);
d3144 1
a3144 1
    stringBuffer.append(TEXT_582);
d3146 1
a3146 1
    stringBuffer.append(TEXT_583);
d3148 1
a3148 1
    stringBuffer.append(TEXT_584);
d3152 1
a3152 1
    stringBuffer.append(TEXT_585);
d3159 1
a3159 1
    stringBuffer.append(TEXT_586);
d3163 1
a3163 1
    stringBuffer.append(TEXT_587);
d3167 1
a3167 1
    stringBuffer.append(TEXT_588);
d3174 1
a3174 1
    stringBuffer.append(TEXT_589);
d3178 1
a3178 1
    stringBuffer.append(TEXT_590);
d3188 2
a3189 2
    stringBuffer.append(TEXT_591);
    stringBuffer.append(TEXT_592);
d3191 1
a3191 1
    stringBuffer.append(TEXT_593);
d3193 1
a3193 1
    stringBuffer.append(TEXT_594);
d3195 1
a3195 1
    stringBuffer.append(TEXT_595);
d3197 1
a3197 1
    stringBuffer.append(TEXT_596);
d3199 1
a3199 1
    stringBuffer.append(TEXT_597);
d3201 1
a3201 1
    stringBuffer.append(TEXT_598);
d3203 1
a3203 1
    stringBuffer.append(TEXT_599);
d3218 1
a3218 1
    stringBuffer.append(TEXT_600);
d3220 1
a3220 1
    stringBuffer.append(TEXT_601);
d3222 1
a3222 1
    stringBuffer.append(TEXT_602);
d3224 1
a3224 1
    stringBuffer.append(TEXT_603);
d3228 1
a3228 1
    stringBuffer.append(TEXT_604);
d3230 1
a3230 1
    stringBuffer.append(TEXT_605);
d3249 1
a3249 1
    stringBuffer.append(TEXT_606);
d3251 1
a3251 1
    stringBuffer.append(TEXT_607);
d3253 1
a3253 1
    stringBuffer.append(TEXT_608);
d3255 1
a3255 1
    stringBuffer.append(TEXT_609);
d3257 1
a3257 1
    stringBuffer.append(TEXT_610);
d3261 1
a3261 1
    stringBuffer.append(TEXT_611);
d3263 1
a3263 1
    stringBuffer.append(TEXT_612);
d3265 1
a3265 1
    stringBuffer.append(TEXT_613);
d3267 1
a3267 1
    stringBuffer.append(TEXT_614);
d3275 1
a3275 1
    stringBuffer.append(TEXT_615);
d3277 1
a3277 1
    stringBuffer.append(TEXT_616);
d3279 1
a3279 1
    stringBuffer.append(TEXT_617);
d3284 1
a3284 1
    stringBuffer.append(TEXT_618);
d3286 1
a3286 1
    stringBuffer.append(TEXT_619);
d3288 1
a3288 1
    stringBuffer.append(TEXT_620);
d3290 1
a3290 1
    stringBuffer.append(TEXT_621);
d3299 1
a3299 1
    stringBuffer.append(TEXT_622);
d3303 1
a3303 1
    stringBuffer.append(TEXT_623);
d3305 1
a3305 1
    stringBuffer.append(TEXT_624);
d3311 1
a3311 1
    stringBuffer.append(TEXT_625);
d3313 1
a3313 1
    stringBuffer.append(TEXT_626);
d3315 1
a3315 1
    stringBuffer.append(TEXT_627);
d3319 1
a3319 1
    stringBuffer.append(TEXT_628);
d3323 1
a3323 1
    stringBuffer.append(TEXT_629);
d3325 1
a3325 1
    stringBuffer.append(TEXT_630);
d3327 1
a3327 1
    stringBuffer.append(TEXT_631);
d3332 2
a3333 2
    stringBuffer.append(TEXT_632);
    stringBuffer.append(TEXT_633);
d3335 1
a3335 1
    stringBuffer.append(TEXT_634);
d3345 1
a3345 1
    stringBuffer.append(TEXT_635);
d3347 1
a3347 1
    stringBuffer.append(TEXT_636);
d3349 1
a3349 1
    stringBuffer.append(TEXT_637);
d3351 1
a3351 1
    stringBuffer.append(TEXT_638);
d3353 1
a3353 1
    stringBuffer.append(TEXT_639);
d3364 1
a3364 1
    stringBuffer.append(TEXT_640);
d3366 1
a3366 1
    stringBuffer.append(TEXT_641);
d3368 1
a3368 1
    stringBuffer.append(TEXT_642);
d3370 1
a3370 1
    stringBuffer.append(TEXT_643);
d3374 1
a3374 1
    stringBuffer.append(TEXT_644);
d3378 1
a3378 1
    stringBuffer.append(TEXT_645);
d3380 1
a3380 1
    stringBuffer.append(TEXT_646);
d3384 1
a3384 1
    stringBuffer.append(TEXT_647);
d3388 1
a3388 1
    stringBuffer.append(TEXT_648);
d3390 2
a3391 2
    stringBuffer.append(TEXT_649);
    stringBuffer.append(TEXT_650);
d3395 1
a3395 1
    stringBuffer.append(TEXT_651);
d3397 1
a3397 1
    stringBuffer.append(TEXT_652);
d3401 1
a3401 1
    stringBuffer.append(TEXT_653);
d3403 1
a3403 1
    stringBuffer.append(TEXT_654);
d3405 1
a3405 1
    stringBuffer.append(TEXT_655);
d3423 1
a3423 1
    stringBuffer.append(TEXT_656);
d3425 1
a3425 1
    stringBuffer.append(TEXT_657);
d3427 1
a3427 1
    stringBuffer.append(TEXT_658);
d3429 1
a3429 1
    stringBuffer.append(TEXT_659);
d3431 1
a3431 1
    stringBuffer.append(TEXT_660);
d3440 1
a3440 1
    stringBuffer.append(TEXT_661);
d3442 1
a3442 1
    stringBuffer.append(TEXT_662);
d3444 1
a3444 1
    stringBuffer.append(TEXT_663);
d3446 1
a3446 1
    stringBuffer.append(TEXT_664);
d3450 1
a3450 1
    stringBuffer.append(TEXT_665);
d3452 1
a3452 1
    stringBuffer.append(TEXT_666);
d3454 1
a3454 1
    stringBuffer.append(TEXT_667);
d3458 1
a3458 1
    stringBuffer.append(TEXT_668);
d3460 1
a3460 1
    stringBuffer.append(TEXT_669);
d3465 1
a3465 1
    stringBuffer.append(TEXT_670);
d3472 1
a3472 1
    stringBuffer.append(TEXT_671);
d3474 1
a3474 1
    stringBuffer.append(TEXT_672);
d3478 1
a3478 1
    stringBuffer.append(TEXT_673);
d3480 1
a3480 1
    stringBuffer.append(TEXT_674);
d3484 1
a3484 1
    stringBuffer.append(TEXT_675);
d3486 1
a3486 1
    stringBuffer.append(TEXT_676);
d3490 1
a3490 1
    stringBuffer.append(TEXT_677);
d3494 1
a3494 1
    stringBuffer.append(TEXT_678);
d3500 1
a3500 1
    stringBuffer.append(TEXT_679);
d3505 1
a3505 1
    stringBuffer.append(TEXT_680);
d3510 1
a3510 1
    stringBuffer.append(TEXT_681);
d3514 1
a3514 1
    stringBuffer.append(TEXT_682);
d3516 1
a3516 1
    stringBuffer.append(TEXT_683);
d3518 1
a3518 1
    stringBuffer.append(TEXT_684);
d3520 1
a3520 1
    stringBuffer.append(TEXT_685);
d3522 1
a3522 1
    stringBuffer.append(TEXT_686);
d3524 1
a3524 1
    stringBuffer.append(TEXT_687);
d3526 1
a3526 1
    stringBuffer.append(TEXT_688);
d3528 1
a3528 1
    stringBuffer.append(TEXT_689);
d3530 1
a3530 1
    stringBuffer.append(TEXT_690);
d3532 1
a3532 1
    stringBuffer.append(TEXT_691);
d3534 1
a3534 1
    stringBuffer.append(TEXT_692);
d3536 1
a3536 1
    stringBuffer.append(TEXT_693);
d3540 1
a3540 1
    stringBuffer.append(TEXT_694);
d3544 1
a3544 1
    stringBuffer.append(TEXT_695);
d3546 1
a3546 1
    stringBuffer.append(TEXT_696);
d3548 1
a3548 1
    stringBuffer.append(TEXT_697);
d3550 1
a3550 1
    stringBuffer.append(TEXT_698);
d3552 1
a3552 1
    stringBuffer.append(TEXT_699);
d3554 1
a3554 1
    stringBuffer.append(TEXT_700);
d3556 1
a3556 1
    stringBuffer.append(TEXT_701);
d3558 1
a3558 1
    stringBuffer.append(TEXT_702);
d3560 1
a3560 1
    stringBuffer.append(TEXT_703);
d3573 1
a3573 1
    stringBuffer.append(TEXT_704);
d3575 1
a3575 1
    stringBuffer.append(TEXT_705);
d3577 1
a3577 1
    stringBuffer.append(TEXT_706);
d3579 1
a3579 1
    stringBuffer.append(TEXT_707);
d3584 1
a3584 1
    stringBuffer.append(TEXT_708);
d3586 1
a3586 1
    stringBuffer.append(TEXT_709);
d3588 1
a3588 1
    stringBuffer.append(TEXT_710);
d3590 1
a3590 1
    stringBuffer.append(TEXT_711);
d3592 1
a3592 1
    stringBuffer.append(TEXT_712);
d3594 1
a3594 1
    stringBuffer.append(TEXT_713);
d3596 1
a3596 1
    stringBuffer.append(TEXT_714);
d3598 1
a3598 1
    stringBuffer.append(TEXT_715);
d3600 1
a3600 1
    stringBuffer.append(TEXT_716);
d3602 1
a3602 1
    stringBuffer.append(TEXT_717);
d3606 1
a3606 1
    stringBuffer.append(TEXT_718);
d3608 1
a3608 1
    stringBuffer.append(TEXT_719);
d3621 1
a3621 1
    stringBuffer.append(TEXT_720);
d3635 1
a3635 1
    stringBuffer.append(TEXT_721);
d3637 1
a3637 1
    stringBuffer.append(TEXT_722);
d3639 1
a3639 1
    stringBuffer.append(TEXT_723);
d3641 1
a3641 1
    stringBuffer.append(TEXT_724);
d3643 1
a3643 1
    stringBuffer.append(TEXT_725);
d3647 1
a3647 1
    stringBuffer.append(TEXT_726);
d3649 1
a3649 1
    stringBuffer.append(TEXT_727);
d3651 1
a3651 1
    stringBuffer.append(TEXT_728);
d3653 1
a3653 1
    stringBuffer.append(TEXT_729);
d3660 1
a3660 1
    stringBuffer.append(TEXT_730);
d3674 1
a3674 1
    stringBuffer.append(TEXT_731);
d3676 1
a3676 1
    stringBuffer.append(TEXT_732);
d3678 1
a3678 1
    stringBuffer.append(TEXT_733);
d3680 1
a3680 1
    stringBuffer.append(TEXT_734);
d3682 1
a3682 1
    stringBuffer.append(TEXT_735);
d3686 1
a3686 1
    stringBuffer.append(TEXT_736);
d3688 1
a3688 1
    stringBuffer.append(TEXT_737);
d3690 1
a3690 1
    stringBuffer.append(TEXT_738);
d3692 1
a3692 1
    stringBuffer.append(TEXT_739);
d3699 1
a3699 1
    stringBuffer.append(TEXT_740);
d3713 1
a3713 1
    stringBuffer.append(TEXT_741);
d3715 1
a3715 1
    stringBuffer.append(TEXT_742);
d3717 1
a3717 1
    stringBuffer.append(TEXT_743);
d3719 1
a3719 1
    stringBuffer.append(TEXT_744);
d3721 1
a3721 1
    stringBuffer.append(TEXT_745);
d3725 1
a3725 1
    stringBuffer.append(TEXT_746);
d3727 1
a3727 1
    stringBuffer.append(TEXT_747);
d3729 1
a3729 1
    stringBuffer.append(TEXT_748);
d3731 1
a3731 1
    stringBuffer.append(TEXT_749);
d3741 1
a3741 1
    stringBuffer.append(TEXT_750);
d3755 1
a3755 1
    stringBuffer.append(TEXT_751);
d3757 1
a3757 1
    stringBuffer.append(TEXT_752);
d3759 1
a3759 1
    stringBuffer.append(TEXT_753);
d3761 1
a3761 1
    stringBuffer.append(TEXT_754);
d3763 1
a3763 1
    stringBuffer.append(TEXT_755);
d3767 1
a3767 1
    stringBuffer.append(TEXT_756);
d3769 1
a3769 1
    stringBuffer.append(TEXT_757);
d3771 1
a3771 1
    stringBuffer.append(TEXT_758);
d3773 1
a3773 1
    stringBuffer.append(TEXT_759);
d3782 1
a3782 1
    stringBuffer.append(TEXT_760);
d3787 1
a3787 1
    stringBuffer.append(TEXT_761);
d3789 1
a3789 1
    stringBuffer.append(TEXT_762);
d3796 1
a3796 1
    stringBuffer.append(TEXT_763);
d3801 1
a3801 1
    stringBuffer.append(TEXT_764);
d3803 1
a3803 1
    stringBuffer.append(TEXT_765);
d3809 1
a3809 1
    stringBuffer.append(TEXT_766);
d3811 1
a3811 1
    stringBuffer.append(TEXT_767);
d3813 1
a3813 1
    stringBuffer.append(TEXT_768);
d3818 1
a3818 1
    stringBuffer.append(TEXT_769);
d3820 1
a3820 1
    stringBuffer.append(TEXT_770);
d3822 1
a3822 1
    stringBuffer.append(TEXT_771);
d3824 1
a3824 1
    stringBuffer.append(TEXT_772);
d3826 1
a3826 1
    stringBuffer.append(TEXT_773);
d3833 2
a3834 2
    stringBuffer.append(TEXT_774);
    stringBuffer.append(TEXT_775);
d3836 1
a3836 1
    stringBuffer.append(TEXT_776);
d3838 1
a3838 1
    stringBuffer.append(TEXT_777);
d3840 1
a3840 1
    stringBuffer.append(TEXT_778);
d3849 1
a3849 1
    stringBuffer.append(TEXT_779);
d3851 1
a3851 1
    stringBuffer.append(TEXT_780);
d3853 1
a3853 1
    stringBuffer.append(TEXT_781);
d3855 1
a3855 1
    stringBuffer.append(TEXT_782);
d3861 1
a3861 1
    stringBuffer.append(TEXT_783);
d3863 1
a3863 1
    stringBuffer.append(TEXT_784);
d3865 1
a3865 1
    stringBuffer.append(TEXT_785);
d3869 1
a3869 1
    stringBuffer.append(TEXT_786);
d3871 1
a3871 1
    stringBuffer.append(TEXT_787);
d3873 1
a3873 1
    stringBuffer.append(TEXT_788);
d3877 1
a3877 1
    stringBuffer.append(TEXT_789);
d3879 1
a3879 1
    stringBuffer.append(TEXT_790);
d3885 2
a3886 2
    stringBuffer.append(TEXT_791);
    stringBuffer.append(TEXT_792);
d3888 1
a3888 1
    stringBuffer.append(TEXT_793);
d3890 1
a3890 1
    stringBuffer.append(TEXT_794);
d3913 1
a3913 1
    stringBuffer.append(TEXT_795);
d3915 1
a3915 1
    stringBuffer.append(TEXT_796);
d3917 1
a3917 1
    stringBuffer.append(TEXT_797);
d3919 1
a3919 1
    stringBuffer.append(TEXT_798);
d3924 1
a3924 1
    stringBuffer.append(TEXT_799);
d3933 1
a3933 1
    stringBuffer.append(TEXT_800);
d3935 1
a3935 1
    stringBuffer.append(TEXT_801);
d3937 1
a3937 1
    stringBuffer.append(TEXT_802);
d3939 1
a3939 1
    stringBuffer.append(TEXT_803);
d3943 1
a3943 1
    stringBuffer.append(TEXT_804);
d3945 1
a3945 1
    stringBuffer.append(TEXT_805);
d3947 1
a3947 1
    stringBuffer.append(TEXT_806);
d3951 1
a3951 1
    stringBuffer.append(TEXT_807);
d3953 1
a3953 1
    stringBuffer.append(TEXT_808);
d3958 1
a3958 1
    stringBuffer.append(TEXT_809);
d3966 1
a3966 1
    stringBuffer.append(TEXT_810);
d3968 1
a3968 1
    stringBuffer.append(TEXT_811);
d3972 1
a3972 1
    stringBuffer.append(TEXT_812);
d3974 1
a3974 1
    stringBuffer.append(TEXT_813);
d3979 1
a3979 1
    stringBuffer.append(TEXT_814);
d3981 1
a3981 1
    stringBuffer.append(TEXT_815);
d3983 1
a3983 1
    stringBuffer.append(TEXT_816);
d3985 1
a3985 1
    stringBuffer.append(TEXT_817);
d3989 1
a3989 1
    stringBuffer.append(TEXT_818);
d3991 1
a3991 1
    stringBuffer.append(TEXT_819);
d3993 1
a3993 1
    stringBuffer.append(TEXT_820);
d3998 1
a3998 1
    stringBuffer.append(TEXT_821);
d4000 1
a4000 1
    stringBuffer.append(TEXT_822);
d4002 1
a4002 1
    stringBuffer.append(TEXT_823);
d4004 1
a4004 1
    stringBuffer.append(TEXT_824);
d4008 1
a4008 1
    stringBuffer.append(TEXT_825);
d4010 1
a4010 1
    stringBuffer.append(TEXT_826);
d4012 1
a4012 1
    stringBuffer.append(TEXT_827);
d4016 1
a4016 1
    stringBuffer.append(TEXT_828);
d4018 1
a4018 1
    stringBuffer.append(TEXT_829);
d4022 1
a4022 1
    stringBuffer.append(TEXT_830);
d4026 1
a4026 1
    stringBuffer.append(TEXT_831);
d4034 1
a4034 1
    stringBuffer.append(TEXT_832);
d4039 1
a4039 1
    stringBuffer.append(TEXT_833);
d4049 1
a4049 1
    stringBuffer.append(TEXT_834);
d4051 1
a4051 1
    stringBuffer.append(TEXT_835);
d4053 1
a4053 1
    stringBuffer.append(TEXT_836);
d4055 1
a4055 1
    stringBuffer.append(TEXT_837);
d4059 1
a4059 1
    stringBuffer.append(TEXT_838);
d4061 1
a4061 1
    stringBuffer.append(TEXT_839);
d4063 1
a4063 1
    stringBuffer.append(TEXT_840);
d4067 1
a4067 1
    stringBuffer.append(TEXT_841);
d4072 1
a4072 1
    stringBuffer.append(TEXT_842);
d4074 1
a4074 1
    stringBuffer.append(TEXT_843);
d4076 1
a4076 1
    stringBuffer.append(TEXT_844);
d4080 1
a4080 1
    stringBuffer.append(TEXT_845);
d4084 1
a4084 1
    stringBuffer.append(TEXT_846);
d4089 1
a4089 1
    stringBuffer.append(TEXT_847);
d4093 1
a4093 1
    stringBuffer.append(TEXT_848);
d4095 1
a4095 1
    stringBuffer.append(TEXT_849);
d4097 1
a4097 1
    stringBuffer.append(TEXT_850);
d4099 1
a4099 1
    stringBuffer.append(TEXT_851);
d4101 1
a4101 1
    stringBuffer.append(TEXT_852);
d4103 1
a4103 1
    stringBuffer.append(TEXT_853);
d4105 1
a4105 1
    stringBuffer.append(TEXT_854);
d4107 1
a4107 1
    stringBuffer.append(TEXT_855);
d4109 1
a4109 1
    stringBuffer.append(TEXT_856);
d4113 1
a4113 1
    stringBuffer.append(TEXT_857);
d4115 1
a4115 1
    stringBuffer.append(TEXT_858);
d4117 1
a4117 1
    stringBuffer.append(TEXT_859);
d4122 1
a4122 1
    stringBuffer.append(TEXT_860);
d4124 1
a4124 1
    stringBuffer.append(TEXT_861);
d4126 1
a4126 1
    stringBuffer.append(TEXT_862);
d4131 1
a4131 1
    stringBuffer.append(TEXT_863);
d4133 1
a4133 1
    stringBuffer.append(TEXT_864);
d4137 1
a4137 1
    stringBuffer.append(TEXT_865);
d4141 1
a4141 1
    stringBuffer.append(TEXT_866);
d4145 1
a4145 1
    stringBuffer.append(TEXT_867);
d4152 1
a4152 1
    stringBuffer.append(TEXT_868);
d4156 1
a4156 1
    stringBuffer.append(TEXT_869);
d4158 1
a4158 1
    stringBuffer.append(TEXT_870);
d4160 1
a4160 1
    stringBuffer.append(TEXT_871);
d4165 1
a4165 1
    stringBuffer.append(TEXT_872);
d4167 1
a4167 1
    stringBuffer.append(TEXT_873);
d4171 1
a4171 1
    stringBuffer.append(TEXT_874);
d4175 1
a4175 1
    stringBuffer.append(TEXT_875);
d4177 1
a4177 1
    stringBuffer.append(TEXT_876);
d4179 1
a4179 1
    stringBuffer.append(TEXT_877);
d4181 1
a4181 1
    stringBuffer.append(TEXT_878);
d4183 1
a4183 1
    stringBuffer.append(TEXT_879);
d4185 1
a4185 1
    stringBuffer.append(TEXT_880);
d4187 1
a4187 1
    stringBuffer.append(TEXT_881);
d4189 1
a4189 1
    stringBuffer.append(TEXT_882);
d4191 1
a4191 1
    stringBuffer.append(TEXT_883);
d4193 1
a4193 1
    stringBuffer.append(TEXT_884);
d4195 1
a4195 1
    stringBuffer.append(TEXT_885);
d4197 1
a4197 1
    stringBuffer.append(TEXT_886);
d4204 3
a4206 3
    stringBuffer.append(TEXT_887);
    stringBuffer.append(TEXT_888);
    stringBuffer.append(TEXT_889);
d4208 1
a4208 1
    stringBuffer.append(TEXT_890);
d4210 3
a4212 3
    stringBuffer.append(TEXT_891);
    stringBuffer.append(TEXT_892);
    stringBuffer.append(TEXT_893);
d4214 1
a4214 1
    stringBuffer.append(TEXT_894);
d4216 1
a4216 1
    stringBuffer.append(TEXT_895);
d4218 1
a4218 1
    stringBuffer.append(TEXT_896);
d4222 1
a4222 1
    stringBuffer.append(TEXT_897);
d4230 1
a4230 1
    stringBuffer.append(TEXT_898);
d4234 1
a4234 1
    stringBuffer.append(TEXT_899);
d4236 1
a4236 1
    stringBuffer.append(TEXT_900);
d4238 1
a4238 1
    stringBuffer.append(TEXT_901);
d4240 1
a4240 1
    stringBuffer.append(TEXT_902);
d4242 1
a4242 1
    stringBuffer.append(TEXT_903);
d4244 1
a4244 1
    stringBuffer.append(TEXT_904);
d4246 1
a4246 1
    stringBuffer.append(TEXT_905);
d4248 1
a4248 1
    stringBuffer.append(TEXT_906);
d4250 1
a4250 1
    stringBuffer.append(TEXT_907);
d4252 1
a4252 1
    stringBuffer.append(TEXT_908);
d4254 1
a4254 1
    stringBuffer.append(TEXT_909);
d4256 1
a4256 1
    stringBuffer.append(TEXT_910);
d4260 1
a4260 1
    stringBuffer.append(TEXT_911);
d4264 1
a4264 1
    stringBuffer.append(TEXT_912);
d4266 1
a4266 1
    stringBuffer.append(TEXT_913);
d4270 3
a4272 3
    stringBuffer.append(TEXT_914);
    stringBuffer.append(TEXT_915);
    stringBuffer.append(TEXT_916);
d4274 1
a4274 1
    stringBuffer.append(TEXT_917);
d4276 1
a4276 1
    stringBuffer.append(TEXT_918);
d4278 1
a4278 1
    stringBuffer.append(TEXT_919);
d4280 1
a4280 1
    stringBuffer.append(TEXT_920);
d4282 1
a4282 1
    stringBuffer.append(TEXT_921);
d4284 1
a4284 1
    stringBuffer.append(TEXT_922);
d4286 1
a4286 1
    stringBuffer.append(TEXT_923);
d4288 1
a4288 1
    stringBuffer.append(TEXT_924);
d4290 1
a4290 1
    stringBuffer.append(TEXT_925);
d4292 1
a4292 1
    stringBuffer.append(TEXT_926);
d4294 1
a4294 1
    stringBuffer.append(TEXT_927);
d4296 1
a4296 1
    stringBuffer.append(TEXT_928);
d4298 1
a4298 1
    stringBuffer.append(TEXT_929);
d4300 1
a4300 1
    stringBuffer.append(TEXT_930);
d4302 1
a4302 1
    stringBuffer.append(TEXT_931);
d4304 3
a4306 3
    stringBuffer.append(TEXT_932);
    stringBuffer.append(TEXT_933);
    stringBuffer.append(TEXT_934);
d4308 1
a4308 1
    stringBuffer.append(TEXT_935);
d4310 1
a4310 1
    stringBuffer.append(TEXT_936);
d4312 1
a4312 1
    stringBuffer.append(TEXT_937);
d4314 7
a4320 3
    stringBuffer.append(TEXT_938);
    stringBuffer.append(TEXT_939);
    stringBuffer.append(TEXT_940);
d4322 1
a4322 1
    stringBuffer.append(TEXT_941);
d4324 3
a4326 3
    stringBuffer.append(TEXT_942);
    stringBuffer.append(TEXT_943);
    stringBuffer.append(TEXT_944);
d4328 1
a4328 1
    stringBuffer.append(TEXT_945);
d4330 1
a4330 1
    stringBuffer.append(TEXT_946);
d4332 1
a4332 1
    stringBuffer.append(TEXT_947);
d4334 1
a4334 1
    stringBuffer.append(TEXT_948);
d4336 3
a4338 3
    stringBuffer.append(TEXT_949);
    stringBuffer.append(TEXT_950);
    stringBuffer.append(TEXT_951);
d4340 3
a4342 3
    stringBuffer.append(TEXT_952);
    stringBuffer.append(TEXT_953);
    stringBuffer.append(TEXT_954);
d4344 3
a4346 3
    stringBuffer.append(TEXT_955);
    stringBuffer.append(TEXT_956);
    stringBuffer.append(TEXT_957);
d4348 3
a4350 3
    stringBuffer.append(TEXT_958);
    stringBuffer.append(TEXT_959);
    stringBuffer.append(TEXT_960);
d4352 1
a4352 1
    stringBuffer.append(TEXT_961);
d4354 1
a4354 1
    stringBuffer.append(TEXT_962);
d4356 1
a4356 1
    stringBuffer.append(TEXT_963);
d4358 3
a4360 3
    stringBuffer.append(TEXT_964);
    stringBuffer.append(TEXT_965);
    stringBuffer.append(TEXT_966);
d4362 1
a4362 1
    stringBuffer.append(TEXT_967);
d4364 1
a4364 1
    stringBuffer.append(TEXT_968);
d4369 1
a4369 1
    stringBuffer.append(TEXT_969);
d4371 1
a4371 1
    stringBuffer.append(TEXT_970);
d4375 1
a4375 1
    stringBuffer.append(TEXT_971);
d4382 1
a4382 1
    stringBuffer.append(TEXT_972);
d4384 1
a4384 1
    stringBuffer.append(TEXT_973);
d4386 3
a4388 3
    stringBuffer.append(TEXT_974);
    stringBuffer.append(TEXT_975);
    stringBuffer.append(TEXT_976);
d4390 1
a4390 1
    stringBuffer.append(TEXT_977);
d4392 1
a4392 1
    stringBuffer.append(TEXT_978);
d4394 1
a4394 1
    stringBuffer.append(TEXT_979);
d4396 1
a4396 1
    stringBuffer.append(TEXT_980);
d4398 1
a4398 1
    stringBuffer.append(TEXT_981);
d4400 1
a4400 1
    stringBuffer.append(TEXT_982);
d4402 1
a4402 1
    stringBuffer.append(TEXT_983);
d4404 1
a4404 1
    stringBuffer.append(TEXT_984);
d4406 1
a4406 1
    stringBuffer.append(TEXT_985);
d4408 1
a4408 1
    stringBuffer.append(TEXT_986);
d4410 1
a4410 1
    stringBuffer.append(TEXT_987);
d4412 1
a4412 1
    stringBuffer.append(TEXT_988);
d4420 1
a4420 1
    stringBuffer.append(TEXT_989);
d4422 1
a4422 1
    stringBuffer.append(TEXT_990);
d4424 1
a4424 1
    stringBuffer.append(TEXT_991);
d4428 1
a4428 1
    stringBuffer.append(TEXT_992);
d4430 1
a4430 1
    stringBuffer.append(TEXT_993);
d4432 1
a4432 1
    stringBuffer.append(TEXT_994);
d4434 1
a4434 1
    stringBuffer.append(TEXT_995);
d4438 1
a4438 1
    stringBuffer.append(TEXT_996);
d4440 1
a4440 1
    stringBuffer.append(TEXT_997);
d4442 1
a4442 1
    stringBuffer.append(TEXT_998);
d4444 1
a4444 1
    stringBuffer.append(TEXT_999);
d4446 1
a4446 1
    stringBuffer.append(TEXT_1000);
d4453 1
a4453 1
    stringBuffer.append(TEXT_1001);
d4455 1
a4455 1
    stringBuffer.append(TEXT_1002);
d4457 1
a4457 1
    stringBuffer.append(TEXT_1003);
d4459 1
a4459 1
    stringBuffer.append(TEXT_1004);
d4463 1
a4463 1
    stringBuffer.append(TEXT_1005);
d4465 1
a4465 1
    stringBuffer.append(TEXT_1006);
d4467 1
a4467 1
    stringBuffer.append(TEXT_1007);
d4469 1
a4469 1
    stringBuffer.append(TEXT_1008);
d4471 1
a4471 1
    stringBuffer.append(TEXT_1009);
d4475 1
a4475 1
    stringBuffer.append(TEXT_1010);
d4480 1
a4480 1
    stringBuffer.append(TEXT_1011);
d4482 1
a4482 1
    stringBuffer.append(TEXT_1012);
d4484 1
a4484 1
    stringBuffer.append(TEXT_1013);
d4486 1
a4486 1
    stringBuffer.append(TEXT_1014);
d4490 1
a4490 1
    stringBuffer.append(TEXT_1015);
d4492 1
a4492 1
    stringBuffer.append(TEXT_1016);
d4494 1
a4494 1
    stringBuffer.append(TEXT_1017);
d4496 1
a4496 1
    stringBuffer.append(TEXT_1018);
d4498 1
a4498 1
    stringBuffer.append(TEXT_1019);
d4503 1
a4503 1
    stringBuffer.append(TEXT_1020);
d4514 2
a4515 2
    stringBuffer.append(TEXT_1021);
    stringBuffer.append(TEXT_1022);
d4517 1
a4517 1
    stringBuffer.append(TEXT_1023);
d4519 1
a4519 1
    stringBuffer.append(TEXT_1024);
d4521 3
a4523 3
    stringBuffer.append(TEXT_1025);
    stringBuffer.append(TEXT_1026);
    stringBuffer.append(TEXT_1027);
d4525 1
a4525 1
    stringBuffer.append(TEXT_1028);
d4527 1
a4527 1
    stringBuffer.append(TEXT_1029);
d4529 1
a4529 1
    stringBuffer.append(TEXT_1030);
d4531 1
a4531 1
    stringBuffer.append(TEXT_1031);
d4533 1
a4533 1
    stringBuffer.append(TEXT_1032);
d4535 1
a4535 1
    stringBuffer.append(TEXT_1033);
d4537 1
a4537 1
    stringBuffer.append(TEXT_1034);
d4539 1
a4539 1
    stringBuffer.append(TEXT_1035);
d4541 1
a4541 1
    stringBuffer.append(TEXT_1036);
d4543 1
a4543 1
    stringBuffer.append(TEXT_1037);
d4545 1
a4545 1
    stringBuffer.append(TEXT_1038);
d4551 1
a4551 1
    stringBuffer.append(TEXT_1039);
d4553 1
a4553 1
    stringBuffer.append(TEXT_1040);
d4555 1
a4555 1
    stringBuffer.append(TEXT_1041);
d4557 1
a4557 1
    stringBuffer.append(TEXT_1042);
d4559 1
a4559 1
    stringBuffer.append(TEXT_1043);
d4561 1
a4561 1
    stringBuffer.append(TEXT_1044);
d4563 1
a4563 1
    stringBuffer.append(TEXT_1045);
d4565 1
a4565 1
    stringBuffer.append(TEXT_1046);
d4567 1
a4567 1
    stringBuffer.append(TEXT_1047);
d4569 1
a4569 1
    stringBuffer.append(TEXT_1048);
d4571 1
a4571 1
    stringBuffer.append(TEXT_1049);
d4578 1
a4578 1
    stringBuffer.append(TEXT_1050);
d4581 1
a4581 1
    stringBuffer.append(TEXT_1051);
d4583 1
a4583 1
    stringBuffer.append(TEXT_1052);
d4585 1
a4585 1
    stringBuffer.append(TEXT_1053);
d4587 1
a4587 1
    stringBuffer.append(TEXT_1054);
d4589 1
a4589 1
    stringBuffer.append(TEXT_1055);
d4591 1
a4591 1
    stringBuffer.append(TEXT_1056);
d4593 1
a4593 1
    stringBuffer.append(TEXT_1057);
d4595 1
a4595 1
    stringBuffer.append(TEXT_1058);
d4599 1
a4599 1
    stringBuffer.append(TEXT_1059);
d4602 1
a4602 1
    stringBuffer.append(TEXT_1060);
d4604 1
a4604 1
    stringBuffer.append(TEXT_1061);
d4606 1
a4606 1
    stringBuffer.append(TEXT_1062);
d4608 1
a4608 1
    stringBuffer.append(TEXT_1063);
d4610 1
a4610 1
    stringBuffer.append(TEXT_1064);
d4612 1
a4612 1
    stringBuffer.append(TEXT_1065);
d4616 1
a4616 1
    stringBuffer.append(TEXT_1066);
d4618 1
a4618 1
    stringBuffer.append(TEXT_1067);
d4625 1
a4625 1
    stringBuffer.append(TEXT_1068);
d4629 1
a4629 1
    stringBuffer.append(TEXT_1069);
d4633 1
a4633 1
    stringBuffer.append(TEXT_1070);
d4637 2
a4638 2
    stringBuffer.append(TEXT_1071);
    stringBuffer.append(TEXT_1072);
d4640 1
a4640 1
    stringBuffer.append(TEXT_1073);
d4642 1
a4642 1
    stringBuffer.append(TEXT_1074);
d4644 1
a4644 1
    stringBuffer.append(TEXT_1075);
d4646 1
a4646 1
    stringBuffer.append(TEXT_1076);
d4648 1
a4648 1
    stringBuffer.append(TEXT_1077);
d4650 1
a4650 1
    stringBuffer.append(TEXT_1078);
d4652 1
a4652 1
    stringBuffer.append(TEXT_1079);
d4654 1
a4654 1
    stringBuffer.append(TEXT_1080);
d4656 1
a4656 1
    stringBuffer.append(TEXT_1081);
d4658 1
a4658 1
    stringBuffer.append(TEXT_1082);
d4660 1
a4660 1
    stringBuffer.append(TEXT_1083);
d4664 3
a4666 3
    stringBuffer.append(TEXT_1084);
    stringBuffer.append(TEXT_1085);
    stringBuffer.append(TEXT_1086);
d4668 1
a4668 1
    stringBuffer.append(TEXT_1087);
d4670 1
a4670 1
    stringBuffer.append(TEXT_1088);
d4674 1
a4674 1
    stringBuffer.append(TEXT_1089);
d4676 1
a4676 1
    stringBuffer.append(TEXT_1090);
d4678 1
a4678 1
    stringBuffer.append(TEXT_1091);
d4680 1
a4680 1
    stringBuffer.append(TEXT_1092);
d4682 1
a4682 1
    stringBuffer.append(TEXT_1093);
d4684 1
a4684 1
    stringBuffer.append(TEXT_1094);
d4686 1
a4686 1
    stringBuffer.append(TEXT_1095);
d4688 1
a4688 1
    stringBuffer.append(TEXT_1096);
d4690 1
a4690 1
    stringBuffer.append(TEXT_1097);
d4692 1
a4692 1
    stringBuffer.append(TEXT_1098);
d4696 1
a4696 1
    stringBuffer.append(TEXT_1099);
d4705 1
a4705 1
    stringBuffer.append(TEXT_1100);
d4707 1
a4707 1
    stringBuffer.append(TEXT_1101);
d4709 1
a4709 1
    stringBuffer.append(TEXT_1102);
d4720 1
a4720 1
    stringBuffer.append(TEXT_1103);
d4722 1
a4722 1
    stringBuffer.append(TEXT_1104);
d4724 1
a4724 1
    stringBuffer.append(TEXT_1105);
d4732 1
a4732 1
    stringBuffer.append(TEXT_1106);
d4734 1
a4734 1
    stringBuffer.append(TEXT_1107);
d4736 1
a4736 1
    stringBuffer.append(TEXT_1108);
d4738 1
a4738 1
    stringBuffer.append(TEXT_1109);
d4740 1
a4740 1
    stringBuffer.append(TEXT_1110);
d4742 1
a4742 1
    stringBuffer.append(TEXT_1111);
d4744 7
a4750 1
    stringBuffer.append(TEXT_1112);
d4752 1
a4752 1
    stringBuffer.append(TEXT_1113);
d4757 1
a4757 1
    stringBuffer.append(TEXT_1114);
d4759 1
a4759 1
    stringBuffer.append(TEXT_1115);
d4767 1
a4767 1
    stringBuffer.append(TEXT_1116);
d4769 1
a4769 1
    stringBuffer.append(TEXT_1117);
d4773 1
a4773 1
    stringBuffer.append(TEXT_1118);
d4775 1
a4775 1
    stringBuffer.append(TEXT_1119);
@


1.33
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d76 381
a456 381
  protected final String TEXT_55 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_56 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_57 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_58 = " editingDomain) {";
  protected final String TEXT_59 = NL + "\t\t\t\t";
  protected final String TEXT_60 = " result = new ";
  protected final String TEXT_61 = "();";
  protected final String TEXT_62 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_63 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_64 = ".eINSTANCE.get";
  protected final String TEXT_65 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_66 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_67 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_68 = ".eINSTANCE.get";
  protected final String TEXT_69 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_70 = ".UNSET_VALUE));";
  protected final String TEXT_71 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_72 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_73 = ".eINSTANCE.get";
  protected final String TEXT_74 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_75 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_76 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_77 = ".eINSTANCE.get";
  protected final String TEXT_78 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_79 = ".UNSET_VALUE));";
  protected final String TEXT_80 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_81 = NL + "\t\t\t\treturn ";
  protected final String TEXT_82 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_83 = ".eINSTANCE.get";
  protected final String TEXT_84 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_85 = NL + "\t\t\t\treturn ";
  protected final String TEXT_86 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_87 = ".eINSTANCE.get";
  protected final String TEXT_88 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_89 = ".UNSET_VALUE);";
  protected final String TEXT_90 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_91 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_92 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_93 = "() {";
  protected final String TEXT_94 = NL;
  protected final String TEXT_95 = NL + "protected Command createAddCommand(final ";
  protected final String TEXT_96 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_97 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_98 = " childNode = (";
  protected final String TEXT_99 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_100 = " editingDomain = ";
  protected final String TEXT_101 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_102 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_103 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int visualID = ";
  protected final String TEXT_104 = ".getVisualID(childNode);" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_105 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_106 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_107 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_108 = NL + "\t\t\tcase ";
  protected final String TEXT_109 = ".VISUAL_ID:" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\t";
  protected final String TEXT_110 = " result = new ";
  protected final String TEXT_111 = "();" + NL + "\t\t\t\t\t";
  protected final String TEXT_112 = " element = childNode.getElement();";
  protected final String TEXT_113 = NL + "\t\t\t\t\tswitch (visualID) {";
  protected final String TEXT_114 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_115 = ".VISUAL_ID:";
  protected final String TEXT_116 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_117 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_118 = ".eINSTANCE.get";
  protected final String TEXT_119 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_120 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_121 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_122 = ".eINSTANCE.get";
  protected final String TEXT_123 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_124 = ".UNSET_VALUE));";
  protected final String TEXT_125 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_126 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_127 = ".eINSTANCE.get";
  protected final String TEXT_128 = "()," + NL + "\t\t\t\t\t\telement));";
  protected final String TEXT_129 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_130 = ".create(" + NL + "\t\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\t\telement.eContainer(), ";
  protected final String TEXT_131 = ".eINSTANCE.get";
  protected final String TEXT_132 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_133 = ".UNSET_VALUE));";
  protected final String TEXT_134 = NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_135 = NL + "\t\t\t\t\t}\t";
  protected final String TEXT_136 = NL;
  protected final String TEXT_137 = NL + "\t\tif (";
  protected final String TEXT_138 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_139 = NL + "\t\t}";
  protected final String TEXT_140 = NL + "\t\tif (";
  protected final String TEXT_141 = ".size() >= ";
  protected final String TEXT_142 = ".eINSTANCE.get";
  protected final String TEXT_143 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_144 = NL + "\t\t}";
  protected final String TEXT_145 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_146 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_147 = ".getElement(), ";
  protected final String TEXT_148 = ".eINSTANCE.get";
  protected final String TEXT_149 = "(), element));";
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = NL + "\t\tif (";
  protected final String TEXT_152 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_153 = NL + "\t\t}";
  protected final String TEXT_154 = NL + "\t\tif (";
  protected final String TEXT_155 = ".size() >= ";
  protected final String TEXT_156 = ".eINSTANCE.get";
  protected final String TEXT_157 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_158 = NL + "\t\t}";
  protected final String TEXT_159 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_160 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_161 = ".getElement(), ";
  protected final String TEXT_162 = ".eINSTANCE.get";
  protected final String TEXT_163 = "(), element));";
  protected final String TEXT_164 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_165 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_166 = ".create(editingDomain, ";
  protected final String TEXT_167 = ", ";
  protected final String TEXT_168 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_169 = "(childNode, ";
  protected final String TEXT_170 = "null";
  protected final String TEXT_171 = "(";
  protected final String TEXT_172 = ") constraint";
  protected final String TEXT_173 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_174 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_175 = "(";
  protected final String TEXT_176 = ", element, ";
  protected final String TEXT_177 = "null";
  protected final String TEXT_178 = "((";
  protected final String TEXT_179 = ") constraint).getCopy().union(new ";
  protected final String TEXT_180 = "(";
  protected final String TEXT_181 = ", ";
  protected final String TEXT_182 = "))";
  protected final String TEXT_183 = ", ";
  protected final String TEXT_184 = ".INSTANCE));";
  protected final String TEXT_185 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_186 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_187 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_188 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_189 = NL;
  protected final String TEXT_190 = NL + "protected ";
  protected final String TEXT_191 = " getCloneCommand(";
  protected final String TEXT_192 = " request) {" + NL + "\t";
  protected final String TEXT_193 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_194 = " command = new ";
  protected final String TEXT_195 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_196 = " childPart;" + NL + "\t";
  protected final String TEXT_197 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_198 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_199 = " createCloneCommand(final ";
  protected final String TEXT_200 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_201 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_202 = " childNode = (";
  protected final String TEXT_203 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_204 = " editingDomain = ";
  protected final String TEXT_205 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_206 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_207 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_208 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_209 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_210 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_211 = NL + "\t\t\tcase ";
  protected final String TEXT_212 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_213 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_214 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_215 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_216 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_217 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (!super.prepare()) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_218 = NL;
  protected final String TEXT_219 = NL + "\t\tif (";
  protected final String TEXT_220 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_221 = NL + "\t\t}";
  protected final String TEXT_222 = NL + "\t\tif (";
  protected final String TEXT_223 = ".size() >= ";
  protected final String TEXT_224 = ".eINSTANCE.get";
  protected final String TEXT_225 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_226 = NL + "\t\t}";
  protected final String TEXT_227 = NL;
  protected final String TEXT_228 = NL + "\t\tif (";
  protected final String TEXT_229 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_230 = NL + "\t\t}";
  protected final String TEXT_231 = NL + "\t\tif (";
  protected final String TEXT_232 = ".size() >= ";
  protected final String TEXT_233 = ".eINSTANCE.get";
  protected final String TEXT_234 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_235 = NL + "\t\t}";
  protected final String TEXT_236 = NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_237 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_238 = " result = (";
  protected final String TEXT_239 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_240 = "();";
  protected final String TEXT_241 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_242 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_243 = ".getElement(), ";
  protected final String TEXT_244 = ".eINSTANCE.get";
  protected final String TEXT_245 = "(), result));";
  protected final String TEXT_246 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_247 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_248 = ".getElement(), ";
  protected final String TEXT_249 = ".eINSTANCE.get";
  protected final String TEXT_250 = "(), result));";
  protected final String TEXT_251 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_252 = "(";
  protected final String TEXT_253 = ", result, ";
  protected final String TEXT_254 = "null";
  protected final String TEXT_255 = "((";
  protected final String TEXT_256 = ") constraint).getCopy().union(new ";
  protected final String TEXT_257 = "(";
  protected final String TEXT_258 = ", ";
  protected final String TEXT_259 = "))";
  protected final String TEXT_260 = ", ";
  protected final String TEXT_261 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_262 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_263 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_264 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_265 = NL + "\t\t\tprotected ";
  protected final String TEXT_266 = " getCreateCommand(";
  protected final String TEXT_267 = " request) {";
  protected final String TEXT_268 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_269 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_270 = " requestEx = (";
  protected final String TEXT_271 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_272 = " result = new ";
  protected final String TEXT_273 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_274 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_275 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_276 = "Command((View) getModel(), requestEx";
  protected final String TEXT_277 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_278 = ")getConstraintFor(request)";
  protected final String TEXT_279 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_280 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_281 = "(";
  protected final String TEXT_282 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_283 = NL + "\t\t\t\treturn ";
  protected final String TEXT_284 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_285 = NL + "\t\t\tprotected ";
  protected final String TEXT_286 = " createChangeConstraintCommand(final ";
  protected final String TEXT_287 = " request, final ";
  protected final String TEXT_288 = " child, Object constraint) {" + NL + "\t\t\t\tif (!isDirectChild(child)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_289 = ".INSTANCE;" + NL + "\t\t\t\t}";
  protected final String TEXT_290 = NL;
  protected final String TEXT_291 = "\t\t\t\tfinal ";
  protected final String TEXT_292 = " node = (";
  protected final String TEXT_293 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_294 = " emfCommand = new ";
  protected final String TEXT_295 = "(node, request, ((";
  protected final String TEXT_296 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_297 = "(";
  protected final String TEXT_298 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_299 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_300 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_301 = NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_302 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_303 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_304 = " createChangeConstraintCommand(";
  protected final String TEXT_305 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_306 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_307 = NL + "\t\t\tprotected ";
  protected final String TEXT_308 = " createChildEditPolicy(";
  protected final String TEXT_309 = " child) {";
  protected final String TEXT_310 = NL + "\t\t\t\tif (isDirectChild(child)) {" + NL + "\t\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t\t}";
  protected final String TEXT_311 = NL + "\t\t\t\treturn new ";
  protected final String TEXT_312 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_313 = " getTargetEditPart(";
  protected final String TEXT_314 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_315 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_316 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_317 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_318 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_319 = " getReconnectTargetCommand(";
  protected final String TEXT_320 = " request) {";
  protected final String TEXT_321 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_322 = ".INSTANCE;";
  protected final String TEXT_323 = NL + "\t\t\t\t";
  protected final String TEXT_324 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_325 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_326 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_327 = " edge = (";
  protected final String TEXT_328 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_329 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_330 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_331 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_332 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_333 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_334 = NL + "\t\t\t\tcase ";
  protected final String TEXT_335 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_336 = "TargetCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_337 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_338 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_339 = "(";
  protected final String TEXT_340 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_341 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_342 = " getReconnectSourceCommand(";
  protected final String TEXT_343 = " request) {";
  protected final String TEXT_344 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_345 = ".INSTANCE;";
  protected final String TEXT_346 = NL + "\t\t\t\t";
  protected final String TEXT_347 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_348 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_349 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_350 = " edge = (";
  protected final String TEXT_351 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_352 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_353 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_354 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_355 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_356 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_357 = NL + "\t\t\t\tcase ";
  protected final String TEXT_358 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_359 = "SourceCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_360 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_361 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_362 = "(";
  protected final String TEXT_363 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_364 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_365 = " getConnectionCreateCommand(";
  protected final String TEXT_366 = " request) {";
  protected final String TEXT_367 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_368 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_369 = " requestEx = (";
  protected final String TEXT_370 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_371 = " result = new ";
  protected final String TEXT_372 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_373 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_374 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new Create";
  protected final String TEXT_375 = "StartCommand(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_376 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (!result.canExecute()) {" + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_377 = " wrappedResult = new ";
  protected final String TEXT_378 = "(";
  protected final String TEXT_379 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_380 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_381 = " getConnectionCompleteCommand(";
  protected final String TEXT_382 = " request) {";
  protected final String TEXT_383 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_384 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_385 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_386 = " requestEx = (";
  protected final String TEXT_387 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_388 = " result = new ";
  protected final String TEXT_389 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_390 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_391 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.appendIfCanExecute(new Create";
  protected final String TEXT_392 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_393 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_394 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_395 = "(";
  protected final String TEXT_396 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_397 = NL + "\t\t\t\treturn ";
  protected final String TEXT_398 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_399 = NL + "\t\t//This edit part understands the direct edit request and delegates it to the appropriate label, so no command is needed here." + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_400 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_401 = "() {" + NL + "\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_402 = " request) {" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_403 = " getDirectEditCommand(";
  protected final String TEXT_404 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_405 = NL;
  protected final String TEXT_406 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_407 = "\", new ";
  protected final String TEXT_408 = "()); //$NON-NLS-1$";
  protected final String TEXT_409 = NL;
  protected final String TEXT_410 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_411 = ".OPEN_ROLE";
  protected final String TEXT_412 = " + \"";
  protected final String TEXT_413 = "\" ";
  protected final String TEXT_414 = ", new ";
  protected final String TEXT_415 = "());";
  protected final String TEXT_416 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_417 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_418 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_419 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_420 = " invisibleRectangle = new ";
  protected final String TEXT_421 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_422 = "());" + NL + "\t\t";
  protected final String TEXT_423 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_424 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_425 = NL + NL + "\t\t";
  protected final String TEXT_426 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL;
  protected final String TEXT_427 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_428 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_429 = " result = new ";
  protected final String TEXT_430 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_431 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_432 = " createNodeShape() {";
  protected final String TEXT_433 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_434 = "()";
  protected final String TEXT_435 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
d458 188
a645 188
  protected final String TEXT_437 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_438 = ";";
  protected final String TEXT_439 = NL + "\t\t";
  protected final String TEXT_440 = " figure = new ";
  protected final String TEXT_441 = "();";
  protected final String TEXT_442 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_443 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_444 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_445 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_446 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_447 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_448 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_449 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_450 = " view = (";
  protected final String TEXT_451 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_452 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_453 = " decorationPane = new ";
  protected final String TEXT_454 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_455 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_456 = " imageFigure = new ";
  protected final String TEXT_457 = "(";
  protected final String TEXT_458 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_459 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_460 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_461 = " setupContentPane(";
  protected final String TEXT_462 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_463 = NL + "\t\t\t";
  protected final String TEXT_464 = " layout = new ";
  protected final String TEXT_465 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_466 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_467 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_468 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_469 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_470 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_471 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_472 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_473 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_474 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_475 = " childEditPart) {";
  protected final String TEXT_476 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_477 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_478 = ") childEditPart).";
  protected final String TEXT_479 = "(getPrimaryShape().";
  protected final String TEXT_480 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_481 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_482 = ") {" + NL + "\t\t\t";
  protected final String TEXT_483 = " pane = getPrimaryShape().";
  protected final String TEXT_484 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_485 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_486 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_487 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_488 = ") {" + NL + "\t\t\t";
  protected final String TEXT_489 = " pane = getPrimaryShape().";
  protected final String TEXT_490 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_491 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_492 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_493 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_494 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_495 = NL + "\t\tfor(";
  protected final String TEXT_496 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_497 = " nextChild = (";
  protected final String TEXT_498 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_499 = ".getVisualID(nextChild) == ";
  protected final String TEXT_500 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_501 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_502 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_503 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_504 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\t";
  protected final String TEXT_505 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_506 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_507 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_508 = NL;
  protected final String TEXT_509 = "if (";
  protected final String TEXT_510 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_511 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_512 = " getLabelEditPart(";
  protected final String TEXT_513 = " req) {" + NL + "\t\t";
  protected final String TEXT_514 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_515 = " view = (";
  protected final String TEXT_516 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_517 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_518 = NL + "\t\t\t\tcase ";
  protected final String TEXT_519 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_520 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_521 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_522 = " childEditPart) {";
  protected final String TEXT_523 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_524 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_525 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_526 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_527 = " root = (";
  protected final String TEXT_528 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_529 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_530 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_531 = " childEditPart) {";
  protected final String TEXT_532 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_533 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_534 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_535 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_536 = " childEditPart, int index) {";
  protected final String TEXT_537 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_538 = " labelFigure = ((";
  protected final String TEXT_539 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_540 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_541 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_542 = " childFigure = ((";
  protected final String TEXT_543 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_544 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_545 = " childEditPart) {";
  protected final String TEXT_546 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_547 = " labelFigure = ((";
  protected final String TEXT_548 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_549 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_550 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_551 = " childFigure = ((";
  protected final String TEXT_552 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_553 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_554 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_555 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_556 = " childEditPart = (";
  protected final String TEXT_557 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_558 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_559 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_560 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_561 = ";" + NL + "\t\t";
  protected final String TEXT_562 = " bounds = (";
  protected final String TEXT_563 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_564 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_565 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_566 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_567 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_568 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_569 = " getSourceConnectionAnchor(";
  protected final String TEXT_570 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_571 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_572 = " getSourceConnectionAnchor(";
  protected final String TEXT_573 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_574 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_575 = "  getTargetConnectionAnchor(";
  protected final String TEXT_576 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_577 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_578 = "  getTargetConnectionAnchor(";
  protected final String TEXT_579 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_580 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_581 = NL + "\t\tif (";
  protected final String TEXT_582 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_583 = "(this);" + NL + "\t\t}";
  protected final String TEXT_584 = NL + "\t\tif (";
  protected final String TEXT_585 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_586 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_587 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_588 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_589 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_590 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_591 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_592 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_593 = NL;
  protected final String TEXT_594 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_595 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_596 = " domainModelEditDomain = ";
  protected final String TEXT_597 = ".getEditingDomain(";
  protected final String TEXT_598 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_599 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_600 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_601 = " {";
  protected final String TEXT_602 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_603 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_604 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_605 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_606 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_607 = " createFilter() {";
  protected final String TEXT_608 = NL + "\t\t\t";
  protected final String TEXT_609 = " filter = ";
  protected final String TEXT_610 = ".createFeatureFilter(";
  protected final String TEXT_611 = ".eINSTANCE.get";
  protected final String TEXT_612 = "());";
  protected final String TEXT_613 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_614 = ".createFeatureFilter(";
  protected final String TEXT_615 = ".eINSTANCE.get";
  protected final String TEXT_616 = "()));";
  protected final String TEXT_617 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_618 = ".createNotifierFilter(";
  protected final String TEXT_619 = ".getElement()));";
  protected final String TEXT_620 = NL + "\t\t\t";
  protected final String TEXT_621 = " filter = ";
  protected final String TEXT_622 = ".createNotifierFilter(";
  protected final String TEXT_623 = ".getElement());";
  protected final String TEXT_624 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
d647 86
a732 86
  protected final String TEXT_626 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_627 = NL + "\t\t\t";
  protected final String TEXT_628 = " filter = ";
  protected final String TEXT_629 = ".NOT_TOUCH;";
  protected final String TEXT_630 = NL + "\t\t\treturn filter;";
  protected final String TEXT_631 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_632 = " getCreateNotationalElementCommand(";
  protected final String TEXT_633 = " descriptor) {";
  protected final String TEXT_634 = NL;
  protected final String TEXT_635 = "\t\t\t";
  protected final String TEXT_636 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_637 = NL + "\t\t\tcase ";
  protected final String TEXT_638 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_639 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_640 = "(";
  protected final String TEXT_641 = ", domainElement, ";
  protected final String TEXT_642 = "new ";
  protected final String TEXT_643 = "(0, 0, ";
  protected final String TEXT_644 = ", ";
  protected final String TEXT_645 = ")";
  protected final String TEXT_646 = NL + "null";
  protected final String TEXT_647 = ", ";
  protected final String TEXT_648 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_649 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_650 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_651 = " getSemanticChildNodes() {";
  protected final String TEXT_652 = NL;
  protected final String TEXT_653 = NL + "\treturn ";
  protected final String TEXT_654 = ".EMPTY_LIST;";
  protected final String TEXT_655 = NL + "\t";
  protected final String TEXT_656 = " result = new ";
  protected final String TEXT_657 = "();";
  protected final String TEXT_658 = NL + "\t";
  protected final String TEXT_659 = " viewObject = ";
  protected final String TEXT_660 = ";" + NL + "\t";
  protected final String TEXT_661 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_662 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_663 = NL + "\tfor(";
  protected final String TEXT_664 = " it = ";
  protected final String TEXT_665 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_666 = ") it.next();";
  protected final String TEXT_667 = NL + "\tnextValue = (";
  protected final String TEXT_668 = ")";
  protected final String TEXT_669 = ";";
  protected final String TEXT_670 = NL + "\tnodeVID = ";
  protected final String TEXT_671 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_672 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_673 = NL + "\tcase ";
  protected final String TEXT_674 = ".VISUAL_ID: {";
  protected final String TEXT_675 = NL + "\tif (";
  protected final String TEXT_676 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_677 = NL + "\t\tresult.add(new ";
  protected final String TEXT_678 = "(nextValue, nodeVID));";
  protected final String TEXT_679 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_680 = NL + "\t\t}";
  protected final String TEXT_681 = NL + "\t}";
  protected final String TEXT_682 = NL + "\t}";
  protected final String TEXT_683 = NL + "\treturn result;";
  protected final String TEXT_684 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_685 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_686 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_687 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_688 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_689 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_690 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_691 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_692 = " domainModelEditDomain = ";
  protected final String TEXT_693 = ".getEditingDomain(";
  protected final String TEXT_694 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_695 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_696 = NL;
  protected final String TEXT_697 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_698 = " domainModelEditDomain = ";
  protected final String TEXT_699 = ".getEditingDomain(";
  protected final String TEXT_700 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_701 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_702 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_703 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_704 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_705 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_706 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_707 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_708 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_709 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_710 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_711 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
d734 1
a734 1
  protected final String TEXT_713 = ".SET).or(" + NL + "\t\t\t\t";
d736 1
a736 1
  protected final String TEXT_715 = ".UNSET).or(" + NL + "\t\t\t\t";
d738 49
a786 49
  protected final String TEXT_717 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_718 = ".createEventTypeFilter(";
  protected final String TEXT_719 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_720 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_721 = " createFilter() {";
  protected final String TEXT_722 = NL;
  protected final String TEXT_723 = NL + "\t\t\t";
  protected final String TEXT_724 = " filter = ";
  protected final String TEXT_725 = ".createFeatureFilter(";
  protected final String TEXT_726 = ".eINSTANCE.get";
  protected final String TEXT_727 = "());";
  protected final String TEXT_728 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_729 = ".createFeatureFilter(";
  protected final String TEXT_730 = ".eINSTANCE.get";
  protected final String TEXT_731 = "()));";
  protected final String TEXT_732 = NL;
  protected final String TEXT_733 = NL + "\t\t\t";
  protected final String TEXT_734 = " filter = ";
  protected final String TEXT_735 = ".createFeatureFilter(";
  protected final String TEXT_736 = ".eINSTANCE.get";
  protected final String TEXT_737 = "());";
  protected final String TEXT_738 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_739 = ".createFeatureFilter(";
  protected final String TEXT_740 = ".eINSTANCE.get";
  protected final String TEXT_741 = "()));";
  protected final String TEXT_742 = NL;
  protected final String TEXT_743 = NL + "\t\t\t";
  protected final String TEXT_744 = " filter = ";
  protected final String TEXT_745 = ".createFeatureFilter(";
  protected final String TEXT_746 = ".eINSTANCE.get";
  protected final String TEXT_747 = "());";
  protected final String TEXT_748 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_749 = ".createFeatureFilter(";
  protected final String TEXT_750 = ".eINSTANCE.get";
  protected final String TEXT_751 = "()));";
  protected final String TEXT_752 = NL;
  protected final String TEXT_753 = NL + "\t\t\t";
  protected final String TEXT_754 = " filter = ";
  protected final String TEXT_755 = ".createFeatureFilter(";
  protected final String TEXT_756 = ".eINSTANCE.get";
  protected final String TEXT_757 = "());";
  protected final String TEXT_758 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_759 = ".createFeatureFilter(";
  protected final String TEXT_760 = ".eINSTANCE.get";
  protected final String TEXT_761 = "()));";
  protected final String TEXT_762 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_763 = NL + "\t\t\t";
  protected final String TEXT_764 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_765 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
d788 66
a853 66
  protected final String TEXT_767 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_768 = NL + "\t\t\t";
  protected final String TEXT_769 = " filter = ";
  protected final String TEXT_770 = ".NOT_TOUCH;";
  protected final String TEXT_771 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_772 = " getCreateNotationalElementCommand(";
  protected final String TEXT_773 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_774 = " linkDescriptor = (";
  protected final String TEXT_775 = ") descriptor;";
  protected final String TEXT_776 = NL;
  protected final String TEXT_777 = "\t\t\t";
  protected final String TEXT_778 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_779 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_780 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_781 = NL + "\t\t\tcase ";
  protected final String TEXT_782 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_783 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_784 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_785 = NL + "\t\t\tcase ";
  protected final String TEXT_786 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_787 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_788 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_789 = "(";
  protected final String TEXT_790 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_791 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_792 = " getSemanticChildLinks() {";
  protected final String TEXT_793 = NL;
  protected final String TEXT_794 = "\t";
  protected final String TEXT_795 = " result = new ";
  protected final String TEXT_796 = "();";
  protected final String TEXT_797 = NL + "\t";
  protected final String TEXT_798 = " modelObject = ";
  protected final String TEXT_799 = ".getElement();" + NL + "\t";
  protected final String TEXT_800 = " nextValue;";
  protected final String TEXT_801 = NL + "\tint linkVID;";
  protected final String TEXT_802 = NL + "\tfor(";
  protected final String TEXT_803 = " it = ";
  protected final String TEXT_804 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_805 = ") it.next();";
  protected final String TEXT_806 = NL + "\tnextValue = (";
  protected final String TEXT_807 = ")";
  protected final String TEXT_808 = ";";
  protected final String TEXT_809 = NL + "\tlinkVID = ";
  protected final String TEXT_810 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_811 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_812 = NL + "\tcase ";
  protected final String TEXT_813 = ".VISUAL_ID: {";
  protected final String TEXT_814 = NL + "\tif (";
  protected final String TEXT_815 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_816 = NL + "\t\t";
  protected final String TEXT_817 = " source = (";
  protected final String TEXT_818 = ")";
  protected final String TEXT_819 = ";";
  protected final String TEXT_820 = NL + "\t\t";
  protected final String TEXT_821 = " source = ";
  protected final String TEXT_822 = ".getElement();";
  protected final String TEXT_823 = NL + "\t\t";
  protected final String TEXT_824 = " target = (";
  protected final String TEXT_825 = ")";
  protected final String TEXT_826 = ";";
  protected final String TEXT_827 = NL + "\t\t";
  protected final String TEXT_828 = " target = ";
  protected final String TEXT_829 = ".getElement();";
  protected final String TEXT_830 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_831 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_832 = NL + "\t\tbreak;" + NL + "\t}";
d855 183
a1037 183
  protected final String TEXT_834 = NL + "\t}";
  protected final String TEXT_835 = NL + "\t}";
  protected final String TEXT_836 = NL + "\tfor(";
  protected final String TEXT_837 = " it = ";
  protected final String TEXT_838 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_839 = ") it.next();";
  protected final String TEXT_840 = NL + "\tnextValue = (";
  protected final String TEXT_841 = ")";
  protected final String TEXT_842 = ";";
  protected final String TEXT_843 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_844 = NL + "\t\tresult.add(new ";
  protected final String TEXT_845 = "(modelObject, nextValue, null, ";
  protected final String TEXT_846 = ".VISUAL_ID));";
  protected final String TEXT_847 = NL + "\t}";
  protected final String TEXT_848 = NL + "\t}";
  protected final String TEXT_849 = NL + "\treturn result;";
  protected final String TEXT_850 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_851 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_852 = " result = new ";
  protected final String TEXT_853 = "();" + NL + "\t\t\t";
  protected final String TEXT_854 = " allLinks = ";
  protected final String TEXT_855 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_856 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_857 = " next = (";
  protected final String TEXT_858 = ") it.next();";
  protected final String TEXT_859 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_860 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_861 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_862 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_863 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_864 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_865 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_866 = ".VISUAL_ID:";
  protected final String TEXT_867 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_868 = NL + "\t\t\t\t} else {";
  protected final String TEXT_869 = NL + "\t\t\t\t}";
  protected final String TEXT_870 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_871 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_872 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_873 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_874 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_875 = ".VISUAL_ID:";
  protected final String TEXT_876 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_877 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_878 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_879 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_880 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_881 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_882 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_883 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_884 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_885 = " domainModelEditDomain = ";
  protected final String TEXT_886 = ".getEditingDomain(";
  protected final String TEXT_887 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_888 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_889 = NL;
  protected final String TEXT_890 = NL;
  protected final String TEXT_891 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_892 = " domainModelRefresher = new ";
  protected final String TEXT_893 = "(this);" + NL;
  protected final String TEXT_894 = NL;
  protected final String TEXT_895 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_896 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_897 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_898 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_899 = NL;
  protected final String TEXT_900 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_901 = NL + "\t\t";
  protected final String TEXT_902 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_903 = ") ";
  protected final String TEXT_904 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_905 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_906 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_907 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_908 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_909 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_910 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_911 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_912 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_913 = "\t" + NL + "\t}";
  protected final String TEXT_914 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_915 = " createdFont;";
  protected final String TEXT_916 = "\t" + NL;
  protected final String TEXT_917 = NL;
  protected final String TEXT_918 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_919 = " style = (";
  protected final String TEXT_920 = ")  ";
  protected final String TEXT_921 = ".getStyle(";
  protected final String TEXT_922 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_923 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_924 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_925 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_926 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_927 = " style = (";
  protected final String TEXT_928 = ")  ";
  protected final String TEXT_929 = ".getStyle(";
  protected final String TEXT_930 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_931 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_932 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_933 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_934 = " createdBackgroundColor;" + NL;
  protected final String TEXT_935 = NL;
  protected final String TEXT_936 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_937 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_938 = " feature, ";
  protected final String TEXT_939 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_940 = "();";
  protected final String TEXT_941 = NL;
  protected final String TEXT_942 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_943 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_944 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_945 = NL;
  protected final String TEXT_946 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_947 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_948 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_949 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_950 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_951 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_952 = NL;
  protected final String TEXT_953 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_954 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_955 = NL;
  protected final String TEXT_956 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_957 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_958 = NL;
  protected final String TEXT_959 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_960 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_961 = NL;
  protected final String TEXT_962 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_963 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_964 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_965 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_966 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_967 = NL;
  protected final String TEXT_968 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_969 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_970 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_971 = NL;
  protected final String TEXT_972 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_973 = "static ";
  protected final String TEXT_974 = "class Create";
  protected final String TEXT_975 = "Command extends ";
  protected final String TEXT_976 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_977 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_978 = "Command(";
  protected final String TEXT_979 = " parent, ";
  protected final String TEXT_980 = " request";
  protected final String TEXT_981 = ", ";
  protected final String TEXT_982 = " constraint";
  protected final String TEXT_983 = ") {" + NL + "\t\t\t";
  protected final String TEXT_984 = " domainModelEditDomain = ";
  protected final String TEXT_985 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_986 = NL + "\t\t\t";
  protected final String TEXT_987 = " createdDomainElement = ";
  protected final String TEXT_988 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_989 = ".eINSTANCE.get";
  protected final String TEXT_990 = "());";
  protected final String TEXT_991 = NL + "\t\t\t";
  protected final String TEXT_992 = " createdDomainElement = ";
  protected final String TEXT_993 = ".eINSTANCE.create";
  protected final String TEXT_994 = "();";
  protected final String TEXT_995 = NL + "\t\t\t";
  protected final String TEXT_996 = NL + "\t\t\t";
  protected final String TEXT_997 = ".";
  protected final String TEXT_998 = ".initializeElement(";
  protected final String TEXT_999 = "(";
  protected final String TEXT_1000 = ") ";
  protected final String TEXT_1001 = "createdDomainElement);";
  protected final String TEXT_1002 = NL;
  protected final String TEXT_1003 = NL + "\t\tif (";
  protected final String TEXT_1004 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1005 = NL + "\t\t}";
  protected final String TEXT_1006 = NL + "\t\tif (";
  protected final String TEXT_1007 = ".size() >= ";
  protected final String TEXT_1008 = ".eINSTANCE.get";
  protected final String TEXT_1009 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1010 = NL + "\t\t}";
  protected final String TEXT_1011 = NL;
  protected final String TEXT_1012 = NL + "\t\tif (";
  protected final String TEXT_1013 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1014 = NL + "\t\t}";
  protected final String TEXT_1015 = NL + "\t\tif (";
  protected final String TEXT_1016 = ".size() >= ";
d1039 102
a1140 734
  protected final String TEXT_1018 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1019 = NL + "\t\t}";
  protected final String TEXT_1020 = NL + "\t\t\t";
  protected final String TEXT_1021 = " compoundCommand = new ";
  protected final String TEXT_1022 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_1023 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1024 = ".eINSTANCE.get";
  protected final String TEXT_1025 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_1026 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1027 = ".eINSTANCE.get";
  protected final String TEXT_1028 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_1029 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_1030 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1031 = ".eINSTANCE.get";
  protected final String TEXT_1032 = "(), createdDomainElement);";
  protected final String TEXT_1033 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_1034 = "(";
  protected final String TEXT_1035 = ", ";
  protected final String TEXT_1036 = "));";
  protected final String TEXT_1037 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_1038 = "(parent, ";
  protected final String TEXT_1039 = "(";
  protected final String TEXT_1040 = ") ";
  protected final String TEXT_1041 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_1042 = "constraint";
  protected final String TEXT_1043 = "null";
  protected final String TEXT_1044 = ", ";
  protected final String TEXT_1045 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1046 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1047 = "SourceCommand extends ";
  protected final String TEXT_1048 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1049 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1050 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1051 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1052 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1053 = "SourceCommand(";
  protected final String TEXT_1054 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1055 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1056 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1057 = "SourceCommand(";
  protected final String TEXT_1058 = " edge, ";
  protected final String TEXT_1059 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1060 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1061 = " domainModelEditDomain = ";
  protected final String TEXT_1062 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1063 = " command = new ";
  protected final String TEXT_1064 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1065 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1066 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1067 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1068 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_1069 = NL + "\t\t\treturn false;";
  protected final String TEXT_1070 = NL + "\t\t\t";
  protected final String TEXT_1071 = " container = (";
  protected final String TEXT_1072 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_1073 = ".eINSTANCE.get";
  protected final String TEXT_1074 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1075 = NL;
  protected final String TEXT_1076 = NL + "\t\tif (";
  protected final String TEXT_1077 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1078 = NL + "\t\t}";
  protected final String TEXT_1079 = NL + "\t\tif (";
  protected final String TEXT_1080 = ".size() >= ";
  protected final String TEXT_1081 = ".eINSTANCE.get";
  protected final String TEXT_1082 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1083 = NL + "\t\t}";
  protected final String TEXT_1084 = NL;
  protected final String TEXT_1085 = NL + "\t\tif (";
  protected final String TEXT_1086 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1087 = NL + "\t\t}";
  protected final String TEXT_1088 = NL + "\t\tif (";
  protected final String TEXT_1089 = ".size() >= ";
  protected final String TEXT_1090 = ".eINSTANCE.get";
  protected final String TEXT_1091 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1092 = NL + "\t\t}";
  protected final String TEXT_1093 = NL;
  protected final String TEXT_1094 = NL + "\t\tif (";
  protected final String TEXT_1095 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1096 = NL + "\t\t}";
  protected final String TEXT_1097 = NL + "\t\tif (";
  protected final String TEXT_1098 = ".size() >= ";
  protected final String TEXT_1099 = ".eINSTANCE.get";
  protected final String TEXT_1100 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1101 = NL + "\t\t}";
  protected final String TEXT_1102 = NL;
  protected final String TEXT_1103 = NL + "\t\t\tif(!";
  protected final String TEXT_1104 = ".canCreateLink(";
  protected final String TEXT_1105 = ", ";
  protected final String TEXT_1106 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1107 = NL + "\t\t\treturn true;";
  protected final String TEXT_1108 = NL;
  protected final String TEXT_1109 = NL + "\t\tif (";
  protected final String TEXT_1110 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1111 = NL + "\t\t}";
  protected final String TEXT_1112 = NL + "\t\tif (";
  protected final String TEXT_1113 = ".size() >= ";
  protected final String TEXT_1114 = ".eINSTANCE.get";
  protected final String TEXT_1115 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1116 = NL + "\t\t}";
  protected final String TEXT_1117 = NL;
  protected final String TEXT_1118 = NL + "\t\t\tif(!";
  protected final String TEXT_1119 = ".canCreateLink(";
  protected final String TEXT_1120 = ", ";
  protected final String TEXT_1121 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1122 = NL + "\t\t\treturn true;";
  protected final String TEXT_1123 = NL + "\t\t\treturn false;";
  protected final String TEXT_1124 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1125 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1126 = " editingDomain = ";
  protected final String TEXT_1127 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1128 = " result = new ";
  protected final String TEXT_1129 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1130 = "(edge, newSource));";
  protected final String TEXT_1131 = NL + "\t\t\t";
  protected final String TEXT_1132 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_1133 = ".eINSTANCE.get";
  protected final String TEXT_1134 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_1135 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_1136 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_1137 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_1138 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1139 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1140 = ".eINSTANCE.get";
  protected final String TEXT_1141 = "(), edge.getElement()));";
  protected final String TEXT_1142 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1143 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1144 = ".eINSTANCE.get";
  protected final String TEXT_1145 = "(), ";
  protected final String TEXT_1146 = ".UNSET_VALUE));";
  protected final String TEXT_1147 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1148 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_1149 = ".eINSTANCE.get";
  protected final String TEXT_1150 = "(), edge.getElement()));";
  protected final String TEXT_1151 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1152 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1153 = ".eINSTANCE.get";
  protected final String TEXT_1154 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_1155 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1156 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1157 = ".eINSTANCE.get";
  protected final String TEXT_1158 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1159 = ".UNSET_VALUE));";
  protected final String TEXT_1160 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1161 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_1162 = ".eINSTANCE.get";
  protected final String TEXT_1163 = "(), edge.getElement()));";
  protected final String TEXT_1164 = NL + "\t\t\t}";
  protected final String TEXT_1165 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1166 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1167 = ".eINSTANCE.get";
  protected final String TEXT_1168 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1169 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1170 = ".eINSTANCE.get";
  protected final String TEXT_1171 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_1172 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1173 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1174 = ".eINSTANCE.get";
  protected final String TEXT_1175 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_1176 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1177 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_1178 = ".eINSTANCE.get";
  protected final String TEXT_1179 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1180 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_1181 = ".eINSTANCE.get";
  protected final String TEXT_1182 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_1183 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1184 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_1185 = ".eINSTANCE.get";
  protected final String TEXT_1186 = "(), ";
  protected final String TEXT_1187 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1188 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_1189 = ".eINSTANCE.get";
  protected final String TEXT_1190 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_1191 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_1192 = NL;
  protected final String TEXT_1193 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1194 = " getRelationshipContainer(";
  protected final String TEXT_1195 = " element, ";
  protected final String TEXT_1196 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1197 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1198 = NL;
  protected final String TEXT_1199 = NL + "\t\t\tprivate ";
  protected final String TEXT_1200 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1201 = " editingDomain) {";
  protected final String TEXT_1202 = NL + "\t\t\t\t";
  protected final String TEXT_1203 = " result = new ";
  protected final String TEXT_1204 = "();";
  protected final String TEXT_1205 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1206 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1207 = ".getElement().eContainer(), ";
  protected final String TEXT_1208 = ".eINSTANCE.get";
  protected final String TEXT_1209 = "(), ";
  protected final String TEXT_1210 = ".getElement()));";
  protected final String TEXT_1211 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1212 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1213 = ".getElement().eContainer(), ";
  protected final String TEXT_1214 = ".eINSTANCE.get";
  protected final String TEXT_1215 = "(), ";
  protected final String TEXT_1216 = ".UNSET_VALUE));";
  protected final String TEXT_1217 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1218 = ".INSTANCE;";
  protected final String TEXT_1219 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1220 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1221 = ".getElement().eContainer(), ";
  protected final String TEXT_1222 = ".eINSTANCE.get";
  protected final String TEXT_1223 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1224 = ".getElement()));";
  protected final String TEXT_1225 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1226 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1227 = ".getElement().eContainer(), ";
  protected final String TEXT_1228 = ".eINSTANCE.get";
  protected final String TEXT_1229 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1230 = ".UNSET_VALUE));";
  protected final String TEXT_1231 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1232 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1233 = ".getElement(), ";
  protected final String TEXT_1234 = ".eINSTANCE.get";
  protected final String TEXT_1235 = "(), ";
  protected final String TEXT_1236 = ".getSource().getElement()));";
  protected final String TEXT_1237 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1238 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1239 = ".getElement(), ";
  protected final String TEXT_1240 = ".eINSTANCE.get";
  protected final String TEXT_1241 = "(), ";
  protected final String TEXT_1242 = ".UNSET_VALUE));";
  protected final String TEXT_1243 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1244 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1245 = ".getElement(), ";
  protected final String TEXT_1246 = ".eINSTANCE.get";
  protected final String TEXT_1247 = "(), ";
  protected final String TEXT_1248 = ".getTarget().getElement()));";
  protected final String TEXT_1249 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1250 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1251 = ".getElement(), ";
  protected final String TEXT_1252 = ".eINSTANCE.get";
  protected final String TEXT_1253 = "(), ";
  protected final String TEXT_1254 = ".UNSET_VALUE));";
  protected final String TEXT_1255 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1256 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1257 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1258 = ".getSource().getElement(), ";
  protected final String TEXT_1259 = ".eINSTANCE.get";
  protected final String TEXT_1260 = "(), ";
  protected final String TEXT_1261 = ".getTarget().getElement());";
  protected final String TEXT_1262 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1263 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1264 = ".getSource().getElement(), ";
  protected final String TEXT_1265 = ".eINSTANCE.get";
  protected final String TEXT_1266 = "(), ";
  protected final String TEXT_1267 = ".UNSET_VALUE);";
  protected final String TEXT_1268 = NL + "\t\t\t}";
  protected final String TEXT_1269 = NL + "\t}" + NL;
  protected final String TEXT_1270 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1271 = "StartCommand extends ";
  protected final String TEXT_1272 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1273 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1274 = "StartCommand(";
  protected final String TEXT_1275 = " requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_1276 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1277 = NL + "\t\t\treturn false;";
  protected final String TEXT_1278 = NL + "\t\t\t";
  protected final String TEXT_1279 = " container = (";
  protected final String TEXT_1280 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1281 = ".eINSTANCE.get";
  protected final String TEXT_1282 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1283 = NL;
  protected final String TEXT_1284 = NL + "\t\tif (";
  protected final String TEXT_1285 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1286 = NL + "\t\t}";
  protected final String TEXT_1287 = NL + "\t\tif (";
  protected final String TEXT_1288 = ".size() >= ";
  protected final String TEXT_1289 = ".eINSTANCE.get";
  protected final String TEXT_1290 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1291 = NL + "\t\t}";
  protected final String TEXT_1292 = NL;
  protected final String TEXT_1293 = NL + "\t\tif (";
  protected final String TEXT_1294 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1295 = NL + "\t\t}";
  protected final String TEXT_1296 = NL + "\t\tif (";
  protected final String TEXT_1297 = ".size() >= ";
  protected final String TEXT_1298 = ".eINSTANCE.get";
  protected final String TEXT_1299 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1300 = NL + "\t\t}";
  protected final String TEXT_1301 = NL;
  protected final String TEXT_1302 = NL + "\t\tif (";
  protected final String TEXT_1303 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1304 = NL + "\t\t}";
  protected final String TEXT_1305 = NL + "\t\tif (";
  protected final String TEXT_1306 = ".size() >= ";
  protected final String TEXT_1307 = ".eINSTANCE.get";
  protected final String TEXT_1308 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1309 = NL + "\t\t}";
  protected final String TEXT_1310 = NL;
  protected final String TEXT_1311 = NL + "\t\t\tif(!";
  protected final String TEXT_1312 = ".canCreateLink(";
  protected final String TEXT_1313 = ", ";
  protected final String TEXT_1314 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1315 = NL + "\t\t\treturn true;";
  protected final String TEXT_1316 = NL;
  protected final String TEXT_1317 = NL + "\t\tif (";
  protected final String TEXT_1318 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1319 = NL + "\t\t}";
  protected final String TEXT_1320 = NL + "\t\tif (";
  protected final String TEXT_1321 = ".size() >= ";
  protected final String TEXT_1322 = ".eINSTANCE.get";
  protected final String TEXT_1323 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1324 = NL + "\t\t}";
  protected final String TEXT_1325 = NL;
  protected final String TEXT_1326 = NL + "\t\t\tif(!";
  protected final String TEXT_1327 = ".canCreateLink(";
  protected final String TEXT_1328 = ", ";
  protected final String TEXT_1329 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1330 = NL + "\t\t\treturn true;";
  protected final String TEXT_1331 = NL + "\t\t\treturn false;";
  protected final String TEXT_1332 = NL + "\t\t}";
  protected final String TEXT_1333 = NL;
  protected final String TEXT_1334 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1335 = " getRelationshipContainer(";
  protected final String TEXT_1336 = " element, ";
  protected final String TEXT_1337 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1338 = NL + NL + "\t}";
  protected final String TEXT_1339 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1340 = "TargetCommand extends ";
  protected final String TEXT_1341 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1342 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1343 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1344 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1345 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1346 = "TargetCommand(";
  protected final String TEXT_1347 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1348 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1349 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1350 = "TargetCommand(";
  protected final String TEXT_1351 = " edge, ";
  protected final String TEXT_1352 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1353 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1354 = " domainModelEditDomain = ";
  protected final String TEXT_1355 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1356 = " command = new ";
  protected final String TEXT_1357 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1358 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1359 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1360 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1361 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_1362 = NL;
  protected final String TEXT_1363 = NL + "\t\tif (";
  protected final String TEXT_1364 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1365 = NL + "\t\t}";
  protected final String TEXT_1366 = NL + "\t\tif (";
  protected final String TEXT_1367 = ".size() >= ";
  protected final String TEXT_1368 = ".eINSTANCE.get";
  protected final String TEXT_1369 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1370 = NL + "\t\t}";
  protected final String TEXT_1371 = NL;
  protected final String TEXT_1372 = NL + "\t\t\tif(!";
  protected final String TEXT_1373 = ".canCreateLink(";
  protected final String TEXT_1374 = ", ";
  protected final String TEXT_1375 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1376 = NL + "\t\t\treturn true;";
  protected final String TEXT_1377 = NL;
  protected final String TEXT_1378 = NL + "\t\tif (";
  protected final String TEXT_1379 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1380 = NL + "\t\t}";
  protected final String TEXT_1381 = NL + "\t\tif (";
  protected final String TEXT_1382 = ".size() >= ";
  protected final String TEXT_1383 = ".eINSTANCE.get";
  protected final String TEXT_1384 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1385 = NL + "\t\t}";
  protected final String TEXT_1386 = NL;
  protected final String TEXT_1387 = NL + "\t\t\tif(!";
  protected final String TEXT_1388 = ".canCreateLink(";
  protected final String TEXT_1389 = ", ";
  protected final String TEXT_1390 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1391 = NL + "\t\t\treturn true;";
  protected final String TEXT_1392 = NL + "\t\t\treturn false;";
  protected final String TEXT_1393 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1394 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1395 = " editingDomain = ";
  protected final String TEXT_1396 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1397 = " result = new ";
  protected final String TEXT_1398 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1399 = "(edge, newTarget));";
  protected final String TEXT_1400 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1401 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1402 = ".eINSTANCE.get";
  protected final String TEXT_1403 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1404 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1405 = ".eINSTANCE.get";
  protected final String TEXT_1406 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1407 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1408 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1409 = ".eINSTANCE.get";
  protected final String TEXT_1410 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1411 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1412 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1413 = ".eINSTANCE.get";
  protected final String TEXT_1414 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1415 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1416 = ".eINSTANCE.get";
  protected final String TEXT_1417 = "(), newTarget.getElement()));";
  protected final String TEXT_1418 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1419 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1420 = ".eINSTANCE.get";
  protected final String TEXT_1421 = "(), newTarget.getElement()));";
  protected final String TEXT_1422 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_1423 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1424 = NL;
  protected final String TEXT_1425 = NL + "\t\t\tprivate ";
  protected final String TEXT_1426 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1427 = " editingDomain) {";
  protected final String TEXT_1428 = NL + "\t\t\t\t";
  protected final String TEXT_1429 = " result = new ";
  protected final String TEXT_1430 = "();";
  protected final String TEXT_1431 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1432 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1433 = ".getElement().eContainer(), ";
  protected final String TEXT_1434 = ".eINSTANCE.get";
  protected final String TEXT_1435 = "(), ";
  protected final String TEXT_1436 = ".getElement()));";
  protected final String TEXT_1437 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1438 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1439 = ".getElement().eContainer(), ";
  protected final String TEXT_1440 = ".eINSTANCE.get";
  protected final String TEXT_1441 = "(), ";
  protected final String TEXT_1442 = ".UNSET_VALUE));";
  protected final String TEXT_1443 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1444 = ".INSTANCE;";
  protected final String TEXT_1445 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1446 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1447 = ".getElement().eContainer(), ";
  protected final String TEXT_1448 = ".eINSTANCE.get";
  protected final String TEXT_1449 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1450 = ".getElement()));";
  protected final String TEXT_1451 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1452 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1453 = ".getElement().eContainer(), ";
  protected final String TEXT_1454 = ".eINSTANCE.get";
  protected final String TEXT_1455 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1456 = ".UNSET_VALUE));";
  protected final String TEXT_1457 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1458 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1459 = ".getElement(), ";
  protected final String TEXT_1460 = ".eINSTANCE.get";
  protected final String TEXT_1461 = "(), ";
  protected final String TEXT_1462 = ".getSource().getElement()));";
  protected final String TEXT_1463 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1464 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1465 = ".getElement(), ";
  protected final String TEXT_1466 = ".eINSTANCE.get";
  protected final String TEXT_1467 = "(), ";
  protected final String TEXT_1468 = ".UNSET_VALUE));";
  protected final String TEXT_1469 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1470 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1471 = ".getElement(), ";
  protected final String TEXT_1472 = ".eINSTANCE.get";
  protected final String TEXT_1473 = "(), ";
  protected final String TEXT_1474 = ".getTarget().getElement()));";
  protected final String TEXT_1475 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1476 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1477 = ".getElement(), ";
  protected final String TEXT_1478 = ".eINSTANCE.get";
  protected final String TEXT_1479 = "(), ";
  protected final String TEXT_1480 = ".UNSET_VALUE));";
  protected final String TEXT_1481 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1482 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1483 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1484 = ".getSource().getElement(), ";
  protected final String TEXT_1485 = ".eINSTANCE.get";
  protected final String TEXT_1486 = "(), ";
  protected final String TEXT_1487 = ".getTarget().getElement());";
  protected final String TEXT_1488 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1489 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1490 = ".getSource().getElement(), ";
  protected final String TEXT_1491 = ".eINSTANCE.get";
  protected final String TEXT_1492 = "(), ";
  protected final String TEXT_1493 = ".UNSET_VALUE);";
  protected final String TEXT_1494 = NL + "\t\t\t}";
  protected final String TEXT_1495 = NL + "\t}" + NL;
  protected final String TEXT_1496 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1497 = "Command extends ";
  protected final String TEXT_1498 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1499 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1500 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1501 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1502 = "Command(";
  protected final String TEXT_1503 = " requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1504 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1505 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1506 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1507 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1508 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1509 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1510 = NL + "\t\t\t";
  protected final String TEXT_1511 = " createdDomainElement = ";
  protected final String TEXT_1512 = ".eINSTANCE.create";
  protected final String TEXT_1513 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1514 = "(";
  protected final String TEXT_1515 = ") ";
  protected final String TEXT_1516 = "createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1517 = NL + "\t\t\t";
  protected final String TEXT_1518 = ".";
  protected final String TEXT_1519 = ".initializeElement(";
  protected final String TEXT_1520 = "(";
  protected final String TEXT_1521 = ") ";
  protected final String TEXT_1522 = "createdDomainElement);";
  protected final String TEXT_1523 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1524 = NL + "\t\t\t";
  protected final String TEXT_1525 = ".INSTANCE.decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1526 = " domainModelEditDomain = ";
  protected final String TEXT_1527 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1528 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1529 = NL + "\t\t\t";
  protected final String TEXT_1530 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1531 = ".eINSTANCE.get";
  protected final String TEXT_1532 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1533 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1534 = ".eINSTANCE.get";
  protected final String TEXT_1535 = "(), createdDomainElement));";
  protected final String TEXT_1536 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1537 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1538 = ".eINSTANCE.get";
  protected final String TEXT_1539 = "(), createdDomainElement));";
  protected final String TEXT_1540 = NL;
  protected final String TEXT_1541 = NL + "\t\tif (";
  protected final String TEXT_1542 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1543 = NL + "\t\t}";
  protected final String TEXT_1544 = NL + "\t\tif (";
  protected final String TEXT_1545 = ".size() >= ";
  protected final String TEXT_1546 = ".eINSTANCE.get";
  protected final String TEXT_1547 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1548 = NL + "\t\t}";
  protected final String TEXT_1549 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1550 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1551 = ".eINSTANCE.get";
  protected final String TEXT_1552 = "(), source.getElement()));";
  protected final String TEXT_1553 = NL;
  protected final String TEXT_1554 = NL + "\t\tif (";
  protected final String TEXT_1555 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1556 = NL + "\t\t}";
  protected final String TEXT_1557 = NL + "\t\tif (";
  protected final String TEXT_1558 = ".size() >= ";
  protected final String TEXT_1559 = ".eINSTANCE.get";
  protected final String TEXT_1560 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1561 = NL + "\t\t}";
  protected final String TEXT_1562 = NL;
  protected final String TEXT_1563 = NL + "\t\tif (";
  protected final String TEXT_1564 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1565 = NL + "\t\t}";
  protected final String TEXT_1566 = NL + "\t\tif (";
  protected final String TEXT_1567 = ".size() >= ";
  protected final String TEXT_1568 = ".eINSTANCE.get";
  protected final String TEXT_1569 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1570 = NL + "\t\t}";
  protected final String TEXT_1571 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1572 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1573 = ".eINSTANCE.get";
  protected final String TEXT_1574 = "(), target.getElement()));";
  protected final String TEXT_1575 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1576 = NL;
  protected final String TEXT_1577 = NL + "\t\tif (";
  protected final String TEXT_1578 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1579 = NL + "\t\t}";
  protected final String TEXT_1580 = NL + "\t\tif (";
  protected final String TEXT_1581 = ".size() >= ";
  protected final String TEXT_1582 = ".eINSTANCE.get";
  protected final String TEXT_1583 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1584 = NL + "\t\t}";
  protected final String TEXT_1585 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1586 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1587 = ".eINSTANCE.get";
  protected final String TEXT_1588 = "(), target.getElement());";
  protected final String TEXT_1589 = NL + "\t\t}" + NL;
  protected final String TEXT_1590 = NL;
  protected final String TEXT_1591 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1592 = " getRelationshipContainer(";
  protected final String TEXT_1593 = " element, ";
  protected final String TEXT_1594 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1595 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1596 = NL;
  protected final String TEXT_1597 = NL + "\t\t\tif(!";
  protected final String TEXT_1598 = ".canCreateLink(";
  protected final String TEXT_1599 = ", ";
  protected final String TEXT_1600 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1601 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1602 = NL;
  protected final String TEXT_1603 = NL;
  protected final String TEXT_1604 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1605 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_1606 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_1607 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_1608 = NL;
  protected final String TEXT_1609 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1610 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_1611 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_1612 = " createDeleteCommand(";
  protected final String TEXT_1613 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_1614 = " editingDomain = ";
  protected final String TEXT_1615 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_1616 = " cc = new ";
  protected final String TEXT_1617 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_1618 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_1619 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_1620 = " editingDomain) {";
  protected final String TEXT_1621 = NL + "\t\t\t\t";
  protected final String TEXT_1622 = " result = new ";
  protected final String TEXT_1623 = "();";
  protected final String TEXT_1624 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1625 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1626 = ".eINSTANCE.get";
  protected final String TEXT_1627 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1628 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1629 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1630 = ".eINSTANCE.get";
  protected final String TEXT_1631 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1632 = ".UNSET_VALUE));";
  protected final String TEXT_1633 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1634 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1635 = ".eINSTANCE.get";
  protected final String TEXT_1636 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1637 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1638 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1639 = ".eINSTANCE.get";
  protected final String TEXT_1640 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1641 = ".UNSET_VALUE));";
  protected final String TEXT_1642 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1643 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1644 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1645 = ".eINSTANCE.get";
  protected final String TEXT_1646 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_1647 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1648 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1649 = ".eINSTANCE.get";
  protected final String TEXT_1650 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1651 = ".UNSET_VALUE);";
  protected final String TEXT_1652 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1653 = NL;
  protected final String TEXT_1654 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1655 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1656 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1657 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1658 = NL;
  protected final String TEXT_1659 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1660 = " getDirectEditCommand(";
  protected final String TEXT_1661 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1662 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1663 = "(";
  protected final String TEXT_1664 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1665 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1666 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1667 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1668 = " editingDomain = ";
  protected final String TEXT_1669 = ".getEditingDomain(";
  protected final String TEXT_1670 = ".getDiagram().getElement());";
  protected final String TEXT_1671 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1672 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1673 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1674 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1675 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1676 = " createDomainModelCommand(";
  protected final String TEXT_1677 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1678 = " element = ";
  protected final String TEXT_1679 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1680 = " result = new ";
  protected final String TEXT_1681 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1682 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1683 = " ";
  protected final String TEXT_1684 = "feature = (";
  protected final String TEXT_1685 = ") ";
  protected final String TEXT_1686 = ".eINSTANCE.get";
  protected final String TEXT_1687 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1688 = ".parseValue(feature, values[";
  protected final String TEXT_1689 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1690 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1691 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1692 = " ";
  protected final String TEXT_1693 = "values = new ";
  protected final String TEXT_1694 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1695 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1696 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1697 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1698 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1699 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1700 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1701 = NL + "\t\t\t\t});";
  protected final String TEXT_1702 = NL + "\t\t}" + NL;
  protected final String TEXT_1703 = NL;
  protected final String TEXT_1704 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1705 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1706 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1707 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1708 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1709 = "(this, ";
  protected final String TEXT_1710 = ".class, new ";
  protected final String TEXT_1711 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1712 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1713 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1714 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1715 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1716 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1717 = NL;
  protected final String TEXT_1718 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1719 = " domainModelRefresher = new ";
  protected final String TEXT_1720 = "(this);" + NL;
  protected final String TEXT_1721 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1722 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1723 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1724 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1725 = " nextChild = (";
  protected final String TEXT_1726 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1727 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1728 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1729 = ") ";
  protected final String TEXT_1730 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1731 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1732 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1733 = ".eINSTANCE.get";
  protected final String TEXT_1734 = "(), labelRefresher);";
  protected final String TEXT_1735 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1736 = ".eINSTANCE.get";
  protected final String TEXT_1737 = "(), labelRefresher);";
  protected final String TEXT_1738 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1739 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1740 = " result = new ";
  protected final String TEXT_1741 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1742 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1743 = " next = (";
  protected final String TEXT_1744 = ") it.next();" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1745 = ".getVisualID(next)) {";
  protected final String TEXT_1746 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1747 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1748 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1749 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1750 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1751 = NL;
d1494 1
a1494 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d1496 2
d1499 1
a1499 1
    stringBuffer.append(TEXT_57);
d1501 1
a1501 1
    stringBuffer.append(TEXT_58);
a1508 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1512 2
d1517 1
a1517 1
    stringBuffer.append(TEXT_62);
d1519 1
a1519 1
    stringBuffer.append(TEXT_63);
d1521 1
a1521 1
    stringBuffer.append(TEXT_64);
d1523 1
a1523 1
    stringBuffer.append(TEXT_65);
d1527 1
a1527 1
    stringBuffer.append(TEXT_66);
d1529 1
a1529 1
    stringBuffer.append(TEXT_67);
d1531 1
a1531 1
    stringBuffer.append(TEXT_68);
d1533 1
a1533 1
    stringBuffer.append(TEXT_69);
d1535 1
a1535 1
    stringBuffer.append(TEXT_70);
d1542 1
a1542 1
    stringBuffer.append(TEXT_71);
d1544 1
a1544 1
    stringBuffer.append(TEXT_72);
d1546 1
a1546 1
    stringBuffer.append(TEXT_73);
d1548 1
a1548 1
    stringBuffer.append(TEXT_74);
d1552 1
a1552 1
    stringBuffer.append(TEXT_75);
d1554 1
a1554 1
    stringBuffer.append(TEXT_76);
d1556 1
a1556 1
    stringBuffer.append(TEXT_77);
d1558 1
a1558 1
    stringBuffer.append(TEXT_78);
d1560 1
a1560 1
    stringBuffer.append(TEXT_79);
d1564 1
a1564 1
    stringBuffer.append(TEXT_80);
d1569 1
a1569 1
    stringBuffer.append(TEXT_81);
d1571 1
a1571 1
    stringBuffer.append(TEXT_82);
d1573 1
a1573 1
    stringBuffer.append(TEXT_83);
d1575 1
a1575 1
    stringBuffer.append(TEXT_84);
d1579 1
a1579 1
    stringBuffer.append(TEXT_85);
d1581 1
a1581 1
    stringBuffer.append(TEXT_86);
d1583 1
a1583 1
    stringBuffer.append(TEXT_87);
d1585 1
a1585 1
    stringBuffer.append(TEXT_88);
d1587 1
a1587 1
    stringBuffer.append(TEXT_89);
d1592 1
a1592 1
    stringBuffer.append(TEXT_90);
d1604 1
a1604 1
    stringBuffer.append(TEXT_91);
d1606 1
a1606 1
    stringBuffer.append(TEXT_92);
d1608 1
a1608 1
    stringBuffer.append(TEXT_93);
d1615 1
a1615 1
    stringBuffer.append(TEXT_94);
d1619 1
a1619 1
    stringBuffer.append(TEXT_95);
a1620 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1626 2
d1629 1
a1629 1
    stringBuffer.append(TEXT_100);
d1631 1
a1631 1
    stringBuffer.append(TEXT_101);
d1633 1
a1633 1
    stringBuffer.append(TEXT_102);
a1634 2
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1638 2
d1641 1
a1641 1
    stringBuffer.append(TEXT_106);
d1643 1
a1643 1
    stringBuffer.append(TEXT_107);
d1648 1
a1648 1
    stringBuffer.append(TEXT_108);
a1649 2
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1653 2
d1656 1
a1656 1
    stringBuffer.append(TEXT_112);
d1662 1
a1662 1
    stringBuffer.append(TEXT_113);
d1671 1
a1671 1
    stringBuffer.append(TEXT_114);
d1673 1
a1673 1
    stringBuffer.append(TEXT_115);
d1679 1
a1679 1
    stringBuffer.append(TEXT_116);
d1681 1
a1681 1
    stringBuffer.append(TEXT_117);
d1683 1
a1683 1
    stringBuffer.append(TEXT_118);
d1685 1
a1685 1
    stringBuffer.append(TEXT_119);
d1689 1
a1689 1
    stringBuffer.append(TEXT_120);
d1691 1
a1691 1
    stringBuffer.append(TEXT_121);
d1693 1
a1693 1
    stringBuffer.append(TEXT_122);
d1695 1
a1695 1
    stringBuffer.append(TEXT_123);
d1697 1
a1697 1
    stringBuffer.append(TEXT_124);
d1703 1
a1703 1
    stringBuffer.append(TEXT_125);
d1705 1
a1705 1
    stringBuffer.append(TEXT_126);
d1707 1
a1707 1
    stringBuffer.append(TEXT_127);
d1709 1
a1709 1
    stringBuffer.append(TEXT_128);
d1713 1
a1713 1
    stringBuffer.append(TEXT_129);
d1715 1
a1715 1
    stringBuffer.append(TEXT_130);
d1717 1
a1717 1
    stringBuffer.append(TEXT_131);
d1719 1
a1719 1
    stringBuffer.append(TEXT_132);
d1721 1
a1721 1
    stringBuffer.append(TEXT_133);
d1726 1
a1726 1
    stringBuffer.append(TEXT_134);
d1732 1
a1732 1
    stringBuffer.append(TEXT_135);
d1745 1
a1745 1
    stringBuffer.append(TEXT_136);
d1748 1
a1748 2
if (upperBound > 0) {
	if (upperBound == 1) {
d1750 1
a1750 1
    stringBuffer.append(TEXT_137);
d1752 1
a1752 1
    stringBuffer.append(TEXT_138);
d1754 1
a1754 1
    stringBuffer.append(TEXT_139);
d1756 2
a1757 1
	} else {
d1759 1
a1759 1
    stringBuffer.append(TEXT_140);
d1761 1
a1761 1
    stringBuffer.append(TEXT_141);
d1763 1
a1763 1
    stringBuffer.append(TEXT_142);
d1765 1
a1765 1
    stringBuffer.append(TEXT_143);
d1767 1
a1767 1
    stringBuffer.append(TEXT_144);
d1772 1
a1772 1
    stringBuffer.append(TEXT_145);
d1774 1
a1774 1
    stringBuffer.append(TEXT_146);
d1776 1
a1776 1
    stringBuffer.append(TEXT_147);
d1778 1
a1778 1
    stringBuffer.append(TEXT_148);
d1780 1
a1780 1
    stringBuffer.append(TEXT_149);
d1789 1
a1789 1
    stringBuffer.append(TEXT_150);
d1792 1
a1792 2
if (upperBound > 0) {
	if (upperBound == 1) {
d1794 1
a1794 1
    stringBuffer.append(TEXT_151);
d1796 1
a1796 1
    stringBuffer.append(TEXT_152);
d1798 1
a1798 1
    stringBuffer.append(TEXT_153);
d1800 2
a1801 1
	} else {
d1803 1
a1803 1
    stringBuffer.append(TEXT_154);
d1805 1
a1805 1
    stringBuffer.append(TEXT_155);
d1807 1
a1807 1
    stringBuffer.append(TEXT_156);
d1809 1
a1809 1
    stringBuffer.append(TEXT_157);
d1811 1
a1811 1
    stringBuffer.append(TEXT_158);
d1819 1
a1819 1
    stringBuffer.append(TEXT_159);
d1821 1
a1821 1
    stringBuffer.append(TEXT_160);
d1823 1
a1823 1
    stringBuffer.append(TEXT_161);
d1825 1
a1825 1
    stringBuffer.append(TEXT_162);
d1827 1
a1827 1
    stringBuffer.append(TEXT_163);
d1831 1
a1831 1
    stringBuffer.append(TEXT_164);
d1833 1
a1833 1
    stringBuffer.append(TEXT_165);
d1835 1
a1835 1
    stringBuffer.append(TEXT_166);
d1837 1
a1837 1
    stringBuffer.append(TEXT_167);
d1839 1
a1839 1
    stringBuffer.append(TEXT_168);
d1841 1
a1841 1
    stringBuffer.append(TEXT_169);
d1843 1
a1843 1
    stringBuffer.append(TEXT_170);
d1845 1
a1845 1
    stringBuffer.append(TEXT_171);
d1847 1
a1847 1
    stringBuffer.append(TEXT_172);
d1849 1
a1849 1
    stringBuffer.append(TEXT_173);
d1860 1
a1860 1
    stringBuffer.append(TEXT_174);
d1862 1
a1862 1
    stringBuffer.append(TEXT_175);
d1864 1
a1864 1
    stringBuffer.append(TEXT_176);
d1866 1
a1866 1
    stringBuffer.append(TEXT_177);
d1868 1
a1868 1
    stringBuffer.append(TEXT_178);
d1870 1
a1870 1
    stringBuffer.append(TEXT_179);
d1872 1
a1872 1
    stringBuffer.append(TEXT_180);
d1874 1
a1874 1
    stringBuffer.append(TEXT_181);
d1876 1
a1876 1
    stringBuffer.append(TEXT_182);
d1878 1
a1878 1
    stringBuffer.append(TEXT_183);
d1880 1
a1880 1
    stringBuffer.append(TEXT_184);
d1884 1
a1884 1
    stringBuffer.append(TEXT_185);
d1888 1
a1888 1
    stringBuffer.append(TEXT_186);
d1890 1
a1890 1
    stringBuffer.append(TEXT_187);
d1892 1
a1892 1
    stringBuffer.append(TEXT_188);
d1896 1
a1896 1
    stringBuffer.append(TEXT_189);
d1903 1
a1903 1
    stringBuffer.append(TEXT_190);
d1905 1
a1905 1
    stringBuffer.append(TEXT_191);
d1907 1
a1907 1
    stringBuffer.append(TEXT_192);
a1908 2
    stringBuffer.append(TEXT_193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand"));
d1912 2
d1915 1
a1915 1
    stringBuffer.append(TEXT_196);
d1917 1
a1917 1
    stringBuffer.append(TEXT_197);
d1919 1
a1919 1
    stringBuffer.append(TEXT_198);
d1921 1
a1921 1
    stringBuffer.append(TEXT_199);
a1922 2
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1928 2
d1931 1
a1931 1
    stringBuffer.append(TEXT_204);
d1933 1
a1933 1
    stringBuffer.append(TEXT_205);
d1935 1
a1935 1
    stringBuffer.append(TEXT_206);
d1937 1
a1937 1
    stringBuffer.append(TEXT_207);
d1939 1
a1939 1
    stringBuffer.append(TEXT_208);
d1941 1
a1941 1
    stringBuffer.append(TEXT_209);
d1943 1
a1943 1
    stringBuffer.append(TEXT_210);
d1951 1
a1951 1
    stringBuffer.append(TEXT_211);
d1953 1
a1953 1
    stringBuffer.append(TEXT_212);
d1955 1
a1955 1
    stringBuffer.append(TEXT_213);
d1957 1
a1957 1
    stringBuffer.append(TEXT_214);
d1959 1
a1959 1
    stringBuffer.append(TEXT_215);
d1961 1
a1961 1
    stringBuffer.append(TEXT_216);
d1963 1
a1963 1
    stringBuffer.append(TEXT_217);
d1971 1
a1971 1
    stringBuffer.append(TEXT_218);
d1974 1
a1974 2
if (upperBound > 0) {
	if (upperBound == 1) {
d1976 1
a1976 1
    stringBuffer.append(TEXT_219);
d1978 1
a1978 1
    stringBuffer.append(TEXT_220);
d1980 1
a1980 1
    stringBuffer.append(TEXT_221);
d1982 2
a1983 1
	} else {
d1985 1
a1985 1
    stringBuffer.append(TEXT_222);
d1987 1
a1987 1
    stringBuffer.append(TEXT_223);
d1989 1
a1989 1
    stringBuffer.append(TEXT_224);
d1991 1
a1991 1
    stringBuffer.append(TEXT_225);
d1993 1
a1993 1
    stringBuffer.append(TEXT_226);
d2006 1
a2006 1
    stringBuffer.append(TEXT_227);
d2009 1
a2009 2
if (upperBound > 0) {
	if (upperBound == 1) {
d2011 1
a2011 1
    stringBuffer.append(TEXT_228);
d2013 1
a2013 1
    stringBuffer.append(TEXT_229);
d2015 1
a2015 1
    stringBuffer.append(TEXT_230);
d2017 2
a2018 1
	} else {
d2020 1
a2020 1
    stringBuffer.append(TEXT_231);
d2022 1
a2022 1
    stringBuffer.append(TEXT_232);
d2024 1
a2024 1
    stringBuffer.append(TEXT_233);
d2026 1
a2026 1
    stringBuffer.append(TEXT_234);
d2028 1
a2028 1
    stringBuffer.append(TEXT_235);
d2036 1
a2036 1
    stringBuffer.append(TEXT_236);
a2037 2
    stringBuffer.append(TEXT_237);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d2041 2
d2044 1
a2044 1
    stringBuffer.append(TEXT_240);
d2048 1
a2048 1
    stringBuffer.append(TEXT_241);
d2050 1
a2050 1
    stringBuffer.append(TEXT_242);
d2052 1
a2052 1
    stringBuffer.append(TEXT_243);
d2054 1
a2054 1
    stringBuffer.append(TEXT_244);
d2056 1
a2056 1
    stringBuffer.append(TEXT_245);
d2060 1
a2060 1
    stringBuffer.append(TEXT_246);
d2062 1
a2062 1
    stringBuffer.append(TEXT_247);
d2064 1
a2064 1
    stringBuffer.append(TEXT_248);
d2066 1
a2066 1
    stringBuffer.append(TEXT_249);
d2068 1
a2068 1
    stringBuffer.append(TEXT_250);
d2079 1
a2079 1
    stringBuffer.append(TEXT_251);
d2081 1
a2081 1
    stringBuffer.append(TEXT_252);
d2083 1
a2083 1
    stringBuffer.append(TEXT_253);
d2085 1
a2085 1
    stringBuffer.append(TEXT_254);
d2087 1
a2087 1
    stringBuffer.append(TEXT_255);
d2089 1
a2089 1
    stringBuffer.append(TEXT_256);
d2091 1
a2091 1
    stringBuffer.append(TEXT_257);
d2093 1
a2093 1
    stringBuffer.append(TEXT_258);
d2095 1
a2095 1
    stringBuffer.append(TEXT_259);
d2097 1
a2097 1
    stringBuffer.append(TEXT_260);
d2099 1
a2099 1
    stringBuffer.append(TEXT_261);
d2104 1
a2104 1
    stringBuffer.append(TEXT_262);
d2106 1
a2106 1
    stringBuffer.append(TEXT_263);
d2108 1
a2108 1
    stringBuffer.append(TEXT_264);
d2115 1
a2115 1
    stringBuffer.append(TEXT_265);
d2117 1
a2117 1
    stringBuffer.append(TEXT_266);
d2119 1
a2119 1
    stringBuffer.append(TEXT_267);
a2122 2
    stringBuffer.append(TEXT_268);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d2128 1
a2128 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d2132 2
d2138 1
a2138 1
    stringBuffer.append(TEXT_274);
a2139 3
    stringBuffer.append(TEXT_275);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d2141 2
d2144 1
a2144 1
    stringBuffer.append(TEXT_277);
d2146 1
a2146 1
    stringBuffer.append(TEXT_278);
d2148 1
a2148 1
    stringBuffer.append(TEXT_279);
d2152 1
a2152 1
    stringBuffer.append(TEXT_280);
d2154 1
a2154 1
    stringBuffer.append(TEXT_281);
d2156 1
a2156 1
    stringBuffer.append(TEXT_282);
d2160 1
a2160 1
    stringBuffer.append(TEXT_283);
d2162 1
a2162 1
    stringBuffer.append(TEXT_284);
d2166 1
a2166 1
    stringBuffer.append(TEXT_285);
d2168 1
a2168 1
    stringBuffer.append(TEXT_286);
d2170 1
a2170 1
    stringBuffer.append(TEXT_287);
d2172 1
a2172 1
    stringBuffer.append(TEXT_288);
a2173 1
    stringBuffer.append(TEXT_289);
a2175 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d2179 2
d2182 1
a2182 1
    stringBuffer.append(TEXT_294);
d2184 1
a2184 1
    stringBuffer.append(TEXT_295);
d2186 1
a2186 1
    stringBuffer.append(TEXT_296);
d2188 1
a2188 1
    stringBuffer.append(TEXT_297);
d2190 1
a2190 1
    stringBuffer.append(TEXT_298);
d2192 1
a2192 1
    stringBuffer.append(TEXT_299);
d2194 1
a2194 1
    stringBuffer.append(TEXT_300);
d2198 1
a2198 1
    stringBuffer.append(TEXT_301);
d2200 1
a2200 1
    stringBuffer.append(TEXT_302);
d2202 1
a2202 1
    stringBuffer.append(TEXT_303);
d2204 1
a2204 1
    stringBuffer.append(TEXT_304);
d2206 1
a2206 1
    stringBuffer.append(TEXT_305);
d2208 1
a2208 1
    stringBuffer.append(TEXT_306);
d2212 1
a2212 1
    stringBuffer.append(TEXT_307);
d2214 1
a2214 1
    stringBuffer.append(TEXT_308);
d2216 1
a2216 1
    stringBuffer.append(TEXT_309);
d2220 1
a2220 1
    stringBuffer.append(TEXT_310);
d2224 1
a2224 1
    stringBuffer.append(TEXT_311);
d2226 1
a2226 1
    stringBuffer.append(TEXT_312);
d2228 1
a2228 1
    stringBuffer.append(TEXT_313);
d2230 1
a2230 1
    stringBuffer.append(TEXT_314);
d2232 1
a2232 1
    stringBuffer.append(TEXT_315);
d2234 1
a2234 1
    stringBuffer.append(TEXT_316);
d2236 1
a2236 1
    stringBuffer.append(TEXT_317);
d2238 1
a2238 1
    stringBuffer.append(TEXT_318);
d2240 1
a2240 1
    stringBuffer.append(TEXT_319);
d2242 1
a2242 1
    stringBuffer.append(TEXT_320);
d2246 1
a2246 1
    stringBuffer.append(TEXT_321);
d2248 1
a2248 1
    stringBuffer.append(TEXT_322);
d2252 1
a2252 1
    stringBuffer.append(TEXT_323);
d2254 1
a2254 1
    stringBuffer.append(TEXT_324);
d2256 1
a2256 1
    stringBuffer.append(TEXT_325);
a2257 2
    stringBuffer.append(TEXT_326);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d2261 2
d2264 1
a2264 1
    stringBuffer.append(TEXT_329);
d2266 1
a2266 1
    stringBuffer.append(TEXT_330);
d2268 1
a2268 1
    stringBuffer.append(TEXT_331);
d2270 1
a2270 1
    stringBuffer.append(TEXT_332);
d2272 1
a2272 1
    stringBuffer.append(TEXT_333);
d2296 1
a2296 1
    stringBuffer.append(TEXT_334);
a2297 3
    stringBuffer.append(TEXT_335);
    stringBuffer.append(reconnectCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
d2299 2
d2304 1
a2304 1
    stringBuffer.append(TEXT_337);
d2306 1
a2306 1
    stringBuffer.append(TEXT_338);
d2308 1
a2308 1
    stringBuffer.append(TEXT_339);
d2310 1
a2310 1
    stringBuffer.append(TEXT_340);
d2314 1
a2314 1
    stringBuffer.append(TEXT_341);
d2316 1
a2316 1
    stringBuffer.append(TEXT_342);
d2318 1
a2318 1
    stringBuffer.append(TEXT_343);
d2322 1
a2322 1
    stringBuffer.append(TEXT_344);
d2324 1
a2324 1
    stringBuffer.append(TEXT_345);
d2328 1
a2328 1
    stringBuffer.append(TEXT_346);
d2330 1
a2330 1
    stringBuffer.append(TEXT_347);
d2332 1
a2332 1
    stringBuffer.append(TEXT_348);
a2333 2
    stringBuffer.append(TEXT_349);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d2337 2
d2340 1
a2340 1
    stringBuffer.append(TEXT_352);
d2342 1
a2342 1
    stringBuffer.append(TEXT_353);
d2344 1
a2344 1
    stringBuffer.append(TEXT_354);
d2346 1
a2346 1
    stringBuffer.append(TEXT_355);
d2348 1
a2348 1
    stringBuffer.append(TEXT_356);
d2374 1
a2374 1
    stringBuffer.append(TEXT_357);
a2375 3
    stringBuffer.append(TEXT_358);
    stringBuffer.append(reconnectCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
d2377 2
d2382 1
a2382 1
    stringBuffer.append(TEXT_360);
d2384 1
a2384 1
    stringBuffer.append(TEXT_361);
d2386 1
a2386 1
    stringBuffer.append(TEXT_362);
d2388 1
a2388 1
    stringBuffer.append(TEXT_363);
d2392 1
a2392 1
    stringBuffer.append(TEXT_364);
d2394 1
a2394 1
    stringBuffer.append(TEXT_365);
d2396 1
a2396 1
    stringBuffer.append(TEXT_366);
a2397 2
    stringBuffer.append(TEXT_367);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
d2403 1
a2403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d2407 2
d2434 1
a2434 1
    stringBuffer.append(TEXT_373);
a2435 3
    stringBuffer.append(TEXT_374);
    stringBuffer.append(createCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
d2437 2
d2442 1
a2442 1
    stringBuffer.append(TEXT_376);
d2444 1
a2444 1
    stringBuffer.append(TEXT_377);
d2446 1
a2446 1
    stringBuffer.append(TEXT_378);
d2448 1
a2448 1
    stringBuffer.append(TEXT_379);
d2450 1
a2450 1
    stringBuffer.append(TEXT_380);
d2452 1
a2452 1
    stringBuffer.append(TEXT_381);
d2454 1
a2454 1
    stringBuffer.append(TEXT_382);
d2456 1
a2456 1
    stringBuffer.append(TEXT_383);
a2457 2
    stringBuffer.append(TEXT_384);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
d2463 1
a2463 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d2467 2
d2492 1
a2492 1
    stringBuffer.append(TEXT_390);
a2493 3
    stringBuffer.append(TEXT_391);
    stringBuffer.append(createCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
d2495 2
d2500 1
a2500 1
    stringBuffer.append(TEXT_393);
d2502 1
a2502 1
    stringBuffer.append(TEXT_394);
d2504 1
a2504 1
    stringBuffer.append(TEXT_395);
d2506 1
a2506 1
    stringBuffer.append(TEXT_396);
d2508 1
a2508 1
    stringBuffer.append(TEXT_397);
d2510 1
a2510 1
    stringBuffer.append(TEXT_398);
d2514 1
a2514 1
    stringBuffer.append(TEXT_399);
a2515 2
    stringBuffer.append(TEXT_400);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
d2517 1
a2517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
a2518 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_403);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_404);
d2524 1
a2524 1
    stringBuffer.append(TEXT_405);
d2528 1
a2528 1
    stringBuffer.append(TEXT_406);
d2530 1
a2530 1
    stringBuffer.append(TEXT_407);
d2532 1
a2532 1
    stringBuffer.append(TEXT_408);
d2534 1
a2534 1
    stringBuffer.append(TEXT_409);
d2542 1
a2542 1
    stringBuffer.append(TEXT_410);
d2544 1
a2544 1
    stringBuffer.append(TEXT_411);
d2546 1
a2546 1
    stringBuffer.append(TEXT_412);
d2548 1
a2548 1
    stringBuffer.append(TEXT_413);
d2550 1
a2550 1
    stringBuffer.append(TEXT_414);
d2552 1
a2552 1
    stringBuffer.append(TEXT_415);
d2561 1
a2561 1
    stringBuffer.append(TEXT_416);
d2568 1
a2568 1
    stringBuffer.append(TEXT_417);
d2572 1
a2572 1
    stringBuffer.append(TEXT_418);
d2574 1
a2574 1
    stringBuffer.append(TEXT_419);
d2576 1
a2576 1
    stringBuffer.append(TEXT_420);
d2578 1
a2578 1
    stringBuffer.append(TEXT_421);
d2580 1
a2580 1
    stringBuffer.append(TEXT_422);
d2582 1
a2582 1
    stringBuffer.append(TEXT_423);
d2586 1
a2586 1
    stringBuffer.append(TEXT_424);
d2590 1
a2590 1
    stringBuffer.append(TEXT_425);
d2592 1
a2592 1
    stringBuffer.append(TEXT_426);
d2596 1
a2596 1
    stringBuffer.append(TEXT_427);
d2598 1
a2598 1
    stringBuffer.append(TEXT_428);
d2600 1
a2600 1
    stringBuffer.append(TEXT_429);
d2602 1
a2602 1
    stringBuffer.append(TEXT_430);
d2606 1
a2606 1
    stringBuffer.append(TEXT_431);
d2608 1
a2608 1
    stringBuffer.append(TEXT_432);
d2618 1
a2618 1
    stringBuffer.append(TEXT_433);
d2620 1
a2620 1
    stringBuffer.append(TEXT_434);
d2622 1
a2622 1
    stringBuffer.append(TEXT_435);
d2624 1
a2624 1
    stringBuffer.append(TEXT_436);
d2626 1
a2626 1
    stringBuffer.append(TEXT_437);
d2628 1
a2628 1
    stringBuffer.append(TEXT_438);
d2632 1
a2632 1
    stringBuffer.append(TEXT_439);
d2634 1
a2634 1
    stringBuffer.append(TEXT_440);
d2636 1
a2636 1
    stringBuffer.append(TEXT_441);
d2638 1
a2638 1
    stringBuffer.append(TEXT_442);
d2640 1
a2640 1
    stringBuffer.append(TEXT_443);
d2642 1
a2642 1
    stringBuffer.append(TEXT_444);
d2644 1
a2644 1
    stringBuffer.append(TEXT_445);
d2646 1
a2646 1
    stringBuffer.append(TEXT_446);
d2648 1
a2648 1
    stringBuffer.append(TEXT_447);
d2650 1
a2650 1
    stringBuffer.append(TEXT_448);
d2652 1
a2652 1
    stringBuffer.append(TEXT_449);
d2654 1
a2654 1
    stringBuffer.append(TEXT_450);
d2656 1
a2656 1
    stringBuffer.append(TEXT_451);
d2658 1
a2658 1
    stringBuffer.append(TEXT_452);
d2660 1
a2660 1
    stringBuffer.append(TEXT_453);
d2662 1
a2662 1
    stringBuffer.append(TEXT_454);
d2664 1
a2664 1
    stringBuffer.append(TEXT_455);
d2666 1
a2666 1
    stringBuffer.append(TEXT_456);
d2668 1
a2668 1
    stringBuffer.append(TEXT_457);
d2670 1
a2670 1
    stringBuffer.append(TEXT_458);
d2672 1
a2672 1
    stringBuffer.append(TEXT_459);
d2674 1
a2674 1
    stringBuffer.append(TEXT_460);
d2676 1
a2676 1
    stringBuffer.append(TEXT_461);
d2678 1
a2678 1
    stringBuffer.append(TEXT_462);
d2683 1
a2683 1
    stringBuffer.append(TEXT_463);
d2685 1
a2685 1
    stringBuffer.append(TEXT_464);
d2687 1
a2687 1
    stringBuffer.append(TEXT_465);
d2689 1
a2689 1
    stringBuffer.append(TEXT_466);
d2691 1
a2691 1
    stringBuffer.append(TEXT_467);
d2693 1
a2693 1
    stringBuffer.append(TEXT_468);
d2695 1
a2695 1
    stringBuffer.append(TEXT_469);
d2697 1
a2697 1
    stringBuffer.append(TEXT_470);
d2699 1
a2699 1
    stringBuffer.append(TEXT_471);
d2701 1
a2701 1
    stringBuffer.append(TEXT_472);
d2703 1
a2703 1
    stringBuffer.append(TEXT_473);
d2707 1
a2707 1
    stringBuffer.append(TEXT_474);
d2709 1
a2709 1
    stringBuffer.append(TEXT_475);
d2717 1
a2717 1
    stringBuffer.append(TEXT_476);
d2719 1
a2719 1
    stringBuffer.append(TEXT_477);
d2721 1
a2721 1
    stringBuffer.append(TEXT_478);
d2723 1
a2723 1
    stringBuffer.append(TEXT_479);
d2725 1
a2725 1
    stringBuffer.append(TEXT_480);
d2734 1
a2734 1
    stringBuffer.append(TEXT_481);
d2736 1
a2736 1
    stringBuffer.append(TEXT_482);
d2738 1
a2738 1
    stringBuffer.append(TEXT_483);
d2740 1
a2740 1
    stringBuffer.append(TEXT_484);
d2742 1
a2742 1
    stringBuffer.append(TEXT_485);
d2746 1
a2746 1
    stringBuffer.append(TEXT_486);
d2754 1
a2754 1
    stringBuffer.append(TEXT_487);
d2756 1
a2756 1
    stringBuffer.append(TEXT_488);
d2758 1
a2758 1
    stringBuffer.append(TEXT_489);
d2760 1
a2760 1
    stringBuffer.append(TEXT_490);
d2762 1
a2762 1
    stringBuffer.append(TEXT_491);
d2766 1
a2766 1
    stringBuffer.append(TEXT_492);
d2770 1
a2770 1
    stringBuffer.append(TEXT_493);
d2772 1
a2772 1
    stringBuffer.append(TEXT_494);
d2776 1
a2776 1
    stringBuffer.append(TEXT_495);
d2778 1
a2778 1
    stringBuffer.append(TEXT_496);
d2780 1
a2780 1
    stringBuffer.append(TEXT_497);
d2782 1
a2782 1
    stringBuffer.append(TEXT_498);
d2784 1
a2784 1
    stringBuffer.append(TEXT_499);
d2786 1
a2786 1
    stringBuffer.append(TEXT_500);
d2788 1
a2788 1
    stringBuffer.append(TEXT_501);
d2792 4
d2797 1
a2797 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d2799 1
a2799 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d2801 1
a2801 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a2802 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
a2803 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d2805 1
d2807 1
d2809 1
a2809 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d2811 1
a2811 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d2815 1
a2815 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d2817 1
a2817 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d2819 1
a2819 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a2820 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_516);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_517);
d2828 1
a2828 1
    stringBuffer.append(TEXT_518);
d2830 1
a2830 1
    stringBuffer.append(TEXT_519);
d2834 1
a2834 1
    stringBuffer.append(TEXT_520);
d2838 1
a2838 1
    stringBuffer.append(TEXT_521);
d2840 1
a2840 1
    stringBuffer.append(TEXT_522);
d2845 1
a2845 1
    stringBuffer.append(TEXT_523);
d2847 1
a2847 1
    stringBuffer.append(TEXT_524);
d2851 1
a2851 1
    stringBuffer.append(TEXT_525);
d2853 1
a2853 1
    stringBuffer.append(TEXT_526);
d2855 1
a2855 1
    stringBuffer.append(TEXT_527);
d2857 1
a2857 1
    stringBuffer.append(TEXT_528);
d2859 1
a2859 1
    stringBuffer.append(TEXT_529);
d2864 1
a2864 1
    stringBuffer.append(TEXT_530);
d2866 1
a2866 1
    stringBuffer.append(TEXT_531);
d2871 1
a2871 1
    stringBuffer.append(TEXT_532);
d2873 1
a2873 1
    stringBuffer.append(TEXT_533);
d2877 1
a2877 1
    stringBuffer.append(TEXT_534);
d2882 1
a2882 1
    stringBuffer.append(TEXT_535);
d2884 1
a2884 1
    stringBuffer.append(TEXT_536);
d2888 1
a2888 1
    stringBuffer.append(TEXT_537);
d2890 1
a2890 1
    stringBuffer.append(TEXT_538);
d2892 1
a2892 1
    stringBuffer.append(TEXT_539);
d2897 1
a2897 1
    stringBuffer.append(TEXT_540);
d2902 1
a2902 1
    stringBuffer.append(TEXT_541);
d2904 1
a2904 1
    stringBuffer.append(TEXT_542);
d2906 1
a2906 1
    stringBuffer.append(TEXT_543);
d2910 1
a2910 1
    stringBuffer.append(TEXT_544);
d2912 1
a2912 1
    stringBuffer.append(TEXT_545);
d2916 1
a2916 1
    stringBuffer.append(TEXT_546);
d2918 1
a2918 1
    stringBuffer.append(TEXT_547);
d2920 1
a2920 1
    stringBuffer.append(TEXT_548);
d2925 1
a2925 1
    stringBuffer.append(TEXT_549);
d2930 1
a2930 1
    stringBuffer.append(TEXT_550);
d2932 1
a2932 1
    stringBuffer.append(TEXT_551);
d2934 1
a2934 1
    stringBuffer.append(TEXT_552);
d2938 1
a2938 1
    stringBuffer.append(TEXT_553);
d2945 1
a2945 1
    stringBuffer.append(TEXT_554);
d2947 1
a2947 1
    stringBuffer.append(TEXT_555);
d2949 1
a2949 1
    stringBuffer.append(TEXT_556);
d2951 1
a2951 1
    stringBuffer.append(TEXT_557);
d2953 1
a2953 1
    stringBuffer.append(TEXT_558);
d2957 4
d2962 1
a2962 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d2966 1
a2966 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d2968 1
a2968 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d2970 1
a2970 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d2972 1
a2972 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d2976 1
a2976 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d2978 1
a2978 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d2980 2
a2982 2
    stringBuffer.append(TEXT_569);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d2984 2
d2987 1
a2987 1
    stringBuffer.append(TEXT_571);
a2988 2
    stringBuffer.append(TEXT_572);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d2990 2
d2993 1
a2993 1
    stringBuffer.append(TEXT_574);
a2994 2
    stringBuffer.append(TEXT_575);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d2996 2
a2998 2
    stringBuffer.append(TEXT_577);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
a2999 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_579);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
    stringBuffer.append(TEXT_580);
d3003 1
a3003 1
    stringBuffer.append(TEXT_581);
d3005 1
a3005 1
    stringBuffer.append(TEXT_582);
d3007 1
a3007 1
    stringBuffer.append(TEXT_583);
d3011 1
a3011 1
    stringBuffer.append(TEXT_584);
d3013 1
a3013 1
    stringBuffer.append(TEXT_585);
d3015 1
a3015 1
    stringBuffer.append(TEXT_586);
d3019 1
a3019 1
    stringBuffer.append(TEXT_587);
d3026 1
a3026 1
    stringBuffer.append(TEXT_588);
d3030 1
a3030 1
    stringBuffer.append(TEXT_589);
d3034 1
a3034 1
    stringBuffer.append(TEXT_590);
d3041 1
a3041 1
    stringBuffer.append(TEXT_591);
d3045 1
a3045 1
    stringBuffer.append(TEXT_592);
d3055 3
d3059 1
d3061 1
a3061 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
d3063 1
a3063 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d3065 1
a3065 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d3067 1
a3067 1
    stringBuffer.append(_getDiagramCode);
a3070 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_600);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ChildNotationModelRefresher"));
    stringBuffer.append(TEXT_601);
d3085 1
a3085 1
    stringBuffer.append(TEXT_602);
d3087 1
a3087 1
    stringBuffer.append(TEXT_603);
d3089 1
a3089 1
    stringBuffer.append(TEXT_604);
d3091 1
a3091 1
    stringBuffer.append(TEXT_605);
d3095 1
a3095 1
    stringBuffer.append(TEXT_606);
d3097 1
a3097 1
    stringBuffer.append(TEXT_607);
d3116 1
a3116 1
    stringBuffer.append(TEXT_608);
d3118 1
a3118 1
    stringBuffer.append(TEXT_609);
d3120 1
a3120 1
    stringBuffer.append(TEXT_610);
d3122 1
a3122 1
    stringBuffer.append(TEXT_611);
d3124 1
a3124 1
    stringBuffer.append(TEXT_612);
d3128 1
a3128 1
    stringBuffer.append(TEXT_613);
d3130 1
a3130 1
    stringBuffer.append(TEXT_614);
d3132 1
a3132 1
    stringBuffer.append(TEXT_615);
d3134 1
a3134 1
    stringBuffer.append(TEXT_616);
d3142 1
a3142 1
    stringBuffer.append(TEXT_617);
d3144 1
a3144 1
    stringBuffer.append(TEXT_618);
d3146 1
a3146 1
    stringBuffer.append(TEXT_619);
d3151 1
a3151 1
    stringBuffer.append(TEXT_620);
d3153 1
a3153 1
    stringBuffer.append(TEXT_621);
d3155 1
a3155 1
    stringBuffer.append(TEXT_622);
d3157 1
a3157 1
    stringBuffer.append(TEXT_623);
d3166 1
a3166 1
    stringBuffer.append(TEXT_624);
d3170 1
a3170 1
    stringBuffer.append(TEXT_625);
d3172 1
a3172 1
    stringBuffer.append(TEXT_626);
d3178 1
a3178 1
    stringBuffer.append(TEXT_627);
d3180 1
a3180 1
    stringBuffer.append(TEXT_628);
d3182 1
a3182 1
    stringBuffer.append(TEXT_629);
d3186 1
a3186 1
    stringBuffer.append(TEXT_630);
d3190 1
a3190 1
    stringBuffer.append(TEXT_631);
d3192 1
a3192 1
    stringBuffer.append(TEXT_632);
d3194 1
a3194 1
    stringBuffer.append(TEXT_633);
d3199 3
a3202 3
    stringBuffer.append(TEXT_635);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_636);
d3212 1
a3212 1
    stringBuffer.append(TEXT_637);
d3214 1
a3214 1
    stringBuffer.append(TEXT_638);
d3216 1
a3216 1
    stringBuffer.append(TEXT_639);
d3218 1
a3218 1
    stringBuffer.append(TEXT_640);
d3220 1
a3220 1
    stringBuffer.append(TEXT_641);
d3231 1
a3231 1
    stringBuffer.append(TEXT_642);
d3233 1
a3233 1
    stringBuffer.append(TEXT_643);
d3235 1
a3235 1
    stringBuffer.append(TEXT_644);
d3237 1
a3237 1
    stringBuffer.append(TEXT_645);
d3241 1
a3241 1
    stringBuffer.append(TEXT_646);
d3245 1
a3245 1
    stringBuffer.append(TEXT_647);
d3247 1
a3247 1
    stringBuffer.append(TEXT_648);
d3251 1
a3251 1
    stringBuffer.append(TEXT_649);
d3255 3
a3258 3
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_651);
    stringBuffer.append(TEXT_652);
d3262 1
a3262 1
    stringBuffer.append(TEXT_653);
d3264 1
a3264 1
    stringBuffer.append(TEXT_654);
d3268 1
a3268 1
    stringBuffer.append(TEXT_655);
d3270 1
a3270 1
    stringBuffer.append(TEXT_656);
d3272 1
a3272 1
    stringBuffer.append(TEXT_657);
d3290 1
a3290 1
    stringBuffer.append(TEXT_658);
d3292 1
a3292 1
    stringBuffer.append(TEXT_659);
d3294 1
a3294 1
    stringBuffer.append(TEXT_660);
d3296 1
a3296 1
    stringBuffer.append(TEXT_661);
d3298 1
a3298 1
    stringBuffer.append(TEXT_662);
d3307 1
a3307 1
    stringBuffer.append(TEXT_663);
d3309 1
a3309 1
    stringBuffer.append(TEXT_664);
d3311 1
a3311 1
    stringBuffer.append(TEXT_665);
d3313 1
a3313 1
    stringBuffer.append(TEXT_666);
d3317 1
a3317 1
    stringBuffer.append(TEXT_667);
d3319 1
a3319 1
    stringBuffer.append(TEXT_668);
d3321 1
a3321 1
    stringBuffer.append(TEXT_669);
d3325 1
a3325 1
    stringBuffer.append(TEXT_670);
d3327 1
a3327 1
    stringBuffer.append(TEXT_671);
d3332 1
a3332 1
    stringBuffer.append(TEXT_672);
d3339 1
a3339 1
    stringBuffer.append(TEXT_673);
d3341 1
a3341 1
    stringBuffer.append(TEXT_674);
d3345 1
a3345 1
    stringBuffer.append(TEXT_675);
d3347 1
a3347 1
    stringBuffer.append(TEXT_676);
d3351 1
a3351 1
    stringBuffer.append(TEXT_677);
d3353 1
a3353 1
    stringBuffer.append(TEXT_678);
d3357 1
a3357 1
    stringBuffer.append(TEXT_679);
d3361 1
a3361 1
    stringBuffer.append(TEXT_680);
d3367 1
a3367 1
    stringBuffer.append(TEXT_681);
d3372 1
a3372 1
    stringBuffer.append(TEXT_682);
d3377 1
a3377 1
    stringBuffer.append(TEXT_683);
d3381 4
d3388 1
a3388 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
d3390 1
a3390 1
    stringBuffer.append(genDiagram.isSynchronized());
d3392 1
a3392 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d3394 1
a3394 1
    stringBuffer.append(_getViewCode);
d3396 1
a3396 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher"));
d3398 1
a3398 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d3400 1
a3400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d3402 1
a3402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
a3403 4
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_694);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_695);
d3407 1
a3407 1
    stringBuffer.append(TEXT_696);
d3411 1
a3411 1
    stringBuffer.append(TEXT_697);
d3413 1
a3413 1
    stringBuffer.append(TEXT_698);
d3415 1
a3415 1
    stringBuffer.append(TEXT_699);
d3417 1
a3417 1
    stringBuffer.append(TEXT_700);
d3419 1
a3419 1
    stringBuffer.append(TEXT_701);
d3421 1
a3421 1
    stringBuffer.append(TEXT_702);
d3423 1
a3423 1
    stringBuffer.append(TEXT_703);
d3425 1
a3425 1
    stringBuffer.append(TEXT_704);
d3427 1
a3427 1
    stringBuffer.append(TEXT_705);
d3440 1
a3440 1
    stringBuffer.append(TEXT_706);
d3442 1
a3442 1
    stringBuffer.append(TEXT_707);
d3444 1
a3444 1
    stringBuffer.append(TEXT_708);
d3446 1
a3446 1
    stringBuffer.append(TEXT_709);
d3451 4
d3456 1
a3456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
a3469 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_718);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_719);
d3473 1
a3473 1
    stringBuffer.append(TEXT_720);
d3475 1
a3475 1
    stringBuffer.append(TEXT_721);
d3488 1
a3488 1
    stringBuffer.append(TEXT_722);
d3502 1
a3502 1
    stringBuffer.append(TEXT_723);
d3504 1
a3504 1
    stringBuffer.append(TEXT_724);
d3506 1
a3506 1
    stringBuffer.append(TEXT_725);
d3508 1
a3508 1
    stringBuffer.append(TEXT_726);
d3510 1
a3510 1
    stringBuffer.append(TEXT_727);
d3514 1
a3514 1
    stringBuffer.append(TEXT_728);
d3516 1
a3516 1
    stringBuffer.append(TEXT_729);
d3518 1
a3518 1
    stringBuffer.append(TEXT_730);
d3520 1
a3520 1
    stringBuffer.append(TEXT_731);
d3527 1
a3527 1
    stringBuffer.append(TEXT_732);
d3541 1
a3541 1
    stringBuffer.append(TEXT_733);
d3543 1
a3543 1
    stringBuffer.append(TEXT_734);
d3545 1
a3545 1
    stringBuffer.append(TEXT_735);
d3547 1
a3547 1
    stringBuffer.append(TEXT_736);
d3549 1
a3549 1
    stringBuffer.append(TEXT_737);
d3553 1
a3553 1
    stringBuffer.append(TEXT_738);
d3555 1
a3555 1
    stringBuffer.append(TEXT_739);
d3557 1
a3557 1
    stringBuffer.append(TEXT_740);
d3559 1
a3559 1
    stringBuffer.append(TEXT_741);
d3566 1
a3566 1
    stringBuffer.append(TEXT_742);
d3580 1
a3580 1
    stringBuffer.append(TEXT_743);
d3582 1
a3582 1
    stringBuffer.append(TEXT_744);
d3584 1
a3584 1
    stringBuffer.append(TEXT_745);
d3586 1
a3586 1
    stringBuffer.append(TEXT_746);
d3588 1
a3588 1
    stringBuffer.append(TEXT_747);
d3592 1
a3592 1
    stringBuffer.append(TEXT_748);
d3594 1
a3594 1
    stringBuffer.append(TEXT_749);
d3596 1
a3596 1
    stringBuffer.append(TEXT_750);
d3598 1
a3598 1
    stringBuffer.append(TEXT_751);
d3608 1
a3608 1
    stringBuffer.append(TEXT_752);
d3622 1
a3622 1
    stringBuffer.append(TEXT_753);
d3624 1
a3624 1
    stringBuffer.append(TEXT_754);
d3626 1
a3626 1
    stringBuffer.append(TEXT_755);
d3628 1
a3628 1
    stringBuffer.append(TEXT_756);
d3630 1
a3630 1
    stringBuffer.append(TEXT_757);
d3634 1
a3634 1
    stringBuffer.append(TEXT_758);
d3636 1
a3636 1
    stringBuffer.append(TEXT_759);
d3638 1
a3638 1
    stringBuffer.append(TEXT_760);
d3640 1
a3640 1
    stringBuffer.append(TEXT_761);
d3649 1
a3649 1
    stringBuffer.append(TEXT_762);
d3654 1
a3654 1
    stringBuffer.append(TEXT_763);
d3656 1
a3656 1
    stringBuffer.append(TEXT_764);
d3663 1
a3663 1
    stringBuffer.append(TEXT_765);
d3668 1
a3668 1
    stringBuffer.append(TEXT_766);
d3670 1
a3670 1
    stringBuffer.append(TEXT_767);
d3676 1
a3676 1
    stringBuffer.append(TEXT_768);
d3678 1
a3678 1
    stringBuffer.append(TEXT_769);
d3680 1
a3680 1
    stringBuffer.append(TEXT_770);
d3685 1
a3685 1
    stringBuffer.append(TEXT_771);
d3687 1
a3687 1
    stringBuffer.append(TEXT_772);
d3689 1
a3689 1
    stringBuffer.append(TEXT_773);
d3691 1
a3691 1
    stringBuffer.append(TEXT_774);
d3693 1
a3693 1
    stringBuffer.append(TEXT_775);
d3700 3
d3704 1
d3706 1
a3706 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a3707 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_779);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IViewDecorator"));
    stringBuffer.append(TEXT_780);
d3716 1
a3716 1
    stringBuffer.append(TEXT_781);
d3718 1
a3718 1
    stringBuffer.append(TEXT_782);
d3720 1
a3720 1
    stringBuffer.append(TEXT_783);
d3722 1
a3722 1
    stringBuffer.append(TEXT_784);
d3728 1
a3728 1
    stringBuffer.append(TEXT_785);
d3730 1
a3730 1
    stringBuffer.append(TEXT_786);
d3732 1
a3732 1
    stringBuffer.append(TEXT_787);
d3736 1
a3736 1
    stringBuffer.append(TEXT_788);
d3738 1
a3738 1
    stringBuffer.append(TEXT_789);
d3740 1
a3740 1
    stringBuffer.append(TEXT_790);
d3744 1
a3744 1
    stringBuffer.append(TEXT_791);
d3746 1
a3746 1
    stringBuffer.append(TEXT_792);
d3752 3
d3756 1
a3757 4
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_795);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_796);
d3780 4
a3786 4
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_799);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_800);
d3791 1
a3791 1
    stringBuffer.append(TEXT_801);
d3800 1
a3800 1
    stringBuffer.append(TEXT_802);
d3802 1
a3802 1
    stringBuffer.append(TEXT_803);
d3804 1
a3804 1
    stringBuffer.append(TEXT_804);
d3806 1
a3806 1
    stringBuffer.append(TEXT_805);
d3810 1
a3810 1
    stringBuffer.append(TEXT_806);
d3812 1
a3812 1
    stringBuffer.append(TEXT_807);
d3814 1
a3814 1
    stringBuffer.append(TEXT_808);
d3818 1
a3818 1
    stringBuffer.append(TEXT_809);
d3820 1
a3820 1
    stringBuffer.append(TEXT_810);
d3825 1
a3825 1
    stringBuffer.append(TEXT_811);
d3833 1
a3833 1
    stringBuffer.append(TEXT_812);
d3835 1
a3835 1
    stringBuffer.append(TEXT_813);
d3839 1
a3839 1
    stringBuffer.append(TEXT_814);
d3841 1
a3841 1
    stringBuffer.append(TEXT_815);
d3846 1
a3846 1
    stringBuffer.append(TEXT_816);
d3848 1
a3848 1
    stringBuffer.append(TEXT_817);
d3850 1
a3850 1
    stringBuffer.append(TEXT_818);
d3852 1
a3852 1
    stringBuffer.append(TEXT_819);
d3856 1
a3856 1
    stringBuffer.append(TEXT_820);
d3858 1
a3858 1
    stringBuffer.append(TEXT_821);
d3860 1
a3860 1
    stringBuffer.append(TEXT_822);
d3865 1
a3865 1
    stringBuffer.append(TEXT_823);
d3867 1
a3867 1
    stringBuffer.append(TEXT_824);
d3869 1
a3869 1
    stringBuffer.append(TEXT_825);
d3871 1
a3871 1
    stringBuffer.append(TEXT_826);
d3875 1
a3875 1
    stringBuffer.append(TEXT_827);
d3877 1
a3877 1
    stringBuffer.append(TEXT_828);
d3879 1
a3879 1
    stringBuffer.append(TEXT_829);
d3883 1
a3883 1
    stringBuffer.append(TEXT_830);
d3885 1
a3885 1
    stringBuffer.append(TEXT_831);
d3889 1
a3889 1
    stringBuffer.append(TEXT_832);
d3893 1
a3893 1
    stringBuffer.append(TEXT_833);
d3901 1
a3901 1
    stringBuffer.append(TEXT_834);
d3906 1
a3906 1
    stringBuffer.append(TEXT_835);
d3916 1
a3916 1
    stringBuffer.append(TEXT_836);
d3918 1
a3918 1
    stringBuffer.append(TEXT_837);
d3920 1
a3920 1
    stringBuffer.append(TEXT_838);
d3922 1
a3922 1
    stringBuffer.append(TEXT_839);
d3926 1
a3926 1
    stringBuffer.append(TEXT_840);
d3928 1
a3928 1
    stringBuffer.append(TEXT_841);
d3930 1
a3930 1
    stringBuffer.append(TEXT_842);
d3934 1
a3934 1
    stringBuffer.append(TEXT_843);
d3939 1
a3939 1
    stringBuffer.append(TEXT_844);
d3941 1
a3941 1
    stringBuffer.append(TEXT_845);
d3943 1
a3943 1
    stringBuffer.append(TEXT_846);
d3947 1
a3947 1
    stringBuffer.append(TEXT_847);
d3951 1
a3951 1
    stringBuffer.append(TEXT_848);
d3956 1
a3956 1
    stringBuffer.append(TEXT_849);
d3960 4
d3965 1
a3965 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d3969 1
a3969 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d3971 1
a3971 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d3973 1
a3973 1
    stringBuffer.append(_getDiagramCode);
d3975 1
a3975 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d3977 3
a3979 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d3981 1
a3981 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d3983 1
a3983 3
    
	if (_includeUncontainedLinks) {

a3984 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_860);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_861);
d3989 1
a3989 1
    stringBuffer.append(TEXT_862);
d3991 1
a3991 1
    stringBuffer.append(TEXT_863);
d3993 1
a3993 1
    stringBuffer.append(TEXT_864);
d3998 1
a3998 1
    stringBuffer.append(TEXT_865);
d4000 1
a4000 1
    stringBuffer.append(TEXT_866);
d4004 1
a4004 1
    stringBuffer.append(TEXT_867);
d4008 1
a4008 1
    stringBuffer.append(TEXT_868);
d4012 1
a4012 1
    stringBuffer.append(TEXT_869);
d4019 1
a4019 1
    stringBuffer.append(TEXT_870);
d4023 1
a4023 1
    stringBuffer.append(TEXT_871);
d4025 1
a4025 1
    stringBuffer.append(TEXT_872);
d4027 1
a4027 1
    stringBuffer.append(TEXT_873);
d4032 1
a4032 1
    stringBuffer.append(TEXT_874);
d4034 1
a4034 1
    stringBuffer.append(TEXT_875);
d4038 1
a4038 1
    stringBuffer.append(TEXT_876);
d4042 4
d4049 1
a4049 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor"));
d4051 1
a4051 1
    stringBuffer.append(genDiagram.isSynchronized());
d4053 1
a4053 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d4055 1
a4055 1
    stringBuffer.append(_getViewCode);
d4057 1
a4057 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher"));
d4059 1
a4059 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d4061 1
a4061 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d4063 1
a4063 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
a4064 4
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_887);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_888);
d4071 2
d4074 1
d4076 1
a4077 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
a4078 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d4080 1
d4082 1
a4085 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_897);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_898);
d4089 1
a4089 1
    stringBuffer.append(TEXT_899);
d4097 1
a4097 1
    stringBuffer.append(TEXT_900);
d4101 4
d4106 1
a4106 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d4108 1
a4108 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d4110 1
a4110 1
    stringBuffer.append(primaryView);
d4112 1
a4112 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4114 1
a4114 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d4118 1
a4118 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d4120 1
a4120 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
a4123 2150
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
    stringBuffer.append(TEXT_911);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_912);
    
}

    stringBuffer.append(TEXT_913);
    
if (!isFixedFontSetInFigure) {

    stringBuffer.append(TEXT_914);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_915);
    
}

    stringBuffer.append(TEXT_916);
    stringBuffer.append(TEXT_917);
    stringBuffer.append(TEXT_918);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_919);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_920);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_921);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_922);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_923);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_924);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_925);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_926);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_927);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_928);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_929);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_930);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_931);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_932);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_933);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_934);
    stringBuffer.append(TEXT_935);
    stringBuffer.append(TEXT_936);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_937);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_938);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_939);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_940);
    stringBuffer.append(TEXT_941);
    stringBuffer.append(TEXT_942);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_943);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_944);
    stringBuffer.append(TEXT_945);
    stringBuffer.append(TEXT_946);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_947);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_948);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_949);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_950);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_951);
    stringBuffer.append(TEXT_952);
    stringBuffer.append(TEXT_953);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_954);
    stringBuffer.append(TEXT_955);
    stringBuffer.append(TEXT_956);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_957);
    stringBuffer.append(TEXT_958);
    stringBuffer.append(TEXT_959);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_960);
    stringBuffer.append(TEXT_961);
    stringBuffer.append(TEXT_962);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_963);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_964);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_965);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_966);
    stringBuffer.append(TEXT_967);
    stringBuffer.append(TEXT_968);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_969);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_970);
    
for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	boolean isStatic = true;
	boolean isListLayout = !isXYLayout;

    stringBuffer.append(TEXT_971);
    
if (genDiagram.getPalette() != null) {

    stringBuffer.append(TEXT_972);
    if (isStatic) {
    stringBuffer.append(TEXT_973);
    }
    stringBuffer.append(TEXT_974);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_975);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_976);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_977);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_978);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_979);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_980);
    if (!isListLayout) {
    stringBuffer.append(TEXT_981);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_982);
    }
    stringBuffer.append(TEXT_983);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_984);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_985);
    
	if (next.getDomainMetaClass().isMapEntry()) {
	/*Workaround for Ecore example: map entries cannot be created using factory, only using reflective EFactory.create() method*/

    stringBuffer.append(TEXT_986);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_987);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_988);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_989);
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_990);
    
	} else {

    stringBuffer.append(TEXT_991);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_992);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_993);
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_994);
    
	}

    stringBuffer.append(TEXT_995);
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
    stringBuffer.append(TEXT_996);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
    stringBuffer.append(TEXT_997);
    stringBuffer.append(next.getUniqueIdentifier());
    stringBuffer.append(TEXT_998);
    if (next.getDomainMetaClass().isExternalInterface()) {
    stringBuffer.append(TEXT_999);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1000);
    }
    stringBuffer.append(TEXT_1001);
    
	TypeModelFacet facet = next.getModelFacet();
	GenFeature childFeature = facet.getChildMetaFeature();
	GenFeature containmentFeature = facet.getContainmentMetaFeature();
	{
		GenFeature _feature = containmentFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1002);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1003);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1004);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1005);
    
	} else {

    stringBuffer.append(TEXT_1006);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1007);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1008);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1009);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1010);
    
	}
}

    
	}
	if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
		GenFeature _feature = childFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1011);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1012);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1013);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1014);
    
	} else {

    stringBuffer.append(TEXT_1015);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1016);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1017);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1018);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1019);
    
	}
}

    stringBuffer.append(TEXT_1020);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1021);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1022);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1023);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1024);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1025);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1026);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1027);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1028);
    
	} else {

    stringBuffer.append(TEXT_1029);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1030);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1031);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1032);
    
	}

    
	if (!isListLayout) {
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_1033);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_1034);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_1035);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_1036);
    
	}

    stringBuffer.append(TEXT_1037);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_1038);
    if (next.getDomainMetaClass().isExternalInterface()) {
    stringBuffer.append(TEXT_1039);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1040);
    }
    stringBuffer.append(TEXT_1041);
    if(!isListLayout) {
    stringBuffer.append(TEXT_1042);
    } else {
    stringBuffer.append(TEXT_1043);
    }
    stringBuffer.append(TEXT_1044);
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_1045);
    
}

    
}
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass outgoingClass;
	String createCommandNameInfix;
	String reconnectCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();

    stringBuffer.append(TEXT_1046);
    stringBuffer.append(reconnectCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1047);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_1048);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_1049);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1050);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1051);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1052);
    stringBuffer.append(reconnectCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1053);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
    stringBuffer.append(TEXT_1054);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_1055);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1056);
    stringBuffer.append(reconnectCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1057);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_1058);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1059);
    
	if (linkConstraints != null) {

    stringBuffer.append(TEXT_1060);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1061);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_1062);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1063);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_1064);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1065);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_1066);
    
	} else {

    stringBuffer.append(TEXT_1067);
    
	}

    stringBuffer.append(TEXT_1068);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			if (containmentFeature == null) {

    stringBuffer.append(TEXT_1069);
    
			} else {

    stringBuffer.append(TEXT_1070);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_1071);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_1072);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1073);
    stringBuffer.append(containmentFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_1074);
    
				{
					GenFeature _feature = containmentFeature;
					String _ownerInstance = "container";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = containmentFeature.getGenClass();

    stringBuffer.append(TEXT_1075);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1076);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1077);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1078);
    
	} else {

    stringBuffer.append(TEXT_1079);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1080);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1081);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1082);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1083);
    
	}
}

    
				}
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					{
						GenFeature _feature = childFeature;
						String _ownerInstance = "container";
						String _exceedsUpperBound = "return false;";
						GenClass _ownerGenClass = containmentFeature.getGenClass();

    stringBuffer.append(TEXT_1084);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1085);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1086);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1087);
    
	} else {

    stringBuffer.append(TEXT_1088);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1089);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1090);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1091);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1092);
    
	}
}

    
					}
				}
			}
			//No need to check the size of the source or target features: their size does not change
			//Still need to check the eOpposite() of the source feature
			GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
			GenFeature sourceReverseFeature = sourceFeature == null ? null : sourceFeature.getReverse();
			if (sourceReverseFeature != null && !sourceReverseFeature.isDerived() && sourceReverseFeature != containmentFeature && sourceReverseFeature != childFeature) {
				GenFeature _feature = sourceReverseFeature;
				String _ownerInstance = "newSource.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1093);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1094);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1095);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1096);
    
	} else {

    stringBuffer.append(TEXT_1097);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1098);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1099);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1100);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1101);
    
	}
}

    
			}
{
	String _source = "newSource.getElement()";
	String _target = "edge.getTarget().getElement()";

    stringBuffer.append(TEXT_1102);
    
			if (linkConstraints != null) {

    stringBuffer.append(TEXT_1103);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_1104);
    stringBuffer.append(_source);
    stringBuffer.append(TEXT_1105);
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1106);
    
			}

    
}	//local declarations for linkConstraints.jetinc

    stringBuffer.append(TEXT_1107);
    
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			{
				GenFeature _feature = metaFeature;
				String _ownerInstance = "newSource.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1108);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1109);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1110);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1111);
    
	} else {

    stringBuffer.append(TEXT_1112);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1113);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1114);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1115);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1116);
    
	}
}

    
			}
{
	String _source = "newSource.getElement()";
	String _target = "edge.getTarget().getElement()";

    stringBuffer.append(TEXT_1117);
    
			if (linkConstraints != null) {

    stringBuffer.append(TEXT_1118);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_1119);
    stringBuffer.append(_source);
    stringBuffer.append(TEXT_1120);
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1121);
    
			}

    
}	//local declarations for linkConstraints.jetinc

    stringBuffer.append(TEXT_1122);
    
		} else {

    stringBuffer.append(TEXT_1123);
    
		}

    stringBuffer.append(TEXT_1124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_1127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeSourceCommand"));
    stringBuffer.append(TEXT_1130);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			boolean setSource = sourceFeature != null;
			boolean setChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
			if (containmentFeature != null) {
				if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
					EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
					if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
						setSource = false;
					}
				}
			}
			if (containmentFeature != null || setChild) {

    stringBuffer.append(TEXT_1131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1132);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1133);
    stringBuffer.append(containmentFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_1134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1135);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1137);
    
			}
			if (containmentFeature != null) {
				if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1139);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1140);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1141);
    
				} else {

    stringBuffer.append(TEXT_1142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1143);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1144);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1146);
    
				}

    stringBuffer.append(TEXT_1147);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1148);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1149);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1150);
    
			}
			if (setChild) {
				if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1152);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1153);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1154);
    
				} else {

    stringBuffer.append(TEXT_1155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1156);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1157);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1159);
    
				}

    stringBuffer.append(TEXT_1160);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1161);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1162);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1163);
    
			}

    stringBuffer.append(TEXT_1164);
    
			if (setSource) {
				if (sourceFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1166);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1167);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_1169);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1170);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1171);
    
				} else {

    stringBuffer.append(TEXT_1172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1173);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1174);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1175);
    
				}
			}
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			if (metaFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1176);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1177);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1178);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1179);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_1180);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1181);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1182);
    
			} else {

    stringBuffer.append(TEXT_1183);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1184);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1185);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1186);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1188);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1189);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1190);
    
			}
		}

    stringBuffer.append(TEXT_1191);
    stringBuffer.append(TEXT_1192);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {

    stringBuffer.append(TEXT_1193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_1196);
    
		}

    
	if (linkConstraints != null) {
		String _edge = "edge";

    stringBuffer.append(TEXT_1197);
    stringBuffer.append(TEXT_1198);
    
	//input: _edge : String

    stringBuffer.append(TEXT_1199);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1201);
    
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();
		GenFeature targetFeature = modelFacet.getTargetMetaFeature();
		//See creation of links in NodeEditPart

		boolean removeSource = sourceFeature != null;
		boolean removeTarget = targetFeature != null;
		boolean removeChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
		if (containmentFeature != null) {
			if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
				EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
				if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeSource = false;
				}
			}
			if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
				EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
				if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeTarget = false;
				}
			}

    stringBuffer.append(TEXT_1202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1203);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1204);
    
			if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1206);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1207);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1208);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1209);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1210);
    
			} else {

    stringBuffer.append(TEXT_1211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1212);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1213);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1214);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1216);
    
			}
		} else {

    stringBuffer.append(TEXT_1217);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1218);
    
		}
		if (removeChild) {
			if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1220);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1221);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1222);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1223);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1224);
    
			} else {

    stringBuffer.append(TEXT_1225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1226);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1227);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1228);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1229);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1230);
    
			}
		}
		if (removeSource) {
			if (sourceFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1231);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1232);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1233);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1234);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1235);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1236);
    
			} else {

    stringBuffer.append(TEXT_1237);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1238);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1239);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1240);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1241);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1242);
    
			}
		}
		if (removeTarget) {
			if (targetFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1243);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1244);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1245);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1246);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1247);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1248);
    
			} else {

    stringBuffer.append(TEXT_1249);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1250);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1251);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1252);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1253);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1254);
    
			}
		}

    stringBuffer.append(TEXT_1255);
    
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		if (metaFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1256);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1257);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1258);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1259);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1260);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1261);
    
		} else {

    stringBuffer.append(TEXT_1262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1263);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1264);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1265);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1266);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1267);
    
		}

    
	}

    stringBuffer.append(TEXT_1268);
    
	}

    stringBuffer.append(TEXT_1269);
    
	if (palette != null) {

    stringBuffer.append(TEXT_1270);
    stringBuffer.append(createCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1271);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_1272);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1273);
    stringBuffer.append(createCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1274);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_1275);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1276);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			if (containmentFeature == null) {

    stringBuffer.append(TEXT_1277);
    
			} else {

    stringBuffer.append(TEXT_1278);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_1279);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_1280);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1281);
    stringBuffer.append(containmentFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_1282);
    
				{
					GenFeature _feature = containmentFeature;
					String _ownerInstance = "container";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = containmentFeature.getGenClass();

    stringBuffer.append(TEXT_1283);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1284);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1285);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1286);
    
	} else {

    stringBuffer.append(TEXT_1287);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1288);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1289);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1290);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1291);
    
	}
}

    
				}
				GenFeature childFeature = modelFacet.getChildMetaFeature();
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					{
						GenFeature _feature = childFeature;
						String _ownerInstance = "container";
						String _exceedsUpperBound = "return false;";
						GenClass _ownerGenClass = containmentFeature.getGenClass();

    stringBuffer.append(TEXT_1292);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1293);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1294);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1295);
    
	} else {

    stringBuffer.append(TEXT_1296);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1297);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1298);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1299);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1300);
    
	}
}

    
					}
				}
				//Need to check the eOpposite() of the source feature
				GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
				GenFeature sourceReverseFeature = sourceFeature == null ? null : sourceFeature.getReverse();
				if (sourceReverseFeature != null && !sourceReverseFeature.isDerived() && sourceReverseFeature != containmentFeature && sourceReverseFeature != childFeature) {
					GenFeature _feature = sourceReverseFeature;
					String _ownerInstance = "source.getElement()";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1301);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1302);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1303);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1304);
    
	} else {

    stringBuffer.append(TEXT_1305);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1306);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1307);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1308);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1309);
    
	}
}

    
				}
{
	String _source = "source.getElement()";
	String _target = "null";

    stringBuffer.append(TEXT_1310);
    
			if (linkConstraints != null) {

    stringBuffer.append(TEXT_1311);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_1312);
    stringBuffer.append(_source);
    stringBuffer.append(TEXT_1313);
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1314);
    
			}

    
}	//local declarations for linkConstraints.jetinc

    stringBuffer.append(TEXT_1315);
    
			}
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		{
			GenFeature _feature = metaFeature;
			String _ownerInstance = "source.getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1316);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1317);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1318);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1319);
    
	} else {

    stringBuffer.append(TEXT_1320);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1321);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1322);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1323);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1324);
    
	}
}

    
		}
{
	String _source = "source.getElement()";
	String _target = "null";

    stringBuffer.append(TEXT_1325);
    
			if (linkConstraints != null) {

    stringBuffer.append(TEXT_1326);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_1327);
    stringBuffer.append(_source);
    stringBuffer.append(TEXT_1328);
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1329);
    
			}

    
}	//local declarations for linkConstraints.jetinc

    stringBuffer.append(TEXT_1330);
    
		} else {

    stringBuffer.append(TEXT_1331);
    
		}

    stringBuffer.append(TEXT_1332);
    stringBuffer.append(TEXT_1333);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {

    stringBuffer.append(TEXT_1334);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1335);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1336);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_1337);
    
		}

    stringBuffer.append(TEXT_1338);
    
	}	//if there's palette 
}	//outgoing links

    
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass incomingClass;
	String createCommandNameInfix;
	String reconnectCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		incomingClass = metaFeature.getTypeGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();

    stringBuffer.append(TEXT_1339);
    stringBuffer.append(reconnectCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1340);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_1341);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_1342);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1343);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1344);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1345);
    stringBuffer.append(reconnectCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1346);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
    stringBuffer.append(TEXT_1347);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_1348);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1349);
    stringBuffer.append(reconnectCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1350);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_1351);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1352);
    
	if (linkConstraints != null) {

    stringBuffer.append(TEXT_1353);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1354);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_1355);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1356);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_1357);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1358);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_1359);
    
	} else {

    stringBuffer.append(TEXT_1360);
    
	}

    stringBuffer.append(TEXT_1361);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			//Need to check the eOpposite() of the target feature
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			GenFeature targetReverseFeature = targetFeature == null ? null : targetFeature.getReverse();
			if (targetReverseFeature != null && !targetReverseFeature.isDerived()) {
				GenFeature _feature = targetReverseFeature;
				String _ownerInstance = "newTarget.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1362);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1363);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1364);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1365);
    
	} else {

    stringBuffer.append(TEXT_1366);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1367);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1368);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1369);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1370);
    
	}
}

    
			}
{
	String _source = "edge.getSource().getElement()";
	String _target = "newTarget.getElement()";

    stringBuffer.append(TEXT_1371);
    
			if (linkConstraints != null) {

    stringBuffer.append(TEXT_1372);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_1373);
    stringBuffer.append(_source);
    stringBuffer.append(TEXT_1374);
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1375);
    
			}

    
}	//local declarations for linkConstraints.jetinc

    stringBuffer.append(TEXT_1376);
    
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			//Need to check eOpposite() of the metaFeature
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			GenFeature reverseMetaFeature = metaFeature == null ? null : metaFeature.getReverse();
			if (reverseMetaFeature != null && !reverseMetaFeature.isDerived()) {
				GenFeature _feature = reverseMetaFeature;
				String _ownerInstance = "newTarget.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1377);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1378);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1379);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1380);
    
	} else {

    stringBuffer.append(TEXT_1381);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1382);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1383);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1384);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1385);
    
	}
}

    
			}
{
	String _source = "edge.getSource().getElement()";
	String _target = "newTarget.getElement()";

    stringBuffer.append(TEXT_1386);
    
			if (linkConstraints != null) {

    stringBuffer.append(TEXT_1387);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_1388);
    stringBuffer.append(_source);
    stringBuffer.append(TEXT_1389);
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1390);
    
			}

    
}	//local declarations for linkConstraints.jetinc

    stringBuffer.append(TEXT_1391);
    
		} else {

    stringBuffer.append(TEXT_1392);
    
		}

    stringBuffer.append(TEXT_1393);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1394);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1395);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_1396);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1397);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1398);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeTargetCommand"));
    stringBuffer.append(TEXT_1399);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			if (targetFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1400);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1401);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1402);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1403);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_1404);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1405);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1406);
    
			} else {

    stringBuffer.append(TEXT_1407);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1408);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1409);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1410);
    
			}
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			if (metaFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1411);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1412);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1413);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1414);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_1415);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1416);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1417);
    
			} else {

    stringBuffer.append(TEXT_1418);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1419);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1420);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1421);
    
			}
		}

    stringBuffer.append(TEXT_1422);
    
	if (linkConstraints != null) {
		String _edge = "edge";

    stringBuffer.append(TEXT_1423);
    stringBuffer.append(TEXT_1424);
    
	//input: _edge : String

    stringBuffer.append(TEXT_1425);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1426);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1427);
    
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();
		GenFeature targetFeature = modelFacet.getTargetMetaFeature();
		//See creation of links in NodeEditPart

		boolean removeSource = sourceFeature != null;
		boolean removeTarget = targetFeature != null;
		boolean removeChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
		if (containmentFeature != null) {
			if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
				EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
				if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeSource = false;
				}
			}
			if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
				EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
				if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeTarget = false;
				}
			}

    stringBuffer.append(TEXT_1428);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1429);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1430);
    
			if (containmentFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1431);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1432);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1433);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1434);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1435);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1436);
    
			} else {

    stringBuffer.append(TEXT_1437);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1438);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1439);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1440);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1441);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1442);
    
			}
		} else {

    stringBuffer.append(TEXT_1443);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1444);
    
		}
		if (removeChild) {
			if (childFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1445);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1446);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1447);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1448);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1449);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1450);
    
			} else {

    stringBuffer.append(TEXT_1451);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1452);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1453);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1454);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1455);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1456);
    
			}
		}
		if (removeSource) {
			if (sourceFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1457);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1458);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1459);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1460);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1461);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1462);
    
			} else {

    stringBuffer.append(TEXT_1463);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1464);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1465);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1466);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1467);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1468);
    
			}
		}
		if (removeTarget) {
			if (targetFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1469);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1470);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1471);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1472);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1473);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1474);
    
			} else {

    stringBuffer.append(TEXT_1475);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1476);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1477);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1478);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1479);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1480);
    
			}
		}

    stringBuffer.append(TEXT_1481);
    
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		if (metaFeature.getEcoreFeature().isMany()) {

    stringBuffer.append(TEXT_1482);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1483);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1484);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1485);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1486);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1487);
    
		} else {

    stringBuffer.append(TEXT_1488);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1489);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1490);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1491);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1492);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1493);
    
		}

    
	}

    stringBuffer.append(TEXT_1494);
    
	}

    stringBuffer.append(TEXT_1495);
    
	if (palette != null) {

    stringBuffer.append(TEXT_1496);
    stringBuffer.append(createCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1497);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
    stringBuffer.append(TEXT_1498);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1499);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1500);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_1501);
    stringBuffer.append(createCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_1502);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_1503);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1504);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1505);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1506);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1507);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1508);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_1509);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenClass linkClass = modelFacet.getMetaClass();

    stringBuffer.append(TEXT_1510);
    stringBuffer.append(importManager.getImportedName(importManager.getImportedName(linkClass.getQualifiedInterfaceName())));
    stringBuffer.append(TEXT_1511);
    stringBuffer.append(importManager.getImportedName(linkClass.getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_1512);
    stringBuffer.append(linkClass.getClassifierAccessorName());
    stringBuffer.append(TEXT_1513);
    if (linkClass.isExternalInterface()) {
    stringBuffer.append(TEXT_1514);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1515);
    }
    stringBuffer.append(TEXT_1516);
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
    stringBuffer.append(TEXT_1517);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
    stringBuffer.append(TEXT_1518);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_1519);
    if (linkClass.isExternalInterface()) {
    stringBuffer.append(TEXT_1520);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1521);
    }
    stringBuffer.append(TEXT_1522);
    
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {

    stringBuffer.append(TEXT_1523);
    
		}

    stringBuffer.append(TEXT_1524);
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_1525);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1526);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_1527);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {

    stringBuffer.append(TEXT_1528);
    
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			//source/link features seem to be pointing from link to its ends, not vice versa.
			//Anyway, if there is containment feature and it is not opposite to either the source/target, we should add containment, 
			//otherwise we will have problems with saving uncontained EObjects.
			boolean addSource = sourceFeature != null;
			boolean addTarget = targetFeature != null;
			boolean addChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
			if (containmentFeature != null) {
				if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
					EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
					if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
						addSource = false;
					}
				}
				if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
					EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
					if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
						addTarget = false;
					}
				}

    stringBuffer.append(TEXT_1529);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1530);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1531);
    stringBuffer.append(containmentFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_1532);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1533);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1534);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1535);
    
			}
			if (addChild) {

    stringBuffer.append(TEXT_1536);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1537);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1538);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1539);
    
			}
			if (addSource) {
				{
					GenFeature _feature = sourceFeature;
					String _ownerInstance = "createdDomainElement";
					String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
					GenClass _ownerGenClass = modelFacet.getMetaClass();

    stringBuffer.append(TEXT_1540);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1541);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1542);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1543);
    
	} else {

    stringBuffer.append(TEXT_1544);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1545);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1546);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1547);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1548);
    
	}
}

    
				}

    stringBuffer.append(TEXT_1549);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1550);
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1551);
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1552);
    
			}
			if (addTarget) {
				{
					GenFeature _feature = targetFeature;
					String _ownerInstance = "createdDomainElement";
					String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
					GenClass _ownerGenClass = modelFacet.getMetaClass();

    stringBuffer.append(TEXT_1553);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1554);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1555);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1556);
    
	} else {

    stringBuffer.append(TEXT_1557);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1558);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1559);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1560);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1561);
    
	}
}

    
				}
				//Need to check the eOpposite() of the target feature
				GenFeature targetReverseFeature = targetFeature == null ? null : targetFeature.getReverse();
				if (targetReverseFeature != null && !targetReverseFeature.isDerived()) {
					GenFeature _feature = targetReverseFeature;
					String _ownerInstance = "target.getElement()";
					String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
					GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1562);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1563);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1564);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1565);
    
	} else {

    stringBuffer.append(TEXT_1566);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1567);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1568);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1569);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1570);
    
	}
}

    
				}

    stringBuffer.append(TEXT_1571);
    stringBuffer.append(importManager.getImportedName(targetFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1572);
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1573);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1574);
    
			}

    stringBuffer.append(TEXT_1575);
    
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			//Need to check eOpposite() of the metaFeature
			GenFeature reverseMetaFeature = metaFeature == null ? null : metaFeature.getReverse();
			if (reverseMetaFeature != null && !reverseMetaFeature.isDerived()) {
				GenFeature _feature = reverseMetaFeature;
				String _ownerInstance = "target.getElement()";
				String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
				GenClass _ownerGenClass = null;

    stringBuffer.append(TEXT_1576);
    
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {

    stringBuffer.append(TEXT_1577);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
    stringBuffer.append(TEXT_1578);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1579);
    
	} else {

    stringBuffer.append(TEXT_1580);
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
    stringBuffer.append(TEXT_1581);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1582);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1583);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1584);
    
	}
}

    
			}

    stringBuffer.append(TEXT_1585);
    stringBuffer.append(importManager.getImportedName(metaFeature.getEcoreFeature().isMany()? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1586);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1587);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1588);
    
		}

    stringBuffer.append(TEXT_1589);
    stringBuffer.append(TEXT_1590);
    
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {

    stringBuffer.append(TEXT_1591);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1592);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_1593);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_1594);
    
		}

    stringBuffer.append(TEXT_1595);
    
{
	String _source = "source.getElement()";
	String _target = "target.getElement()";

    stringBuffer.append(TEXT_1596);
d4125 1
a4125 1
			if (linkConstraints != null) {
d4127 1
a4127 7
    stringBuffer.append(TEXT_1597);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_1598);
    stringBuffer.append(_source);
    stringBuffer.append(TEXT_1599);
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1600);
d4129 1
a4129 1
			}
d4131 3
d4135 1
a4135 1
}	//local declarations for linkConstraints.jetinc
d4137 91
a4227 5
    stringBuffer.append(TEXT_1601);
    
	}

    }/*when there's palette*/
d4232 1
a4232 1
    stringBuffer.append(TEXT_1602);
d4234 1
a4234 1
    stringBuffer.append(TEXT_1603);
d4238 1
a4238 1
    stringBuffer.append(TEXT_1604);
d4245 1
a4245 1
    stringBuffer.append(TEXT_1605);
d4247 1
a4247 1
    stringBuffer.append(TEXT_1606);
d4249 3
a4251 3
    stringBuffer.append(TEXT_1607);
    stringBuffer.append(TEXT_1608);
    stringBuffer.append(TEXT_1609);
d4253 1
a4253 1
    stringBuffer.append(TEXT_1610);
d4255 1
a4255 1
    stringBuffer.append(TEXT_1611);
d4257 1
a4257 1
    stringBuffer.append(TEXT_1612);
d4259 1
a4259 1
    stringBuffer.append(TEXT_1613);
d4261 1
a4261 1
    stringBuffer.append(TEXT_1614);
d4263 1
a4263 1
    stringBuffer.append(TEXT_1615);
d4265 1
a4265 1
    stringBuffer.append(TEXT_1616);
d4267 5
a4271 3
    stringBuffer.append(TEXT_1617);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1618);
d4273 1
a4273 1
    stringBuffer.append(TEXT_1619);
d4275 1
a4275 1
    stringBuffer.append(TEXT_1620);
d4283 1
a4283 1
    stringBuffer.append(TEXT_1621);
d4285 1
a4285 1
    stringBuffer.append(TEXT_1622);
d4287 1
a4287 1
    stringBuffer.append(TEXT_1623);
d4291 1
a4291 1
    stringBuffer.append(TEXT_1624);
d4293 1
a4293 1
    stringBuffer.append(TEXT_1625);
d4295 1
a4295 1
    stringBuffer.append(TEXT_1626);
d4297 1
a4297 1
    stringBuffer.append(TEXT_1627);
d4301 1
a4301 1
    stringBuffer.append(TEXT_1628);
d4303 1
a4303 1
    stringBuffer.append(TEXT_1629);
d4305 1
a4305 1
    stringBuffer.append(TEXT_1630);
d4307 1
a4307 1
    stringBuffer.append(TEXT_1631);
d4309 1
a4309 1
    stringBuffer.append(TEXT_1632);
d4316 1
a4316 1
    stringBuffer.append(TEXT_1633);
d4318 1
a4318 1
    stringBuffer.append(TEXT_1634);
d4320 1
a4320 1
    stringBuffer.append(TEXT_1635);
d4322 1
a4322 1
    stringBuffer.append(TEXT_1636);
d4326 1
a4326 1
    stringBuffer.append(TEXT_1637);
d4328 1
a4328 1
    stringBuffer.append(TEXT_1638);
d4330 1
a4330 1
    stringBuffer.append(TEXT_1639);
d4332 1
a4332 1
    stringBuffer.append(TEXT_1640);
d4334 1
a4334 1
    stringBuffer.append(TEXT_1641);
d4338 1
a4338 1
    stringBuffer.append(TEXT_1642);
d4343 1
a4343 1
    stringBuffer.append(TEXT_1643);
d4345 1
a4345 1
    stringBuffer.append(TEXT_1644);
d4347 1
a4347 1
    stringBuffer.append(TEXT_1645);
d4349 1
a4349 1
    stringBuffer.append(TEXT_1646);
d4353 1
a4353 1
    stringBuffer.append(TEXT_1647);
d4355 1
a4355 1
    stringBuffer.append(TEXT_1648);
d4357 1
a4357 1
    stringBuffer.append(TEXT_1649);
d4359 1
a4359 1
    stringBuffer.append(TEXT_1650);
d4361 1
a4361 1
    stringBuffer.append(TEXT_1651);
d4366 1
a4366 1
    stringBuffer.append(TEXT_1652);
d4377 2
a4378 2
    stringBuffer.append(TEXT_1653);
    stringBuffer.append(TEXT_1654);
d4380 1
a4380 1
    stringBuffer.append(TEXT_1655);
d4382 1
a4382 1
    stringBuffer.append(TEXT_1656);
d4384 3
a4386 3
    stringBuffer.append(TEXT_1657);
    stringBuffer.append(TEXT_1658);
    stringBuffer.append(TEXT_1659);
d4388 1
a4388 1
    stringBuffer.append(TEXT_1660);
d4390 1
a4390 1
    stringBuffer.append(TEXT_1661);
d4392 1
a4392 1
    stringBuffer.append(TEXT_1662);
d4394 1
a4394 1
    stringBuffer.append(TEXT_1663);
d4396 1
a4396 1
    stringBuffer.append(TEXT_1664);
d4398 1
a4398 1
    stringBuffer.append(TEXT_1665);
d4400 1
a4400 1
    stringBuffer.append(TEXT_1666);
d4402 1
a4402 1
    stringBuffer.append(TEXT_1667);
d4404 1
a4404 1
    stringBuffer.append(TEXT_1668);
d4406 1
a4406 1
    stringBuffer.append(TEXT_1669);
d4408 1
a4408 1
    stringBuffer.append(TEXT_1670);
d4414 1
a4414 1
    stringBuffer.append(TEXT_1671);
d4416 1
a4416 1
    stringBuffer.append(TEXT_1672);
d4418 1
a4418 1
    stringBuffer.append(TEXT_1673);
d4420 1
a4420 1
    stringBuffer.append(TEXT_1674);
d4422 1
a4422 1
    stringBuffer.append(TEXT_1675);
d4424 1
a4424 1
    stringBuffer.append(TEXT_1676);
d4426 1
a4426 1
    stringBuffer.append(TEXT_1677);
d4428 1
a4428 1
    stringBuffer.append(TEXT_1678);
d4430 1
a4430 1
    stringBuffer.append(TEXT_1679);
d4432 1
a4432 1
    stringBuffer.append(TEXT_1680);
d4434 1
a4434 1
    stringBuffer.append(TEXT_1681);
d4441 1
a4441 1
    stringBuffer.append(TEXT_1682);
d4444 1
a4444 1
    stringBuffer.append(TEXT_1683);
d4446 1
a4446 1
    stringBuffer.append(TEXT_1684);
d4448 1
a4448 1
    stringBuffer.append(TEXT_1685);
d4450 1
a4450 1
    stringBuffer.append(TEXT_1686);
d4452 1
a4452 1
    stringBuffer.append(TEXT_1687);
d4454 1
a4454 1
    stringBuffer.append(TEXT_1688);
d4456 1
a4456 1
    stringBuffer.append(TEXT_1689);
d4458 1
a4458 1
    stringBuffer.append(TEXT_1690);
d4462 1
a4462 1
    stringBuffer.append(TEXT_1691);
d4465 1
a4465 1
    stringBuffer.append(TEXT_1692);
d4467 1
a4467 1
    stringBuffer.append(TEXT_1693);
d4469 1
a4469 1
    stringBuffer.append(TEXT_1694);
d4471 1
a4471 1
    stringBuffer.append(TEXT_1695);
d4473 1
a4473 1
    stringBuffer.append(TEXT_1696);
d4475 1
a4475 1
    stringBuffer.append(TEXT_1697);
d4479 1
a4479 1
    stringBuffer.append(TEXT_1698);
d4481 1
a4481 1
    stringBuffer.append(TEXT_1699);
d4488 1
a4488 1
    stringBuffer.append(TEXT_1700);
d4492 1
a4492 1
    stringBuffer.append(TEXT_1701);
d4496 1
a4496 1
    stringBuffer.append(TEXT_1702);
d4500 2
a4501 2
    stringBuffer.append(TEXT_1703);
    stringBuffer.append(TEXT_1704);
d4503 1
a4503 1
    stringBuffer.append(TEXT_1705);
d4505 1
a4505 1
    stringBuffer.append(TEXT_1706);
d4507 1
a4507 1
    stringBuffer.append(TEXT_1707);
d4509 1
a4509 1
    stringBuffer.append(TEXT_1708);
d4511 1
a4511 1
    stringBuffer.append(TEXT_1709);
d4513 1
a4513 1
    stringBuffer.append(TEXT_1710);
d4515 1
a4515 1
    stringBuffer.append(TEXT_1711);
d4517 1
a4517 1
    stringBuffer.append(TEXT_1712);
d4519 1
a4519 1
    stringBuffer.append(TEXT_1713);
d4521 1
a4521 1
    stringBuffer.append(TEXT_1714);
d4523 1
a4523 1
    stringBuffer.append(TEXT_1715);
d4527 3
a4529 3
    stringBuffer.append(TEXT_1716);
    stringBuffer.append(TEXT_1717);
    stringBuffer.append(TEXT_1718);
d4531 1
a4531 1
    stringBuffer.append(TEXT_1719);
d4533 1
a4533 1
    stringBuffer.append(TEXT_1720);
d4537 1
a4537 1
    stringBuffer.append(TEXT_1721);
d4539 1
a4539 1
    stringBuffer.append(TEXT_1722);
d4541 1
a4541 1
    stringBuffer.append(TEXT_1723);
d4543 1
a4543 1
    stringBuffer.append(TEXT_1724);
d4545 1
a4545 1
    stringBuffer.append(TEXT_1725);
d4547 1
a4547 1
    stringBuffer.append(TEXT_1726);
d4549 1
a4549 1
    stringBuffer.append(TEXT_1727);
d4551 1
a4551 1
    stringBuffer.append(TEXT_1728);
d4553 1
a4553 1
    stringBuffer.append(TEXT_1729);
d4555 1
a4555 1
    stringBuffer.append(TEXT_1730);
d4559 1
a4559 1
    stringBuffer.append(TEXT_1731);
d4568 1
a4568 1
    stringBuffer.append(TEXT_1732);
d4570 1
a4570 1
    stringBuffer.append(TEXT_1733);
d4572 1
a4572 1
    stringBuffer.append(TEXT_1734);
d4583 1
a4583 1
    stringBuffer.append(TEXT_1735);
d4585 1
a4585 1
    stringBuffer.append(TEXT_1736);
d4587 1
a4587 1
    stringBuffer.append(TEXT_1737);
d4595 1
a4595 1
    stringBuffer.append(TEXT_1738);
d4597 1
a4597 1
    stringBuffer.append(TEXT_1739);
d4599 1
a4599 1
    stringBuffer.append(TEXT_1740);
d4601 1
a4601 1
    stringBuffer.append(TEXT_1741);
d4603 1
a4603 1
    stringBuffer.append(TEXT_1742);
d4605 1
a4605 1
    stringBuffer.append(TEXT_1743);
d4607 1
a4607 1
    stringBuffer.append(TEXT_1744);
d4609 1
a4609 1
    stringBuffer.append(TEXT_1745);
d4614 1
a4614 1
    stringBuffer.append(TEXT_1746);
d4616 1
a4616 1
    stringBuffer.append(TEXT_1747);
d4624 1
a4624 1
    stringBuffer.append(TEXT_1748);
d4626 1
a4626 1
    stringBuffer.append(TEXT_1749);
d4630 1
a4630 1
    stringBuffer.append(TEXT_1750);
d4632 1
a4632 1
    stringBuffer.append(TEXT_1751);
@


1.32
log
@Containers with XY layout should define adapter for SnapToHelper (used to be defined only for the DiagramEditPart)
@
text
@d426 348
a773 348
  protected final String TEXT_405 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_406 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_407 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_408 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_409 = " invisibleRectangle = new ";
  protected final String TEXT_410 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_411 = "());" + NL + "\t\t";
  protected final String TEXT_412 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_413 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_414 = NL + NL + "\t\t";
  protected final String TEXT_415 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL;
  protected final String TEXT_416 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_417 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_418 = " result = new ";
  protected final String TEXT_419 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_420 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_421 = " createNodeShape() {";
  protected final String TEXT_422 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_423 = "()";
  protected final String TEXT_424 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_425 = ";";
  protected final String TEXT_426 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_427 = ";";
  protected final String TEXT_428 = NL + "\t\t";
  protected final String TEXT_429 = " figure = new ";
  protected final String TEXT_430 = "();";
  protected final String TEXT_431 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_432 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_433 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_434 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_435 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_436 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_437 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_438 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_439 = " view = (";
  protected final String TEXT_440 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_441 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_442 = " decorationPane = new ";
  protected final String TEXT_443 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_444 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_445 = " imageFigure = new ";
  protected final String TEXT_446 = "(";
  protected final String TEXT_447 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_448 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_449 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_450 = " setupContentPane(";
  protected final String TEXT_451 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_452 = NL + "\t\t\t";
  protected final String TEXT_453 = " layout = new ";
  protected final String TEXT_454 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_455 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_456 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_457 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_458 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_459 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_460 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_461 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_462 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_463 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_464 = " childEditPart) {";
  protected final String TEXT_465 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_466 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_467 = ") childEditPart).";
  protected final String TEXT_468 = "(getPrimaryShape().";
  protected final String TEXT_469 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_470 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_471 = ") {" + NL + "\t\t\t";
  protected final String TEXT_472 = " pane = getPrimaryShape().";
  protected final String TEXT_473 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_474 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_475 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_476 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_477 = ") {" + NL + "\t\t\t";
  protected final String TEXT_478 = " pane = getPrimaryShape().";
  protected final String TEXT_479 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_480 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_481 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_482 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_483 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_484 = NL + "\t\tfor(";
  protected final String TEXT_485 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_486 = " nextChild = (";
  protected final String TEXT_487 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_488 = ".getVisualID(nextChild) == ";
  protected final String TEXT_489 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_490 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_491 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_492 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_493 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_494 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_495 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_496 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_497 = " getLabelEditPart(";
  protected final String TEXT_498 = " req) {" + NL + "\t\t";
  protected final String TEXT_499 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_500 = " view = (";
  protected final String TEXT_501 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_502 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_503 = NL + "\t\t\t\tcase ";
  protected final String TEXT_504 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_505 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_506 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_507 = " childEditPart) {";
  protected final String TEXT_508 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_509 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_510 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_511 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_512 = " root = (";
  protected final String TEXT_513 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_514 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_515 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_516 = " childEditPart) {";
  protected final String TEXT_517 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_518 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_519 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_520 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_521 = " childEditPart, int index) {";
  protected final String TEXT_522 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_523 = " labelFigure = ((";
  protected final String TEXT_524 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_525 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_526 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_527 = " childFigure = ((";
  protected final String TEXT_528 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_529 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_530 = " childEditPart) {";
  protected final String TEXT_531 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_532 = " labelFigure = ((";
  protected final String TEXT_533 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_534 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_535 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_536 = " childFigure = ((";
  protected final String TEXT_537 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_538 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_539 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_540 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_541 = " childEditPart = (";
  protected final String TEXT_542 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_543 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_544 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_545 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_546 = ";" + NL + "\t\t";
  protected final String TEXT_547 = " bounds = (";
  protected final String TEXT_548 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_549 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_550 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_551 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_552 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_553 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_554 = " getSourceConnectionAnchor(";
  protected final String TEXT_555 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_556 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_557 = " getSourceConnectionAnchor(";
  protected final String TEXT_558 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_559 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_560 = "  getTargetConnectionAnchor(";
  protected final String TEXT_561 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_562 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_563 = "  getTargetConnectionAnchor(";
  protected final String TEXT_564 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_565 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_566 = NL + "\t\tif (";
  protected final String TEXT_567 = ".class == key) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_568 = "(this);" + NL + "\t\t}";
  protected final String TEXT_569 = NL + "\t\tif (";
  protected final String TEXT_570 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_571 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_572 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_573 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_574 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_575 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_576 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_577 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_578 = NL;
  protected final String TEXT_579 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_580 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_581 = " domainModelEditDomain = ";
  protected final String TEXT_582 = ".getEditingDomain(";
  protected final String TEXT_583 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_584 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_585 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_586 = " {";
  protected final String TEXT_587 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_588 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_589 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_590 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_591 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_592 = " createFilter() {";
  protected final String TEXT_593 = NL + "\t\t\t";
  protected final String TEXT_594 = " filter = ";
  protected final String TEXT_595 = ".createFeatureFilter(";
  protected final String TEXT_596 = ".eINSTANCE.get";
  protected final String TEXT_597 = "());";
  protected final String TEXT_598 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_599 = ".createFeatureFilter(";
  protected final String TEXT_600 = ".eINSTANCE.get";
  protected final String TEXT_601 = "()));";
  protected final String TEXT_602 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_603 = ".createNotifierFilter(";
  protected final String TEXT_604 = ".getElement()));";
  protected final String TEXT_605 = NL + "\t\t\t";
  protected final String TEXT_606 = " filter = ";
  protected final String TEXT_607 = ".createNotifierFilter(";
  protected final String TEXT_608 = ".getElement());";
  protected final String TEXT_609 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_610 = NL + "\t\t\t";
  protected final String TEXT_611 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_612 = NL + "\t\t\t";
  protected final String TEXT_613 = " filter = ";
  protected final String TEXT_614 = ".NOT_TOUCH;";
  protected final String TEXT_615 = NL + "\t\t\treturn filter;";
  protected final String TEXT_616 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_617 = " getCreateNotationalElementCommand(";
  protected final String TEXT_618 = " descriptor) {";
  protected final String TEXT_619 = NL;
  protected final String TEXT_620 = "\t\t\t";
  protected final String TEXT_621 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_622 = NL + "\t\t\tcase ";
  protected final String TEXT_623 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_624 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_625 = "(";
  protected final String TEXT_626 = ", domainElement, ";
  protected final String TEXT_627 = "new ";
  protected final String TEXT_628 = "(0, 0, ";
  protected final String TEXT_629 = ", ";
  protected final String TEXT_630 = ")";
  protected final String TEXT_631 = NL + "null";
  protected final String TEXT_632 = ", ";
  protected final String TEXT_633 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_634 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_635 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_636 = " getSemanticChildNodes() {";
  protected final String TEXT_637 = NL;
  protected final String TEXT_638 = NL + "\treturn ";
  protected final String TEXT_639 = ".EMPTY_LIST;";
  protected final String TEXT_640 = NL + "\t";
  protected final String TEXT_641 = " result = new ";
  protected final String TEXT_642 = "();";
  protected final String TEXT_643 = NL + "\t";
  protected final String TEXT_644 = " viewObject = ";
  protected final String TEXT_645 = ";" + NL + "\t";
  protected final String TEXT_646 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_647 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_648 = NL + "\tfor(";
  protected final String TEXT_649 = " it = ";
  protected final String TEXT_650 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_651 = ") it.next();";
  protected final String TEXT_652 = NL + "\tnextValue = (";
  protected final String TEXT_653 = ")";
  protected final String TEXT_654 = ";";
  protected final String TEXT_655 = NL + "\tnodeVID = ";
  protected final String TEXT_656 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_657 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_658 = NL + "\tcase ";
  protected final String TEXT_659 = ".VISUAL_ID: {";
  protected final String TEXT_660 = NL + "\tif (";
  protected final String TEXT_661 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_662 = NL + "\t\tresult.add(new ";
  protected final String TEXT_663 = "(nextValue, nodeVID));";
  protected final String TEXT_664 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_665 = NL + "\t\t}";
  protected final String TEXT_666 = NL + "\t}";
  protected final String TEXT_667 = NL + "\t}";
  protected final String TEXT_668 = NL + "\treturn result;";
  protected final String TEXT_669 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_670 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_671 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_672 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_673 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_674 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_675 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_676 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_677 = " domainModelEditDomain = ";
  protected final String TEXT_678 = ".getEditingDomain(";
  protected final String TEXT_679 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_680 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_681 = NL;
  protected final String TEXT_682 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_683 = " domainModelEditDomain = ";
  protected final String TEXT_684 = ".getEditingDomain(";
  protected final String TEXT_685 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_686 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_687 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_688 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_689 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_690 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_691 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_692 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_693 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_694 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_695 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_696 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_697 = ".createEventTypeFilter(";
  protected final String TEXT_698 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_699 = ".createEventTypeFilter(";
  protected final String TEXT_700 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_701 = ".createEventTypeFilter(";
  protected final String TEXT_702 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_703 = ".createEventTypeFilter(";
  protected final String TEXT_704 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_705 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_706 = " createFilter() {";
  protected final String TEXT_707 = NL;
  protected final String TEXT_708 = NL + "\t\t\t";
  protected final String TEXT_709 = " filter = ";
  protected final String TEXT_710 = ".createFeatureFilter(";
  protected final String TEXT_711 = ".eINSTANCE.get";
  protected final String TEXT_712 = "());";
  protected final String TEXT_713 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_714 = ".createFeatureFilter(";
  protected final String TEXT_715 = ".eINSTANCE.get";
  protected final String TEXT_716 = "()));";
  protected final String TEXT_717 = NL;
  protected final String TEXT_718 = NL + "\t\t\t";
  protected final String TEXT_719 = " filter = ";
  protected final String TEXT_720 = ".createFeatureFilter(";
  protected final String TEXT_721 = ".eINSTANCE.get";
  protected final String TEXT_722 = "());";
  protected final String TEXT_723 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_724 = ".createFeatureFilter(";
  protected final String TEXT_725 = ".eINSTANCE.get";
  protected final String TEXT_726 = "()));";
  protected final String TEXT_727 = NL;
  protected final String TEXT_728 = NL + "\t\t\t";
  protected final String TEXT_729 = " filter = ";
  protected final String TEXT_730 = ".createFeatureFilter(";
  protected final String TEXT_731 = ".eINSTANCE.get";
  protected final String TEXT_732 = "());";
  protected final String TEXT_733 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_734 = ".createFeatureFilter(";
  protected final String TEXT_735 = ".eINSTANCE.get";
  protected final String TEXT_736 = "()));";
  protected final String TEXT_737 = NL;
  protected final String TEXT_738 = NL + "\t\t\t";
  protected final String TEXT_739 = " filter = ";
  protected final String TEXT_740 = ".createFeatureFilter(";
  protected final String TEXT_741 = ".eINSTANCE.get";
  protected final String TEXT_742 = "());";
  protected final String TEXT_743 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_744 = ".createFeatureFilter(";
  protected final String TEXT_745 = ".eINSTANCE.get";
  protected final String TEXT_746 = "()));";
  protected final String TEXT_747 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_748 = NL + "\t\t\t";
  protected final String TEXT_749 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_750 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_751 = NL + "\t\t\t";
  protected final String TEXT_752 = " filter = createUncontainedLinksFilter();";
d776 78
a853 78
  protected final String TEXT_755 = ".NOT_TOUCH;";
  protected final String TEXT_756 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_757 = " getCreateNotationalElementCommand(";
  protected final String TEXT_758 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_759 = " linkDescriptor = (";
  protected final String TEXT_760 = ") descriptor;";
  protected final String TEXT_761 = NL;
  protected final String TEXT_762 = "\t\t\t";
  protected final String TEXT_763 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_764 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_765 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_766 = NL + "\t\t\tcase ";
  protected final String TEXT_767 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_768 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_769 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_770 = NL + "\t\t\tcase ";
  protected final String TEXT_771 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_772 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_773 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_774 = "(";
  protected final String TEXT_775 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_776 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_777 = " getSemanticChildLinks() {";
  protected final String TEXT_778 = NL;
  protected final String TEXT_779 = "\t";
  protected final String TEXT_780 = " result = new ";
  protected final String TEXT_781 = "();";
  protected final String TEXT_782 = NL + "\t";
  protected final String TEXT_783 = " modelObject = ";
  protected final String TEXT_784 = ".getElement();" + NL + "\t";
  protected final String TEXT_785 = " nextValue;";
  protected final String TEXT_786 = NL + "\tint linkVID;";
  protected final String TEXT_787 = NL + "\tfor(";
  protected final String TEXT_788 = " it = ";
  protected final String TEXT_789 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_790 = ") it.next();";
  protected final String TEXT_791 = NL + "\tnextValue = (";
  protected final String TEXT_792 = ")";
  protected final String TEXT_793 = ";";
  protected final String TEXT_794 = NL + "\tlinkVID = ";
  protected final String TEXT_795 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_796 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_797 = NL + "\tcase ";
  protected final String TEXT_798 = ".VISUAL_ID: {";
  protected final String TEXT_799 = NL + "\tif (";
  protected final String TEXT_800 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_801 = NL + "\t\t";
  protected final String TEXT_802 = " source = (";
  protected final String TEXT_803 = ")";
  protected final String TEXT_804 = ";";
  protected final String TEXT_805 = NL + "\t\t";
  protected final String TEXT_806 = " source = ";
  protected final String TEXT_807 = ".getElement();";
  protected final String TEXT_808 = NL + "\t\t";
  protected final String TEXT_809 = " target = (";
  protected final String TEXT_810 = ")";
  protected final String TEXT_811 = ";";
  protected final String TEXT_812 = NL + "\t\t";
  protected final String TEXT_813 = " target = ";
  protected final String TEXT_814 = ".getElement();";
  protected final String TEXT_815 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_816 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_817 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_818 = NL + "\t}";
  protected final String TEXT_819 = NL + "\t}";
  protected final String TEXT_820 = NL + "\t}";
  protected final String TEXT_821 = NL + "\tfor(";
  protected final String TEXT_822 = " it = ";
  protected final String TEXT_823 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_824 = ") it.next();";
  protected final String TEXT_825 = NL + "\tnextValue = (";
  protected final String TEXT_826 = ")";
  protected final String TEXT_827 = ";";
  protected final String TEXT_828 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_829 = NL + "\t\tresult.add(new ";
  protected final String TEXT_830 = "(modelObject, nextValue, null, ";
  protected final String TEXT_831 = ".VISUAL_ID));";
  protected final String TEXT_832 = NL + "\t}";
d855 118
a972 118
  protected final String TEXT_834 = NL + "\treturn result;";
  protected final String TEXT_835 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_836 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_837 = " result = new ";
  protected final String TEXT_838 = "();" + NL + "\t\t\t";
  protected final String TEXT_839 = " allLinks = ";
  protected final String TEXT_840 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_841 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_842 = " next = (";
  protected final String TEXT_843 = ") it.next();";
  protected final String TEXT_844 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_845 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_846 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_847 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_848 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_849 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_850 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_851 = ".VISUAL_ID:";
  protected final String TEXT_852 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_853 = NL + "\t\t\t\t} else {";
  protected final String TEXT_854 = NL + "\t\t\t\t}";
  protected final String TEXT_855 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_856 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_857 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_858 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_859 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_860 = ".VISUAL_ID:";
  protected final String TEXT_861 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_862 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_863 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_864 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_865 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_866 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_867 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_868 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_869 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_870 = " domainModelEditDomain = ";
  protected final String TEXT_871 = ".getEditingDomain(";
  protected final String TEXT_872 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_873 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_874 = NL;
  protected final String TEXT_875 = NL;
  protected final String TEXT_876 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_877 = " domainModelRefresher = new ";
  protected final String TEXT_878 = "(this);" + NL;
  protected final String TEXT_879 = NL;
  protected final String TEXT_880 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_881 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_882 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_883 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_884 = NL;
  protected final String TEXT_885 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_886 = NL + "\t\t";
  protected final String TEXT_887 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_888 = ") ";
  protected final String TEXT_889 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_890 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_891 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_892 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_893 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_894 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_895 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_896 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_897 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_898 = "\t" + NL + "\t}";
  protected final String TEXT_899 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_900 = " createdFont;";
  protected final String TEXT_901 = "\t" + NL;
  protected final String TEXT_902 = NL;
  protected final String TEXT_903 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_904 = " style = (";
  protected final String TEXT_905 = ")  ";
  protected final String TEXT_906 = ".getStyle(";
  protected final String TEXT_907 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_908 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_909 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_910 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_911 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_912 = " style = (";
  protected final String TEXT_913 = ")  ";
  protected final String TEXT_914 = ".getStyle(";
  protected final String TEXT_915 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_916 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_917 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_918 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_919 = " createdBackgroundColor;" + NL;
  protected final String TEXT_920 = NL;
  protected final String TEXT_921 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_922 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_923 = " feature, ";
  protected final String TEXT_924 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_925 = "();";
  protected final String TEXT_926 = NL;
  protected final String TEXT_927 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_928 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_929 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_930 = NL;
  protected final String TEXT_931 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_932 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_933 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_934 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_935 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_936 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_937 = NL;
  protected final String TEXT_938 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_939 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_940 = NL;
  protected final String TEXT_941 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_942 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_943 = NL;
  protected final String TEXT_944 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_945 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_946 = NL;
  protected final String TEXT_947 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_948 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_949 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_950 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_951 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d974 126
a1099 126
  protected final String TEXT_953 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_954 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_955 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_956 = NL;
  protected final String TEXT_957 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_958 = "static ";
  protected final String TEXT_959 = "class Create";
  protected final String TEXT_960 = "Command extends ";
  protected final String TEXT_961 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_962 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_963 = "Command(";
  protected final String TEXT_964 = " parent, ";
  protected final String TEXT_965 = " request";
  protected final String TEXT_966 = ", ";
  protected final String TEXT_967 = " constraint";
  protected final String TEXT_968 = ") {" + NL + "\t\t\t";
  protected final String TEXT_969 = " domainModelEditDomain = ";
  protected final String TEXT_970 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_971 = NL + "\t\t\t";
  protected final String TEXT_972 = " createdDomainElement = ";
  protected final String TEXT_973 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_974 = ".eINSTANCE.get";
  protected final String TEXT_975 = "());";
  protected final String TEXT_976 = NL + "\t\t\t";
  protected final String TEXT_977 = " createdDomainElement = ";
  protected final String TEXT_978 = ".eINSTANCE.create";
  protected final String TEXT_979 = "();";
  protected final String TEXT_980 = NL + "\t\t\t";
  protected final String TEXT_981 = NL + "\t\t\t";
  protected final String TEXT_982 = ".";
  protected final String TEXT_983 = ".initializeElement(";
  protected final String TEXT_984 = "(";
  protected final String TEXT_985 = ") ";
  protected final String TEXT_986 = "createdDomainElement);";
  protected final String TEXT_987 = NL;
  protected final String TEXT_988 = NL + "\t\tif (";
  protected final String TEXT_989 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_990 = NL + "\t\t}";
  protected final String TEXT_991 = NL + "\t\tif (";
  protected final String TEXT_992 = ".size() >= ";
  protected final String TEXT_993 = ".eINSTANCE.get";
  protected final String TEXT_994 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_995 = NL + "\t\t}";
  protected final String TEXT_996 = NL;
  protected final String TEXT_997 = NL + "\t\tif (";
  protected final String TEXT_998 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_999 = NL + "\t\t}";
  protected final String TEXT_1000 = NL + "\t\tif (";
  protected final String TEXT_1001 = ".size() >= ";
  protected final String TEXT_1002 = ".eINSTANCE.get";
  protected final String TEXT_1003 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1004 = NL + "\t\t}";
  protected final String TEXT_1005 = NL + "\t\t\t";
  protected final String TEXT_1006 = " compoundCommand = new ";
  protected final String TEXT_1007 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_1008 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1009 = ".eINSTANCE.get";
  protected final String TEXT_1010 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_1011 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1012 = ".eINSTANCE.get";
  protected final String TEXT_1013 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_1014 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_1015 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1016 = ".eINSTANCE.get";
  protected final String TEXT_1017 = "(), createdDomainElement);";
  protected final String TEXT_1018 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_1019 = "(";
  protected final String TEXT_1020 = ", ";
  protected final String TEXT_1021 = "));";
  protected final String TEXT_1022 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_1023 = "(parent, ";
  protected final String TEXT_1024 = "(";
  protected final String TEXT_1025 = ") ";
  protected final String TEXT_1026 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_1027 = "constraint";
  protected final String TEXT_1028 = "null";
  protected final String TEXT_1029 = ", ";
  protected final String TEXT_1030 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1031 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1032 = "SourceCommand extends ";
  protected final String TEXT_1033 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1034 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1035 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1036 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1037 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1038 = "SourceCommand(";
  protected final String TEXT_1039 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1040 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1041 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1042 = "SourceCommand(";
  protected final String TEXT_1043 = " edge, ";
  protected final String TEXT_1044 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1045 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1046 = " domainModelEditDomain = ";
  protected final String TEXT_1047 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1048 = " command = new ";
  protected final String TEXT_1049 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1050 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1051 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1052 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1053 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_1054 = NL + "\t\t\treturn false;";
  protected final String TEXT_1055 = NL + "\t\t\t";
  protected final String TEXT_1056 = " container = (";
  protected final String TEXT_1057 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_1058 = ".eINSTANCE.get";
  protected final String TEXT_1059 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1060 = NL;
  protected final String TEXT_1061 = NL + "\t\tif (";
  protected final String TEXT_1062 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1063 = NL + "\t\t}";
  protected final String TEXT_1064 = NL + "\t\tif (";
  protected final String TEXT_1065 = ".size() >= ";
  protected final String TEXT_1066 = ".eINSTANCE.get";
  protected final String TEXT_1067 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1068 = NL + "\t\t}";
  protected final String TEXT_1069 = NL;
  protected final String TEXT_1070 = NL + "\t\tif (";
  protected final String TEXT_1071 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1072 = NL + "\t\t}";
  protected final String TEXT_1073 = NL + "\t\tif (";
  protected final String TEXT_1074 = ".size() >= ";
  protected final String TEXT_1075 = ".eINSTANCE.get";
  protected final String TEXT_1076 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1077 = NL + "\t\t}";
  protected final String TEXT_1078 = NL;
d1101 13
a1113 13
  protected final String TEXT_1080 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1081 = NL + "\t\t}";
  protected final String TEXT_1082 = NL + "\t\tif (";
  protected final String TEXT_1083 = ".size() >= ";
  protected final String TEXT_1084 = ".eINSTANCE.get";
  protected final String TEXT_1085 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1086 = NL + "\t\t}";
  protected final String TEXT_1087 = NL;
  protected final String TEXT_1088 = NL + "\t\t\tif(!";
  protected final String TEXT_1089 = ".canCreateLink(";
  protected final String TEXT_1090 = ", ";
  protected final String TEXT_1091 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1092 = NL + "\t\t\treturn true;";
d1129 62
a1190 62
  protected final String TEXT_1108 = NL + "\t\t\treturn false;";
  protected final String TEXT_1109 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1110 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1111 = " editingDomain = ";
  protected final String TEXT_1112 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1113 = " result = new ";
  protected final String TEXT_1114 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1115 = "(edge, newSource));";
  protected final String TEXT_1116 = NL + "\t\t\t";
  protected final String TEXT_1117 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_1118 = ".eINSTANCE.get";
  protected final String TEXT_1119 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_1120 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_1121 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_1122 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_1123 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1124 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1125 = ".eINSTANCE.get";
  protected final String TEXT_1126 = "(), edge.getElement()));";
  protected final String TEXT_1127 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1128 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1129 = ".eINSTANCE.get";
  protected final String TEXT_1130 = "(), ";
  protected final String TEXT_1131 = ".UNSET_VALUE));";
  protected final String TEXT_1132 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1133 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_1134 = ".eINSTANCE.get";
  protected final String TEXT_1135 = "(), edge.getElement()));";
  protected final String TEXT_1136 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1137 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1138 = ".eINSTANCE.get";
  protected final String TEXT_1139 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_1140 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1141 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1142 = ".eINSTANCE.get";
  protected final String TEXT_1143 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1144 = ".UNSET_VALUE));";
  protected final String TEXT_1145 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1146 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_1147 = ".eINSTANCE.get";
  protected final String TEXT_1148 = "(), edge.getElement()));";
  protected final String TEXT_1149 = NL + "\t\t\t}";
  protected final String TEXT_1150 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1151 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1152 = ".eINSTANCE.get";
  protected final String TEXT_1153 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1154 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1155 = ".eINSTANCE.get";
  protected final String TEXT_1156 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_1157 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1158 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1159 = ".eINSTANCE.get";
  protected final String TEXT_1160 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_1161 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1162 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_1163 = ".eINSTANCE.get";
  protected final String TEXT_1164 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1165 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_1166 = ".eINSTANCE.get";
  protected final String TEXT_1167 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_1168 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1169 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
d1192 3
a1194 3
  protected final String TEXT_1171 = "(), ";
  protected final String TEXT_1172 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1173 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
d1196 112
a1307 112
  protected final String TEXT_1175 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_1176 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_1177 = NL;
  protected final String TEXT_1178 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1179 = " getRelationshipContainer(";
  protected final String TEXT_1180 = " element, ";
  protected final String TEXT_1181 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1182 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1183 = NL;
  protected final String TEXT_1184 = NL + "\t\t\tprivate ";
  protected final String TEXT_1185 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1186 = " editingDomain) {";
  protected final String TEXT_1187 = NL + "\t\t\t\t";
  protected final String TEXT_1188 = " result = new ";
  protected final String TEXT_1189 = "();";
  protected final String TEXT_1190 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1191 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1192 = ".getElement().eContainer(), ";
  protected final String TEXT_1193 = ".eINSTANCE.get";
  protected final String TEXT_1194 = "(), ";
  protected final String TEXT_1195 = ".getElement()));";
  protected final String TEXT_1196 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1197 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1198 = ".getElement().eContainer(), ";
  protected final String TEXT_1199 = ".eINSTANCE.get";
  protected final String TEXT_1200 = "(), ";
  protected final String TEXT_1201 = ".UNSET_VALUE));";
  protected final String TEXT_1202 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1203 = ".INSTANCE;";
  protected final String TEXT_1204 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1205 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1206 = ".getElement().eContainer(), ";
  protected final String TEXT_1207 = ".eINSTANCE.get";
  protected final String TEXT_1208 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1209 = ".getElement()));";
  protected final String TEXT_1210 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1211 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1212 = ".getElement().eContainer(), ";
  protected final String TEXT_1213 = ".eINSTANCE.get";
  protected final String TEXT_1214 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1215 = ".UNSET_VALUE));";
  protected final String TEXT_1216 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1217 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1218 = ".getElement(), ";
  protected final String TEXT_1219 = ".eINSTANCE.get";
  protected final String TEXT_1220 = "(), ";
  protected final String TEXT_1221 = ".getSource().getElement()));";
  protected final String TEXT_1222 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1223 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1224 = ".getElement(), ";
  protected final String TEXT_1225 = ".eINSTANCE.get";
  protected final String TEXT_1226 = "(), ";
  protected final String TEXT_1227 = ".UNSET_VALUE));";
  protected final String TEXT_1228 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1229 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1230 = ".getElement(), ";
  protected final String TEXT_1231 = ".eINSTANCE.get";
  protected final String TEXT_1232 = "(), ";
  protected final String TEXT_1233 = ".getTarget().getElement()));";
  protected final String TEXT_1234 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1235 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1236 = ".getElement(), ";
  protected final String TEXT_1237 = ".eINSTANCE.get";
  protected final String TEXT_1238 = "(), ";
  protected final String TEXT_1239 = ".UNSET_VALUE));";
  protected final String TEXT_1240 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1241 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1242 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1243 = ".getSource().getElement(), ";
  protected final String TEXT_1244 = ".eINSTANCE.get";
  protected final String TEXT_1245 = "(), ";
  protected final String TEXT_1246 = ".getTarget().getElement());";
  protected final String TEXT_1247 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1248 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1249 = ".getSource().getElement(), ";
  protected final String TEXT_1250 = ".eINSTANCE.get";
  protected final String TEXT_1251 = "(), ";
  protected final String TEXT_1252 = ".UNSET_VALUE);";
  protected final String TEXT_1253 = NL + "\t\t\t}";
  protected final String TEXT_1254 = NL + "\t}" + NL;
  protected final String TEXT_1255 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1256 = "StartCommand extends ";
  protected final String TEXT_1257 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1258 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1259 = "StartCommand(";
  protected final String TEXT_1260 = " requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_1261 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1262 = NL + "\t\t\treturn false;";
  protected final String TEXT_1263 = NL + "\t\t\t";
  protected final String TEXT_1264 = " container = (";
  protected final String TEXT_1265 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1266 = ".eINSTANCE.get";
  protected final String TEXT_1267 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1268 = NL;
  protected final String TEXT_1269 = NL + "\t\tif (";
  protected final String TEXT_1270 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1271 = NL + "\t\t}";
  protected final String TEXT_1272 = NL + "\t\tif (";
  protected final String TEXT_1273 = ".size() >= ";
  protected final String TEXT_1274 = ".eINSTANCE.get";
  protected final String TEXT_1275 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1276 = NL + "\t\t}";
  protected final String TEXT_1277 = NL;
  protected final String TEXT_1278 = NL + "\t\tif (";
  protected final String TEXT_1279 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1280 = NL + "\t\t}";
  protected final String TEXT_1281 = NL + "\t\tif (";
  protected final String TEXT_1282 = ".size() >= ";
  protected final String TEXT_1283 = ".eINSTANCE.get";
  protected final String TEXT_1284 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1285 = NL + "\t\t}";
  protected final String TEXT_1286 = NL;
d1309 13
a1321 13
  protected final String TEXT_1288 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1289 = NL + "\t\t}";
  protected final String TEXT_1290 = NL + "\t\tif (";
  protected final String TEXT_1291 = ".size() >= ";
  protected final String TEXT_1292 = ".eINSTANCE.get";
  protected final String TEXT_1293 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1294 = NL + "\t\t}";
  protected final String TEXT_1295 = NL;
  protected final String TEXT_1296 = NL + "\t\t\tif(!";
  protected final String TEXT_1297 = ".canCreateLink(";
  protected final String TEXT_1298 = ", ";
  protected final String TEXT_1299 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1300 = NL + "\t\t\treturn true;";
d1337 46
a1382 46
  protected final String TEXT_1316 = NL + "\t\t\treturn false;";
  protected final String TEXT_1317 = NL + "\t\t}";
  protected final String TEXT_1318 = NL;
  protected final String TEXT_1319 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1320 = " getRelationshipContainer(";
  protected final String TEXT_1321 = " element, ";
  protected final String TEXT_1322 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1323 = NL + NL + "\t}";
  protected final String TEXT_1324 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1325 = "TargetCommand extends ";
  protected final String TEXT_1326 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1327 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1328 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1329 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1330 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1331 = "TargetCommand(";
  protected final String TEXT_1332 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1333 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1334 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1335 = "TargetCommand(";
  protected final String TEXT_1336 = " edge, ";
  protected final String TEXT_1337 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1338 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1339 = " domainModelEditDomain = ";
  protected final String TEXT_1340 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1341 = " command = new ";
  protected final String TEXT_1342 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1343 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1344 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1345 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1346 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_1347 = NL;
  protected final String TEXT_1348 = NL + "\t\tif (";
  protected final String TEXT_1349 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1350 = NL + "\t\t}";
  protected final String TEXT_1351 = NL + "\t\tif (";
  protected final String TEXT_1352 = ".size() >= ";
  protected final String TEXT_1353 = ".eINSTANCE.get";
  protected final String TEXT_1354 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1355 = NL + "\t\t}";
  protected final String TEXT_1356 = NL;
  protected final String TEXT_1357 = NL + "\t\t\tif(!";
  protected final String TEXT_1358 = ".canCreateLink(";
  protected final String TEXT_1359 = ", ";
  protected final String TEXT_1360 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1361 = NL + "\t\t\treturn true;";
d1398 28
a1425 28
  protected final String TEXT_1377 = NL + "\t\t\treturn false;";
  protected final String TEXT_1378 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1379 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1380 = " editingDomain = ";
  protected final String TEXT_1381 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1382 = " result = new ";
  protected final String TEXT_1383 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1384 = "(edge, newTarget));";
  protected final String TEXT_1385 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1386 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1387 = ".eINSTANCE.get";
  protected final String TEXT_1388 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1389 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1390 = ".eINSTANCE.get";
  protected final String TEXT_1391 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1392 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1393 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1394 = ".eINSTANCE.get";
  protected final String TEXT_1395 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1396 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1397 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1398 = ".eINSTANCE.get";
  protected final String TEXT_1399 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1400 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1401 = ".eINSTANCE.get";
  protected final String TEXT_1402 = "(), newTarget.getElement()));";
  protected final String TEXT_1403 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1404 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
d1427 125
a1551 125
  protected final String TEXT_1406 = "(), newTarget.getElement()));";
  protected final String TEXT_1407 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_1408 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1409 = NL;
  protected final String TEXT_1410 = NL + "\t\t\tprivate ";
  protected final String TEXT_1411 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1412 = " editingDomain) {";
  protected final String TEXT_1413 = NL + "\t\t\t\t";
  protected final String TEXT_1414 = " result = new ";
  protected final String TEXT_1415 = "();";
  protected final String TEXT_1416 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1417 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1418 = ".getElement().eContainer(), ";
  protected final String TEXT_1419 = ".eINSTANCE.get";
  protected final String TEXT_1420 = "(), ";
  protected final String TEXT_1421 = ".getElement()));";
  protected final String TEXT_1422 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1423 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1424 = ".getElement().eContainer(), ";
  protected final String TEXT_1425 = ".eINSTANCE.get";
  protected final String TEXT_1426 = "(), ";
  protected final String TEXT_1427 = ".UNSET_VALUE));";
  protected final String TEXT_1428 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1429 = ".INSTANCE;";
  protected final String TEXT_1430 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1431 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1432 = ".getElement().eContainer(), ";
  protected final String TEXT_1433 = ".eINSTANCE.get";
  protected final String TEXT_1434 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1435 = ".getElement()));";
  protected final String TEXT_1436 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1437 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1438 = ".getElement().eContainer(), ";
  protected final String TEXT_1439 = ".eINSTANCE.get";
  protected final String TEXT_1440 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1441 = ".UNSET_VALUE));";
  protected final String TEXT_1442 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1443 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1444 = ".getElement(), ";
  protected final String TEXT_1445 = ".eINSTANCE.get";
  protected final String TEXT_1446 = "(), ";
  protected final String TEXT_1447 = ".getSource().getElement()));";
  protected final String TEXT_1448 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1449 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1450 = ".getElement(), ";
  protected final String TEXT_1451 = ".eINSTANCE.get";
  protected final String TEXT_1452 = "(), ";
  protected final String TEXT_1453 = ".UNSET_VALUE));";
  protected final String TEXT_1454 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1455 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1456 = ".getElement(), ";
  protected final String TEXT_1457 = ".eINSTANCE.get";
  protected final String TEXT_1458 = "(), ";
  protected final String TEXT_1459 = ".getTarget().getElement()));";
  protected final String TEXT_1460 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1461 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1462 = ".getElement(), ";
  protected final String TEXT_1463 = ".eINSTANCE.get";
  protected final String TEXT_1464 = "(), ";
  protected final String TEXT_1465 = ".UNSET_VALUE));";
  protected final String TEXT_1466 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1467 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1468 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1469 = ".getSource().getElement(), ";
  protected final String TEXT_1470 = ".eINSTANCE.get";
  protected final String TEXT_1471 = "(), ";
  protected final String TEXT_1472 = ".getTarget().getElement());";
  protected final String TEXT_1473 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1474 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1475 = ".getSource().getElement(), ";
  protected final String TEXT_1476 = ".eINSTANCE.get";
  protected final String TEXT_1477 = "(), ";
  protected final String TEXT_1478 = ".UNSET_VALUE);";
  protected final String TEXT_1479 = NL + "\t\t\t}";
  protected final String TEXT_1480 = NL + "\t}" + NL;
  protected final String TEXT_1481 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1482 = "Command extends ";
  protected final String TEXT_1483 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1484 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1485 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1486 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1487 = "Command(";
  protected final String TEXT_1488 = " requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1489 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1490 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1491 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1492 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1493 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1494 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1495 = NL + "\t\t\t";
  protected final String TEXT_1496 = " createdDomainElement = ";
  protected final String TEXT_1497 = ".eINSTANCE.create";
  protected final String TEXT_1498 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1499 = "(";
  protected final String TEXT_1500 = ") ";
  protected final String TEXT_1501 = "createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1502 = NL + "\t\t\t";
  protected final String TEXT_1503 = ".";
  protected final String TEXT_1504 = ".initializeElement(";
  protected final String TEXT_1505 = "(";
  protected final String TEXT_1506 = ") ";
  protected final String TEXT_1507 = "createdDomainElement);";
  protected final String TEXT_1508 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1509 = NL + "\t\t\t";
  protected final String TEXT_1510 = ".INSTANCE.decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1511 = " domainModelEditDomain = ";
  protected final String TEXT_1512 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1513 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1514 = NL + "\t\t\t";
  protected final String TEXT_1515 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1516 = ".eINSTANCE.get";
  protected final String TEXT_1517 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1518 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1519 = ".eINSTANCE.get";
  protected final String TEXT_1520 = "(), createdDomainElement));";
  protected final String TEXT_1521 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1522 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1523 = ".eINSTANCE.get";
  protected final String TEXT_1524 = "(), createdDomainElement));";
  protected final String TEXT_1525 = NL;
  protected final String TEXT_1526 = NL + "\t\tif (";
  protected final String TEXT_1527 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1528 = NL + "\t\t}";
  protected final String TEXT_1529 = NL + "\t\tif (";
  protected final String TEXT_1530 = ".size() >= ";
d1553 97
a1649 97
  protected final String TEXT_1532 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1533 = NL + "\t\t}";
  protected final String TEXT_1534 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1535 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1536 = ".eINSTANCE.get";
  protected final String TEXT_1537 = "(), source.getElement()));";
  protected final String TEXT_1538 = NL;
  protected final String TEXT_1539 = NL + "\t\tif (";
  protected final String TEXT_1540 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1541 = NL + "\t\t}";
  protected final String TEXT_1542 = NL + "\t\tif (";
  protected final String TEXT_1543 = ".size() >= ";
  protected final String TEXT_1544 = ".eINSTANCE.get";
  protected final String TEXT_1545 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1546 = NL + "\t\t}";
  protected final String TEXT_1547 = NL;
  protected final String TEXT_1548 = NL + "\t\tif (";
  protected final String TEXT_1549 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1550 = NL + "\t\t}";
  protected final String TEXT_1551 = NL + "\t\tif (";
  protected final String TEXT_1552 = ".size() >= ";
  protected final String TEXT_1553 = ".eINSTANCE.get";
  protected final String TEXT_1554 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1555 = NL + "\t\t}";
  protected final String TEXT_1556 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1557 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1558 = ".eINSTANCE.get";
  protected final String TEXT_1559 = "(), target.getElement()));";
  protected final String TEXT_1560 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1561 = NL;
  protected final String TEXT_1562 = NL + "\t\tif (";
  protected final String TEXT_1563 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1564 = NL + "\t\t}";
  protected final String TEXT_1565 = NL + "\t\tif (";
  protected final String TEXT_1566 = ".size() >= ";
  protected final String TEXT_1567 = ".eINSTANCE.get";
  protected final String TEXT_1568 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1569 = NL + "\t\t}";
  protected final String TEXT_1570 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1571 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1572 = ".eINSTANCE.get";
  protected final String TEXT_1573 = "(), target.getElement());";
  protected final String TEXT_1574 = NL + "\t\t}" + NL;
  protected final String TEXT_1575 = NL;
  protected final String TEXT_1576 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1577 = " getRelationshipContainer(";
  protected final String TEXT_1578 = " element, ";
  protected final String TEXT_1579 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1580 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1581 = NL;
  protected final String TEXT_1582 = NL + "\t\t\tif(!";
  protected final String TEXT_1583 = ".canCreateLink(";
  protected final String TEXT_1584 = ", ";
  protected final String TEXT_1585 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1586 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1587 = NL;
  protected final String TEXT_1588 = NL;
  protected final String TEXT_1589 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1590 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_1591 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_1592 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_1593 = NL;
  protected final String TEXT_1594 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1595 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_1596 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_1597 = " createDeleteCommand(";
  protected final String TEXT_1598 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_1599 = " editingDomain = ";
  protected final String TEXT_1600 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_1601 = " cc = new ";
  protected final String TEXT_1602 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_1603 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_1604 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_1605 = " editingDomain) {";
  protected final String TEXT_1606 = NL + "\t\t\t\t";
  protected final String TEXT_1607 = " result = new ";
  protected final String TEXT_1608 = "();";
  protected final String TEXT_1609 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1610 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1611 = ".eINSTANCE.get";
  protected final String TEXT_1612 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1613 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1614 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1615 = ".eINSTANCE.get";
  protected final String TEXT_1616 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1617 = ".UNSET_VALUE));";
  protected final String TEXT_1618 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1619 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1620 = ".eINSTANCE.get";
  protected final String TEXT_1621 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1622 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1623 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1624 = ".eINSTANCE.get";
  protected final String TEXT_1625 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1626 = ".UNSET_VALUE));";
  protected final String TEXT_1627 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1628 = NL + "\t\t\t\treturn ";
d1652 121
a1772 106
  protected final String TEXT_1631 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_1632 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1633 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1634 = ".eINSTANCE.get";
  protected final String TEXT_1635 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1636 = ".UNSET_VALUE);";
  protected final String TEXT_1637 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1638 = NL;
  protected final String TEXT_1639 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1640 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1641 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1642 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1643 = NL;
  protected final String TEXT_1644 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1645 = " getDirectEditCommand(";
  protected final String TEXT_1646 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1647 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1648 = "(";
  protected final String TEXT_1649 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1650 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1651 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1652 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1653 = " editingDomain = ";
  protected final String TEXT_1654 = ".getEditingDomain(";
  protected final String TEXT_1655 = ".getDiagram().getElement());";
  protected final String TEXT_1656 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1657 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1658 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1659 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1660 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1661 = " createDomainModelCommand(";
  protected final String TEXT_1662 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1663 = " element = ";
  protected final String TEXT_1664 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1665 = " result = new ";
  protected final String TEXT_1666 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1667 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1668 = " ";
  protected final String TEXT_1669 = "feature = (";
  protected final String TEXT_1670 = ") ";
  protected final String TEXT_1671 = ".eINSTANCE.get";
  protected final String TEXT_1672 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1673 = ".parseValue(feature, values[";
  protected final String TEXT_1674 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1675 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1676 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1677 = " ";
  protected final String TEXT_1678 = "values = new ";
  protected final String TEXT_1679 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1680 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1681 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1682 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1683 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1684 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1685 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1686 = NL + "\t\t\t\t});";
  protected final String TEXT_1687 = NL + "\t\t}" + NL;
  protected final String TEXT_1688 = NL;
  protected final String TEXT_1689 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1690 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1691 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1692 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1693 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1694 = "(this, ";
  protected final String TEXT_1695 = ".class, new ";
  protected final String TEXT_1696 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1697 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1698 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1699 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1700 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1701 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1702 = NL;
  protected final String TEXT_1703 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1704 = " domainModelRefresher = new ";
  protected final String TEXT_1705 = "(this);" + NL;
  protected final String TEXT_1706 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1707 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1708 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1709 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1710 = " nextChild = (";
  protected final String TEXT_1711 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1712 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1713 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1714 = ") ";
  protected final String TEXT_1715 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1716 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1717 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1718 = ".eINSTANCE.get";
  protected final String TEXT_1719 = "(), labelRefresher);";
  protected final String TEXT_1720 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1721 = ".eINSTANCE.get";
  protected final String TEXT_1722 = "(), labelRefresher);";
  protected final String TEXT_1723 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1724 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1725 = " result = new ";
  protected final String TEXT_1726 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1727 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1728 = " next = (";
  protected final String TEXT_1729 = ") it.next();" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1730 = ".getVisualID(next)) {";
  protected final String TEXT_1731 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1732 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1733 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1734 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1735 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1736 = NL;
d3163 36
d3202 1
a3202 1
    stringBuffer.append(TEXT_405);
d3209 1
a3209 1
    stringBuffer.append(TEXT_406);
d3213 1
a3213 1
    stringBuffer.append(TEXT_407);
d3215 1
a3215 1
    stringBuffer.append(TEXT_408);
d3217 1
a3217 1
    stringBuffer.append(TEXT_409);
d3219 1
a3219 1
    stringBuffer.append(TEXT_410);
d3221 1
a3221 1
    stringBuffer.append(TEXT_411);
d3223 1
a3223 1
    stringBuffer.append(TEXT_412);
d3227 1
a3227 1
    stringBuffer.append(TEXT_413);
d3231 1
a3231 1
    stringBuffer.append(TEXT_414);
d3233 1
a3233 1
    stringBuffer.append(TEXT_415);
d3237 1
a3237 1
    stringBuffer.append(TEXT_416);
d3239 1
a3239 1
    stringBuffer.append(TEXT_417);
d3241 1
a3241 1
    stringBuffer.append(TEXT_418);
d3243 1
a3243 1
    stringBuffer.append(TEXT_419);
d3247 1
a3247 1
    stringBuffer.append(TEXT_420);
d3249 1
a3249 1
    stringBuffer.append(TEXT_421);
d3259 1
a3259 1
    stringBuffer.append(TEXT_422);
d3261 1
a3261 1
    stringBuffer.append(TEXT_423);
d3263 1
a3263 1
    stringBuffer.append(TEXT_424);
d3265 1
a3265 1
    stringBuffer.append(TEXT_425);
d3267 1
a3267 1
    stringBuffer.append(TEXT_426);
d3269 1
a3269 1
    stringBuffer.append(TEXT_427);
d3273 1
a3273 1
    stringBuffer.append(TEXT_428);
d3275 1
a3275 1
    stringBuffer.append(TEXT_429);
d3277 1
a3277 1
    stringBuffer.append(TEXT_430);
d3279 1
a3279 1
    stringBuffer.append(TEXT_431);
d3281 1
a3281 1
    stringBuffer.append(TEXT_432);
d3283 1
a3283 1
    stringBuffer.append(TEXT_433);
d3285 1
a3285 1
    stringBuffer.append(TEXT_434);
d3287 1
a3287 1
    stringBuffer.append(TEXT_435);
d3289 1
a3289 1
    stringBuffer.append(TEXT_436);
d3291 1
a3291 1
    stringBuffer.append(TEXT_437);
d3293 1
a3293 1
    stringBuffer.append(TEXT_438);
d3295 1
a3295 1
    stringBuffer.append(TEXT_439);
d3297 1
a3297 1
    stringBuffer.append(TEXT_440);
d3299 1
a3299 1
    stringBuffer.append(TEXT_441);
d3301 1
a3301 1
    stringBuffer.append(TEXT_442);
d3303 1
a3303 1
    stringBuffer.append(TEXT_443);
d3305 1
a3305 1
    stringBuffer.append(TEXT_444);
d3307 1
a3307 1
    stringBuffer.append(TEXT_445);
d3309 1
a3309 1
    stringBuffer.append(TEXT_446);
d3311 1
a3311 1
    stringBuffer.append(TEXT_447);
d3313 1
a3313 1
    stringBuffer.append(TEXT_448);
d3315 1
a3315 1
    stringBuffer.append(TEXT_449);
d3317 1
a3317 1
    stringBuffer.append(TEXT_450);
d3319 1
a3319 1
    stringBuffer.append(TEXT_451);
d3324 1
a3324 1
    stringBuffer.append(TEXT_452);
d3326 1
a3326 1
    stringBuffer.append(TEXT_453);
d3328 1
a3328 1
    stringBuffer.append(TEXT_454);
d3330 1
a3330 1
    stringBuffer.append(TEXT_455);
d3332 1
a3332 1
    stringBuffer.append(TEXT_456);
d3334 1
a3334 1
    stringBuffer.append(TEXT_457);
d3336 1
a3336 1
    stringBuffer.append(TEXT_458);
d3338 1
a3338 1
    stringBuffer.append(TEXT_459);
d3340 1
a3340 1
    stringBuffer.append(TEXT_460);
d3342 1
a3342 1
    stringBuffer.append(TEXT_461);
d3344 1
a3344 1
    stringBuffer.append(TEXT_462);
d3348 1
a3348 1
    stringBuffer.append(TEXT_463);
d3350 1
a3350 1
    stringBuffer.append(TEXT_464);
d3358 1
a3358 1
    stringBuffer.append(TEXT_465);
d3360 1
a3360 1
    stringBuffer.append(TEXT_466);
d3362 1
a3362 1
    stringBuffer.append(TEXT_467);
d3364 1
a3364 1
    stringBuffer.append(TEXT_468);
d3366 1
a3366 1
    stringBuffer.append(TEXT_469);
d3375 1
a3375 1
    stringBuffer.append(TEXT_470);
d3377 1
a3377 1
    stringBuffer.append(TEXT_471);
d3379 1
a3379 1
    stringBuffer.append(TEXT_472);
d3381 1
a3381 1
    stringBuffer.append(TEXT_473);
d3383 1
a3383 1
    stringBuffer.append(TEXT_474);
d3387 1
a3387 1
    stringBuffer.append(TEXT_475);
d3395 1
a3395 1
    stringBuffer.append(TEXT_476);
d3397 1
a3397 1
    stringBuffer.append(TEXT_477);
d3399 1
a3399 1
    stringBuffer.append(TEXT_478);
d3401 1
a3401 1
    stringBuffer.append(TEXT_479);
d3403 1
a3403 1
    stringBuffer.append(TEXT_480);
d3407 1
a3407 1
    stringBuffer.append(TEXT_481);
d3411 1
a3411 1
    stringBuffer.append(TEXT_482);
d3413 1
a3413 1
    stringBuffer.append(TEXT_483);
d3417 1
a3417 1
    stringBuffer.append(TEXT_484);
d3419 1
a3419 1
    stringBuffer.append(TEXT_485);
d3421 1
a3421 1
    stringBuffer.append(TEXT_486);
d3423 1
a3423 1
    stringBuffer.append(TEXT_487);
d3425 1
a3425 1
    stringBuffer.append(TEXT_488);
d3427 1
a3427 1
    stringBuffer.append(TEXT_489);
d3429 1
a3429 1
    stringBuffer.append(TEXT_490);
d3433 1
a3433 1
    stringBuffer.append(TEXT_491);
d3435 1
a3435 1
    stringBuffer.append(TEXT_492);
d3437 1
a3437 1
    stringBuffer.append(TEXT_493);
d3439 1
a3439 1
    stringBuffer.append(TEXT_494);
d3441 1
a3441 1
    stringBuffer.append(TEXT_495);
d3443 7
a3449 1
    stringBuffer.append(TEXT_496);
d3451 1
a3451 1
    stringBuffer.append(TEXT_497);
d3453 1
a3453 1
    stringBuffer.append(TEXT_498);
d3455 1
a3455 1
    stringBuffer.append(TEXT_499);
d3457 1
a3457 1
    stringBuffer.append(TEXT_500);
d3459 1
a3459 1
    stringBuffer.append(TEXT_501);
d3461 1
a3461 1
    stringBuffer.append(TEXT_502);
d3469 1
a3469 1
    stringBuffer.append(TEXT_503);
d3471 1
a3471 1
    stringBuffer.append(TEXT_504);
d3475 1
a3475 1
    stringBuffer.append(TEXT_505);
d3479 1
a3479 1
    stringBuffer.append(TEXT_506);
d3481 1
a3481 1
    stringBuffer.append(TEXT_507);
d3486 1
a3486 1
    stringBuffer.append(TEXT_508);
d3488 1
a3488 1
    stringBuffer.append(TEXT_509);
d3492 1
a3492 1
    stringBuffer.append(TEXT_510);
d3494 1
a3494 1
    stringBuffer.append(TEXT_511);
d3496 1
a3496 1
    stringBuffer.append(TEXT_512);
d3498 1
a3498 1
    stringBuffer.append(TEXT_513);
d3500 1
a3500 1
    stringBuffer.append(TEXT_514);
d3505 1
a3505 1
    stringBuffer.append(TEXT_515);
d3507 1
a3507 1
    stringBuffer.append(TEXT_516);
d3512 1
a3512 1
    stringBuffer.append(TEXT_517);
d3514 1
a3514 1
    stringBuffer.append(TEXT_518);
d3518 1
a3518 1
    stringBuffer.append(TEXT_519);
d3523 1
a3523 1
    stringBuffer.append(TEXT_520);
d3525 1
a3525 1
    stringBuffer.append(TEXT_521);
d3529 1
a3529 1
    stringBuffer.append(TEXT_522);
d3531 1
a3531 1
    stringBuffer.append(TEXT_523);
d3533 1
a3533 1
    stringBuffer.append(TEXT_524);
d3538 1
a3538 1
    stringBuffer.append(TEXT_525);
d3543 1
a3543 1
    stringBuffer.append(TEXT_526);
d3545 1
a3545 1
    stringBuffer.append(TEXT_527);
d3547 1
a3547 1
    stringBuffer.append(TEXT_528);
d3551 1
a3551 1
    stringBuffer.append(TEXT_529);
d3553 1
a3553 1
    stringBuffer.append(TEXT_530);
d3557 1
a3557 1
    stringBuffer.append(TEXT_531);
d3559 1
a3559 1
    stringBuffer.append(TEXT_532);
d3561 1
a3561 1
    stringBuffer.append(TEXT_533);
d3566 1
a3566 1
    stringBuffer.append(TEXT_534);
d3571 1
a3571 1
    stringBuffer.append(TEXT_535);
d3573 1
a3573 1
    stringBuffer.append(TEXT_536);
d3575 1
a3575 1
    stringBuffer.append(TEXT_537);
d3579 1
a3579 1
    stringBuffer.append(TEXT_538);
d3586 1
a3586 1
    stringBuffer.append(TEXT_539);
d3588 1
a3588 1
    stringBuffer.append(TEXT_540);
d3590 1
a3590 1
    stringBuffer.append(TEXT_541);
d3592 1
a3592 1
    stringBuffer.append(TEXT_542);
d3594 1
a3594 1
    stringBuffer.append(TEXT_543);
d3598 1
a3598 1
    stringBuffer.append(TEXT_544);
d3600 1
a3600 1
    stringBuffer.append(TEXT_545);
d3602 1
a3602 1
    stringBuffer.append(TEXT_546);
d3604 1
a3604 1
    stringBuffer.append(TEXT_547);
d3606 1
a3606 1
    stringBuffer.append(TEXT_548);
d3608 1
a3608 1
    stringBuffer.append(TEXT_549);
d3610 1
a3610 1
    stringBuffer.append(TEXT_550);
d3612 1
a3612 1
    stringBuffer.append(TEXT_551);
d3614 1
a3614 1
    stringBuffer.append(TEXT_552);
d3616 1
a3616 1
    stringBuffer.append(TEXT_553);
d3618 1
a3618 1
    stringBuffer.append(TEXT_554);
d3620 1
a3620 1
    stringBuffer.append(TEXT_555);
d3622 1
a3622 1
    stringBuffer.append(TEXT_556);
d3624 1
a3624 1
    stringBuffer.append(TEXT_557);
d3626 1
a3626 1
    stringBuffer.append(TEXT_558);
d3628 1
a3628 1
    stringBuffer.append(TEXT_559);
d3630 1
a3630 1
    stringBuffer.append(TEXT_560);
d3632 1
a3632 1
    stringBuffer.append(TEXT_561);
d3634 1
a3634 1
    stringBuffer.append(TEXT_562);
d3636 1
a3636 1
    stringBuffer.append(TEXT_563);
d3638 1
a3638 1
    stringBuffer.append(TEXT_564);
d3640 1
a3640 1
    stringBuffer.append(TEXT_565);
d3644 1
a3644 1
    stringBuffer.append(TEXT_566);
d3646 1
a3646 1
    stringBuffer.append(TEXT_567);
d3648 1
a3648 1
    stringBuffer.append(TEXT_568);
d3652 1
a3652 1
    stringBuffer.append(TEXT_569);
d3654 1
a3654 1
    stringBuffer.append(TEXT_570);
d3656 1
a3656 1
    stringBuffer.append(TEXT_571);
d3660 1
a3660 1
    stringBuffer.append(TEXT_572);
d3667 1
a3667 1
    stringBuffer.append(TEXT_573);
d3671 1
a3671 1
    stringBuffer.append(TEXT_574);
d3675 1
a3675 1
    stringBuffer.append(TEXT_575);
d3682 1
a3682 1
    stringBuffer.append(TEXT_576);
d3686 1
a3686 1
    stringBuffer.append(TEXT_577);
d3696 2
a3697 2
    stringBuffer.append(TEXT_578);
    stringBuffer.append(TEXT_579);
d3699 1
a3699 1
    stringBuffer.append(TEXT_580);
d3701 1
a3701 1
    stringBuffer.append(TEXT_581);
d3703 1
a3703 1
    stringBuffer.append(TEXT_582);
d3705 1
a3705 1
    stringBuffer.append(TEXT_583);
d3707 1
a3707 1
    stringBuffer.append(TEXT_584);
d3709 1
a3709 1
    stringBuffer.append(TEXT_585);
d3711 1
a3711 1
    stringBuffer.append(TEXT_586);
d3726 1
a3726 1
    stringBuffer.append(TEXT_587);
d3728 1
a3728 1
    stringBuffer.append(TEXT_588);
d3730 1
a3730 1
    stringBuffer.append(TEXT_589);
d3732 1
a3732 1
    stringBuffer.append(TEXT_590);
d3736 1
a3736 1
    stringBuffer.append(TEXT_591);
d3738 1
a3738 1
    stringBuffer.append(TEXT_592);
d3757 1
a3757 1
    stringBuffer.append(TEXT_593);
d3759 1
a3759 1
    stringBuffer.append(TEXT_594);
d3761 1
a3761 1
    stringBuffer.append(TEXT_595);
d3763 1
a3763 1
    stringBuffer.append(TEXT_596);
d3765 1
a3765 1
    stringBuffer.append(TEXT_597);
d3769 1
a3769 1
    stringBuffer.append(TEXT_598);
d3771 1
a3771 1
    stringBuffer.append(TEXT_599);
d3773 1
a3773 1
    stringBuffer.append(TEXT_600);
d3775 1
a3775 1
    stringBuffer.append(TEXT_601);
d3783 1
a3783 1
    stringBuffer.append(TEXT_602);
d3785 1
a3785 1
    stringBuffer.append(TEXT_603);
d3787 1
a3787 1
    stringBuffer.append(TEXT_604);
d3792 1
a3792 1
    stringBuffer.append(TEXT_605);
d3794 1
a3794 1
    stringBuffer.append(TEXT_606);
d3796 1
a3796 1
    stringBuffer.append(TEXT_607);
d3798 1
a3798 1
    stringBuffer.append(TEXT_608);
d3807 1
a3807 1
    stringBuffer.append(TEXT_609);
d3811 1
a3811 1
    stringBuffer.append(TEXT_610);
d3813 1
a3813 1
    stringBuffer.append(TEXT_611);
d3819 1
a3819 1
    stringBuffer.append(TEXT_612);
d3821 1
a3821 1
    stringBuffer.append(TEXT_613);
d3823 1
a3823 1
    stringBuffer.append(TEXT_614);
d3827 1
a3827 1
    stringBuffer.append(TEXT_615);
d3831 1
a3831 1
    stringBuffer.append(TEXT_616);
d3833 1
a3833 1
    stringBuffer.append(TEXT_617);
d3835 1
a3835 1
    stringBuffer.append(TEXT_618);
d3840 2
a3841 2
    stringBuffer.append(TEXT_619);
    stringBuffer.append(TEXT_620);
d3843 1
a3843 1
    stringBuffer.append(TEXT_621);
d3853 1
a3853 1
    stringBuffer.append(TEXT_622);
d3855 1
a3855 1
    stringBuffer.append(TEXT_623);
d3857 1
a3857 1
    stringBuffer.append(TEXT_624);
d3859 1
a3859 1
    stringBuffer.append(TEXT_625);
d3861 1
a3861 1
    stringBuffer.append(TEXT_626);
d3872 1
a3872 1
    stringBuffer.append(TEXT_627);
d3874 1
a3874 1
    stringBuffer.append(TEXT_628);
d3876 1
a3876 1
    stringBuffer.append(TEXT_629);
d3878 1
a3878 1
    stringBuffer.append(TEXT_630);
d3882 1
a3882 1
    stringBuffer.append(TEXT_631);
d3886 1
a3886 1
    stringBuffer.append(TEXT_632);
d3888 1
a3888 1
    stringBuffer.append(TEXT_633);
d3892 1
a3892 1
    stringBuffer.append(TEXT_634);
d3896 1
a3896 1
    stringBuffer.append(TEXT_635);
d3898 2
a3899 2
    stringBuffer.append(TEXT_636);
    stringBuffer.append(TEXT_637);
d3903 1
a3903 1
    stringBuffer.append(TEXT_638);
d3905 1
a3905 1
    stringBuffer.append(TEXT_639);
d3909 1
a3909 1
    stringBuffer.append(TEXT_640);
d3911 1
a3911 1
    stringBuffer.append(TEXT_641);
d3913 1
a3913 1
    stringBuffer.append(TEXT_642);
d3931 1
a3931 1
    stringBuffer.append(TEXT_643);
d3933 1
a3933 1
    stringBuffer.append(TEXT_644);
d3935 1
a3935 1
    stringBuffer.append(TEXT_645);
d3937 1
a3937 1
    stringBuffer.append(TEXT_646);
d3939 1
a3939 1
    stringBuffer.append(TEXT_647);
d3948 1
a3948 1
    stringBuffer.append(TEXT_648);
d3950 1
a3950 1
    stringBuffer.append(TEXT_649);
d3952 1
a3952 1
    stringBuffer.append(TEXT_650);
d3954 1
a3954 1
    stringBuffer.append(TEXT_651);
d3958 1
a3958 1
    stringBuffer.append(TEXT_652);
d3960 1
a3960 1
    stringBuffer.append(TEXT_653);
d3962 1
a3962 1
    stringBuffer.append(TEXT_654);
d3966 1
a3966 1
    stringBuffer.append(TEXT_655);
d3968 1
a3968 1
    stringBuffer.append(TEXT_656);
d3973 1
a3973 1
    stringBuffer.append(TEXT_657);
d3980 1
a3980 1
    stringBuffer.append(TEXT_658);
d3982 1
a3982 1
    stringBuffer.append(TEXT_659);
d3986 1
a3986 1
    stringBuffer.append(TEXT_660);
d3988 1
a3988 1
    stringBuffer.append(TEXT_661);
d3992 1
a3992 1
    stringBuffer.append(TEXT_662);
d3994 1
a3994 1
    stringBuffer.append(TEXT_663);
d3998 1
a3998 1
    stringBuffer.append(TEXT_664);
d4002 1
a4002 1
    stringBuffer.append(TEXT_665);
d4008 1
a4008 1
    stringBuffer.append(TEXT_666);
d4013 1
a4013 1
    stringBuffer.append(TEXT_667);
d4018 1
a4018 1
    stringBuffer.append(TEXT_668);
d4022 1
a4022 1
    stringBuffer.append(TEXT_669);
d4024 1
a4024 1
    stringBuffer.append(TEXT_670);
d4026 1
a4026 1
    stringBuffer.append(TEXT_671);
d4028 1
a4028 1
    stringBuffer.append(TEXT_672);
d4030 1
a4030 1
    stringBuffer.append(TEXT_673);
d4032 1
a4032 1
    stringBuffer.append(TEXT_674);
d4034 1
a4034 1
    stringBuffer.append(TEXT_675);
d4036 1
a4036 1
    stringBuffer.append(TEXT_676);
d4038 1
a4038 1
    stringBuffer.append(TEXT_677);
d4040 1
a4040 1
    stringBuffer.append(TEXT_678);
d4042 1
a4042 1
    stringBuffer.append(TEXT_679);
d4044 1
a4044 1
    stringBuffer.append(TEXT_680);
d4048 1
a4048 1
    stringBuffer.append(TEXT_681);
d4052 1
a4052 1
    stringBuffer.append(TEXT_682);
d4054 1
a4054 1
    stringBuffer.append(TEXT_683);
d4056 1
a4056 1
    stringBuffer.append(TEXT_684);
d4058 1
a4058 1
    stringBuffer.append(TEXT_685);
d4060 1
a4060 1
    stringBuffer.append(TEXT_686);
d4062 1
a4062 1
    stringBuffer.append(TEXT_687);
d4064 1
a4064 1
    stringBuffer.append(TEXT_688);
d4066 1
a4066 1
    stringBuffer.append(TEXT_689);
d4068 1
a4068 1
    stringBuffer.append(TEXT_690);
d4081 1
a4081 1
    stringBuffer.append(TEXT_691);
d4083 1
a4083 1
    stringBuffer.append(TEXT_692);
d4085 1
a4085 1
    stringBuffer.append(TEXT_693);
d4087 1
a4087 1
    stringBuffer.append(TEXT_694);
d4092 1
a4092 1
    stringBuffer.append(TEXT_695);
d4094 1
a4094 1
    stringBuffer.append(TEXT_696);
d4096 1
a4096 1
    stringBuffer.append(TEXT_697);
d4098 1
a4098 1
    stringBuffer.append(TEXT_698);
d4100 1
a4100 1
    stringBuffer.append(TEXT_699);
d4102 1
a4102 1
    stringBuffer.append(TEXT_700);
d4104 1
a4104 1
    stringBuffer.append(TEXT_701);
d4106 1
a4106 1
    stringBuffer.append(TEXT_702);
d4108 1
a4108 1
    stringBuffer.append(TEXT_703);
d4110 1
a4110 1
    stringBuffer.append(TEXT_704);
d4114 1
a4114 1
    stringBuffer.append(TEXT_705);
d4116 1
a4116 1
    stringBuffer.append(TEXT_706);
d4129 1
a4129 1
    stringBuffer.append(TEXT_707);
d4143 1
a4143 1
    stringBuffer.append(TEXT_708);
d4145 1
a4145 1
    stringBuffer.append(TEXT_709);
d4147 1
a4147 1
    stringBuffer.append(TEXT_710);
d4149 1
a4149 1
    stringBuffer.append(TEXT_711);
d4151 1
a4151 1
    stringBuffer.append(TEXT_712);
d4155 1
a4155 1
    stringBuffer.append(TEXT_713);
d4157 1
a4157 1
    stringBuffer.append(TEXT_714);
d4159 1
a4159 1
    stringBuffer.append(TEXT_715);
d4161 1
a4161 1
    stringBuffer.append(TEXT_716);
d4168 1
a4168 1
    stringBuffer.append(TEXT_717);
d4182 1
a4182 1
    stringBuffer.append(TEXT_718);
d4184 1
a4184 1
    stringBuffer.append(TEXT_719);
d4186 1
a4186 1
    stringBuffer.append(TEXT_720);
d4188 1
a4188 1
    stringBuffer.append(TEXT_721);
d4190 1
a4190 1
    stringBuffer.append(TEXT_722);
d4194 1
a4194 1
    stringBuffer.append(TEXT_723);
d4196 1
a4196 1
    stringBuffer.append(TEXT_724);
d4198 1
a4198 1
    stringBuffer.append(TEXT_725);
d4200 1
a4200 1
    stringBuffer.append(TEXT_726);
d4207 1
a4207 1
    stringBuffer.append(TEXT_727);
d4221 1
a4221 1
    stringBuffer.append(TEXT_728);
d4223 1
a4223 1
    stringBuffer.append(TEXT_729);
d4225 1
a4225 1
    stringBuffer.append(TEXT_730);
d4227 1
a4227 1
    stringBuffer.append(TEXT_731);
d4229 1
a4229 1
    stringBuffer.append(TEXT_732);
d4233 1
a4233 1
    stringBuffer.append(TEXT_733);
d4235 1
a4235 1
    stringBuffer.append(TEXT_734);
d4237 1
a4237 1
    stringBuffer.append(TEXT_735);
d4239 1
a4239 1
    stringBuffer.append(TEXT_736);
d4249 1
a4249 1
    stringBuffer.append(TEXT_737);
d4263 1
a4263 1
    stringBuffer.append(TEXT_738);
d4265 1
a4265 1
    stringBuffer.append(TEXT_739);
d4267 1
a4267 1
    stringBuffer.append(TEXT_740);
d4269 1
a4269 1
    stringBuffer.append(TEXT_741);
d4271 1
a4271 1
    stringBuffer.append(TEXT_742);
d4275 1
a4275 1
    stringBuffer.append(TEXT_743);
d4277 1
a4277 1
    stringBuffer.append(TEXT_744);
d4279 1
a4279 1
    stringBuffer.append(TEXT_745);
d4281 1
a4281 1
    stringBuffer.append(TEXT_746);
d4290 1
a4290 1
    stringBuffer.append(TEXT_747);
d4295 1
a4295 1
    stringBuffer.append(TEXT_748);
d4297 1
a4297 1
    stringBuffer.append(TEXT_749);
d4304 1
a4304 1
    stringBuffer.append(TEXT_750);
d4309 1
a4309 1
    stringBuffer.append(TEXT_751);
d4311 1
a4311 1
    stringBuffer.append(TEXT_752);
d4317 1
a4317 1
    stringBuffer.append(TEXT_753);
d4319 1
a4319 1
    stringBuffer.append(TEXT_754);
d4321 1
a4321 1
    stringBuffer.append(TEXT_755);
d4326 1
a4326 1
    stringBuffer.append(TEXT_756);
d4328 1
a4328 1
    stringBuffer.append(TEXT_757);
d4330 1
a4330 1
    stringBuffer.append(TEXT_758);
d4332 1
a4332 1
    stringBuffer.append(TEXT_759);
d4334 1
a4334 1
    stringBuffer.append(TEXT_760);
d4341 2
a4342 2
    stringBuffer.append(TEXT_761);
    stringBuffer.append(TEXT_762);
d4344 1
a4344 1
    stringBuffer.append(TEXT_763);
d4346 1
a4346 1
    stringBuffer.append(TEXT_764);
d4348 1
a4348 1
    stringBuffer.append(TEXT_765);
d4357 1
a4357 1
    stringBuffer.append(TEXT_766);
d4359 1
a4359 1
    stringBuffer.append(TEXT_767);
d4361 1
a4361 1
    stringBuffer.append(TEXT_768);
d4363 1
a4363 1
    stringBuffer.append(TEXT_769);
d4369 1
a4369 1
    stringBuffer.append(TEXT_770);
d4371 1
a4371 1
    stringBuffer.append(TEXT_771);
d4373 1
a4373 1
    stringBuffer.append(TEXT_772);
d4377 1
a4377 1
    stringBuffer.append(TEXT_773);
d4379 1
a4379 1
    stringBuffer.append(TEXT_774);
d4381 1
a4381 1
    stringBuffer.append(TEXT_775);
d4385 1
a4385 1
    stringBuffer.append(TEXT_776);
d4387 1
a4387 1
    stringBuffer.append(TEXT_777);
d4393 2
a4394 2
    stringBuffer.append(TEXT_778);
    stringBuffer.append(TEXT_779);
d4396 1
a4396 1
    stringBuffer.append(TEXT_780);
d4398 1
a4398 1
    stringBuffer.append(TEXT_781);
d4421 1
a4421 1
    stringBuffer.append(TEXT_782);
d4423 1
a4423 1
    stringBuffer.append(TEXT_783);
d4425 1
a4425 1
    stringBuffer.append(TEXT_784);
d4427 1
a4427 1
    stringBuffer.append(TEXT_785);
d4432 1
a4432 1
    stringBuffer.append(TEXT_786);
d4441 1
a4441 1
    stringBuffer.append(TEXT_787);
d4443 1
a4443 1
    stringBuffer.append(TEXT_788);
d4445 1
a4445 1
    stringBuffer.append(TEXT_789);
d4447 1
a4447 1
    stringBuffer.append(TEXT_790);
d4451 1
a4451 1
    stringBuffer.append(TEXT_791);
d4453 1
a4453 1
    stringBuffer.append(TEXT_792);
d4455 1
a4455 1
    stringBuffer.append(TEXT_793);
d4459 1
a4459 1
    stringBuffer.append(TEXT_794);
d4461 1
a4461 1
    stringBuffer.append(TEXT_795);
d4466 1
a4466 1
    stringBuffer.append(TEXT_796);
d4474 1
a4474 1
    stringBuffer.append(TEXT_797);
d4476 1
a4476 1
    stringBuffer.append(TEXT_798);
d4480 1
a4480 1
    stringBuffer.append(TEXT_799);
d4482 1
a4482 1
    stringBuffer.append(TEXT_800);
d4487 1
a4487 1
    stringBuffer.append(TEXT_801);
d4489 1
a4489 1
    stringBuffer.append(TEXT_802);
d4491 1
a4491 1
    stringBuffer.append(TEXT_803);
d4493 1
a4493 1
    stringBuffer.append(TEXT_804);
d4497 1
a4497 1
    stringBuffer.append(TEXT_805);
d4499 1
a4499 1
    stringBuffer.append(TEXT_806);
d4501 1
a4501 1
    stringBuffer.append(TEXT_807);
d4506 1
a4506 1
    stringBuffer.append(TEXT_808);
d4508 1
a4508 1
    stringBuffer.append(TEXT_809);
d4510 1
a4510 1
    stringBuffer.append(TEXT_810);
d4512 1
a4512 1
    stringBuffer.append(TEXT_811);
d4516 1
a4516 1
    stringBuffer.append(TEXT_812);
d4518 1
a4518 1
    stringBuffer.append(TEXT_813);
d4520 1
a4520 1
    stringBuffer.append(TEXT_814);
d4524 1
a4524 1
    stringBuffer.append(TEXT_815);
d4526 1
a4526 1
    stringBuffer.append(TEXT_816);
d4530 1
a4530 1
    stringBuffer.append(TEXT_817);
d4534 1
a4534 1
    stringBuffer.append(TEXT_818);
d4542 1
a4542 1
    stringBuffer.append(TEXT_819);
d4547 1
a4547 1
    stringBuffer.append(TEXT_820);
d4557 1
a4557 1
    stringBuffer.append(TEXT_821);
d4559 1
a4559 1
    stringBuffer.append(TEXT_822);
d4561 1
a4561 1
    stringBuffer.append(TEXT_823);
d4563 1
a4563 1
    stringBuffer.append(TEXT_824);
d4567 1
a4567 1
    stringBuffer.append(TEXT_825);
d4569 1
a4569 1
    stringBuffer.append(TEXT_826);
d4571 1
a4571 1
    stringBuffer.append(TEXT_827);
d4575 1
a4575 1
    stringBuffer.append(TEXT_828);
d4580 1
a4580 1
    stringBuffer.append(TEXT_829);
d4582 1
a4582 1
    stringBuffer.append(TEXT_830);
d4584 1
a4584 1
    stringBuffer.append(TEXT_831);
d4588 1
a4588 1
    stringBuffer.append(TEXT_832);
d4592 1
a4592 1
    stringBuffer.append(TEXT_833);
d4597 1
a4597 1
    stringBuffer.append(TEXT_834);
d4601 1
a4601 1
    stringBuffer.append(TEXT_835);
d4603 1
a4603 1
    stringBuffer.append(TEXT_836);
d4605 1
a4605 1
    stringBuffer.append(TEXT_837);
d4607 1
a4607 1
    stringBuffer.append(TEXT_838);
d4609 1
a4609 1
    stringBuffer.append(TEXT_839);
d4611 1
a4611 1
    stringBuffer.append(TEXT_840);
d4613 1
a4613 1
    stringBuffer.append(TEXT_841);
d4615 1
a4615 1
    stringBuffer.append(TEXT_842);
d4617 1
a4617 1
    stringBuffer.append(TEXT_843);
d4621 1
a4621 1
    stringBuffer.append(TEXT_844);
d4623 1
a4623 1
    stringBuffer.append(TEXT_845);
d4625 1
a4625 1
    stringBuffer.append(TEXT_846);
d4630 1
a4630 1
    stringBuffer.append(TEXT_847);
d4632 1
a4632 1
    stringBuffer.append(TEXT_848);
d4634 1
a4634 1
    stringBuffer.append(TEXT_849);
d4639 1
a4639 1
    stringBuffer.append(TEXT_850);
d4641 1
a4641 1
    stringBuffer.append(TEXT_851);
d4645 1
a4645 1
    stringBuffer.append(TEXT_852);
d4649 1
a4649 1
    stringBuffer.append(TEXT_853);
d4653 1
a4653 1
    stringBuffer.append(TEXT_854);
d4660 1
a4660 1
    stringBuffer.append(TEXT_855);
d4664 1
a4664 1
    stringBuffer.append(TEXT_856);
d4666 1
a4666 1
    stringBuffer.append(TEXT_857);
d4668 1
a4668 1
    stringBuffer.append(TEXT_858);
d4673 1
a4673 1
    stringBuffer.append(TEXT_859);
d4675 1
a4675 1
    stringBuffer.append(TEXT_860);
d4679 1
a4679 1
    stringBuffer.append(TEXT_861);
d4683 1
a4683 1
    stringBuffer.append(TEXT_862);
d4685 1
a4685 1
    stringBuffer.append(TEXT_863);
d4687 1
a4687 1
    stringBuffer.append(TEXT_864);
d4689 1
a4689 1
    stringBuffer.append(TEXT_865);
d4691 1
a4691 1
    stringBuffer.append(TEXT_866);
d4693 1
a4693 1
    stringBuffer.append(TEXT_867);
d4695 1
a4695 1
    stringBuffer.append(TEXT_868);
d4697 1
a4697 1
    stringBuffer.append(TEXT_869);
d4699 1
a4699 1
    stringBuffer.append(TEXT_870);
d4701 1
a4701 1
    stringBuffer.append(TEXT_871);
d4703 1
a4703 1
    stringBuffer.append(TEXT_872);
d4705 1
a4705 1
    stringBuffer.append(TEXT_873);
d4712 3
a4714 3
    stringBuffer.append(TEXT_874);
    stringBuffer.append(TEXT_875);
    stringBuffer.append(TEXT_876);
d4716 1
a4716 1
    stringBuffer.append(TEXT_877);
d4718 3
a4720 3
    stringBuffer.append(TEXT_878);
    stringBuffer.append(TEXT_879);
    stringBuffer.append(TEXT_880);
d4722 1
a4722 1
    stringBuffer.append(TEXT_881);
d4724 1
a4724 1
    stringBuffer.append(TEXT_882);
d4726 1
a4726 1
    stringBuffer.append(TEXT_883);
d4730 1
a4730 1
    stringBuffer.append(TEXT_884);
d4738 1
a4738 1
    stringBuffer.append(TEXT_885);
d4742 1
a4742 1
    stringBuffer.append(TEXT_886);
d4744 1
a4744 1
    stringBuffer.append(TEXT_887);
d4746 1
a4746 1
    stringBuffer.append(TEXT_888);
d4748 1
a4748 1
    stringBuffer.append(TEXT_889);
d4750 1
a4750 1
    stringBuffer.append(TEXT_890);
d4752 1
a4752 1
    stringBuffer.append(TEXT_891);
d4754 1
a4754 1
    stringBuffer.append(TEXT_892);
d4756 1
a4756 1
    stringBuffer.append(TEXT_893);
d4758 1
a4758 1
    stringBuffer.append(TEXT_894);
d4760 1
a4760 1
    stringBuffer.append(TEXT_895);
d4762 1
a4762 1
    stringBuffer.append(TEXT_896);
d4764 1
a4764 1
    stringBuffer.append(TEXT_897);
d4768 1
a4768 1
    stringBuffer.append(TEXT_898);
d4772 1
a4772 1
    stringBuffer.append(TEXT_899);
d4774 1
a4774 1
    stringBuffer.append(TEXT_900);
a4777 28
    stringBuffer.append(TEXT_901);
    stringBuffer.append(TEXT_902);
    stringBuffer.append(TEXT_903);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_904);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_905);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_906);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_907);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_908);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_909);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_910);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_911);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_912);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_913);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_914);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_915);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a4778 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a4779 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4781 1
a4781 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4783 1
d4785 1
d4787 1
a4787 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d4789 1
a4789 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d4791 1
a4791 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d4793 1
a4793 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d4795 1
d4797 1
d4799 1
a4799 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4801 2
a4803 1
    stringBuffer.append(TEXT_929);
d4805 1
d4807 1
a4807 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4809 1
a4809 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4811 1
a4811 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4812 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4813 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4815 1
d4817 1
d4819 1
a4819 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4821 1
d4824 1
a4825 1
    stringBuffer.append(TEXT_942);
d4827 1
a4828 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4831 1
d4845 22
d4868 1
a4868 1
    stringBuffer.append(TEXT_955);
d4875 1
a4875 1
    stringBuffer.append(TEXT_956);
d4879 1
a4879 1
    stringBuffer.append(TEXT_957);
d4881 1
a4881 1
    stringBuffer.append(TEXT_958);
d4883 1
a4883 1
    stringBuffer.append(TEXT_959);
d4886 1
a4886 1
    stringBuffer.append(TEXT_960);
d4888 1
a4888 1
    stringBuffer.append(TEXT_961);
d4890 1
a4890 1
    stringBuffer.append(TEXT_962);
d4893 1
a4893 1
    stringBuffer.append(TEXT_963);
d4895 1
a4895 1
    stringBuffer.append(TEXT_964);
d4897 1
a4897 1
    stringBuffer.append(TEXT_965);
d4899 1
a4899 1
    stringBuffer.append(TEXT_966);
d4901 1
a4901 1
    stringBuffer.append(TEXT_967);
d4903 1
a4903 1
    stringBuffer.append(TEXT_968);
d4905 1
a4905 1
    stringBuffer.append(TEXT_969);
d4907 1
a4907 1
    stringBuffer.append(TEXT_970);
d4912 1
a4912 1
    stringBuffer.append(TEXT_971);
d4914 1
a4914 1
    stringBuffer.append(TEXT_972);
d4916 1
a4916 1
    stringBuffer.append(TEXT_973);
d4918 1
a4918 1
    stringBuffer.append(TEXT_974);
d4920 1
a4920 1
    stringBuffer.append(TEXT_975);
d4924 1
a4924 1
    stringBuffer.append(TEXT_976);
d4926 1
a4926 1
    stringBuffer.append(TEXT_977);
d4928 1
a4928 1
    stringBuffer.append(TEXT_978);
d4930 1
a4930 1
    stringBuffer.append(TEXT_979);
d4934 1
a4934 1
    stringBuffer.append(TEXT_980);
d4936 1
a4936 1
    stringBuffer.append(TEXT_981);
d4938 1
a4938 1
    stringBuffer.append(TEXT_982);
d4940 1
a4940 1
    stringBuffer.append(TEXT_983);
d4942 1
a4942 1
    stringBuffer.append(TEXT_984);
d4944 1
a4944 1
    stringBuffer.append(TEXT_985);
d4946 1
a4946 1
    stringBuffer.append(TEXT_986);
d4957 1
a4957 1
    stringBuffer.append(TEXT_987);
d4963 1
a4963 1
    stringBuffer.append(TEXT_988);
d4965 1
a4965 1
    stringBuffer.append(TEXT_989);
d4967 1
a4967 1
    stringBuffer.append(TEXT_990);
d4971 1
a4971 1
    stringBuffer.append(TEXT_991);
d4973 1
a4973 1
    stringBuffer.append(TEXT_992);
d4975 1
a4975 1
    stringBuffer.append(TEXT_993);
d4977 1
a4977 1
    stringBuffer.append(TEXT_994);
d4979 1
a4979 1
    stringBuffer.append(TEXT_995);
d4992 1
a4992 1
    stringBuffer.append(TEXT_996);
d4998 1
a4998 1
    stringBuffer.append(TEXT_997);
d5000 1
a5000 1
    stringBuffer.append(TEXT_998);
d5002 1
a5002 1
    stringBuffer.append(TEXT_999);
d5006 1
a5006 1
    stringBuffer.append(TEXT_1000);
d5008 1
a5008 1
    stringBuffer.append(TEXT_1001);
d5010 1
a5010 1
    stringBuffer.append(TEXT_1002);
d5012 1
a5012 1
    stringBuffer.append(TEXT_1003);
d5014 1
a5014 1
    stringBuffer.append(TEXT_1004);
d5019 1
a5019 1
    stringBuffer.append(TEXT_1005);
d5021 1
a5021 1
    stringBuffer.append(TEXT_1006);
d5023 1
a5023 1
    stringBuffer.append(TEXT_1007);
d5025 1
a5025 1
    stringBuffer.append(TEXT_1008);
d5027 1
a5027 1
    stringBuffer.append(TEXT_1009);
d5029 1
a5029 1
    stringBuffer.append(TEXT_1010);
d5031 1
a5031 1
    stringBuffer.append(TEXT_1011);
d5033 1
a5033 1
    stringBuffer.append(TEXT_1012);
d5035 1
a5035 1
    stringBuffer.append(TEXT_1013);
d5039 1
a5039 1
    stringBuffer.append(TEXT_1014);
d5041 1
a5041 1
    stringBuffer.append(TEXT_1015);
d5043 1
a5043 1
    stringBuffer.append(TEXT_1016);
d5045 1
a5045 1
    stringBuffer.append(TEXT_1017);
d5059 1
a5059 1
    stringBuffer.append(TEXT_1018);
d5061 1
a5061 1
    stringBuffer.append(TEXT_1019);
d5063 1
a5063 1
    stringBuffer.append(TEXT_1020);
d5065 1
a5065 1
    stringBuffer.append(TEXT_1021);
d5069 1
a5069 1
    stringBuffer.append(TEXT_1022);
d5071 1
a5071 1
    stringBuffer.append(TEXT_1023);
d5073 1
a5073 1
    stringBuffer.append(TEXT_1024);
d5075 1
a5075 1
    stringBuffer.append(TEXT_1025);
d5077 1
a5077 1
    stringBuffer.append(TEXT_1026);
d5079 1
a5079 1
    stringBuffer.append(TEXT_1027);
d5081 1
a5081 1
    stringBuffer.append(TEXT_1028);
d5083 1
a5083 1
    stringBuffer.append(TEXT_1029);
d5085 1
a5085 1
    stringBuffer.append(TEXT_1030);
d5117 1
a5117 1
    stringBuffer.append(TEXT_1031);
d5120 1
a5120 1
    stringBuffer.append(TEXT_1032);
d5122 1
a5122 1
    stringBuffer.append(TEXT_1033);
d5124 1
a5124 1
    stringBuffer.append(TEXT_1034);
d5126 1
a5126 1
    stringBuffer.append(TEXT_1035);
d5128 1
a5128 1
    stringBuffer.append(TEXT_1036);
d5130 1
a5130 1
    stringBuffer.append(TEXT_1037);
d5133 1
a5133 1
    stringBuffer.append(TEXT_1038);
d5135 1
a5135 1
    stringBuffer.append(TEXT_1039);
d5137 1
a5137 1
    stringBuffer.append(TEXT_1040);
d5139 1
a5139 1
    stringBuffer.append(TEXT_1041);
d5142 1
a5142 1
    stringBuffer.append(TEXT_1042);
d5144 1
a5144 1
    stringBuffer.append(TEXT_1043);
d5146 1
a5146 1
    stringBuffer.append(TEXT_1044);
d5150 1
a5150 1
    stringBuffer.append(TEXT_1045);
d5152 1
a5152 1
    stringBuffer.append(TEXT_1046);
d5154 1
a5154 1
    stringBuffer.append(TEXT_1047);
d5156 1
a5156 1
    stringBuffer.append(TEXT_1048);
d5158 1
a5158 1
    stringBuffer.append(TEXT_1049);
d5160 1
a5160 1
    stringBuffer.append(TEXT_1050);
d5162 1
a5162 1
    stringBuffer.append(TEXT_1051);
d5166 1
a5166 1
    stringBuffer.append(TEXT_1052);
d5170 1
a5170 1
    stringBuffer.append(TEXT_1053);
d5178 1
a5178 1
    stringBuffer.append(TEXT_1054);
d5182 1
a5182 1
    stringBuffer.append(TEXT_1055);
d5184 1
a5184 1
    stringBuffer.append(TEXT_1056);
d5186 1
a5186 1
    stringBuffer.append(TEXT_1057);
d5188 1
a5188 1
    stringBuffer.append(TEXT_1058);
d5190 1
a5190 1
    stringBuffer.append(TEXT_1059);
d5198 1
a5198 1
    stringBuffer.append(TEXT_1060);
d5204 1
a5204 1
    stringBuffer.append(TEXT_1061);
d5206 1
a5206 1
    stringBuffer.append(TEXT_1062);
d5208 1
a5208 1
    stringBuffer.append(TEXT_1063);
d5212 1
a5212 1
    stringBuffer.append(TEXT_1064);
d5214 1
a5214 1
    stringBuffer.append(TEXT_1065);
d5216 1
a5216 1
    stringBuffer.append(TEXT_1066);
d5218 1
a5218 1
    stringBuffer.append(TEXT_1067);
d5220 1
a5220 1
    stringBuffer.append(TEXT_1068);
d5234 1
a5234 1
    stringBuffer.append(TEXT_1069);
d5240 1
a5240 1
    stringBuffer.append(TEXT_1070);
d5242 1
a5242 1
    stringBuffer.append(TEXT_1071);
d5244 1
a5244 1
    stringBuffer.append(TEXT_1072);
d5248 1
a5248 1
    stringBuffer.append(TEXT_1073);
d5250 1
a5250 1
    stringBuffer.append(TEXT_1074);
d5252 1
a5252 1
    stringBuffer.append(TEXT_1075);
d5254 1
a5254 1
    stringBuffer.append(TEXT_1076);
d5256 1
a5256 1
    stringBuffer.append(TEXT_1077);
d5275 1
a5275 1
    stringBuffer.append(TEXT_1078);
d5281 1
a5281 1
    stringBuffer.append(TEXT_1079);
d5283 1
a5283 1
    stringBuffer.append(TEXT_1080);
d5285 1
a5285 1
    stringBuffer.append(TEXT_1081);
d5289 1
a5289 1
    stringBuffer.append(TEXT_1082);
d5291 1
a5291 1
    stringBuffer.append(TEXT_1083);
d5293 1
a5293 1
    stringBuffer.append(TEXT_1084);
d5295 1
a5295 1
    stringBuffer.append(TEXT_1085);
d5297 1
a5297 1
    stringBuffer.append(TEXT_1086);
d5308 1
a5308 1
    stringBuffer.append(TEXT_1087);
d5312 1
a5312 1
    stringBuffer.append(TEXT_1088);
d5314 1
a5314 1
    stringBuffer.append(TEXT_1089);
d5316 1
a5316 1
    stringBuffer.append(TEXT_1090);
d5318 1
a5318 1
    stringBuffer.append(TEXT_1091);
d5325 1
a5325 1
    stringBuffer.append(TEXT_1092);
d5335 1
a5335 1
    stringBuffer.append(TEXT_1093);
d5341 1
a5341 1
    stringBuffer.append(TEXT_1094);
d5343 1
a5343 1
    stringBuffer.append(TEXT_1095);
d5345 1
a5345 1
    stringBuffer.append(TEXT_1096);
d5349 1
a5349 1
    stringBuffer.append(TEXT_1097);
d5351 1
a5351 1
    stringBuffer.append(TEXT_1098);
d5353 1
a5353 1
    stringBuffer.append(TEXT_1099);
d5355 1
a5355 1
    stringBuffer.append(TEXT_1100);
d5357 1
a5357 1
    stringBuffer.append(TEXT_1101);
d5368 1
a5368 1
    stringBuffer.append(TEXT_1102);
d5372 1
a5372 1
    stringBuffer.append(TEXT_1103);
d5374 1
a5374 1
    stringBuffer.append(TEXT_1104);
d5376 1
a5376 1
    stringBuffer.append(TEXT_1105);
d5378 1
a5378 1
    stringBuffer.append(TEXT_1106);
d5385 1
a5385 1
    stringBuffer.append(TEXT_1107);
d5389 1
a5389 1
    stringBuffer.append(TEXT_1108);
d5393 1
a5393 1
    stringBuffer.append(TEXT_1109);
d5395 1
a5395 1
    stringBuffer.append(TEXT_1110);
d5397 1
a5397 1
    stringBuffer.append(TEXT_1111);
d5399 1
a5399 1
    stringBuffer.append(TEXT_1112);
d5401 1
a5401 1
    stringBuffer.append(TEXT_1113);
d5403 1
a5403 1
    stringBuffer.append(TEXT_1114);
d5405 1
a5405 1
    stringBuffer.append(TEXT_1115);
d5424 1
a5424 1
    stringBuffer.append(TEXT_1116);
d5426 1
a5426 1
    stringBuffer.append(TEXT_1117);
d5428 1
a5428 1
    stringBuffer.append(TEXT_1118);
d5430 1
a5430 1
    stringBuffer.append(TEXT_1119);
d5432 1
a5432 1
    stringBuffer.append(TEXT_1120);
d5434 1
a5434 1
    stringBuffer.append(TEXT_1121);
d5436 1
a5436 1
    stringBuffer.append(TEXT_1122);
d5442 1
a5442 1
    stringBuffer.append(TEXT_1123);
d5444 1
a5444 1
    stringBuffer.append(TEXT_1124);
d5446 1
a5446 1
    stringBuffer.append(TEXT_1125);
d5448 1
a5448 1
    stringBuffer.append(TEXT_1126);
d5452 1
a5452 1
    stringBuffer.append(TEXT_1127);
d5454 1
a5454 1
    stringBuffer.append(TEXT_1128);
d5456 1
a5456 1
    stringBuffer.append(TEXT_1129);
d5458 1
a5458 1
    stringBuffer.append(TEXT_1130);
d5460 1
a5460 1
    stringBuffer.append(TEXT_1131);
d5464 1
a5464 1
    stringBuffer.append(TEXT_1132);
d5466 1
a5466 1
    stringBuffer.append(TEXT_1133);
d5468 1
a5468 1
    stringBuffer.append(TEXT_1134);
d5470 1
a5470 1
    stringBuffer.append(TEXT_1135);
d5476 1
a5476 1
    stringBuffer.append(TEXT_1136);
d5478 1
a5478 1
    stringBuffer.append(TEXT_1137);
d5480 1
a5480 1
    stringBuffer.append(TEXT_1138);
d5482 1
a5482 1
    stringBuffer.append(TEXT_1139);
d5486 1
a5486 1
    stringBuffer.append(TEXT_1140);
d5488 1
a5488 1
    stringBuffer.append(TEXT_1141);
d5490 1
a5490 1
    stringBuffer.append(TEXT_1142);
d5492 1
a5492 1
    stringBuffer.append(TEXT_1143);
d5494 1
a5494 1
    stringBuffer.append(TEXT_1144);
d5498 1
a5498 1
    stringBuffer.append(TEXT_1145);
d5500 1
a5500 1
    stringBuffer.append(TEXT_1146);
d5502 1
a5502 1
    stringBuffer.append(TEXT_1147);
d5504 1
a5504 1
    stringBuffer.append(TEXT_1148);
d5508 1
a5508 1
    stringBuffer.append(TEXT_1149);
d5513 1
a5513 1
    stringBuffer.append(TEXT_1150);
d5515 1
a5515 1
    stringBuffer.append(TEXT_1151);
d5517 1
a5517 1
    stringBuffer.append(TEXT_1152);
d5519 1
a5519 1
    stringBuffer.append(TEXT_1153);
d5521 1
a5521 1
    stringBuffer.append(TEXT_1154);
d5523 1
a5523 1
    stringBuffer.append(TEXT_1155);
d5525 1
a5525 1
    stringBuffer.append(TEXT_1156);
d5529 1
a5529 1
    stringBuffer.append(TEXT_1157);
d5531 1
a5531 1
    stringBuffer.append(TEXT_1158);
d5533 1
a5533 1
    stringBuffer.append(TEXT_1159);
d5535 1
a5535 1
    stringBuffer.append(TEXT_1160);
d5543 1
a5543 1
    stringBuffer.append(TEXT_1161);
d5545 1
a5545 1
    stringBuffer.append(TEXT_1162);
d5547 1
a5547 1
    stringBuffer.append(TEXT_1163);
d5549 1
a5549 1
    stringBuffer.append(TEXT_1164);
d5551 1
a5551 1
    stringBuffer.append(TEXT_1165);
d5553 1
a5553 1
    stringBuffer.append(TEXT_1166);
d5555 1
a5555 1
    stringBuffer.append(TEXT_1167);
d5559 1
a5559 1
    stringBuffer.append(TEXT_1168);
d5561 1
a5561 1
    stringBuffer.append(TEXT_1169);
d5563 1
a5563 1
    stringBuffer.append(TEXT_1170);
d5565 1
a5565 1
    stringBuffer.append(TEXT_1171);
d5567 1
a5567 1
    stringBuffer.append(TEXT_1172);
d5569 1
a5569 1
    stringBuffer.append(TEXT_1173);
d5571 1
a5571 1
    stringBuffer.append(TEXT_1174);
d5573 1
a5573 1
    stringBuffer.append(TEXT_1175);
d5578 2
a5579 2
    stringBuffer.append(TEXT_1176);
    stringBuffer.append(TEXT_1177);
d5583 1
a5583 1
    stringBuffer.append(TEXT_1178);
d5585 1
a5585 1
    stringBuffer.append(TEXT_1179);
d5587 1
a5587 1
    stringBuffer.append(TEXT_1180);
d5589 1
a5589 1
    stringBuffer.append(TEXT_1181);
d5597 2
a5598 2
    stringBuffer.append(TEXT_1182);
    stringBuffer.append(TEXT_1183);
d5602 1
a5602 1
    stringBuffer.append(TEXT_1184);
d5604 1
a5604 1
    stringBuffer.append(TEXT_1185);
d5606 1
a5606 1
    stringBuffer.append(TEXT_1186);
d5633 1
a5633 1
    stringBuffer.append(TEXT_1187);
d5635 1
a5635 1
    stringBuffer.append(TEXT_1188);
d5637 1
a5637 1
    stringBuffer.append(TEXT_1189);
d5641 1
a5641 1
    stringBuffer.append(TEXT_1190);
d5643 1
a5643 1
    stringBuffer.append(TEXT_1191);
d5645 1
a5645 1
    stringBuffer.append(TEXT_1192);
d5647 1
a5647 1
    stringBuffer.append(TEXT_1193);
d5649 1
a5649 1
    stringBuffer.append(TEXT_1194);
d5651 1
a5651 1
    stringBuffer.append(TEXT_1195);
d5655 1
a5655 1
    stringBuffer.append(TEXT_1196);
d5657 1
a5657 1
    stringBuffer.append(TEXT_1197);
d5659 1
a5659 1
    stringBuffer.append(TEXT_1198);
d5661 1
a5661 1
    stringBuffer.append(TEXT_1199);
d5663 1
a5663 1
    stringBuffer.append(TEXT_1200);
d5665 1
a5665 1
    stringBuffer.append(TEXT_1201);
d5670 1
a5670 1
    stringBuffer.append(TEXT_1202);
d5672 1
a5672 1
    stringBuffer.append(TEXT_1203);
d5678 1
a5678 1
    stringBuffer.append(TEXT_1204);
d5680 1
a5680 1
    stringBuffer.append(TEXT_1205);
d5682 1
a5682 1
    stringBuffer.append(TEXT_1206);
d5684 1
a5684 1
    stringBuffer.append(TEXT_1207);
d5686 1
a5686 1
    stringBuffer.append(TEXT_1208);
d5688 1
a5688 1
    stringBuffer.append(TEXT_1209);
d5692 1
a5692 1
    stringBuffer.append(TEXT_1210);
d5694 1
a5694 1
    stringBuffer.append(TEXT_1211);
d5696 1
a5696 1
    stringBuffer.append(TEXT_1212);
d5698 1
a5698 1
    stringBuffer.append(TEXT_1213);
d5700 1
a5700 1
    stringBuffer.append(TEXT_1214);
d5702 1
a5702 1
    stringBuffer.append(TEXT_1215);
d5709 1
a5709 1
    stringBuffer.append(TEXT_1216);
d5711 1
a5711 1
    stringBuffer.append(TEXT_1217);
d5713 1
a5713 1
    stringBuffer.append(TEXT_1218);
d5715 1
a5715 1
    stringBuffer.append(TEXT_1219);
d5717 1
a5717 1
    stringBuffer.append(TEXT_1220);
d5719 1
a5719 1
    stringBuffer.append(TEXT_1221);
d5723 1
a5723 1
    stringBuffer.append(TEXT_1222);
d5725 1
a5725 1
    stringBuffer.append(TEXT_1223);
d5727 1
a5727 1
    stringBuffer.append(TEXT_1224);
d5729 1
a5729 1
    stringBuffer.append(TEXT_1225);
d5731 1
a5731 1
    stringBuffer.append(TEXT_1226);
d5733 1
a5733 1
    stringBuffer.append(TEXT_1227);
d5740 1
a5740 1
    stringBuffer.append(TEXT_1228);
d5742 1
a5742 1
    stringBuffer.append(TEXT_1229);
d5744 1
a5744 1
    stringBuffer.append(TEXT_1230);
d5746 1
a5746 1
    stringBuffer.append(TEXT_1231);
d5748 1
a5748 1
    stringBuffer.append(TEXT_1232);
d5750 1
a5750 1
    stringBuffer.append(TEXT_1233);
d5754 1
a5754 1
    stringBuffer.append(TEXT_1234);
d5756 1
a5756 1
    stringBuffer.append(TEXT_1235);
d5758 1
a5758 1
    stringBuffer.append(TEXT_1236);
d5760 1
a5760 1
    stringBuffer.append(TEXT_1237);
d5762 1
a5762 1
    stringBuffer.append(TEXT_1238);
d5764 1
a5764 1
    stringBuffer.append(TEXT_1239);
d5769 1
a5769 1
    stringBuffer.append(TEXT_1240);
d5775 1
a5775 1
    stringBuffer.append(TEXT_1241);
d5777 1
a5777 1
    stringBuffer.append(TEXT_1242);
d5779 1
a5779 1
    stringBuffer.append(TEXT_1243);
d5781 1
a5781 1
    stringBuffer.append(TEXT_1244);
d5783 1
a5783 1
    stringBuffer.append(TEXT_1245);
d5785 1
a5785 1
    stringBuffer.append(TEXT_1246);
d5789 1
a5789 1
    stringBuffer.append(TEXT_1247);
d5791 1
a5791 1
    stringBuffer.append(TEXT_1248);
d5793 1
a5793 1
    stringBuffer.append(TEXT_1249);
d5795 1
a5795 1
    stringBuffer.append(TEXT_1250);
d5797 1
a5797 1
    stringBuffer.append(TEXT_1251);
d5799 1
a5799 1
    stringBuffer.append(TEXT_1252);
d5806 1
a5806 1
    stringBuffer.append(TEXT_1253);
d5810 1
a5810 1
    stringBuffer.append(TEXT_1254);
d5814 1
a5814 1
    stringBuffer.append(TEXT_1255);
d5817 1
a5817 1
    stringBuffer.append(TEXT_1256);
d5819 1
a5819 1
    stringBuffer.append(TEXT_1257);
d5821 1
a5821 1
    stringBuffer.append(TEXT_1258);
d5824 1
a5824 1
    stringBuffer.append(TEXT_1259);
d5826 1
a5826 1
    stringBuffer.append(TEXT_1260);
d5828 1
a5828 1
    stringBuffer.append(TEXT_1261);
d5835 1
a5835 1
    stringBuffer.append(TEXT_1262);
d5839 1
a5839 1
    stringBuffer.append(TEXT_1263);
d5841 1
a5841 1
    stringBuffer.append(TEXT_1264);
d5843 1
a5843 1
    stringBuffer.append(TEXT_1265);
d5845 1
a5845 1
    stringBuffer.append(TEXT_1266);
d5847 1
a5847 1
    stringBuffer.append(TEXT_1267);
d5855 1
a5855 1
    stringBuffer.append(TEXT_1268);
d5861 1
a5861 1
    stringBuffer.append(TEXT_1269);
d5863 1
a5863 1
    stringBuffer.append(TEXT_1270);
d5865 1
a5865 1
    stringBuffer.append(TEXT_1271);
d5869 1
a5869 1
    stringBuffer.append(TEXT_1272);
d5871 1
a5871 1
    stringBuffer.append(TEXT_1273);
d5873 1
a5873 1
    stringBuffer.append(TEXT_1274);
d5875 1
a5875 1
    stringBuffer.append(TEXT_1275);
d5877 1
a5877 1
    stringBuffer.append(TEXT_1276);
d5892 1
a5892 1
    stringBuffer.append(TEXT_1277);
d5898 1
a5898 1
    stringBuffer.append(TEXT_1278);
d5900 1
a5900 1
    stringBuffer.append(TEXT_1279);
d5902 1
a5902 1
    stringBuffer.append(TEXT_1280);
d5906 1
a5906 1
    stringBuffer.append(TEXT_1281);
d5908 1
a5908 1
    stringBuffer.append(TEXT_1282);
d5910 1
a5910 1
    stringBuffer.append(TEXT_1283);
d5912 1
a5912 1
    stringBuffer.append(TEXT_1284);
d5914 1
a5914 1
    stringBuffer.append(TEXT_1285);
d5931 1
a5931 1
    stringBuffer.append(TEXT_1286);
d5937 1
a5937 1
    stringBuffer.append(TEXT_1287);
d5939 1
a5939 1
    stringBuffer.append(TEXT_1288);
d5941 1
a5941 1
    stringBuffer.append(TEXT_1289);
d5945 1
a5945 1
    stringBuffer.append(TEXT_1290);
d5947 1
a5947 1
    stringBuffer.append(TEXT_1291);
d5949 1
a5949 1
    stringBuffer.append(TEXT_1292);
d5951 1
a5951 1
    stringBuffer.append(TEXT_1293);
d5953 1
a5953 1
    stringBuffer.append(TEXT_1294);
d5964 1
a5964 1
    stringBuffer.append(TEXT_1295);
d5968 1
a5968 1
    stringBuffer.append(TEXT_1296);
d5970 1
a5970 1
    stringBuffer.append(TEXT_1297);
d5972 1
a5972 1
    stringBuffer.append(TEXT_1298);
d5974 1
a5974 1
    stringBuffer.append(TEXT_1299);
d5981 1
a5981 1
    stringBuffer.append(TEXT_1300);
d5992 1
a5992 1
    stringBuffer.append(TEXT_1301);
d5998 1
a5998 1
    stringBuffer.append(TEXT_1302);
d6000 1
a6000 1
    stringBuffer.append(TEXT_1303);
d6002 1
a6002 1
    stringBuffer.append(TEXT_1304);
d6006 1
a6006 1
    stringBuffer.append(TEXT_1305);
d6008 1
a6008 1
    stringBuffer.append(TEXT_1306);
d6010 1
a6010 1
    stringBuffer.append(TEXT_1307);
d6012 1
a6012 1
    stringBuffer.append(TEXT_1308);
d6014 1
a6014 1
    stringBuffer.append(TEXT_1309);
d6025 1
a6025 1
    stringBuffer.append(TEXT_1310);
d6029 1
a6029 1
    stringBuffer.append(TEXT_1311);
d6031 1
a6031 1
    stringBuffer.append(TEXT_1312);
d6033 1
a6033 1
    stringBuffer.append(TEXT_1313);
d6035 1
a6035 1
    stringBuffer.append(TEXT_1314);
d6042 1
a6042 1
    stringBuffer.append(TEXT_1315);
d6046 1
a6046 1
    stringBuffer.append(TEXT_1316);
d6050 2
a6051 2
    stringBuffer.append(TEXT_1317);
    stringBuffer.append(TEXT_1318);
d6055 1
a6055 1
    stringBuffer.append(TEXT_1319);
d6057 1
a6057 1
    stringBuffer.append(TEXT_1320);
d6059 1
a6059 1
    stringBuffer.append(TEXT_1321);
d6061 1
a6061 1
    stringBuffer.append(TEXT_1322);
d6065 1
a6065 1
    stringBuffer.append(TEXT_1323);
d6095 1
a6095 1
    stringBuffer.append(TEXT_1324);
d6098 1
a6098 1
    stringBuffer.append(TEXT_1325);
d6100 1
a6100 1
    stringBuffer.append(TEXT_1326);
d6102 1
a6102 1
    stringBuffer.append(TEXT_1327);
d6104 1
a6104 1
    stringBuffer.append(TEXT_1328);
d6106 1
a6106 1
    stringBuffer.append(TEXT_1329);
d6108 1
a6108 1
    stringBuffer.append(TEXT_1330);
d6111 1
a6111 1
    stringBuffer.append(TEXT_1331);
d6113 1
a6113 1
    stringBuffer.append(TEXT_1332);
d6115 1
a6115 1
    stringBuffer.append(TEXT_1333);
d6117 1
a6117 1
    stringBuffer.append(TEXT_1334);
d6120 1
a6120 1
    stringBuffer.append(TEXT_1335);
d6122 1
a6122 1
    stringBuffer.append(TEXT_1336);
d6124 1
a6124 1
    stringBuffer.append(TEXT_1337);
d6128 1
a6128 1
    stringBuffer.append(TEXT_1338);
d6130 1
a6130 1
    stringBuffer.append(TEXT_1339);
d6132 1
a6132 1
    stringBuffer.append(TEXT_1340);
d6134 1
a6134 1
    stringBuffer.append(TEXT_1341);
d6136 1
a6136 1
    stringBuffer.append(TEXT_1342);
d6138 1
a6138 1
    stringBuffer.append(TEXT_1343);
d6140 1
a6140 1
    stringBuffer.append(TEXT_1344);
d6144 1
a6144 1
    stringBuffer.append(TEXT_1345);
d6148 1
a6148 1
    stringBuffer.append(TEXT_1346);
d6161 1
a6161 1
    stringBuffer.append(TEXT_1347);
d6167 1
a6167 1
    stringBuffer.append(TEXT_1348);
d6169 1
a6169 1
    stringBuffer.append(TEXT_1349);
d6171 1
a6171 1
    stringBuffer.append(TEXT_1350);
d6175 1
a6175 1
    stringBuffer.append(TEXT_1351);
d6177 1
a6177 1
    stringBuffer.append(TEXT_1352);
d6179 1
a6179 1
    stringBuffer.append(TEXT_1353);
d6181 1
a6181 1
    stringBuffer.append(TEXT_1354);
d6183 1
a6183 1
    stringBuffer.append(TEXT_1355);
d6194 1
a6194 1
    stringBuffer.append(TEXT_1356);
d6198 1
a6198 1
    stringBuffer.append(TEXT_1357);
d6200 1
a6200 1
    stringBuffer.append(TEXT_1358);
d6202 1
a6202 1
    stringBuffer.append(TEXT_1359);
d6204 1
a6204 1
    stringBuffer.append(TEXT_1360);
d6211 1
a6211 1
    stringBuffer.append(TEXT_1361);
d6223 1
a6223 1
    stringBuffer.append(TEXT_1362);
d6229 1
a6229 1
    stringBuffer.append(TEXT_1363);
d6231 1
a6231 1
    stringBuffer.append(TEXT_1364);
d6233 1
a6233 1
    stringBuffer.append(TEXT_1365);
d6237 1
a6237 1
    stringBuffer.append(TEXT_1366);
d6239 1
a6239 1
    stringBuffer.append(TEXT_1367);
d6241 1
a6241 1
    stringBuffer.append(TEXT_1368);
d6243 1
a6243 1
    stringBuffer.append(TEXT_1369);
d6245 1
a6245 1
    stringBuffer.append(TEXT_1370);
d6256 1
a6256 1
    stringBuffer.append(TEXT_1371);
d6260 1
a6260 1
    stringBuffer.append(TEXT_1372);
d6262 1
a6262 1
    stringBuffer.append(TEXT_1373);
d6264 1
a6264 1
    stringBuffer.append(TEXT_1374);
d6266 1
a6266 1
    stringBuffer.append(TEXT_1375);
d6273 1
a6273 1
    stringBuffer.append(TEXT_1376);
d6277 1
a6277 1
    stringBuffer.append(TEXT_1377);
d6281 1
a6281 1
    stringBuffer.append(TEXT_1378);
d6283 1
a6283 1
    stringBuffer.append(TEXT_1379);
d6285 1
a6285 1
    stringBuffer.append(TEXT_1380);
d6287 1
a6287 1
    stringBuffer.append(TEXT_1381);
d6289 1
a6289 1
    stringBuffer.append(TEXT_1382);
d6291 1
a6291 1
    stringBuffer.append(TEXT_1383);
d6293 1
a6293 1
    stringBuffer.append(TEXT_1384);
d6300 1
a6300 1
    stringBuffer.append(TEXT_1385);
d6302 1
a6302 1
    stringBuffer.append(TEXT_1386);
d6304 1
a6304 1
    stringBuffer.append(TEXT_1387);
d6306 1
a6306 1
    stringBuffer.append(TEXT_1388);
d6308 1
a6308 1
    stringBuffer.append(TEXT_1389);
d6310 1
a6310 1
    stringBuffer.append(TEXT_1390);
d6312 1
a6312 1
    stringBuffer.append(TEXT_1391);
d6316 1
a6316 1
    stringBuffer.append(TEXT_1392);
d6318 1
a6318 1
    stringBuffer.append(TEXT_1393);
d6320 1
a6320 1
    stringBuffer.append(TEXT_1394);
d6322 1
a6322 1
    stringBuffer.append(TEXT_1395);
d6329 1
a6329 1
    stringBuffer.append(TEXT_1396);
d6331 1
a6331 1
    stringBuffer.append(TEXT_1397);
d6333 1
a6333 1
    stringBuffer.append(TEXT_1398);
d6335 1
a6335 1
    stringBuffer.append(TEXT_1399);
d6337 1
a6337 1
    stringBuffer.append(TEXT_1400);
d6339 1
a6339 1
    stringBuffer.append(TEXT_1401);
d6341 1
a6341 1
    stringBuffer.append(TEXT_1402);
d6345 1
a6345 1
    stringBuffer.append(TEXT_1403);
d6347 1
a6347 1
    stringBuffer.append(TEXT_1404);
d6349 1
a6349 1
    stringBuffer.append(TEXT_1405);
d6351 1
a6351 1
    stringBuffer.append(TEXT_1406);
d6356 1
a6356 1
    stringBuffer.append(TEXT_1407);
d6361 2
a6362 2
    stringBuffer.append(TEXT_1408);
    stringBuffer.append(TEXT_1409);
d6366 1
a6366 1
    stringBuffer.append(TEXT_1410);
d6368 1
a6368 1
    stringBuffer.append(TEXT_1411);
d6370 1
a6370 1
    stringBuffer.append(TEXT_1412);
d6397 1
a6397 1
    stringBuffer.append(TEXT_1413);
d6399 1
a6399 1
    stringBuffer.append(TEXT_1414);
d6401 1
a6401 1
    stringBuffer.append(TEXT_1415);
d6405 1
a6405 1
    stringBuffer.append(TEXT_1416);
d6407 1
a6407 1
    stringBuffer.append(TEXT_1417);
d6409 1
a6409 1
    stringBuffer.append(TEXT_1418);
d6411 1
a6411 1
    stringBuffer.append(TEXT_1419);
d6413 1
a6413 1
    stringBuffer.append(TEXT_1420);
d6415 1
a6415 1
    stringBuffer.append(TEXT_1421);
d6419 1
a6419 1
    stringBuffer.append(TEXT_1422);
d6421 1
a6421 1
    stringBuffer.append(TEXT_1423);
d6423 1
a6423 1
    stringBuffer.append(TEXT_1424);
d6425 1
a6425 1
    stringBuffer.append(TEXT_1425);
d6427 1
a6427 1
    stringBuffer.append(TEXT_1426);
d6429 1
a6429 1
    stringBuffer.append(TEXT_1427);
d6434 1
a6434 1
    stringBuffer.append(TEXT_1428);
d6436 1
a6436 1
    stringBuffer.append(TEXT_1429);
d6442 1
a6442 1
    stringBuffer.append(TEXT_1430);
d6444 1
a6444 1
    stringBuffer.append(TEXT_1431);
d6446 1
a6446 1
    stringBuffer.append(TEXT_1432);
d6448 1
a6448 1
    stringBuffer.append(TEXT_1433);
d6450 1
a6450 1
    stringBuffer.append(TEXT_1434);
d6452 1
a6452 1
    stringBuffer.append(TEXT_1435);
d6456 1
a6456 1
    stringBuffer.append(TEXT_1436);
d6458 1
a6458 1
    stringBuffer.append(TEXT_1437);
d6460 1
a6460 1
    stringBuffer.append(TEXT_1438);
d6462 1
a6462 1
    stringBuffer.append(TEXT_1439);
d6464 1
a6464 1
    stringBuffer.append(TEXT_1440);
d6466 1
a6466 1
    stringBuffer.append(TEXT_1441);
d6473 1
a6473 1
    stringBuffer.append(TEXT_1442);
d6475 1
a6475 1
    stringBuffer.append(TEXT_1443);
d6477 1
a6477 1
    stringBuffer.append(TEXT_1444);
d6479 1
a6479 1
    stringBuffer.append(TEXT_1445);
d6481 1
a6481 1
    stringBuffer.append(TEXT_1446);
d6483 1
a6483 1
    stringBuffer.append(TEXT_1447);
d6487 1
a6487 1
    stringBuffer.append(TEXT_1448);
d6489 1
a6489 1
    stringBuffer.append(TEXT_1449);
d6491 1
a6491 1
    stringBuffer.append(TEXT_1450);
d6493 1
a6493 1
    stringBuffer.append(TEXT_1451);
d6495 1
a6495 1
    stringBuffer.append(TEXT_1452);
d6497 1
a6497 1
    stringBuffer.append(TEXT_1453);
d6504 1
a6504 1
    stringBuffer.append(TEXT_1454);
d6506 1
a6506 1
    stringBuffer.append(TEXT_1455);
d6508 1
a6508 1
    stringBuffer.append(TEXT_1456);
d6510 1
a6510 1
    stringBuffer.append(TEXT_1457);
d6512 1
a6512 1
    stringBuffer.append(TEXT_1458);
d6514 1
a6514 1
    stringBuffer.append(TEXT_1459);
d6518 1
a6518 1
    stringBuffer.append(TEXT_1460);
d6520 1
a6520 1
    stringBuffer.append(TEXT_1461);
d6522 1
a6522 1
    stringBuffer.append(TEXT_1462);
d6524 1
a6524 1
    stringBuffer.append(TEXT_1463);
d6526 1
a6526 1
    stringBuffer.append(TEXT_1464);
d6528 1
a6528 1
    stringBuffer.append(TEXT_1465);
d6533 1
a6533 1
    stringBuffer.append(TEXT_1466);
d6539 1
a6539 1
    stringBuffer.append(TEXT_1467);
d6541 1
a6541 1
    stringBuffer.append(TEXT_1468);
d6543 1
a6543 1
    stringBuffer.append(TEXT_1469);
d6545 1
a6545 1
    stringBuffer.append(TEXT_1470);
d6547 1
a6547 1
    stringBuffer.append(TEXT_1471);
d6549 1
a6549 1
    stringBuffer.append(TEXT_1472);
d6553 1
a6553 1
    stringBuffer.append(TEXT_1473);
d6555 1
a6555 1
    stringBuffer.append(TEXT_1474);
d6557 1
a6557 1
    stringBuffer.append(TEXT_1475);
d6559 1
a6559 1
    stringBuffer.append(TEXT_1476);
d6561 1
a6561 1
    stringBuffer.append(TEXT_1477);
d6563 1
a6563 1
    stringBuffer.append(TEXT_1478);
d6570 1
a6570 1
    stringBuffer.append(TEXT_1479);
d6574 1
a6574 1
    stringBuffer.append(TEXT_1480);
d6578 1
a6578 1
    stringBuffer.append(TEXT_1481);
d6581 1
a6581 1
    stringBuffer.append(TEXT_1482);
d6583 1
a6583 1
    stringBuffer.append(TEXT_1483);
d6585 1
a6585 1
    stringBuffer.append(TEXT_1484);
d6587 1
a6587 1
    stringBuffer.append(TEXT_1485);
d6589 1
a6589 1
    stringBuffer.append(TEXT_1486);
d6592 1
a6592 1
    stringBuffer.append(TEXT_1487);
d6594 1
a6594 1
    stringBuffer.append(TEXT_1488);
d6596 1
a6596 1
    stringBuffer.append(TEXT_1489);
d6598 1
a6598 1
    stringBuffer.append(TEXT_1490);
d6600 1
a6600 1
    stringBuffer.append(TEXT_1491);
d6602 1
a6602 1
    stringBuffer.append(TEXT_1492);
d6604 1
a6604 1
    stringBuffer.append(TEXT_1493);
d6606 1
a6606 1
    stringBuffer.append(TEXT_1494);
d6612 1
a6612 1
    stringBuffer.append(TEXT_1495);
d6614 1
a6614 1
    stringBuffer.append(TEXT_1496);
d6616 1
a6616 1
    stringBuffer.append(TEXT_1497);
d6618 1
a6618 1
    stringBuffer.append(TEXT_1498);
d6620 1
a6620 1
    stringBuffer.append(TEXT_1499);
d6622 1
a6622 1
    stringBuffer.append(TEXT_1500);
d6624 1
a6624 1
    stringBuffer.append(TEXT_1501);
d6626 1
a6626 1
    stringBuffer.append(TEXT_1502);
d6628 1
a6628 1
    stringBuffer.append(TEXT_1503);
d6630 1
a6630 1
    stringBuffer.append(TEXT_1504);
d6632 1
a6632 1
    stringBuffer.append(TEXT_1505);
d6634 1
a6634 1
    stringBuffer.append(TEXT_1506);
d6636 1
a6636 1
    stringBuffer.append(TEXT_1507);
d6640 1
a6640 1
    stringBuffer.append(TEXT_1508);
d6644 1
a6644 1
    stringBuffer.append(TEXT_1509);
d6646 1
a6646 1
    stringBuffer.append(TEXT_1510);
d6648 1
a6648 1
    stringBuffer.append(TEXT_1511);
d6650 1
a6650 1
    stringBuffer.append(TEXT_1512);
d6654 1
a6654 1
    stringBuffer.append(TEXT_1513);
d6681 1
a6681 1
    stringBuffer.append(TEXT_1514);
d6683 1
a6683 1
    stringBuffer.append(TEXT_1515);
d6685 1
a6685 1
    stringBuffer.append(TEXT_1516);
d6687 1
a6687 1
    stringBuffer.append(TEXT_1517);
d6689 1
a6689 1
    stringBuffer.append(TEXT_1518);
d6691 1
a6691 1
    stringBuffer.append(TEXT_1519);
d6693 1
a6693 1
    stringBuffer.append(TEXT_1520);
d6698 1
a6698 1
    stringBuffer.append(TEXT_1521);
d6700 1
a6700 1
    stringBuffer.append(TEXT_1522);
d6702 1
a6702 1
    stringBuffer.append(TEXT_1523);
d6704 1
a6704 1
    stringBuffer.append(TEXT_1524);
d6714 1
a6714 1
    stringBuffer.append(TEXT_1525);
d6720 1
a6720 1
    stringBuffer.append(TEXT_1526);
d6722 1
a6722 1
    stringBuffer.append(TEXT_1527);
d6724 1
a6724 1
    stringBuffer.append(TEXT_1528);
d6728 1
a6728 1
    stringBuffer.append(TEXT_1529);
d6730 1
a6730 1
    stringBuffer.append(TEXT_1530);
d6732 1
a6732 1
    stringBuffer.append(TEXT_1531);
d6734 1
a6734 1
    stringBuffer.append(TEXT_1532);
d6736 1
a6736 1
    stringBuffer.append(TEXT_1533);
d6744 1
a6744 1
    stringBuffer.append(TEXT_1534);
d6746 1
a6746 1
    stringBuffer.append(TEXT_1535);
d6748 1
a6748 1
    stringBuffer.append(TEXT_1536);
d6750 1
a6750 1
    stringBuffer.append(TEXT_1537);
d6760 1
a6760 1
    stringBuffer.append(TEXT_1538);
d6766 1
a6766 1
    stringBuffer.append(TEXT_1539);
d6768 1
a6768 1
    stringBuffer.append(TEXT_1540);
d6770 1
a6770 1
    stringBuffer.append(TEXT_1541);
d6774 1
a6774 1
    stringBuffer.append(TEXT_1542);
d6776 1
a6776 1
    stringBuffer.append(TEXT_1543);
d6778 1
a6778 1
    stringBuffer.append(TEXT_1544);
d6780 1
a6780 1
    stringBuffer.append(TEXT_1545);
d6782 1
a6782 1
    stringBuffer.append(TEXT_1546);
d6797 1
a6797 1
    stringBuffer.append(TEXT_1547);
d6803 1
a6803 1
    stringBuffer.append(TEXT_1548);
d6805 1
a6805 1
    stringBuffer.append(TEXT_1549);
d6807 1
a6807 1
    stringBuffer.append(TEXT_1550);
d6811 1
a6811 1
    stringBuffer.append(TEXT_1551);
d6813 1
a6813 1
    stringBuffer.append(TEXT_1552);
d6815 1
a6815 1
    stringBuffer.append(TEXT_1553);
d6817 1
a6817 1
    stringBuffer.append(TEXT_1554);
d6819 1
a6819 1
    stringBuffer.append(TEXT_1555);
d6827 1
a6827 1
    stringBuffer.append(TEXT_1556);
d6829 1
a6829 1
    stringBuffer.append(TEXT_1557);
d6831 1
a6831 1
    stringBuffer.append(TEXT_1558);
d6833 1
a6833 1
    stringBuffer.append(TEXT_1559);
d6837 1
a6837 1
    stringBuffer.append(TEXT_1560);
d6849 1
a6849 1
    stringBuffer.append(TEXT_1561);
d6855 1
a6855 1
    stringBuffer.append(TEXT_1562);
d6857 1
a6857 1
    stringBuffer.append(TEXT_1563);
d6859 1
a6859 1
    stringBuffer.append(TEXT_1564);
d6863 1
a6863 1
    stringBuffer.append(TEXT_1565);
d6865 1
a6865 1
    stringBuffer.append(TEXT_1566);
d6867 1
a6867 1
    stringBuffer.append(TEXT_1567);
d6869 1
a6869 1
    stringBuffer.append(TEXT_1568);
d6871 1
a6871 1
    stringBuffer.append(TEXT_1569);
d6879 1
a6879 1
    stringBuffer.append(TEXT_1570);
d6881 1
a6881 1
    stringBuffer.append(TEXT_1571);
d6883 1
a6883 1
    stringBuffer.append(TEXT_1572);
d6885 1
a6885 1
    stringBuffer.append(TEXT_1573);
d6889 2
a6890 2
    stringBuffer.append(TEXT_1574);
    stringBuffer.append(TEXT_1575);
d6894 1
a6894 1
    stringBuffer.append(TEXT_1576);
d6896 1
a6896 1
    stringBuffer.append(TEXT_1577);
d6898 1
a6898 1
    stringBuffer.append(TEXT_1578);
d6900 1
a6900 1
    stringBuffer.append(TEXT_1579);
d6904 1
a6904 1
    stringBuffer.append(TEXT_1580);
d6910 1
a6910 1
    stringBuffer.append(TEXT_1581);
d6914 1
a6914 1
    stringBuffer.append(TEXT_1582);
d6916 1
a6916 1
    stringBuffer.append(TEXT_1583);
d6918 1
a6918 1
    stringBuffer.append(TEXT_1584);
d6920 1
a6920 1
    stringBuffer.append(TEXT_1585);
d6927 1
a6927 1
    stringBuffer.append(TEXT_1586);
d6936 1
a6936 1
    stringBuffer.append(TEXT_1587);
d6938 1
a6938 1
    stringBuffer.append(TEXT_1588);
d6942 1
a6942 1
    stringBuffer.append(TEXT_1589);
d6949 1
a6949 1
    stringBuffer.append(TEXT_1590);
d6951 1
a6951 1
    stringBuffer.append(TEXT_1591);
d6953 3
a6955 3
    stringBuffer.append(TEXT_1592);
    stringBuffer.append(TEXT_1593);
    stringBuffer.append(TEXT_1594);
d6957 1
a6957 1
    stringBuffer.append(TEXT_1595);
d6959 1
a6959 1
    stringBuffer.append(TEXT_1596);
d6961 1
a6961 1
    stringBuffer.append(TEXT_1597);
d6963 1
a6963 1
    stringBuffer.append(TEXT_1598);
d6965 1
a6965 1
    stringBuffer.append(TEXT_1599);
d6967 1
a6967 1
    stringBuffer.append(TEXT_1600);
d6969 1
a6969 1
    stringBuffer.append(TEXT_1601);
d6971 1
a6971 1
    stringBuffer.append(TEXT_1602);
d6973 1
a6973 1
    stringBuffer.append(TEXT_1603);
d6975 1
a6975 1
    stringBuffer.append(TEXT_1604);
d6977 1
a6977 1
    stringBuffer.append(TEXT_1605);
d6985 1
a6985 1
    stringBuffer.append(TEXT_1606);
d6987 1
a6987 1
    stringBuffer.append(TEXT_1607);
d6989 1
a6989 1
    stringBuffer.append(TEXT_1608);
d6993 1
a6993 1
    stringBuffer.append(TEXT_1609);
d6995 1
a6995 1
    stringBuffer.append(TEXT_1610);
d6997 1
a6997 1
    stringBuffer.append(TEXT_1611);
d6999 1
a6999 1
    stringBuffer.append(TEXT_1612);
d7003 1
a7003 1
    stringBuffer.append(TEXT_1613);
d7005 1
a7005 1
    stringBuffer.append(TEXT_1614);
d7007 1
a7007 1
    stringBuffer.append(TEXT_1615);
d7009 1
a7009 1
    stringBuffer.append(TEXT_1616);
d7011 1
a7011 1
    stringBuffer.append(TEXT_1617);
d7018 1
a7018 1
    stringBuffer.append(TEXT_1618);
d7020 1
a7020 1
    stringBuffer.append(TEXT_1619);
d7022 1
a7022 1
    stringBuffer.append(TEXT_1620);
d7024 1
a7024 1
    stringBuffer.append(TEXT_1621);
d7028 1
a7028 1
    stringBuffer.append(TEXT_1622);
d7030 1
a7030 1
    stringBuffer.append(TEXT_1623);
d7032 1
a7032 1
    stringBuffer.append(TEXT_1624);
d7034 1
a7034 1
    stringBuffer.append(TEXT_1625);
d7036 1
a7036 1
    stringBuffer.append(TEXT_1626);
d7040 1
a7040 1
    stringBuffer.append(TEXT_1627);
d7045 1
a7045 1
    stringBuffer.append(TEXT_1628);
d7047 1
a7047 1
    stringBuffer.append(TEXT_1629);
d7049 1
a7049 1
    stringBuffer.append(TEXT_1630);
d7051 1
a7051 1
    stringBuffer.append(TEXT_1631);
d7055 1
a7055 1
    stringBuffer.append(TEXT_1632);
d7057 1
a7057 1
    stringBuffer.append(TEXT_1633);
d7059 1
a7059 1
    stringBuffer.append(TEXT_1634);
d7061 1
a7061 1
    stringBuffer.append(TEXT_1635);
d7063 1
a7063 1
    stringBuffer.append(TEXT_1636);
d7068 1
a7068 1
    stringBuffer.append(TEXT_1637);
d7079 2
a7080 2
    stringBuffer.append(TEXT_1638);
    stringBuffer.append(TEXT_1639);
d7082 1
a7082 1
    stringBuffer.append(TEXT_1640);
d7084 1
a7084 1
    stringBuffer.append(TEXT_1641);
d7086 3
a7088 3
    stringBuffer.append(TEXT_1642);
    stringBuffer.append(TEXT_1643);
    stringBuffer.append(TEXT_1644);
d7090 1
a7090 1
    stringBuffer.append(TEXT_1645);
d7092 1
a7092 1
    stringBuffer.append(TEXT_1646);
d7094 1
a7094 1
    stringBuffer.append(TEXT_1647);
d7096 1
a7096 1
    stringBuffer.append(TEXT_1648);
d7098 1
a7098 1
    stringBuffer.append(TEXT_1649);
d7100 1
a7100 1
    stringBuffer.append(TEXT_1650);
d7102 1
a7102 1
    stringBuffer.append(TEXT_1651);
d7104 1
a7104 1
    stringBuffer.append(TEXT_1652);
d7106 1
a7106 1
    stringBuffer.append(TEXT_1653);
d7108 1
a7108 1
    stringBuffer.append(TEXT_1654);
d7110 1
a7110 1
    stringBuffer.append(TEXT_1655);
d7116 1
a7116 1
    stringBuffer.append(TEXT_1656);
d7118 1
a7118 1
    stringBuffer.append(TEXT_1657);
d7120 1
a7120 1
    stringBuffer.append(TEXT_1658);
d7122 1
a7122 1
    stringBuffer.append(TEXT_1659);
d7124 1
a7124 1
    stringBuffer.append(TEXT_1660);
d7126 1
a7126 1
    stringBuffer.append(TEXT_1661);
d7128 1
a7128 1
    stringBuffer.append(TEXT_1662);
d7130 1
a7130 1
    stringBuffer.append(TEXT_1663);
d7132 1
a7132 1
    stringBuffer.append(TEXT_1664);
d7134 1
a7134 1
    stringBuffer.append(TEXT_1665);
d7136 1
a7136 1
    stringBuffer.append(TEXT_1666);
d7143 1
a7143 1
    stringBuffer.append(TEXT_1667);
d7146 1
a7146 1
    stringBuffer.append(TEXT_1668);
d7148 1
a7148 1
    stringBuffer.append(TEXT_1669);
d7150 1
a7150 1
    stringBuffer.append(TEXT_1670);
d7152 1
a7152 1
    stringBuffer.append(TEXT_1671);
d7154 1
a7154 1
    stringBuffer.append(TEXT_1672);
d7156 1
a7156 1
    stringBuffer.append(TEXT_1673);
d7158 1
a7158 1
    stringBuffer.append(TEXT_1674);
d7160 1
a7160 1
    stringBuffer.append(TEXT_1675);
d7164 1
a7164 1
    stringBuffer.append(TEXT_1676);
d7167 1
a7167 1
    stringBuffer.append(TEXT_1677);
d7169 1
a7169 1
    stringBuffer.append(TEXT_1678);
d7171 1
a7171 1
    stringBuffer.append(TEXT_1679);
d7173 1
a7173 1
    stringBuffer.append(TEXT_1680);
d7175 1
a7175 1
    stringBuffer.append(TEXT_1681);
d7177 1
a7177 1
    stringBuffer.append(TEXT_1682);
d7181 1
a7181 1
    stringBuffer.append(TEXT_1683);
d7183 1
a7183 1
    stringBuffer.append(TEXT_1684);
d7190 1
a7190 1
    stringBuffer.append(TEXT_1685);
d7194 1
a7194 1
    stringBuffer.append(TEXT_1686);
d7198 1
a7198 1
    stringBuffer.append(TEXT_1687);
d7202 2
a7203 2
    stringBuffer.append(TEXT_1688);
    stringBuffer.append(TEXT_1689);
d7205 1
a7205 1
    stringBuffer.append(TEXT_1690);
d7207 1
a7207 1
    stringBuffer.append(TEXT_1691);
d7209 1
a7209 1
    stringBuffer.append(TEXT_1692);
d7211 1
a7211 1
    stringBuffer.append(TEXT_1693);
d7213 1
a7213 1
    stringBuffer.append(TEXT_1694);
d7215 1
a7215 1
    stringBuffer.append(TEXT_1695);
d7217 1
a7217 1
    stringBuffer.append(TEXT_1696);
d7219 1
a7219 1
    stringBuffer.append(TEXT_1697);
d7221 1
a7221 1
    stringBuffer.append(TEXT_1698);
d7223 1
a7223 1
    stringBuffer.append(TEXT_1699);
d7225 1
a7225 1
    stringBuffer.append(TEXT_1700);
d7229 3
a7231 3
    stringBuffer.append(TEXT_1701);
    stringBuffer.append(TEXT_1702);
    stringBuffer.append(TEXT_1703);
d7233 1
a7233 1
    stringBuffer.append(TEXT_1704);
d7235 1
a7235 1
    stringBuffer.append(TEXT_1705);
d7239 1
a7239 1
    stringBuffer.append(TEXT_1706);
d7241 1
a7241 1
    stringBuffer.append(TEXT_1707);
d7243 1
a7243 1
    stringBuffer.append(TEXT_1708);
d7245 1
a7245 1
    stringBuffer.append(TEXT_1709);
d7247 1
a7247 1
    stringBuffer.append(TEXT_1710);
d7249 1
a7249 1
    stringBuffer.append(TEXT_1711);
d7251 1
a7251 1
    stringBuffer.append(TEXT_1712);
d7253 1
a7253 1
    stringBuffer.append(TEXT_1713);
d7255 1
a7255 1
    stringBuffer.append(TEXT_1714);
d7257 1
a7257 1
    stringBuffer.append(TEXT_1715);
d7261 1
a7261 1
    stringBuffer.append(TEXT_1716);
d7270 1
a7270 1
    stringBuffer.append(TEXT_1717);
d7272 1
a7272 1
    stringBuffer.append(TEXT_1718);
d7274 1
a7274 1
    stringBuffer.append(TEXT_1719);
d7285 1
a7285 1
    stringBuffer.append(TEXT_1720);
d7287 1
a7287 1
    stringBuffer.append(TEXT_1721);
d7289 1
a7289 1
    stringBuffer.append(TEXT_1722);
d7297 1
a7297 1
    stringBuffer.append(TEXT_1723);
d7299 1
a7299 1
    stringBuffer.append(TEXT_1724);
d7301 1
a7301 1
    stringBuffer.append(TEXT_1725);
d7303 1
a7303 1
    stringBuffer.append(TEXT_1726);
d7305 1
a7305 1
    stringBuffer.append(TEXT_1727);
d7307 1
a7307 1
    stringBuffer.append(TEXT_1728);
d7309 1
a7309 1
    stringBuffer.append(TEXT_1729);
d7311 1
a7311 1
    stringBuffer.append(TEXT_1730);
d7316 1
a7316 1
    stringBuffer.append(TEXT_1731);
d7318 1
a7318 1
    stringBuffer.append(TEXT_1732);
d7326 1
a7326 1
    stringBuffer.append(TEXT_1733);
d7328 1
a7328 1
    stringBuffer.append(TEXT_1734);
d7332 1
a7332 1
    stringBuffer.append(TEXT_1735);
d7334 1
a7334 1
    stringBuffer.append(TEXT_1736);
@


1.31
log
@#161253: External node labels should be attached to nodes correctly
Generate 2 icons if myDiagram.getCreationWizardIconPathX() and myEditorGen.getEditor().getIconPathX() specify different absolute paths
@
text
@d586 30
a615 30
  protected final String TEXT_565 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_566 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_567 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_568 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_569 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_570 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_571 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_572 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_573 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_574 = NL;
  protected final String TEXT_575 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_576 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_577 = " domainModelEditDomain = ";
  protected final String TEXT_578 = ".getEditingDomain(";
  protected final String TEXT_579 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_580 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_581 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_582 = " {";
  protected final String TEXT_583 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_584 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_585 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_586 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_587 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_588 = " createFilter() {";
  protected final String TEXT_589 = NL + "\t\t\t";
  protected final String TEXT_590 = " filter = ";
  protected final String TEXT_591 = ".createFeatureFilter(";
  protected final String TEXT_592 = ".eINSTANCE.get";
  protected final String TEXT_593 = "());";
  protected final String TEXT_594 = NL + "\t\t\tfilter = filter.or(";
d618 6
a623 6
  protected final String TEXT_597 = "()));";
  protected final String TEXT_598 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_599 = ".createNotifierFilter(";
  protected final String TEXT_600 = ".getElement()));";
  protected final String TEXT_601 = NL + "\t\t\t";
  protected final String TEXT_602 = " filter = ";
d625 93
a717 93
  protected final String TEXT_604 = ".getElement());";
  protected final String TEXT_605 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_606 = NL + "\t\t\t";
  protected final String TEXT_607 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_608 = NL + "\t\t\t";
  protected final String TEXT_609 = " filter = ";
  protected final String TEXT_610 = ".NOT_TOUCH;";
  protected final String TEXT_611 = NL + "\t\t\treturn filter;";
  protected final String TEXT_612 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_613 = " getCreateNotationalElementCommand(";
  protected final String TEXT_614 = " descriptor) {";
  protected final String TEXT_615 = NL;
  protected final String TEXT_616 = "\t\t\t";
  protected final String TEXT_617 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_618 = NL + "\t\t\tcase ";
  protected final String TEXT_619 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_620 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_621 = "(";
  protected final String TEXT_622 = ", domainElement, ";
  protected final String TEXT_623 = "new ";
  protected final String TEXT_624 = "(0, 0, ";
  protected final String TEXT_625 = ", ";
  protected final String TEXT_626 = ")";
  protected final String TEXT_627 = NL + "null";
  protected final String TEXT_628 = ", ";
  protected final String TEXT_629 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_630 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_631 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_632 = " getSemanticChildNodes() {";
  protected final String TEXT_633 = NL;
  protected final String TEXT_634 = NL + "\treturn ";
  protected final String TEXT_635 = ".EMPTY_LIST;";
  protected final String TEXT_636 = NL + "\t";
  protected final String TEXT_637 = " result = new ";
  protected final String TEXT_638 = "();";
  protected final String TEXT_639 = NL + "\t";
  protected final String TEXT_640 = " viewObject = ";
  protected final String TEXT_641 = ";" + NL + "\t";
  protected final String TEXT_642 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_643 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_644 = NL + "\tfor(";
  protected final String TEXT_645 = " it = ";
  protected final String TEXT_646 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_647 = ") it.next();";
  protected final String TEXT_648 = NL + "\tnextValue = (";
  protected final String TEXT_649 = ")";
  protected final String TEXT_650 = ";";
  protected final String TEXT_651 = NL + "\tnodeVID = ";
  protected final String TEXT_652 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_653 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_654 = NL + "\tcase ";
  protected final String TEXT_655 = ".VISUAL_ID: {";
  protected final String TEXT_656 = NL + "\tif (";
  protected final String TEXT_657 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_658 = NL + "\t\tresult.add(new ";
  protected final String TEXT_659 = "(nextValue, nodeVID));";
  protected final String TEXT_660 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_661 = NL + "\t\t}";
  protected final String TEXT_662 = NL + "\t}";
  protected final String TEXT_663 = NL + "\t}";
  protected final String TEXT_664 = NL + "\treturn result;";
  protected final String TEXT_665 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_666 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_667 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_668 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_669 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_670 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_671 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_672 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_673 = " domainModelEditDomain = ";
  protected final String TEXT_674 = ".getEditingDomain(";
  protected final String TEXT_675 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_676 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_677 = NL;
  protected final String TEXT_678 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_679 = " domainModelEditDomain = ";
  protected final String TEXT_680 = ".getEditingDomain(";
  protected final String TEXT_681 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_682 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_683 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_684 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_685 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_686 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_687 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_688 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_689 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_690 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_691 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_692 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_693 = ".createEventTypeFilter(";
  protected final String TEXT_694 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_695 = ".createEventTypeFilter(";
  protected final String TEXT_696 = ".UNSET).or(" + NL + "\t\t\t\t";
d719 1
a719 1
  protected final String TEXT_698 = ".REMOVE).or(" + NL + "\t\t\t\t";
d721 10
a730 10
  protected final String TEXT_700 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_701 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_702 = " createFilter() {";
  protected final String TEXT_703 = NL;
  protected final String TEXT_704 = NL + "\t\t\t";
  protected final String TEXT_705 = " filter = ";
  protected final String TEXT_706 = ".createFeatureFilter(";
  protected final String TEXT_707 = ".eINSTANCE.get";
  protected final String TEXT_708 = "());";
  protected final String TEXT_709 = NL + "\t\t\tfilter = filter.or(";
d733 8
a740 8
  protected final String TEXT_712 = "()));";
  protected final String TEXT_713 = NL;
  protected final String TEXT_714 = NL + "\t\t\t";
  protected final String TEXT_715 = " filter = ";
  protected final String TEXT_716 = ".createFeatureFilter(";
  protected final String TEXT_717 = ".eINSTANCE.get";
  protected final String TEXT_718 = "());";
  protected final String TEXT_719 = NL + "\t\t\tfilter = filter.or(";
d743 8
a750 8
  protected final String TEXT_722 = "()));";
  protected final String TEXT_723 = NL;
  protected final String TEXT_724 = NL + "\t\t\t";
  protected final String TEXT_725 = " filter = ";
  protected final String TEXT_726 = ".createFeatureFilter(";
  protected final String TEXT_727 = ".eINSTANCE.get";
  protected final String TEXT_728 = "());";
  protected final String TEXT_729 = NL + "\t\t\tfilter = filter.or(";
d753 8
a760 8
  protected final String TEXT_732 = "()));";
  protected final String TEXT_733 = NL;
  protected final String TEXT_734 = NL + "\t\t\t";
  protected final String TEXT_735 = " filter = ";
  protected final String TEXT_736 = ".createFeatureFilter(";
  protected final String TEXT_737 = ".eINSTANCE.get";
  protected final String TEXT_738 = "());";
  protected final String TEXT_739 = NL + "\t\t\tfilter = filter.or(";
d763 24
a786 24
  protected final String TEXT_742 = "()));";
  protected final String TEXT_743 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_744 = NL + "\t\t\t";
  protected final String TEXT_745 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_746 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_747 = NL + "\t\t\t";
  protected final String TEXT_748 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_749 = NL + "\t\t\t";
  protected final String TEXT_750 = " filter = ";
  protected final String TEXT_751 = ".NOT_TOUCH;";
  protected final String TEXT_752 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_753 = " getCreateNotationalElementCommand(";
  protected final String TEXT_754 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_755 = " linkDescriptor = (";
  protected final String TEXT_756 = ") descriptor;";
  protected final String TEXT_757 = NL;
  protected final String TEXT_758 = "\t\t\t";
  protected final String TEXT_759 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_760 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_761 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_762 = NL + "\t\t\tcase ";
  protected final String TEXT_763 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_764 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_765 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
d788 34
a821 34
  protected final String TEXT_767 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_768 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_769 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_770 = "(";
  protected final String TEXT_771 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_772 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_773 = " getSemanticChildLinks() {";
  protected final String TEXT_774 = NL;
  protected final String TEXT_775 = "\t";
  protected final String TEXT_776 = " result = new ";
  protected final String TEXT_777 = "();";
  protected final String TEXT_778 = NL + "\t";
  protected final String TEXT_779 = " modelObject = ";
  protected final String TEXT_780 = ".getElement();" + NL + "\t";
  protected final String TEXT_781 = " nextValue;";
  protected final String TEXT_782 = NL + "\tint linkVID;";
  protected final String TEXT_783 = NL + "\tfor(";
  protected final String TEXT_784 = " it = ";
  protected final String TEXT_785 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_786 = ") it.next();";
  protected final String TEXT_787 = NL + "\tnextValue = (";
  protected final String TEXT_788 = ")";
  protected final String TEXT_789 = ";";
  protected final String TEXT_790 = NL + "\tlinkVID = ";
  protected final String TEXT_791 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_792 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_793 = NL + "\tcase ";
  protected final String TEXT_794 = ".VISUAL_ID: {";
  protected final String TEXT_795 = NL + "\tif (";
  protected final String TEXT_796 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_797 = NL + "\t\t";
  protected final String TEXT_798 = " source = (";
  protected final String TEXT_799 = ")";
  protected final String TEXT_800 = ";";
d823 6
a828 6
  protected final String TEXT_802 = " source = ";
  protected final String TEXT_803 = ".getElement();";
  protected final String TEXT_804 = NL + "\t\t";
  protected final String TEXT_805 = " target = (";
  protected final String TEXT_806 = ")";
  protected final String TEXT_807 = ";";
d830 66
a895 66
  protected final String TEXT_809 = " target = ";
  protected final String TEXT_810 = ".getElement();";
  protected final String TEXT_811 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_812 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_813 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_814 = NL + "\t}";
  protected final String TEXT_815 = NL + "\t}";
  protected final String TEXT_816 = NL + "\t}";
  protected final String TEXT_817 = NL + "\tfor(";
  protected final String TEXT_818 = " it = ";
  protected final String TEXT_819 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_820 = ") it.next();";
  protected final String TEXT_821 = NL + "\tnextValue = (";
  protected final String TEXT_822 = ")";
  protected final String TEXT_823 = ";";
  protected final String TEXT_824 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_825 = NL + "\t\tresult.add(new ";
  protected final String TEXT_826 = "(modelObject, nextValue, null, ";
  protected final String TEXT_827 = ".VISUAL_ID));";
  protected final String TEXT_828 = NL + "\t}";
  protected final String TEXT_829 = NL + "\t}";
  protected final String TEXT_830 = NL + "\treturn result;";
  protected final String TEXT_831 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_832 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_833 = " result = new ";
  protected final String TEXT_834 = "();" + NL + "\t\t\t";
  protected final String TEXT_835 = " allLinks = ";
  protected final String TEXT_836 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_837 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_838 = " next = (";
  protected final String TEXT_839 = ") it.next();";
  protected final String TEXT_840 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_841 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_842 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_843 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_844 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_845 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_846 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_847 = ".VISUAL_ID:";
  protected final String TEXT_848 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_849 = NL + "\t\t\t\t} else {";
  protected final String TEXT_850 = NL + "\t\t\t\t}";
  protected final String TEXT_851 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_852 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_853 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_854 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_855 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_856 = ".VISUAL_ID:";
  protected final String TEXT_857 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_858 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_859 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_860 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_861 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_862 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_863 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_864 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_865 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_866 = " domainModelEditDomain = ";
  protected final String TEXT_867 = ".getEditingDomain(";
  protected final String TEXT_868 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_869 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_870 = NL;
  protected final String TEXT_871 = NL;
  protected final String TEXT_872 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_873 = " domainModelRefresher = new ";
  protected final String TEXT_874 = "(this);" + NL;
d897 50
a946 50
  protected final String TEXT_876 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_877 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_878 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_879 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_880 = NL;
  protected final String TEXT_881 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_882 = NL + "\t\t";
  protected final String TEXT_883 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_884 = ") ";
  protected final String TEXT_885 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_886 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_887 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_888 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_889 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_890 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_891 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_892 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_893 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_894 = "\t" + NL + "\t}";
  protected final String TEXT_895 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_896 = " createdFont;";
  protected final String TEXT_897 = "\t" + NL;
  protected final String TEXT_898 = NL;
  protected final String TEXT_899 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_900 = " style = (";
  protected final String TEXT_901 = ")  ";
  protected final String TEXT_902 = ".getStyle(";
  protected final String TEXT_903 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_904 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_905 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_906 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_907 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_908 = " style = (";
  protected final String TEXT_909 = ")  ";
  protected final String TEXT_910 = ".getStyle(";
  protected final String TEXT_911 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_912 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_913 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_914 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_915 = " createdBackgroundColor;" + NL;
  protected final String TEXT_916 = NL;
  protected final String TEXT_917 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_918 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_919 = " feature, ";
  protected final String TEXT_920 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_921 = "();";
  protected final String TEXT_922 = NL;
  protected final String TEXT_923 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_924 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_925 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d948 25
a972 25
  protected final String TEXT_927 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_928 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_929 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_930 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_931 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_932 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_933 = NL;
  protected final String TEXT_934 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_935 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_936 = NL;
  protected final String TEXT_937 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_938 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_939 = NL;
  protected final String TEXT_940 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_941 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_942 = NL;
  protected final String TEXT_943 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_944 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_945 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_946 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_947 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_948 = NL;
  protected final String TEXT_949 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_950 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_951 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
d974 23
a996 23
  protected final String TEXT_953 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_954 = "static ";
  protected final String TEXT_955 = "class Create";
  protected final String TEXT_956 = "Command extends ";
  protected final String TEXT_957 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_958 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_959 = "Command(";
  protected final String TEXT_960 = " parent, ";
  protected final String TEXT_961 = " request";
  protected final String TEXT_962 = ", ";
  protected final String TEXT_963 = " constraint";
  protected final String TEXT_964 = ") {" + NL + "\t\t\t";
  protected final String TEXT_965 = " domainModelEditDomain = ";
  protected final String TEXT_966 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_967 = NL + "\t\t\t";
  protected final String TEXT_968 = " createdDomainElement = ";
  protected final String TEXT_969 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_970 = ".eINSTANCE.get";
  protected final String TEXT_971 = "());";
  protected final String TEXT_972 = NL + "\t\t\t";
  protected final String TEXT_973 = " createdDomainElement = ";
  protected final String TEXT_974 = ".eINSTANCE.create";
  protected final String TEXT_975 = "();";
d998 18
a1015 18
  protected final String TEXT_977 = NL + "\t\t\t";
  protected final String TEXT_978 = ".";
  protected final String TEXT_979 = ".initializeElement(";
  protected final String TEXT_980 = "(";
  protected final String TEXT_981 = ") ";
  protected final String TEXT_982 = "createdDomainElement);";
  protected final String TEXT_983 = NL;
  protected final String TEXT_984 = NL + "\t\tif (";
  protected final String TEXT_985 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_986 = NL + "\t\t}";
  protected final String TEXT_987 = NL + "\t\tif (";
  protected final String TEXT_988 = ".size() >= ";
  protected final String TEXT_989 = ".eINSTANCE.get";
  protected final String TEXT_990 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_991 = NL + "\t\t}";
  protected final String TEXT_992 = NL;
  protected final String TEXT_993 = NL + "\t\tif (";
  protected final String TEXT_994 = " != null) {" + NL + "\t\t\t";
d1017 15
a1031 15
  protected final String TEXT_996 = NL + "\t\tif (";
  protected final String TEXT_997 = ".size() >= ";
  protected final String TEXT_998 = ".eINSTANCE.get";
  protected final String TEXT_999 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1000 = NL + "\t\t}";
  protected final String TEXT_1001 = NL + "\t\t\t";
  protected final String TEXT_1002 = " compoundCommand = new ";
  protected final String TEXT_1003 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_1004 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1005 = ".eINSTANCE.get";
  protected final String TEXT_1006 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_1007 = ".create(domainModelEditDomain, parent.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1008 = ".eINSTANCE.get";
  protected final String TEXT_1009 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_1010 = NL + "\t\t\tthis.domainModelAddCommand = ";
d1034 25
a1058 25
  protected final String TEXT_1013 = "(), createdDomainElement);";
  protected final String TEXT_1014 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_1015 = "(";
  protected final String TEXT_1016 = ", ";
  protected final String TEXT_1017 = "));";
  protected final String TEXT_1018 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_1019 = "(parent, ";
  protected final String TEXT_1020 = "(";
  protected final String TEXT_1021 = ") ";
  protected final String TEXT_1022 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_1023 = "constraint";
  protected final String TEXT_1024 = "null";
  protected final String TEXT_1025 = ", ";
  protected final String TEXT_1026 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1027 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1028 = "SourceCommand extends ";
  protected final String TEXT_1029 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1030 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1031 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1032 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1033 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1034 = "SourceCommand(";
  protected final String TEXT_1035 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1036 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1037 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
d1060 29
a1088 29
  protected final String TEXT_1039 = " edge, ";
  protected final String TEXT_1040 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1041 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1042 = " domainModelEditDomain = ";
  protected final String TEXT_1043 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1044 = " command = new ";
  protected final String TEXT_1045 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1046 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1047 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1048 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1049 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_1050 = NL + "\t\t\treturn false;";
  protected final String TEXT_1051 = NL + "\t\t\t";
  protected final String TEXT_1052 = " container = (";
  protected final String TEXT_1053 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_1054 = ".eINSTANCE.get";
  protected final String TEXT_1055 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1056 = NL;
  protected final String TEXT_1057 = NL + "\t\tif (";
  protected final String TEXT_1058 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1059 = NL + "\t\t}";
  protected final String TEXT_1060 = NL + "\t\tif (";
  protected final String TEXT_1061 = ".size() >= ";
  protected final String TEXT_1062 = ".eINSTANCE.get";
  protected final String TEXT_1063 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1064 = NL + "\t\t}";
  protected final String TEXT_1065 = NL;
  protected final String TEXT_1066 = NL + "\t\tif (";
  protected final String TEXT_1067 = " != null) {" + NL + "\t\t\t";
d1090 8
a1097 8
  protected final String TEXT_1069 = NL + "\t\tif (";
  protected final String TEXT_1070 = ".size() >= ";
  protected final String TEXT_1071 = ".eINSTANCE.get";
  protected final String TEXT_1072 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1073 = NL + "\t\t}";
  protected final String TEXT_1074 = NL;
  protected final String TEXT_1075 = NL + "\t\tif (";
  protected final String TEXT_1076 = " != null) {" + NL + "\t\t\t";
d1099 45
a1143 45
  protected final String TEXT_1078 = NL + "\t\tif (";
  protected final String TEXT_1079 = ".size() >= ";
  protected final String TEXT_1080 = ".eINSTANCE.get";
  protected final String TEXT_1081 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1082 = NL + "\t\t}";
  protected final String TEXT_1083 = NL;
  protected final String TEXT_1084 = NL + "\t\t\tif(!";
  protected final String TEXT_1085 = ".canCreateLink(";
  protected final String TEXT_1086 = ", ";
  protected final String TEXT_1087 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1088 = NL + "\t\t\treturn true;";
  protected final String TEXT_1089 = NL;
  protected final String TEXT_1090 = NL + "\t\tif (";
  protected final String TEXT_1091 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1092 = NL + "\t\t}";
  protected final String TEXT_1093 = NL + "\t\tif (";
  protected final String TEXT_1094 = ".size() >= ";
  protected final String TEXT_1095 = ".eINSTANCE.get";
  protected final String TEXT_1096 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1097 = NL + "\t\t}";
  protected final String TEXT_1098 = NL;
  protected final String TEXT_1099 = NL + "\t\t\tif(!";
  protected final String TEXT_1100 = ".canCreateLink(";
  protected final String TEXT_1101 = ", ";
  protected final String TEXT_1102 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1103 = NL + "\t\t\treturn true;";
  protected final String TEXT_1104 = NL + "\t\t\treturn false;";
  protected final String TEXT_1105 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1106 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1107 = " editingDomain = ";
  protected final String TEXT_1108 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1109 = " result = new ";
  protected final String TEXT_1110 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1111 = "(edge, newSource));";
  protected final String TEXT_1112 = NL + "\t\t\t";
  protected final String TEXT_1113 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_1114 = ".eINSTANCE.get";
  protected final String TEXT_1115 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_1116 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_1117 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_1118 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_1119 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1120 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1121 = ".eINSTANCE.get";
  protected final String TEXT_1122 = "(), edge.getElement()));";
d1147 6
a1152 6
  protected final String TEXT_1126 = "(), ";
  protected final String TEXT_1127 = ".UNSET_VALUE));";
  protected final String TEXT_1128 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1129 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_1130 = ".eINSTANCE.get";
  protected final String TEXT_1131 = "(), edge.getElement()));";
d1154 1
a1154 1
  protected final String TEXT_1133 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
d1156 1
a1156 1
  protected final String TEXT_1135 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
d1160 15
a1174 15
  protected final String TEXT_1139 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1140 = ".UNSET_VALUE));";
  protected final String TEXT_1141 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1142 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_1143 = ".eINSTANCE.get";
  protected final String TEXT_1144 = "(), edge.getElement()));";
  protected final String TEXT_1145 = NL + "\t\t\t}";
  protected final String TEXT_1146 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1147 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1148 = ".eINSTANCE.get";
  protected final String TEXT_1149 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1150 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1151 = ".eINSTANCE.get";
  protected final String TEXT_1152 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_1153 = NL + "\t\t\tresult.append(";
d1179 1
a1179 1
  protected final String TEXT_1158 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
d1181 6
a1186 6
  protected final String TEXT_1160 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1161 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_1162 = ".eINSTANCE.get";
  protected final String TEXT_1163 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_1164 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1165 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
d1188 3
a1190 3
  protected final String TEXT_1167 = "(), ";
  protected final String TEXT_1168 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1169 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
d1192 105
a1296 105
  protected final String TEXT_1171 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_1172 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_1173 = NL;
  protected final String TEXT_1174 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1175 = " getRelationshipContainer(";
  protected final String TEXT_1176 = " element, ";
  protected final String TEXT_1177 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1178 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1179 = NL;
  protected final String TEXT_1180 = NL + "\t\t\tprivate ";
  protected final String TEXT_1181 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1182 = " editingDomain) {";
  protected final String TEXT_1183 = NL + "\t\t\t\t";
  protected final String TEXT_1184 = " result = new ";
  protected final String TEXT_1185 = "();";
  protected final String TEXT_1186 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1187 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1188 = ".getElement().eContainer(), ";
  protected final String TEXT_1189 = ".eINSTANCE.get";
  protected final String TEXT_1190 = "(), ";
  protected final String TEXT_1191 = ".getElement()));";
  protected final String TEXT_1192 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1193 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1194 = ".getElement().eContainer(), ";
  protected final String TEXT_1195 = ".eINSTANCE.get";
  protected final String TEXT_1196 = "(), ";
  protected final String TEXT_1197 = ".UNSET_VALUE));";
  protected final String TEXT_1198 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1199 = ".INSTANCE;";
  protected final String TEXT_1200 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1201 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1202 = ".getElement().eContainer(), ";
  protected final String TEXT_1203 = ".eINSTANCE.get";
  protected final String TEXT_1204 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1205 = ".getElement()));";
  protected final String TEXT_1206 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1207 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1208 = ".getElement().eContainer(), ";
  protected final String TEXT_1209 = ".eINSTANCE.get";
  protected final String TEXT_1210 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1211 = ".UNSET_VALUE));";
  protected final String TEXT_1212 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1213 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1214 = ".getElement(), ";
  protected final String TEXT_1215 = ".eINSTANCE.get";
  protected final String TEXT_1216 = "(), ";
  protected final String TEXT_1217 = ".getSource().getElement()));";
  protected final String TEXT_1218 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1219 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1220 = ".getElement(), ";
  protected final String TEXT_1221 = ".eINSTANCE.get";
  protected final String TEXT_1222 = "(), ";
  protected final String TEXT_1223 = ".UNSET_VALUE));";
  protected final String TEXT_1224 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1225 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1226 = ".getElement(), ";
  protected final String TEXT_1227 = ".eINSTANCE.get";
  protected final String TEXT_1228 = "(), ";
  protected final String TEXT_1229 = ".getTarget().getElement()));";
  protected final String TEXT_1230 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1231 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1232 = ".getElement(), ";
  protected final String TEXT_1233 = ".eINSTANCE.get";
  protected final String TEXT_1234 = "(), ";
  protected final String TEXT_1235 = ".UNSET_VALUE));";
  protected final String TEXT_1236 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1237 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1238 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1239 = ".getSource().getElement(), ";
  protected final String TEXT_1240 = ".eINSTANCE.get";
  protected final String TEXT_1241 = "(), ";
  protected final String TEXT_1242 = ".getTarget().getElement());";
  protected final String TEXT_1243 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1244 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1245 = ".getSource().getElement(), ";
  protected final String TEXT_1246 = ".eINSTANCE.get";
  protected final String TEXT_1247 = "(), ";
  protected final String TEXT_1248 = ".UNSET_VALUE);";
  protected final String TEXT_1249 = NL + "\t\t\t}";
  protected final String TEXT_1250 = NL + "\t}" + NL;
  protected final String TEXT_1251 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1252 = "StartCommand extends ";
  protected final String TEXT_1253 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1254 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1255 = "StartCommand(";
  protected final String TEXT_1256 = " requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_1257 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1258 = NL + "\t\t\treturn false;";
  protected final String TEXT_1259 = NL + "\t\t\t";
  protected final String TEXT_1260 = " container = (";
  protected final String TEXT_1261 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1262 = ".eINSTANCE.get";
  protected final String TEXT_1263 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1264 = NL;
  protected final String TEXT_1265 = NL + "\t\tif (";
  protected final String TEXT_1266 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1267 = NL + "\t\t}";
  protected final String TEXT_1268 = NL + "\t\tif (";
  protected final String TEXT_1269 = ".size() >= ";
  protected final String TEXT_1270 = ".eINSTANCE.get";
  protected final String TEXT_1271 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1272 = NL + "\t\t}";
  protected final String TEXT_1273 = NL;
  protected final String TEXT_1274 = NL + "\t\tif (";
  protected final String TEXT_1275 = " != null) {" + NL + "\t\t\t";
d1298 8
a1305 8
  protected final String TEXT_1277 = NL + "\t\tif (";
  protected final String TEXT_1278 = ".size() >= ";
  protected final String TEXT_1279 = ".eINSTANCE.get";
  protected final String TEXT_1280 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1281 = NL + "\t\t}";
  protected final String TEXT_1282 = NL;
  protected final String TEXT_1283 = NL + "\t\tif (";
  protected final String TEXT_1284 = " != null) {" + NL + "\t\t\t";
d1307 45
a1351 45
  protected final String TEXT_1286 = NL + "\t\tif (";
  protected final String TEXT_1287 = ".size() >= ";
  protected final String TEXT_1288 = ".eINSTANCE.get";
  protected final String TEXT_1289 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1290 = NL + "\t\t}";
  protected final String TEXT_1291 = NL;
  protected final String TEXT_1292 = NL + "\t\t\tif(!";
  protected final String TEXT_1293 = ".canCreateLink(";
  protected final String TEXT_1294 = ", ";
  protected final String TEXT_1295 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1296 = NL + "\t\t\treturn true;";
  protected final String TEXT_1297 = NL;
  protected final String TEXT_1298 = NL + "\t\tif (";
  protected final String TEXT_1299 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1300 = NL + "\t\t}";
  protected final String TEXT_1301 = NL + "\t\tif (";
  protected final String TEXT_1302 = ".size() >= ";
  protected final String TEXT_1303 = ".eINSTANCE.get";
  protected final String TEXT_1304 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1305 = NL + "\t\t}";
  protected final String TEXT_1306 = NL;
  protected final String TEXT_1307 = NL + "\t\t\tif(!";
  protected final String TEXT_1308 = ".canCreateLink(";
  protected final String TEXT_1309 = ", ";
  protected final String TEXT_1310 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1311 = NL + "\t\t\treturn true;";
  protected final String TEXT_1312 = NL + "\t\t\treturn false;";
  protected final String TEXT_1313 = NL + "\t\t}";
  protected final String TEXT_1314 = NL;
  protected final String TEXT_1315 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1316 = " getRelationshipContainer(";
  protected final String TEXT_1317 = " element, ";
  protected final String TEXT_1318 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1319 = NL + NL + "\t}";
  protected final String TEXT_1320 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1321 = "TargetCommand extends ";
  protected final String TEXT_1322 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1323 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1324 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1325 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1326 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1327 = "TargetCommand(";
  protected final String TEXT_1328 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1329 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1330 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
d1353 57
a1409 57
  protected final String TEXT_1332 = " edge, ";
  protected final String TEXT_1333 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1334 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1335 = " domainModelEditDomain = ";
  protected final String TEXT_1336 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1337 = " command = new ";
  protected final String TEXT_1338 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1339 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1340 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1341 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1342 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_1343 = NL;
  protected final String TEXT_1344 = NL + "\t\tif (";
  protected final String TEXT_1345 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1346 = NL + "\t\t}";
  protected final String TEXT_1347 = NL + "\t\tif (";
  protected final String TEXT_1348 = ".size() >= ";
  protected final String TEXT_1349 = ".eINSTANCE.get";
  protected final String TEXT_1350 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1351 = NL + "\t\t}";
  protected final String TEXT_1352 = NL;
  protected final String TEXT_1353 = NL + "\t\t\tif(!";
  protected final String TEXT_1354 = ".canCreateLink(";
  protected final String TEXT_1355 = ", ";
  protected final String TEXT_1356 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1357 = NL + "\t\t\treturn true;";
  protected final String TEXT_1358 = NL;
  protected final String TEXT_1359 = NL + "\t\tif (";
  protected final String TEXT_1360 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1361 = NL + "\t\t}";
  protected final String TEXT_1362 = NL + "\t\tif (";
  protected final String TEXT_1363 = ".size() >= ";
  protected final String TEXT_1364 = ".eINSTANCE.get";
  protected final String TEXT_1365 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1366 = NL + "\t\t}";
  protected final String TEXT_1367 = NL;
  protected final String TEXT_1368 = NL + "\t\t\tif(!";
  protected final String TEXT_1369 = ".canCreateLink(";
  protected final String TEXT_1370 = ", ";
  protected final String TEXT_1371 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1372 = NL + "\t\t\treturn true;";
  protected final String TEXT_1373 = NL + "\t\t\treturn false;";
  protected final String TEXT_1374 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1375 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1376 = " editingDomain = ";
  protected final String TEXT_1377 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1378 = " result = new ";
  protected final String TEXT_1379 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1380 = "(edge, newTarget));";
  protected final String TEXT_1381 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1382 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1383 = ".eINSTANCE.get";
  protected final String TEXT_1384 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1385 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1386 = ".eINSTANCE.get";
  protected final String TEXT_1387 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1388 = NL + "\t\t\tresult.append(";
d1414 1
a1414 1
  protected final String TEXT_1393 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
d1416 5
a1420 5
  protected final String TEXT_1395 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1396 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1397 = ".eINSTANCE.get";
  protected final String TEXT_1398 = "(), newTarget.getElement()));";
  protected final String TEXT_1399 = NL + "\t\t\tresult.append(";
d1424 116
a1539 116
  protected final String TEXT_1403 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_1404 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1405 = NL;
  protected final String TEXT_1406 = NL + "\t\t\tprivate ";
  protected final String TEXT_1407 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1408 = " editingDomain) {";
  protected final String TEXT_1409 = NL + "\t\t\t\t";
  protected final String TEXT_1410 = " result = new ";
  protected final String TEXT_1411 = "();";
  protected final String TEXT_1412 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1413 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1414 = ".getElement().eContainer(), ";
  protected final String TEXT_1415 = ".eINSTANCE.get";
  protected final String TEXT_1416 = "(), ";
  protected final String TEXT_1417 = ".getElement()));";
  protected final String TEXT_1418 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1419 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1420 = ".getElement().eContainer(), ";
  protected final String TEXT_1421 = ".eINSTANCE.get";
  protected final String TEXT_1422 = "(), ";
  protected final String TEXT_1423 = ".UNSET_VALUE));";
  protected final String TEXT_1424 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1425 = ".INSTANCE;";
  protected final String TEXT_1426 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1427 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1428 = ".getElement().eContainer(), ";
  protected final String TEXT_1429 = ".eINSTANCE.get";
  protected final String TEXT_1430 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1431 = ".getElement()));";
  protected final String TEXT_1432 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1433 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1434 = ".getElement().eContainer(), ";
  protected final String TEXT_1435 = ".eINSTANCE.get";
  protected final String TEXT_1436 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1437 = ".UNSET_VALUE));";
  protected final String TEXT_1438 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1439 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1440 = ".getElement(), ";
  protected final String TEXT_1441 = ".eINSTANCE.get";
  protected final String TEXT_1442 = "(), ";
  protected final String TEXT_1443 = ".getSource().getElement()));";
  protected final String TEXT_1444 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1445 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1446 = ".getElement(), ";
  protected final String TEXT_1447 = ".eINSTANCE.get";
  protected final String TEXT_1448 = "(), ";
  protected final String TEXT_1449 = ".UNSET_VALUE));";
  protected final String TEXT_1450 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1451 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1452 = ".getElement(), ";
  protected final String TEXT_1453 = ".eINSTANCE.get";
  protected final String TEXT_1454 = "(), ";
  protected final String TEXT_1455 = ".getTarget().getElement()));";
  protected final String TEXT_1456 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1457 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1458 = ".getElement(), ";
  protected final String TEXT_1459 = ".eINSTANCE.get";
  protected final String TEXT_1460 = "(), ";
  protected final String TEXT_1461 = ".UNSET_VALUE));";
  protected final String TEXT_1462 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1463 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1464 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1465 = ".getSource().getElement(), ";
  protected final String TEXT_1466 = ".eINSTANCE.get";
  protected final String TEXT_1467 = "(), ";
  protected final String TEXT_1468 = ".getTarget().getElement());";
  protected final String TEXT_1469 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1470 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1471 = ".getSource().getElement(), ";
  protected final String TEXT_1472 = ".eINSTANCE.get";
  protected final String TEXT_1473 = "(), ";
  protected final String TEXT_1474 = ".UNSET_VALUE);";
  protected final String TEXT_1475 = NL + "\t\t\t}";
  protected final String TEXT_1476 = NL + "\t}" + NL;
  protected final String TEXT_1477 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1478 = "Command extends ";
  protected final String TEXT_1479 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1480 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1481 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1482 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1483 = "Command(";
  protected final String TEXT_1484 = " requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1485 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1486 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1487 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1488 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1489 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1490 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1491 = NL + "\t\t\t";
  protected final String TEXT_1492 = " createdDomainElement = ";
  protected final String TEXT_1493 = ".eINSTANCE.create";
  protected final String TEXT_1494 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1495 = "(";
  protected final String TEXT_1496 = ") ";
  protected final String TEXT_1497 = "createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1498 = NL + "\t\t\t";
  protected final String TEXT_1499 = ".";
  protected final String TEXT_1500 = ".initializeElement(";
  protected final String TEXT_1501 = "(";
  protected final String TEXT_1502 = ") ";
  protected final String TEXT_1503 = "createdDomainElement);";
  protected final String TEXT_1504 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1505 = NL + "\t\t\t";
  protected final String TEXT_1506 = ".INSTANCE.decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1507 = " domainModelEditDomain = ";
  protected final String TEXT_1508 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1509 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1510 = NL + "\t\t\t";
  protected final String TEXT_1511 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1512 = ".eINSTANCE.get";
  protected final String TEXT_1513 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1514 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1515 = ".eINSTANCE.get";
  protected final String TEXT_1516 = "(), createdDomainElement));";
  protected final String TEXT_1517 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1518 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
d1542 25
a1566 25
  protected final String TEXT_1521 = NL;
  protected final String TEXT_1522 = NL + "\t\tif (";
  protected final String TEXT_1523 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1524 = NL + "\t\t}";
  protected final String TEXT_1525 = NL + "\t\tif (";
  protected final String TEXT_1526 = ".size() >= ";
  protected final String TEXT_1527 = ".eINSTANCE.get";
  protected final String TEXT_1528 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1529 = NL + "\t\t}";
  protected final String TEXT_1530 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1531 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1532 = ".eINSTANCE.get";
  protected final String TEXT_1533 = "(), source.getElement()));";
  protected final String TEXT_1534 = NL;
  protected final String TEXT_1535 = NL + "\t\tif (";
  protected final String TEXT_1536 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1537 = NL + "\t\t}";
  protected final String TEXT_1538 = NL + "\t\tif (";
  protected final String TEXT_1539 = ".size() >= ";
  protected final String TEXT_1540 = ".eINSTANCE.get";
  protected final String TEXT_1541 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1542 = NL + "\t\t}";
  protected final String TEXT_1543 = NL;
  protected final String TEXT_1544 = NL + "\t\tif (";
  protected final String TEXT_1545 = " != null) {" + NL + "\t\t\t";
d1568 62
a1629 62
  protected final String TEXT_1547 = NL + "\t\tif (";
  protected final String TEXT_1548 = ".size() >= ";
  protected final String TEXT_1549 = ".eINSTANCE.get";
  protected final String TEXT_1550 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1551 = NL + "\t\t}";
  protected final String TEXT_1552 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1553 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1554 = ".eINSTANCE.get";
  protected final String TEXT_1555 = "(), target.getElement()));";
  protected final String TEXT_1556 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1557 = NL;
  protected final String TEXT_1558 = NL + "\t\tif (";
  protected final String TEXT_1559 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1560 = NL + "\t\t}";
  protected final String TEXT_1561 = NL + "\t\tif (";
  protected final String TEXT_1562 = ".size() >= ";
  protected final String TEXT_1563 = ".eINSTANCE.get";
  protected final String TEXT_1564 = "().getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1565 = NL + "\t\t}";
  protected final String TEXT_1566 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1567 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1568 = ".eINSTANCE.get";
  protected final String TEXT_1569 = "(), target.getElement());";
  protected final String TEXT_1570 = NL + "\t\t}" + NL;
  protected final String TEXT_1571 = NL;
  protected final String TEXT_1572 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1573 = " getRelationshipContainer(";
  protected final String TEXT_1574 = " element, ";
  protected final String TEXT_1575 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1576 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1577 = NL;
  protected final String TEXT_1578 = NL + "\t\t\tif(!";
  protected final String TEXT_1579 = ".canCreateLink(";
  protected final String TEXT_1580 = ", ";
  protected final String TEXT_1581 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1582 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1583 = NL;
  protected final String TEXT_1584 = NL;
  protected final String TEXT_1585 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1586 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_1587 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_1588 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_1589 = NL;
  protected final String TEXT_1590 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1591 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_1592 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_1593 = " createDeleteCommand(";
  protected final String TEXT_1594 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_1595 = " editingDomain = ";
  protected final String TEXT_1596 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_1597 = " cc = new ";
  protected final String TEXT_1598 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_1599 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_1600 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_1601 = " editingDomain) {";
  protected final String TEXT_1602 = NL + "\t\t\t\t";
  protected final String TEXT_1603 = " result = new ";
  protected final String TEXT_1604 = "();";
  protected final String TEXT_1605 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1606 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1607 = ".eINSTANCE.get";
  protected final String TEXT_1608 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
d1633 6
a1638 6
  protected final String TEXT_1612 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1613 = ".UNSET_VALUE));";
  protected final String TEXT_1614 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1615 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1616 = ".eINSTANCE.get";
  protected final String TEXT_1617 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
d1642 7
a1648 7
  protected final String TEXT_1621 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1622 = ".UNSET_VALUE));";
  protected final String TEXT_1623 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1624 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1625 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1626 = ".eINSTANCE.get";
  protected final String TEXT_1627 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
d1652 106
a1757 102
  protected final String TEXT_1631 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1632 = ".UNSET_VALUE);";
  protected final String TEXT_1633 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1634 = NL;
  protected final String TEXT_1635 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1636 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1637 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1638 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1639 = NL;
  protected final String TEXT_1640 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1641 = " getDirectEditCommand(";
  protected final String TEXT_1642 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1643 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1644 = "(";
  protected final String TEXT_1645 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1646 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1647 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1648 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1649 = " editingDomain = ";
  protected final String TEXT_1650 = ".getEditingDomain(";
  protected final String TEXT_1651 = ".getDiagram().getElement());";
  protected final String TEXT_1652 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1653 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1654 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1655 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1656 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1657 = " createDomainModelCommand(";
  protected final String TEXT_1658 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1659 = " element = ";
  protected final String TEXT_1660 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1661 = " result = new ";
  protected final String TEXT_1662 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1663 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1664 = " ";
  protected final String TEXT_1665 = "feature = (";
  protected final String TEXT_1666 = ") ";
  protected final String TEXT_1667 = ".eINSTANCE.get";
  protected final String TEXT_1668 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1669 = ".parseValue(feature, values[";
  protected final String TEXT_1670 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1671 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1672 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1673 = " ";
  protected final String TEXT_1674 = "values = new ";
  protected final String TEXT_1675 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1676 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1677 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1678 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1679 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1680 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1681 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1682 = NL + "\t\t\t\t});";
  protected final String TEXT_1683 = NL + "\t\t}" + NL;
  protected final String TEXT_1684 = NL;
  protected final String TEXT_1685 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1686 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1687 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1688 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1689 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1690 = "(this, ";
  protected final String TEXT_1691 = ".class, new ";
  protected final String TEXT_1692 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1693 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1694 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1695 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1696 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1697 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1698 = NL;
  protected final String TEXT_1699 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1700 = " domainModelRefresher = new ";
  protected final String TEXT_1701 = "(this);" + NL;
  protected final String TEXT_1702 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1703 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1704 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1705 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1706 = " nextChild = (";
  protected final String TEXT_1707 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1708 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1709 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1710 = ") ";
  protected final String TEXT_1711 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1712 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1713 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1714 = ".eINSTANCE.get";
  protected final String TEXT_1715 = "(), labelRefresher);";
  protected final String TEXT_1716 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1717 = ".eINSTANCE.get";
  protected final String TEXT_1718 = "(), labelRefresher);";
  protected final String TEXT_1719 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1720 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1721 = " result = new ";
  protected final String TEXT_1722 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1723 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1724 = " next = (";
  protected final String TEXT_1725 = ") it.next();" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1726 = ".getVisualID(next)) {";
  protected final String TEXT_1727 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1728 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1729 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1730 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1731 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1732 = NL;
d3584 12
d3597 1
a3597 1
    stringBuffer.append(TEXT_566);
d3599 1
a3599 1
    stringBuffer.append(TEXT_567);
d3603 1
a3603 1
    stringBuffer.append(TEXT_568);
d3610 1
a3610 1
    stringBuffer.append(TEXT_569);
d3614 1
a3614 1
    stringBuffer.append(TEXT_570);
d3618 1
a3618 1
    stringBuffer.append(TEXT_571);
d3625 1
a3625 1
    stringBuffer.append(TEXT_572);
d3629 1
a3629 1
    stringBuffer.append(TEXT_573);
d3639 2
a3640 2
    stringBuffer.append(TEXT_574);
    stringBuffer.append(TEXT_575);
d3642 1
a3642 1
    stringBuffer.append(TEXT_576);
d3644 1
a3644 1
    stringBuffer.append(TEXT_577);
d3646 1
a3646 1
    stringBuffer.append(TEXT_578);
d3648 1
a3648 1
    stringBuffer.append(TEXT_579);
d3650 1
a3650 1
    stringBuffer.append(TEXT_580);
d3652 1
a3652 1
    stringBuffer.append(TEXT_581);
d3654 1
a3654 1
    stringBuffer.append(TEXT_582);
d3669 1
a3669 1
    stringBuffer.append(TEXT_583);
d3671 1
a3671 1
    stringBuffer.append(TEXT_584);
d3673 1
a3673 1
    stringBuffer.append(TEXT_585);
d3675 1
a3675 1
    stringBuffer.append(TEXT_586);
d3679 1
a3679 1
    stringBuffer.append(TEXT_587);
d3681 1
a3681 1
    stringBuffer.append(TEXT_588);
d3700 1
a3700 1
    stringBuffer.append(TEXT_589);
d3702 1
a3702 1
    stringBuffer.append(TEXT_590);
d3704 1
a3704 1
    stringBuffer.append(TEXT_591);
d3706 1
a3706 1
    stringBuffer.append(TEXT_592);
d3708 1
a3708 1
    stringBuffer.append(TEXT_593);
d3712 1
a3712 1
    stringBuffer.append(TEXT_594);
d3714 1
a3714 1
    stringBuffer.append(TEXT_595);
d3716 1
a3716 1
    stringBuffer.append(TEXT_596);
d3718 1
a3718 1
    stringBuffer.append(TEXT_597);
d3726 1
a3726 1
    stringBuffer.append(TEXT_598);
d3728 1
a3728 1
    stringBuffer.append(TEXT_599);
d3730 1
a3730 1
    stringBuffer.append(TEXT_600);
d3735 1
a3735 1
    stringBuffer.append(TEXT_601);
d3737 1
a3737 1
    stringBuffer.append(TEXT_602);
d3739 1
a3739 1
    stringBuffer.append(TEXT_603);
d3741 1
a3741 1
    stringBuffer.append(TEXT_604);
d3750 1
a3750 1
    stringBuffer.append(TEXT_605);
d3754 1
a3754 1
    stringBuffer.append(TEXT_606);
d3756 1
a3756 1
    stringBuffer.append(TEXT_607);
d3762 1
a3762 1
    stringBuffer.append(TEXT_608);
d3764 1
a3764 1
    stringBuffer.append(TEXT_609);
d3766 1
a3766 1
    stringBuffer.append(TEXT_610);
d3770 1
a3770 1
    stringBuffer.append(TEXT_611);
d3774 1
a3774 1
    stringBuffer.append(TEXT_612);
d3776 1
a3776 1
    stringBuffer.append(TEXT_613);
d3778 1
a3778 1
    stringBuffer.append(TEXT_614);
d3783 2
a3784 2
    stringBuffer.append(TEXT_615);
    stringBuffer.append(TEXT_616);
d3786 1
a3786 1
    stringBuffer.append(TEXT_617);
d3796 1
a3796 1
    stringBuffer.append(TEXT_618);
d3798 1
a3798 1
    stringBuffer.append(TEXT_619);
d3800 1
a3800 1
    stringBuffer.append(TEXT_620);
d3802 1
a3802 1
    stringBuffer.append(TEXT_621);
d3804 1
a3804 1
    stringBuffer.append(TEXT_622);
d3815 1
a3815 1
    stringBuffer.append(TEXT_623);
d3817 1
a3817 1
    stringBuffer.append(TEXT_624);
d3819 1
a3819 1
    stringBuffer.append(TEXT_625);
d3821 1
a3821 1
    stringBuffer.append(TEXT_626);
d3825 1
a3825 1
    stringBuffer.append(TEXT_627);
d3829 1
a3829 1
    stringBuffer.append(TEXT_628);
d3831 1
a3831 1
    stringBuffer.append(TEXT_629);
d3835 1
a3835 1
    stringBuffer.append(TEXT_630);
d3839 1
a3839 1
    stringBuffer.append(TEXT_631);
d3841 2
a3842 2
    stringBuffer.append(TEXT_632);
    stringBuffer.append(TEXT_633);
d3846 1
a3846 1
    stringBuffer.append(TEXT_634);
d3848 1
a3848 1
    stringBuffer.append(TEXT_635);
d3852 1
a3852 1
    stringBuffer.append(TEXT_636);
d3854 1
a3854 1
    stringBuffer.append(TEXT_637);
d3856 1
a3856 1
    stringBuffer.append(TEXT_638);
d3874 1
a3874 1
    stringBuffer.append(TEXT_639);
d3876 1
a3876 1
    stringBuffer.append(TEXT_640);
d3878 1
a3878 1
    stringBuffer.append(TEXT_641);
d3880 1
a3880 1
    stringBuffer.append(TEXT_642);
d3882 1
a3882 1
    stringBuffer.append(TEXT_643);
d3891 1
a3891 1
    stringBuffer.append(TEXT_644);
d3893 1
a3893 1
    stringBuffer.append(TEXT_645);
d3895 1
a3895 1
    stringBuffer.append(TEXT_646);
d3897 1
a3897 1
    stringBuffer.append(TEXT_647);
d3901 1
a3901 1
    stringBuffer.append(TEXT_648);
d3903 1
a3903 1
    stringBuffer.append(TEXT_649);
d3905 1
a3905 1
    stringBuffer.append(TEXT_650);
d3909 1
a3909 1
    stringBuffer.append(TEXT_651);
d3911 1
a3911 1
    stringBuffer.append(TEXT_652);
d3916 1
a3916 1
    stringBuffer.append(TEXT_653);
d3923 1
a3923 1
    stringBuffer.append(TEXT_654);
d3925 1
a3925 1
    stringBuffer.append(TEXT_655);
d3929 1
a3929 1
    stringBuffer.append(TEXT_656);
d3931 1
a3931 1
    stringBuffer.append(TEXT_657);
d3935 1
a3935 1
    stringBuffer.append(TEXT_658);
d3937 1
a3937 1
    stringBuffer.append(TEXT_659);
d3941 1
a3941 1
    stringBuffer.append(TEXT_660);
d3945 1
a3945 1
    stringBuffer.append(TEXT_661);
d3951 1
a3951 1
    stringBuffer.append(TEXT_662);
d3956 1
a3956 1
    stringBuffer.append(TEXT_663);
d3961 1
a3961 1
    stringBuffer.append(TEXT_664);
d3965 1
a3965 1
    stringBuffer.append(TEXT_665);
d3967 1
a3967 1
    stringBuffer.append(TEXT_666);
d3969 1
a3969 1
    stringBuffer.append(TEXT_667);
d3971 1
a3971 1
    stringBuffer.append(TEXT_668);
d3973 1
a3973 1
    stringBuffer.append(TEXT_669);
d3975 1
a3975 1
    stringBuffer.append(TEXT_670);
d3977 1
a3977 1
    stringBuffer.append(TEXT_671);
d3979 1
a3979 1
    stringBuffer.append(TEXT_672);
d3981 1
a3981 1
    stringBuffer.append(TEXT_673);
d3983 1
a3983 1
    stringBuffer.append(TEXT_674);
d3985 1
a3985 1
    stringBuffer.append(TEXT_675);
d3987 1
a3987 1
    stringBuffer.append(TEXT_676);
d3991 1
a3991 1
    stringBuffer.append(TEXT_677);
d3995 1
a3995 1
    stringBuffer.append(TEXT_678);
d3997 1
a3997 1
    stringBuffer.append(TEXT_679);
d3999 1
a3999 1
    stringBuffer.append(TEXT_680);
d4001 1
a4001 1
    stringBuffer.append(TEXT_681);
d4003 1
a4003 1
    stringBuffer.append(TEXT_682);
d4005 1
a4005 1
    stringBuffer.append(TEXT_683);
d4007 1
a4007 1
    stringBuffer.append(TEXT_684);
d4009 1
a4009 1
    stringBuffer.append(TEXT_685);
d4011 1
a4011 1
    stringBuffer.append(TEXT_686);
d4024 1
a4024 1
    stringBuffer.append(TEXT_687);
d4026 1
a4026 1
    stringBuffer.append(TEXT_688);
d4028 1
a4028 1
    stringBuffer.append(TEXT_689);
d4030 1
a4030 1
    stringBuffer.append(TEXT_690);
d4035 1
a4035 3
    stringBuffer.append(TEXT_691);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_692);
a4036 6
    stringBuffer.append(TEXT_693);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_694);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_695);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d4046 8
d4057 1
a4057 1
    stringBuffer.append(TEXT_701);
d4059 1
a4059 1
    stringBuffer.append(TEXT_702);
d4072 1
a4072 1
    stringBuffer.append(TEXT_703);
d4086 1
a4086 1
    stringBuffer.append(TEXT_704);
d4088 1
a4088 1
    stringBuffer.append(TEXT_705);
d4090 1
a4090 1
    stringBuffer.append(TEXT_706);
d4092 1
a4092 1
    stringBuffer.append(TEXT_707);
d4094 1
a4094 1
    stringBuffer.append(TEXT_708);
d4098 1
a4098 1
    stringBuffer.append(TEXT_709);
d4100 1
a4100 1
    stringBuffer.append(TEXT_710);
d4102 1
a4102 1
    stringBuffer.append(TEXT_711);
d4104 1
a4104 1
    stringBuffer.append(TEXT_712);
d4111 1
a4111 1
    stringBuffer.append(TEXT_713);
d4125 1
a4125 1
    stringBuffer.append(TEXT_714);
d4127 1
a4127 1
    stringBuffer.append(TEXT_715);
d4129 1
a4129 1
    stringBuffer.append(TEXT_716);
d4131 1
a4131 1
    stringBuffer.append(TEXT_717);
d4133 1
a4133 1
    stringBuffer.append(TEXT_718);
d4137 1
a4137 1
    stringBuffer.append(TEXT_719);
d4139 1
a4139 1
    stringBuffer.append(TEXT_720);
d4141 1
a4141 1
    stringBuffer.append(TEXT_721);
d4143 1
a4143 1
    stringBuffer.append(TEXT_722);
d4150 1
a4150 1
    stringBuffer.append(TEXT_723);
d4164 1
a4164 1
    stringBuffer.append(TEXT_724);
d4166 1
a4166 1
    stringBuffer.append(TEXT_725);
d4168 1
a4168 1
    stringBuffer.append(TEXT_726);
d4170 1
a4170 1
    stringBuffer.append(TEXT_727);
d4172 1
a4172 1
    stringBuffer.append(TEXT_728);
d4176 1
a4176 1
    stringBuffer.append(TEXT_729);
d4178 1
a4178 1
    stringBuffer.append(TEXT_730);
d4180 1
a4180 1
    stringBuffer.append(TEXT_731);
d4182 1
a4182 1
    stringBuffer.append(TEXT_732);
d4192 1
a4192 1
    stringBuffer.append(TEXT_733);
d4206 1
a4206 1
    stringBuffer.append(TEXT_734);
d4208 1
a4208 1
    stringBuffer.append(TEXT_735);
d4210 1
a4210 1
    stringBuffer.append(TEXT_736);
d4212 1
a4212 1
    stringBuffer.append(TEXT_737);
d4214 1
a4214 1
    stringBuffer.append(TEXT_738);
d4218 1
a4218 1
    stringBuffer.append(TEXT_739);
d4220 1
a4220 1
    stringBuffer.append(TEXT_740);
d4222 1
a4222 1
    stringBuffer.append(TEXT_741);
d4224 1
a4224 1
    stringBuffer.append(TEXT_742);
d4233 1
a4233 1
    stringBuffer.append(TEXT_743);
d4238 1
a4238 1
    stringBuffer.append(TEXT_744);
d4240 1
a4240 1
    stringBuffer.append(TEXT_745);
d4247 1
a4247 1
    stringBuffer.append(TEXT_746);
d4252 1
a4252 1
    stringBuffer.append(TEXT_747);
d4254 1
a4254 1
    stringBuffer.append(TEXT_748);
d4260 1
a4260 1
    stringBuffer.append(TEXT_749);
d4262 1
a4262 1
    stringBuffer.append(TEXT_750);
d4264 1
a4264 1
    stringBuffer.append(TEXT_751);
d4269 1
a4269 1
    stringBuffer.append(TEXT_752);
d4271 1
a4271 1
    stringBuffer.append(TEXT_753);
d4273 1
a4273 1
    stringBuffer.append(TEXT_754);
d4275 1
a4275 1
    stringBuffer.append(TEXT_755);
d4277 1
a4277 1
    stringBuffer.append(TEXT_756);
d4284 2
a4285 2
    stringBuffer.append(TEXT_757);
    stringBuffer.append(TEXT_758);
d4287 1
a4287 1
    stringBuffer.append(TEXT_759);
d4289 1
a4289 1
    stringBuffer.append(TEXT_760);
d4291 1
a4291 1
    stringBuffer.append(TEXT_761);
d4300 1
a4300 1
    stringBuffer.append(TEXT_762);
d4302 1
a4302 1
    stringBuffer.append(TEXT_763);
d4304 1
a4304 1
    stringBuffer.append(TEXT_764);
d4306 1
a4306 1
    stringBuffer.append(TEXT_765);
d4312 1
a4312 1
    stringBuffer.append(TEXT_766);
d4314 1
a4314 1
    stringBuffer.append(TEXT_767);
d4316 1
a4316 1
    stringBuffer.append(TEXT_768);
d4320 1
a4320 1
    stringBuffer.append(TEXT_769);
d4322 1
a4322 1
    stringBuffer.append(TEXT_770);
d4324 1
a4324 1
    stringBuffer.append(TEXT_771);
d4328 1
a4328 1
    stringBuffer.append(TEXT_772);
d4330 1
a4330 1
    stringBuffer.append(TEXT_773);
d4336 2
a4337 2
    stringBuffer.append(TEXT_774);
    stringBuffer.append(TEXT_775);
d4339 1
a4339 1
    stringBuffer.append(TEXT_776);
d4341 1
a4341 1
    stringBuffer.append(TEXT_777);
d4364 1
a4364 1
    stringBuffer.append(TEXT_778);
d4366 1
a4366 1
    stringBuffer.append(TEXT_779);
d4368 1
a4368 1
    stringBuffer.append(TEXT_780);
d4370 1
a4370 1
    stringBuffer.append(TEXT_781);
d4375 1
a4375 1
    stringBuffer.append(TEXT_782);
d4384 1
a4384 1
    stringBuffer.append(TEXT_783);
d4386 1
a4386 1
    stringBuffer.append(TEXT_784);
d4388 1
a4388 1
    stringBuffer.append(TEXT_785);
d4390 1
a4390 1
    stringBuffer.append(TEXT_786);
d4394 1
a4394 1
    stringBuffer.append(TEXT_787);
d4396 1
a4396 1
    stringBuffer.append(TEXT_788);
d4398 1
a4398 1
    stringBuffer.append(TEXT_789);
d4402 1
a4402 1
    stringBuffer.append(TEXT_790);
d4404 1
a4404 1
    stringBuffer.append(TEXT_791);
d4409 1
a4409 1
    stringBuffer.append(TEXT_792);
d4417 1
a4417 1
    stringBuffer.append(TEXT_793);
d4419 1
a4419 1
    stringBuffer.append(TEXT_794);
d4423 1
a4423 1
    stringBuffer.append(TEXT_795);
d4425 1
a4425 1
    stringBuffer.append(TEXT_796);
d4430 1
a4430 1
    stringBuffer.append(TEXT_797);
d4432 1
a4432 1
    stringBuffer.append(TEXT_798);
d4434 1
a4434 1
    stringBuffer.append(TEXT_799);
d4436 1
a4436 1
    stringBuffer.append(TEXT_800);
d4440 1
a4440 1
    stringBuffer.append(TEXT_801);
d4442 1
a4442 1
    stringBuffer.append(TEXT_802);
d4444 1
a4444 1
    stringBuffer.append(TEXT_803);
d4449 1
a4449 1
    stringBuffer.append(TEXT_804);
d4451 1
a4451 1
    stringBuffer.append(TEXT_805);
d4453 1
a4453 1
    stringBuffer.append(TEXT_806);
d4455 1
a4455 1
    stringBuffer.append(TEXT_807);
d4459 1
a4459 1
    stringBuffer.append(TEXT_808);
d4461 1
a4461 1
    stringBuffer.append(TEXT_809);
d4463 1
a4463 1
    stringBuffer.append(TEXT_810);
d4467 1
a4467 1
    stringBuffer.append(TEXT_811);
d4469 1
a4469 1
    stringBuffer.append(TEXT_812);
d4473 1
a4473 1
    stringBuffer.append(TEXT_813);
d4477 1
a4477 1
    stringBuffer.append(TEXT_814);
d4485 1
a4485 1
    stringBuffer.append(TEXT_815);
d4490 1
a4490 1
    stringBuffer.append(TEXT_816);
d4500 1
a4500 1
    stringBuffer.append(TEXT_817);
d4502 1
a4502 1
    stringBuffer.append(TEXT_818);
d4504 1
a4504 1
    stringBuffer.append(TEXT_819);
d4506 1
a4506 1
    stringBuffer.append(TEXT_820);
d4510 1
a4510 1
    stringBuffer.append(TEXT_821);
d4512 1
a4512 1
    stringBuffer.append(TEXT_822);
d4514 1
a4514 1
    stringBuffer.append(TEXT_823);
d4518 1
a4518 1
    stringBuffer.append(TEXT_824);
d4523 1
a4523 1
    stringBuffer.append(TEXT_825);
d4525 1
a4525 1
    stringBuffer.append(TEXT_826);
d4527 1
a4527 1
    stringBuffer.append(TEXT_827);
d4531 1
a4531 1
    stringBuffer.append(TEXT_828);
d4535 1
a4535 1
    stringBuffer.append(TEXT_829);
d4540 1
a4540 1
    stringBuffer.append(TEXT_830);
d4544 1
a4544 1
    stringBuffer.append(TEXT_831);
d4546 1
a4546 1
    stringBuffer.append(TEXT_832);
d4548 1
a4548 1
    stringBuffer.append(TEXT_833);
d4550 1
a4550 1
    stringBuffer.append(TEXT_834);
d4552 1
a4552 1
    stringBuffer.append(TEXT_835);
d4554 1
a4554 1
    stringBuffer.append(TEXT_836);
d4556 1
a4556 1
    stringBuffer.append(TEXT_837);
d4558 1
a4558 1
    stringBuffer.append(TEXT_838);
d4560 1
a4560 1
    stringBuffer.append(TEXT_839);
d4564 1
a4564 1
    stringBuffer.append(TEXT_840);
d4566 1
a4566 1
    stringBuffer.append(TEXT_841);
d4568 1
a4568 1
    stringBuffer.append(TEXT_842);
d4573 1
a4573 1
    stringBuffer.append(TEXT_843);
d4575 1
a4575 1
    stringBuffer.append(TEXT_844);
d4577 1
a4577 1
    stringBuffer.append(TEXT_845);
d4582 1
a4582 1
    stringBuffer.append(TEXT_846);
d4584 1
a4584 1
    stringBuffer.append(TEXT_847);
d4588 1
a4588 1
    stringBuffer.append(TEXT_848);
d4592 1
a4592 1
    stringBuffer.append(TEXT_849);
d4596 1
a4596 1
    stringBuffer.append(TEXT_850);
d4603 1
a4603 1
    stringBuffer.append(TEXT_851);
d4607 1
a4607 1
    stringBuffer.append(TEXT_852);
d4609 1
a4609 1
    stringBuffer.append(TEXT_853);
d4611 1
a4611 1
    stringBuffer.append(TEXT_854);
d4616 1
a4616 1
    stringBuffer.append(TEXT_855);
d4618 1
a4618 1
    stringBuffer.append(TEXT_856);
d4622 1
a4622 1
    stringBuffer.append(TEXT_857);
d4626 1
a4626 1
    stringBuffer.append(TEXT_858);
d4628 1
a4628 1
    stringBuffer.append(TEXT_859);
d4630 1
a4630 1
    stringBuffer.append(TEXT_860);
d4632 1
a4632 1
    stringBuffer.append(TEXT_861);
d4634 1
a4634 1
    stringBuffer.append(TEXT_862);
d4636 1
a4636 1
    stringBuffer.append(TEXT_863);
d4638 1
a4638 1
    stringBuffer.append(TEXT_864);
d4640 1
a4640 1
    stringBuffer.append(TEXT_865);
d4642 1
a4642 1
    stringBuffer.append(TEXT_866);
d4644 1
a4644 1
    stringBuffer.append(TEXT_867);
d4646 1
a4646 1
    stringBuffer.append(TEXT_868);
d4648 1
a4648 1
    stringBuffer.append(TEXT_869);
a4654 6
    stringBuffer.append(TEXT_870);
    stringBuffer.append(TEXT_871);
    stringBuffer.append(TEXT_872);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_873);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
d4658 6
d4665 1
a4665 1
    stringBuffer.append(TEXT_877);
d4667 1
a4667 1
    stringBuffer.append(TEXT_878);
d4669 1
a4669 1
    stringBuffer.append(TEXT_879);
d4673 1
a4673 1
    stringBuffer.append(TEXT_880);
d4681 1
a4681 1
    stringBuffer.append(TEXT_881);
d4685 1
a4685 1
    stringBuffer.append(TEXT_882);
d4687 1
a4687 1
    stringBuffer.append(TEXT_883);
d4689 1
a4689 1
    stringBuffer.append(TEXT_884);
d4691 1
a4691 1
    stringBuffer.append(TEXT_885);
d4693 1
a4693 1
    stringBuffer.append(TEXT_886);
d4695 1
a4695 1
    stringBuffer.append(TEXT_887);
d4697 1
a4697 1
    stringBuffer.append(TEXT_888);
d4699 1
a4699 1
    stringBuffer.append(TEXT_889);
d4701 1
a4701 1
    stringBuffer.append(TEXT_890);
d4703 1
a4703 1
    stringBuffer.append(TEXT_891);
d4705 1
a4705 1
    stringBuffer.append(TEXT_892);
d4707 1
a4707 1
    stringBuffer.append(TEXT_893);
d4711 1
a4711 1
    stringBuffer.append(TEXT_894);
d4715 1
a4715 1
    stringBuffer.append(TEXT_895);
d4717 1
a4717 1
    stringBuffer.append(TEXT_896);
a4720 6
    stringBuffer.append(TEXT_897);
    stringBuffer.append(TEXT_898);
    stringBuffer.append(TEXT_899);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_900);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
a4721 1
    stringBuffer.append(primaryView);
a4722 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4724 1
a4724 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4726 1
a4726 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4728 1
a4728 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4730 2
a4732 2
    stringBuffer.append(TEXT_907);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d4734 1
a4734 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d4736 1
a4736 1
    stringBuffer.append(primaryView);
d4738 1
a4738 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4740 1
a4740 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4742 1
a4742 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4744 1
a4744 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d4746 2
a4748 1
    stringBuffer.append(TEXT_915);
d4750 1
d4752 1
a4752 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d4754 1
a4754 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a4755 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d4757 1
a4758 1
    stringBuffer.append(TEXT_921);
d4760 1
d4762 1
a4762 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4764 1
a4764 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4771 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4772 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4776 1
d4778 1
d4782 1
d4785 1
a4786 1
    stringBuffer.append(TEXT_938);
d4789 1
a4790 1
    stringBuffer.append(TEXT_941);
a4792 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4795 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4797 1
a4798 1
    stringBuffer.append(TEXT_947);
d4800 1
d4806 6
d4818 1
a4818 1
    stringBuffer.append(TEXT_952);
d4822 1
a4822 1
    stringBuffer.append(TEXT_953);
d4824 1
a4824 1
    stringBuffer.append(TEXT_954);
d4826 1
a4826 1
    stringBuffer.append(TEXT_955);
d4829 1
a4829 1
    stringBuffer.append(TEXT_956);
d4831 1
a4831 1
    stringBuffer.append(TEXT_957);
d4833 1
a4833 1
    stringBuffer.append(TEXT_958);
d4836 1
a4836 1
    stringBuffer.append(TEXT_959);
d4838 1
a4838 1
    stringBuffer.append(TEXT_960);
d4840 1
a4840 1
    stringBuffer.append(TEXT_961);
d4842 1
a4842 1
    stringBuffer.append(TEXT_962);
d4844 1
a4844 1
    stringBuffer.append(TEXT_963);
d4846 1
a4846 1
    stringBuffer.append(TEXT_964);
d4848 1
a4848 1
    stringBuffer.append(TEXT_965);
d4850 1
a4850 1
    stringBuffer.append(TEXT_966);
d4855 1
a4855 1
    stringBuffer.append(TEXT_967);
d4857 1
a4857 1
    stringBuffer.append(TEXT_968);
d4859 1
a4859 1
    stringBuffer.append(TEXT_969);
d4861 1
a4861 1
    stringBuffer.append(TEXT_970);
d4863 1
a4863 1
    stringBuffer.append(TEXT_971);
d4867 1
a4867 1
    stringBuffer.append(TEXT_972);
d4869 1
a4869 1
    stringBuffer.append(TEXT_973);
d4871 1
a4871 1
    stringBuffer.append(TEXT_974);
d4873 1
a4873 1
    stringBuffer.append(TEXT_975);
d4877 1
a4877 1
    stringBuffer.append(TEXT_976);
d4879 1
a4879 1
    stringBuffer.append(TEXT_977);
d4881 1
a4881 1
    stringBuffer.append(TEXT_978);
d4883 1
a4883 1
    stringBuffer.append(TEXT_979);
d4885 1
a4885 1
    stringBuffer.append(TEXT_980);
d4887 1
a4887 1
    stringBuffer.append(TEXT_981);
d4889 1
a4889 1
    stringBuffer.append(TEXT_982);
d4900 1
a4900 1
    stringBuffer.append(TEXT_983);
d4906 1
a4906 1
    stringBuffer.append(TEXT_984);
d4908 1
a4908 1
    stringBuffer.append(TEXT_985);
d4910 1
a4910 1
    stringBuffer.append(TEXT_986);
d4914 1
a4914 1
    stringBuffer.append(TEXT_987);
d4916 1
a4916 1
    stringBuffer.append(TEXT_988);
d4918 1
a4918 1
    stringBuffer.append(TEXT_989);
d4920 1
a4920 1
    stringBuffer.append(TEXT_990);
d4922 1
a4922 1
    stringBuffer.append(TEXT_991);
d4935 1
a4935 1
    stringBuffer.append(TEXT_992);
d4941 1
a4941 1
    stringBuffer.append(TEXT_993);
d4943 1
a4943 1
    stringBuffer.append(TEXT_994);
d4945 1
a4945 1
    stringBuffer.append(TEXT_995);
d4949 1
a4949 1
    stringBuffer.append(TEXT_996);
d4951 1
a4951 1
    stringBuffer.append(TEXT_997);
d4953 1
a4953 1
    stringBuffer.append(TEXT_998);
d4955 1
a4955 1
    stringBuffer.append(TEXT_999);
d4957 1
a4957 1
    stringBuffer.append(TEXT_1000);
d4962 1
a4962 1
    stringBuffer.append(TEXT_1001);
d4964 1
a4964 1
    stringBuffer.append(TEXT_1002);
d4966 1
a4966 1
    stringBuffer.append(TEXT_1003);
d4968 1
a4968 1
    stringBuffer.append(TEXT_1004);
d4970 1
a4970 1
    stringBuffer.append(TEXT_1005);
d4972 1
a4972 1
    stringBuffer.append(TEXT_1006);
d4974 1
a4974 1
    stringBuffer.append(TEXT_1007);
d4976 1
a4976 1
    stringBuffer.append(TEXT_1008);
d4978 1
a4978 1
    stringBuffer.append(TEXT_1009);
d4982 1
a4982 1
    stringBuffer.append(TEXT_1010);
d4984 1
a4984 1
    stringBuffer.append(TEXT_1011);
d4986 1
a4986 1
    stringBuffer.append(TEXT_1012);
d4988 1
a4988 1
    stringBuffer.append(TEXT_1013);
d5002 1
a5002 1
    stringBuffer.append(TEXT_1014);
d5004 1
a5004 1
    stringBuffer.append(TEXT_1015);
d5006 1
a5006 1
    stringBuffer.append(TEXT_1016);
d5008 1
a5008 1
    stringBuffer.append(TEXT_1017);
d5012 1
a5012 1
    stringBuffer.append(TEXT_1018);
d5014 1
a5014 1
    stringBuffer.append(TEXT_1019);
d5016 1
a5016 1
    stringBuffer.append(TEXT_1020);
d5018 1
a5018 1
    stringBuffer.append(TEXT_1021);
d5020 1
a5020 1
    stringBuffer.append(TEXT_1022);
d5022 1
a5022 1
    stringBuffer.append(TEXT_1023);
d5024 1
a5024 1
    stringBuffer.append(TEXT_1024);
d5026 1
a5026 1
    stringBuffer.append(TEXT_1025);
d5028 1
a5028 1
    stringBuffer.append(TEXT_1026);
d5060 1
a5060 1
    stringBuffer.append(TEXT_1027);
d5063 1
a5063 1
    stringBuffer.append(TEXT_1028);
d5065 1
a5065 1
    stringBuffer.append(TEXT_1029);
d5067 1
a5067 1
    stringBuffer.append(TEXT_1030);
d5069 1
a5069 1
    stringBuffer.append(TEXT_1031);
d5071 1
a5071 1
    stringBuffer.append(TEXT_1032);
d5073 1
a5073 1
    stringBuffer.append(TEXT_1033);
d5076 1
a5076 1
    stringBuffer.append(TEXT_1034);
d5078 1
a5078 1
    stringBuffer.append(TEXT_1035);
d5080 1
a5080 1
    stringBuffer.append(TEXT_1036);
d5082 1
a5082 1
    stringBuffer.append(TEXT_1037);
d5085 1
a5085 1
    stringBuffer.append(TEXT_1038);
d5087 1
a5087 1
    stringBuffer.append(TEXT_1039);
d5089 1
a5089 1
    stringBuffer.append(TEXT_1040);
d5093 1
a5093 1
    stringBuffer.append(TEXT_1041);
d5095 1
a5095 1
    stringBuffer.append(TEXT_1042);
d5097 1
a5097 1
    stringBuffer.append(TEXT_1043);
d5099 1
a5099 1
    stringBuffer.append(TEXT_1044);
d5101 1
a5101 1
    stringBuffer.append(TEXT_1045);
d5103 1
a5103 1
    stringBuffer.append(TEXT_1046);
d5105 1
a5105 1
    stringBuffer.append(TEXT_1047);
d5109 1
a5109 1
    stringBuffer.append(TEXT_1048);
d5113 1
a5113 1
    stringBuffer.append(TEXT_1049);
d5121 1
a5121 1
    stringBuffer.append(TEXT_1050);
d5125 1
a5125 1
    stringBuffer.append(TEXT_1051);
d5127 1
a5127 1
    stringBuffer.append(TEXT_1052);
d5129 1
a5129 1
    stringBuffer.append(TEXT_1053);
d5131 1
a5131 1
    stringBuffer.append(TEXT_1054);
d5133 1
a5133 1
    stringBuffer.append(TEXT_1055);
d5141 1
a5141 1
    stringBuffer.append(TEXT_1056);
d5147 1
a5147 1
    stringBuffer.append(TEXT_1057);
d5149 1
a5149 1
    stringBuffer.append(TEXT_1058);
d5151 1
a5151 1
    stringBuffer.append(TEXT_1059);
d5155 1
a5155 1
    stringBuffer.append(TEXT_1060);
d5157 1
a5157 1
    stringBuffer.append(TEXT_1061);
d5159 1
a5159 1
    stringBuffer.append(TEXT_1062);
d5161 1
a5161 1
    stringBuffer.append(TEXT_1063);
d5163 1
a5163 1
    stringBuffer.append(TEXT_1064);
d5177 1
a5177 1
    stringBuffer.append(TEXT_1065);
d5183 1
a5183 1
    stringBuffer.append(TEXT_1066);
d5185 1
a5185 1
    stringBuffer.append(TEXT_1067);
d5187 1
a5187 1
    stringBuffer.append(TEXT_1068);
d5191 1
a5191 1
    stringBuffer.append(TEXT_1069);
d5193 1
a5193 1
    stringBuffer.append(TEXT_1070);
d5195 1
a5195 1
    stringBuffer.append(TEXT_1071);
d5197 1
a5197 1
    stringBuffer.append(TEXT_1072);
d5199 1
a5199 1
    stringBuffer.append(TEXT_1073);
d5218 1
a5218 1
    stringBuffer.append(TEXT_1074);
d5224 1
a5224 1
    stringBuffer.append(TEXT_1075);
d5226 1
a5226 1
    stringBuffer.append(TEXT_1076);
d5228 1
a5228 1
    stringBuffer.append(TEXT_1077);
d5232 1
a5232 1
    stringBuffer.append(TEXT_1078);
d5234 1
a5234 1
    stringBuffer.append(TEXT_1079);
d5236 1
a5236 1
    stringBuffer.append(TEXT_1080);
d5238 1
a5238 1
    stringBuffer.append(TEXT_1081);
d5240 1
a5240 1
    stringBuffer.append(TEXT_1082);
d5251 1
a5251 1
    stringBuffer.append(TEXT_1083);
d5255 1
a5255 1
    stringBuffer.append(TEXT_1084);
d5257 1
a5257 1
    stringBuffer.append(TEXT_1085);
d5259 1
a5259 1
    stringBuffer.append(TEXT_1086);
d5261 1
a5261 1
    stringBuffer.append(TEXT_1087);
d5268 1
a5268 1
    stringBuffer.append(TEXT_1088);
d5278 1
a5278 1
    stringBuffer.append(TEXT_1089);
d5284 1
a5284 1
    stringBuffer.append(TEXT_1090);
d5286 1
a5286 1
    stringBuffer.append(TEXT_1091);
d5288 1
a5288 1
    stringBuffer.append(TEXT_1092);
d5292 1
a5292 1
    stringBuffer.append(TEXT_1093);
d5294 1
a5294 1
    stringBuffer.append(TEXT_1094);
d5296 1
a5296 1
    stringBuffer.append(TEXT_1095);
d5298 1
a5298 1
    stringBuffer.append(TEXT_1096);
d5300 1
a5300 1
    stringBuffer.append(TEXT_1097);
d5311 1
a5311 1
    stringBuffer.append(TEXT_1098);
d5315 1
a5315 1
    stringBuffer.append(TEXT_1099);
d5317 1
a5317 1
    stringBuffer.append(TEXT_1100);
d5319 1
a5319 1
    stringBuffer.append(TEXT_1101);
d5321 1
a5321 1
    stringBuffer.append(TEXT_1102);
d5328 1
a5328 1
    stringBuffer.append(TEXT_1103);
d5332 1
a5332 1
    stringBuffer.append(TEXT_1104);
d5336 1
a5336 1
    stringBuffer.append(TEXT_1105);
d5338 1
a5338 1
    stringBuffer.append(TEXT_1106);
d5340 1
a5340 1
    stringBuffer.append(TEXT_1107);
d5342 1
a5342 1
    stringBuffer.append(TEXT_1108);
d5344 1
a5344 1
    stringBuffer.append(TEXT_1109);
d5346 1
a5346 1
    stringBuffer.append(TEXT_1110);
d5348 1
a5348 1
    stringBuffer.append(TEXT_1111);
d5367 1
a5367 1
    stringBuffer.append(TEXT_1112);
d5369 1
a5369 1
    stringBuffer.append(TEXT_1113);
d5371 1
a5371 1
    stringBuffer.append(TEXT_1114);
d5373 1
a5373 1
    stringBuffer.append(TEXT_1115);
d5375 1
a5375 1
    stringBuffer.append(TEXT_1116);
d5377 1
a5377 1
    stringBuffer.append(TEXT_1117);
d5379 1
a5379 1
    stringBuffer.append(TEXT_1118);
d5385 1
a5385 1
    stringBuffer.append(TEXT_1119);
d5387 1
a5387 1
    stringBuffer.append(TEXT_1120);
d5389 1
a5389 1
    stringBuffer.append(TEXT_1121);
d5391 1
a5391 1
    stringBuffer.append(TEXT_1122);
d5395 1
a5395 1
    stringBuffer.append(TEXT_1123);
d5397 1
a5397 1
    stringBuffer.append(TEXT_1124);
d5399 1
a5399 1
    stringBuffer.append(TEXT_1125);
d5401 1
a5401 1
    stringBuffer.append(TEXT_1126);
d5403 1
a5403 1
    stringBuffer.append(TEXT_1127);
d5407 1
a5407 1
    stringBuffer.append(TEXT_1128);
d5409 1
a5409 1
    stringBuffer.append(TEXT_1129);
d5411 1
a5411 1
    stringBuffer.append(TEXT_1130);
d5413 1
a5413 1
    stringBuffer.append(TEXT_1131);
d5419 1
a5419 1
    stringBuffer.append(TEXT_1132);
d5421 1
a5421 1
    stringBuffer.append(TEXT_1133);
d5423 1
a5423 1
    stringBuffer.append(TEXT_1134);
d5425 1
a5425 1
    stringBuffer.append(TEXT_1135);
d5429 1
a5429 1
    stringBuffer.append(TEXT_1136);
d5431 1
a5431 1
    stringBuffer.append(TEXT_1137);
d5433 1
a5433 1
    stringBuffer.append(TEXT_1138);
d5435 1
a5435 1
    stringBuffer.append(TEXT_1139);
d5437 1
a5437 1
    stringBuffer.append(TEXT_1140);
d5441 1
a5441 1
    stringBuffer.append(TEXT_1141);
d5443 1
a5443 1
    stringBuffer.append(TEXT_1142);
d5445 1
a5445 1
    stringBuffer.append(TEXT_1143);
d5447 1
a5447 1
    stringBuffer.append(TEXT_1144);
d5451 1
a5451 1
    stringBuffer.append(TEXT_1145);
d5456 1
a5456 1
    stringBuffer.append(TEXT_1146);
d5458 1
a5458 1
    stringBuffer.append(TEXT_1147);
d5460 1
a5460 1
    stringBuffer.append(TEXT_1148);
d5462 1
a5462 1
    stringBuffer.append(TEXT_1149);
d5464 1
a5464 1
    stringBuffer.append(TEXT_1150);
d5466 1
a5466 1
    stringBuffer.append(TEXT_1151);
d5468 1
a5468 1
    stringBuffer.append(TEXT_1152);
d5472 1
a5472 1
    stringBuffer.append(TEXT_1153);
d5474 1
a5474 1
    stringBuffer.append(TEXT_1154);
d5476 1
a5476 1
    stringBuffer.append(TEXT_1155);
d5478 1
a5478 1
    stringBuffer.append(TEXT_1156);
d5486 1
a5486 1
    stringBuffer.append(TEXT_1157);
d5488 1
a5488 1
    stringBuffer.append(TEXT_1158);
d5490 1
a5490 1
    stringBuffer.append(TEXT_1159);
d5492 1
a5492 1
    stringBuffer.append(TEXT_1160);
d5494 1
a5494 1
    stringBuffer.append(TEXT_1161);
d5496 1
a5496 1
    stringBuffer.append(TEXT_1162);
d5498 1
a5498 1
    stringBuffer.append(TEXT_1163);
d5502 1
a5502 1
    stringBuffer.append(TEXT_1164);
d5504 1
a5504 1
    stringBuffer.append(TEXT_1165);
d5506 1
a5506 1
    stringBuffer.append(TEXT_1166);
d5508 1
a5508 1
    stringBuffer.append(TEXT_1167);
d5510 1
a5510 1
    stringBuffer.append(TEXT_1168);
d5512 1
a5512 1
    stringBuffer.append(TEXT_1169);
d5514 1
a5514 1
    stringBuffer.append(TEXT_1170);
d5516 1
a5516 1
    stringBuffer.append(TEXT_1171);
d5521 2
a5522 2
    stringBuffer.append(TEXT_1172);
    stringBuffer.append(TEXT_1173);
d5526 1
a5526 1
    stringBuffer.append(TEXT_1174);
d5528 1
a5528 1
    stringBuffer.append(TEXT_1175);
d5530 1
a5530 1
    stringBuffer.append(TEXT_1176);
d5532 1
a5532 1
    stringBuffer.append(TEXT_1177);
d5540 2
a5541 2
    stringBuffer.append(TEXT_1178);
    stringBuffer.append(TEXT_1179);
d5545 1
a5545 1
    stringBuffer.append(TEXT_1180);
d5547 1
a5547 1
    stringBuffer.append(TEXT_1181);
d5549 1
a5549 1
    stringBuffer.append(TEXT_1182);
d5576 1
a5576 1
    stringBuffer.append(TEXT_1183);
d5578 1
a5578 1
    stringBuffer.append(TEXT_1184);
d5580 1
a5580 1
    stringBuffer.append(TEXT_1185);
d5584 1
a5584 1
    stringBuffer.append(TEXT_1186);
d5586 1
a5586 1
    stringBuffer.append(TEXT_1187);
d5588 1
a5588 1
    stringBuffer.append(TEXT_1188);
d5590 1
a5590 1
    stringBuffer.append(TEXT_1189);
d5592 1
a5592 1
    stringBuffer.append(TEXT_1190);
d5594 1
a5594 1
    stringBuffer.append(TEXT_1191);
d5598 1
a5598 1
    stringBuffer.append(TEXT_1192);
d5600 1
a5600 1
    stringBuffer.append(TEXT_1193);
d5602 1
a5602 1
    stringBuffer.append(TEXT_1194);
d5604 1
a5604 1
    stringBuffer.append(TEXT_1195);
d5606 1
a5606 1
    stringBuffer.append(TEXT_1196);
d5608 1
a5608 1
    stringBuffer.append(TEXT_1197);
d5613 1
a5613 1
    stringBuffer.append(TEXT_1198);
d5615 1
a5615 1
    stringBuffer.append(TEXT_1199);
d5621 1
a5621 1
    stringBuffer.append(TEXT_1200);
d5623 1
a5623 1
    stringBuffer.append(TEXT_1201);
d5625 1
a5625 1
    stringBuffer.append(TEXT_1202);
d5627 1
a5627 1
    stringBuffer.append(TEXT_1203);
d5629 1
a5629 1
    stringBuffer.append(TEXT_1204);
d5631 1
a5631 1
    stringBuffer.append(TEXT_1205);
d5635 1
a5635 1
    stringBuffer.append(TEXT_1206);
d5637 1
a5637 1
    stringBuffer.append(TEXT_1207);
d5639 1
a5639 1
    stringBuffer.append(TEXT_1208);
d5641 1
a5641 1
    stringBuffer.append(TEXT_1209);
d5643 1
a5643 1
    stringBuffer.append(TEXT_1210);
d5645 1
a5645 1
    stringBuffer.append(TEXT_1211);
d5652 1
a5652 1
    stringBuffer.append(TEXT_1212);
d5654 1
a5654 1
    stringBuffer.append(TEXT_1213);
d5656 1
a5656 1
    stringBuffer.append(TEXT_1214);
d5658 1
a5658 1
    stringBuffer.append(TEXT_1215);
d5660 1
a5660 1
    stringBuffer.append(TEXT_1216);
d5662 1
a5662 1
    stringBuffer.append(TEXT_1217);
d5666 1
a5666 1
    stringBuffer.append(TEXT_1218);
d5668 1
a5668 1
    stringBuffer.append(TEXT_1219);
d5670 1
a5670 1
    stringBuffer.append(TEXT_1220);
d5672 1
a5672 1
    stringBuffer.append(TEXT_1221);
d5674 1
a5674 1
    stringBuffer.append(TEXT_1222);
d5676 1
a5676 1
    stringBuffer.append(TEXT_1223);
d5683 1
a5683 1
    stringBuffer.append(TEXT_1224);
d5685 1
a5685 1
    stringBuffer.append(TEXT_1225);
d5687 1
a5687 1
    stringBuffer.append(TEXT_1226);
d5689 1
a5689 1
    stringBuffer.append(TEXT_1227);
d5691 1
a5691 1
    stringBuffer.append(TEXT_1228);
d5693 1
a5693 1
    stringBuffer.append(TEXT_1229);
d5697 1
a5697 1
    stringBuffer.append(TEXT_1230);
d5699 1
a5699 1
    stringBuffer.append(TEXT_1231);
d5701 1
a5701 1
    stringBuffer.append(TEXT_1232);
d5703 1
a5703 1
    stringBuffer.append(TEXT_1233);
d5705 1
a5705 1
    stringBuffer.append(TEXT_1234);
d5707 1
a5707 1
    stringBuffer.append(TEXT_1235);
d5712 1
a5712 1
    stringBuffer.append(TEXT_1236);
d5718 1
a5718 1
    stringBuffer.append(TEXT_1237);
d5720 1
a5720 1
    stringBuffer.append(TEXT_1238);
d5722 1
a5722 1
    stringBuffer.append(TEXT_1239);
d5724 1
a5724 1
    stringBuffer.append(TEXT_1240);
d5726 1
a5726 1
    stringBuffer.append(TEXT_1241);
d5728 1
a5728 1
    stringBuffer.append(TEXT_1242);
d5732 1
a5732 1
    stringBuffer.append(TEXT_1243);
d5734 1
a5734 1
    stringBuffer.append(TEXT_1244);
d5736 1
a5736 1
    stringBuffer.append(TEXT_1245);
d5738 1
a5738 1
    stringBuffer.append(TEXT_1246);
d5740 1
a5740 1
    stringBuffer.append(TEXT_1247);
d5742 1
a5742 1
    stringBuffer.append(TEXT_1248);
d5749 1
a5749 1
    stringBuffer.append(TEXT_1249);
d5753 1
a5753 1
    stringBuffer.append(TEXT_1250);
d5757 1
a5757 1
    stringBuffer.append(TEXT_1251);
d5760 1
a5760 1
    stringBuffer.append(TEXT_1252);
d5762 1
a5762 1
    stringBuffer.append(TEXT_1253);
d5764 1
a5764 1
    stringBuffer.append(TEXT_1254);
d5767 1
a5767 1
    stringBuffer.append(TEXT_1255);
d5769 1
a5769 1
    stringBuffer.append(TEXT_1256);
d5771 1
a5771 1
    stringBuffer.append(TEXT_1257);
d5778 1
a5778 1
    stringBuffer.append(TEXT_1258);
d5782 1
a5782 1
    stringBuffer.append(TEXT_1259);
d5784 1
a5784 1
    stringBuffer.append(TEXT_1260);
d5786 1
a5786 1
    stringBuffer.append(TEXT_1261);
d5788 1
a5788 1
    stringBuffer.append(TEXT_1262);
d5790 1
a5790 1
    stringBuffer.append(TEXT_1263);
d5798 1
a5798 1
    stringBuffer.append(TEXT_1264);
d5804 1
a5804 1
    stringBuffer.append(TEXT_1265);
d5806 1
a5806 1
    stringBuffer.append(TEXT_1266);
d5808 1
a5808 1
    stringBuffer.append(TEXT_1267);
d5812 1
a5812 1
    stringBuffer.append(TEXT_1268);
d5814 1
a5814 1
    stringBuffer.append(TEXT_1269);
d5816 1
a5816 1
    stringBuffer.append(TEXT_1270);
d5818 1
a5818 1
    stringBuffer.append(TEXT_1271);
d5820 1
a5820 1
    stringBuffer.append(TEXT_1272);
d5835 1
a5835 1
    stringBuffer.append(TEXT_1273);
d5841 1
a5841 1
    stringBuffer.append(TEXT_1274);
d5843 1
a5843 1
    stringBuffer.append(TEXT_1275);
d5845 1
a5845 1
    stringBuffer.append(TEXT_1276);
d5849 1
a5849 1
    stringBuffer.append(TEXT_1277);
d5851 1
a5851 1
    stringBuffer.append(TEXT_1278);
d5853 1
a5853 1
    stringBuffer.append(TEXT_1279);
d5855 1
a5855 1
    stringBuffer.append(TEXT_1280);
d5857 1
a5857 1
    stringBuffer.append(TEXT_1281);
d5874 1
a5874 1
    stringBuffer.append(TEXT_1282);
d5880 1
a5880 1
    stringBuffer.append(TEXT_1283);
d5882 1
a5882 1
    stringBuffer.append(TEXT_1284);
d5884 1
a5884 1
    stringBuffer.append(TEXT_1285);
d5888 1
a5888 1
    stringBuffer.append(TEXT_1286);
d5890 1
a5890 1
    stringBuffer.append(TEXT_1287);
d5892 1
a5892 1
    stringBuffer.append(TEXT_1288);
d5894 1
a5894 1
    stringBuffer.append(TEXT_1289);
d5896 1
a5896 1
    stringBuffer.append(TEXT_1290);
d5907 1
a5907 1
    stringBuffer.append(TEXT_1291);
d5911 1
a5911 1
    stringBuffer.append(TEXT_1292);
d5913 1
a5913 1
    stringBuffer.append(TEXT_1293);
d5915 1
a5915 1
    stringBuffer.append(TEXT_1294);
d5917 1
a5917 1
    stringBuffer.append(TEXT_1295);
d5924 1
a5924 1
    stringBuffer.append(TEXT_1296);
d5935 1
a5935 1
    stringBuffer.append(TEXT_1297);
d5941 1
a5941 1
    stringBuffer.append(TEXT_1298);
d5943 1
a5943 1
    stringBuffer.append(TEXT_1299);
d5945 1
a5945 1
    stringBuffer.append(TEXT_1300);
d5949 1
a5949 1
    stringBuffer.append(TEXT_1301);
d5951 1
a5951 1
    stringBuffer.append(TEXT_1302);
d5953 1
a5953 1
    stringBuffer.append(TEXT_1303);
d5955 1
a5955 1
    stringBuffer.append(TEXT_1304);
d5957 1
a5957 1
    stringBuffer.append(TEXT_1305);
d5968 1
a5968 1
    stringBuffer.append(TEXT_1306);
d5972 1
a5972 1
    stringBuffer.append(TEXT_1307);
d5974 1
a5974 1
    stringBuffer.append(TEXT_1308);
d5976 1
a5976 1
    stringBuffer.append(TEXT_1309);
d5978 1
a5978 1
    stringBuffer.append(TEXT_1310);
d5985 1
a5985 1
    stringBuffer.append(TEXT_1311);
d5989 1
a5989 1
    stringBuffer.append(TEXT_1312);
d5993 2
a5994 2
    stringBuffer.append(TEXT_1313);
    stringBuffer.append(TEXT_1314);
d5998 1
a5998 1
    stringBuffer.append(TEXT_1315);
d6000 1
a6000 1
    stringBuffer.append(TEXT_1316);
d6002 1
a6002 1
    stringBuffer.append(TEXT_1317);
d6004 1
a6004 1
    stringBuffer.append(TEXT_1318);
d6008 1
a6008 1
    stringBuffer.append(TEXT_1319);
d6038 1
a6038 1
    stringBuffer.append(TEXT_1320);
d6041 1
a6041 1
    stringBuffer.append(TEXT_1321);
d6043 1
a6043 1
    stringBuffer.append(TEXT_1322);
d6045 1
a6045 1
    stringBuffer.append(TEXT_1323);
d6047 1
a6047 1
    stringBuffer.append(TEXT_1324);
d6049 1
a6049 1
    stringBuffer.append(TEXT_1325);
d6051 1
a6051 1
    stringBuffer.append(TEXT_1326);
d6054 1
a6054 1
    stringBuffer.append(TEXT_1327);
d6056 1
a6056 1
    stringBuffer.append(TEXT_1328);
d6058 1
a6058 1
    stringBuffer.append(TEXT_1329);
d6060 1
a6060 1
    stringBuffer.append(TEXT_1330);
d6063 1
a6063 1
    stringBuffer.append(TEXT_1331);
d6065 1
a6065 1
    stringBuffer.append(TEXT_1332);
d6067 1
a6067 1
    stringBuffer.append(TEXT_1333);
d6071 1
a6071 1
    stringBuffer.append(TEXT_1334);
d6073 1
a6073 1
    stringBuffer.append(TEXT_1335);
d6075 1
a6075 1
    stringBuffer.append(TEXT_1336);
d6077 1
a6077 1
    stringBuffer.append(TEXT_1337);
d6079 1
a6079 1
    stringBuffer.append(TEXT_1338);
d6081 1
a6081 1
    stringBuffer.append(TEXT_1339);
d6083 1
a6083 1
    stringBuffer.append(TEXT_1340);
d6087 1
a6087 1
    stringBuffer.append(TEXT_1341);
d6091 1
a6091 1
    stringBuffer.append(TEXT_1342);
d6104 1
a6104 1
    stringBuffer.append(TEXT_1343);
d6110 1
a6110 1
    stringBuffer.append(TEXT_1344);
d6112 1
a6112 1
    stringBuffer.append(TEXT_1345);
d6114 1
a6114 1
    stringBuffer.append(TEXT_1346);
d6118 1
a6118 1
    stringBuffer.append(TEXT_1347);
d6120 1
a6120 1
    stringBuffer.append(TEXT_1348);
d6122 1
a6122 1
    stringBuffer.append(TEXT_1349);
d6124 1
a6124 1
    stringBuffer.append(TEXT_1350);
d6126 1
a6126 1
    stringBuffer.append(TEXT_1351);
d6137 1
a6137 1
    stringBuffer.append(TEXT_1352);
d6141 1
a6141 1
    stringBuffer.append(TEXT_1353);
d6143 1
a6143 1
    stringBuffer.append(TEXT_1354);
d6145 1
a6145 1
    stringBuffer.append(TEXT_1355);
d6147 1
a6147 1
    stringBuffer.append(TEXT_1356);
d6154 1
a6154 1
    stringBuffer.append(TEXT_1357);
d6166 1
a6166 1
    stringBuffer.append(TEXT_1358);
d6172 1
a6172 1
    stringBuffer.append(TEXT_1359);
d6174 1
a6174 1
    stringBuffer.append(TEXT_1360);
d6176 1
a6176 1
    stringBuffer.append(TEXT_1361);
d6180 1
a6180 1
    stringBuffer.append(TEXT_1362);
d6182 1
a6182 1
    stringBuffer.append(TEXT_1363);
d6184 1
a6184 1
    stringBuffer.append(TEXT_1364);
d6186 1
a6186 1
    stringBuffer.append(TEXT_1365);
d6188 1
a6188 1
    stringBuffer.append(TEXT_1366);
d6199 1
a6199 1
    stringBuffer.append(TEXT_1367);
d6203 1
a6203 1
    stringBuffer.append(TEXT_1368);
d6205 1
a6205 1
    stringBuffer.append(TEXT_1369);
d6207 1
a6207 1
    stringBuffer.append(TEXT_1370);
d6209 1
a6209 1
    stringBuffer.append(TEXT_1371);
d6216 1
a6216 1
    stringBuffer.append(TEXT_1372);
d6220 1
a6220 1
    stringBuffer.append(TEXT_1373);
d6224 1
a6224 1
    stringBuffer.append(TEXT_1374);
d6226 1
a6226 1
    stringBuffer.append(TEXT_1375);
d6228 1
a6228 1
    stringBuffer.append(TEXT_1376);
d6230 1
a6230 1
    stringBuffer.append(TEXT_1377);
d6232 1
a6232 1
    stringBuffer.append(TEXT_1378);
d6234 1
a6234 1
    stringBuffer.append(TEXT_1379);
d6236 1
a6236 1
    stringBuffer.append(TEXT_1380);
d6243 1
a6243 1
    stringBuffer.append(TEXT_1381);
d6245 1
a6245 1
    stringBuffer.append(TEXT_1382);
d6247 1
a6247 1
    stringBuffer.append(TEXT_1383);
d6249 1
a6249 1
    stringBuffer.append(TEXT_1384);
d6251 1
a6251 1
    stringBuffer.append(TEXT_1385);
d6253 1
a6253 1
    stringBuffer.append(TEXT_1386);
d6255 1
a6255 1
    stringBuffer.append(TEXT_1387);
d6259 1
a6259 1
    stringBuffer.append(TEXT_1388);
d6261 1
a6261 1
    stringBuffer.append(TEXT_1389);
d6263 1
a6263 1
    stringBuffer.append(TEXT_1390);
d6265 1
a6265 1
    stringBuffer.append(TEXT_1391);
d6272 1
a6272 1
    stringBuffer.append(TEXT_1392);
d6274 1
a6274 1
    stringBuffer.append(TEXT_1393);
d6276 1
a6276 1
    stringBuffer.append(TEXT_1394);
d6278 1
a6278 1
    stringBuffer.append(TEXT_1395);
d6280 1
a6280 1
    stringBuffer.append(TEXT_1396);
d6282 1
a6282 1
    stringBuffer.append(TEXT_1397);
d6284 1
a6284 1
    stringBuffer.append(TEXT_1398);
d6288 1
a6288 1
    stringBuffer.append(TEXT_1399);
d6290 1
a6290 1
    stringBuffer.append(TEXT_1400);
d6292 1
a6292 1
    stringBuffer.append(TEXT_1401);
d6294 1
a6294 1
    stringBuffer.append(TEXT_1402);
d6299 1
a6299 1
    stringBuffer.append(TEXT_1403);
d6304 2
a6305 2
    stringBuffer.append(TEXT_1404);
    stringBuffer.append(TEXT_1405);
d6309 1
a6309 1
    stringBuffer.append(TEXT_1406);
d6311 1
a6311 1
    stringBuffer.append(TEXT_1407);
d6313 1
a6313 1
    stringBuffer.append(TEXT_1408);
d6340 1
a6340 1
    stringBuffer.append(TEXT_1409);
d6342 1
a6342 1
    stringBuffer.append(TEXT_1410);
d6344 1
a6344 1
    stringBuffer.append(TEXT_1411);
d6348 1
a6348 1
    stringBuffer.append(TEXT_1412);
d6350 1
a6350 1
    stringBuffer.append(TEXT_1413);
d6352 1
a6352 1
    stringBuffer.append(TEXT_1414);
d6354 1
a6354 1
    stringBuffer.append(TEXT_1415);
d6356 1
a6356 1
    stringBuffer.append(TEXT_1416);
d6358 1
a6358 1
    stringBuffer.append(TEXT_1417);
d6362 1
a6362 1
    stringBuffer.append(TEXT_1418);
d6364 1
a6364 1
    stringBuffer.append(TEXT_1419);
d6366 1
a6366 1
    stringBuffer.append(TEXT_1420);
d6368 1
a6368 1
    stringBuffer.append(TEXT_1421);
d6370 1
a6370 1
    stringBuffer.append(TEXT_1422);
d6372 1
a6372 1
    stringBuffer.append(TEXT_1423);
d6377 1
a6377 1
    stringBuffer.append(TEXT_1424);
d6379 1
a6379 1
    stringBuffer.append(TEXT_1425);
d6385 1
a6385 1
    stringBuffer.append(TEXT_1426);
d6387 1
a6387 1
    stringBuffer.append(TEXT_1427);
d6389 1
a6389 1
    stringBuffer.append(TEXT_1428);
d6391 1
a6391 1
    stringBuffer.append(TEXT_1429);
d6393 1
a6393 1
    stringBuffer.append(TEXT_1430);
d6395 1
a6395 1
    stringBuffer.append(TEXT_1431);
d6399 1
a6399 1
    stringBuffer.append(TEXT_1432);
d6401 1
a6401 1
    stringBuffer.append(TEXT_1433);
d6403 1
a6403 1
    stringBuffer.append(TEXT_1434);
d6405 1
a6405 1
    stringBuffer.append(TEXT_1435);
d6407 1
a6407 1
    stringBuffer.append(TEXT_1436);
d6409 1
a6409 1
    stringBuffer.append(TEXT_1437);
d6416 1
a6416 1
    stringBuffer.append(TEXT_1438);
d6418 1
a6418 1
    stringBuffer.append(TEXT_1439);
d6420 1
a6420 1
    stringBuffer.append(TEXT_1440);
d6422 1
a6422 1
    stringBuffer.append(TEXT_1441);
d6424 1
a6424 1
    stringBuffer.append(TEXT_1442);
d6426 1
a6426 1
    stringBuffer.append(TEXT_1443);
d6430 1
a6430 1
    stringBuffer.append(TEXT_1444);
d6432 1
a6432 1
    stringBuffer.append(TEXT_1445);
d6434 1
a6434 1
    stringBuffer.append(TEXT_1446);
d6436 1
a6436 1
    stringBuffer.append(TEXT_1447);
d6438 1
a6438 1
    stringBuffer.append(TEXT_1448);
d6440 1
a6440 1
    stringBuffer.append(TEXT_1449);
d6447 1
a6447 1
    stringBuffer.append(TEXT_1450);
d6449 1
a6449 1
    stringBuffer.append(TEXT_1451);
d6451 1
a6451 1
    stringBuffer.append(TEXT_1452);
d6453 1
a6453 1
    stringBuffer.append(TEXT_1453);
d6455 1
a6455 1
    stringBuffer.append(TEXT_1454);
d6457 1
a6457 1
    stringBuffer.append(TEXT_1455);
d6461 1
a6461 1
    stringBuffer.append(TEXT_1456);
d6463 1
a6463 1
    stringBuffer.append(TEXT_1457);
d6465 1
a6465 1
    stringBuffer.append(TEXT_1458);
d6467 1
a6467 1
    stringBuffer.append(TEXT_1459);
d6469 1
a6469 1
    stringBuffer.append(TEXT_1460);
d6471 1
a6471 1
    stringBuffer.append(TEXT_1461);
d6476 1
a6476 1
    stringBuffer.append(TEXT_1462);
d6482 1
a6482 1
    stringBuffer.append(TEXT_1463);
d6484 1
a6484 1
    stringBuffer.append(TEXT_1464);
d6486 1
a6486 1
    stringBuffer.append(TEXT_1465);
d6488 1
a6488 1
    stringBuffer.append(TEXT_1466);
d6490 1
a6490 1
    stringBuffer.append(TEXT_1467);
d6492 1
a6492 1
    stringBuffer.append(TEXT_1468);
d6496 1
a6496 1
    stringBuffer.append(TEXT_1469);
d6498 1
a6498 1
    stringBuffer.append(TEXT_1470);
d6500 1
a6500 1
    stringBuffer.append(TEXT_1471);
d6502 1
a6502 1
    stringBuffer.append(TEXT_1472);
d6504 1
a6504 1
    stringBuffer.append(TEXT_1473);
d6506 1
a6506 1
    stringBuffer.append(TEXT_1474);
d6513 1
a6513 1
    stringBuffer.append(TEXT_1475);
d6517 1
a6517 1
    stringBuffer.append(TEXT_1476);
d6521 1
a6521 1
    stringBuffer.append(TEXT_1477);
d6524 1
a6524 1
    stringBuffer.append(TEXT_1478);
d6526 1
a6526 1
    stringBuffer.append(TEXT_1479);
d6528 1
a6528 1
    stringBuffer.append(TEXT_1480);
d6530 1
a6530 1
    stringBuffer.append(TEXT_1481);
d6532 1
a6532 1
    stringBuffer.append(TEXT_1482);
d6535 1
a6535 1
    stringBuffer.append(TEXT_1483);
d6537 1
a6537 1
    stringBuffer.append(TEXT_1484);
d6539 1
a6539 1
    stringBuffer.append(TEXT_1485);
d6541 1
a6541 1
    stringBuffer.append(TEXT_1486);
d6543 1
a6543 1
    stringBuffer.append(TEXT_1487);
d6545 1
a6545 1
    stringBuffer.append(TEXT_1488);
d6547 1
a6547 1
    stringBuffer.append(TEXT_1489);
d6549 1
a6549 1
    stringBuffer.append(TEXT_1490);
d6555 1
a6555 1
    stringBuffer.append(TEXT_1491);
d6557 1
a6557 1
    stringBuffer.append(TEXT_1492);
d6559 1
a6559 1
    stringBuffer.append(TEXT_1493);
d6561 1
a6561 1
    stringBuffer.append(TEXT_1494);
d6563 1
a6563 1
    stringBuffer.append(TEXT_1495);
d6565 1
a6565 1
    stringBuffer.append(TEXT_1496);
d6567 1
a6567 1
    stringBuffer.append(TEXT_1497);
d6569 1
a6569 1
    stringBuffer.append(TEXT_1498);
d6571 1
a6571 1
    stringBuffer.append(TEXT_1499);
d6573 1
a6573 1
    stringBuffer.append(TEXT_1500);
d6575 1
a6575 1
    stringBuffer.append(TEXT_1501);
d6577 1
a6577 1
    stringBuffer.append(TEXT_1502);
d6579 1
a6579 1
    stringBuffer.append(TEXT_1503);
d6583 1
a6583 1
    stringBuffer.append(TEXT_1504);
d6587 1
a6587 1
    stringBuffer.append(TEXT_1505);
d6589 1
a6589 1
    stringBuffer.append(TEXT_1506);
d6591 1
a6591 1
    stringBuffer.append(TEXT_1507);
d6593 1
a6593 1
    stringBuffer.append(TEXT_1508);
d6597 1
a6597 1
    stringBuffer.append(TEXT_1509);
d6624 1
a6624 1
    stringBuffer.append(TEXT_1510);
d6626 1
a6626 1
    stringBuffer.append(TEXT_1511);
d6628 1
a6628 1
    stringBuffer.append(TEXT_1512);
d6630 1
a6630 1
    stringBuffer.append(TEXT_1513);
d6632 1
a6632 1
    stringBuffer.append(TEXT_1514);
d6634 1
a6634 1
    stringBuffer.append(TEXT_1515);
d6636 1
a6636 1
    stringBuffer.append(TEXT_1516);
d6641 1
a6641 1
    stringBuffer.append(TEXT_1517);
d6643 1
a6643 1
    stringBuffer.append(TEXT_1518);
d6645 1
a6645 1
    stringBuffer.append(TEXT_1519);
d6647 1
a6647 1
    stringBuffer.append(TEXT_1520);
d6657 1
a6657 1
    stringBuffer.append(TEXT_1521);
d6663 1
a6663 1
    stringBuffer.append(TEXT_1522);
d6665 1
a6665 1
    stringBuffer.append(TEXT_1523);
d6667 1
a6667 1
    stringBuffer.append(TEXT_1524);
d6671 1
a6671 1
    stringBuffer.append(TEXT_1525);
d6673 1
a6673 1
    stringBuffer.append(TEXT_1526);
d6675 1
a6675 1
    stringBuffer.append(TEXT_1527);
d6677 1
a6677 1
    stringBuffer.append(TEXT_1528);
d6679 1
a6679 1
    stringBuffer.append(TEXT_1529);
d6687 1
a6687 1
    stringBuffer.append(TEXT_1530);
d6689 1
a6689 1
    stringBuffer.append(TEXT_1531);
d6691 1
a6691 1
    stringBuffer.append(TEXT_1532);
d6693 1
a6693 1
    stringBuffer.append(TEXT_1533);
d6703 1
a6703 1
    stringBuffer.append(TEXT_1534);
d6709 1
a6709 1
    stringBuffer.append(TEXT_1535);
d6711 1
a6711 1
    stringBuffer.append(TEXT_1536);
d6713 1
a6713 1
    stringBuffer.append(TEXT_1537);
d6717 1
a6717 1
    stringBuffer.append(TEXT_1538);
d6719 1
a6719 1
    stringBuffer.append(TEXT_1539);
d6721 1
a6721 1
    stringBuffer.append(TEXT_1540);
d6723 1
a6723 1
    stringBuffer.append(TEXT_1541);
d6725 1
a6725 1
    stringBuffer.append(TEXT_1542);
d6740 1
a6740 1
    stringBuffer.append(TEXT_1543);
d6746 1
a6746 1
    stringBuffer.append(TEXT_1544);
d6748 1
a6748 1
    stringBuffer.append(TEXT_1545);
d6750 1
a6750 1
    stringBuffer.append(TEXT_1546);
d6754 1
a6754 1
    stringBuffer.append(TEXT_1547);
d6756 1
a6756 1
    stringBuffer.append(TEXT_1548);
d6758 1
a6758 1
    stringBuffer.append(TEXT_1549);
d6760 1
a6760 1
    stringBuffer.append(TEXT_1550);
d6762 1
a6762 1
    stringBuffer.append(TEXT_1551);
d6770 1
a6770 1
    stringBuffer.append(TEXT_1552);
d6772 1
a6772 1
    stringBuffer.append(TEXT_1553);
d6774 1
a6774 1
    stringBuffer.append(TEXT_1554);
d6776 1
a6776 1
    stringBuffer.append(TEXT_1555);
d6780 1
a6780 1
    stringBuffer.append(TEXT_1556);
d6792 1
a6792 1
    stringBuffer.append(TEXT_1557);
d6798 1
a6798 1
    stringBuffer.append(TEXT_1558);
d6800 1
a6800 1
    stringBuffer.append(TEXT_1559);
d6802 1
a6802 1
    stringBuffer.append(TEXT_1560);
d6806 1
a6806 1
    stringBuffer.append(TEXT_1561);
d6808 1
a6808 1
    stringBuffer.append(TEXT_1562);
d6810 1
a6810 1
    stringBuffer.append(TEXT_1563);
d6812 1
a6812 1
    stringBuffer.append(TEXT_1564);
d6814 1
a6814 1
    stringBuffer.append(TEXT_1565);
d6822 1
a6822 1
    stringBuffer.append(TEXT_1566);
d6824 1
a6824 1
    stringBuffer.append(TEXT_1567);
d6826 1
a6826 1
    stringBuffer.append(TEXT_1568);
d6828 1
a6828 1
    stringBuffer.append(TEXT_1569);
d6832 2
a6833 2
    stringBuffer.append(TEXT_1570);
    stringBuffer.append(TEXT_1571);
d6837 1
a6837 1
    stringBuffer.append(TEXT_1572);
d6839 1
a6839 1
    stringBuffer.append(TEXT_1573);
d6841 1
a6841 1
    stringBuffer.append(TEXT_1574);
d6843 1
a6843 1
    stringBuffer.append(TEXT_1575);
d6847 1
a6847 1
    stringBuffer.append(TEXT_1576);
d6853 1
a6853 1
    stringBuffer.append(TEXT_1577);
d6857 1
a6857 1
    stringBuffer.append(TEXT_1578);
d6859 1
a6859 1
    stringBuffer.append(TEXT_1579);
d6861 1
a6861 1
    stringBuffer.append(TEXT_1580);
d6863 1
a6863 1
    stringBuffer.append(TEXT_1581);
d6870 1
a6870 1
    stringBuffer.append(TEXT_1582);
d6879 1
a6879 1
    stringBuffer.append(TEXT_1583);
d6881 1
a6881 1
    stringBuffer.append(TEXT_1584);
d6885 1
a6885 1
    stringBuffer.append(TEXT_1585);
d6892 1
a6892 1
    stringBuffer.append(TEXT_1586);
d6894 1
a6894 1
    stringBuffer.append(TEXT_1587);
d6896 3
a6898 3
    stringBuffer.append(TEXT_1588);
    stringBuffer.append(TEXT_1589);
    stringBuffer.append(TEXT_1590);
d6900 1
a6900 1
    stringBuffer.append(TEXT_1591);
d6902 1
a6902 1
    stringBuffer.append(TEXT_1592);
d6904 1
a6904 1
    stringBuffer.append(TEXT_1593);
d6906 1
a6906 1
    stringBuffer.append(TEXT_1594);
d6908 1
a6908 1
    stringBuffer.append(TEXT_1595);
d6910 1
a6910 1
    stringBuffer.append(TEXT_1596);
d6912 1
a6912 1
    stringBuffer.append(TEXT_1597);
d6914 1
a6914 1
    stringBuffer.append(TEXT_1598);
d6916 1
a6916 1
    stringBuffer.append(TEXT_1599);
d6918 1
a6918 1
    stringBuffer.append(TEXT_1600);
d6920 1
a6920 1
    stringBuffer.append(TEXT_1601);
d6928 1
a6928 1
    stringBuffer.append(TEXT_1602);
d6930 1
a6930 1
    stringBuffer.append(TEXT_1603);
d6932 1
a6932 1
    stringBuffer.append(TEXT_1604);
d6936 1
a6936 1
    stringBuffer.append(TEXT_1605);
d6938 1
a6938 1
    stringBuffer.append(TEXT_1606);
d6940 1
a6940 1
    stringBuffer.append(TEXT_1607);
d6942 1
a6942 1
    stringBuffer.append(TEXT_1608);
d6946 1
a6946 1
    stringBuffer.append(TEXT_1609);
d6948 1
a6948 1
    stringBuffer.append(TEXT_1610);
d6950 1
a6950 1
    stringBuffer.append(TEXT_1611);
d6952 1
a6952 1
    stringBuffer.append(TEXT_1612);
d6954 1
a6954 1
    stringBuffer.append(TEXT_1613);
d6961 1
a6961 1
    stringBuffer.append(TEXT_1614);
d6963 1
a6963 1
    stringBuffer.append(TEXT_1615);
d6965 1
a6965 1
    stringBuffer.append(TEXT_1616);
d6967 1
a6967 1
    stringBuffer.append(TEXT_1617);
d6971 1
a6971 1
    stringBuffer.append(TEXT_1618);
d6973 1
a6973 1
    stringBuffer.append(TEXT_1619);
d6975 1
a6975 1
    stringBuffer.append(TEXT_1620);
d6977 1
a6977 1
    stringBuffer.append(TEXT_1621);
d6979 1
a6979 1
    stringBuffer.append(TEXT_1622);
d6983 1
a6983 1
    stringBuffer.append(TEXT_1623);
d6988 1
a6988 1
    stringBuffer.append(TEXT_1624);
d6990 1
a6990 1
    stringBuffer.append(TEXT_1625);
d6992 1
a6992 1
    stringBuffer.append(TEXT_1626);
d6994 1
a6994 1
    stringBuffer.append(TEXT_1627);
d6998 1
a6998 1
    stringBuffer.append(TEXT_1628);
d7000 1
a7000 1
    stringBuffer.append(TEXT_1629);
d7002 1
a7002 1
    stringBuffer.append(TEXT_1630);
d7004 1
a7004 1
    stringBuffer.append(TEXT_1631);
d7006 1
a7006 1
    stringBuffer.append(TEXT_1632);
d7011 1
a7011 1
    stringBuffer.append(TEXT_1633);
a7021 7
    stringBuffer.append(TEXT_1634);
    stringBuffer.append(TEXT_1635);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_1636);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
    stringBuffer.append(TEXT_1637);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d7024 1
d7026 1
a7026 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d7030 6
d7037 1
a7037 1
    stringBuffer.append(TEXT_1643);
d7039 1
a7039 1
    stringBuffer.append(TEXT_1644);
d7041 1
a7041 1
    stringBuffer.append(TEXT_1645);
d7043 1
a7043 1
    stringBuffer.append(TEXT_1646);
d7045 1
a7045 1
    stringBuffer.append(TEXT_1647);
d7047 1
a7047 1
    stringBuffer.append(TEXT_1648);
d7049 1
a7049 1
    stringBuffer.append(TEXT_1649);
d7051 1
a7051 1
    stringBuffer.append(TEXT_1650);
d7053 1
a7053 1
    stringBuffer.append(TEXT_1651);
d7059 1
a7059 1
    stringBuffer.append(TEXT_1652);
d7061 1
a7061 1
    stringBuffer.append(TEXT_1653);
d7063 1
a7063 1
    stringBuffer.append(TEXT_1654);
d7065 1
a7065 1
    stringBuffer.append(TEXT_1655);
d7067 1
a7067 1
    stringBuffer.append(TEXT_1656);
d7069 1
a7069 1
    stringBuffer.append(TEXT_1657);
d7071 1
a7071 1
    stringBuffer.append(TEXT_1658);
d7073 1
a7073 1
    stringBuffer.append(TEXT_1659);
d7075 1
a7075 1
    stringBuffer.append(TEXT_1660);
d7077 1
a7077 1
    stringBuffer.append(TEXT_1661);
d7079 1
a7079 1
    stringBuffer.append(TEXT_1662);
d7086 1
a7086 1
    stringBuffer.append(TEXT_1663);
d7089 1
a7089 1
    stringBuffer.append(TEXT_1664);
d7091 1
a7091 1
    stringBuffer.append(TEXT_1665);
d7093 1
a7093 1
    stringBuffer.append(TEXT_1666);
d7095 1
a7095 1
    stringBuffer.append(TEXT_1667);
d7097 1
a7097 1
    stringBuffer.append(TEXT_1668);
d7099 1
a7099 1
    stringBuffer.append(TEXT_1669);
d7101 1
a7101 1
    stringBuffer.append(TEXT_1670);
d7103 1
a7103 1
    stringBuffer.append(TEXT_1671);
d7107 1
a7107 1
    stringBuffer.append(TEXT_1672);
d7110 1
a7110 1
    stringBuffer.append(TEXT_1673);
d7112 1
a7112 1
    stringBuffer.append(TEXT_1674);
d7114 1
a7114 1
    stringBuffer.append(TEXT_1675);
d7116 1
a7116 1
    stringBuffer.append(TEXT_1676);
d7118 1
a7118 1
    stringBuffer.append(TEXT_1677);
d7120 1
a7120 1
    stringBuffer.append(TEXT_1678);
d7124 1
a7124 1
    stringBuffer.append(TEXT_1679);
d7126 1
a7126 1
    stringBuffer.append(TEXT_1680);
d7133 1
a7133 1
    stringBuffer.append(TEXT_1681);
d7137 1
a7137 1
    stringBuffer.append(TEXT_1682);
d7141 1
a7141 1
    stringBuffer.append(TEXT_1683);
d7145 2
a7146 2
    stringBuffer.append(TEXT_1684);
    stringBuffer.append(TEXT_1685);
d7148 1
a7148 1
    stringBuffer.append(TEXT_1686);
d7150 1
a7150 1
    stringBuffer.append(TEXT_1687);
d7152 1
a7152 1
    stringBuffer.append(TEXT_1688);
d7154 1
a7154 1
    stringBuffer.append(TEXT_1689);
d7156 1
a7156 1
    stringBuffer.append(TEXT_1690);
d7158 1
a7158 1
    stringBuffer.append(TEXT_1691);
d7160 1
a7160 1
    stringBuffer.append(TEXT_1692);
d7162 1
a7162 1
    stringBuffer.append(TEXT_1693);
d7164 1
a7164 1
    stringBuffer.append(TEXT_1694);
d7166 1
a7166 1
    stringBuffer.append(TEXT_1695);
d7168 1
a7168 1
    stringBuffer.append(TEXT_1696);
d7172 3
a7174 3
    stringBuffer.append(TEXT_1697);
    stringBuffer.append(TEXT_1698);
    stringBuffer.append(TEXT_1699);
d7176 1
a7176 1
    stringBuffer.append(TEXT_1700);
d7178 1
a7178 1
    stringBuffer.append(TEXT_1701);
d7182 1
a7182 1
    stringBuffer.append(TEXT_1702);
d7184 1
a7184 1
    stringBuffer.append(TEXT_1703);
d7186 1
a7186 1
    stringBuffer.append(TEXT_1704);
d7188 1
a7188 1
    stringBuffer.append(TEXT_1705);
d7190 1
a7190 1
    stringBuffer.append(TEXT_1706);
d7192 1
a7192 1
    stringBuffer.append(TEXT_1707);
d7194 1
a7194 1
    stringBuffer.append(TEXT_1708);
d7196 1
a7196 1
    stringBuffer.append(TEXT_1709);
d7198 1
a7198 1
    stringBuffer.append(TEXT_1710);
d7200 1
a7200 1
    stringBuffer.append(TEXT_1711);
d7204 1
a7204 1
    stringBuffer.append(TEXT_1712);
d7213 1
a7213 1
    stringBuffer.append(TEXT_1713);
d7215 1
a7215 1
    stringBuffer.append(TEXT_1714);
d7217 1
a7217 1
    stringBuffer.append(TEXT_1715);
d7228 1
a7228 1
    stringBuffer.append(TEXT_1716);
d7230 1
a7230 1
    stringBuffer.append(TEXT_1717);
d7232 1
a7232 1
    stringBuffer.append(TEXT_1718);
d7240 1
a7240 1
    stringBuffer.append(TEXT_1719);
d7242 1
a7242 1
    stringBuffer.append(TEXT_1720);
d7244 1
a7244 1
    stringBuffer.append(TEXT_1721);
d7246 1
a7246 1
    stringBuffer.append(TEXT_1722);
d7248 1
a7248 1
    stringBuffer.append(TEXT_1723);
d7250 1
a7250 1
    stringBuffer.append(TEXT_1724);
d7252 1
a7252 1
    stringBuffer.append(TEXT_1725);
d7254 1
a7254 1
    stringBuffer.append(TEXT_1726);
d7259 1
a7259 1
    stringBuffer.append(TEXT_1727);
d7261 1
a7261 1
    stringBuffer.append(TEXT_1728);
d7269 1
a7269 1
    stringBuffer.append(TEXT_1729);
d7271 1
a7271 1
    stringBuffer.append(TEXT_1730);
d7275 1
a7275 1
    stringBuffer.append(TEXT_1731);
d7277 1
a7277 1
    stringBuffer.append(TEXT_1732);
@


1.30
log
@Fix compilation problems introduced by recent fix of https://bugs.eclipse.org/bugs/show_bug.cgi?id=161380
@
text
@d1874 1
a1874 1
	private final List myAllInnerLabels = new LinkedList();
d1893 1
a1896 1
				myAllInnerLabels.add(next);
d2014 2
a2015 2
	public Iterator getAllInnerLabels() {
		return myAllInnerLabels.iterator();
d3402 1
a3402 1
		for (Iterator it = myHelper.getAllInnerLabels(); it.hasNext(); ) {
@


1.29
log
@#161380 simplify feature model facets
@
text
@d1673 81
a1753 106
  protected final String TEXT_1652 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1653 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1654 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1655 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1656 = " createDomainModelCommand(";
  protected final String TEXT_1657 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1658 = " element = ";
  protected final String TEXT_1659 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1660 = " feature = (";
  protected final String TEXT_1661 = ") ";
  protected final String TEXT_1662 = ".eINSTANCE.get";
  protected final String TEXT_1663 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1664 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1665 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1666 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1667 = " result = new ";
  protected final String TEXT_1668 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1669 = " values = new ";
  protected final String TEXT_1670 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1671 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1672 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1673 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_1674 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_1675 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_1676 = NL + "\t\t\t\t\t}";
  protected final String TEXT_1677 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1678 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1679 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1680 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1681 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1682 = " createDomainModelCommand(";
  protected final String TEXT_1683 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1684 = " element = ";
  protected final String TEXT_1685 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1686 = " result = new ";
  protected final String TEXT_1687 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1688 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1689 = " ";
  protected final String TEXT_1690 = "feature = (";
  protected final String TEXT_1691 = ") ";
  protected final String TEXT_1692 = ".eINSTANCE.get";
  protected final String TEXT_1693 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1694 = ".parseValue(feature, values[";
  protected final String TEXT_1695 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1696 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1697 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1698 = " ";
  protected final String TEXT_1699 = "values = new ";
  protected final String TEXT_1700 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1701 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1702 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1703 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1704 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1705 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1706 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1707 = NL + "\t\t\t\t});";
  protected final String TEXT_1708 = NL + "\t\t}" + NL;
  protected final String TEXT_1709 = NL;
  protected final String TEXT_1710 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1711 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1712 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1713 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1714 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1715 = "(this, ";
  protected final String TEXT_1716 = ".class, new ";
  protected final String TEXT_1717 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1718 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1719 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1720 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1721 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1722 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1723 = NL;
  protected final String TEXT_1724 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1725 = " domainModelRefresher = new ";
  protected final String TEXT_1726 = "(this);" + NL;
  protected final String TEXT_1727 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1728 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1729 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1730 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1731 = " nextChild = (";
  protected final String TEXT_1732 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1733 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1734 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1735 = ") ";
  protected final String TEXT_1736 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1737 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1738 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1739 = ".eINSTANCE.get";
  protected final String TEXT_1740 = "(), labelRefresher);";
  protected final String TEXT_1741 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1742 = ".eINSTANCE.get";
  protected final String TEXT_1743 = "(), labelRefresher);";
  protected final String TEXT_1744 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1745 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1746 = " result = new ";
  protected final String TEXT_1747 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1748 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1749 = " next = (";
  protected final String TEXT_1750 = ") it.next();" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1751 = ".getVisualID(next)) {";
  protected final String TEXT_1752 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1753 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1754 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1755 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1756 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1757 = NL;
d7040 2
a7041 2
	GenFeature featureToSet = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();
	EStructuralFeature ecoreFeature = featureToSet.getEcoreFeature();
d7044 2
d7047 1
a7047 1
    stringBuffer.append(TEXT_1653);
d7049 1
a7049 1
    stringBuffer.append(TEXT_1654);
d7051 1
a7051 1
    stringBuffer.append(TEXT_1655);
d7053 1
a7053 1
    stringBuffer.append(TEXT_1656);
d7055 1
a7055 1
    stringBuffer.append(TEXT_1657);
d7057 1
a7057 1
    stringBuffer.append(TEXT_1658);
a7058 2
    stringBuffer.append(TEXT_1659);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d7060 1
a7060 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d7062 1
a7062 1
    stringBuffer.append(importManager.getImportedName(featureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
a7063 60
    stringBuffer.append(featureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_1663);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_1664);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1665);
    
	if (ecoreFeature.isMany()) {

    stringBuffer.append(TEXT_1666);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1667);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1668);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_1669);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_1670);
    stringBuffer.append(featureToSet.getAccessorName());
    stringBuffer.append(TEXT_1671);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_1672);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_1673);
    
	} else {

    stringBuffer.append(TEXT_1674);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1675);
    
	}

    stringBuffer.append(TEXT_1676);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = compositeFeatureLabelModelFacet.getMetaFeatures();

    stringBuffer.append(TEXT_1677);
    stringBuffer.append(metaFeatures.size());
    stringBuffer.append(TEXT_1678);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_1679);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1680);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_1681);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1682);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1683);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_1684);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_1685);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1686);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1687);
d7070 1
a7070 1
    stringBuffer.append(TEXT_1688);
d7073 1
a7073 1
    stringBuffer.append(TEXT_1689);
d7075 1
a7075 1
    stringBuffer.append(TEXT_1690);
d7077 1
a7077 1
    stringBuffer.append(TEXT_1691);
d7079 1
a7079 1
    stringBuffer.append(TEXT_1692);
d7081 1
a7081 1
    stringBuffer.append(TEXT_1693);
d7083 1
a7083 1
    stringBuffer.append(TEXT_1694);
d7085 1
a7085 1
    stringBuffer.append(TEXT_1695);
d7087 1
a7087 1
    stringBuffer.append(TEXT_1696);
d7091 1
a7091 1
    stringBuffer.append(TEXT_1697);
d7094 1
a7094 1
    stringBuffer.append(TEXT_1698);
d7096 1
a7096 1
    stringBuffer.append(TEXT_1699);
d7098 1
a7098 1
    stringBuffer.append(TEXT_1700);
d7100 1
a7100 1
    stringBuffer.append(TEXT_1701);
d7102 1
a7102 1
    stringBuffer.append(TEXT_1702);
d7104 1
a7104 1
    stringBuffer.append(TEXT_1703);
d7108 1
a7108 1
    stringBuffer.append(TEXT_1704);
d7110 1
a7110 1
    stringBuffer.append(TEXT_1705);
d7117 1
a7117 1
    stringBuffer.append(TEXT_1706);
d7121 1
a7121 1
    stringBuffer.append(TEXT_1707);
d7125 1
a7125 1
    stringBuffer.append(TEXT_1708);
d7129 2
a7130 2
    stringBuffer.append(TEXT_1709);
    stringBuffer.append(TEXT_1710);
d7132 1
a7132 1
    stringBuffer.append(TEXT_1711);
d7134 1
a7134 1
    stringBuffer.append(TEXT_1712);
d7136 1
a7136 1
    stringBuffer.append(TEXT_1713);
d7138 1
a7138 1
    stringBuffer.append(TEXT_1714);
d7140 1
a7140 1
    stringBuffer.append(TEXT_1715);
d7142 1
a7142 1
    stringBuffer.append(TEXT_1716);
d7144 1
a7144 1
    stringBuffer.append(TEXT_1717);
d7146 1
a7146 1
    stringBuffer.append(TEXT_1718);
d7148 1
a7148 1
    stringBuffer.append(TEXT_1719);
d7150 1
a7150 1
    stringBuffer.append(TEXT_1720);
d7152 1
a7152 1
    stringBuffer.append(TEXT_1721);
d7156 3
a7158 3
    stringBuffer.append(TEXT_1722);
    stringBuffer.append(TEXT_1723);
    stringBuffer.append(TEXT_1724);
d7160 1
a7160 1
    stringBuffer.append(TEXT_1725);
d7162 1
a7162 1
    stringBuffer.append(TEXT_1726);
d7166 1
a7166 1
    stringBuffer.append(TEXT_1727);
d7168 1
a7168 1
    stringBuffer.append(TEXT_1728);
d7170 1
a7170 1
    stringBuffer.append(TEXT_1729);
d7172 1
a7172 1
    stringBuffer.append(TEXT_1730);
d7174 1
a7174 1
    stringBuffer.append(TEXT_1731);
d7176 1
a7176 1
    stringBuffer.append(TEXT_1732);
d7178 1
a7178 1
    stringBuffer.append(TEXT_1733);
d7180 1
a7180 1
    stringBuffer.append(TEXT_1734);
d7182 1
a7182 1
    stringBuffer.append(TEXT_1735);
d7184 1
a7184 1
    stringBuffer.append(TEXT_1736);
d7188 1
a7188 1
    stringBuffer.append(TEXT_1737);
d7193 2
a7194 2
		FeatureLabelModelFacet compositeFeatureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
		for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
d7197 1
a7197 1
    stringBuffer.append(TEXT_1738);
d7199 1
a7199 1
    stringBuffer.append(TEXT_1739);
d7201 1
a7201 1
    stringBuffer.append(TEXT_1740);
d7212 1
a7212 1
    stringBuffer.append(TEXT_1741);
d7214 1
a7214 1
    stringBuffer.append(TEXT_1742);
d7216 1
a7216 1
    stringBuffer.append(TEXT_1743);
d7224 1
a7224 1
    stringBuffer.append(TEXT_1744);
d7226 1
a7226 1
    stringBuffer.append(TEXT_1745);
d7228 1
a7228 1
    stringBuffer.append(TEXT_1746);
d7230 1
a7230 1
    stringBuffer.append(TEXT_1747);
d7232 1
a7232 1
    stringBuffer.append(TEXT_1748);
d7234 1
a7234 1
    stringBuffer.append(TEXT_1749);
d7236 1
a7236 1
    stringBuffer.append(TEXT_1750);
d7238 1
a7238 1
    stringBuffer.append(TEXT_1751);
d7243 1
a7243 1
    stringBuffer.append(TEXT_1752);
d7245 1
a7245 1
    stringBuffer.append(TEXT_1753);
d7253 1
a7253 1
    stringBuffer.append(TEXT_1754);
d7255 1
a7255 1
    stringBuffer.append(TEXT_1755);
d7259 1
a7259 1
    stringBuffer.append(TEXT_1756);
d7261 1
a7261 1
    stringBuffer.append(TEXT_1757);
@


1.28
log
@#161380 simplify feature model facets
@
text
@d1765 14
a1778 17
  protected final String TEXT_1744 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1745 = ".eINSTANCE.get";
  protected final String TEXT_1746 = "(), labelRefresher);";
  protected final String TEXT_1747 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1748 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1749 = " result = new ";
  protected final String TEXT_1750 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1751 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1752 = " next = (";
  protected final String TEXT_1753 = ") it.next();" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1754 = ".getVisualID(next)) {";
  protected final String TEXT_1755 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1756 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1757 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1758 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1759 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1760 = NL;
d3121 2
a3122 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d5057 2
a5058 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d5279 2
a5280 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d5491 2
a5492 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d5936 2
a5937 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d6035 2
a6036 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d6165 1
a6165 1
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d6167 1
a6167 1
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d6277 2
a6278 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d6590 1
a6590 1
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d6791 2
a6792 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d7278 1
a7278 10
		GenFeature feature = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();

    stringBuffer.append(TEXT_1738);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_1739);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1740);
    
	} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
		CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
d7282 1
a7282 1
    stringBuffer.append(TEXT_1741);
d7284 1
a7284 1
    stringBuffer.append(TEXT_1742);
d7286 1
a7286 1
    stringBuffer.append(TEXT_1743);
d7297 1
a7297 1
    stringBuffer.append(TEXT_1744);
d7299 1
a7299 1
    stringBuffer.append(TEXT_1745);
d7301 1
a7301 1
    stringBuffer.append(TEXT_1746);
d7309 1
a7309 1
    stringBuffer.append(TEXT_1747);
d7311 1
a7311 1
    stringBuffer.append(TEXT_1748);
d7313 1
a7313 1
    stringBuffer.append(TEXT_1749);
d7315 1
a7315 1
    stringBuffer.append(TEXT_1750);
d7317 1
a7317 1
    stringBuffer.append(TEXT_1751);
d7319 1
a7319 1
    stringBuffer.append(TEXT_1752);
d7321 1
a7321 1
    stringBuffer.append(TEXT_1753);
d7323 1
a7323 1
    stringBuffer.append(TEXT_1754);
d7328 1
a7328 1
    stringBuffer.append(TEXT_1755);
d7330 1
a7330 1
    stringBuffer.append(TEXT_1756);
d7338 1
a7338 1
    stringBuffer.append(TEXT_1757);
d7340 1
a7340 1
    stringBuffer.append(TEXT_1758);
d7344 1
a7344 1
    stringBuffer.append(TEXT_1759);
d7346 1
a7346 1
    stringBuffer.append(TEXT_1760);
@


1.27
log
@#161380 move readOnly back to GenLabel
@
text
@d1962 2
a1963 2
			} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
				GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d2925 2
a2926 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d3004 2
a3005 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d3065 2
a3066 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d4202 1
a4202 1
			GenFeature _feature = ((FeatureModelFacet) nextLink.getModelFacet()).getMetaFeature();
d4368 1
a4368 1
	GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d5726 2
a5727 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d6490 2
a6491 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
@


1.26
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d1918 1
a1918 2
			boolean labelReadOnly = next.getModelFacet() != null && next.getModelFacet().isReadOnly();
			if (myPrimaryLabel == null && !labelReadOnly){
d3432 1
a3432 2
			boolean labelReadOnly = genLabel.getModelFacet() != null && genLabel.getModelFacet().isReadOnly();
			if (labelReadOnly) {
@


1.25
log
@[160225] bblajer - Respect EStructuralFeature cardinality in commands that create/move/clone elements
@
text
@d1918 2
a1919 1
			if (myPrimaryLabel == null && !next.isReadOnly()){
d3433 2
a3434 1
			if (genLabel.isReadOnly()) {
@


1.24
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d157 889
a1045 889
  protected final String TEXT_136 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_137 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_138 = ".getElement(), ";
  protected final String TEXT_139 = ".eINSTANCE.get";
  protected final String TEXT_140 = "(), element));";
  protected final String TEXT_141 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_142 = ".create(" + NL + "\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_143 = ".getElement(), ";
  protected final String TEXT_144 = ".eINSTANCE.get";
  protected final String TEXT_145 = "(), element));";
  protected final String TEXT_146 = NL + "\t\t\t\t\tresult.append(";
  protected final String TEXT_147 = ".create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));" + NL + "\t\t\t\t\tif (newVisualID == visualID) {" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_148 = ".create(editingDomain, ";
  protected final String TEXT_149 = ", ";
  protected final String TEXT_150 = ".eINSTANCE.getView_PersistedChildren(), childNode));" + NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_151 = "(childNode, ";
  protected final String TEXT_152 = "null";
  protected final String TEXT_153 = "(";
  protected final String TEXT_154 = ") constraint";
  protected final String TEXT_155 = "));" + NL + "\t\t\t\t\t} else {";
  protected final String TEXT_156 = NL + "\t\t\t\t\t\tresult.append(new ";
  protected final String TEXT_157 = "(";
  protected final String TEXT_158 = ", element, ";
  protected final String TEXT_159 = "null";
  protected final String TEXT_160 = "((";
  protected final String TEXT_161 = ") constraint).getCopy().union(new ";
  protected final String TEXT_162 = "(";
  protected final String TEXT_163 = ", ";
  protected final String TEXT_164 = "))";
  protected final String TEXT_165 = ", ";
  protected final String TEXT_166 = ".INSTANCE));";
  protected final String TEXT_167 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcommand = result;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_168 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_169 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_170 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_171 = NL;
  protected final String TEXT_172 = NL + "protected ";
  protected final String TEXT_173 = " getCloneCommand(";
  protected final String TEXT_174 = " request) {" + NL + "\t";
  protected final String TEXT_175 = " editParts = request.getEditParts();" + NL + "\t";
  protected final String TEXT_176 = " command = new ";
  protected final String TEXT_177 = "();" + NL + "\tcommand.setDebugLabel(\"Clone in ConstrainedLayoutEditPolicy\");//$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_178 = " childPart;" + NL + "\t";
  protected final String TEXT_179 = " r;" + NL + "\tObject constraint;" + NL + "" + NL + "\tfor (int i = 0; i < editParts.size(); i++) {" + NL + "\t\tchildPart = (";
  protected final String TEXT_180 = ")editParts.get(i);" + NL + "\t\tr = childPart.getFigure().getBounds().getCopy();" + NL + "\t\t//convert r to absolute from childpart figure" + NL + "\t\tchildPart.getFigure().translateToAbsolute(r);" + NL + "\t\tr = request.getTransformedRectangle(r);" + NL + "\t\t//convert this figure to relative " + NL + "\t\tgetLayoutContainer().translateToRelative(r);" + NL + "\t\tgetLayoutContainer().translateFromParent(r);" + NL + "\t\tr.translate(getLayoutOrigin().getNegated());" + NL + "\t\tconstraint = getConstraintFor(r);" + NL + "\t\tcommand.add(createCloneCommand(childPart," + NL + "\t\t\ttranslateToModelConstraint(constraint)));" + NL + "\t}" + NL + "\treturn command.unwrap();" + NL + "}" + NL + "protected ";
  protected final String TEXT_181 = " createCloneCommand(final ";
  protected final String TEXT_182 = " child, final Object constraint) {" + NL + "\tif (child.getModel() instanceof ";
  protected final String TEXT_183 = ") {" + NL + "\t\tfinal ";
  protected final String TEXT_184 = " childNode = (";
  protected final String TEXT_185 = ") child.getModel();" + NL + "\t\tfinal ";
  protected final String TEXT_186 = " editingDomain = ";
  protected final String TEXT_187 = ".getEditingDomain(childNode.getDiagram().getElement());" + NL + "\t\tString modelID = ";
  protected final String TEXT_188 = ".getModelID(childNode);" + NL + "\t\tif (";
  protected final String TEXT_189 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\tfinal int newVisualID = ";
  protected final String TEXT_190 = ".INSTANCE.getNodeVisualID(";
  protected final String TEXT_191 = ", childNode.getElement());" + NL + "\t\t\t";
  protected final String TEXT_192 = " command = null;" + NL + "\t\t\tswitch (newVisualID) {";
  protected final String TEXT_193 = NL + "\t\t\tcase ";
  protected final String TEXT_194 = ".VISUAL_ID:" + NL + "\t\t\t\tcommand = new ";
  protected final String TEXT_195 = "() {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_196 = " afterCopyCommand;" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_197 = " createCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_198 = " element = childNode.getElement();" + NL + "\t\t\t\t\t\t//We are being optimistic here about whether further commands can be executed." + NL + "\t\t\t\t\t\t//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  " + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_199 = ".create(editingDomain, element);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tsuper.execute();" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_200 = " results = super.getResult();" + NL + "\t\t\t\t\t\tassert results.size() == 1;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_201 = " result = (";
  protected final String TEXT_202 = ") results.iterator().next();" + NL + "\t\t\t\t\t\tafterCopyCommand = new ";
  protected final String TEXT_203 = "();";
  protected final String TEXT_204 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_205 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_206 = ".getElement(), ";
  protected final String TEXT_207 = ".eINSTANCE.get";
  protected final String TEXT_208 = "(), result));";
  protected final String TEXT_209 = NL + "\t\t\t\t\t\tafterCopyCommand.append(";
  protected final String TEXT_210 = ".create(" + NL + "\t\t\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_211 = ".getElement(), ";
  protected final String TEXT_212 = ".eINSTANCE.get";
  protected final String TEXT_213 = "(), result));";
  protected final String TEXT_214 = NL + "\t\t\t\t\t\tafterCopyCommand.append(new ";
  protected final String TEXT_215 = "(";
  protected final String TEXT_216 = ", result, ";
  protected final String TEXT_217 = "null";
  protected final String TEXT_218 = "((";
  protected final String TEXT_219 = ") constraint).getCopy().union(new ";
  protected final String TEXT_220 = "(";
  protected final String TEXT_221 = ", ";
  protected final String TEXT_222 = "))";
  protected final String TEXT_223 = ", ";
  protected final String TEXT_224 = ".INSTANCE));" + NL + "\t\t\t\t\t\tif (afterCopyCommand.canExecute()) {" + NL + "\t\t\t\t\t\t\tafterCopyCommand.execute();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tassert false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tafterCopyCommand.undo();" + NL + "\t\t\t\t\t\tsuper.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\tsuper.redo();" + NL + "\t\t\t\t\t\tafterCopyCommand.redo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_225 = NL + "\t\t\t}" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_226 = "(editingDomain, command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn ";
  protected final String TEXT_227 = ".INSTANCE;" + NL + "}";
  protected final String TEXT_228 = NL + "\t\t\tprotected ";
  protected final String TEXT_229 = " getCreateCommand(";
  protected final String TEXT_230 = " request) {";
  protected final String TEXT_231 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_232 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_233 = " requestEx = (";
  protected final String TEXT_234 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_235 = " result = new ";
  protected final String TEXT_236 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_237 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_238 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_239 = "Command((View) getModel(), requestEx";
  protected final String TEXT_240 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_241 = ")getConstraintFor(request)";
  protected final String TEXT_242 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_243 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_244 = "(";
  protected final String TEXT_245 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_246 = NL + "\t\t\t\treturn ";
  protected final String TEXT_247 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_248 = NL + "\t\t\tprotected ";
  protected final String TEXT_249 = " createChangeConstraintCommand(final ";
  protected final String TEXT_250 = " request, final ";
  protected final String TEXT_251 = " child, Object constraint) {" + NL + "\t\t\t\tif (!isDirectChild(child)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_252 = ".INSTANCE;" + NL + "\t\t\t\t}";
  protected final String TEXT_253 = NL;
  protected final String TEXT_254 = "\t\t\t\tfinal ";
  protected final String TEXT_255 = " node = (";
  protected final String TEXT_256 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_257 = " emfCommand = new ";
  protected final String TEXT_258 = "(node, request, ((";
  protected final String TEXT_259 = ")child).getFigure());" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_260 = "(";
  protected final String TEXT_261 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_262 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_263 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_264 = NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_265 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_266 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_267 = " createChangeConstraintCommand(";
  protected final String TEXT_268 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_269 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_270 = NL + "\t\t\tprotected ";
  protected final String TEXT_271 = " createChildEditPolicy(";
  protected final String TEXT_272 = " child) {";
  protected final String TEXT_273 = NL + "\t\t\t\tif (isDirectChild(child)) {" + NL + "\t\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t\t}";
  protected final String TEXT_274 = NL + "\t\t\t\treturn new ";
  protected final String TEXT_275 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_276 = " getTargetEditPart(";
  protected final String TEXT_277 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_278 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_279 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_280 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_281 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_282 = " getReconnectTargetCommand(";
  protected final String TEXT_283 = " request) {";
  protected final String TEXT_284 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_285 = ".INSTANCE;";
  protected final String TEXT_286 = NL + "\t\t\t\t";
  protected final String TEXT_287 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_288 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_289 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_290 = " edge = (";
  protected final String TEXT_291 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_292 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_293 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_294 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_295 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_296 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_297 = NL + "\t\t\t\tcase ";
  protected final String TEXT_298 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_299 = "TargetCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_300 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_301 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_302 = "(";
  protected final String TEXT_303 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_304 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_305 = " getReconnectSourceCommand(";
  protected final String TEXT_306 = " request) {";
  protected final String TEXT_307 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_308 = ".INSTANCE;";
  protected final String TEXT_309 = NL + "\t\t\t\t";
  protected final String TEXT_310 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_311 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_312 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_313 = " edge = (";
  protected final String TEXT_314 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_315 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_316 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_317 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_318 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_319 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_320 = NL + "\t\t\t\tcase ";
  protected final String TEXT_321 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_322 = "SourceCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_323 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_324 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_325 = "(";
  protected final String TEXT_326 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_327 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_328 = " getConnectionCreateCommand(";
  protected final String TEXT_329 = " request) {";
  protected final String TEXT_330 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_331 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_332 = " requestEx = (";
  protected final String TEXT_333 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_334 = " result = new ";
  protected final String TEXT_335 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_336 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_337 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_338 = "StartCommand(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_339 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_340 = " wrappedResult = new ";
  protected final String TEXT_341 = "(";
  protected final String TEXT_342 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_343 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_344 = " getConnectionCompleteCommand(";
  protected final String TEXT_345 = " request) {";
  protected final String TEXT_346 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_347 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_348 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_349 = " requestEx = (";
  protected final String TEXT_350 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_351 = " result = new ";
  protected final String TEXT_352 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_353 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_354 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_355 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_356 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_357 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_358 = "(";
  protected final String TEXT_359 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_360 = NL + "\t\t\t\treturn ";
  protected final String TEXT_361 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_362 = NL + "\t\t//This edit part understands the direct edit request and delegates it to the appropriate label, so no command is needed here." + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_363 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_364 = "() {" + NL + "\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_365 = " request) {" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_366 = " getDirectEditCommand(";
  protected final String TEXT_367 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_368 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_369 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_370 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_371 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_372 = " invisibleRectangle = new ";
  protected final String TEXT_373 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_374 = "());" + NL + "\t\t";
  protected final String TEXT_375 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_376 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_377 = NL + NL + "\t\t";
  protected final String TEXT_378 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL;
  protected final String TEXT_379 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_380 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_381 = " result = new ";
  protected final String TEXT_382 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_383 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_384 = " createNodeShape() {";
  protected final String TEXT_385 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_386 = "()";
  protected final String TEXT_387 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_388 = ";";
  protected final String TEXT_389 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_390 = ";";
  protected final String TEXT_391 = NL + "\t\t";
  protected final String TEXT_392 = " figure = new ";
  protected final String TEXT_393 = "();";
  protected final String TEXT_394 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_395 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_396 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_397 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_398 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_399 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_400 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_401 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_402 = " view = (";
  protected final String TEXT_403 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_404 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_405 = " decorationPane = new ";
  protected final String TEXT_406 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_407 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_408 = " imageFigure = new ";
  protected final String TEXT_409 = "(";
  protected final String TEXT_410 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_411 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_412 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_413 = " setupContentPane(";
  protected final String TEXT_414 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_415 = NL + "\t\t\t";
  protected final String TEXT_416 = " layout = new ";
  protected final String TEXT_417 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_418 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_419 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_420 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_421 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_422 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_423 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_424 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_425 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_426 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_427 = " childEditPart) {";
  protected final String TEXT_428 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_429 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_430 = ") childEditPart).";
  protected final String TEXT_431 = "(getPrimaryShape().";
  protected final String TEXT_432 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_433 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_434 = ") {" + NL + "\t\t\t";
  protected final String TEXT_435 = " pane = getPrimaryShape().";
  protected final String TEXT_436 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_437 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_438 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_439 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_440 = ") {" + NL + "\t\t\t";
  protected final String TEXT_441 = " pane = getPrimaryShape().";
  protected final String TEXT_442 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_443 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_444 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_445 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_446 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_447 = NL + "\t\tfor(";
  protected final String TEXT_448 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_449 = " nextChild = (";
  protected final String TEXT_450 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_451 = ".getVisualID(nextChild) == ";
  protected final String TEXT_452 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_453 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_454 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_455 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_456 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_457 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_458 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_459 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_460 = " getLabelEditPart(";
  protected final String TEXT_461 = " req) {" + NL + "\t\t";
  protected final String TEXT_462 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_463 = " view = (";
  protected final String TEXT_464 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_465 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_466 = NL + "\t\t\t\tcase ";
  protected final String TEXT_467 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_468 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_469 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_470 = " childEditPart) {";
  protected final String TEXT_471 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_472 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_473 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_474 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_475 = " root = (";
  protected final String TEXT_476 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_477 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_478 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_479 = " childEditPart) {";
  protected final String TEXT_480 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_481 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_482 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_483 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_484 = " childEditPart, int index) {";
  protected final String TEXT_485 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_486 = " labelFigure = ((";
  protected final String TEXT_487 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_488 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_489 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_490 = " childFigure = ((";
  protected final String TEXT_491 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_492 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_493 = " childEditPart) {";
  protected final String TEXT_494 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_495 = " labelFigure = ((";
  protected final String TEXT_496 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_497 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_498 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_499 = " childFigure = ((";
  protected final String TEXT_500 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_501 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_502 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_503 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_504 = " childEditPart = (";
  protected final String TEXT_505 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_506 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_507 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_508 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_509 = ";" + NL + "\t\t";
  protected final String TEXT_510 = " bounds = (";
  protected final String TEXT_511 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_512 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_513 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_514 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_515 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_516 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_517 = " getSourceConnectionAnchor(";
  protected final String TEXT_518 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_519 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_520 = " getSourceConnectionAnchor(";
  protected final String TEXT_521 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_522 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_523 = "  getTargetConnectionAnchor(";
  protected final String TEXT_524 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_525 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_526 = "  getTargetConnectionAnchor(";
  protected final String TEXT_527 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_528 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_529 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_530 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_531 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_532 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_533 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_534 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_535 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_536 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_537 = NL;
  protected final String TEXT_538 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_539 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_540 = " domainModelEditDomain = ";
  protected final String TEXT_541 = ".getEditingDomain(";
  protected final String TEXT_542 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_543 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_544 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_545 = " {";
  protected final String TEXT_546 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_547 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_548 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_549 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_550 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_551 = " createFilter() {";
  protected final String TEXT_552 = NL + "\t\t\t";
  protected final String TEXT_553 = " filter = ";
  protected final String TEXT_554 = ".createFeatureFilter(";
  protected final String TEXT_555 = ".eINSTANCE.get";
  protected final String TEXT_556 = "());";
  protected final String TEXT_557 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_558 = ".createFeatureFilter(";
  protected final String TEXT_559 = ".eINSTANCE.get";
  protected final String TEXT_560 = "()));";
  protected final String TEXT_561 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_562 = ".createNotifierFilter(";
  protected final String TEXT_563 = ".getElement()));";
  protected final String TEXT_564 = NL + "\t\t\t";
  protected final String TEXT_565 = " filter = ";
  protected final String TEXT_566 = ".createNotifierFilter(";
  protected final String TEXT_567 = ".getElement());";
  protected final String TEXT_568 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_569 = NL + "\t\t\t";
  protected final String TEXT_570 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_571 = NL + "\t\t\t";
  protected final String TEXT_572 = " filter = ";
  protected final String TEXT_573 = ".NOT_TOUCH;";
  protected final String TEXT_574 = NL + "\t\t\treturn filter;";
  protected final String TEXT_575 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_576 = " getCreateNotationalElementCommand(";
  protected final String TEXT_577 = " descriptor) {";
  protected final String TEXT_578 = NL;
  protected final String TEXT_579 = "\t\t\t";
  protected final String TEXT_580 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_581 = NL + "\t\t\tcase ";
  protected final String TEXT_582 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_583 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_584 = "(";
  protected final String TEXT_585 = ", domainElement, ";
  protected final String TEXT_586 = "new ";
  protected final String TEXT_587 = "(0, 0, ";
  protected final String TEXT_588 = ", ";
  protected final String TEXT_589 = ")";
  protected final String TEXT_590 = NL + "null";
  protected final String TEXT_591 = ", ";
  protected final String TEXT_592 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_593 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_594 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_595 = " getSemanticChildNodes() {";
  protected final String TEXT_596 = NL;
  protected final String TEXT_597 = NL + "\treturn ";
  protected final String TEXT_598 = ".EMPTY_LIST;";
  protected final String TEXT_599 = NL + "\t";
  protected final String TEXT_600 = " result = new ";
  protected final String TEXT_601 = "();";
  protected final String TEXT_602 = NL + "\t";
  protected final String TEXT_603 = " viewObject = ";
  protected final String TEXT_604 = ";" + NL + "\t";
  protected final String TEXT_605 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_606 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_607 = NL + "\tfor(";
  protected final String TEXT_608 = " it = ";
  protected final String TEXT_609 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_610 = ") it.next();";
  protected final String TEXT_611 = NL + "\tnextValue = (";
  protected final String TEXT_612 = ")";
  protected final String TEXT_613 = ";";
  protected final String TEXT_614 = NL + "\tnodeVID = ";
  protected final String TEXT_615 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_616 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_617 = NL + "\tcase ";
  protected final String TEXT_618 = ".VISUAL_ID: {";
  protected final String TEXT_619 = NL + "\tif (";
  protected final String TEXT_620 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_621 = NL + "\t\tresult.add(new ";
  protected final String TEXT_622 = "(nextValue, nodeVID));";
  protected final String TEXT_623 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_624 = NL + "\t\t}";
  protected final String TEXT_625 = NL + "\t}";
  protected final String TEXT_626 = NL + "\t}";
  protected final String TEXT_627 = NL + "\treturn result;";
  protected final String TEXT_628 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_629 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_630 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_631 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_632 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_633 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_634 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_635 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_636 = " domainModelEditDomain = ";
  protected final String TEXT_637 = ".getEditingDomain(";
  protected final String TEXT_638 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_639 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_640 = NL;
  protected final String TEXT_641 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_642 = " domainModelEditDomain = ";
  protected final String TEXT_643 = ".getEditingDomain(";
  protected final String TEXT_644 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_645 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_646 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_647 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_648 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_649 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_650 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_651 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_652 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_653 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_654 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_655 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_656 = ".createEventTypeFilter(";
  protected final String TEXT_657 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_658 = ".createEventTypeFilter(";
  protected final String TEXT_659 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_660 = ".createEventTypeFilter(";
  protected final String TEXT_661 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_662 = ".createEventTypeFilter(";
  protected final String TEXT_663 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_664 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_665 = " createFilter() {";
  protected final String TEXT_666 = NL;
  protected final String TEXT_667 = NL + "\t\t\t";
  protected final String TEXT_668 = " filter = ";
  protected final String TEXT_669 = ".createFeatureFilter(";
  protected final String TEXT_670 = ".eINSTANCE.get";
  protected final String TEXT_671 = "());";
  protected final String TEXT_672 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_673 = ".createFeatureFilter(";
  protected final String TEXT_674 = ".eINSTANCE.get";
  protected final String TEXT_675 = "()));";
  protected final String TEXT_676 = NL;
  protected final String TEXT_677 = NL + "\t\t\t";
  protected final String TEXT_678 = " filter = ";
  protected final String TEXT_679 = ".createFeatureFilter(";
  protected final String TEXT_680 = ".eINSTANCE.get";
  protected final String TEXT_681 = "());";
  protected final String TEXT_682 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_683 = ".createFeatureFilter(";
  protected final String TEXT_684 = ".eINSTANCE.get";
  protected final String TEXT_685 = "()));";
  protected final String TEXT_686 = NL;
  protected final String TEXT_687 = NL + "\t\t\t";
  protected final String TEXT_688 = " filter = ";
  protected final String TEXT_689 = ".createFeatureFilter(";
  protected final String TEXT_690 = ".eINSTANCE.get";
  protected final String TEXT_691 = "());";
  protected final String TEXT_692 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_693 = ".createFeatureFilter(";
  protected final String TEXT_694 = ".eINSTANCE.get";
  protected final String TEXT_695 = "()));";
  protected final String TEXT_696 = NL;
  protected final String TEXT_697 = NL + "\t\t\t";
  protected final String TEXT_698 = " filter = ";
  protected final String TEXT_699 = ".createFeatureFilter(";
  protected final String TEXT_700 = ".eINSTANCE.get";
  protected final String TEXT_701 = "());";
  protected final String TEXT_702 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_703 = ".createFeatureFilter(";
  protected final String TEXT_704 = ".eINSTANCE.get";
  protected final String TEXT_705 = "()));";
  protected final String TEXT_706 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_707 = NL + "\t\t\t";
  protected final String TEXT_708 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_709 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_710 = NL + "\t\t\t";
  protected final String TEXT_711 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_712 = NL + "\t\t\t";
  protected final String TEXT_713 = " filter = ";
  protected final String TEXT_714 = ".NOT_TOUCH;";
  protected final String TEXT_715 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_716 = " getCreateNotationalElementCommand(";
  protected final String TEXT_717 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_718 = " linkDescriptor = (";
  protected final String TEXT_719 = ") descriptor;";
  protected final String TEXT_720 = NL;
  protected final String TEXT_721 = "\t\t\t";
  protected final String TEXT_722 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_723 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_724 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_725 = NL + "\t\t\tcase ";
  protected final String TEXT_726 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_727 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_728 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_729 = NL + "\t\t\tcase ";
  protected final String TEXT_730 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_731 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_732 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_733 = "(";
  protected final String TEXT_734 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_735 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_736 = " getSemanticChildLinks() {";
  protected final String TEXT_737 = NL;
  protected final String TEXT_738 = "\t";
  protected final String TEXT_739 = " result = new ";
  protected final String TEXT_740 = "();";
  protected final String TEXT_741 = NL + "\t";
  protected final String TEXT_742 = " modelObject = ";
  protected final String TEXT_743 = ".getElement();" + NL + "\t";
  protected final String TEXT_744 = " nextValue;";
  protected final String TEXT_745 = NL + "\tint linkVID;";
  protected final String TEXT_746 = NL + "\tfor(";
  protected final String TEXT_747 = " it = ";
  protected final String TEXT_748 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_749 = ") it.next();";
  protected final String TEXT_750 = NL + "\tnextValue = (";
  protected final String TEXT_751 = ")";
  protected final String TEXT_752 = ";";
  protected final String TEXT_753 = NL + "\tlinkVID = ";
  protected final String TEXT_754 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_755 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_756 = NL + "\tcase ";
  protected final String TEXT_757 = ".VISUAL_ID: {";
  protected final String TEXT_758 = NL + "\tif (";
  protected final String TEXT_759 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_760 = NL + "\t\t";
  protected final String TEXT_761 = " source = (";
  protected final String TEXT_762 = ")";
  protected final String TEXT_763 = ";";
  protected final String TEXT_764 = NL + "\t\t";
  protected final String TEXT_765 = " source = ";
  protected final String TEXT_766 = ".getElement();";
  protected final String TEXT_767 = NL + "\t\t";
  protected final String TEXT_768 = " target = (";
  protected final String TEXT_769 = ")";
  protected final String TEXT_770 = ";";
  protected final String TEXT_771 = NL + "\t\t";
  protected final String TEXT_772 = " target = ";
  protected final String TEXT_773 = ".getElement();";
  protected final String TEXT_774 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_775 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_776 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_777 = NL + "\t}";
  protected final String TEXT_778 = NL + "\t}";
  protected final String TEXT_779 = NL + "\t}";
  protected final String TEXT_780 = NL + "\tfor(";
  protected final String TEXT_781 = " it = ";
  protected final String TEXT_782 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_783 = ") it.next();";
  protected final String TEXT_784 = NL + "\tnextValue = (";
  protected final String TEXT_785 = ")";
  protected final String TEXT_786 = ";";
  protected final String TEXT_787 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_788 = NL + "\t\tresult.add(new ";
  protected final String TEXT_789 = "(modelObject, nextValue, null, ";
  protected final String TEXT_790 = ".VISUAL_ID));";
  protected final String TEXT_791 = NL + "\t}";
  protected final String TEXT_792 = NL + "\t}";
  protected final String TEXT_793 = NL + "\treturn result;";
  protected final String TEXT_794 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_795 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_796 = " result = new ";
  protected final String TEXT_797 = "();" + NL + "\t\t\t";
  protected final String TEXT_798 = " allLinks = ";
  protected final String TEXT_799 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_800 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_801 = " next = (";
  protected final String TEXT_802 = ") it.next();";
  protected final String TEXT_803 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_804 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_805 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_806 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_807 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_808 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_809 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_810 = ".VISUAL_ID:";
  protected final String TEXT_811 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_812 = NL + "\t\t\t\t} else {";
  protected final String TEXT_813 = NL + "\t\t\t\t}";
  protected final String TEXT_814 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_815 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_816 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_817 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_818 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_819 = ".VISUAL_ID:";
  protected final String TEXT_820 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_821 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_822 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_823 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_824 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_825 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_826 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_827 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_828 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_829 = " domainModelEditDomain = ";
  protected final String TEXT_830 = ".getEditingDomain(";
  protected final String TEXT_831 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_832 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_833 = NL;
  protected final String TEXT_834 = NL;
  protected final String TEXT_835 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_836 = " domainModelRefresher = new ";
  protected final String TEXT_837 = "(this);" + NL;
  protected final String TEXT_838 = NL;
  protected final String TEXT_839 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_840 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_841 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_842 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_843 = NL;
  protected final String TEXT_844 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_845 = NL + "\t\t";
  protected final String TEXT_846 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_847 = ") ";
  protected final String TEXT_848 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_849 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_850 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_851 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_852 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_853 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_854 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_855 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_856 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_857 = "\t" + NL + "\t}";
  protected final String TEXT_858 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_859 = " createdFont;";
  protected final String TEXT_860 = "\t" + NL;
  protected final String TEXT_861 = NL;
  protected final String TEXT_862 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_863 = " style = (";
  protected final String TEXT_864 = ")  ";
  protected final String TEXT_865 = ".getStyle(";
  protected final String TEXT_866 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_867 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_868 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_869 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_870 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_871 = " style = (";
  protected final String TEXT_872 = ")  ";
  protected final String TEXT_873 = ".getStyle(";
  protected final String TEXT_874 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_875 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_876 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_877 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_878 = " createdBackgroundColor;" + NL;
  protected final String TEXT_879 = NL;
  protected final String TEXT_880 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_881 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_882 = " feature, ";
  protected final String TEXT_883 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_884 = "();";
  protected final String TEXT_885 = NL;
  protected final String TEXT_886 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_887 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_888 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_889 = NL;
  protected final String TEXT_890 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_891 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_892 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_893 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_894 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_895 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_896 = NL;
  protected final String TEXT_897 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_898 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_899 = NL;
  protected final String TEXT_900 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_901 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_902 = NL;
  protected final String TEXT_903 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_904 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_905 = NL;
  protected final String TEXT_906 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_907 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_908 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_909 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_910 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_911 = NL;
  protected final String TEXT_912 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_913 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_914 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_915 = NL;
  protected final String TEXT_916 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_917 = "static ";
  protected final String TEXT_918 = "class Create";
  protected final String TEXT_919 = "Command extends ";
  protected final String TEXT_920 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_921 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_922 = "Command(";
  protected final String TEXT_923 = " parent, ";
  protected final String TEXT_924 = " request";
  protected final String TEXT_925 = ", ";
  protected final String TEXT_926 = " constraint";
  protected final String TEXT_927 = ") {" + NL + "\t\t\t";
  protected final String TEXT_928 = " domainModelEditDomain = ";
  protected final String TEXT_929 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_930 = NL + "\t\t\t";
  protected final String TEXT_931 = " createdDomainElement = ";
  protected final String TEXT_932 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_933 = ".eINSTANCE.get";
  protected final String TEXT_934 = "());";
  protected final String TEXT_935 = NL + "\t\t\t";
  protected final String TEXT_936 = " createdDomainElement = ";
  protected final String TEXT_937 = ".eINSTANCE.create";
  protected final String TEXT_938 = "();";
  protected final String TEXT_939 = NL + "\t\t\t";
  protected final String TEXT_940 = NL + "\t\t\t";
  protected final String TEXT_941 = ".";
  protected final String TEXT_942 = ".initializeElement(";
  protected final String TEXT_943 = "(";
  protected final String TEXT_944 = ") ";
  protected final String TEXT_945 = "createdDomainElement);";
  protected final String TEXT_946 = NL + "\t\t\t";
  protected final String TEXT_947 = " compoundCommand = new ";
  protected final String TEXT_948 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_949 = ".create(domainModelEditDomain, ";
  protected final String TEXT_950 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_951 = ".eINSTANCE.get";
  protected final String TEXT_952 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_953 = ".create(domainModelEditDomain, ";
  protected final String TEXT_954 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_955 = ".eINSTANCE.get";
  protected final String TEXT_956 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_957 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_958 = ".create(domainModelEditDomain, ";
  protected final String TEXT_959 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_960 = ".eINSTANCE.get";
  protected final String TEXT_961 = "(), createdDomainElement);";
  protected final String TEXT_962 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_963 = "(";
  protected final String TEXT_964 = ", ";
  protected final String TEXT_965 = "));";
  protected final String TEXT_966 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_967 = "(parent, ";
  protected final String TEXT_968 = "(";
  protected final String TEXT_969 = ") ";
  protected final String TEXT_970 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_971 = "constraint";
  protected final String TEXT_972 = "null";
  protected final String TEXT_973 = ", ";
  protected final String TEXT_974 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_975 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_976 = "SourceCommand extends ";
  protected final String TEXT_977 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_978 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_979 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_980 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_981 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_982 = "SourceCommand(";
  protected final String TEXT_983 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_984 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_985 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_986 = "SourceCommand(";
  protected final String TEXT_987 = " edge, ";
  protected final String TEXT_988 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_989 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_990 = " domainModelEditDomain = ";
  protected final String TEXT_991 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_992 = " command = new ";
  protected final String TEXT_993 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_994 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_995 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_996 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_997 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_998 = NL + "\t\t\treturn false;";
  protected final String TEXT_999 = NL + "\t\t\t";
  protected final String TEXT_1000 = " container = (";
  protected final String TEXT_1001 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_1002 = ".eINSTANCE.get";
  protected final String TEXT_1003 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1004 = NL;
  protected final String TEXT_1005 = NL + "\t\tif (";
  protected final String TEXT_1006 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1007 = NL + "\t\t}";
  protected final String TEXT_1008 = NL + "\t\tif (";
  protected final String TEXT_1009 = ".size() >= ";
  protected final String TEXT_1010 = ".eINSTANCE.get";
  protected final String TEXT_1011 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1012 = NL + "\t\t}";
  protected final String TEXT_1013 = NL;
  protected final String TEXT_1014 = NL + "\t\tif (";
  protected final String TEXT_1015 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1016 = NL + "\t\t}";
  protected final String TEXT_1017 = NL + "\t\tif (";
  protected final String TEXT_1018 = ".size() >= ";
  protected final String TEXT_1019 = ".eINSTANCE.get";
  protected final String TEXT_1020 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1021 = NL + "\t\t}";
  protected final String TEXT_1022 = NL;
  protected final String TEXT_1023 = NL + "\t\t\tif(!";
  protected final String TEXT_1024 = ".canCreateLink(";
d1047 25
a1071 25
  protected final String TEXT_1026 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1027 = NL + "\t\t\treturn true;";
  protected final String TEXT_1028 = NL;
  protected final String TEXT_1029 = NL + "\t\tif (";
  protected final String TEXT_1030 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1031 = NL + "\t\t}";
  protected final String TEXT_1032 = NL + "\t\tif (";
  protected final String TEXT_1033 = ".size() >= ";
  protected final String TEXT_1034 = ".eINSTANCE.get";
  protected final String TEXT_1035 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1036 = NL + "\t\t}";
  protected final String TEXT_1037 = NL;
  protected final String TEXT_1038 = NL + "\t\t\tif(!";
  protected final String TEXT_1039 = ".canCreateLink(";
  protected final String TEXT_1040 = ", ";
  protected final String TEXT_1041 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1042 = NL + "\t\t\treturn true;";
  protected final String TEXT_1043 = NL + "\t\t\treturn false;";
  protected final String TEXT_1044 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1045 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1046 = " editingDomain = ";
  protected final String TEXT_1047 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1048 = " result = new ";
  protected final String TEXT_1049 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1050 = "(edge, newSource));";
d1073 82
a1154 82
  protected final String TEXT_1052 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_1053 = ".eINSTANCE.get";
  protected final String TEXT_1054 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_1055 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_1056 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_1057 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_1058 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1059 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1060 = ".eINSTANCE.get";
  protected final String TEXT_1061 = "(), edge.getElement()));";
  protected final String TEXT_1062 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1063 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1064 = ".eINSTANCE.get";
  protected final String TEXT_1065 = "(), ";
  protected final String TEXT_1066 = ".UNSET_VALUE));";
  protected final String TEXT_1067 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1068 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_1069 = ".eINSTANCE.get";
  protected final String TEXT_1070 = "(), edge.getElement()));";
  protected final String TEXT_1071 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1072 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1073 = ".eINSTANCE.get";
  protected final String TEXT_1074 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_1075 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1076 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_1077 = ".eINSTANCE.get";
  protected final String TEXT_1078 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1079 = ".UNSET_VALUE));";
  protected final String TEXT_1080 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1081 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_1082 = ".eINSTANCE.get";
  protected final String TEXT_1083 = "(), edge.getElement()));";
  protected final String TEXT_1084 = NL + "\t\t\t}";
  protected final String TEXT_1085 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1086 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1087 = ".eINSTANCE.get";
  protected final String TEXT_1088 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1089 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1090 = ".eINSTANCE.get";
  protected final String TEXT_1091 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_1092 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1093 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1094 = ".eINSTANCE.get";
  protected final String TEXT_1095 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_1096 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1097 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_1098 = ".eINSTANCE.get";
  protected final String TEXT_1099 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1100 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_1101 = ".eINSTANCE.get";
  protected final String TEXT_1102 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_1103 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1104 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_1105 = ".eINSTANCE.get";
  protected final String TEXT_1106 = "(), ";
  protected final String TEXT_1107 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1108 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_1109 = ".eINSTANCE.get";
  protected final String TEXT_1110 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_1111 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_1112 = NL;
  protected final String TEXT_1113 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1114 = " getRelationshipContainer(";
  protected final String TEXT_1115 = " element, ";
  protected final String TEXT_1116 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1117 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1118 = NL;
  protected final String TEXT_1119 = NL + "\t\t\tprivate ";
  protected final String TEXT_1120 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1121 = " editingDomain) {";
  protected final String TEXT_1122 = NL + "\t\t\t\t";
  protected final String TEXT_1123 = " result = new ";
  protected final String TEXT_1124 = "();";
  protected final String TEXT_1125 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1126 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1127 = ".getElement().eContainer(), ";
  protected final String TEXT_1128 = ".eINSTANCE.get";
  protected final String TEXT_1129 = "(), ";
  protected final String TEXT_1130 = ".getElement()));";
  protected final String TEXT_1131 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1132 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1133 = ".getElement().eContainer(), ";
d1156 13
a1168 13
  protected final String TEXT_1135 = "(), ";
  protected final String TEXT_1136 = ".UNSET_VALUE));";
  protected final String TEXT_1137 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1138 = ".INSTANCE;";
  protected final String TEXT_1139 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1140 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1141 = ".getElement().eContainer(), ";
  protected final String TEXT_1142 = ".eINSTANCE.get";
  protected final String TEXT_1143 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1144 = ".getElement()));";
  protected final String TEXT_1145 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1146 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1147 = ".getElement().eContainer(), ";
d1170 17
a1186 17
  protected final String TEXT_1149 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1150 = ".UNSET_VALUE));";
  protected final String TEXT_1151 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1152 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1153 = ".getElement(), ";
  protected final String TEXT_1154 = ".eINSTANCE.get";
  protected final String TEXT_1155 = "(), ";
  protected final String TEXT_1156 = ".getSource().getElement()));";
  protected final String TEXT_1157 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1158 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1159 = ".getElement(), ";
  protected final String TEXT_1160 = ".eINSTANCE.get";
  protected final String TEXT_1161 = "(), ";
  protected final String TEXT_1162 = ".UNSET_VALUE));";
  protected final String TEXT_1163 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1164 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1165 = ".getElement(), ";
d1189 41
a1229 41
  protected final String TEXT_1168 = ".getTarget().getElement()));";
  protected final String TEXT_1169 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1170 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1171 = ".getElement(), ";
  protected final String TEXT_1172 = ".eINSTANCE.get";
  protected final String TEXT_1173 = "(), ";
  protected final String TEXT_1174 = ".UNSET_VALUE));";
  protected final String TEXT_1175 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1176 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1177 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1178 = ".getSource().getElement(), ";
  protected final String TEXT_1179 = ".eINSTANCE.get";
  protected final String TEXT_1180 = "(), ";
  protected final String TEXT_1181 = ".getTarget().getElement());";
  protected final String TEXT_1182 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1183 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1184 = ".getSource().getElement(), ";
  protected final String TEXT_1185 = ".eINSTANCE.get";
  protected final String TEXT_1186 = "(), ";
  protected final String TEXT_1187 = ".UNSET_VALUE);";
  protected final String TEXT_1188 = NL + "\t\t\t}";
  protected final String TEXT_1189 = NL + "\t}" + NL;
  protected final String TEXT_1190 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1191 = "StartCommand extends ";
  protected final String TEXT_1192 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1193 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1194 = "StartCommand(";
  protected final String TEXT_1195 = " requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_1196 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1197 = NL + "\t\t\treturn false;";
  protected final String TEXT_1198 = NL + "\t\t\t";
  protected final String TEXT_1199 = " container = (";
  protected final String TEXT_1200 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1201 = ".eINSTANCE.get";
  protected final String TEXT_1202 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1203 = NL;
  protected final String TEXT_1204 = NL + "\t\tif (";
  protected final String TEXT_1205 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1206 = NL + "\t\t}";
  protected final String TEXT_1207 = NL + "\t\tif (";
  protected final String TEXT_1208 = ".size() >= ";
d1231 23
a1253 23
  protected final String TEXT_1210 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1211 = NL + "\t\t}";
  protected final String TEXT_1212 = NL;
  protected final String TEXT_1213 = NL + "\t\tif (";
  protected final String TEXT_1214 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1215 = NL + "\t\t}";
  protected final String TEXT_1216 = NL + "\t\tif (";
  protected final String TEXT_1217 = ".size() >= ";
  protected final String TEXT_1218 = ".eINSTANCE.get";
  protected final String TEXT_1219 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1220 = NL + "\t\t}";
  protected final String TEXT_1221 = NL;
  protected final String TEXT_1222 = NL + "\t\t\tif(!";
  protected final String TEXT_1223 = ".canCreateLink(";
  protected final String TEXT_1224 = ", ";
  protected final String TEXT_1225 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1226 = NL + "\t\t\treturn true;";
  protected final String TEXT_1227 = NL;
  protected final String TEXT_1228 = NL + "\t\tif (";
  protected final String TEXT_1229 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1230 = NL + "\t\t}";
  protected final String TEXT_1231 = NL + "\t\tif (";
  protected final String TEXT_1232 = ".size() >= ";
d1255 39
a1293 39
  protected final String TEXT_1234 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1235 = NL + "\t\t}";
  protected final String TEXT_1236 = NL;
  protected final String TEXT_1237 = NL + "\t\t\tif(!";
  protected final String TEXT_1238 = ".canCreateLink(";
  protected final String TEXT_1239 = ", ";
  protected final String TEXT_1240 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1241 = NL + "\t\t\treturn true;";
  protected final String TEXT_1242 = NL + "\t\t\treturn false;";
  protected final String TEXT_1243 = NL + "\t\t}";
  protected final String TEXT_1244 = NL;
  protected final String TEXT_1245 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1246 = " getRelationshipContainer(";
  protected final String TEXT_1247 = " element, ";
  protected final String TEXT_1248 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1249 = NL + NL + "\t}";
  protected final String TEXT_1250 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1251 = "TargetCommand extends ";
  protected final String TEXT_1252 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1253 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1254 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1255 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1256 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1257 = "TargetCommand(";
  protected final String TEXT_1258 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1259 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1260 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1261 = "TargetCommand(";
  protected final String TEXT_1262 = " edge, ";
  protected final String TEXT_1263 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1264 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1265 = " domainModelEditDomain = ";
  protected final String TEXT_1266 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1267 = " command = new ";
  protected final String TEXT_1268 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1269 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1270 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1271 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1272 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
d1295 487
a1781 381
  protected final String TEXT_1274 = NL + "\t\t\tif(!";
  protected final String TEXT_1275 = ".canCreateLink(";
  protected final String TEXT_1276 = ", ";
  protected final String TEXT_1277 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1278 = NL + "\t\t\treturn true;";
  protected final String TEXT_1279 = NL;
  protected final String TEXT_1280 = NL + "\t\t\tif(!";
  protected final String TEXT_1281 = ".canCreateLink(";
  protected final String TEXT_1282 = ", ";
  protected final String TEXT_1283 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1284 = NL + "\t\t\treturn true;";
  protected final String TEXT_1285 = NL + "\t\t\treturn false;";
  protected final String TEXT_1286 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1287 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1288 = " editingDomain = ";
  protected final String TEXT_1289 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1290 = " result = new ";
  protected final String TEXT_1291 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1292 = "(edge, newTarget));";
  protected final String TEXT_1293 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1294 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1295 = ".eINSTANCE.get";
  protected final String TEXT_1296 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1297 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1298 = ".eINSTANCE.get";
  protected final String TEXT_1299 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1300 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1301 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1302 = ".eINSTANCE.get";
  protected final String TEXT_1303 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1304 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1305 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1306 = ".eINSTANCE.get";
  protected final String TEXT_1307 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1308 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1309 = ".eINSTANCE.get";
  protected final String TEXT_1310 = "(), newTarget.getElement()));";
  protected final String TEXT_1311 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1312 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1313 = ".eINSTANCE.get";
  protected final String TEXT_1314 = "(), newTarget.getElement()));";
  protected final String TEXT_1315 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_1316 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1317 = NL;
  protected final String TEXT_1318 = NL + "\t\t\tprivate ";
  protected final String TEXT_1319 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1320 = " editingDomain) {";
  protected final String TEXT_1321 = NL + "\t\t\t\t";
  protected final String TEXT_1322 = " result = new ";
  protected final String TEXT_1323 = "();";
  protected final String TEXT_1324 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1325 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1326 = ".getElement().eContainer(), ";
  protected final String TEXT_1327 = ".eINSTANCE.get";
  protected final String TEXT_1328 = "(), ";
  protected final String TEXT_1329 = ".getElement()));";
  protected final String TEXT_1330 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1331 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1332 = ".getElement().eContainer(), ";
  protected final String TEXT_1333 = ".eINSTANCE.get";
  protected final String TEXT_1334 = "(), ";
  protected final String TEXT_1335 = ".UNSET_VALUE));";
  protected final String TEXT_1336 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1337 = ".INSTANCE;";
  protected final String TEXT_1338 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1339 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1340 = ".getElement().eContainer(), ";
  protected final String TEXT_1341 = ".eINSTANCE.get";
  protected final String TEXT_1342 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1343 = ".getElement()));";
  protected final String TEXT_1344 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1345 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1346 = ".getElement().eContainer(), ";
  protected final String TEXT_1347 = ".eINSTANCE.get";
  protected final String TEXT_1348 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1349 = ".UNSET_VALUE));";
  protected final String TEXT_1350 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1351 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1352 = ".getElement(), ";
  protected final String TEXT_1353 = ".eINSTANCE.get";
  protected final String TEXT_1354 = "(), ";
  protected final String TEXT_1355 = ".getSource().getElement()));";
  protected final String TEXT_1356 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1357 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1358 = ".getElement(), ";
  protected final String TEXT_1359 = ".eINSTANCE.get";
  protected final String TEXT_1360 = "(), ";
  protected final String TEXT_1361 = ".UNSET_VALUE));";
  protected final String TEXT_1362 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1363 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1364 = ".getElement(), ";
  protected final String TEXT_1365 = ".eINSTANCE.get";
  protected final String TEXT_1366 = "(), ";
  protected final String TEXT_1367 = ".getTarget().getElement()));";
  protected final String TEXT_1368 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1369 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1370 = ".getElement(), ";
  protected final String TEXT_1371 = ".eINSTANCE.get";
  protected final String TEXT_1372 = "(), ";
  protected final String TEXT_1373 = ".UNSET_VALUE));";
  protected final String TEXT_1374 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1375 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1376 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1377 = ".getSource().getElement(), ";
  protected final String TEXT_1378 = ".eINSTANCE.get";
  protected final String TEXT_1379 = "(), ";
  protected final String TEXT_1380 = ".getTarget().getElement());";
  protected final String TEXT_1381 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1382 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1383 = ".getSource().getElement(), ";
  protected final String TEXT_1384 = ".eINSTANCE.get";
  protected final String TEXT_1385 = "(), ";
  protected final String TEXT_1386 = ".UNSET_VALUE);";
  protected final String TEXT_1387 = NL + "\t\t\t}";
  protected final String TEXT_1388 = NL + "\t}" + NL;
  protected final String TEXT_1389 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1390 = "Command extends ";
  protected final String TEXT_1391 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1392 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1393 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1394 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1395 = "Command(";
  protected final String TEXT_1396 = " requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1397 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1398 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1399 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1400 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1401 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1402 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1403 = NL + "\t\t\t";
  protected final String TEXT_1404 = " createdDomainElement = ";
  protected final String TEXT_1405 = ".eINSTANCE.create";
  protected final String TEXT_1406 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1407 = "(";
  protected final String TEXT_1408 = ") ";
  protected final String TEXT_1409 = "createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1410 = NL + "\t\t\t";
  protected final String TEXT_1411 = ".";
  protected final String TEXT_1412 = ".initializeElement(";
  protected final String TEXT_1413 = "(";
  protected final String TEXT_1414 = ") ";
  protected final String TEXT_1415 = "createdDomainElement);";
  protected final String TEXT_1416 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1417 = NL + "\t\t\t";
  protected final String TEXT_1418 = ".INSTANCE.decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1419 = " domainModelEditDomain = ";
  protected final String TEXT_1420 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1421 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1422 = NL + "\t\t\t";
  protected final String TEXT_1423 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1424 = ".eINSTANCE.get";
  protected final String TEXT_1425 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1426 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1427 = ".eINSTANCE.get";
  protected final String TEXT_1428 = "(), createdDomainElement));";
  protected final String TEXT_1429 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1430 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1431 = ".eINSTANCE.get";
  protected final String TEXT_1432 = "(), createdDomainElement));";
  protected final String TEXT_1433 = NL;
  protected final String TEXT_1434 = NL + "\t\tif (";
  protected final String TEXT_1435 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1436 = NL + "\t\t}";
  protected final String TEXT_1437 = NL + "\t\tif (";
  protected final String TEXT_1438 = ".size() >= ";
  protected final String TEXT_1439 = ".eINSTANCE.get";
  protected final String TEXT_1440 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1441 = NL + "\t\t}";
  protected final String TEXT_1442 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1443 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1444 = ".eINSTANCE.get";
  protected final String TEXT_1445 = "(), source.getElement()));";
  protected final String TEXT_1446 = NL;
  protected final String TEXT_1447 = NL + "\t\tif (";
  protected final String TEXT_1448 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1449 = NL + "\t\t}";
  protected final String TEXT_1450 = NL + "\t\tif (";
  protected final String TEXT_1451 = ".size() >= ";
  protected final String TEXT_1452 = ".eINSTANCE.get";
  protected final String TEXT_1453 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1454 = NL + "\t\t}";
  protected final String TEXT_1455 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1456 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1457 = ".eINSTANCE.get";
  protected final String TEXT_1458 = "(), target.getElement()));";
  protected final String TEXT_1459 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1460 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1461 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1462 = ".eINSTANCE.get";
  protected final String TEXT_1463 = "(), target.getElement());";
  protected final String TEXT_1464 = NL + "\t\t}" + NL;
  protected final String TEXT_1465 = NL;
  protected final String TEXT_1466 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1467 = " getRelationshipContainer(";
  protected final String TEXT_1468 = " element, ";
  protected final String TEXT_1469 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1470 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1471 = NL;
  protected final String TEXT_1472 = NL + "\t\t\tif(!";
  protected final String TEXT_1473 = ".canCreateLink(";
  protected final String TEXT_1474 = ", ";
  protected final String TEXT_1475 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1476 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1477 = NL;
  protected final String TEXT_1478 = NL;
  protected final String TEXT_1479 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1480 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_1481 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_1482 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_1483 = NL;
  protected final String TEXT_1484 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1485 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_1486 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_1487 = " createDeleteCommand(";
  protected final String TEXT_1488 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_1489 = " editingDomain = ";
  protected final String TEXT_1490 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_1491 = " cc = new ";
  protected final String TEXT_1492 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_1493 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_1494 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_1495 = " editingDomain) {";
  protected final String TEXT_1496 = NL + "\t\t\t\t";
  protected final String TEXT_1497 = " result = new ";
  protected final String TEXT_1498 = "();";
  protected final String TEXT_1499 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1500 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1501 = ".eINSTANCE.get";
  protected final String TEXT_1502 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1503 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1504 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1505 = ".eINSTANCE.get";
  protected final String TEXT_1506 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1507 = ".UNSET_VALUE));";
  protected final String TEXT_1508 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1509 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1510 = ".eINSTANCE.get";
  protected final String TEXT_1511 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1512 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1513 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1514 = ".eINSTANCE.get";
  protected final String TEXT_1515 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1516 = ".UNSET_VALUE));";
  protected final String TEXT_1517 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1518 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1519 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1520 = ".eINSTANCE.get";
  protected final String TEXT_1521 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_1522 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1523 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1524 = ".eINSTANCE.get";
  protected final String TEXT_1525 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1526 = ".UNSET_VALUE);";
  protected final String TEXT_1527 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1528 = NL;
  protected final String TEXT_1529 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1530 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1531 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1532 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1533 = NL;
  protected final String TEXT_1534 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1535 = " getDirectEditCommand(";
  protected final String TEXT_1536 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1537 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1538 = "(";
  protected final String TEXT_1539 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1540 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1541 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1542 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1543 = " editingDomain = ";
  protected final String TEXT_1544 = ".getEditingDomain(";
  protected final String TEXT_1545 = ".getDiagram().getElement());";
  protected final String TEXT_1546 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1547 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1548 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1549 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1550 = " createDomainModelCommand(";
  protected final String TEXT_1551 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1552 = " element = ";
  protected final String TEXT_1553 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1554 = " feature = (";
  protected final String TEXT_1555 = ") ";
  protected final String TEXT_1556 = ".eINSTANCE.get";
  protected final String TEXT_1557 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1558 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1559 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1560 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1561 = " result = new ";
  protected final String TEXT_1562 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1563 = " values = new ";
  protected final String TEXT_1564 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1565 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1566 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1567 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_1568 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_1569 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_1570 = NL + "\t\t\t\t\t}";
  protected final String TEXT_1571 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1572 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1573 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1574 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1575 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1576 = " createDomainModelCommand(";
  protected final String TEXT_1577 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1578 = " element = ";
  protected final String TEXT_1579 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1580 = " result = new ";
  protected final String TEXT_1581 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1582 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1583 = " ";
  protected final String TEXT_1584 = "feature = (";
  protected final String TEXT_1585 = ") ";
  protected final String TEXT_1586 = ".eINSTANCE.get";
  protected final String TEXT_1587 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1588 = ".parseValue(feature, values[";
  protected final String TEXT_1589 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1590 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1591 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1592 = " ";
  protected final String TEXT_1593 = "values = new ";
  protected final String TEXT_1594 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1595 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1596 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1597 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1598 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1599 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1600 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1601 = NL + "\t\t\t\t});";
  protected final String TEXT_1602 = NL + "\t\t}" + NL;
  protected final String TEXT_1603 = NL;
  protected final String TEXT_1604 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1605 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1606 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1607 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1608 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1609 = "(this, ";
  protected final String TEXT_1610 = ".class, new ";
  protected final String TEXT_1611 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1612 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1613 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1614 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1615 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1616 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1617 = NL;
  protected final String TEXT_1618 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1619 = " domainModelRefresher = new ";
  protected final String TEXT_1620 = "(this);" + NL;
  protected final String TEXT_1621 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1622 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1623 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1624 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1625 = " nextChild = (";
  protected final String TEXT_1626 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1627 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1628 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1629 = ") ";
  protected final String TEXT_1630 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1631 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1632 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1633 = ".eINSTANCE.get";
  protected final String TEXT_1634 = "(), labelRefresher);";
  protected final String TEXT_1635 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1636 = ".eINSTANCE.get";
  protected final String TEXT_1637 = "(), labelRefresher);";
  protected final String TEXT_1638 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1639 = ".eINSTANCE.get";
  protected final String TEXT_1640 = "(), labelRefresher);";
  protected final String TEXT_1641 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1642 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1643 = " result = new ";
  protected final String TEXT_1644 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1645 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1646 = " next = (";
  protected final String TEXT_1647 = ") it.next();" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1648 = ".getVisualID(next)) {";
  protected final String TEXT_1649 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1650 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1651 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1652 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1653 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1654 = NL;
d2379 4
d2385 27
d2413 1
a2413 1
    stringBuffer.append(TEXT_137);
d2415 1
a2415 1
    stringBuffer.append(TEXT_138);
d2417 1
a2417 1
    stringBuffer.append(TEXT_139);
d2419 36
a2454 1
    stringBuffer.append(TEXT_140);
d2458 1
a2458 1
    stringBuffer.append(TEXT_141);
d2460 1
a2460 1
    stringBuffer.append(TEXT_142);
d2462 1
a2462 1
    stringBuffer.append(TEXT_143);
d2464 1
a2464 1
    stringBuffer.append(TEXT_144);
d2466 1
a2466 1
    stringBuffer.append(TEXT_145);
d2470 1
a2470 1
    stringBuffer.append(TEXT_146);
d2472 1
a2472 1
    stringBuffer.append(TEXT_147);
d2474 1
a2474 1
    stringBuffer.append(TEXT_148);
d2476 1
a2476 1
    stringBuffer.append(TEXT_149);
d2478 1
a2478 1
    stringBuffer.append(TEXT_150);
d2480 1
a2480 1
    stringBuffer.append(TEXT_151);
d2482 1
a2482 1
    stringBuffer.append(TEXT_152);
d2484 1
a2484 1
    stringBuffer.append(TEXT_153);
d2486 1
a2486 1
    stringBuffer.append(TEXT_154);
d2488 1
a2488 1
    stringBuffer.append(TEXT_155);
d2499 1
a2499 1
    stringBuffer.append(TEXT_156);
d2501 1
a2501 1
    stringBuffer.append(TEXT_157);
d2503 1
a2503 1
    stringBuffer.append(TEXT_158);
d2505 1
a2505 1
    stringBuffer.append(TEXT_159);
d2507 1
a2507 1
    stringBuffer.append(TEXT_160);
d2509 1
a2509 1
    stringBuffer.append(TEXT_161);
d2511 1
a2511 1
    stringBuffer.append(TEXT_162);
d2513 1
a2513 1
    stringBuffer.append(TEXT_163);
d2515 1
a2515 1
    stringBuffer.append(TEXT_164);
d2517 1
a2517 1
    stringBuffer.append(TEXT_165);
d2519 1
a2519 1
    stringBuffer.append(TEXT_166);
d2523 1
a2523 1
    stringBuffer.append(TEXT_167);
d2527 1
a2527 1
    stringBuffer.append(TEXT_168);
d2529 1
a2529 1
    stringBuffer.append(TEXT_169);
d2531 1
a2531 1
    stringBuffer.append(TEXT_170);
d2535 1
a2535 1
    stringBuffer.append(TEXT_171);
d2542 1
a2542 1
    stringBuffer.append(TEXT_172);
d2544 1
a2544 1
    stringBuffer.append(TEXT_173);
d2546 1
a2546 1
    stringBuffer.append(TEXT_174);
d2548 1
a2548 1
    stringBuffer.append(TEXT_175);
d2550 1
a2550 1
    stringBuffer.append(TEXT_176);
d2552 1
a2552 1
    stringBuffer.append(TEXT_177);
d2554 1
a2554 1
    stringBuffer.append(TEXT_178);
d2556 1
a2556 1
    stringBuffer.append(TEXT_179);
d2558 1
a2558 1
    stringBuffer.append(TEXT_180);
d2560 1
a2560 1
    stringBuffer.append(TEXT_181);
d2562 1
a2562 1
    stringBuffer.append(TEXT_182);
d2564 1
a2564 1
    stringBuffer.append(TEXT_183);
d2566 1
a2566 1
    stringBuffer.append(TEXT_184);
d2568 1
a2568 1
    stringBuffer.append(TEXT_185);
d2570 1
a2570 1
    stringBuffer.append(TEXT_186);
d2572 1
a2572 1
    stringBuffer.append(TEXT_187);
d2574 1
a2574 1
    stringBuffer.append(TEXT_188);
d2576 1
a2576 1
    stringBuffer.append(TEXT_189);
d2578 1
a2578 1
    stringBuffer.append(TEXT_190);
d2580 1
a2580 1
    stringBuffer.append(TEXT_191);
d2582 1
a2582 1
    stringBuffer.append(TEXT_192);
d2590 1
a2590 1
    stringBuffer.append(TEXT_193);
d2592 1
a2592 1
    stringBuffer.append(TEXT_194);
d2594 1
a2594 1
    stringBuffer.append(TEXT_195);
d2596 1
a2596 1
    stringBuffer.append(TEXT_196);
d2598 1
a2598 1
    stringBuffer.append(TEXT_197);
d2600 1
a2600 1
    stringBuffer.append(TEXT_198);
d2602 1
a2602 9
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_203);
d2605 4
d2610 1
a2610 9
    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_205);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_207);
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_208);
d2612 3
a2614 20
		}

    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_210);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_212);
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_213);
    
		{
			int defaultWidth = 40;
			int defaultHeight = 40;
			DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
			if (defSizeAttrs != null) {
				defaultWidth = defSizeAttrs.getWidth();
				defaultHeight = defSizeAttrs.getHeight();
			}
a2615 10
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_216);
    if (isListLayout) {
    stringBuffer.append(TEXT_217);
    } else {
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d2617 1
a2617 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d2619 1
a2619 1
    stringBuffer.append(defaultWidth);
d2621 3
a2623 1
    stringBuffer.append(defaultHeight);
d2625 1
a2625 1
    }
d2627 1
a2627 1
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
d2629 110
d2743 1
a2743 1
    stringBuffer.append(TEXT_225);
d2745 1
a2745 1
    stringBuffer.append(TEXT_226);
d2747 1
a2747 1
    stringBuffer.append(TEXT_227);
d2754 1
a2754 1
    stringBuffer.append(TEXT_228);
d2756 1
a2756 1
    stringBuffer.append(TEXT_229);
d2758 1
a2758 1
    stringBuffer.append(TEXT_230);
d2762 1
a2762 1
    stringBuffer.append(TEXT_231);
d2764 1
a2764 1
    stringBuffer.append(TEXT_232);
d2766 1
a2766 1
    stringBuffer.append(TEXT_233);
d2768 1
a2768 1
    stringBuffer.append(TEXT_234);
d2770 1
a2770 1
    stringBuffer.append(TEXT_235);
d2772 1
a2772 1
    stringBuffer.append(TEXT_236);
d2777 1
a2777 1
    stringBuffer.append(TEXT_237);
d2779 1
a2779 1
    stringBuffer.append(TEXT_238);
d2782 1
a2782 1
    stringBuffer.append(TEXT_239);
d2784 1
a2784 1
    stringBuffer.append(TEXT_240);
d2786 1
a2786 1
    stringBuffer.append(TEXT_241);
d2788 1
a2788 1
    stringBuffer.append(TEXT_242);
d2792 1
a2792 1
    stringBuffer.append(TEXT_243);
d2794 1
a2794 1
    stringBuffer.append(TEXT_244);
d2796 1
a2796 1
    stringBuffer.append(TEXT_245);
d2800 1
a2800 1
    stringBuffer.append(TEXT_246);
d2802 1
a2802 1
    stringBuffer.append(TEXT_247);
d2806 1
a2806 1
    stringBuffer.append(TEXT_248);
d2808 1
a2808 1
    stringBuffer.append(TEXT_249);
d2810 1
a2810 1
    stringBuffer.append(TEXT_250);
d2812 1
a2812 1
    stringBuffer.append(TEXT_251);
d2814 3
a2816 3
    stringBuffer.append(TEXT_252);
    stringBuffer.append(TEXT_253);
    stringBuffer.append(TEXT_254);
d2818 1
a2818 1
    stringBuffer.append(TEXT_255);
d2820 1
a2820 1
    stringBuffer.append(TEXT_256);
d2822 1
a2822 1
    stringBuffer.append(TEXT_257);
d2824 1
a2824 1
    stringBuffer.append(TEXT_258);
d2826 1
a2826 1
    stringBuffer.append(TEXT_259);
d2828 1
a2828 1
    stringBuffer.append(TEXT_260);
d2830 1
a2830 1
    stringBuffer.append(TEXT_261);
d2832 1
a2832 1
    stringBuffer.append(TEXT_262);
d2834 1
a2834 1
    stringBuffer.append(TEXT_263);
d2838 1
a2838 1
    stringBuffer.append(TEXT_264);
d2840 1
a2840 1
    stringBuffer.append(TEXT_265);
d2842 1
a2842 1
    stringBuffer.append(TEXT_266);
d2844 1
a2844 1
    stringBuffer.append(TEXT_267);
d2846 1
a2846 1
    stringBuffer.append(TEXT_268);
d2848 1
a2848 1
    stringBuffer.append(TEXT_269);
d2852 1
a2852 1
    stringBuffer.append(TEXT_270);
d2854 1
a2854 1
    stringBuffer.append(TEXT_271);
d2856 1
a2856 1
    stringBuffer.append(TEXT_272);
d2860 1
a2860 1
    stringBuffer.append(TEXT_273);
d2864 1
a2864 1
    stringBuffer.append(TEXT_274);
d2866 1
a2866 1
    stringBuffer.append(TEXT_275);
d2868 1
a2868 1
    stringBuffer.append(TEXT_276);
d2870 1
a2870 1
    stringBuffer.append(TEXT_277);
d2872 1
a2872 1
    stringBuffer.append(TEXT_278);
d2874 1
a2874 1
    stringBuffer.append(TEXT_279);
d2876 1
a2876 1
    stringBuffer.append(TEXT_280);
d2878 1
a2878 1
    stringBuffer.append(TEXT_281);
d2880 1
a2880 1
    stringBuffer.append(TEXT_282);
d2882 1
a2882 1
    stringBuffer.append(TEXT_283);
d2886 1
a2886 1
    stringBuffer.append(TEXT_284);
d2888 1
a2888 1
    stringBuffer.append(TEXT_285);
d2892 1
a2892 1
    stringBuffer.append(TEXT_286);
d2894 1
a2894 1
    stringBuffer.append(TEXT_287);
d2896 1
a2896 1
    stringBuffer.append(TEXT_288);
d2898 1
a2898 1
    stringBuffer.append(TEXT_289);
d2900 1
a2900 1
    stringBuffer.append(TEXT_290);
d2902 1
a2902 1
    stringBuffer.append(TEXT_291);
d2904 1
a2904 1
    stringBuffer.append(TEXT_292);
d2906 1
a2906 1
    stringBuffer.append(TEXT_293);
d2908 1
a2908 1
    stringBuffer.append(TEXT_294);
d2910 1
a2910 1
    stringBuffer.append(TEXT_295);
d2912 1
a2912 1
    stringBuffer.append(TEXT_296);
d2936 1
a2936 1
    stringBuffer.append(TEXT_297);
d2938 1
a2938 1
    stringBuffer.append(TEXT_298);
d2941 1
a2941 1
    stringBuffer.append(TEXT_299);
d2945 1
a2945 1
    stringBuffer.append(TEXT_300);
d2947 1
a2947 1
    stringBuffer.append(TEXT_301);
d2949 1
a2949 1
    stringBuffer.append(TEXT_302);
d2951 1
a2951 1
    stringBuffer.append(TEXT_303);
d2955 1
a2955 1
    stringBuffer.append(TEXT_304);
d2957 1
a2957 1
    stringBuffer.append(TEXT_305);
d2959 1
a2959 1
    stringBuffer.append(TEXT_306);
d2963 1
a2963 1
    stringBuffer.append(TEXT_307);
d2965 1
a2965 1
    stringBuffer.append(TEXT_308);
d2969 1
a2969 1
    stringBuffer.append(TEXT_309);
d2971 1
a2971 1
    stringBuffer.append(TEXT_310);
d2973 1
a2973 1
    stringBuffer.append(TEXT_311);
d2975 1
a2975 1
    stringBuffer.append(TEXT_312);
d2977 1
a2977 1
    stringBuffer.append(TEXT_313);
d2979 1
a2979 1
    stringBuffer.append(TEXT_314);
d2981 1
a2981 1
    stringBuffer.append(TEXT_315);
d2983 1
a2983 1
    stringBuffer.append(TEXT_316);
d2985 1
a2985 1
    stringBuffer.append(TEXT_317);
d2987 1
a2987 1
    stringBuffer.append(TEXT_318);
d2989 1
a2989 1
    stringBuffer.append(TEXT_319);
d3015 1
a3015 1
    stringBuffer.append(TEXT_320);
d3017 1
a3017 1
    stringBuffer.append(TEXT_321);
d3020 1
a3020 1
    stringBuffer.append(TEXT_322);
d3024 1
a3024 1
    stringBuffer.append(TEXT_323);
d3026 1
a3026 1
    stringBuffer.append(TEXT_324);
d3028 1
a3028 1
    stringBuffer.append(TEXT_325);
d3030 1
a3030 1
    stringBuffer.append(TEXT_326);
d3034 1
a3034 1
    stringBuffer.append(TEXT_327);
d3036 1
a3036 1
    stringBuffer.append(TEXT_328);
d3038 1
a3038 1
    stringBuffer.append(TEXT_329);
d3040 1
a3040 1
    stringBuffer.append(TEXT_330);
d3042 1
a3042 1
    stringBuffer.append(TEXT_331);
d3044 1
a3044 1
    stringBuffer.append(TEXT_332);
d3046 1
a3046 1
    stringBuffer.append(TEXT_333);
d3048 1
a3048 1
    stringBuffer.append(TEXT_334);
d3050 1
a3050 1
    stringBuffer.append(TEXT_335);
d3076 1
a3076 1
    stringBuffer.append(TEXT_336);
d3078 1
a3078 1
    stringBuffer.append(TEXT_337);
d3081 1
a3081 1
    stringBuffer.append(TEXT_338);
d3085 1
a3085 1
    stringBuffer.append(TEXT_339);
d3087 1
a3087 1
    stringBuffer.append(TEXT_340);
d3089 1
a3089 1
    stringBuffer.append(TEXT_341);
d3091 1
a3091 1
    stringBuffer.append(TEXT_342);
d3093 1
a3093 1
    stringBuffer.append(TEXT_343);
d3095 1
a3095 1
    stringBuffer.append(TEXT_344);
d3097 1
a3097 1
    stringBuffer.append(TEXT_345);
d3099 1
a3099 1
    stringBuffer.append(TEXT_346);
d3101 1
a3101 1
    stringBuffer.append(TEXT_347);
d3103 1
a3103 1
    stringBuffer.append(TEXT_348);
d3105 1
a3105 1
    stringBuffer.append(TEXT_349);
d3107 1
a3107 1
    stringBuffer.append(TEXT_350);
d3109 1
a3109 1
    stringBuffer.append(TEXT_351);
d3111 1
a3111 1
    stringBuffer.append(TEXT_352);
d3135 1
a3135 1
    stringBuffer.append(TEXT_353);
d3137 1
a3137 1
    stringBuffer.append(TEXT_354);
d3140 1
a3140 1
    stringBuffer.append(TEXT_355);
d3144 1
a3144 1
    stringBuffer.append(TEXT_356);
d3146 1
a3146 1
    stringBuffer.append(TEXT_357);
d3148 1
a3148 1
    stringBuffer.append(TEXT_358);
d3150 1
a3150 1
    stringBuffer.append(TEXT_359);
d3152 1
a3152 1
    stringBuffer.append(TEXT_360);
d3154 1
a3154 1
    stringBuffer.append(TEXT_361);
d3158 1
a3158 1
    stringBuffer.append(TEXT_362);
d3160 1
a3160 1
    stringBuffer.append(TEXT_363);
d3162 1
a3162 1
    stringBuffer.append(TEXT_364);
d3164 1
a3164 1
    stringBuffer.append(TEXT_365);
d3166 1
a3166 1
    stringBuffer.append(TEXT_366);
d3168 1
a3168 1
    stringBuffer.append(TEXT_367);
d3175 1
a3175 1
    stringBuffer.append(TEXT_368);
d3182 1
a3182 1
    stringBuffer.append(TEXT_369);
d3186 1
a3186 1
    stringBuffer.append(TEXT_370);
d3188 1
a3188 1
    stringBuffer.append(TEXT_371);
d3190 1
a3190 1
    stringBuffer.append(TEXT_372);
d3192 1
a3192 1
    stringBuffer.append(TEXT_373);
d3194 1
a3194 1
    stringBuffer.append(TEXT_374);
d3196 1
a3196 1
    stringBuffer.append(TEXT_375);
d3200 1
a3200 1
    stringBuffer.append(TEXT_376);
d3204 1
a3204 1
    stringBuffer.append(TEXT_377);
d3206 1
a3206 1
    stringBuffer.append(TEXT_378);
d3210 1
a3210 1
    stringBuffer.append(TEXT_379);
d3212 1
a3212 1
    stringBuffer.append(TEXT_380);
d3214 1
a3214 1
    stringBuffer.append(TEXT_381);
d3216 1
a3216 1
    stringBuffer.append(TEXT_382);
d3220 1
a3220 1
    stringBuffer.append(TEXT_383);
d3222 1
a3222 1
    stringBuffer.append(TEXT_384);
d3232 1
a3232 1
    stringBuffer.append(TEXT_385);
d3234 1
a3234 1
    stringBuffer.append(TEXT_386);
d3236 1
a3236 1
    stringBuffer.append(TEXT_387);
d3238 1
a3238 1
    stringBuffer.append(TEXT_388);
d3240 1
a3240 1
    stringBuffer.append(TEXT_389);
d3242 1
a3242 1
    stringBuffer.append(TEXT_390);
d3246 1
a3246 1
    stringBuffer.append(TEXT_391);
d3248 1
a3248 1
    stringBuffer.append(TEXT_392);
d3250 1
a3250 1
    stringBuffer.append(TEXT_393);
d3252 1
a3252 1
    stringBuffer.append(TEXT_394);
d3254 1
a3254 1
    stringBuffer.append(TEXT_395);
d3256 1
a3256 1
    stringBuffer.append(TEXT_396);
d3258 1
a3258 1
    stringBuffer.append(TEXT_397);
d3260 1
a3260 1
    stringBuffer.append(TEXT_398);
d3262 1
a3262 1
    stringBuffer.append(TEXT_399);
d3264 1
a3264 1
    stringBuffer.append(TEXT_400);
d3266 1
a3266 1
    stringBuffer.append(TEXT_401);
d3268 1
a3268 1
    stringBuffer.append(TEXT_402);
d3270 1
a3270 1
    stringBuffer.append(TEXT_403);
d3272 1
a3272 1
    stringBuffer.append(TEXT_404);
d3274 1
a3274 1
    stringBuffer.append(TEXT_405);
d3276 1
a3276 1
    stringBuffer.append(TEXT_406);
d3278 1
a3278 1
    stringBuffer.append(TEXT_407);
d3280 1
a3280 1
    stringBuffer.append(TEXT_408);
d3282 1
a3282 1
    stringBuffer.append(TEXT_409);
d3284 1
a3284 1
    stringBuffer.append(TEXT_410);
d3286 1
a3286 1
    stringBuffer.append(TEXT_411);
d3288 1
a3288 1
    stringBuffer.append(TEXT_412);
d3290 1
a3290 1
    stringBuffer.append(TEXT_413);
d3292 1
a3292 1
    stringBuffer.append(TEXT_414);
d3297 1
a3297 1
    stringBuffer.append(TEXT_415);
d3299 1
a3299 1
    stringBuffer.append(TEXT_416);
d3301 1
a3301 1
    stringBuffer.append(TEXT_417);
d3303 1
a3303 1
    stringBuffer.append(TEXT_418);
d3305 1
a3305 1
    stringBuffer.append(TEXT_419);
d3307 1
a3307 1
    stringBuffer.append(TEXT_420);
d3309 1
a3309 1
    stringBuffer.append(TEXT_421);
d3311 1
a3311 1
    stringBuffer.append(TEXT_422);
d3313 1
a3313 1
    stringBuffer.append(TEXT_423);
d3315 1
a3315 1
    stringBuffer.append(TEXT_424);
d3317 1
a3317 1
    stringBuffer.append(TEXT_425);
d3321 1
a3321 1
    stringBuffer.append(TEXT_426);
d3323 1
a3323 1
    stringBuffer.append(TEXT_427);
d3331 1
a3331 1
    stringBuffer.append(TEXT_428);
d3333 1
a3333 1
    stringBuffer.append(TEXT_429);
d3335 1
a3335 1
    stringBuffer.append(TEXT_430);
d3337 1
a3337 1
    stringBuffer.append(TEXT_431);
d3339 1
a3339 1
    stringBuffer.append(TEXT_432);
d3348 1
a3348 1
    stringBuffer.append(TEXT_433);
d3350 1
a3350 1
    stringBuffer.append(TEXT_434);
d3352 1
a3352 1
    stringBuffer.append(TEXT_435);
d3354 1
a3354 1
    stringBuffer.append(TEXT_436);
d3356 1
a3356 1
    stringBuffer.append(TEXT_437);
d3360 1
a3360 1
    stringBuffer.append(TEXT_438);
d3368 1
a3368 1
    stringBuffer.append(TEXT_439);
d3370 1
a3370 1
    stringBuffer.append(TEXT_440);
d3372 1
a3372 1
    stringBuffer.append(TEXT_441);
d3374 1
a3374 1
    stringBuffer.append(TEXT_442);
d3376 1
a3376 1
    stringBuffer.append(TEXT_443);
d3380 1
a3380 1
    stringBuffer.append(TEXT_444);
d3384 1
a3384 1
    stringBuffer.append(TEXT_445);
d3386 1
a3386 1
    stringBuffer.append(TEXT_446);
d3390 1
a3390 1
    stringBuffer.append(TEXT_447);
d3392 1
a3392 1
    stringBuffer.append(TEXT_448);
d3394 1
a3394 1
    stringBuffer.append(TEXT_449);
d3396 1
a3396 1
    stringBuffer.append(TEXT_450);
d3398 1
a3398 1
    stringBuffer.append(TEXT_451);
d3400 1
a3400 1
    stringBuffer.append(TEXT_452);
d3402 1
a3402 1
    stringBuffer.append(TEXT_453);
d3406 1
a3406 1
    stringBuffer.append(TEXT_454);
d3408 1
a3408 1
    stringBuffer.append(TEXT_455);
d3410 1
a3410 1
    stringBuffer.append(TEXT_456);
d3412 1
a3412 1
    stringBuffer.append(TEXT_457);
d3414 1
a3414 1
    stringBuffer.append(TEXT_458);
d3416 1
a3416 1
    stringBuffer.append(TEXT_459);
d3418 1
a3418 1
    stringBuffer.append(TEXT_460);
d3420 1
a3420 1
    stringBuffer.append(TEXT_461);
d3422 1
a3422 1
    stringBuffer.append(TEXT_462);
d3424 1
a3424 1
    stringBuffer.append(TEXT_463);
d3426 1
a3426 1
    stringBuffer.append(TEXT_464);
d3428 1
a3428 1
    stringBuffer.append(TEXT_465);
d3436 1
a3436 1
    stringBuffer.append(TEXT_466);
d3438 1
a3438 1
    stringBuffer.append(TEXT_467);
d3442 1
a3442 1
    stringBuffer.append(TEXT_468);
d3446 1
a3446 1
    stringBuffer.append(TEXT_469);
d3448 1
a3448 1
    stringBuffer.append(TEXT_470);
d3453 1
a3453 1
    stringBuffer.append(TEXT_471);
d3455 1
a3455 1
    stringBuffer.append(TEXT_472);
d3459 1
a3459 1
    stringBuffer.append(TEXT_473);
d3461 1
a3461 1
    stringBuffer.append(TEXT_474);
d3463 1
a3463 1
    stringBuffer.append(TEXT_475);
d3465 1
a3465 1
    stringBuffer.append(TEXT_476);
d3467 1
a3467 1
    stringBuffer.append(TEXT_477);
d3472 1
a3472 1
    stringBuffer.append(TEXT_478);
d3474 1
a3474 1
    stringBuffer.append(TEXT_479);
d3479 1
a3479 1
    stringBuffer.append(TEXT_480);
d3481 1
a3481 1
    stringBuffer.append(TEXT_481);
d3485 1
a3485 1
    stringBuffer.append(TEXT_482);
d3490 1
a3490 1
    stringBuffer.append(TEXT_483);
d3492 1
a3492 1
    stringBuffer.append(TEXT_484);
d3496 1
a3496 1
    stringBuffer.append(TEXT_485);
d3498 1
a3498 1
    stringBuffer.append(TEXT_486);
d3500 1
a3500 1
    stringBuffer.append(TEXT_487);
d3505 1
a3505 1
    stringBuffer.append(TEXT_488);
d3510 1
a3510 1
    stringBuffer.append(TEXT_489);
d3512 1
a3512 1
    stringBuffer.append(TEXT_490);
d3514 1
a3514 1
    stringBuffer.append(TEXT_491);
d3518 1
a3518 1
    stringBuffer.append(TEXT_492);
d3520 1
a3520 1
    stringBuffer.append(TEXT_493);
d3524 1
a3524 1
    stringBuffer.append(TEXT_494);
d3526 1
a3526 1
    stringBuffer.append(TEXT_495);
d3528 1
a3528 1
    stringBuffer.append(TEXT_496);
d3533 1
a3533 1
    stringBuffer.append(TEXT_497);
d3538 1
a3538 1
    stringBuffer.append(TEXT_498);
d3540 1
a3540 1
    stringBuffer.append(TEXT_499);
d3542 1
a3542 1
    stringBuffer.append(TEXT_500);
d3546 1
a3546 1
    stringBuffer.append(TEXT_501);
d3553 1
a3553 1
    stringBuffer.append(TEXT_502);
d3555 1
a3555 1
    stringBuffer.append(TEXT_503);
d3557 1
a3557 1
    stringBuffer.append(TEXT_504);
d3559 1
a3559 1
    stringBuffer.append(TEXT_505);
d3561 1
a3561 1
    stringBuffer.append(TEXT_506);
d3565 1
a3565 1
    stringBuffer.append(TEXT_507);
d3567 1
a3567 1
    stringBuffer.append(TEXT_508);
d3569 1
a3569 1
    stringBuffer.append(TEXT_509);
d3571 1
a3571 1
    stringBuffer.append(TEXT_510);
d3573 1
a3573 1
    stringBuffer.append(TEXT_511);
d3575 1
a3575 1
    stringBuffer.append(TEXT_512);
d3577 1
a3577 1
    stringBuffer.append(TEXT_513);
d3579 1
a3579 1
    stringBuffer.append(TEXT_514);
d3581 1
a3581 1
    stringBuffer.append(TEXT_515);
d3583 1
a3583 1
    stringBuffer.append(TEXT_516);
d3585 1
a3585 1
    stringBuffer.append(TEXT_517);
d3587 1
a3587 1
    stringBuffer.append(TEXT_518);
d3589 1
a3589 1
    stringBuffer.append(TEXT_519);
d3591 1
a3591 1
    stringBuffer.append(TEXT_520);
d3593 1
a3593 1
    stringBuffer.append(TEXT_521);
d3595 1
a3595 1
    stringBuffer.append(TEXT_522);
d3597 1
a3597 1
    stringBuffer.append(TEXT_523);
d3599 1
a3599 1
    stringBuffer.append(TEXT_524);
d3601 1
a3601 1
    stringBuffer.append(TEXT_525);
d3603 1
a3603 1
    stringBuffer.append(TEXT_526);
d3605 1
a3605 1
    stringBuffer.append(TEXT_527);
d3607 1
a3607 1
    stringBuffer.append(TEXT_528);
d3609 1
a3609 1
    stringBuffer.append(TEXT_529);
d3611 1
a3611 1
    stringBuffer.append(TEXT_530);
d3615 1
a3615 1
    stringBuffer.append(TEXT_531);
d3622 1
a3622 1
    stringBuffer.append(TEXT_532);
d3626 1
a3626 1
    stringBuffer.append(TEXT_533);
d3630 1
a3630 1
    stringBuffer.append(TEXT_534);
d3637 1
a3637 1
    stringBuffer.append(TEXT_535);
d3641 1
a3641 1
    stringBuffer.append(TEXT_536);
d3651 2
a3652 2
    stringBuffer.append(TEXT_537);
    stringBuffer.append(TEXT_538);
d3654 1
a3654 1
    stringBuffer.append(TEXT_539);
d3656 1
a3656 1
    stringBuffer.append(TEXT_540);
d3658 1
a3658 1
    stringBuffer.append(TEXT_541);
d3660 1
a3660 1
    stringBuffer.append(TEXT_542);
d3662 1
a3662 1
    stringBuffer.append(TEXT_543);
d3664 1
a3664 1
    stringBuffer.append(TEXT_544);
d3666 1
a3666 1
    stringBuffer.append(TEXT_545);
d3681 1
a3681 1
    stringBuffer.append(TEXT_546);
d3683 1
a3683 1
    stringBuffer.append(TEXT_547);
d3685 1
a3685 1
    stringBuffer.append(TEXT_548);
d3687 1
a3687 1
    stringBuffer.append(TEXT_549);
d3691 1
a3691 1
    stringBuffer.append(TEXT_550);
d3693 1
a3693 1
    stringBuffer.append(TEXT_551);
d3712 1
a3712 1
    stringBuffer.append(TEXT_552);
d3714 1
a3714 1
    stringBuffer.append(TEXT_553);
d3716 1
a3716 1
    stringBuffer.append(TEXT_554);
d3718 1
a3718 1
    stringBuffer.append(TEXT_555);
d3720 1
a3720 1
    stringBuffer.append(TEXT_556);
d3724 1
a3724 1
    stringBuffer.append(TEXT_557);
d3726 1
a3726 1
    stringBuffer.append(TEXT_558);
d3728 1
a3728 1
    stringBuffer.append(TEXT_559);
d3730 1
a3730 1
    stringBuffer.append(TEXT_560);
d3738 1
a3738 1
    stringBuffer.append(TEXT_561);
d3740 1
a3740 1
    stringBuffer.append(TEXT_562);
d3742 1
a3742 1
    stringBuffer.append(TEXT_563);
d3747 1
a3747 1
    stringBuffer.append(TEXT_564);
d3749 1
a3749 1
    stringBuffer.append(TEXT_565);
d3751 1
a3751 1
    stringBuffer.append(TEXT_566);
d3753 1
a3753 1
    stringBuffer.append(TEXT_567);
d3762 1
a3762 1
    stringBuffer.append(TEXT_568);
d3766 1
a3766 1
    stringBuffer.append(TEXT_569);
d3768 1
a3768 1
    stringBuffer.append(TEXT_570);
d3774 1
a3774 1
    stringBuffer.append(TEXT_571);
d3776 1
a3776 1
    stringBuffer.append(TEXT_572);
d3778 1
a3778 1
    stringBuffer.append(TEXT_573);
d3782 1
a3782 1
    stringBuffer.append(TEXT_574);
d3786 1
a3786 1
    stringBuffer.append(TEXT_575);
d3788 1
a3788 1
    stringBuffer.append(TEXT_576);
d3790 1
a3790 1
    stringBuffer.append(TEXT_577);
d3795 2
a3796 2
    stringBuffer.append(TEXT_578);
    stringBuffer.append(TEXT_579);
d3798 1
a3798 1
    stringBuffer.append(TEXT_580);
d3808 1
a3808 1
    stringBuffer.append(TEXT_581);
d3810 1
a3810 1
    stringBuffer.append(TEXT_582);
d3812 1
a3812 1
    stringBuffer.append(TEXT_583);
d3814 1
a3814 1
    stringBuffer.append(TEXT_584);
d3816 1
a3816 1
    stringBuffer.append(TEXT_585);
d3827 1
a3827 1
    stringBuffer.append(TEXT_586);
d3829 1
a3829 1
    stringBuffer.append(TEXT_587);
d3831 1
a3831 1
    stringBuffer.append(TEXT_588);
d3833 1
a3833 1
    stringBuffer.append(TEXT_589);
d3837 1
a3837 1
    stringBuffer.append(TEXT_590);
d3841 1
a3841 1
    stringBuffer.append(TEXT_591);
d3843 1
a3843 1
    stringBuffer.append(TEXT_592);
d3847 1
a3847 1
    stringBuffer.append(TEXT_593);
d3851 1
a3851 1
    stringBuffer.append(TEXT_594);
d3853 2
a3854 2
    stringBuffer.append(TEXT_595);
    stringBuffer.append(TEXT_596);
d3858 1
a3858 1
    stringBuffer.append(TEXT_597);
d3860 1
a3860 1
    stringBuffer.append(TEXT_598);
d3864 1
a3864 1
    stringBuffer.append(TEXT_599);
d3866 1
a3866 1
    stringBuffer.append(TEXT_600);
d3868 1
a3868 1
    stringBuffer.append(TEXT_601);
d3886 1
a3886 1
    stringBuffer.append(TEXT_602);
d3888 1
a3888 1
    stringBuffer.append(TEXT_603);
d3890 1
a3890 1
    stringBuffer.append(TEXT_604);
d3892 1
a3892 1
    stringBuffer.append(TEXT_605);
d3894 1
a3894 1
    stringBuffer.append(TEXT_606);
d3903 1
a3903 1
    stringBuffer.append(TEXT_607);
d3905 1
a3905 1
    stringBuffer.append(TEXT_608);
d3907 1
a3907 1
    stringBuffer.append(TEXT_609);
d3909 1
a3909 1
    stringBuffer.append(TEXT_610);
d3913 1
a3913 1
    stringBuffer.append(TEXT_611);
d3915 1
a3915 1
    stringBuffer.append(TEXT_612);
d3917 1
a3917 1
    stringBuffer.append(TEXT_613);
d3921 1
a3921 1
    stringBuffer.append(TEXT_614);
d3923 1
a3923 1
    stringBuffer.append(TEXT_615);
d3928 1
a3928 1
    stringBuffer.append(TEXT_616);
d3935 1
a3935 1
    stringBuffer.append(TEXT_617);
d3937 1
a3937 1
    stringBuffer.append(TEXT_618);
d3941 1
a3941 1
    stringBuffer.append(TEXT_619);
d3943 1
a3943 1
    stringBuffer.append(TEXT_620);
d3947 1
a3947 1
    stringBuffer.append(TEXT_621);
d3949 1
a3949 1
    stringBuffer.append(TEXT_622);
d3953 1
a3953 1
    stringBuffer.append(TEXT_623);
d3957 1
a3957 1
    stringBuffer.append(TEXT_624);
d3963 1
a3963 1
    stringBuffer.append(TEXT_625);
d3968 1
a3968 1
    stringBuffer.append(TEXT_626);
d3973 1
a3973 1
    stringBuffer.append(TEXT_627);
d3977 1
a3977 1
    stringBuffer.append(TEXT_628);
d3979 1
a3979 1
    stringBuffer.append(TEXT_629);
d3981 1
a3981 1
    stringBuffer.append(TEXT_630);
d3983 1
a3983 1
    stringBuffer.append(TEXT_631);
d3985 1
a3985 1
    stringBuffer.append(TEXT_632);
d3987 1
a3987 1
    stringBuffer.append(TEXT_633);
d3989 1
a3989 1
    stringBuffer.append(TEXT_634);
d3991 1
a3991 1
    stringBuffer.append(TEXT_635);
d3993 1
a3993 1
    stringBuffer.append(TEXT_636);
d3995 1
a3995 1
    stringBuffer.append(TEXT_637);
d3997 1
a3997 1
    stringBuffer.append(TEXT_638);
d3999 1
a3999 1
    stringBuffer.append(TEXT_639);
d4003 1
a4003 1
    stringBuffer.append(TEXT_640);
d4007 1
a4007 1
    stringBuffer.append(TEXT_641);
d4009 1
a4009 1
    stringBuffer.append(TEXT_642);
d4011 1
a4011 1
    stringBuffer.append(TEXT_643);
d4013 1
a4013 1
    stringBuffer.append(TEXT_644);
d4015 1
a4015 1
    stringBuffer.append(TEXT_645);
d4017 1
a4017 1
    stringBuffer.append(TEXT_646);
d4019 1
a4019 1
    stringBuffer.append(TEXT_647);
d4021 1
a4021 1
    stringBuffer.append(TEXT_648);
d4023 1
a4023 1
    stringBuffer.append(TEXT_649);
d4036 1
a4036 1
    stringBuffer.append(TEXT_650);
d4038 1
a4038 1
    stringBuffer.append(TEXT_651);
d4040 1
a4040 1
    stringBuffer.append(TEXT_652);
d4042 1
a4042 1
    stringBuffer.append(TEXT_653);
d4047 1
a4047 1
    stringBuffer.append(TEXT_654);
d4049 1
a4049 1
    stringBuffer.append(TEXT_655);
d4051 1
a4051 1
    stringBuffer.append(TEXT_656);
d4053 1
a4053 1
    stringBuffer.append(TEXT_657);
d4055 1
a4055 1
    stringBuffer.append(TEXT_658);
d4057 1
a4057 1
    stringBuffer.append(TEXT_659);
d4059 1
a4059 1
    stringBuffer.append(TEXT_660);
d4061 1
a4061 1
    stringBuffer.append(TEXT_661);
d4063 1
a4063 1
    stringBuffer.append(TEXT_662);
d4065 1
a4065 1
    stringBuffer.append(TEXT_663);
d4069 1
a4069 1
    stringBuffer.append(TEXT_664);
d4071 1
a4071 1
    stringBuffer.append(TEXT_665);
d4084 1
a4084 1
    stringBuffer.append(TEXT_666);
d4098 1
a4098 1
    stringBuffer.append(TEXT_667);
d4100 1
a4100 1
    stringBuffer.append(TEXT_668);
d4102 1
a4102 1
    stringBuffer.append(TEXT_669);
d4104 1
a4104 1
    stringBuffer.append(TEXT_670);
d4106 1
a4106 1
    stringBuffer.append(TEXT_671);
d4110 1
a4110 1
    stringBuffer.append(TEXT_672);
d4112 1
a4112 1
    stringBuffer.append(TEXT_673);
d4114 1
a4114 1
    stringBuffer.append(TEXT_674);
d4116 1
a4116 1
    stringBuffer.append(TEXT_675);
d4123 1
a4123 1
    stringBuffer.append(TEXT_676);
d4137 1
a4137 1
    stringBuffer.append(TEXT_677);
d4139 1
a4139 1
    stringBuffer.append(TEXT_678);
d4141 1
a4141 1
    stringBuffer.append(TEXT_679);
d4143 1
a4143 1
    stringBuffer.append(TEXT_680);
d4145 1
a4145 1
    stringBuffer.append(TEXT_681);
d4149 1
a4149 1
    stringBuffer.append(TEXT_682);
d4151 1
a4151 1
    stringBuffer.append(TEXT_683);
d4153 1
a4153 1
    stringBuffer.append(TEXT_684);
d4155 1
a4155 1
    stringBuffer.append(TEXT_685);
d4162 1
a4162 1
    stringBuffer.append(TEXT_686);
d4176 1
a4176 1
    stringBuffer.append(TEXT_687);
d4178 1
a4178 1
    stringBuffer.append(TEXT_688);
d4180 1
a4180 1
    stringBuffer.append(TEXT_689);
d4182 1
a4182 1
    stringBuffer.append(TEXT_690);
d4184 1
a4184 1
    stringBuffer.append(TEXT_691);
d4188 1
a4188 1
    stringBuffer.append(TEXT_692);
d4190 1
a4190 1
    stringBuffer.append(TEXT_693);
d4192 1
a4192 1
    stringBuffer.append(TEXT_694);
d4194 1
a4194 1
    stringBuffer.append(TEXT_695);
d4204 1
a4204 1
    stringBuffer.append(TEXT_696);
d4218 1
a4218 1
    stringBuffer.append(TEXT_697);
d4220 1
a4220 1
    stringBuffer.append(TEXT_698);
d4222 1
a4222 1
    stringBuffer.append(TEXT_699);
d4224 1
a4224 1
    stringBuffer.append(TEXT_700);
d4226 1
a4226 1
    stringBuffer.append(TEXT_701);
d4230 1
a4230 1
    stringBuffer.append(TEXT_702);
d4232 1
a4232 1
    stringBuffer.append(TEXT_703);
d4234 1
a4234 1
    stringBuffer.append(TEXT_704);
d4236 1
a4236 1
    stringBuffer.append(TEXT_705);
d4245 1
a4245 1
    stringBuffer.append(TEXT_706);
d4250 1
a4250 1
    stringBuffer.append(TEXT_707);
d4252 1
a4252 1
    stringBuffer.append(TEXT_708);
d4259 1
a4259 1
    stringBuffer.append(TEXT_709);
d4264 1
a4264 1
    stringBuffer.append(TEXT_710);
d4266 1
a4266 1
    stringBuffer.append(TEXT_711);
d4272 1
a4272 1
    stringBuffer.append(TEXT_712);
d4274 1
a4274 1
    stringBuffer.append(TEXT_713);
d4276 1
a4276 1
    stringBuffer.append(TEXT_714);
d4281 1
a4281 1
    stringBuffer.append(TEXT_715);
d4283 1
a4283 1
    stringBuffer.append(TEXT_716);
d4285 1
a4285 1
    stringBuffer.append(TEXT_717);
d4287 1
a4287 1
    stringBuffer.append(TEXT_718);
d4289 1
a4289 1
    stringBuffer.append(TEXT_719);
d4296 2
a4297 2
    stringBuffer.append(TEXT_720);
    stringBuffer.append(TEXT_721);
d4299 1
a4299 1
    stringBuffer.append(TEXT_722);
d4301 1
a4301 1
    stringBuffer.append(TEXT_723);
d4303 1
a4303 1
    stringBuffer.append(TEXT_724);
d4312 1
a4312 1
    stringBuffer.append(TEXT_725);
d4314 1
a4314 1
    stringBuffer.append(TEXT_726);
d4316 1
a4316 1
    stringBuffer.append(TEXT_727);
d4318 1
a4318 1
    stringBuffer.append(TEXT_728);
d4324 1
a4324 1
    stringBuffer.append(TEXT_729);
d4326 1
a4326 1
    stringBuffer.append(TEXT_730);
d4328 1
a4328 1
    stringBuffer.append(TEXT_731);
d4332 1
a4332 1
    stringBuffer.append(TEXT_732);
d4334 1
a4334 1
    stringBuffer.append(TEXT_733);
d4336 1
a4336 1
    stringBuffer.append(TEXT_734);
d4340 1
a4340 1
    stringBuffer.append(TEXT_735);
d4342 1
a4342 1
    stringBuffer.append(TEXT_736);
d4348 2
a4349 2
    stringBuffer.append(TEXT_737);
    stringBuffer.append(TEXT_738);
d4351 1
a4351 1
    stringBuffer.append(TEXT_739);
d4353 1
a4353 1
    stringBuffer.append(TEXT_740);
d4376 1
a4376 1
    stringBuffer.append(TEXT_741);
d4378 1
a4378 1
    stringBuffer.append(TEXT_742);
d4380 1
a4380 1
    stringBuffer.append(TEXT_743);
d4382 1
a4382 1
    stringBuffer.append(TEXT_744);
d4387 1
a4387 1
    stringBuffer.append(TEXT_745);
d4396 1
a4396 1
    stringBuffer.append(TEXT_746);
d4398 1
a4398 1
    stringBuffer.append(TEXT_747);
d4400 1
a4400 1
    stringBuffer.append(TEXT_748);
d4402 1
a4402 1
    stringBuffer.append(TEXT_749);
d4406 1
a4406 1
    stringBuffer.append(TEXT_750);
d4408 1
a4408 1
    stringBuffer.append(TEXT_751);
d4410 1
a4410 1
    stringBuffer.append(TEXT_752);
d4414 1
a4414 1
    stringBuffer.append(TEXT_753);
d4416 1
a4416 1
    stringBuffer.append(TEXT_754);
d4421 1
a4421 1
    stringBuffer.append(TEXT_755);
d4429 1
a4429 1
    stringBuffer.append(TEXT_756);
d4431 1
a4431 1
    stringBuffer.append(TEXT_757);
d4435 1
a4435 1
    stringBuffer.append(TEXT_758);
d4437 1
a4437 1
    stringBuffer.append(TEXT_759);
d4442 1
a4442 1
    stringBuffer.append(TEXT_760);
d4444 1
a4444 1
    stringBuffer.append(TEXT_761);
d4446 1
a4446 1
    stringBuffer.append(TEXT_762);
d4448 1
a4448 1
    stringBuffer.append(TEXT_763);
d4452 1
a4452 1
    stringBuffer.append(TEXT_764);
d4454 1
a4454 1
    stringBuffer.append(TEXT_765);
d4456 1
a4456 1
    stringBuffer.append(TEXT_766);
d4461 1
a4461 1
    stringBuffer.append(TEXT_767);
d4463 1
a4463 1
    stringBuffer.append(TEXT_768);
d4465 1
a4465 1
    stringBuffer.append(TEXT_769);
d4467 1
a4467 1
    stringBuffer.append(TEXT_770);
d4471 1
a4471 1
    stringBuffer.append(TEXT_771);
d4473 1
a4473 1
    stringBuffer.append(TEXT_772);
d4475 1
a4475 1
    stringBuffer.append(TEXT_773);
d4479 1
a4479 1
    stringBuffer.append(TEXT_774);
d4481 1
a4481 1
    stringBuffer.append(TEXT_775);
d4485 1
a4485 1
    stringBuffer.append(TEXT_776);
d4489 1
a4489 1
    stringBuffer.append(TEXT_777);
d4497 1
a4497 1
    stringBuffer.append(TEXT_778);
d4502 1
a4502 1
    stringBuffer.append(TEXT_779);
d4512 1
a4512 1
    stringBuffer.append(TEXT_780);
d4514 1
a4514 1
    stringBuffer.append(TEXT_781);
d4516 1
a4516 1
    stringBuffer.append(TEXT_782);
d4518 1
a4518 1
    stringBuffer.append(TEXT_783);
d4522 1
a4522 1
    stringBuffer.append(TEXT_784);
d4524 1
a4524 1
    stringBuffer.append(TEXT_785);
d4526 1
a4526 1
    stringBuffer.append(TEXT_786);
d4530 1
a4530 1
    stringBuffer.append(TEXT_787);
d4535 1
a4535 1
    stringBuffer.append(TEXT_788);
d4537 1
a4537 1
    stringBuffer.append(TEXT_789);
d4539 1
a4539 1
    stringBuffer.append(TEXT_790);
d4543 1
a4543 1
    stringBuffer.append(TEXT_791);
d4547 1
a4547 1
    stringBuffer.append(TEXT_792);
d4552 1
a4552 1
    stringBuffer.append(TEXT_793);
d4556 1
a4556 1
    stringBuffer.append(TEXT_794);
d4558 1
a4558 1
    stringBuffer.append(TEXT_795);
d4560 1
a4560 1
    stringBuffer.append(TEXT_796);
d4562 1
a4562 1
    stringBuffer.append(TEXT_797);
d4564 1
a4564 1
    stringBuffer.append(TEXT_798);
d4566 1
a4566 1
    stringBuffer.append(TEXT_799);
d4568 1
a4568 1
    stringBuffer.append(TEXT_800);
d4570 1
a4570 1
    stringBuffer.append(TEXT_801);
d4572 1
a4572 1
    stringBuffer.append(TEXT_802);
d4576 1
a4576 1
    stringBuffer.append(TEXT_803);
d4578 1
a4578 1
    stringBuffer.append(TEXT_804);
d4580 1
a4580 1
    stringBuffer.append(TEXT_805);
d4585 1
a4585 1
    stringBuffer.append(TEXT_806);
d4587 1
a4587 1
    stringBuffer.append(TEXT_807);
d4589 1
a4589 1
    stringBuffer.append(TEXT_808);
d4594 1
a4594 1
    stringBuffer.append(TEXT_809);
d4596 1
a4596 1
    stringBuffer.append(TEXT_810);
d4600 1
a4600 1
    stringBuffer.append(TEXT_811);
d4604 1
a4604 1
    stringBuffer.append(TEXT_812);
d4608 1
a4608 1
    stringBuffer.append(TEXT_813);
d4615 1
a4615 1
    stringBuffer.append(TEXT_814);
d4619 1
a4619 1
    stringBuffer.append(TEXT_815);
d4621 1
a4621 1
    stringBuffer.append(TEXT_816);
d4623 1
a4623 1
    stringBuffer.append(TEXT_817);
d4628 1
a4628 1
    stringBuffer.append(TEXT_818);
d4630 1
a4630 1
    stringBuffer.append(TEXT_819);
d4634 1
a4634 1
    stringBuffer.append(TEXT_820);
d4638 1
a4638 1
    stringBuffer.append(TEXT_821);
d4640 1
a4640 1
    stringBuffer.append(TEXT_822);
d4642 1
a4642 1
    stringBuffer.append(TEXT_823);
d4644 1
a4644 1
    stringBuffer.append(TEXT_824);
d4646 1
a4646 1
    stringBuffer.append(TEXT_825);
d4648 1
a4648 1
    stringBuffer.append(TEXT_826);
d4650 1
a4650 1
    stringBuffer.append(TEXT_827);
d4652 1
a4652 1
    stringBuffer.append(TEXT_828);
d4654 1
a4654 1
    stringBuffer.append(TEXT_829);
d4656 1
a4656 1
    stringBuffer.append(TEXT_830);
d4658 1
a4658 1
    stringBuffer.append(TEXT_831);
d4660 1
a4660 1
    stringBuffer.append(TEXT_832);
d4667 3
a4669 3
    stringBuffer.append(TEXT_833);
    stringBuffer.append(TEXT_834);
    stringBuffer.append(TEXT_835);
d4671 1
a4671 1
    stringBuffer.append(TEXT_836);
d4673 3
a4675 3
    stringBuffer.append(TEXT_837);
    stringBuffer.append(TEXT_838);
    stringBuffer.append(TEXT_839);
d4677 1
a4677 1
    stringBuffer.append(TEXT_840);
d4679 1
a4679 1
    stringBuffer.append(TEXT_841);
d4681 1
a4681 1
    stringBuffer.append(TEXT_842);
d4685 1
a4685 1
    stringBuffer.append(TEXT_843);
d4693 1
a4693 1
    stringBuffer.append(TEXT_844);
d4697 1
a4697 1
    stringBuffer.append(TEXT_845);
d4699 1
a4699 1
    stringBuffer.append(TEXT_846);
d4701 1
a4701 1
    stringBuffer.append(TEXT_847);
d4703 1
a4703 1
    stringBuffer.append(TEXT_848);
d4705 1
a4705 1
    stringBuffer.append(TEXT_849);
d4707 1
a4707 1
    stringBuffer.append(TEXT_850);
d4709 1
a4709 1
    stringBuffer.append(TEXT_851);
d4711 1
a4711 1
    stringBuffer.append(TEXT_852);
d4713 1
a4713 1
    stringBuffer.append(TEXT_853);
d4715 1
a4715 1
    stringBuffer.append(TEXT_854);
d4717 1
a4717 1
    stringBuffer.append(TEXT_855);
d4719 1
a4719 1
    stringBuffer.append(TEXT_856);
d4723 1
a4723 1
    stringBuffer.append(TEXT_857);
d4727 1
a4727 1
    stringBuffer.append(TEXT_858);
d4729 1
a4729 1
    stringBuffer.append(TEXT_859);
d4733 3
a4735 3
    stringBuffer.append(TEXT_860);
    stringBuffer.append(TEXT_861);
    stringBuffer.append(TEXT_862);
d4737 1
a4737 1
    stringBuffer.append(TEXT_863);
d4739 1
a4739 1
    stringBuffer.append(TEXT_864);
d4741 1
a4741 1
    stringBuffer.append(TEXT_865);
d4743 1
a4743 1
    stringBuffer.append(TEXT_866);
d4745 1
a4745 1
    stringBuffer.append(TEXT_867);
d4747 1
a4747 1
    stringBuffer.append(TEXT_868);
d4749 1
a4749 1
    stringBuffer.append(TEXT_869);
d4751 1
a4751 1
    stringBuffer.append(TEXT_870);
d4753 1
a4753 1
    stringBuffer.append(TEXT_871);
d4755 1
a4755 1
    stringBuffer.append(TEXT_872);
d4757 1
a4757 1
    stringBuffer.append(TEXT_873);
d4759 1
a4759 1
    stringBuffer.append(TEXT_874);
d4761 1
a4761 1
    stringBuffer.append(TEXT_875);
d4763 1
a4763 1
    stringBuffer.append(TEXT_876);
d4765 1
a4765 1
    stringBuffer.append(TEXT_877);
d4767 3
a4769 3
    stringBuffer.append(TEXT_878);
    stringBuffer.append(TEXT_879);
    stringBuffer.append(TEXT_880);
d4771 1
a4771 1
    stringBuffer.append(TEXT_881);
d4773 1
a4773 1
    stringBuffer.append(TEXT_882);
d4775 1
a4775 1
    stringBuffer.append(TEXT_883);
d4777 3
a4779 3
    stringBuffer.append(TEXT_884);
    stringBuffer.append(TEXT_885);
    stringBuffer.append(TEXT_886);
d4781 1
a4781 1
    stringBuffer.append(TEXT_887);
d4783 3
a4785 3
    stringBuffer.append(TEXT_888);
    stringBuffer.append(TEXT_889);
    stringBuffer.append(TEXT_890);
d4787 1
a4787 1
    stringBuffer.append(TEXT_891);
d4789 1
a4789 1
    stringBuffer.append(TEXT_892);
d4791 1
a4791 1
    stringBuffer.append(TEXT_893);
d4793 1
a4793 1
    stringBuffer.append(TEXT_894);
d4795 3
a4797 3
    stringBuffer.append(TEXT_895);
    stringBuffer.append(TEXT_896);
    stringBuffer.append(TEXT_897);
d4799 3
a4801 3
    stringBuffer.append(TEXT_898);
    stringBuffer.append(TEXT_899);
    stringBuffer.append(TEXT_900);
d4803 3
a4805 3
    stringBuffer.append(TEXT_901);
    stringBuffer.append(TEXT_902);
    stringBuffer.append(TEXT_903);
d4807 3
a4809 3
    stringBuffer.append(TEXT_904);
    stringBuffer.append(TEXT_905);
    stringBuffer.append(TEXT_906);
d4811 1
a4811 1
    stringBuffer.append(TEXT_907);
d4813 1
a4813 1
    stringBuffer.append(TEXT_908);
d4815 1
a4815 1
    stringBuffer.append(TEXT_909);
d4817 3
a4819 3
    stringBuffer.append(TEXT_910);
    stringBuffer.append(TEXT_911);
    stringBuffer.append(TEXT_912);
d4821 1
a4821 1
    stringBuffer.append(TEXT_913);
d4823 1
a4823 1
    stringBuffer.append(TEXT_914);
a4828 1
	String resolvedSemanticElement = "parent.getElement()";
d4830 1
a4830 1
    stringBuffer.append(TEXT_915);
d4834 1
a4834 1
    stringBuffer.append(TEXT_916);
d4836 1
a4836 1
    stringBuffer.append(TEXT_917);
d4838 1
a4838 1
    stringBuffer.append(TEXT_918);
d4841 1
a4841 1
    stringBuffer.append(TEXT_919);
d4843 1
a4843 1
    stringBuffer.append(TEXT_920);
d4845 1
a4845 1
    stringBuffer.append(TEXT_921);
d4848 1
a4848 1
    stringBuffer.append(TEXT_922);
d4850 1
a4850 1
    stringBuffer.append(TEXT_923);
d4852 1
a4852 1
    stringBuffer.append(TEXT_924);
d4854 1
a4854 1
    stringBuffer.append(TEXT_925);
d4856 1
a4856 1
    stringBuffer.append(TEXT_926);
d4858 1
a4858 1
    stringBuffer.append(TEXT_927);
d4860 1
a4860 1
    stringBuffer.append(TEXT_928);
d4862 1
a4862 1
    stringBuffer.append(TEXT_929);
d4867 1
a4867 1
    stringBuffer.append(TEXT_930);
d4869 1
a4869 1
    stringBuffer.append(TEXT_931);
d4871 1
a4871 1
    stringBuffer.append(TEXT_932);
d4873 11
a4883 1
    stringBuffer.append(TEXT_933);
d4885 73
a4957 1
    stringBuffer.append(TEXT_934);
d4961 9
a4969 7
    stringBuffer.append(TEXT_935);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_936);
    stringBuffer.append(importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_937);
    stringBuffer.append(next.getDomainMetaClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_938);
d4972 1
d4974 1
a4974 20
    stringBuffer.append(TEXT_939);
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
    stringBuffer.append(TEXT_940);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
    stringBuffer.append(TEXT_941);
    stringBuffer.append(next.getUniqueIdentifier());
    stringBuffer.append(TEXT_942);
    if (next.getDomainMetaClass().isExternalInterface()) {
    stringBuffer.append(TEXT_943);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_944);
    }
    stringBuffer.append(TEXT_945);
    
	TypeModelFacet facet = next.getModelFacet();
	GenFeature childFeature = facet.getChildMetaFeature();
	GenFeature containmentFeature = facet.getContainmentMetaFeature();
	if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {

    stringBuffer.append(TEXT_946);
d4976 1
a4976 1
    stringBuffer.append(TEXT_947);
d4978 1
a4978 1
    stringBuffer.append(TEXT_948);
d4980 1
a4980 3
    stringBuffer.append(TEXT_949);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_950);
d4982 1
a4982 1
    stringBuffer.append(TEXT_951);
d4984 1
a4984 1
    stringBuffer.append(TEXT_952);
d4986 1
a4986 3
    stringBuffer.append(TEXT_953);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_954);
d4988 1
a4988 1
    stringBuffer.append(TEXT_955);
d4990 1
a4990 1
    stringBuffer.append(TEXT_956);
d4994 1
a4994 1
    stringBuffer.append(TEXT_957);
d4996 1
a4996 3
    stringBuffer.append(TEXT_958);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_959);
d4998 1
a4998 1
    stringBuffer.append(TEXT_960);
d5000 1
a5000 1
    stringBuffer.append(TEXT_961);
d5014 1
a5014 1
    stringBuffer.append(TEXT_962);
d5016 1
a5016 1
    stringBuffer.append(TEXT_963);
d5018 1
a5018 1
    stringBuffer.append(TEXT_964);
d5020 1
a5020 1
    stringBuffer.append(TEXT_965);
d5024 1
a5024 1
    stringBuffer.append(TEXT_966);
d5026 1
a5026 1
    stringBuffer.append(TEXT_967);
d5028 1
a5028 1
    stringBuffer.append(TEXT_968);
d5030 1
a5030 1
    stringBuffer.append(TEXT_969);
d5032 1
a5032 1
    stringBuffer.append(TEXT_970);
d5034 1
a5034 1
    stringBuffer.append(TEXT_971);
d5036 1
a5036 1
    stringBuffer.append(TEXT_972);
d5038 1
a5038 1
    stringBuffer.append(TEXT_973);
d5040 1
a5040 1
    stringBuffer.append(TEXT_974);
d5072 1
a5072 1
    stringBuffer.append(TEXT_975);
d5075 1
a5075 1
    stringBuffer.append(TEXT_976);
d5077 1
a5077 1
    stringBuffer.append(TEXT_977);
d5079 1
a5079 1
    stringBuffer.append(TEXT_978);
d5081 1
a5081 1
    stringBuffer.append(TEXT_979);
d5083 1
a5083 1
    stringBuffer.append(TEXT_980);
d5085 1
a5085 1
    stringBuffer.append(TEXT_981);
d5088 1
a5088 1
    stringBuffer.append(TEXT_982);
d5090 1
a5090 1
    stringBuffer.append(TEXT_983);
d5092 1
a5092 1
    stringBuffer.append(TEXT_984);
d5094 1
a5094 1
    stringBuffer.append(TEXT_985);
d5097 1
a5097 1
    stringBuffer.append(TEXT_986);
d5099 1
a5099 1
    stringBuffer.append(TEXT_987);
d5101 1
a5101 1
    stringBuffer.append(TEXT_988);
d5105 1
a5105 1
    stringBuffer.append(TEXT_989);
d5107 1
a5107 1
    stringBuffer.append(TEXT_990);
d5109 1
a5109 1
    stringBuffer.append(TEXT_991);
d5111 1
a5111 1
    stringBuffer.append(TEXT_992);
d5113 1
a5113 1
    stringBuffer.append(TEXT_993);
d5115 1
a5115 1
    stringBuffer.append(TEXT_994);
d5117 1
a5117 1
    stringBuffer.append(TEXT_995);
d5121 1
a5121 1
    stringBuffer.append(TEXT_996);
d5125 1
a5125 1
    stringBuffer.append(TEXT_997);
d5130 1
d5133 1
a5133 1
    stringBuffer.append(TEXT_998);
d5137 1
a5137 1
    stringBuffer.append(TEXT_999);
d5139 1
a5139 1
    stringBuffer.append(TEXT_1000);
d5141 1
a5141 1
    stringBuffer.append(TEXT_1001);
d5143 1
a5143 1
    stringBuffer.append(TEXT_1002);
d5145 1
a5145 1
    stringBuffer.append(TEXT_1003);
d5153 1
a5153 1
    stringBuffer.append(TEXT_1004);
d5159 1
a5159 1
    stringBuffer.append(TEXT_1005);
d5161 1
a5161 1
    stringBuffer.append(TEXT_1006);
d5163 1
a5163 1
    stringBuffer.append(TEXT_1007);
d5167 1
a5167 1
    stringBuffer.append(TEXT_1008);
d5169 1
a5169 1
    stringBuffer.append(TEXT_1009);
d5171 1
a5171 1
    stringBuffer.append(TEXT_1010);
d5173 1
a5173 1
    stringBuffer.append(TEXT_1011);
d5175 1
a5175 1
    stringBuffer.append(TEXT_1012);
a5181 1
				GenFeature childFeature = modelFacet.getChildMetaFeature();
d5189 1
a5189 1
    stringBuffer.append(TEXT_1013);
d5195 1
a5195 1
    stringBuffer.append(TEXT_1014);
d5197 1
a5197 1
    stringBuffer.append(TEXT_1015);
d5199 1
a5199 1
    stringBuffer.append(TEXT_1016);
d5203 1
a5203 1
    stringBuffer.append(TEXT_1017);
d5205 1
a5205 1
    stringBuffer.append(TEXT_1018);
d5207 1
a5207 1
    stringBuffer.append(TEXT_1019);
d5209 1
a5209 1
    stringBuffer.append(TEXT_1020);
d5211 1
a5211 1
    stringBuffer.append(TEXT_1021);
d5221 38
d5263 1
a5263 1
    stringBuffer.append(TEXT_1022);
d5267 1
a5267 1
    stringBuffer.append(TEXT_1023);
d5269 1
a5269 1
    stringBuffer.append(TEXT_1024);
d5271 1
a5271 1
    stringBuffer.append(TEXT_1025);
d5273 1
a5273 1
    stringBuffer.append(TEXT_1026);
d5280 1
a5280 1
    stringBuffer.append(TEXT_1027);
d5290 1
a5290 1
    stringBuffer.append(TEXT_1028);
d5296 1
a5296 1
    stringBuffer.append(TEXT_1029);
d5298 1
a5298 1
    stringBuffer.append(TEXT_1030);
d5300 1
a5300 1
    stringBuffer.append(TEXT_1031);
d5304 1
a5304 1
    stringBuffer.append(TEXT_1032);
d5306 1
a5306 1
    stringBuffer.append(TEXT_1033);
d5308 1
a5308 1
    stringBuffer.append(TEXT_1034);
d5310 1
a5310 1
    stringBuffer.append(TEXT_1035);
d5312 1
a5312 1
    stringBuffer.append(TEXT_1036);
d5323 1
a5323 1
    stringBuffer.append(TEXT_1037);
d5327 1
a5327 1
    stringBuffer.append(TEXT_1038);
d5329 1
a5329 1
    stringBuffer.append(TEXT_1039);
d5331 1
a5331 1
    stringBuffer.append(TEXT_1040);
d5333 1
a5333 1
    stringBuffer.append(TEXT_1041);
d5340 1
a5340 1
    stringBuffer.append(TEXT_1042);
d5344 1
a5344 1
    stringBuffer.append(TEXT_1043);
d5348 1
a5348 1
    stringBuffer.append(TEXT_1044);
d5350 1
a5350 1
    stringBuffer.append(TEXT_1045);
d5352 1
a5352 1
    stringBuffer.append(TEXT_1046);
d5354 1
a5354 1
    stringBuffer.append(TEXT_1047);
d5356 1
a5356 1
    stringBuffer.append(TEXT_1048);
d5358 1
a5358 1
    stringBuffer.append(TEXT_1049);
d5360 1
a5360 1
    stringBuffer.append(TEXT_1050);
d5379 1
a5379 1
    stringBuffer.append(TEXT_1051);
d5381 1
a5381 1
    stringBuffer.append(TEXT_1052);
d5383 1
a5383 1
    stringBuffer.append(TEXT_1053);
d5385 1
a5385 1
    stringBuffer.append(TEXT_1054);
d5387 1
a5387 1
    stringBuffer.append(TEXT_1055);
d5389 1
a5389 1
    stringBuffer.append(TEXT_1056);
d5391 1
a5391 1
    stringBuffer.append(TEXT_1057);
d5397 1
a5397 1
    stringBuffer.append(TEXT_1058);
d5399 1
a5399 1
    stringBuffer.append(TEXT_1059);
d5401 1
a5401 1
    stringBuffer.append(TEXT_1060);
d5403 1
a5403 1
    stringBuffer.append(TEXT_1061);
d5407 1
a5407 1
    stringBuffer.append(TEXT_1062);
d5409 1
a5409 1
    stringBuffer.append(TEXT_1063);
d5411 1
a5411 1
    stringBuffer.append(TEXT_1064);
d5413 1
a5413 1
    stringBuffer.append(TEXT_1065);
d5415 1
a5415 1
    stringBuffer.append(TEXT_1066);
d5419 1
a5419 1
    stringBuffer.append(TEXT_1067);
d5421 1
a5421 1
    stringBuffer.append(TEXT_1068);
d5423 1
a5423 1
    stringBuffer.append(TEXT_1069);
d5425 1
a5425 1
    stringBuffer.append(TEXT_1070);
d5431 1
a5431 1
    stringBuffer.append(TEXT_1071);
d5433 1
a5433 1
    stringBuffer.append(TEXT_1072);
d5435 1
a5435 1
    stringBuffer.append(TEXT_1073);
d5437 1
a5437 1
    stringBuffer.append(TEXT_1074);
d5441 1
a5441 1
    stringBuffer.append(TEXT_1075);
d5443 1
a5443 1
    stringBuffer.append(TEXT_1076);
d5445 1
a5445 1
    stringBuffer.append(TEXT_1077);
d5447 1
a5447 1
    stringBuffer.append(TEXT_1078);
d5449 1
a5449 1
    stringBuffer.append(TEXT_1079);
d5453 1
a5453 1
    stringBuffer.append(TEXT_1080);
d5455 1
a5455 1
    stringBuffer.append(TEXT_1081);
d5457 1
a5457 1
    stringBuffer.append(TEXT_1082);
d5459 1
a5459 1
    stringBuffer.append(TEXT_1083);
d5463 1
a5463 1
    stringBuffer.append(TEXT_1084);
d5468 1
a5468 1
    stringBuffer.append(TEXT_1085);
d5470 1
a5470 1
    stringBuffer.append(TEXT_1086);
d5472 1
a5472 1
    stringBuffer.append(TEXT_1087);
d5474 1
a5474 1
    stringBuffer.append(TEXT_1088);
d5476 1
a5476 1
    stringBuffer.append(TEXT_1089);
d5478 1
a5478 1
    stringBuffer.append(TEXT_1090);
d5480 1
a5480 1
    stringBuffer.append(TEXT_1091);
d5484 1
a5484 1
    stringBuffer.append(TEXT_1092);
d5486 1
a5486 1
    stringBuffer.append(TEXT_1093);
d5488 1
a5488 1
    stringBuffer.append(TEXT_1094);
d5490 1
a5490 1
    stringBuffer.append(TEXT_1095);
d5498 1
a5498 1
    stringBuffer.append(TEXT_1096);
d5500 1
a5500 1
    stringBuffer.append(TEXT_1097);
d5502 1
a5502 1
    stringBuffer.append(TEXT_1098);
d5504 1
a5504 1
    stringBuffer.append(TEXT_1099);
d5506 1
a5506 1
    stringBuffer.append(TEXT_1100);
d5508 1
a5508 1
    stringBuffer.append(TEXT_1101);
d5510 1
a5510 1
    stringBuffer.append(TEXT_1102);
d5514 1
a5514 1
    stringBuffer.append(TEXT_1103);
d5516 1
a5516 1
    stringBuffer.append(TEXT_1104);
d5518 1
a5518 1
    stringBuffer.append(TEXT_1105);
d5520 1
a5520 1
    stringBuffer.append(TEXT_1106);
d5522 1
a5522 1
    stringBuffer.append(TEXT_1107);
d5524 1
a5524 1
    stringBuffer.append(TEXT_1108);
d5526 1
a5526 1
    stringBuffer.append(TEXT_1109);
d5528 1
a5528 1
    stringBuffer.append(TEXT_1110);
d5533 2
a5534 2
    stringBuffer.append(TEXT_1111);
    stringBuffer.append(TEXT_1112);
d5538 1
a5538 1
    stringBuffer.append(TEXT_1113);
d5540 1
a5540 1
    stringBuffer.append(TEXT_1114);
d5542 1
a5542 1
    stringBuffer.append(TEXT_1115);
d5544 1
a5544 1
    stringBuffer.append(TEXT_1116);
d5552 2
a5553 2
    stringBuffer.append(TEXT_1117);
    stringBuffer.append(TEXT_1118);
d5557 1
a5557 1
    stringBuffer.append(TEXT_1119);
d5559 1
a5559 1
    stringBuffer.append(TEXT_1120);
d5561 1
a5561 1
    stringBuffer.append(TEXT_1121);
d5588 1
a5588 1
    stringBuffer.append(TEXT_1122);
d5590 1
a5590 1
    stringBuffer.append(TEXT_1123);
d5592 1
a5592 1
    stringBuffer.append(TEXT_1124);
d5596 1
a5596 1
    stringBuffer.append(TEXT_1125);
d5598 1
a5598 1
    stringBuffer.append(TEXT_1126);
d5600 1
a5600 1
    stringBuffer.append(TEXT_1127);
d5602 1
a5602 1
    stringBuffer.append(TEXT_1128);
d5604 1
a5604 1
    stringBuffer.append(TEXT_1129);
d5606 1
a5606 1
    stringBuffer.append(TEXT_1130);
d5610 1
a5610 1
    stringBuffer.append(TEXT_1131);
d5612 1
a5612 1
    stringBuffer.append(TEXT_1132);
d5614 1
a5614 1
    stringBuffer.append(TEXT_1133);
d5616 1
a5616 1
    stringBuffer.append(TEXT_1134);
d5618 1
a5618 1
    stringBuffer.append(TEXT_1135);
d5620 1
a5620 1
    stringBuffer.append(TEXT_1136);
d5625 1
a5625 1
    stringBuffer.append(TEXT_1137);
d5627 1
a5627 1
    stringBuffer.append(TEXT_1138);
d5633 1
a5633 1
    stringBuffer.append(TEXT_1139);
d5635 1
a5635 1
    stringBuffer.append(TEXT_1140);
d5637 1
a5637 1
    stringBuffer.append(TEXT_1141);
d5639 1
a5639 1
    stringBuffer.append(TEXT_1142);
d5641 1
a5641 1
    stringBuffer.append(TEXT_1143);
d5643 1
a5643 1
    stringBuffer.append(TEXT_1144);
d5647 1
a5647 1
    stringBuffer.append(TEXT_1145);
d5649 1
a5649 1
    stringBuffer.append(TEXT_1146);
d5651 1
a5651 1
    stringBuffer.append(TEXT_1147);
d5653 1
a5653 1
    stringBuffer.append(TEXT_1148);
d5655 1
a5655 1
    stringBuffer.append(TEXT_1149);
d5657 1
a5657 1
    stringBuffer.append(TEXT_1150);
d5664 1
a5664 1
    stringBuffer.append(TEXT_1151);
d5666 1
a5666 1
    stringBuffer.append(TEXT_1152);
d5668 1
a5668 1
    stringBuffer.append(TEXT_1153);
d5670 1
a5670 1
    stringBuffer.append(TEXT_1154);
d5672 1
a5672 1
    stringBuffer.append(TEXT_1155);
d5674 1
a5674 1
    stringBuffer.append(TEXT_1156);
d5678 1
a5678 1
    stringBuffer.append(TEXT_1157);
d5680 1
a5680 1
    stringBuffer.append(TEXT_1158);
d5682 1
a5682 1
    stringBuffer.append(TEXT_1159);
d5684 1
a5684 1
    stringBuffer.append(TEXT_1160);
d5686 1
a5686 1
    stringBuffer.append(TEXT_1161);
d5688 1
a5688 1
    stringBuffer.append(TEXT_1162);
d5695 1
a5695 1
    stringBuffer.append(TEXT_1163);
d5697 1
a5697 1
    stringBuffer.append(TEXT_1164);
d5699 1
a5699 1
    stringBuffer.append(TEXT_1165);
d5701 1
a5701 1
    stringBuffer.append(TEXT_1166);
d5703 1
a5703 1
    stringBuffer.append(TEXT_1167);
d5705 1
a5705 1
    stringBuffer.append(TEXT_1168);
d5709 1
a5709 1
    stringBuffer.append(TEXT_1169);
d5711 1
a5711 1
    stringBuffer.append(TEXT_1170);
d5713 1
a5713 1
    stringBuffer.append(TEXT_1171);
d5715 1
a5715 1
    stringBuffer.append(TEXT_1172);
d5717 1
a5717 1
    stringBuffer.append(TEXT_1173);
d5719 1
a5719 1
    stringBuffer.append(TEXT_1174);
d5724 1
a5724 1
    stringBuffer.append(TEXT_1175);
d5730 1
a5730 1
    stringBuffer.append(TEXT_1176);
d5732 1
a5732 1
    stringBuffer.append(TEXT_1177);
d5734 1
a5734 1
    stringBuffer.append(TEXT_1178);
d5736 1
a5736 1
    stringBuffer.append(TEXT_1179);
d5738 1
a5738 1
    stringBuffer.append(TEXT_1180);
d5740 1
a5740 1
    stringBuffer.append(TEXT_1181);
d5744 1
a5744 1
    stringBuffer.append(TEXT_1182);
d5746 1
a5746 1
    stringBuffer.append(TEXT_1183);
d5748 1
a5748 1
    stringBuffer.append(TEXT_1184);
d5750 1
a5750 1
    stringBuffer.append(TEXT_1185);
d5752 1
a5752 1
    stringBuffer.append(TEXT_1186);
d5754 1
a5754 1
    stringBuffer.append(TEXT_1187);
d5761 1
a5761 1
    stringBuffer.append(TEXT_1188);
d5765 1
a5765 1
    stringBuffer.append(TEXT_1189);
d5769 1
a5769 1
    stringBuffer.append(TEXT_1190);
d5772 1
a5772 1
    stringBuffer.append(TEXT_1191);
d5774 1
a5774 1
    stringBuffer.append(TEXT_1192);
d5776 1
a5776 1
    stringBuffer.append(TEXT_1193);
d5779 1
a5779 1
    stringBuffer.append(TEXT_1194);
d5781 1
a5781 1
    stringBuffer.append(TEXT_1195);
d5783 1
a5783 1
    stringBuffer.append(TEXT_1196);
d5790 1
a5790 1
    stringBuffer.append(TEXT_1197);
d5794 1
a5794 1
    stringBuffer.append(TEXT_1198);
d5796 1
a5796 1
    stringBuffer.append(TEXT_1199);
d5798 1
a5798 1
    stringBuffer.append(TEXT_1200);
d5800 1
a5800 1
    stringBuffer.append(TEXT_1201);
d5802 1
a5802 1
    stringBuffer.append(TEXT_1202);
d5810 1
a5810 1
    stringBuffer.append(TEXT_1203);
d5816 1
a5816 1
    stringBuffer.append(TEXT_1204);
d5818 1
a5818 1
    stringBuffer.append(TEXT_1205);
d5820 1
a5820 1
    stringBuffer.append(TEXT_1206);
d5824 1
a5824 1
    stringBuffer.append(TEXT_1207);
d5826 1
a5826 1
    stringBuffer.append(TEXT_1208);
d5828 1
a5828 1
    stringBuffer.append(TEXT_1209);
d5830 1
a5830 1
    stringBuffer.append(TEXT_1210);
d5832 1
a5832 1
    stringBuffer.append(TEXT_1211);
d5847 1
a5847 1
    stringBuffer.append(TEXT_1212);
d5853 1
a5853 1
    stringBuffer.append(TEXT_1213);
d5855 1
a5855 1
    stringBuffer.append(TEXT_1214);
d5857 1
a5857 1
    stringBuffer.append(TEXT_1215);
d5861 1
a5861 1
    stringBuffer.append(TEXT_1216);
d5863 1
a5863 1
    stringBuffer.append(TEXT_1217);
d5865 1
a5865 1
    stringBuffer.append(TEXT_1218);
d5867 1
a5867 1
    stringBuffer.append(TEXT_1219);
d5869 1
a5869 1
    stringBuffer.append(TEXT_1220);
d5877 38
d5919 1
a5919 1
    stringBuffer.append(TEXT_1221);
d5923 1
a5923 1
    stringBuffer.append(TEXT_1222);
d5925 1
a5925 1
    stringBuffer.append(TEXT_1223);
d5927 1
a5927 1
    stringBuffer.append(TEXT_1224);
d5929 1
a5929 1
    stringBuffer.append(TEXT_1225);
d5936 1
a5936 1
    stringBuffer.append(TEXT_1226);
d5947 1
a5947 1
    stringBuffer.append(TEXT_1227);
d5953 1
a5953 1
    stringBuffer.append(TEXT_1228);
d5955 1
a5955 1
    stringBuffer.append(TEXT_1229);
d5957 1
a5957 1
    stringBuffer.append(TEXT_1230);
d5961 1
a5961 1
    stringBuffer.append(TEXT_1231);
d5963 1
a5963 1
    stringBuffer.append(TEXT_1232);
d5965 1
a5965 1
    stringBuffer.append(TEXT_1233);
d5967 1
a5967 1
    stringBuffer.append(TEXT_1234);
d5969 1
a5969 1
    stringBuffer.append(TEXT_1235);
d5980 1
a5980 1
    stringBuffer.append(TEXT_1236);
d5984 1
a5984 1
    stringBuffer.append(TEXT_1237);
d5986 1
a5986 1
    stringBuffer.append(TEXT_1238);
d5988 1
a5988 1
    stringBuffer.append(TEXT_1239);
d5990 1
a5990 1
    stringBuffer.append(TEXT_1240);
d5997 1
a5997 1
    stringBuffer.append(TEXT_1241);
d6001 1
a6001 1
    stringBuffer.append(TEXT_1242);
d6005 2
a6006 2
    stringBuffer.append(TEXT_1243);
    stringBuffer.append(TEXT_1244);
d6010 1
a6010 1
    stringBuffer.append(TEXT_1245);
d6012 1
a6012 1
    stringBuffer.append(TEXT_1246);
d6014 1
a6014 1
    stringBuffer.append(TEXT_1247);
d6016 1
a6016 1
    stringBuffer.append(TEXT_1248);
d6020 1
a6020 1
    stringBuffer.append(TEXT_1249);
d6050 1
a6050 1
    stringBuffer.append(TEXT_1250);
d6053 1
a6053 1
    stringBuffer.append(TEXT_1251);
d6055 1
a6055 1
    stringBuffer.append(TEXT_1252);
d6057 1
a6057 1
    stringBuffer.append(TEXT_1253);
d6059 1
a6059 1
    stringBuffer.append(TEXT_1254);
d6061 1
a6061 1
    stringBuffer.append(TEXT_1255);
d6063 1
a6063 1
    stringBuffer.append(TEXT_1256);
d6066 1
a6066 1
    stringBuffer.append(TEXT_1257);
d6068 1
a6068 1
    stringBuffer.append(TEXT_1258);
d6070 1
a6070 1
    stringBuffer.append(TEXT_1259);
d6072 1
a6072 1
    stringBuffer.append(TEXT_1260);
d6075 1
a6075 1
    stringBuffer.append(TEXT_1261);
d6077 1
a6077 1
    stringBuffer.append(TEXT_1262);
d6079 1
a6079 1
    stringBuffer.append(TEXT_1263);
d6083 1
a6083 1
    stringBuffer.append(TEXT_1264);
d6085 1
a6085 1
    stringBuffer.append(TEXT_1265);
d6087 1
a6087 1
    stringBuffer.append(TEXT_1266);
d6089 1
a6089 1
    stringBuffer.append(TEXT_1267);
d6091 1
a6091 1
    stringBuffer.append(TEXT_1268);
d6093 1
a6093 1
    stringBuffer.append(TEXT_1269);
d6095 32
a6126 1
    stringBuffer.append(TEXT_1270);
d6130 9
a6138 1
    stringBuffer.append(TEXT_1271);
d6141 1
a6142 1
    stringBuffer.append(TEXT_1272);
d6144 1
a6144 1
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
d6149 1
a6149 1
    stringBuffer.append(TEXT_1273);
d6153 1
a6153 1
    stringBuffer.append(TEXT_1274);
d6155 1
a6155 1
    stringBuffer.append(TEXT_1275);
d6157 1
a6157 1
    stringBuffer.append(TEXT_1276);
d6159 1
a6159 1
    stringBuffer.append(TEXT_1277);
d6166 1
a6166 1
    stringBuffer.append(TEXT_1278);
d6169 38
d6211 1
a6211 1
    stringBuffer.append(TEXT_1279);
d6215 1
a6215 1
    stringBuffer.append(TEXT_1280);
d6217 1
a6217 1
    stringBuffer.append(TEXT_1281);
d6219 1
a6219 1
    stringBuffer.append(TEXT_1282);
d6221 1
a6221 1
    stringBuffer.append(TEXT_1283);
d6228 1
a6228 1
    stringBuffer.append(TEXT_1284);
d6232 1
a6232 1
    stringBuffer.append(TEXT_1285);
d6236 1
a6236 1
    stringBuffer.append(TEXT_1286);
d6238 1
a6238 1
    stringBuffer.append(TEXT_1287);
d6240 1
a6240 1
    stringBuffer.append(TEXT_1288);
d6242 1
a6242 1
    stringBuffer.append(TEXT_1289);
d6244 1
a6244 1
    stringBuffer.append(TEXT_1290);
d6246 1
a6246 1
    stringBuffer.append(TEXT_1291);
d6248 1
a6248 1
    stringBuffer.append(TEXT_1292);
d6255 1
a6255 1
    stringBuffer.append(TEXT_1293);
d6257 1
a6257 1
    stringBuffer.append(TEXT_1294);
d6259 1
a6259 1
    stringBuffer.append(TEXT_1295);
d6261 1
a6261 1
    stringBuffer.append(TEXT_1296);
d6263 1
a6263 1
    stringBuffer.append(TEXT_1297);
d6265 1
a6265 1
    stringBuffer.append(TEXT_1298);
d6267 1
a6267 1
    stringBuffer.append(TEXT_1299);
d6271 1
a6271 1
    stringBuffer.append(TEXT_1300);
d6273 1
a6273 1
    stringBuffer.append(TEXT_1301);
d6275 1
a6275 1
    stringBuffer.append(TEXT_1302);
d6277 1
a6277 1
    stringBuffer.append(TEXT_1303);
d6284 1
a6284 1
    stringBuffer.append(TEXT_1304);
d6286 1
a6286 1
    stringBuffer.append(TEXT_1305);
d6288 1
a6288 1
    stringBuffer.append(TEXT_1306);
d6290 1
a6290 1
    stringBuffer.append(TEXT_1307);
d6292 1
a6292 1
    stringBuffer.append(TEXT_1308);
d6294 1
a6294 1
    stringBuffer.append(TEXT_1309);
d6296 1
a6296 1
    stringBuffer.append(TEXT_1310);
d6300 1
a6300 1
    stringBuffer.append(TEXT_1311);
d6302 1
a6302 1
    stringBuffer.append(TEXT_1312);
d6304 1
a6304 1
    stringBuffer.append(TEXT_1313);
d6306 1
a6306 1
    stringBuffer.append(TEXT_1314);
d6311 1
a6311 1
    stringBuffer.append(TEXT_1315);
d6316 2
a6317 2
    stringBuffer.append(TEXT_1316);
    stringBuffer.append(TEXT_1317);
d6321 1
a6321 1
    stringBuffer.append(TEXT_1318);
d6323 1
a6323 1
    stringBuffer.append(TEXT_1319);
d6325 1
a6325 1
    stringBuffer.append(TEXT_1320);
d6352 1
a6352 1
    stringBuffer.append(TEXT_1321);
d6354 1
a6354 1
    stringBuffer.append(TEXT_1322);
d6356 1
a6356 1
    stringBuffer.append(TEXT_1323);
d6360 1
a6360 1
    stringBuffer.append(TEXT_1324);
d6362 1
a6362 1
    stringBuffer.append(TEXT_1325);
d6364 1
a6364 1
    stringBuffer.append(TEXT_1326);
d6366 1
a6366 1
    stringBuffer.append(TEXT_1327);
d6368 1
a6368 1
    stringBuffer.append(TEXT_1328);
d6370 1
a6370 1
    stringBuffer.append(TEXT_1329);
d6374 1
a6374 1
    stringBuffer.append(TEXT_1330);
d6376 1
a6376 1
    stringBuffer.append(TEXT_1331);
d6378 1
a6378 1
    stringBuffer.append(TEXT_1332);
d6380 1
a6380 1
    stringBuffer.append(TEXT_1333);
d6382 1
a6382 1
    stringBuffer.append(TEXT_1334);
d6384 1
a6384 1
    stringBuffer.append(TEXT_1335);
d6389 1
a6389 1
    stringBuffer.append(TEXT_1336);
d6391 1
a6391 1
    stringBuffer.append(TEXT_1337);
d6397 1
a6397 1
    stringBuffer.append(TEXT_1338);
d6399 1
a6399 1
    stringBuffer.append(TEXT_1339);
d6401 1
a6401 1
    stringBuffer.append(TEXT_1340);
d6403 1
a6403 1
    stringBuffer.append(TEXT_1341);
d6405 1
a6405 1
    stringBuffer.append(TEXT_1342);
d6407 1
a6407 1
    stringBuffer.append(TEXT_1343);
d6411 1
a6411 1
    stringBuffer.append(TEXT_1344);
d6413 1
a6413 1
    stringBuffer.append(TEXT_1345);
d6415 1
a6415 1
    stringBuffer.append(TEXT_1346);
d6417 1
a6417 1
    stringBuffer.append(TEXT_1347);
d6419 1
a6419 1
    stringBuffer.append(TEXT_1348);
d6421 1
a6421 1
    stringBuffer.append(TEXT_1349);
d6428 1
a6428 1
    stringBuffer.append(TEXT_1350);
d6430 1
a6430 1
    stringBuffer.append(TEXT_1351);
d6432 1
a6432 1
    stringBuffer.append(TEXT_1352);
d6434 1
a6434 1
    stringBuffer.append(TEXT_1353);
d6436 1
a6436 1
    stringBuffer.append(TEXT_1354);
d6438 1
a6438 1
    stringBuffer.append(TEXT_1355);
d6442 1
a6442 1
    stringBuffer.append(TEXT_1356);
d6444 1
a6444 1
    stringBuffer.append(TEXT_1357);
d6446 1
a6446 1
    stringBuffer.append(TEXT_1358);
d6448 1
a6448 1
    stringBuffer.append(TEXT_1359);
d6450 1
a6450 1
    stringBuffer.append(TEXT_1360);
d6452 1
a6452 1
    stringBuffer.append(TEXT_1361);
d6459 1
a6459 1
    stringBuffer.append(TEXT_1362);
d6461 1
a6461 1
    stringBuffer.append(TEXT_1363);
d6463 1
a6463 1
    stringBuffer.append(TEXT_1364);
d6465 1
a6465 1
    stringBuffer.append(TEXT_1365);
d6467 1
a6467 1
    stringBuffer.append(TEXT_1366);
d6469 1
a6469 1
    stringBuffer.append(TEXT_1367);
d6473 1
a6473 1
    stringBuffer.append(TEXT_1368);
d6475 1
a6475 1
    stringBuffer.append(TEXT_1369);
d6477 1
a6477 1
    stringBuffer.append(TEXT_1370);
d6479 1
a6479 1
    stringBuffer.append(TEXT_1371);
d6481 1
a6481 1
    stringBuffer.append(TEXT_1372);
d6483 1
a6483 1
    stringBuffer.append(TEXT_1373);
d6488 1
a6488 1
    stringBuffer.append(TEXT_1374);
d6494 1
a6494 1
    stringBuffer.append(TEXT_1375);
d6496 1
a6496 1
    stringBuffer.append(TEXT_1376);
d6498 1
a6498 1
    stringBuffer.append(TEXT_1377);
d6500 1
a6500 1
    stringBuffer.append(TEXT_1378);
d6502 1
a6502 1
    stringBuffer.append(TEXT_1379);
d6504 1
a6504 1
    stringBuffer.append(TEXT_1380);
d6508 1
a6508 1
    stringBuffer.append(TEXT_1381);
d6510 1
a6510 1
    stringBuffer.append(TEXT_1382);
d6512 1
a6512 1
    stringBuffer.append(TEXT_1383);
d6514 1
a6514 1
    stringBuffer.append(TEXT_1384);
d6516 1
a6516 1
    stringBuffer.append(TEXT_1385);
d6518 1
a6518 1
    stringBuffer.append(TEXT_1386);
d6525 1
a6525 1
    stringBuffer.append(TEXT_1387);
d6529 1
a6529 1
    stringBuffer.append(TEXT_1388);
d6533 1
a6533 1
    stringBuffer.append(TEXT_1389);
d6536 1
a6536 1
    stringBuffer.append(TEXT_1390);
d6538 1
a6538 1
    stringBuffer.append(TEXT_1391);
d6540 1
a6540 1
    stringBuffer.append(TEXT_1392);
d6542 1
a6542 1
    stringBuffer.append(TEXT_1393);
d6544 1
a6544 1
    stringBuffer.append(TEXT_1394);
d6547 1
a6547 1
    stringBuffer.append(TEXT_1395);
d6549 1
a6549 1
    stringBuffer.append(TEXT_1396);
d6551 1
a6551 1
    stringBuffer.append(TEXT_1397);
d6553 1
a6553 1
    stringBuffer.append(TEXT_1398);
d6555 1
a6555 1
    stringBuffer.append(TEXT_1399);
d6557 1
a6557 1
    stringBuffer.append(TEXT_1400);
d6559 1
a6559 1
    stringBuffer.append(TEXT_1401);
d6561 1
a6561 1
    stringBuffer.append(TEXT_1402);
d6567 1
a6567 1
    stringBuffer.append(TEXT_1403);
d6569 1
a6569 1
    stringBuffer.append(TEXT_1404);
d6571 1
a6571 1
    stringBuffer.append(TEXT_1405);
d6573 1
a6573 1
    stringBuffer.append(TEXT_1406);
d6575 1
a6575 1
    stringBuffer.append(TEXT_1407);
d6577 1
a6577 1
    stringBuffer.append(TEXT_1408);
d6579 1
a6579 1
    stringBuffer.append(TEXT_1409);
d6581 1
a6581 1
    stringBuffer.append(TEXT_1410);
d6583 1
a6583 1
    stringBuffer.append(TEXT_1411);
d6585 1
a6585 1
    stringBuffer.append(TEXT_1412);
d6587 1
a6587 1
    stringBuffer.append(TEXT_1413);
d6589 1
a6589 1
    stringBuffer.append(TEXT_1414);
d6591 1
a6591 1
    stringBuffer.append(TEXT_1415);
d6595 1
a6595 1
    stringBuffer.append(TEXT_1416);
d6599 1
a6599 1
    stringBuffer.append(TEXT_1417);
d6601 1
a6601 1
    stringBuffer.append(TEXT_1418);
d6603 1
a6603 1
    stringBuffer.append(TEXT_1419);
d6605 1
a6605 1
    stringBuffer.append(TEXT_1420);
d6609 1
a6609 1
    stringBuffer.append(TEXT_1421);
d6636 1
a6636 1
    stringBuffer.append(TEXT_1422);
d6638 1
a6638 1
    stringBuffer.append(TEXT_1423);
d6640 1
a6640 1
    stringBuffer.append(TEXT_1424);
d6642 1
a6642 1
    stringBuffer.append(TEXT_1425);
d6644 1
a6644 1
    stringBuffer.append(TEXT_1426);
d6646 1
a6646 1
    stringBuffer.append(TEXT_1427);
d6648 1
a6648 1
    stringBuffer.append(TEXT_1428);
d6653 1
a6653 1
    stringBuffer.append(TEXT_1429);
d6655 1
a6655 1
    stringBuffer.append(TEXT_1430);
d6657 1
a6657 1
    stringBuffer.append(TEXT_1431);
d6659 1
a6659 1
    stringBuffer.append(TEXT_1432);
d6669 1
a6669 1
    stringBuffer.append(TEXT_1433);
d6675 1
a6675 1
    stringBuffer.append(TEXT_1434);
d6677 1
a6677 1
    stringBuffer.append(TEXT_1435);
d6679 1
a6679 1
    stringBuffer.append(TEXT_1436);
d6683 1
a6683 1
    stringBuffer.append(TEXT_1437);
d6685 1
a6685 1
    stringBuffer.append(TEXT_1438);
d6687 1
a6687 1
    stringBuffer.append(TEXT_1439);
d6689 1
a6689 1
    stringBuffer.append(TEXT_1440);
d6691 1
a6691 1
    stringBuffer.append(TEXT_1441);
d6699 1
a6699 1
    stringBuffer.append(TEXT_1442);
d6701 1
a6701 1
    stringBuffer.append(TEXT_1443);
d6703 1
a6703 1
    stringBuffer.append(TEXT_1444);
d6705 1
a6705 1
    stringBuffer.append(TEXT_1445);
d6715 38
a6752 1
    stringBuffer.append(TEXT_1446);
d6758 1
a6758 1
    stringBuffer.append(TEXT_1447);
d6760 1
a6760 1
    stringBuffer.append(TEXT_1448);
d6762 1
a6762 1
    stringBuffer.append(TEXT_1449);
d6766 1
a6766 1
    stringBuffer.append(TEXT_1450);
d6768 1
a6768 1
    stringBuffer.append(TEXT_1451);
d6770 1
a6770 1
    stringBuffer.append(TEXT_1452);
d6772 1
a6772 1
    stringBuffer.append(TEXT_1453);
d6774 1
a6774 1
    stringBuffer.append(TEXT_1454);
d6782 1
a6782 1
    stringBuffer.append(TEXT_1455);
d6784 1
a6784 1
    stringBuffer.append(TEXT_1456);
d6786 1
a6786 1
    stringBuffer.append(TEXT_1457);
d6788 1
a6788 1
    stringBuffer.append(TEXT_1458);
d6792 1
a6792 1
    stringBuffer.append(TEXT_1459);
d6796 37
d6834 1
a6834 1
    stringBuffer.append(TEXT_1460);
d6836 1
a6836 1
    stringBuffer.append(TEXT_1461);
d6838 1
a6838 1
    stringBuffer.append(TEXT_1462);
d6840 1
a6840 1
    stringBuffer.append(TEXT_1463);
d6844 2
a6845 2
    stringBuffer.append(TEXT_1464);
    stringBuffer.append(TEXT_1465);
d6849 1
a6849 1
    stringBuffer.append(TEXT_1466);
d6851 1
a6851 1
    stringBuffer.append(TEXT_1467);
d6853 1
a6853 1
    stringBuffer.append(TEXT_1468);
d6855 1
a6855 1
    stringBuffer.append(TEXT_1469);
d6859 1
a6859 1
    stringBuffer.append(TEXT_1470);
d6865 1
a6865 1
    stringBuffer.append(TEXT_1471);
d6869 1
a6869 1
    stringBuffer.append(TEXT_1472);
d6871 1
a6871 1
    stringBuffer.append(TEXT_1473);
d6873 1
a6873 1
    stringBuffer.append(TEXT_1474);
d6875 1
a6875 1
    stringBuffer.append(TEXT_1475);
d6882 1
a6882 1
    stringBuffer.append(TEXT_1476);
d6891 1
a6891 1
    stringBuffer.append(TEXT_1477);
d6893 1
a6893 1
    stringBuffer.append(TEXT_1478);
d6897 1
a6897 1
    stringBuffer.append(TEXT_1479);
d6904 1
a6904 1
    stringBuffer.append(TEXT_1480);
d6906 1
a6906 1
    stringBuffer.append(TEXT_1481);
d6908 3
a6910 3
    stringBuffer.append(TEXT_1482);
    stringBuffer.append(TEXT_1483);
    stringBuffer.append(TEXT_1484);
d6912 1
a6912 1
    stringBuffer.append(TEXT_1485);
d6914 1
a6914 1
    stringBuffer.append(TEXT_1486);
d6916 1
a6916 1
    stringBuffer.append(TEXT_1487);
d6918 1
a6918 1
    stringBuffer.append(TEXT_1488);
d6920 1
a6920 1
    stringBuffer.append(TEXT_1489);
d6922 1
a6922 1
    stringBuffer.append(TEXT_1490);
d6924 1
a6924 1
    stringBuffer.append(TEXT_1491);
d6926 1
a6926 1
    stringBuffer.append(TEXT_1492);
d6928 1
a6928 1
    stringBuffer.append(TEXT_1493);
d6930 1
a6930 1
    stringBuffer.append(TEXT_1494);
d6932 1
a6932 1
    stringBuffer.append(TEXT_1495);
d6940 1
a6940 1
    stringBuffer.append(TEXT_1496);
d6942 1
a6942 1
    stringBuffer.append(TEXT_1497);
d6944 1
a6944 1
    stringBuffer.append(TEXT_1498);
d6948 1
a6948 1
    stringBuffer.append(TEXT_1499);
d6950 1
a6950 1
    stringBuffer.append(TEXT_1500);
d6952 1
a6952 1
    stringBuffer.append(TEXT_1501);
d6954 1
a6954 1
    stringBuffer.append(TEXT_1502);
d6958 1
a6958 1
    stringBuffer.append(TEXT_1503);
d6960 1
a6960 1
    stringBuffer.append(TEXT_1504);
d6962 1
a6962 1
    stringBuffer.append(TEXT_1505);
d6964 1
a6964 1
    stringBuffer.append(TEXT_1506);
d6966 1
a6966 1
    stringBuffer.append(TEXT_1507);
d6973 1
a6973 1
    stringBuffer.append(TEXT_1508);
d6975 1
a6975 1
    stringBuffer.append(TEXT_1509);
d6977 1
a6977 1
    stringBuffer.append(TEXT_1510);
d6979 1
a6979 1
    stringBuffer.append(TEXT_1511);
d6983 1
a6983 1
    stringBuffer.append(TEXT_1512);
d6985 1
a6985 1
    stringBuffer.append(TEXT_1513);
d6987 1
a6987 1
    stringBuffer.append(TEXT_1514);
d6989 1
a6989 1
    stringBuffer.append(TEXT_1515);
d6991 1
a6991 1
    stringBuffer.append(TEXT_1516);
d6995 1
a6995 1
    stringBuffer.append(TEXT_1517);
d7000 1
a7000 1
    stringBuffer.append(TEXT_1518);
d7002 1
a7002 1
    stringBuffer.append(TEXT_1519);
d7004 1
a7004 1
    stringBuffer.append(TEXT_1520);
d7006 1
a7006 1
    stringBuffer.append(TEXT_1521);
d7010 1
a7010 1
    stringBuffer.append(TEXT_1522);
d7012 1
a7012 1
    stringBuffer.append(TEXT_1523);
d7014 1
a7014 1
    stringBuffer.append(TEXT_1524);
d7016 1
a7016 1
    stringBuffer.append(TEXT_1525);
d7018 1
a7018 1
    stringBuffer.append(TEXT_1526);
d7023 1
a7023 1
    stringBuffer.append(TEXT_1527);
d7034 2
a7035 2
    stringBuffer.append(TEXT_1528);
    stringBuffer.append(TEXT_1529);
d7037 1
a7037 1
    stringBuffer.append(TEXT_1530);
d7039 1
a7039 1
    stringBuffer.append(TEXT_1531);
d7041 3
a7043 3
    stringBuffer.append(TEXT_1532);
    stringBuffer.append(TEXT_1533);
    stringBuffer.append(TEXT_1534);
d7045 1
a7045 1
    stringBuffer.append(TEXT_1535);
d7047 1
a7047 1
    stringBuffer.append(TEXT_1536);
d7049 1
a7049 1
    stringBuffer.append(TEXT_1537);
d7051 1
a7051 1
    stringBuffer.append(TEXT_1538);
d7053 1
a7053 1
    stringBuffer.append(TEXT_1539);
d7055 1
a7055 1
    stringBuffer.append(TEXT_1540);
d7057 1
a7057 1
    stringBuffer.append(TEXT_1541);
d7059 1
a7059 1
    stringBuffer.append(TEXT_1542);
d7061 1
a7061 1
    stringBuffer.append(TEXT_1543);
d7063 1
a7063 1
    stringBuffer.append(TEXT_1544);
d7065 1
a7065 1
    stringBuffer.append(TEXT_1545);
d7071 1
a7071 1
    stringBuffer.append(TEXT_1546);
d7073 1
a7073 1
    stringBuffer.append(TEXT_1547);
d7075 1
a7075 1
    stringBuffer.append(TEXT_1548);
d7077 1
a7077 1
    stringBuffer.append(TEXT_1549);
d7079 1
a7079 1
    stringBuffer.append(TEXT_1550);
d7081 1
a7081 1
    stringBuffer.append(TEXT_1551);
d7083 1
a7083 1
    stringBuffer.append(TEXT_1552);
d7085 1
a7085 1
    stringBuffer.append(TEXT_1553);
d7087 1
a7087 1
    stringBuffer.append(TEXT_1554);
d7089 1
a7089 1
    stringBuffer.append(TEXT_1555);
d7091 1
a7091 1
    stringBuffer.append(TEXT_1556);
d7093 1
a7093 1
    stringBuffer.append(TEXT_1557);
d7095 1
a7095 1
    stringBuffer.append(TEXT_1558);
d7097 1
a7097 1
    stringBuffer.append(TEXT_1559);
d7101 1
a7101 1
    stringBuffer.append(TEXT_1560);
d7103 1
a7103 1
    stringBuffer.append(TEXT_1561);
d7105 1
a7105 1
    stringBuffer.append(TEXT_1562);
d7107 1
a7107 1
    stringBuffer.append(TEXT_1563);
d7109 1
a7109 1
    stringBuffer.append(TEXT_1564);
d7111 1
a7111 1
    stringBuffer.append(TEXT_1565);
d7113 1
a7113 1
    stringBuffer.append(TEXT_1566);
d7115 1
a7115 1
    stringBuffer.append(TEXT_1567);
d7119 1
a7119 1
    stringBuffer.append(TEXT_1568);
d7121 1
a7121 1
    stringBuffer.append(TEXT_1569);
d7125 1
a7125 1
    stringBuffer.append(TEXT_1570);
d7131 1
a7131 1
    stringBuffer.append(TEXT_1571);
d7133 1
a7133 1
    stringBuffer.append(TEXT_1572);
d7135 1
a7135 1
    stringBuffer.append(TEXT_1573);
d7137 1
a7137 1
    stringBuffer.append(TEXT_1574);
d7139 1
a7139 1
    stringBuffer.append(TEXT_1575);
d7141 1
a7141 1
    stringBuffer.append(TEXT_1576);
d7143 1
a7143 1
    stringBuffer.append(TEXT_1577);
d7145 1
a7145 1
    stringBuffer.append(TEXT_1578);
d7147 1
a7147 1
    stringBuffer.append(TEXT_1579);
d7149 1
a7149 1
    stringBuffer.append(TEXT_1580);
d7151 1
a7151 1
    stringBuffer.append(TEXT_1581);
d7158 1
a7158 1
    stringBuffer.append(TEXT_1582);
d7161 1
a7161 1
    stringBuffer.append(TEXT_1583);
d7163 1
a7163 1
    stringBuffer.append(TEXT_1584);
d7165 1
a7165 1
    stringBuffer.append(TEXT_1585);
d7167 1
a7167 1
    stringBuffer.append(TEXT_1586);
d7169 1
a7169 1
    stringBuffer.append(TEXT_1587);
d7171 1
a7171 1
    stringBuffer.append(TEXT_1588);
d7173 1
a7173 1
    stringBuffer.append(TEXT_1589);
d7175 1
a7175 1
    stringBuffer.append(TEXT_1590);
d7179 1
a7179 1
    stringBuffer.append(TEXT_1591);
d7182 1
a7182 1
    stringBuffer.append(TEXT_1592);
d7184 1
a7184 1
    stringBuffer.append(TEXT_1593);
d7186 1
a7186 1
    stringBuffer.append(TEXT_1594);
d7188 1
a7188 1
    stringBuffer.append(TEXT_1595);
d7190 1
a7190 1
    stringBuffer.append(TEXT_1596);
d7192 1
a7192 1
    stringBuffer.append(TEXT_1597);
d7196 1
a7196 1
    stringBuffer.append(TEXT_1598);
d7198 1
a7198 1
    stringBuffer.append(TEXT_1599);
d7205 1
a7205 1
    stringBuffer.append(TEXT_1600);
d7209 1
a7209 1
    stringBuffer.append(TEXT_1601);
d7213 1
a7213 1
    stringBuffer.append(TEXT_1602);
d7217 2
a7218 2
    stringBuffer.append(TEXT_1603);
    stringBuffer.append(TEXT_1604);
d7220 1
a7220 1
    stringBuffer.append(TEXT_1605);
d7222 1
a7222 1
    stringBuffer.append(TEXT_1606);
d7224 1
a7224 1
    stringBuffer.append(TEXT_1607);
d7226 1
a7226 1
    stringBuffer.append(TEXT_1608);
d7228 1
a7228 1
    stringBuffer.append(TEXT_1609);
d7230 1
a7230 1
    stringBuffer.append(TEXT_1610);
d7232 1
a7232 1
    stringBuffer.append(TEXT_1611);
d7234 1
a7234 1
    stringBuffer.append(TEXT_1612);
d7236 1
a7236 1
    stringBuffer.append(TEXT_1613);
d7238 1
a7238 1
    stringBuffer.append(TEXT_1614);
d7240 1
a7240 1
    stringBuffer.append(TEXT_1615);
d7244 3
a7246 3
    stringBuffer.append(TEXT_1616);
    stringBuffer.append(TEXT_1617);
    stringBuffer.append(TEXT_1618);
d7248 1
a7248 1
    stringBuffer.append(TEXT_1619);
d7250 1
a7250 1
    stringBuffer.append(TEXT_1620);
d7254 1
a7254 1
    stringBuffer.append(TEXT_1621);
d7256 1
a7256 1
    stringBuffer.append(TEXT_1622);
d7258 1
a7258 1
    stringBuffer.append(TEXT_1623);
d7260 1
a7260 1
    stringBuffer.append(TEXT_1624);
d7262 1
a7262 1
    stringBuffer.append(TEXT_1625);
d7264 1
a7264 1
    stringBuffer.append(TEXT_1626);
d7266 1
a7266 1
    stringBuffer.append(TEXT_1627);
d7268 1
a7268 1
    stringBuffer.append(TEXT_1628);
d7270 1
a7270 1
    stringBuffer.append(TEXT_1629);
d7272 1
a7272 1
    stringBuffer.append(TEXT_1630);
d7276 1
a7276 1
    stringBuffer.append(TEXT_1631);
d7283 1
a7283 1
    stringBuffer.append(TEXT_1632);
d7285 1
a7285 1
    stringBuffer.append(TEXT_1633);
d7287 1
a7287 1
    stringBuffer.append(TEXT_1634);
d7294 1
a7294 1
    stringBuffer.append(TEXT_1635);
d7296 1
a7296 1
    stringBuffer.append(TEXT_1636);
d7298 1
a7298 1
    stringBuffer.append(TEXT_1637);
d7309 1
a7309 1
    stringBuffer.append(TEXT_1638);
d7311 1
a7311 1
    stringBuffer.append(TEXT_1639);
d7313 1
a7313 1
    stringBuffer.append(TEXT_1640);
d7321 1
a7321 1
    stringBuffer.append(TEXT_1641);
d7323 1
a7323 1
    stringBuffer.append(TEXT_1642);
d7325 1
a7325 1
    stringBuffer.append(TEXT_1643);
d7327 1
a7327 1
    stringBuffer.append(TEXT_1644);
d7329 1
a7329 1
    stringBuffer.append(TEXT_1645);
d7331 1
a7331 1
    stringBuffer.append(TEXT_1646);
d7333 1
a7333 1
    stringBuffer.append(TEXT_1647);
d7335 1
a7335 1
    stringBuffer.append(TEXT_1648);
d7340 1
a7340 1
    stringBuffer.append(TEXT_1649);
d7342 1
a7342 1
    stringBuffer.append(TEXT_1650);
d7350 1
a7350 1
    stringBuffer.append(TEXT_1651);
d7352 1
a7352 1
    stringBuffer.append(TEXT_1652);
d7356 1
a7356 1
    stringBuffer.append(TEXT_1653);
d7358 1
a7358 1
    stringBuffer.append(TEXT_1654);
@


1.23
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d40 545
a584 545
  protected final String TEXT_19 = NL + "/*" + NL + " * ";
  protected final String TEXT_20 = NL + " */";
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_23 = " extends ";
  protected final String TEXT_24 = " implements ";
  protected final String TEXT_25 = ", ";
  protected final String TEXT_26 = " {";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_29 = ";";
  protected final String TEXT_30 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_31 = " contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_32 = " primaryShape;" + NL;
  protected final String TEXT_33 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_34 = " childNodesPane;";
  protected final String TEXT_35 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_36 = "(";
  protected final String TEXT_37 = " model) {" + NL + "\t\tassert model instanceof ";
  protected final String TEXT_38 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL;
  protected final String TEXT_39 = NL;
  protected final String TEXT_40 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_41 = " view = (";
  protected final String TEXT_42 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_43 = " view = (";
  protected final String TEXT_44 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_45 = NL;
  protected final String TEXT_46 = "\t\tinstallEditPolicy(";
  protected final String TEXT_47 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_48 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_49 = " createDeleteCommand(";
  protected final String TEXT_50 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_51 = " editingDomain = ";
  protected final String TEXT_52 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_53 = " cc = new ";
  protected final String TEXT_54 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_55 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_56 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_57 = " editingDomain) {";
  protected final String TEXT_58 = NL + "\t\t\t\t";
  protected final String TEXT_59 = " result = new ";
  protected final String TEXT_60 = "();";
  protected final String TEXT_61 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_62 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_63 = ".eINSTANCE.get";
  protected final String TEXT_64 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_65 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_66 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_67 = ".eINSTANCE.get";
  protected final String TEXT_68 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_69 = ".UNSET_VALUE));";
  protected final String TEXT_70 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_71 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_72 = ".eINSTANCE.get";
  protected final String TEXT_73 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_74 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_75 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_76 = ".eINSTANCE.get";
  protected final String TEXT_77 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_78 = ".UNSET_VALUE));";
  protected final String TEXT_79 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_80 = NL + "\t\t\t\treturn ";
  protected final String TEXT_81 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_82 = ".eINSTANCE.get";
  protected final String TEXT_83 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_84 = NL + "\t\t\t\treturn ";
  protected final String TEXT_85 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_86 = ".eINSTANCE.get";
  protected final String TEXT_87 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_88 = ".UNSET_VALUE);";
  protected final String TEXT_89 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_90 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_91 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_92 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_93 = " getCreateCommand(";
  protected final String TEXT_94 = " request) {";
  protected final String TEXT_95 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_96 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_97 = " requestEx = (";
  protected final String TEXT_98 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_99 = " result = new ";
  protected final String TEXT_100 = "();" + NL + "\t\t\t\t\tfor(int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_101 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_102 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_103 = "Command((View) getModel(), requestEx";
  protected final String TEXT_104 = ", " + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_105 = ")getConstraintFor(request)";
  protected final String TEXT_106 = "));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_107 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_108 = "(";
  protected final String TEXT_109 = ".getEditingDomain(((View) getModel()).getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_110 = NL + "\t\t\t\treturn ";
  protected final String TEXT_111 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_112 = NL + "\t\t\tprotected ";
  protected final String TEXT_113 = " createChangeConstraintCommand(final ";
  protected final String TEXT_114 = " request, final ";
  protected final String TEXT_115 = " child, Object constraint) {" + NL + "\t\t\t\tif (!isDirectChild(child)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_116 = ".INSTANCE;" + NL + "\t\t\t\t}";
  protected final String TEXT_117 = NL;
  protected final String TEXT_118 = "\t\t\t\tfinal ";
  protected final String TEXT_119 = " node = (";
  protected final String TEXT_120 = ") child.getModel();" + NL + "\t\t\t\t";
  protected final String TEXT_121 = " emfCommand = new ";
  protected final String TEXT_122 = "(\"Change node position/size\") {" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_123 = " moveDelta;" + NL + "\t\t\t\t\tprivate ";
  protected final String TEXT_124 = " resizeDelta;" + NL + "" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected boolean prepare() {" + NL + "\t\t\t\t\t\tif (node.getLayoutConstraint() instanceof ";
  protected final String TEXT_125 = " == false) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_126 = " bounds = (";
  protected final String TEXT_127 = ") node.getLayoutConstraint();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_128 = " original = new ";
  protected final String TEXT_129 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_130 = " referenceFigure = ((";
  protected final String TEXT_131 = ")child).getFigure();" + NL + "\t\t\t\t\t\treferenceFigure.translateToAbsolute(original);" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_132 = " transformed = request.getTransformedRectangle(original);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(transformed);" + NL + "\t\t\t\t\t\treferenceFigure.translateToRelative(original);" + NL + "\t\t\t\t\t\tresizeDelta = transformed.getSize().expand(original.getSize().negate());" + NL + "\t\t\t\t\t\tmoveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\texecute(moveDelta.getNegated(), resizeDelta.getNegated());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\texecute(moveDelta, resizeDelta);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t\t\texecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprivate void execute(";
  protected final String TEXT_133 = " move, ";
  protected final String TEXT_134 = " resize) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_135 = " bounds = (";
  protected final String TEXT_136 = ") node.getLayoutConstraint();" + NL + "\t\t\t\t\t\tbounds.setX(bounds.getX() + move.x);" + NL + "\t\t\t\t\t\tbounds.setY(bounds.getY() + move.y);" + NL + "\t\t\t\t\t\tbounds.setWidth(bounds.getWidth() + resize.width);" + NL + "\t\t\t\t\t\tbounds.setHeight(bounds.getHeight() + resize.height);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_137 = "(";
  protected final String TEXT_138 = ".getEditingDomain(node.getDiagram().getElement()), emfCommand);" + NL + "\t\t\t}" + NL + "\t\t\tprotected Command createChangeConstraintCommand(";
  protected final String TEXT_139 = " child, Object constraint) {" + NL + "\t\t\t\tassert false;" + NL + "\t\t\t\treturn ";
  protected final String TEXT_140 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_141 = NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_142 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_143 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_144 = " createChangeConstraintCommand(";
  protected final String TEXT_145 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_146 = ".INSTANCE;" + NL + "\t\t\t}";
  protected final String TEXT_147 = NL + "\t\t\tprotected ";
  protected final String TEXT_148 = " createChildEditPolicy(";
  protected final String TEXT_149 = " child) {";
  protected final String TEXT_150 = NL + "\t\t\t\tif (isDirectChild(child)) {" + NL + "\t\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t\t}";
  protected final String TEXT_151 = NL + "\t\t\t\treturn new ";
  protected final String TEXT_152 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_153 = " getTargetEditPart(";
  protected final String TEXT_154 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_155 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_156 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_157 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_158 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_159 = " getReconnectTargetCommand(";
  protected final String TEXT_160 = " request) {";
  protected final String TEXT_161 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_162 = ".INSTANCE;";
  protected final String TEXT_163 = NL + "\t\t\t\t";
  protected final String TEXT_164 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_165 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_166 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_167 = " edge = (";
  protected final String TEXT_168 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_169 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_170 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_171 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_172 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_173 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_174 = NL + "\t\t\t\tcase ";
  protected final String TEXT_175 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_176 = "TargetCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_177 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_178 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_179 = "(";
  protected final String TEXT_180 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_181 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_182 = " getReconnectSourceCommand(";
  protected final String TEXT_183 = " request) {";
  protected final String TEXT_184 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_185 = ".INSTANCE;";
  protected final String TEXT_186 = NL + "\t\t\t\t";
  protected final String TEXT_187 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_188 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_189 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_190 = " edge = (";
  protected final String TEXT_191 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_192 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_193 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_194 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_195 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_196 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_197 = NL + "\t\t\t\tcase ";
  protected final String TEXT_198 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_199 = "SourceCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_200 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_201 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_202 = "(";
  protected final String TEXT_203 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_204 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_205 = " getConnectionCreateCommand(";
  protected final String TEXT_206 = " request) {";
  protected final String TEXT_207 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_208 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_209 = " requestEx = (";
  protected final String TEXT_210 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_211 = " result = new ";
  protected final String TEXT_212 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_213 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_214 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_215 = "StartCommand(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_216 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_217 = " wrappedResult = new ";
  protected final String TEXT_218 = "(";
  protected final String TEXT_219 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_220 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_221 = " getConnectionCompleteCommand(";
  protected final String TEXT_222 = " request) {";
  protected final String TEXT_223 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_224 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_225 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_226 = " requestEx = (";
  protected final String TEXT_227 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_228 = " result = new ";
  protected final String TEXT_229 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_230 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_231 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_232 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_233 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_234 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_235 = "(";
  protected final String TEXT_236 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_237 = NL + "\t\t\t\treturn ";
  protected final String TEXT_238 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_239 = NL + "\t\t//This edit part understands the direct edit request and delegates it to the appropriate label, so no command is needed here." + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_240 = ".DIRECT_EDIT_ROLE, new ";
  protected final String TEXT_241 = "() {" + NL + "\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_242 = " request) {" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_243 = " getDirectEditCommand(";
  protected final String TEXT_244 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_245 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_246 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_247 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_248 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_249 = " invisibleRectangle = new ";
  protected final String TEXT_250 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_251 = "());" + NL + "\t\t";
  protected final String TEXT_252 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_253 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_254 = NL + NL + "\t\t";
  protected final String TEXT_255 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL;
  protected final String TEXT_256 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_257 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_258 = " result = new ";
  protected final String TEXT_259 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_260 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_261 = " createNodeShape() {";
  protected final String TEXT_262 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_263 = "()";
  protected final String TEXT_264 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_265 = ";";
  protected final String TEXT_266 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_267 = ";";
  protected final String TEXT_268 = NL + "\t\t";
  protected final String TEXT_269 = " figure = new ";
  protected final String TEXT_270 = "();";
  protected final String TEXT_271 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_272 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_273 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_274 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_275 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_276 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_277 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_278 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_279 = " view = (";
  protected final String TEXT_280 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_281 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_282 = " decorationPane = new ";
  protected final String TEXT_283 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_284 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_285 = " imageFigure = new ";
  protected final String TEXT_286 = "(";
  protected final String TEXT_287 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_288 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_289 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_290 = " setupContentPane(";
  protected final String TEXT_291 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_292 = NL + "\t\t\t";
  protected final String TEXT_293 = " layout = new ";
  protected final String TEXT_294 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_295 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_296 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_297 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_298 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_299 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_300 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_301 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_302 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_303 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_304 = " childEditPart) {";
  protected final String TEXT_305 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_306 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_307 = ") childEditPart).";
  protected final String TEXT_308 = "(getPrimaryShape().";
  protected final String TEXT_309 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_310 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_311 = ") {" + NL + "\t\t\t";
  protected final String TEXT_312 = " pane = getPrimaryShape().";
  protected final String TEXT_313 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_314 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_315 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_316 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_317 = ") {" + NL + "\t\t\t";
  protected final String TEXT_318 = " pane = getPrimaryShape().";
  protected final String TEXT_319 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_320 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_321 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_322 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_323 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_324 = NL + "\t\tfor(";
  protected final String TEXT_325 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_326 = " nextChild = (";
  protected final String TEXT_327 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_328 = ".getVisualID(nextChild) == ";
  protected final String TEXT_329 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_330 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_331 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_332 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_333 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_334 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_335 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_336 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_337 = " getLabelEditPart(";
  protected final String TEXT_338 = " req) {" + NL + "\t\t";
  protected final String TEXT_339 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_340 = " view = (";
  protected final String TEXT_341 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_342 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_343 = NL + "\t\t\t\tcase ";
  protected final String TEXT_344 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_345 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_346 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_347 = " childEditPart) {";
  protected final String TEXT_348 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_349 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_350 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_351 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_352 = " root = (";
  protected final String TEXT_353 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_354 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_355 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_356 = " childEditPart) {";
  protected final String TEXT_357 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_358 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_359 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_360 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_361 = " childEditPart, int index) {";
  protected final String TEXT_362 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_363 = " labelFigure = ((";
  protected final String TEXT_364 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_365 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_366 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_367 = " childFigure = ((";
  protected final String TEXT_368 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_369 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_370 = " childEditPart) {";
  protected final String TEXT_371 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_372 = " labelFigure = ((";
  protected final String TEXT_373 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_374 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_375 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_376 = " childFigure = ((";
  protected final String TEXT_377 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_378 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_379 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_380 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_381 = " childEditPart = (";
  protected final String TEXT_382 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_383 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_384 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_385 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_386 = ";" + NL + "\t\t";
  protected final String TEXT_387 = " bounds = (";
  protected final String TEXT_388 = ") node.getLayoutConstraint();" + NL + "\t\tint x = bounds.getX();" + NL + "\t\tint y = bounds.getY();" + NL + "\t\tint width = bounds.getWidth();" + NL + "\t\tint height = bounds.getHeight();" + NL + "\t\tif (width < 0) {" + NL + "\t\t\tx -= width;" + NL + "\t\t\twidth = -width;" + NL + "\t\t}" + NL + "\t\tif (height < 0) {" + NL + "\t\t\ty -= height;" + NL + "\t\t\theight = -height;" + NL + "\t\t}" + NL + "\t\t((";
  protected final String TEXT_389 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_390 = "(x, y, width, height));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_391 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_392 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_393 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_394 = " getSourceConnectionAnchor(";
  protected final String TEXT_395 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_396 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_397 = " getSourceConnectionAnchor(";
  protected final String TEXT_398 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_399 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_400 = "  getTargetConnectionAnchor(";
  protected final String TEXT_401 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_402 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_403 = "  getTargetConnectionAnchor(";
  protected final String TEXT_404 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_405 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {" + NL + "\t\tif (";
  protected final String TEXT_406 = ".class == key) {" + NL + "\t\t\treturn getTreeEditPartAdapter();" + NL + "\t\t}";
  protected final String TEXT_407 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter myTreeEditPartAdapter;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeEditPartAdapter getTreeEditPartAdapter() {" + NL + "\t\tif (myTreeEditPartAdapter == null) {" + NL + "\t\t\tmyTreeEditPartAdapter = new TreeEditPartAdapter();" + NL + "\t\t}" + NL + "\t\treturn myTreeEditPartAdapter;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_408 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_409 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_410 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_411 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_412 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_413 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_414 = NL;
  protected final String TEXT_415 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_416 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_417 = " domainModelEditDomain = ";
  protected final String TEXT_418 = ".getEditingDomain(";
  protected final String TEXT_419 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_420 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_421 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_422 = " {";
  protected final String TEXT_423 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_424 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_425 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_426 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_427 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_428 = " createFilter() {";
  protected final String TEXT_429 = NL + "\t\t\t";
  protected final String TEXT_430 = " filter = ";
  protected final String TEXT_431 = ".createFeatureFilter(";
  protected final String TEXT_432 = ".eINSTANCE.get";
  protected final String TEXT_433 = "());";
  protected final String TEXT_434 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_435 = ".createFeatureFilter(";
  protected final String TEXT_436 = ".eINSTANCE.get";
  protected final String TEXT_437 = "()));";
  protected final String TEXT_438 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_439 = ".createNotifierFilter(";
  protected final String TEXT_440 = ".getElement()));";
  protected final String TEXT_441 = NL + "\t\t\t";
  protected final String TEXT_442 = " filter = ";
  protected final String TEXT_443 = ".createNotifierFilter(";
  protected final String TEXT_444 = ".getElement());";
  protected final String TEXT_445 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_446 = NL + "\t\t\t";
  protected final String TEXT_447 = " filter = getConstrainedChildrenFilter();";
  protected final String TEXT_448 = NL + "\t\t\t";
  protected final String TEXT_449 = " filter = ";
  protected final String TEXT_450 = ".NOT_TOUCH;";
  protected final String TEXT_451 = NL + "\t\t\treturn filter;";
  protected final String TEXT_452 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_453 = " getCreateNotationalElementCommand(";
  protected final String TEXT_454 = " descriptor) {";
  protected final String TEXT_455 = NL;
  protected final String TEXT_456 = "\t\t\t";
  protected final String TEXT_457 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_458 = NL + "\t\t\tcase ";
  protected final String TEXT_459 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_460 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_461 = "(";
  protected final String TEXT_462 = ", domainElement, ";
  protected final String TEXT_463 = "new ";
  protected final String TEXT_464 = "(0, 0, ";
  protected final String TEXT_465 = ", ";
  protected final String TEXT_466 = ")";
  protected final String TEXT_467 = NL + "null";
  protected final String TEXT_468 = ", ";
  protected final String TEXT_469 = ".INSTANCE);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_470 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_471 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_472 = " getSemanticChildNodes() {";
  protected final String TEXT_473 = NL;
  protected final String TEXT_474 = NL + "\treturn ";
  protected final String TEXT_475 = ".EMPTY_LIST;";
  protected final String TEXT_476 = NL + "\t";
  protected final String TEXT_477 = " result = new ";
  protected final String TEXT_478 = "();";
  protected final String TEXT_479 = NL + "\t";
  protected final String TEXT_480 = " viewObject = ";
  protected final String TEXT_481 = ";" + NL + "\t";
  protected final String TEXT_482 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_483 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_484 = NL + "\tfor(";
  protected final String TEXT_485 = " it = ";
  protected final String TEXT_486 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_487 = ") it.next();";
  protected final String TEXT_488 = NL + "\tnextValue = (";
  protected final String TEXT_489 = ")";
  protected final String TEXT_490 = ";";
  protected final String TEXT_491 = NL + "\tnodeVID = ";
  protected final String TEXT_492 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_493 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_494 = NL + "\tcase ";
  protected final String TEXT_495 = ".VISUAL_ID: {";
  protected final String TEXT_496 = NL + "\tif (";
  protected final String TEXT_497 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_498 = NL + "\t\tresult.add(new ";
  protected final String TEXT_499 = "(nextValue, nodeVID));";
  protected final String TEXT_500 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_501 = NL + "\t\t}";
  protected final String TEXT_502 = NL + "\t}";
  protected final String TEXT_503 = NL + "\t}";
  protected final String TEXT_504 = NL + "\treturn result;";
  protected final String TEXT_505 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_506 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_507 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_508 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_509 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_510 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_511 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_512 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_513 = " domainModelEditDomain = ";
  protected final String TEXT_514 = ".getEditingDomain(";
  protected final String TEXT_515 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_516 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_517 = NL;
  protected final String TEXT_518 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_519 = " domainModelEditDomain = ";
  protected final String TEXT_520 = ".getEditingDomain(";
  protected final String TEXT_521 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_522 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_523 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_524 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_525 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_526 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_527 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_528 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_529 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_530 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_531 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_532 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_533 = ".createEventTypeFilter(";
  protected final String TEXT_534 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_535 = ".createEventTypeFilter(";
  protected final String TEXT_536 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_537 = ".createEventTypeFilter(";
  protected final String TEXT_538 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_539 = ".createEventTypeFilter(";
  protected final String TEXT_540 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_541 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_542 = " createFilter() {";
  protected final String TEXT_543 = NL;
  protected final String TEXT_544 = NL + "\t\t\t";
  protected final String TEXT_545 = " filter = ";
  protected final String TEXT_546 = ".createFeatureFilter(";
  protected final String TEXT_547 = ".eINSTANCE.get";
  protected final String TEXT_548 = "());";
  protected final String TEXT_549 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_550 = ".createFeatureFilter(";
  protected final String TEXT_551 = ".eINSTANCE.get";
  protected final String TEXT_552 = "()));";
  protected final String TEXT_553 = NL;
  protected final String TEXT_554 = NL + "\t\t\t";
  protected final String TEXT_555 = " filter = ";
  protected final String TEXT_556 = ".createFeatureFilter(";
  protected final String TEXT_557 = ".eINSTANCE.get";
  protected final String TEXT_558 = "());";
  protected final String TEXT_559 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_560 = ".createFeatureFilter(";
  protected final String TEXT_561 = ".eINSTANCE.get";
  protected final String TEXT_562 = "()));";
  protected final String TEXT_563 = NL;
d587 154
a740 154
  protected final String TEXT_566 = ".createFeatureFilter(";
  protected final String TEXT_567 = ".eINSTANCE.get";
  protected final String TEXT_568 = "());";
  protected final String TEXT_569 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_570 = ".createFeatureFilter(";
  protected final String TEXT_571 = ".eINSTANCE.get";
  protected final String TEXT_572 = "()));";
  protected final String TEXT_573 = NL;
  protected final String TEXT_574 = NL + "\t\t\t";
  protected final String TEXT_575 = " filter = ";
  protected final String TEXT_576 = ".createFeatureFilter(";
  protected final String TEXT_577 = ".eINSTANCE.get";
  protected final String TEXT_578 = "());";
  protected final String TEXT_579 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_580 = ".createFeatureFilter(";
  protected final String TEXT_581 = ".eINSTANCE.get";
  protected final String TEXT_582 = "()));";
  protected final String TEXT_583 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_584 = NL + "\t\t\t";
  protected final String TEXT_585 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_586 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_587 = NL + "\t\t\t";
  protected final String TEXT_588 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_589 = NL + "\t\t\t";
  protected final String TEXT_590 = " filter = ";
  protected final String TEXT_591 = ".NOT_TOUCH;";
  protected final String TEXT_592 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_593 = " getCreateNotationalElementCommand(";
  protected final String TEXT_594 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_595 = " linkDescriptor = (";
  protected final String TEXT_596 = ") descriptor;";
  protected final String TEXT_597 = NL;
  protected final String TEXT_598 = "\t\t\t";
  protected final String TEXT_599 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_600 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\t";
  protected final String TEXT_601 = " decorator = null;" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_602 = NL + "\t\t\tcase ";
  protected final String TEXT_603 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_604 = ") {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_605 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_606 = NL + "\t\t\tcase ";
  protected final String TEXT_607 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tdecorator = ";
  protected final String TEXT_608 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_609 = NL + "\t\t\t}" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_610 = "(";
  protected final String TEXT_611 = ", linkDescriptor.getElement(), sourceView, targetView, decorator);";
  protected final String TEXT_612 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_613 = " getSemanticChildLinks() {";
  protected final String TEXT_614 = NL;
  protected final String TEXT_615 = "\t";
  protected final String TEXT_616 = " result = new ";
  protected final String TEXT_617 = "();";
  protected final String TEXT_618 = NL + "\t";
  protected final String TEXT_619 = " modelObject = ";
  protected final String TEXT_620 = ".getElement();" + NL + "\t";
  protected final String TEXT_621 = " nextValue;";
  protected final String TEXT_622 = NL + "\tint linkVID;";
  protected final String TEXT_623 = NL + "\tfor(";
  protected final String TEXT_624 = " it = ";
  protected final String TEXT_625 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_626 = ") it.next();";
  protected final String TEXT_627 = NL + "\tnextValue = (";
  protected final String TEXT_628 = ")";
  protected final String TEXT_629 = ";";
  protected final String TEXT_630 = NL + "\tlinkVID = ";
  protected final String TEXT_631 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_632 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_633 = NL + "\tcase ";
  protected final String TEXT_634 = ".VISUAL_ID: {";
  protected final String TEXT_635 = NL + "\tif (";
  protected final String TEXT_636 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_637 = NL + "\t\t";
  protected final String TEXT_638 = " source = (";
  protected final String TEXT_639 = ")";
  protected final String TEXT_640 = ";";
  protected final String TEXT_641 = NL + "\t\t";
  protected final String TEXT_642 = " source = ";
  protected final String TEXT_643 = ".getElement();";
  protected final String TEXT_644 = NL + "\t\t";
  protected final String TEXT_645 = " target = (";
  protected final String TEXT_646 = ")";
  protected final String TEXT_647 = ";";
  protected final String TEXT_648 = NL + "\t\t";
  protected final String TEXT_649 = " target = ";
  protected final String TEXT_650 = ".getElement();";
  protected final String TEXT_651 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_652 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_653 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_654 = NL + "\t}";
  protected final String TEXT_655 = NL + "\t}";
  protected final String TEXT_656 = NL + "\t}";
  protected final String TEXT_657 = NL + "\tfor(";
  protected final String TEXT_658 = " it = ";
  protected final String TEXT_659 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_660 = ") it.next();";
  protected final String TEXT_661 = NL + "\tnextValue = (";
  protected final String TEXT_662 = ")";
  protected final String TEXT_663 = ";";
  protected final String TEXT_664 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_665 = NL + "\t\tresult.add(new ";
  protected final String TEXT_666 = "(modelObject, nextValue, null, ";
  protected final String TEXT_667 = ".VISUAL_ID));";
  protected final String TEXT_668 = NL + "\t}";
  protected final String TEXT_669 = NL + "\t}";
  protected final String TEXT_670 = NL + "\treturn result;";
  protected final String TEXT_671 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_672 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_673 = " result = new ";
  protected final String TEXT_674 = "();" + NL + "\t\t\t";
  protected final String TEXT_675 = " allLinks = ";
  protected final String TEXT_676 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_677 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_678 = " next = (";
  protected final String TEXT_679 = ") it.next();";
  protected final String TEXT_680 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_681 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_682 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_683 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_684 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_685 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_686 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_687 = ".VISUAL_ID:";
  protected final String TEXT_688 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_689 = NL + "\t\t\t\t} else {";
  protected final String TEXT_690 = NL + "\t\t\t\t}";
  protected final String TEXT_691 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_692 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_693 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_694 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_695 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_696 = ".VISUAL_ID:";
  protected final String TEXT_697 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_698 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_699 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_700 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_701 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_702 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_703 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_704 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_705 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_706 = " domainModelEditDomain = ";
  protected final String TEXT_707 = ".getEditingDomain(";
  protected final String TEXT_708 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_709 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_710 = NL;
  protected final String TEXT_711 = NL;
  protected final String TEXT_712 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_713 = " domainModelRefresher = new ";
  protected final String TEXT_714 = "(this);" + NL;
  protected final String TEXT_715 = NL;
  protected final String TEXT_716 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_717 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_718 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_719 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
d742 178
a919 178
  protected final String TEXT_721 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_722 = NL + "\t\t";
  protected final String TEXT_723 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_724 = ") ";
  protected final String TEXT_725 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_726 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_727 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_728 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_729 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_730 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_731 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_732 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_733 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_734 = "\t" + NL + "\t}";
  protected final String TEXT_735 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_736 = " createdFont;";
  protected final String TEXT_737 = "\t" + NL;
  protected final String TEXT_738 = NL;
  protected final String TEXT_739 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_740 = " style = (";
  protected final String TEXT_741 = ")  ";
  protected final String TEXT_742 = ".getStyle(";
  protected final String TEXT_743 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_744 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_745 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_746 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_747 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_748 = " style = (";
  protected final String TEXT_749 = ")  ";
  protected final String TEXT_750 = ".getStyle(";
  protected final String TEXT_751 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_752 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_753 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_754 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_755 = " createdBackgroundColor;" + NL;
  protected final String TEXT_756 = NL;
  protected final String TEXT_757 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_758 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_759 = " feature, ";
  protected final String TEXT_760 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_761 = "();";
  protected final String TEXT_762 = NL;
  protected final String TEXT_763 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_764 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_765 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_766 = NL;
  protected final String TEXT_767 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_768 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_769 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_770 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_771 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_772 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_773 = NL;
  protected final String TEXT_774 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_775 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_776 = NL;
  protected final String TEXT_777 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_778 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_779 = NL;
  protected final String TEXT_780 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_781 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_782 = NL;
  protected final String TEXT_783 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_784 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_785 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_786 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_787 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_788 = NL;
  protected final String TEXT_789 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_790 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_791 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_792 = NL;
  protected final String TEXT_793 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_794 = "static ";
  protected final String TEXT_795 = "class Create";
  protected final String TEXT_796 = "Command extends ";
  protected final String TEXT_797 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_798 = " notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_799 = "Command(";
  protected final String TEXT_800 = " parent, ";
  protected final String TEXT_801 = " request";
  protected final String TEXT_802 = ", ";
  protected final String TEXT_803 = " constraint";
  protected final String TEXT_804 = ") {" + NL + "\t\t\t";
  protected final String TEXT_805 = " domainModelEditDomain = ";
  protected final String TEXT_806 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_807 = NL + "\t\t\t";
  protected final String TEXT_808 = " createdDomainElement = ";
  protected final String TEXT_809 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_810 = ".eINSTANCE.get";
  protected final String TEXT_811 = "());";
  protected final String TEXT_812 = NL + "\t\t\t";
  protected final String TEXT_813 = " createdDomainElement = ";
  protected final String TEXT_814 = ".eINSTANCE.create";
  protected final String TEXT_815 = "();";
  protected final String TEXT_816 = NL + "\t\t\t";
  protected final String TEXT_817 = NL + "\t\t\t";
  protected final String TEXT_818 = ".";
  protected final String TEXT_819 = ".initializeElement(";
  protected final String TEXT_820 = "(";
  protected final String TEXT_821 = ") ";
  protected final String TEXT_822 = "createdDomainElement);";
  protected final String TEXT_823 = NL + "\t\t\t";
  protected final String TEXT_824 = " compoundCommand = new ";
  protected final String TEXT_825 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_826 = ".create(domainModelEditDomain, ";
  protected final String TEXT_827 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_828 = ".eINSTANCE.get";
  protected final String TEXT_829 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_830 = ".create(domainModelEditDomain, ";
  protected final String TEXT_831 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_832 = ".eINSTANCE.get";
  protected final String TEXT_833 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_834 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_835 = ".create(domainModelEditDomain, ";
  protected final String TEXT_836 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_837 = ".eINSTANCE.get";
  protected final String TEXT_838 = "(), createdDomainElement);";
  protected final String TEXT_839 = NL + "\t\t\tconstraint = constraint.union(new ";
  protected final String TEXT_840 = "(";
  protected final String TEXT_841 = ", ";
  protected final String TEXT_842 = "));";
  protected final String TEXT_843 = NL + "\t\t\tthis.notationAddCommand = new ";
  protected final String TEXT_844 = "(parent, ";
  protected final String TEXT_845 = "(";
  protected final String TEXT_846 = ") ";
  protected final String TEXT_847 = "createdDomainElement, " + NL + "\t\t\t\t";
  protected final String TEXT_848 = "constraint";
  protected final String TEXT_849 = "null";
  protected final String TEXT_850 = ", ";
  protected final String TEXT_851 = ".INSTANCE);" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_852 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_853 = "SourceCommand extends ";
  protected final String TEXT_854 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_855 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_856 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_857 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_858 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_859 = "SourceCommand(";
  protected final String TEXT_860 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_861 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_862 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_863 = "SourceCommand(";
  protected final String TEXT_864 = " edge, ";
  protected final String TEXT_865 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_866 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_867 = " domainModelEditDomain = ";
  protected final String TEXT_868 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_869 = " command = new ";
  protected final String TEXT_870 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_871 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_872 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_873 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_874 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_875 = NL + "\t\t\treturn false;";
  protected final String TEXT_876 = NL + "\t\t\t";
  protected final String TEXT_877 = " container = (";
  protected final String TEXT_878 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_879 = ".eINSTANCE.get";
  protected final String TEXT_880 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_881 = NL;
  protected final String TEXT_882 = NL + "\t\tif (";
  protected final String TEXT_883 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_884 = NL + "\t\t}";
  protected final String TEXT_885 = NL + "\t\tif (";
  protected final String TEXT_886 = ".size() >= ";
  protected final String TEXT_887 = ".eINSTANCE.get";
  protected final String TEXT_888 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_889 = NL + "\t\t}";
  protected final String TEXT_890 = NL;
  protected final String TEXT_891 = NL + "\t\tif (";
  protected final String TEXT_892 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_893 = NL + "\t\t}";
  protected final String TEXT_894 = NL + "\t\tif (";
  protected final String TEXT_895 = ".size() >= ";
  protected final String TEXT_896 = ".eINSTANCE.get";
  protected final String TEXT_897 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_898 = NL + "\t\t}";
d921 5
a925 5
  protected final String TEXT_900 = NL + "\t\t\tif(!";
  protected final String TEXT_901 = ".canCreateLink(";
  protected final String TEXT_902 = ", ";
  protected final String TEXT_903 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_904 = NL + "\t\t\treturn true;";
d927 49
a975 49
  protected final String TEXT_906 = NL + "\t\tif (";
  protected final String TEXT_907 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_908 = NL + "\t\t}";
  protected final String TEXT_909 = NL + "\t\tif (";
  protected final String TEXT_910 = ".size() >= ";
  protected final String TEXT_911 = ".eINSTANCE.get";
  protected final String TEXT_912 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_913 = NL + "\t\t}";
  protected final String TEXT_914 = NL;
  protected final String TEXT_915 = NL + "\t\t\tif(!";
  protected final String TEXT_916 = ".canCreateLink(";
  protected final String TEXT_917 = ", ";
  protected final String TEXT_918 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_919 = NL + "\t\t\treturn true;";
  protected final String TEXT_920 = NL + "\t\t\treturn false;";
  protected final String TEXT_921 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_922 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_923 = " editingDomain = ";
  protected final String TEXT_924 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_925 = " result = new ";
  protected final String TEXT_926 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_927 = "(edge, newSource));";
  protected final String TEXT_928 = NL + "\t\t\t";
  protected final String TEXT_929 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_930 = ".eINSTANCE.get";
  protected final String TEXT_931 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_932 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_933 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_934 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_935 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_936 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), edge.getElement()));";
  protected final String TEXT_937 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_938 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), ";
  protected final String TEXT_939 = ".UNSET_VALUE));";
  protected final String TEXT_940 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_941 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_942 = ".eINSTANCE.get";
  protected final String TEXT_943 = "(), edge.getElement()));";
  protected final String TEXT_944 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_945 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_946 = ".eINSTANCE.get";
  protected final String TEXT_947 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_948 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_949 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_950 = ".eINSTANCE.get";
  protected final String TEXT_951 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_952 = ".UNSET_VALUE));";
  protected final String TEXT_953 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_954 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
d977 4
a980 4
  protected final String TEXT_956 = "(), edge.getElement()));";
  protected final String TEXT_957 = NL + "\t\t\t}";
  protected final String TEXT_958 = NL + "\t\t\tresult.append(";
  protected final String TEXT_959 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
d982 58
a1039 58
  protected final String TEXT_961 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_962 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_963 = ".eINSTANCE.get";
  protected final String TEXT_964 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_965 = NL + "\t\t\tresult.append(";
  protected final String TEXT_966 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_967 = ".eINSTANCE.get";
  protected final String TEXT_968 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_969 = NL + "\t\t\tresult.append(";
  protected final String TEXT_970 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_971 = ".eINSTANCE.get";
  protected final String TEXT_972 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_973 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_974 = ".eINSTANCE.get";
  protected final String TEXT_975 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_976 = NL + "\t\t\tresult.append(";
  protected final String TEXT_977 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_978 = ".eINSTANCE.get";
  protected final String TEXT_979 = "(), ";
  protected final String TEXT_980 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_981 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_982 = ".eINSTANCE.get";
  protected final String TEXT_983 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_984 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_985 = NL;
  protected final String TEXT_986 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_987 = " getRelationshipContainer(";
  protected final String TEXT_988 = " element, ";
  protected final String TEXT_989 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_990 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_991 = NL;
  protected final String TEXT_992 = NL + "\t\t\tprivate ";
  protected final String TEXT_993 = " createDomainModelRemoveCommand(";
  protected final String TEXT_994 = " editingDomain) {";
  protected final String TEXT_995 = NL + "\t\t\t\t";
  protected final String TEXT_996 = " result = new ";
  protected final String TEXT_997 = "();";
  protected final String TEXT_998 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_999 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1000 = ".getElement().eContainer(), ";
  protected final String TEXT_1001 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1002 = ".getElement()));";
  protected final String TEXT_1003 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1004 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1005 = ".getElement().eContainer(), ";
  protected final String TEXT_1006 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1007 = ".UNSET_VALUE));";
  protected final String TEXT_1008 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1009 = ".INSTANCE;";
  protected final String TEXT_1010 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1011 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1012 = ".getElement().eContainer(), ";
  protected final String TEXT_1013 = ".eINSTANCE.get";
  protected final String TEXT_1014 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1015 = ".getElement()));";
  protected final String TEXT_1016 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1017 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1018 = ".getElement().eContainer(), ";
d1041 146
a1186 146
  protected final String TEXT_1020 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1021 = ".UNSET_VALUE));";
  protected final String TEXT_1022 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1023 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1024 = ".getElement(), ";
  protected final String TEXT_1025 = ".eINSTANCE.get";
  protected final String TEXT_1026 = "(), ";
  protected final String TEXT_1027 = ".getSource().getElement()));";
  protected final String TEXT_1028 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1029 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1030 = ".getElement(), ";
  protected final String TEXT_1031 = ".eINSTANCE.get";
  protected final String TEXT_1032 = "(), ";
  protected final String TEXT_1033 = ".UNSET_VALUE));";
  protected final String TEXT_1034 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1035 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1036 = ".getElement(), ";
  protected final String TEXT_1037 = ".eINSTANCE.get";
  protected final String TEXT_1038 = "(), ";
  protected final String TEXT_1039 = ".getTarget().getElement()));";
  protected final String TEXT_1040 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1041 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1042 = ".getElement(), ";
  protected final String TEXT_1043 = ".eINSTANCE.get";
  protected final String TEXT_1044 = "(), ";
  protected final String TEXT_1045 = ".UNSET_VALUE));";
  protected final String TEXT_1046 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1047 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1048 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1049 = ".getSource().getElement(), ";
  protected final String TEXT_1050 = ".eINSTANCE.get";
  protected final String TEXT_1051 = "(), ";
  protected final String TEXT_1052 = ".getTarget().getElement());";
  protected final String TEXT_1053 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1054 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1055 = ".getSource().getElement(), ";
  protected final String TEXT_1056 = ".eINSTANCE.get";
  protected final String TEXT_1057 = "(), ";
  protected final String TEXT_1058 = ".UNSET_VALUE);";
  protected final String TEXT_1059 = NL + "\t\t\t}";
  protected final String TEXT_1060 = NL + "\t}" + NL;
  protected final String TEXT_1061 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1062 = "StartCommand extends ";
  protected final String TEXT_1063 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1064 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1065 = "StartCommand(";
  protected final String TEXT_1066 = " requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_1067 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1068 = NL + "\t\t\treturn false;";
  protected final String TEXT_1069 = NL + "\t\t\t";
  protected final String TEXT_1070 = " container = (";
  protected final String TEXT_1071 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1072 = ".eINSTANCE.get";
  protected final String TEXT_1073 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1074 = NL;
  protected final String TEXT_1075 = NL + "\t\tif (";
  protected final String TEXT_1076 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1077 = NL + "\t\t}";
  protected final String TEXT_1078 = NL + "\t\tif (";
  protected final String TEXT_1079 = ".size() >= ";
  protected final String TEXT_1080 = ".eINSTANCE.get";
  protected final String TEXT_1081 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1082 = NL + "\t\t}";
  protected final String TEXT_1083 = NL;
  protected final String TEXT_1084 = NL + "\t\tif (";
  protected final String TEXT_1085 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1086 = NL + "\t\t}";
  protected final String TEXT_1087 = NL + "\t\tif (";
  protected final String TEXT_1088 = ".size() >= ";
  protected final String TEXT_1089 = ".eINSTANCE.get";
  protected final String TEXT_1090 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1091 = NL + "\t\t}";
  protected final String TEXT_1092 = NL;
  protected final String TEXT_1093 = NL + "\t\t\tif(!";
  protected final String TEXT_1094 = ".canCreateLink(";
  protected final String TEXT_1095 = ", ";
  protected final String TEXT_1096 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1097 = NL + "\t\t\treturn true;";
  protected final String TEXT_1098 = NL;
  protected final String TEXT_1099 = NL + "\t\tif (";
  protected final String TEXT_1100 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1101 = NL + "\t\t}";
  protected final String TEXT_1102 = NL + "\t\tif (";
  protected final String TEXT_1103 = ".size() >= ";
  protected final String TEXT_1104 = ".eINSTANCE.get";
  protected final String TEXT_1105 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1106 = NL + "\t\t}";
  protected final String TEXT_1107 = NL;
  protected final String TEXT_1108 = NL + "\t\t\tif(!";
  protected final String TEXT_1109 = ".canCreateLink(";
  protected final String TEXT_1110 = ", ";
  protected final String TEXT_1111 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1112 = NL + "\t\t\treturn true;";
  protected final String TEXT_1113 = NL + "\t\t\treturn false;";
  protected final String TEXT_1114 = NL + "\t\t}";
  protected final String TEXT_1115 = NL;
  protected final String TEXT_1116 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1117 = " getRelationshipContainer(";
  protected final String TEXT_1118 = " element, ";
  protected final String TEXT_1119 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1120 = NL + NL + "\t}";
  protected final String TEXT_1121 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1122 = "TargetCommand extends ";
  protected final String TEXT_1123 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1124 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1125 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1126 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1127 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1128 = "TargetCommand(";
  protected final String TEXT_1129 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1130 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1131 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1132 = "TargetCommand(";
  protected final String TEXT_1133 = " edge, ";
  protected final String TEXT_1134 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1135 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1136 = " domainModelEditDomain = ";
  protected final String TEXT_1137 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1138 = " command = new ";
  protected final String TEXT_1139 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1140 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1141 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1142 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1143 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_1144 = NL;
  protected final String TEXT_1145 = NL + "\t\t\tif(!";
  protected final String TEXT_1146 = ".canCreateLink(";
  protected final String TEXT_1147 = ", ";
  protected final String TEXT_1148 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1149 = NL + "\t\t\treturn true;";
  protected final String TEXT_1150 = NL;
  protected final String TEXT_1151 = NL + "\t\t\tif(!";
  protected final String TEXT_1152 = ".canCreateLink(";
  protected final String TEXT_1153 = ", ";
  protected final String TEXT_1154 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1155 = NL + "\t\t\treturn true;";
  protected final String TEXT_1156 = NL + "\t\t\treturn false;";
  protected final String TEXT_1157 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1158 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1159 = " editingDomain = ";
  protected final String TEXT_1160 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1161 = " result = new ";
  protected final String TEXT_1162 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1163 = "(edge, newTarget));";
  protected final String TEXT_1164 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1165 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
d1188 146
a1333 146
  protected final String TEXT_1167 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1168 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1169 = ".eINSTANCE.get";
  protected final String TEXT_1170 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1171 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1172 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1173 = ".eINSTANCE.get";
  protected final String TEXT_1174 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1175 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1176 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1177 = ".eINSTANCE.get";
  protected final String TEXT_1178 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1179 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1180 = ".eINSTANCE.get";
  protected final String TEXT_1181 = "(), newTarget.getElement()));";
  protected final String TEXT_1182 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1183 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1184 = ".eINSTANCE.get";
  protected final String TEXT_1185 = "(), newTarget.getElement()));";
  protected final String TEXT_1186 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_1187 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1188 = NL;
  protected final String TEXT_1189 = NL + "\t\t\tprivate ";
  protected final String TEXT_1190 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1191 = " editingDomain) {";
  protected final String TEXT_1192 = NL + "\t\t\t\t";
  protected final String TEXT_1193 = " result = new ";
  protected final String TEXT_1194 = "();";
  protected final String TEXT_1195 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1196 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1197 = ".getElement().eContainer(), ";
  protected final String TEXT_1198 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1199 = ".getElement()));";
  protected final String TEXT_1200 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1201 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1202 = ".getElement().eContainer(), ";
  protected final String TEXT_1203 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1204 = ".UNSET_VALUE));";
  protected final String TEXT_1205 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1206 = ".INSTANCE;";
  protected final String TEXT_1207 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1208 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1209 = ".getElement().eContainer(), ";
  protected final String TEXT_1210 = ".eINSTANCE.get";
  protected final String TEXT_1211 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1212 = ".getElement()));";
  protected final String TEXT_1213 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1214 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1215 = ".getElement().eContainer(), ";
  protected final String TEXT_1216 = ".eINSTANCE.get";
  protected final String TEXT_1217 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1218 = ".UNSET_VALUE));";
  protected final String TEXT_1219 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1220 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1221 = ".getElement(), ";
  protected final String TEXT_1222 = ".eINSTANCE.get";
  protected final String TEXT_1223 = "(), ";
  protected final String TEXT_1224 = ".getSource().getElement()));";
  protected final String TEXT_1225 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1226 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1227 = ".getElement(), ";
  protected final String TEXT_1228 = ".eINSTANCE.get";
  protected final String TEXT_1229 = "(), ";
  protected final String TEXT_1230 = ".UNSET_VALUE));";
  protected final String TEXT_1231 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1232 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1233 = ".getElement(), ";
  protected final String TEXT_1234 = ".eINSTANCE.get";
  protected final String TEXT_1235 = "(), ";
  protected final String TEXT_1236 = ".getTarget().getElement()));";
  protected final String TEXT_1237 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1238 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1239 = ".getElement(), ";
  protected final String TEXT_1240 = ".eINSTANCE.get";
  protected final String TEXT_1241 = "(), ";
  protected final String TEXT_1242 = ".UNSET_VALUE));";
  protected final String TEXT_1243 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1244 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1245 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1246 = ".getSource().getElement(), ";
  protected final String TEXT_1247 = ".eINSTANCE.get";
  protected final String TEXT_1248 = "(), ";
  protected final String TEXT_1249 = ".getTarget().getElement());";
  protected final String TEXT_1250 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1251 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1252 = ".getSource().getElement(), ";
  protected final String TEXT_1253 = ".eINSTANCE.get";
  protected final String TEXT_1254 = "(), ";
  protected final String TEXT_1255 = ".UNSET_VALUE);";
  protected final String TEXT_1256 = NL + "\t\t\t}";
  protected final String TEXT_1257 = NL + "\t}" + NL;
  protected final String TEXT_1258 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1259 = "Command extends ";
  protected final String TEXT_1260 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1261 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1262 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1263 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1264 = "Command(";
  protected final String TEXT_1265 = " requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1266 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1267 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1268 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1269 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1270 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1271 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1272 = NL + "\t\t\t";
  protected final String TEXT_1273 = " createdDomainElement = ";
  protected final String TEXT_1274 = ".eINSTANCE.create";
  protected final String TEXT_1275 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1276 = "(";
  protected final String TEXT_1277 = ") ";
  protected final String TEXT_1278 = "createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1279 = NL + "\t\t\t";
  protected final String TEXT_1280 = ".";
  protected final String TEXT_1281 = ".initializeElement(";
  protected final String TEXT_1282 = "(";
  protected final String TEXT_1283 = ") ";
  protected final String TEXT_1284 = "createdDomainElement);";
  protected final String TEXT_1285 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1286 = NL + "\t\t\t";
  protected final String TEXT_1287 = ".INSTANCE.decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1288 = " domainModelEditDomain = ";
  protected final String TEXT_1289 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1290 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1291 = NL + "\t\t\t";
  protected final String TEXT_1292 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1293 = ".eINSTANCE.get";
  protected final String TEXT_1294 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1295 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1296 = ".eINSTANCE.get";
  protected final String TEXT_1297 = "(), createdDomainElement));";
  protected final String TEXT_1298 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1299 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1300 = ".eINSTANCE.get";
  protected final String TEXT_1301 = "(), createdDomainElement));";
  protected final String TEXT_1302 = NL;
  protected final String TEXT_1303 = NL + "\t\tif (";
  protected final String TEXT_1304 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1305 = NL + "\t\t}";
  protected final String TEXT_1306 = NL + "\t\tif (";
  protected final String TEXT_1307 = ".size() >= ";
  protected final String TEXT_1308 = ".eINSTANCE.get";
  protected final String TEXT_1309 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1310 = NL + "\t\t}";
  protected final String TEXT_1311 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1312 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
d1335 54
a1388 54
  protected final String TEXT_1314 = "(), source.getElement()));";
  protected final String TEXT_1315 = NL;
  protected final String TEXT_1316 = NL + "\t\tif (";
  protected final String TEXT_1317 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1318 = NL + "\t\t}";
  protected final String TEXT_1319 = NL + "\t\tif (";
  protected final String TEXT_1320 = ".size() >= ";
  protected final String TEXT_1321 = ".eINSTANCE.get";
  protected final String TEXT_1322 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1323 = NL + "\t\t}";
  protected final String TEXT_1324 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1325 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1326 = ".eINSTANCE.get";
  protected final String TEXT_1327 = "(), target.getElement()));";
  protected final String TEXT_1328 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1329 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1330 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1331 = ".eINSTANCE.get";
  protected final String TEXT_1332 = "(), target.getElement());";
  protected final String TEXT_1333 = NL + "\t\t}" + NL;
  protected final String TEXT_1334 = NL;
  protected final String TEXT_1335 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1336 = " getRelationshipContainer(";
  protected final String TEXT_1337 = " element, ";
  protected final String TEXT_1338 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1339 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1340 = NL;
  protected final String TEXT_1341 = NL + "\t\t\tif(!";
  protected final String TEXT_1342 = ".canCreateLink(";
  protected final String TEXT_1343 = ", ";
  protected final String TEXT_1344 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1345 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1346 = NL;
  protected final String TEXT_1347 = NL;
  protected final String TEXT_1348 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1349 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_1350 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_1351 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_1352 = NL;
  protected final String TEXT_1353 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1354 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_1355 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_1356 = " createDeleteCommand(";
  protected final String TEXT_1357 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_1358 = " editingDomain = ";
  protected final String TEXT_1359 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_1360 = " cc = new ";
  protected final String TEXT_1361 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_1362 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_1363 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_1364 = " editingDomain) {";
  protected final String TEXT_1365 = NL + "\t\t\t\t";
  protected final String TEXT_1366 = " result = new ";
  protected final String TEXT_1367 = "();";
d1390 38
a1427 38
  protected final String TEXT_1369 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1370 = ".eINSTANCE.get";
  protected final String TEXT_1371 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1372 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1373 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1374 = ".eINSTANCE.get";
  protected final String TEXT_1375 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1376 = ".UNSET_VALUE));";
  protected final String TEXT_1377 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1378 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1379 = ".eINSTANCE.get";
  protected final String TEXT_1380 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1381 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1382 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1383 = ".eINSTANCE.get";
  protected final String TEXT_1384 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1385 = ".UNSET_VALUE));";
  protected final String TEXT_1386 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1387 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1388 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1389 = ".eINSTANCE.get";
  protected final String TEXT_1390 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_1391 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1392 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1393 = ".eINSTANCE.get";
  protected final String TEXT_1394 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1395 = ".UNSET_VALUE);";
  protected final String TEXT_1396 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1397 = NL;
  protected final String TEXT_1398 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1399 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1400 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1401 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1402 = NL;
  protected final String TEXT_1403 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1404 = " getDirectEditCommand(";
  protected final String TEXT_1405 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1406 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
d1429 97
a1525 97
  protected final String TEXT_1408 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1409 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1410 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1411 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1412 = " editingDomain = ";
  protected final String TEXT_1413 = ".getEditingDomain(";
  protected final String TEXT_1414 = ".getDiagram().getElement());";
  protected final String TEXT_1415 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1416 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1417 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1418 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1419 = " createDomainModelCommand(";
  protected final String TEXT_1420 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1421 = " element = ";
  protected final String TEXT_1422 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1423 = " feature = (";
  protected final String TEXT_1424 = ") ";
  protected final String TEXT_1425 = ".eINSTANCE.get";
  protected final String TEXT_1426 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1427 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1428 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1429 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1430 = " result = new ";
  protected final String TEXT_1431 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1432 = " values = new ";
  protected final String TEXT_1433 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1434 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1435 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1436 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_1437 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_1438 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_1439 = NL + "\t\t\t\t\t}";
  protected final String TEXT_1440 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1441 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1442 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1443 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1444 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1445 = " createDomainModelCommand(";
  protected final String TEXT_1446 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1447 = " element = ";
  protected final String TEXT_1448 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1449 = " result = new ";
  protected final String TEXT_1450 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1451 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1452 = " ";
  protected final String TEXT_1453 = "feature = (";
  protected final String TEXT_1454 = ") ";
  protected final String TEXT_1455 = ".eINSTANCE.get";
  protected final String TEXT_1456 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1457 = ".parseValue(feature, values[";
  protected final String TEXT_1458 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1459 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1460 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1461 = " ";
  protected final String TEXT_1462 = "values = new ";
  protected final String TEXT_1463 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1464 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1465 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1466 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1467 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1468 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1469 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1470 = NL + "\t\t\t\t});";
  protected final String TEXT_1471 = NL + "\t\t}" + NL;
  protected final String TEXT_1472 = NL;
  protected final String TEXT_1473 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1474 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1475 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1476 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1477 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1478 = "(this, ";
  protected final String TEXT_1479 = ".class, new ";
  protected final String TEXT_1480 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1481 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1482 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1483 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1484 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1485 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1486 = NL;
  protected final String TEXT_1487 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1488 = " domainModelRefresher = new ";
  protected final String TEXT_1489 = "(this);" + NL;
  protected final String TEXT_1490 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1491 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1492 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1493 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1494 = " nextChild = (";
  protected final String TEXT_1495 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1496 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1497 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1498 = ") ";
  protected final String TEXT_1499 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1500 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1501 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1502 = ".eINSTANCE.get";
  protected final String TEXT_1503 = "(), labelRefresher);";
  protected final String TEXT_1504 = NL + "\t\t\tregisterRefresher(";
d1527 149
a1675 18
  protected final String TEXT_1506 = "(), labelRefresher);";
  protected final String TEXT_1507 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1508 = ".eINSTANCE.get";
  protected final String TEXT_1509 = "(), labelRefresher);";
  protected final String TEXT_1510 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1511 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1512 = " result = new ";
  protected final String TEXT_1513 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1514 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1515 = " next = (";
  protected final String TEXT_1516 = ") it.next();" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1517 = ".getVisualID(next)) {";
  protected final String TEXT_1518 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1519 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1520 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1521 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1522 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1523 = NL;
d1767 27
d1950 1
a1950 1
    stringBuffer.append(TEXT_18);
d1955 1
a1955 1
    stringBuffer.append(TEXT_19);
d1957 1
a1957 1
    stringBuffer.append(TEXT_20);
d1959 1
a1959 1
    stringBuffer.append(TEXT_21);
d1964 1
a1964 1
    stringBuffer.append(TEXT_22);
d1966 1
a1966 1
    stringBuffer.append(TEXT_23);
d1968 1
a1968 1
    stringBuffer.append(TEXT_24);
d1970 1
a1970 1
    stringBuffer.append(TEXT_25);
d1972 1
a1972 1
    stringBuffer.append(TEXT_26);
a1974 1
    stringBuffer.append(TEXT_27);
d1976 1
d1978 1
a1978 1
    stringBuffer.append(TEXT_29);
a1979 2
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d1983 2
d1988 1
a1988 1
    stringBuffer.append(TEXT_33);
d1990 1
a1990 1
    stringBuffer.append(TEXT_34);
d1994 1
a1994 1
    stringBuffer.append(TEXT_35);
d1996 1
a1996 1
    stringBuffer.append(TEXT_36);
d1998 1
a1998 1
    stringBuffer.append(TEXT_37);
a1999 1
    stringBuffer.append(TEXT_38);
a2001 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d2009 1
d2012 1
d2014 1
a2014 1
    stringBuffer.append(TEXT_47);
d2016 1
a2016 1
    stringBuffer.append(TEXT_48);
d2018 1
a2018 1
    stringBuffer.append(TEXT_49);
d2020 1
a2020 1
    stringBuffer.append(TEXT_50);
d2022 1
a2022 1
    stringBuffer.append(TEXT_51);
a2023 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d2027 2
d2030 1
a2030 1
    stringBuffer.append(TEXT_55);
d2032 1
a2032 1
    stringBuffer.append(TEXT_56);
d2034 1
a2034 1
    stringBuffer.append(TEXT_57);
a2041 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d2045 2
d2050 1
a2050 1
    stringBuffer.append(TEXT_61);
d2052 1
a2052 1
    stringBuffer.append(TEXT_62);
d2054 1
a2054 1
    stringBuffer.append(TEXT_63);
d2056 1
a2056 1
    stringBuffer.append(TEXT_64);
d2060 1
a2060 1
    stringBuffer.append(TEXT_65);
d2062 1
a2062 1
    stringBuffer.append(TEXT_66);
d2064 1
a2064 1
    stringBuffer.append(TEXT_67);
d2066 1
a2066 1
    stringBuffer.append(TEXT_68);
d2068 1
a2068 1
    stringBuffer.append(TEXT_69);
d2075 1
a2075 1
    stringBuffer.append(TEXT_70);
d2077 1
a2077 1
    stringBuffer.append(TEXT_71);
d2079 1
a2079 1
    stringBuffer.append(TEXT_72);
d2081 1
a2081 1
    stringBuffer.append(TEXT_73);
d2085 1
a2085 1
    stringBuffer.append(TEXT_74);
d2087 1
a2087 1
    stringBuffer.append(TEXT_75);
d2089 1
a2089 1
    stringBuffer.append(TEXT_76);
d2091 1
a2091 1
    stringBuffer.append(TEXT_77);
d2093 1
a2093 1
    stringBuffer.append(TEXT_78);
d2097 1
a2097 1
    stringBuffer.append(TEXT_79);
d2102 1
a2102 1
    stringBuffer.append(TEXT_80);
d2104 1
a2104 1
    stringBuffer.append(TEXT_81);
d2106 1
a2106 1
    stringBuffer.append(TEXT_82);
d2108 1
a2108 1
    stringBuffer.append(TEXT_83);
d2112 1
a2112 1
    stringBuffer.append(TEXT_84);
d2114 1
a2114 1
    stringBuffer.append(TEXT_85);
d2116 1
a2116 1
    stringBuffer.append(TEXT_86);
d2118 1
a2118 1
    stringBuffer.append(TEXT_87);
d2120 1
a2120 1
    stringBuffer.append(TEXT_88);
d2125 1
a2125 1
    stringBuffer.append(TEXT_89);
d2137 1
a2137 1
    stringBuffer.append(TEXT_90);
d2139 1
a2139 1
    stringBuffer.append(TEXT_91);
a2140 2
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d2142 6
a2147 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
d2150 1
a2150 1
if (palette != null && !genNode.getChildNodes().isEmpty()) {
d2153 1
a2153 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d2155 1
a2155 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d2157 1
a2157 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d2159 1
a2159 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d2161 1
a2161 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d2163 1
a2163 4
    
	for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
		GenChildNode next = (GenChildNode)it.next();

d2165 1
a2165 1
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
d2167 1
a2167 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d2169 1
a2169 1
    if (isXYLayout) {
d2171 1
a2171 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d2173 1
a2173 1
    }
d2175 2
d2178 2
a2179 1
	}
a2180 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d2182 1
a2182 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d2184 1
a2184 3
    
}

d2186 1
a2186 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d2188 2
d2191 3
a2193 1
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {
a2194 2
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d2196 8
a2203 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest"));
d2205 1
a2205 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d2207 5
a2211 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d2213 1
d2215 1
d2217 1
a2217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d2219 3
a2221 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d2223 1
a2223 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d2225 1
a2225 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d2227 1
a2227 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d2229 1
a2229 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d2231 5
a2235 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d2237 1
a2237 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d2239 1
a2239 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d2241 1
a2241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d2243 3
a2245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d2247 1
a2247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d2249 1
a2249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d2251 1
a2251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d2253 1
a2253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d2255 4
a2258 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d2260 5
a2264 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d2266 8
a2273 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d2275 1
a2275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d2277 1
a2277 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d2279 1
a2279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d2281 1
a2281 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d2284 307
d2593 1
a2593 1
    stringBuffer.append(TEXT_141);
d2595 1
a2595 1
    stringBuffer.append(TEXT_142);
d2597 1
a2597 1
    stringBuffer.append(TEXT_143);
d2599 1
a2599 1
    stringBuffer.append(TEXT_144);
d2601 1
a2601 1
    stringBuffer.append(TEXT_145);
d2603 1
a2603 1
    stringBuffer.append(TEXT_146);
d2607 1
a2607 1
    stringBuffer.append(TEXT_147);
d2609 1
a2609 1
    stringBuffer.append(TEXT_148);
d2611 1
a2611 1
    stringBuffer.append(TEXT_149);
d2615 1
a2615 1
    stringBuffer.append(TEXT_150);
d2619 1
a2619 1
    stringBuffer.append(TEXT_151);
d2621 1
a2621 1
    stringBuffer.append(TEXT_152);
d2623 1
a2623 1
    stringBuffer.append(TEXT_153);
d2625 1
a2625 1
    stringBuffer.append(TEXT_154);
d2627 1
a2627 1
    stringBuffer.append(TEXT_155);
d2629 1
a2629 1
    stringBuffer.append(TEXT_156);
d2631 1
a2631 1
    stringBuffer.append(TEXT_157);
d2633 1
a2633 1
    stringBuffer.append(TEXT_158);
d2635 1
a2635 1
    stringBuffer.append(TEXT_159);
d2637 1
a2637 1
    stringBuffer.append(TEXT_160);
d2641 1
a2641 1
    stringBuffer.append(TEXT_161);
d2643 1
a2643 1
    stringBuffer.append(TEXT_162);
d2647 1
a2647 1
    stringBuffer.append(TEXT_163);
d2649 1
a2649 1
    stringBuffer.append(TEXT_164);
d2651 1
a2651 1
    stringBuffer.append(TEXT_165);
d2653 1
a2653 1
    stringBuffer.append(TEXT_166);
d2655 1
a2655 1
    stringBuffer.append(TEXT_167);
d2657 1
a2657 1
    stringBuffer.append(TEXT_168);
d2659 1
a2659 1
    stringBuffer.append(TEXT_169);
d2661 1
a2661 1
    stringBuffer.append(TEXT_170);
d2663 1
a2663 1
    stringBuffer.append(TEXT_171);
d2665 1
a2665 1
    stringBuffer.append(TEXT_172);
d2667 1
a2667 1
    stringBuffer.append(TEXT_173);
d2691 1
a2691 1
    stringBuffer.append(TEXT_174);
d2693 1
a2693 1
    stringBuffer.append(TEXT_175);
d2696 1
a2696 1
    stringBuffer.append(TEXT_176);
d2700 1
a2700 1
    stringBuffer.append(TEXT_177);
d2702 1
a2702 1
    stringBuffer.append(TEXT_178);
d2704 1
a2704 1
    stringBuffer.append(TEXT_179);
d2706 1
a2706 1
    stringBuffer.append(TEXT_180);
d2710 1
a2710 1
    stringBuffer.append(TEXT_181);
d2712 1
a2712 1
    stringBuffer.append(TEXT_182);
d2714 1
a2714 1
    stringBuffer.append(TEXT_183);
d2718 1
a2718 1
    stringBuffer.append(TEXT_184);
d2720 1
a2720 1
    stringBuffer.append(TEXT_185);
d2724 1
a2724 1
    stringBuffer.append(TEXT_186);
d2726 1
a2726 1
    stringBuffer.append(TEXT_187);
d2728 1
a2728 1
    stringBuffer.append(TEXT_188);
d2730 1
a2730 1
    stringBuffer.append(TEXT_189);
d2732 1
a2732 1
    stringBuffer.append(TEXT_190);
d2734 1
a2734 1
    stringBuffer.append(TEXT_191);
d2736 1
a2736 1
    stringBuffer.append(TEXT_192);
d2738 1
a2738 1
    stringBuffer.append(TEXT_193);
d2740 1
a2740 1
    stringBuffer.append(TEXT_194);
d2742 1
a2742 1
    stringBuffer.append(TEXT_195);
d2744 1
a2744 1
    stringBuffer.append(TEXT_196);
d2770 1
a2770 1
    stringBuffer.append(TEXT_197);
d2772 1
a2772 1
    stringBuffer.append(TEXT_198);
d2775 1
a2775 1
    stringBuffer.append(TEXT_199);
d2779 1
a2779 1
    stringBuffer.append(TEXT_200);
d2781 1
a2781 1
    stringBuffer.append(TEXT_201);
d2783 1
a2783 1
    stringBuffer.append(TEXT_202);
d2785 1
a2785 1
    stringBuffer.append(TEXT_203);
d2789 1
a2789 1
    stringBuffer.append(TEXT_204);
d2791 1
a2791 1
    stringBuffer.append(TEXT_205);
d2793 1
a2793 1
    stringBuffer.append(TEXT_206);
d2795 1
a2795 1
    stringBuffer.append(TEXT_207);
d2797 1
a2797 1
    stringBuffer.append(TEXT_208);
d2799 1
a2799 1
    stringBuffer.append(TEXT_209);
d2801 1
a2801 1
    stringBuffer.append(TEXT_210);
d2803 1
a2803 1
    stringBuffer.append(TEXT_211);
d2805 1
a2805 1
    stringBuffer.append(TEXT_212);
d2831 1
a2831 1
    stringBuffer.append(TEXT_213);
d2833 1
a2833 1
    stringBuffer.append(TEXT_214);
d2836 1
a2836 1
    stringBuffer.append(TEXT_215);
d2840 1
a2840 1
    stringBuffer.append(TEXT_216);
d2842 1
a2842 1
    stringBuffer.append(TEXT_217);
d2844 1
a2844 1
    stringBuffer.append(TEXT_218);
d2846 1
a2846 1
    stringBuffer.append(TEXT_219);
d2848 1
a2848 1
    stringBuffer.append(TEXT_220);
d2850 1
a2850 1
    stringBuffer.append(TEXT_221);
d2852 1
a2852 1
    stringBuffer.append(TEXT_222);
d2854 1
a2854 1
    stringBuffer.append(TEXT_223);
d2856 1
a2856 1
    stringBuffer.append(TEXT_224);
d2858 1
a2858 1
    stringBuffer.append(TEXT_225);
d2860 1
a2860 1
    stringBuffer.append(TEXT_226);
d2862 1
a2862 1
    stringBuffer.append(TEXT_227);
d2864 1
a2864 1
    stringBuffer.append(TEXT_228);
d2866 1
a2866 1
    stringBuffer.append(TEXT_229);
d2890 1
a2890 1
    stringBuffer.append(TEXT_230);
d2892 1
a2892 1
    stringBuffer.append(TEXT_231);
d2895 1
a2895 1
    stringBuffer.append(TEXT_232);
d2899 1
a2899 1
    stringBuffer.append(TEXT_233);
d2901 1
a2901 1
    stringBuffer.append(TEXT_234);
d2903 1
a2903 1
    stringBuffer.append(TEXT_235);
d2905 1
a2905 1
    stringBuffer.append(TEXT_236);
d2907 1
a2907 1
    stringBuffer.append(TEXT_237);
d2909 1
a2909 1
    stringBuffer.append(TEXT_238);
d2913 1
a2913 1
    stringBuffer.append(TEXT_239);
d2915 1
a2915 1
    stringBuffer.append(TEXT_240);
d2917 1
a2917 1
    stringBuffer.append(TEXT_241);
d2919 1
a2919 1
    stringBuffer.append(TEXT_242);
d2921 1
a2921 1
    stringBuffer.append(TEXT_243);
d2923 1
a2923 1
    stringBuffer.append(TEXT_244);
d2930 1
a2930 1
    stringBuffer.append(TEXT_245);
d2937 1
a2937 1
    stringBuffer.append(TEXT_246);
d2941 1
a2941 1
    stringBuffer.append(TEXT_247);
d2943 1
a2943 1
    stringBuffer.append(TEXT_248);
d2945 1
a2945 1
    stringBuffer.append(TEXT_249);
d2947 1
a2947 1
    stringBuffer.append(TEXT_250);
d2949 1
a2949 1
    stringBuffer.append(TEXT_251);
d2951 1
a2951 1
    stringBuffer.append(TEXT_252);
d2955 1
a2955 1
    stringBuffer.append(TEXT_253);
d2959 1
a2959 1
    stringBuffer.append(TEXT_254);
d2961 1
a2961 1
    stringBuffer.append(TEXT_255);
d2965 1
a2965 1
    stringBuffer.append(TEXT_256);
d2967 1
a2967 1
    stringBuffer.append(TEXT_257);
d2969 1
a2969 1
    stringBuffer.append(TEXT_258);
d2971 1
a2971 1
    stringBuffer.append(TEXT_259);
d2975 1
a2975 1
    stringBuffer.append(TEXT_260);
d2977 1
a2977 1
    stringBuffer.append(TEXT_261);
d2987 1
a2987 1
    stringBuffer.append(TEXT_262);
d2989 1
a2989 1
    stringBuffer.append(TEXT_263);
d2991 1
a2991 1
    stringBuffer.append(TEXT_264);
d2993 1
a2993 1
    stringBuffer.append(TEXT_265);
d2995 1
a2995 1
    stringBuffer.append(TEXT_266);
d2997 1
a2997 1
    stringBuffer.append(TEXT_267);
d3001 1
a3001 1
    stringBuffer.append(TEXT_268);
d3003 1
a3003 1
    stringBuffer.append(TEXT_269);
d3005 1
a3005 1
    stringBuffer.append(TEXT_270);
d3007 1
a3007 1
    stringBuffer.append(TEXT_271);
d3009 1
a3009 1
    stringBuffer.append(TEXT_272);
d3011 1
a3011 1
    stringBuffer.append(TEXT_273);
d3013 1
a3013 1
    stringBuffer.append(TEXT_274);
d3015 1
a3015 1
    stringBuffer.append(TEXT_275);
d3017 1
a3017 1
    stringBuffer.append(TEXT_276);
d3019 1
a3019 1
    stringBuffer.append(TEXT_277);
d3021 1
a3021 1
    stringBuffer.append(TEXT_278);
d3023 1
a3023 1
    stringBuffer.append(TEXT_279);
d3025 1
a3025 1
    stringBuffer.append(TEXT_280);
d3027 1
a3027 1
    stringBuffer.append(TEXT_281);
d3029 1
a3029 1
    stringBuffer.append(TEXT_282);
d3031 1
a3031 1
    stringBuffer.append(TEXT_283);
d3033 1
a3033 1
    stringBuffer.append(TEXT_284);
d3035 1
a3035 1
    stringBuffer.append(TEXT_285);
d3037 1
a3037 1
    stringBuffer.append(TEXT_286);
d3039 1
a3039 1
    stringBuffer.append(TEXT_287);
d3041 1
a3041 1
    stringBuffer.append(TEXT_288);
d3043 1
a3043 1
    stringBuffer.append(TEXT_289);
d3045 1
a3045 1
    stringBuffer.append(TEXT_290);
d3047 1
a3047 1
    stringBuffer.append(TEXT_291);
d3052 1
a3052 1
    stringBuffer.append(TEXT_292);
d3054 1
a3054 1
    stringBuffer.append(TEXT_293);
d3056 1
a3056 1
    stringBuffer.append(TEXT_294);
d3058 1
a3058 1
    stringBuffer.append(TEXT_295);
d3060 1
a3060 1
    stringBuffer.append(TEXT_296);
d3062 1
a3062 1
    stringBuffer.append(TEXT_297);
d3064 1
a3064 1
    stringBuffer.append(TEXT_298);
d3066 1
a3066 1
    stringBuffer.append(TEXT_299);
d3068 1
a3068 1
    stringBuffer.append(TEXT_300);
d3070 1
a3070 1
    stringBuffer.append(TEXT_301);
d3072 1
a3072 1
    stringBuffer.append(TEXT_302);
d3076 1
a3076 1
    stringBuffer.append(TEXT_303);
d3078 1
a3078 1
    stringBuffer.append(TEXT_304);
d3086 1
a3086 1
    stringBuffer.append(TEXT_305);
d3088 1
a3088 1
    stringBuffer.append(TEXT_306);
d3090 1
a3090 1
    stringBuffer.append(TEXT_307);
d3092 1
a3092 1
    stringBuffer.append(TEXT_308);
d3094 1
a3094 1
    stringBuffer.append(TEXT_309);
d3103 1
a3103 1
    stringBuffer.append(TEXT_310);
d3105 1
a3105 1
    stringBuffer.append(TEXT_311);
d3107 1
a3107 1
    stringBuffer.append(TEXT_312);
d3109 1
a3109 1
    stringBuffer.append(TEXT_313);
d3111 1
a3111 1
    stringBuffer.append(TEXT_314);
d3115 1
a3115 1
    stringBuffer.append(TEXT_315);
d3123 1
a3123 1
    stringBuffer.append(TEXT_316);
d3125 1
a3125 1
    stringBuffer.append(TEXT_317);
d3127 1
a3127 1
    stringBuffer.append(TEXT_318);
d3129 1
a3129 1
    stringBuffer.append(TEXT_319);
d3131 1
a3131 1
    stringBuffer.append(TEXT_320);
d3135 1
a3135 1
    stringBuffer.append(TEXT_321);
d3139 1
a3139 1
    stringBuffer.append(TEXT_322);
d3141 1
a3141 1
    stringBuffer.append(TEXT_323);
d3145 1
a3145 1
    stringBuffer.append(TEXT_324);
d3147 1
a3147 1
    stringBuffer.append(TEXT_325);
d3149 1
a3149 1
    stringBuffer.append(TEXT_326);
d3151 1
a3151 1
    stringBuffer.append(TEXT_327);
d3153 1
a3153 1
    stringBuffer.append(TEXT_328);
d3155 1
a3155 1
    stringBuffer.append(TEXT_329);
d3157 1
a3157 1
    stringBuffer.append(TEXT_330);
d3161 1
a3161 1
    stringBuffer.append(TEXT_331);
d3163 1
a3163 1
    stringBuffer.append(TEXT_332);
d3165 1
a3165 1
    stringBuffer.append(TEXT_333);
d3167 1
a3167 1
    stringBuffer.append(TEXT_334);
d3169 1
a3169 1
    stringBuffer.append(TEXT_335);
d3171 1
a3171 1
    stringBuffer.append(TEXT_336);
d3173 1
a3173 1
    stringBuffer.append(TEXT_337);
d3175 1
a3175 1
    stringBuffer.append(TEXT_338);
d3177 1
a3177 1
    stringBuffer.append(TEXT_339);
d3179 1
a3179 1
    stringBuffer.append(TEXT_340);
d3181 1
a3181 1
    stringBuffer.append(TEXT_341);
d3183 1
a3183 1
    stringBuffer.append(TEXT_342);
d3191 1
a3191 1
    stringBuffer.append(TEXT_343);
d3193 1
a3193 1
    stringBuffer.append(TEXT_344);
d3197 1
a3197 1
    stringBuffer.append(TEXT_345);
d3201 1
a3201 1
    stringBuffer.append(TEXT_346);
d3203 1
a3203 1
    stringBuffer.append(TEXT_347);
d3208 1
a3208 1
    stringBuffer.append(TEXT_348);
d3210 1
a3210 1
    stringBuffer.append(TEXT_349);
d3214 1
a3214 1
    stringBuffer.append(TEXT_350);
d3216 1
a3216 1
    stringBuffer.append(TEXT_351);
d3218 1
a3218 1
    stringBuffer.append(TEXT_352);
d3220 1
a3220 1
    stringBuffer.append(TEXT_353);
d3222 1
a3222 1
    stringBuffer.append(TEXT_354);
d3227 1
a3227 1
    stringBuffer.append(TEXT_355);
d3229 1
a3229 1
    stringBuffer.append(TEXT_356);
d3234 1
a3234 1
    stringBuffer.append(TEXT_357);
d3236 1
a3236 1
    stringBuffer.append(TEXT_358);
d3240 1
a3240 1
    stringBuffer.append(TEXT_359);
d3245 1
a3245 1
    stringBuffer.append(TEXT_360);
d3247 1
a3247 1
    stringBuffer.append(TEXT_361);
d3251 1
a3251 1
    stringBuffer.append(TEXT_362);
d3253 1
a3253 1
    stringBuffer.append(TEXT_363);
d3255 1
a3255 1
    stringBuffer.append(TEXT_364);
d3260 1
a3260 1
    stringBuffer.append(TEXT_365);
d3265 1
a3265 1
    stringBuffer.append(TEXT_366);
d3267 1
a3267 1
    stringBuffer.append(TEXT_367);
d3269 1
a3269 1
    stringBuffer.append(TEXT_368);
d3273 1
a3273 1
    stringBuffer.append(TEXT_369);
d3275 1
a3275 1
    stringBuffer.append(TEXT_370);
d3279 1
a3279 1
    stringBuffer.append(TEXT_371);
d3281 1
a3281 1
    stringBuffer.append(TEXT_372);
d3283 1
a3283 1
    stringBuffer.append(TEXT_373);
d3288 1
a3288 1
    stringBuffer.append(TEXT_374);
d3293 1
a3293 1
    stringBuffer.append(TEXT_375);
d3295 1
a3295 1
    stringBuffer.append(TEXT_376);
d3297 1
a3297 1
    stringBuffer.append(TEXT_377);
d3301 1
a3301 1
    stringBuffer.append(TEXT_378);
d3308 1
a3308 1
    stringBuffer.append(TEXT_379);
d3310 1
a3310 1
    stringBuffer.append(TEXT_380);
d3312 1
a3312 1
    stringBuffer.append(TEXT_381);
d3314 1
a3314 1
    stringBuffer.append(TEXT_382);
d3316 1
a3316 1
    stringBuffer.append(TEXT_383);
d3320 1
a3320 1
    stringBuffer.append(TEXT_384);
d3322 1
a3322 1
    stringBuffer.append(TEXT_385);
d3324 1
a3324 1
    stringBuffer.append(TEXT_386);
d3326 1
a3326 1
    stringBuffer.append(TEXT_387);
d3328 1
a3328 1
    stringBuffer.append(TEXT_388);
d3330 1
a3330 1
    stringBuffer.append(TEXT_389);
d3332 1
a3332 1
    stringBuffer.append(TEXT_390);
d3334 1
a3334 1
    stringBuffer.append(TEXT_391);
d3336 1
a3336 1
    stringBuffer.append(TEXT_392);
d3338 1
a3338 1
    stringBuffer.append(TEXT_393);
d3340 1
a3340 1
    stringBuffer.append(TEXT_394);
d3342 1
a3342 1
    stringBuffer.append(TEXT_395);
d3344 1
a3344 1
    stringBuffer.append(TEXT_396);
d3346 1
a3346 1
    stringBuffer.append(TEXT_397);
d3348 1
a3348 1
    stringBuffer.append(TEXT_398);
d3350 1
a3350 1
    stringBuffer.append(TEXT_399);
d3352 1
a3352 1
    stringBuffer.append(TEXT_400);
d3354 1
a3354 1
    stringBuffer.append(TEXT_401);
d3356 1
a3356 1
    stringBuffer.append(TEXT_402);
d3358 1
a3358 1
    stringBuffer.append(TEXT_403);
d3360 1
a3360 1
    stringBuffer.append(TEXT_404);
d3362 1
a3362 1
    stringBuffer.append(TEXT_405);
d3364 1
a3364 1
    stringBuffer.append(TEXT_406);
d3366 1
a3366 1
    stringBuffer.append(TEXT_407);
d3370 1
a3370 1
    stringBuffer.append(TEXT_408);
d3377 1
a3377 1
    stringBuffer.append(TEXT_409);
d3381 1
a3381 1
    stringBuffer.append(TEXT_410);
d3385 1
a3385 1
    stringBuffer.append(TEXT_411);
d3392 1
a3392 1
    stringBuffer.append(TEXT_412);
d3396 1
a3396 1
    stringBuffer.append(TEXT_413);
d3406 2
a3407 2
    stringBuffer.append(TEXT_414);
    stringBuffer.append(TEXT_415);
d3409 1
a3409 1
    stringBuffer.append(TEXT_416);
d3411 1
a3411 1
    stringBuffer.append(TEXT_417);
d3413 1
a3413 1
    stringBuffer.append(TEXT_418);
d3415 1
a3415 1
    stringBuffer.append(TEXT_419);
d3417 1
a3417 1
    stringBuffer.append(TEXT_420);
d3419 1
a3419 1
    stringBuffer.append(TEXT_421);
d3421 1
a3421 1
    stringBuffer.append(TEXT_422);
d3436 1
a3436 1
    stringBuffer.append(TEXT_423);
d3438 1
a3438 1
    stringBuffer.append(TEXT_424);
d3440 1
a3440 1
    stringBuffer.append(TEXT_425);
d3442 1
a3442 1
    stringBuffer.append(TEXT_426);
d3446 1
a3446 1
    stringBuffer.append(TEXT_427);
d3448 1
a3448 1
    stringBuffer.append(TEXT_428);
d3467 1
a3467 1
    stringBuffer.append(TEXT_429);
d3469 1
a3469 1
    stringBuffer.append(TEXT_430);
d3471 1
a3471 1
    stringBuffer.append(TEXT_431);
d3473 1
a3473 1
    stringBuffer.append(TEXT_432);
d3475 1
a3475 1
    stringBuffer.append(TEXT_433);
d3479 1
a3479 1
    stringBuffer.append(TEXT_434);
d3481 1
a3481 1
    stringBuffer.append(TEXT_435);
d3483 1
a3483 1
    stringBuffer.append(TEXT_436);
d3485 1
a3485 1
    stringBuffer.append(TEXT_437);
d3493 1
a3493 1
    stringBuffer.append(TEXT_438);
d3495 1
a3495 1
    stringBuffer.append(TEXT_439);
d3497 1
a3497 1
    stringBuffer.append(TEXT_440);
d3502 1
a3502 1
    stringBuffer.append(TEXT_441);
d3504 1
a3504 1
    stringBuffer.append(TEXT_442);
d3506 1
a3506 1
    stringBuffer.append(TEXT_443);
d3508 1
a3508 1
    stringBuffer.append(TEXT_444);
d3517 1
a3517 1
    stringBuffer.append(TEXT_445);
d3521 1
a3521 1
    stringBuffer.append(TEXT_446);
d3523 1
a3523 1
    stringBuffer.append(TEXT_447);
d3529 1
a3529 1
    stringBuffer.append(TEXT_448);
d3531 1
a3531 1
    stringBuffer.append(TEXT_449);
d3533 1
a3533 1
    stringBuffer.append(TEXT_450);
d3537 1
a3537 1
    stringBuffer.append(TEXT_451);
d3541 1
a3541 1
    stringBuffer.append(TEXT_452);
d3543 1
a3543 1
    stringBuffer.append(TEXT_453);
d3545 1
a3545 1
    stringBuffer.append(TEXT_454);
d3550 2
a3551 2
    stringBuffer.append(TEXT_455);
    stringBuffer.append(TEXT_456);
d3553 1
a3553 1
    stringBuffer.append(TEXT_457);
d3563 1
a3563 1
    stringBuffer.append(TEXT_458);
d3565 1
a3565 1
    stringBuffer.append(TEXT_459);
d3567 1
a3567 1
    stringBuffer.append(TEXT_460);
d3569 1
a3569 1
    stringBuffer.append(TEXT_461);
d3571 1
a3571 1
    stringBuffer.append(TEXT_462);
d3582 1
a3582 1
    stringBuffer.append(TEXT_463);
d3584 1
a3584 1
    stringBuffer.append(TEXT_464);
d3586 1
a3586 1
    stringBuffer.append(TEXT_465);
d3588 1
a3588 1
    stringBuffer.append(TEXT_466);
d3592 1
a3592 1
    stringBuffer.append(TEXT_467);
d3596 1
a3596 1
    stringBuffer.append(TEXT_468);
d3598 1
a3598 1
    stringBuffer.append(TEXT_469);
d3602 1
a3602 1
    stringBuffer.append(TEXT_470);
d3606 1
a3606 1
    stringBuffer.append(TEXT_471);
d3608 2
a3609 2
    stringBuffer.append(TEXT_472);
    stringBuffer.append(TEXT_473);
d3613 1
a3613 1
    stringBuffer.append(TEXT_474);
d3615 1
a3615 1
    stringBuffer.append(TEXT_475);
d3619 1
a3619 1
    stringBuffer.append(TEXT_476);
d3621 1
a3621 1
    stringBuffer.append(TEXT_477);
d3623 1
a3623 1
    stringBuffer.append(TEXT_478);
d3641 1
a3641 1
    stringBuffer.append(TEXT_479);
d3643 1
a3643 1
    stringBuffer.append(TEXT_480);
d3645 1
a3645 1
    stringBuffer.append(TEXT_481);
d3647 1
a3647 1
    stringBuffer.append(TEXT_482);
d3649 1
a3649 1
    stringBuffer.append(TEXT_483);
d3658 1
a3658 1
    stringBuffer.append(TEXT_484);
d3660 1
a3660 1
    stringBuffer.append(TEXT_485);
d3662 1
a3662 1
    stringBuffer.append(TEXT_486);
d3664 1
a3664 1
    stringBuffer.append(TEXT_487);
d3668 1
a3668 1
    stringBuffer.append(TEXT_488);
d3670 1
a3670 1
    stringBuffer.append(TEXT_489);
d3672 1
a3672 1
    stringBuffer.append(TEXT_490);
d3676 1
a3676 1
    stringBuffer.append(TEXT_491);
d3678 1
a3678 1
    stringBuffer.append(TEXT_492);
d3683 1
a3683 1
    stringBuffer.append(TEXT_493);
d3690 1
a3690 1
    stringBuffer.append(TEXT_494);
d3692 1
a3692 1
    stringBuffer.append(TEXT_495);
d3696 1
a3696 1
    stringBuffer.append(TEXT_496);
d3698 1
a3698 1
    stringBuffer.append(TEXT_497);
d3702 1
a3702 1
    stringBuffer.append(TEXT_498);
d3704 1
a3704 1
    stringBuffer.append(TEXT_499);
d3708 1
a3708 1
    stringBuffer.append(TEXT_500);
d3712 1
a3712 1
    stringBuffer.append(TEXT_501);
d3718 1
a3718 1
    stringBuffer.append(TEXT_502);
d3723 1
a3723 1
    stringBuffer.append(TEXT_503);
d3728 1
a3728 1
    stringBuffer.append(TEXT_504);
d3732 1
a3732 1
    stringBuffer.append(TEXT_505);
d3734 1
a3734 1
    stringBuffer.append(TEXT_506);
d3736 1
a3736 1
    stringBuffer.append(TEXT_507);
d3738 1
a3738 1
    stringBuffer.append(TEXT_508);
d3740 1
a3740 1
    stringBuffer.append(TEXT_509);
d3742 1
a3742 1
    stringBuffer.append(TEXT_510);
d3744 1
a3744 1
    stringBuffer.append(TEXT_511);
d3746 1
a3746 1
    stringBuffer.append(TEXT_512);
d3748 1
a3748 1
    stringBuffer.append(TEXT_513);
d3750 1
a3750 1
    stringBuffer.append(TEXT_514);
d3752 1
a3752 1
    stringBuffer.append(TEXT_515);
d3754 1
a3754 1
    stringBuffer.append(TEXT_516);
d3758 1
a3758 1
    stringBuffer.append(TEXT_517);
d3762 1
a3762 1
    stringBuffer.append(TEXT_518);
d3764 1
a3764 1
    stringBuffer.append(TEXT_519);
d3766 1
a3766 1
    stringBuffer.append(TEXT_520);
d3768 1
a3768 1
    stringBuffer.append(TEXT_521);
d3770 1
a3770 1
    stringBuffer.append(TEXT_522);
d3772 1
a3772 1
    stringBuffer.append(TEXT_523);
d3774 1
a3774 1
    stringBuffer.append(TEXT_524);
d3776 1
a3776 1
    stringBuffer.append(TEXT_525);
d3778 1
a3778 1
    stringBuffer.append(TEXT_526);
d3791 1
a3791 1
    stringBuffer.append(TEXT_527);
d3793 1
a3793 1
    stringBuffer.append(TEXT_528);
d3795 1
a3795 1
    stringBuffer.append(TEXT_529);
d3797 1
a3797 1
    stringBuffer.append(TEXT_530);
d3802 1
a3802 1
    stringBuffer.append(TEXT_531);
d3804 1
a3804 1
    stringBuffer.append(TEXT_532);
d3806 1
a3806 1
    stringBuffer.append(TEXT_533);
d3808 1
a3808 1
    stringBuffer.append(TEXT_534);
d3810 1
a3810 1
    stringBuffer.append(TEXT_535);
d3812 1
a3812 1
    stringBuffer.append(TEXT_536);
d3814 1
a3814 1
    stringBuffer.append(TEXT_537);
d3816 1
a3816 1
    stringBuffer.append(TEXT_538);
d3818 1
a3818 1
    stringBuffer.append(TEXT_539);
d3820 1
a3820 1
    stringBuffer.append(TEXT_540);
d3824 1
a3824 1
    stringBuffer.append(TEXT_541);
d3826 1
a3826 1
    stringBuffer.append(TEXT_542);
d3839 1
a3839 1
    stringBuffer.append(TEXT_543);
d3853 1
a3853 1
    stringBuffer.append(TEXT_544);
d3855 1
a3855 1
    stringBuffer.append(TEXT_545);
d3857 1
a3857 1
    stringBuffer.append(TEXT_546);
d3859 1
a3859 1
    stringBuffer.append(TEXT_547);
d3861 1
a3861 1
    stringBuffer.append(TEXT_548);
d3865 1
a3865 1
    stringBuffer.append(TEXT_549);
d3867 1
a3867 1
    stringBuffer.append(TEXT_550);
d3869 1
a3869 1
    stringBuffer.append(TEXT_551);
d3871 1
a3871 1
    stringBuffer.append(TEXT_552);
d3878 1
a3878 1
    stringBuffer.append(TEXT_553);
d3892 1
a3892 1
    stringBuffer.append(TEXT_554);
d3894 1
a3894 1
    stringBuffer.append(TEXT_555);
d3896 1
a3896 1
    stringBuffer.append(TEXT_556);
d3898 1
a3898 1
    stringBuffer.append(TEXT_557);
d3900 1
a3900 1
    stringBuffer.append(TEXT_558);
d3904 1
a3904 1
    stringBuffer.append(TEXT_559);
d3906 1
a3906 1
    stringBuffer.append(TEXT_560);
d3908 1
a3908 1
    stringBuffer.append(TEXT_561);
d3910 1
a3910 1
    stringBuffer.append(TEXT_562);
d3917 1
a3917 1
    stringBuffer.append(TEXT_563);
d3931 1
a3931 1
    stringBuffer.append(TEXT_564);
d3933 1
a3933 1
    stringBuffer.append(TEXT_565);
d3935 1
a3935 1
    stringBuffer.append(TEXT_566);
d3937 1
a3937 1
    stringBuffer.append(TEXT_567);
d3939 1
a3939 1
    stringBuffer.append(TEXT_568);
d3943 1
a3943 1
    stringBuffer.append(TEXT_569);
d3945 1
a3945 1
    stringBuffer.append(TEXT_570);
d3947 1
a3947 1
    stringBuffer.append(TEXT_571);
d3949 1
a3949 1
    stringBuffer.append(TEXT_572);
d3959 1
a3959 1
    stringBuffer.append(TEXT_573);
d3973 1
a3973 1
    stringBuffer.append(TEXT_574);
d3975 1
a3975 1
    stringBuffer.append(TEXT_575);
d3977 1
a3977 1
    stringBuffer.append(TEXT_576);
d3979 1
a3979 1
    stringBuffer.append(TEXT_577);
d3981 1
a3981 1
    stringBuffer.append(TEXT_578);
d3985 1
a3985 1
    stringBuffer.append(TEXT_579);
d3987 1
a3987 1
    stringBuffer.append(TEXT_580);
d3989 1
a3989 1
    stringBuffer.append(TEXT_581);
d3991 1
a3991 1
    stringBuffer.append(TEXT_582);
d4000 1
a4000 1
    stringBuffer.append(TEXT_583);
d4005 1
a4005 1
    stringBuffer.append(TEXT_584);
d4007 1
a4007 1
    stringBuffer.append(TEXT_585);
d4014 1
a4014 1
    stringBuffer.append(TEXT_586);
d4019 1
a4019 1
    stringBuffer.append(TEXT_587);
d4021 1
a4021 1
    stringBuffer.append(TEXT_588);
d4027 1
a4027 1
    stringBuffer.append(TEXT_589);
d4029 1
a4029 1
    stringBuffer.append(TEXT_590);
d4031 1
a4031 1
    stringBuffer.append(TEXT_591);
d4036 1
a4036 1
    stringBuffer.append(TEXT_592);
d4038 1
a4038 1
    stringBuffer.append(TEXT_593);
d4040 1
a4040 1
    stringBuffer.append(TEXT_594);
d4042 1
a4042 1
    stringBuffer.append(TEXT_595);
d4044 1
a4044 1
    stringBuffer.append(TEXT_596);
d4051 2
a4052 2
    stringBuffer.append(TEXT_597);
    stringBuffer.append(TEXT_598);
d4054 1
a4054 1
    stringBuffer.append(TEXT_599);
d4056 1
a4056 1
    stringBuffer.append(TEXT_600);
d4058 1
a4058 1
    stringBuffer.append(TEXT_601);
d4067 1
a4067 1
    stringBuffer.append(TEXT_602);
d4069 1
a4069 1
    stringBuffer.append(TEXT_603);
d4071 1
a4071 1
    stringBuffer.append(TEXT_604);
d4073 1
a4073 1
    stringBuffer.append(TEXT_605);
d4079 1
a4079 1
    stringBuffer.append(TEXT_606);
d4081 1
a4081 1
    stringBuffer.append(TEXT_607);
d4083 1
a4083 1
    stringBuffer.append(TEXT_608);
d4087 1
a4087 1
    stringBuffer.append(TEXT_609);
d4089 1
a4089 1
    stringBuffer.append(TEXT_610);
d4091 1
a4091 1
    stringBuffer.append(TEXT_611);
d4095 1
a4095 1
    stringBuffer.append(TEXT_612);
d4097 1
a4097 1
    stringBuffer.append(TEXT_613);
d4103 2
a4104 2
    stringBuffer.append(TEXT_614);
    stringBuffer.append(TEXT_615);
d4106 1
a4106 1
    stringBuffer.append(TEXT_616);
d4108 1
a4108 1
    stringBuffer.append(TEXT_617);
d4131 1
a4131 1
    stringBuffer.append(TEXT_618);
d4133 1
a4133 1
    stringBuffer.append(TEXT_619);
d4135 1
a4135 1
    stringBuffer.append(TEXT_620);
d4137 1
a4137 1
    stringBuffer.append(TEXT_621);
d4142 1
a4142 1
    stringBuffer.append(TEXT_622);
d4151 1
a4151 1
    stringBuffer.append(TEXT_623);
d4153 1
a4153 1
    stringBuffer.append(TEXT_624);
d4155 1
a4155 1
    stringBuffer.append(TEXT_625);
d4157 1
a4157 1
    stringBuffer.append(TEXT_626);
d4161 1
a4161 1
    stringBuffer.append(TEXT_627);
d4163 1
a4163 1
    stringBuffer.append(TEXT_628);
d4165 1
a4165 1
    stringBuffer.append(TEXT_629);
d4169 1
a4169 1
    stringBuffer.append(TEXT_630);
d4171 1
a4171 1
    stringBuffer.append(TEXT_631);
d4176 1
a4176 1
    stringBuffer.append(TEXT_632);
d4184 1
a4184 1
    stringBuffer.append(TEXT_633);
d4186 1
a4186 1
    stringBuffer.append(TEXT_634);
d4190 1
a4190 1
    stringBuffer.append(TEXT_635);
d4192 1
a4192 1
    stringBuffer.append(TEXT_636);
d4197 1
a4197 1
    stringBuffer.append(TEXT_637);
d4199 1
a4199 1
    stringBuffer.append(TEXT_638);
d4201 1
a4201 1
    stringBuffer.append(TEXT_639);
d4203 1
a4203 1
    stringBuffer.append(TEXT_640);
d4207 1
a4207 1
    stringBuffer.append(TEXT_641);
d4209 1
a4209 1
    stringBuffer.append(TEXT_642);
d4211 1
a4211 1
    stringBuffer.append(TEXT_643);
d4216 1
a4216 1
    stringBuffer.append(TEXT_644);
d4218 1
a4218 1
    stringBuffer.append(TEXT_645);
d4220 1
a4220 1
    stringBuffer.append(TEXT_646);
d4222 1
a4222 1
    stringBuffer.append(TEXT_647);
d4226 1
a4226 1
    stringBuffer.append(TEXT_648);
d4228 1
a4228 1
    stringBuffer.append(TEXT_649);
d4230 1
a4230 1
    stringBuffer.append(TEXT_650);
d4234 1
a4234 1
    stringBuffer.append(TEXT_651);
d4236 1
a4236 1
    stringBuffer.append(TEXT_652);
d4240 1
a4240 1
    stringBuffer.append(TEXT_653);
d4244 1
a4244 1
    stringBuffer.append(TEXT_654);
d4252 1
a4252 1
    stringBuffer.append(TEXT_655);
d4257 1
a4257 1
    stringBuffer.append(TEXT_656);
d4267 1
a4267 1
    stringBuffer.append(TEXT_657);
d4269 1
a4269 1
    stringBuffer.append(TEXT_658);
d4271 1
a4271 1
    stringBuffer.append(TEXT_659);
d4273 1
a4273 1
    stringBuffer.append(TEXT_660);
d4277 1
a4277 1
    stringBuffer.append(TEXT_661);
d4279 1
a4279 1
    stringBuffer.append(TEXT_662);
d4281 1
a4281 1
    stringBuffer.append(TEXT_663);
d4285 1
a4285 1
    stringBuffer.append(TEXT_664);
d4290 1
a4290 1
    stringBuffer.append(TEXT_665);
d4292 1
a4292 1
    stringBuffer.append(TEXT_666);
d4294 1
a4294 1
    stringBuffer.append(TEXT_667);
d4298 1
a4298 1
    stringBuffer.append(TEXT_668);
d4302 1
a4302 1
    stringBuffer.append(TEXT_669);
d4307 1
a4307 1
    stringBuffer.append(TEXT_670);
d4311 1
a4311 1
    stringBuffer.append(TEXT_671);
d4313 1
a4313 1
    stringBuffer.append(TEXT_672);
d4315 1
a4315 1
    stringBuffer.append(TEXT_673);
d4317 1
a4317 1
    stringBuffer.append(TEXT_674);
d4319 1
a4319 1
    stringBuffer.append(TEXT_675);
d4321 1
a4321 1
    stringBuffer.append(TEXT_676);
d4323 1
a4323 1
    stringBuffer.append(TEXT_677);
d4325 1
a4325 1
    stringBuffer.append(TEXT_678);
d4327 1
a4327 1
    stringBuffer.append(TEXT_679);
d4331 1
a4331 1
    stringBuffer.append(TEXT_680);
d4333 1
a4333 1
    stringBuffer.append(TEXT_681);
d4335 1
a4335 1
    stringBuffer.append(TEXT_682);
d4340 1
a4340 1
    stringBuffer.append(TEXT_683);
d4342 1
a4342 1
    stringBuffer.append(TEXT_684);
d4344 1
a4344 1
    stringBuffer.append(TEXT_685);
d4349 1
a4349 1
    stringBuffer.append(TEXT_686);
d4351 1
a4351 1
    stringBuffer.append(TEXT_687);
d4355 1
a4355 1
    stringBuffer.append(TEXT_688);
d4359 1
a4359 1
    stringBuffer.append(TEXT_689);
d4363 1
a4363 1
    stringBuffer.append(TEXT_690);
d4370 1
a4370 1
    stringBuffer.append(TEXT_691);
d4374 1
a4374 1
    stringBuffer.append(TEXT_692);
d4376 1
a4376 1
    stringBuffer.append(TEXT_693);
d4378 1
a4378 1
    stringBuffer.append(TEXT_694);
d4383 1
a4383 1
    stringBuffer.append(TEXT_695);
d4385 1
a4385 1
    stringBuffer.append(TEXT_696);
d4389 1
a4389 1
    stringBuffer.append(TEXT_697);
d4393 1
a4393 1
    stringBuffer.append(TEXT_698);
d4395 1
a4395 1
    stringBuffer.append(TEXT_699);
d4397 1
a4397 1
    stringBuffer.append(TEXT_700);
d4399 1
a4399 1
    stringBuffer.append(TEXT_701);
d4401 1
a4401 1
    stringBuffer.append(TEXT_702);
d4403 1
a4403 1
    stringBuffer.append(TEXT_703);
d4405 1
a4405 1
    stringBuffer.append(TEXT_704);
d4407 1
a4407 1
    stringBuffer.append(TEXT_705);
d4409 1
a4409 1
    stringBuffer.append(TEXT_706);
d4411 1
a4411 1
    stringBuffer.append(TEXT_707);
d4413 1
a4413 1
    stringBuffer.append(TEXT_708);
d4415 1
a4415 1
    stringBuffer.append(TEXT_709);
d4422 3
a4424 3
    stringBuffer.append(TEXT_710);
    stringBuffer.append(TEXT_711);
    stringBuffer.append(TEXT_712);
d4426 1
a4426 1
    stringBuffer.append(TEXT_713);
d4428 3
a4430 3
    stringBuffer.append(TEXT_714);
    stringBuffer.append(TEXT_715);
    stringBuffer.append(TEXT_716);
d4432 1
a4432 1
    stringBuffer.append(TEXT_717);
d4434 1
a4434 1
    stringBuffer.append(TEXT_718);
d4436 1
a4436 1
    stringBuffer.append(TEXT_719);
d4440 1
a4440 1
    stringBuffer.append(TEXT_720);
d4448 1
a4448 1
    stringBuffer.append(TEXT_721);
d4452 1
a4452 1
    stringBuffer.append(TEXT_722);
d4454 1
a4454 1
    stringBuffer.append(TEXT_723);
d4456 1
a4456 1
    stringBuffer.append(TEXT_724);
d4458 1
a4458 1
    stringBuffer.append(TEXT_725);
d4460 1
a4460 1
    stringBuffer.append(TEXT_726);
d4462 1
a4462 1
    stringBuffer.append(TEXT_727);
d4464 1
a4464 1
    stringBuffer.append(TEXT_728);
d4466 1
a4466 1
    stringBuffer.append(TEXT_729);
d4468 1
a4468 1
    stringBuffer.append(TEXT_730);
d4470 1
a4470 1
    stringBuffer.append(TEXT_731);
d4472 1
a4472 1
    stringBuffer.append(TEXT_732);
d4474 1
a4474 1
    stringBuffer.append(TEXT_733);
d4478 1
a4478 1
    stringBuffer.append(TEXT_734);
d4482 1
a4482 1
    stringBuffer.append(TEXT_735);
d4484 1
a4484 1
    stringBuffer.append(TEXT_736);
d4488 3
a4490 3
    stringBuffer.append(TEXT_737);
    stringBuffer.append(TEXT_738);
    stringBuffer.append(TEXT_739);
d4492 1
a4492 1
    stringBuffer.append(TEXT_740);
d4494 1
a4494 1
    stringBuffer.append(TEXT_741);
d4496 1
a4496 1
    stringBuffer.append(TEXT_742);
d4498 1
a4498 1
    stringBuffer.append(TEXT_743);
d4500 1
a4500 1
    stringBuffer.append(TEXT_744);
d4502 1
a4502 1
    stringBuffer.append(TEXT_745);
d4504 1
a4504 1
    stringBuffer.append(TEXT_746);
d4506 1
a4506 1
    stringBuffer.append(TEXT_747);
d4508 1
a4508 1
    stringBuffer.append(TEXT_748);
d4510 1
a4510 1
    stringBuffer.append(TEXT_749);
d4512 1
a4512 1
    stringBuffer.append(TEXT_750);
d4514 1
a4514 1
    stringBuffer.append(TEXT_751);
d4516 1
a4516 1
    stringBuffer.append(TEXT_752);
d4518 1
a4518 1
    stringBuffer.append(TEXT_753);
d4520 1
a4520 1
    stringBuffer.append(TEXT_754);
d4522 3
a4524 3
    stringBuffer.append(TEXT_755);
    stringBuffer.append(TEXT_756);
    stringBuffer.append(TEXT_757);
d4526 1
a4526 1
    stringBuffer.append(TEXT_758);
d4528 1
a4528 1
    stringBuffer.append(TEXT_759);
d4530 1
a4530 1
    stringBuffer.append(TEXT_760);
d4532 3
a4534 3
    stringBuffer.append(TEXT_761);
    stringBuffer.append(TEXT_762);
    stringBuffer.append(TEXT_763);
d4536 1
a4536 1
    stringBuffer.append(TEXT_764);
d4538 3
a4540 3
    stringBuffer.append(TEXT_765);
    stringBuffer.append(TEXT_766);
    stringBuffer.append(TEXT_767);
d4542 1
a4542 1
    stringBuffer.append(TEXT_768);
d4544 1
a4544 1
    stringBuffer.append(TEXT_769);
d4546 1
a4546 1
    stringBuffer.append(TEXT_770);
d4548 1
a4548 1
    stringBuffer.append(TEXT_771);
d4550 3
a4552 3
    stringBuffer.append(TEXT_772);
    stringBuffer.append(TEXT_773);
    stringBuffer.append(TEXT_774);
d4554 3
a4556 3
    stringBuffer.append(TEXT_775);
    stringBuffer.append(TEXT_776);
    stringBuffer.append(TEXT_777);
d4558 3
a4560 3
    stringBuffer.append(TEXT_778);
    stringBuffer.append(TEXT_779);
    stringBuffer.append(TEXT_780);
d4562 3
a4564 3
    stringBuffer.append(TEXT_781);
    stringBuffer.append(TEXT_782);
    stringBuffer.append(TEXT_783);
d4566 1
a4566 1
    stringBuffer.append(TEXT_784);
d4568 1
a4568 1
    stringBuffer.append(TEXT_785);
d4570 1
a4570 1
    stringBuffer.append(TEXT_786);
d4572 3
a4574 3
    stringBuffer.append(TEXT_787);
    stringBuffer.append(TEXT_788);
    stringBuffer.append(TEXT_789);
d4576 1
a4576 1
    stringBuffer.append(TEXT_790);
d4578 1
a4578 1
    stringBuffer.append(TEXT_791);
d4586 1
a4586 1
    stringBuffer.append(TEXT_792);
d4590 1
a4590 1
    stringBuffer.append(TEXT_793);
d4592 1
a4592 1
    stringBuffer.append(TEXT_794);
d4594 1
a4594 1
    stringBuffer.append(TEXT_795);
d4597 1
a4597 1
    stringBuffer.append(TEXT_796);
d4599 1
a4599 1
    stringBuffer.append(TEXT_797);
d4601 1
a4601 1
    stringBuffer.append(TEXT_798);
d4604 1
a4604 1
    stringBuffer.append(TEXT_799);
d4606 1
a4606 1
    stringBuffer.append(TEXT_800);
d4608 1
a4608 1
    stringBuffer.append(TEXT_801);
d4610 1
a4610 1
    stringBuffer.append(TEXT_802);
d4612 1
a4612 1
    stringBuffer.append(TEXT_803);
d4614 1
a4614 1
    stringBuffer.append(TEXT_804);
d4616 1
a4616 1
    stringBuffer.append(TEXT_805);
d4618 1
a4618 1
    stringBuffer.append(TEXT_806);
d4623 1
a4623 1
    stringBuffer.append(TEXT_807);
d4625 1
a4625 1
    stringBuffer.append(TEXT_808);
d4627 1
a4627 1
    stringBuffer.append(TEXT_809);
d4629 1
a4629 1
    stringBuffer.append(TEXT_810);
d4631 1
a4631 1
    stringBuffer.append(TEXT_811);
d4635 1
a4635 1
    stringBuffer.append(TEXT_812);
d4637 1
a4637 1
    stringBuffer.append(TEXT_813);
d4639 1
a4639 1
    stringBuffer.append(TEXT_814);
d4641 1
a4641 1
    stringBuffer.append(TEXT_815);
d4645 1
a4645 1
    stringBuffer.append(TEXT_816);
d4647 1
a4647 1
    stringBuffer.append(TEXT_817);
d4649 1
a4649 1
    stringBuffer.append(TEXT_818);
d4651 1
a4651 1
    stringBuffer.append(TEXT_819);
d4653 1
a4653 1
    stringBuffer.append(TEXT_820);
d4655 1
a4655 1
    stringBuffer.append(TEXT_821);
d4657 1
a4657 1
    stringBuffer.append(TEXT_822);
d4664 1
a4664 1
    stringBuffer.append(TEXT_823);
d4666 1
a4666 1
    stringBuffer.append(TEXT_824);
d4668 1
a4668 1
    stringBuffer.append(TEXT_825);
d4670 1
a4670 1
    stringBuffer.append(TEXT_826);
d4672 1
a4672 1
    stringBuffer.append(TEXT_827);
d4674 1
a4674 1
    stringBuffer.append(TEXT_828);
d4676 1
a4676 1
    stringBuffer.append(TEXT_829);
d4678 1
a4678 1
    stringBuffer.append(TEXT_830);
d4680 1
a4680 1
    stringBuffer.append(TEXT_831);
d4682 1
a4682 1
    stringBuffer.append(TEXT_832);
d4684 1
a4684 1
    stringBuffer.append(TEXT_833);
d4688 1
a4688 1
    stringBuffer.append(TEXT_834);
d4690 1
a4690 1
    stringBuffer.append(TEXT_835);
d4692 1
a4692 1
    stringBuffer.append(TEXT_836);
d4694 1
a4694 1
    stringBuffer.append(TEXT_837);
d4696 1
a4696 1
    stringBuffer.append(TEXT_838);
d4710 1
a4710 1
    stringBuffer.append(TEXT_839);
d4712 1
a4712 1
    stringBuffer.append(TEXT_840);
d4714 1
a4714 1
    stringBuffer.append(TEXT_841);
d4716 1
a4716 1
    stringBuffer.append(TEXT_842);
d4720 1
a4720 1
    stringBuffer.append(TEXT_843);
d4722 1
a4722 1
    stringBuffer.append(TEXT_844);
d4724 1
a4724 1
    stringBuffer.append(TEXT_845);
d4726 1
a4726 1
    stringBuffer.append(TEXT_846);
d4728 1
a4728 1
    stringBuffer.append(TEXT_847);
d4730 1
a4730 1
    stringBuffer.append(TEXT_848);
d4732 1
a4732 1
    stringBuffer.append(TEXT_849);
d4734 1
a4734 1
    stringBuffer.append(TEXT_850);
d4736 1
a4736 1
    stringBuffer.append(TEXT_851);
d4768 1
a4768 1
    stringBuffer.append(TEXT_852);
d4771 1
a4771 1
    stringBuffer.append(TEXT_853);
d4773 1
a4773 1
    stringBuffer.append(TEXT_854);
d4775 1
a4775 1
    stringBuffer.append(TEXT_855);
d4777 1
a4777 1
    stringBuffer.append(TEXT_856);
d4779 1
a4779 1
    stringBuffer.append(TEXT_857);
d4781 1
a4781 1
    stringBuffer.append(TEXT_858);
d4784 1
a4784 1
    stringBuffer.append(TEXT_859);
d4786 1
a4786 1
    stringBuffer.append(TEXT_860);
d4788 1
a4788 1
    stringBuffer.append(TEXT_861);
d4790 1
a4790 1
    stringBuffer.append(TEXT_862);
d4793 1
a4793 1
    stringBuffer.append(TEXT_863);
d4795 1
a4795 1
    stringBuffer.append(TEXT_864);
d4797 1
a4797 1
    stringBuffer.append(TEXT_865);
d4801 1
a4801 1
    stringBuffer.append(TEXT_866);
d4803 1
a4803 1
    stringBuffer.append(TEXT_867);
d4805 1
a4805 1
    stringBuffer.append(TEXT_868);
d4807 1
a4807 1
    stringBuffer.append(TEXT_869);
d4809 1
a4809 1
    stringBuffer.append(TEXT_870);
d4811 1
a4811 1
    stringBuffer.append(TEXT_871);
d4813 1
a4813 1
    stringBuffer.append(TEXT_872);
d4817 1
a4817 1
    stringBuffer.append(TEXT_873);
d4821 1
a4821 1
    stringBuffer.append(TEXT_874);
d4828 1
a4828 1
    stringBuffer.append(TEXT_875);
d4832 1
a4832 1
    stringBuffer.append(TEXT_876);
d4834 1
a4834 1
    stringBuffer.append(TEXT_877);
d4836 1
a4836 1
    stringBuffer.append(TEXT_878);
d4838 1
a4838 1
    stringBuffer.append(TEXT_879);
d4840 1
a4840 1
    stringBuffer.append(TEXT_880);
d4848 1
a4848 1
    stringBuffer.append(TEXT_881);
d4854 1
a4854 1
    stringBuffer.append(TEXT_882);
d4856 1
a4856 1
    stringBuffer.append(TEXT_883);
d4858 1
a4858 1
    stringBuffer.append(TEXT_884);
d4862 1
a4862 1
    stringBuffer.append(TEXT_885);
d4864 1
a4864 1
    stringBuffer.append(TEXT_886);
d4866 1
a4866 1
    stringBuffer.append(TEXT_887);
d4868 1
a4868 1
    stringBuffer.append(TEXT_888);
d4870 1
a4870 1
    stringBuffer.append(TEXT_889);
d4885 1
a4885 1
    stringBuffer.append(TEXT_890);
d4891 1
a4891 1
    stringBuffer.append(TEXT_891);
d4893 1
a4893 1
    stringBuffer.append(TEXT_892);
d4895 1
a4895 1
    stringBuffer.append(TEXT_893);
d4899 1
a4899 1
    stringBuffer.append(TEXT_894);
d4901 1
a4901 1
    stringBuffer.append(TEXT_895);
d4903 1
a4903 1
    stringBuffer.append(TEXT_896);
d4905 1
a4905 1
    stringBuffer.append(TEXT_897);
d4907 1
a4907 1
    stringBuffer.append(TEXT_898);
d4921 1
a4921 1
    stringBuffer.append(TEXT_899);
d4925 1
a4925 1
    stringBuffer.append(TEXT_900);
d4927 1
a4927 1
    stringBuffer.append(TEXT_901);
d4929 1
a4929 1
    stringBuffer.append(TEXT_902);
d4931 1
a4931 1
    stringBuffer.append(TEXT_903);
d4938 1
a4938 1
    stringBuffer.append(TEXT_904);
d4948 1
a4948 1
    stringBuffer.append(TEXT_905);
d4954 1
a4954 1
    stringBuffer.append(TEXT_906);
d4956 1
a4956 1
    stringBuffer.append(TEXT_907);
d4958 1
a4958 1
    stringBuffer.append(TEXT_908);
d4962 1
a4962 1
    stringBuffer.append(TEXT_909);
d4964 1
a4964 1
    stringBuffer.append(TEXT_910);
d4966 1
a4966 1
    stringBuffer.append(TEXT_911);
d4968 1
a4968 1
    stringBuffer.append(TEXT_912);
d4970 1
a4970 1
    stringBuffer.append(TEXT_913);
d4981 1
a4981 1
    stringBuffer.append(TEXT_914);
d4985 1
a4985 1
    stringBuffer.append(TEXT_915);
d4987 1
a4987 1
    stringBuffer.append(TEXT_916);
d4989 1
a4989 1
    stringBuffer.append(TEXT_917);
d4991 1
a4991 1
    stringBuffer.append(TEXT_918);
d4998 1
a4998 1
    stringBuffer.append(TEXT_919);
d5002 1
a5002 1
    stringBuffer.append(TEXT_920);
d5006 1
a5006 1
    stringBuffer.append(TEXT_921);
d5008 1
a5008 1
    stringBuffer.append(TEXT_922);
d5010 1
a5010 1
    stringBuffer.append(TEXT_923);
d5012 1
a5012 1
    stringBuffer.append(TEXT_924);
d5014 1
a5014 1
    stringBuffer.append(TEXT_925);
d5016 1
a5016 1
    stringBuffer.append(TEXT_926);
d5018 1
a5018 1
    stringBuffer.append(TEXT_927);
d5037 1
a5037 1
    stringBuffer.append(TEXT_928);
d5039 1
a5039 1
    stringBuffer.append(TEXT_929);
d5041 1
a5041 1
    stringBuffer.append(TEXT_930);
d5043 1
a5043 1
    stringBuffer.append(TEXT_931);
d5045 1
a5045 1
    stringBuffer.append(TEXT_932);
d5047 1
a5047 1
    stringBuffer.append(TEXT_933);
d5049 1
a5049 1
    stringBuffer.append(TEXT_934);
d5055 1
a5055 1
    stringBuffer.append(TEXT_935);
d5057 5
a5061 1
    stringBuffer.append(TEXT_936);
d5065 1
a5065 1
    stringBuffer.append(TEXT_937);
d5067 5
a5071 1
    stringBuffer.append(TEXT_938);
d5073 1
a5073 1
    stringBuffer.append(TEXT_939);
d5077 1
a5077 1
    stringBuffer.append(TEXT_940);
d5079 1
a5079 1
    stringBuffer.append(TEXT_941);
d5081 1
a5081 1
    stringBuffer.append(TEXT_942);
d5083 1
a5083 1
    stringBuffer.append(TEXT_943);
d5089 1
a5089 1
    stringBuffer.append(TEXT_944);
d5091 1
a5091 1
    stringBuffer.append(TEXT_945);
d5093 1
a5093 1
    stringBuffer.append(TEXT_946);
d5095 1
a5095 1
    stringBuffer.append(TEXT_947);
d5099 1
a5099 1
    stringBuffer.append(TEXT_948);
d5101 1
a5101 1
    stringBuffer.append(TEXT_949);
d5103 1
a5103 1
    stringBuffer.append(TEXT_950);
d5105 1
a5105 1
    stringBuffer.append(TEXT_951);
d5107 1
a5107 1
    stringBuffer.append(TEXT_952);
d5111 1
a5111 1
    stringBuffer.append(TEXT_953);
d5113 1
a5113 1
    stringBuffer.append(TEXT_954);
d5115 1
a5115 1
    stringBuffer.append(TEXT_955);
d5117 1
a5117 1
    stringBuffer.append(TEXT_956);
d5121 1
a5121 1
    stringBuffer.append(TEXT_957);
d5126 1
a5126 1
    stringBuffer.append(TEXT_958);
d5128 1
a5128 1
    stringBuffer.append(TEXT_959);
d5130 1
a5130 1
    stringBuffer.append(TEXT_960);
d5132 1
a5132 1
    stringBuffer.append(TEXT_961);
d5134 1
a5134 1
    stringBuffer.append(TEXT_962);
d5136 1
a5136 1
    stringBuffer.append(TEXT_963);
d5138 1
a5138 1
    stringBuffer.append(TEXT_964);
d5142 1
a5142 1
    stringBuffer.append(TEXT_965);
d5144 1
a5144 1
    stringBuffer.append(TEXT_966);
d5146 1
a5146 1
    stringBuffer.append(TEXT_967);
d5148 1
a5148 1
    stringBuffer.append(TEXT_968);
d5156 1
a5156 1
    stringBuffer.append(TEXT_969);
d5158 1
a5158 1
    stringBuffer.append(TEXT_970);
d5160 1
a5160 1
    stringBuffer.append(TEXT_971);
d5162 1
a5162 1
    stringBuffer.append(TEXT_972);
d5164 1
a5164 1
    stringBuffer.append(TEXT_973);
d5166 1
a5166 1
    stringBuffer.append(TEXT_974);
d5168 1
a5168 1
    stringBuffer.append(TEXT_975);
d5172 1
a5172 1
    stringBuffer.append(TEXT_976);
d5174 1
a5174 1
    stringBuffer.append(TEXT_977);
d5176 1
a5176 1
    stringBuffer.append(TEXT_978);
d5178 1
a5178 1
    stringBuffer.append(TEXT_979);
d5180 1
a5180 1
    stringBuffer.append(TEXT_980);
d5182 1
a5182 1
    stringBuffer.append(TEXT_981);
d5184 1
a5184 1
    stringBuffer.append(TEXT_982);
d5186 1
a5186 1
    stringBuffer.append(TEXT_983);
d5191 2
a5192 2
    stringBuffer.append(TEXT_984);
    stringBuffer.append(TEXT_985);
d5196 1
a5196 1
    stringBuffer.append(TEXT_986);
d5198 1
a5198 1
    stringBuffer.append(TEXT_987);
d5200 1
a5200 1
    stringBuffer.append(TEXT_988);
d5202 1
a5202 1
    stringBuffer.append(TEXT_989);
d5210 2
a5211 2
    stringBuffer.append(TEXT_990);
    stringBuffer.append(TEXT_991);
d5215 1
a5215 1
    stringBuffer.append(TEXT_992);
d5217 1
a5217 1
    stringBuffer.append(TEXT_993);
d5219 1
a5219 1
    stringBuffer.append(TEXT_994);
d5246 1
a5246 1
    stringBuffer.append(TEXT_995);
d5248 1
a5248 1
    stringBuffer.append(TEXT_996);
d5250 1
a5250 1
    stringBuffer.append(TEXT_997);
d5254 1
a5254 1
    stringBuffer.append(TEXT_998);
d5256 1
a5256 1
    stringBuffer.append(TEXT_999);
d5258 5
a5262 1
    stringBuffer.append(TEXT_1000);
d5264 1
a5264 3
    stringBuffer.append(TEXT_1001);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1002);
d5268 1
a5268 1
    stringBuffer.append(TEXT_1003);
d5270 1
a5270 1
    stringBuffer.append(TEXT_1004);
d5272 5
a5276 3
    stringBuffer.append(TEXT_1005);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1006);
d5278 1
a5278 1
    stringBuffer.append(TEXT_1007);
d5283 1
a5283 1
    stringBuffer.append(TEXT_1008);
d5285 1
a5285 1
    stringBuffer.append(TEXT_1009);
d5291 1
a5291 1
    stringBuffer.append(TEXT_1010);
d5293 1
a5293 1
    stringBuffer.append(TEXT_1011);
d5295 1
a5295 1
    stringBuffer.append(TEXT_1012);
d5297 1
a5297 1
    stringBuffer.append(TEXT_1013);
d5299 1
a5299 1
    stringBuffer.append(TEXT_1014);
d5301 1
a5301 1
    stringBuffer.append(TEXT_1015);
d5305 1
a5305 1
    stringBuffer.append(TEXT_1016);
d5307 1
a5307 1
    stringBuffer.append(TEXT_1017);
d5309 1
a5309 1
    stringBuffer.append(TEXT_1018);
d5311 1
a5311 1
    stringBuffer.append(TEXT_1019);
d5313 1
a5313 1
    stringBuffer.append(TEXT_1020);
d5315 1
a5315 1
    stringBuffer.append(TEXT_1021);
d5322 1
a5322 1
    stringBuffer.append(TEXT_1022);
d5324 1
a5324 1
    stringBuffer.append(TEXT_1023);
d5326 1
a5326 1
    stringBuffer.append(TEXT_1024);
d5328 1
a5328 1
    stringBuffer.append(TEXT_1025);
d5330 1
a5330 1
    stringBuffer.append(TEXT_1026);
d5332 1
a5332 1
    stringBuffer.append(TEXT_1027);
d5336 1
a5336 1
    stringBuffer.append(TEXT_1028);
d5338 1
a5338 1
    stringBuffer.append(TEXT_1029);
d5340 1
a5340 1
    stringBuffer.append(TEXT_1030);
d5342 1
a5342 1
    stringBuffer.append(TEXT_1031);
d5344 1
a5344 1
    stringBuffer.append(TEXT_1032);
d5346 1
a5346 1
    stringBuffer.append(TEXT_1033);
d5353 1
a5353 1
    stringBuffer.append(TEXT_1034);
d5355 1
a5355 1
    stringBuffer.append(TEXT_1035);
d5357 1
a5357 1
    stringBuffer.append(TEXT_1036);
d5359 1
a5359 1
    stringBuffer.append(TEXT_1037);
d5361 1
a5361 1
    stringBuffer.append(TEXT_1038);
d5363 1
a5363 1
    stringBuffer.append(TEXT_1039);
d5367 1
a5367 1
    stringBuffer.append(TEXT_1040);
d5369 1
a5369 1
    stringBuffer.append(TEXT_1041);
d5371 1
a5371 1
    stringBuffer.append(TEXT_1042);
d5373 1
a5373 1
    stringBuffer.append(TEXT_1043);
d5375 1
a5375 1
    stringBuffer.append(TEXT_1044);
d5377 1
a5377 1
    stringBuffer.append(TEXT_1045);
d5382 1
a5382 1
    stringBuffer.append(TEXT_1046);
d5388 1
a5388 1
    stringBuffer.append(TEXT_1047);
d5390 1
a5390 1
    stringBuffer.append(TEXT_1048);
d5392 1
a5392 1
    stringBuffer.append(TEXT_1049);
d5394 1
a5394 1
    stringBuffer.append(TEXT_1050);
d5396 1
a5396 1
    stringBuffer.append(TEXT_1051);
d5398 1
a5398 1
    stringBuffer.append(TEXT_1052);
d5402 1
a5402 1
    stringBuffer.append(TEXT_1053);
d5404 1
a5404 1
    stringBuffer.append(TEXT_1054);
d5406 1
a5406 1
    stringBuffer.append(TEXT_1055);
d5408 1
a5408 1
    stringBuffer.append(TEXT_1056);
d5410 1
a5410 1
    stringBuffer.append(TEXT_1057);
d5412 1
a5412 1
    stringBuffer.append(TEXT_1058);
d5419 1
a5419 1
    stringBuffer.append(TEXT_1059);
d5423 1
a5423 1
    stringBuffer.append(TEXT_1060);
d5427 1
a5427 1
    stringBuffer.append(TEXT_1061);
d5430 1
a5430 1
    stringBuffer.append(TEXT_1062);
d5432 1
a5432 1
    stringBuffer.append(TEXT_1063);
d5434 1
a5434 1
    stringBuffer.append(TEXT_1064);
d5437 1
a5437 1
    stringBuffer.append(TEXT_1065);
d5439 1
a5439 1
    stringBuffer.append(TEXT_1066);
d5441 1
a5441 1
    stringBuffer.append(TEXT_1067);
d5448 1
a5448 1
    stringBuffer.append(TEXT_1068);
d5452 1
a5452 1
    stringBuffer.append(TEXT_1069);
d5454 1
a5454 1
    stringBuffer.append(TEXT_1070);
d5456 1
a5456 1
    stringBuffer.append(TEXT_1071);
d5458 1
a5458 1
    stringBuffer.append(TEXT_1072);
d5460 1
a5460 1
    stringBuffer.append(TEXT_1073);
d5468 1
a5468 1
    stringBuffer.append(TEXT_1074);
d5474 1
a5474 1
    stringBuffer.append(TEXT_1075);
d5476 1
a5476 1
    stringBuffer.append(TEXT_1076);
d5478 1
a5478 1
    stringBuffer.append(TEXT_1077);
d5482 1
a5482 1
    stringBuffer.append(TEXT_1078);
d5484 1
a5484 1
    stringBuffer.append(TEXT_1079);
d5486 1
a5486 1
    stringBuffer.append(TEXT_1080);
d5488 1
a5488 1
    stringBuffer.append(TEXT_1081);
d5490 1
a5490 1
    stringBuffer.append(TEXT_1082);
d5505 1
a5505 1
    stringBuffer.append(TEXT_1083);
d5511 1
a5511 1
    stringBuffer.append(TEXT_1084);
d5513 1
a5513 1
    stringBuffer.append(TEXT_1085);
d5515 1
a5515 1
    stringBuffer.append(TEXT_1086);
d5519 1
a5519 1
    stringBuffer.append(TEXT_1087);
d5521 1
a5521 1
    stringBuffer.append(TEXT_1088);
d5523 1
a5523 1
    stringBuffer.append(TEXT_1089);
d5525 1
a5525 1
    stringBuffer.append(TEXT_1090);
d5527 1
a5527 1
    stringBuffer.append(TEXT_1091);
d5539 1
a5539 1
    stringBuffer.append(TEXT_1092);
d5543 1
a5543 1
    stringBuffer.append(TEXT_1093);
d5545 1
a5545 1
    stringBuffer.append(TEXT_1094);
d5547 1
a5547 1
    stringBuffer.append(TEXT_1095);
d5549 1
a5549 1
    stringBuffer.append(TEXT_1096);
d5556 1
a5556 1
    stringBuffer.append(TEXT_1097);
d5567 1
a5567 1
    stringBuffer.append(TEXT_1098);
d5573 1
a5573 1
    stringBuffer.append(TEXT_1099);
d5575 1
a5575 1
    stringBuffer.append(TEXT_1100);
d5577 1
a5577 1
    stringBuffer.append(TEXT_1101);
d5581 1
a5581 1
    stringBuffer.append(TEXT_1102);
d5583 1
a5583 1
    stringBuffer.append(TEXT_1103);
d5585 1
a5585 1
    stringBuffer.append(TEXT_1104);
d5587 1
a5587 1
    stringBuffer.append(TEXT_1105);
d5589 1
a5589 1
    stringBuffer.append(TEXT_1106);
d5600 1
a5600 1
    stringBuffer.append(TEXT_1107);
d5604 1
a5604 1
    stringBuffer.append(TEXT_1108);
d5606 1
a5606 1
    stringBuffer.append(TEXT_1109);
d5608 1
a5608 1
    stringBuffer.append(TEXT_1110);
d5610 1
a5610 1
    stringBuffer.append(TEXT_1111);
d5617 1
a5617 1
    stringBuffer.append(TEXT_1112);
d5621 1
a5621 1
    stringBuffer.append(TEXT_1113);
d5625 2
a5626 2
    stringBuffer.append(TEXT_1114);
    stringBuffer.append(TEXT_1115);
d5630 1
a5630 1
    stringBuffer.append(TEXT_1116);
d5632 1
a5632 1
    stringBuffer.append(TEXT_1117);
d5634 1
a5634 1
    stringBuffer.append(TEXT_1118);
d5636 1
a5636 1
    stringBuffer.append(TEXT_1119);
d5640 1
a5640 1
    stringBuffer.append(TEXT_1120);
d5670 1
a5670 1
    stringBuffer.append(TEXT_1121);
d5673 1
a5673 1
    stringBuffer.append(TEXT_1122);
d5675 1
a5675 1
    stringBuffer.append(TEXT_1123);
d5677 1
a5677 1
    stringBuffer.append(TEXT_1124);
d5679 1
a5679 1
    stringBuffer.append(TEXT_1125);
d5681 1
a5681 1
    stringBuffer.append(TEXT_1126);
d5683 1
a5683 1
    stringBuffer.append(TEXT_1127);
d5686 1
a5686 1
    stringBuffer.append(TEXT_1128);
d5688 1
a5688 1
    stringBuffer.append(TEXT_1129);
d5690 1
a5690 1
    stringBuffer.append(TEXT_1130);
d5692 1
a5692 1
    stringBuffer.append(TEXT_1131);
d5695 1
a5695 1
    stringBuffer.append(TEXT_1132);
d5697 1
a5697 1
    stringBuffer.append(TEXT_1133);
d5699 1
a5699 1
    stringBuffer.append(TEXT_1134);
d5703 1
a5703 1
    stringBuffer.append(TEXT_1135);
d5705 1
a5705 1
    stringBuffer.append(TEXT_1136);
d5707 1
a5707 1
    stringBuffer.append(TEXT_1137);
d5709 1
a5709 1
    stringBuffer.append(TEXT_1138);
d5711 1
a5711 1
    stringBuffer.append(TEXT_1139);
d5713 1
a5713 1
    stringBuffer.append(TEXT_1140);
d5715 1
a5715 1
    stringBuffer.append(TEXT_1141);
d5719 1
a5719 1
    stringBuffer.append(TEXT_1142);
d5723 1
a5723 1
    stringBuffer.append(TEXT_1143);
d5730 1
a5730 1
    stringBuffer.append(TEXT_1144);
d5734 1
a5734 1
    stringBuffer.append(TEXT_1145);
d5736 1
a5736 1
    stringBuffer.append(TEXT_1146);
d5738 1
a5738 1
    stringBuffer.append(TEXT_1147);
d5740 1
a5740 1
    stringBuffer.append(TEXT_1148);
d5747 1
a5747 1
    stringBuffer.append(TEXT_1149);
d5754 1
a5754 1
    stringBuffer.append(TEXT_1150);
d5758 1
a5758 1
    stringBuffer.append(TEXT_1151);
d5760 1
a5760 1
    stringBuffer.append(TEXT_1152);
d5762 1
a5762 1
    stringBuffer.append(TEXT_1153);
d5764 1
a5764 1
    stringBuffer.append(TEXT_1154);
d5771 1
a5771 1
    stringBuffer.append(TEXT_1155);
d5775 1
a5775 1
    stringBuffer.append(TEXT_1156);
d5779 1
a5779 1
    stringBuffer.append(TEXT_1157);
d5781 1
a5781 1
    stringBuffer.append(TEXT_1158);
d5783 1
a5783 1
    stringBuffer.append(TEXT_1159);
d5785 1
a5785 1
    stringBuffer.append(TEXT_1160);
d5787 1
a5787 1
    stringBuffer.append(TEXT_1161);
d5789 1
a5789 1
    stringBuffer.append(TEXT_1162);
d5791 1
a5791 1
    stringBuffer.append(TEXT_1163);
d5798 1
a5798 1
    stringBuffer.append(TEXT_1164);
d5800 1
a5800 1
    stringBuffer.append(TEXT_1165);
d5802 1
a5802 1
    stringBuffer.append(TEXT_1166);
d5804 1
a5804 1
    stringBuffer.append(TEXT_1167);
d5806 1
a5806 1
    stringBuffer.append(TEXT_1168);
d5808 1
a5808 1
    stringBuffer.append(TEXT_1169);
d5810 1
a5810 1
    stringBuffer.append(TEXT_1170);
d5814 1
a5814 1
    stringBuffer.append(TEXT_1171);
d5816 1
a5816 1
    stringBuffer.append(TEXT_1172);
d5818 1
a5818 1
    stringBuffer.append(TEXT_1173);
d5820 1
a5820 1
    stringBuffer.append(TEXT_1174);
d5827 1
a5827 1
    stringBuffer.append(TEXT_1175);
d5829 1
a5829 1
    stringBuffer.append(TEXT_1176);
d5831 1
a5831 1
    stringBuffer.append(TEXT_1177);
d5833 1
a5833 1
    stringBuffer.append(TEXT_1178);
d5835 1
a5835 1
    stringBuffer.append(TEXT_1179);
d5837 1
a5837 1
    stringBuffer.append(TEXT_1180);
d5839 1
a5839 1
    stringBuffer.append(TEXT_1181);
d5843 1
a5843 1
    stringBuffer.append(TEXT_1182);
d5845 1
a5845 1
    stringBuffer.append(TEXT_1183);
d5847 1
a5847 1
    stringBuffer.append(TEXT_1184);
d5849 1
a5849 1
    stringBuffer.append(TEXT_1185);
d5854 1
a5854 1
    stringBuffer.append(TEXT_1186);
d5859 2
a5860 2
    stringBuffer.append(TEXT_1187);
    stringBuffer.append(TEXT_1188);
d5864 1
a5864 1
    stringBuffer.append(TEXT_1189);
d5866 1
a5866 1
    stringBuffer.append(TEXT_1190);
d5868 1
a5868 1
    stringBuffer.append(TEXT_1191);
d5895 1
a5895 1
    stringBuffer.append(TEXT_1192);
d5897 1
a5897 1
    stringBuffer.append(TEXT_1193);
d5899 1
a5899 1
    stringBuffer.append(TEXT_1194);
d5903 1
a5903 1
    stringBuffer.append(TEXT_1195);
d5905 1
a5905 1
    stringBuffer.append(TEXT_1196);
d5907 5
a5911 1
    stringBuffer.append(TEXT_1197);
d5913 1
a5913 3
    stringBuffer.append(TEXT_1198);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1199);
d5917 1
a5917 1
    stringBuffer.append(TEXT_1200);
d5919 1
a5919 1
    stringBuffer.append(TEXT_1201);
d5921 5
a5925 3
    stringBuffer.append(TEXT_1202);
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1203);
d5927 1
a5927 1
    stringBuffer.append(TEXT_1204);
d5932 1
a5932 1
    stringBuffer.append(TEXT_1205);
d5934 1
a5934 1
    stringBuffer.append(TEXT_1206);
d5940 1
a5940 1
    stringBuffer.append(TEXT_1207);
d5942 1
a5942 1
    stringBuffer.append(TEXT_1208);
d5944 1
a5944 1
    stringBuffer.append(TEXT_1209);
d5946 1
a5946 1
    stringBuffer.append(TEXT_1210);
d5948 1
a5948 1
    stringBuffer.append(TEXT_1211);
d5950 1
a5950 1
    stringBuffer.append(TEXT_1212);
d5954 1
a5954 1
    stringBuffer.append(TEXT_1213);
d5956 1
a5956 1
    stringBuffer.append(TEXT_1214);
d5958 1
a5958 1
    stringBuffer.append(TEXT_1215);
d5960 1
a5960 1
    stringBuffer.append(TEXT_1216);
d5962 1
a5962 1
    stringBuffer.append(TEXT_1217);
d5964 1
a5964 1
    stringBuffer.append(TEXT_1218);
d5971 1
a5971 1
    stringBuffer.append(TEXT_1219);
d5973 1
a5973 1
    stringBuffer.append(TEXT_1220);
d5975 1
a5975 1
    stringBuffer.append(TEXT_1221);
d5977 1
a5977 1
    stringBuffer.append(TEXT_1222);
d5979 1
a5979 1
    stringBuffer.append(TEXT_1223);
d5981 1
a5981 1
    stringBuffer.append(TEXT_1224);
d5985 1
a5985 1
    stringBuffer.append(TEXT_1225);
d5987 1
a5987 1
    stringBuffer.append(TEXT_1226);
d5989 1
a5989 1
    stringBuffer.append(TEXT_1227);
d5991 1
a5991 1
    stringBuffer.append(TEXT_1228);
d5993 1
a5993 1
    stringBuffer.append(TEXT_1229);
d5995 1
a5995 1
    stringBuffer.append(TEXT_1230);
d6002 1
a6002 1
    stringBuffer.append(TEXT_1231);
d6004 1
a6004 1
    stringBuffer.append(TEXT_1232);
d6006 1
a6006 1
    stringBuffer.append(TEXT_1233);
d6008 1
a6008 1
    stringBuffer.append(TEXT_1234);
d6010 1
a6010 1
    stringBuffer.append(TEXT_1235);
d6012 1
a6012 1
    stringBuffer.append(TEXT_1236);
d6016 1
a6016 1
    stringBuffer.append(TEXT_1237);
d6018 1
a6018 1
    stringBuffer.append(TEXT_1238);
d6020 1
a6020 1
    stringBuffer.append(TEXT_1239);
d6022 1
a6022 1
    stringBuffer.append(TEXT_1240);
d6024 1
a6024 1
    stringBuffer.append(TEXT_1241);
d6026 1
a6026 1
    stringBuffer.append(TEXT_1242);
d6031 1
a6031 1
    stringBuffer.append(TEXT_1243);
d6037 1
a6037 1
    stringBuffer.append(TEXT_1244);
d6039 1
a6039 1
    stringBuffer.append(TEXT_1245);
d6041 1
a6041 1
    stringBuffer.append(TEXT_1246);
d6043 1
a6043 1
    stringBuffer.append(TEXT_1247);
d6045 1
a6045 1
    stringBuffer.append(TEXT_1248);
d6047 1
a6047 1
    stringBuffer.append(TEXT_1249);
d6051 1
a6051 1
    stringBuffer.append(TEXT_1250);
d6053 1
a6053 1
    stringBuffer.append(TEXT_1251);
d6055 1
a6055 1
    stringBuffer.append(TEXT_1252);
d6057 1
a6057 1
    stringBuffer.append(TEXT_1253);
d6059 1
a6059 1
    stringBuffer.append(TEXT_1254);
d6061 1
a6061 1
    stringBuffer.append(TEXT_1255);
d6068 1
a6068 1
    stringBuffer.append(TEXT_1256);
d6072 1
a6072 1
    stringBuffer.append(TEXT_1257);
d6076 1
a6076 1
    stringBuffer.append(TEXT_1258);
d6079 1
a6079 1
    stringBuffer.append(TEXT_1259);
d6081 1
a6081 1
    stringBuffer.append(TEXT_1260);
d6083 1
a6083 1
    stringBuffer.append(TEXT_1261);
d6085 1
a6085 1
    stringBuffer.append(TEXT_1262);
d6087 1
a6087 1
    stringBuffer.append(TEXT_1263);
d6090 1
a6090 1
    stringBuffer.append(TEXT_1264);
d6092 1
a6092 1
    stringBuffer.append(TEXT_1265);
d6094 1
a6094 1
    stringBuffer.append(TEXT_1266);
d6096 1
a6096 1
    stringBuffer.append(TEXT_1267);
d6098 1
a6098 1
    stringBuffer.append(TEXT_1268);
d6100 1
a6100 1
    stringBuffer.append(TEXT_1269);
d6102 1
a6102 1
    stringBuffer.append(TEXT_1270);
d6104 1
a6104 1
    stringBuffer.append(TEXT_1271);
d6110 1
a6110 1
    stringBuffer.append(TEXT_1272);
d6112 1
a6112 1
    stringBuffer.append(TEXT_1273);
d6114 1
a6114 1
    stringBuffer.append(TEXT_1274);
d6116 1
a6116 1
    stringBuffer.append(TEXT_1275);
d6118 1
a6118 1
    stringBuffer.append(TEXT_1276);
d6120 1
a6120 1
    stringBuffer.append(TEXT_1277);
d6122 1
a6122 1
    stringBuffer.append(TEXT_1278);
d6124 1
a6124 1
    stringBuffer.append(TEXT_1279);
d6126 1
a6126 1
    stringBuffer.append(TEXT_1280);
d6128 1
a6128 1
    stringBuffer.append(TEXT_1281);
d6130 1
a6130 1
    stringBuffer.append(TEXT_1282);
d6132 1
a6132 1
    stringBuffer.append(TEXT_1283);
d6134 1
a6134 1
    stringBuffer.append(TEXT_1284);
d6138 1
a6138 1
    stringBuffer.append(TEXT_1285);
d6142 1
a6142 1
    stringBuffer.append(TEXT_1286);
d6144 1
a6144 1
    stringBuffer.append(TEXT_1287);
d6146 1
a6146 1
    stringBuffer.append(TEXT_1288);
d6148 1
a6148 1
    stringBuffer.append(TEXT_1289);
d6152 1
a6152 1
    stringBuffer.append(TEXT_1290);
d6179 1
a6179 1
    stringBuffer.append(TEXT_1291);
d6181 1
a6181 1
    stringBuffer.append(TEXT_1292);
d6183 1
a6183 1
    stringBuffer.append(TEXT_1293);
d6185 1
a6185 1
    stringBuffer.append(TEXT_1294);
d6187 1
a6187 1
    stringBuffer.append(TEXT_1295);
d6189 1
a6189 1
    stringBuffer.append(TEXT_1296);
d6191 1
a6191 1
    stringBuffer.append(TEXT_1297);
d6196 1
a6196 1
    stringBuffer.append(TEXT_1298);
d6198 1
a6198 1
    stringBuffer.append(TEXT_1299);
d6200 1
a6200 1
    stringBuffer.append(TEXT_1300);
d6202 1
a6202 1
    stringBuffer.append(TEXT_1301);
d6212 1
a6212 1
    stringBuffer.append(TEXT_1302);
d6218 1
a6218 1
    stringBuffer.append(TEXT_1303);
d6220 1
a6220 1
    stringBuffer.append(TEXT_1304);
d6222 1
a6222 1
    stringBuffer.append(TEXT_1305);
d6226 1
a6226 1
    stringBuffer.append(TEXT_1306);
d6228 1
a6228 1
    stringBuffer.append(TEXT_1307);
d6230 1
a6230 1
    stringBuffer.append(TEXT_1308);
d6232 1
a6232 1
    stringBuffer.append(TEXT_1309);
d6234 1
a6234 1
    stringBuffer.append(TEXT_1310);
d6242 1
a6242 1
    stringBuffer.append(TEXT_1311);
d6244 1
a6244 1
    stringBuffer.append(TEXT_1312);
d6246 1
a6246 1
    stringBuffer.append(TEXT_1313);
d6248 1
a6248 1
    stringBuffer.append(TEXT_1314);
d6258 1
a6258 1
    stringBuffer.append(TEXT_1315);
d6264 1
a6264 1
    stringBuffer.append(TEXT_1316);
d6266 1
a6266 1
    stringBuffer.append(TEXT_1317);
d6268 1
a6268 1
    stringBuffer.append(TEXT_1318);
d6272 1
a6272 1
    stringBuffer.append(TEXT_1319);
d6274 1
a6274 1
    stringBuffer.append(TEXT_1320);
d6276 1
a6276 1
    stringBuffer.append(TEXT_1321);
d6278 1
a6278 1
    stringBuffer.append(TEXT_1322);
d6280 1
a6280 1
    stringBuffer.append(TEXT_1323);
d6288 1
a6288 1
    stringBuffer.append(TEXT_1324);
d6290 1
a6290 1
    stringBuffer.append(TEXT_1325);
d6292 1
a6292 1
    stringBuffer.append(TEXT_1326);
d6294 1
a6294 1
    stringBuffer.append(TEXT_1327);
d6298 1
a6298 1
    stringBuffer.append(TEXT_1328);
d6303 1
a6303 1
    stringBuffer.append(TEXT_1329);
d6305 1
a6305 1
    stringBuffer.append(TEXT_1330);
d6307 1
a6307 1
    stringBuffer.append(TEXT_1331);
d6309 1
a6309 1
    stringBuffer.append(TEXT_1332);
d6313 2
a6314 2
    stringBuffer.append(TEXT_1333);
    stringBuffer.append(TEXT_1334);
d6318 1
a6318 1
    stringBuffer.append(TEXT_1335);
d6320 1
a6320 1
    stringBuffer.append(TEXT_1336);
d6322 1
a6322 1
    stringBuffer.append(TEXT_1337);
d6324 1
a6324 1
    stringBuffer.append(TEXT_1338);
d6328 1
a6328 1
    stringBuffer.append(TEXT_1339);
d6334 1
a6334 1
    stringBuffer.append(TEXT_1340);
d6338 1
a6338 1
    stringBuffer.append(TEXT_1341);
d6340 1
a6340 1
    stringBuffer.append(TEXT_1342);
d6342 1
a6342 1
    stringBuffer.append(TEXT_1343);
d6344 1
a6344 1
    stringBuffer.append(TEXT_1344);
d6351 1
a6351 1
    stringBuffer.append(TEXT_1345);
d6360 1
a6360 1
    stringBuffer.append(TEXT_1346);
d6362 1
a6362 1
    stringBuffer.append(TEXT_1347);
d6366 1
a6366 1
    stringBuffer.append(TEXT_1348);
d6373 1
a6373 1
    stringBuffer.append(TEXT_1349);
d6375 1
a6375 1
    stringBuffer.append(TEXT_1350);
d6377 3
a6379 3
    stringBuffer.append(TEXT_1351);
    stringBuffer.append(TEXT_1352);
    stringBuffer.append(TEXT_1353);
d6381 1
a6381 1
    stringBuffer.append(TEXT_1354);
d6383 1
a6383 1
    stringBuffer.append(TEXT_1355);
d6385 1
a6385 1
    stringBuffer.append(TEXT_1356);
d6387 1
a6387 1
    stringBuffer.append(TEXT_1357);
d6389 1
a6389 1
    stringBuffer.append(TEXT_1358);
d6391 1
a6391 1
    stringBuffer.append(TEXT_1359);
d6393 1
a6393 1
    stringBuffer.append(TEXT_1360);
d6395 1
a6395 1
    stringBuffer.append(TEXT_1361);
d6397 1
a6397 1
    stringBuffer.append(TEXT_1362);
d6399 1
a6399 1
    stringBuffer.append(TEXT_1363);
d6401 1
a6401 1
    stringBuffer.append(TEXT_1364);
d6409 1
a6409 1
    stringBuffer.append(TEXT_1365);
d6411 1
a6411 1
    stringBuffer.append(TEXT_1366);
d6413 1
a6413 1
    stringBuffer.append(TEXT_1367);
d6417 1
a6417 1
    stringBuffer.append(TEXT_1368);
d6419 1
a6419 1
    stringBuffer.append(TEXT_1369);
d6421 1
a6421 1
    stringBuffer.append(TEXT_1370);
d6423 1
a6423 1
    stringBuffer.append(TEXT_1371);
d6427 1
a6427 1
    stringBuffer.append(TEXT_1372);
d6429 1
a6429 1
    stringBuffer.append(TEXT_1373);
d6431 1
a6431 1
    stringBuffer.append(TEXT_1374);
d6433 1
a6433 1
    stringBuffer.append(TEXT_1375);
d6435 1
a6435 1
    stringBuffer.append(TEXT_1376);
d6442 1
a6442 1
    stringBuffer.append(TEXT_1377);
d6444 1
a6444 1
    stringBuffer.append(TEXT_1378);
d6446 1
a6446 1
    stringBuffer.append(TEXT_1379);
d6448 1
a6448 1
    stringBuffer.append(TEXT_1380);
d6452 1
a6452 1
    stringBuffer.append(TEXT_1381);
d6454 1
a6454 1
    stringBuffer.append(TEXT_1382);
d6456 1
a6456 1
    stringBuffer.append(TEXT_1383);
d6458 1
a6458 1
    stringBuffer.append(TEXT_1384);
d6460 1
a6460 1
    stringBuffer.append(TEXT_1385);
d6464 1
a6464 1
    stringBuffer.append(TEXT_1386);
d6469 1
a6469 1
    stringBuffer.append(TEXT_1387);
d6471 1
a6471 1
    stringBuffer.append(TEXT_1388);
d6473 1
a6473 1
    stringBuffer.append(TEXT_1389);
d6475 1
a6475 1
    stringBuffer.append(TEXT_1390);
d6479 1
a6479 1
    stringBuffer.append(TEXT_1391);
d6481 1
a6481 1
    stringBuffer.append(TEXT_1392);
d6483 1
a6483 1
    stringBuffer.append(TEXT_1393);
d6485 1
a6485 1
    stringBuffer.append(TEXT_1394);
d6487 1
a6487 1
    stringBuffer.append(TEXT_1395);
d6492 1
a6492 1
    stringBuffer.append(TEXT_1396);
d6503 2
a6504 2
    stringBuffer.append(TEXT_1397);
    stringBuffer.append(TEXT_1398);
d6506 1
a6506 1
    stringBuffer.append(TEXT_1399);
d6508 1
a6508 1
    stringBuffer.append(TEXT_1400);
d6510 3
a6512 3
    stringBuffer.append(TEXT_1401);
    stringBuffer.append(TEXT_1402);
    stringBuffer.append(TEXT_1403);
d6514 1
a6514 1
    stringBuffer.append(TEXT_1404);
d6516 1
a6516 1
    stringBuffer.append(TEXT_1405);
d6518 1
a6518 1
    stringBuffer.append(TEXT_1406);
d6520 1
a6520 1
    stringBuffer.append(TEXT_1407);
d6522 1
a6522 1
    stringBuffer.append(TEXT_1408);
d6524 1
a6524 1
    stringBuffer.append(TEXT_1409);
d6526 1
a6526 1
    stringBuffer.append(TEXT_1410);
d6528 1
a6528 1
    stringBuffer.append(TEXT_1411);
d6530 1
a6530 1
    stringBuffer.append(TEXT_1412);
d6532 1
a6532 1
    stringBuffer.append(TEXT_1413);
d6534 1
a6534 1
    stringBuffer.append(TEXT_1414);
d6540 1
a6540 1
    stringBuffer.append(TEXT_1415);
d6542 1
a6542 1
    stringBuffer.append(TEXT_1416);
d6544 1
a6544 1
    stringBuffer.append(TEXT_1417);
d6546 1
a6546 1
    stringBuffer.append(TEXT_1418);
d6548 1
a6548 1
    stringBuffer.append(TEXT_1419);
d6550 1
a6550 1
    stringBuffer.append(TEXT_1420);
d6552 1
a6552 1
    stringBuffer.append(TEXT_1421);
d6554 1
a6554 1
    stringBuffer.append(TEXT_1422);
d6556 1
a6556 1
    stringBuffer.append(TEXT_1423);
d6558 1
a6558 1
    stringBuffer.append(TEXT_1424);
d6560 1
a6560 1
    stringBuffer.append(TEXT_1425);
d6562 1
a6562 1
    stringBuffer.append(TEXT_1426);
d6564 1
a6564 1
    stringBuffer.append(TEXT_1427);
d6566 1
a6566 1
    stringBuffer.append(TEXT_1428);
d6570 1
a6570 1
    stringBuffer.append(TEXT_1429);
d6572 1
a6572 1
    stringBuffer.append(TEXT_1430);
d6574 1
a6574 1
    stringBuffer.append(TEXT_1431);
d6576 1
a6576 1
    stringBuffer.append(TEXT_1432);
d6578 1
a6578 1
    stringBuffer.append(TEXT_1433);
d6580 1
a6580 1
    stringBuffer.append(TEXT_1434);
d6582 1
a6582 1
    stringBuffer.append(TEXT_1435);
d6584 1
a6584 1
    stringBuffer.append(TEXT_1436);
d6588 1
a6588 1
    stringBuffer.append(TEXT_1437);
d6590 1
a6590 1
    stringBuffer.append(TEXT_1438);
d6594 1
a6594 1
    stringBuffer.append(TEXT_1439);
d6600 1
a6600 1
    stringBuffer.append(TEXT_1440);
d6602 1
a6602 1
    stringBuffer.append(TEXT_1441);
d6604 1
a6604 1
    stringBuffer.append(TEXT_1442);
d6606 1
a6606 1
    stringBuffer.append(TEXT_1443);
d6608 1
a6608 1
    stringBuffer.append(TEXT_1444);
d6610 1
a6610 1
    stringBuffer.append(TEXT_1445);
d6612 1
a6612 1
    stringBuffer.append(TEXT_1446);
d6614 1
a6614 1
    stringBuffer.append(TEXT_1447);
d6616 1
a6616 1
    stringBuffer.append(TEXT_1448);
d6618 1
a6618 1
    stringBuffer.append(TEXT_1449);
d6620 1
a6620 1
    stringBuffer.append(TEXT_1450);
d6627 1
a6627 1
    stringBuffer.append(TEXT_1451);
d6630 1
a6630 1
    stringBuffer.append(TEXT_1452);
d6632 1
a6632 1
    stringBuffer.append(TEXT_1453);
d6634 1
a6634 1
    stringBuffer.append(TEXT_1454);
d6636 1
a6636 1
    stringBuffer.append(TEXT_1455);
d6638 1
a6638 1
    stringBuffer.append(TEXT_1456);
d6640 1
a6640 1
    stringBuffer.append(TEXT_1457);
d6642 1
a6642 1
    stringBuffer.append(TEXT_1458);
d6644 1
a6644 1
    stringBuffer.append(TEXT_1459);
d6648 1
a6648 1
    stringBuffer.append(TEXT_1460);
d6651 1
a6651 1
    stringBuffer.append(TEXT_1461);
d6653 1
a6653 1
    stringBuffer.append(TEXT_1462);
d6655 1
a6655 1
    stringBuffer.append(TEXT_1463);
d6657 1
a6657 1
    stringBuffer.append(TEXT_1464);
d6659 1
a6659 1
    stringBuffer.append(TEXT_1465);
d6661 1
a6661 1
    stringBuffer.append(TEXT_1466);
d6665 1
a6665 1
    stringBuffer.append(TEXT_1467);
d6667 1
a6667 1
    stringBuffer.append(TEXT_1468);
d6674 1
a6674 1
    stringBuffer.append(TEXT_1469);
d6678 1
a6678 1
    stringBuffer.append(TEXT_1470);
d6682 1
a6682 1
    stringBuffer.append(TEXT_1471);
d6686 2
a6687 2
    stringBuffer.append(TEXT_1472);
    stringBuffer.append(TEXT_1473);
d6689 1
a6689 1
    stringBuffer.append(TEXT_1474);
d6691 1
a6691 1
    stringBuffer.append(TEXT_1475);
d6693 1
a6693 1
    stringBuffer.append(TEXT_1476);
d6695 1
a6695 1
    stringBuffer.append(TEXT_1477);
d6697 1
a6697 1
    stringBuffer.append(TEXT_1478);
d6699 1
a6699 1
    stringBuffer.append(TEXT_1479);
d6701 1
a6701 1
    stringBuffer.append(TEXT_1480);
d6703 1
a6703 1
    stringBuffer.append(TEXT_1481);
d6705 1
a6705 1
    stringBuffer.append(TEXT_1482);
d6707 1
a6707 1
    stringBuffer.append(TEXT_1483);
d6709 1
a6709 1
    stringBuffer.append(TEXT_1484);
d6713 3
a6715 3
    stringBuffer.append(TEXT_1485);
    stringBuffer.append(TEXT_1486);
    stringBuffer.append(TEXT_1487);
d6717 1
a6717 1
    stringBuffer.append(TEXT_1488);
d6719 1
a6719 1
    stringBuffer.append(TEXT_1489);
d6723 1
a6723 1
    stringBuffer.append(TEXT_1490);
d6725 1
a6725 1
    stringBuffer.append(TEXT_1491);
d6727 1
a6727 1
    stringBuffer.append(TEXT_1492);
d6729 1
a6729 1
    stringBuffer.append(TEXT_1493);
d6731 1
a6731 1
    stringBuffer.append(TEXT_1494);
d6733 1
a6733 1
    stringBuffer.append(TEXT_1495);
d6735 1
a6735 1
    stringBuffer.append(TEXT_1496);
d6737 1
a6737 1
    stringBuffer.append(TEXT_1497);
d6739 1
a6739 1
    stringBuffer.append(TEXT_1498);
d6741 1
a6741 1
    stringBuffer.append(TEXT_1499);
d6745 1
a6745 1
    stringBuffer.append(TEXT_1500);
d6752 1
a6752 1
    stringBuffer.append(TEXT_1501);
d6754 1
a6754 1
    stringBuffer.append(TEXT_1502);
d6756 1
a6756 1
    stringBuffer.append(TEXT_1503);
d6763 1
a6763 1
    stringBuffer.append(TEXT_1504);
d6765 1
a6765 1
    stringBuffer.append(TEXT_1505);
d6767 1
a6767 1
    stringBuffer.append(TEXT_1506);
d6778 1
a6778 1
    stringBuffer.append(TEXT_1507);
d6780 1
a6780 1
    stringBuffer.append(TEXT_1508);
d6782 1
a6782 1
    stringBuffer.append(TEXT_1509);
d6790 1
a6790 1
    stringBuffer.append(TEXT_1510);
d6792 1
a6792 1
    stringBuffer.append(TEXT_1511);
d6794 1
a6794 1
    stringBuffer.append(TEXT_1512);
d6796 1
a6796 1
    stringBuffer.append(TEXT_1513);
d6798 1
a6798 1
    stringBuffer.append(TEXT_1514);
d6800 1
a6800 1
    stringBuffer.append(TEXT_1515);
d6802 1
a6802 1
    stringBuffer.append(TEXT_1516);
d6804 1
a6804 1
    stringBuffer.append(TEXT_1517);
d6809 1
a6809 1
    stringBuffer.append(TEXT_1518);
d6811 1
a6811 1
    stringBuffer.append(TEXT_1519);
d6819 1
a6819 1
    stringBuffer.append(TEXT_1520);
d6821 1
a6821 1
    stringBuffer.append(TEXT_1521);
d6825 1
a6825 1
    stringBuffer.append(TEXT_1522);
d6827 1
a6827 1
    stringBuffer.append(TEXT_1523);
@


1.22
log
@[156358] bblajer - Diagram overview with Lite runtime
@
text
@d409 1
a409 1
  protected final String TEXT_388 = ") node.getLayoutConstraint();" + NL + "\t\t((";
d411 1
a411 1
  protected final String TEXT_390 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
d475 202
a676 202
  protected final String TEXT_454 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_455 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_456 = NL + "\t\t\tcase ";
  protected final String TEXT_457 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_458 = ") {" + NL + "\t\t\t\t\treturn new Create";
  protected final String TEXT_459 = "NotationCommand(getHost(), domainElement";
  protected final String TEXT_460 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_461 = ");" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_462 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_463 = " getSemanticChildNodes() {";
  protected final String TEXT_464 = NL;
  protected final String TEXT_465 = NL + "\treturn ";
  protected final String TEXT_466 = ".EMPTY_LIST;";
  protected final String TEXT_467 = NL + "\t";
  protected final String TEXT_468 = " result = new ";
  protected final String TEXT_469 = "();";
  protected final String TEXT_470 = NL + "\t";
  protected final String TEXT_471 = " viewObject = ";
  protected final String TEXT_472 = ";" + NL + "\t";
  protected final String TEXT_473 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_474 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_475 = NL + "\tfor(";
  protected final String TEXT_476 = " it = ";
  protected final String TEXT_477 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_478 = ") it.next();";
  protected final String TEXT_479 = NL + "\tnextValue = (";
  protected final String TEXT_480 = ")";
  protected final String TEXT_481 = ";";
  protected final String TEXT_482 = NL + "\tnodeVID = ";
  protected final String TEXT_483 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_484 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_485 = NL + "\tcase ";
  protected final String TEXT_486 = ".VISUAL_ID: {";
  protected final String TEXT_487 = NL + "\tif (";
  protected final String TEXT_488 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_489 = NL + "\t\tresult.add(new ";
  protected final String TEXT_490 = "(nextValue, nodeVID));";
  protected final String TEXT_491 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_492 = NL + "\t\t}";
  protected final String TEXT_493 = NL + "\t}";
  protected final String TEXT_494 = NL + "\t}";
  protected final String TEXT_495 = NL + "\treturn result;";
  protected final String TEXT_496 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_497 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_498 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_499 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_500 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_501 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_502 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_503 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_504 = " domainModelEditDomain = ";
  protected final String TEXT_505 = ".getEditingDomain(";
  protected final String TEXT_506 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_507 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_508 = NL;
  protected final String TEXT_509 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_510 = " domainModelEditDomain = ";
  protected final String TEXT_511 = ".getEditingDomain(";
  protected final String TEXT_512 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_513 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_514 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_515 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_516 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_517 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_518 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_519 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_520 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_521 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_522 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_523 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_524 = ".createEventTypeFilter(";
  protected final String TEXT_525 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_526 = ".createEventTypeFilter(";
  protected final String TEXT_527 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_528 = ".createEventTypeFilter(";
  protected final String TEXT_529 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_530 = ".createEventTypeFilter(";
  protected final String TEXT_531 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_532 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_533 = " createFilter() {";
  protected final String TEXT_534 = NL;
  protected final String TEXT_535 = NL + "\t\t\t";
  protected final String TEXT_536 = " filter = ";
  protected final String TEXT_537 = ".createFeatureFilter(";
  protected final String TEXT_538 = ".eINSTANCE.get";
  protected final String TEXT_539 = "());";
  protected final String TEXT_540 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_541 = ".createFeatureFilter(";
  protected final String TEXT_542 = ".eINSTANCE.get";
  protected final String TEXT_543 = "()));";
  protected final String TEXT_544 = NL;
  protected final String TEXT_545 = NL + "\t\t\t";
  protected final String TEXT_546 = " filter = ";
  protected final String TEXT_547 = ".createFeatureFilter(";
  protected final String TEXT_548 = ".eINSTANCE.get";
  protected final String TEXT_549 = "());";
  protected final String TEXT_550 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_551 = ".createFeatureFilter(";
  protected final String TEXT_552 = ".eINSTANCE.get";
  protected final String TEXT_553 = "()));";
  protected final String TEXT_554 = NL;
  protected final String TEXT_555 = NL + "\t\t\t";
  protected final String TEXT_556 = " filter = ";
  protected final String TEXT_557 = ".createFeatureFilter(";
  protected final String TEXT_558 = ".eINSTANCE.get";
  protected final String TEXT_559 = "());";
  protected final String TEXT_560 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_561 = ".createFeatureFilter(";
  protected final String TEXT_562 = ".eINSTANCE.get";
  protected final String TEXT_563 = "()));";
  protected final String TEXT_564 = NL;
  protected final String TEXT_565 = NL + "\t\t\t";
  protected final String TEXT_566 = " filter = ";
  protected final String TEXT_567 = ".createFeatureFilter(";
  protected final String TEXT_568 = ".eINSTANCE.get";
  protected final String TEXT_569 = "());";
  protected final String TEXT_570 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_571 = ".createFeatureFilter(";
  protected final String TEXT_572 = ".eINSTANCE.get";
  protected final String TEXT_573 = "()));";
  protected final String TEXT_574 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_575 = NL + "\t\t\t";
  protected final String TEXT_576 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_577 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_578 = NL + "\t\t\t";
  protected final String TEXT_579 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_580 = NL + "\t\t\t";
  protected final String TEXT_581 = " filter = ";
  protected final String TEXT_582 = ".NOT_TOUCH;";
  protected final String TEXT_583 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_584 = " getCreateNotationalElementCommand(";
  protected final String TEXT_585 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_586 = " linkDescriptor = (";
  protected final String TEXT_587 = ") descriptor;" + NL + "\t\t\t";
  protected final String TEXT_588 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_589 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_590 = " createdEdge = ";
  protected final String TEXT_591 = ".eINSTANCE.createEdge();" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_592 = NL + "\t\t\tcase ";
  protected final String TEXT_593 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_594 = ") {" + NL + "\t\t\t\t\tcreatedEdge.setElement(linkDescriptor.getElement());" + NL + "\t\t\t\t\t";
  protected final String TEXT_595 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_596 = NL + "\t\t\tcase ";
  protected final String TEXT_597 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t\t";
  protected final String TEXT_598 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_599 = NL + "\t\t\t}" + NL + "\t\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_600 = "(getHost().getDiagram(), createdEdge, sourceView, targetView);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_601 = " getSemanticChildLinks() {";
  protected final String TEXT_602 = NL;
  protected final String TEXT_603 = "\t";
  protected final String TEXT_604 = " result = new ";
  protected final String TEXT_605 = "();";
  protected final String TEXT_606 = NL + "\t";
  protected final String TEXT_607 = " modelObject = ";
  protected final String TEXT_608 = ".getElement();" + NL + "\t";
  protected final String TEXT_609 = " nextValue;";
  protected final String TEXT_610 = NL + "\tint linkVID;";
  protected final String TEXT_611 = NL + "\tfor(";
  protected final String TEXT_612 = " it = ";
  protected final String TEXT_613 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_614 = ") it.next();";
  protected final String TEXT_615 = NL + "\tnextValue = (";
  protected final String TEXT_616 = ")";
  protected final String TEXT_617 = ";";
  protected final String TEXT_618 = NL + "\tlinkVID = ";
  protected final String TEXT_619 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_620 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_621 = NL + "\tcase ";
  protected final String TEXT_622 = ".VISUAL_ID: {";
  protected final String TEXT_623 = NL + "\tif (";
  protected final String TEXT_624 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_625 = NL + "\t\t";
  protected final String TEXT_626 = " source = (";
  protected final String TEXT_627 = ")";
  protected final String TEXT_628 = ";";
  protected final String TEXT_629 = NL + "\t\t";
  protected final String TEXT_630 = " source = ";
  protected final String TEXT_631 = ".getElement();";
  protected final String TEXT_632 = NL + "\t\t";
  protected final String TEXT_633 = " target = (";
  protected final String TEXT_634 = ")";
  protected final String TEXT_635 = ";";
  protected final String TEXT_636 = NL + "\t\t";
  protected final String TEXT_637 = " target = ";
  protected final String TEXT_638 = ".getElement();";
  protected final String TEXT_639 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_640 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_641 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_642 = NL + "\t}";
  protected final String TEXT_643 = NL + "\t}";
  protected final String TEXT_644 = NL + "\t}";
  protected final String TEXT_645 = NL + "\tfor(";
  protected final String TEXT_646 = " it = ";
  protected final String TEXT_647 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_648 = ") it.next();";
  protected final String TEXT_649 = NL + "\tnextValue = (";
  protected final String TEXT_650 = ")";
  protected final String TEXT_651 = ";";
  protected final String TEXT_652 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_653 = NL + "\t\tresult.add(new ";
  protected final String TEXT_654 = "(modelObject, nextValue, null, ";
  protected final String TEXT_655 = ".VISUAL_ID));";
d678 109
a786 109
  protected final String TEXT_657 = NL + "\t}";
  protected final String TEXT_658 = NL + "\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_659 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_660 = " result = new ";
  protected final String TEXT_661 = "();" + NL + "\t\t\t";
  protected final String TEXT_662 = " allLinks = ";
  protected final String TEXT_663 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_664 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_665 = " next = (";
  protected final String TEXT_666 = ") it.next();";
  protected final String TEXT_667 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_668 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_669 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_670 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_671 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_672 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_673 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_674 = ".VISUAL_ID:";
  protected final String TEXT_675 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_676 = NL + "\t\t\t\t} else {";
  protected final String TEXT_677 = NL + "\t\t\t\t}";
  protected final String TEXT_678 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_679 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_680 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_681 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_682 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_683 = ".VISUAL_ID:";
  protected final String TEXT_684 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_685 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_686 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_687 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_688 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_689 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_690 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_691 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_692 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_693 = " domainModelEditDomain = ";
  protected final String TEXT_694 = ".getEditingDomain(";
  protected final String TEXT_695 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_696 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_697 = NL;
  protected final String TEXT_698 = NL;
  protected final String TEXT_699 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_700 = " domainModelRefresher = new ";
  protected final String TEXT_701 = "(this);" + NL;
  protected final String TEXT_702 = NL;
  protected final String TEXT_703 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_704 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_705 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_706 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_707 = NL;
  protected final String TEXT_708 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_709 = NL + "\t\t";
  protected final String TEXT_710 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_711 = ") ";
  protected final String TEXT_712 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_713 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_714 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_715 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_716 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_717 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_718 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_719 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_720 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_721 = "\t" + NL + "\t}";
  protected final String TEXT_722 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_723 = " createdFont;";
  protected final String TEXT_724 = "\t" + NL;
  protected final String TEXT_725 = NL;
  protected final String TEXT_726 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_727 = " style = (";
  protected final String TEXT_728 = ")  ";
  protected final String TEXT_729 = ".getStyle(";
  protected final String TEXT_730 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_731 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_732 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_733 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_734 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_735 = " style = (";
  protected final String TEXT_736 = ")  ";
  protected final String TEXT_737 = ".getStyle(";
  protected final String TEXT_738 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_739 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_740 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_741 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_742 = " createdBackgroundColor;" + NL;
  protected final String TEXT_743 = NL;
  protected final String TEXT_744 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_745 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_746 = " feature, ";
  protected final String TEXT_747 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_748 = "();";
  protected final String TEXT_749 = NL;
  protected final String TEXT_750 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_751 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_752 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_753 = NL;
  protected final String TEXT_754 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_755 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_756 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_757 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_758 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_759 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_760 = NL;
  protected final String TEXT_761 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_762 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_763 = NL;
  protected final String TEXT_764 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_765 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
d788 12
a799 12
  protected final String TEXT_767 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_768 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_769 = NL;
  protected final String TEXT_770 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_771 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_772 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_773 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_774 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_775 = NL;
  protected final String TEXT_776 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_777 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_778 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
d801 43
a843 43
  protected final String TEXT_780 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_781 = "static ";
  protected final String TEXT_782 = "class Create";
  protected final String TEXT_783 = "NotationCommand extends ";
  protected final String TEXT_784 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_785 = "NotationCommand(";
  protected final String TEXT_786 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_787 = " domainElement";
  protected final String TEXT_788 = ", ";
  protected final String TEXT_789 = " constraint";
  protected final String TEXT_790 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_791 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_792 = ".decorateView(createdNode);";
  protected final String TEXT_793 = NL + "\t\t\t";
  protected final String TEXT_794 = " bounds = ";
  protected final String TEXT_795 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_796 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_797 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_798 = "));";
  protected final String TEXT_799 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_800 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_801 = "static ";
  protected final String TEXT_802 = "class Create";
  protected final String TEXT_803 = "Command extends ";
  protected final String TEXT_804 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_805 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_806 = "Command(";
  protected final String TEXT_807 = " parent, ";
  protected final String TEXT_808 = " request";
  protected final String TEXT_809 = ", ";
  protected final String TEXT_810 = " constraint";
  protected final String TEXT_811 = ") {" + NL + "\t\t\t";
  protected final String TEXT_812 = " domainModelEditDomain = ";
  protected final String TEXT_813 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_814 = NL + "\t\t\t";
  protected final String TEXT_815 = " createdDomainElement = ";
  protected final String TEXT_816 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_817 = ".eINSTANCE.get";
  protected final String TEXT_818 = "());";
  protected final String TEXT_819 = NL + "\t\t\t";
  protected final String TEXT_820 = " createdDomainElement = ";
  protected final String TEXT_821 = ".eINSTANCE.create";
  protected final String TEXT_822 = "();";
d845 523
a1367 523
  protected final String TEXT_824 = NL + "\t\t\t";
  protected final String TEXT_825 = ".";
  protected final String TEXT_826 = ".initializeElement(";
  protected final String TEXT_827 = "(";
  protected final String TEXT_828 = ") ";
  protected final String TEXT_829 = "createdDomainElement);";
  protected final String TEXT_830 = NL + "\t\t\t";
  protected final String TEXT_831 = " compoundCommand = new ";
  protected final String TEXT_832 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_833 = ".create(domainModelEditDomain, ";
  protected final String TEXT_834 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_835 = ".eINSTANCE.get";
  protected final String TEXT_836 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_837 = ".create(domainModelEditDomain, ";
  protected final String TEXT_838 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_839 = ".eINSTANCE.get";
  protected final String TEXT_840 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_841 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_842 = ".create(domainModelEditDomain, ";
  protected final String TEXT_843 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_844 = ".eINSTANCE.get";
  protected final String TEXT_845 = "(), createdDomainElement);";
  protected final String TEXT_846 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_847 = "NotationCommand(parent, ";
  protected final String TEXT_848 = "(";
  protected final String TEXT_849 = ") ";
  protected final String TEXT_850 = "createdDomainElement";
  protected final String TEXT_851 = ", constraint";
  protected final String TEXT_852 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_853 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_854 = "SourceCommand extends ";
  protected final String TEXT_855 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_856 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_857 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_858 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_859 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_860 = "SourceCommand(";
  protected final String TEXT_861 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_862 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_863 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_864 = "SourceCommand(";
  protected final String TEXT_865 = " edge, ";
  protected final String TEXT_866 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_867 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_868 = " domainModelEditDomain = ";
  protected final String TEXT_869 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_870 = " command = new ";
  protected final String TEXT_871 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_872 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_873 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_874 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_875 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_876 = NL + "\t\t\treturn false;";
  protected final String TEXT_877 = NL + "\t\t\t";
  protected final String TEXT_878 = " container = (";
  protected final String TEXT_879 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_880 = ".eINSTANCE.get";
  protected final String TEXT_881 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_882 = NL;
  protected final String TEXT_883 = NL + "\t\tif (";
  protected final String TEXT_884 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_885 = NL + "\t\t}";
  protected final String TEXT_886 = NL + "\t\tif (";
  protected final String TEXT_887 = ".size() >= ";
  protected final String TEXT_888 = ".eINSTANCE.get";
  protected final String TEXT_889 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_890 = NL + "\t\t}";
  protected final String TEXT_891 = NL;
  protected final String TEXT_892 = NL + "\t\tif (";
  protected final String TEXT_893 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_894 = NL + "\t\t}";
  protected final String TEXT_895 = NL + "\t\tif (";
  protected final String TEXT_896 = ".size() >= ";
  protected final String TEXT_897 = ".eINSTANCE.get";
  protected final String TEXT_898 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_899 = NL + "\t\t}";
  protected final String TEXT_900 = NL;
  protected final String TEXT_901 = NL + "\t\t\tif(!";
  protected final String TEXT_902 = ".canCreateLink(";
  protected final String TEXT_903 = ", ";
  protected final String TEXT_904 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_905 = NL + "\t\t\treturn true;";
  protected final String TEXT_906 = NL;
  protected final String TEXT_907 = NL + "\t\tif (";
  protected final String TEXT_908 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_909 = NL + "\t\t}";
  protected final String TEXT_910 = NL + "\t\tif (";
  protected final String TEXT_911 = ".size() >= ";
  protected final String TEXT_912 = ".eINSTANCE.get";
  protected final String TEXT_913 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_914 = NL + "\t\t}";
  protected final String TEXT_915 = NL;
  protected final String TEXT_916 = NL + "\t\t\tif(!";
  protected final String TEXT_917 = ".canCreateLink(";
  protected final String TEXT_918 = ", ";
  protected final String TEXT_919 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_920 = NL + "\t\t\treturn true;";
  protected final String TEXT_921 = NL + "\t\t\treturn false;";
  protected final String TEXT_922 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_923 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_924 = " editingDomain = ";
  protected final String TEXT_925 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_926 = " result = new ";
  protected final String TEXT_927 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_928 = "(edge, newSource));";
  protected final String TEXT_929 = NL + "\t\t\t";
  protected final String TEXT_930 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_931 = ".eINSTANCE.get";
  protected final String TEXT_932 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_933 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_934 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_935 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_936 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_937 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), edge.getElement()));";
  protected final String TEXT_938 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_939 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), ";
  protected final String TEXT_940 = ".UNSET_VALUE));";
  protected final String TEXT_941 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_942 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_943 = ".eINSTANCE.get";
  protected final String TEXT_944 = "(), edge.getElement()));";
  protected final String TEXT_945 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_946 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_947 = ".eINSTANCE.get";
  protected final String TEXT_948 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_949 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_950 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_951 = ".eINSTANCE.get";
  protected final String TEXT_952 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_953 = ".UNSET_VALUE));";
  protected final String TEXT_954 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_955 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_956 = ".eINSTANCE.get";
  protected final String TEXT_957 = "(), edge.getElement()));";
  protected final String TEXT_958 = NL + "\t\t\t}";
  protected final String TEXT_959 = NL + "\t\t\tresult.append(";
  protected final String TEXT_960 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_961 = ".eINSTANCE.get";
  protected final String TEXT_962 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_963 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_964 = ".eINSTANCE.get";
  protected final String TEXT_965 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_966 = NL + "\t\t\tresult.append(";
  protected final String TEXT_967 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_968 = ".eINSTANCE.get";
  protected final String TEXT_969 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_970 = NL + "\t\t\tresult.append(";
  protected final String TEXT_971 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_972 = ".eINSTANCE.get";
  protected final String TEXT_973 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_974 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_975 = ".eINSTANCE.get";
  protected final String TEXT_976 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_977 = NL + "\t\t\tresult.append(";
  protected final String TEXT_978 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_979 = ".eINSTANCE.get";
  protected final String TEXT_980 = "(), ";
  protected final String TEXT_981 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_982 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_983 = ".eINSTANCE.get";
  protected final String TEXT_984 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_985 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_986 = NL;
  protected final String TEXT_987 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_988 = " getRelationshipContainer(";
  protected final String TEXT_989 = " element, ";
  protected final String TEXT_990 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_991 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_992 = NL;
  protected final String TEXT_993 = NL + "\t\t\tprivate ";
  protected final String TEXT_994 = " createDomainModelRemoveCommand(";
  protected final String TEXT_995 = " editingDomain) {";
  protected final String TEXT_996 = NL + "\t\t\t\t";
  protected final String TEXT_997 = " result = new ";
  protected final String TEXT_998 = "();";
  protected final String TEXT_999 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1000 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1001 = ".getElement().eContainer(), ";
  protected final String TEXT_1002 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1003 = ".getElement()));";
  protected final String TEXT_1004 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1005 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1006 = ".getElement().eContainer(), ";
  protected final String TEXT_1007 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1008 = ".UNSET_VALUE));";
  protected final String TEXT_1009 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1010 = ".INSTANCE;";
  protected final String TEXT_1011 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1012 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1013 = ".getElement().eContainer(), ";
  protected final String TEXT_1014 = ".eINSTANCE.get";
  protected final String TEXT_1015 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1016 = ".getElement()));";
  protected final String TEXT_1017 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1018 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1019 = ".getElement().eContainer(), ";
  protected final String TEXT_1020 = ".eINSTANCE.get";
  protected final String TEXT_1021 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1022 = ".UNSET_VALUE));";
  protected final String TEXT_1023 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1024 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1025 = ".getElement(), ";
  protected final String TEXT_1026 = ".eINSTANCE.get";
  protected final String TEXT_1027 = "(), ";
  protected final String TEXT_1028 = ".getSource().getElement()));";
  protected final String TEXT_1029 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1030 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1031 = ".getElement(), ";
  protected final String TEXT_1032 = ".eINSTANCE.get";
  protected final String TEXT_1033 = "(), ";
  protected final String TEXT_1034 = ".UNSET_VALUE));";
  protected final String TEXT_1035 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1036 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1037 = ".getElement(), ";
  protected final String TEXT_1038 = ".eINSTANCE.get";
  protected final String TEXT_1039 = "(), ";
  protected final String TEXT_1040 = ".getTarget().getElement()));";
  protected final String TEXT_1041 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1042 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1043 = ".getElement(), ";
  protected final String TEXT_1044 = ".eINSTANCE.get";
  protected final String TEXT_1045 = "(), ";
  protected final String TEXT_1046 = ".UNSET_VALUE));";
  protected final String TEXT_1047 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1048 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1049 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1050 = ".getSource().getElement(), ";
  protected final String TEXT_1051 = ".eINSTANCE.get";
  protected final String TEXT_1052 = "(), ";
  protected final String TEXT_1053 = ".getTarget().getElement());";
  protected final String TEXT_1054 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1055 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1056 = ".getSource().getElement(), ";
  protected final String TEXT_1057 = ".eINSTANCE.get";
  protected final String TEXT_1058 = "(), ";
  protected final String TEXT_1059 = ".UNSET_VALUE);";
  protected final String TEXT_1060 = NL + "\t\t\t}";
  protected final String TEXT_1061 = NL + "\t}" + NL;
  protected final String TEXT_1062 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1063 = "StartCommand extends ";
  protected final String TEXT_1064 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1065 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1066 = "StartCommand(";
  protected final String TEXT_1067 = " requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_1068 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1069 = NL + "\t\t\treturn false;";
  protected final String TEXT_1070 = NL + "\t\t\t";
  protected final String TEXT_1071 = " container = (";
  protected final String TEXT_1072 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1073 = ".eINSTANCE.get";
  protected final String TEXT_1074 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1075 = NL;
  protected final String TEXT_1076 = NL + "\t\tif (";
  protected final String TEXT_1077 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1078 = NL + "\t\t}";
  protected final String TEXT_1079 = NL + "\t\tif (";
  protected final String TEXT_1080 = ".size() >= ";
  protected final String TEXT_1081 = ".eINSTANCE.get";
  protected final String TEXT_1082 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1083 = NL + "\t\t}";
  protected final String TEXT_1084 = NL;
  protected final String TEXT_1085 = NL + "\t\tif (";
  protected final String TEXT_1086 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1087 = NL + "\t\t}";
  protected final String TEXT_1088 = NL + "\t\tif (";
  protected final String TEXT_1089 = ".size() >= ";
  protected final String TEXT_1090 = ".eINSTANCE.get";
  protected final String TEXT_1091 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1092 = NL + "\t\t}";
  protected final String TEXT_1093 = NL;
  protected final String TEXT_1094 = NL + "\t\t\tif(!";
  protected final String TEXT_1095 = ".canCreateLink(";
  protected final String TEXT_1096 = ", ";
  protected final String TEXT_1097 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1098 = NL + "\t\t\treturn true;";
  protected final String TEXT_1099 = NL;
  protected final String TEXT_1100 = NL + "\t\tif (";
  protected final String TEXT_1101 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1102 = NL + "\t\t}";
  protected final String TEXT_1103 = NL + "\t\tif (";
  protected final String TEXT_1104 = ".size() >= ";
  protected final String TEXT_1105 = ".eINSTANCE.get";
  protected final String TEXT_1106 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1107 = NL + "\t\t}";
  protected final String TEXT_1108 = NL;
  protected final String TEXT_1109 = NL + "\t\t\tif(!";
  protected final String TEXT_1110 = ".canCreateLink(";
  protected final String TEXT_1111 = ", ";
  protected final String TEXT_1112 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1113 = NL + "\t\t\treturn true;";
  protected final String TEXT_1114 = NL + "\t\t\treturn false;";
  protected final String TEXT_1115 = NL + "\t\t}";
  protected final String TEXT_1116 = NL;
  protected final String TEXT_1117 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1118 = " getRelationshipContainer(";
  protected final String TEXT_1119 = " element, ";
  protected final String TEXT_1120 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1121 = NL + NL + "\t}";
  protected final String TEXT_1122 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1123 = "TargetCommand extends ";
  protected final String TEXT_1124 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1125 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1126 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1127 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1128 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1129 = "TargetCommand(";
  protected final String TEXT_1130 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1131 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1132 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1133 = "TargetCommand(";
  protected final String TEXT_1134 = " edge, ";
  protected final String TEXT_1135 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1136 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1137 = " domainModelEditDomain = ";
  protected final String TEXT_1138 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1139 = " command = new ";
  protected final String TEXT_1140 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1141 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1142 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1143 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1144 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_1145 = NL;
  protected final String TEXT_1146 = NL + "\t\t\tif(!";
  protected final String TEXT_1147 = ".canCreateLink(";
  protected final String TEXT_1148 = ", ";
  protected final String TEXT_1149 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1150 = NL + "\t\t\treturn true;";
  protected final String TEXT_1151 = NL;
  protected final String TEXT_1152 = NL + "\t\t\tif(!";
  protected final String TEXT_1153 = ".canCreateLink(";
  protected final String TEXT_1154 = ", ";
  protected final String TEXT_1155 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1156 = NL + "\t\t\treturn true;";
  protected final String TEXT_1157 = NL + "\t\t\treturn false;";
  protected final String TEXT_1158 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1159 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1160 = " editingDomain = ";
  protected final String TEXT_1161 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1162 = " result = new ";
  protected final String TEXT_1163 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1164 = "(edge, newTarget));";
  protected final String TEXT_1165 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1166 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1167 = ".eINSTANCE.get";
  protected final String TEXT_1168 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1169 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1170 = ".eINSTANCE.get";
  protected final String TEXT_1171 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1172 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1173 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1174 = ".eINSTANCE.get";
  protected final String TEXT_1175 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1176 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1177 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1178 = ".eINSTANCE.get";
  protected final String TEXT_1179 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1180 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1181 = ".eINSTANCE.get";
  protected final String TEXT_1182 = "(), newTarget.getElement()));";
  protected final String TEXT_1183 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1184 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1185 = ".eINSTANCE.get";
  protected final String TEXT_1186 = "(), newTarget.getElement()));";
  protected final String TEXT_1187 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_1188 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1189 = NL;
  protected final String TEXT_1190 = NL + "\t\t\tprivate ";
  protected final String TEXT_1191 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1192 = " editingDomain) {";
  protected final String TEXT_1193 = NL + "\t\t\t\t";
  protected final String TEXT_1194 = " result = new ";
  protected final String TEXT_1195 = "();";
  protected final String TEXT_1196 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1197 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1198 = ".getElement().eContainer(), ";
  protected final String TEXT_1199 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1200 = ".getElement()));";
  protected final String TEXT_1201 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1202 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1203 = ".getElement().eContainer(), ";
  protected final String TEXT_1204 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1205 = ".UNSET_VALUE));";
  protected final String TEXT_1206 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1207 = ".INSTANCE;";
  protected final String TEXT_1208 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1209 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1210 = ".getElement().eContainer(), ";
  protected final String TEXT_1211 = ".eINSTANCE.get";
  protected final String TEXT_1212 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1213 = ".getElement()));";
  protected final String TEXT_1214 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1215 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1216 = ".getElement().eContainer(), ";
  protected final String TEXT_1217 = ".eINSTANCE.get";
  protected final String TEXT_1218 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1219 = ".UNSET_VALUE));";
  protected final String TEXT_1220 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1221 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1222 = ".getElement(), ";
  protected final String TEXT_1223 = ".eINSTANCE.get";
  protected final String TEXT_1224 = "(), ";
  protected final String TEXT_1225 = ".getSource().getElement()));";
  protected final String TEXT_1226 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1227 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1228 = ".getElement(), ";
  protected final String TEXT_1229 = ".eINSTANCE.get";
  protected final String TEXT_1230 = "(), ";
  protected final String TEXT_1231 = ".UNSET_VALUE));";
  protected final String TEXT_1232 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1233 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1234 = ".getElement(), ";
  protected final String TEXT_1235 = ".eINSTANCE.get";
  protected final String TEXT_1236 = "(), ";
  protected final String TEXT_1237 = ".getTarget().getElement()));";
  protected final String TEXT_1238 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1239 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1240 = ".getElement(), ";
  protected final String TEXT_1241 = ".eINSTANCE.get";
  protected final String TEXT_1242 = "(), ";
  protected final String TEXT_1243 = ".UNSET_VALUE));";
  protected final String TEXT_1244 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1245 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1246 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1247 = ".getSource().getElement(), ";
  protected final String TEXT_1248 = ".eINSTANCE.get";
  protected final String TEXT_1249 = "(), ";
  protected final String TEXT_1250 = ".getTarget().getElement());";
  protected final String TEXT_1251 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1252 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1253 = ".getSource().getElement(), ";
  protected final String TEXT_1254 = ".eINSTANCE.get";
  protected final String TEXT_1255 = "(), ";
  protected final String TEXT_1256 = ".UNSET_VALUE);";
  protected final String TEXT_1257 = NL + "\t\t\t}";
  protected final String TEXT_1258 = NL + "\t}" + NL;
  protected final String TEXT_1259 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1260 = "Command extends ";
  protected final String TEXT_1261 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1262 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1263 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1264 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1265 = "Command(";
  protected final String TEXT_1266 = " requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1267 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1268 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1269 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1270 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1271 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1272 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1273 = NL + "\t\t\t";
  protected final String TEXT_1274 = " createdDomainElement = ";
  protected final String TEXT_1275 = ".eINSTANCE.create";
  protected final String TEXT_1276 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1277 = "(";
  protected final String TEXT_1278 = ") ";
  protected final String TEXT_1279 = "createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1280 = NL + "\t\t\t";
  protected final String TEXT_1281 = ".";
  protected final String TEXT_1282 = ".initializeElement(";
  protected final String TEXT_1283 = "(";
  protected final String TEXT_1284 = ") ";
  protected final String TEXT_1285 = "createdDomainElement);";
  protected final String TEXT_1286 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1287 = NL + "\t\t\t";
  protected final String TEXT_1288 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1289 = " domainModelEditDomain = ";
  protected final String TEXT_1290 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1291 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1292 = NL + "\t\t\t";
  protected final String TEXT_1293 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1294 = ".eINSTANCE.get";
  protected final String TEXT_1295 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1296 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1297 = ".eINSTANCE.get";
  protected final String TEXT_1298 = "(), createdDomainElement));";
  protected final String TEXT_1299 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1300 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1301 = ".eINSTANCE.get";
  protected final String TEXT_1302 = "(), createdDomainElement));";
  protected final String TEXT_1303 = NL;
  protected final String TEXT_1304 = NL + "\t\tif (";
  protected final String TEXT_1305 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1306 = NL + "\t\t}";
  protected final String TEXT_1307 = NL + "\t\tif (";
  protected final String TEXT_1308 = ".size() >= ";
  protected final String TEXT_1309 = ".eINSTANCE.get";
  protected final String TEXT_1310 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1311 = NL + "\t\t}";
  protected final String TEXT_1312 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1313 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1314 = ".eINSTANCE.get";
  protected final String TEXT_1315 = "(), source.getElement()));";
  protected final String TEXT_1316 = NL;
  protected final String TEXT_1317 = NL + "\t\tif (";
  protected final String TEXT_1318 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1319 = NL + "\t\t}";
  protected final String TEXT_1320 = NL + "\t\tif (";
  protected final String TEXT_1321 = ".size() >= ";
  protected final String TEXT_1322 = ".eINSTANCE.get";
  protected final String TEXT_1323 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1324 = NL + "\t\t}";
  protected final String TEXT_1325 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1326 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1327 = ".eINSTANCE.get";
  protected final String TEXT_1328 = "(), target.getElement()));";
  protected final String TEXT_1329 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1330 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1331 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1332 = ".eINSTANCE.get";
  protected final String TEXT_1333 = "(), target.getElement());";
  protected final String TEXT_1334 = NL + "\t\t}" + NL;
  protected final String TEXT_1335 = NL;
  protected final String TEXT_1336 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1337 = " getRelationshipContainer(";
  protected final String TEXT_1338 = " element, ";
  protected final String TEXT_1339 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1340 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1341 = NL;
  protected final String TEXT_1342 = NL + "\t\t\tif(!";
  protected final String TEXT_1343 = ".canCreateLink(";
  protected final String TEXT_1344 = ", ";
  protected final String TEXT_1345 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1346 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
d1369 176
a1544 177
  protected final String TEXT_1348 = NL;
  protected final String TEXT_1349 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1350 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class TreeEditPartAdapter extends ";
  protected final String TEXT_1351 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TreeEditPartAdapter() {" + NL + "\t\t\tsuper(getDiagramNode(), ";
  protected final String TEXT_1352 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createEditPolicies() {";
  protected final String TEXT_1353 = NL;
  protected final String TEXT_1354 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1355 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_1356 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_1357 = " createDeleteCommand(";
  protected final String TEXT_1358 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_1359 = " editingDomain = ";
  protected final String TEXT_1360 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_1361 = " cc = new ";
  protected final String TEXT_1362 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_1363 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_1364 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_1365 = " editingDomain) {";
  protected final String TEXT_1366 = NL + "\t\t\t\t";
  protected final String TEXT_1367 = " result = new ";
  protected final String TEXT_1368 = "();";
  protected final String TEXT_1369 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1370 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1371 = ".eINSTANCE.get";
  protected final String TEXT_1372 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1373 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1374 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1375 = ".eINSTANCE.get";
  protected final String TEXT_1376 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1377 = ".UNSET_VALUE));";
  protected final String TEXT_1378 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1379 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1380 = ".eINSTANCE.get";
  protected final String TEXT_1381 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_1382 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1383 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1384 = ".eINSTANCE.get";
  protected final String TEXT_1385 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1386 = ".UNSET_VALUE));";
  protected final String TEXT_1387 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1388 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1389 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1390 = ".eINSTANCE.get";
  protected final String TEXT_1391 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_1392 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1393 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_1394 = ".eINSTANCE.get";
  protected final String TEXT_1395 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1396 = ".UNSET_VALUE);";
  protected final String TEXT_1397 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_1398 = NL;
  protected final String TEXT_1399 = "\t\tinstallEditPolicy(";
  protected final String TEXT_1400 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_1401 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_1402 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tsetWidgetText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1403 = NL;
  protected final String TEXT_1404 = "\t\t\t\t\tprotected ";
  protected final String TEXT_1405 = " getDirectEditCommand(";
  protected final String TEXT_1406 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1407 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_1408 = "(";
  protected final String TEXT_1409 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1410 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_1411 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1412 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1413 = " editingDomain = ";
  protected final String TEXT_1414 = ".getEditingDomain(";
  protected final String TEXT_1415 = ".getDiagram().getElement());";
  protected final String TEXT_1416 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1417 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1418 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1419 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1420 = " createDomainModelCommand(";
  protected final String TEXT_1421 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1422 = " element = ";
  protected final String TEXT_1423 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1424 = " feature = (";
  protected final String TEXT_1425 = ") ";
  protected final String TEXT_1426 = ".eINSTANCE.get";
  protected final String TEXT_1427 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1428 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1429 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1430 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1431 = " result = new ";
  protected final String TEXT_1432 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1433 = " values = new ";
  protected final String TEXT_1434 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1435 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1436 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1437 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_1438 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_1439 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_1440 = NL + "\t\t\t\t\t}";
  protected final String TEXT_1441 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_1442 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1443 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1444 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_1445 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_1446 = " createDomainModelCommand(";
  protected final String TEXT_1447 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1448 = " element = ";
  protected final String TEXT_1449 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_1450 = " result = new ";
  protected final String TEXT_1451 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_1452 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1453 = " ";
  protected final String TEXT_1454 = "feature = (";
  protected final String TEXT_1455 = ") ";
  protected final String TEXT_1456 = ".eINSTANCE.get";
  protected final String TEXT_1457 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_1458 = ".parseValue(feature, values[";
  protected final String TEXT_1459 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_1460 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_1461 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_1462 = " ";
  protected final String TEXT_1463 = "values = new ";
  protected final String TEXT_1464 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_1465 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1466 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1467 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1468 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_1469 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_1470 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_1471 = NL + "\t\t\t\t});";
  protected final String TEXT_1472 = NL + "\t\t}" + NL;
  protected final String TEXT_1473 = NL;
  protected final String TEXT_1474 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1475 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_1476 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_1477 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_1478 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_1479 = "(this, ";
  protected final String TEXT_1480 = ".class, new ";
  protected final String TEXT_1481 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_1482 = " celleditor) {" + NL + "\t\t\t\t\tif (checkTreeItem()) {" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(((";
  protected final String TEXT_1483 = ") getWidget()).getFont());" + NL + "\t\t\t\t\t\tcelleditor.getControl().setBounds(((";
  protected final String TEXT_1484 = ") getWidget()).getBounds());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getEditText() {" + NL + "\t\t\t";
  protected final String TEXT_1485 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelEditText();" + NL + "\t\t\t}" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL;
  protected final String TEXT_1486 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tsuper.activate();" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL;
  protected final String TEXT_1487 = NL;
  protected final String TEXT_1488 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_1489 = " domainModelRefresher = new ";
  protected final String TEXT_1490 = "(this);" + NL;
  protected final String TEXT_1491 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getText() {" + NL + "\t\t\t";
  protected final String TEXT_1492 = " primaryLabelEditPart = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabelEditPart != null) {" + NL + "\t\t\t\treturn primaryLabelEditPart.getLabelText();" + NL + "\t\t\t}" + NL + "\t\t\treturn super.getText();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1493 = " getPrimaryLabelEditPart() {" + NL + "\t\t\tfor(";
  protected final String TEXT_1494 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1495 = " nextChild = (";
  protected final String TEXT_1496 = ")it.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_1497 = ".getVisualID(nextChild) == ";
  protected final String TEXT_1498 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn (";
  protected final String TEXT_1499 = ") ";
  protected final String TEXT_1500 = ".this.getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1501 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected void createRefreshers() {" + NL + "\t\t\tsuper.createRefreshers();" + NL + "\t\t\tRefresher labelRefresher = new Refresher() {" + NL + "\t\t\t\tpublic void refresh() {" + NL + "\t\t\t\t\trefreshVisuals();" + NL + "\t\t\t\t}" + NL + "\t\t\t};";
  protected final String TEXT_1502 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1503 = ".eINSTANCE.get";
  protected final String TEXT_1504 = "(), labelRefresher);";
  protected final String TEXT_1505 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1506 = ".eINSTANCE.get";
  protected final String TEXT_1507 = "(), labelRefresher);";
  protected final String TEXT_1508 = NL + "\t\t\tregisterRefresher(";
  protected final String TEXT_1509 = ".eINSTANCE.get";
  protected final String TEXT_1510 = "(), labelRefresher);";
  protected final String TEXT_1511 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1512 = " getModelChildren() {" + NL + "\t\t\t";
  protected final String TEXT_1513 = " result = new ";
  protected final String TEXT_1514 = "();" + NL + "\t\t\tfor(";
  protected final String TEXT_1515 = " it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_1516 = " next = (";
  protected final String TEXT_1517 = ") it.next();" + NL + "\t\t\t\tswitch (";
  protected final String TEXT_1518 = ".getVisualID(next)) {";
  protected final String TEXT_1519 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1520 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1521 = NL + "\t\t\t\tcase ";
  protected final String TEXT_1522 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult.addAll(next.getChildren());" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_1523 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tresult.addAll(getDiagramNode().getSourceEdges());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_1524 = NL;
d3046 6
d3053 1
a3053 1
    stringBuffer.append(TEXT_455);
d3063 1
a3063 1
    stringBuffer.append(TEXT_456);
d3065 1
a3065 1
    stringBuffer.append(TEXT_457);
a3066 5
    stringBuffer.append(TEXT_458);
    stringBuffer.append(nextNode.getDomainMetaClass().getName());
    stringBuffer.append(nextNode.getVisualID());
    stringBuffer.append(TEXT_459);
    if (!isListLayout) {
d3068 1
a3068 1
    }
d3070 33
d3106 1
a3106 1
    stringBuffer.append(TEXT_462);
d3108 2
a3109 2
    stringBuffer.append(TEXT_463);
    stringBuffer.append(TEXT_464);
d3113 1
a3113 1
    stringBuffer.append(TEXT_465);
d3115 1
a3115 1
    stringBuffer.append(TEXT_466);
d3119 1
a3119 1
    stringBuffer.append(TEXT_467);
d3121 1
a3121 1
    stringBuffer.append(TEXT_468);
d3123 1
a3123 1
    stringBuffer.append(TEXT_469);
d3141 1
a3141 1
    stringBuffer.append(TEXT_470);
d3143 1
a3143 1
    stringBuffer.append(TEXT_471);
d3145 1
a3145 1
    stringBuffer.append(TEXT_472);
d3147 1
a3147 1
    stringBuffer.append(TEXT_473);
d3149 1
a3149 1
    stringBuffer.append(TEXT_474);
d3158 1
a3158 1
    stringBuffer.append(TEXT_475);
d3160 1
a3160 1
    stringBuffer.append(TEXT_476);
d3162 1
a3162 1
    stringBuffer.append(TEXT_477);
d3164 1
a3164 1
    stringBuffer.append(TEXT_478);
d3168 1
a3168 1
    stringBuffer.append(TEXT_479);
d3170 1
a3170 1
    stringBuffer.append(TEXT_480);
d3172 1
a3172 1
    stringBuffer.append(TEXT_481);
d3176 1
a3176 1
    stringBuffer.append(TEXT_482);
d3178 1
a3178 1
    stringBuffer.append(TEXT_483);
d3183 1
a3183 1
    stringBuffer.append(TEXT_484);
d3190 1
a3190 1
    stringBuffer.append(TEXT_485);
d3192 1
a3192 1
    stringBuffer.append(TEXT_486);
d3196 1
a3196 1
    stringBuffer.append(TEXT_487);
d3198 1
a3198 1
    stringBuffer.append(TEXT_488);
d3202 1
a3202 1
    stringBuffer.append(TEXT_489);
d3204 1
a3204 1
    stringBuffer.append(TEXT_490);
d3208 1
a3208 1
    stringBuffer.append(TEXT_491);
d3212 1
a3212 1
    stringBuffer.append(TEXT_492);
d3218 1
a3218 1
    stringBuffer.append(TEXT_493);
d3223 1
a3223 1
    stringBuffer.append(TEXT_494);
d3228 1
a3228 1
    stringBuffer.append(TEXT_495);
d3232 1
a3232 1
    stringBuffer.append(TEXT_496);
d3234 1
a3234 1
    stringBuffer.append(TEXT_497);
d3236 1
a3236 1
    stringBuffer.append(TEXT_498);
d3238 1
a3238 1
    stringBuffer.append(TEXT_499);
d3240 1
a3240 1
    stringBuffer.append(TEXT_500);
d3242 1
a3242 1
    stringBuffer.append(TEXT_501);
d3244 1
a3244 1
    stringBuffer.append(TEXT_502);
d3246 1
a3246 1
    stringBuffer.append(TEXT_503);
d3248 1
a3248 1
    stringBuffer.append(TEXT_504);
d3250 1
a3250 1
    stringBuffer.append(TEXT_505);
d3252 1
a3252 1
    stringBuffer.append(TEXT_506);
d3254 1
a3254 1
    stringBuffer.append(TEXT_507);
d3258 1
a3258 1
    stringBuffer.append(TEXT_508);
d3262 1
a3262 1
    stringBuffer.append(TEXT_509);
d3264 1
a3264 1
    stringBuffer.append(TEXT_510);
d3266 1
a3266 1
    stringBuffer.append(TEXT_511);
d3268 1
a3268 1
    stringBuffer.append(TEXT_512);
d3270 1
a3270 1
    stringBuffer.append(TEXT_513);
d3272 1
a3272 1
    stringBuffer.append(TEXT_514);
d3274 1
a3274 1
    stringBuffer.append(TEXT_515);
d3276 1
a3276 1
    stringBuffer.append(TEXT_516);
d3278 1
a3278 1
    stringBuffer.append(TEXT_517);
d3291 1
a3291 1
    stringBuffer.append(TEXT_518);
d3293 1
a3293 1
    stringBuffer.append(TEXT_519);
d3295 1
a3295 1
    stringBuffer.append(TEXT_520);
d3297 1
a3297 1
    stringBuffer.append(TEXT_521);
d3302 1
a3302 1
    stringBuffer.append(TEXT_522);
d3304 1
a3304 1
    stringBuffer.append(TEXT_523);
d3306 1
a3306 1
    stringBuffer.append(TEXT_524);
d3308 1
a3308 1
    stringBuffer.append(TEXT_525);
d3310 1
a3310 1
    stringBuffer.append(TEXT_526);
d3312 1
a3312 1
    stringBuffer.append(TEXT_527);
d3314 1
a3314 1
    stringBuffer.append(TEXT_528);
d3316 1
a3316 1
    stringBuffer.append(TEXT_529);
d3318 1
a3318 1
    stringBuffer.append(TEXT_530);
d3320 1
a3320 1
    stringBuffer.append(TEXT_531);
d3324 1
a3324 1
    stringBuffer.append(TEXT_532);
d3326 1
a3326 1
    stringBuffer.append(TEXT_533);
d3339 1
a3339 1
    stringBuffer.append(TEXT_534);
d3353 1
a3353 1
    stringBuffer.append(TEXT_535);
d3355 1
a3355 1
    stringBuffer.append(TEXT_536);
d3357 1
a3357 1
    stringBuffer.append(TEXT_537);
d3359 1
a3359 1
    stringBuffer.append(TEXT_538);
d3361 1
a3361 1
    stringBuffer.append(TEXT_539);
d3365 1
a3365 1
    stringBuffer.append(TEXT_540);
d3367 1
a3367 1
    stringBuffer.append(TEXT_541);
d3369 1
a3369 1
    stringBuffer.append(TEXT_542);
d3371 1
a3371 1
    stringBuffer.append(TEXT_543);
d3378 1
a3378 1
    stringBuffer.append(TEXT_544);
d3392 1
a3392 1
    stringBuffer.append(TEXT_545);
d3394 1
a3394 1
    stringBuffer.append(TEXT_546);
d3396 1
a3396 1
    stringBuffer.append(TEXT_547);
d3398 1
a3398 1
    stringBuffer.append(TEXT_548);
d3400 1
a3400 1
    stringBuffer.append(TEXT_549);
d3404 1
a3404 1
    stringBuffer.append(TEXT_550);
d3406 1
a3406 1
    stringBuffer.append(TEXT_551);
d3408 1
a3408 1
    stringBuffer.append(TEXT_552);
d3410 1
a3410 1
    stringBuffer.append(TEXT_553);
d3417 1
a3417 1
    stringBuffer.append(TEXT_554);
d3431 1
a3431 1
    stringBuffer.append(TEXT_555);
d3433 1
a3433 1
    stringBuffer.append(TEXT_556);
d3435 1
a3435 1
    stringBuffer.append(TEXT_557);
d3437 1
a3437 1
    stringBuffer.append(TEXT_558);
d3439 1
a3439 1
    stringBuffer.append(TEXT_559);
d3443 1
a3443 1
    stringBuffer.append(TEXT_560);
d3445 1
a3445 1
    stringBuffer.append(TEXT_561);
d3447 1
a3447 1
    stringBuffer.append(TEXT_562);
d3449 1
a3449 1
    stringBuffer.append(TEXT_563);
d3459 1
a3459 1
    stringBuffer.append(TEXT_564);
d3473 1
a3473 1
    stringBuffer.append(TEXT_565);
d3475 1
a3475 1
    stringBuffer.append(TEXT_566);
d3477 1
a3477 1
    stringBuffer.append(TEXT_567);
d3479 1
a3479 1
    stringBuffer.append(TEXT_568);
d3481 1
a3481 1
    stringBuffer.append(TEXT_569);
d3485 1
a3485 1
    stringBuffer.append(TEXT_570);
d3487 1
a3487 1
    stringBuffer.append(TEXT_571);
d3489 1
a3489 1
    stringBuffer.append(TEXT_572);
d3491 1
a3491 1
    stringBuffer.append(TEXT_573);
d3500 1
a3500 1
    stringBuffer.append(TEXT_574);
d3505 1
a3505 1
    stringBuffer.append(TEXT_575);
d3507 1
a3507 1
    stringBuffer.append(TEXT_576);
d3514 1
a3514 1
    stringBuffer.append(TEXT_577);
d3519 1
a3519 1
    stringBuffer.append(TEXT_578);
d3521 1
a3521 1
    stringBuffer.append(TEXT_579);
d3527 1
a3527 1
    stringBuffer.append(TEXT_580);
d3529 1
a3529 1
    stringBuffer.append(TEXT_581);
d3531 1
a3531 1
    stringBuffer.append(TEXT_582);
d3536 1
a3536 1
    stringBuffer.append(TEXT_583);
d3538 1
a3538 1
    stringBuffer.append(TEXT_584);
d3540 1
a3540 1
    stringBuffer.append(TEXT_585);
d3542 1
a3542 1
    stringBuffer.append(TEXT_586);
d3544 9
a3552 1
    stringBuffer.append(TEXT_587);
d3554 1
a3554 1
    stringBuffer.append(TEXT_588);
d3556 3
a3558 5
    stringBuffer.append(TEXT_589);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_590);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_591);
d3560 1
a3560 1
	for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
d3567 1
a3567 1
    stringBuffer.append(TEXT_592);
d3569 1
a3569 1
    stringBuffer.append(TEXT_593);
d3571 1
a3571 1
    stringBuffer.append(TEXT_594);
d3573 1
a3573 1
    stringBuffer.append(TEXT_595);
d3576 1
a3576 1
	for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
d3579 1
a3579 1
    stringBuffer.append(TEXT_596);
d3581 1
a3581 1
    stringBuffer.append(TEXT_597);
d3583 1
a3583 1
    stringBuffer.append(TEXT_598);
d3587 1
a3587 1
    stringBuffer.append(TEXT_599);
d3589 7
a3595 1
    stringBuffer.append(TEXT_600);
d3597 8
a3604 3
    stringBuffer.append(TEXT_601);
    stringBuffer.append(TEXT_602);
    stringBuffer.append(TEXT_603);
d3606 1
a3606 1
    stringBuffer.append(TEXT_604);
d3608 1
a3608 1
    stringBuffer.append(TEXT_605);
d3611 1
a3611 1
for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
d3621 1
a3621 1
for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
d3631 1
a3631 1
    stringBuffer.append(TEXT_606);
d3633 1
a3633 1
    stringBuffer.append(TEXT_607);
d3635 1
a3635 1
    stringBuffer.append(TEXT_608);
d3637 1
a3637 1
    stringBuffer.append(TEXT_609);
d3642 1
a3642 1
    stringBuffer.append(TEXT_610);
d3651 1
a3651 1
    stringBuffer.append(TEXT_611);
d3653 1
a3653 1
    stringBuffer.append(TEXT_612);
d3655 1
a3655 1
    stringBuffer.append(TEXT_613);
d3657 1
a3657 1
    stringBuffer.append(TEXT_614);
d3661 1
a3661 1
    stringBuffer.append(TEXT_615);
d3663 1
a3663 1
    stringBuffer.append(TEXT_616);
d3665 1
a3665 1
    stringBuffer.append(TEXT_617);
d3669 1
a3669 1
    stringBuffer.append(TEXT_618);
d3671 1
a3671 1
    stringBuffer.append(TEXT_619);
d3676 1
a3676 1
    stringBuffer.append(TEXT_620);
d3684 1
a3684 1
    stringBuffer.append(TEXT_621);
d3686 1
a3686 1
    stringBuffer.append(TEXT_622);
d3690 1
a3690 1
    stringBuffer.append(TEXT_623);
d3692 1
a3692 1
    stringBuffer.append(TEXT_624);
d3697 1
a3697 1
    stringBuffer.append(TEXT_625);
d3699 1
a3699 1
    stringBuffer.append(TEXT_626);
d3701 1
a3701 1
    stringBuffer.append(TEXT_627);
d3703 1
a3703 1
    stringBuffer.append(TEXT_628);
d3707 1
a3707 1
    stringBuffer.append(TEXT_629);
d3709 1
a3709 1
    stringBuffer.append(TEXT_630);
d3711 1
a3711 1
    stringBuffer.append(TEXT_631);
d3716 1
a3716 1
    stringBuffer.append(TEXT_632);
d3718 1
a3718 1
    stringBuffer.append(TEXT_633);
d3720 1
a3720 1
    stringBuffer.append(TEXT_634);
d3722 1
a3722 1
    stringBuffer.append(TEXT_635);
d3726 1
a3726 1
    stringBuffer.append(TEXT_636);
d3728 1
a3728 1
    stringBuffer.append(TEXT_637);
d3730 1
a3730 1
    stringBuffer.append(TEXT_638);
d3734 1
a3734 1
    stringBuffer.append(TEXT_639);
d3736 1
a3736 1
    stringBuffer.append(TEXT_640);
d3740 1
a3740 1
    stringBuffer.append(TEXT_641);
d3744 1
a3744 1
    stringBuffer.append(TEXT_642);
d3752 1
a3752 1
    stringBuffer.append(TEXT_643);
d3757 1
a3757 1
    stringBuffer.append(TEXT_644);
d3767 1
a3767 1
    stringBuffer.append(TEXT_645);
d3769 1
a3769 1
    stringBuffer.append(TEXT_646);
d3771 1
a3771 1
    stringBuffer.append(TEXT_647);
d3773 1
a3773 1
    stringBuffer.append(TEXT_648);
d3777 1
a3777 1
    stringBuffer.append(TEXT_649);
d3779 1
a3779 1
    stringBuffer.append(TEXT_650);
d3781 1
a3781 1
    stringBuffer.append(TEXT_651);
d3785 1
a3785 1
    stringBuffer.append(TEXT_652);
d3790 1
a3790 1
    stringBuffer.append(TEXT_653);
d3792 1
a3792 1
    stringBuffer.append(TEXT_654);
d3794 1
a3794 1
    stringBuffer.append(TEXT_655);
d3798 1
a3798 1
    stringBuffer.append(TEXT_656);
d3802 1
a3802 1
    stringBuffer.append(TEXT_657);
d3807 5
a3811 1
    stringBuffer.append(TEXT_658);
d3813 1
a3813 1
    stringBuffer.append(TEXT_659);
d3815 1
a3815 1
    stringBuffer.append(TEXT_660);
d3817 1
a3817 1
    stringBuffer.append(TEXT_661);
d3819 1
a3819 1
    stringBuffer.append(TEXT_662);
d3821 1
a3821 1
    stringBuffer.append(TEXT_663);
d3823 1
a3823 1
    stringBuffer.append(TEXT_664);
d3825 1
a3825 1
    stringBuffer.append(TEXT_665);
d3827 1
a3827 1
    stringBuffer.append(TEXT_666);
d3831 1
a3831 1
    stringBuffer.append(TEXT_667);
d3833 1
a3833 1
    stringBuffer.append(TEXT_668);
d3835 1
a3835 1
    stringBuffer.append(TEXT_669);
d3840 1
a3840 1
    stringBuffer.append(TEXT_670);
d3842 1
a3842 1
    stringBuffer.append(TEXT_671);
d3844 1
a3844 1
    stringBuffer.append(TEXT_672);
d3849 1
a3849 1
    stringBuffer.append(TEXT_673);
d3851 1
a3851 1
    stringBuffer.append(TEXT_674);
d3855 1
a3855 1
    stringBuffer.append(TEXT_675);
d3859 1
a3859 1
    stringBuffer.append(TEXT_676);
d3863 1
a3863 1
    stringBuffer.append(TEXT_677);
d3870 1
a3870 1
    stringBuffer.append(TEXT_678);
d3874 1
a3874 1
    stringBuffer.append(TEXT_679);
d3876 1
a3876 1
    stringBuffer.append(TEXT_680);
d3878 1
a3878 1
    stringBuffer.append(TEXT_681);
d3883 1
a3883 1
    stringBuffer.append(TEXT_682);
d3885 1
a3885 1
    stringBuffer.append(TEXT_683);
d3889 1
a3889 1
    stringBuffer.append(TEXT_684);
d3893 1
a3893 1
    stringBuffer.append(TEXT_685);
d3895 1
a3895 1
    stringBuffer.append(TEXT_686);
d3897 1
a3897 1
    stringBuffer.append(TEXT_687);
d3899 1
a3899 1
    stringBuffer.append(TEXT_688);
d3901 1
a3901 1
    stringBuffer.append(TEXT_689);
d3903 1
a3903 1
    stringBuffer.append(TEXT_690);
d3905 1
a3905 1
    stringBuffer.append(TEXT_691);
d3907 1
a3907 1
    stringBuffer.append(TEXT_692);
d3909 1
a3909 1
    stringBuffer.append(TEXT_693);
d3911 1
a3911 1
    stringBuffer.append(TEXT_694);
d3913 1
a3913 1
    stringBuffer.append(TEXT_695);
d3915 1
a3915 1
    stringBuffer.append(TEXT_696);
d3922 3
a3924 3
    stringBuffer.append(TEXT_697);
    stringBuffer.append(TEXT_698);
    stringBuffer.append(TEXT_699);
d3926 1
a3926 1
    stringBuffer.append(TEXT_700);
d3928 3
a3930 3
    stringBuffer.append(TEXT_701);
    stringBuffer.append(TEXT_702);
    stringBuffer.append(TEXT_703);
d3932 1
a3932 1
    stringBuffer.append(TEXT_704);
d3934 1
a3934 1
    stringBuffer.append(TEXT_705);
d3936 1
a3936 1
    stringBuffer.append(TEXT_706);
d3940 1
a3940 1
    stringBuffer.append(TEXT_707);
d3948 1
a3948 1
    stringBuffer.append(TEXT_708);
d3952 1
a3952 1
    stringBuffer.append(TEXT_709);
d3954 1
a3954 1
    stringBuffer.append(TEXT_710);
d3956 1
a3956 1
    stringBuffer.append(TEXT_711);
d3958 1
a3958 1
    stringBuffer.append(TEXT_712);
d3960 1
a3960 1
    stringBuffer.append(TEXT_713);
d3962 1
a3962 1
    stringBuffer.append(TEXT_714);
d3964 1
a3964 1
    stringBuffer.append(TEXT_715);
d3966 1
a3966 1
    stringBuffer.append(TEXT_716);
d3968 1
a3968 1
    stringBuffer.append(TEXT_717);
d3970 1
a3970 1
    stringBuffer.append(TEXT_718);
d3972 1
a3972 1
    stringBuffer.append(TEXT_719);
d3974 1
a3974 1
    stringBuffer.append(TEXT_720);
d3978 1
a3978 1
    stringBuffer.append(TEXT_721);
d3982 1
a3982 1
    stringBuffer.append(TEXT_722);
d3984 1
a3984 1
    stringBuffer.append(TEXT_723);
a3987 24
    stringBuffer.append(TEXT_724);
    stringBuffer.append(TEXT_725);
    stringBuffer.append(TEXT_726);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_727);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_728);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_729);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_730);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_731);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_732);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_733);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_734);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_735);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_736);
    stringBuffer.append(primaryView);
a3988 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a3989 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d3991 1
a3991 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d3993 1
a3993 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d3995 1
a3995 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d3997 1
d3999 1
d4001 1
a4001 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d4003 1
a4003 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d4005 1
a4005 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d4007 1
a4007 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d4009 1
d4011 1
d4015 1
a4015 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4017 1
d4019 1
d4021 1
a4021 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4022 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4023 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4025 1
a4025 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4027 1
a4027 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4029 1
d4031 1
a4032 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4035 1
d4043 1
d4045 1
a4050 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4052 1
a4053 1
    stringBuffer.append(TEXT_774);
a4055 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4058 7
    
for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	boolean isStatic = true;
	boolean isListLayout = !isXYLayout;
	String resolvedSemanticElement = "parent.getElement()";

d4061 1
a4061 1
    if (isStatic) {
a4062 1
    }
a4063 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d4065 1
a4065 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand"));
d4067 1
a4067 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d4069 1
a4069 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d4071 1
a4071 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a4072 1
    if (!isListLayout) {
a4073 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d4075 1
a4075 1
    }
d4077 1
a4077 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
a4078 2
    stringBuffer.append(importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_792);
d4080 5
a4084 1
	if (!isListLayout) {
d4086 1
a4086 23
    stringBuffer.append(TEXT_793);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
    stringBuffer.append(TEXT_794);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_795);
    
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}

    stringBuffer.append(TEXT_796);
    stringBuffer.append(defaultWidth);
    stringBuffer.append(TEXT_797);
    stringBuffer.append(defaultHeight);
    stringBuffer.append(TEXT_798);
    
	}

    stringBuffer.append(TEXT_799);
d4090 1
a4090 1
    stringBuffer.append(TEXT_800);
d4092 1
a4092 1
    stringBuffer.append(TEXT_801);
d4094 1
a4094 1
    stringBuffer.append(TEXT_802);
d4097 1
a4097 1
    stringBuffer.append(TEXT_803);
d4099 3
a4101 1
    stringBuffer.append(TEXT_804);
d4104 1
a4104 4
    stringBuffer.append(TEXT_805);
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
    stringBuffer.append(TEXT_806);
d4106 1
a4106 1
    stringBuffer.append(TEXT_807);
d4108 1
a4108 1
    stringBuffer.append(TEXT_808);
d4110 1
a4110 1
    stringBuffer.append(TEXT_809);
d4112 1
a4112 1
    stringBuffer.append(TEXT_810);
d4114 1
a4114 1
    stringBuffer.append(TEXT_811);
d4116 1
a4116 1
    stringBuffer.append(TEXT_812);
d4118 1
a4118 1
    stringBuffer.append(TEXT_813);
d4123 1
a4123 1
    stringBuffer.append(TEXT_814);
d4125 1
a4125 1
    stringBuffer.append(TEXT_815);
d4127 1
a4127 1
    stringBuffer.append(TEXT_816);
d4129 1
a4129 1
    stringBuffer.append(TEXT_817);
d4131 1
a4131 1
    stringBuffer.append(TEXT_818);
d4135 1
a4135 1
    stringBuffer.append(TEXT_819);
d4137 1
a4137 1
    stringBuffer.append(TEXT_820);
d4139 1
a4139 1
    stringBuffer.append(TEXT_821);
d4141 1
a4141 1
    stringBuffer.append(TEXT_822);
d4145 1
a4145 1
    stringBuffer.append(TEXT_823);
d4147 1
a4147 1
    stringBuffer.append(TEXT_824);
d4149 1
a4149 1
    stringBuffer.append(TEXT_825);
d4151 1
a4151 1
    stringBuffer.append(TEXT_826);
d4153 1
a4153 1
    stringBuffer.append(TEXT_827);
d4155 1
a4155 1
    stringBuffer.append(TEXT_828);
d4157 1
a4157 1
    stringBuffer.append(TEXT_829);
d4164 14
d4179 1
a4179 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d4181 1
a4181 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d4183 6
d4190 1
a4190 1
    stringBuffer.append(TEXT_833);
d4192 1
a4192 1
    stringBuffer.append(TEXT_834);
d4194 1
a4194 1
    stringBuffer.append(TEXT_835);
d4196 14
a4209 6
    stringBuffer.append(TEXT_836);
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_837);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_838);
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4211 1
a4211 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
d4213 4
d4218 1
a4218 1
	} else {
a4219 4
    stringBuffer.append(TEXT_841);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_842);
    stringBuffer.append(resolvedSemanticElement);
d4221 1
a4221 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4223 1
a4223 1
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
d4225 1
a4225 3
    
	}

d4227 1
a4227 2
    stringBuffer.append(next.getDomainMetaClass().getName());
    stringBuffer.append(next.getVisualID());
d4229 1
a4229 1
    if (next.getDomainMetaClass().isExternalInterface()) {
d4231 1
a4231 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d4235 1
a4235 1
    if(!isListLayout) {
a4236 2
    }
    stringBuffer.append(TEXT_852);
d4268 1
a4268 1
    stringBuffer.append(TEXT_853);
d4271 2
d4274 1
a4274 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d4276 1
a4276 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d4280 1
a4280 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a4281 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_859);
d4284 2
d4287 1
a4287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
d4289 1
a4289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
a4290 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_863);
d4293 2
d4296 1
a4296 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
a4297 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_866);
d4301 2
d4304 1
a4304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d4306 1
a4306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d4308 2
a4310 2
    stringBuffer.append(TEXT_870);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d4312 1
a4312 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
a4313 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_873);
d4317 1
a4317 1
    stringBuffer.append(TEXT_874);
d4321 1
a4321 1
    stringBuffer.append(TEXT_875);
d4328 1
a4328 1
    stringBuffer.append(TEXT_876);
d4332 2
d4337 1
a4337 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName()));
d4339 1
a4339 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName()));
a4340 2
    stringBuffer.append(containmentFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_881);
d4348 1
a4348 1
    stringBuffer.append(TEXT_882);
d4354 2
d4357 1
a4357 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
a4358 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_885);
d4362 2
d4365 1
a4365 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d4367 1
a4367 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d4369 1
a4369 1
    stringBuffer.append(_feature.getFeatureAccessorName());
a4370 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_890);
d4385 1
a4385 1
    stringBuffer.append(TEXT_891);
d4391 2
d4394 1
a4394 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
a4395 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_894);
d4399 2
d4402 1
a4402 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d4404 1
a4404 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d4406 1
a4406 1
    stringBuffer.append(_feature.getFeatureAccessorName());
a4407 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_899);
d4421 1
a4421 1
    stringBuffer.append(TEXT_900);
d4425 2
d4428 1
a4428 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
d4430 1
a4430 1
    stringBuffer.append(_source);
a4431 2
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_904);
d4438 1
a4438 1
    stringBuffer.append(TEXT_905);
d4448 1
a4448 1
    stringBuffer.append(TEXT_906);
d4454 2
d4457 1
a4457 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
a4458 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_909);
d4462 2
d4465 1
a4465 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d4467 1
a4467 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d4469 1
a4469 1
    stringBuffer.append(_feature.getFeatureAccessorName());
a4470 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_914);
d4481 1
a4481 1
    stringBuffer.append(TEXT_915);
d4485 2
d4488 1
a4488 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
d4490 1
a4490 1
    stringBuffer.append(_source);
a4491 2
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_919);
d4498 1
a4498 1
    stringBuffer.append(TEXT_920);
d4502 1
a4502 1
    stringBuffer.append(TEXT_921);
d4506 2
d4509 1
a4509 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d4511 1
a4511 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d4513 1
a4513 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d4517 1
a4517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
a4518 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeSourceCommand"));
    stringBuffer.append(TEXT_928);
d4537 2
d4540 1
a4540 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d4542 1
a4542 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName()));
d4544 1
a4544 1
    stringBuffer.append(containmentFeature.getGenClass().getClassifierAccessorName());
d4546 2
a4548 2
    stringBuffer.append(TEXT_933);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a4549 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_935);
d4555 2
a4557 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_937);
d4561 2
a4565 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_940);
d4569 2
d4572 1
a4572 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d4574 1
a4574 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a4575 2
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_944);
d4581 2
d4584 1
a4584 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d4586 1
a4586 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a4587 2
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_948);
d4591 2
d4594 1
a4594 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d4596 1
a4596 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4598 1
a4598 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
a4599 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_953);
d4603 2
d4606 1
a4606 1
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d4608 1
a4608 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a4609 2
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_957);
d4613 1
a4613 1
    stringBuffer.append(TEXT_958);
d4618 2
d4621 1
a4621 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d4623 1
a4623 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4625 1
a4625 1
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
d4627 1
a4627 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
d4629 1
a4629 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a4630 2
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_965);
d4634 2
d4637 1
a4637 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d4639 1
a4639 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a4640 2
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_969);
d4648 2
d4651 1
a4651 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d4653 1
a4653 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4655 1
a4655 1
    stringBuffer.append(metaFeature.getFeatureAccessorName());
d4657 1
a4657 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
d4659 1
a4659 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a4660 2
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_976);
d4664 2
d4667 1
a4667 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d4669 1
a4669 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4671 1
a4671 1
    stringBuffer.append(metaFeature.getFeatureAccessorName());
d4675 1
a4675 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d4677 1
a4677 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a4678 2
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_984);
d4683 1
a4684 1
    stringBuffer.append(TEXT_986);
d4688 2
d4693 1
a4693 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a4694 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_990);
d4702 1
a4703 1
    stringBuffer.append(TEXT_992);
d4707 2
d4710 1
a4710 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
a4711 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_995);
d4738 2
a4742 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_998);
d4746 2
d4749 1
a4749 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
a4754 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1003);
d4758 2
d4761 1
a4761 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d4765 1
a4765 1
    stringBuffer.append(_edge);
a4766 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1008);
d4771 2
a4773 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1010);
d4779 2
d4782 1
a4782 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d4784 1
a4784 1
    stringBuffer.append(_edge);
d4786 1
a4786 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4788 1
a4788 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
a4789 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1016);
d4793 2
d4796 1
a4796 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d4798 1
a4798 1
    stringBuffer.append(_edge);
d4800 1
a4800 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4802 1
a4802 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
a4803 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1022);
d4810 2
d4813 1
a4813 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d4815 1
a4815 1
    stringBuffer.append(_edge);
d4817 1
a4817 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4819 1
a4819 1
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
a4820 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1028);
d4824 2
d4827 1
a4827 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d4829 1
a4829 1
    stringBuffer.append(_edge);
d4831 1
a4831 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4833 1
a4833 1
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
a4834 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1034);
d4841 2
d4844 1
a4844 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d4846 1
a4846 1
    stringBuffer.append(_edge);
d4848 1
a4848 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4850 1
a4850 1
    stringBuffer.append(targetFeature.getFeatureAccessorName());
a4851 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1040);
d4855 2
d4858 1
a4858 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d4860 1
a4860 1
    stringBuffer.append(_edge);
d4862 1
a4862 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4864 1
a4864 1
    stringBuffer.append(targetFeature.getFeatureAccessorName());
a4865 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1046);
d4870 1
a4870 1
    stringBuffer.append(TEXT_1047);
d4876 2
d4879 1
a4879 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d4881 1
a4881 1
    stringBuffer.append(_edge);
d4883 1
a4883 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4885 1
a4885 1
    stringBuffer.append(metaFeature.getFeatureAccessorName());
a4886 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1053);
d4890 2
d4893 1
a4893 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d4895 1
a4895 1
    stringBuffer.append(_edge);
d4897 1
a4897 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d4899 1
a4899 1
    stringBuffer.append(metaFeature.getFeatureAccessorName());
a4900 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1059);
d4907 1
a4907 1
    stringBuffer.append(TEXT_1060);
d4911 1
a4911 1
    stringBuffer.append(TEXT_1061);
d4915 1
a4915 1
    stringBuffer.append(TEXT_1062);
d4918 2
d4921 1
a4921 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
a4922 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1065);
d4925 2
d4928 1
a4928 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
a4929 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1068);
d4936 1
a4936 1
    stringBuffer.append(TEXT_1069);
d4940 2
d4945 1
a4945 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName()));
d4947 1
a4947 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName()));
a4948 2
    stringBuffer.append(containmentFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_1074);
d4956 1
a4956 1
    stringBuffer.append(TEXT_1075);
d4962 2
d4965 1
a4965 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
a4966 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1078);
d4970 2
d4973 1
a4973 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d4975 1
a4975 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d4977 1
a4977 1
    stringBuffer.append(_feature.getFeatureAccessorName());
a4978 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1083);
d4993 1
a4993 1
    stringBuffer.append(TEXT_1084);
d4999 2
d5002 1
a5002 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
a5003 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1087);
d5007 2
d5010 1
a5010 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d5012 1
a5012 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d5014 1
a5014 1
    stringBuffer.append(_feature.getFeatureAccessorName());
a5015 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1092);
d5027 1
a5027 1
    stringBuffer.append(TEXT_1093);
d5031 2
d5034 1
a5034 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
d5036 1
a5036 1
    stringBuffer.append(_source);
a5037 2
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1097);
d5044 1
a5044 1
    stringBuffer.append(TEXT_1098);
d5055 1
a5055 1
    stringBuffer.append(TEXT_1099);
d5061 2
d5064 1
a5064 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
a5065 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1102);
d5069 2
d5072 1
a5072 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d5074 1
a5074 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d5076 1
a5076 1
    stringBuffer.append(_feature.getFeatureAccessorName());
a5077 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1107);
d5088 1
a5088 1
    stringBuffer.append(TEXT_1108);
d5092 2
d5095 1
a5095 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
d5097 1
a5097 1
    stringBuffer.append(_source);
a5098 2
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1112);
d5105 1
a5105 1
    stringBuffer.append(TEXT_1113);
d5109 1
a5109 1
    stringBuffer.append(TEXT_1114);
d5113 1
a5114 1
    stringBuffer.append(TEXT_1116);
d5118 2
d5123 1
a5123 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a5124 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_1120);
d5128 1
a5128 1
    stringBuffer.append(TEXT_1121);
d5158 1
a5158 1
    stringBuffer.append(TEXT_1122);
d5161 2
d5164 1
a5164 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d5166 1
a5166 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d5170 1
a5170 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a5171 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_1128);
d5174 2
d5177 1
a5177 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
d5179 1
a5179 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
a5180 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1132);
d5183 2
d5186 1
a5186 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
a5187 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1135);
d5191 2
d5194 1
a5194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d5196 1
a5196 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d5198 2
a5200 2
    stringBuffer.append(TEXT_1139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d5202 1
a5202 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
a5203 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_1142);
d5207 1
a5207 1
    stringBuffer.append(TEXT_1143);
d5211 1
a5211 1
    stringBuffer.append(TEXT_1144);
d5218 1
a5218 1
    stringBuffer.append(TEXT_1145);
d5222 2
d5225 1
a5225 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
d5227 1
a5227 1
    stringBuffer.append(_source);
a5228 2
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1149);
d5235 1
a5235 1
    stringBuffer.append(TEXT_1150);
d5242 1
a5242 1
    stringBuffer.append(TEXT_1151);
d5246 2
d5249 1
a5249 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
d5251 1
a5251 1
    stringBuffer.append(_source);
a5252 2
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1155);
d5259 1
a5259 1
    stringBuffer.append(TEXT_1156);
d5263 1
a5263 1
    stringBuffer.append(TEXT_1157);
d5267 2
d5270 1
a5270 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d5272 1
a5272 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d5274 1
a5274 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d5278 1
a5278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
a5279 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeTargetCommand"));
    stringBuffer.append(TEXT_1164);
d5286 2
d5289 1
a5289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5291 1
a5291 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5293 1
a5293 1
    stringBuffer.append(targetFeature.getFeatureAccessorName());
d5295 1
a5295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
d5297 1
a5297 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5298 2
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1171);
d5302 2
d5305 1
a5305 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5307 1
a5307 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5308 2
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1175);
d5315 2
d5318 1
a5318 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5320 1
a5320 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5322 1
a5322 1
    stringBuffer.append(metaFeature.getFeatureAccessorName());
d5324 1
a5324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
d5326 1
a5326 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5327 2
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1182);
d5331 2
d5334 1
a5334 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5336 1
a5336 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5337 2
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1186);
d5342 1
a5342 1
    stringBuffer.append(TEXT_1187);
d5347 1
a5348 1
    stringBuffer.append(TEXT_1189);
d5352 2
d5355 1
a5355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
a5356 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1192);
d5383 2
a5387 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1195);
d5391 2
d5394 1
a5394 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
a5399 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1200);
d5403 2
d5406 1
a5406 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5410 1
a5410 1
    stringBuffer.append(_edge);
a5411 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1205);
d5416 2
a5418 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1207);
d5424 2
d5427 1
a5427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5429 1
a5429 1
    stringBuffer.append(_edge);
d5431 1
a5431 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5433 1
a5433 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
a5434 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1213);
d5438 2
d5441 1
a5441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5443 1
a5443 1
    stringBuffer.append(_edge);
d5445 1
a5445 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5447 1
a5447 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
a5448 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1219);
d5455 2
d5458 1
a5458 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5460 1
a5460 1
    stringBuffer.append(_edge);
d5462 1
a5462 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5464 1
a5464 1
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
a5465 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1225);
d5469 2
d5472 1
a5472 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5474 1
a5474 1
    stringBuffer.append(_edge);
d5476 1
a5476 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5478 1
a5478 1
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
a5479 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1231);
d5486 2
d5489 1
a5489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5491 1
a5491 1
    stringBuffer.append(_edge);
d5493 1
a5493 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5495 1
a5495 1
    stringBuffer.append(targetFeature.getFeatureAccessorName());
a5496 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1237);
d5500 2
d5503 1
a5503 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5505 1
a5505 1
    stringBuffer.append(_edge);
d5507 1
a5507 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5509 1
a5509 1
    stringBuffer.append(targetFeature.getFeatureAccessorName());
a5510 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1243);
d5515 1
a5515 1
    stringBuffer.append(TEXT_1244);
d5521 2
d5524 1
a5524 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5526 1
a5526 1
    stringBuffer.append(_edge);
d5528 1
a5528 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5530 1
a5530 1
    stringBuffer.append(metaFeature.getFeatureAccessorName());
a5531 2
    stringBuffer.append(_edge);
    stringBuffer.append(TEXT_1250);
d5535 2
d5538 1
a5538 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5540 1
a5540 1
    stringBuffer.append(_edge);
d5542 1
a5542 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5544 1
a5544 1
    stringBuffer.append(metaFeature.getFeatureAccessorName());
a5545 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1256);
d5552 1
a5552 1
    stringBuffer.append(TEXT_1257);
d5556 1
a5556 1
    stringBuffer.append(TEXT_1258);
d5560 1
a5560 1
    stringBuffer.append(TEXT_1259);
d5563 2
d5566 1
a5566 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand"));
d5570 1
a5570 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a5571 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_1264);
d5574 2
d5577 1
a5577 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
d5585 1
a5585 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d5587 1
a5587 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
a5588 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_1272);
d5594 2
d5597 1
a5597 1
    stringBuffer.append(importManager.getImportedName(importManager.getImportedName(linkClass.getQualifiedInterfaceName())));
d5599 1
a5599 1
    stringBuffer.append(importManager.getImportedName(linkClass.getGenPackage().getQualifiedFactoryInterfaceName()));
d5601 1
a5601 1
    stringBuffer.append(linkClass.getClassifierAccessorName());
d5603 1
a5603 1
    if (linkClass.isExternalInterface()) {
d5605 1
a5605 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d5607 1
a5607 1
    }
d5609 1
a5609 1
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
d5611 1
a5611 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
d5613 1
a5613 1
    stringBuffer.append(genLink.getUniqueIdentifier());
d5615 1
a5615 1
    if (linkClass.isExternalInterface()) {
d5617 1
a5617 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a5618 2
    }
    stringBuffer.append(TEXT_1285);
d5622 1
a5622 1
    stringBuffer.append(TEXT_1286);
d5626 2
d5629 1
a5629 1
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
d5631 1
a5631 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
a5632 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_1290);
d5636 1
a5636 1
    stringBuffer.append(TEXT_1291);
d5663 2
d5666 1
a5666 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d5668 1
a5668 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName()));
d5670 1
a5670 1
    stringBuffer.append(containmentFeature.getGenClass().getClassifierAccessorName());
d5672 1
a5672 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d5674 1
a5674 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5675 2
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1298);
d5680 2
d5683 1
a5683 1
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d5685 1
a5685 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5686 2
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1302);
d5696 1
a5696 1
    stringBuffer.append(TEXT_1303);
d5702 2
d5705 1
a5705 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
a5706 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1306);
d5710 2
d5713 1
a5713 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d5715 1
a5715 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d5717 1
a5717 1
    stringBuffer.append(_feature.getFeatureAccessorName());
a5718 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1311);
d5726 2
d5729 1
a5729 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d5731 1
a5731 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5732 2
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1315);
d5742 1
a5742 1
    stringBuffer.append(TEXT_1316);
d5748 2
d5751 1
a5751 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, false);
a5752 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1319);
d5756 2
d5759 1
a5759 1
    myFeatureGetAccessorHelper.appendFeatureValueGetter(_ownerInstance, _feature, _ownerGenClass, true);
d5761 1
a5761 1
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
d5763 1
a5763 1
    stringBuffer.append(_feature.getFeatureAccessorName());
a5764 2
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_1324);
d5772 2
d5775 1
a5775 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d5777 1
a5777 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5778 2
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1328);
d5782 1
a5782 1
    stringBuffer.append(TEXT_1329);
d5787 2
d5790 1
a5790 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getEcoreFeature().isMany()? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d5792 1
a5792 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5793 2
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1333);
d5797 1
a5798 1
    stringBuffer.append(TEXT_1335);
d5802 2
d5807 1
a5807 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a5808 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_1339);
d5812 1
a5812 1
    stringBuffer.append(TEXT_1340);
d5818 1
a5818 1
    stringBuffer.append(TEXT_1341);
d5822 2
d5825 1
a5825 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
d5827 1
a5827 1
    stringBuffer.append(_source);
a5828 2
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_1345);
d5835 1
a5835 1
    stringBuffer.append(TEXT_1346);
d5844 2
a5846 2
    stringBuffer.append(classBody);
    stringBuffer.append(TEXT_1348);
d5850 1
a5850 1
    stringBuffer.append(TEXT_1349);
d5857 2
d5860 1
a5860 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart"));
a5861 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d5864 1
d5866 1
a5866 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d5868 1
a5868 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy"));
d5870 1
a5870 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d5872 1
a5872 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.GroupRequest"));
d5874 1
a5874 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d5876 1
a5876 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d5880 1
a5880 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d5882 1
a5882 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5884 1
a5884 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
a5885 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_1365);
d5893 2
a5897 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1368);
d5901 2
d5904 1
a5904 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5906 1
a5906 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5907 2
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1372);
d5911 2
d5914 1
a5914 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5916 1
a5916 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5918 1
a5918 1
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
a5919 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1377);
d5926 2
d5929 1
a5929 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5931 1
a5931 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5932 2
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1381);
d5936 2
d5939 1
a5939 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5941 1
a5941 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5943 1
a5943 1
    stringBuffer.append(childFeature.getFeatureAccessorName());
a5944 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1386);
d5948 1
a5948 1
    stringBuffer.append(TEXT_1387);
d5953 2
d5956 1
a5956 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d5958 1
a5958 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a5959 2
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1391);
d5963 2
d5966 1
a5966 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
d5968 1
a5968 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d5970 1
a5970 1
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
a5971 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1396);
d5976 1
a5976 1
    stringBuffer.append(TEXT_1397);
d5987 1
d5989 1
d5991 1
a5991 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d5993 1
a5993 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
a5994 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d5997 1
d5999 1
a5999 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d6001 1
a6001 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d6003 1
a6003 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d6005 1
a6005 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d6007 1
a6007 1
    stringBuffer.append(editPatternCode);
d6009 2
a6011 2
    stringBuffer.append(TEXT_1410);
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d6013 1
a6013 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d6015 1
a6015 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d6017 1
a6017 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
a6018 2
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_1415);
d6024 2
d6027 1
a6027 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d6029 2
a6031 2
    stringBuffer.append(TEXT_1418);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d6033 1
a6033 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d6035 1
a6035 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d6037 1
a6037 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d6039 1
a6039 1
    stringBuffer.append(resolvedSemanticElement);
d6043 1
a6043 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d6045 1
a6045 1
    stringBuffer.append(importManager.getImportedName(featureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
d6047 1
a6047 1
    stringBuffer.append(featureToSet.getFeatureAccessorName());
d6049 1
a6049 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
a6050 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1429);
d6054 2
d6059 1
a6059 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d6061 1
a6061 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
d6063 1
a6063 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
d6065 1
a6065 1
    stringBuffer.append(featureToSet.getAccessorName());
d6067 1
a6067 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
a6068 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_1437);
d6072 2
a6074 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1439);
d6078 1
a6078 1
    stringBuffer.append(TEXT_1440);
d6084 2
d6087 1
a6087 1
    stringBuffer.append(metaFeatures.size());
d6089 1
a6089 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d6091 2
a6093 2
    stringBuffer.append(TEXT_1444);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d6095 1
a6095 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d6097 1
a6097 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d6099 1
a6099 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d6101 1
a6101 1
    stringBuffer.append(resolvedSemanticElement);
a6104 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_1451);
d6111 1
a6111 1
    stringBuffer.append(TEXT_1452);
d6114 2
d6117 1
a6117 1
    }
d6119 1
a6119 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d6121 1
a6121 1
    stringBuffer.append(importManager.getImportedName(nextFeatureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
d6123 1
a6123 1
    stringBuffer.append(nextFeatureToSet.getFeatureAccessorName());
d6125 1
a6125 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
d6127 1
a6127 1
    stringBuffer.append(i);
a6128 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_1460);
d6132 1
a6132 1
    stringBuffer.append(TEXT_1461);
d6135 2
d6138 1
a6138 1
    }
d6140 1
a6140 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
d6142 1
a6142 1
    stringBuffer.append(nextFeatureToSet.getAccessorName());
d6144 1
a6144 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
a6145 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_1467);
d6149 2
a6151 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_1469);
d6158 1
a6158 1
    stringBuffer.append(TEXT_1470);
d6162 1
a6162 1
    stringBuffer.append(TEXT_1471);
d6166 1
a6166 1
    stringBuffer.append(TEXT_1472);
d6170 1
d6172 1
d6174 1
a6174 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
d6176 1
a6176 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d6178 1
a6178 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d6182 1
a6182 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.TreeDirectEditManager"));
d6184 1
a6184 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
d6186 1
a6186 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
d6188 1
a6188 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
d6192 1
a6192 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.TreeItem"));
a6193 2
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_1485);
d6197 1
d6200 1
a6203 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.RefreshAdapter"));
    stringBuffer.append(TEXT_1490);
d6207 2
d6212 1
a6212 1
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
d6214 1
a6214 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d6218 1
a6218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d6220 1
a6220 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d6224 1
a6224 1
    stringBuffer.append(importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()));
a6225 2
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_1500);
d6229 1
a6229 1
    stringBuffer.append(TEXT_1501);
d6236 2
d6239 1
a6239 1
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
a6240 2
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_1504);
d6247 2
d6250 1
a6250 1
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
a6251 2
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_1507);
d6262 2
d6265 1
a6265 1
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
a6266 2
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_1510);
d6274 2
d6279 1
a6279 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d6281 1
a6281 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d6283 1
a6283 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d6287 1
a6287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a6288 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_1518);
d6293 2
a6295 2
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_1520);
d6303 2
a6305 2
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_1522);
d6309 2
a6311 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_1524);
@


1.21
log
@[155955] bblajer -  Allow creation of child nodes directly in parent elements
@
text
@d260 72
a331 72
  protected final String TEXT_239 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_240 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_241 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_242 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_243 = " invisibleRectangle = new ";
  protected final String TEXT_244 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_245 = "());" + NL + "\t\t";
  protected final String TEXT_246 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);";
  protected final String TEXT_247 = NL + "\t\tchildNodesPane = createChildNodesPane();" + NL + "\t\tshape.add(childNodesPane);";
  protected final String TEXT_248 = NL + NL + "\t\t";
  protected final String TEXT_249 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL;
  protected final String TEXT_250 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_251 = " createChildNodesPane() {" + NL + "\t\t";
  protected final String TEXT_252 = " result = new ";
  protected final String TEXT_253 = "();" + NL + "\t\tsetupContentPane(result);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_254 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_255 = " createNodeShape() {";
  protected final String TEXT_256 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_257 = "()";
  protected final String TEXT_258 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_259 = ";";
  protected final String TEXT_260 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_261 = ";";
  protected final String TEXT_262 = NL + "\t\t";
  protected final String TEXT_263 = " figure = new ";
  protected final String TEXT_264 = "();";
  protected final String TEXT_265 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_266 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_267 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_268 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_269 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_270 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_271 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_272 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_273 = " view = (";
  protected final String TEXT_274 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_275 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_276 = " decorationPane = new ";
  protected final String TEXT_277 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_278 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_279 = " imageFigure = new ";
  protected final String TEXT_280 = "(";
  protected final String TEXT_281 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_282 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_283 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_284 = " setupContentPane(";
  protected final String TEXT_285 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_286 = NL + "\t\t\t";
  protected final String TEXT_287 = " layout = new ";
  protected final String TEXT_288 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_289 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_290 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_291 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_292 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_293 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_294 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_295 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_296 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_297 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_298 = " childEditPart) {";
  protected final String TEXT_299 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_300 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_301 = ") childEditPart).";
  protected final String TEXT_302 = "(getPrimaryShape().";
  protected final String TEXT_303 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_304 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_305 = ") {" + NL + "\t\t\t";
  protected final String TEXT_306 = " pane = getPrimaryShape().";
  protected final String TEXT_307 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_308 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_309 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_310 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
d334 1
a334 1
  protected final String TEXT_313 = "();" + NL + "\t\t\tpane.remove(((";
d336 80
a415 80
  protected final String TEXT_315 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_316 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_317 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_318 = NL + "\t\tfor(";
  protected final String TEXT_319 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_320 = " nextChild = (";
  protected final String TEXT_321 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_322 = ".getVisualID(nextChild) == ";
  protected final String TEXT_323 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_324 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_325 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_326 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_327 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_328 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_329 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_330 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_331 = " getLabelEditPart(";
  protected final String TEXT_332 = " req) {" + NL + "\t\t";
  protected final String TEXT_333 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_334 = " view = (";
  protected final String TEXT_335 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_336 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_337 = NL + "\t\t\t\tcase ";
  protected final String TEXT_338 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_339 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_340 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_341 = " childEditPart) {";
  protected final String TEXT_342 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_343 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_344 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_345 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_346 = " root = (";
  protected final String TEXT_347 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_348 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_349 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isDirectChild(";
  protected final String TEXT_350 = " childEditPart) {";
  protected final String TEXT_351 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_352 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_353 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_354 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_355 = " childEditPart, int index) {";
  protected final String TEXT_356 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_357 = " labelFigure = ((";
  protected final String TEXT_358 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_359 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_360 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_361 = " childFigure = ((";
  protected final String TEXT_362 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.add(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_363 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_364 = " childEditPart) {";
  protected final String TEXT_365 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_366 = " labelFigure = ((";
  protected final String TEXT_367 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_368 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_369 = NL + "\t\tif (isDirectChild(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_370 = " childFigure = ((";
  protected final String TEXT_371 = ") childEditPart).getFigure();" + NL + "\t\t\tchildNodesPane.remove(childFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_372 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_373 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_374 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_375 = " childEditPart = (";
  protected final String TEXT_376 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_377 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_378 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_379 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_380 = ";" + NL + "\t\t";
  protected final String TEXT_381 = " bounds = (";
  protected final String TEXT_382 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_383 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_384 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_385 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_386 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_387 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_388 = " getSourceConnectionAnchor(";
  protected final String TEXT_389 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_390 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_391 = " getSourceConnectionAnchor(";
  protected final String TEXT_392 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_393 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_394 = "  getTargetConnectionAnchor(";
d418 1
a418 1
  protected final String TEXT_397 = "  getTargetConnectionAnchor(";
d420 42
a461 42
  protected final String TEXT_399 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_400 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_401 = NL + "\t\tinstallNotationModelRefresher();";
  protected final String TEXT_402 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_403 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_404 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_405 = NL + "\t\tuninstallNotationModelRefresher();";
  protected final String TEXT_406 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_407 = NL;
  protected final String TEXT_408 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installNotationModelRefresher() {" + NL + "\t\t";
  protected final String TEXT_409 = " refresher = getNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_410 = " domainModelEditDomain = ";
  protected final String TEXT_411 = ".getEditingDomain(";
  protected final String TEXT_412 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallNotationModelRefresher() {" + NL + "\t\tgetNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_413 = " notationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_414 = " getNotationModelRefresher() {" + NL + "\t\tif (notationModelRefresher == null) {" + NL + "\t\t\tnotationModelRefresher = new NotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn notationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class NotationModelRefresher extends ";
  protected final String TEXT_415 = " {";
  protected final String TEXT_416 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Children of this element are selected based on constraint declared in ";
  protected final String TEXT_417 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_418 = " getConstrainedChildrenFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_419 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_420 = NL + NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_421 = " createFilter() {";
  protected final String TEXT_422 = NL + "\t\t\t";
  protected final String TEXT_423 = " filter = ";
  protected final String TEXT_424 = ".createFeatureFilter(";
  protected final String TEXT_425 = ".eINSTANCE.get";
  protected final String TEXT_426 = "());";
  protected final String TEXT_427 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_428 = ".createFeatureFilter(";
  protected final String TEXT_429 = ".eINSTANCE.get";
  protected final String TEXT_430 = "()));";
  protected final String TEXT_431 = NL + "\t\t\tfilter = filter.and(";
  protected final String TEXT_432 = ".createNotifierFilter(";
  protected final String TEXT_433 = ".getElement()));";
  protected final String TEXT_434 = NL + "\t\t\t";
  protected final String TEXT_435 = " filter = ";
  protected final String TEXT_436 = ".createNotifierFilter(";
  protected final String TEXT_437 = ".getElement());";
  protected final String TEXT_438 = NL + "\t\t\tfilter = getConstrainedChildrenFilter().or(filter);";
  protected final String TEXT_439 = NL + "\t\t\t";
  protected final String TEXT_440 = " filter = getConstrainedChildrenFilter();";
d464 182
a645 182
  protected final String TEXT_443 = ".NOT_TOUCH;";
  protected final String TEXT_444 = NL + "\t\t\treturn filter;";
  protected final String TEXT_445 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_446 = " getCreateNotationalElementCommand(";
  protected final String TEXT_447 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_448 = " domainElement = descriptor.getElement();" + NL + "\t\t\tint nodeVisualID = descriptor.getVisualID();" + NL + "\t\t\tswitch (nodeVisualID) {";
  protected final String TEXT_449 = NL + "\t\t\tcase ";
  protected final String TEXT_450 = ".VISUAL_ID:" + NL + "\t\t\t\tif (domainElement instanceof ";
  protected final String TEXT_451 = ") {" + NL + "\t\t\t\t\treturn new Create";
  protected final String TEXT_452 = "NotationCommand(getHost(), domainElement";
  protected final String TEXT_453 = ", new Rectangle(0, 0, 0, 0)";
  protected final String TEXT_454 = ");" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;";
  protected final String TEXT_455 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_456 = " getSemanticChildNodes() {";
  protected final String TEXT_457 = NL;
  protected final String TEXT_458 = NL + "\treturn ";
  protected final String TEXT_459 = ".EMPTY_LIST;";
  protected final String TEXT_460 = NL + "\t";
  protected final String TEXT_461 = " result = new ";
  protected final String TEXT_462 = "();";
  protected final String TEXT_463 = NL + "\t";
  protected final String TEXT_464 = " viewObject = ";
  protected final String TEXT_465 = ";" + NL + "\t";
  protected final String TEXT_466 = " modelObject = viewObject.getElement();" + NL + "\t";
  protected final String TEXT_467 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_468 = NL + "\tfor(";
  protected final String TEXT_469 = " it = ";
  protected final String TEXT_470 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_471 = ") it.next();";
  protected final String TEXT_472 = NL + "\tnextValue = (";
  protected final String TEXT_473 = ")";
  protected final String TEXT_474 = ";";
  protected final String TEXT_475 = NL + "\tnodeVID = ";
  protected final String TEXT_476 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_477 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_478 = NL + "\tcase ";
  protected final String TEXT_479 = ".VISUAL_ID: {";
  protected final String TEXT_480 = NL + "\tif (";
  protected final String TEXT_481 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_482 = NL + "\t\tresult.add(new ";
  protected final String TEXT_483 = "(nextValue, nodeVID));";
  protected final String TEXT_484 = NL + "\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_485 = NL + "\t\t}";
  protected final String TEXT_486 = NL + "\t}";
  protected final String TEXT_487 = NL + "\t}";
  protected final String TEXT_488 = NL + "\treturn result;";
  protected final String TEXT_489 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational element should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_490 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_491 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_492 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_493 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_494 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshNotationModel() {" + NL + "\t\t";
  protected final String TEXT_495 = " childRefresher = getNotationModelRefresher();" + NL + "\t\tif (!childRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_496 = " command = childRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_497 = " domainModelEditDomain = ";
  protected final String TEXT_498 = ".getEditingDomain(";
  protected final String TEXT_499 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_500 = "(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_501 = NL;
  protected final String TEXT_502 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_503 = " domainModelEditDomain = ";
  protected final String TEXT_504 = ".getEditingDomain(";
  protected final String TEXT_505 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_506 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_507 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_508 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_509 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_510 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_511 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_512 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_513 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_514 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_515 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_516 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_517 = ".createEventTypeFilter(";
  protected final String TEXT_518 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_519 = ".createEventTypeFilter(";
  protected final String TEXT_520 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_521 = ".createEventTypeFilter(";
  protected final String TEXT_522 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_523 = ".createEventTypeFilter(";
  protected final String TEXT_524 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_525 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_526 = " createFilter() {";
  protected final String TEXT_527 = NL;
  protected final String TEXT_528 = NL + "\t\t\t";
  protected final String TEXT_529 = " filter = ";
  protected final String TEXT_530 = ".createFeatureFilter(";
  protected final String TEXT_531 = ".eINSTANCE.get";
  protected final String TEXT_532 = "());";
  protected final String TEXT_533 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_534 = ".createFeatureFilter(";
  protected final String TEXT_535 = ".eINSTANCE.get";
  protected final String TEXT_536 = "()));";
  protected final String TEXT_537 = NL;
  protected final String TEXT_538 = NL + "\t\t\t";
  protected final String TEXT_539 = " filter = ";
  protected final String TEXT_540 = ".createFeatureFilter(";
  protected final String TEXT_541 = ".eINSTANCE.get";
  protected final String TEXT_542 = "());";
  protected final String TEXT_543 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_544 = ".createFeatureFilter(";
  protected final String TEXT_545 = ".eINSTANCE.get";
  protected final String TEXT_546 = "()));";
  protected final String TEXT_547 = NL;
  protected final String TEXT_548 = NL + "\t\t\t";
  protected final String TEXT_549 = " filter = ";
  protected final String TEXT_550 = ".createFeatureFilter(";
  protected final String TEXT_551 = ".eINSTANCE.get";
  protected final String TEXT_552 = "());";
  protected final String TEXT_553 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_554 = ".createFeatureFilter(";
  protected final String TEXT_555 = ".eINSTANCE.get";
  protected final String TEXT_556 = "()));";
  protected final String TEXT_557 = NL;
  protected final String TEXT_558 = NL + "\t\t\t";
  protected final String TEXT_559 = " filter = ";
  protected final String TEXT_560 = ".createFeatureFilter(";
  protected final String TEXT_561 = ".eINSTANCE.get";
  protected final String TEXT_562 = "());";
  protected final String TEXT_563 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_564 = ".createFeatureFilter(";
  protected final String TEXT_565 = ".eINSTANCE.get";
  protected final String TEXT_566 = "()));";
  protected final String TEXT_567 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_568 = NL + "\t\t\t";
  protected final String TEXT_569 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_570 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_571 = NL + "\t\t\t";
  protected final String TEXT_572 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_573 = NL + "\t\t\t";
  protected final String TEXT_574 = " filter = ";
  protected final String TEXT_575 = ".NOT_TOUCH;";
  protected final String TEXT_576 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_577 = " getCreateNotationalElementCommand(";
  protected final String TEXT_578 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_579 = " linkDescriptor = (";
  protected final String TEXT_580 = ") descriptor;" + NL + "\t\t\t";
  protected final String TEXT_581 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_582 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_583 = " createdEdge = ";
  protected final String TEXT_584 = ".eINSTANCE.createEdge();" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_585 = NL + "\t\t\tcase ";
  protected final String TEXT_586 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_587 = ") {" + NL + "\t\t\t\t\tcreatedEdge.setElement(linkDescriptor.getElement());" + NL + "\t\t\t\t\t";
  protected final String TEXT_588 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_589 = NL + "\t\t\tcase ";
  protected final String TEXT_590 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t\t";
  protected final String TEXT_591 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_592 = NL + "\t\t\t}" + NL + "\t\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_593 = "(getHost().getDiagram(), createdEdge, sourceView, targetView);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_594 = " getSemanticChildLinks() {";
  protected final String TEXT_595 = NL;
  protected final String TEXT_596 = "\t";
  protected final String TEXT_597 = " result = new ";
  protected final String TEXT_598 = "();";
  protected final String TEXT_599 = NL + "\t";
  protected final String TEXT_600 = " modelObject = ";
  protected final String TEXT_601 = ".getElement();" + NL + "\t";
  protected final String TEXT_602 = " nextValue;";
  protected final String TEXT_603 = NL + "\tint linkVID;";
  protected final String TEXT_604 = NL + "\tfor(";
  protected final String TEXT_605 = " it = ";
  protected final String TEXT_606 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_607 = ") it.next();";
  protected final String TEXT_608 = NL + "\tnextValue = (";
  protected final String TEXT_609 = ")";
  protected final String TEXT_610 = ";";
  protected final String TEXT_611 = NL + "\tlinkVID = ";
  protected final String TEXT_612 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_613 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_614 = NL + "\tcase ";
  protected final String TEXT_615 = ".VISUAL_ID: {";
  protected final String TEXT_616 = NL + "\tif (";
  protected final String TEXT_617 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_618 = NL + "\t\t";
  protected final String TEXT_619 = " source = (";
  protected final String TEXT_620 = ")";
  protected final String TEXT_621 = ";";
  protected final String TEXT_622 = NL + "\t\t";
  protected final String TEXT_623 = " source = ";
  protected final String TEXT_624 = ".getElement();";
d647 1
a647 1
  protected final String TEXT_626 = " target = (";
d651 1
a651 1
  protected final String TEXT_630 = " target = ";
d653 121
a773 121
  protected final String TEXT_632 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_633 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_634 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_635 = NL + "\t}";
  protected final String TEXT_636 = NL + "\t}";
  protected final String TEXT_637 = NL + "\t}";
  protected final String TEXT_638 = NL + "\tfor(";
  protected final String TEXT_639 = " it = ";
  protected final String TEXT_640 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_641 = ") it.next();";
  protected final String TEXT_642 = NL + "\tnextValue = (";
  protected final String TEXT_643 = ")";
  protected final String TEXT_644 = ";";
  protected final String TEXT_645 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_646 = NL + "\t\tresult.add(new ";
  protected final String TEXT_647 = "(modelObject, nextValue, null, ";
  protected final String TEXT_648 = ".VISUAL_ID));";
  protected final String TEXT_649 = NL + "\t}";
  protected final String TEXT_650 = NL + "\t}";
  protected final String TEXT_651 = NL + "\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_652 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_653 = " result = new ";
  protected final String TEXT_654 = "();" + NL + "\t\t\t";
  protected final String TEXT_655 = " allLinks = ";
  protected final String TEXT_656 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_657 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_658 = " next = (";
  protected final String TEXT_659 = ") it.next();";
  protected final String TEXT_660 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_661 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_662 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_663 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_664 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_665 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_666 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_667 = ".VISUAL_ID:";
  protected final String TEXT_668 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_669 = NL + "\t\t\t\t} else {";
  protected final String TEXT_670 = NL + "\t\t\t\t}";
  protected final String TEXT_671 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_672 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_673 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_674 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_675 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_676 = ".VISUAL_ID:";
  protected final String TEXT_677 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_678 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_679 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_680 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_681 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_682 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_683 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_684 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_685 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_686 = " domainModelEditDomain = ";
  protected final String TEXT_687 = ".getEditingDomain(";
  protected final String TEXT_688 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_689 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_690 = NL;
  protected final String TEXT_691 = NL;
  protected final String TEXT_692 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_693 = " domainModelRefresher = new ";
  protected final String TEXT_694 = "(this);" + NL;
  protected final String TEXT_695 = NL;
  protected final String TEXT_696 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_697 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_698 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_699 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_700 = NL;
  protected final String TEXT_701 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_702 = NL + "\t\t";
  protected final String TEXT_703 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_704 = ") ";
  protected final String TEXT_705 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_706 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_707 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_708 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_709 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_710 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_711 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_712 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_713 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_714 = "\t" + NL + "\t}";
  protected final String TEXT_715 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_716 = " createdFont;";
  protected final String TEXT_717 = "\t" + NL;
  protected final String TEXT_718 = NL;
  protected final String TEXT_719 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_720 = " style = (";
  protected final String TEXT_721 = ")  ";
  protected final String TEXT_722 = ".getStyle(";
  protected final String TEXT_723 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_724 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_725 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_726 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_727 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_728 = " style = (";
  protected final String TEXT_729 = ")  ";
  protected final String TEXT_730 = ".getStyle(";
  protected final String TEXT_731 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_732 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_733 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_734 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_735 = " createdBackgroundColor;" + NL;
  protected final String TEXT_736 = NL;
  protected final String TEXT_737 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_738 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_739 = " feature, ";
  protected final String TEXT_740 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_741 = "();";
  protected final String TEXT_742 = NL;
  protected final String TEXT_743 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_744 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_745 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_746 = NL;
  protected final String TEXT_747 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_748 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_749 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_750 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_751 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_752 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
d775 69
a843 69
  protected final String TEXT_754 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_755 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_756 = NL;
  protected final String TEXT_757 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_758 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_759 = NL;
  protected final String TEXT_760 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_761 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_762 = NL;
  protected final String TEXT_763 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_764 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_765 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_766 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_767 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_768 = NL;
  protected final String TEXT_769 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_770 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_771 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_772 = NL;
  protected final String TEXT_773 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_774 = "static ";
  protected final String TEXT_775 = "class Create";
  protected final String TEXT_776 = "NotationCommand extends ";
  protected final String TEXT_777 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Create";
  protected final String TEXT_778 = "NotationCommand(";
  protected final String TEXT_779 = " parent, " + NL + "\t\t\t\t";
  protected final String TEXT_780 = " domainElement";
  protected final String TEXT_781 = ", ";
  protected final String TEXT_782 = " constraint";
  protected final String TEXT_783 = ") {" + NL + "\t\t\tsuper(parent);" + NL + "\t\t\tNode createdNode = ";
  protected final String TEXT_784 = ".eINSTANCE.createNode();" + NL + "\t\t\tsetCreatedView(createdNode);" + NL + "\t\t\tcreatedNode.setElement(domainElement);" + NL + "\t\t\t";
  protected final String TEXT_785 = ".decorateView(createdNode);";
  protected final String TEXT_786 = NL + "\t\t\t";
  protected final String TEXT_787 = " bounds = ";
  protected final String TEXT_788 = ".eINSTANCE.createBounds();" + NL + "\t\t\tcreatedNode.setLayoutConstraint(bounds);" + NL + "\t\t\tbounds.setX(constraint.x);" + NL + "\t\t\tbounds.setY(constraint.y);";
  protected final String TEXT_789 = NL + "\t\t\tbounds.setWidth(Math.max(constraint.width, ";
  protected final String TEXT_790 = "));" + NL + "\t\t\tbounds.setHeight(Math.max(constraint.height, ";
  protected final String TEXT_791 = "));";
  protected final String TEXT_792 = NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_793 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_794 = "static ";
  protected final String TEXT_795 = "class Create";
  protected final String TEXT_796 = "Command extends ";
  protected final String TEXT_797 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Create";
  protected final String TEXT_798 = "NotationCommand notationAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_799 = "Command(";
  protected final String TEXT_800 = " parent, ";
  protected final String TEXT_801 = " request";
  protected final String TEXT_802 = ", ";
  protected final String TEXT_803 = " constraint";
  protected final String TEXT_804 = ") {" + NL + "\t\t\t";
  protected final String TEXT_805 = " domainModelEditDomain = ";
  protected final String TEXT_806 = ".getEditingDomain(parent.getDiagram().getElement());";
  protected final String TEXT_807 = NL + "\t\t\t";
  protected final String TEXT_808 = " createdDomainElement = ";
  protected final String TEXT_809 = ".eINSTANCE.create(" + NL + "\t\t\t\t";
  protected final String TEXT_810 = ".eINSTANCE.get";
  protected final String TEXT_811 = "());";
  protected final String TEXT_812 = NL + "\t\t\t";
  protected final String TEXT_813 = " createdDomainElement = ";
  protected final String TEXT_814 = ".eINSTANCE.create";
  protected final String TEXT_815 = "();";
  protected final String TEXT_816 = NL + "\t\t\t";
  protected final String TEXT_817 = NL + "\t\t\t";
  protected final String TEXT_818 = ".";
  protected final String TEXT_819 = ".initializeElement(";
  protected final String TEXT_820 = "(";
  protected final String TEXT_821 = ") ";
  protected final String TEXT_822 = "createdDomainElement);";
d845 114
a958 114
  protected final String TEXT_824 = " compoundCommand = new ";
  protected final String TEXT_825 = "();" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_826 = ".create(domainModelEditDomain, ";
  protected final String TEXT_827 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_828 = ".eINSTANCE.get";
  protected final String TEXT_829 = "(), createdDomainElement));" + NL + "\t\t\tcompoundCommand.append(";
  protected final String TEXT_830 = ".create(domainModelEditDomain, ";
  protected final String TEXT_831 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_832 = ".eINSTANCE.get";
  protected final String TEXT_833 = "(), createdDomainElement));" + NL + "\t\t\tthis.domainModelAddCommand = compoundCommand;";
  protected final String TEXT_834 = NL + "\t\t\tthis.domainModelAddCommand = ";
  protected final String TEXT_835 = ".create(domainModelEditDomain, ";
  protected final String TEXT_836 = ", " + NL + "\t\t\t\t";
  protected final String TEXT_837 = ".eINSTANCE.get";
  protected final String TEXT_838 = "(), createdDomainElement);";
  protected final String TEXT_839 = NL + "\t\t\tthis.notationAddCommand = new Create";
  protected final String TEXT_840 = "NotationCommand(parent, ";
  protected final String TEXT_841 = "(";
  protected final String TEXT_842 = ") ";
  protected final String TEXT_843 = "createdDomainElement";
  protected final String TEXT_844 = ", constraint";
  protected final String TEXT_845 = ");" + NL + "\t\t\trequest.setCreatedObject(notationAddCommand.getCreatedView());" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn domainModelAddCommand != null" + NL + "\t\t\t\t\t&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tnotationAddCommand.execute();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tnotationAddCommand.undo();" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_846 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_847 = "SourceCommand extends ";
  protected final String TEXT_848 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_849 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_850 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_851 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_852 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_853 = "SourceCommand(";
  protected final String TEXT_854 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_855 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_856 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_857 = "SourceCommand(";
  protected final String TEXT_858 = " edge, ";
  protected final String TEXT_859 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_860 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_861 = " domainModelEditDomain = ";
  protected final String TEXT_862 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_863 = " command = new ";
  protected final String TEXT_864 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_865 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_866 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_867 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_868 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_869 = NL + "\t\t\treturn false;";
  protected final String TEXT_870 = NL + "\t\t\t";
  protected final String TEXT_871 = " container = (";
  protected final String TEXT_872 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_873 = ".eINSTANCE.get";
  protected final String TEXT_874 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_875 = NL;
  protected final String TEXT_876 = NL + "\t\tif (";
  protected final String TEXT_877 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_878 = NL + "\t\t}";
  protected final String TEXT_879 = NL + "\t\tif (";
  protected final String TEXT_880 = ".size() >= ";
  protected final String TEXT_881 = ".eINSTANCE.get";
  protected final String TEXT_882 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_883 = NL + "\t\t}";
  protected final String TEXT_884 = NL;
  protected final String TEXT_885 = NL + "\t\tif (";
  protected final String TEXT_886 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_887 = NL + "\t\t}";
  protected final String TEXT_888 = NL + "\t\tif (";
  protected final String TEXT_889 = ".size() >= ";
  protected final String TEXT_890 = ".eINSTANCE.get";
  protected final String TEXT_891 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_892 = NL + "\t\t}";
  protected final String TEXT_893 = NL;
  protected final String TEXT_894 = NL + "\t\t\tif(!";
  protected final String TEXT_895 = ".canCreateLink(";
  protected final String TEXT_896 = ", ";
  protected final String TEXT_897 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_898 = NL + "\t\t\treturn true;";
  protected final String TEXT_899 = NL;
  protected final String TEXT_900 = NL + "\t\tif (";
  protected final String TEXT_901 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_902 = NL + "\t\t}";
  protected final String TEXT_903 = NL + "\t\tif (";
  protected final String TEXT_904 = ".size() >= ";
  protected final String TEXT_905 = ".eINSTANCE.get";
  protected final String TEXT_906 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_907 = NL + "\t\t}";
  protected final String TEXT_908 = NL;
  protected final String TEXT_909 = NL + "\t\t\tif(!";
  protected final String TEXT_910 = ".canCreateLink(";
  protected final String TEXT_911 = ", ";
  protected final String TEXT_912 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_913 = NL + "\t\t\treturn true;";
  protected final String TEXT_914 = NL + "\t\t\treturn false;";
  protected final String TEXT_915 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_916 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_917 = " editingDomain = ";
  protected final String TEXT_918 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_919 = " result = new ";
  protected final String TEXT_920 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_921 = "(edge, newSource));";
  protected final String TEXT_922 = NL + "\t\t\t";
  protected final String TEXT_923 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_924 = ".eINSTANCE.get";
  protected final String TEXT_925 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_926 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_927 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_928 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_929 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_930 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), edge.getElement()));";
  protected final String TEXT_931 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_932 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), ";
  protected final String TEXT_933 = ".UNSET_VALUE));";
  protected final String TEXT_934 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_935 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_936 = ".eINSTANCE.get";
  protected final String TEXT_937 = "(), edge.getElement()));";
d960 20
a979 20
  protected final String TEXT_939 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_940 = ".eINSTANCE.get";
  protected final String TEXT_941 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_942 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_943 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_944 = ".eINSTANCE.get";
  protected final String TEXT_945 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_946 = ".UNSET_VALUE));";
  protected final String TEXT_947 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_948 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_949 = ".eINSTANCE.get";
  protected final String TEXT_950 = "(), edge.getElement()));";
  protected final String TEXT_951 = NL + "\t\t\t}";
  protected final String TEXT_952 = NL + "\t\t\tresult.append(";
  protected final String TEXT_953 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_954 = ".eINSTANCE.get";
  protected final String TEXT_955 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_956 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_957 = ".eINSTANCE.get";
  protected final String TEXT_958 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
d983 6
a988 6
  protected final String TEXT_962 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_963 = NL + "\t\t\tresult.append(";
  protected final String TEXT_964 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_965 = ".eINSTANCE.get";
  protected final String TEXT_966 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_967 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
d990 1
a990 1
  protected final String TEXT_969 = "(), edge.getTarget().getElement()));";
d994 31
a1024 31
  protected final String TEXT_973 = "(), ";
  protected final String TEXT_974 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_975 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_976 = ".eINSTANCE.get";
  protected final String TEXT_977 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_978 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_979 = NL;
  protected final String TEXT_980 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_981 = " getRelationshipContainer(";
  protected final String TEXT_982 = " element, ";
  protected final String TEXT_983 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_984 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_985 = NL;
  protected final String TEXT_986 = NL + "\t\t\tprivate ";
  protected final String TEXT_987 = " createDomainModelRemoveCommand(";
  protected final String TEXT_988 = " editingDomain) {";
  protected final String TEXT_989 = NL + "\t\t\t\t";
  protected final String TEXT_990 = " result = new ";
  protected final String TEXT_991 = "();";
  protected final String TEXT_992 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_993 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_994 = ".getElement().eContainer(), ";
  protected final String TEXT_995 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_996 = ".getElement()));";
  protected final String TEXT_997 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_998 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_999 = ".getElement().eContainer(), ";
  protected final String TEXT_1000 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1001 = ".UNSET_VALUE));";
  protected final String TEXT_1002 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1003 = ".INSTANCE;";
d1028 35
a1062 35
  protected final String TEXT_1007 = ".eINSTANCE.get";
  protected final String TEXT_1008 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1009 = ".getElement()));";
  protected final String TEXT_1010 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1011 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1012 = ".getElement().eContainer(), ";
  protected final String TEXT_1013 = ".eINSTANCE.get";
  protected final String TEXT_1014 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1015 = ".UNSET_VALUE));";
  protected final String TEXT_1016 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1017 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1018 = ".getElement(), ";
  protected final String TEXT_1019 = ".eINSTANCE.get";
  protected final String TEXT_1020 = "(), ";
  protected final String TEXT_1021 = ".getSource().getElement()));";
  protected final String TEXT_1022 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1023 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1024 = ".getElement(), ";
  protected final String TEXT_1025 = ".eINSTANCE.get";
  protected final String TEXT_1026 = "(), ";
  protected final String TEXT_1027 = ".UNSET_VALUE));";
  protected final String TEXT_1028 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1029 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1030 = ".getElement(), ";
  protected final String TEXT_1031 = ".eINSTANCE.get";
  protected final String TEXT_1032 = "(), ";
  protected final String TEXT_1033 = ".getTarget().getElement()));";
  protected final String TEXT_1034 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1035 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1036 = ".getElement(), ";
  protected final String TEXT_1037 = ".eINSTANCE.get";
  protected final String TEXT_1038 = "(), ";
  protected final String TEXT_1039 = ".UNSET_VALUE));";
  protected final String TEXT_1040 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1041 = NL + "\t\t\t\treturn ";
d1064 1
a1064 1
  protected final String TEXT_1043 = ".getSource().getElement(), ";
d1067 119
a1185 119
  protected final String TEXT_1046 = ".getTarget().getElement());";
  protected final String TEXT_1047 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1048 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1049 = ".getSource().getElement(), ";
  protected final String TEXT_1050 = ".eINSTANCE.get";
  protected final String TEXT_1051 = "(), ";
  protected final String TEXT_1052 = ".UNSET_VALUE);";
  protected final String TEXT_1053 = NL + "\t\t\t}";
  protected final String TEXT_1054 = NL + "\t}" + NL;
  protected final String TEXT_1055 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1056 = "StartCommand extends ";
  protected final String TEXT_1057 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1058 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1059 = "StartCommand(";
  protected final String TEXT_1060 = " requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_1061 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1062 = NL + "\t\t\treturn false;";
  protected final String TEXT_1063 = NL + "\t\t\t";
  protected final String TEXT_1064 = " container = (";
  protected final String TEXT_1065 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1066 = ".eINSTANCE.get";
  protected final String TEXT_1067 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1068 = NL;
  protected final String TEXT_1069 = NL + "\t\tif (";
  protected final String TEXT_1070 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1071 = NL + "\t\t}";
  protected final String TEXT_1072 = NL + "\t\tif (";
  protected final String TEXT_1073 = ".size() >= ";
  protected final String TEXT_1074 = ".eINSTANCE.get";
  protected final String TEXT_1075 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1076 = NL + "\t\t}";
  protected final String TEXT_1077 = NL;
  protected final String TEXT_1078 = NL + "\t\tif (";
  protected final String TEXT_1079 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1080 = NL + "\t\t}";
  protected final String TEXT_1081 = NL + "\t\tif (";
  protected final String TEXT_1082 = ".size() >= ";
  protected final String TEXT_1083 = ".eINSTANCE.get";
  protected final String TEXT_1084 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1085 = NL + "\t\t}";
  protected final String TEXT_1086 = NL;
  protected final String TEXT_1087 = NL + "\t\t\tif(!";
  protected final String TEXT_1088 = ".canCreateLink(";
  protected final String TEXT_1089 = ", ";
  protected final String TEXT_1090 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1091 = NL + "\t\t\treturn true;";
  protected final String TEXT_1092 = NL;
  protected final String TEXT_1093 = NL + "\t\tif (";
  protected final String TEXT_1094 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1095 = NL + "\t\t}";
  protected final String TEXT_1096 = NL + "\t\tif (";
  protected final String TEXT_1097 = ".size() >= ";
  protected final String TEXT_1098 = ".eINSTANCE.get";
  protected final String TEXT_1099 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1100 = NL + "\t\t}";
  protected final String TEXT_1101 = NL;
  protected final String TEXT_1102 = NL + "\t\t\tif(!";
  protected final String TEXT_1103 = ".canCreateLink(";
  protected final String TEXT_1104 = ", ";
  protected final String TEXT_1105 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1106 = NL + "\t\t\treturn true;";
  protected final String TEXT_1107 = NL + "\t\t\treturn false;";
  protected final String TEXT_1108 = NL + "\t\t}";
  protected final String TEXT_1109 = NL;
  protected final String TEXT_1110 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1111 = " getRelationshipContainer(";
  protected final String TEXT_1112 = " element, ";
  protected final String TEXT_1113 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1114 = NL + NL + "\t}";
  protected final String TEXT_1115 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_1116 = "TargetCommand extends ";
  protected final String TEXT_1117 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1118 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1119 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1120 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1121 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1122 = "TargetCommand(";
  protected final String TEXT_1123 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_1124 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_1125 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_1126 = "TargetCommand(";
  protected final String TEXT_1127 = " edge, ";
  protected final String TEXT_1128 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_1129 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_1130 = " domainModelEditDomain = ";
  protected final String TEXT_1131 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1132 = " command = new ";
  protected final String TEXT_1133 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_1134 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_1135 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_1136 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_1137 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_1138 = NL;
  protected final String TEXT_1139 = NL + "\t\t\tif(!";
  protected final String TEXT_1140 = ".canCreateLink(";
  protected final String TEXT_1141 = ", ";
  protected final String TEXT_1142 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1143 = NL + "\t\t\treturn true;";
  protected final String TEXT_1144 = NL;
  protected final String TEXT_1145 = NL + "\t\t\tif(!";
  protected final String TEXT_1146 = ".canCreateLink(";
  protected final String TEXT_1147 = ", ";
  protected final String TEXT_1148 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1149 = NL + "\t\t\treturn true;";
  protected final String TEXT_1150 = NL + "\t\t\treturn false;";
  protected final String TEXT_1151 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_1152 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_1153 = " editingDomain = ";
  protected final String TEXT_1154 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_1155 = " result = new ";
  protected final String TEXT_1156 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_1157 = "(edge, newTarget));";
  protected final String TEXT_1158 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1159 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1160 = ".eINSTANCE.get";
  protected final String TEXT_1161 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1162 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_1163 = ".eINSTANCE.get";
  protected final String TEXT_1164 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
d1189 6
a1194 6
  protected final String TEXT_1168 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_1169 = NL + "\t\t\tresult.append(";
  protected final String TEXT_1170 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_1171 = ".eINSTANCE.get";
  protected final String TEXT_1172 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_1173 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
d1196 1
a1196 1
  protected final String TEXT_1175 = "(), newTarget.getElement()));";
d1200 22
a1221 22
  protected final String TEXT_1179 = "(), newTarget.getElement()));";
  protected final String TEXT_1180 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_1181 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_1182 = NL;
  protected final String TEXT_1183 = NL + "\t\t\tprivate ";
  protected final String TEXT_1184 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1185 = " editingDomain) {";
  protected final String TEXT_1186 = NL + "\t\t\t\t";
  protected final String TEXT_1187 = " result = new ";
  protected final String TEXT_1188 = "();";
  protected final String TEXT_1189 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1190 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1191 = ".getElement().eContainer(), ";
  protected final String TEXT_1192 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1193 = ".getElement()));";
  protected final String TEXT_1194 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1195 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1196 = ".getElement().eContainer(), ";
  protected final String TEXT_1197 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1198 = ".UNSET_VALUE));";
  protected final String TEXT_1199 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1200 = ".INSTANCE;";
d1225 35
a1259 35
  protected final String TEXT_1204 = ".eINSTANCE.get";
  protected final String TEXT_1205 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1206 = ".getElement()));";
  protected final String TEXT_1207 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1208 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1209 = ".getElement().eContainer(), ";
  protected final String TEXT_1210 = ".eINSTANCE.get";
  protected final String TEXT_1211 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1212 = ".UNSET_VALUE));";
  protected final String TEXT_1213 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1214 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1215 = ".getElement(), ";
  protected final String TEXT_1216 = ".eINSTANCE.get";
  protected final String TEXT_1217 = "(), ";
  protected final String TEXT_1218 = ".getSource().getElement()));";
  protected final String TEXT_1219 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1220 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1221 = ".getElement(), ";
  protected final String TEXT_1222 = ".eINSTANCE.get";
  protected final String TEXT_1223 = "(), ";
  protected final String TEXT_1224 = ".UNSET_VALUE));";
  protected final String TEXT_1225 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1226 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1227 = ".getElement(), ";
  protected final String TEXT_1228 = ".eINSTANCE.get";
  protected final String TEXT_1229 = "(), ";
  protected final String TEXT_1230 = ".getTarget().getElement()));";
  protected final String TEXT_1231 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1232 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1233 = ".getElement(), ";
  protected final String TEXT_1234 = ".eINSTANCE.get";
  protected final String TEXT_1235 = "(), ";
  protected final String TEXT_1236 = ".UNSET_VALUE));";
  protected final String TEXT_1237 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1238 = NL + "\t\t\t\treturn ";
d1261 1
a1261 1
  protected final String TEXT_1240 = ".getSource().getElement(), ";
d1264 30
a1293 30
  protected final String TEXT_1243 = ".getTarget().getElement());";
  protected final String TEXT_1244 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1245 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1246 = ".getSource().getElement(), ";
  protected final String TEXT_1247 = ".eINSTANCE.get";
  protected final String TEXT_1248 = "(), ";
  protected final String TEXT_1249 = ".UNSET_VALUE);";
  protected final String TEXT_1250 = NL + "\t\t\t}";
  protected final String TEXT_1251 = NL + "\t}" + NL;
  protected final String TEXT_1252 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1253 = "Command extends ";
  protected final String TEXT_1254 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1255 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1256 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1257 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1258 = "Command(";
  protected final String TEXT_1259 = " requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1260 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1261 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1262 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1263 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1264 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1265 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1266 = NL + "\t\t\t";
  protected final String TEXT_1267 = " createdDomainElement = ";
  protected final String TEXT_1268 = ".eINSTANCE.create";
  protected final String TEXT_1269 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1270 = "(";
  protected final String TEXT_1271 = ") ";
  protected final String TEXT_1272 = "createdDomainElement);" + NL + "\t\t\t";
d1295 6
a1300 6
  protected final String TEXT_1274 = ".";
  protected final String TEXT_1275 = ".initializeElement(";
  protected final String TEXT_1276 = "(";
  protected final String TEXT_1277 = ") ";
  protected final String TEXT_1278 = "createdDomainElement);";
  protected final String TEXT_1279 = NL + "\t\t\tcreatedEdge.setElement(null);";
d1302 13
a1314 13
  protected final String TEXT_1281 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1282 = " domainModelEditDomain = ";
  protected final String TEXT_1283 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1284 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1285 = NL + "\t\t\t";
  protected final String TEXT_1286 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1287 = ".eINSTANCE.get";
  protected final String TEXT_1288 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1289 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1290 = ".eINSTANCE.get";
  protected final String TEXT_1291 = "(), createdDomainElement));";
  protected final String TEXT_1292 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1293 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
d1316 46
a1361 46
  protected final String TEXT_1295 = "(), createdDomainElement));";
  protected final String TEXT_1296 = NL;
  protected final String TEXT_1297 = NL + "\t\tif (";
  protected final String TEXT_1298 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1299 = NL + "\t\t}";
  protected final String TEXT_1300 = NL + "\t\tif (";
  protected final String TEXT_1301 = ".size() >= ";
  protected final String TEXT_1302 = ".eINSTANCE.get";
  protected final String TEXT_1303 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1304 = NL + "\t\t}";
  protected final String TEXT_1305 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1306 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1307 = ".eINSTANCE.get";
  protected final String TEXT_1308 = "(), source.getElement()));";
  protected final String TEXT_1309 = NL;
  protected final String TEXT_1310 = NL + "\t\tif (";
  protected final String TEXT_1311 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1312 = NL + "\t\t}";
  protected final String TEXT_1313 = NL + "\t\tif (";
  protected final String TEXT_1314 = ".size() >= ";
  protected final String TEXT_1315 = ".eINSTANCE.get";
  protected final String TEXT_1316 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1317 = NL + "\t\t}";
  protected final String TEXT_1318 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1319 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1320 = ".eINSTANCE.get";
  protected final String TEXT_1321 = "(), target.getElement()));";
  protected final String TEXT_1322 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1323 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1324 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1325 = ".eINSTANCE.get";
  protected final String TEXT_1326 = "(), target.getElement());";
  protected final String TEXT_1327 = NL + "\t\t}" + NL;
  protected final String TEXT_1328 = NL;
  protected final String TEXT_1329 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1330 = " getRelationshipContainer(";
  protected final String TEXT_1331 = " element, ";
  protected final String TEXT_1332 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1333 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1334 = NL;
  protected final String TEXT_1335 = NL + "\t\t\tif(!";
  protected final String TEXT_1336 = ".canCreateLink(";
  protected final String TEXT_1337 = ", ";
  protected final String TEXT_1338 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1339 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1340 = NL;
d1363 183
a1545 3
  protected final String TEXT_1342 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1343 = NL + "}";
  protected final String TEXT_1344 = NL;
d1558 2
d1655 1
a1655 1
			if (myPrimaryLabel == null){
d2412 17
d2431 1
a2431 1
    stringBuffer.append(TEXT_239);
d2438 1
a2438 1
    stringBuffer.append(TEXT_240);
d2442 1
a2442 1
    stringBuffer.append(TEXT_241);
d2444 1
a2444 1
    stringBuffer.append(TEXT_242);
d2446 1
a2446 1
    stringBuffer.append(TEXT_243);
d2448 1
a2448 1
    stringBuffer.append(TEXT_244);
d2450 1
a2450 1
    stringBuffer.append(TEXT_245);
d2452 1
a2452 1
    stringBuffer.append(TEXT_246);
d2456 1
a2456 1
    stringBuffer.append(TEXT_247);
d2460 1
a2460 1
    stringBuffer.append(TEXT_248);
d2462 1
a2462 1
    stringBuffer.append(TEXT_249);
d2466 1
a2466 1
    stringBuffer.append(TEXT_250);
d2468 1
a2468 1
    stringBuffer.append(TEXT_251);
d2470 1
a2470 1
    stringBuffer.append(TEXT_252);
d2472 1
a2472 1
    stringBuffer.append(TEXT_253);
d2476 1
a2476 1
    stringBuffer.append(TEXT_254);
d2478 1
a2478 1
    stringBuffer.append(TEXT_255);
d2488 1
a2488 1
    stringBuffer.append(TEXT_256);
d2490 1
a2490 1
    stringBuffer.append(TEXT_257);
d2492 1
a2492 1
    stringBuffer.append(TEXT_258);
d2494 1
a2494 1
    stringBuffer.append(TEXT_259);
d2496 1
a2496 1
    stringBuffer.append(TEXT_260);
d2498 1
a2498 1
    stringBuffer.append(TEXT_261);
d2502 1
a2502 1
    stringBuffer.append(TEXT_262);
d2504 1
a2504 1
    stringBuffer.append(TEXT_263);
d2506 1
a2506 1
    stringBuffer.append(TEXT_264);
d2508 1
a2508 1
    stringBuffer.append(TEXT_265);
d2510 1
a2510 1
    stringBuffer.append(TEXT_266);
d2512 1
a2512 1
    stringBuffer.append(TEXT_267);
d2514 1
a2514 1
    stringBuffer.append(TEXT_268);
d2516 1
a2516 1
    stringBuffer.append(TEXT_269);
d2518 1
a2518 1
    stringBuffer.append(TEXT_270);
d2520 1
a2520 1
    stringBuffer.append(TEXT_271);
d2522 1
a2522 1
    stringBuffer.append(TEXT_272);
d2524 1
a2524 1
    stringBuffer.append(TEXT_273);
d2526 1
a2526 1
    stringBuffer.append(TEXT_274);
d2528 1
a2528 1
    stringBuffer.append(TEXT_275);
d2530 1
a2530 1
    stringBuffer.append(TEXT_276);
d2532 1
a2532 1
    stringBuffer.append(TEXT_277);
d2534 1
a2534 1
    stringBuffer.append(TEXT_278);
d2536 1
a2536 1
    stringBuffer.append(TEXT_279);
d2538 1
a2538 1
    stringBuffer.append(TEXT_280);
d2540 1
a2540 1
    stringBuffer.append(TEXT_281);
d2542 1
a2542 1
    stringBuffer.append(TEXT_282);
d2544 1
a2544 1
    stringBuffer.append(TEXT_283);
d2546 1
a2546 1
    stringBuffer.append(TEXT_284);
d2548 1
a2548 1
    stringBuffer.append(TEXT_285);
d2553 1
a2553 1
    stringBuffer.append(TEXT_286);
d2555 1
a2555 1
    stringBuffer.append(TEXT_287);
d2557 1
a2557 1
    stringBuffer.append(TEXT_288);
d2559 1
a2559 1
    stringBuffer.append(TEXT_289);
d2561 1
a2561 1
    stringBuffer.append(TEXT_290);
d2563 1
a2563 1
    stringBuffer.append(TEXT_291);
d2565 1
a2565 1
    stringBuffer.append(TEXT_292);
d2567 1
a2567 1
    stringBuffer.append(TEXT_293);
d2569 1
a2569 1
    stringBuffer.append(TEXT_294);
d2571 1
a2571 1
    stringBuffer.append(TEXT_295);
d2573 1
a2573 1
    stringBuffer.append(TEXT_296);
d2577 1
a2577 1
    stringBuffer.append(TEXT_297);
d2579 1
a2579 1
    stringBuffer.append(TEXT_298);
d2587 1
a2587 1
    stringBuffer.append(TEXT_299);
d2589 1
a2589 1
    stringBuffer.append(TEXT_300);
d2591 1
a2591 1
    stringBuffer.append(TEXT_301);
d2593 1
a2593 1
    stringBuffer.append(TEXT_302);
d2595 1
a2595 1
    stringBuffer.append(TEXT_303);
d2604 1
a2604 1
    stringBuffer.append(TEXT_304);
d2606 1
a2606 1
    stringBuffer.append(TEXT_305);
d2608 1
a2608 1
    stringBuffer.append(TEXT_306);
d2610 1
a2610 1
    stringBuffer.append(TEXT_307);
d2612 1
a2612 1
    stringBuffer.append(TEXT_308);
d2616 1
a2616 1
    stringBuffer.append(TEXT_309);
d2624 1
a2624 1
    stringBuffer.append(TEXT_310);
d2626 1
a2626 1
    stringBuffer.append(TEXT_311);
d2628 1
a2628 1
    stringBuffer.append(TEXT_312);
d2630 1
a2630 1
    stringBuffer.append(TEXT_313);
d2632 1
a2632 1
    stringBuffer.append(TEXT_314);
d2636 1
a2636 1
    stringBuffer.append(TEXT_315);
d2640 1
a2640 1
    stringBuffer.append(TEXT_316);
d2642 1
a2642 1
    stringBuffer.append(TEXT_317);
d2644 1
a2644 9
		GenNodeLabel firstEditableLabel = null;
		for (Iterator it = myHelper.getAllInnerLabels(); it.hasNext(); ) {
			GenNodeLabel genLabel = (GenNodeLabel) it.next();
			if (!genLabel.isReadOnly()) {
				firstEditableLabel = genLabel;
				break;
			}
		}
		if (firstEditableLabel != null) {
d2646 1
a2646 1
    stringBuffer.append(TEXT_318);
d2648 1
a2648 1
    stringBuffer.append(TEXT_319);
d2650 1
a2650 1
    stringBuffer.append(TEXT_320);
d2652 1
a2652 1
    stringBuffer.append(TEXT_321);
d2654 3
a2656 3
    stringBuffer.append(TEXT_322);
    stringBuffer.append(importManager.getImportedName(firstEditableLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_323);
d2658 1
a2658 1
    stringBuffer.append(TEXT_324);
d2662 1
a2662 1
    stringBuffer.append(TEXT_325);
d2664 1
a2664 1
    stringBuffer.append(TEXT_326);
d2666 1
a2666 1
    stringBuffer.append(TEXT_327);
d2668 1
a2668 1
    stringBuffer.append(TEXT_328);
d2670 1
a2670 1
    stringBuffer.append(TEXT_329);
d2672 1
a2672 1
    stringBuffer.append(TEXT_330);
d2674 1
a2674 1
    stringBuffer.append(TEXT_331);
d2676 1
a2676 1
    stringBuffer.append(TEXT_332);
d2678 1
a2678 1
    stringBuffer.append(TEXT_333);
d2680 1
a2680 1
    stringBuffer.append(TEXT_334);
d2682 1
a2682 1
    stringBuffer.append(TEXT_335);
d2684 1
a2684 1
    stringBuffer.append(TEXT_336);
d2692 1
a2692 1
    stringBuffer.append(TEXT_337);
d2694 1
a2694 1
    stringBuffer.append(TEXT_338);
d2698 1
a2698 1
    stringBuffer.append(TEXT_339);
d2702 1
a2702 1
    stringBuffer.append(TEXT_340);
d2704 1
a2704 1
    stringBuffer.append(TEXT_341);
d2709 1
a2709 1
    stringBuffer.append(TEXT_342);
d2711 1
a2711 1
    stringBuffer.append(TEXT_343);
d2715 1
a2715 1
    stringBuffer.append(TEXT_344);
d2717 1
a2717 1
    stringBuffer.append(TEXT_345);
d2719 1
a2719 1
    stringBuffer.append(TEXT_346);
d2721 1
a2721 1
    stringBuffer.append(TEXT_347);
d2723 1
a2723 1
    stringBuffer.append(TEXT_348);
d2728 1
a2728 1
    stringBuffer.append(TEXT_349);
d2730 1
a2730 1
    stringBuffer.append(TEXT_350);
d2735 1
a2735 1
    stringBuffer.append(TEXT_351);
d2737 1
a2737 1
    stringBuffer.append(TEXT_352);
d2741 1
a2741 1
    stringBuffer.append(TEXT_353);
d2746 1
a2746 1
    stringBuffer.append(TEXT_354);
d2748 1
a2748 1
    stringBuffer.append(TEXT_355);
d2752 1
a2752 1
    stringBuffer.append(TEXT_356);
d2754 1
a2754 1
    stringBuffer.append(TEXT_357);
d2756 1
a2756 1
    stringBuffer.append(TEXT_358);
d2761 1
a2761 1
    stringBuffer.append(TEXT_359);
d2766 1
a2766 1
    stringBuffer.append(TEXT_360);
d2768 1
a2768 1
    stringBuffer.append(TEXT_361);
d2770 1
a2770 1
    stringBuffer.append(TEXT_362);
d2774 1
a2774 1
    stringBuffer.append(TEXT_363);
d2776 1
a2776 1
    stringBuffer.append(TEXT_364);
d2780 1
a2780 1
    stringBuffer.append(TEXT_365);
d2782 1
a2782 1
    stringBuffer.append(TEXT_366);
d2784 1
a2784 1
    stringBuffer.append(TEXT_367);
d2789 1
a2789 1
    stringBuffer.append(TEXT_368);
d2794 1
a2794 1
    stringBuffer.append(TEXT_369);
d2796 1
a2796 1
    stringBuffer.append(TEXT_370);
d2798 1
a2798 1
    stringBuffer.append(TEXT_371);
d2802 1
a2802 1
    stringBuffer.append(TEXT_372);
d2809 1
a2809 1
    stringBuffer.append(TEXT_373);
d2811 1
a2811 1
    stringBuffer.append(TEXT_374);
d2813 1
a2813 1
    stringBuffer.append(TEXT_375);
d2815 1
a2815 1
    stringBuffer.append(TEXT_376);
d2817 1
a2817 1
    stringBuffer.append(TEXT_377);
d2821 1
a2821 1
    stringBuffer.append(TEXT_378);
d2823 1
a2823 1
    stringBuffer.append(TEXT_379);
d2825 1
a2825 1
    stringBuffer.append(TEXT_380);
d2827 1
a2827 1
    stringBuffer.append(TEXT_381);
d2829 1
a2829 1
    stringBuffer.append(TEXT_382);
d2831 1
a2831 1
    stringBuffer.append(TEXT_383);
d2833 1
a2833 1
    stringBuffer.append(TEXT_384);
d2835 1
a2835 1
    stringBuffer.append(TEXT_385);
d2837 1
a2837 1
    stringBuffer.append(TEXT_386);
a2838 12
    stringBuffer.append(TEXT_387);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
    stringBuffer.append(TEXT_388);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
    stringBuffer.append(TEXT_389);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
    stringBuffer.append(TEXT_390);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
    stringBuffer.append(TEXT_391);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_392);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d2852 14
d2867 1
a2867 1
    stringBuffer.append(TEXT_400);
d2871 1
a2871 1
    stringBuffer.append(TEXT_401);
d2878 1
a2878 1
    stringBuffer.append(TEXT_402);
d2882 1
a2882 1
    stringBuffer.append(TEXT_403);
d2886 1
a2886 1
    stringBuffer.append(TEXT_404);
d2893 1
a2893 1
    stringBuffer.append(TEXT_405);
d2897 1
a2897 1
    stringBuffer.append(TEXT_406);
d2907 2
a2908 2
    stringBuffer.append(TEXT_407);
    stringBuffer.append(TEXT_408);
d2910 1
a2910 1
    stringBuffer.append(TEXT_409);
d2912 1
a2912 1
    stringBuffer.append(TEXT_410);
d2914 1
a2914 1
    stringBuffer.append(TEXT_411);
d2916 1
a2916 1
    stringBuffer.append(TEXT_412);
d2918 1
a2918 1
    stringBuffer.append(TEXT_413);
d2920 1
a2920 1
    stringBuffer.append(TEXT_414);
d2922 1
a2922 1
    stringBuffer.append(TEXT_415);
d2937 1
a2937 1
    stringBuffer.append(TEXT_416);
d2939 1
a2939 1
    stringBuffer.append(TEXT_417);
d2941 1
a2941 1
    stringBuffer.append(TEXT_418);
d2943 1
a2943 1
    stringBuffer.append(TEXT_419);
d2947 1
a2947 1
    stringBuffer.append(TEXT_420);
d2949 1
a2949 1
    stringBuffer.append(TEXT_421);
d2968 1
a2968 1
    stringBuffer.append(TEXT_422);
d2970 1
a2970 1
    stringBuffer.append(TEXT_423);
d2972 1
a2972 1
    stringBuffer.append(TEXT_424);
d2974 1
a2974 1
    stringBuffer.append(TEXT_425);
d2976 1
a2976 1
    stringBuffer.append(TEXT_426);
d2980 1
a2980 1
    stringBuffer.append(TEXT_427);
d2982 1
a2982 1
    stringBuffer.append(TEXT_428);
d2984 1
a2984 1
    stringBuffer.append(TEXT_429);
d2986 1
a2986 1
    stringBuffer.append(TEXT_430);
d2994 1
a2994 1
    stringBuffer.append(TEXT_431);
d2996 1
a2996 1
    stringBuffer.append(TEXT_432);
d2998 1
a2998 1
    stringBuffer.append(TEXT_433);
d3003 1
a3003 1
    stringBuffer.append(TEXT_434);
d3005 1
a3005 1
    stringBuffer.append(TEXT_435);
d3007 1
a3007 1
    stringBuffer.append(TEXT_436);
d3009 1
a3009 1
    stringBuffer.append(TEXT_437);
d3018 1
a3018 1
    stringBuffer.append(TEXT_438);
d3022 1
a3022 1
    stringBuffer.append(TEXT_439);
d3024 1
a3024 1
    stringBuffer.append(TEXT_440);
d3030 1
a3030 1
    stringBuffer.append(TEXT_441);
d3032 1
a3032 1
    stringBuffer.append(TEXT_442);
d3034 1
a3034 1
    stringBuffer.append(TEXT_443);
d3038 1
a3038 1
    stringBuffer.append(TEXT_444);
d3042 1
a3042 1
    stringBuffer.append(TEXT_445);
d3044 1
a3044 1
    stringBuffer.append(TEXT_446);
d3046 1
a3046 1
    stringBuffer.append(TEXT_447);
d3048 1
a3048 1
    stringBuffer.append(TEXT_448);
d3058 1
a3058 1
    stringBuffer.append(TEXT_449);
d3060 1
a3060 1
    stringBuffer.append(TEXT_450);
d3062 1
a3062 1
    stringBuffer.append(TEXT_451);
d3065 1
a3065 1
    stringBuffer.append(TEXT_452);
d3067 1
a3067 1
    stringBuffer.append(TEXT_453);
d3069 1
a3069 1
    stringBuffer.append(TEXT_454);
d3073 1
a3073 1
    stringBuffer.append(TEXT_455);
d3075 2
a3076 2
    stringBuffer.append(TEXT_456);
    stringBuffer.append(TEXT_457);
d3080 1
a3080 1
    stringBuffer.append(TEXT_458);
d3082 1
a3082 1
    stringBuffer.append(TEXT_459);
d3086 1
a3086 1
    stringBuffer.append(TEXT_460);
d3088 1
a3088 1
    stringBuffer.append(TEXT_461);
d3090 1
a3090 1
    stringBuffer.append(TEXT_462);
d3108 1
a3108 1
    stringBuffer.append(TEXT_463);
d3110 1
a3110 1
    stringBuffer.append(TEXT_464);
d3112 1
a3112 1
    stringBuffer.append(TEXT_465);
d3114 1
a3114 1
    stringBuffer.append(TEXT_466);
d3116 1
a3116 1
    stringBuffer.append(TEXT_467);
d3125 1
a3125 1
    stringBuffer.append(TEXT_468);
d3127 1
a3127 1
    stringBuffer.append(TEXT_469);
d3129 1
a3129 1
    stringBuffer.append(TEXT_470);
d3131 1
a3131 1
    stringBuffer.append(TEXT_471);
d3135 1
a3135 1
    stringBuffer.append(TEXT_472);
d3137 1
a3137 1
    stringBuffer.append(TEXT_473);
d3139 1
a3139 1
    stringBuffer.append(TEXT_474);
d3143 1
a3143 1
    stringBuffer.append(TEXT_475);
d3145 1
a3145 1
    stringBuffer.append(TEXT_476);
d3150 1
a3150 1
    stringBuffer.append(TEXT_477);
d3157 1
a3157 1
    stringBuffer.append(TEXT_478);
d3159 1
a3159 1
    stringBuffer.append(TEXT_479);
d3163 1
a3163 1
    stringBuffer.append(TEXT_480);
d3165 1
a3165 1
    stringBuffer.append(TEXT_481);
d3169 1
a3169 1
    stringBuffer.append(TEXT_482);
d3171 1
a3171 1
    stringBuffer.append(TEXT_483);
d3175 1
a3175 1
    stringBuffer.append(TEXT_484);
d3179 1
a3179 1
    stringBuffer.append(TEXT_485);
d3185 1
a3185 1
    stringBuffer.append(TEXT_486);
d3190 1
a3190 1
    stringBuffer.append(TEXT_487);
d3195 1
a3195 1
    stringBuffer.append(TEXT_488);
d3199 1
a3199 1
    stringBuffer.append(TEXT_489);
d3201 1
a3201 1
    stringBuffer.append(TEXT_490);
d3203 1
a3203 1
    stringBuffer.append(TEXT_491);
d3205 1
a3205 1
    stringBuffer.append(TEXT_492);
d3207 1
a3207 1
    stringBuffer.append(TEXT_493);
d3209 1
a3209 1
    stringBuffer.append(TEXT_494);
d3211 1
a3211 1
    stringBuffer.append(TEXT_495);
d3213 1
a3213 1
    stringBuffer.append(TEXT_496);
d3215 1
a3215 1
    stringBuffer.append(TEXT_497);
d3217 1
a3217 1
    stringBuffer.append(TEXT_498);
d3219 1
a3219 1
    stringBuffer.append(TEXT_499);
d3221 1
a3221 1
    stringBuffer.append(TEXT_500);
d3225 1
a3225 1
    stringBuffer.append(TEXT_501);
d3229 1
a3229 1
    stringBuffer.append(TEXT_502);
d3231 1
a3231 1
    stringBuffer.append(TEXT_503);
d3233 1
a3233 1
    stringBuffer.append(TEXT_504);
d3235 1
a3235 1
    stringBuffer.append(TEXT_505);
d3237 1
a3237 1
    stringBuffer.append(TEXT_506);
d3239 1
a3239 1
    stringBuffer.append(TEXT_507);
d3241 1
a3241 1
    stringBuffer.append(TEXT_508);
d3243 1
a3243 1
    stringBuffer.append(TEXT_509);
d3245 1
a3245 1
    stringBuffer.append(TEXT_510);
d3258 1
a3258 1
    stringBuffer.append(TEXT_511);
d3260 1
a3260 1
    stringBuffer.append(TEXT_512);
d3262 1
a3262 1
    stringBuffer.append(TEXT_513);
d3264 1
a3264 1
    stringBuffer.append(TEXT_514);
d3269 1
a3269 1
    stringBuffer.append(TEXT_515);
d3271 1
a3271 1
    stringBuffer.append(TEXT_516);
d3273 1
a3273 1
    stringBuffer.append(TEXT_517);
d3275 1
a3275 1
    stringBuffer.append(TEXT_518);
d3277 1
a3277 1
    stringBuffer.append(TEXT_519);
d3279 1
a3279 1
    stringBuffer.append(TEXT_520);
d3281 1
a3281 1
    stringBuffer.append(TEXT_521);
d3283 1
a3283 1
    stringBuffer.append(TEXT_522);
d3285 1
a3285 1
    stringBuffer.append(TEXT_523);
d3287 1
a3287 1
    stringBuffer.append(TEXT_524);
d3291 1
a3291 1
    stringBuffer.append(TEXT_525);
d3293 1
a3293 1
    stringBuffer.append(TEXT_526);
d3306 1
a3306 1
    stringBuffer.append(TEXT_527);
d3320 1
a3320 1
    stringBuffer.append(TEXT_528);
d3322 1
a3322 1
    stringBuffer.append(TEXT_529);
d3324 1
a3324 1
    stringBuffer.append(TEXT_530);
d3326 1
a3326 1
    stringBuffer.append(TEXT_531);
d3328 1
a3328 1
    stringBuffer.append(TEXT_532);
d3332 1
a3332 1
    stringBuffer.append(TEXT_533);
d3334 1
a3334 1
    stringBuffer.append(TEXT_534);
d3336 1
a3336 1
    stringBuffer.append(TEXT_535);
d3338 1
a3338 1
    stringBuffer.append(TEXT_536);
d3345 1
a3345 1
    stringBuffer.append(TEXT_537);
d3359 1
a3359 1
    stringBuffer.append(TEXT_538);
d3361 1
a3361 1
    stringBuffer.append(TEXT_539);
d3363 1
a3363 1
    stringBuffer.append(TEXT_540);
d3365 1
a3365 1
    stringBuffer.append(TEXT_541);
d3367 1
a3367 1
    stringBuffer.append(TEXT_542);
d3371 1
a3371 1
    stringBuffer.append(TEXT_543);
d3373 1
a3373 1
    stringBuffer.append(TEXT_544);
d3375 1
a3375 1
    stringBuffer.append(TEXT_545);
d3377 1
a3377 1
    stringBuffer.append(TEXT_546);
d3384 1
a3384 1
    stringBuffer.append(TEXT_547);
d3398 1
a3398 1
    stringBuffer.append(TEXT_548);
d3400 1
a3400 1
    stringBuffer.append(TEXT_549);
d3402 1
a3402 1
    stringBuffer.append(TEXT_550);
d3404 1
a3404 1
    stringBuffer.append(TEXT_551);
d3406 1
a3406 1
    stringBuffer.append(TEXT_552);
d3410 1
a3410 1
    stringBuffer.append(TEXT_553);
d3412 1
a3412 1
    stringBuffer.append(TEXT_554);
d3414 1
a3414 1
    stringBuffer.append(TEXT_555);
d3416 1
a3416 1
    stringBuffer.append(TEXT_556);
d3426 1
a3426 1
    stringBuffer.append(TEXT_557);
d3440 1
a3440 1
    stringBuffer.append(TEXT_558);
d3442 1
a3442 1
    stringBuffer.append(TEXT_559);
d3444 1
a3444 1
    stringBuffer.append(TEXT_560);
d3446 1
a3446 1
    stringBuffer.append(TEXT_561);
d3448 1
a3448 1
    stringBuffer.append(TEXT_562);
d3452 1
a3452 1
    stringBuffer.append(TEXT_563);
d3454 1
a3454 1
    stringBuffer.append(TEXT_564);
d3456 1
a3456 1
    stringBuffer.append(TEXT_565);
d3458 1
a3458 1
    stringBuffer.append(TEXT_566);
d3467 1
a3467 1
    stringBuffer.append(TEXT_567);
d3472 1
a3472 1
    stringBuffer.append(TEXT_568);
d3474 1
a3474 1
    stringBuffer.append(TEXT_569);
d3481 1
a3481 1
    stringBuffer.append(TEXT_570);
d3486 1
a3486 1
    stringBuffer.append(TEXT_571);
d3488 1
a3488 1
    stringBuffer.append(TEXT_572);
d3494 1
a3494 1
    stringBuffer.append(TEXT_573);
d3496 1
a3496 1
    stringBuffer.append(TEXT_574);
d3498 1
a3498 1
    stringBuffer.append(TEXT_575);
d3503 1
a3503 1
    stringBuffer.append(TEXT_576);
d3505 1
a3505 1
    stringBuffer.append(TEXT_577);
d3507 1
a3507 1
    stringBuffer.append(TEXT_578);
d3509 1
a3509 1
    stringBuffer.append(TEXT_579);
d3511 1
a3511 1
    stringBuffer.append(TEXT_580);
d3513 1
a3513 1
    stringBuffer.append(TEXT_581);
d3515 1
a3515 1
    stringBuffer.append(TEXT_582);
d3517 1
a3517 1
    stringBuffer.append(TEXT_583);
d3519 1
a3519 1
    stringBuffer.append(TEXT_584);
d3528 1
a3528 1
    stringBuffer.append(TEXT_585);
d3530 1
a3530 1
    stringBuffer.append(TEXT_586);
d3532 1
a3532 1
    stringBuffer.append(TEXT_587);
d3534 1
a3534 1
    stringBuffer.append(TEXT_588);
d3540 1
a3540 1
    stringBuffer.append(TEXT_589);
d3542 1
a3542 1
    stringBuffer.append(TEXT_590);
d3544 1
a3544 1
    stringBuffer.append(TEXT_591);
d3548 1
a3548 1
    stringBuffer.append(TEXT_592);
d3550 1
a3550 1
    stringBuffer.append(TEXT_593);
d3552 3
a3554 3
    stringBuffer.append(TEXT_594);
    stringBuffer.append(TEXT_595);
    stringBuffer.append(TEXT_596);
d3556 1
a3556 1
    stringBuffer.append(TEXT_597);
d3558 1
a3558 1
    stringBuffer.append(TEXT_598);
d3581 1
a3581 1
    stringBuffer.append(TEXT_599);
d3583 1
a3583 1
    stringBuffer.append(TEXT_600);
d3585 1
a3585 1
    stringBuffer.append(TEXT_601);
d3587 1
a3587 1
    stringBuffer.append(TEXT_602);
d3592 1
a3592 1
    stringBuffer.append(TEXT_603);
d3601 1
a3601 1
    stringBuffer.append(TEXT_604);
d3603 1
a3603 1
    stringBuffer.append(TEXT_605);
d3605 1
a3605 1
    stringBuffer.append(TEXT_606);
d3607 1
a3607 1
    stringBuffer.append(TEXT_607);
d3611 1
a3611 1
    stringBuffer.append(TEXT_608);
d3613 1
a3613 1
    stringBuffer.append(TEXT_609);
d3615 1
a3615 1
    stringBuffer.append(TEXT_610);
d3619 1
a3619 1
    stringBuffer.append(TEXT_611);
d3621 1
a3621 1
    stringBuffer.append(TEXT_612);
d3626 1
a3626 1
    stringBuffer.append(TEXT_613);
d3634 1
a3634 1
    stringBuffer.append(TEXT_614);
d3636 1
a3636 1
    stringBuffer.append(TEXT_615);
d3640 1
a3640 1
    stringBuffer.append(TEXT_616);
d3642 1
a3642 1
    stringBuffer.append(TEXT_617);
d3647 1
a3647 1
    stringBuffer.append(TEXT_618);
d3649 1
a3649 1
    stringBuffer.append(TEXT_619);
d3651 1
a3651 1
    stringBuffer.append(TEXT_620);
d3653 1
a3653 1
    stringBuffer.append(TEXT_621);
d3657 1
a3657 1
    stringBuffer.append(TEXT_622);
d3659 1
a3659 1
    stringBuffer.append(TEXT_623);
d3661 1
a3661 1
    stringBuffer.append(TEXT_624);
d3666 1
a3666 1
    stringBuffer.append(TEXT_625);
d3668 1
a3668 1
    stringBuffer.append(TEXT_626);
d3670 1
a3670 1
    stringBuffer.append(TEXT_627);
d3672 1
a3672 1
    stringBuffer.append(TEXT_628);
d3676 1
a3676 1
    stringBuffer.append(TEXT_629);
d3678 1
a3678 1
    stringBuffer.append(TEXT_630);
d3680 1
a3680 1
    stringBuffer.append(TEXT_631);
d3684 1
a3684 1
    stringBuffer.append(TEXT_632);
d3686 1
a3686 1
    stringBuffer.append(TEXT_633);
d3690 1
a3690 1
    stringBuffer.append(TEXT_634);
d3694 1
a3694 1
    stringBuffer.append(TEXT_635);
d3702 1
a3702 1
    stringBuffer.append(TEXT_636);
d3707 1
a3707 1
    stringBuffer.append(TEXT_637);
d3717 1
a3717 1
    stringBuffer.append(TEXT_638);
d3719 1
a3719 1
    stringBuffer.append(TEXT_639);
d3721 1
a3721 1
    stringBuffer.append(TEXT_640);
d3723 1
a3723 1
    stringBuffer.append(TEXT_641);
d3727 1
a3727 1
    stringBuffer.append(TEXT_642);
d3729 1
a3729 1
    stringBuffer.append(TEXT_643);
d3731 1
a3731 1
    stringBuffer.append(TEXT_644);
d3735 1
a3735 1
    stringBuffer.append(TEXT_645);
d3740 1
a3740 1
    stringBuffer.append(TEXT_646);
d3742 1
a3742 1
    stringBuffer.append(TEXT_647);
d3744 1
a3744 1
    stringBuffer.append(TEXT_648);
d3748 1
a3748 1
    stringBuffer.append(TEXT_649);
d3752 1
a3752 1
    stringBuffer.append(TEXT_650);
d3757 1
a3757 1
    stringBuffer.append(TEXT_651);
d3759 1
a3759 1
    stringBuffer.append(TEXT_652);
d3761 1
a3761 1
    stringBuffer.append(TEXT_653);
d3763 1
a3763 1
    stringBuffer.append(TEXT_654);
d3765 1
a3765 1
    stringBuffer.append(TEXT_655);
d3767 1
a3767 1
    stringBuffer.append(TEXT_656);
d3769 1
a3769 1
    stringBuffer.append(TEXT_657);
d3771 1
a3771 1
    stringBuffer.append(TEXT_658);
d3773 1
a3773 1
    stringBuffer.append(TEXT_659);
d3777 1
a3777 1
    stringBuffer.append(TEXT_660);
d3779 1
a3779 1
    stringBuffer.append(TEXT_661);
d3781 1
a3781 1
    stringBuffer.append(TEXT_662);
d3786 1
a3786 1
    stringBuffer.append(TEXT_663);
d3788 1
a3788 1
    stringBuffer.append(TEXT_664);
d3790 1
a3790 1
    stringBuffer.append(TEXT_665);
d3795 1
a3795 1
    stringBuffer.append(TEXT_666);
d3797 1
a3797 1
    stringBuffer.append(TEXT_667);
d3801 1
a3801 1
    stringBuffer.append(TEXT_668);
d3805 1
a3805 1
    stringBuffer.append(TEXT_669);
d3809 1
a3809 1
    stringBuffer.append(TEXT_670);
d3816 1
a3816 1
    stringBuffer.append(TEXT_671);
d3820 1
a3820 1
    stringBuffer.append(TEXT_672);
d3822 1
a3822 1
    stringBuffer.append(TEXT_673);
d3824 1
a3824 1
    stringBuffer.append(TEXT_674);
d3829 1
a3829 1
    stringBuffer.append(TEXT_675);
d3831 1
a3831 1
    stringBuffer.append(TEXT_676);
d3835 1
a3835 1
    stringBuffer.append(TEXT_677);
d3839 1
a3839 1
    stringBuffer.append(TEXT_678);
d3841 1
a3841 1
    stringBuffer.append(TEXT_679);
d3843 1
a3843 1
    stringBuffer.append(TEXT_680);
d3845 1
a3845 1
    stringBuffer.append(TEXT_681);
d3847 1
a3847 1
    stringBuffer.append(TEXT_682);
d3849 1
a3849 1
    stringBuffer.append(TEXT_683);
d3851 1
a3851 1
    stringBuffer.append(TEXT_684);
d3853 1
a3853 1
    stringBuffer.append(TEXT_685);
d3855 1
a3855 1
    stringBuffer.append(TEXT_686);
d3857 1
a3857 1
    stringBuffer.append(TEXT_687);
d3859 1
a3859 1
    stringBuffer.append(TEXT_688);
d3861 1
a3861 1
    stringBuffer.append(TEXT_689);
d3868 3
a3870 3
    stringBuffer.append(TEXT_690);
    stringBuffer.append(TEXT_691);
    stringBuffer.append(TEXT_692);
d3872 1
a3872 1
    stringBuffer.append(TEXT_693);
d3874 3
a3876 3
    stringBuffer.append(TEXT_694);
    stringBuffer.append(TEXT_695);
    stringBuffer.append(TEXT_696);
d3878 1
a3878 1
    stringBuffer.append(TEXT_697);
d3880 1
a3880 1
    stringBuffer.append(TEXT_698);
d3882 1
a3882 1
    stringBuffer.append(TEXT_699);
d3886 1
a3886 1
    stringBuffer.append(TEXT_700);
d3894 1
a3894 1
    stringBuffer.append(TEXT_701);
d3898 1
a3898 1
    stringBuffer.append(TEXT_702);
d3900 1
a3900 1
    stringBuffer.append(TEXT_703);
d3902 1
a3902 1
    stringBuffer.append(TEXT_704);
d3904 1
a3904 1
    stringBuffer.append(TEXT_705);
d3906 1
a3906 1
    stringBuffer.append(TEXT_706);
d3908 1
a3908 1
    stringBuffer.append(TEXT_707);
d3910 1
a3910 1
    stringBuffer.append(TEXT_708);
d3912 1
a3912 1
    stringBuffer.append(TEXT_709);
d3914 1
a3914 1
    stringBuffer.append(TEXT_710);
d3916 1
a3916 1
    stringBuffer.append(TEXT_711);
d3918 1
a3918 1
    stringBuffer.append(TEXT_712);
d3920 1
a3920 1
    stringBuffer.append(TEXT_713);
d3924 1
a3924 1
    stringBuffer.append(TEXT_714);
d3928 1
a3928 1
    stringBuffer.append(TEXT_715);
d3930 1
a3930 1
    stringBuffer.append(TEXT_716);
a3933 12
    stringBuffer.append(TEXT_717);
    stringBuffer.append(TEXT_718);
    stringBuffer.append(TEXT_719);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_720);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_721);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_722);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_723);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a3934 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a3935 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d3937 1
a3937 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d3939 1
a3939 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d3941 1
a3941 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d3943 1
a3943 1
    stringBuffer.append(primaryView);
d3945 1
a3945 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3953 1
a3953 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d3955 1
d3957 1
d3959 1
a3959 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d3961 1
a3961 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d3963 1
a3963 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d3965 1
a3965 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d3967 1
a3969 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3971 1
a3971 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3973 1
d3975 1
d3977 1
a3977 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a3978 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a3979 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3989 1
d3991 1
d3995 1
d3998 1
a3999 1
    stringBuffer.append(TEXT_761);
a4001 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a4004 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4006 1
a4007 1
    stringBuffer.append(TEXT_767);
a4009 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d4013 12
d4032 2
a4033 2
    stringBuffer.append(TEXT_772);
    stringBuffer.append(TEXT_773);
d4035 1
a4035 1
    stringBuffer.append(TEXT_774);
d4037 1
a4037 1
    stringBuffer.append(TEXT_775);
d4040 1
a4040 1
    stringBuffer.append(TEXT_776);
d4042 1
a4042 1
    stringBuffer.append(TEXT_777);
d4045 1
a4045 1
    stringBuffer.append(TEXT_778);
d4047 1
a4047 1
    stringBuffer.append(TEXT_779);
d4049 1
a4049 1
    stringBuffer.append(TEXT_780);
d4051 1
a4051 1
    stringBuffer.append(TEXT_781);
d4053 1
a4053 1
    stringBuffer.append(TEXT_782);
d4055 1
a4055 1
    stringBuffer.append(TEXT_783);
d4057 1
a4057 1
    stringBuffer.append(TEXT_784);
d4059 1
a4059 1
    stringBuffer.append(TEXT_785);
d4063 1
a4063 1
    stringBuffer.append(TEXT_786);
d4065 1
a4065 1
    stringBuffer.append(TEXT_787);
d4067 1
a4067 1
    stringBuffer.append(TEXT_788);
d4077 1
a4077 1
    stringBuffer.append(TEXT_789);
d4079 1
a4079 1
    stringBuffer.append(TEXT_790);
d4081 1
a4081 1
    stringBuffer.append(TEXT_791);
d4085 1
a4085 1
    stringBuffer.append(TEXT_792);
d4089 1
a4089 1
    stringBuffer.append(TEXT_793);
d4091 1
a4091 1
    stringBuffer.append(TEXT_794);
d4093 1
a4093 1
    stringBuffer.append(TEXT_795);
d4096 1
a4096 1
    stringBuffer.append(TEXT_796);
d4098 1
a4098 1
    stringBuffer.append(TEXT_797);
d4101 1
a4101 1
    stringBuffer.append(TEXT_798);
d4104 1
a4104 1
    stringBuffer.append(TEXT_799);
d4106 1
a4106 1
    stringBuffer.append(TEXT_800);
d4108 1
a4108 1
    stringBuffer.append(TEXT_801);
d4110 1
a4110 1
    stringBuffer.append(TEXT_802);
d4112 1
a4112 1
    stringBuffer.append(TEXT_803);
d4114 1
a4114 1
    stringBuffer.append(TEXT_804);
d4116 1
a4116 1
    stringBuffer.append(TEXT_805);
d4118 1
a4118 1
    stringBuffer.append(TEXT_806);
d4123 1
a4123 1
    stringBuffer.append(TEXT_807);
d4125 1
a4125 1
    stringBuffer.append(TEXT_808);
d4127 1
a4127 1
    stringBuffer.append(TEXT_809);
d4129 1
a4129 1
    stringBuffer.append(TEXT_810);
d4131 1
a4131 1
    stringBuffer.append(TEXT_811);
d4135 1
a4135 1
    stringBuffer.append(TEXT_812);
d4137 1
a4137 1
    stringBuffer.append(TEXT_813);
d4139 1
a4139 1
    stringBuffer.append(TEXT_814);
d4141 1
a4141 1
    stringBuffer.append(TEXT_815);
d4145 1
a4145 1
    stringBuffer.append(TEXT_816);
d4147 1
a4147 1
    stringBuffer.append(TEXT_817);
d4149 1
a4149 1
    stringBuffer.append(TEXT_818);
d4151 1
a4151 1
    stringBuffer.append(TEXT_819);
d4153 1
a4153 1
    stringBuffer.append(TEXT_820);
d4155 1
a4155 1
    stringBuffer.append(TEXT_821);
d4157 1
a4157 1
    stringBuffer.append(TEXT_822);
d4164 1
a4164 1
    stringBuffer.append(TEXT_823);
d4166 1
a4166 1
    stringBuffer.append(TEXT_824);
d4168 1
a4168 1
    stringBuffer.append(TEXT_825);
d4170 1
a4170 1
    stringBuffer.append(TEXT_826);
d4172 1
a4172 1
    stringBuffer.append(TEXT_827);
d4174 1
a4174 1
    stringBuffer.append(TEXT_828);
d4176 1
a4176 1
    stringBuffer.append(TEXT_829);
d4178 1
a4178 1
    stringBuffer.append(TEXT_830);
d4180 1
a4180 1
    stringBuffer.append(TEXT_831);
d4182 1
a4182 1
    stringBuffer.append(TEXT_832);
d4184 1
a4184 1
    stringBuffer.append(TEXT_833);
d4188 1
a4188 1
    stringBuffer.append(TEXT_834);
d4190 1
a4190 1
    stringBuffer.append(TEXT_835);
d4192 1
a4192 1
    stringBuffer.append(TEXT_836);
d4194 1
a4194 1
    stringBuffer.append(TEXT_837);
d4196 1
a4196 1
    stringBuffer.append(TEXT_838);
d4200 1
a4200 1
    stringBuffer.append(TEXT_839);
d4203 1
a4203 1
    stringBuffer.append(TEXT_840);
d4205 1
a4205 1
    stringBuffer.append(TEXT_841);
d4207 1
a4207 1
    stringBuffer.append(TEXT_842);
d4209 1
a4209 1
    stringBuffer.append(TEXT_843);
d4211 1
a4211 1
    stringBuffer.append(TEXT_844);
d4213 1
a4213 1
    stringBuffer.append(TEXT_845);
d4245 1
a4245 1
    stringBuffer.append(TEXT_846);
d4248 1
a4248 1
    stringBuffer.append(TEXT_847);
d4250 1
a4250 1
    stringBuffer.append(TEXT_848);
d4252 1
a4252 1
    stringBuffer.append(TEXT_849);
d4254 1
a4254 1
    stringBuffer.append(TEXT_850);
d4256 1
a4256 1
    stringBuffer.append(TEXT_851);
d4258 1
a4258 1
    stringBuffer.append(TEXT_852);
d4261 1
a4261 1
    stringBuffer.append(TEXT_853);
d4263 1
a4263 1
    stringBuffer.append(TEXT_854);
d4265 1
a4265 1
    stringBuffer.append(TEXT_855);
d4267 1
a4267 1
    stringBuffer.append(TEXT_856);
d4270 1
a4270 1
    stringBuffer.append(TEXT_857);
d4272 1
a4272 1
    stringBuffer.append(TEXT_858);
d4274 1
a4274 1
    stringBuffer.append(TEXT_859);
d4278 1
a4278 1
    stringBuffer.append(TEXT_860);
d4280 1
a4280 1
    stringBuffer.append(TEXT_861);
d4282 1
a4282 1
    stringBuffer.append(TEXT_862);
d4284 1
a4284 1
    stringBuffer.append(TEXT_863);
d4286 1
a4286 1
    stringBuffer.append(TEXT_864);
d4288 1
a4288 1
    stringBuffer.append(TEXT_865);
d4290 1
a4290 1
    stringBuffer.append(TEXT_866);
d4294 1
a4294 1
    stringBuffer.append(TEXT_867);
d4298 1
a4298 1
    stringBuffer.append(TEXT_868);
d4305 1
a4305 1
    stringBuffer.append(TEXT_869);
d4309 1
a4309 1
    stringBuffer.append(TEXT_870);
d4311 1
a4311 1
    stringBuffer.append(TEXT_871);
d4313 1
a4313 1
    stringBuffer.append(TEXT_872);
d4315 1
a4315 1
    stringBuffer.append(TEXT_873);
d4317 1
a4317 1
    stringBuffer.append(TEXT_874);
d4325 1
a4325 1
    stringBuffer.append(TEXT_875);
d4331 1
a4331 1
    stringBuffer.append(TEXT_876);
d4333 1
a4333 1
    stringBuffer.append(TEXT_877);
d4335 1
a4335 1
    stringBuffer.append(TEXT_878);
d4339 1
a4339 1
    stringBuffer.append(TEXT_879);
d4341 1
a4341 1
    stringBuffer.append(TEXT_880);
d4343 1
a4343 1
    stringBuffer.append(TEXT_881);
d4345 1
a4345 1
    stringBuffer.append(TEXT_882);
d4347 1
a4347 1
    stringBuffer.append(TEXT_883);
d4362 1
a4362 1
    stringBuffer.append(TEXT_884);
d4368 1
a4368 1
    stringBuffer.append(TEXT_885);
d4370 1
a4370 1
    stringBuffer.append(TEXT_886);
d4372 1
a4372 1
    stringBuffer.append(TEXT_887);
d4376 1
a4376 1
    stringBuffer.append(TEXT_888);
d4378 1
a4378 1
    stringBuffer.append(TEXT_889);
d4380 1
a4380 1
    stringBuffer.append(TEXT_890);
d4382 1
a4382 1
    stringBuffer.append(TEXT_891);
d4384 1
a4384 1
    stringBuffer.append(TEXT_892);
d4398 1
a4398 1
    stringBuffer.append(TEXT_893);
d4402 1
a4402 1
    stringBuffer.append(TEXT_894);
d4404 1
a4404 1
    stringBuffer.append(TEXT_895);
d4406 1
a4406 1
    stringBuffer.append(TEXT_896);
d4408 1
a4408 1
    stringBuffer.append(TEXT_897);
d4415 1
a4415 1
    stringBuffer.append(TEXT_898);
d4425 1
a4425 1
    stringBuffer.append(TEXT_899);
d4431 1
a4431 1
    stringBuffer.append(TEXT_900);
d4433 1
a4433 1
    stringBuffer.append(TEXT_901);
d4435 1
a4435 1
    stringBuffer.append(TEXT_902);
d4439 1
a4439 1
    stringBuffer.append(TEXT_903);
d4441 1
a4441 1
    stringBuffer.append(TEXT_904);
d4443 1
a4443 1
    stringBuffer.append(TEXT_905);
d4445 1
a4445 1
    stringBuffer.append(TEXT_906);
d4447 1
a4447 1
    stringBuffer.append(TEXT_907);
d4458 1
a4458 1
    stringBuffer.append(TEXT_908);
d4462 1
a4462 1
    stringBuffer.append(TEXT_909);
d4464 1
a4464 1
    stringBuffer.append(TEXT_910);
d4466 1
a4466 1
    stringBuffer.append(TEXT_911);
d4468 1
a4468 1
    stringBuffer.append(TEXT_912);
d4475 1
a4475 1
    stringBuffer.append(TEXT_913);
d4479 1
a4479 1
    stringBuffer.append(TEXT_914);
d4483 1
a4483 1
    stringBuffer.append(TEXT_915);
d4485 1
a4485 1
    stringBuffer.append(TEXT_916);
d4487 1
a4487 1
    stringBuffer.append(TEXT_917);
d4489 1
a4489 1
    stringBuffer.append(TEXT_918);
d4491 1
a4491 1
    stringBuffer.append(TEXT_919);
d4493 1
a4493 1
    stringBuffer.append(TEXT_920);
d4495 1
a4495 1
    stringBuffer.append(TEXT_921);
d4514 1
a4514 1
    stringBuffer.append(TEXT_922);
d4516 1
a4516 1
    stringBuffer.append(TEXT_923);
d4518 1
a4518 1
    stringBuffer.append(TEXT_924);
d4520 1
a4520 1
    stringBuffer.append(TEXT_925);
d4522 1
a4522 1
    stringBuffer.append(TEXT_926);
d4524 1
a4524 1
    stringBuffer.append(TEXT_927);
d4526 1
a4526 1
    stringBuffer.append(TEXT_928);
d4532 1
a4532 1
    stringBuffer.append(TEXT_929);
d4534 1
a4534 1
    stringBuffer.append(TEXT_930);
d4538 1
a4538 1
    stringBuffer.append(TEXT_931);
d4540 1
a4540 1
    stringBuffer.append(TEXT_932);
d4542 1
a4542 1
    stringBuffer.append(TEXT_933);
d4546 1
a4546 1
    stringBuffer.append(TEXT_934);
d4548 1
a4548 1
    stringBuffer.append(TEXT_935);
d4550 1
a4550 1
    stringBuffer.append(TEXT_936);
d4552 1
a4552 1
    stringBuffer.append(TEXT_937);
d4558 1
a4558 1
    stringBuffer.append(TEXT_938);
d4560 1
a4560 1
    stringBuffer.append(TEXT_939);
d4562 1
a4562 1
    stringBuffer.append(TEXT_940);
d4564 1
a4564 1
    stringBuffer.append(TEXT_941);
d4568 1
a4568 1
    stringBuffer.append(TEXT_942);
d4570 1
a4570 1
    stringBuffer.append(TEXT_943);
d4572 1
a4572 1
    stringBuffer.append(TEXT_944);
d4574 1
a4574 1
    stringBuffer.append(TEXT_945);
d4576 1
a4576 1
    stringBuffer.append(TEXT_946);
d4580 1
a4580 1
    stringBuffer.append(TEXT_947);
d4582 1
a4582 1
    stringBuffer.append(TEXT_948);
d4584 1
a4584 1
    stringBuffer.append(TEXT_949);
d4586 1
a4586 1
    stringBuffer.append(TEXT_950);
d4590 1
a4590 1
    stringBuffer.append(TEXT_951);
d4595 1
a4595 1
    stringBuffer.append(TEXT_952);
d4597 1
a4597 1
    stringBuffer.append(TEXT_953);
d4599 1
a4599 1
    stringBuffer.append(TEXT_954);
d4601 1
a4601 1
    stringBuffer.append(TEXT_955);
d4603 1
a4603 1
    stringBuffer.append(TEXT_956);
d4605 1
a4605 1
    stringBuffer.append(TEXT_957);
d4607 1
a4607 1
    stringBuffer.append(TEXT_958);
d4611 1
a4611 1
    stringBuffer.append(TEXT_959);
d4613 1
a4613 1
    stringBuffer.append(TEXT_960);
d4615 1
a4615 1
    stringBuffer.append(TEXT_961);
d4617 1
a4617 1
    stringBuffer.append(TEXT_962);
d4625 1
a4625 1
    stringBuffer.append(TEXT_963);
d4627 1
a4627 1
    stringBuffer.append(TEXT_964);
d4629 1
a4629 1
    stringBuffer.append(TEXT_965);
d4631 1
a4631 1
    stringBuffer.append(TEXT_966);
d4633 1
a4633 1
    stringBuffer.append(TEXT_967);
d4635 1
a4635 1
    stringBuffer.append(TEXT_968);
d4637 1
a4637 1
    stringBuffer.append(TEXT_969);
d4641 1
a4641 1
    stringBuffer.append(TEXT_970);
d4643 1
a4643 1
    stringBuffer.append(TEXT_971);
d4645 1
a4645 1
    stringBuffer.append(TEXT_972);
d4647 1
a4647 1
    stringBuffer.append(TEXT_973);
d4649 1
a4649 1
    stringBuffer.append(TEXT_974);
d4651 1
a4651 1
    stringBuffer.append(TEXT_975);
d4653 1
a4653 1
    stringBuffer.append(TEXT_976);
d4655 1
a4655 1
    stringBuffer.append(TEXT_977);
d4660 2
a4661 2
    stringBuffer.append(TEXT_978);
    stringBuffer.append(TEXT_979);
d4665 1
a4665 1
    stringBuffer.append(TEXT_980);
d4667 1
a4667 1
    stringBuffer.append(TEXT_981);
d4669 1
a4669 1
    stringBuffer.append(TEXT_982);
d4671 1
a4671 1
    stringBuffer.append(TEXT_983);
d4679 2
a4680 2
    stringBuffer.append(TEXT_984);
    stringBuffer.append(TEXT_985);
d4684 1
a4684 1
    stringBuffer.append(TEXT_986);
d4686 1
a4686 1
    stringBuffer.append(TEXT_987);
d4688 1
a4688 1
    stringBuffer.append(TEXT_988);
d4715 1
a4715 1
    stringBuffer.append(TEXT_989);
d4717 1
a4717 1
    stringBuffer.append(TEXT_990);
d4719 1
a4719 1
    stringBuffer.append(TEXT_991);
d4723 1
a4723 1
    stringBuffer.append(TEXT_992);
d4725 1
a4725 1
    stringBuffer.append(TEXT_993);
d4727 1
a4727 1
    stringBuffer.append(TEXT_994);
d4729 1
a4729 1
    stringBuffer.append(TEXT_995);
d4731 1
a4731 1
    stringBuffer.append(TEXT_996);
d4735 1
a4735 1
    stringBuffer.append(TEXT_997);
d4737 1
a4737 1
    stringBuffer.append(TEXT_998);
d4739 1
a4739 1
    stringBuffer.append(TEXT_999);
d4741 1
a4741 1
    stringBuffer.append(TEXT_1000);
d4743 1
a4743 1
    stringBuffer.append(TEXT_1001);
d4748 1
a4748 1
    stringBuffer.append(TEXT_1002);
d4750 1
a4750 1
    stringBuffer.append(TEXT_1003);
d4756 1
a4756 1
    stringBuffer.append(TEXT_1004);
d4758 1
a4758 1
    stringBuffer.append(TEXT_1005);
d4760 1
a4760 1
    stringBuffer.append(TEXT_1006);
d4762 1
a4762 1
    stringBuffer.append(TEXT_1007);
d4764 1
a4764 1
    stringBuffer.append(TEXT_1008);
d4766 1
a4766 1
    stringBuffer.append(TEXT_1009);
d4770 1
a4770 1
    stringBuffer.append(TEXT_1010);
d4772 1
a4772 1
    stringBuffer.append(TEXT_1011);
d4774 1
a4774 1
    stringBuffer.append(TEXT_1012);
d4776 1
a4776 1
    stringBuffer.append(TEXT_1013);
d4778 1
a4778 1
    stringBuffer.append(TEXT_1014);
d4780 1
a4780 1
    stringBuffer.append(TEXT_1015);
d4787 1
a4787 1
    stringBuffer.append(TEXT_1016);
d4789 1
a4789 1
    stringBuffer.append(TEXT_1017);
d4791 1
a4791 1
    stringBuffer.append(TEXT_1018);
d4793 1
a4793 1
    stringBuffer.append(TEXT_1019);
d4795 1
a4795 1
    stringBuffer.append(TEXT_1020);
d4797 1
a4797 1
    stringBuffer.append(TEXT_1021);
d4801 1
a4801 1
    stringBuffer.append(TEXT_1022);
d4803 1
a4803 1
    stringBuffer.append(TEXT_1023);
d4805 1
a4805 1
    stringBuffer.append(TEXT_1024);
d4807 1
a4807 1
    stringBuffer.append(TEXT_1025);
d4809 1
a4809 1
    stringBuffer.append(TEXT_1026);
d4811 1
a4811 1
    stringBuffer.append(TEXT_1027);
d4818 1
a4818 1
    stringBuffer.append(TEXT_1028);
d4820 1
a4820 1
    stringBuffer.append(TEXT_1029);
d4822 1
a4822 1
    stringBuffer.append(TEXT_1030);
d4824 1
a4824 1
    stringBuffer.append(TEXT_1031);
d4826 1
a4826 1
    stringBuffer.append(TEXT_1032);
d4828 1
a4828 1
    stringBuffer.append(TEXT_1033);
d4832 1
a4832 1
    stringBuffer.append(TEXT_1034);
d4834 1
a4834 1
    stringBuffer.append(TEXT_1035);
d4836 1
a4836 1
    stringBuffer.append(TEXT_1036);
d4838 1
a4838 1
    stringBuffer.append(TEXT_1037);
d4840 1
a4840 1
    stringBuffer.append(TEXT_1038);
d4842 1
a4842 1
    stringBuffer.append(TEXT_1039);
d4847 1
a4847 1
    stringBuffer.append(TEXT_1040);
d4853 1
a4853 1
    stringBuffer.append(TEXT_1041);
d4855 1
a4855 1
    stringBuffer.append(TEXT_1042);
d4857 1
a4857 1
    stringBuffer.append(TEXT_1043);
d4859 1
a4859 1
    stringBuffer.append(TEXT_1044);
d4861 1
a4861 1
    stringBuffer.append(TEXT_1045);
d4863 1
a4863 1
    stringBuffer.append(TEXT_1046);
d4867 1
a4867 1
    stringBuffer.append(TEXT_1047);
d4869 1
a4869 1
    stringBuffer.append(TEXT_1048);
d4871 1
a4871 1
    stringBuffer.append(TEXT_1049);
d4873 1
a4873 1
    stringBuffer.append(TEXT_1050);
d4875 1
a4875 1
    stringBuffer.append(TEXT_1051);
d4877 1
a4877 1
    stringBuffer.append(TEXT_1052);
d4884 1
a4884 1
    stringBuffer.append(TEXT_1053);
d4888 1
a4888 1
    stringBuffer.append(TEXT_1054);
d4892 1
a4892 1
    stringBuffer.append(TEXT_1055);
d4895 1
a4895 1
    stringBuffer.append(TEXT_1056);
d4897 1
a4897 1
    stringBuffer.append(TEXT_1057);
d4899 1
a4899 1
    stringBuffer.append(TEXT_1058);
d4902 1
a4902 1
    stringBuffer.append(TEXT_1059);
d4904 1
a4904 1
    stringBuffer.append(TEXT_1060);
d4906 1
a4906 1
    stringBuffer.append(TEXT_1061);
d4913 1
a4913 1
    stringBuffer.append(TEXT_1062);
d4917 1
a4917 1
    stringBuffer.append(TEXT_1063);
d4919 1
a4919 1
    stringBuffer.append(TEXT_1064);
d4921 1
a4921 1
    stringBuffer.append(TEXT_1065);
d4923 1
a4923 1
    stringBuffer.append(TEXT_1066);
d4925 1
a4925 1
    stringBuffer.append(TEXT_1067);
d4933 1
a4933 1
    stringBuffer.append(TEXT_1068);
d4939 1
a4939 1
    stringBuffer.append(TEXT_1069);
d4941 1
a4941 1
    stringBuffer.append(TEXT_1070);
d4943 1
a4943 1
    stringBuffer.append(TEXT_1071);
d4947 1
a4947 1
    stringBuffer.append(TEXT_1072);
d4949 1
a4949 1
    stringBuffer.append(TEXT_1073);
d4951 1
a4951 1
    stringBuffer.append(TEXT_1074);
d4953 1
a4953 1
    stringBuffer.append(TEXT_1075);
d4955 1
a4955 1
    stringBuffer.append(TEXT_1076);
d4970 1
a4970 1
    stringBuffer.append(TEXT_1077);
d4976 1
a4976 1
    stringBuffer.append(TEXT_1078);
d4978 1
a4978 1
    stringBuffer.append(TEXT_1079);
d4980 1
a4980 1
    stringBuffer.append(TEXT_1080);
d4984 1
a4984 1
    stringBuffer.append(TEXT_1081);
d4986 1
a4986 1
    stringBuffer.append(TEXT_1082);
d4988 1
a4988 1
    stringBuffer.append(TEXT_1083);
d4990 1
a4990 1
    stringBuffer.append(TEXT_1084);
d4992 1
a4992 1
    stringBuffer.append(TEXT_1085);
d5004 1
a5004 1
    stringBuffer.append(TEXT_1086);
d5008 1
a5008 1
    stringBuffer.append(TEXT_1087);
d5010 1
a5010 1
    stringBuffer.append(TEXT_1088);
d5012 1
a5012 1
    stringBuffer.append(TEXT_1089);
d5014 1
a5014 1
    stringBuffer.append(TEXT_1090);
d5021 1
a5021 1
    stringBuffer.append(TEXT_1091);
d5032 1
a5032 1
    stringBuffer.append(TEXT_1092);
d5038 1
a5038 1
    stringBuffer.append(TEXT_1093);
d5040 1
a5040 1
    stringBuffer.append(TEXT_1094);
d5042 1
a5042 1
    stringBuffer.append(TEXT_1095);
d5046 1
a5046 1
    stringBuffer.append(TEXT_1096);
d5048 1
a5048 1
    stringBuffer.append(TEXT_1097);
d5050 1
a5050 1
    stringBuffer.append(TEXT_1098);
d5052 1
a5052 1
    stringBuffer.append(TEXT_1099);
d5054 1
a5054 1
    stringBuffer.append(TEXT_1100);
d5065 1
a5065 1
    stringBuffer.append(TEXT_1101);
d5069 1
a5069 1
    stringBuffer.append(TEXT_1102);
d5071 1
a5071 1
    stringBuffer.append(TEXT_1103);
d5073 1
a5073 1
    stringBuffer.append(TEXT_1104);
d5075 1
a5075 1
    stringBuffer.append(TEXT_1105);
d5082 1
a5082 1
    stringBuffer.append(TEXT_1106);
d5086 1
a5086 1
    stringBuffer.append(TEXT_1107);
d5090 2
a5091 2
    stringBuffer.append(TEXT_1108);
    stringBuffer.append(TEXT_1109);
d5095 1
a5095 1
    stringBuffer.append(TEXT_1110);
d5097 1
a5097 1
    stringBuffer.append(TEXT_1111);
d5099 1
a5099 1
    stringBuffer.append(TEXT_1112);
d5101 1
a5101 1
    stringBuffer.append(TEXT_1113);
d5105 1
a5105 1
    stringBuffer.append(TEXT_1114);
d5135 1
a5135 1
    stringBuffer.append(TEXT_1115);
d5138 1
a5138 1
    stringBuffer.append(TEXT_1116);
d5140 1
a5140 1
    stringBuffer.append(TEXT_1117);
d5142 1
a5142 1
    stringBuffer.append(TEXT_1118);
d5144 1
a5144 1
    stringBuffer.append(TEXT_1119);
d5146 1
a5146 1
    stringBuffer.append(TEXT_1120);
d5148 1
a5148 1
    stringBuffer.append(TEXT_1121);
d5151 1
a5151 1
    stringBuffer.append(TEXT_1122);
d5153 1
a5153 1
    stringBuffer.append(TEXT_1123);
d5155 1
a5155 1
    stringBuffer.append(TEXT_1124);
d5157 1
a5157 1
    stringBuffer.append(TEXT_1125);
d5160 1
a5160 1
    stringBuffer.append(TEXT_1126);
d5162 1
a5162 1
    stringBuffer.append(TEXT_1127);
d5164 1
a5164 1
    stringBuffer.append(TEXT_1128);
d5168 1
a5168 1
    stringBuffer.append(TEXT_1129);
d5170 1
a5170 1
    stringBuffer.append(TEXT_1130);
d5172 1
a5172 1
    stringBuffer.append(TEXT_1131);
d5174 1
a5174 1
    stringBuffer.append(TEXT_1132);
d5176 1
a5176 1
    stringBuffer.append(TEXT_1133);
d5178 1
a5178 1
    stringBuffer.append(TEXT_1134);
d5180 1
a5180 1
    stringBuffer.append(TEXT_1135);
d5184 1
a5184 1
    stringBuffer.append(TEXT_1136);
d5188 1
a5188 1
    stringBuffer.append(TEXT_1137);
d5195 1
a5195 1
    stringBuffer.append(TEXT_1138);
d5199 1
a5199 1
    stringBuffer.append(TEXT_1139);
d5201 1
a5201 1
    stringBuffer.append(TEXT_1140);
d5203 1
a5203 1
    stringBuffer.append(TEXT_1141);
d5205 1
a5205 1
    stringBuffer.append(TEXT_1142);
d5212 1
a5212 1
    stringBuffer.append(TEXT_1143);
d5219 1
a5219 1
    stringBuffer.append(TEXT_1144);
d5223 1
a5223 1
    stringBuffer.append(TEXT_1145);
d5225 1
a5225 1
    stringBuffer.append(TEXT_1146);
d5227 1
a5227 1
    stringBuffer.append(TEXT_1147);
d5229 1
a5229 1
    stringBuffer.append(TEXT_1148);
d5236 1
a5236 1
    stringBuffer.append(TEXT_1149);
d5240 1
a5240 1
    stringBuffer.append(TEXT_1150);
d5244 1
a5244 1
    stringBuffer.append(TEXT_1151);
d5246 1
a5246 1
    stringBuffer.append(TEXT_1152);
d5248 1
a5248 1
    stringBuffer.append(TEXT_1153);
d5250 1
a5250 1
    stringBuffer.append(TEXT_1154);
d5252 1
a5252 1
    stringBuffer.append(TEXT_1155);
d5254 1
a5254 1
    stringBuffer.append(TEXT_1156);
d5256 1
a5256 1
    stringBuffer.append(TEXT_1157);
d5263 1
a5263 1
    stringBuffer.append(TEXT_1158);
d5265 1
a5265 1
    stringBuffer.append(TEXT_1159);
d5267 1
a5267 1
    stringBuffer.append(TEXT_1160);
d5269 1
a5269 1
    stringBuffer.append(TEXT_1161);
d5271 1
a5271 1
    stringBuffer.append(TEXT_1162);
d5273 1
a5273 1
    stringBuffer.append(TEXT_1163);
d5275 1
a5275 1
    stringBuffer.append(TEXT_1164);
d5279 1
a5279 1
    stringBuffer.append(TEXT_1165);
d5281 1
a5281 1
    stringBuffer.append(TEXT_1166);
d5283 1
a5283 1
    stringBuffer.append(TEXT_1167);
d5285 1
a5285 1
    stringBuffer.append(TEXT_1168);
d5292 1
a5292 1
    stringBuffer.append(TEXT_1169);
d5294 1
a5294 1
    stringBuffer.append(TEXT_1170);
d5296 1
a5296 1
    stringBuffer.append(TEXT_1171);
d5298 1
a5298 1
    stringBuffer.append(TEXT_1172);
d5300 1
a5300 1
    stringBuffer.append(TEXT_1173);
d5302 1
a5302 1
    stringBuffer.append(TEXT_1174);
d5304 1
a5304 1
    stringBuffer.append(TEXT_1175);
d5308 1
a5308 1
    stringBuffer.append(TEXT_1176);
d5310 1
a5310 1
    stringBuffer.append(TEXT_1177);
d5312 1
a5312 1
    stringBuffer.append(TEXT_1178);
d5314 1
a5314 1
    stringBuffer.append(TEXT_1179);
d5319 1
a5319 1
    stringBuffer.append(TEXT_1180);
d5324 2
a5325 2
    stringBuffer.append(TEXT_1181);
    stringBuffer.append(TEXT_1182);
d5329 1
a5329 1
    stringBuffer.append(TEXT_1183);
d5331 1
a5331 1
    stringBuffer.append(TEXT_1184);
d5333 1
a5333 1
    stringBuffer.append(TEXT_1185);
d5360 1
a5360 1
    stringBuffer.append(TEXT_1186);
d5362 1
a5362 1
    stringBuffer.append(TEXT_1187);
d5364 1
a5364 1
    stringBuffer.append(TEXT_1188);
d5368 1
a5368 1
    stringBuffer.append(TEXT_1189);
d5370 1
a5370 1
    stringBuffer.append(TEXT_1190);
d5372 1
a5372 1
    stringBuffer.append(TEXT_1191);
d5374 1
a5374 1
    stringBuffer.append(TEXT_1192);
d5376 1
a5376 1
    stringBuffer.append(TEXT_1193);
d5380 1
a5380 1
    stringBuffer.append(TEXT_1194);
d5382 1
a5382 1
    stringBuffer.append(TEXT_1195);
d5384 1
a5384 1
    stringBuffer.append(TEXT_1196);
d5386 1
a5386 1
    stringBuffer.append(TEXT_1197);
d5388 1
a5388 1
    stringBuffer.append(TEXT_1198);
d5393 1
a5393 1
    stringBuffer.append(TEXT_1199);
d5395 1
a5395 1
    stringBuffer.append(TEXT_1200);
d5401 1
a5401 1
    stringBuffer.append(TEXT_1201);
d5403 1
a5403 1
    stringBuffer.append(TEXT_1202);
d5405 1
a5405 1
    stringBuffer.append(TEXT_1203);
d5407 1
a5407 1
    stringBuffer.append(TEXT_1204);
d5409 1
a5409 1
    stringBuffer.append(TEXT_1205);
d5411 1
a5411 1
    stringBuffer.append(TEXT_1206);
d5415 1
a5415 1
    stringBuffer.append(TEXT_1207);
d5417 1
a5417 1
    stringBuffer.append(TEXT_1208);
d5419 1
a5419 1
    stringBuffer.append(TEXT_1209);
d5421 1
a5421 1
    stringBuffer.append(TEXT_1210);
d5423 1
a5423 1
    stringBuffer.append(TEXT_1211);
d5425 1
a5425 1
    stringBuffer.append(TEXT_1212);
d5432 1
a5432 1
    stringBuffer.append(TEXT_1213);
d5434 1
a5434 1
    stringBuffer.append(TEXT_1214);
d5436 1
a5436 1
    stringBuffer.append(TEXT_1215);
d5438 1
a5438 1
    stringBuffer.append(TEXT_1216);
d5440 1
a5440 1
    stringBuffer.append(TEXT_1217);
d5442 1
a5442 1
    stringBuffer.append(TEXT_1218);
d5446 1
a5446 1
    stringBuffer.append(TEXT_1219);
d5448 1
a5448 1
    stringBuffer.append(TEXT_1220);
d5450 1
a5450 1
    stringBuffer.append(TEXT_1221);
d5452 1
a5452 1
    stringBuffer.append(TEXT_1222);
d5454 1
a5454 1
    stringBuffer.append(TEXT_1223);
d5456 1
a5456 1
    stringBuffer.append(TEXT_1224);
d5463 1
a5463 1
    stringBuffer.append(TEXT_1225);
d5465 1
a5465 1
    stringBuffer.append(TEXT_1226);
d5467 1
a5467 1
    stringBuffer.append(TEXT_1227);
d5469 1
a5469 1
    stringBuffer.append(TEXT_1228);
d5471 1
a5471 1
    stringBuffer.append(TEXT_1229);
d5473 1
a5473 1
    stringBuffer.append(TEXT_1230);
d5477 1
a5477 1
    stringBuffer.append(TEXT_1231);
d5479 1
a5479 1
    stringBuffer.append(TEXT_1232);
d5481 1
a5481 1
    stringBuffer.append(TEXT_1233);
d5483 1
a5483 1
    stringBuffer.append(TEXT_1234);
d5485 1
a5485 1
    stringBuffer.append(TEXT_1235);
d5487 1
a5487 1
    stringBuffer.append(TEXT_1236);
d5492 1
a5492 1
    stringBuffer.append(TEXT_1237);
d5498 1
a5498 1
    stringBuffer.append(TEXT_1238);
d5500 1
a5500 1
    stringBuffer.append(TEXT_1239);
d5502 1
a5502 1
    stringBuffer.append(TEXT_1240);
d5504 1
a5504 1
    stringBuffer.append(TEXT_1241);
d5506 1
a5506 1
    stringBuffer.append(TEXT_1242);
d5508 1
a5508 1
    stringBuffer.append(TEXT_1243);
d5512 1
a5512 1
    stringBuffer.append(TEXT_1244);
d5514 1
a5514 1
    stringBuffer.append(TEXT_1245);
d5516 1
a5516 1
    stringBuffer.append(TEXT_1246);
d5518 1
a5518 1
    stringBuffer.append(TEXT_1247);
d5520 1
a5520 1
    stringBuffer.append(TEXT_1248);
d5522 1
a5522 1
    stringBuffer.append(TEXT_1249);
d5529 1
a5529 1
    stringBuffer.append(TEXT_1250);
d5533 1
a5533 1
    stringBuffer.append(TEXT_1251);
d5537 1
a5537 1
    stringBuffer.append(TEXT_1252);
d5540 1
a5540 1
    stringBuffer.append(TEXT_1253);
d5542 1
a5542 1
    stringBuffer.append(TEXT_1254);
d5544 1
a5544 1
    stringBuffer.append(TEXT_1255);
d5546 1
a5546 1
    stringBuffer.append(TEXT_1256);
d5548 1
a5548 1
    stringBuffer.append(TEXT_1257);
d5551 1
a5551 1
    stringBuffer.append(TEXT_1258);
d5553 1
a5553 1
    stringBuffer.append(TEXT_1259);
d5555 1
a5555 1
    stringBuffer.append(TEXT_1260);
d5557 1
a5557 1
    stringBuffer.append(TEXT_1261);
d5559 1
a5559 1
    stringBuffer.append(TEXT_1262);
d5561 1
a5561 1
    stringBuffer.append(TEXT_1263);
d5563 1
a5563 1
    stringBuffer.append(TEXT_1264);
d5565 1
a5565 1
    stringBuffer.append(TEXT_1265);
d5571 1
a5571 1
    stringBuffer.append(TEXT_1266);
d5573 1
a5573 1
    stringBuffer.append(TEXT_1267);
d5575 1
a5575 1
    stringBuffer.append(TEXT_1268);
d5577 1
a5577 1
    stringBuffer.append(TEXT_1269);
d5579 1
a5579 1
    stringBuffer.append(TEXT_1270);
d5581 1
a5581 1
    stringBuffer.append(TEXT_1271);
d5583 1
a5583 1
    stringBuffer.append(TEXT_1272);
d5585 1
a5585 1
    stringBuffer.append(TEXT_1273);
d5587 1
a5587 1
    stringBuffer.append(TEXT_1274);
d5589 1
a5589 1
    stringBuffer.append(TEXT_1275);
d5591 1
a5591 1
    stringBuffer.append(TEXT_1276);
d5593 1
a5593 1
    stringBuffer.append(TEXT_1277);
d5595 1
a5595 1
    stringBuffer.append(TEXT_1278);
d5599 1
a5599 1
    stringBuffer.append(TEXT_1279);
d5603 1
a5603 1
    stringBuffer.append(TEXT_1280);
d5605 1
a5605 1
    stringBuffer.append(TEXT_1281);
d5607 1
a5607 1
    stringBuffer.append(TEXT_1282);
d5609 1
a5609 1
    stringBuffer.append(TEXT_1283);
d5613 1
a5613 1
    stringBuffer.append(TEXT_1284);
d5640 1
a5640 1
    stringBuffer.append(TEXT_1285);
d5642 1
a5642 1
    stringBuffer.append(TEXT_1286);
d5644 1
a5644 1
    stringBuffer.append(TEXT_1287);
d5646 1
a5646 1
    stringBuffer.append(TEXT_1288);
d5648 1
a5648 1
    stringBuffer.append(TEXT_1289);
d5650 1
a5650 1
    stringBuffer.append(TEXT_1290);
d5652 1
a5652 1
    stringBuffer.append(TEXT_1291);
d5657 1
a5657 1
    stringBuffer.append(TEXT_1292);
d5659 1
a5659 1
    stringBuffer.append(TEXT_1293);
d5661 1
a5661 1
    stringBuffer.append(TEXT_1294);
d5663 1
a5663 1
    stringBuffer.append(TEXT_1295);
d5673 1
a5673 1
    stringBuffer.append(TEXT_1296);
d5679 1
a5679 1
    stringBuffer.append(TEXT_1297);
d5681 1
a5681 1
    stringBuffer.append(TEXT_1298);
d5683 1
a5683 1
    stringBuffer.append(TEXT_1299);
d5687 1
a5687 1
    stringBuffer.append(TEXT_1300);
d5689 1
a5689 1
    stringBuffer.append(TEXT_1301);
d5691 1
a5691 1
    stringBuffer.append(TEXT_1302);
d5693 1
a5693 1
    stringBuffer.append(TEXT_1303);
d5695 1
a5695 1
    stringBuffer.append(TEXT_1304);
d5703 1
a5703 1
    stringBuffer.append(TEXT_1305);
d5705 1
a5705 1
    stringBuffer.append(TEXT_1306);
d5707 1
a5707 1
    stringBuffer.append(TEXT_1307);
d5709 1
a5709 1
    stringBuffer.append(TEXT_1308);
d5719 1
a5719 1
    stringBuffer.append(TEXT_1309);
d5725 1
a5725 1
    stringBuffer.append(TEXT_1310);
d5727 1
a5727 1
    stringBuffer.append(TEXT_1311);
d5729 1
a5729 1
    stringBuffer.append(TEXT_1312);
d5733 1
a5733 1
    stringBuffer.append(TEXT_1313);
d5735 1
a5735 1
    stringBuffer.append(TEXT_1314);
d5737 1
a5737 1
    stringBuffer.append(TEXT_1315);
d5739 1
a5739 1
    stringBuffer.append(TEXT_1316);
d5741 1
a5741 1
    stringBuffer.append(TEXT_1317);
d5749 1
a5749 1
    stringBuffer.append(TEXT_1318);
d5751 1
a5751 1
    stringBuffer.append(TEXT_1319);
d5753 1
a5753 1
    stringBuffer.append(TEXT_1320);
d5755 1
a5755 1
    stringBuffer.append(TEXT_1321);
d5759 1
a5759 1
    stringBuffer.append(TEXT_1322);
d5764 1
a5764 1
    stringBuffer.append(TEXT_1323);
d5766 1
a5766 1
    stringBuffer.append(TEXT_1324);
d5768 1
a5768 1
    stringBuffer.append(TEXT_1325);
d5770 1
a5770 1
    stringBuffer.append(TEXT_1326);
d5774 2
a5775 2
    stringBuffer.append(TEXT_1327);
    stringBuffer.append(TEXT_1328);
d5779 1
a5779 1
    stringBuffer.append(TEXT_1329);
d5781 1
a5781 1
    stringBuffer.append(TEXT_1330);
d5783 1
a5783 1
    stringBuffer.append(TEXT_1331);
d5785 1
a5785 1
    stringBuffer.append(TEXT_1332);
d5789 1
a5789 1
    stringBuffer.append(TEXT_1333);
d5795 1
a5795 1
    stringBuffer.append(TEXT_1334);
d5799 1
a5799 1
    stringBuffer.append(TEXT_1335);
d5801 1
a5801 1
    stringBuffer.append(TEXT_1336);
d5803 1
a5803 1
    stringBuffer.append(TEXT_1337);
d5805 1
a5805 1
    stringBuffer.append(TEXT_1338);
d5812 1
a5812 1
    stringBuffer.append(TEXT_1339);
d5821 1
a5821 1
    stringBuffer.append(TEXT_1340);
d5823 1
a5823 1
    stringBuffer.append(TEXT_1341);
d5827 446
a6272 1
    stringBuffer.append(TEXT_1342);
d6277 7
d6286 1
a6286 1
    stringBuffer.append(TEXT_1343);
d6288 1
a6288 1
    stringBuffer.append(TEXT_1344);
@


1.20
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d53 563
a615 563
  protected final String TEXT_32 = " primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_33 = "(";
  protected final String TEXT_34 = " model) {" + NL + "\t\tassert model instanceof ";
  protected final String TEXT_35 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL;
  protected final String TEXT_36 = NL;
  protected final String TEXT_37 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_38 = " view = (";
  protected final String TEXT_39 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_40 = " view = (";
  protected final String TEXT_41 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_42 = NL;
  protected final String TEXT_43 = "\t\tinstallEditPolicy(";
  protected final String TEXT_44 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_45 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_46 = " createDeleteCommand(";
  protected final String TEXT_47 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_48 = " editingDomain = ";
  protected final String TEXT_49 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_50 = " cc = new ";
  protected final String TEXT_51 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_52 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_53 = "(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_54 = " editingDomain) {";
  protected final String TEXT_55 = NL + "\t\t\t\t";
  protected final String TEXT_56 = " result = new ";
  protected final String TEXT_57 = "();";
  protected final String TEXT_58 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_59 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_60 = ".eINSTANCE.get";
  protected final String TEXT_61 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_62 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_63 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_64 = ".eINSTANCE.get";
  protected final String TEXT_65 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_66 = ".UNSET_VALUE));";
  protected final String TEXT_67 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_68 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_69 = ".eINSTANCE.get";
  protected final String TEXT_70 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_71 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_72 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_73 = ".eINSTANCE.get";
  protected final String TEXT_74 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_75 = ".UNSET_VALUE));";
  protected final String TEXT_76 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_77 = NL + "\t\t\t\treturn ";
  protected final String TEXT_78 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_79 = ".eINSTANCE.get";
  protected final String TEXT_80 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_81 = NL + "\t\t\t\treturn ";
  protected final String TEXT_82 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_83 = ".eINSTANCE.get";
  protected final String TEXT_84 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_85 = ".UNSET_VALUE);";
  protected final String TEXT_86 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_87 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_88 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_89 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_90 = " getCreateCommand(";
  protected final String TEXT_91 = " request) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_92 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_93 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_94 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_95 = " createChangeConstraintCommand(";
  protected final String TEXT_96 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_97 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_98 = " createChildEditPolicy(";
  protected final String TEXT_99 = " child) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_100 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_101 = " getTargetEditPart(";
  protected final String TEXT_102 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_103 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_104 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_105 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_106 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_107 = " getReconnectTargetCommand(";
  protected final String TEXT_108 = " request) {";
  protected final String TEXT_109 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_110 = ".INSTANCE;";
  protected final String TEXT_111 = NL + "\t\t\t\t";
  protected final String TEXT_112 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_113 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_114 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_115 = " edge = (";
  protected final String TEXT_116 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_117 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_118 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_119 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_120 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_121 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_122 = NL + "\t\t\t\tcase ";
  protected final String TEXT_123 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_124 = "TargetCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_125 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_126 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_127 = "(";
  protected final String TEXT_128 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_129 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_130 = " getReconnectSourceCommand(";
  protected final String TEXT_131 = " request) {";
  protected final String TEXT_132 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_133 = ".INSTANCE;";
  protected final String TEXT_134 = NL + "\t\t\t\t";
  protected final String TEXT_135 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_136 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_137 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_138 = " edge = (";
  protected final String TEXT_139 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_140 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_141 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_142 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_143 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_144 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_145 = NL + "\t\t\t\tcase ";
  protected final String TEXT_146 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_147 = "SourceCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_148 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_149 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_150 = "(";
  protected final String TEXT_151 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_152 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_153 = " getConnectionCreateCommand(";
  protected final String TEXT_154 = " request) {";
  protected final String TEXT_155 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_156 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_157 = " requestEx = (";
  protected final String TEXT_158 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_159 = " result = new ";
  protected final String TEXT_160 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_161 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_162 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_163 = "StartCommand(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_164 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_165 = " wrappedResult = new ";
  protected final String TEXT_166 = "(";
  protected final String TEXT_167 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_168 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_169 = " getConnectionCompleteCommand(";
  protected final String TEXT_170 = " request) {";
  protected final String TEXT_171 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_172 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_173 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_174 = " requestEx = (";
  protected final String TEXT_175 = ") request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_176 = " result = new ";
  protected final String TEXT_177 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_178 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_179 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_180 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_181 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_182 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_183 = "(";
  protected final String TEXT_184 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_185 = NL + "\t\t\t\treturn ";
  protected final String TEXT_186 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_187 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_188 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_189 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_190 = " invisibleRectangle = new ";
  protected final String TEXT_191 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_192 = "());" + NL + "\t\t";
  protected final String TEXT_193 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_194 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_195 = " createNodeShape() {";
  protected final String TEXT_196 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_197 = "()";
  protected final String TEXT_198 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_199 = ";";
  protected final String TEXT_200 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_201 = ";";
  protected final String TEXT_202 = NL + "\t\t";
  protected final String TEXT_203 = " figure = new ";
  protected final String TEXT_204 = "();";
  protected final String TEXT_205 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_206 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_207 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_208 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_209 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_210 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_211 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_212 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_213 = " view = (";
  protected final String TEXT_214 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_215 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_216 = " decorationPane = new ";
  protected final String TEXT_217 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_218 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_219 = " imageFigure = new ";
  protected final String TEXT_220 = "(";
  protected final String TEXT_221 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_222 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_223 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_224 = " setupContentPane(";
  protected final String TEXT_225 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_226 = NL + "\t\t\t";
  protected final String TEXT_227 = " layout = new ";
  protected final String TEXT_228 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_229 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_230 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_231 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_232 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_233 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_234 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_235 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_236 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_237 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_238 = " childEditPart) {";
  protected final String TEXT_239 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_240 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_241 = ") childEditPart).";
  protected final String TEXT_242 = "(getPrimaryShape().";
  protected final String TEXT_243 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_244 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_245 = ") {" + NL + "\t\t\t";
  protected final String TEXT_246 = " pane = getPrimaryShape().";
  protected final String TEXT_247 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_248 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_249 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_250 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_251 = ") {" + NL + "\t\t\t";
  protected final String TEXT_252 = " pane = getPrimaryShape().";
  protected final String TEXT_253 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_254 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_255 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_256 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_257 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_258 = NL + "\t\tfor(";
  protected final String TEXT_259 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_260 = " nextChild = (";
  protected final String TEXT_261 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_262 = ".getVisualID(nextChild) == ";
  protected final String TEXT_263 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_264 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_265 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_266 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_267 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_268 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_269 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_270 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_271 = " getLabelEditPart(";
  protected final String TEXT_272 = " req) {" + NL + "\t\t";
  protected final String TEXT_273 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_274 = " view = (";
  protected final String TEXT_275 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_276 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_277 = NL + "\t\t\t\tcase ";
  protected final String TEXT_278 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_279 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_280 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_281 = " childEditPart) {";
  protected final String TEXT_282 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_283 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_284 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_285 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_286 = " root = (";
  protected final String TEXT_287 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_288 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_289 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_290 = " childEditPart, int index) {";
  protected final String TEXT_291 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_292 = " labelFigure = ((";
  protected final String TEXT_293 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_294 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_295 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_296 = " childEditPart) {";
  protected final String TEXT_297 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_298 = " labelFigure = ((";
  protected final String TEXT_299 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_300 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_301 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_302 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_303 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_304 = " childEditPart = (";
  protected final String TEXT_305 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_306 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_307 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_308 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_309 = ";" + NL + "\t\t";
  protected final String TEXT_310 = " bounds = (";
  protected final String TEXT_311 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_312 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_313 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_314 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_315 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_316 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_317 = " getSourceConnectionAnchor(";
  protected final String TEXT_318 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_319 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_320 = " getSourceConnectionAnchor(";
  protected final String TEXT_321 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_322 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_323 = "  getTargetConnectionAnchor(";
  protected final String TEXT_324 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_325 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_326 = "  getTargetConnectionAnchor(";
  protected final String TEXT_327 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_328 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_329 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_330 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_331 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_332 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_333 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_334 = NL;
  protected final String TEXT_335 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_336 = " domainModelEditDomain = ";
  protected final String TEXT_337 = ".getEditingDomain(";
  protected final String TEXT_338 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * Service to find a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_339 = " viewService;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_340 = " getViewService() {" + NL + "\t\tif (viewService == null) {" + NL + "\t\t\tviewService = new ";
  protected final String TEXT_341 = "(getViewer());" + NL + "\t\t}" + NL + "\t\treturn viewService;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_342 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher(";
  protected final String TEXT_343 = " viewService) {" + NL + "\t\t\tsuper(viewService);" + NL + "\t\t}";
  protected final String TEXT_344 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_345 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_346 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_347 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_348 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_349 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_350 = ".createEventTypeFilter(";
  protected final String TEXT_351 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_352 = ".createEventTypeFilter(";
  protected final String TEXT_353 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_354 = ".createEventTypeFilter(";
  protected final String TEXT_355 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_356 = ".createEventTypeFilter(";
  protected final String TEXT_357 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_358 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_359 = " createFilter() {";
  protected final String TEXT_360 = NL;
  protected final String TEXT_361 = NL + "\t\t\t";
  protected final String TEXT_362 = " filter = ";
  protected final String TEXT_363 = ".createFeatureFilter(";
  protected final String TEXT_364 = ".eINSTANCE.get";
  protected final String TEXT_365 = "());";
  protected final String TEXT_366 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_367 = ".createFeatureFilter(";
  protected final String TEXT_368 = ".eINSTANCE.get";
  protected final String TEXT_369 = "()));";
  protected final String TEXT_370 = NL;
  protected final String TEXT_371 = NL + "\t\t\t";
  protected final String TEXT_372 = " filter = ";
  protected final String TEXT_373 = ".createFeatureFilter(";
  protected final String TEXT_374 = ".eINSTANCE.get";
  protected final String TEXT_375 = "());";
  protected final String TEXT_376 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_377 = ".createFeatureFilter(";
  protected final String TEXT_378 = ".eINSTANCE.get";
  protected final String TEXT_379 = "()));";
  protected final String TEXT_380 = NL;
  protected final String TEXT_381 = NL + "\t\t\t";
  protected final String TEXT_382 = " filter = ";
  protected final String TEXT_383 = ".createFeatureFilter(";
  protected final String TEXT_384 = ".eINSTANCE.get";
  protected final String TEXT_385 = "());";
  protected final String TEXT_386 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_387 = ".createFeatureFilter(";
  protected final String TEXT_388 = ".eINSTANCE.get";
  protected final String TEXT_389 = "()));";
  protected final String TEXT_390 = NL;
  protected final String TEXT_391 = NL + "\t\t\t";
  protected final String TEXT_392 = " filter = ";
  protected final String TEXT_393 = ".createFeatureFilter(";
  protected final String TEXT_394 = ".eINSTANCE.get";
  protected final String TEXT_395 = "());";
  protected final String TEXT_396 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_397 = ".createFeatureFilter(";
  protected final String TEXT_398 = ".eINSTANCE.get";
  protected final String TEXT_399 = "()));";
  protected final String TEXT_400 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_401 = NL + "\t\t\t";
  protected final String TEXT_402 = " filter = getConstrainedChildLinksFilter();";
  protected final String TEXT_403 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_404 = NL + "\t\t\t";
  protected final String TEXT_405 = " filter = createUncontainedLinksFilter();";
  protected final String TEXT_406 = NL + "\t\t\t";
  protected final String TEXT_407 = " filter = ";
  protected final String TEXT_408 = ".NOT_TOUCH;";
  protected final String TEXT_409 = NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t \t * @@generated" + NL + "\t \t */" + NL + "\t\tprotected ";
  protected final String TEXT_410 = " getCreateNotationalElementCommand(";
  protected final String TEXT_411 = " descriptor) {" + NL + "\t\t\t";
  protected final String TEXT_412 = " linkDescriptor = (";
  protected final String TEXT_413 = ") descriptor;" + NL + "\t\t\t";
  protected final String TEXT_414 = " sourceView = getViewService().findView(linkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_415 = " targetView = getViewService().findView(linkDescriptor.getDestination());" + NL + "\t\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_416 = " createdEdge = ";
  protected final String TEXT_417 = ".eINSTANCE.createEdge();" + NL + "\t\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_418 = NL + "\t\t\tcase ";
  protected final String TEXT_419 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() instanceof ";
  protected final String TEXT_420 = ") {" + NL + "\t\t\t\t\tcreatedEdge.setElement(linkDescriptor.getElement());" + NL + "\t\t\t\t\t";
  protected final String TEXT_421 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_422 = NL + "\t\t\tcase ";
  protected final String TEXT_423 = ".VISUAL_ID:" + NL + "\t\t\t\tif (linkDescriptor.getElement() == null) {" + NL + "\t\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t\t";
  protected final String TEXT_424 = ".decorateView(createdEdge);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_425 = NL + "\t\t\t}" + NL + "\t\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn new ";
  protected final String TEXT_426 = "(getHost().getDiagram(), createdEdge, sourceView, targetView);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_427 = " getSemanticChildLinks() {";
  protected final String TEXT_428 = NL;
  protected final String TEXT_429 = "\t";
  protected final String TEXT_430 = " result = new ";
  protected final String TEXT_431 = "();";
  protected final String TEXT_432 = NL + "\t";
  protected final String TEXT_433 = " modelObject = ";
  protected final String TEXT_434 = ".getElement();" + NL + "\t";
  protected final String TEXT_435 = " nextValue;";
  protected final String TEXT_436 = NL + "\tint linkVID;";
  protected final String TEXT_437 = NL + "\tfor(";
  protected final String TEXT_438 = " it = ";
  protected final String TEXT_439 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_440 = ") it.next();";
  protected final String TEXT_441 = NL + "\tnextValue = (";
  protected final String TEXT_442 = ")";
  protected final String TEXT_443 = ";";
  protected final String TEXT_444 = NL + "\tlinkVID = ";
  protected final String TEXT_445 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_446 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_447 = NL + "\tcase ";
  protected final String TEXT_448 = ".VISUAL_ID: {";
  protected final String TEXT_449 = NL + "\tif (";
  protected final String TEXT_450 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_451 = NL + "\t\t";
  protected final String TEXT_452 = " source = (";
  protected final String TEXT_453 = ")";
  protected final String TEXT_454 = ";";
  protected final String TEXT_455 = NL + "\t\t";
  protected final String TEXT_456 = " source = ";
  protected final String TEXT_457 = ".getElement();";
  protected final String TEXT_458 = NL + "\t\t";
  protected final String TEXT_459 = " target = (";
  protected final String TEXT_460 = ")";
  protected final String TEXT_461 = ";";
  protected final String TEXT_462 = NL + "\t\t";
  protected final String TEXT_463 = " target = ";
  protected final String TEXT_464 = ".getElement();";
  protected final String TEXT_465 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_466 = "(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_467 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_468 = NL + "\t}";
  protected final String TEXT_469 = NL + "\t}";
  protected final String TEXT_470 = NL + "\t}";
  protected final String TEXT_471 = NL + "\tfor(";
  protected final String TEXT_472 = " it = ";
  protected final String TEXT_473 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_474 = ") it.next();";
  protected final String TEXT_475 = NL + "\tnextValue = (";
  protected final String TEXT_476 = ")";
  protected final String TEXT_477 = ";";
  protected final String TEXT_478 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_479 = NL + "\t\tresult.add(new ";
  protected final String TEXT_480 = "(modelObject, nextValue, null, ";
  protected final String TEXT_481 = ".VISUAL_ID));";
  protected final String TEXT_482 = NL + "\t}";
  protected final String TEXT_483 = NL + "\t}";
  protected final String TEXT_484 = NL + "\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_485 = " getNotationalChildLinks() {" + NL + "\t\t\t";
  protected final String TEXT_486 = " result = new ";
  protected final String TEXT_487 = "();" + NL + "\t\t\t";
  protected final String TEXT_488 = " allLinks = ";
  protected final String TEXT_489 = ".getEdges();" + NL + "\t\t\tfor(";
  protected final String TEXT_490 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_491 = " next = (";
  protected final String TEXT_492 = ") it.next();";
  protected final String TEXT_493 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_494 = " source = next.getSource();" + NL + "\t\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_495 = " target = next.getTarget();" + NL + "\t\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\tcontinue;" + NL + "\t\t\t\t}";
  protected final String TEXT_496 = NL + "\t\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_497 = ") {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_498 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_499 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_500 = ".VISUAL_ID:";
  protected final String TEXT_501 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}";
  protected final String TEXT_502 = NL + "\t\t\t\t} else {";
  protected final String TEXT_503 = NL + "\t\t\t\t}";
  protected final String TEXT_504 = NL + "\t\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_505 = NL + "\t\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_506 = ".getElement()) {" + NL + "\t\t\t\t\t\tint linkVID = ";
  protected final String TEXT_507 = ".getVisualID(next);" + NL + "\t\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_508 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_509 = ".VISUAL_ID:";
  protected final String TEXT_510 = NL + "\t\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_511 = NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t\t * The generated code always returns ";
  protected final String TEXT_512 = ". " + NL + "\t\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldCreateView(";
  protected final String TEXT_513 = " descriptor) {" + NL + "\t\t\treturn ";
  protected final String TEXT_514 = ";" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_515 = " getHost() {" + NL + "\t\t\treturn ";
  protected final String TEXT_516 = ";" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_517 = " linkRefresher = getLinkNotationModelRefresher();" + NL + "\t\tif (!linkRefresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_518 = " command = linkRefresher.buildRefreshNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_519 = " domainModelEditDomain = ";
  protected final String TEXT_520 = ".getEditingDomain(";
  protected final String TEXT_521 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new ";
  protected final String TEXT_522 = "(domainModelEditDomain, command));" + NL + "\t}";
  protected final String TEXT_523 = NL;
  protected final String TEXT_524 = NL;
  protected final String TEXT_525 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_526 = " domainModelRefresher = new ";
  protected final String TEXT_527 = "(this);" + NL;
  protected final String TEXT_528 = NL;
  protected final String TEXT_529 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_530 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_531 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_532 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_533 = NL;
  protected final String TEXT_534 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_535 = NL + "\t\t";
  protected final String TEXT_536 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_537 = ") ";
  protected final String TEXT_538 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_539 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_540 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_541 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_542 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_543 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_544 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_545 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_546 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_547 = "\t" + NL + "\t}";
  protected final String TEXT_548 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_549 = " createdFont;";
  protected final String TEXT_550 = "\t" + NL;
  protected final String TEXT_551 = NL;
  protected final String TEXT_552 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_553 = " style = (";
  protected final String TEXT_554 = ")  ";
  protected final String TEXT_555 = ".getStyle(";
  protected final String TEXT_556 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_557 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_558 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_559 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_560 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_561 = " style = (";
  protected final String TEXT_562 = ")  ";
  protected final String TEXT_563 = ".getStyle(";
  protected final String TEXT_564 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_565 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_566 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_567 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_568 = " createdBackgroundColor;" + NL;
  protected final String TEXT_569 = NL;
  protected final String TEXT_570 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_571 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_572 = " feature, ";
  protected final String TEXT_573 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_574 = "();";
  protected final String TEXT_575 = NL;
  protected final String TEXT_576 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_577 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_578 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_579 = NL;
  protected final String TEXT_580 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_581 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_582 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_583 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_584 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_585 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_586 = NL;
  protected final String TEXT_587 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_588 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_589 = NL;
  protected final String TEXT_590 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_591 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_592 = NL;
  protected final String TEXT_593 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_594 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
d617 402
a1018 402
  protected final String TEXT_596 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_597 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_598 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_599 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_600 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_601 = NL;
  protected final String TEXT_602 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_603 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_604 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_605 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_606 = "SourceCommand extends ";
  protected final String TEXT_607 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_608 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_609 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_610 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_611 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_612 = "SourceCommand(";
  protected final String TEXT_613 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_614 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_615 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_616 = "SourceCommand(";
  protected final String TEXT_617 = " edge, ";
  protected final String TEXT_618 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_619 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_620 = " domainModelEditDomain = ";
  protected final String TEXT_621 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_622 = " command = new ";
  protected final String TEXT_623 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_624 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_625 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_626 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_627 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_628 = NL + "\t\t\treturn false;";
  protected final String TEXT_629 = NL + "\t\t\t";
  protected final String TEXT_630 = " container = (";
  protected final String TEXT_631 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_632 = ".eINSTANCE.get";
  protected final String TEXT_633 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_634 = NL;
  protected final String TEXT_635 = NL + "\t\tif (";
  protected final String TEXT_636 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_637 = NL + "\t\t}";
  protected final String TEXT_638 = NL + "\t\tif (";
  protected final String TEXT_639 = ".size() >= ";
  protected final String TEXT_640 = ".eINSTANCE.get";
  protected final String TEXT_641 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_642 = NL + "\t\t}";
  protected final String TEXT_643 = NL;
  protected final String TEXT_644 = NL + "\t\tif (";
  protected final String TEXT_645 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_646 = NL + "\t\t}";
  protected final String TEXT_647 = NL + "\t\tif (";
  protected final String TEXT_648 = ".size() >= ";
  protected final String TEXT_649 = ".eINSTANCE.get";
  protected final String TEXT_650 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_651 = NL + "\t\t}";
  protected final String TEXT_652 = NL;
  protected final String TEXT_653 = NL + "\t\t\tif(!";
  protected final String TEXT_654 = ".canCreateLink(";
  protected final String TEXT_655 = ", ";
  protected final String TEXT_656 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_657 = NL + "\t\t\treturn true;";
  protected final String TEXT_658 = NL;
  protected final String TEXT_659 = NL + "\t\tif (";
  protected final String TEXT_660 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_661 = NL + "\t\t}";
  protected final String TEXT_662 = NL + "\t\tif (";
  protected final String TEXT_663 = ".size() >= ";
  protected final String TEXT_664 = ".eINSTANCE.get";
  protected final String TEXT_665 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_666 = NL + "\t\t}";
  protected final String TEXT_667 = NL;
  protected final String TEXT_668 = NL + "\t\t\tif(!";
  protected final String TEXT_669 = ".canCreateLink(";
  protected final String TEXT_670 = ", ";
  protected final String TEXT_671 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_672 = NL + "\t\t\treturn true;";
  protected final String TEXT_673 = NL + "\t\t\treturn false;";
  protected final String TEXT_674 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_675 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_676 = " editingDomain = ";
  protected final String TEXT_677 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_678 = " result = new ";
  protected final String TEXT_679 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_680 = "(edge, newSource));";
  protected final String TEXT_681 = NL + "\t\t\t";
  protected final String TEXT_682 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_683 = ".eINSTANCE.get";
  protected final String TEXT_684 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_685 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_686 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_687 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_688 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_689 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), edge.getElement()));";
  protected final String TEXT_690 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_691 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), ";
  protected final String TEXT_692 = ".UNSET_VALUE));";
  protected final String TEXT_693 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_694 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_695 = ".eINSTANCE.get";
  protected final String TEXT_696 = "(), edge.getElement()));";
  protected final String TEXT_697 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_698 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_699 = ".eINSTANCE.get";
  protected final String TEXT_700 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_701 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_702 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_703 = ".eINSTANCE.get";
  protected final String TEXT_704 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_705 = ".UNSET_VALUE));";
  protected final String TEXT_706 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_707 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_708 = ".eINSTANCE.get";
  protected final String TEXT_709 = "(), edge.getElement()));";
  protected final String TEXT_710 = NL + "\t\t\t}";
  protected final String TEXT_711 = NL + "\t\t\tresult.append(";
  protected final String TEXT_712 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_713 = ".eINSTANCE.get";
  protected final String TEXT_714 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_715 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_716 = ".eINSTANCE.get";
  protected final String TEXT_717 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_718 = NL + "\t\t\tresult.append(";
  protected final String TEXT_719 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_720 = ".eINSTANCE.get";
  protected final String TEXT_721 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_722 = NL + "\t\t\tresult.append(";
  protected final String TEXT_723 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_724 = ".eINSTANCE.get";
  protected final String TEXT_725 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_726 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_727 = ".eINSTANCE.get";
  protected final String TEXT_728 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_729 = NL + "\t\t\tresult.append(";
  protected final String TEXT_730 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_731 = ".eINSTANCE.get";
  protected final String TEXT_732 = "(), ";
  protected final String TEXT_733 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_734 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_735 = ".eINSTANCE.get";
  protected final String TEXT_736 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_737 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_738 = NL;
  protected final String TEXT_739 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_740 = " getRelationshipContainer(";
  protected final String TEXT_741 = " element, ";
  protected final String TEXT_742 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_743 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_744 = NL;
  protected final String TEXT_745 = NL + "\t\t\tprivate ";
  protected final String TEXT_746 = " createDomainModelRemoveCommand(";
  protected final String TEXT_747 = " editingDomain) {";
  protected final String TEXT_748 = NL + "\t\t\t\t";
  protected final String TEXT_749 = " result = new ";
  protected final String TEXT_750 = "();";
  protected final String TEXT_751 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_752 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_753 = ".getElement().eContainer(), ";
  protected final String TEXT_754 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_755 = ".getElement()));";
  protected final String TEXT_756 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_757 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_758 = ".getElement().eContainer(), ";
  protected final String TEXT_759 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_760 = ".UNSET_VALUE));";
  protected final String TEXT_761 = NL + "\t\t\t\treturn ";
  protected final String TEXT_762 = ".INSTANCE;";
  protected final String TEXT_763 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_764 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_765 = ".getElement().eContainer(), ";
  protected final String TEXT_766 = ".eINSTANCE.get";
  protected final String TEXT_767 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_768 = ".getElement()));";
  protected final String TEXT_769 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_770 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_771 = ".getElement().eContainer(), ";
  protected final String TEXT_772 = ".eINSTANCE.get";
  protected final String TEXT_773 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_774 = ".UNSET_VALUE));";
  protected final String TEXT_775 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_776 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_777 = ".getElement(), ";
  protected final String TEXT_778 = ".eINSTANCE.get";
  protected final String TEXT_779 = "(), ";
  protected final String TEXT_780 = ".getSource().getElement()));";
  protected final String TEXT_781 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_782 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_783 = ".getElement(), ";
  protected final String TEXT_784 = ".eINSTANCE.get";
  protected final String TEXT_785 = "(), ";
  protected final String TEXT_786 = ".UNSET_VALUE));";
  protected final String TEXT_787 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_788 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_789 = ".getElement(), ";
  protected final String TEXT_790 = ".eINSTANCE.get";
  protected final String TEXT_791 = "(), ";
  protected final String TEXT_792 = ".getTarget().getElement()));";
  protected final String TEXT_793 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_794 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_795 = ".getElement(), ";
  protected final String TEXT_796 = ".eINSTANCE.get";
  protected final String TEXT_797 = "(), ";
  protected final String TEXT_798 = ".UNSET_VALUE));";
  protected final String TEXT_799 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_800 = NL + "\t\t\t\treturn ";
  protected final String TEXT_801 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_802 = ".getSource().getElement(), ";
  protected final String TEXT_803 = ".eINSTANCE.get";
  protected final String TEXT_804 = "(), ";
  protected final String TEXT_805 = ".getTarget().getElement());";
  protected final String TEXT_806 = NL + "\t\t\t\treturn ";
  protected final String TEXT_807 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_808 = ".getSource().getElement(), ";
  protected final String TEXT_809 = ".eINSTANCE.get";
  protected final String TEXT_810 = "(), ";
  protected final String TEXT_811 = ".UNSET_VALUE);";
  protected final String TEXT_812 = NL + "\t\t\t}";
  protected final String TEXT_813 = NL + "\t}" + NL;
  protected final String TEXT_814 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_815 = "StartCommand extends ";
  protected final String TEXT_816 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_817 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_818 = "StartCommand(";
  protected final String TEXT_819 = " requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_820 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_821 = NL + "\t\t\treturn false;";
  protected final String TEXT_822 = NL + "\t\t\t";
  protected final String TEXT_823 = " container = (";
  protected final String TEXT_824 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_825 = ".eINSTANCE.get";
  protected final String TEXT_826 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_827 = NL;
  protected final String TEXT_828 = NL + "\t\tif (";
  protected final String TEXT_829 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_830 = NL + "\t\t}";
  protected final String TEXT_831 = NL + "\t\tif (";
  protected final String TEXT_832 = ".size() >= ";
  protected final String TEXT_833 = ".eINSTANCE.get";
  protected final String TEXT_834 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_835 = NL + "\t\t}";
  protected final String TEXT_836 = NL;
  protected final String TEXT_837 = NL + "\t\tif (";
  protected final String TEXT_838 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_839 = NL + "\t\t}";
  protected final String TEXT_840 = NL + "\t\tif (";
  protected final String TEXT_841 = ".size() >= ";
  protected final String TEXT_842 = ".eINSTANCE.get";
  protected final String TEXT_843 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_844 = NL + "\t\t}";
  protected final String TEXT_845 = NL;
  protected final String TEXT_846 = NL + "\t\t\tif(!";
  protected final String TEXT_847 = ".canCreateLink(";
  protected final String TEXT_848 = ", ";
  protected final String TEXT_849 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_850 = NL + "\t\t\treturn true;";
  protected final String TEXT_851 = NL;
  protected final String TEXT_852 = NL + "\t\tif (";
  protected final String TEXT_853 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_854 = NL + "\t\t}";
  protected final String TEXT_855 = NL + "\t\tif (";
  protected final String TEXT_856 = ".size() >= ";
  protected final String TEXT_857 = ".eINSTANCE.get";
  protected final String TEXT_858 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_859 = NL + "\t\t}";
  protected final String TEXT_860 = NL;
  protected final String TEXT_861 = NL + "\t\t\tif(!";
  protected final String TEXT_862 = ".canCreateLink(";
  protected final String TEXT_863 = ", ";
  protected final String TEXT_864 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_865 = NL + "\t\t\treturn true;";
  protected final String TEXT_866 = NL + "\t\t\treturn false;";
  protected final String TEXT_867 = NL + "\t\t}";
  protected final String TEXT_868 = NL;
  protected final String TEXT_869 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_870 = " getRelationshipContainer(";
  protected final String TEXT_871 = " element, ";
  protected final String TEXT_872 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_873 = NL + NL + "\t}";
  protected final String TEXT_874 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_875 = "TargetCommand extends ";
  protected final String TEXT_876 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_877 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_878 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_879 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_880 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_881 = "TargetCommand(";
  protected final String TEXT_882 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_883 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_884 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_885 = "TargetCommand(";
  protected final String TEXT_886 = " edge, ";
  protected final String TEXT_887 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_888 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_889 = " domainModelEditDomain = ";
  protected final String TEXT_890 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_891 = " command = new ";
  protected final String TEXT_892 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_893 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew ";
  protected final String TEXT_894 = "(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_895 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_896 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_897 = NL;
  protected final String TEXT_898 = NL + "\t\t\tif(!";
  protected final String TEXT_899 = ".canCreateLink(";
  protected final String TEXT_900 = ", ";
  protected final String TEXT_901 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_902 = NL + "\t\t\treturn true;";
  protected final String TEXT_903 = NL;
  protected final String TEXT_904 = NL + "\t\t\tif(!";
  protected final String TEXT_905 = ".canCreateLink(";
  protected final String TEXT_906 = ", ";
  protected final String TEXT_907 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_908 = NL + "\t\t\treturn true;";
  protected final String TEXT_909 = NL + "\t\t\treturn false;";
  protected final String TEXT_910 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_911 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_912 = " editingDomain = ";
  protected final String TEXT_913 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_914 = " result = new ";
  protected final String TEXT_915 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_916 = "(edge, newTarget));";
  protected final String TEXT_917 = NL + "\t\t\tresult.append(";
  protected final String TEXT_918 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_919 = ".eINSTANCE.get";
  protected final String TEXT_920 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_921 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_922 = ".eINSTANCE.get";
  protected final String TEXT_923 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_924 = NL + "\t\t\tresult.append(";
  protected final String TEXT_925 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_926 = ".eINSTANCE.get";
  protected final String TEXT_927 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_928 = NL + "\t\t\tresult.append(";
  protected final String TEXT_929 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_930 = ".eINSTANCE.get";
  protected final String TEXT_931 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_932 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_933 = ".eINSTANCE.get";
  protected final String TEXT_934 = "(), newTarget.getElement()));";
  protected final String TEXT_935 = NL + "\t\t\tresult.append(";
  protected final String TEXT_936 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_937 = ".eINSTANCE.get";
  protected final String TEXT_938 = "(), newTarget.getElement()));";
  protected final String TEXT_939 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_940 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_941 = NL;
  protected final String TEXT_942 = NL + "\t\t\tprivate ";
  protected final String TEXT_943 = " createDomainModelRemoveCommand(";
  protected final String TEXT_944 = " editingDomain) {";
  protected final String TEXT_945 = NL + "\t\t\t\t";
  protected final String TEXT_946 = " result = new ";
  protected final String TEXT_947 = "();";
  protected final String TEXT_948 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_949 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_950 = ".getElement().eContainer(), ";
  protected final String TEXT_951 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_952 = ".getElement()));";
  protected final String TEXT_953 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_954 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_955 = ".getElement().eContainer(), ";
  protected final String TEXT_956 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_957 = ".UNSET_VALUE));";
  protected final String TEXT_958 = NL + "\t\t\t\treturn ";
  protected final String TEXT_959 = ".INSTANCE;";
  protected final String TEXT_960 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_961 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_962 = ".getElement().eContainer(), ";
  protected final String TEXT_963 = ".eINSTANCE.get";
  protected final String TEXT_964 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_965 = ".getElement()));";
  protected final String TEXT_966 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_967 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_968 = ".getElement().eContainer(), ";
  protected final String TEXT_969 = ".eINSTANCE.get";
  protected final String TEXT_970 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_971 = ".UNSET_VALUE));";
  protected final String TEXT_972 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_973 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_974 = ".getElement(), ";
  protected final String TEXT_975 = ".eINSTANCE.get";
  protected final String TEXT_976 = "(), ";
  protected final String TEXT_977 = ".getSource().getElement()));";
  protected final String TEXT_978 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_979 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_980 = ".getElement(), ";
  protected final String TEXT_981 = ".eINSTANCE.get";
  protected final String TEXT_982 = "(), ";
  protected final String TEXT_983 = ".UNSET_VALUE));";
  protected final String TEXT_984 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_985 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_986 = ".getElement(), ";
  protected final String TEXT_987 = ".eINSTANCE.get";
  protected final String TEXT_988 = "(), ";
  protected final String TEXT_989 = ".getTarget().getElement()));";
  protected final String TEXT_990 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_991 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_992 = ".getElement(), ";
  protected final String TEXT_993 = ".eINSTANCE.get";
  protected final String TEXT_994 = "(), ";
  protected final String TEXT_995 = ".UNSET_VALUE));";
  protected final String TEXT_996 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_997 = NL + "\t\t\t\treturn ";
d1020 67
a1086 67
  protected final String TEXT_999 = ".getSource().getElement(), ";
  protected final String TEXT_1000 = ".eINSTANCE.get";
  protected final String TEXT_1001 = "(), ";
  protected final String TEXT_1002 = ".getTarget().getElement());";
  protected final String TEXT_1003 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1004 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1005 = ".getSource().getElement(), ";
  protected final String TEXT_1006 = ".eINSTANCE.get";
  protected final String TEXT_1007 = "(), ";
  protected final String TEXT_1008 = ".UNSET_VALUE);";
  protected final String TEXT_1009 = NL + "\t\t\t}";
  protected final String TEXT_1010 = NL + "\t}" + NL;
  protected final String TEXT_1011 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1012 = "Command extends ";
  protected final String TEXT_1013 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1014 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1015 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1016 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1017 = "Command(";
  protected final String TEXT_1018 = " requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1019 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1020 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1021 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1022 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1023 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1024 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1025 = NL + "\t\t\t";
  protected final String TEXT_1026 = " createdDomainElement = ";
  protected final String TEXT_1027 = ".eINSTANCE.create";
  protected final String TEXT_1028 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1029 = "(";
  protected final String TEXT_1030 = ") ";
  protected final String TEXT_1031 = "createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1032 = NL + "\t\t\t";
  protected final String TEXT_1033 = ".";
  protected final String TEXT_1034 = ".initializeElement(";
  protected final String TEXT_1035 = "(";
  protected final String TEXT_1036 = ") ";
  protected final String TEXT_1037 = "createdDomainElement);";
  protected final String TEXT_1038 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1039 = NL + "\t\t\t";
  protected final String TEXT_1040 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1041 = " domainModelEditDomain = ";
  protected final String TEXT_1042 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1043 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1044 = NL + "\t\t\t";
  protected final String TEXT_1045 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1046 = ".eINSTANCE.get";
  protected final String TEXT_1047 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1048 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1049 = ".eINSTANCE.get";
  protected final String TEXT_1050 = "(), createdDomainElement));";
  protected final String TEXT_1051 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1052 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1053 = ".eINSTANCE.get";
  protected final String TEXT_1054 = "(), createdDomainElement));";
  protected final String TEXT_1055 = NL;
  protected final String TEXT_1056 = NL + "\t\tif (";
  protected final String TEXT_1057 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1058 = NL + "\t\t}";
  protected final String TEXT_1059 = NL + "\t\tif (";
  protected final String TEXT_1060 = ".size() >= ";
  protected final String TEXT_1061 = ".eINSTANCE.get";
  protected final String TEXT_1062 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1063 = NL + "\t\t}";
  protected final String TEXT_1064 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1065 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
d1088 1
a1088 1
  protected final String TEXT_1067 = "(), source.getElement()));";
d1098 268
a1365 27
  protected final String TEXT_1077 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1078 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1079 = ".eINSTANCE.get";
  protected final String TEXT_1080 = "(), target.getElement()));";
  protected final String TEXT_1081 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1082 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1083 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1084 = ".eINSTANCE.get";
  protected final String TEXT_1085 = "(), target.getElement());";
  protected final String TEXT_1086 = NL + "\t\t}" + NL;
  protected final String TEXT_1087 = NL;
  protected final String TEXT_1088 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1089 = " getRelationshipContainer(";
  protected final String TEXT_1090 = " element, ";
  protected final String TEXT_1091 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1092 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1093 = NL;
  protected final String TEXT_1094 = NL + "\t\t\tif(!";
  protected final String TEXT_1095 = ".canCreateLink(";
  protected final String TEXT_1096 = ", ";
  protected final String TEXT_1097 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1098 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1099 = NL;
  protected final String TEXT_1100 = NL;
  protected final String TEXT_1101 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1102 = NL + "}";
  protected final String TEXT_1103 = NL;
d1537 4
d1646 3
a1648 1
    stringBuffer.append(genNode.getEditPartClassName());
d1650 1
a1650 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1652 3
a1654 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1656 1
d1658 1
d1660 1
a1660 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1661 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1662 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1666 1
d1668 1
d1670 4
d1675 1
a1675 1
    stringBuffer.append(TEXT_44);
d1677 1
a1677 1
    stringBuffer.append(TEXT_45);
d1679 1
a1679 1
    stringBuffer.append(TEXT_46);
d1681 1
a1681 1
    stringBuffer.append(TEXT_47);
d1683 1
a1683 1
    stringBuffer.append(TEXT_48);
d1685 1
a1685 1
    stringBuffer.append(TEXT_49);
d1687 1
a1687 1
    stringBuffer.append(TEXT_50);
d1689 1
a1689 1
    stringBuffer.append(TEXT_51);
d1691 1
a1691 1
    stringBuffer.append(TEXT_52);
d1693 1
a1693 1
    stringBuffer.append(TEXT_53);
d1695 1
a1695 1
    stringBuffer.append(TEXT_54);
d1703 1
a1703 1
    stringBuffer.append(TEXT_55);
d1705 1
a1705 1
    stringBuffer.append(TEXT_56);
d1707 1
a1707 1
    stringBuffer.append(TEXT_57);
d1711 1
a1711 1
    stringBuffer.append(TEXT_58);
d1713 1
a1713 1
    stringBuffer.append(TEXT_59);
d1715 1
a1715 1
    stringBuffer.append(TEXT_60);
d1717 1
a1717 1
    stringBuffer.append(TEXT_61);
d1721 1
a1721 1
    stringBuffer.append(TEXT_62);
d1723 1
a1723 1
    stringBuffer.append(TEXT_63);
d1725 1
a1725 1
    stringBuffer.append(TEXT_64);
d1727 1
a1727 1
    stringBuffer.append(TEXT_65);
d1729 1
a1729 1
    stringBuffer.append(TEXT_66);
d1736 1
a1736 1
    stringBuffer.append(TEXT_67);
d1738 1
a1738 1
    stringBuffer.append(TEXT_68);
d1740 1
a1740 1
    stringBuffer.append(TEXT_69);
d1742 1
a1742 1
    stringBuffer.append(TEXT_70);
d1746 1
a1746 1
    stringBuffer.append(TEXT_71);
d1748 1
a1748 1
    stringBuffer.append(TEXT_72);
d1750 1
a1750 1
    stringBuffer.append(TEXT_73);
d1752 1
a1752 1
    stringBuffer.append(TEXT_74);
d1754 1
a1754 1
    stringBuffer.append(TEXT_75);
d1758 1
a1758 1
    stringBuffer.append(TEXT_76);
d1763 1
a1763 1
    stringBuffer.append(TEXT_77);
d1765 1
a1765 1
    stringBuffer.append(TEXT_78);
d1767 1
a1767 1
    stringBuffer.append(TEXT_79);
d1769 1
a1769 1
    stringBuffer.append(TEXT_80);
d1773 1
a1773 1
    stringBuffer.append(TEXT_81);
d1775 1
a1775 1
    stringBuffer.append(TEXT_82);
d1777 1
a1777 1
    stringBuffer.append(TEXT_83);
d1779 1
a1779 1
    stringBuffer.append(TEXT_84);
d1781 1
a1781 1
    stringBuffer.append(TEXT_85);
d1786 1
a1786 1
    stringBuffer.append(TEXT_86);
d1790 9
a1798 1
    stringBuffer.append(TEXT_87);
a1799 6
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
d1801 1
a1801 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1803 1
a1803 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1805 1
a1805 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d1807 3
a1809 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1811 1
a1811 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1813 1
a1813 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1815 1
a1815 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d1817 1
a1817 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1819 1
a1819 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d1821 4
a1824 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1826 1
a1826 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d1828 2
a1829 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d1831 1
a1831 1
    stringBuffer.append(genNode.getEditPartClassName());
d1833 1
a1833 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d1835 1
a1835 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.GraphicalNodeEditPolicy"));
d1837 3
a1839 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1841 1
a1841 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
d1843 2
d1846 1
a1846 1
if (!myHelper.hasIncomingLinks()) {
d1848 1
a1848 1
    stringBuffer.append(TEXT_109);
d1850 1
a1850 1
    stringBuffer.append(TEXT_110);
d1852 1
a1852 1
} else {
a1853 2
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d1855 1
a1855 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d1857 1
a1857 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1859 1
a1859 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d1861 1
a1861 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
a1862 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a1863 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1865 1
a1865 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1867 2
a1869 2
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1871 1
a1871 23
    
	for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
		GenLink genLink = (GenLink)it.next();
		if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
			continue;
		}
		GenClass incomingClass;
		String reconnectCommandNameInfix;
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
			reconnectCommandNameInfix = modelFacet.getMetaClass().getName();
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
			incomingClass = metaFeature.getTypeGenClass();
			reconnectCommandNameInfix = metaFeature.getFeatureAccessorName();
		} else {
			continue;
		}
		if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
			continue;
		}

d1873 1
a1873 1
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
d1875 1
a1875 2
    stringBuffer.append(reconnectCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
d1877 1
a1877 3
    
	}

d1879 1
a1879 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1881 1
a1881 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
d1883 1
a1883 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d1885 1
a1885 3
    
}

d1887 1
a1887 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1889 1
a1889 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
d1891 1
a1891 3
    
if (!myHelper.hasOutgoingLinks()) {

d1893 1
a1893 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1895 1
a1895 3
    
} else {

d1897 1
a1897 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d1899 1
a1899 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d1901 1
a1901 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1903 1
a1903 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d1905 1
a1905 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d1907 1
a1907 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1909 3
a1911 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d1913 1
a1913 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1915 1
a1915 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d1917 1
a1917 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1919 145
d2089 1
a2089 1
    stringBuffer.append(TEXT_145);
d2091 1
a2091 1
    stringBuffer.append(TEXT_146);
d2094 1
a2094 1
    stringBuffer.append(TEXT_147);
d2098 1
a2098 1
    stringBuffer.append(TEXT_148);
d2100 1
a2100 1
    stringBuffer.append(TEXT_149);
d2102 1
a2102 1
    stringBuffer.append(TEXT_150);
d2104 1
a2104 1
    stringBuffer.append(TEXT_151);
d2108 1
a2108 1
    stringBuffer.append(TEXT_152);
d2110 1
a2110 1
    stringBuffer.append(TEXT_153);
d2112 1
a2112 1
    stringBuffer.append(TEXT_154);
d2114 1
a2114 1
    stringBuffer.append(TEXT_155);
d2116 1
a2116 1
    stringBuffer.append(TEXT_156);
d2118 1
a2118 1
    stringBuffer.append(TEXT_157);
d2120 1
a2120 1
    stringBuffer.append(TEXT_158);
d2122 1
a2122 1
    stringBuffer.append(TEXT_159);
d2124 1
a2124 1
    stringBuffer.append(TEXT_160);
d2150 1
a2150 1
    stringBuffer.append(TEXT_161);
d2152 1
a2152 1
    stringBuffer.append(TEXT_162);
d2155 1
a2155 1
    stringBuffer.append(TEXT_163);
d2159 1
a2159 1
    stringBuffer.append(TEXT_164);
d2161 1
a2161 1
    stringBuffer.append(TEXT_165);
d2163 1
a2163 1
    stringBuffer.append(TEXT_166);
d2165 1
a2165 1
    stringBuffer.append(TEXT_167);
d2167 1
a2167 1
    stringBuffer.append(TEXT_168);
d2169 1
a2169 1
    stringBuffer.append(TEXT_169);
d2171 1
a2171 1
    stringBuffer.append(TEXT_170);
d2173 1
a2173 1
    stringBuffer.append(TEXT_171);
d2175 1
a2175 1
    stringBuffer.append(TEXT_172);
d2177 1
a2177 1
    stringBuffer.append(TEXT_173);
d2179 1
a2179 1
    stringBuffer.append(TEXT_174);
d2181 1
a2181 1
    stringBuffer.append(TEXT_175);
d2183 1
a2183 1
    stringBuffer.append(TEXT_176);
d2185 1
a2185 1
    stringBuffer.append(TEXT_177);
d2209 1
a2209 1
    stringBuffer.append(TEXT_178);
d2211 1
a2211 1
    stringBuffer.append(TEXT_179);
d2214 1
a2214 1
    stringBuffer.append(TEXT_180);
d2218 1
a2218 1
    stringBuffer.append(TEXT_181);
d2220 1
a2220 1
    stringBuffer.append(TEXT_182);
d2222 1
a2222 1
    stringBuffer.append(TEXT_183);
d2224 1
a2224 1
    stringBuffer.append(TEXT_184);
d2226 1
a2226 1
    stringBuffer.append(TEXT_185);
d2228 8
a2235 1
    stringBuffer.append(TEXT_186);
d2239 1
a2239 1
    stringBuffer.append(TEXT_187);
d2243 1
a2243 1
    stringBuffer.append(TEXT_188);
d2245 1
a2245 1
    stringBuffer.append(TEXT_189);
d2247 1
a2247 1
    stringBuffer.append(TEXT_190);
d2249 1
a2249 1
    stringBuffer.append(TEXT_191);
d2251 1
a2251 1
    stringBuffer.append(TEXT_192);
d2253 9
a2261 1
    stringBuffer.append(TEXT_193);
d2263 15
a2277 1
    stringBuffer.append(TEXT_194);
d2279 1
a2279 1
    stringBuffer.append(TEXT_195);
d2289 1
a2289 1
    stringBuffer.append(TEXT_196);
d2291 1
a2291 1
    stringBuffer.append(TEXT_197);
d2293 1
a2293 1
    stringBuffer.append(TEXT_198);
d2295 1
a2295 1
    stringBuffer.append(TEXT_199);
d2297 1
a2297 1
    stringBuffer.append(TEXT_200);
d2299 1
a2299 1
    stringBuffer.append(TEXT_201);
d2303 1
a2303 1
    stringBuffer.append(TEXT_202);
d2305 1
a2305 1
    stringBuffer.append(TEXT_203);
d2307 1
a2307 1
    stringBuffer.append(TEXT_204);
d2309 1
a2309 1
    stringBuffer.append(TEXT_205);
d2311 1
a2311 1
    stringBuffer.append(TEXT_206);
d2313 1
a2313 1
    stringBuffer.append(TEXT_207);
d2315 1
a2315 1
    stringBuffer.append(TEXT_208);
d2317 1
a2317 1
    stringBuffer.append(TEXT_209);
d2319 1
a2319 1
    stringBuffer.append(TEXT_210);
d2321 1
a2321 1
    stringBuffer.append(TEXT_211);
d2323 1
a2323 1
    stringBuffer.append(TEXT_212);
d2325 1
a2325 1
    stringBuffer.append(TEXT_213);
d2327 1
a2327 1
    stringBuffer.append(TEXT_214);
d2329 1
a2329 1
    stringBuffer.append(TEXT_215);
d2331 1
a2331 1
    stringBuffer.append(TEXT_216);
d2333 1
a2333 1
    stringBuffer.append(TEXT_217);
d2335 1
a2335 1
    stringBuffer.append(TEXT_218);
d2337 1
a2337 1
    stringBuffer.append(TEXT_219);
d2339 1
a2339 1
    stringBuffer.append(TEXT_220);
d2341 1
a2341 1
    stringBuffer.append(TEXT_221);
d2343 1
a2343 1
    stringBuffer.append(TEXT_222);
d2345 1
a2345 1
    stringBuffer.append(TEXT_223);
d2347 1
a2347 1
    stringBuffer.append(TEXT_224);
d2349 1
a2349 1
    stringBuffer.append(TEXT_225);
d2354 1
a2354 1
    stringBuffer.append(TEXT_226);
d2356 1
a2356 1
    stringBuffer.append(TEXT_227);
d2358 1
a2358 1
    stringBuffer.append(TEXT_228);
d2360 1
a2360 1
    stringBuffer.append(TEXT_229);
d2362 1
a2362 1
    stringBuffer.append(TEXT_230);
d2364 1
a2364 1
    stringBuffer.append(TEXT_231);
d2366 1
a2366 1
    stringBuffer.append(TEXT_232);
d2368 1
a2368 1
    stringBuffer.append(TEXT_233);
d2370 1
a2370 1
    stringBuffer.append(TEXT_234);
d2372 1
a2372 1
    stringBuffer.append(TEXT_235);
d2374 1
a2374 1
    stringBuffer.append(TEXT_236);
d2378 1
a2378 1
    stringBuffer.append(TEXT_237);
d2380 1
a2380 1
    stringBuffer.append(TEXT_238);
d2388 1
a2388 1
    stringBuffer.append(TEXT_239);
d2390 1
a2390 1
    stringBuffer.append(TEXT_240);
d2392 1
a2392 1
    stringBuffer.append(TEXT_241);
d2394 1
a2394 1
    stringBuffer.append(TEXT_242);
d2396 1
a2396 1
    stringBuffer.append(TEXT_243);
d2405 1
a2405 1
    stringBuffer.append(TEXT_244);
d2407 1
a2407 1
    stringBuffer.append(TEXT_245);
d2409 1
a2409 1
    stringBuffer.append(TEXT_246);
d2411 1
a2411 1
    stringBuffer.append(TEXT_247);
d2413 1
a2413 1
    stringBuffer.append(TEXT_248);
d2417 1
a2417 1
    stringBuffer.append(TEXT_249);
d2425 1
a2425 1
    stringBuffer.append(TEXT_250);
d2427 1
a2427 1
    stringBuffer.append(TEXT_251);
d2429 1
a2429 1
    stringBuffer.append(TEXT_252);
d2431 1
a2431 1
    stringBuffer.append(TEXT_253);
d2433 1
a2433 1
    stringBuffer.append(TEXT_254);
d2437 1
a2437 1
    stringBuffer.append(TEXT_255);
d2441 1
a2441 1
    stringBuffer.append(TEXT_256);
d2443 1
a2443 1
    stringBuffer.append(TEXT_257);
d2455 1
a2455 1
    stringBuffer.append(TEXT_258);
d2457 1
a2457 1
    stringBuffer.append(TEXT_259);
d2459 1
a2459 1
    stringBuffer.append(TEXT_260);
d2461 1
a2461 1
    stringBuffer.append(TEXT_261);
d2463 1
a2463 1
    stringBuffer.append(TEXT_262);
d2465 1
a2465 1
    stringBuffer.append(TEXT_263);
d2467 1
a2467 1
    stringBuffer.append(TEXT_264);
d2471 1
a2471 1
    stringBuffer.append(TEXT_265);
d2473 1
a2473 1
    stringBuffer.append(TEXT_266);
d2475 1
a2475 1
    stringBuffer.append(TEXT_267);
d2477 1
a2477 1
    stringBuffer.append(TEXT_268);
d2479 1
a2479 1
    stringBuffer.append(TEXT_269);
d2481 1
a2481 1
    stringBuffer.append(TEXT_270);
d2483 1
a2483 1
    stringBuffer.append(TEXT_271);
d2485 1
a2485 1
    stringBuffer.append(TEXT_272);
d2487 1
a2487 1
    stringBuffer.append(TEXT_273);
d2489 1
a2489 1
    stringBuffer.append(TEXT_274);
d2491 1
a2491 1
    stringBuffer.append(TEXT_275);
d2493 1
a2493 1
    stringBuffer.append(TEXT_276);
d2501 1
a2501 1
    stringBuffer.append(TEXT_277);
d2503 1
a2503 1
    stringBuffer.append(TEXT_278);
d2507 1
a2507 1
    stringBuffer.append(TEXT_279);
d2511 1
a2511 1
    stringBuffer.append(TEXT_280);
d2513 1
a2513 1
    stringBuffer.append(TEXT_281);
d2518 1
a2518 1
    stringBuffer.append(TEXT_282);
d2520 1
a2520 1
    stringBuffer.append(TEXT_283);
d2524 1
a2524 1
    stringBuffer.append(TEXT_284);
d2526 1
a2526 1
    stringBuffer.append(TEXT_285);
d2528 1
a2528 1
    stringBuffer.append(TEXT_286);
d2530 1
a2530 1
    stringBuffer.append(TEXT_287);
d2532 19
a2550 1
    stringBuffer.append(TEXT_288);
d2553 1
a2553 1
if (myHelper.hasExternalLabels() || myHelper.hasFixedChildren()) {
d2555 1
a2555 1
    stringBuffer.append(TEXT_289);
d2557 1
a2557 1
    stringBuffer.append(TEXT_290);
d2561 1
a2561 1
    stringBuffer.append(TEXT_291);
d2563 1
a2563 1
    stringBuffer.append(TEXT_292);
d2565 1
a2565 1
    stringBuffer.append(TEXT_293);
d2570 10
a2579 1
    stringBuffer.append(TEXT_294);
d2583 1
a2583 1
    stringBuffer.append(TEXT_295);
d2585 1
a2585 1
    stringBuffer.append(TEXT_296);
d2589 1
a2589 1
    stringBuffer.append(TEXT_297);
d2591 1
a2591 1
    stringBuffer.append(TEXT_298);
d2593 1
a2593 1
    stringBuffer.append(TEXT_299);
d2598 1
a2598 1
    stringBuffer.append(TEXT_300);
d2601 1
d2603 5
a2607 1
    stringBuffer.append(TEXT_301);
d2609 5
a2613 1
}
d2618 1
a2618 1
    stringBuffer.append(TEXT_302);
d2620 1
a2620 1
    stringBuffer.append(TEXT_303);
d2622 1
a2622 1
    stringBuffer.append(TEXT_304);
d2624 1
a2624 1
    stringBuffer.append(TEXT_305);
d2626 1
a2626 1
    stringBuffer.append(TEXT_306);
d2630 1
a2630 1
    stringBuffer.append(TEXT_307);
d2632 1
a2632 1
    stringBuffer.append(TEXT_308);
d2634 1
a2634 1
    stringBuffer.append(TEXT_309);
d2636 1
a2636 1
    stringBuffer.append(TEXT_310);
d2638 1
a2638 1
    stringBuffer.append(TEXT_311);
d2640 1
a2640 1
    stringBuffer.append(TEXT_312);
d2642 1
a2642 1
    stringBuffer.append(TEXT_313);
d2644 1
a2644 1
    stringBuffer.append(TEXT_314);
d2646 1
a2646 1
    stringBuffer.append(TEXT_315);
d2648 1
a2648 1
    stringBuffer.append(TEXT_316);
d2650 1
a2650 1
    stringBuffer.append(TEXT_317);
d2652 1
a2652 1
    stringBuffer.append(TEXT_318);
d2654 1
a2654 1
    stringBuffer.append(TEXT_319);
d2656 1
a2656 1
    stringBuffer.append(TEXT_320);
d2658 1
a2658 1
    stringBuffer.append(TEXT_321);
d2660 1
a2660 1
    stringBuffer.append(TEXT_322);
d2662 1
a2662 1
    stringBuffer.append(TEXT_323);
d2664 1
a2664 1
    stringBuffer.append(TEXT_324);
d2666 1
a2666 1
    stringBuffer.append(TEXT_325);
d2668 1
a2668 1
    stringBuffer.append(TEXT_326);
d2670 1
a2670 1
    stringBuffer.append(TEXT_327);
d2672 1
a2672 1
    stringBuffer.append(TEXT_328);
d2674 8
a2681 1
    stringBuffer.append(TEXT_329);
d2685 1
a2685 1
    stringBuffer.append(TEXT_330);
d2689 1
a2689 1
    stringBuffer.append(TEXT_331);
d2693 8
a2700 1
    stringBuffer.append(TEXT_332);
d2704 1
a2704 1
    stringBuffer.append(TEXT_333);
d2710 3
d2714 4
a2717 5
    stringBuffer.append(TEXT_334);
    
if (myHelper.containsLinks() || _includeUncontainedLinks) {

    stringBuffer.append(TEXT_335);
d2719 1
a2719 1
    stringBuffer.append(TEXT_336);
d2721 1
a2721 1
    stringBuffer.append(TEXT_337);
d2723 7
a2729 11
    stringBuffer.append(TEXT_338);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_339);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_340);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService"));
    stringBuffer.append(TEXT_341);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.OwnedLinksNotationModelRefresher"));
    stringBuffer.append(TEXT_342);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService"));
    stringBuffer.append(TEXT_343);
d2731 7
a2737 8
	boolean hasConstraintsInContainedLinks = false;
	for (Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeModelFacet typeModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (typeModelFacet != null && typeModelFacet.getMetaClass() != null && typeModelFacet.getModelElementSelector() != null) {
			hasConstraintsInContainedLinks = true;
			break;
		}
d2739 4
a2742 1
	if (hasConstraintsInContainedLinks) {
d2744 1
a2744 1
    stringBuffer.append(TEXT_344);
d2746 1
a2746 1
    stringBuffer.append(TEXT_345);
d2748 1
a2748 1
    stringBuffer.append(TEXT_346);
d2750 1
a2750 1
    stringBuffer.append(TEXT_347);
d2752 1
a2752 2
	}
	if (_includeUncontainedLinks) {
d2754 1
a2754 1
    stringBuffer.append(TEXT_348);
d2756 20
a2775 1
    stringBuffer.append(TEXT_349);
d2777 1
a2777 3
    stringBuffer.append(TEXT_350);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_351);
d2779 5
a2783 11
    stringBuffer.append(TEXT_352);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_353);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_354);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_355);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_356);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_357);
d2785 1
a2785 1
	}
d2787 1
a2787 1
    stringBuffer.append(TEXT_358);
d2789 5
a2793 1
    stringBuffer.append(TEXT_359);
d2795 2
a2796 10
	{
		boolean hasDeclaredFilter = false;
		Set genAffectingFeatures = new LinkedHashSet();
		for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
			if (modelFacet == null) {
				continue;
			}
			GenFeature _feature = modelFacet.getChildMetaFeature();
a2797 1
    stringBuffer.append(TEXT_360);
d2799 1
a2799 11
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
	}
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;
d2801 1
a2801 1
    stringBuffer.append(TEXT_361);
d2803 3
a2805 7
    stringBuffer.append(TEXT_362);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_363);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_364);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_365);
d2808 1
d2810 3
a2812 1
    stringBuffer.append(TEXT_366);
d2814 3
a2816 5
    stringBuffer.append(TEXT_367);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_368);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_369);
d2821 7
a2827 1
			_feature = modelFacet.getSourceMetaFeature();
d2829 3
a2831 1
    stringBuffer.append(TEXT_370);
d2833 1
a2833 7
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
a2834 1
	genAffectingFeatures.add(_feature);
a2835 1
		hasDeclaredFilter = true;
d2837 1
a2837 1
    stringBuffer.append(TEXT_371);
d2839 1
a2839 1
    stringBuffer.append(TEXT_372);
d2841 1
a2841 5
    stringBuffer.append(TEXT_373);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_374);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_375);
d2843 1
a2843 1
	} else {
d2845 1
a2845 7
    stringBuffer.append(TEXT_376);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_377);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_378);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_379);
d2847 1
a2847 1
	}
d2849 7
d2857 4
a2860 10
			_feature = modelFacet.getTargetMetaFeature();

    stringBuffer.append(TEXT_380);
    
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
d2863 1
a2863 3
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;
d2865 12
a2876 9
    stringBuffer.append(TEXT_381);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_382);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_383);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_384);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_385);
d2878 1
a2878 1
	} else {
d2880 4
a2883 7
    stringBuffer.append(TEXT_386);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_387);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_388);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_389);
d2885 1
a2885 1
	}
d2887 3
d2891 1
a2891 4
		}
		for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			GenFeature _feature = ((FeatureModelFacet) nextLink.getModelFacet()).getMetaFeature();
d2893 5
a2897 1
    stringBuffer.append(TEXT_390);
d2899 12
a2910 7
	/*
	 * input: 
	 * 		_feature: GenFeature
	 * 		genAffectingFeatures : Set
	 */
	if (_feature == null || genAffectingFeatures.contains(_feature)) {
		continue;
d2912 2
a2913 3
	genAffectingFeatures.add(_feature);
	if (!hasDeclaredFilter) {
		hasDeclaredFilter = true;
d2915 9
a2923 19
    stringBuffer.append(TEXT_391);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_392);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_393);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_394);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_395);
    
	} else {

    stringBuffer.append(TEXT_396);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_397);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_398);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_399);
d2926 5
d2932 7
d2940 1
a2940 3
		}
		if (hasConstraintsInContainedLinks) {
			if (hasDeclaredFilter) {
d2942 5
a2946 1
    stringBuffer.append(TEXT_400);
d2948 1
a2948 2
			} else {
				hasDeclaredFilter = true;
d2950 3
a2952 3
    stringBuffer.append(TEXT_401);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_402);
d2954 2
a2955 4
			}
		}
		if (_includeUncontainedLinks) {
			if (hasDeclaredFilter) {
d2957 1
a2957 1
    stringBuffer.append(TEXT_403);
d2959 4
a2962 2
			} else {
				hasDeclaredFilter = true;
d2964 3
a2966 3
    stringBuffer.append(TEXT_404);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_405);
d2968 1
a2968 3
			}
		}
		if (!hasDeclaredFilter) {
d2970 3
a2972 5
    stringBuffer.append(TEXT_406);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_407);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_408);
a2974 1
	}	//local declaration of hasDeclaredFilter
d2976 1
a2976 3
    stringBuffer.append(TEXT_409);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand"));
    stringBuffer.append(TEXT_410);
d2978 1
a2978 13
    stringBuffer.append(TEXT_411);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_412);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor"));
    stringBuffer.append(TEXT_413);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_414);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_415);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_416);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_417);
d2980 1
a2980 6
	for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (modelFacet == null) {
			continue;
		}
d2982 1
a2982 7
    stringBuffer.append(TEXT_418);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_419);
    stringBuffer.append(importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_420);
    stringBuffer.append(importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_421);
d2984 1
a2984 3
	}
	for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
d2986 1
a2986 5
    stringBuffer.append(TEXT_422);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_423);
    stringBuffer.append(importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_424);
d2988 1
d2990 1
d2992 1
a2992 11
    stringBuffer.append(TEXT_425);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_426);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_427);
    stringBuffer.append(TEXT_428);
    stringBuffer.append(TEXT_429);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_430);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_431);
a2993 16
Map genFeature2genLinkMap = new LinkedHashMap();
for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
	GenFeature metaFeature = modelFacet.getChildMetaFeature();
	if (!genFeature2genLinkMap.containsKey(metaFeature)) {
		genFeature2genLinkMap.put(metaFeature, new ArrayList());
	}
	((Collection) genFeature2genLinkMap.get(metaFeature)).add(genLink);
}
Map genFeature2featureGenLinkMap = new LinkedHashMap();
for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
	if (!genFeature2featureGenLinkMap.containsKey(metaFeature)) {
		genFeature2featureGenLinkMap.put(metaFeature, new ArrayList());
d2995 1
a2995 3
	((Collection) genFeature2featureGenLinkMap.get(metaFeature)).add(genLink);
}
if (!genFeature2genLinkMap.isEmpty() || !genFeature2featureGenLinkMap.isEmpty()) {
d2997 1
a2997 7
    stringBuffer.append(TEXT_432);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_433);
    stringBuffer.append(_getViewCode);
    stringBuffer.append(TEXT_434);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_435);
d2999 1
a3000 1
if (!genFeature2genLinkMap.isEmpty()) {
d3002 1
a3002 1
    stringBuffer.append(TEXT_436);
a3004 5
for (Iterator entries = genFeature2genLinkMap.entrySet().iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature metaFeature = (GenFeature) nextEntry.getKey();
	Collection genLinksCollection = (Collection) nextEntry.getValue();
	if (metaFeature.isListType()) {
d3006 403
a3408 1
    stringBuffer.append(TEXT_437);
d3410 1
a3410 1
    stringBuffer.append(TEXT_438);
d3412 1
a3412 1
    stringBuffer.append(TEXT_439);
d3414 1
a3414 1
    stringBuffer.append(TEXT_440);
d3418 1
a3418 1
    stringBuffer.append(TEXT_441);
d3420 1
a3420 1
    stringBuffer.append(TEXT_442);
d3422 1
a3422 1
    stringBuffer.append(TEXT_443);
d3426 1
a3426 1
    stringBuffer.append(TEXT_444);
d3428 1
a3428 1
    stringBuffer.append(TEXT_445);
d3433 1
a3433 1
    stringBuffer.append(TEXT_446);
d3441 1
a3441 1
    stringBuffer.append(TEXT_447);
d3443 1
a3443 1
    stringBuffer.append(TEXT_448);
d3447 1
a3447 1
    stringBuffer.append(TEXT_449);
d3449 1
a3449 1
    stringBuffer.append(TEXT_450);
d3454 1
a3454 1
    stringBuffer.append(TEXT_451);
d3456 1
a3456 1
    stringBuffer.append(TEXT_452);
d3458 1
a3458 1
    stringBuffer.append(TEXT_453);
d3460 1
a3460 1
    stringBuffer.append(TEXT_454);
d3464 1
a3464 1
    stringBuffer.append(TEXT_455);
d3466 1
a3466 1
    stringBuffer.append(TEXT_456);
d3468 1
a3468 1
    stringBuffer.append(TEXT_457);
d3473 1
a3473 1
    stringBuffer.append(TEXT_458);
d3475 1
a3475 1
    stringBuffer.append(TEXT_459);
d3477 1
a3477 1
    stringBuffer.append(TEXT_460);
d3479 1
a3479 1
    stringBuffer.append(TEXT_461);
d3483 1
a3483 1
    stringBuffer.append(TEXT_462);
d3485 1
a3485 1
    stringBuffer.append(TEXT_463);
d3487 1
a3487 1
    stringBuffer.append(TEXT_464);
d3491 1
a3491 1
    stringBuffer.append(TEXT_465);
d3493 1
a3493 1
    stringBuffer.append(TEXT_466);
d3497 1
a3497 1
    stringBuffer.append(TEXT_467);
d3501 1
a3501 1
    stringBuffer.append(TEXT_468);
d3509 1
a3509 1
    stringBuffer.append(TEXT_469);
d3514 1
a3514 1
    stringBuffer.append(TEXT_470);
d3524 1
a3524 1
    stringBuffer.append(TEXT_471);
d3526 1
a3526 1
    stringBuffer.append(TEXT_472);
d3528 1
a3528 1
    stringBuffer.append(TEXT_473);
d3530 1
a3530 1
    stringBuffer.append(TEXT_474);
d3534 1
a3534 1
    stringBuffer.append(TEXT_475);
d3536 1
a3536 1
    stringBuffer.append(TEXT_476);
d3538 1
a3538 1
    stringBuffer.append(TEXT_477);
d3542 1
a3542 1
    stringBuffer.append(TEXT_478);
d3547 1
a3547 1
    stringBuffer.append(TEXT_479);
d3549 1
a3549 1
    stringBuffer.append(TEXT_480);
d3551 1
a3551 1
    stringBuffer.append(TEXT_481);
d3555 1
a3555 1
    stringBuffer.append(TEXT_482);
d3559 1
a3559 1
    stringBuffer.append(TEXT_483);
d3564 1
a3564 1
    stringBuffer.append(TEXT_484);
d3566 1
a3566 1
    stringBuffer.append(TEXT_485);
d3568 1
a3568 1
    stringBuffer.append(TEXT_486);
d3570 1
a3570 1
    stringBuffer.append(TEXT_487);
d3572 1
a3572 1
    stringBuffer.append(TEXT_488);
d3574 1
a3574 1
    stringBuffer.append(TEXT_489);
d3576 1
a3576 1
    stringBuffer.append(TEXT_490);
d3578 1
a3578 1
    stringBuffer.append(TEXT_491);
d3580 1
a3580 1
    stringBuffer.append(TEXT_492);
d3584 1
a3584 1
    stringBuffer.append(TEXT_493);
d3586 1
a3586 1
    stringBuffer.append(TEXT_494);
d3588 1
a3588 1
    stringBuffer.append(TEXT_495);
d3593 1
a3593 1
    stringBuffer.append(TEXT_496);
d3595 1
a3595 1
    stringBuffer.append(TEXT_497);
d3597 1
a3597 1
    stringBuffer.append(TEXT_498);
d3602 1
a3602 1
    stringBuffer.append(TEXT_499);
d3604 1
a3604 1
    stringBuffer.append(TEXT_500);
d3608 1
a3608 1
    stringBuffer.append(TEXT_501);
d3612 1
a3612 1
    stringBuffer.append(TEXT_502);
d3616 1
a3616 1
    stringBuffer.append(TEXT_503);
d3623 1
a3623 1
    stringBuffer.append(TEXT_504);
d3627 1
a3627 1
    stringBuffer.append(TEXT_505);
d3629 1
a3629 1
    stringBuffer.append(TEXT_506);
d3631 1
a3631 1
    stringBuffer.append(TEXT_507);
d3636 1
a3636 1
    stringBuffer.append(TEXT_508);
d3638 1
a3638 1
    stringBuffer.append(TEXT_509);
d3642 1
a3642 1
    stringBuffer.append(TEXT_510);
d3646 1
a3646 1
    stringBuffer.append(TEXT_511);
d3648 1
a3648 1
    stringBuffer.append(TEXT_512);
d3650 1
a3650 1
    stringBuffer.append(TEXT_513);
d3652 1
a3652 1
    stringBuffer.append(TEXT_514);
d3654 1
a3654 1
    stringBuffer.append(TEXT_515);
d3656 1
a3656 1
    stringBuffer.append(TEXT_516);
d3658 1
a3658 1
    stringBuffer.append(TEXT_517);
d3660 1
a3660 1
    stringBuffer.append(TEXT_518);
d3662 1
a3662 1
    stringBuffer.append(TEXT_519);
d3664 1
a3664 1
    stringBuffer.append(TEXT_520);
d3666 1
a3666 1
    stringBuffer.append(TEXT_521);
d3668 1
a3668 1
    stringBuffer.append(TEXT_522);
d3675 3
a3677 3
    stringBuffer.append(TEXT_523);
    stringBuffer.append(TEXT_524);
    stringBuffer.append(TEXT_525);
d3679 1
a3679 1
    stringBuffer.append(TEXT_526);
d3681 3
a3683 3
    stringBuffer.append(TEXT_527);
    stringBuffer.append(TEXT_528);
    stringBuffer.append(TEXT_529);
d3685 1
a3685 1
    stringBuffer.append(TEXT_530);
d3687 1
a3687 1
    stringBuffer.append(TEXT_531);
d3689 1
a3689 1
    stringBuffer.append(TEXT_532);
d3693 1
a3693 1
    stringBuffer.append(TEXT_533);
d3701 1
a3701 1
    stringBuffer.append(TEXT_534);
d3705 1
a3705 1
    stringBuffer.append(TEXT_535);
d3707 1
a3707 1
    stringBuffer.append(TEXT_536);
d3709 1
a3709 1
    stringBuffer.append(TEXT_537);
d3711 1
a3711 1
    stringBuffer.append(TEXT_538);
d3713 1
a3713 1
    stringBuffer.append(TEXT_539);
d3715 1
a3715 1
    stringBuffer.append(TEXT_540);
d3717 1
a3717 1
    stringBuffer.append(TEXT_541);
d3719 1
a3719 1
    stringBuffer.append(TEXT_542);
d3721 1
a3721 1
    stringBuffer.append(TEXT_543);
d3723 1
a3723 1
    stringBuffer.append(TEXT_544);
d3725 1
a3725 1
    stringBuffer.append(TEXT_545);
d3727 1
a3727 1
    stringBuffer.append(TEXT_546);
d3731 1
a3731 1
    stringBuffer.append(TEXT_547);
d3735 1
a3735 1
    stringBuffer.append(TEXT_548);
d3737 1
a3737 1
    stringBuffer.append(TEXT_549);
d3741 3
a3743 3
    stringBuffer.append(TEXT_550);
    stringBuffer.append(TEXT_551);
    stringBuffer.append(TEXT_552);
d3745 1
a3745 1
    stringBuffer.append(TEXT_553);
d3747 1
a3747 1
    stringBuffer.append(TEXT_554);
d3749 1
a3749 1
    stringBuffer.append(TEXT_555);
d3751 1
a3751 1
    stringBuffer.append(TEXT_556);
d3753 1
a3753 1
    stringBuffer.append(TEXT_557);
d3755 1
a3755 1
    stringBuffer.append(TEXT_558);
d3757 1
a3757 1
    stringBuffer.append(TEXT_559);
d3759 1
a3759 1
    stringBuffer.append(TEXT_560);
d3761 1
a3761 1
    stringBuffer.append(TEXT_561);
d3763 1
a3763 1
    stringBuffer.append(TEXT_562);
d3765 1
a3765 1
    stringBuffer.append(TEXT_563);
d3767 1
a3767 1
    stringBuffer.append(TEXT_564);
d3769 1
a3769 1
    stringBuffer.append(TEXT_565);
d3771 1
a3771 1
    stringBuffer.append(TEXT_566);
d3773 1
a3773 1
    stringBuffer.append(TEXT_567);
d3775 3
a3777 3
    stringBuffer.append(TEXT_568);
    stringBuffer.append(TEXT_569);
    stringBuffer.append(TEXT_570);
d3779 1
a3779 1
    stringBuffer.append(TEXT_571);
d3781 1
a3781 1
    stringBuffer.append(TEXT_572);
d3783 1
a3783 1
    stringBuffer.append(TEXT_573);
d3785 13
a3797 3
    stringBuffer.append(TEXT_574);
    stringBuffer.append(TEXT_575);
    stringBuffer.append(TEXT_576);
d3799 1
a3799 1
    stringBuffer.append(TEXT_577);
d3801 1
a3801 3
    stringBuffer.append(TEXT_578);
    stringBuffer.append(TEXT_579);
    stringBuffer.append(TEXT_580);
d3803 3
a3805 1
    stringBuffer.append(TEXT_581);
d3807 3
a3809 1
    stringBuffer.append(TEXT_582);
d3811 3
a3813 1
    stringBuffer.append(TEXT_583);
d3815 3
a3817 1
    stringBuffer.append(TEXT_584);
d3819 1
a3819 3
    stringBuffer.append(TEXT_585);
    stringBuffer.append(TEXT_586);
    stringBuffer.append(TEXT_587);
d3821 1
a3821 3
    stringBuffer.append(TEXT_588);
    stringBuffer.append(TEXT_589);
    stringBuffer.append(TEXT_590);
d3823 1
a3823 3
    stringBuffer.append(TEXT_591);
    stringBuffer.append(TEXT_592);
    stringBuffer.append(TEXT_593);
d3825 3
a3827 3
    stringBuffer.append(TEXT_594);
    stringBuffer.append(TEXT_595);
    stringBuffer.append(TEXT_596);
d3829 1
a3829 1
    stringBuffer.append(TEXT_597);
d3831 193
a4023 11
    stringBuffer.append(TEXT_598);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_599);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_600);
    stringBuffer.append(TEXT_601);
    stringBuffer.append(TEXT_602);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_603);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_604);
d4025 1
d4052 1
a4052 1
    stringBuffer.append(TEXT_605);
d4055 1
a4055 1
    stringBuffer.append(TEXT_606);
d4057 1
a4057 1
    stringBuffer.append(TEXT_607);
d4059 1
a4059 1
    stringBuffer.append(TEXT_608);
d4061 1
a4061 1
    stringBuffer.append(TEXT_609);
d4063 1
a4063 1
    stringBuffer.append(TEXT_610);
d4065 1
a4065 1
    stringBuffer.append(TEXT_611);
d4068 1
a4068 1
    stringBuffer.append(TEXT_612);
d4070 1
a4070 1
    stringBuffer.append(TEXT_613);
d4072 1
a4072 1
    stringBuffer.append(TEXT_614);
d4074 1
a4074 1
    stringBuffer.append(TEXT_615);
d4077 1
a4077 1
    stringBuffer.append(TEXT_616);
d4079 1
a4079 1
    stringBuffer.append(TEXT_617);
d4081 1
a4081 1
    stringBuffer.append(TEXT_618);
d4085 1
a4085 1
    stringBuffer.append(TEXT_619);
d4087 1
a4087 1
    stringBuffer.append(TEXT_620);
d4089 1
a4089 1
    stringBuffer.append(TEXT_621);
d4091 1
a4091 1
    stringBuffer.append(TEXT_622);
d4093 1
a4093 1
    stringBuffer.append(TEXT_623);
d4095 1
a4095 1
    stringBuffer.append(TEXT_624);
d4097 1
a4097 1
    stringBuffer.append(TEXT_625);
d4101 1
a4101 1
    stringBuffer.append(TEXT_626);
d4105 1
a4105 1
    stringBuffer.append(TEXT_627);
d4112 1
a4112 1
    stringBuffer.append(TEXT_628);
d4116 1
a4116 1
    stringBuffer.append(TEXT_629);
d4118 1
a4118 1
    stringBuffer.append(TEXT_630);
d4120 1
a4120 1
    stringBuffer.append(TEXT_631);
d4122 1
a4122 1
    stringBuffer.append(TEXT_632);
d4124 1
a4124 1
    stringBuffer.append(TEXT_633);
d4132 1
a4132 1
    stringBuffer.append(TEXT_634);
d4138 1
a4138 1
    stringBuffer.append(TEXT_635);
d4140 1
a4140 1
    stringBuffer.append(TEXT_636);
d4142 1
a4142 1
    stringBuffer.append(TEXT_637);
d4146 1
a4146 1
    stringBuffer.append(TEXT_638);
d4148 1
a4148 1
    stringBuffer.append(TEXT_639);
d4150 1
a4150 1
    stringBuffer.append(TEXT_640);
d4152 1
a4152 1
    stringBuffer.append(TEXT_641);
d4154 1
a4154 1
    stringBuffer.append(TEXT_642);
d4169 1
a4169 1
    stringBuffer.append(TEXT_643);
d4175 1
a4175 1
    stringBuffer.append(TEXT_644);
d4177 1
a4177 1
    stringBuffer.append(TEXT_645);
d4179 1
a4179 1
    stringBuffer.append(TEXT_646);
d4183 1
a4183 1
    stringBuffer.append(TEXT_647);
d4185 1
a4185 1
    stringBuffer.append(TEXT_648);
d4187 1
a4187 1
    stringBuffer.append(TEXT_649);
d4189 1
a4189 1
    stringBuffer.append(TEXT_650);
d4191 1
a4191 1
    stringBuffer.append(TEXT_651);
d4205 1
a4205 1
    stringBuffer.append(TEXT_652);
d4209 1
a4209 1
    stringBuffer.append(TEXT_653);
d4211 1
a4211 1
    stringBuffer.append(TEXT_654);
d4213 1
a4213 1
    stringBuffer.append(TEXT_655);
d4215 1
a4215 1
    stringBuffer.append(TEXT_656);
d4222 1
a4222 1
    stringBuffer.append(TEXT_657);
d4232 1
a4232 1
    stringBuffer.append(TEXT_658);
d4238 1
a4238 1
    stringBuffer.append(TEXT_659);
d4240 1
a4240 1
    stringBuffer.append(TEXT_660);
d4242 1
a4242 1
    stringBuffer.append(TEXT_661);
d4246 1
a4246 1
    stringBuffer.append(TEXT_662);
d4248 1
a4248 1
    stringBuffer.append(TEXT_663);
d4250 1
a4250 1
    stringBuffer.append(TEXT_664);
d4252 1
a4252 1
    stringBuffer.append(TEXT_665);
d4254 1
a4254 1
    stringBuffer.append(TEXT_666);
d4265 1
a4265 1
    stringBuffer.append(TEXT_667);
d4269 1
a4269 1
    stringBuffer.append(TEXT_668);
d4271 1
a4271 1
    stringBuffer.append(TEXT_669);
d4273 1
a4273 1
    stringBuffer.append(TEXT_670);
d4275 1
a4275 1
    stringBuffer.append(TEXT_671);
d4282 1
a4282 1
    stringBuffer.append(TEXT_672);
d4286 1
a4286 1
    stringBuffer.append(TEXT_673);
d4290 1
a4290 1
    stringBuffer.append(TEXT_674);
d4292 1
a4292 1
    stringBuffer.append(TEXT_675);
d4294 1
a4294 1
    stringBuffer.append(TEXT_676);
d4296 1
a4296 1
    stringBuffer.append(TEXT_677);
d4298 1
a4298 1
    stringBuffer.append(TEXT_678);
d4300 1
a4300 1
    stringBuffer.append(TEXT_679);
d4302 1
a4302 1
    stringBuffer.append(TEXT_680);
d4321 1
a4321 1
    stringBuffer.append(TEXT_681);
d4323 1
a4323 1
    stringBuffer.append(TEXT_682);
d4325 1
a4325 1
    stringBuffer.append(TEXT_683);
d4327 1
a4327 1
    stringBuffer.append(TEXT_684);
d4329 1
a4329 1
    stringBuffer.append(TEXT_685);
d4331 1
a4331 1
    stringBuffer.append(TEXT_686);
d4333 1
a4333 1
    stringBuffer.append(TEXT_687);
d4339 1
a4339 1
    stringBuffer.append(TEXT_688);
d4341 1
a4341 1
    stringBuffer.append(TEXT_689);
d4345 1
a4345 1
    stringBuffer.append(TEXT_690);
d4347 1
a4347 1
    stringBuffer.append(TEXT_691);
d4349 1
a4349 1
    stringBuffer.append(TEXT_692);
d4353 1
a4353 1
    stringBuffer.append(TEXT_693);
d4355 1
a4355 1
    stringBuffer.append(TEXT_694);
d4357 1
a4357 1
    stringBuffer.append(TEXT_695);
d4359 1
a4359 1
    stringBuffer.append(TEXT_696);
d4365 1
a4365 1
    stringBuffer.append(TEXT_697);
d4367 1
a4367 1
    stringBuffer.append(TEXT_698);
d4369 1
a4369 1
    stringBuffer.append(TEXT_699);
d4371 1
a4371 1
    stringBuffer.append(TEXT_700);
d4375 1
a4375 1
    stringBuffer.append(TEXT_701);
d4377 1
a4377 1
    stringBuffer.append(TEXT_702);
d4379 1
a4379 1
    stringBuffer.append(TEXT_703);
d4381 1
a4381 1
    stringBuffer.append(TEXT_704);
d4383 1
a4383 1
    stringBuffer.append(TEXT_705);
d4387 1
a4387 1
    stringBuffer.append(TEXT_706);
d4389 1
a4389 1
    stringBuffer.append(TEXT_707);
d4391 1
a4391 1
    stringBuffer.append(TEXT_708);
d4393 1
a4393 1
    stringBuffer.append(TEXT_709);
d4397 1
a4397 1
    stringBuffer.append(TEXT_710);
d4402 1
a4402 1
    stringBuffer.append(TEXT_711);
d4404 1
a4404 1
    stringBuffer.append(TEXT_712);
d4406 1
a4406 1
    stringBuffer.append(TEXT_713);
d4408 1
a4408 1
    stringBuffer.append(TEXT_714);
d4410 1
a4410 1
    stringBuffer.append(TEXT_715);
d4412 1
a4412 1
    stringBuffer.append(TEXT_716);
d4414 1
a4414 1
    stringBuffer.append(TEXT_717);
d4418 1
a4418 1
    stringBuffer.append(TEXT_718);
d4420 1
a4420 1
    stringBuffer.append(TEXT_719);
d4422 1
a4422 1
    stringBuffer.append(TEXT_720);
d4424 1
a4424 1
    stringBuffer.append(TEXT_721);
d4432 1
a4432 1
    stringBuffer.append(TEXT_722);
d4434 1
a4434 1
    stringBuffer.append(TEXT_723);
d4436 1
a4436 1
    stringBuffer.append(TEXT_724);
d4438 1
a4438 1
    stringBuffer.append(TEXT_725);
d4440 1
a4440 1
    stringBuffer.append(TEXT_726);
d4442 1
a4442 1
    stringBuffer.append(TEXT_727);
d4444 1
a4444 1
    stringBuffer.append(TEXT_728);
d4448 1
a4448 1
    stringBuffer.append(TEXT_729);
d4450 1
a4450 1
    stringBuffer.append(TEXT_730);
d4452 1
a4452 1
    stringBuffer.append(TEXT_731);
d4454 1
a4454 1
    stringBuffer.append(TEXT_732);
d4456 1
a4456 1
    stringBuffer.append(TEXT_733);
d4458 1
a4458 1
    stringBuffer.append(TEXT_734);
d4460 1
a4460 1
    stringBuffer.append(TEXT_735);
d4462 1
a4462 1
    stringBuffer.append(TEXT_736);
d4467 2
a4468 2
    stringBuffer.append(TEXT_737);
    stringBuffer.append(TEXT_738);
d4472 1
a4472 1
    stringBuffer.append(TEXT_739);
d4474 1
a4474 1
    stringBuffer.append(TEXT_740);
d4476 1
a4476 1
    stringBuffer.append(TEXT_741);
d4478 1
a4478 1
    stringBuffer.append(TEXT_742);
d4486 2
a4487 2
    stringBuffer.append(TEXT_743);
    stringBuffer.append(TEXT_744);
d4491 1
a4491 1
    stringBuffer.append(TEXT_745);
d4493 1
a4493 1
    stringBuffer.append(TEXT_746);
d4495 1
a4495 1
    stringBuffer.append(TEXT_747);
d4522 1
a4522 1
    stringBuffer.append(TEXT_748);
d4524 1
a4524 1
    stringBuffer.append(TEXT_749);
d4526 1
a4526 1
    stringBuffer.append(TEXT_750);
d4530 1
a4530 1
    stringBuffer.append(TEXT_751);
d4532 1
a4532 1
    stringBuffer.append(TEXT_752);
d4534 1
a4534 1
    stringBuffer.append(TEXT_753);
d4536 1
a4536 1
    stringBuffer.append(TEXT_754);
d4538 1
a4538 1
    stringBuffer.append(TEXT_755);
d4542 1
a4542 1
    stringBuffer.append(TEXT_756);
d4544 1
a4544 1
    stringBuffer.append(TEXT_757);
d4546 1
a4546 1
    stringBuffer.append(TEXT_758);
d4548 1
a4548 1
    stringBuffer.append(TEXT_759);
d4550 1
a4550 1
    stringBuffer.append(TEXT_760);
d4555 1
a4555 1
    stringBuffer.append(TEXT_761);
d4557 1
a4557 1
    stringBuffer.append(TEXT_762);
d4563 1
a4563 1
    stringBuffer.append(TEXT_763);
d4565 1
a4565 1
    stringBuffer.append(TEXT_764);
d4567 1
a4567 1
    stringBuffer.append(TEXT_765);
d4569 1
a4569 1
    stringBuffer.append(TEXT_766);
d4571 1
a4571 1
    stringBuffer.append(TEXT_767);
d4573 1
a4573 1
    stringBuffer.append(TEXT_768);
d4577 1
a4577 1
    stringBuffer.append(TEXT_769);
d4579 1
a4579 1
    stringBuffer.append(TEXT_770);
d4581 1
a4581 1
    stringBuffer.append(TEXT_771);
d4583 1
a4583 1
    stringBuffer.append(TEXT_772);
d4585 1
a4585 1
    stringBuffer.append(TEXT_773);
d4587 1
a4587 1
    stringBuffer.append(TEXT_774);
d4594 1
a4594 1
    stringBuffer.append(TEXT_775);
d4596 1
a4596 1
    stringBuffer.append(TEXT_776);
d4598 1
a4598 1
    stringBuffer.append(TEXT_777);
d4600 1
a4600 1
    stringBuffer.append(TEXT_778);
d4602 1
a4602 1
    stringBuffer.append(TEXT_779);
d4604 1
a4604 1
    stringBuffer.append(TEXT_780);
d4608 1
a4608 1
    stringBuffer.append(TEXT_781);
d4610 1
a4610 1
    stringBuffer.append(TEXT_782);
d4612 1
a4612 1
    stringBuffer.append(TEXT_783);
d4614 1
a4614 1
    stringBuffer.append(TEXT_784);
d4616 1
a4616 1
    stringBuffer.append(TEXT_785);
d4618 1
a4618 1
    stringBuffer.append(TEXT_786);
d4625 1
a4625 1
    stringBuffer.append(TEXT_787);
d4627 1
a4627 1
    stringBuffer.append(TEXT_788);
d4629 1
a4629 1
    stringBuffer.append(TEXT_789);
d4631 1
a4631 1
    stringBuffer.append(TEXT_790);
d4633 1
a4633 1
    stringBuffer.append(TEXT_791);
d4635 1
a4635 1
    stringBuffer.append(TEXT_792);
d4639 1
a4639 1
    stringBuffer.append(TEXT_793);
d4641 1
a4641 1
    stringBuffer.append(TEXT_794);
d4643 1
a4643 1
    stringBuffer.append(TEXT_795);
d4645 1
a4645 1
    stringBuffer.append(TEXT_796);
d4647 1
a4647 1
    stringBuffer.append(TEXT_797);
d4649 1
a4649 1
    stringBuffer.append(TEXT_798);
d4654 1
a4654 1
    stringBuffer.append(TEXT_799);
d4660 1
a4660 1
    stringBuffer.append(TEXT_800);
d4662 1
a4662 1
    stringBuffer.append(TEXT_801);
d4664 1
a4664 1
    stringBuffer.append(TEXT_802);
d4666 1
a4666 1
    stringBuffer.append(TEXT_803);
d4668 1
a4668 1
    stringBuffer.append(TEXT_804);
d4670 1
a4670 1
    stringBuffer.append(TEXT_805);
d4674 1
a4674 1
    stringBuffer.append(TEXT_806);
d4676 1
a4676 1
    stringBuffer.append(TEXT_807);
d4678 1
a4678 1
    stringBuffer.append(TEXT_808);
d4680 1
a4680 1
    stringBuffer.append(TEXT_809);
d4682 1
a4682 1
    stringBuffer.append(TEXT_810);
d4684 1
a4684 1
    stringBuffer.append(TEXT_811);
d4691 1
a4691 1
    stringBuffer.append(TEXT_812);
d4695 1
a4695 1
    stringBuffer.append(TEXT_813);
d4699 1
a4699 1
    stringBuffer.append(TEXT_814);
d4702 1
a4702 1
    stringBuffer.append(TEXT_815);
d4704 1
a4704 1
    stringBuffer.append(TEXT_816);
d4706 1
a4706 1
    stringBuffer.append(TEXT_817);
d4709 1
a4709 1
    stringBuffer.append(TEXT_818);
d4711 1
a4711 1
    stringBuffer.append(TEXT_819);
d4713 1
a4713 1
    stringBuffer.append(TEXT_820);
d4720 1
a4720 1
    stringBuffer.append(TEXT_821);
d4724 1
a4724 1
    stringBuffer.append(TEXT_822);
d4726 1
a4726 1
    stringBuffer.append(TEXT_823);
d4728 1
a4728 1
    stringBuffer.append(TEXT_824);
d4730 1
a4730 1
    stringBuffer.append(TEXT_825);
d4732 1
a4732 1
    stringBuffer.append(TEXT_826);
d4740 1
a4740 1
    stringBuffer.append(TEXT_827);
d4746 1
a4746 1
    stringBuffer.append(TEXT_828);
d4748 1
a4748 1
    stringBuffer.append(TEXT_829);
d4750 1
a4750 1
    stringBuffer.append(TEXT_830);
d4754 1
a4754 1
    stringBuffer.append(TEXT_831);
d4756 1
a4756 1
    stringBuffer.append(TEXT_832);
d4758 1
a4758 1
    stringBuffer.append(TEXT_833);
d4760 1
a4760 1
    stringBuffer.append(TEXT_834);
d4762 1
a4762 1
    stringBuffer.append(TEXT_835);
d4777 1
a4777 1
    stringBuffer.append(TEXT_836);
d4783 1
a4783 1
    stringBuffer.append(TEXT_837);
d4785 1
a4785 1
    stringBuffer.append(TEXT_838);
d4787 1
a4787 1
    stringBuffer.append(TEXT_839);
d4791 1
a4791 1
    stringBuffer.append(TEXT_840);
d4793 1
a4793 1
    stringBuffer.append(TEXT_841);
d4795 1
a4795 1
    stringBuffer.append(TEXT_842);
d4797 1
a4797 1
    stringBuffer.append(TEXT_843);
d4799 1
a4799 1
    stringBuffer.append(TEXT_844);
d4811 1
a4811 1
    stringBuffer.append(TEXT_845);
d4815 1
a4815 1
    stringBuffer.append(TEXT_846);
d4817 1
a4817 1
    stringBuffer.append(TEXT_847);
d4819 1
a4819 1
    stringBuffer.append(TEXT_848);
d4821 1
a4821 1
    stringBuffer.append(TEXT_849);
d4828 1
a4828 1
    stringBuffer.append(TEXT_850);
d4839 1
a4839 1
    stringBuffer.append(TEXT_851);
d4845 1
a4845 1
    stringBuffer.append(TEXT_852);
d4847 1
a4847 1
    stringBuffer.append(TEXT_853);
d4849 1
a4849 1
    stringBuffer.append(TEXT_854);
d4853 1
a4853 1
    stringBuffer.append(TEXT_855);
d4855 1
a4855 1
    stringBuffer.append(TEXT_856);
d4857 1
a4857 1
    stringBuffer.append(TEXT_857);
d4859 1
a4859 1
    stringBuffer.append(TEXT_858);
d4861 1
a4861 1
    stringBuffer.append(TEXT_859);
d4872 1
a4872 1
    stringBuffer.append(TEXT_860);
d4876 1
a4876 1
    stringBuffer.append(TEXT_861);
d4878 1
a4878 1
    stringBuffer.append(TEXT_862);
d4880 1
a4880 1
    stringBuffer.append(TEXT_863);
d4882 1
a4882 1
    stringBuffer.append(TEXT_864);
d4889 1
a4889 1
    stringBuffer.append(TEXT_865);
d4893 1
a4893 1
    stringBuffer.append(TEXT_866);
d4897 2
a4898 2
    stringBuffer.append(TEXT_867);
    stringBuffer.append(TEXT_868);
d4902 1
a4902 1
    stringBuffer.append(TEXT_869);
d4904 1
a4904 1
    stringBuffer.append(TEXT_870);
d4906 1
a4906 1
    stringBuffer.append(TEXT_871);
d4908 1
a4908 1
    stringBuffer.append(TEXT_872);
d4912 1
a4912 1
    stringBuffer.append(TEXT_873);
d4942 1
a4942 1
    stringBuffer.append(TEXT_874);
d4945 1
a4945 1
    stringBuffer.append(TEXT_875);
d4947 1
a4947 1
    stringBuffer.append(TEXT_876);
d4949 1
a4949 1
    stringBuffer.append(TEXT_877);
d4951 1
a4951 1
    stringBuffer.append(TEXT_878);
d4953 1
a4953 1
    stringBuffer.append(TEXT_879);
d4955 1
a4955 1
    stringBuffer.append(TEXT_880);
d4958 1
a4958 1
    stringBuffer.append(TEXT_881);
d4960 1
a4960 1
    stringBuffer.append(TEXT_882);
d4962 1
a4962 1
    stringBuffer.append(TEXT_883);
d4964 1
a4964 1
    stringBuffer.append(TEXT_884);
d4967 1
a4967 1
    stringBuffer.append(TEXT_885);
d4969 1
a4969 1
    stringBuffer.append(TEXT_886);
d4971 1
a4971 1
    stringBuffer.append(TEXT_887);
d4975 1
a4975 1
    stringBuffer.append(TEXT_888);
d4977 1
a4977 1
    stringBuffer.append(TEXT_889);
d4979 1
a4979 1
    stringBuffer.append(TEXT_890);
d4981 1
a4981 1
    stringBuffer.append(TEXT_891);
d4983 1
a4983 1
    stringBuffer.append(TEXT_892);
d4985 1
a4985 1
    stringBuffer.append(TEXT_893);
d4987 1
a4987 1
    stringBuffer.append(TEXT_894);
d4991 1
a4991 1
    stringBuffer.append(TEXT_895);
d4995 1
a4995 1
    stringBuffer.append(TEXT_896);
d5002 1
a5002 1
    stringBuffer.append(TEXT_897);
d5006 1
a5006 1
    stringBuffer.append(TEXT_898);
d5008 1
a5008 1
    stringBuffer.append(TEXT_899);
d5010 1
a5010 1
    stringBuffer.append(TEXT_900);
d5012 1
a5012 1
    stringBuffer.append(TEXT_901);
d5019 1
a5019 1
    stringBuffer.append(TEXT_902);
d5026 1
a5026 1
    stringBuffer.append(TEXT_903);
d5030 1
a5030 1
    stringBuffer.append(TEXT_904);
d5032 1
a5032 1
    stringBuffer.append(TEXT_905);
d5034 1
a5034 1
    stringBuffer.append(TEXT_906);
d5036 1
a5036 1
    stringBuffer.append(TEXT_907);
d5043 1
a5043 1
    stringBuffer.append(TEXT_908);
d5047 1
a5047 1
    stringBuffer.append(TEXT_909);
d5051 1
a5051 1
    stringBuffer.append(TEXT_910);
d5053 1
a5053 1
    stringBuffer.append(TEXT_911);
d5055 1
a5055 1
    stringBuffer.append(TEXT_912);
d5057 1
a5057 1
    stringBuffer.append(TEXT_913);
d5059 1
a5059 1
    stringBuffer.append(TEXT_914);
d5061 1
a5061 1
    stringBuffer.append(TEXT_915);
d5063 1
a5063 1
    stringBuffer.append(TEXT_916);
d5070 1
a5070 1
    stringBuffer.append(TEXT_917);
d5072 1
a5072 1
    stringBuffer.append(TEXT_918);
d5074 1
a5074 1
    stringBuffer.append(TEXT_919);
d5076 1
a5076 1
    stringBuffer.append(TEXT_920);
d5078 1
a5078 1
    stringBuffer.append(TEXT_921);
d5080 1
a5080 1
    stringBuffer.append(TEXT_922);
d5082 1
a5082 1
    stringBuffer.append(TEXT_923);
d5086 1
a5086 1
    stringBuffer.append(TEXT_924);
d5088 1
a5088 1
    stringBuffer.append(TEXT_925);
d5090 1
a5090 1
    stringBuffer.append(TEXT_926);
d5092 1
a5092 1
    stringBuffer.append(TEXT_927);
d5099 1
a5099 1
    stringBuffer.append(TEXT_928);
d5101 1
a5101 1
    stringBuffer.append(TEXT_929);
d5103 1
a5103 1
    stringBuffer.append(TEXT_930);
d5105 1
a5105 1
    stringBuffer.append(TEXT_931);
d5107 1
a5107 1
    stringBuffer.append(TEXT_932);
d5109 1
a5109 1
    stringBuffer.append(TEXT_933);
d5111 1
a5111 1
    stringBuffer.append(TEXT_934);
d5115 1
a5115 1
    stringBuffer.append(TEXT_935);
d5117 1
a5117 1
    stringBuffer.append(TEXT_936);
d5119 1
a5119 1
    stringBuffer.append(TEXT_937);
d5121 1
a5121 1
    stringBuffer.append(TEXT_938);
d5126 1
a5126 1
    stringBuffer.append(TEXT_939);
d5131 2
a5132 2
    stringBuffer.append(TEXT_940);
    stringBuffer.append(TEXT_941);
d5136 1
a5136 1
    stringBuffer.append(TEXT_942);
d5138 1
a5138 1
    stringBuffer.append(TEXT_943);
d5140 1
a5140 1
    stringBuffer.append(TEXT_944);
d5167 1
a5167 1
    stringBuffer.append(TEXT_945);
d5169 1
a5169 1
    stringBuffer.append(TEXT_946);
d5171 1
a5171 1
    stringBuffer.append(TEXT_947);
d5175 1
a5175 1
    stringBuffer.append(TEXT_948);
d5177 1
a5177 1
    stringBuffer.append(TEXT_949);
d5179 1
a5179 1
    stringBuffer.append(TEXT_950);
d5181 1
a5181 1
    stringBuffer.append(TEXT_951);
d5183 1
a5183 1
    stringBuffer.append(TEXT_952);
d5187 1
a5187 1
    stringBuffer.append(TEXT_953);
d5189 1
a5189 1
    stringBuffer.append(TEXT_954);
d5191 1
a5191 1
    stringBuffer.append(TEXT_955);
d5193 1
a5193 1
    stringBuffer.append(TEXT_956);
d5195 1
a5195 1
    stringBuffer.append(TEXT_957);
d5200 1
a5200 1
    stringBuffer.append(TEXT_958);
d5202 1
a5202 1
    stringBuffer.append(TEXT_959);
d5208 1
a5208 1
    stringBuffer.append(TEXT_960);
d5210 1
a5210 1
    stringBuffer.append(TEXT_961);
d5212 1
a5212 1
    stringBuffer.append(TEXT_962);
d5214 1
a5214 1
    stringBuffer.append(TEXT_963);
d5216 1
a5216 1
    stringBuffer.append(TEXT_964);
d5218 1
a5218 1
    stringBuffer.append(TEXT_965);
d5222 1
a5222 1
    stringBuffer.append(TEXT_966);
d5224 1
a5224 1
    stringBuffer.append(TEXT_967);
d5226 1
a5226 1
    stringBuffer.append(TEXT_968);
d5228 1
a5228 1
    stringBuffer.append(TEXT_969);
d5230 1
a5230 1
    stringBuffer.append(TEXT_970);
d5232 1
a5232 1
    stringBuffer.append(TEXT_971);
d5239 1
a5239 1
    stringBuffer.append(TEXT_972);
d5241 1
a5241 1
    stringBuffer.append(TEXT_973);
d5243 1
a5243 1
    stringBuffer.append(TEXT_974);
d5245 1
a5245 1
    stringBuffer.append(TEXT_975);
d5247 1
a5247 1
    stringBuffer.append(TEXT_976);
d5249 1
a5249 1
    stringBuffer.append(TEXT_977);
d5253 1
a5253 1
    stringBuffer.append(TEXT_978);
d5255 1
a5255 1
    stringBuffer.append(TEXT_979);
d5257 1
a5257 1
    stringBuffer.append(TEXT_980);
d5259 1
a5259 1
    stringBuffer.append(TEXT_981);
d5261 1
a5261 1
    stringBuffer.append(TEXT_982);
d5263 1
a5263 1
    stringBuffer.append(TEXT_983);
d5270 1
a5270 1
    stringBuffer.append(TEXT_984);
d5272 1
a5272 1
    stringBuffer.append(TEXT_985);
d5274 1
a5274 1
    stringBuffer.append(TEXT_986);
d5276 1
a5276 1
    stringBuffer.append(TEXT_987);
d5278 1
a5278 1
    stringBuffer.append(TEXT_988);
d5280 1
a5280 1
    stringBuffer.append(TEXT_989);
d5284 1
a5284 1
    stringBuffer.append(TEXT_990);
d5286 1
a5286 1
    stringBuffer.append(TEXT_991);
d5288 1
a5288 1
    stringBuffer.append(TEXT_992);
d5290 1
a5290 1
    stringBuffer.append(TEXT_993);
d5292 1
a5292 1
    stringBuffer.append(TEXT_994);
d5294 1
a5294 1
    stringBuffer.append(TEXT_995);
d5299 1
a5299 1
    stringBuffer.append(TEXT_996);
d5305 1
a5305 1
    stringBuffer.append(TEXT_997);
d5307 1
a5307 1
    stringBuffer.append(TEXT_998);
d5309 1
a5309 1
    stringBuffer.append(TEXT_999);
d5311 1
a5311 1
    stringBuffer.append(TEXT_1000);
d5313 1
a5313 1
    stringBuffer.append(TEXT_1001);
d5315 1
a5315 1
    stringBuffer.append(TEXT_1002);
d5319 1
a5319 1
    stringBuffer.append(TEXT_1003);
d5321 1
a5321 1
    stringBuffer.append(TEXT_1004);
d5323 1
a5323 1
    stringBuffer.append(TEXT_1005);
d5325 1
a5325 1
    stringBuffer.append(TEXT_1006);
d5327 1
a5327 1
    stringBuffer.append(TEXT_1007);
d5329 1
a5329 1
    stringBuffer.append(TEXT_1008);
d5336 1
a5336 1
    stringBuffer.append(TEXT_1009);
d5340 1
a5340 1
    stringBuffer.append(TEXT_1010);
d5344 1
a5344 1
    stringBuffer.append(TEXT_1011);
d5347 1
a5347 1
    stringBuffer.append(TEXT_1012);
d5349 1
a5349 1
    stringBuffer.append(TEXT_1013);
d5351 1
a5351 1
    stringBuffer.append(TEXT_1014);
d5353 1
a5353 1
    stringBuffer.append(TEXT_1015);
d5355 1
a5355 1
    stringBuffer.append(TEXT_1016);
d5358 1
a5358 1
    stringBuffer.append(TEXT_1017);
d5360 1
a5360 1
    stringBuffer.append(TEXT_1018);
d5362 1
a5362 1
    stringBuffer.append(TEXT_1019);
d5364 1
a5364 1
    stringBuffer.append(TEXT_1020);
d5366 1
a5366 1
    stringBuffer.append(TEXT_1021);
d5368 1
a5368 1
    stringBuffer.append(TEXT_1022);
d5370 1
a5370 1
    stringBuffer.append(TEXT_1023);
d5372 1
a5372 1
    stringBuffer.append(TEXT_1024);
d5378 1
a5378 1
    stringBuffer.append(TEXT_1025);
d5380 1
a5380 1
    stringBuffer.append(TEXT_1026);
d5382 1
a5382 1
    stringBuffer.append(TEXT_1027);
d5384 1
a5384 1
    stringBuffer.append(TEXT_1028);
d5386 1
a5386 1
    stringBuffer.append(TEXT_1029);
d5388 1
a5388 1
    stringBuffer.append(TEXT_1030);
d5390 1
a5390 1
    stringBuffer.append(TEXT_1031);
d5392 1
a5392 1
    stringBuffer.append(TEXT_1032);
d5394 1
a5394 1
    stringBuffer.append(TEXT_1033);
d5396 1
a5396 1
    stringBuffer.append(TEXT_1034);
d5398 1
a5398 1
    stringBuffer.append(TEXT_1035);
d5400 1
a5400 1
    stringBuffer.append(TEXT_1036);
d5402 1
a5402 1
    stringBuffer.append(TEXT_1037);
d5406 1
a5406 1
    stringBuffer.append(TEXT_1038);
d5410 1
a5410 1
    stringBuffer.append(TEXT_1039);
d5412 1
a5412 1
    stringBuffer.append(TEXT_1040);
d5414 1
a5414 1
    stringBuffer.append(TEXT_1041);
d5416 1
a5416 1
    stringBuffer.append(TEXT_1042);
d5420 1
a5420 1
    stringBuffer.append(TEXT_1043);
d5447 1
a5447 1
    stringBuffer.append(TEXT_1044);
d5449 1
a5449 1
    stringBuffer.append(TEXT_1045);
d5451 1
a5451 1
    stringBuffer.append(TEXT_1046);
d5453 1
a5453 1
    stringBuffer.append(TEXT_1047);
d5455 1
a5455 1
    stringBuffer.append(TEXT_1048);
d5457 1
a5457 1
    stringBuffer.append(TEXT_1049);
d5459 1
a5459 1
    stringBuffer.append(TEXT_1050);
d5464 1
a5464 1
    stringBuffer.append(TEXT_1051);
d5466 1
a5466 1
    stringBuffer.append(TEXT_1052);
d5468 1
a5468 1
    stringBuffer.append(TEXT_1053);
d5470 1
a5470 1
    stringBuffer.append(TEXT_1054);
d5480 1
a5480 1
    stringBuffer.append(TEXT_1055);
d5486 1
a5486 1
    stringBuffer.append(TEXT_1056);
d5488 1
a5488 1
    stringBuffer.append(TEXT_1057);
d5490 1
a5490 1
    stringBuffer.append(TEXT_1058);
d5494 1
a5494 1
    stringBuffer.append(TEXT_1059);
d5496 1
a5496 1
    stringBuffer.append(TEXT_1060);
d5498 1
a5498 1
    stringBuffer.append(TEXT_1061);
d5500 1
a5500 1
    stringBuffer.append(TEXT_1062);
d5502 1
a5502 1
    stringBuffer.append(TEXT_1063);
d5510 1
a5510 1
    stringBuffer.append(TEXT_1064);
d5512 1
a5512 1
    stringBuffer.append(TEXT_1065);
d5514 1
a5514 1
    stringBuffer.append(TEXT_1066);
d5516 1
a5516 1
    stringBuffer.append(TEXT_1067);
d5526 1
a5526 1
    stringBuffer.append(TEXT_1068);
d5532 1
a5532 1
    stringBuffer.append(TEXT_1069);
d5534 1
a5534 1
    stringBuffer.append(TEXT_1070);
d5536 1
a5536 1
    stringBuffer.append(TEXT_1071);
d5540 1
a5540 1
    stringBuffer.append(TEXT_1072);
d5542 1
a5542 1
    stringBuffer.append(TEXT_1073);
d5544 1
a5544 1
    stringBuffer.append(TEXT_1074);
d5546 1
a5546 1
    stringBuffer.append(TEXT_1075);
d5548 1
a5548 1
    stringBuffer.append(TEXT_1076);
d5556 1
a5556 1
    stringBuffer.append(TEXT_1077);
d5558 1
a5558 1
    stringBuffer.append(TEXT_1078);
d5560 1
a5560 1
    stringBuffer.append(TEXT_1079);
d5562 1
a5562 1
    stringBuffer.append(TEXT_1080);
d5566 1
a5566 1
    stringBuffer.append(TEXT_1081);
d5571 1
a5571 1
    stringBuffer.append(TEXT_1082);
d5573 1
a5573 1
    stringBuffer.append(TEXT_1083);
d5575 1
a5575 1
    stringBuffer.append(TEXT_1084);
d5577 1
a5577 1
    stringBuffer.append(TEXT_1085);
d5581 2
a5582 2
    stringBuffer.append(TEXT_1086);
    stringBuffer.append(TEXT_1087);
d5586 1
a5586 1
    stringBuffer.append(TEXT_1088);
d5588 1
a5588 1
    stringBuffer.append(TEXT_1089);
d5590 1
a5590 1
    stringBuffer.append(TEXT_1090);
d5592 1
a5592 1
    stringBuffer.append(TEXT_1091);
d5596 1
a5596 1
    stringBuffer.append(TEXT_1092);
d5602 1
a5602 1
    stringBuffer.append(TEXT_1093);
d5606 1
a5606 1
    stringBuffer.append(TEXT_1094);
d5608 1
a5608 1
    stringBuffer.append(TEXT_1095);
d5610 1
a5610 1
    stringBuffer.append(TEXT_1096);
d5612 1
a5612 1
    stringBuffer.append(TEXT_1097);
d5619 1
a5619 1
    stringBuffer.append(TEXT_1098);
d5628 1
a5628 1
    stringBuffer.append(TEXT_1099);
d5630 1
a5630 1
    stringBuffer.append(TEXT_1100);
d5634 1
a5634 1
    stringBuffer.append(TEXT_1101);
d5641 1
a5641 1
    stringBuffer.append(TEXT_1102);
d5643 1
a5643 1
    stringBuffer.append(TEXT_1103);
@


1.19
log
@[152859] bblajer - add missing @@generated tags
@
text
@d46 220
a265 220
  protected final String TEXT_25 = ", IUpdatableEditPart {";
  protected final String TEXT_26 = NL;
  protected final String TEXT_27 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_28 = ";";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_30 = " contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_31 = " primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_32 = "(";
  protected final String TEXT_33 = " model) {" + NL + "\t\tassert model instanceof ";
  protected final String TEXT_34 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL;
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_37 = " view = (";
  protected final String TEXT_38 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_39 = " view = (";
  protected final String TEXT_40 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_41 = NL;
  protected final String TEXT_42 = "\t\tinstallEditPolicy(";
  protected final String TEXT_43 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_44 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_45 = " createDeleteCommand(";
  protected final String TEXT_46 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_47 = " editingDomain = ";
  protected final String TEXT_48 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_49 = " cc = new ";
  protected final String TEXT_50 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_51 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new WrappingCommand(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_52 = " editingDomain) {";
  protected final String TEXT_53 = NL + "\t\t\t\t";
  protected final String TEXT_54 = " result = new ";
  protected final String TEXT_55 = "();";
  protected final String TEXT_56 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_57 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_58 = ".eINSTANCE.get";
  protected final String TEXT_59 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_60 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_61 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_62 = ".eINSTANCE.get";
  protected final String TEXT_63 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_64 = ".UNSET_VALUE));";
  protected final String TEXT_65 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_66 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_67 = ".eINSTANCE.get";
  protected final String TEXT_68 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_69 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_70 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_71 = ".eINSTANCE.get";
  protected final String TEXT_72 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_73 = ".UNSET_VALUE));";
  protected final String TEXT_74 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_75 = NL + "\t\t\t\treturn ";
  protected final String TEXT_76 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_77 = ".eINSTANCE.get";
  protected final String TEXT_78 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_79 = NL + "\t\t\t\treturn ";
  protected final String TEXT_80 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_81 = ".eINSTANCE.get";
  protected final String TEXT_82 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_83 = ".UNSET_VALUE);";
  protected final String TEXT_84 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_85 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_86 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_87 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_88 = " getCreateCommand(";
  protected final String TEXT_89 = " request) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_90 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_91 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_92 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_93 = " createChangeConstraintCommand(";
  protected final String TEXT_94 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_95 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_96 = " createChildEditPolicy(";
  protected final String TEXT_97 = " child) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_98 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_99 = " getTargetEditPart(";
  protected final String TEXT_100 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_101 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_102 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_103 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_104 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_105 = " getReconnectTargetCommand(";
  protected final String TEXT_106 = " request) {";
  protected final String TEXT_107 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_108 = ".INSTANCE;";
  protected final String TEXT_109 = NL + "\t\t\t\t";
  protected final String TEXT_110 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_111 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_112 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_113 = " edge = (";
  protected final String TEXT_114 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_115 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_116 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_117 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_118 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_119 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_120 = NL + "\t\t\t\tcase ";
  protected final String TEXT_121 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_122 = "TargetCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_123 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_124 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_125 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_126 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_127 = " getReconnectSourceCommand(";
  protected final String TEXT_128 = " request) {";
  protected final String TEXT_129 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_130 = ".INSTANCE;";
  protected final String TEXT_131 = NL + "\t\t\t\t";
  protected final String TEXT_132 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_133 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_134 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_135 = " edge = (";
  protected final String TEXT_136 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_137 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_138 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_139 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_140 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_141 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_142 = NL + "\t\t\t\tcase ";
  protected final String TEXT_143 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_144 = "SourceCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_145 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_146 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_147 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_148 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_149 = " getConnectionCreateCommand(";
  protected final String TEXT_150 = " request) {";
  protected final String TEXT_151 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_152 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_153 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_154 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_155 = " result = new ";
  protected final String TEXT_156 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_157 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_158 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_159 = "StartCommand(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_160 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_161 = " wrappedResult = new WrappingCommand(";
  protected final String TEXT_162 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_163 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_164 = " getConnectionCompleteCommand(";
  protected final String TEXT_165 = " request) {";
  protected final String TEXT_166 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_167 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_168 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_169 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_170 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_171 = " result = new ";
  protected final String TEXT_172 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_173 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_174 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_175 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_176 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_177 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_178 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_179 = NL + "\t\t\t\treturn ";
  protected final String TEXT_180 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_181 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_182 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_183 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_184 = " invisibleRectangle = new ";
  protected final String TEXT_185 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_186 = "());" + NL + "\t\t";
  protected final String TEXT_187 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_188 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_189 = " createNodeShape() {";
  protected final String TEXT_190 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_191 = "()";
  protected final String TEXT_192 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_193 = ";";
  protected final String TEXT_194 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_195 = ";";
  protected final String TEXT_196 = NL + "\t\t";
  protected final String TEXT_197 = " figure = new ";
  protected final String TEXT_198 = "();";
  protected final String TEXT_199 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_200 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_201 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_202 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_203 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_204 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_205 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_206 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_207 = " view = (";
  protected final String TEXT_208 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_209 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_210 = " decorationPane = new ";
  protected final String TEXT_211 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_212 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_213 = " imageFigure = new ";
  protected final String TEXT_214 = "(";
  protected final String TEXT_215 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_216 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_217 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_218 = " setupContentPane(";
  protected final String TEXT_219 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_220 = NL + "\t\t\t";
  protected final String TEXT_221 = " layout = new ";
  protected final String TEXT_222 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_223 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_224 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_225 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_226 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_227 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_228 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_229 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_230 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_231 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_232 = " childEditPart) {";
  protected final String TEXT_233 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_234 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_235 = ") childEditPart).";
  protected final String TEXT_236 = "(getPrimaryShape().";
  protected final String TEXT_237 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_238 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_239 = ") {" + NL + "\t\t\t";
  protected final String TEXT_240 = " pane = getPrimaryShape().";
  protected final String TEXT_241 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_242 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_243 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_244 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
d268 1
a268 1
  protected final String TEXT_247 = "();" + NL + "\t\t\tpane.remove(((";
d270 42
a311 42
  protected final String TEXT_249 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_250 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_251 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_252 = NL + "\t\tfor(";
  protected final String TEXT_253 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_254 = " nextChild = (";
  protected final String TEXT_255 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_256 = ".getVisualID(nextChild) == ";
  protected final String TEXT_257 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_258 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_259 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_260 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_261 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_262 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_263 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_264 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_265 = " getLabelEditPart(";
  protected final String TEXT_266 = " req) {" + NL + "\t\t";
  protected final String TEXT_267 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_268 = " view = (";
  protected final String TEXT_269 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_270 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_271 = NL + "\t\t\t\tcase ";
  protected final String TEXT_272 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_273 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_274 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_275 = " childEditPart) {";
  protected final String TEXT_276 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_277 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_278 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_279 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_280 = " root = (";
  protected final String TEXT_281 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_282 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_283 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_284 = " childEditPart, int index) {";
  protected final String TEXT_285 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_286 = " labelFigure = ((";
  protected final String TEXT_287 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_288 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_289 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_290 = " childEditPart) {";
d314 25
a338 25
  protected final String TEXT_293 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_294 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_295 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_296 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_297 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_298 = " childEditPart = (";
  protected final String TEXT_299 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_300 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_301 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_302 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_303 = ";" + NL + "\t\t";
  protected final String TEXT_304 = " bounds = (";
  protected final String TEXT_305 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_306 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_307 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_308 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_309 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_310 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_311 = " getSourceConnectionAnchor(";
  protected final String TEXT_312 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_313 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_314 = " getSourceConnectionAnchor(";
  protected final String TEXT_315 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_316 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_317 = "  getTargetConnectionAnchor(";
d341 1
a341 1
  protected final String TEXT_320 = "  getTargetConnectionAnchor(";
d343 38
a380 38
  protected final String TEXT_322 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_323 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_324 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_325 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_326 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_327 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_328 = NL;
  protected final String TEXT_329 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_330 = " domainModelEditDomain = ";
  protected final String TEXT_331 = ".getEditingDomain(";
  protected final String TEXT_332 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_333 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_334 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_335 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_336 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_337 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_338 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_339 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_340 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_341 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_342 = ".createEventTypeFilter(";
  protected final String TEXT_343 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_344 = ".createEventTypeFilter(";
  protected final String TEXT_345 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_346 = ".createEventTypeFilter(";
  protected final String TEXT_347 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_348 = ".createEventTypeFilter(";
  protected final String TEXT_349 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_350 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_351 = NL;
  protected final String TEXT_352 = NL + "\t\t\tfilter = ";
  protected final String TEXT_353 = ".createFeatureFilter(";
  protected final String TEXT_354 = ".eINSTANCE.get";
  protected final String TEXT_355 = "());";
  protected final String TEXT_356 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_357 = ".createFeatureFilter(";
  protected final String TEXT_358 = ".eINSTANCE.get";
  protected final String TEXT_359 = "()));";
d382 231
a612 231
  protected final String TEXT_361 = NL + "\t\t\tfilter = ";
  protected final String TEXT_362 = ".createFeatureFilter(";
  protected final String TEXT_363 = ".eINSTANCE.get";
  protected final String TEXT_364 = "());";
  protected final String TEXT_365 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_366 = ".createFeatureFilter(";
  protected final String TEXT_367 = ".eINSTANCE.get";
  protected final String TEXT_368 = "()));";
  protected final String TEXT_369 = NL;
  protected final String TEXT_370 = NL + "\t\t\tfilter = ";
  protected final String TEXT_371 = ".createFeatureFilter(";
  protected final String TEXT_372 = ".eINSTANCE.get";
  protected final String TEXT_373 = "());";
  protected final String TEXT_374 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_375 = ".createFeatureFilter(";
  protected final String TEXT_376 = ".eINSTANCE.get";
  protected final String TEXT_377 = "()));";
  protected final String TEXT_378 = NL;
  protected final String TEXT_379 = NL + "\t\t\tfilter = ";
  protected final String TEXT_380 = ".createFeatureFilter(";
  protected final String TEXT_381 = ".eINSTANCE.get";
  protected final String TEXT_382 = "());";
  protected final String TEXT_383 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_384 = ".createFeatureFilter(";
  protected final String TEXT_385 = ".eINSTANCE.get";
  protected final String TEXT_386 = "()));";
  protected final String TEXT_387 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_388 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter();";
  protected final String TEXT_389 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_390 = NL + "\t\t\tfilter = createUncontainedLinksFilter();";
  protected final String TEXT_391 = NL + "\t\t\tfilter = ";
  protected final String TEXT_392 = ".ANY.negated();";
  protected final String TEXT_393 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_394 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_395 = " transactionAboutToCommit(";
  protected final String TEXT_396 = " event) {" + NL + "\t\t\treturn getRefreshLinkNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_397 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_398 = " command = getRefreshLinkNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_399 = " domainModelEditDomain = ";
  protected final String TEXT_400 = ".getEditingDomain(";
  protected final String TEXT_401 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_402 = NL;
  protected final String TEXT_403 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static class LinkDescriptor {" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_404 = " mySource;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_405 = " myDestination;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_406 = " myLinkElement;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_407 = " source, ";
  protected final String TEXT_408 = " destination, ";
  protected final String TEXT_409 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_410 = " source, ";
  protected final String TEXT_411 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_412 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_413 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_414 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_415 = " getRefreshLinkNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_416 = "/*<LinkDescriptor>*/ semanticChildLinks = getSemanticChildLinks();" + NL + "\t\t";
  protected final String TEXT_417 = "/*<Edge>*/ notationalChildLinks = getNotationalChildLinks();" + NL + "\t\tfinal ";
  protected final String TEXT_418 = " semanticToNotationalTypeBasedLinks = new ";
  protected final String TEXT_419 = "();" + NL + "\t\tfinal ";
  protected final String TEXT_420 = "/*<EObject, List<Edge>>*/ semanticToNotationalFeatureBasedLinks = new ";
  protected final String TEXT_421 = "();" + NL + "\t\tfor(";
  protected final String TEXT_422 = " it = notationalChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_423 = " next = (";
  protected final String TEXT_424 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_425 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotationalTypeBasedLinks.put(nextSemantic, next);" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_426 = " featureBasedLinksForSource = (";
  protected final String TEXT_427 = ") semanticToNotationalFeatureBasedLinks.get(next.getSource().getElement());" + NL + "\t\t\t\tif (featureBasedLinksForSource == null) {" + NL + "\t\t\t\t\tfeatureBasedLinksForSource = new ";
  protected final String TEXT_428 = "();" + NL + "\t\t\t\t\tsemanticToNotationalFeatureBasedLinks.put(next.getSource().getElement(), featureBasedLinksForSource);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tfeatureBasedLinksForSource.add(next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_429 = " parentView = ";
  protected final String TEXT_430 = ";" + NL + "\t\t";
  protected final String TEXT_431 = " command = new ";
  protected final String TEXT_432 = "();" + NL + "\t\tfor(";
  protected final String TEXT_433 = " it = semanticChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\tLinkDescriptor next = (LinkDescriptor) it.next();" + NL + "\t\t\t";
  protected final String TEXT_434 = " nextLinkElement = next.getLinkElement();" + NL + "\t\t\t";
  protected final String TEXT_435 = " currentEdge;" + NL + "\t\t\tif (nextLinkElement != null) {" + NL + "\t\t\t\tcurrentEdge = (";
  protected final String TEXT_436 = ") semanticToNotationalTypeBasedLinks.remove(nextLinkElement);" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_437 = " featureBasedLinksForSource = (";
  protected final String TEXT_438 = ") semanticToNotationalFeatureBasedLinks.get(next.getSource());" + NL + "\t\t\t\tif (featureBasedLinksForSource == null || featureBasedLinksForSource.isEmpty()) {" + NL + "\t\t\t\t\tcurrentEdge = null;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tcurrentEdge = (";
  protected final String TEXT_439 = ") featureBasedLinksForSource.remove(0);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tint linkVisualID = next.getVisualID();" + NL + "\t\t\tif (currentEdge == null) {" + NL + "\t\t\t\tif (nextLinkElement == null || shouldCreateEdge(nextLinkElement)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tboolean changedSource = currentEdge.getSource().getElement() != next.getSource();" + NL + "\t\t\t\tboolean changedTarget = currentEdge.getTarget().getElement() != next.getDestination();" + NL + "\t\t\t\tboolean changedVID = linkVisualID != ";
  protected final String TEXT_440 = ".getVisualID(currentEdge);" + NL + "\t\t\t\tif (!changedSource && !changedTarget) {" + NL + "\t\t\t\t\tif (changedVID) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_441 = " notationalCommand = getCreateNotationalEdgeCommand(parentView, next);" + NL + "\t\t\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_442 = "(parentView, notationalCommand, currentEdge));" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_443 = "(parentView, currentEdge));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tif (changedVID) {" + NL + "\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_444 = "(parentView, currentEdge));" + NL + "\t\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));" + NL + "\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_445 = " newSourceView = findView(next.getSource());" + NL + "\t\t\t\t\t\tif (changedSource && newSourceView != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_446 = "(currentEdge, newSourceView));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_447 = " newTargetView = findView(next.getDestination());" + NL + "\t\t\t\t\t\tif (changedTarget && newTargetView != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_448 = "(currentEdge, newTargetView));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_449 = " it = semanticToNotationalTypeBasedLinks.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_450 = " obsoleteView = (";
  protected final String TEXT_451 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_452 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_453 = " it = semanticToNotationalFeatureBasedLinks.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_454 = " obsoleteViews = (";
  protected final String TEXT_455 = ") it.next();" + NL + "\t\t\tfor(";
  protected final String TEXT_456 = " obsoleteViewsIt = obsoleteViews.iterator(); obsoleteViewsIt.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_457 = " obsoleteView = (";
  protected final String TEXT_458 = ") obsoleteViewsIt.next();" + NL + "\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_459 = "(parentView, obsoleteView));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_460 = " findView(";
  protected final String TEXT_461 = " modelElement) {" + NL + "\t\tif (modelElement == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_462 = " editPart = (";
  protected final String TEXT_463 = ") getViewer().getEditPartRegistry().get(modelElement);" + NL + "\t\tif (editPart != null && editPart.getModel() instanceof ";
  protected final String TEXT_464 = ") {" + NL + "\t\t\treturn (";
  protected final String TEXT_465 = ") editPart.getModel();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_466 = " parentView = findView(modelElement.eContainer());" + NL + "\t\tif (parentView != null) {" + NL + "\t\t\t";
  protected final String TEXT_467 = " result = findNode(parentView, modelElement);" + NL + "\t\t\tif (result != null) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn findEdge(modelElement);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * Finds a notational node that corresponds to the given underlying domain element in a subtree starting from the given parent element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_468 = " findNode(";
  protected final String TEXT_469 = " parentView, ";
  protected final String TEXT_470 = " modelElement) {" + NL + "\t\tfor(";
  protected final String TEXT_471 = " it = parentView.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_472 = " next = (";
  protected final String TEXT_473 = ") it.next();" + NL + "\t\t\tif (!next.isSetElement() || next.getElement() == parentView) {" + NL + "\t\t\t\t";
  protected final String TEXT_474 = " result = findNode(next, modelElement);" + NL + "\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (next.isSetElement() && next.getElement() == modelElement) {" + NL + "\t\t\t\treturn next;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds a notational edge that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_475 = " findEdge(";
  protected final String TEXT_476 = " modelElement) {" + NL + "\t\tfor(";
  protected final String TEXT_477 = " it = ";
  protected final String TEXT_478 = ".getEdges().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_479 = " next = (";
  protected final String TEXT_480 = ") it.next();" + NL + "\t\t\tif (next.isSetElement() && next.getElement() == modelElement) {" + NL + "\t\t\t\treturn next;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_481 = " getCreateNotationalEdgeCommand(";
  protected final String TEXT_482 = " parentView, LinkDescriptor linkDescriptor) {" + NL + "\t\t";
  protected final String TEXT_483 = " sourceView = findView(linkDescriptor.getSource());" + NL + "\t\t";
  protected final String TEXT_484 = " targetView = findView(linkDescriptor.getDestination());" + NL + "\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_485 = " createdEdge = ";
  protected final String TEXT_486 = ".eINSTANCE.createEdge();" + NL + "\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_487 = NL + "\t\tcase ";
  protected final String TEXT_488 = ".VISUAL_ID:" + NL + "\t\t\tif (linkDescriptor.getLinkElement() instanceof ";
  protected final String TEXT_489 = ") {" + NL + "\t\t\t\tcreatedEdge.setElement(linkDescriptor.getLinkElement());" + NL + "\t\t\t\t";
  protected final String TEXT_490 = ".decorateView(createdEdge);" + NL + "\t\t\t}" + NL + "\t\t\tbreak;";
  protected final String TEXT_491 = NL + "\t\tcase ";
  protected final String TEXT_492 = ".VISUAL_ID:" + NL + "\t\t\tif (linkDescriptor.getLinkElement() == null) {" + NL + "\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t";
  protected final String TEXT_493 = ".decorateView(createdEdge);" + NL + "\t\t\t}" + NL + "\t\t\tbreak;";
  protected final String TEXT_494 = NL + "\t\t}" + NL + "\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn new ";
  protected final String TEXT_495 = "(parentView, createdEdge, sourceView, targetView);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_496 = " getSemanticChildLinks() {";
  protected final String TEXT_497 = NL;
  protected final String TEXT_498 = "\t";
  protected final String TEXT_499 = " result = new ";
  protected final String TEXT_500 = "();";
  protected final String TEXT_501 = NL + "\t";
  protected final String TEXT_502 = " modelObject = ";
  protected final String TEXT_503 = ".getElement();" + NL + "\t";
  protected final String TEXT_504 = " nextValue;";
  protected final String TEXT_505 = NL + "\tint linkVID;";
  protected final String TEXT_506 = NL + "\tfor(";
  protected final String TEXT_507 = " it = ";
  protected final String TEXT_508 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_509 = ") it.next();";
  protected final String TEXT_510 = NL + "\tnextValue = (";
  protected final String TEXT_511 = ")";
  protected final String TEXT_512 = ";";
  protected final String TEXT_513 = NL + "\tlinkVID = ";
  protected final String TEXT_514 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_515 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_516 = NL + "\tcase ";
  protected final String TEXT_517 = ".VISUAL_ID: {";
  protected final String TEXT_518 = NL + "\tif (";
  protected final String TEXT_519 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_520 = NL + "\t\t";
  protected final String TEXT_521 = " source = (";
  protected final String TEXT_522 = ")";
  protected final String TEXT_523 = ";";
  protected final String TEXT_524 = NL + "\t\t";
  protected final String TEXT_525 = " source = ";
  protected final String TEXT_526 = ".getElement();";
  protected final String TEXT_527 = NL + "\t\t";
  protected final String TEXT_528 = " target = (";
  protected final String TEXT_529 = ")";
  protected final String TEXT_530 = ";";
  protected final String TEXT_531 = NL + "\t\t";
  protected final String TEXT_532 = " target = ";
  protected final String TEXT_533 = ".getElement();";
  protected final String TEXT_534 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new LinkDescriptor(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_535 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_536 = NL + "\t}";
  protected final String TEXT_537 = NL + "\t}";
  protected final String TEXT_538 = NL + "\t}";
  protected final String TEXT_539 = NL + "\tfor(";
  protected final String TEXT_540 = " it = ";
  protected final String TEXT_541 = ".iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_542 = ") it.next();";
  protected final String TEXT_543 = NL + "\tnextValue = (";
  protected final String TEXT_544 = ")";
  protected final String TEXT_545 = ";";
  protected final String TEXT_546 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_547 = NL + "\t\tresult.add(new LinkDescriptor(modelObject, nextValue, null, ";
  protected final String TEXT_548 = ".VISUAL_ID));";
  protected final String TEXT_549 = NL + "\t}";
  protected final String TEXT_550 = NL + "\t}";
  protected final String TEXT_551 = NL + "\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_552 = " getNotationalChildLinks() {" + NL + "\t\t";
  protected final String TEXT_553 = " result = new ";
  protected final String TEXT_554 = "();" + NL + "\t\t";
  protected final String TEXT_555 = " allLinks = ";
  protected final String TEXT_556 = ".getEdges();" + NL + "\t\tfor(";
  protected final String TEXT_557 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_558 = " next = (";
  protected final String TEXT_559 = ") it.next();";
  protected final String TEXT_560 = NL + "\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_561 = " source = next.getSource();" + NL + "\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_562 = " target = next.getTarget();" + NL + "\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_563 = NL + "\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_564 = ") {" + NL + "\t\t\t\t\tint linkVID = ";
  protected final String TEXT_565 = ".getVisualID(next);" + NL + "\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_566 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_567 = ".VISUAL_ID:";
  protected final String TEXT_568 = NL + "\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_569 = NL + "\t\t\t} else {";
  protected final String TEXT_570 = NL + "\t\t\t}";
  protected final String TEXT_571 = NL + "\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_572 = NL + "\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_573 = ".getElement()) {" + NL + "\t\t\t\t\tint linkVID = ";
  protected final String TEXT_574 = ".getVisualID(next);" + NL + "\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_575 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_576 = ".VISUAL_ID:";
  protected final String TEXT_577 = NL + "\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_578 = NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_579 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateEdge(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_580 = ";" + NL + "\t}";
  protected final String TEXT_581 = NL;
  protected final String TEXT_582 = NL;
  protected final String TEXT_583 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_584 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_585 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_586 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_587 = NL;
  protected final String TEXT_588 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_589 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_590 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_591 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
d614 41
a654 41
  protected final String TEXT_593 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_594 = NL + "\t\t";
  protected final String TEXT_595 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_596 = ") ";
  protected final String TEXT_597 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_598 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_599 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_600 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_601 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_602 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_603 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_604 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_605 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_606 = "\t" + NL + "\t}";
  protected final String TEXT_607 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_608 = " createdFont;";
  protected final String TEXT_609 = "\t" + NL;
  protected final String TEXT_610 = NL;
  protected final String TEXT_611 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_612 = " style = (";
  protected final String TEXT_613 = ")  ";
  protected final String TEXT_614 = ".getStyle(";
  protected final String TEXT_615 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_616 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_617 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_618 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_619 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_620 = " style = (";
  protected final String TEXT_621 = ")  ";
  protected final String TEXT_622 = ".getStyle(";
  protected final String TEXT_623 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_624 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_625 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_626 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_627 = " createdBackgroundColor;" + NL;
  protected final String TEXT_628 = NL;
  protected final String TEXT_629 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_630 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_631 = " feature, ";
  protected final String TEXT_632 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_633 = "();";
d656 116
a771 116
  protected final String TEXT_635 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_636 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_637 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_638 = NL;
  protected final String TEXT_639 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_640 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_641 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_642 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_643 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_644 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_645 = NL;
  protected final String TEXT_646 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_647 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_648 = NL;
  protected final String TEXT_649 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_650 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_651 = NL;
  protected final String TEXT_652 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_653 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_654 = NL;
  protected final String TEXT_655 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_656 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_657 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_658 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_659 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_660 = NL;
  protected final String TEXT_661 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_662 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_663 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_664 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_665 = "SourceCommand extends ";
  protected final String TEXT_666 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_667 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_668 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_669 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_670 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_671 = "SourceCommand(";
  protected final String TEXT_672 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_673 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_674 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_675 = "SourceCommand(";
  protected final String TEXT_676 = " edge, ";
  protected final String TEXT_677 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_678 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_679 = " domainModelEditDomain = ";
  protected final String TEXT_680 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_681 = " command = new ";
  protected final String TEXT_682 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_683 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew WrappingCommand(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_684 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_685 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_686 = NL + "\t\t\treturn false;";
  protected final String TEXT_687 = NL + "\t\t\t";
  protected final String TEXT_688 = " container = (";
  protected final String TEXT_689 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_690 = ".eINSTANCE.get";
  protected final String TEXT_691 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_692 = NL;
  protected final String TEXT_693 = NL + "\t\tif (";
  protected final String TEXT_694 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_695 = NL + "\t\t}";
  protected final String TEXT_696 = NL + "\t\tif (";
  protected final String TEXT_697 = ".size() >= ";
  protected final String TEXT_698 = ".eINSTANCE.get";
  protected final String TEXT_699 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_700 = NL + "\t\t}";
  protected final String TEXT_701 = NL;
  protected final String TEXT_702 = NL + "\t\tif (";
  protected final String TEXT_703 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_704 = NL + "\t\t}";
  protected final String TEXT_705 = NL + "\t\tif (";
  protected final String TEXT_706 = ".size() >= ";
  protected final String TEXT_707 = ".eINSTANCE.get";
  protected final String TEXT_708 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_709 = NL + "\t\t}";
  protected final String TEXT_710 = NL;
  protected final String TEXT_711 = NL + "\t\t\tif(!";
  protected final String TEXT_712 = ".canCreateLink(";
  protected final String TEXT_713 = ", ";
  protected final String TEXT_714 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_715 = NL + "\t\t\treturn true;";
  protected final String TEXT_716 = NL;
  protected final String TEXT_717 = NL + "\t\tif (";
  protected final String TEXT_718 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_719 = NL + "\t\t}";
  protected final String TEXT_720 = NL + "\t\tif (";
  protected final String TEXT_721 = ".size() >= ";
  protected final String TEXT_722 = ".eINSTANCE.get";
  protected final String TEXT_723 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_724 = NL + "\t\t}";
  protected final String TEXT_725 = NL;
  protected final String TEXT_726 = NL + "\t\t\tif(!";
  protected final String TEXT_727 = ".canCreateLink(";
  protected final String TEXT_728 = ", ";
  protected final String TEXT_729 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_730 = NL + "\t\t\treturn true;";
  protected final String TEXT_731 = NL + "\t\t\treturn false;";
  protected final String TEXT_732 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_733 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_734 = " editingDomain = ";
  protected final String TEXT_735 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_736 = " result = new ";
  protected final String TEXT_737 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_738 = "(edge, newSource));";
  protected final String TEXT_739 = NL + "\t\t\t";
  protected final String TEXT_740 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_741 = ".eINSTANCE.get";
  protected final String TEXT_742 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_743 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_744 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_745 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_746 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_747 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), edge.getElement()));";
  protected final String TEXT_748 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_749 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), ";
  protected final String TEXT_750 = ".UNSET_VALUE));";
d773 14
a786 14
  protected final String TEXT_752 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_753 = ".eINSTANCE.get";
  protected final String TEXT_754 = "(), edge.getElement()));";
  protected final String TEXT_755 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_756 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_757 = ".eINSTANCE.get";
  protected final String TEXT_758 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_759 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_760 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_761 = ".eINSTANCE.get";
  protected final String TEXT_762 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_763 = ".UNSET_VALUE));";
  protected final String TEXT_764 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_765 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
d788 11
a798 11
  protected final String TEXT_767 = "(), edge.getElement()));";
  protected final String TEXT_768 = NL + "\t\t\t}";
  protected final String TEXT_769 = NL + "\t\t\tresult.append(";
  protected final String TEXT_770 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_771 = ".eINSTANCE.get";
  protected final String TEXT_772 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_773 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_774 = ".eINSTANCE.get";
  protected final String TEXT_775 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_776 = NL + "\t\t\tresult.append(";
  protected final String TEXT_777 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
d800 63
a862 63
  protected final String TEXT_779 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_780 = NL + "\t\t\tresult.append(";
  protected final String TEXT_781 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_782 = ".eINSTANCE.get";
  protected final String TEXT_783 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_784 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_785 = ".eINSTANCE.get";
  protected final String TEXT_786 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_787 = NL + "\t\t\tresult.append(";
  protected final String TEXT_788 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_789 = ".eINSTANCE.get";
  protected final String TEXT_790 = "(), ";
  protected final String TEXT_791 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_792 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_793 = ".eINSTANCE.get";
  protected final String TEXT_794 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_795 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_796 = NL;
  protected final String TEXT_797 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_798 = " getRelationshipContainer(";
  protected final String TEXT_799 = " element, ";
  protected final String TEXT_800 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_801 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_802 = NL;
  protected final String TEXT_803 = NL + "\t\t\tprivate ";
  protected final String TEXT_804 = " createDomainModelRemoveCommand(";
  protected final String TEXT_805 = " editingDomain) {";
  protected final String TEXT_806 = NL + "\t\t\t\t";
  protected final String TEXT_807 = " result = new ";
  protected final String TEXT_808 = "();";
  protected final String TEXT_809 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_810 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_811 = ".getElement().eContainer(), ";
  protected final String TEXT_812 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_813 = ".getElement()));";
  protected final String TEXT_814 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_815 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_816 = ".getElement().eContainer(), ";
  protected final String TEXT_817 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_818 = ".UNSET_VALUE));";
  protected final String TEXT_819 = NL + "\t\t\t\treturn ";
  protected final String TEXT_820 = ".INSTANCE;";
  protected final String TEXT_821 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_822 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_823 = ".getElement().eContainer(), ";
  protected final String TEXT_824 = ".eINSTANCE.get";
  protected final String TEXT_825 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_826 = ".getElement()));";
  protected final String TEXT_827 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_828 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_829 = ".getElement().eContainer(), ";
  protected final String TEXT_830 = ".eINSTANCE.get";
  protected final String TEXT_831 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_832 = ".UNSET_VALUE));";
  protected final String TEXT_833 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_834 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_835 = ".getElement(), ";
  protected final String TEXT_836 = ".eINSTANCE.get";
  protected final String TEXT_837 = "(), ";
  protected final String TEXT_838 = ".getSource().getElement()));";
  protected final String TEXT_839 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_840 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_841 = ".getElement(), ";
d864 60
a923 60
  protected final String TEXT_843 = "(), ";
  protected final String TEXT_844 = ".UNSET_VALUE));";
  protected final String TEXT_845 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_846 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_847 = ".getElement(), ";
  protected final String TEXT_848 = ".eINSTANCE.get";
  protected final String TEXT_849 = "(), ";
  protected final String TEXT_850 = ".getTarget().getElement()));";
  protected final String TEXT_851 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_852 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_853 = ".getElement(), ";
  protected final String TEXT_854 = ".eINSTANCE.get";
  protected final String TEXT_855 = "(), ";
  protected final String TEXT_856 = ".UNSET_VALUE));";
  protected final String TEXT_857 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_858 = NL + "\t\t\t\treturn ";
  protected final String TEXT_859 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_860 = ".getSource().getElement(), ";
  protected final String TEXT_861 = ".eINSTANCE.get";
  protected final String TEXT_862 = "(), ";
  protected final String TEXT_863 = ".getTarget().getElement());";
  protected final String TEXT_864 = NL + "\t\t\t\treturn ";
  protected final String TEXT_865 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_866 = ".getSource().getElement(), ";
  protected final String TEXT_867 = ".eINSTANCE.get";
  protected final String TEXT_868 = "(), ";
  protected final String TEXT_869 = ".UNSET_VALUE);";
  protected final String TEXT_870 = NL + "\t\t\t}";
  protected final String TEXT_871 = NL + "\t}" + NL;
  protected final String TEXT_872 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_873 = "StartCommand extends ";
  protected final String TEXT_874 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_875 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_876 = "StartCommand(";
  protected final String TEXT_877 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_878 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_879 = NL + "\t\t\treturn false;";
  protected final String TEXT_880 = NL + "\t\t\t";
  protected final String TEXT_881 = " container = (";
  protected final String TEXT_882 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_883 = ".eINSTANCE.get";
  protected final String TEXT_884 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_885 = NL;
  protected final String TEXT_886 = NL + "\t\tif (";
  protected final String TEXT_887 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_888 = NL + "\t\t}";
  protected final String TEXT_889 = NL + "\t\tif (";
  protected final String TEXT_890 = ".size() >= ";
  protected final String TEXT_891 = ".eINSTANCE.get";
  protected final String TEXT_892 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_893 = NL + "\t\t}";
  protected final String TEXT_894 = NL;
  protected final String TEXT_895 = NL + "\t\tif (";
  protected final String TEXT_896 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_897 = NL + "\t\t}";
  protected final String TEXT_898 = NL + "\t\tif (";
  protected final String TEXT_899 = ".size() >= ";
  protected final String TEXT_900 = ".eINSTANCE.get";
  protected final String TEXT_901 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_902 = NL + "\t\t}";
d930 78
a1007 78
  protected final String TEXT_909 = NL;
  protected final String TEXT_910 = NL + "\t\tif (";
  protected final String TEXT_911 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_912 = NL + "\t\t}";
  protected final String TEXT_913 = NL + "\t\tif (";
  protected final String TEXT_914 = ".size() >= ";
  protected final String TEXT_915 = ".eINSTANCE.get";
  protected final String TEXT_916 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_917 = NL + "\t\t}";
  protected final String TEXT_918 = NL;
  protected final String TEXT_919 = NL + "\t\t\tif(!";
  protected final String TEXT_920 = ".canCreateLink(";
  protected final String TEXT_921 = ", ";
  protected final String TEXT_922 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_923 = NL + "\t\t\treturn true;";
  protected final String TEXT_924 = NL + "\t\t\treturn false;";
  protected final String TEXT_925 = NL + "\t\t}";
  protected final String TEXT_926 = NL;
  protected final String TEXT_927 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_928 = " getRelationshipContainer(";
  protected final String TEXT_929 = " element, ";
  protected final String TEXT_930 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_931 = NL + NL + "\t}";
  protected final String TEXT_932 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_933 = "TargetCommand extends ";
  protected final String TEXT_934 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_935 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_936 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_937 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_938 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_939 = "TargetCommand(";
  protected final String TEXT_940 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_941 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_942 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_943 = "TargetCommand(";
  protected final String TEXT_944 = " edge, ";
  protected final String TEXT_945 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_946 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_947 = " domainModelEditDomain = ";
  protected final String TEXT_948 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_949 = " command = new ";
  protected final String TEXT_950 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_951 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew WrappingCommand(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_952 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_953 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_954 = NL;
  protected final String TEXT_955 = NL + "\t\t\tif(!";
  protected final String TEXT_956 = ".canCreateLink(";
  protected final String TEXT_957 = ", ";
  protected final String TEXT_958 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_959 = NL + "\t\t\treturn true;";
  protected final String TEXT_960 = NL;
  protected final String TEXT_961 = NL + "\t\t\tif(!";
  protected final String TEXT_962 = ".canCreateLink(";
  protected final String TEXT_963 = ", ";
  protected final String TEXT_964 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_965 = NL + "\t\t\treturn true;";
  protected final String TEXT_966 = NL + "\t\t\treturn false;";
  protected final String TEXT_967 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_968 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_969 = " editingDomain = ";
  protected final String TEXT_970 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_971 = " result = new ";
  protected final String TEXT_972 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_973 = "(edge, newTarget));";
  protected final String TEXT_974 = NL + "\t\t\tresult.append(";
  protected final String TEXT_975 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_976 = ".eINSTANCE.get";
  protected final String TEXT_977 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_978 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_979 = ".eINSTANCE.get";
  protected final String TEXT_980 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_981 = NL + "\t\t\tresult.append(";
  protected final String TEXT_982 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_983 = ".eINSTANCE.get";
  protected final String TEXT_984 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_985 = NL + "\t\t\tresult.append(";
  protected final String TEXT_986 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
d1009 116
a1124 173
  protected final String TEXT_988 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_989 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_990 = ".eINSTANCE.get";
  protected final String TEXT_991 = "(), newTarget.getElement()));";
  protected final String TEXT_992 = NL + "\t\t\tresult.append(";
  protected final String TEXT_993 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_994 = ".eINSTANCE.get";
  protected final String TEXT_995 = "(), newTarget.getElement()));";
  protected final String TEXT_996 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_997 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_998 = NL;
  protected final String TEXT_999 = NL + "\t\t\tprivate ";
  protected final String TEXT_1000 = " createDomainModelRemoveCommand(";
  protected final String TEXT_1001 = " editingDomain) {";
  protected final String TEXT_1002 = NL + "\t\t\t\t";
  protected final String TEXT_1003 = " result = new ";
  protected final String TEXT_1004 = "();";
  protected final String TEXT_1005 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1006 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1007 = ".getElement().eContainer(), ";
  protected final String TEXT_1008 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1009 = ".getElement()));";
  protected final String TEXT_1010 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1011 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1012 = ".getElement().eContainer(), ";
  protected final String TEXT_1013 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1014 = ".UNSET_VALUE));";
  protected final String TEXT_1015 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1016 = ".INSTANCE;";
  protected final String TEXT_1017 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1018 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1019 = ".getElement().eContainer(), ";
  protected final String TEXT_1020 = ".eINSTANCE.get";
  protected final String TEXT_1021 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1022 = ".getElement()));";
  protected final String TEXT_1023 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1024 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1025 = ".getElement().eContainer(), ";
  protected final String TEXT_1026 = ".eINSTANCE.get";
  protected final String TEXT_1027 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1028 = ".UNSET_VALUE));";
  protected final String TEXT_1029 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1030 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1031 = ".getElement(), ";
  protected final String TEXT_1032 = ".eINSTANCE.get";
  protected final String TEXT_1033 = "(), ";
  protected final String TEXT_1034 = ".getSource().getElement()));";
  protected final String TEXT_1035 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1036 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1037 = ".getElement(), ";
  protected final String TEXT_1038 = ".eINSTANCE.get";
  protected final String TEXT_1039 = "(), ";
  protected final String TEXT_1040 = ".UNSET_VALUE));";
  protected final String TEXT_1041 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1042 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1043 = ".getElement(), ";
  protected final String TEXT_1044 = ".eINSTANCE.get";
  protected final String TEXT_1045 = "(), ";
  protected final String TEXT_1046 = ".getTarget().getElement()));";
  protected final String TEXT_1047 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1048 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1049 = ".getElement(), ";
  protected final String TEXT_1050 = ".eINSTANCE.get";
  protected final String TEXT_1051 = "(), ";
  protected final String TEXT_1052 = ".UNSET_VALUE));";
  protected final String TEXT_1053 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1054 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1055 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1056 = ".getSource().getElement(), ";
  protected final String TEXT_1057 = ".eINSTANCE.get";
  protected final String TEXT_1058 = "(), ";
  protected final String TEXT_1059 = ".getTarget().getElement());";
  protected final String TEXT_1060 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1061 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1062 = ".getSource().getElement(), ";
  protected final String TEXT_1063 = ".eINSTANCE.get";
  protected final String TEXT_1064 = "(), ";
  protected final String TEXT_1065 = ".UNSET_VALUE);";
  protected final String TEXT_1066 = NL + "\t\t\t}";
  protected final String TEXT_1067 = NL + "\t}" + NL;
  protected final String TEXT_1068 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1069 = "Command extends ";
  protected final String TEXT_1070 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1071 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1072 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1073 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1074 = "Command(";
  protected final String TEXT_1075 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1076 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1077 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1078 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1079 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1080 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1081 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1082 = NL + "\t\t\t";
  protected final String TEXT_1083 = " createdDomainElement = ";
  protected final String TEXT_1084 = ".eINSTANCE.create";
  protected final String TEXT_1085 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1086 = "(";
  protected final String TEXT_1087 = ") ";
  protected final String TEXT_1088 = "createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1089 = NL + "\t\t\t";
  protected final String TEXT_1090 = ".";
  protected final String TEXT_1091 = ".initializeElement(";
  protected final String TEXT_1092 = "(";
  protected final String TEXT_1093 = ") ";
  protected final String TEXT_1094 = "createdDomainElement);";
  protected final String TEXT_1095 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1096 = NL + "\t\t\t";
  protected final String TEXT_1097 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1098 = " domainModelEditDomain = ";
  protected final String TEXT_1099 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1100 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1101 = NL + "\t\t\t";
  protected final String TEXT_1102 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1103 = ".eINSTANCE.get";
  protected final String TEXT_1104 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1105 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1106 = ".eINSTANCE.get";
  protected final String TEXT_1107 = "(), createdDomainElement));";
  protected final String TEXT_1108 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1109 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1110 = ".eINSTANCE.get";
  protected final String TEXT_1111 = "(), createdDomainElement));";
  protected final String TEXT_1112 = NL;
  protected final String TEXT_1113 = NL + "\t\tif (";
  protected final String TEXT_1114 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1115 = NL + "\t\t}";
  protected final String TEXT_1116 = NL + "\t\tif (";
  protected final String TEXT_1117 = ".size() >= ";
  protected final String TEXT_1118 = ".eINSTANCE.get";
  protected final String TEXT_1119 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1120 = NL + "\t\t}";
  protected final String TEXT_1121 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1122 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1123 = ".eINSTANCE.get";
  protected final String TEXT_1124 = "(), source.getElement()));";
  protected final String TEXT_1125 = NL;
  protected final String TEXT_1126 = NL + "\t\tif (";
  protected final String TEXT_1127 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1128 = NL + "\t\t}";
  protected final String TEXT_1129 = NL + "\t\tif (";
  protected final String TEXT_1130 = ".size() >= ";
  protected final String TEXT_1131 = ".eINSTANCE.get";
  protected final String TEXT_1132 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1133 = NL + "\t\t}";
  protected final String TEXT_1134 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1135 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1136 = ".eINSTANCE.get";
  protected final String TEXT_1137 = "(), target.getElement()));";
  protected final String TEXT_1138 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1139 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1140 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1141 = ".eINSTANCE.get";
  protected final String TEXT_1142 = "(), target.getElement());";
  protected final String TEXT_1143 = NL + "\t\t}" + NL;
  protected final String TEXT_1144 = NL;
  protected final String TEXT_1145 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1146 = " getRelationshipContainer(";
  protected final String TEXT_1147 = " element, ";
  protected final String TEXT_1148 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1149 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1150 = NL;
  protected final String TEXT_1151 = NL + "\t\t\tif(!";
  protected final String TEXT_1152 = ".canCreateLink(";
  protected final String TEXT_1153 = ", ";
  protected final String TEXT_1154 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1155 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1156 = NL;
  protected final String TEXT_1157 = NL;
  protected final String TEXT_1158 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1159 = NL + "}";
  protected final String TEXT_1160 = NL;
a1136 1
importManager.registerInnerClass("LinkDescriptor");	//from linkNotationModelRefresher.jetinc
d1387 2
a1390 1
    stringBuffer.append(TEXT_26);
d1392 1
d1394 1
a1394 1
    stringBuffer.append(TEXT_28);
a1395 2
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d1399 2
d1402 1
a1402 1
    stringBuffer.append(TEXT_32);
d1404 1
a1404 1
    stringBuffer.append(TEXT_33);
a1405 1
    stringBuffer.append(TEXT_34);
a1407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1415 1
d1418 1
d1420 1
a1420 1
    stringBuffer.append(TEXT_43);
d1422 1
a1422 1
    stringBuffer.append(TEXT_44);
d1424 1
a1424 1
    stringBuffer.append(TEXT_45);
d1426 1
a1426 1
    stringBuffer.append(TEXT_46);
d1428 1
a1428 1
    stringBuffer.append(TEXT_47);
a1429 2
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d1433 2
d1436 3
a1438 1
    stringBuffer.append(TEXT_51);
d1440 1
a1440 1
    stringBuffer.append(TEXT_52);
d1448 1
a1448 1
    stringBuffer.append(TEXT_53);
d1450 1
a1450 1
    stringBuffer.append(TEXT_54);
d1452 1
a1452 1
    stringBuffer.append(TEXT_55);
d1456 1
a1456 1
    stringBuffer.append(TEXT_56);
d1458 1
a1458 1
    stringBuffer.append(TEXT_57);
d1460 1
a1460 1
    stringBuffer.append(TEXT_58);
d1462 1
a1462 1
    stringBuffer.append(TEXT_59);
d1466 1
a1466 1
    stringBuffer.append(TEXT_60);
d1468 1
a1468 1
    stringBuffer.append(TEXT_61);
d1470 1
a1470 1
    stringBuffer.append(TEXT_62);
d1472 1
a1472 1
    stringBuffer.append(TEXT_63);
d1474 1
a1474 1
    stringBuffer.append(TEXT_64);
d1481 1
a1481 1
    stringBuffer.append(TEXT_65);
d1483 1
a1483 1
    stringBuffer.append(TEXT_66);
d1485 1
a1485 1
    stringBuffer.append(TEXT_67);
d1487 1
a1487 1
    stringBuffer.append(TEXT_68);
d1491 1
a1491 1
    stringBuffer.append(TEXT_69);
d1493 1
a1493 1
    stringBuffer.append(TEXT_70);
d1495 1
a1495 1
    stringBuffer.append(TEXT_71);
d1497 1
a1497 1
    stringBuffer.append(TEXT_72);
d1499 1
a1499 1
    stringBuffer.append(TEXT_73);
d1503 1
a1503 1
    stringBuffer.append(TEXT_74);
d1508 1
a1508 1
    stringBuffer.append(TEXT_75);
d1510 1
a1510 1
    stringBuffer.append(TEXT_76);
d1512 1
a1512 1
    stringBuffer.append(TEXT_77);
d1514 1
a1514 1
    stringBuffer.append(TEXT_78);
d1518 1
a1518 1
    stringBuffer.append(TEXT_79);
d1520 1
a1520 1
    stringBuffer.append(TEXT_80);
d1522 1
a1522 1
    stringBuffer.append(TEXT_81);
d1524 1
a1524 1
    stringBuffer.append(TEXT_82);
d1526 1
a1526 1
    stringBuffer.append(TEXT_83);
d1531 1
a1531 1
    stringBuffer.append(TEXT_84);
d1535 1
a1535 1
    stringBuffer.append(TEXT_85);
d1537 1
a1537 1
    stringBuffer.append(TEXT_86);
d1539 1
a1539 1
    stringBuffer.append(TEXT_87);
d1541 1
a1541 1
    stringBuffer.append(TEXT_88);
d1543 1
a1543 1
    stringBuffer.append(TEXT_89);
d1545 1
a1545 1
    stringBuffer.append(TEXT_90);
d1547 1
a1547 1
    stringBuffer.append(TEXT_91);
d1549 1
a1549 1
    stringBuffer.append(TEXT_92);
d1551 1
a1551 1
    stringBuffer.append(TEXT_93);
d1553 1
a1553 1
    stringBuffer.append(TEXT_94);
d1555 1
a1555 1
    stringBuffer.append(TEXT_95);
d1557 1
a1557 1
    stringBuffer.append(TEXT_96);
d1559 1
a1559 1
    stringBuffer.append(TEXT_97);
d1561 1
a1561 1
    stringBuffer.append(TEXT_98);
d1563 1
a1563 1
    stringBuffer.append(TEXT_99);
d1565 1
a1565 1
    stringBuffer.append(TEXT_100);
d1567 1
a1567 1
    stringBuffer.append(TEXT_101);
d1569 1
a1569 1
    stringBuffer.append(TEXT_102);
d1571 1
a1571 1
    stringBuffer.append(TEXT_103);
d1573 1
a1573 1
    stringBuffer.append(TEXT_104);
d1575 1
a1575 1
    stringBuffer.append(TEXT_105);
d1577 1
a1577 1
    stringBuffer.append(TEXT_106);
d1581 1
a1581 1
    stringBuffer.append(TEXT_107);
d1583 1
a1583 1
    stringBuffer.append(TEXT_108);
d1587 1
a1587 1
    stringBuffer.append(TEXT_109);
d1589 1
a1589 1
    stringBuffer.append(TEXT_110);
d1591 1
a1591 1
    stringBuffer.append(TEXT_111);
d1593 1
a1593 1
    stringBuffer.append(TEXT_112);
d1595 1
a1595 1
    stringBuffer.append(TEXT_113);
d1597 1
a1597 1
    stringBuffer.append(TEXT_114);
d1599 1
a1599 1
    stringBuffer.append(TEXT_115);
d1601 1
a1601 1
    stringBuffer.append(TEXT_116);
d1603 1
a1603 1
    stringBuffer.append(TEXT_117);
d1605 1
a1605 1
    stringBuffer.append(TEXT_118);
d1607 1
a1607 1
    stringBuffer.append(TEXT_119);
d1631 1
a1631 1
    stringBuffer.append(TEXT_120);
d1633 1
a1633 1
    stringBuffer.append(TEXT_121);
d1636 1
a1636 1
    stringBuffer.append(TEXT_122);
d1640 1
a1640 1
    stringBuffer.append(TEXT_123);
d1642 3
a1644 1
    stringBuffer.append(TEXT_124);
d1646 1
a1646 1
    stringBuffer.append(TEXT_125);
d1650 1
a1650 1
    stringBuffer.append(TEXT_126);
d1652 1
a1652 1
    stringBuffer.append(TEXT_127);
d1654 1
a1654 1
    stringBuffer.append(TEXT_128);
d1658 1
a1658 1
    stringBuffer.append(TEXT_129);
d1660 1
a1660 1
    stringBuffer.append(TEXT_130);
d1664 1
a1664 1
    stringBuffer.append(TEXT_131);
d1666 1
a1666 1
    stringBuffer.append(TEXT_132);
d1668 1
a1668 1
    stringBuffer.append(TEXT_133);
d1670 1
a1670 1
    stringBuffer.append(TEXT_134);
d1672 1
a1672 1
    stringBuffer.append(TEXT_135);
d1674 1
a1674 1
    stringBuffer.append(TEXT_136);
d1676 1
a1676 1
    stringBuffer.append(TEXT_137);
d1678 1
a1678 1
    stringBuffer.append(TEXT_138);
d1680 1
a1680 1
    stringBuffer.append(TEXT_139);
d1682 1
a1682 1
    stringBuffer.append(TEXT_140);
d1684 1
a1684 1
    stringBuffer.append(TEXT_141);
d1710 1
a1710 1
    stringBuffer.append(TEXT_142);
d1712 1
a1712 1
    stringBuffer.append(TEXT_143);
d1715 1
a1715 1
    stringBuffer.append(TEXT_144);
d1719 1
a1719 1
    stringBuffer.append(TEXT_145);
d1721 3
a1723 1
    stringBuffer.append(TEXT_146);
d1725 1
a1725 1
    stringBuffer.append(TEXT_147);
d1729 1
a1729 1
    stringBuffer.append(TEXT_148);
d1731 1
a1731 1
    stringBuffer.append(TEXT_149);
d1733 1
a1733 1
    stringBuffer.append(TEXT_150);
d1735 7
a1741 7
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_154);
d1743 1
a1743 1
    stringBuffer.append(TEXT_155);
d1745 1
a1745 1
    stringBuffer.append(TEXT_156);
d1771 1
a1771 1
    stringBuffer.append(TEXT_157);
d1773 1
a1773 1
    stringBuffer.append(TEXT_158);
d1776 1
a1776 1
    stringBuffer.append(TEXT_159);
d1780 1
a1780 1
    stringBuffer.append(TEXT_160);
d1782 3
a1784 1
    stringBuffer.append(TEXT_161);
d1786 1
a1786 1
    stringBuffer.append(TEXT_162);
d1788 1
a1788 1
    stringBuffer.append(TEXT_163);
d1790 1
a1790 1
    stringBuffer.append(TEXT_164);
d1792 1
a1792 1
    stringBuffer.append(TEXT_165);
d1794 1
a1794 1
    stringBuffer.append(TEXT_166);
d1796 7
a1802 7
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_170);
d1804 1
a1804 1
    stringBuffer.append(TEXT_171);
d1806 1
a1806 1
    stringBuffer.append(TEXT_172);
d1830 1
a1830 1
    stringBuffer.append(TEXT_173);
d1832 1
a1832 1
    stringBuffer.append(TEXT_174);
d1835 1
a1835 1
    stringBuffer.append(TEXT_175);
d1839 1
a1839 1
    stringBuffer.append(TEXT_176);
d1841 3
a1843 1
    stringBuffer.append(TEXT_177);
d1845 1
a1845 1
    stringBuffer.append(TEXT_178);
d1847 1
a1847 1
    stringBuffer.append(TEXT_179);
d1849 1
a1849 1
    stringBuffer.append(TEXT_180);
d1853 1
a1853 1
    stringBuffer.append(TEXT_181);
d1857 1
a1857 1
    stringBuffer.append(TEXT_182);
d1859 1
a1859 1
    stringBuffer.append(TEXT_183);
d1861 1
a1861 1
    stringBuffer.append(TEXT_184);
d1863 1
a1863 1
    stringBuffer.append(TEXT_185);
d1865 1
a1865 1
    stringBuffer.append(TEXT_186);
d1867 1
a1867 1
    stringBuffer.append(TEXT_187);
d1869 1
a1869 1
    stringBuffer.append(TEXT_188);
d1871 1
a1871 1
    stringBuffer.append(TEXT_189);
d1881 1
a1881 1
    stringBuffer.append(TEXT_190);
d1883 1
a1883 1
    stringBuffer.append(TEXT_191);
d1885 1
a1885 1
    stringBuffer.append(TEXT_192);
d1887 1
a1887 1
    stringBuffer.append(TEXT_193);
d1889 1
a1889 1
    stringBuffer.append(TEXT_194);
d1891 1
a1891 1
    stringBuffer.append(TEXT_195);
d1895 1
a1895 1
    stringBuffer.append(TEXT_196);
d1897 1
a1897 1
    stringBuffer.append(TEXT_197);
d1899 1
a1899 1
    stringBuffer.append(TEXT_198);
d1901 1
a1901 1
    stringBuffer.append(TEXT_199);
d1903 1
a1903 1
    stringBuffer.append(TEXT_200);
d1905 1
a1905 1
    stringBuffer.append(TEXT_201);
d1907 1
a1907 1
    stringBuffer.append(TEXT_202);
d1909 1
a1909 1
    stringBuffer.append(TEXT_203);
d1911 1
a1911 1
    stringBuffer.append(TEXT_204);
d1913 1
a1913 1
    stringBuffer.append(TEXT_205);
d1915 1
a1915 1
    stringBuffer.append(TEXT_206);
d1917 1
a1917 1
    stringBuffer.append(TEXT_207);
d1919 1
a1919 1
    stringBuffer.append(TEXT_208);
d1921 1
a1921 1
    stringBuffer.append(TEXT_209);
d1923 1
a1923 1
    stringBuffer.append(TEXT_210);
d1925 1
a1925 1
    stringBuffer.append(TEXT_211);
d1927 1
a1927 1
    stringBuffer.append(TEXT_212);
d1929 1
a1929 1
    stringBuffer.append(TEXT_213);
d1931 1
a1931 1
    stringBuffer.append(TEXT_214);
d1933 1
a1933 1
    stringBuffer.append(TEXT_215);
d1935 1
a1935 1
    stringBuffer.append(TEXT_216);
d1937 1
a1937 1
    stringBuffer.append(TEXT_217);
d1939 1
a1939 1
    stringBuffer.append(TEXT_218);
d1941 1
a1941 1
    stringBuffer.append(TEXT_219);
d1946 1
a1946 1
    stringBuffer.append(TEXT_220);
d1948 1
a1948 1
    stringBuffer.append(TEXT_221);
d1950 1
a1950 1
    stringBuffer.append(TEXT_222);
d1952 1
a1952 1
    stringBuffer.append(TEXT_223);
d1954 1
a1954 1
    stringBuffer.append(TEXT_224);
d1956 1
a1956 1
    stringBuffer.append(TEXT_225);
d1958 1
a1958 1
    stringBuffer.append(TEXT_226);
d1960 1
a1960 1
    stringBuffer.append(TEXT_227);
d1962 1
a1962 1
    stringBuffer.append(TEXT_228);
d1964 1
a1964 1
    stringBuffer.append(TEXT_229);
d1966 1
a1966 1
    stringBuffer.append(TEXT_230);
d1970 1
a1970 1
    stringBuffer.append(TEXT_231);
d1972 1
a1972 1
    stringBuffer.append(TEXT_232);
d1980 1
a1980 1
    stringBuffer.append(TEXT_233);
d1982 1
a1982 1
    stringBuffer.append(TEXT_234);
d1984 1
a1984 1
    stringBuffer.append(TEXT_235);
d1986 1
a1986 1
    stringBuffer.append(TEXT_236);
d1988 1
a1988 1
    stringBuffer.append(TEXT_237);
d1997 1
a1997 1
    stringBuffer.append(TEXT_238);
d1999 1
a1999 1
    stringBuffer.append(TEXT_239);
d2001 1
a2001 1
    stringBuffer.append(TEXT_240);
d2003 1
a2003 1
    stringBuffer.append(TEXT_241);
d2005 1
a2005 1
    stringBuffer.append(TEXT_242);
d2009 1
a2009 1
    stringBuffer.append(TEXT_243);
d2017 1
a2017 1
    stringBuffer.append(TEXT_244);
d2019 1
a2019 1
    stringBuffer.append(TEXT_245);
d2021 1
a2021 1
    stringBuffer.append(TEXT_246);
d2023 1
a2023 1
    stringBuffer.append(TEXT_247);
d2025 1
a2025 1
    stringBuffer.append(TEXT_248);
d2029 1
a2029 1
    stringBuffer.append(TEXT_249);
d2033 1
a2033 1
    stringBuffer.append(TEXT_250);
d2035 1
a2035 1
    stringBuffer.append(TEXT_251);
d2047 1
a2047 1
    stringBuffer.append(TEXT_252);
d2049 1
a2049 1
    stringBuffer.append(TEXT_253);
d2051 1
a2051 1
    stringBuffer.append(TEXT_254);
d2053 1
a2053 1
    stringBuffer.append(TEXT_255);
d2055 1
a2055 1
    stringBuffer.append(TEXT_256);
d2057 1
a2057 1
    stringBuffer.append(TEXT_257);
d2059 1
a2059 1
    stringBuffer.append(TEXT_258);
d2063 1
a2063 1
    stringBuffer.append(TEXT_259);
d2065 1
a2065 1
    stringBuffer.append(TEXT_260);
d2067 1
a2067 1
    stringBuffer.append(TEXT_261);
d2069 1
a2069 1
    stringBuffer.append(TEXT_262);
d2071 1
a2071 1
    stringBuffer.append(TEXT_263);
d2073 1
a2073 1
    stringBuffer.append(TEXT_264);
d2075 1
a2075 1
    stringBuffer.append(TEXT_265);
d2077 1
a2077 1
    stringBuffer.append(TEXT_266);
d2079 1
a2079 1
    stringBuffer.append(TEXT_267);
d2081 1
a2081 1
    stringBuffer.append(TEXT_268);
d2083 1
a2083 1
    stringBuffer.append(TEXT_269);
d2085 1
a2085 1
    stringBuffer.append(TEXT_270);
d2093 1
a2093 1
    stringBuffer.append(TEXT_271);
d2095 1
a2095 1
    stringBuffer.append(TEXT_272);
d2099 1
a2099 1
    stringBuffer.append(TEXT_273);
d2103 1
a2103 1
    stringBuffer.append(TEXT_274);
d2105 1
a2105 1
    stringBuffer.append(TEXT_275);
d2110 1
a2110 1
    stringBuffer.append(TEXT_276);
d2112 1
a2112 1
    stringBuffer.append(TEXT_277);
d2116 1
a2116 1
    stringBuffer.append(TEXT_278);
d2118 1
a2118 1
    stringBuffer.append(TEXT_279);
d2120 1
a2120 1
    stringBuffer.append(TEXT_280);
d2122 1
a2122 1
    stringBuffer.append(TEXT_281);
d2124 1
a2124 1
    stringBuffer.append(TEXT_282);
d2129 1
a2129 1
    stringBuffer.append(TEXT_283);
d2131 1
a2131 1
    stringBuffer.append(TEXT_284);
d2135 1
a2135 1
    stringBuffer.append(TEXT_285);
d2137 1
a2137 1
    stringBuffer.append(TEXT_286);
d2139 1
a2139 1
    stringBuffer.append(TEXT_287);
d2144 1
a2144 1
    stringBuffer.append(TEXT_288);
d2148 1
a2148 1
    stringBuffer.append(TEXT_289);
d2150 1
a2150 1
    stringBuffer.append(TEXT_290);
d2154 1
a2154 1
    stringBuffer.append(TEXT_291);
d2156 1
a2156 1
    stringBuffer.append(TEXT_292);
d2158 1
a2158 1
    stringBuffer.append(TEXT_293);
d2163 1
a2163 1
    stringBuffer.append(TEXT_294);
d2167 1
a2167 1
    stringBuffer.append(TEXT_295);
d2174 1
a2174 1
    stringBuffer.append(TEXT_296);
d2176 1
a2176 1
    stringBuffer.append(TEXT_297);
d2178 1
a2178 1
    stringBuffer.append(TEXT_298);
d2180 1
a2180 1
    stringBuffer.append(TEXT_299);
d2182 1
a2182 1
    stringBuffer.append(TEXT_300);
d2186 1
a2186 1
    stringBuffer.append(TEXT_301);
d2188 1
a2188 1
    stringBuffer.append(TEXT_302);
d2190 1
a2190 1
    stringBuffer.append(TEXT_303);
d2192 1
a2192 1
    stringBuffer.append(TEXT_304);
d2194 1
a2194 1
    stringBuffer.append(TEXT_305);
d2196 1
a2196 1
    stringBuffer.append(TEXT_306);
d2198 1
a2198 1
    stringBuffer.append(TEXT_307);
d2200 1
a2200 1
    stringBuffer.append(TEXT_308);
d2202 1
a2202 1
    stringBuffer.append(TEXT_309);
a2203 12
    stringBuffer.append(TEXT_310);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
    stringBuffer.append(TEXT_311);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
    stringBuffer.append(TEXT_312);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
    stringBuffer.append(TEXT_313);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
    stringBuffer.append(TEXT_314);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_315);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d2217 12
d2230 1
a2230 1
    stringBuffer.append(TEXT_323);
d2234 1
a2234 1
    stringBuffer.append(TEXT_324);
d2238 1
a2238 1
    stringBuffer.append(TEXT_325);
d2242 1
a2242 1
    stringBuffer.append(TEXT_326);
d2246 1
a2246 1
    stringBuffer.append(TEXT_327);
d2253 1
a2253 1
    stringBuffer.append(TEXT_328);
d2257 1
a2257 1
    stringBuffer.append(TEXT_329);
d2259 1
a2259 1
    stringBuffer.append(TEXT_330);
d2261 1
a2261 1
    stringBuffer.append(TEXT_331);
d2263 11
a2273 7
    stringBuffer.append(TEXT_332);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetListenerImpl"));
    stringBuffer.append(TEXT_333);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_334);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_335);
d2286 1
a2286 1
    stringBuffer.append(TEXT_336);
d2288 1
a2288 1
    stringBuffer.append(TEXT_337);
d2290 1
a2290 1
    stringBuffer.append(TEXT_338);
d2292 1
a2292 1
    stringBuffer.append(TEXT_339);
d2297 1
a2297 1
    stringBuffer.append(TEXT_340);
d2299 1
a2299 1
    stringBuffer.append(TEXT_341);
d2301 1
a2301 1
    stringBuffer.append(TEXT_342);
d2303 1
a2303 1
    stringBuffer.append(TEXT_343);
d2305 1
a2305 1
    stringBuffer.append(TEXT_344);
d2307 1
a2307 1
    stringBuffer.append(TEXT_345);
d2309 1
a2309 1
    stringBuffer.append(TEXT_346);
d2311 1
a2311 1
    stringBuffer.append(TEXT_347);
d2313 1
a2313 1
    stringBuffer.append(TEXT_348);
d2315 1
a2315 1
    stringBuffer.append(TEXT_349);
d2319 3
a2321 1
    stringBuffer.append(TEXT_350);
d2334 1
a2334 1
    stringBuffer.append(TEXT_351);
d2348 3
a2350 1
    stringBuffer.append(TEXT_352);
d2352 1
a2352 1
    stringBuffer.append(TEXT_353);
d2354 1
a2354 1
    stringBuffer.append(TEXT_354);
d2356 1
a2356 1
    stringBuffer.append(TEXT_355);
d2360 1
a2360 1
    stringBuffer.append(TEXT_356);
d2362 1
a2362 1
    stringBuffer.append(TEXT_357);
d2364 1
a2364 1
    stringBuffer.append(TEXT_358);
d2366 1
a2366 1
    stringBuffer.append(TEXT_359);
d2373 1
a2373 1
    stringBuffer.append(TEXT_360);
d2387 3
a2389 1
    stringBuffer.append(TEXT_361);
d2391 1
a2391 1
    stringBuffer.append(TEXT_362);
d2393 1
a2393 1
    stringBuffer.append(TEXT_363);
d2395 1
a2395 1
    stringBuffer.append(TEXT_364);
d2399 1
a2399 1
    stringBuffer.append(TEXT_365);
d2401 1
a2401 1
    stringBuffer.append(TEXT_366);
d2403 1
a2403 1
    stringBuffer.append(TEXT_367);
d2405 1
a2405 1
    stringBuffer.append(TEXT_368);
d2412 1
a2412 1
    stringBuffer.append(TEXT_369);
d2426 3
a2428 1
    stringBuffer.append(TEXT_370);
d2430 1
a2430 1
    stringBuffer.append(TEXT_371);
d2432 1
a2432 1
    stringBuffer.append(TEXT_372);
d2434 1
a2434 1
    stringBuffer.append(TEXT_373);
d2438 1
a2438 1
    stringBuffer.append(TEXT_374);
d2440 1
a2440 1
    stringBuffer.append(TEXT_375);
d2442 1
a2442 1
    stringBuffer.append(TEXT_376);
d2444 1
a2444 1
    stringBuffer.append(TEXT_377);
d2454 1
a2454 1
    stringBuffer.append(TEXT_378);
d2468 3
a2470 1
    stringBuffer.append(TEXT_379);
d2472 1
a2472 1
    stringBuffer.append(TEXT_380);
d2474 1
a2474 1
    stringBuffer.append(TEXT_381);
d2476 1
a2476 1
    stringBuffer.append(TEXT_382);
d2480 1
a2480 1
    stringBuffer.append(TEXT_383);
d2482 1
a2482 1
    stringBuffer.append(TEXT_384);
d2484 1
a2484 1
    stringBuffer.append(TEXT_385);
d2486 1
a2486 1
    stringBuffer.append(TEXT_386);
d2495 1
a2495 1
    stringBuffer.append(TEXT_387);
d2500 3
a2502 1
    stringBuffer.append(TEXT_388);
d2509 1
a2509 1
    stringBuffer.append(TEXT_389);
d2514 3
a2516 1
    stringBuffer.append(TEXT_390);
d2522 3
a2524 1
    stringBuffer.append(TEXT_391);
d2526 1
a2526 1
    stringBuffer.append(TEXT_392);
a2530 31
    stringBuffer.append(TEXT_393);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_394);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_395);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetChangeEvent"));
    stringBuffer.append(TEXT_396);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter"));
    stringBuffer.append(TEXT_397);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_398);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_399);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_400);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_401);
    stringBuffer.append(TEXT_402);
    /*inner class*/
    stringBuffer.append(TEXT_403);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_404);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_405);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_406);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_407);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_408);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d2532 1
a2532 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d2534 1
a2534 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d2536 1
a2536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d2538 1
a2538 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d2540 1
a2540 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d2542 1
a2542 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d2544 1
a2544 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d2546 1
a2546 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a2547 138
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_418);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_419);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_420);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_421);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_422);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_423);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_424);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_425);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_426);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_427);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_428);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_429);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_430);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_431);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_432);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_433);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_434);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_435);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_436);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_437);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_438);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_439);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_440);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_441);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReplaceNotationalElementCommand"));
    stringBuffer.append(TEXT_442);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_443);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_444);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_445);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeSourceCommand"));
    stringBuffer.append(TEXT_446);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_447);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeTargetCommand"));
    stringBuffer.append(TEXT_448);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_449);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_450);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_451);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_452);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_453);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_454);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_455);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_456);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_457);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_458);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand"));
    stringBuffer.append(TEXT_459);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_460);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_461);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_462);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_463);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_464);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_465);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_466);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_467);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_468);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_469);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_470);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_471);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_472);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_473);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_474);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_475);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_476);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_477);
    stringBuffer.append(_getDiagramCode);
    stringBuffer.append(TEXT_478);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_479);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_480);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_481);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_482);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_483);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_484);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_485);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_486);
d2556 1
a2556 1
    stringBuffer.append(TEXT_487);
d2558 1
a2558 1
    stringBuffer.append(TEXT_488);
d2560 1
a2560 1
    stringBuffer.append(TEXT_489);
d2562 1
a2562 1
    stringBuffer.append(TEXT_490);
d2568 1
a2568 1
    stringBuffer.append(TEXT_491);
d2570 1
a2570 1
    stringBuffer.append(TEXT_492);
d2572 1
a2572 1
    stringBuffer.append(TEXT_493);
d2576 3
a2578 3
    stringBuffer.append(TEXT_494);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalEdgeCommand"));
    stringBuffer.append(TEXT_495);
d2580 3
a2582 3
    stringBuffer.append(TEXT_496);
    stringBuffer.append(TEXT_497);
    stringBuffer.append(TEXT_498);
d2584 1
a2584 1
    stringBuffer.append(TEXT_499);
d2586 1
a2586 1
    stringBuffer.append(TEXT_500);
d2609 1
a2609 1
    stringBuffer.append(TEXT_501);
d2611 1
a2611 1
    stringBuffer.append(TEXT_502);
d2613 1
a2613 1
    stringBuffer.append(TEXT_503);
d2615 1
a2615 1
    stringBuffer.append(TEXT_504);
d2620 1
a2620 1
    stringBuffer.append(TEXT_505);
d2629 1
a2629 1
    stringBuffer.append(TEXT_506);
d2631 1
a2631 1
    stringBuffer.append(TEXT_507);
d2633 1
a2633 1
    stringBuffer.append(TEXT_508);
d2635 1
a2635 1
    stringBuffer.append(TEXT_509);
d2639 1
a2639 1
    stringBuffer.append(TEXT_510);
d2641 1
a2641 1
    stringBuffer.append(TEXT_511);
d2643 1
a2643 1
    stringBuffer.append(TEXT_512);
d2647 1
a2647 1
    stringBuffer.append(TEXT_513);
d2649 1
a2649 1
    stringBuffer.append(TEXT_514);
d2654 1
a2654 1
    stringBuffer.append(TEXT_515);
d2662 1
a2662 1
    stringBuffer.append(TEXT_516);
d2664 1
a2664 1
    stringBuffer.append(TEXT_517);
d2668 1
a2668 1
    stringBuffer.append(TEXT_518);
d2670 1
a2670 1
    stringBuffer.append(TEXT_519);
d2675 1
a2675 1
    stringBuffer.append(TEXT_520);
d2677 1
a2677 1
    stringBuffer.append(TEXT_521);
d2679 1
a2679 1
    stringBuffer.append(TEXT_522);
d2681 1
a2681 1
    stringBuffer.append(TEXT_523);
d2685 1
a2685 1
    stringBuffer.append(TEXT_524);
d2687 1
a2687 1
    stringBuffer.append(TEXT_525);
d2689 1
a2689 1
    stringBuffer.append(TEXT_526);
d2694 1
a2694 1
    stringBuffer.append(TEXT_527);
d2696 1
a2696 1
    stringBuffer.append(TEXT_528);
d2698 1
a2698 1
    stringBuffer.append(TEXT_529);
d2700 1
a2700 1
    stringBuffer.append(TEXT_530);
d2704 1
a2704 1
    stringBuffer.append(TEXT_531);
d2706 1
a2706 1
    stringBuffer.append(TEXT_532);
d2708 1
a2708 1
    stringBuffer.append(TEXT_533);
d2712 3
a2714 1
    stringBuffer.append(TEXT_534);
d2718 1
a2718 1
    stringBuffer.append(TEXT_535);
d2722 1
a2722 1
    stringBuffer.append(TEXT_536);
d2730 1
a2730 1
    stringBuffer.append(TEXT_537);
d2735 1
a2735 1
    stringBuffer.append(TEXT_538);
d2745 1
a2745 1
    stringBuffer.append(TEXT_539);
d2747 1
a2747 1
    stringBuffer.append(TEXT_540);
d2749 1
a2749 1
    stringBuffer.append(TEXT_541);
d2751 1
a2751 1
    stringBuffer.append(TEXT_542);
d2755 1
a2755 1
    stringBuffer.append(TEXT_543);
d2757 1
a2757 1
    stringBuffer.append(TEXT_544);
d2759 1
a2759 1
    stringBuffer.append(TEXT_545);
d2763 1
a2763 1
    stringBuffer.append(TEXT_546);
d2768 3
a2770 1
    stringBuffer.append(TEXT_547);
d2772 1
a2772 1
    stringBuffer.append(TEXT_548);
d2776 1
a2776 1
    stringBuffer.append(TEXT_549);
d2780 1
a2780 1
    stringBuffer.append(TEXT_550);
d2785 1
a2785 1
    stringBuffer.append(TEXT_551);
d2787 1
a2787 1
    stringBuffer.append(TEXT_552);
d2789 1
a2789 1
    stringBuffer.append(TEXT_553);
d2791 1
a2791 1
    stringBuffer.append(TEXT_554);
d2793 1
a2793 1
    stringBuffer.append(TEXT_555);
d2795 1
a2795 1
    stringBuffer.append(TEXT_556);
d2797 1
a2797 1
    stringBuffer.append(TEXT_557);
d2799 1
a2799 1
    stringBuffer.append(TEXT_558);
d2801 1
a2801 1
    stringBuffer.append(TEXT_559);
d2805 1
a2805 1
    stringBuffer.append(TEXT_560);
d2807 1
a2807 1
    stringBuffer.append(TEXT_561);
d2809 1
a2809 1
    stringBuffer.append(TEXT_562);
a2811 2

    
d2814 1
a2814 1
    stringBuffer.append(TEXT_563);
d2816 1
a2816 1
    stringBuffer.append(TEXT_564);
d2818 1
a2818 1
    stringBuffer.append(TEXT_565);
d2823 1
a2823 1
    stringBuffer.append(TEXT_566);
d2825 1
a2825 1
    stringBuffer.append(TEXT_567);
d2829 1
a2829 1
    stringBuffer.append(TEXT_568);
d2833 1
a2833 1
    stringBuffer.append(TEXT_569);
d2837 1
a2837 1
    stringBuffer.append(TEXT_570);
a2840 3
	

    
d2844 1
a2844 1
    stringBuffer.append(TEXT_571);
d2848 1
a2848 1
    stringBuffer.append(TEXT_572);
d2850 1
a2850 1
    stringBuffer.append(TEXT_573);
d2852 1
a2852 1
    stringBuffer.append(TEXT_574);
d2857 1
a2857 1
    stringBuffer.append(TEXT_575);
d2859 1
a2859 1
    stringBuffer.append(TEXT_576);
d2863 1
a2863 1
    stringBuffer.append(TEXT_577);
d2867 1
a2867 1
    stringBuffer.append(TEXT_578);
d2869 3
a2871 1
    stringBuffer.append(TEXT_579);
d2873 17
a2889 1
    stringBuffer.append(TEXT_580);
d2896 9
a2904 7
    stringBuffer.append(TEXT_581);
    stringBuffer.append(TEXT_582);
    stringBuffer.append(TEXT_583);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
    stringBuffer.append(TEXT_584);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_585);
d2906 1
a2906 3
    stringBuffer.append(TEXT_586);
    stringBuffer.append(TEXT_587);
    stringBuffer.append(TEXT_588);
d2908 1
a2908 1
    stringBuffer.append(TEXT_589);
d2910 1
a2910 3
    stringBuffer.append(TEXT_590);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_591);
d2914 1
a2914 1
    stringBuffer.append(TEXT_592);
d2922 1
a2922 1
    stringBuffer.append(TEXT_593);
d2926 1
a2926 1
    stringBuffer.append(TEXT_594);
d2928 1
a2928 1
    stringBuffer.append(TEXT_595);
d2930 1
a2930 1
    stringBuffer.append(TEXT_596);
d2932 1
a2932 1
    stringBuffer.append(TEXT_597);
d2934 1
a2934 1
    stringBuffer.append(TEXT_598);
d2936 1
a2936 1
    stringBuffer.append(TEXT_599);
d2938 1
a2938 1
    stringBuffer.append(TEXT_600);
d2940 1
a2940 1
    stringBuffer.append(TEXT_601);
d2942 1
a2942 1
    stringBuffer.append(TEXT_602);
d2944 1
a2944 1
    stringBuffer.append(TEXT_603);
d2946 1
a2946 1
    stringBuffer.append(TEXT_604);
d2948 1
a2948 1
    stringBuffer.append(TEXT_605);
d2952 1
a2952 1
    stringBuffer.append(TEXT_606);
d2956 1
a2956 1
    stringBuffer.append(TEXT_607);
d2958 1
a2958 1
    stringBuffer.append(TEXT_608);
d2962 3
a2964 3
    stringBuffer.append(TEXT_609);
    stringBuffer.append(TEXT_610);
    stringBuffer.append(TEXT_611);
d2966 1
a2966 1
    stringBuffer.append(TEXT_612);
d2968 1
a2968 1
    stringBuffer.append(TEXT_613);
d2970 1
a2970 1
    stringBuffer.append(TEXT_614);
d2972 1
a2972 1
    stringBuffer.append(TEXT_615);
d2974 1
a2974 1
    stringBuffer.append(TEXT_616);
d2976 1
a2976 1
    stringBuffer.append(TEXT_617);
d2978 1
a2978 1
    stringBuffer.append(TEXT_618);
d2980 1
a2980 1
    stringBuffer.append(TEXT_619);
d2982 1
a2982 1
    stringBuffer.append(TEXT_620);
d2984 1
a2984 1
    stringBuffer.append(TEXT_621);
d2986 1
a2986 1
    stringBuffer.append(TEXT_622);
d2988 1
a2988 1
    stringBuffer.append(TEXT_623);
d2990 1
a2990 1
    stringBuffer.append(TEXT_624);
d2992 1
a2992 1
    stringBuffer.append(TEXT_625);
d2994 1
a2994 1
    stringBuffer.append(TEXT_626);
d2996 3
a2998 3
    stringBuffer.append(TEXT_627);
    stringBuffer.append(TEXT_628);
    stringBuffer.append(TEXT_629);
d3000 1
a3000 1
    stringBuffer.append(TEXT_630);
d3002 1
a3002 1
    stringBuffer.append(TEXT_631);
d3004 1
a3004 1
    stringBuffer.append(TEXT_632);
d3006 3
a3008 3
    stringBuffer.append(TEXT_633);
    stringBuffer.append(TEXT_634);
    stringBuffer.append(TEXT_635);
d3010 1
a3010 1
    stringBuffer.append(TEXT_636);
d3012 3
a3014 3
    stringBuffer.append(TEXT_637);
    stringBuffer.append(TEXT_638);
    stringBuffer.append(TEXT_639);
d3016 1
a3016 1
    stringBuffer.append(TEXT_640);
d3018 1
a3018 1
    stringBuffer.append(TEXT_641);
d3020 1
a3020 1
    stringBuffer.append(TEXT_642);
d3022 1
a3022 1
    stringBuffer.append(TEXT_643);
d3024 3
a3026 3
    stringBuffer.append(TEXT_644);
    stringBuffer.append(TEXT_645);
    stringBuffer.append(TEXT_646);
d3028 3
a3030 3
    stringBuffer.append(TEXT_647);
    stringBuffer.append(TEXT_648);
    stringBuffer.append(TEXT_649);
d3032 3
a3034 3
    stringBuffer.append(TEXT_650);
    stringBuffer.append(TEXT_651);
    stringBuffer.append(TEXT_652);
d3036 3
a3038 3
    stringBuffer.append(TEXT_653);
    stringBuffer.append(TEXT_654);
    stringBuffer.append(TEXT_655);
d3040 1
a3040 1
    stringBuffer.append(TEXT_656);
d3042 1
a3042 1
    stringBuffer.append(TEXT_657);
d3044 1
a3044 1
    stringBuffer.append(TEXT_658);
d3046 3
a3048 3
    stringBuffer.append(TEXT_659);
    stringBuffer.append(TEXT_660);
    stringBuffer.append(TEXT_661);
d3050 1
a3050 1
    stringBuffer.append(TEXT_662);
d3052 1
a3052 1
    stringBuffer.append(TEXT_663);
d3080 1
a3080 1
    stringBuffer.append(TEXT_664);
d3083 1
a3083 1
    stringBuffer.append(TEXT_665);
d3085 1
a3085 1
    stringBuffer.append(TEXT_666);
d3087 1
a3087 1
    stringBuffer.append(TEXT_667);
d3089 1
a3089 1
    stringBuffer.append(TEXT_668);
d3091 1
a3091 1
    stringBuffer.append(TEXT_669);
d3093 1
a3093 1
    stringBuffer.append(TEXT_670);
d3096 1
a3096 1
    stringBuffer.append(TEXT_671);
d3098 1
a3098 1
    stringBuffer.append(TEXT_672);
d3100 1
a3100 1
    stringBuffer.append(TEXT_673);
d3102 1
a3102 1
    stringBuffer.append(TEXT_674);
d3105 1
a3105 1
    stringBuffer.append(TEXT_675);
d3107 1
a3107 1
    stringBuffer.append(TEXT_676);
d3109 1
a3109 1
    stringBuffer.append(TEXT_677);
d3113 1
a3113 1
    stringBuffer.append(TEXT_678);
d3115 1
a3115 1
    stringBuffer.append(TEXT_679);
d3117 1
a3117 1
    stringBuffer.append(TEXT_680);
d3119 1
a3119 1
    stringBuffer.append(TEXT_681);
d3121 1
a3121 1
    stringBuffer.append(TEXT_682);
d3123 3
a3125 1
    stringBuffer.append(TEXT_683);
d3129 1
a3129 1
    stringBuffer.append(TEXT_684);
d3133 1
a3133 1
    stringBuffer.append(TEXT_685);
d3140 1
a3140 1
    stringBuffer.append(TEXT_686);
d3144 1
a3144 1
    stringBuffer.append(TEXT_687);
d3146 1
a3146 1
    stringBuffer.append(TEXT_688);
d3148 1
a3148 1
    stringBuffer.append(TEXT_689);
d3150 1
a3150 1
    stringBuffer.append(TEXT_690);
d3152 1
a3152 1
    stringBuffer.append(TEXT_691);
d3160 1
a3160 1
    stringBuffer.append(TEXT_692);
d3166 1
a3166 1
    stringBuffer.append(TEXT_693);
d3168 1
a3168 1
    stringBuffer.append(TEXT_694);
d3170 1
a3170 1
    stringBuffer.append(TEXT_695);
d3174 1
a3174 1
    stringBuffer.append(TEXT_696);
d3176 1
a3176 1
    stringBuffer.append(TEXT_697);
d3178 1
a3178 1
    stringBuffer.append(TEXT_698);
d3180 1
a3180 1
    stringBuffer.append(TEXT_699);
d3182 1
a3182 1
    stringBuffer.append(TEXT_700);
d3197 1
a3197 1
    stringBuffer.append(TEXT_701);
d3203 1
a3203 1
    stringBuffer.append(TEXT_702);
d3205 1
a3205 1
    stringBuffer.append(TEXT_703);
d3207 1
a3207 1
    stringBuffer.append(TEXT_704);
d3211 1
a3211 1
    stringBuffer.append(TEXT_705);
d3213 1
a3213 1
    stringBuffer.append(TEXT_706);
d3215 1
a3215 1
    stringBuffer.append(TEXT_707);
d3217 1
a3217 1
    stringBuffer.append(TEXT_708);
d3219 1
a3219 1
    stringBuffer.append(TEXT_709);
d3233 1
a3233 1
    stringBuffer.append(TEXT_710);
d3237 1
a3237 1
    stringBuffer.append(TEXT_711);
d3239 1
a3239 1
    stringBuffer.append(TEXT_712);
d3241 1
a3241 1
    stringBuffer.append(TEXT_713);
d3243 1
a3243 1
    stringBuffer.append(TEXT_714);
d3250 1
a3250 1
    stringBuffer.append(TEXT_715);
d3260 1
a3260 1
    stringBuffer.append(TEXT_716);
d3266 1
a3266 1
    stringBuffer.append(TEXT_717);
d3268 1
a3268 1
    stringBuffer.append(TEXT_718);
d3270 1
a3270 1
    stringBuffer.append(TEXT_719);
d3274 1
a3274 1
    stringBuffer.append(TEXT_720);
d3276 1
a3276 1
    stringBuffer.append(TEXT_721);
d3278 1
a3278 1
    stringBuffer.append(TEXT_722);
d3280 1
a3280 1
    stringBuffer.append(TEXT_723);
d3282 1
a3282 1
    stringBuffer.append(TEXT_724);
d3293 1
a3293 1
    stringBuffer.append(TEXT_725);
d3297 1
a3297 1
    stringBuffer.append(TEXT_726);
d3299 1
a3299 1
    stringBuffer.append(TEXT_727);
d3301 1
a3301 1
    stringBuffer.append(TEXT_728);
d3303 1
a3303 1
    stringBuffer.append(TEXT_729);
d3310 1
a3310 1
    stringBuffer.append(TEXT_730);
d3314 1
a3314 1
    stringBuffer.append(TEXT_731);
d3318 1
a3318 1
    stringBuffer.append(TEXT_732);
d3320 1
a3320 1
    stringBuffer.append(TEXT_733);
d3322 1
a3322 1
    stringBuffer.append(TEXT_734);
d3324 1
a3324 1
    stringBuffer.append(TEXT_735);
d3326 1
a3326 1
    stringBuffer.append(TEXT_736);
d3328 3
a3330 3
    stringBuffer.append(TEXT_737);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeSourceCommand"));
    stringBuffer.append(TEXT_738);
d3349 1
a3349 1
    stringBuffer.append(TEXT_739);
d3351 1
a3351 1
    stringBuffer.append(TEXT_740);
d3353 1
a3353 1
    stringBuffer.append(TEXT_741);
d3355 1
a3355 1
    stringBuffer.append(TEXT_742);
d3357 1
a3357 1
    stringBuffer.append(TEXT_743);
d3359 1
a3359 1
    stringBuffer.append(TEXT_744);
d3361 1
a3361 1
    stringBuffer.append(TEXT_745);
d3367 1
a3367 1
    stringBuffer.append(TEXT_746);
d3369 1
a3369 1
    stringBuffer.append(TEXT_747);
d3373 1
a3373 1
    stringBuffer.append(TEXT_748);
d3375 1
a3375 1
    stringBuffer.append(TEXT_749);
d3377 1
a3377 1
    stringBuffer.append(TEXT_750);
d3381 1
a3381 1
    stringBuffer.append(TEXT_751);
d3383 1
a3383 1
    stringBuffer.append(TEXT_752);
d3385 1
a3385 1
    stringBuffer.append(TEXT_753);
d3387 1
a3387 1
    stringBuffer.append(TEXT_754);
d3393 1
a3393 1
    stringBuffer.append(TEXT_755);
d3395 1
a3395 1
    stringBuffer.append(TEXT_756);
d3397 1
a3397 1
    stringBuffer.append(TEXT_757);
d3399 1
a3399 1
    stringBuffer.append(TEXT_758);
d3403 1
a3403 1
    stringBuffer.append(TEXT_759);
d3405 1
a3405 1
    stringBuffer.append(TEXT_760);
d3407 1
a3407 1
    stringBuffer.append(TEXT_761);
d3409 1
a3409 1
    stringBuffer.append(TEXT_762);
d3411 1
a3411 1
    stringBuffer.append(TEXT_763);
d3415 1
a3415 1
    stringBuffer.append(TEXT_764);
d3417 1
a3417 1
    stringBuffer.append(TEXT_765);
d3419 1
a3419 1
    stringBuffer.append(TEXT_766);
d3421 1
a3421 1
    stringBuffer.append(TEXT_767);
d3425 1
a3425 1
    stringBuffer.append(TEXT_768);
d3430 1
a3430 1
    stringBuffer.append(TEXT_769);
d3432 1
a3432 1
    stringBuffer.append(TEXT_770);
d3434 1
a3434 1
    stringBuffer.append(TEXT_771);
d3436 1
a3436 1
    stringBuffer.append(TEXT_772);
d3438 1
a3438 1
    stringBuffer.append(TEXT_773);
d3440 1
a3440 1
    stringBuffer.append(TEXT_774);
d3442 1
a3442 1
    stringBuffer.append(TEXT_775);
d3446 1
a3446 1
    stringBuffer.append(TEXT_776);
d3448 1
a3448 1
    stringBuffer.append(TEXT_777);
d3450 1
a3450 1
    stringBuffer.append(TEXT_778);
d3452 1
a3452 1
    stringBuffer.append(TEXT_779);
d3460 1
a3460 1
    stringBuffer.append(TEXT_780);
d3462 1
a3462 1
    stringBuffer.append(TEXT_781);
d3464 1
a3464 1
    stringBuffer.append(TEXT_782);
d3466 1
a3466 1
    stringBuffer.append(TEXT_783);
d3468 1
a3468 1
    stringBuffer.append(TEXT_784);
d3470 1
a3470 1
    stringBuffer.append(TEXT_785);
d3472 1
a3472 1
    stringBuffer.append(TEXT_786);
d3476 1
a3476 1
    stringBuffer.append(TEXT_787);
d3478 1
a3478 1
    stringBuffer.append(TEXT_788);
d3480 1
a3480 1
    stringBuffer.append(TEXT_789);
d3482 1
a3482 1
    stringBuffer.append(TEXT_790);
d3484 1
a3484 1
    stringBuffer.append(TEXT_791);
d3486 1
a3486 1
    stringBuffer.append(TEXT_792);
d3488 1
a3488 1
    stringBuffer.append(TEXT_793);
d3490 1
a3490 1
    stringBuffer.append(TEXT_794);
d3495 2
a3496 2
    stringBuffer.append(TEXT_795);
    stringBuffer.append(TEXT_796);
d3500 1
a3500 1
    stringBuffer.append(TEXT_797);
d3502 1
a3502 1
    stringBuffer.append(TEXT_798);
d3504 1
a3504 1
    stringBuffer.append(TEXT_799);
d3506 1
a3506 1
    stringBuffer.append(TEXT_800);
d3514 2
a3515 2
    stringBuffer.append(TEXT_801);
    stringBuffer.append(TEXT_802);
d3519 1
a3519 1
    stringBuffer.append(TEXT_803);
d3521 1
a3521 1
    stringBuffer.append(TEXT_804);
d3523 1
a3523 1
    stringBuffer.append(TEXT_805);
d3550 1
a3550 1
    stringBuffer.append(TEXT_806);
d3552 1
a3552 1
    stringBuffer.append(TEXT_807);
d3554 1
a3554 1
    stringBuffer.append(TEXT_808);
d3558 1
a3558 1
    stringBuffer.append(TEXT_809);
d3560 1
a3560 1
    stringBuffer.append(TEXT_810);
d3562 1
a3562 1
    stringBuffer.append(TEXT_811);
d3564 1
a3564 1
    stringBuffer.append(TEXT_812);
d3566 1
a3566 1
    stringBuffer.append(TEXT_813);
d3570 1
a3570 1
    stringBuffer.append(TEXT_814);
d3572 1
a3572 1
    stringBuffer.append(TEXT_815);
d3574 1
a3574 1
    stringBuffer.append(TEXT_816);
d3576 1
a3576 1
    stringBuffer.append(TEXT_817);
d3578 1
a3578 1
    stringBuffer.append(TEXT_818);
d3583 1
a3583 1
    stringBuffer.append(TEXT_819);
d3585 1
a3585 1
    stringBuffer.append(TEXT_820);
d3591 1
a3591 1
    stringBuffer.append(TEXT_821);
d3593 1
a3593 1
    stringBuffer.append(TEXT_822);
d3595 1
a3595 1
    stringBuffer.append(TEXT_823);
d3597 1
a3597 1
    stringBuffer.append(TEXT_824);
d3599 1
a3599 1
    stringBuffer.append(TEXT_825);
d3601 1
a3601 1
    stringBuffer.append(TEXT_826);
d3605 1
a3605 1
    stringBuffer.append(TEXT_827);
d3607 1
a3607 1
    stringBuffer.append(TEXT_828);
d3609 1
a3609 1
    stringBuffer.append(TEXT_829);
d3611 1
a3611 1
    stringBuffer.append(TEXT_830);
d3613 1
a3613 1
    stringBuffer.append(TEXT_831);
d3615 1
a3615 1
    stringBuffer.append(TEXT_832);
d3622 1
a3622 1
    stringBuffer.append(TEXT_833);
d3624 1
a3624 1
    stringBuffer.append(TEXT_834);
d3626 1
a3626 1
    stringBuffer.append(TEXT_835);
d3628 1
a3628 1
    stringBuffer.append(TEXT_836);
d3630 1
a3630 1
    stringBuffer.append(TEXT_837);
d3632 1
a3632 1
    stringBuffer.append(TEXT_838);
d3636 1
a3636 1
    stringBuffer.append(TEXT_839);
d3638 1
a3638 1
    stringBuffer.append(TEXT_840);
d3640 1
a3640 1
    stringBuffer.append(TEXT_841);
d3642 1
a3642 1
    stringBuffer.append(TEXT_842);
d3644 1
a3644 1
    stringBuffer.append(TEXT_843);
d3646 1
a3646 1
    stringBuffer.append(TEXT_844);
d3653 1
a3653 1
    stringBuffer.append(TEXT_845);
d3655 1
a3655 1
    stringBuffer.append(TEXT_846);
d3657 1
a3657 1
    stringBuffer.append(TEXT_847);
d3659 1
a3659 1
    stringBuffer.append(TEXT_848);
d3661 1
a3661 1
    stringBuffer.append(TEXT_849);
d3663 1
a3663 1
    stringBuffer.append(TEXT_850);
d3667 1
a3667 1
    stringBuffer.append(TEXT_851);
d3669 1
a3669 1
    stringBuffer.append(TEXT_852);
d3671 1
a3671 1
    stringBuffer.append(TEXT_853);
d3673 1
a3673 1
    stringBuffer.append(TEXT_854);
d3675 1
a3675 1
    stringBuffer.append(TEXT_855);
d3677 1
a3677 1
    stringBuffer.append(TEXT_856);
d3682 1
a3682 1
    stringBuffer.append(TEXT_857);
d3688 1
a3688 1
    stringBuffer.append(TEXT_858);
d3690 1
a3690 1
    stringBuffer.append(TEXT_859);
d3692 1
a3692 1
    stringBuffer.append(TEXT_860);
d3694 1
a3694 1
    stringBuffer.append(TEXT_861);
d3696 1
a3696 1
    stringBuffer.append(TEXT_862);
d3698 1
a3698 1
    stringBuffer.append(TEXT_863);
d3702 1
a3702 1
    stringBuffer.append(TEXT_864);
d3704 1
a3704 1
    stringBuffer.append(TEXT_865);
d3706 1
a3706 1
    stringBuffer.append(TEXT_866);
d3708 1
a3708 1
    stringBuffer.append(TEXT_867);
d3710 1
a3710 1
    stringBuffer.append(TEXT_868);
d3712 1
a3712 1
    stringBuffer.append(TEXT_869);
d3719 1
a3719 1
    stringBuffer.append(TEXT_870);
d3723 1
a3723 1
    stringBuffer.append(TEXT_871);
d3727 1
a3727 1
    stringBuffer.append(TEXT_872);
d3730 1
a3730 1
    stringBuffer.append(TEXT_873);
d3732 1
a3732 1
    stringBuffer.append(TEXT_874);
d3734 1
a3734 1
    stringBuffer.append(TEXT_875);
d3737 3
a3739 3
    stringBuffer.append(TEXT_876);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_877);
d3741 1
a3741 1
    stringBuffer.append(TEXT_878);
d3748 1
a3748 1
    stringBuffer.append(TEXT_879);
d3752 1
a3752 1
    stringBuffer.append(TEXT_880);
d3754 1
a3754 1
    stringBuffer.append(TEXT_881);
d3756 1
a3756 1
    stringBuffer.append(TEXT_882);
d3758 1
a3758 1
    stringBuffer.append(TEXT_883);
d3760 1
a3760 1
    stringBuffer.append(TEXT_884);
d3768 1
a3768 1
    stringBuffer.append(TEXT_885);
d3774 1
a3774 1
    stringBuffer.append(TEXT_886);
d3776 1
a3776 1
    stringBuffer.append(TEXT_887);
d3778 1
a3778 1
    stringBuffer.append(TEXT_888);
d3782 1
a3782 1
    stringBuffer.append(TEXT_889);
d3784 1
a3784 1
    stringBuffer.append(TEXT_890);
d3786 1
a3786 1
    stringBuffer.append(TEXT_891);
d3788 1
a3788 1
    stringBuffer.append(TEXT_892);
d3790 1
a3790 1
    stringBuffer.append(TEXT_893);
d3805 1
a3805 1
    stringBuffer.append(TEXT_894);
d3811 1
a3811 1
    stringBuffer.append(TEXT_895);
d3813 1
a3813 1
    stringBuffer.append(TEXT_896);
d3815 1
a3815 1
    stringBuffer.append(TEXT_897);
d3819 1
a3819 1
    stringBuffer.append(TEXT_898);
d3821 1
a3821 1
    stringBuffer.append(TEXT_899);
d3823 1
a3823 1
    stringBuffer.append(TEXT_900);
d3825 1
a3825 1
    stringBuffer.append(TEXT_901);
d3827 1
a3827 1
    stringBuffer.append(TEXT_902);
d3839 1
a3839 1
    stringBuffer.append(TEXT_903);
d3843 1
a3843 1
    stringBuffer.append(TEXT_904);
d3845 1
a3845 1
    stringBuffer.append(TEXT_905);
d3847 1
a3847 1
    stringBuffer.append(TEXT_906);
d3849 1
a3849 1
    stringBuffer.append(TEXT_907);
d3856 1
a3856 1
    stringBuffer.append(TEXT_908);
d3867 1
a3867 1
    stringBuffer.append(TEXT_909);
d3873 1
a3873 1
    stringBuffer.append(TEXT_910);
d3875 1
a3875 1
    stringBuffer.append(TEXT_911);
d3877 1
a3877 1
    stringBuffer.append(TEXT_912);
d3881 1
a3881 1
    stringBuffer.append(TEXT_913);
d3883 1
a3883 1
    stringBuffer.append(TEXT_914);
d3885 1
a3885 1
    stringBuffer.append(TEXT_915);
d3887 1
a3887 1
    stringBuffer.append(TEXT_916);
d3889 1
a3889 1
    stringBuffer.append(TEXT_917);
d3900 1
a3900 1
    stringBuffer.append(TEXT_918);
d3904 1
a3904 1
    stringBuffer.append(TEXT_919);
d3906 1
a3906 1
    stringBuffer.append(TEXT_920);
d3908 1
a3908 1
    stringBuffer.append(TEXT_921);
d3910 1
a3910 1
    stringBuffer.append(TEXT_922);
d3917 1
a3917 1
    stringBuffer.append(TEXT_923);
d3921 1
a3921 1
    stringBuffer.append(TEXT_924);
d3925 2
a3926 2
    stringBuffer.append(TEXT_925);
    stringBuffer.append(TEXT_926);
d3930 1
a3930 1
    stringBuffer.append(TEXT_927);
d3932 1
a3932 1
    stringBuffer.append(TEXT_928);
d3934 1
a3934 1
    stringBuffer.append(TEXT_929);
d3936 1
a3936 1
    stringBuffer.append(TEXT_930);
d3940 1
a3940 1
    stringBuffer.append(TEXT_931);
d3970 1
a3970 1
    stringBuffer.append(TEXT_932);
d3973 1
a3973 1
    stringBuffer.append(TEXT_933);
d3975 1
a3975 1
    stringBuffer.append(TEXT_934);
d3977 1
a3977 1
    stringBuffer.append(TEXT_935);
d3979 1
a3979 1
    stringBuffer.append(TEXT_936);
d3981 1
a3981 1
    stringBuffer.append(TEXT_937);
d3983 1
a3983 1
    stringBuffer.append(TEXT_938);
d3986 1
a3986 1
    stringBuffer.append(TEXT_939);
d3988 1
a3988 1
    stringBuffer.append(TEXT_940);
d3990 1
a3990 1
    stringBuffer.append(TEXT_941);
d3992 1
a3992 1
    stringBuffer.append(TEXT_942);
d3995 1
a3995 1
    stringBuffer.append(TEXT_943);
d3997 1
a3997 1
    stringBuffer.append(TEXT_944);
d3999 1
a3999 1
    stringBuffer.append(TEXT_945);
d4003 1
a4003 1
    stringBuffer.append(TEXT_946);
d4005 1
a4005 1
    stringBuffer.append(TEXT_947);
d4007 1
a4007 1
    stringBuffer.append(TEXT_948);
d4009 1
a4009 1
    stringBuffer.append(TEXT_949);
d4011 1
a4011 1
    stringBuffer.append(TEXT_950);
d4013 3
a4015 1
    stringBuffer.append(TEXT_951);
d4019 1
a4019 1
    stringBuffer.append(TEXT_952);
d4023 1
a4023 1
    stringBuffer.append(TEXT_953);
d4030 1
a4030 1
    stringBuffer.append(TEXT_954);
d4034 1
a4034 1
    stringBuffer.append(TEXT_955);
d4036 1
a4036 1
    stringBuffer.append(TEXT_956);
d4038 1
a4038 1
    stringBuffer.append(TEXT_957);
d4040 1
a4040 1
    stringBuffer.append(TEXT_958);
d4047 1
a4047 1
    stringBuffer.append(TEXT_959);
d4054 1
a4054 1
    stringBuffer.append(TEXT_960);
d4058 1
a4058 1
    stringBuffer.append(TEXT_961);
d4060 1
a4060 1
    stringBuffer.append(TEXT_962);
d4062 1
a4062 1
    stringBuffer.append(TEXT_963);
d4064 1
a4064 1
    stringBuffer.append(TEXT_964);
d4071 1
a4071 1
    stringBuffer.append(TEXT_965);
d4075 1
a4075 1
    stringBuffer.append(TEXT_966);
d4079 1
a4079 1
    stringBuffer.append(TEXT_967);
d4081 1
a4081 1
    stringBuffer.append(TEXT_968);
d4083 1
a4083 1
    stringBuffer.append(TEXT_969);
d4085 1
a4085 1
    stringBuffer.append(TEXT_970);
d4087 1
a4087 1
    stringBuffer.append(TEXT_971);
d4089 3
a4091 3
    stringBuffer.append(TEXT_972);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeTargetCommand"));
    stringBuffer.append(TEXT_973);
d4098 1
a4098 1
    stringBuffer.append(TEXT_974);
d4100 1
a4100 1
    stringBuffer.append(TEXT_975);
d4102 1
a4102 1
    stringBuffer.append(TEXT_976);
d4104 1
a4104 1
    stringBuffer.append(TEXT_977);
d4106 1
a4106 1
    stringBuffer.append(TEXT_978);
d4108 1
a4108 1
    stringBuffer.append(TEXT_979);
d4110 1
a4110 1
    stringBuffer.append(TEXT_980);
d4114 1
a4114 1
    stringBuffer.append(TEXT_981);
d4116 1
a4116 1
    stringBuffer.append(TEXT_982);
d4118 1
a4118 1
    stringBuffer.append(TEXT_983);
d4120 1
a4120 1
    stringBuffer.append(TEXT_984);
d4127 1
a4127 1
    stringBuffer.append(TEXT_985);
d4129 1
a4129 1
    stringBuffer.append(TEXT_986);
d4131 1
a4131 1
    stringBuffer.append(TEXT_987);
d4133 1
a4133 1
    stringBuffer.append(TEXT_988);
d4135 1
a4135 1
    stringBuffer.append(TEXT_989);
d4137 1
a4137 1
    stringBuffer.append(TEXT_990);
d4139 1
a4139 1
    stringBuffer.append(TEXT_991);
d4143 1
a4143 1
    stringBuffer.append(TEXT_992);
d4145 1
a4145 1
    stringBuffer.append(TEXT_993);
d4147 1
a4147 1
    stringBuffer.append(TEXT_994);
d4149 1
a4149 1
    stringBuffer.append(TEXT_995);
d4154 1
a4154 1
    stringBuffer.append(TEXT_996);
d4159 2
a4160 2
    stringBuffer.append(TEXT_997);
    stringBuffer.append(TEXT_998);
d4164 1
a4164 1
    stringBuffer.append(TEXT_999);
d4166 1
a4166 1
    stringBuffer.append(TEXT_1000);
d4168 1
a4168 1
    stringBuffer.append(TEXT_1001);
d4195 1
a4195 1
    stringBuffer.append(TEXT_1002);
d4197 1
a4197 1
    stringBuffer.append(TEXT_1003);
d4199 1
a4199 1
    stringBuffer.append(TEXT_1004);
d4203 1
a4203 1
    stringBuffer.append(TEXT_1005);
d4205 1
a4205 1
    stringBuffer.append(TEXT_1006);
d4207 1
a4207 1
    stringBuffer.append(TEXT_1007);
d4209 1
a4209 1
    stringBuffer.append(TEXT_1008);
d4211 1
a4211 1
    stringBuffer.append(TEXT_1009);
d4215 1
a4215 1
    stringBuffer.append(TEXT_1010);
d4217 1
a4217 1
    stringBuffer.append(TEXT_1011);
d4219 1
a4219 1
    stringBuffer.append(TEXT_1012);
d4221 1
a4221 1
    stringBuffer.append(TEXT_1013);
d4223 1
a4223 1
    stringBuffer.append(TEXT_1014);
d4228 1
a4228 1
    stringBuffer.append(TEXT_1015);
d4230 1
a4230 1
    stringBuffer.append(TEXT_1016);
d4236 1
a4236 1
    stringBuffer.append(TEXT_1017);
d4238 1
a4238 1
    stringBuffer.append(TEXT_1018);
d4240 1
a4240 1
    stringBuffer.append(TEXT_1019);
d4242 1
a4242 1
    stringBuffer.append(TEXT_1020);
d4244 1
a4244 1
    stringBuffer.append(TEXT_1021);
d4246 1
a4246 1
    stringBuffer.append(TEXT_1022);
d4250 1
a4250 1
    stringBuffer.append(TEXT_1023);
d4252 1
a4252 1
    stringBuffer.append(TEXT_1024);
d4254 1
a4254 1
    stringBuffer.append(TEXT_1025);
d4256 1
a4256 1
    stringBuffer.append(TEXT_1026);
d4258 1
a4258 1
    stringBuffer.append(TEXT_1027);
d4260 1
a4260 1
    stringBuffer.append(TEXT_1028);
d4267 1
a4267 1
    stringBuffer.append(TEXT_1029);
d4269 1
a4269 1
    stringBuffer.append(TEXT_1030);
d4271 1
a4271 1
    stringBuffer.append(TEXT_1031);
d4273 1
a4273 1
    stringBuffer.append(TEXT_1032);
d4275 1
a4275 1
    stringBuffer.append(TEXT_1033);
d4277 1
a4277 1
    stringBuffer.append(TEXT_1034);
d4281 1
a4281 1
    stringBuffer.append(TEXT_1035);
d4283 1
a4283 1
    stringBuffer.append(TEXT_1036);
d4285 1
a4285 1
    stringBuffer.append(TEXT_1037);
d4287 1
a4287 1
    stringBuffer.append(TEXT_1038);
d4289 1
a4289 1
    stringBuffer.append(TEXT_1039);
d4291 1
a4291 1
    stringBuffer.append(TEXT_1040);
d4298 1
a4298 1
    stringBuffer.append(TEXT_1041);
d4300 1
a4300 1
    stringBuffer.append(TEXT_1042);
d4302 1
a4302 1
    stringBuffer.append(TEXT_1043);
d4304 1
a4304 1
    stringBuffer.append(TEXT_1044);
d4306 1
a4306 1
    stringBuffer.append(TEXT_1045);
d4308 1
a4308 1
    stringBuffer.append(TEXT_1046);
d4312 1
a4312 1
    stringBuffer.append(TEXT_1047);
d4314 1
a4314 1
    stringBuffer.append(TEXT_1048);
d4316 1
a4316 1
    stringBuffer.append(TEXT_1049);
d4318 1
a4318 1
    stringBuffer.append(TEXT_1050);
d4320 1
a4320 1
    stringBuffer.append(TEXT_1051);
d4322 1
a4322 1
    stringBuffer.append(TEXT_1052);
d4327 1
a4327 1
    stringBuffer.append(TEXT_1053);
d4333 1
a4333 1
    stringBuffer.append(TEXT_1054);
d4335 1
a4335 1
    stringBuffer.append(TEXT_1055);
d4337 1
a4337 1
    stringBuffer.append(TEXT_1056);
d4339 1
a4339 1
    stringBuffer.append(TEXT_1057);
d4341 1
a4341 1
    stringBuffer.append(TEXT_1058);
d4343 1
a4343 1
    stringBuffer.append(TEXT_1059);
d4347 1
a4347 1
    stringBuffer.append(TEXT_1060);
d4349 1
a4349 1
    stringBuffer.append(TEXT_1061);
d4351 1
a4351 1
    stringBuffer.append(TEXT_1062);
d4353 1
a4353 1
    stringBuffer.append(TEXT_1063);
d4355 1
a4355 1
    stringBuffer.append(TEXT_1064);
d4357 1
a4357 1
    stringBuffer.append(TEXT_1065);
d4364 1
a4364 1
    stringBuffer.append(TEXT_1066);
d4368 1
a4368 1
    stringBuffer.append(TEXT_1067);
d4372 1
a4372 1
    stringBuffer.append(TEXT_1068);
d4375 1
a4375 1
    stringBuffer.append(TEXT_1069);
d4377 1
a4377 1
    stringBuffer.append(TEXT_1070);
d4379 1
a4379 1
    stringBuffer.append(TEXT_1071);
d4381 1
a4381 1
    stringBuffer.append(TEXT_1072);
d4383 1
a4383 1
    stringBuffer.append(TEXT_1073);
d4386 3
a4388 3
    stringBuffer.append(TEXT_1074);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_1075);
d4390 1
a4390 1
    stringBuffer.append(TEXT_1076);
d4392 1
a4392 1
    stringBuffer.append(TEXT_1077);
d4394 1
a4394 1
    stringBuffer.append(TEXT_1078);
d4396 1
a4396 1
    stringBuffer.append(TEXT_1079);
d4398 1
a4398 1
    stringBuffer.append(TEXT_1080);
d4400 1
a4400 1
    stringBuffer.append(TEXT_1081);
d4406 1
a4406 1
    stringBuffer.append(TEXT_1082);
d4408 1
a4408 1
    stringBuffer.append(TEXT_1083);
d4410 1
a4410 1
    stringBuffer.append(TEXT_1084);
d4412 1
a4412 1
    stringBuffer.append(TEXT_1085);
d4414 1
a4414 1
    stringBuffer.append(TEXT_1086);
d4416 1
a4416 1
    stringBuffer.append(TEXT_1087);
d4418 1
a4418 1
    stringBuffer.append(TEXT_1088);
d4420 1
a4420 1
    stringBuffer.append(TEXT_1089);
d4422 1
a4422 1
    stringBuffer.append(TEXT_1090);
d4424 1
a4424 1
    stringBuffer.append(TEXT_1091);
d4426 1
a4426 1
    stringBuffer.append(TEXT_1092);
d4428 1
a4428 1
    stringBuffer.append(TEXT_1093);
d4430 1
a4430 1
    stringBuffer.append(TEXT_1094);
d4434 1
a4434 1
    stringBuffer.append(TEXT_1095);
d4438 1
a4438 1
    stringBuffer.append(TEXT_1096);
d4440 1
a4440 1
    stringBuffer.append(TEXT_1097);
d4442 1
a4442 1
    stringBuffer.append(TEXT_1098);
d4444 1
a4444 1
    stringBuffer.append(TEXT_1099);
d4448 1
a4448 1
    stringBuffer.append(TEXT_1100);
d4475 1
a4475 1
    stringBuffer.append(TEXT_1101);
d4477 1
a4477 1
    stringBuffer.append(TEXT_1102);
d4479 1
a4479 1
    stringBuffer.append(TEXT_1103);
d4481 1
a4481 1
    stringBuffer.append(TEXT_1104);
d4483 1
a4483 1
    stringBuffer.append(TEXT_1105);
d4485 1
a4485 1
    stringBuffer.append(TEXT_1106);
d4487 1
a4487 1
    stringBuffer.append(TEXT_1107);
d4492 1
a4492 1
    stringBuffer.append(TEXT_1108);
d4494 1
a4494 1
    stringBuffer.append(TEXT_1109);
d4496 1
a4496 1
    stringBuffer.append(TEXT_1110);
d4498 1
a4498 1
    stringBuffer.append(TEXT_1111);
d4508 1
a4508 1
    stringBuffer.append(TEXT_1112);
d4514 1
a4514 1
    stringBuffer.append(TEXT_1113);
d4516 1
a4516 1
    stringBuffer.append(TEXT_1114);
d4518 1
a4518 1
    stringBuffer.append(TEXT_1115);
d4522 1
a4522 1
    stringBuffer.append(TEXT_1116);
d4524 1
a4524 1
    stringBuffer.append(TEXT_1117);
d4526 1
a4526 1
    stringBuffer.append(TEXT_1118);
d4528 1
a4528 1
    stringBuffer.append(TEXT_1119);
d4530 1
a4530 1
    stringBuffer.append(TEXT_1120);
d4538 1
a4538 1
    stringBuffer.append(TEXT_1121);
d4540 1
a4540 1
    stringBuffer.append(TEXT_1122);
d4542 1
a4542 1
    stringBuffer.append(TEXT_1123);
d4544 1
a4544 1
    stringBuffer.append(TEXT_1124);
d4554 1
a4554 1
    stringBuffer.append(TEXT_1125);
d4560 1
a4560 1
    stringBuffer.append(TEXT_1126);
d4562 1
a4562 1
    stringBuffer.append(TEXT_1127);
d4564 1
a4564 1
    stringBuffer.append(TEXT_1128);
d4568 1
a4568 1
    stringBuffer.append(TEXT_1129);
d4570 1
a4570 1
    stringBuffer.append(TEXT_1130);
d4572 1
a4572 1
    stringBuffer.append(TEXT_1131);
d4574 1
a4574 1
    stringBuffer.append(TEXT_1132);
d4576 1
a4576 1
    stringBuffer.append(TEXT_1133);
d4584 1
a4584 1
    stringBuffer.append(TEXT_1134);
d4586 1
a4586 1
    stringBuffer.append(TEXT_1135);
d4588 1
a4588 1
    stringBuffer.append(TEXT_1136);
d4590 1
a4590 1
    stringBuffer.append(TEXT_1137);
d4594 1
a4594 1
    stringBuffer.append(TEXT_1138);
d4599 1
a4599 1
    stringBuffer.append(TEXT_1139);
d4601 1
a4601 1
    stringBuffer.append(TEXT_1140);
d4603 1
a4603 1
    stringBuffer.append(TEXT_1141);
d4605 1
a4605 1
    stringBuffer.append(TEXT_1142);
d4609 2
a4610 2
    stringBuffer.append(TEXT_1143);
    stringBuffer.append(TEXT_1144);
d4614 1
a4614 1
    stringBuffer.append(TEXT_1145);
d4616 1
a4616 1
    stringBuffer.append(TEXT_1146);
d4618 1
a4618 1
    stringBuffer.append(TEXT_1147);
d4620 1
a4620 1
    stringBuffer.append(TEXT_1148);
d4624 1
a4624 1
    stringBuffer.append(TEXT_1149);
d4630 1
a4630 1
    stringBuffer.append(TEXT_1150);
d4634 1
a4634 1
    stringBuffer.append(TEXT_1151);
d4636 1
a4636 1
    stringBuffer.append(TEXT_1152);
d4638 1
a4638 1
    stringBuffer.append(TEXT_1153);
d4640 1
a4640 1
    stringBuffer.append(TEXT_1154);
d4647 1
a4647 1
    stringBuffer.append(TEXT_1155);
d4656 1
a4656 1
    stringBuffer.append(TEXT_1156);
d4658 1
a4658 1
    stringBuffer.append(TEXT_1157);
d4662 1
a4662 1
    stringBuffer.append(TEXT_1158);
d4669 1
a4669 1
    stringBuffer.append(TEXT_1159);
d4671 1
a4671 1
    stringBuffer.append(TEXT_1160);
@


1.18
log
@[bblajer] #152854 Allow shape nodes to be placed inside list-layout compartments
@
text
@d822 360
a1181 358
  protected final String TEXT_801 = NL;
  protected final String TEXT_802 = NL + "\t\t\tprivate ";
  protected final String TEXT_803 = " createDomainModelRemoveCommand(";
  protected final String TEXT_804 = " editingDomain) {";
  protected final String TEXT_805 = NL + "\t\t\t\t";
  protected final String TEXT_806 = " result = new ";
  protected final String TEXT_807 = "();";
  protected final String TEXT_808 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_809 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_810 = ".getElement().eContainer(), ";
  protected final String TEXT_811 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_812 = ".getElement()));";
  protected final String TEXT_813 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_814 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_815 = ".getElement().eContainer(), ";
  protected final String TEXT_816 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_817 = ".UNSET_VALUE));";
  protected final String TEXT_818 = NL + "\t\t\t\treturn ";
  protected final String TEXT_819 = ".INSTANCE;";
  protected final String TEXT_820 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_821 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_822 = ".getElement().eContainer(), ";
  protected final String TEXT_823 = ".eINSTANCE.get";
  protected final String TEXT_824 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_825 = ".getElement()));";
  protected final String TEXT_826 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_827 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_828 = ".getElement().eContainer(), ";
  protected final String TEXT_829 = ".eINSTANCE.get";
  protected final String TEXT_830 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_831 = ".UNSET_VALUE));";
  protected final String TEXT_832 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_833 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_834 = ".getElement(), ";
  protected final String TEXT_835 = ".eINSTANCE.get";
  protected final String TEXT_836 = "(), ";
  protected final String TEXT_837 = ".getSource().getElement()));";
  protected final String TEXT_838 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_839 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_840 = ".getElement(), ";
  protected final String TEXT_841 = ".eINSTANCE.get";
  protected final String TEXT_842 = "(), ";
  protected final String TEXT_843 = ".UNSET_VALUE));";
  protected final String TEXT_844 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_845 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_846 = ".getElement(), ";
  protected final String TEXT_847 = ".eINSTANCE.get";
  protected final String TEXT_848 = "(), ";
  protected final String TEXT_849 = ".getTarget().getElement()));";
  protected final String TEXT_850 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_851 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_852 = ".getElement(), ";
  protected final String TEXT_853 = ".eINSTANCE.get";
  protected final String TEXT_854 = "(), ";
  protected final String TEXT_855 = ".UNSET_VALUE));";
  protected final String TEXT_856 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_857 = NL + "\t\t\t\treturn ";
  protected final String TEXT_858 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_859 = ".getSource().getElement(), ";
  protected final String TEXT_860 = ".eINSTANCE.get";
  protected final String TEXT_861 = "(), ";
  protected final String TEXT_862 = ".getTarget().getElement());";
  protected final String TEXT_863 = NL + "\t\t\t\treturn ";
  protected final String TEXT_864 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_865 = ".getSource().getElement(), ";
  protected final String TEXT_866 = ".eINSTANCE.get";
  protected final String TEXT_867 = "(), ";
  protected final String TEXT_868 = ".UNSET_VALUE);";
  protected final String TEXT_869 = NL + "\t\t\t}";
  protected final String TEXT_870 = NL + "\t}" + NL;
  protected final String TEXT_871 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_872 = "StartCommand extends ";
  protected final String TEXT_873 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_874 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_875 = "StartCommand(";
  protected final String TEXT_876 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_877 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_878 = NL + "\t\t\treturn false;";
  protected final String TEXT_879 = NL + "\t\t\t";
  protected final String TEXT_880 = " container = (";
  protected final String TEXT_881 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_882 = ".eINSTANCE.get";
  protected final String TEXT_883 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_884 = NL;
  protected final String TEXT_885 = NL + "\t\tif (";
  protected final String TEXT_886 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_887 = NL + "\t\t}";
  protected final String TEXT_888 = NL + "\t\tif (";
  protected final String TEXT_889 = ".size() >= ";
  protected final String TEXT_890 = ".eINSTANCE.get";
  protected final String TEXT_891 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_892 = NL + "\t\t}";
  protected final String TEXT_893 = NL;
  protected final String TEXT_894 = NL + "\t\tif (";
  protected final String TEXT_895 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_896 = NL + "\t\t}";
  protected final String TEXT_897 = NL + "\t\tif (";
  protected final String TEXT_898 = ".size() >= ";
  protected final String TEXT_899 = ".eINSTANCE.get";
  protected final String TEXT_900 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_901 = NL + "\t\t}";
  protected final String TEXT_902 = NL;
  protected final String TEXT_903 = NL + "\t\t\tif(!";
  protected final String TEXT_904 = ".canCreateLink(";
  protected final String TEXT_905 = ", ";
  protected final String TEXT_906 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_907 = NL + "\t\t\treturn true;";
  protected final String TEXT_908 = NL;
  protected final String TEXT_909 = NL + "\t\tif (";
  protected final String TEXT_910 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_911 = NL + "\t\t}";
  protected final String TEXT_912 = NL + "\t\tif (";
  protected final String TEXT_913 = ".size() >= ";
  protected final String TEXT_914 = ".eINSTANCE.get";
  protected final String TEXT_915 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_916 = NL + "\t\t}";
  protected final String TEXT_917 = NL;
  protected final String TEXT_918 = NL + "\t\t\tif(!";
  protected final String TEXT_919 = ".canCreateLink(";
  protected final String TEXT_920 = ", ";
  protected final String TEXT_921 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_922 = NL + "\t\t\treturn true;";
  protected final String TEXT_923 = NL + "\t\t\treturn false;";
  protected final String TEXT_924 = NL + "\t\t}";
  protected final String TEXT_925 = NL;
  protected final String TEXT_926 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_927 = " getRelationshipContainer(";
  protected final String TEXT_928 = " element, ";
  protected final String TEXT_929 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_930 = NL + NL + "\t}";
  protected final String TEXT_931 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_932 = "TargetCommand extends ";
  protected final String TEXT_933 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_934 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_935 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_936 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_937 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_938 = "TargetCommand(";
  protected final String TEXT_939 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_940 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_941 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_942 = "TargetCommand(";
  protected final String TEXT_943 = " edge, ";
  protected final String TEXT_944 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_945 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_946 = " domainModelEditDomain = ";
  protected final String TEXT_947 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_948 = " command = new ";
  protected final String TEXT_949 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_950 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew WrappingCommand(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_951 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_952 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_953 = NL;
  protected final String TEXT_954 = NL + "\t\t\tif(!";
  protected final String TEXT_955 = ".canCreateLink(";
  protected final String TEXT_956 = ", ";
  protected final String TEXT_957 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_958 = NL + "\t\t\treturn true;";
  protected final String TEXT_959 = NL;
  protected final String TEXT_960 = NL + "\t\t\tif(!";
  protected final String TEXT_961 = ".canCreateLink(";
  protected final String TEXT_962 = ", ";
  protected final String TEXT_963 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_964 = NL + "\t\t\treturn true;";
  protected final String TEXT_965 = NL + "\t\t\treturn false;";
  protected final String TEXT_966 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_967 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_968 = " editingDomain = ";
  protected final String TEXT_969 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_970 = " result = new ";
  protected final String TEXT_971 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_972 = "(edge, newTarget));";
  protected final String TEXT_973 = NL + "\t\t\tresult.append(";
  protected final String TEXT_974 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_975 = ".eINSTANCE.get";
  protected final String TEXT_976 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_977 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_978 = ".eINSTANCE.get";
  protected final String TEXT_979 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_980 = NL + "\t\t\tresult.append(";
  protected final String TEXT_981 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_982 = ".eINSTANCE.get";
  protected final String TEXT_983 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_984 = NL + "\t\t\tresult.append(";
  protected final String TEXT_985 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_986 = ".eINSTANCE.get";
  protected final String TEXT_987 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_988 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_989 = ".eINSTANCE.get";
  protected final String TEXT_990 = "(), newTarget.getElement()));";
  protected final String TEXT_991 = NL + "\t\t\tresult.append(";
  protected final String TEXT_992 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_993 = ".eINSTANCE.get";
  protected final String TEXT_994 = "(), newTarget.getElement()));";
  protected final String TEXT_995 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_996 = NL;
  protected final String TEXT_997 = NL + "\t\t\tprivate ";
  protected final String TEXT_998 = " createDomainModelRemoveCommand(";
  protected final String TEXT_999 = " editingDomain) {";
  protected final String TEXT_1000 = NL + "\t\t\t\t";
  protected final String TEXT_1001 = " result = new ";
  protected final String TEXT_1002 = "();";
  protected final String TEXT_1003 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1004 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1005 = ".getElement().eContainer(), ";
  protected final String TEXT_1006 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1007 = ".getElement()));";
  protected final String TEXT_1008 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1009 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1010 = ".getElement().eContainer(), ";
  protected final String TEXT_1011 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1012 = ".UNSET_VALUE));";
  protected final String TEXT_1013 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1014 = ".INSTANCE;";
  protected final String TEXT_1015 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1016 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1017 = ".getElement().eContainer(), ";
  protected final String TEXT_1018 = ".eINSTANCE.get";
  protected final String TEXT_1019 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1020 = ".getElement()));";
  protected final String TEXT_1021 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1022 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1023 = ".getElement().eContainer(), ";
  protected final String TEXT_1024 = ".eINSTANCE.get";
  protected final String TEXT_1025 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1026 = ".UNSET_VALUE));";
  protected final String TEXT_1027 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1028 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1029 = ".getElement(), ";
  protected final String TEXT_1030 = ".eINSTANCE.get";
  protected final String TEXT_1031 = "(), ";
  protected final String TEXT_1032 = ".getSource().getElement()));";
  protected final String TEXT_1033 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1034 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1035 = ".getElement(), ";
  protected final String TEXT_1036 = ".eINSTANCE.get";
  protected final String TEXT_1037 = "(), ";
  protected final String TEXT_1038 = ".UNSET_VALUE));";
  protected final String TEXT_1039 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1040 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1041 = ".getElement(), ";
  protected final String TEXT_1042 = ".eINSTANCE.get";
  protected final String TEXT_1043 = "(), ";
  protected final String TEXT_1044 = ".getTarget().getElement()));";
  protected final String TEXT_1045 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1046 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1047 = ".getElement(), ";
  protected final String TEXT_1048 = ".eINSTANCE.get";
  protected final String TEXT_1049 = "(), ";
  protected final String TEXT_1050 = ".UNSET_VALUE));";
  protected final String TEXT_1051 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1052 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1053 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1054 = ".getSource().getElement(), ";
  protected final String TEXT_1055 = ".eINSTANCE.get";
  protected final String TEXT_1056 = "(), ";
  protected final String TEXT_1057 = ".getTarget().getElement());";
  protected final String TEXT_1058 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1059 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1060 = ".getSource().getElement(), ";
  protected final String TEXT_1061 = ".eINSTANCE.get";
  protected final String TEXT_1062 = "(), ";
  protected final String TEXT_1063 = ".UNSET_VALUE);";
  protected final String TEXT_1064 = NL + "\t\t\t}";
  protected final String TEXT_1065 = NL + "\t}" + NL;
  protected final String TEXT_1066 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1067 = "Command extends ";
  protected final String TEXT_1068 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1069 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1070 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1071 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1072 = "Command(";
  protected final String TEXT_1073 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1074 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1075 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1076 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1077 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1078 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1079 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1080 = NL + "\t\t\t";
  protected final String TEXT_1081 = " createdDomainElement = ";
  protected final String TEXT_1082 = ".eINSTANCE.create";
  protected final String TEXT_1083 = "();" + NL + "\t\t\tcreatedEdge.setElement(";
  protected final String TEXT_1084 = "(";
  protected final String TEXT_1085 = ") ";
  protected final String TEXT_1086 = "createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1087 = NL + "\t\t\t";
  protected final String TEXT_1088 = ".";
  protected final String TEXT_1089 = ".initializeElement(";
  protected final String TEXT_1090 = "(";
  protected final String TEXT_1091 = ") ";
  protected final String TEXT_1092 = "createdDomainElement);";
  protected final String TEXT_1093 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1094 = NL + "\t\t\t";
  protected final String TEXT_1095 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1096 = " domainModelEditDomain = ";
  protected final String TEXT_1097 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1098 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1099 = NL + "\t\t\t";
  protected final String TEXT_1100 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1101 = ".eINSTANCE.get";
  protected final String TEXT_1102 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1103 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1104 = ".eINSTANCE.get";
  protected final String TEXT_1105 = "(), createdDomainElement));";
  protected final String TEXT_1106 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1107 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1108 = ".eINSTANCE.get";
  protected final String TEXT_1109 = "(), createdDomainElement));";
  protected final String TEXT_1110 = NL;
  protected final String TEXT_1111 = NL + "\t\tif (";
  protected final String TEXT_1112 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1113 = NL + "\t\t}";
  protected final String TEXT_1114 = NL + "\t\tif (";
  protected final String TEXT_1115 = ".size() >= ";
  protected final String TEXT_1116 = ".eINSTANCE.get";
  protected final String TEXT_1117 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1118 = NL + "\t\t}";
  protected final String TEXT_1119 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1120 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1121 = ".eINSTANCE.get";
  protected final String TEXT_1122 = "(), source.getElement()));";
  protected final String TEXT_1123 = NL;
  protected final String TEXT_1124 = NL + "\t\tif (";
  protected final String TEXT_1125 = " != null) {" + NL + "\t\t\t";
  protected final String TEXT_1126 = NL + "\t\t}";
  protected final String TEXT_1127 = NL + "\t\tif (";
  protected final String TEXT_1128 = ".size() >= ";
  protected final String TEXT_1129 = ".eINSTANCE.get";
  protected final String TEXT_1130 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1131 = NL + "\t\t}";
  protected final String TEXT_1132 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1133 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1134 = ".eINSTANCE.get";
  protected final String TEXT_1135 = "(), target.getElement()));";
  protected final String TEXT_1136 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1137 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1138 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_1139 = ".eINSTANCE.get";
  protected final String TEXT_1140 = "(), target.getElement());";
  protected final String TEXT_1141 = NL + "\t\t}" + NL;
  protected final String TEXT_1142 = NL;
  protected final String TEXT_1143 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1144 = " getRelationshipContainer(";
  protected final String TEXT_1145 = " element, ";
  protected final String TEXT_1146 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1147 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1148 = NL;
  protected final String TEXT_1149 = NL + "\t\t\tif(!";
  protected final String TEXT_1150 = ".canCreateLink(";
  protected final String TEXT_1151 = ", ";
  protected final String TEXT_1152 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1153 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1154 = NL;
  protected final String TEXT_1155 = NL;
  protected final String TEXT_1156 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1157 = NL + "}";
  protected final String TEXT_1158 = NL;
d3693 1
d3697 1
a3697 1
    stringBuffer.append(TEXT_802);
d3699 1
a3699 1
    stringBuffer.append(TEXT_803);
d3701 1
a3701 1
    stringBuffer.append(TEXT_804);
a3727 2
    stringBuffer.append(TEXT_805);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d3731 2
d3736 1
a3736 1
    stringBuffer.append(TEXT_808);
a3737 2
    stringBuffer.append(TEXT_809);
    stringBuffer.append(_edge);
d3743 2
d3748 1
a3748 1
    stringBuffer.append(TEXT_813);
a3749 2
    stringBuffer.append(TEXT_814);
    stringBuffer.append(_edge);
d3753 2
d3756 1
a3756 1
    stringBuffer.append(TEXT_817);
d3761 1
a3761 1
    stringBuffer.append(TEXT_818);
d3763 1
a3763 1
    stringBuffer.append(TEXT_819);
d3769 1
a3769 1
    stringBuffer.append(TEXT_820);
d3771 1
a3771 1
    stringBuffer.append(TEXT_821);
d3773 1
a3773 1
    stringBuffer.append(TEXT_822);
d3775 1
a3775 1
    stringBuffer.append(TEXT_823);
d3777 1
a3777 1
    stringBuffer.append(TEXT_824);
d3779 1
a3779 1
    stringBuffer.append(TEXT_825);
d3783 1
a3783 1
    stringBuffer.append(TEXT_826);
d3785 1
a3785 1
    stringBuffer.append(TEXT_827);
d3787 1
a3787 1
    stringBuffer.append(TEXT_828);
d3789 1
a3789 1
    stringBuffer.append(TEXT_829);
d3791 1
a3791 1
    stringBuffer.append(TEXT_830);
d3793 1
a3793 1
    stringBuffer.append(TEXT_831);
d3800 1
a3800 1
    stringBuffer.append(TEXT_832);
d3802 1
a3802 1
    stringBuffer.append(TEXT_833);
d3804 1
a3804 1
    stringBuffer.append(TEXT_834);
d3806 1
a3806 1
    stringBuffer.append(TEXT_835);
d3808 1
a3808 1
    stringBuffer.append(TEXT_836);
d3810 1
a3810 1
    stringBuffer.append(TEXT_837);
d3814 1
a3814 1
    stringBuffer.append(TEXT_838);
d3816 1
a3816 1
    stringBuffer.append(TEXT_839);
d3818 1
a3818 1
    stringBuffer.append(TEXT_840);
d3820 1
a3820 1
    stringBuffer.append(TEXT_841);
d3822 1
a3822 1
    stringBuffer.append(TEXT_842);
d3824 1
a3824 1
    stringBuffer.append(TEXT_843);
d3831 1
a3831 1
    stringBuffer.append(TEXT_844);
d3833 1
a3833 1
    stringBuffer.append(TEXT_845);
d3835 1
a3835 1
    stringBuffer.append(TEXT_846);
d3837 1
a3837 1
    stringBuffer.append(TEXT_847);
d3839 1
a3839 1
    stringBuffer.append(TEXT_848);
d3841 1
a3841 1
    stringBuffer.append(TEXT_849);
d3845 1
a3845 1
    stringBuffer.append(TEXT_850);
d3847 1
a3847 1
    stringBuffer.append(TEXT_851);
d3849 1
a3849 1
    stringBuffer.append(TEXT_852);
d3851 1
a3851 1
    stringBuffer.append(TEXT_853);
d3853 1
a3853 1
    stringBuffer.append(TEXT_854);
d3855 1
a3855 1
    stringBuffer.append(TEXT_855);
d3860 1
a3860 1
    stringBuffer.append(TEXT_856);
d3866 1
a3866 1
    stringBuffer.append(TEXT_857);
d3868 1
a3868 1
    stringBuffer.append(TEXT_858);
d3870 1
a3870 1
    stringBuffer.append(TEXT_859);
d3872 1
a3872 1
    stringBuffer.append(TEXT_860);
d3874 1
a3874 1
    stringBuffer.append(TEXT_861);
d3876 1
a3876 1
    stringBuffer.append(TEXT_862);
d3880 1
a3880 1
    stringBuffer.append(TEXT_863);
d3882 1
a3882 1
    stringBuffer.append(TEXT_864);
d3884 1
a3884 1
    stringBuffer.append(TEXT_865);
d3886 1
a3886 1
    stringBuffer.append(TEXT_866);
d3888 1
a3888 1
    stringBuffer.append(TEXT_867);
d3890 1
a3890 1
    stringBuffer.append(TEXT_868);
d3897 1
a3897 1
    stringBuffer.append(TEXT_869);
d3901 1
a3901 1
    stringBuffer.append(TEXT_870);
d3905 1
a3905 1
    stringBuffer.append(TEXT_871);
d3908 1
a3908 1
    stringBuffer.append(TEXT_872);
d3910 1
a3910 1
    stringBuffer.append(TEXT_873);
d3912 1
a3912 1
    stringBuffer.append(TEXT_874);
d3915 1
a3915 1
    stringBuffer.append(TEXT_875);
d3917 1
a3917 1
    stringBuffer.append(TEXT_876);
d3919 1
a3919 1
    stringBuffer.append(TEXT_877);
d3926 1
a3926 1
    stringBuffer.append(TEXT_878);
a3929 2
    stringBuffer.append(TEXT_879);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName()));
d3933 2
d3936 1
a3936 1
    stringBuffer.append(TEXT_882);
d3938 1
a3938 1
    stringBuffer.append(TEXT_883);
d3946 1
a3946 1
    stringBuffer.append(TEXT_884);
d3952 1
a3952 1
    stringBuffer.append(TEXT_885);
d3954 1
a3954 1
    stringBuffer.append(TEXT_886);
d3956 1
a3956 1
    stringBuffer.append(TEXT_887);
d3960 1
a3960 1
    stringBuffer.append(TEXT_888);
d3962 1
a3962 1
    stringBuffer.append(TEXT_889);
d3964 1
a3964 1
    stringBuffer.append(TEXT_890);
d3966 1
a3966 1
    stringBuffer.append(TEXT_891);
d3968 1
a3968 1
    stringBuffer.append(TEXT_892);
d3983 1
a3983 1
    stringBuffer.append(TEXT_893);
d3989 1
a3989 1
    stringBuffer.append(TEXT_894);
d3991 1
a3991 1
    stringBuffer.append(TEXT_895);
d3993 1
a3993 1
    stringBuffer.append(TEXT_896);
d3997 1
a3997 1
    stringBuffer.append(TEXT_897);
d3999 1
a3999 1
    stringBuffer.append(TEXT_898);
d4001 1
a4001 1
    stringBuffer.append(TEXT_899);
d4003 1
a4003 1
    stringBuffer.append(TEXT_900);
d4005 1
a4005 1
    stringBuffer.append(TEXT_901);
d4017 1
a4017 1
    stringBuffer.append(TEXT_902);
d4021 1
a4021 1
    stringBuffer.append(TEXT_903);
d4023 1
a4023 1
    stringBuffer.append(TEXT_904);
d4025 1
a4025 1
    stringBuffer.append(TEXT_905);
d4027 1
a4027 1
    stringBuffer.append(TEXT_906);
d4034 1
a4034 1
    stringBuffer.append(TEXT_907);
d4045 1
a4045 1
    stringBuffer.append(TEXT_908);
d4051 1
a4051 1
    stringBuffer.append(TEXT_909);
d4053 1
a4053 1
    stringBuffer.append(TEXT_910);
d4055 1
a4055 1
    stringBuffer.append(TEXT_911);
d4059 1
a4059 1
    stringBuffer.append(TEXT_912);
d4061 1
a4061 1
    stringBuffer.append(TEXT_913);
d4063 1
a4063 1
    stringBuffer.append(TEXT_914);
d4065 1
a4065 1
    stringBuffer.append(TEXT_915);
d4067 1
a4067 1
    stringBuffer.append(TEXT_916);
d4078 1
a4078 1
    stringBuffer.append(TEXT_917);
d4082 1
a4082 1
    stringBuffer.append(TEXT_918);
d4084 1
a4084 1
    stringBuffer.append(TEXT_919);
d4086 1
a4086 1
    stringBuffer.append(TEXT_920);
d4088 1
a4088 1
    stringBuffer.append(TEXT_921);
d4095 1
a4095 1
    stringBuffer.append(TEXT_922);
d4099 1
a4099 1
    stringBuffer.append(TEXT_923);
a4102 1
    stringBuffer.append(TEXT_924);
d4104 1
a4107 2
    stringBuffer.append(TEXT_926);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d4111 2
d4114 1
a4114 1
    stringBuffer.append(TEXT_929);
d4118 1
a4118 1
    stringBuffer.append(TEXT_930);
d4148 1
a4148 1
    stringBuffer.append(TEXT_931);
d4151 1
a4151 1
    stringBuffer.append(TEXT_932);
d4153 1
a4153 1
    stringBuffer.append(TEXT_933);
a4154 2
    stringBuffer.append(TEXT_934);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d4158 2
d4161 1
a4161 1
    stringBuffer.append(TEXT_937);
d4164 1
a4164 1
    stringBuffer.append(TEXT_938);
d4166 1
a4166 1
    stringBuffer.append(TEXT_939);
d4168 1
a4168 1
    stringBuffer.append(TEXT_940);
d4170 1
a4170 1
    stringBuffer.append(TEXT_941);
d4173 1
a4173 1
    stringBuffer.append(TEXT_942);
d4175 1
a4175 1
    stringBuffer.append(TEXT_943);
d4177 1
a4177 1
    stringBuffer.append(TEXT_944);
d4181 1
a4181 1
    stringBuffer.append(TEXT_945);
d4183 1
a4183 1
    stringBuffer.append(TEXT_946);
d4185 1
a4185 1
    stringBuffer.append(TEXT_947);
d4187 1
a4187 1
    stringBuffer.append(TEXT_948);
d4189 1
a4189 1
    stringBuffer.append(TEXT_949);
d4191 1
a4191 1
    stringBuffer.append(TEXT_950);
d4195 1
a4195 1
    stringBuffer.append(TEXT_951);
d4199 1
a4199 1
    stringBuffer.append(TEXT_952);
d4206 1
a4206 1
    stringBuffer.append(TEXT_953);
d4210 1
a4210 1
    stringBuffer.append(TEXT_954);
d4212 1
a4212 1
    stringBuffer.append(TEXT_955);
d4214 1
a4214 1
    stringBuffer.append(TEXT_956);
d4216 1
a4216 1
    stringBuffer.append(TEXT_957);
d4223 1
a4223 1
    stringBuffer.append(TEXT_958);
d4230 1
a4230 1
    stringBuffer.append(TEXT_959);
d4234 1
a4234 1
    stringBuffer.append(TEXT_960);
d4236 1
a4236 1
    stringBuffer.append(TEXT_961);
d4238 1
a4238 1
    stringBuffer.append(TEXT_962);
d4240 1
a4240 1
    stringBuffer.append(TEXT_963);
d4247 1
a4247 1
    stringBuffer.append(TEXT_964);
d4251 1
a4251 1
    stringBuffer.append(TEXT_965);
d4255 1
a4255 1
    stringBuffer.append(TEXT_966);
d4257 1
a4257 1
    stringBuffer.append(TEXT_967);
d4259 1
a4259 1
    stringBuffer.append(TEXT_968);
a4260 2
    stringBuffer.append(TEXT_969);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d4264 2
d4267 1
a4267 1
    stringBuffer.append(TEXT_972);
d4274 1
a4274 1
    stringBuffer.append(TEXT_973);
d4276 1
a4276 1
    stringBuffer.append(TEXT_974);
d4278 1
a4278 1
    stringBuffer.append(TEXT_975);
d4280 1
a4280 1
    stringBuffer.append(TEXT_976);
d4282 1
a4282 1
    stringBuffer.append(TEXT_977);
d4284 1
a4284 1
    stringBuffer.append(TEXT_978);
d4286 1
a4286 1
    stringBuffer.append(TEXT_979);
d4290 1
a4290 1
    stringBuffer.append(TEXT_980);
d4292 1
a4292 1
    stringBuffer.append(TEXT_981);
d4294 1
a4294 1
    stringBuffer.append(TEXT_982);
d4296 1
a4296 1
    stringBuffer.append(TEXT_983);
d4303 1
a4303 1
    stringBuffer.append(TEXT_984);
d4305 1
a4305 1
    stringBuffer.append(TEXT_985);
d4307 1
a4307 1
    stringBuffer.append(TEXT_986);
d4309 1
a4309 1
    stringBuffer.append(TEXT_987);
d4311 1
a4311 1
    stringBuffer.append(TEXT_988);
d4313 1
a4313 1
    stringBuffer.append(TEXT_989);
d4315 1
a4315 1
    stringBuffer.append(TEXT_990);
d4319 1
a4319 1
    stringBuffer.append(TEXT_991);
d4321 1
a4321 1
    stringBuffer.append(TEXT_992);
d4323 1
a4323 1
    stringBuffer.append(TEXT_993);
d4325 1
a4325 1
    stringBuffer.append(TEXT_994);
d4330 1
a4330 1
    stringBuffer.append(TEXT_995);
d4335 2
a4336 1
    stringBuffer.append(TEXT_996);
d4340 1
a4340 1
    stringBuffer.append(TEXT_997);
d4342 1
a4342 1
    stringBuffer.append(TEXT_998);
d4344 1
a4344 1
    stringBuffer.append(TEXT_999);
d4371 1
a4371 1
    stringBuffer.append(TEXT_1000);
d4373 1
a4373 1
    stringBuffer.append(TEXT_1001);
d4375 1
a4375 1
    stringBuffer.append(TEXT_1002);
d4379 1
a4379 1
    stringBuffer.append(TEXT_1003);
d4381 1
a4381 1
    stringBuffer.append(TEXT_1004);
d4383 1
a4383 1
    stringBuffer.append(TEXT_1005);
d4385 1
a4385 1
    stringBuffer.append(TEXT_1006);
d4387 1
a4387 1
    stringBuffer.append(TEXT_1007);
d4391 1
a4391 1
    stringBuffer.append(TEXT_1008);
d4393 1
a4393 1
    stringBuffer.append(TEXT_1009);
d4395 1
a4395 1
    stringBuffer.append(TEXT_1010);
d4397 1
a4397 1
    stringBuffer.append(TEXT_1011);
d4399 1
a4399 1
    stringBuffer.append(TEXT_1012);
d4404 1
a4404 1
    stringBuffer.append(TEXT_1013);
d4406 1
a4406 1
    stringBuffer.append(TEXT_1014);
d4412 1
a4412 1
    stringBuffer.append(TEXT_1015);
d4414 1
a4414 1
    stringBuffer.append(TEXT_1016);
d4416 1
a4416 1
    stringBuffer.append(TEXT_1017);
d4418 1
a4418 1
    stringBuffer.append(TEXT_1018);
d4420 1
a4420 1
    stringBuffer.append(TEXT_1019);
d4422 1
a4422 1
    stringBuffer.append(TEXT_1020);
d4426 1
a4426 1
    stringBuffer.append(TEXT_1021);
d4428 1
a4428 1
    stringBuffer.append(TEXT_1022);
d4430 1
a4430 1
    stringBuffer.append(TEXT_1023);
d4432 1
a4432 1
    stringBuffer.append(TEXT_1024);
d4434 1
a4434 1
    stringBuffer.append(TEXT_1025);
d4436 1
a4436 1
    stringBuffer.append(TEXT_1026);
d4443 1
a4443 1
    stringBuffer.append(TEXT_1027);
d4445 1
a4445 1
    stringBuffer.append(TEXT_1028);
d4447 1
a4447 1
    stringBuffer.append(TEXT_1029);
d4449 1
a4449 1
    stringBuffer.append(TEXT_1030);
d4451 1
a4451 1
    stringBuffer.append(TEXT_1031);
d4453 1
a4453 1
    stringBuffer.append(TEXT_1032);
d4457 1
a4457 1
    stringBuffer.append(TEXT_1033);
d4459 1
a4459 1
    stringBuffer.append(TEXT_1034);
d4461 1
a4461 1
    stringBuffer.append(TEXT_1035);
d4463 1
a4463 1
    stringBuffer.append(TEXT_1036);
d4465 1
a4465 1
    stringBuffer.append(TEXT_1037);
d4467 1
a4467 1
    stringBuffer.append(TEXT_1038);
d4474 1
a4474 1
    stringBuffer.append(TEXT_1039);
d4476 1
a4476 1
    stringBuffer.append(TEXT_1040);
d4478 1
a4478 1
    stringBuffer.append(TEXT_1041);
d4480 1
a4480 1
    stringBuffer.append(TEXT_1042);
d4482 1
a4482 1
    stringBuffer.append(TEXT_1043);
d4484 1
a4484 1
    stringBuffer.append(TEXT_1044);
d4488 1
a4488 1
    stringBuffer.append(TEXT_1045);
d4490 1
a4490 1
    stringBuffer.append(TEXT_1046);
d4492 1
a4492 1
    stringBuffer.append(TEXT_1047);
d4494 1
a4494 1
    stringBuffer.append(TEXT_1048);
d4496 1
a4496 1
    stringBuffer.append(TEXT_1049);
d4498 1
a4498 1
    stringBuffer.append(TEXT_1050);
d4503 1
a4503 1
    stringBuffer.append(TEXT_1051);
d4509 1
a4509 1
    stringBuffer.append(TEXT_1052);
d4511 1
a4511 1
    stringBuffer.append(TEXT_1053);
d4513 1
a4513 1
    stringBuffer.append(TEXT_1054);
d4515 1
a4515 1
    stringBuffer.append(TEXT_1055);
d4517 1
a4517 1
    stringBuffer.append(TEXT_1056);
d4519 1
a4519 1
    stringBuffer.append(TEXT_1057);
d4523 1
a4523 1
    stringBuffer.append(TEXT_1058);
d4525 1
a4525 1
    stringBuffer.append(TEXT_1059);
d4527 1
a4527 1
    stringBuffer.append(TEXT_1060);
d4529 1
a4529 1
    stringBuffer.append(TEXT_1061);
d4531 1
a4531 1
    stringBuffer.append(TEXT_1062);
d4533 1
a4533 1
    stringBuffer.append(TEXT_1063);
d4540 1
a4540 1
    stringBuffer.append(TEXT_1064);
d4544 1
a4544 1
    stringBuffer.append(TEXT_1065);
d4548 1
a4548 1
    stringBuffer.append(TEXT_1066);
d4551 1
a4551 1
    stringBuffer.append(TEXT_1067);
d4553 1
a4553 1
    stringBuffer.append(TEXT_1068);
d4555 1
a4555 1
    stringBuffer.append(TEXT_1069);
d4557 1
a4557 1
    stringBuffer.append(TEXT_1070);
d4559 1
a4559 1
    stringBuffer.append(TEXT_1071);
d4562 1
a4562 1
    stringBuffer.append(TEXT_1072);
a4563 4
    stringBuffer.append(TEXT_1073);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_1074);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d4569 4
d4574 1
a4574 1
    stringBuffer.append(TEXT_1078);
d4576 1
a4576 1
    stringBuffer.append(TEXT_1079);
d4582 1
a4582 1
    stringBuffer.append(TEXT_1080);
d4584 1
a4584 1
    stringBuffer.append(TEXT_1081);
d4586 1
a4586 1
    stringBuffer.append(TEXT_1082);
d4588 1
a4588 1
    stringBuffer.append(TEXT_1083);
d4590 1
a4590 1
    stringBuffer.append(TEXT_1084);
d4592 1
a4592 1
    stringBuffer.append(TEXT_1085);
d4594 1
a4594 1
    stringBuffer.append(TEXT_1086);
d4596 1
a4596 1
    stringBuffer.append(TEXT_1087);
d4598 1
a4598 1
    stringBuffer.append(TEXT_1088);
d4600 1
a4600 1
    stringBuffer.append(TEXT_1089);
d4602 1
a4602 1
    stringBuffer.append(TEXT_1090);
d4604 1
a4604 1
    stringBuffer.append(TEXT_1091);
d4606 1
a4606 1
    stringBuffer.append(TEXT_1092);
d4610 1
a4610 1
    stringBuffer.append(TEXT_1093);
d4614 1
a4614 1
    stringBuffer.append(TEXT_1094);
d4616 1
a4616 1
    stringBuffer.append(TEXT_1095);
d4618 1
a4618 1
    stringBuffer.append(TEXT_1096);
d4620 1
a4620 1
    stringBuffer.append(TEXT_1097);
d4624 1
a4624 1
    stringBuffer.append(TEXT_1098);
d4651 1
a4651 1
    stringBuffer.append(TEXT_1099);
d4653 1
a4653 1
    stringBuffer.append(TEXT_1100);
d4655 1
a4655 1
    stringBuffer.append(TEXT_1101);
d4657 1
a4657 1
    stringBuffer.append(TEXT_1102);
d4659 1
a4659 1
    stringBuffer.append(TEXT_1103);
d4661 1
a4661 1
    stringBuffer.append(TEXT_1104);
d4663 1
a4663 1
    stringBuffer.append(TEXT_1105);
d4668 1
a4668 1
    stringBuffer.append(TEXT_1106);
d4670 1
a4670 1
    stringBuffer.append(TEXT_1107);
d4672 1
a4672 1
    stringBuffer.append(TEXT_1108);
d4674 1
a4674 1
    stringBuffer.append(TEXT_1109);
d4684 1
a4684 1
    stringBuffer.append(TEXT_1110);
d4690 1
a4690 1
    stringBuffer.append(TEXT_1111);
d4692 1
a4692 1
    stringBuffer.append(TEXT_1112);
d4694 1
a4694 1
    stringBuffer.append(TEXT_1113);
d4698 1
a4698 1
    stringBuffer.append(TEXT_1114);
d4700 1
a4700 1
    stringBuffer.append(TEXT_1115);
d4702 1
a4702 1
    stringBuffer.append(TEXT_1116);
d4704 1
a4704 1
    stringBuffer.append(TEXT_1117);
d4706 1
a4706 1
    stringBuffer.append(TEXT_1118);
d4714 1
a4714 1
    stringBuffer.append(TEXT_1119);
d4716 1
a4716 1
    stringBuffer.append(TEXT_1120);
d4718 1
a4718 1
    stringBuffer.append(TEXT_1121);
d4720 1
a4720 1
    stringBuffer.append(TEXT_1122);
d4730 1
a4730 1
    stringBuffer.append(TEXT_1123);
d4736 1
a4736 1
    stringBuffer.append(TEXT_1124);
d4738 1
a4738 1
    stringBuffer.append(TEXT_1125);
d4740 1
a4740 1
    stringBuffer.append(TEXT_1126);
d4744 1
a4744 1
    stringBuffer.append(TEXT_1127);
d4746 1
a4746 1
    stringBuffer.append(TEXT_1128);
d4748 1
a4748 1
    stringBuffer.append(TEXT_1129);
d4750 1
a4750 1
    stringBuffer.append(TEXT_1130);
d4752 1
a4752 1
    stringBuffer.append(TEXT_1131);
d4760 1
a4760 1
    stringBuffer.append(TEXT_1132);
d4762 1
a4762 1
    stringBuffer.append(TEXT_1133);
d4764 1
a4764 1
    stringBuffer.append(TEXT_1134);
d4766 1
a4766 1
    stringBuffer.append(TEXT_1135);
d4770 1
a4770 1
    stringBuffer.append(TEXT_1136);
d4775 1
a4775 1
    stringBuffer.append(TEXT_1137);
d4777 1
a4777 1
    stringBuffer.append(TEXT_1138);
d4779 1
a4779 1
    stringBuffer.append(TEXT_1139);
d4781 1
a4781 1
    stringBuffer.append(TEXT_1140);
d4785 2
a4786 2
    stringBuffer.append(TEXT_1141);
    stringBuffer.append(TEXT_1142);
d4790 1
a4790 1
    stringBuffer.append(TEXT_1143);
d4792 1
a4792 1
    stringBuffer.append(TEXT_1144);
d4794 1
a4794 1
    stringBuffer.append(TEXT_1145);
d4796 1
a4796 1
    stringBuffer.append(TEXT_1146);
d4800 1
a4800 1
    stringBuffer.append(TEXT_1147);
d4806 1
a4806 1
    stringBuffer.append(TEXT_1148);
d4810 1
a4810 1
    stringBuffer.append(TEXT_1149);
d4812 1
a4812 1
    stringBuffer.append(TEXT_1150);
d4814 1
a4814 1
    stringBuffer.append(TEXT_1151);
d4816 1
a4816 1
    stringBuffer.append(TEXT_1152);
d4823 1
a4823 1
    stringBuffer.append(TEXT_1153);
d4832 1
a4832 1
    stringBuffer.append(TEXT_1154);
d4834 1
a4834 1
    stringBuffer.append(TEXT_1155);
d4838 1
a4838 1
    stringBuffer.append(TEXT_1156);
d4845 1
a4845 1
    stringBuffer.append(TEXT_1157);
d4847 1
a4847 1
    stringBuffer.append(TEXT_1158);
@


1.17
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d323 1
a323 1
  protected final String TEXT_302 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
@


1.16
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d23 16
a38 16
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " implements ";
  protected final String TEXT_8 = ", IUpdatableEditPart {";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_11 = ";";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_13 = " contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_14 = " primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_15 = "(";
  protected final String TEXT_16 = " model) {" + NL + "\t\tassert model instanceof ";
  protected final String TEXT_17 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL;
d40 68
a107 68
  protected final String TEXT_19 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void registerModel() {" + NL + "\t\tsuper.registerModel();" + NL + "\t\t";
  protected final String TEXT_20 = " view = (";
  protected final String TEXT_21 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().put(view.getElement(), this);\t" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void unregisterModel() {" + NL + "\t\tsuper.unregisterModel();" + NL + "\t\t";
  protected final String TEXT_22 = " view = (";
  protected final String TEXT_23 = ") getModel();" + NL + "\t\tif (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {" + NL + "\t\t\tgetViewer().getEditPartRegistry().remove(view.getElement());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = "\t\tinstallEditPolicy(";
  protected final String TEXT_26 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_27 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_28 = " createDeleteCommand(";
  protected final String TEXT_29 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_30 = " editingDomain = ";
  protected final String TEXT_31 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_32 = " cc = new ";
  protected final String TEXT_33 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_34 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new WrappingCommand(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_35 = " editingDomain) {";
  protected final String TEXT_36 = NL + "\t\t\t\t";
  protected final String TEXT_37 = " result = new ";
  protected final String TEXT_38 = "();";
  protected final String TEXT_39 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_40 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_41 = ".eINSTANCE.get";
  protected final String TEXT_42 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_43 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_44 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_45 = ".eINSTANCE.get";
  protected final String TEXT_46 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_47 = ".UNSET_VALUE));";
  protected final String TEXT_48 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_49 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_52 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_53 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_54 = ".eINSTANCE.get";
  protected final String TEXT_55 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_56 = ".UNSET_VALUE));";
  protected final String TEXT_57 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_58 = NL + "\t\t\t\treturn ";
  protected final String TEXT_59 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_60 = ".eINSTANCE.get";
  protected final String TEXT_61 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_62 = NL + "\t\t\t\treturn ";
  protected final String TEXT_63 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_64 = ".eINSTANCE.get";
  protected final String TEXT_65 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_66 = ".UNSET_VALUE);";
  protected final String TEXT_67 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_68 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_69 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_70 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_71 = " getCreateCommand(";
  protected final String TEXT_72 = " request) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_73 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_74 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_75 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_76 = " createChangeConstraintCommand(";
  protected final String TEXT_77 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_78 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_79 = " createChildEditPolicy(";
  protected final String TEXT_80 = " child) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_81 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_82 = " getTargetEditPart(";
  protected final String TEXT_83 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_84 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_85 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_86 = ".GRAPHICAL_NODE_ROLE, new ";
d109 29
a137 29
  protected final String TEXT_88 = " getReconnectTargetCommand(";
  protected final String TEXT_89 = " request) {";
  protected final String TEXT_90 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_91 = ".INSTANCE;";
  protected final String TEXT_92 = NL + "\t\t\t\t";
  protected final String TEXT_93 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_94 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_95 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_96 = " edge = (";
  protected final String TEXT_97 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_98 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_99 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_100 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_101 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_102 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_103 = NL + "\t\t\t\tcase ";
  protected final String TEXT_104 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_105 = "TargetCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_106 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_107 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_108 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_109 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_110 = " getReconnectSourceCommand(";
  protected final String TEXT_111 = " request) {";
  protected final String TEXT_112 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_113 = ".INSTANCE;";
  protected final String TEXT_114 = NL + "\t\t\t\t";
  protected final String TEXT_115 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_116 = " == false) {" + NL + "\t\t\t\t\treturn ";
d139 527
a665 527
  protected final String TEXT_118 = " edge = (";
  protected final String TEXT_119 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_120 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_121 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_122 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_123 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_124 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_125 = NL + "\t\t\t\tcase ";
  protected final String TEXT_126 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_127 = "SourceCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_128 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_129 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_130 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_131 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_132 = " getConnectionCreateCommand(";
  protected final String TEXT_133 = " request) {";
  protected final String TEXT_134 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_135 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_136 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_137 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_138 = " result = new ";
  protected final String TEXT_139 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_140 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_141 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_142 = "StartCommand(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_143 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_144 = " wrappedResult = new WrappingCommand(";
  protected final String TEXT_145 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_146 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_147 = " getConnectionCompleteCommand(";
  protected final String TEXT_148 = " request) {";
  protected final String TEXT_149 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_150 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_151 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_152 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_153 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_154 = " result = new ";
  protected final String TEXT_155 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_156 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_157 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_158 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_159 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_160 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_161 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_162 = NL + "\t\t\t\treturn ";
  protected final String TEXT_163 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_164 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_165 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_166 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_167 = " invisibleRectangle = new ";
  protected final String TEXT_168 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_169 = "());" + NL + "\t\t";
  protected final String TEXT_170 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_171 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_172 = " createNodeShape() {";
  protected final String TEXT_173 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_174 = "()";
  protected final String TEXT_175 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_176 = ";";
  protected final String TEXT_177 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_178 = ";";
  protected final String TEXT_179 = NL + "\t\t";
  protected final String TEXT_180 = " figure = new ";
  protected final String TEXT_181 = "();";
  protected final String TEXT_182 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_183 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_184 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_185 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_186 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_187 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_188 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_189 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_190 = " view = (";
  protected final String TEXT_191 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_192 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_193 = " decorationPane = new ";
  protected final String TEXT_194 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_195 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_196 = " imageFigure = new ";
  protected final String TEXT_197 = "(";
  protected final String TEXT_198 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_199 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_200 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_201 = " setupContentPane(";
  protected final String TEXT_202 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_203 = NL + "\t\t\t";
  protected final String TEXT_204 = " layout = new ";
  protected final String TEXT_205 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_206 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_207 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_208 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_209 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_210 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_211 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_212 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_213 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_214 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_215 = " childEditPart) {";
  protected final String TEXT_216 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_217 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_218 = ") childEditPart).";
  protected final String TEXT_219 = "(getPrimaryShape().";
  protected final String TEXT_220 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_221 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_222 = ") {" + NL + "\t\t\t";
  protected final String TEXT_223 = " pane = getPrimaryShape().";
  protected final String TEXT_224 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_225 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_226 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_227 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_228 = ") {" + NL + "\t\t\t";
  protected final String TEXT_229 = " pane = getPrimaryShape().";
  protected final String TEXT_230 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_231 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_232 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_233 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_234 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_235 = NL + "\t\tfor(";
  protected final String TEXT_236 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_237 = " nextChild = (";
  protected final String TEXT_238 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_239 = ".getVisualID(nextChild) == ";
  protected final String TEXT_240 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_241 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_242 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_243 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_244 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_245 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_246 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_247 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_248 = " getLabelEditPart(";
  protected final String TEXT_249 = " req) {" + NL + "\t\t";
  protected final String TEXT_250 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_251 = " view = (";
  protected final String TEXT_252 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_253 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_254 = NL + "\t\t\t\tcase ";
  protected final String TEXT_255 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_256 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_257 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_258 = " childEditPart) {";
  protected final String TEXT_259 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_260 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_261 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_262 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_263 = " root = (";
  protected final String TEXT_264 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_265 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_266 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_267 = " childEditPart, int index) {";
  protected final String TEXT_268 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_269 = " labelFigure = ((";
  protected final String TEXT_270 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_271 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_272 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_273 = " childEditPart) {";
  protected final String TEXT_274 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_275 = " labelFigure = ((";
  protected final String TEXT_276 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_277 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_278 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_279 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_280 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_281 = " childEditPart = (";
  protected final String TEXT_282 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_283 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_284 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_285 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_286 = ";" + NL + "\t\t";
  protected final String TEXT_287 = " bounds = (";
  protected final String TEXT_288 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_289 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_290 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_291 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_292 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_293 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_294 = " getSourceConnectionAnchor(";
  protected final String TEXT_295 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_296 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_297 = " getSourceConnectionAnchor(";
  protected final String TEXT_298 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_299 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_300 = "  getTargetConnectionAnchor(";
  protected final String TEXT_301 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_302 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_303 = "  getTargetConnectionAnchor(";
  protected final String TEXT_304 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_305 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_306 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);";
  protected final String TEXT_307 = NL + "\t\tinstallLinkNotationModelRefresher();";
  protected final String TEXT_308 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {";
  protected final String TEXT_309 = NL + "\t\tuninstallLinkNotationModelRefresher();";
  protected final String TEXT_310 = NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}";
  protected final String TEXT_311 = NL;
  protected final String TEXT_312 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void installLinkNotationModelRefresher() {" + NL + "\t\tLinkNotationModelRefresher refresher = getLinkNotationModelRefresher();" + NL + "\t\tif (refresher.isInstalled()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_313 = " domainModelEditDomain = ";
  protected final String TEXT_314 = ".getEditingDomain(";
  protected final String TEXT_315 = ".getElement());" + NL + "\t\trefresher.install(domainModelEditDomain);" + NL + "\t\trefreshLinkNotationModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void uninstallLinkNotationModelRefresher() {" + NL + "\t\tgetLinkNotationModelRefresher().uninstall();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher linkNotationModelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate LinkNotationModelRefresher getLinkNotationModelRefresher() {" + NL + "\t\tif (linkNotationModelRefresher == null) {" + NL + "\t\t\tlinkNotationModelRefresher = new LinkNotationModelRefresher();" + NL + "\t\t}" + NL + "\t\treturn linkNotationModelRefresher;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class LinkNotationModelRefresher extends ";
  protected final String TEXT_316 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_317 = " filter;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_318 = " editingDomain;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LinkNotationModelRefresher() {" + NL + "\t\t\tcreateFilter();" + NL + "\t\t}";
  protected final String TEXT_319 = NL + NL + "\t\t/**" + NL + "\t\t * NB: Child links of this element are selected based on constraint declared in ";
  protected final String TEXT_320 = ". " + NL + "\t\t * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in " + NL + "\t\t * notational model having to be updated." + NL + "\t\t * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications" + NL + "\t\t * result in such an update." + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_321 = " getConstrainedChildLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_322 = ".NOT_TOUCH;" + NL + "\t\t}";
  protected final String TEXT_323 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly result in uncontained links. " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_324 = " createUncontainedLinksFilter() {" + NL + "\t\t\treturn ";
  protected final String TEXT_325 = ".createEventTypeFilter(";
  protected final String TEXT_326 = ".SET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_327 = ".createEventTypeFilter(";
  protected final String TEXT_328 = ".UNSET).or(" + NL + "\t\t\t\t";
  protected final String TEXT_329 = ".createEventTypeFilter(";
  protected final String TEXT_330 = ".REMOVE).or(" + NL + "\t\t\t\t";
  protected final String TEXT_331 = ".createEventTypeFilter(";
  protected final String TEXT_332 = ".REMOVE_MANY)" + NL + "\t\t\t)));" + NL + "\t\t}";
  protected final String TEXT_333 = NL + "\t\t/**" + NL + "\t\t * Creates a notification filter which filters notifications that may possibly affect the notational model" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createFilter() {";
  protected final String TEXT_334 = NL;
  protected final String TEXT_335 = NL + "\t\t\tfilter = ";
  protected final String TEXT_336 = ".createFeatureFilter(";
  protected final String TEXT_337 = ".eINSTANCE.get";
  protected final String TEXT_338 = "());";
  protected final String TEXT_339 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_340 = ".createFeatureFilter(";
  protected final String TEXT_341 = ".eINSTANCE.get";
  protected final String TEXT_342 = "()));";
  protected final String TEXT_343 = NL;
  protected final String TEXT_344 = NL + "\t\t\tfilter = ";
  protected final String TEXT_345 = ".createFeatureFilter(";
  protected final String TEXT_346 = ".eINSTANCE.get";
  protected final String TEXT_347 = "());";
  protected final String TEXT_348 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_349 = ".createFeatureFilter(";
  protected final String TEXT_350 = ".eINSTANCE.get";
  protected final String TEXT_351 = "()));";
  protected final String TEXT_352 = NL;
  protected final String TEXT_353 = NL + "\t\t\tfilter = ";
  protected final String TEXT_354 = ".createFeatureFilter(";
  protected final String TEXT_355 = ".eINSTANCE.get";
  protected final String TEXT_356 = "());";
  protected final String TEXT_357 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_358 = ".createFeatureFilter(";
  protected final String TEXT_359 = ".eINSTANCE.get";
  protected final String TEXT_360 = "()));";
  protected final String TEXT_361 = NL;
  protected final String TEXT_362 = NL + "\t\t\tfilter = ";
  protected final String TEXT_363 = ".createFeatureFilter(";
  protected final String TEXT_364 = ".eINSTANCE.get";
  protected final String TEXT_365 = "());";
  protected final String TEXT_366 = NL + "\t\t\tfilter = filter.or(";
  protected final String TEXT_367 = ".createFeatureFilter(";
  protected final String TEXT_368 = ".eINSTANCE.get";
  protected final String TEXT_369 = "()));";
  protected final String TEXT_370 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter().or(filter);";
  protected final String TEXT_371 = NL + "\t\t\tfilter = getConstrainedChildLinksFilter();";
  protected final String TEXT_372 = NL + "\t\t\tfilter = filter.or(createUncontainedLinksFilter());";
  protected final String TEXT_373 = NL + "\t\t\tfilter = createUncontainedLinksFilter();";
  protected final String TEXT_374 = NL + "\t\t\tfilter = ";
  protected final String TEXT_375 = ".ANY.negated();";
  protected final String TEXT_376 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void install(";
  protected final String TEXT_377 = " editingDomain) {" + NL + "\t\t\tif (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {" + NL + "\t\t\t\tthrow new IllegalStateException(\"Already listening to another editing domain\");" + NL + "\t\t\t}" + NL + "\t\t\tthis.editingDomain = editingDomain;" + NL + "\t\t\tthis.editingDomain.addResourceSetListener(this);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isInstalled() {" + NL + "\t\t\treturn editingDomain != null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void uninstall() {" + NL + "\t\t\tif (isInstalled()) {" + NL + "\t\t\t\teditingDomain.removeResourceSetListener(this);" + NL + "\t\t\t\teditingDomain = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isPrecommitOnly() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_378 = " transactionAboutToCommit(";
  protected final String TEXT_379 = " event) {" + NL + "\t\t\treturn getRefreshLinkNotationModelCommand();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_380 = " getFilter() {" + NL + "\t\t\treturn filter;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLinkNotationModel() {" + NL + "\t\t";
  protected final String TEXT_381 = " command = getRefreshLinkNotationModelCommand();" + NL + "\t\tif (command == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_382 = " domainModelEditDomain = ";
  protected final String TEXT_383 = ".getEditingDomain(";
  protected final String TEXT_384 = ".getElement());" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));" + NL + "\t}" + NL;
  protected final String TEXT_385 = NL;
  protected final String TEXT_386 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static class LinkDescriptor {" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_387 = " mySource;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_388 = " myDestination;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_389 = " myLinkElement;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_390 = " source, ";
  protected final String TEXT_391 = " destination, ";
  protected final String TEXT_392 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_393 = " source, ";
  protected final String TEXT_394 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_395 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_396 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_397 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_398 = " getRefreshLinkNotationModelCommand() {" + NL + "\t\t";
  protected final String TEXT_399 = "/*<LinkDescriptor>*/ semanticChildLinks = getSemanticChildLinks();" + NL + "\t\t";
  protected final String TEXT_400 = "/*<Edge>*/ notationalChildLinks = getNotationalChildLinks();" + NL + "\t\tfinal ";
  protected final String TEXT_401 = " semanticToNotationalTypeBasedLinks = new ";
  protected final String TEXT_402 = "();" + NL + "\t\tfinal ";
  protected final String TEXT_403 = "/*<EObject, List<Edge>>*/ semanticToNotationalFeatureBasedLinks = new ";
  protected final String TEXT_404 = "();" + NL + "\t\tfor(";
  protected final String TEXT_405 = " it = notationalChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_406 = " next = (";
  protected final String TEXT_407 = ") it.next();" + NL + "\t\t\t";
  protected final String TEXT_408 = " nextSemantic = next.getElement();" + NL + "\t\t\tif (nextSemantic != null) {" + NL + "\t\t\t\tsemanticToNotationalTypeBasedLinks.put(nextSemantic, next);" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_409 = " featureBasedLinksForSource = (";
  protected final String TEXT_410 = ") semanticToNotationalFeatureBasedLinks.get(next.getSource().getElement());" + NL + "\t\t\t\tif (featureBasedLinksForSource == null) {" + NL + "\t\t\t\t\tfeatureBasedLinksForSource = new ";
  protected final String TEXT_411 = "();" + NL + "\t\t\t\t\tsemanticToNotationalFeatureBasedLinks.put(next.getSource().getElement(), featureBasedLinksForSource);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tfeatureBasedLinksForSource.add(next);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_412 = " parentView = ";
  protected final String TEXT_413 = ";" + NL + "\t\t";
  protected final String TEXT_414 = " command = new ";
  protected final String TEXT_415 = "();" + NL + "\t\tfor(";
  protected final String TEXT_416 = " it = semanticChildLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\tLinkDescriptor next = (LinkDescriptor) it.next();" + NL + "\t\t\t";
  protected final String TEXT_417 = " nextLinkElement = next.getLinkElement();" + NL + "\t\t\t";
  protected final String TEXT_418 = " currentEdge;" + NL + "\t\t\tif (nextLinkElement != null) {" + NL + "\t\t\t\tcurrentEdge = (";
  protected final String TEXT_419 = ") semanticToNotationalTypeBasedLinks.remove(nextLinkElement);" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_420 = " featureBasedLinksForSource = (";
  protected final String TEXT_421 = ") semanticToNotationalFeatureBasedLinks.get(next.getSource());" + NL + "\t\t\t\tif (featureBasedLinksForSource == null || featureBasedLinksForSource.isEmpty()) {" + NL + "\t\t\t\t\tcurrentEdge = null;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tcurrentEdge = (";
  protected final String TEXT_422 = ") featureBasedLinksForSource.remove(0);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tint linkVisualID = next.getVisualID();" + NL + "\t\t\tif (currentEdge == null) {" + NL + "\t\t\t\tif (nextLinkElement == null || shouldCreateEdge(nextLinkElement)) {" + NL + "\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tboolean changedSource = currentEdge.getSource().getElement() != next.getSource();" + NL + "\t\t\t\tboolean changedTarget = currentEdge.getTarget().getElement() != next.getDestination();" + NL + "\t\t\t\tboolean changedVID = linkVisualID != ";
  protected final String TEXT_423 = ".getVisualID(currentEdge);" + NL + "\t\t\t\tif (!changedSource && !changedTarget) {" + NL + "\t\t\t\t\tif (changedVID) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_424 = " notationalCommand = getCreateNotationalEdgeCommand(parentView, next);" + NL + "\t\t\t\t\t\tif (notationalCommand != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_425 = "(parentView, notationalCommand, currentEdge));" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_426 = "(parentView, currentEdge));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tif (changedVID) {" + NL + "\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_427 = "(parentView, currentEdge));" + NL + "\t\t\t\t\t\tcommand.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));" + NL + "\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_428 = " newSourceView = findView(next.getSource());" + NL + "\t\t\t\t\t\tif (changedSource && newSourceView != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_429 = "(currentEdge, newSourceView));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_430 = " newTargetView = findView(next.getDestination());" + NL + "\t\t\t\t\t\tif (changedTarget && newTargetView != null) {" + NL + "\t\t\t\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_431 = "(currentEdge, newTargetView));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_432 = " it = semanticToNotationalTypeBasedLinks.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_433 = " obsoleteView = (";
  protected final String TEXT_434 = ") it.next();" + NL + "\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_435 = "(parentView, obsoleteView));" + NL + "\t\t}" + NL + "\t\tfor(";
  protected final String TEXT_436 = " it = semanticToNotationalFeatureBasedLinks.values().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_437 = " obsoleteViews = (";
  protected final String TEXT_438 = ") it.next();" + NL + "\t\t\tfor(";
  protected final String TEXT_439 = " obsoleteViewsIt = obsoleteViews.iterator(); obsoleteViewsIt.hasNext(); ) {" + NL + "\t\t\t\t";
  protected final String TEXT_440 = " obsoleteView = (";
  protected final String TEXT_441 = ") obsoleteViewsIt.next();" + NL + "\t\t\t\tcommand.appendIfCanExecute(new ";
  protected final String TEXT_442 = "(parentView, obsoleteView));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn command.getCommandList().isEmpty() ? null : command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds a notational element that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_443 = " findView(";
  protected final String TEXT_444 = " modelElement) {" + NL + "\t\tif (modelElement == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_445 = " editPart = (";
  protected final String TEXT_446 = ") getViewer().getEditPartRegistry().get(modelElement);" + NL + "\t\tif (editPart != null && editPart.getModel() instanceof ";
  protected final String TEXT_447 = ") {" + NL + "\t\t\treturn (";
  protected final String TEXT_448 = ") editPart.getModel();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_449 = " parentView = findView(modelElement.eContainer());" + NL + "\t\tif (parentView != null) {" + NL + "\t\t\t";
  protected final String TEXT_450 = " result = findNode(parentView, modelElement);" + NL + "\t\t\tif (result != null) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn findEdge(modelElement);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * Finds a notational node that corresponds to the given underlying domain element in a subtree starting from the given parent element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_451 = " findNode(";
  protected final String TEXT_452 = " parentView, ";
  protected final String TEXT_453 = " modelElement) {" + NL + "\t\tfor(";
  protected final String TEXT_454 = " it = parentView.getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_455 = " next = (";
  protected final String TEXT_456 = ") it.next();" + NL + "\t\t\tif (!next.isSetElement() || next.getElement() == parentView) {" + NL + "\t\t\t\t";
  protected final String TEXT_457 = " result = findNode(next, modelElement);" + NL + "\t\t\t\tif (result != null) {" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (next.isSetElement() && next.getElement() == modelElement) {" + NL + "\t\t\t\treturn next;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds a notational edge that corresponds to the given underlying domain element. " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_458 = " findEdge(";
  protected final String TEXT_459 = " modelElement) {" + NL + "\t\tfor(";
  protected final String TEXT_460 = " it = ";
  protected final String TEXT_461 = ".getEdges().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_462 = " next = (";
  protected final String TEXT_463 = ") it.next();" + NL + "\t\t\tif (next.isSetElement() && next.getElement() == modelElement) {" + NL + "\t\t\t\treturn next;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_464 = " getCreateNotationalEdgeCommand(";
  protected final String TEXT_465 = " parentView, LinkDescriptor linkDescriptor) {" + NL + "\t\t";
  protected final String TEXT_466 = " sourceView = findView(linkDescriptor.getSource());" + NL + "\t\t";
  protected final String TEXT_467 = " targetView = findView(linkDescriptor.getDestination());" + NL + "\t\tif (sourceView == null || targetView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_468 = " createdEdge = ";
  protected final String TEXT_469 = ".eINSTANCE.createEdge();" + NL + "\t\tswitch (linkDescriptor.getVisualID()) {";
  protected final String TEXT_470 = NL + "\t\tcase ";
  protected final String TEXT_471 = ".VISUAL_ID:" + NL + "\t\t\tif (linkDescriptor.getLinkElement() instanceof ";
  protected final String TEXT_472 = ") {" + NL + "\t\t\t\tcreatedEdge.setElement(linkDescriptor.getLinkElement());" + NL + "\t\t\t\t";
  protected final String TEXT_473 = ".decorateView(createdEdge);" + NL + "\t\t\t}" + NL + "\t\t\tbreak;";
  protected final String TEXT_474 = NL + "\t\tcase ";
  protected final String TEXT_475 = ".VISUAL_ID:" + NL + "\t\t\tif (linkDescriptor.getLinkElement() == null) {" + NL + "\t\t\t\tcreatedEdge.setElement(null);" + NL + "\t\t\t\t";
  protected final String TEXT_476 = ".decorateView(createdEdge);" + NL + "\t\t\t}" + NL + "\t\t\tbreak;";
  protected final String TEXT_477 = NL + "\t\t}" + NL + "\t\tif (createdEdge.getType() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn new ";
  protected final String TEXT_478 = "(parentView, createdEdge, sourceView, targetView);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_479 = " getSemanticChildLinks() {";
  protected final String TEXT_480 = NL;
  protected final String TEXT_481 = "\t";
  protected final String TEXT_482 = " result = new ";
  protected final String TEXT_483 = "();";
  protected final String TEXT_484 = NL + "\t";
  protected final String TEXT_485 = " modelObject = ";
  protected final String TEXT_486 = ";" + NL + "\t";
  protected final String TEXT_487 = " nextValue;";
  protected final String TEXT_488 = NL + "\tint linkVID;";
  protected final String TEXT_489 = NL + "\tfor(";
  protected final String TEXT_490 = " it = ((";
  protected final String TEXT_491 = ")modelObject).";
  protected final String TEXT_492 = "().iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_493 = ") it.next();";
  protected final String TEXT_494 = NL + "\tnextValue = ((";
  protected final String TEXT_495 = ")modelObject).";
  protected final String TEXT_496 = "();";
  protected final String TEXT_497 = NL + "\tlinkVID = ";
  protected final String TEXT_498 = ".INSTANCE.getLinkWithClassVisualID(nextValue);";
  protected final String TEXT_499 = NL + "\tswitch (linkVID) {";
  protected final String TEXT_500 = NL + "\tcase ";
  protected final String TEXT_501 = ".VISUAL_ID: {";
  protected final String TEXT_502 = NL + "\tif (";
  protected final String TEXT_503 = ".VISUAL_ID == linkVID) {";
  protected final String TEXT_504 = NL + "\t\t";
  protected final String TEXT_505 = " source = ((";
  protected final String TEXT_506 = ")nextValue).";
  protected final String TEXT_507 = "();";
  protected final String TEXT_508 = NL + "\t\t";
  protected final String TEXT_509 = " source = ";
  protected final String TEXT_510 = ";";
  protected final String TEXT_511 = NL + "\t\t";
  protected final String TEXT_512 = " target = ((";
  protected final String TEXT_513 = ")nextValue).";
  protected final String TEXT_514 = "();";
  protected final String TEXT_515 = NL + "\t\t";
  protected final String TEXT_516 = " target = ";
  protected final String TEXT_517 = ";";
  protected final String TEXT_518 = NL + "\t\tif (source != null && target != null) {" + NL + "\t\t\tresult.add(new LinkDescriptor(source, target, nextValue, linkVID));" + NL + "\t\t}";
  protected final String TEXT_519 = NL + "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_520 = NL + "\t}";
  protected final String TEXT_521 = NL + "\t}";
  protected final String TEXT_522 = NL + "\t}";
  protected final String TEXT_523 = NL + "\tfor(";
  protected final String TEXT_524 = " it = ((";
  protected final String TEXT_525 = ")modelObject).";
  protected final String TEXT_526 = "().iterator(); it.hasNext(); ) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_527 = ") it.next();";
  protected final String TEXT_528 = NL + "\tnextValue = ((";
  protected final String TEXT_529 = ")modelObject).";
  protected final String TEXT_530 = "();";
  protected final String TEXT_531 = NL + "\tif (nextValue != null) {";
  protected final String TEXT_532 = NL + "\t\tresult.add(new LinkDescriptor(modelObject, nextValue, null, ";
  protected final String TEXT_533 = ".VISUAL_ID));";
  protected final String TEXT_534 = NL + "\t}";
  protected final String TEXT_535 = NL + "\t}";
  protected final String TEXT_536 = NL + "\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_537 = " getNotationalChildLinks() {" + NL + "\t\t";
  protected final String TEXT_538 = " result = new ";
  protected final String TEXT_539 = "();" + NL + "\t\t";
  protected final String TEXT_540 = " allLinks = ";
  protected final String TEXT_541 = ".getEdges();" + NL + "\t\tfor(";
  protected final String TEXT_542 = " it = allLinks.iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_543 = " next = (";
  protected final String TEXT_544 = ") it.next();";
  protected final String TEXT_545 = NL + "\t\t\tif (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_546 = " source = next.getSource();" + NL + "\t\t\tif (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_547 = " target = next.getTarget();" + NL + "\t\t\tif (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {" + NL + "\t\t\t\tresult.add(next);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_548 = NL + "\t\t\tif (!next.isSetElement() || next.getElement() == null) {" + NL + "\t\t\t\tif (next.getSource() == ";
  protected final String TEXT_549 = ") {" + NL + "\t\t\t\t\tint linkVID = ";
  protected final String TEXT_550 = ".getVisualID(next);" + NL + "\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_551 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_552 = ".VISUAL_ID:";
  protected final String TEXT_553 = NL + "\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}";
  protected final String TEXT_554 = NL + "\t\t\t} else {";
  protected final String TEXT_555 = NL + "\t\t\t}";
  protected final String TEXT_556 = NL + "\t\t\tif (next.isSetElement() && next.getElement() != null) {";
  protected final String TEXT_557 = NL + "\t\t\t\tif (next.getElement().eContainer() == ";
  protected final String TEXT_558 = ") {" + NL + "\t\t\t\t\tint linkVID = ";
  protected final String TEXT_559 = ".getVisualID(next);" + NL + "\t\t\t\t\tswitch (linkVID) {";
  protected final String TEXT_560 = NL + "\t\t\t\t\tcase ";
  protected final String TEXT_561 = ".VISUAL_ID:";
  protected final String TEXT_562 = NL + "\t\t\t\t\t\tresult.add(next);" + NL + "\t\t\t\t\t\tbreak;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_563 = NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns whether a notational edge should be created for the given domain element. " + NL + "\t * The generated code always returns ";
  protected final String TEXT_564 = ". " + NL + "\t * User can change implementation of this method to handle a more sophisticated logic." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean shouldCreateEdge(EObject domainElement) {" + NL + "\t\treturn ";
  protected final String TEXT_565 = ";" + NL + "\t}";
  protected final String TEXT_566 = NL;
  protected final String TEXT_567 = NL;
  protected final String TEXT_568 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_569 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_570 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_571 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_572 = NL;
  protected final String TEXT_573 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_574 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_575 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_576 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_577 = NL;
  protected final String TEXT_578 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_579 = NL + "\t\t";
  protected final String TEXT_580 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_581 = ") ";
  protected final String TEXT_582 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_583 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_584 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_585 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_586 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_587 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_588 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_589 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_590 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_591 = "\t" + NL + "\t}";
  protected final String TEXT_592 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_593 = " createdFont;";
  protected final String TEXT_594 = "\t" + NL;
  protected final String TEXT_595 = NL;
  protected final String TEXT_596 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_597 = " style = (";
  protected final String TEXT_598 = ")  ";
  protected final String TEXT_599 = ".getStyle(";
  protected final String TEXT_600 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_601 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_602 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_603 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_604 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_605 = " style = (";
  protected final String TEXT_606 = ")  ";
  protected final String TEXT_607 = ".getStyle(";
  protected final String TEXT_608 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_609 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_610 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_611 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_612 = " createdBackgroundColor;" + NL;
  protected final String TEXT_613 = NL;
  protected final String TEXT_614 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_615 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_616 = " feature, ";
  protected final String TEXT_617 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_618 = "();";
  protected final String TEXT_619 = NL;
  protected final String TEXT_620 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_621 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_622 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_623 = NL;
  protected final String TEXT_624 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_625 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_626 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_627 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_628 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_629 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_630 = NL;
  protected final String TEXT_631 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_632 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_633 = NL;
  protected final String TEXT_634 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_635 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_636 = NL;
  protected final String TEXT_637 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_638 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_639 = NL;
  protected final String TEXT_640 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_641 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_642 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_643 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_644 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d667 47
a713 47
  protected final String TEXT_646 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_647 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_648 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_649 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_650 = "SourceCommand extends ";
  protected final String TEXT_651 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_652 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_653 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_654 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_655 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_656 = "SourceCommand(";
  protected final String TEXT_657 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_658 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_659 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_660 = "SourceCommand(";
  protected final String TEXT_661 = " edge, ";
  protected final String TEXT_662 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_663 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_664 = " domainModelEditDomain = ";
  protected final String TEXT_665 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_666 = " command = new ";
  protected final String TEXT_667 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_668 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew WrappingCommand(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_669 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_670 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_671 = NL + "\t\t\treturn false;";
  protected final String TEXT_672 = NL + "\t\t\t";
  protected final String TEXT_673 = " container = (";
  protected final String TEXT_674 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_675 = ".eINSTANCE.get";
  protected final String TEXT_676 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_677 = NL;
  protected final String TEXT_678 = NL + "\t\tif (";
  protected final String TEXT_679 = ".";
  protected final String TEXT_680 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_681 = NL + "\t\t}";
  protected final String TEXT_682 = NL + "\t\tif (";
  protected final String TEXT_683 = ".";
  protected final String TEXT_684 = "().size() >= ";
  protected final String TEXT_685 = ".eINSTANCE.get";
  protected final String TEXT_686 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_687 = NL + "\t\t}";
  protected final String TEXT_688 = NL;
  protected final String TEXT_689 = NL + "\t\tif (";
  protected final String TEXT_690 = ".";
  protected final String TEXT_691 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_692 = NL + "\t\t}";
d715 15
a729 15
  protected final String TEXT_694 = ".";
  protected final String TEXT_695 = "().size() >= ";
  protected final String TEXT_696 = ".eINSTANCE.get";
  protected final String TEXT_697 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_698 = NL + "\t\t}";
  protected final String TEXT_699 = NL;
  protected final String TEXT_700 = NL + "\t\t\tif(!";
  protected final String TEXT_701 = ".canCreateLink(";
  protected final String TEXT_702 = ", ";
  protected final String TEXT_703 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_704 = NL + "\t\t\treturn true;";
  protected final String TEXT_705 = NL;
  protected final String TEXT_706 = NL + "\t\tif (";
  protected final String TEXT_707 = ".";
  protected final String TEXT_708 = "() != null) {" + NL + "\t\t\t";
d731 6
a736 6
  protected final String TEXT_710 = NL + "\t\tif (";
  protected final String TEXT_711 = ".";
  protected final String TEXT_712 = "().size() >= ";
  protected final String TEXT_713 = ".eINSTANCE.get";
  protected final String TEXT_714 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_715 = NL + "\t\t}";
d738 29
a766 29
  protected final String TEXT_717 = NL + "\t\t\tif(!";
  protected final String TEXT_718 = ".canCreateLink(";
  protected final String TEXT_719 = ", ";
  protected final String TEXT_720 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_721 = NL + "\t\t\treturn true;";
  protected final String TEXT_722 = NL + "\t\t\treturn false;";
  protected final String TEXT_723 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_724 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_725 = " editingDomain = ";
  protected final String TEXT_726 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_727 = " result = new ";
  protected final String TEXT_728 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_729 = "(edge, newSource));";
  protected final String TEXT_730 = NL + "\t\t\t";
  protected final String TEXT_731 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_732 = ".eINSTANCE.get";
  protected final String TEXT_733 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_734 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_735 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_736 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_737 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_738 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), edge.getElement()));";
  protected final String TEXT_739 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_740 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), ";
  protected final String TEXT_741 = ".UNSET_VALUE));";
  protected final String TEXT_742 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_743 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_744 = ".eINSTANCE.get";
  protected final String TEXT_745 = "(), edge.getElement()));";
d768 8
a775 8
  protected final String TEXT_747 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_748 = ".eINSTANCE.get";
  protected final String TEXT_749 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_750 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_751 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_752 = ".eINSTANCE.get";
  protected final String TEXT_753 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_754 = ".UNSET_VALUE));";
d777 1
a777 1
  protected final String TEXT_756 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
d779 138
a916 138
  protected final String TEXT_758 = "(), edge.getElement()));";
  protected final String TEXT_759 = NL + "\t\t\t}";
  protected final String TEXT_760 = NL + "\t\t\tresult.append(";
  protected final String TEXT_761 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_762 = ".eINSTANCE.get";
  protected final String TEXT_763 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_764 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_765 = ".eINSTANCE.get";
  protected final String TEXT_766 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_767 = NL + "\t\t\tresult.append(";
  protected final String TEXT_768 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_769 = ".eINSTANCE.get";
  protected final String TEXT_770 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_771 = NL + "\t\t\tresult.append(";
  protected final String TEXT_772 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_773 = ".eINSTANCE.get";
  protected final String TEXT_774 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_775 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_776 = ".eINSTANCE.get";
  protected final String TEXT_777 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_778 = NL + "\t\t\tresult.append(";
  protected final String TEXT_779 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_780 = ".eINSTANCE.get";
  protected final String TEXT_781 = "(), ";
  protected final String TEXT_782 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_783 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_784 = ".eINSTANCE.get";
  protected final String TEXT_785 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_786 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_787 = NL;
  protected final String TEXT_788 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_789 = " getRelationshipContainer(";
  protected final String TEXT_790 = " element, ";
  protected final String TEXT_791 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_792 = NL;
  protected final String TEXT_793 = NL + "\t\t\tprivate ";
  protected final String TEXT_794 = " createDomainModelRemoveCommand(";
  protected final String TEXT_795 = " editingDomain) {";
  protected final String TEXT_796 = NL + "\t\t\t\t";
  protected final String TEXT_797 = " result = new ";
  protected final String TEXT_798 = "();";
  protected final String TEXT_799 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_800 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_801 = ".getElement().eContainer(), ";
  protected final String TEXT_802 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_803 = ".getElement()));";
  protected final String TEXT_804 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_805 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_806 = ".getElement().eContainer(), ";
  protected final String TEXT_807 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_808 = ".UNSET_VALUE));";
  protected final String TEXT_809 = NL + "\t\t\t\treturn ";
  protected final String TEXT_810 = ".INSTANCE;";
  protected final String TEXT_811 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_812 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_813 = ".getElement().eContainer(), ";
  protected final String TEXT_814 = ".eINSTANCE.get";
  protected final String TEXT_815 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_816 = ".getElement()));";
  protected final String TEXT_817 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_818 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_819 = ".getElement().eContainer(), ";
  protected final String TEXT_820 = ".eINSTANCE.get";
  protected final String TEXT_821 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_822 = ".UNSET_VALUE));";
  protected final String TEXT_823 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_824 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_825 = ".getElement(), ";
  protected final String TEXT_826 = ".eINSTANCE.get";
  protected final String TEXT_827 = "(), ";
  protected final String TEXT_828 = ".getSource().getElement()));";
  protected final String TEXT_829 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_830 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_831 = ".getElement(), ";
  protected final String TEXT_832 = ".eINSTANCE.get";
  protected final String TEXT_833 = "(), ";
  protected final String TEXT_834 = ".UNSET_VALUE));";
  protected final String TEXT_835 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_836 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_837 = ".getElement(), ";
  protected final String TEXT_838 = ".eINSTANCE.get";
  protected final String TEXT_839 = "(), ";
  protected final String TEXT_840 = ".getTarget().getElement()));";
  protected final String TEXT_841 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_842 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_843 = ".getElement(), ";
  protected final String TEXT_844 = ".eINSTANCE.get";
  protected final String TEXT_845 = "(), ";
  protected final String TEXT_846 = ".UNSET_VALUE));";
  protected final String TEXT_847 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_848 = NL + "\t\t\t\treturn ";
  protected final String TEXT_849 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_850 = ".getSource().getElement(), ";
  protected final String TEXT_851 = ".eINSTANCE.get";
  protected final String TEXT_852 = "(), ";
  protected final String TEXT_853 = ".getTarget().getElement());";
  protected final String TEXT_854 = NL + "\t\t\t\treturn ";
  protected final String TEXT_855 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_856 = ".getSource().getElement(), ";
  protected final String TEXT_857 = ".eINSTANCE.get";
  protected final String TEXT_858 = "(), ";
  protected final String TEXT_859 = ".UNSET_VALUE);";
  protected final String TEXT_860 = NL + "\t\t\t}";
  protected final String TEXT_861 = NL + "\t}" + NL;
  protected final String TEXT_862 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_863 = "StartCommand extends ";
  protected final String TEXT_864 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_865 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_866 = "StartCommand(";
  protected final String TEXT_867 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_868 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_869 = NL + "\t\t\treturn false;";
  protected final String TEXT_870 = NL + "\t\t\t";
  protected final String TEXT_871 = " container = (";
  protected final String TEXT_872 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_873 = ".eINSTANCE.get";
  protected final String TEXT_874 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_875 = NL;
  protected final String TEXT_876 = NL + "\t\tif (";
  protected final String TEXT_877 = ".";
  protected final String TEXT_878 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_879 = NL + "\t\t}";
  protected final String TEXT_880 = NL + "\t\tif (";
  protected final String TEXT_881 = ".";
  protected final String TEXT_882 = "().size() >= ";
  protected final String TEXT_883 = ".eINSTANCE.get";
  protected final String TEXT_884 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_885 = NL + "\t\t}";
  protected final String TEXT_886 = NL;
  protected final String TEXT_887 = NL + "\t\tif (";
  protected final String TEXT_888 = ".";
  protected final String TEXT_889 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_890 = NL + "\t\t}";
  protected final String TEXT_891 = NL + "\t\tif (";
  protected final String TEXT_892 = ".";
  protected final String TEXT_893 = "().size() >= ";
  protected final String TEXT_894 = ".eINSTANCE.get";
  protected final String TEXT_895 = ".getUpperBound()) {" + NL + "\t\t\t";
d918 77
a994 77
  protected final String TEXT_897 = NL;
  protected final String TEXT_898 = NL + "\t\t\tif(!";
  protected final String TEXT_899 = ".canCreateLink(";
  protected final String TEXT_900 = ", ";
  protected final String TEXT_901 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_902 = NL + "\t\t\treturn true;";
  protected final String TEXT_903 = NL;
  protected final String TEXT_904 = NL + "\t\tif (";
  protected final String TEXT_905 = ".";
  protected final String TEXT_906 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_907 = NL + "\t\t}";
  protected final String TEXT_908 = NL + "\t\tif (";
  protected final String TEXT_909 = ".";
  protected final String TEXT_910 = "().size() >= ";
  protected final String TEXT_911 = ".eINSTANCE.get";
  protected final String TEXT_912 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_913 = NL + "\t\t}";
  protected final String TEXT_914 = NL;
  protected final String TEXT_915 = NL + "\t\t\tif(!";
  protected final String TEXT_916 = ".canCreateLink(";
  protected final String TEXT_917 = ", ";
  protected final String TEXT_918 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_919 = NL + "\t\t\treturn true;";
  protected final String TEXT_920 = NL + "\t\t\treturn false;";
  protected final String TEXT_921 = NL + "\t\t}";
  protected final String TEXT_922 = NL;
  protected final String TEXT_923 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_924 = " getRelationshipContainer(";
  protected final String TEXT_925 = " element, ";
  protected final String TEXT_926 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_927 = NL + NL + "\t}";
  protected final String TEXT_928 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_929 = "TargetCommand extends ";
  protected final String TEXT_930 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_931 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_932 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_933 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_934 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_935 = "TargetCommand(";
  protected final String TEXT_936 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_937 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_938 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_939 = "TargetCommand(";
  protected final String TEXT_940 = " edge, ";
  protected final String TEXT_941 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_942 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_943 = " domainModelEditDomain = ";
  protected final String TEXT_944 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_945 = " command = new ";
  protected final String TEXT_946 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_947 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew WrappingCommand(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_948 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_949 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_950 = NL;
  protected final String TEXT_951 = NL + "\t\t\tif(!";
  protected final String TEXT_952 = ".canCreateLink(";
  protected final String TEXT_953 = ", ";
  protected final String TEXT_954 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_955 = NL + "\t\t\treturn true;";
  protected final String TEXT_956 = NL;
  protected final String TEXT_957 = NL + "\t\t\tif(!";
  protected final String TEXT_958 = ".canCreateLink(";
  protected final String TEXT_959 = ", ";
  protected final String TEXT_960 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_961 = NL + "\t\t\treturn true;";
  protected final String TEXT_962 = NL + "\t\t\treturn false;";
  protected final String TEXT_963 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_964 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_965 = " editingDomain = ";
  protected final String TEXT_966 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_967 = " result = new ";
  protected final String TEXT_968 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_969 = "(edge, newTarget));";
  protected final String TEXT_970 = NL + "\t\t\tresult.append(";
  protected final String TEXT_971 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_972 = ".eINSTANCE.get";
  protected final String TEXT_973 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
d997 9
a1005 9
  protected final String TEXT_976 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_977 = NL + "\t\t\tresult.append(";
  protected final String TEXT_978 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_979 = ".eINSTANCE.get";
  protected final String TEXT_980 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_981 = NL + "\t\t\tresult.append(";
  protected final String TEXT_982 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_983 = ".eINSTANCE.get";
  protected final String TEXT_984 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
d1008 139
a1146 139
  protected final String TEXT_987 = "(), newTarget.getElement()));";
  protected final String TEXT_988 = NL + "\t\t\tresult.append(";
  protected final String TEXT_989 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_990 = ".eINSTANCE.get";
  protected final String TEXT_991 = "(), newTarget.getElement()));";
  protected final String TEXT_992 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_993 = NL;
  protected final String TEXT_994 = NL + "\t\t\tprivate ";
  protected final String TEXT_995 = " createDomainModelRemoveCommand(";
  protected final String TEXT_996 = " editingDomain) {";
  protected final String TEXT_997 = NL + "\t\t\t\t";
  protected final String TEXT_998 = " result = new ";
  protected final String TEXT_999 = "();";
  protected final String TEXT_1000 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1001 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1002 = ".getElement().eContainer(), ";
  protected final String TEXT_1003 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1004 = ".getElement()));";
  protected final String TEXT_1005 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1006 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1007 = ".getElement().eContainer(), ";
  protected final String TEXT_1008 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_1009 = ".UNSET_VALUE));";
  protected final String TEXT_1010 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1011 = ".INSTANCE;";
  protected final String TEXT_1012 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1013 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1014 = ".getElement().eContainer(), ";
  protected final String TEXT_1015 = ".eINSTANCE.get";
  protected final String TEXT_1016 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1017 = ".getElement()));";
  protected final String TEXT_1018 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1019 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1020 = ".getElement().eContainer(), ";
  protected final String TEXT_1021 = ".eINSTANCE.get";
  protected final String TEXT_1022 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_1023 = ".UNSET_VALUE));";
  protected final String TEXT_1024 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1025 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1026 = ".getElement(), ";
  protected final String TEXT_1027 = ".eINSTANCE.get";
  protected final String TEXT_1028 = "(), ";
  protected final String TEXT_1029 = ".getSource().getElement()));";
  protected final String TEXT_1030 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1031 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1032 = ".getElement(), ";
  protected final String TEXT_1033 = ".eINSTANCE.get";
  protected final String TEXT_1034 = "(), ";
  protected final String TEXT_1035 = ".UNSET_VALUE));";
  protected final String TEXT_1036 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1037 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1038 = ".getElement(), ";
  protected final String TEXT_1039 = ".eINSTANCE.get";
  protected final String TEXT_1040 = "(), ";
  protected final String TEXT_1041 = ".getTarget().getElement()));";
  protected final String TEXT_1042 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_1043 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1044 = ".getElement(), ";
  protected final String TEXT_1045 = ".eINSTANCE.get";
  protected final String TEXT_1046 = "(), ";
  protected final String TEXT_1047 = ".UNSET_VALUE));";
  protected final String TEXT_1048 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_1049 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1050 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1051 = ".getSource().getElement(), ";
  protected final String TEXT_1052 = ".eINSTANCE.get";
  protected final String TEXT_1053 = "(), ";
  protected final String TEXT_1054 = ".getTarget().getElement());";
  protected final String TEXT_1055 = NL + "\t\t\t\treturn ";
  protected final String TEXT_1056 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_1057 = ".getSource().getElement(), ";
  protected final String TEXT_1058 = ".eINSTANCE.get";
  protected final String TEXT_1059 = "(), ";
  protected final String TEXT_1060 = ".UNSET_VALUE);";
  protected final String TEXT_1061 = NL + "\t\t\t}";
  protected final String TEXT_1062 = NL + "\t}" + NL;
  protected final String TEXT_1063 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_1064 = "Command extends ";
  protected final String TEXT_1065 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1066 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1067 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_1068 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_1069 = "Command(";
  protected final String TEXT_1070 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_1071 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_1072 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_1073 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_1074 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1075 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_1076 = ".eINSTANCE.createEdge();";
  protected final String TEXT_1077 = NL + "\t\t\t";
  protected final String TEXT_1078 = " createdDomainElement = ";
  protected final String TEXT_1079 = ".eINSTANCE.create";
  protected final String TEXT_1080 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_1081 = NL + "\t\t\t";
  protected final String TEXT_1082 = ".";
  protected final String TEXT_1083 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_1084 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_1085 = NL + "\t\t\t";
  protected final String TEXT_1086 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_1087 = " domainModelEditDomain = ";
  protected final String TEXT_1088 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_1089 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_1090 = NL + "\t\t\t";
  protected final String TEXT_1091 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_1092 = ".eINSTANCE.get";
  protected final String TEXT_1093 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1094 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1095 = ".eINSTANCE.get";
  protected final String TEXT_1096 = "(), createdDomainElement));";
  protected final String TEXT_1097 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1098 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_1099 = ".eINSTANCE.get";
  protected final String TEXT_1100 = "(), createdDomainElement));";
  protected final String TEXT_1101 = NL;
  protected final String TEXT_1102 = NL + "\t\tif (";
  protected final String TEXT_1103 = ".";
  protected final String TEXT_1104 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_1105 = NL + "\t\t}";
  protected final String TEXT_1106 = NL + "\t\tif (";
  protected final String TEXT_1107 = ".";
  protected final String TEXT_1108 = "().size() >= ";
  protected final String TEXT_1109 = ".eINSTANCE.get";
  protected final String TEXT_1110 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_1111 = NL + "\t\t}";
  protected final String TEXT_1112 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1113 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_1114 = ".eINSTANCE.get";
  protected final String TEXT_1115 = "(), source.getElement()));";
  protected final String TEXT_1116 = NL;
  protected final String TEXT_1117 = NL + "\t\tif (";
  protected final String TEXT_1118 = ".";
  protected final String TEXT_1119 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_1120 = NL + "\t\t}";
  protected final String TEXT_1121 = NL + "\t\tif (";
  protected final String TEXT_1122 = ".";
  protected final String TEXT_1123 = "().size() >= ";
  protected final String TEXT_1124 = ".eINSTANCE.get";
  protected final String TEXT_1125 = ".getUpperBound()) {" + NL + "\t\t\t";
d1148 2
a1149 2
  protected final String TEXT_1127 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_1128 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
d1151 4
a1154 4
  protected final String TEXT_1130 = "(), target.getElement()));";
  protected final String TEXT_1131 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_1132 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_1133 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
d1156 24
a1179 19
  protected final String TEXT_1135 = "(), target.getElement());";
  protected final String TEXT_1136 = NL + "\t\t}" + NL;
  protected final String TEXT_1137 = NL;
  protected final String TEXT_1138 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_1139 = " getRelationshipContainer(";
  protected final String TEXT_1140 = " element, ";
  protected final String TEXT_1141 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_1142 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1143 = NL;
  protected final String TEXT_1144 = NL + "\t\t\tif(!";
  protected final String TEXT_1145 = ".canCreateLink(";
  protected final String TEXT_1146 = ", ";
  protected final String TEXT_1147 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_1148 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_1149 = NL;
  protected final String TEXT_1150 = NL;
  protected final String TEXT_1151 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_1152 = NL + "}";
  protected final String TEXT_1153 = NL;
d1194 76
d1422 1
a1422 1
    stringBuffer.append(TEXT_1);
d1427 1
a1427 1
    stringBuffer.append(TEXT_2);
d1429 1
a1429 1
    stringBuffer.append(TEXT_3);
d1431 1
a1431 1
    stringBuffer.append(TEXT_4);
d1436 1
a1436 1
    stringBuffer.append(TEXT_5);
d1438 1
a1438 1
    stringBuffer.append(TEXT_6);
d1440 1
a1440 1
    stringBuffer.append(TEXT_7);
d1442 1
a1442 1
    stringBuffer.append(TEXT_8);
d1445 2
a1446 2
    stringBuffer.append(TEXT_9);
    stringBuffer.append(TEXT_10);
d1448 1
a1448 1
    stringBuffer.append(TEXT_11);
d1450 1
a1450 1
    stringBuffer.append(TEXT_12);
d1452 1
a1452 1
    stringBuffer.append(TEXT_13);
d1454 1
a1454 1
    stringBuffer.append(TEXT_14);
d1456 1
a1456 1
    stringBuffer.append(TEXT_15);
d1458 1
a1458 1
    stringBuffer.append(TEXT_16);
d1460 3
a1462 3
    stringBuffer.append(TEXT_17);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(TEXT_19);
d1464 1
a1464 1
    stringBuffer.append(TEXT_20);
d1466 1
a1466 1
    stringBuffer.append(TEXT_21);
d1468 1
a1468 1
    stringBuffer.append(TEXT_22);
d1470 3
a1472 3
    stringBuffer.append(TEXT_23);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(TEXT_25);
d1474 1
a1474 1
    stringBuffer.append(TEXT_26);
d1476 1
a1476 1
    stringBuffer.append(TEXT_27);
d1478 1
a1478 1
    stringBuffer.append(TEXT_28);
d1480 1
a1480 1
    stringBuffer.append(TEXT_29);
d1482 1
a1482 1
    stringBuffer.append(TEXT_30);
d1484 1
a1484 1
    stringBuffer.append(TEXT_31);
d1486 1
a1486 1
    stringBuffer.append(TEXT_32);
d1488 1
a1488 1
    stringBuffer.append(TEXT_33);
d1490 1
a1490 1
    stringBuffer.append(TEXT_34);
d1492 1
a1492 1
    stringBuffer.append(TEXT_35);
d1500 1
a1500 1
    stringBuffer.append(TEXT_36);
d1502 1
a1502 1
    stringBuffer.append(TEXT_37);
d1504 1
a1504 1
    stringBuffer.append(TEXT_38);
d1508 1
a1508 1
    stringBuffer.append(TEXT_39);
d1510 1
a1510 1
    stringBuffer.append(TEXT_40);
d1512 1
a1512 1
    stringBuffer.append(TEXT_41);
d1514 1
a1514 1
    stringBuffer.append(TEXT_42);
d1518 1
a1518 1
    stringBuffer.append(TEXT_43);
d1520 1
a1520 1
    stringBuffer.append(TEXT_44);
d1522 1
a1522 1
    stringBuffer.append(TEXT_45);
d1524 1
a1524 1
    stringBuffer.append(TEXT_46);
d1526 1
a1526 1
    stringBuffer.append(TEXT_47);
d1533 1
a1533 1
    stringBuffer.append(TEXT_48);
d1535 1
a1535 1
    stringBuffer.append(TEXT_49);
d1537 1
a1537 1
    stringBuffer.append(TEXT_50);
d1539 1
a1539 1
    stringBuffer.append(TEXT_51);
d1543 1
a1543 1
    stringBuffer.append(TEXT_52);
d1545 1
a1545 1
    stringBuffer.append(TEXT_53);
d1547 1
a1547 1
    stringBuffer.append(TEXT_54);
d1549 1
a1549 1
    stringBuffer.append(TEXT_55);
d1551 1
a1551 1
    stringBuffer.append(TEXT_56);
d1555 1
a1555 1
    stringBuffer.append(TEXT_57);
d1560 1
a1560 1
    stringBuffer.append(TEXT_58);
d1562 1
a1562 1
    stringBuffer.append(TEXT_59);
d1564 1
a1564 1
    stringBuffer.append(TEXT_60);
d1566 1
a1566 1
    stringBuffer.append(TEXT_61);
d1570 1
a1570 1
    stringBuffer.append(TEXT_62);
d1572 1
a1572 1
    stringBuffer.append(TEXT_63);
d1574 1
a1574 1
    stringBuffer.append(TEXT_64);
d1576 1
a1576 1
    stringBuffer.append(TEXT_65);
d1578 1
a1578 1
    stringBuffer.append(TEXT_66);
d1583 1
a1583 1
    stringBuffer.append(TEXT_67);
d1587 1
a1587 1
    stringBuffer.append(TEXT_68);
d1589 1
a1589 1
    stringBuffer.append(TEXT_69);
d1591 1
a1591 1
    stringBuffer.append(TEXT_70);
d1593 1
a1593 1
    stringBuffer.append(TEXT_71);
d1595 1
a1595 1
    stringBuffer.append(TEXT_72);
d1597 1
a1597 1
    stringBuffer.append(TEXT_73);
d1599 1
a1599 1
    stringBuffer.append(TEXT_74);
d1601 1
a1601 1
    stringBuffer.append(TEXT_75);
d1603 1
a1603 1
    stringBuffer.append(TEXT_76);
d1605 1
a1605 1
    stringBuffer.append(TEXT_77);
d1607 1
a1607 1
    stringBuffer.append(TEXT_78);
d1609 1
a1609 1
    stringBuffer.append(TEXT_79);
d1611 1
a1611 1
    stringBuffer.append(TEXT_80);
d1613 1
a1613 1
    stringBuffer.append(TEXT_81);
d1615 1
a1615 1
    stringBuffer.append(TEXT_82);
d1617 1
a1617 1
    stringBuffer.append(TEXT_83);
d1619 1
a1619 1
    stringBuffer.append(TEXT_84);
d1621 1
a1621 1
    stringBuffer.append(TEXT_85);
d1623 1
a1623 1
    stringBuffer.append(TEXT_86);
d1625 1
a1625 1
    stringBuffer.append(TEXT_87);
d1627 1
a1627 1
    stringBuffer.append(TEXT_88);
d1629 1
a1629 1
    stringBuffer.append(TEXT_89);
d1633 1
a1633 1
    stringBuffer.append(TEXT_90);
d1635 1
a1635 1
    stringBuffer.append(TEXT_91);
d1639 1
a1639 1
    stringBuffer.append(TEXT_92);
d1641 1
a1641 1
    stringBuffer.append(TEXT_93);
d1643 1
a1643 1
    stringBuffer.append(TEXT_94);
d1645 1
a1645 1
    stringBuffer.append(TEXT_95);
d1647 1
a1647 1
    stringBuffer.append(TEXT_96);
d1649 1
a1649 1
    stringBuffer.append(TEXT_97);
d1651 1
a1651 1
    stringBuffer.append(TEXT_98);
d1653 1
a1653 1
    stringBuffer.append(TEXT_99);
d1655 1
a1655 1
    stringBuffer.append(TEXT_100);
d1657 1
a1657 1
    stringBuffer.append(TEXT_101);
d1659 1
a1659 1
    stringBuffer.append(TEXT_102);
d1683 1
a1683 1
    stringBuffer.append(TEXT_103);
d1685 1
a1685 1
    stringBuffer.append(TEXT_104);
d1688 1
a1688 1
    stringBuffer.append(TEXT_105);
d1692 1
a1692 1
    stringBuffer.append(TEXT_106);
d1694 1
a1694 1
    stringBuffer.append(TEXT_107);
d1696 1
a1696 1
    stringBuffer.append(TEXT_108);
d1700 1
a1700 1
    stringBuffer.append(TEXT_109);
d1702 1
a1702 1
    stringBuffer.append(TEXT_110);
d1704 1
a1704 1
    stringBuffer.append(TEXT_111);
d1708 1
a1708 1
    stringBuffer.append(TEXT_112);
d1710 1
a1710 1
    stringBuffer.append(TEXT_113);
d1714 1
a1714 1
    stringBuffer.append(TEXT_114);
d1716 1
a1716 1
    stringBuffer.append(TEXT_115);
d1718 1
a1718 1
    stringBuffer.append(TEXT_116);
d1720 1
a1720 1
    stringBuffer.append(TEXT_117);
d1722 1
a1722 1
    stringBuffer.append(TEXT_118);
d1724 1
a1724 1
    stringBuffer.append(TEXT_119);
d1726 1
a1726 1
    stringBuffer.append(TEXT_120);
d1728 1
a1728 1
    stringBuffer.append(TEXT_121);
d1730 1
a1730 1
    stringBuffer.append(TEXT_122);
d1732 1
a1732 1
    stringBuffer.append(TEXT_123);
d1734 1
a1734 1
    stringBuffer.append(TEXT_124);
d1760 1
a1760 1
    stringBuffer.append(TEXT_125);
d1762 1
a1762 1
    stringBuffer.append(TEXT_126);
d1765 1
a1765 1
    stringBuffer.append(TEXT_127);
d1769 1
a1769 1
    stringBuffer.append(TEXT_128);
d1771 1
a1771 1
    stringBuffer.append(TEXT_129);
d1773 1
a1773 1
    stringBuffer.append(TEXT_130);
d1777 1
a1777 1
    stringBuffer.append(TEXT_131);
d1779 1
a1779 1
    stringBuffer.append(TEXT_132);
d1781 1
a1781 1
    stringBuffer.append(TEXT_133);
d1783 1
a1783 1
    stringBuffer.append(TEXT_134);
d1785 1
a1785 1
    stringBuffer.append(TEXT_135);
d1787 1
a1787 1
    stringBuffer.append(TEXT_136);
d1789 1
a1789 1
    stringBuffer.append(TEXT_137);
d1791 1
a1791 1
    stringBuffer.append(TEXT_138);
d1793 1
a1793 1
    stringBuffer.append(TEXT_139);
d1819 1
a1819 1
    stringBuffer.append(TEXT_140);
d1821 1
a1821 1
    stringBuffer.append(TEXT_141);
d1824 1
a1824 1
    stringBuffer.append(TEXT_142);
d1828 1
a1828 1
    stringBuffer.append(TEXT_143);
d1830 1
a1830 1
    stringBuffer.append(TEXT_144);
d1832 1
a1832 1
    stringBuffer.append(TEXT_145);
d1834 1
a1834 1
    stringBuffer.append(TEXT_146);
d1836 1
a1836 1
    stringBuffer.append(TEXT_147);
d1838 1
a1838 1
    stringBuffer.append(TEXT_148);
d1840 1
a1840 1
    stringBuffer.append(TEXT_149);
d1842 1
a1842 1
    stringBuffer.append(TEXT_150);
d1844 1
a1844 1
    stringBuffer.append(TEXT_151);
d1846 1
a1846 1
    stringBuffer.append(TEXT_152);
d1848 1
a1848 1
    stringBuffer.append(TEXT_153);
d1850 1
a1850 1
    stringBuffer.append(TEXT_154);
d1852 1
a1852 1
    stringBuffer.append(TEXT_155);
d1876 1
a1876 1
    stringBuffer.append(TEXT_156);
d1878 1
a1878 1
    stringBuffer.append(TEXT_157);
d1881 1
a1881 1
    stringBuffer.append(TEXT_158);
d1885 1
a1885 1
    stringBuffer.append(TEXT_159);
d1887 1
a1887 1
    stringBuffer.append(TEXT_160);
d1889 1
a1889 1
    stringBuffer.append(TEXT_161);
d1891 1
a1891 1
    stringBuffer.append(TEXT_162);
d1893 1
a1893 1
    stringBuffer.append(TEXT_163);
d1897 1
a1897 1
    stringBuffer.append(TEXT_164);
d1901 1
a1901 1
    stringBuffer.append(TEXT_165);
d1903 1
a1903 1
    stringBuffer.append(TEXT_166);
d1905 1
a1905 1
    stringBuffer.append(TEXT_167);
d1907 1
a1907 1
    stringBuffer.append(TEXT_168);
d1909 1
a1909 1
    stringBuffer.append(TEXT_169);
d1911 1
a1911 1
    stringBuffer.append(TEXT_170);
d1913 1
a1913 1
    stringBuffer.append(TEXT_171);
d1915 1
a1915 1
    stringBuffer.append(TEXT_172);
d1925 1
a1925 1
    stringBuffer.append(TEXT_173);
d1927 1
a1927 1
    stringBuffer.append(TEXT_174);
d1929 1
a1929 1
    stringBuffer.append(TEXT_175);
d1931 1
a1931 1
    stringBuffer.append(TEXT_176);
d1933 1
a1933 1
    stringBuffer.append(TEXT_177);
d1935 1
a1935 1
    stringBuffer.append(TEXT_178);
d1939 1
a1939 1
    stringBuffer.append(TEXT_179);
d1941 1
a1941 1
    stringBuffer.append(TEXT_180);
d1943 1
a1943 1
    stringBuffer.append(TEXT_181);
d1945 1
a1945 1
    stringBuffer.append(TEXT_182);
d1947 1
a1947 1
    stringBuffer.append(TEXT_183);
d1949 1
a1949 1
    stringBuffer.append(TEXT_184);
d1951 1
a1951 1
    stringBuffer.append(TEXT_185);
d1953 1
a1953 1
    stringBuffer.append(TEXT_186);
d1955 1
a1955 1
    stringBuffer.append(TEXT_187);
d1957 1
a1957 1
    stringBuffer.append(TEXT_188);
d1959 1
a1959 1
    stringBuffer.append(TEXT_189);
d1961 1
a1961 1
    stringBuffer.append(TEXT_190);
d1963 1
a1963 1
    stringBuffer.append(TEXT_191);
d1965 1
a1965 1
    stringBuffer.append(TEXT_192);
d1967 1
a1967 1
    stringBuffer.append(TEXT_193);
d1969 1
a1969 1
    stringBuffer.append(TEXT_194);
d1971 1
a1971 1
    stringBuffer.append(TEXT_195);
d1973 1
a1973 1
    stringBuffer.append(TEXT_196);
d1975 1
a1975 1
    stringBuffer.append(TEXT_197);
d1977 1
a1977 1
    stringBuffer.append(TEXT_198);
d1979 1
a1979 1
    stringBuffer.append(TEXT_199);
d1981 1
a1981 1
    stringBuffer.append(TEXT_200);
d1983 1
a1983 1
    stringBuffer.append(TEXT_201);
d1985 1
a1985 1
    stringBuffer.append(TEXT_202);
d1990 1
a1990 1
    stringBuffer.append(TEXT_203);
d1992 1
a1992 1
    stringBuffer.append(TEXT_204);
d1994 1
a1994 1
    stringBuffer.append(TEXT_205);
d1996 1
a1996 1
    stringBuffer.append(TEXT_206);
d1998 1
a1998 1
    stringBuffer.append(TEXT_207);
d2000 1
a2000 1
    stringBuffer.append(TEXT_208);
d2002 1
a2002 1
    stringBuffer.append(TEXT_209);
d2004 1
a2004 1
    stringBuffer.append(TEXT_210);
d2006 1
a2006 1
    stringBuffer.append(TEXT_211);
d2008 1
a2008 1
    stringBuffer.append(TEXT_212);
d2010 1
a2010 1
    stringBuffer.append(TEXT_213);
d2014 1
a2014 1
    stringBuffer.append(TEXT_214);
d2016 1
a2016 1
    stringBuffer.append(TEXT_215);
d2024 1
a2024 1
    stringBuffer.append(TEXT_216);
d2026 1
a2026 1
    stringBuffer.append(TEXT_217);
d2028 1
a2028 1
    stringBuffer.append(TEXT_218);
d2030 1
a2030 1
    stringBuffer.append(TEXT_219);
d2032 1
a2032 1
    stringBuffer.append(TEXT_220);
d2041 1
a2041 1
    stringBuffer.append(TEXT_221);
d2043 1
a2043 1
    stringBuffer.append(TEXT_222);
d2045 1
a2045 1
    stringBuffer.append(TEXT_223);
d2047 1
a2047 1
    stringBuffer.append(TEXT_224);
d2049 1
a2049 1
    stringBuffer.append(TEXT_225);
d2053 1
a2053 1
    stringBuffer.append(TEXT_226);
d2061 1
a2061 1
    stringBuffer.append(TEXT_227);
d2063 1
a2063 1
    stringBuffer.append(TEXT_228);
d2065 1
a2065 1
    stringBuffer.append(TEXT_229);
d2067 1
a2067 1
    stringBuffer.append(TEXT_230);
d2069 1
a2069 1
    stringBuffer.append(TEXT_231);
d2073 1
a2073 1
    stringBuffer.append(TEXT_232);
d2077 1
a2077 1
    stringBuffer.append(TEXT_233);
d2079 1
a2079 1
    stringBuffer.append(TEXT_234);
d2091 1
a2091 1
    stringBuffer.append(TEXT_235);
d2093 1
a2093 1
    stringBuffer.append(TEXT_236);
d2095 1
a2095 1
    stringBuffer.append(TEXT_237);
d2097 1
a2097 1
    stringBuffer.append(TEXT_238);
d2099 1
a2099 1
    stringBuffer.append(TEXT_239);
d2101 1
a2101 1
    stringBuffer.append(TEXT_240);
d2103 1
a2103 1
    stringBuffer.append(TEXT_241);
d2107 1
a2107 1
    stringBuffer.append(TEXT_242);
d2109 1
a2109 1
    stringBuffer.append(TEXT_243);
d2111 1
a2111 1
    stringBuffer.append(TEXT_244);
d2113 1
a2113 1
    stringBuffer.append(TEXT_245);
d2115 1
a2115 1
    stringBuffer.append(TEXT_246);
d2117 1
a2117 1
    stringBuffer.append(TEXT_247);
d2119 1
a2119 1
    stringBuffer.append(TEXT_248);
d2121 1
a2121 1
    stringBuffer.append(TEXT_249);
d2123 1
a2123 1
    stringBuffer.append(TEXT_250);
d2125 1
a2125 1
    stringBuffer.append(TEXT_251);
d2127 1
a2127 1
    stringBuffer.append(TEXT_252);
d2129 1
a2129 1
    stringBuffer.append(TEXT_253);
d2137 1
a2137 1
    stringBuffer.append(TEXT_254);
d2139 1
a2139 1
    stringBuffer.append(TEXT_255);
d2143 1
a2143 1
    stringBuffer.append(TEXT_256);
d2147 1
a2147 1
    stringBuffer.append(TEXT_257);
d2149 1
a2149 1
    stringBuffer.append(TEXT_258);
d2154 1
a2154 1
    stringBuffer.append(TEXT_259);
d2156 1
a2156 1
    stringBuffer.append(TEXT_260);
d2160 1
a2160 1
    stringBuffer.append(TEXT_261);
d2162 1
a2162 1
    stringBuffer.append(TEXT_262);
d2164 1
a2164 1
    stringBuffer.append(TEXT_263);
d2166 1
a2166 1
    stringBuffer.append(TEXT_264);
d2168 1
a2168 1
    stringBuffer.append(TEXT_265);
d2173 1
a2173 1
    stringBuffer.append(TEXT_266);
d2175 1
a2175 1
    stringBuffer.append(TEXT_267);
d2179 1
a2179 1
    stringBuffer.append(TEXT_268);
d2181 1
a2181 1
    stringBuffer.append(TEXT_269);
d2183 1
a2183 1
    stringBuffer.append(TEXT_270);
d2188 1
a2188 1
    stringBuffer.append(TEXT_271);
d2192 1
a2192 1
    stringBuffer.append(TEXT_272);
d2194 1
a2194 1
    stringBuffer.append(TEXT_273);
d2198 1
a2198 1
    stringBuffer.append(TEXT_274);
d2200 1
a2200 1
    stringBuffer.append(TEXT_275);
d2202 1
a2202 1
    stringBuffer.append(TEXT_276);
d2207 1
a2207 1
    stringBuffer.append(TEXT_277);
d2211 1
a2211 1
    stringBuffer.append(TEXT_278);
d2218 1
a2218 1
    stringBuffer.append(TEXT_279);
d2220 1
a2220 1
    stringBuffer.append(TEXT_280);
d2222 1
a2222 1
    stringBuffer.append(TEXT_281);
d2224 1
a2224 1
    stringBuffer.append(TEXT_282);
d2226 1
a2226 1
    stringBuffer.append(TEXT_283);
d2230 1
a2230 1
    stringBuffer.append(TEXT_284);
d2232 1
a2232 1
    stringBuffer.append(TEXT_285);
d2234 1
a2234 1
    stringBuffer.append(TEXT_286);
d2236 1
a2236 1
    stringBuffer.append(TEXT_287);
d2238 1
a2238 1
    stringBuffer.append(TEXT_288);
d2240 1
a2240 1
    stringBuffer.append(TEXT_289);
d2242 1
a2242 1
    stringBuffer.append(TEXT_290);
d2244 1
a2244 1
    stringBuffer.append(TEXT_291);
d2246 1
a2246 1
    stringBuffer.append(TEXT_292);
d2248 1
a2248 1
    stringBuffer.append(TEXT_293);
d2250 1
a2250 1
    stringBuffer.append(TEXT_294);
d2252 1
a2252 1
    stringBuffer.append(TEXT_295);
d2254 1
a2254 1
    stringBuffer.append(TEXT_296);
d2256 1
a2256 1
    stringBuffer.append(TEXT_297);
d2258 1
a2258 1
    stringBuffer.append(TEXT_298);
d2260 1
a2260 1
    stringBuffer.append(TEXT_299);
d2262 1
a2262 1
    stringBuffer.append(TEXT_300);
d2264 1
a2264 1
    stringBuffer.append(TEXT_301);
d2266 1
a2266 1
    stringBuffer.append(TEXT_302);
d2268 1
a2268 1
    stringBuffer.append(TEXT_303);
d2270 1
a2270 1
    stringBuffer.append(TEXT_304);
d2272 1
a2272 1
    stringBuffer.append(TEXT_305);
d2274 1
a2274 1
    stringBuffer.append(TEXT_306);
d2278 1
a2278 1
    stringBuffer.append(TEXT_307);
d2282 1
a2282 1
    stringBuffer.append(TEXT_308);
d2286 1
a2286 1
    stringBuffer.append(TEXT_309);
d2290 1
a2290 1
    stringBuffer.append(TEXT_310);
a2294 1
	final String _getSemanticElementCode = "getDiagramNode().getElement()";
d2297 1
a2297 1
    stringBuffer.append(TEXT_311);
d2301 1
a2301 1
    stringBuffer.append(TEXT_312);
d2303 1
a2303 1
    stringBuffer.append(TEXT_313);
d2305 1
a2305 1
    stringBuffer.append(TEXT_314);
d2307 1
a2307 1
    stringBuffer.append(TEXT_315);
d2309 1
a2309 1
    stringBuffer.append(TEXT_316);
d2311 1
a2311 1
    stringBuffer.append(TEXT_317);
d2313 1
a2313 1
    stringBuffer.append(TEXT_318);
d2326 1
a2326 1
    stringBuffer.append(TEXT_319);
d2328 1
a2328 1
    stringBuffer.append(TEXT_320);
d2330 1
a2330 1
    stringBuffer.append(TEXT_321);
d2332 1
a2332 1
    stringBuffer.append(TEXT_322);
d2337 1
a2337 1
    stringBuffer.append(TEXT_323);
d2339 1
a2339 1
    stringBuffer.append(TEXT_324);
d2341 1
a2341 1
    stringBuffer.append(TEXT_325);
d2343 1
a2343 1
    stringBuffer.append(TEXT_326);
d2345 1
a2345 1
    stringBuffer.append(TEXT_327);
d2347 1
a2347 1
    stringBuffer.append(TEXT_328);
d2349 1
a2349 1
    stringBuffer.append(TEXT_329);
d2351 1
a2351 1
    stringBuffer.append(TEXT_330);
d2353 1
a2353 1
    stringBuffer.append(TEXT_331);
d2355 1
a2355 1
    stringBuffer.append(TEXT_332);
d2359 1
a2359 1
    stringBuffer.append(TEXT_333);
d2372 1
a2372 1
    stringBuffer.append(TEXT_334);
d2386 1
a2386 1
    stringBuffer.append(TEXT_335);
d2388 1
a2388 1
    stringBuffer.append(TEXT_336);
d2390 1
a2390 1
    stringBuffer.append(TEXT_337);
d2392 1
a2392 1
    stringBuffer.append(TEXT_338);
d2396 1
a2396 1
    stringBuffer.append(TEXT_339);
d2398 1
a2398 1
    stringBuffer.append(TEXT_340);
d2400 1
a2400 1
    stringBuffer.append(TEXT_341);
d2402 1
a2402 1
    stringBuffer.append(TEXT_342);
d2409 1
a2409 1
    stringBuffer.append(TEXT_343);
d2423 1
a2423 1
    stringBuffer.append(TEXT_344);
d2425 1
a2425 1
    stringBuffer.append(TEXT_345);
d2427 1
a2427 1
    stringBuffer.append(TEXT_346);
d2429 1
a2429 1
    stringBuffer.append(TEXT_347);
d2433 1
a2433 1
    stringBuffer.append(TEXT_348);
d2435 1
a2435 1
    stringBuffer.append(TEXT_349);
d2437 1
a2437 1
    stringBuffer.append(TEXT_350);
d2439 1
a2439 1
    stringBuffer.append(TEXT_351);
d2446 1
a2446 1
    stringBuffer.append(TEXT_352);
d2460 1
a2460 1
    stringBuffer.append(TEXT_353);
d2462 1
a2462 1
    stringBuffer.append(TEXT_354);
d2464 1
a2464 1
    stringBuffer.append(TEXT_355);
d2466 1
a2466 1
    stringBuffer.append(TEXT_356);
d2470 1
a2470 1
    stringBuffer.append(TEXT_357);
d2472 1
a2472 1
    stringBuffer.append(TEXT_358);
d2474 1
a2474 1
    stringBuffer.append(TEXT_359);
d2476 1
a2476 1
    stringBuffer.append(TEXT_360);
d2486 1
a2486 1
    stringBuffer.append(TEXT_361);
d2500 1
a2500 1
    stringBuffer.append(TEXT_362);
d2502 1
a2502 1
    stringBuffer.append(TEXT_363);
d2504 1
a2504 1
    stringBuffer.append(TEXT_364);
d2506 1
a2506 1
    stringBuffer.append(TEXT_365);
d2510 1
a2510 1
    stringBuffer.append(TEXT_366);
d2512 1
a2512 1
    stringBuffer.append(TEXT_367);
d2514 1
a2514 1
    stringBuffer.append(TEXT_368);
d2516 1
a2516 1
    stringBuffer.append(TEXT_369);
d2525 1
a2525 1
    stringBuffer.append(TEXT_370);
d2530 1
a2530 1
    stringBuffer.append(TEXT_371);
d2537 1
a2537 1
    stringBuffer.append(TEXT_372);
d2542 1
a2542 1
    stringBuffer.append(TEXT_373);
d2548 1
a2548 1
    stringBuffer.append(TEXT_374);
d2550 1
a2550 1
    stringBuffer.append(TEXT_375);
d2555 1
a2555 1
    stringBuffer.append(TEXT_376);
d2557 1
a2557 1
    stringBuffer.append(TEXT_377);
d2559 1
a2559 1
    stringBuffer.append(TEXT_378);
d2561 1
a2561 1
    stringBuffer.append(TEXT_379);
d2563 1
a2563 1
    stringBuffer.append(TEXT_380);
d2565 1
a2565 1
    stringBuffer.append(TEXT_381);
d2567 1
a2567 1
    stringBuffer.append(TEXT_382);
d2569 1
a2569 1
    stringBuffer.append(TEXT_383);
d2571 2
a2572 2
    stringBuffer.append(TEXT_384);
    stringBuffer.append(TEXT_385);
d2574 1
a2574 1
    stringBuffer.append(TEXT_386);
d2576 1
a2576 1
    stringBuffer.append(TEXT_387);
d2578 1
a2578 1
    stringBuffer.append(TEXT_388);
d2580 1
a2580 1
    stringBuffer.append(TEXT_389);
d2582 1
a2582 1
    stringBuffer.append(TEXT_390);
d2584 1
a2584 1
    stringBuffer.append(TEXT_391);
d2586 1
a2586 1
    stringBuffer.append(TEXT_392);
d2588 1
a2588 1
    stringBuffer.append(TEXT_393);
d2590 1
a2590 1
    stringBuffer.append(TEXT_394);
d2592 1
a2592 1
    stringBuffer.append(TEXT_395);
d2594 1
a2594 1
    stringBuffer.append(TEXT_396);
d2596 1
a2596 1
    stringBuffer.append(TEXT_397);
d2598 1
a2598 1
    stringBuffer.append(TEXT_398);
d2600 1
a2600 1
    stringBuffer.append(TEXT_399);
d2602 1
a2602 1
    stringBuffer.append(TEXT_400);
d2604 1
a2604 1
    stringBuffer.append(TEXT_401);
d2606 1
a2606 1
    stringBuffer.append(TEXT_402);
d2608 1
a2608 1
    stringBuffer.append(TEXT_403);
d2610 1
a2610 1
    stringBuffer.append(TEXT_404);
d2612 1
a2612 1
    stringBuffer.append(TEXT_405);
d2614 1
a2614 1
    stringBuffer.append(TEXT_406);
d2616 1
a2616 1
    stringBuffer.append(TEXT_407);
d2618 1
a2618 1
    stringBuffer.append(TEXT_408);
d2620 1
a2620 1
    stringBuffer.append(TEXT_409);
d2622 1
a2622 1
    stringBuffer.append(TEXT_410);
d2624 1
a2624 1
    stringBuffer.append(TEXT_411);
d2626 1
a2626 1
    stringBuffer.append(TEXT_412);
d2628 1
a2628 1
    stringBuffer.append(TEXT_413);
d2630 1
a2630 1
    stringBuffer.append(TEXT_414);
d2632 1
a2632 1
    stringBuffer.append(TEXT_415);
d2634 1
a2634 1
    stringBuffer.append(TEXT_416);
d2636 1
a2636 1
    stringBuffer.append(TEXT_417);
d2638 1
a2638 1
    stringBuffer.append(TEXT_418);
d2640 1
a2640 1
    stringBuffer.append(TEXT_419);
d2642 1
a2642 1
    stringBuffer.append(TEXT_420);
d2644 1
a2644 1
    stringBuffer.append(TEXT_421);
d2646 1
a2646 1
    stringBuffer.append(TEXT_422);
d2648 1
a2648 1
    stringBuffer.append(TEXT_423);
d2650 1
a2650 1
    stringBuffer.append(TEXT_424);
d2652 1
a2652 1
    stringBuffer.append(TEXT_425);
d2654 1
a2654 1
    stringBuffer.append(TEXT_426);
d2656 1
a2656 1
    stringBuffer.append(TEXT_427);
d2658 1
a2658 1
    stringBuffer.append(TEXT_428);
d2660 1
a2660 1
    stringBuffer.append(TEXT_429);
d2662 1
a2662 1
    stringBuffer.append(TEXT_430);
d2664 1
a2664 1
    stringBuffer.append(TEXT_431);
d2666 1
a2666 1
    stringBuffer.append(TEXT_432);
d2668 1
a2668 1
    stringBuffer.append(TEXT_433);
d2670 1
a2670 1
    stringBuffer.append(TEXT_434);
d2672 1
a2672 1
    stringBuffer.append(TEXT_435);
d2674 1
a2674 1
    stringBuffer.append(TEXT_436);
d2676 1
a2676 1
    stringBuffer.append(TEXT_437);
d2678 1
a2678 1
    stringBuffer.append(TEXT_438);
d2680 1
a2680 1
    stringBuffer.append(TEXT_439);
d2682 1
a2682 1
    stringBuffer.append(TEXT_440);
d2684 1
a2684 1
    stringBuffer.append(TEXT_441);
d2686 1
a2686 1
    stringBuffer.append(TEXT_442);
d2688 1
a2688 1
    stringBuffer.append(TEXT_443);
d2690 1
a2690 1
    stringBuffer.append(TEXT_444);
d2692 1
a2692 1
    stringBuffer.append(TEXT_445);
d2694 1
a2694 1
    stringBuffer.append(TEXT_446);
d2696 1
a2696 1
    stringBuffer.append(TEXT_447);
d2698 1
a2698 1
    stringBuffer.append(TEXT_448);
d2700 1
a2700 1
    stringBuffer.append(TEXT_449);
d2702 1
a2702 1
    stringBuffer.append(TEXT_450);
d2704 1
a2704 1
    stringBuffer.append(TEXT_451);
d2706 1
a2706 1
    stringBuffer.append(TEXT_452);
d2708 1
a2708 1
    stringBuffer.append(TEXT_453);
d2710 1
a2710 1
    stringBuffer.append(TEXT_454);
d2712 1
a2712 1
    stringBuffer.append(TEXT_455);
d2714 1
a2714 1
    stringBuffer.append(TEXT_456);
d2716 1
a2716 1
    stringBuffer.append(TEXT_457);
d2718 1
a2718 1
    stringBuffer.append(TEXT_458);
d2720 1
a2720 1
    stringBuffer.append(TEXT_459);
d2722 1
a2722 1
    stringBuffer.append(TEXT_460);
d2724 1
a2724 1
    stringBuffer.append(TEXT_461);
d2726 1
a2726 1
    stringBuffer.append(TEXT_462);
d2728 1
a2728 1
    stringBuffer.append(TEXT_463);
d2730 1
a2730 1
    stringBuffer.append(TEXT_464);
d2732 1
a2732 1
    stringBuffer.append(TEXT_465);
d2734 1
a2734 1
    stringBuffer.append(TEXT_466);
d2736 1
a2736 1
    stringBuffer.append(TEXT_467);
d2738 1
a2738 1
    stringBuffer.append(TEXT_468);
d2740 1
a2740 1
    stringBuffer.append(TEXT_469);
d2749 1
a2749 1
    stringBuffer.append(TEXT_470);
d2751 1
a2751 1
    stringBuffer.append(TEXT_471);
d2753 1
a2753 1
    stringBuffer.append(TEXT_472);
d2755 1
a2755 1
    stringBuffer.append(TEXT_473);
d2761 1
a2761 1
    stringBuffer.append(TEXT_474);
d2763 1
a2763 1
    stringBuffer.append(TEXT_475);
d2765 1
a2765 1
    stringBuffer.append(TEXT_476);
d2769 1
a2769 1
    stringBuffer.append(TEXT_477);
d2771 1
a2771 1
    stringBuffer.append(TEXT_478);
d2773 3
a2775 3
    stringBuffer.append(TEXT_479);
    stringBuffer.append(TEXT_480);
    stringBuffer.append(TEXT_481);
d2777 1
a2777 1
    stringBuffer.append(TEXT_482);
d2779 1
a2779 1
    stringBuffer.append(TEXT_483);
d2802 1
a2802 1
    stringBuffer.append(TEXT_484);
d2804 3
a2806 3
    stringBuffer.append(TEXT_485);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_486);
d2808 1
a2808 1
    stringBuffer.append(TEXT_487);
d2813 1
a2813 1
    stringBuffer.append(TEXT_488);
d2822 1
a2822 1
    stringBuffer.append(TEXT_489);
d2824 3
a2826 5
    stringBuffer.append(TEXT_490);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_491);
    stringBuffer.append(metaFeature.getGetAccessor());
    stringBuffer.append(TEXT_492);
d2828 1
a2828 1
    stringBuffer.append(TEXT_493);
d2832 5
a2836 5
    stringBuffer.append(TEXT_494);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_495);
    stringBuffer.append(metaFeature.getGetAccessor());
    stringBuffer.append(TEXT_496);
d2840 1
a2840 1
    stringBuffer.append(TEXT_497);
d2842 1
a2842 1
    stringBuffer.append(TEXT_498);
d2847 1
a2847 1
    stringBuffer.append(TEXT_499);
d2855 1
a2855 1
    stringBuffer.append(TEXT_500);
d2857 1
a2857 1
    stringBuffer.append(TEXT_501);
d2861 1
a2861 1
    stringBuffer.append(TEXT_502);
d2863 1
a2863 1
    stringBuffer.append(TEXT_503);
d2868 3
a2870 1
    stringBuffer.append(TEXT_504);
d2872 3
a2874 5
    stringBuffer.append(TEXT_505);
    stringBuffer.append(importManager.getImportedName(modelFacet.getSourceMetaFeature().getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_506);
    stringBuffer.append(modelFacet.getSourceMetaFeature().getGetAccessor());
    stringBuffer.append(TEXT_507);
d2878 1
a2878 1
    stringBuffer.append(TEXT_508);
d2880 3
a2882 3
    stringBuffer.append(TEXT_509);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_510);
d2887 3
a2889 1
    stringBuffer.append(TEXT_511);
d2891 3
a2893 5
    stringBuffer.append(TEXT_512);
    stringBuffer.append(importManager.getImportedName(modelFacet.getTargetMetaFeature().getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_513);
    stringBuffer.append(modelFacet.getTargetMetaFeature().getGetAccessor());
    stringBuffer.append(TEXT_514);
d2897 1
a2897 1
    stringBuffer.append(TEXT_515);
d2899 3
a2901 3
    stringBuffer.append(TEXT_516);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_517);
d2905 1
a2905 1
    stringBuffer.append(TEXT_518);
d2909 1
a2909 1
    stringBuffer.append(TEXT_519);
d2913 1
a2913 1
    stringBuffer.append(TEXT_520);
d2921 1
a2921 1
    stringBuffer.append(TEXT_521);
d2926 1
a2926 1
    stringBuffer.append(TEXT_522);
d2936 1
a2936 1
    stringBuffer.append(TEXT_523);
d2938 3
a2940 5
    stringBuffer.append(TEXT_524);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_525);
    stringBuffer.append(metaFeature.getGetAccessor());
    stringBuffer.append(TEXT_526);
d2942 1
a2942 1
    stringBuffer.append(TEXT_527);
d2946 5
a2950 5
    stringBuffer.append(TEXT_528);
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_529);
    stringBuffer.append(metaFeature.getGetAccessor());
    stringBuffer.append(TEXT_530);
d2954 1
a2954 1
    stringBuffer.append(TEXT_531);
d2959 1
a2959 1
    stringBuffer.append(TEXT_532);
d2961 1
a2961 1
    stringBuffer.append(TEXT_533);
d2965 1
a2965 1
    stringBuffer.append(TEXT_534);
d2969 1
a2969 1
    stringBuffer.append(TEXT_535);
d2974 1
a2974 1
    stringBuffer.append(TEXT_536);
d2976 1
a2976 1
    stringBuffer.append(TEXT_537);
d2978 1
a2978 1
    stringBuffer.append(TEXT_538);
d2980 1
a2980 1
    stringBuffer.append(TEXT_539);
d2982 1
a2982 1
    stringBuffer.append(TEXT_540);
d2984 1
a2984 1
    stringBuffer.append(TEXT_541);
d2986 1
a2986 1
    stringBuffer.append(TEXT_542);
d2988 1
a2988 1
    stringBuffer.append(TEXT_543);
d2990 1
a2990 1
    stringBuffer.append(TEXT_544);
d2994 1
a2994 1
    stringBuffer.append(TEXT_545);
d2996 1
a2996 1
    stringBuffer.append(TEXT_546);
d2998 1
a2998 1
    stringBuffer.append(TEXT_547);
d3005 1
a3005 1
    stringBuffer.append(TEXT_548);
d3007 1
a3007 1
    stringBuffer.append(TEXT_549);
d3009 1
a3009 1
    stringBuffer.append(TEXT_550);
d3014 1
a3014 1
    stringBuffer.append(TEXT_551);
d3016 1
a3016 1
    stringBuffer.append(TEXT_552);
d3020 1
a3020 1
    stringBuffer.append(TEXT_553);
d3024 1
a3024 1
    stringBuffer.append(TEXT_554);
d3028 1
a3028 1
    stringBuffer.append(TEXT_555);
d3038 1
a3038 1
    stringBuffer.append(TEXT_556);
d3042 3
a3044 3
    stringBuffer.append(TEXT_557);
    stringBuffer.append(_getSemanticElementCode);
    stringBuffer.append(TEXT_558);
d3046 1
a3046 1
    stringBuffer.append(TEXT_559);
d3051 1
a3051 1
    stringBuffer.append(TEXT_560);
d3053 1
a3053 1
    stringBuffer.append(TEXT_561);
d3057 1
a3057 1
    stringBuffer.append(TEXT_562);
d3061 1
a3061 1
    stringBuffer.append(TEXT_563);
d3063 1
a3063 1
    stringBuffer.append(TEXT_564);
d3065 1
a3065 1
    stringBuffer.append(TEXT_565);
d3072 3
a3074 3
    stringBuffer.append(TEXT_566);
    stringBuffer.append(TEXT_567);
    stringBuffer.append(TEXT_568);
d3076 1
a3076 1
    stringBuffer.append(TEXT_569);
d3078 1
a3078 1
    stringBuffer.append(TEXT_570);
d3080 3
a3082 3
    stringBuffer.append(TEXT_571);
    stringBuffer.append(TEXT_572);
    stringBuffer.append(TEXT_573);
d3084 1
a3084 1
    stringBuffer.append(TEXT_574);
d3086 1
a3086 1
    stringBuffer.append(TEXT_575);
d3088 1
a3088 1
    stringBuffer.append(TEXT_576);
d3092 1
a3092 1
    stringBuffer.append(TEXT_577);
d3100 1
a3100 1
    stringBuffer.append(TEXT_578);
d3104 1
a3104 1
    stringBuffer.append(TEXT_579);
d3106 1
a3106 1
    stringBuffer.append(TEXT_580);
d3108 1
a3108 1
    stringBuffer.append(TEXT_581);
d3110 1
a3110 1
    stringBuffer.append(TEXT_582);
d3112 1
a3112 1
    stringBuffer.append(TEXT_583);
d3114 1
a3114 1
    stringBuffer.append(TEXT_584);
d3116 1
a3116 1
    stringBuffer.append(TEXT_585);
d3118 1
a3118 1
    stringBuffer.append(TEXT_586);
d3120 1
a3120 1
    stringBuffer.append(TEXT_587);
d3122 1
a3122 1
    stringBuffer.append(TEXT_588);
d3124 1
a3124 1
    stringBuffer.append(TEXT_589);
d3126 1
a3126 1
    stringBuffer.append(TEXT_590);
d3130 1
a3130 1
    stringBuffer.append(TEXT_591);
d3134 1
a3134 1
    stringBuffer.append(TEXT_592);
d3136 1
a3136 1
    stringBuffer.append(TEXT_593);
a3139 28
    stringBuffer.append(TEXT_594);
    stringBuffer.append(TEXT_595);
    stringBuffer.append(TEXT_596);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_597);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_598);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_599);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_600);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_601);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_602);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_603);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_604);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_605);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
    stringBuffer.append(TEXT_606);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_607);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_608);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a3140 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a3141 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d3143 1
a3143 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d3145 1
d3147 1
d3149 1
a3149 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d3151 1
a3151 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d3153 1
a3153 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d3155 1
a3155 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d3157 1
d3159 1
d3161 1
a3161 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3163 2
a3165 1
    stringBuffer.append(TEXT_622);
d3167 1
d3169 1
a3169 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3171 1
a3171 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3173 1
a3173 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a3174 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a3175 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3177 1
d3179 1
d3181 1
a3181 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3183 1
d3186 1
a3187 1
    stringBuffer.append(TEXT_635);
d3189 1
a3190 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d3193 1
d3207 22
d3230 1
a3230 1
    stringBuffer.append(TEXT_648);
d3258 1
a3258 1
    stringBuffer.append(TEXT_649);
d3261 1
a3261 1
    stringBuffer.append(TEXT_650);
d3263 1
a3263 1
    stringBuffer.append(TEXT_651);
d3265 1
a3265 1
    stringBuffer.append(TEXT_652);
d3267 1
a3267 1
    stringBuffer.append(TEXT_653);
d3269 1
a3269 1
    stringBuffer.append(TEXT_654);
d3271 1
a3271 1
    stringBuffer.append(TEXT_655);
d3274 1
a3274 1
    stringBuffer.append(TEXT_656);
d3276 1
a3276 1
    stringBuffer.append(TEXT_657);
d3278 1
a3278 1
    stringBuffer.append(TEXT_658);
d3280 1
a3280 1
    stringBuffer.append(TEXT_659);
d3283 1
a3283 1
    stringBuffer.append(TEXT_660);
d3285 1
a3285 1
    stringBuffer.append(TEXT_661);
d3287 1
a3287 1
    stringBuffer.append(TEXT_662);
d3291 1
a3291 1
    stringBuffer.append(TEXT_663);
d3293 1
a3293 1
    stringBuffer.append(TEXT_664);
d3295 1
a3295 1
    stringBuffer.append(TEXT_665);
d3297 1
a3297 1
    stringBuffer.append(TEXT_666);
d3299 1
a3299 1
    stringBuffer.append(TEXT_667);
d3301 1
a3301 1
    stringBuffer.append(TEXT_668);
d3305 1
a3305 1
    stringBuffer.append(TEXT_669);
d3309 1
a3309 1
    stringBuffer.append(TEXT_670);
d3316 1
a3316 1
    stringBuffer.append(TEXT_671);
d3320 1
a3320 1
    stringBuffer.append(TEXT_672);
d3322 1
a3322 1
    stringBuffer.append(TEXT_673);
d3324 1
a3324 1
    stringBuffer.append(TEXT_674);
d3326 1
a3326 1
    stringBuffer.append(TEXT_675);
d3328 1
a3328 1
    stringBuffer.append(TEXT_676);
d3334 1
d3336 1
a3336 1
    stringBuffer.append(TEXT_677);
d3342 3
a3344 5
    stringBuffer.append(TEXT_678);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_679);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_680);
d3346 1
a3346 1
    stringBuffer.append(TEXT_681);
d3350 3
a3352 5
    stringBuffer.append(TEXT_682);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_683);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_684);
d3354 1
a3354 1
    stringBuffer.append(TEXT_685);
d3356 1
a3356 1
    stringBuffer.append(TEXT_686);
d3358 1
a3358 1
    stringBuffer.append(TEXT_687);
d3371 1
d3373 1
a3373 1
    stringBuffer.append(TEXT_688);
d3379 3
a3381 5
    stringBuffer.append(TEXT_689);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_690);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_691);
d3383 1
a3383 1
    stringBuffer.append(TEXT_692);
d3387 3
a3389 5
    stringBuffer.append(TEXT_693);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_694);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_695);
d3391 1
a3391 1
    stringBuffer.append(TEXT_696);
d3393 1
a3393 1
    stringBuffer.append(TEXT_697);
d3395 1
a3395 1
    stringBuffer.append(TEXT_698);
d3409 1
a3409 1
    stringBuffer.append(TEXT_699);
d3413 1
a3413 1
    stringBuffer.append(TEXT_700);
d3415 1
a3415 1
    stringBuffer.append(TEXT_701);
d3417 1
a3417 1
    stringBuffer.append(TEXT_702);
d3419 1
a3419 1
    stringBuffer.append(TEXT_703);
d3426 1
a3426 1
    stringBuffer.append(TEXT_704);
d3432 1
a3432 1
				String _ownerInstance = "((" + importManager.getImportedName(outgoingClass.getQualifiedInterfaceName()) + ") newSource.getElement())";
d3434 1
d3436 1
a3436 1
    stringBuffer.append(TEXT_705);
d3442 3
a3444 5
    stringBuffer.append(TEXT_706);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_707);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_708);
d3446 1
a3446 1
    stringBuffer.append(TEXT_709);
d3450 3
a3452 5
    stringBuffer.append(TEXT_710);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_711);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_712);
d3454 1
a3454 1
    stringBuffer.append(TEXT_713);
d3456 1
a3456 1
    stringBuffer.append(TEXT_714);
d3458 1
a3458 1
    stringBuffer.append(TEXT_715);
d3469 1
a3469 1
    stringBuffer.append(TEXT_716);
d3473 1
a3473 1
    stringBuffer.append(TEXT_717);
d3475 1
a3475 1
    stringBuffer.append(TEXT_718);
d3477 1
a3477 1
    stringBuffer.append(TEXT_719);
d3479 1
a3479 1
    stringBuffer.append(TEXT_720);
d3486 1
a3486 1
    stringBuffer.append(TEXT_721);
d3490 1
a3490 1
    stringBuffer.append(TEXT_722);
d3494 1
a3494 1
    stringBuffer.append(TEXT_723);
d3496 1
a3496 1
    stringBuffer.append(TEXT_724);
d3498 1
a3498 1
    stringBuffer.append(TEXT_725);
d3500 1
a3500 1
    stringBuffer.append(TEXT_726);
d3502 1
a3502 1
    stringBuffer.append(TEXT_727);
d3504 1
a3504 1
    stringBuffer.append(TEXT_728);
d3506 1
a3506 1
    stringBuffer.append(TEXT_729);
d3525 1
a3525 1
    stringBuffer.append(TEXT_730);
d3527 1
a3527 1
    stringBuffer.append(TEXT_731);
d3529 1
a3529 1
    stringBuffer.append(TEXT_732);
d3531 1
a3531 1
    stringBuffer.append(TEXT_733);
d3533 1
a3533 1
    stringBuffer.append(TEXT_734);
d3535 1
a3535 1
    stringBuffer.append(TEXT_735);
d3537 1
a3537 1
    stringBuffer.append(TEXT_736);
d3543 1
a3543 1
    stringBuffer.append(TEXT_737);
d3545 1
a3545 1
    stringBuffer.append(TEXT_738);
d3549 1
a3549 1
    stringBuffer.append(TEXT_739);
d3551 1
a3551 1
    stringBuffer.append(TEXT_740);
d3553 1
a3553 1
    stringBuffer.append(TEXT_741);
d3557 1
a3557 1
    stringBuffer.append(TEXT_742);
d3559 1
a3559 1
    stringBuffer.append(TEXT_743);
d3561 1
a3561 1
    stringBuffer.append(TEXT_744);
d3563 1
a3563 1
    stringBuffer.append(TEXT_745);
d3569 1
a3569 1
    stringBuffer.append(TEXT_746);
d3571 1
a3571 1
    stringBuffer.append(TEXT_747);
d3573 1
a3573 1
    stringBuffer.append(TEXT_748);
d3575 1
a3575 1
    stringBuffer.append(TEXT_749);
d3579 1
a3579 1
    stringBuffer.append(TEXT_750);
d3581 1
a3581 1
    stringBuffer.append(TEXT_751);
d3583 1
a3583 1
    stringBuffer.append(TEXT_752);
d3585 1
a3585 1
    stringBuffer.append(TEXT_753);
d3587 1
a3587 1
    stringBuffer.append(TEXT_754);
d3591 1
a3591 1
    stringBuffer.append(TEXT_755);
d3593 1
a3593 1
    stringBuffer.append(TEXT_756);
d3595 1
a3595 1
    stringBuffer.append(TEXT_757);
d3597 1
a3597 1
    stringBuffer.append(TEXT_758);
d3601 1
a3601 1
    stringBuffer.append(TEXT_759);
d3606 1
a3606 1
    stringBuffer.append(TEXT_760);
d3608 1
a3608 1
    stringBuffer.append(TEXT_761);
d3610 1
a3610 1
    stringBuffer.append(TEXT_762);
d3612 1
a3612 1
    stringBuffer.append(TEXT_763);
d3614 1
a3614 1
    stringBuffer.append(TEXT_764);
d3616 1
a3616 1
    stringBuffer.append(TEXT_765);
d3618 1
a3618 1
    stringBuffer.append(TEXT_766);
d3622 1
a3622 1
    stringBuffer.append(TEXT_767);
d3624 1
a3624 1
    stringBuffer.append(TEXT_768);
d3626 1
a3626 1
    stringBuffer.append(TEXT_769);
d3628 1
a3628 1
    stringBuffer.append(TEXT_770);
d3636 1
a3636 1
    stringBuffer.append(TEXT_771);
d3638 1
a3638 1
    stringBuffer.append(TEXT_772);
d3640 1
a3640 1
    stringBuffer.append(TEXT_773);
d3642 1
a3642 1
    stringBuffer.append(TEXT_774);
d3644 1
a3644 1
    stringBuffer.append(TEXT_775);
d3646 1
a3646 1
    stringBuffer.append(TEXT_776);
d3648 1
a3648 1
    stringBuffer.append(TEXT_777);
d3652 1
a3652 1
    stringBuffer.append(TEXT_778);
d3654 1
a3654 1
    stringBuffer.append(TEXT_779);
d3656 1
a3656 1
    stringBuffer.append(TEXT_780);
d3658 1
a3658 1
    stringBuffer.append(TEXT_781);
d3660 1
a3660 1
    stringBuffer.append(TEXT_782);
d3662 1
a3662 1
    stringBuffer.append(TEXT_783);
d3664 1
a3664 1
    stringBuffer.append(TEXT_784);
d3666 1
a3666 1
    stringBuffer.append(TEXT_785);
d3671 2
a3672 2
    stringBuffer.append(TEXT_786);
    stringBuffer.append(TEXT_787);
d3676 1
a3676 1
    stringBuffer.append(TEXT_788);
d3678 1
a3678 1
    stringBuffer.append(TEXT_789);
d3680 1
a3680 1
    stringBuffer.append(TEXT_790);
d3682 1
a3682 1
    stringBuffer.append(TEXT_791);
d3690 1
a3690 1
    stringBuffer.append(TEXT_792);
d3694 1
a3694 1
    stringBuffer.append(TEXT_793);
d3696 1
a3696 1
    stringBuffer.append(TEXT_794);
d3698 1
a3698 1
    stringBuffer.append(TEXT_795);
d3725 1
a3725 1
    stringBuffer.append(TEXT_796);
d3727 1
a3727 1
    stringBuffer.append(TEXT_797);
d3729 1
a3729 1
    stringBuffer.append(TEXT_798);
d3733 1
a3733 1
    stringBuffer.append(TEXT_799);
d3735 1
a3735 1
    stringBuffer.append(TEXT_800);
d3737 1
a3737 1
    stringBuffer.append(TEXT_801);
d3739 1
a3739 1
    stringBuffer.append(TEXT_802);
d3741 1
a3741 1
    stringBuffer.append(TEXT_803);
d3745 1
a3745 1
    stringBuffer.append(TEXT_804);
d3747 1
a3747 1
    stringBuffer.append(TEXT_805);
d3749 1
a3749 1
    stringBuffer.append(TEXT_806);
d3751 1
a3751 1
    stringBuffer.append(TEXT_807);
d3753 1
a3753 1
    stringBuffer.append(TEXT_808);
d3758 1
a3758 1
    stringBuffer.append(TEXT_809);
d3760 1
a3760 1
    stringBuffer.append(TEXT_810);
d3766 1
a3766 1
    stringBuffer.append(TEXT_811);
d3768 1
a3768 1
    stringBuffer.append(TEXT_812);
d3770 1
a3770 1
    stringBuffer.append(TEXT_813);
d3772 1
a3772 1
    stringBuffer.append(TEXT_814);
d3774 1
a3774 1
    stringBuffer.append(TEXT_815);
d3776 1
a3776 1
    stringBuffer.append(TEXT_816);
d3780 1
a3780 1
    stringBuffer.append(TEXT_817);
d3782 1
a3782 1
    stringBuffer.append(TEXT_818);
d3784 1
a3784 1
    stringBuffer.append(TEXT_819);
d3786 1
a3786 1
    stringBuffer.append(TEXT_820);
d3788 1
a3788 1
    stringBuffer.append(TEXT_821);
d3790 1
a3790 1
    stringBuffer.append(TEXT_822);
d3797 1
a3797 1
    stringBuffer.append(TEXT_823);
d3799 1
a3799 1
    stringBuffer.append(TEXT_824);
d3801 1
a3801 1
    stringBuffer.append(TEXT_825);
d3803 1
a3803 1
    stringBuffer.append(TEXT_826);
d3805 1
a3805 1
    stringBuffer.append(TEXT_827);
d3807 1
a3807 1
    stringBuffer.append(TEXT_828);
d3811 1
a3811 1
    stringBuffer.append(TEXT_829);
d3813 1
a3813 1
    stringBuffer.append(TEXT_830);
d3815 1
a3815 1
    stringBuffer.append(TEXT_831);
d3817 1
a3817 1
    stringBuffer.append(TEXT_832);
d3819 1
a3819 1
    stringBuffer.append(TEXT_833);
d3821 1
a3821 1
    stringBuffer.append(TEXT_834);
d3828 1
a3828 1
    stringBuffer.append(TEXT_835);
d3830 1
a3830 1
    stringBuffer.append(TEXT_836);
d3832 1
a3832 1
    stringBuffer.append(TEXT_837);
d3834 1
a3834 1
    stringBuffer.append(TEXT_838);
d3836 1
a3836 1
    stringBuffer.append(TEXT_839);
d3838 1
a3838 1
    stringBuffer.append(TEXT_840);
d3842 1
a3842 1
    stringBuffer.append(TEXT_841);
d3844 1
a3844 1
    stringBuffer.append(TEXT_842);
d3846 1
a3846 1
    stringBuffer.append(TEXT_843);
d3848 1
a3848 1
    stringBuffer.append(TEXT_844);
d3850 1
a3850 1
    stringBuffer.append(TEXT_845);
d3852 1
a3852 1
    stringBuffer.append(TEXT_846);
d3857 1
a3857 1
    stringBuffer.append(TEXT_847);
d3863 1
a3863 1
    stringBuffer.append(TEXT_848);
d3865 1
a3865 1
    stringBuffer.append(TEXT_849);
d3867 1
a3867 1
    stringBuffer.append(TEXT_850);
d3869 1
a3869 1
    stringBuffer.append(TEXT_851);
d3871 1
a3871 1
    stringBuffer.append(TEXT_852);
d3873 1
a3873 1
    stringBuffer.append(TEXT_853);
d3877 1
a3877 1
    stringBuffer.append(TEXT_854);
d3879 1
a3879 1
    stringBuffer.append(TEXT_855);
d3881 1
a3881 1
    stringBuffer.append(TEXT_856);
d3883 1
a3883 1
    stringBuffer.append(TEXT_857);
d3885 1
a3885 1
    stringBuffer.append(TEXT_858);
d3887 1
a3887 1
    stringBuffer.append(TEXT_859);
d3894 1
a3894 1
    stringBuffer.append(TEXT_860);
d3898 1
a3898 1
    stringBuffer.append(TEXT_861);
d3902 1
a3902 1
    stringBuffer.append(TEXT_862);
d3905 1
a3905 1
    stringBuffer.append(TEXT_863);
d3907 1
a3907 1
    stringBuffer.append(TEXT_864);
d3909 1
a3909 1
    stringBuffer.append(TEXT_865);
d3912 1
a3912 1
    stringBuffer.append(TEXT_866);
d3914 1
a3914 1
    stringBuffer.append(TEXT_867);
d3916 1
a3916 1
    stringBuffer.append(TEXT_868);
d3923 1
a3923 1
    stringBuffer.append(TEXT_869);
d3927 1
a3927 1
    stringBuffer.append(TEXT_870);
d3929 1
a3929 1
    stringBuffer.append(TEXT_871);
d3931 1
a3931 1
    stringBuffer.append(TEXT_872);
d3933 1
a3933 1
    stringBuffer.append(TEXT_873);
d3935 1
a3935 1
    stringBuffer.append(TEXT_874);
d3941 1
d3943 1
a3943 1
    stringBuffer.append(TEXT_875);
d3949 3
a3951 5
    stringBuffer.append(TEXT_876);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_877);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_878);
d3953 1
a3953 1
    stringBuffer.append(TEXT_879);
d3957 3
a3959 5
    stringBuffer.append(TEXT_880);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_881);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_882);
d3961 1
a3961 1
    stringBuffer.append(TEXT_883);
d3963 1
a3963 1
    stringBuffer.append(TEXT_884);
d3965 1
a3965 1
    stringBuffer.append(TEXT_885);
d3978 1
d3980 1
a3980 1
    stringBuffer.append(TEXT_886);
d3986 3
a3988 5
    stringBuffer.append(TEXT_887);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_888);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_889);
d3990 1
a3990 1
    stringBuffer.append(TEXT_890);
d3994 3
a3996 5
    stringBuffer.append(TEXT_891);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_892);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_893);
d3998 1
a3998 1
    stringBuffer.append(TEXT_894);
d4000 1
a4000 1
    stringBuffer.append(TEXT_895);
d4002 1
a4002 1
    stringBuffer.append(TEXT_896);
d4014 1
a4014 1
    stringBuffer.append(TEXT_897);
d4018 1
a4018 1
    stringBuffer.append(TEXT_898);
d4020 1
a4020 1
    stringBuffer.append(TEXT_899);
d4022 1
a4022 1
    stringBuffer.append(TEXT_900);
d4024 1
a4024 1
    stringBuffer.append(TEXT_901);
d4031 1
a4031 1
    stringBuffer.append(TEXT_902);
d4038 1
a4038 1
			String _ownerInstance = "((" + importManager.getImportedName(outgoingClass.getQualifiedInterfaceName()) + ") source.getElement())";
d4040 1
d4042 1
a4042 1
    stringBuffer.append(TEXT_903);
d4048 3
a4050 5
    stringBuffer.append(TEXT_904);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_905);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_906);
d4052 1
a4052 1
    stringBuffer.append(TEXT_907);
d4056 3
a4058 5
    stringBuffer.append(TEXT_908);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_909);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_910);
d4060 1
a4060 1
    stringBuffer.append(TEXT_911);
d4062 1
a4062 1
    stringBuffer.append(TEXT_912);
d4064 1
a4064 1
    stringBuffer.append(TEXT_913);
d4075 1
a4075 1
    stringBuffer.append(TEXT_914);
d4079 1
a4079 1
    stringBuffer.append(TEXT_915);
d4081 1
a4081 1
    stringBuffer.append(TEXT_916);
d4083 1
a4083 1
    stringBuffer.append(TEXT_917);
d4085 1
a4085 1
    stringBuffer.append(TEXT_918);
d4092 1
a4092 1
    stringBuffer.append(TEXT_919);
d4096 1
a4096 1
    stringBuffer.append(TEXT_920);
d4100 2
a4101 2
    stringBuffer.append(TEXT_921);
    stringBuffer.append(TEXT_922);
d4105 1
a4105 1
    stringBuffer.append(TEXT_923);
d4107 1
a4107 1
    stringBuffer.append(TEXT_924);
d4109 1
a4109 1
    stringBuffer.append(TEXT_925);
d4111 1
a4111 1
    stringBuffer.append(TEXT_926);
d4115 1
a4115 1
    stringBuffer.append(TEXT_927);
d4145 1
a4145 1
    stringBuffer.append(TEXT_928);
d4148 1
a4148 1
    stringBuffer.append(TEXT_929);
d4150 1
a4150 1
    stringBuffer.append(TEXT_930);
d4152 1
a4152 1
    stringBuffer.append(TEXT_931);
d4154 1
a4154 1
    stringBuffer.append(TEXT_932);
d4156 1
a4156 1
    stringBuffer.append(TEXT_933);
d4158 1
a4158 1
    stringBuffer.append(TEXT_934);
d4161 1
a4161 1
    stringBuffer.append(TEXT_935);
d4163 1
a4163 1
    stringBuffer.append(TEXT_936);
d4165 1
a4165 1
    stringBuffer.append(TEXT_937);
d4167 1
a4167 1
    stringBuffer.append(TEXT_938);
d4170 1
a4170 1
    stringBuffer.append(TEXT_939);
d4172 1
a4172 1
    stringBuffer.append(TEXT_940);
d4174 1
a4174 1
    stringBuffer.append(TEXT_941);
d4178 1
a4178 1
    stringBuffer.append(TEXT_942);
d4180 1
a4180 1
    stringBuffer.append(TEXT_943);
d4182 1
a4182 1
    stringBuffer.append(TEXT_944);
d4184 1
a4184 1
    stringBuffer.append(TEXT_945);
d4186 1
a4186 1
    stringBuffer.append(TEXT_946);
d4188 1
a4188 1
    stringBuffer.append(TEXT_947);
d4192 1
a4192 1
    stringBuffer.append(TEXT_948);
d4196 1
a4196 1
    stringBuffer.append(TEXT_949);
d4203 1
a4203 1
    stringBuffer.append(TEXT_950);
d4207 1
a4207 1
    stringBuffer.append(TEXT_951);
d4209 1
a4209 1
    stringBuffer.append(TEXT_952);
d4211 1
a4211 1
    stringBuffer.append(TEXT_953);
d4213 1
a4213 1
    stringBuffer.append(TEXT_954);
d4220 1
a4220 1
    stringBuffer.append(TEXT_955);
d4227 1
a4227 1
    stringBuffer.append(TEXT_956);
d4231 1
a4231 1
    stringBuffer.append(TEXT_957);
d4233 1
a4233 1
    stringBuffer.append(TEXT_958);
d4235 1
a4235 1
    stringBuffer.append(TEXT_959);
d4237 1
a4237 1
    stringBuffer.append(TEXT_960);
d4244 1
a4244 1
    stringBuffer.append(TEXT_961);
d4248 1
a4248 1
    stringBuffer.append(TEXT_962);
d4252 1
a4252 1
    stringBuffer.append(TEXT_963);
d4254 1
a4254 1
    stringBuffer.append(TEXT_964);
d4256 1
a4256 1
    stringBuffer.append(TEXT_965);
d4258 1
a4258 1
    stringBuffer.append(TEXT_966);
d4260 1
a4260 1
    stringBuffer.append(TEXT_967);
d4262 1
a4262 1
    stringBuffer.append(TEXT_968);
d4264 1
a4264 1
    stringBuffer.append(TEXT_969);
d4271 1
a4271 1
    stringBuffer.append(TEXT_970);
d4273 1
a4273 1
    stringBuffer.append(TEXT_971);
d4275 1
a4275 1
    stringBuffer.append(TEXT_972);
d4277 1
a4277 1
    stringBuffer.append(TEXT_973);
d4279 1
a4279 1
    stringBuffer.append(TEXT_974);
d4281 1
a4281 1
    stringBuffer.append(TEXT_975);
d4283 1
a4283 1
    stringBuffer.append(TEXT_976);
d4287 1
a4287 1
    stringBuffer.append(TEXT_977);
d4289 1
a4289 1
    stringBuffer.append(TEXT_978);
d4291 1
a4291 1
    stringBuffer.append(TEXT_979);
d4293 1
a4293 1
    stringBuffer.append(TEXT_980);
d4300 1
a4300 1
    stringBuffer.append(TEXT_981);
d4302 1
a4302 1
    stringBuffer.append(TEXT_982);
d4304 1
a4304 1
    stringBuffer.append(TEXT_983);
d4306 1
a4306 1
    stringBuffer.append(TEXT_984);
d4308 1
a4308 1
    stringBuffer.append(TEXT_985);
d4310 1
a4310 1
    stringBuffer.append(TEXT_986);
d4312 1
a4312 1
    stringBuffer.append(TEXT_987);
d4316 1
a4316 1
    stringBuffer.append(TEXT_988);
d4318 1
a4318 1
    stringBuffer.append(TEXT_989);
d4320 1
a4320 1
    stringBuffer.append(TEXT_990);
d4322 1
a4322 1
    stringBuffer.append(TEXT_991);
d4327 1
a4327 1
    stringBuffer.append(TEXT_992);
d4332 1
a4332 1
    stringBuffer.append(TEXT_993);
d4336 1
a4336 1
    stringBuffer.append(TEXT_994);
d4338 1
a4338 1
    stringBuffer.append(TEXT_995);
d4340 1
a4340 1
    stringBuffer.append(TEXT_996);
d4367 1
a4367 1
    stringBuffer.append(TEXT_997);
d4369 1
a4369 1
    stringBuffer.append(TEXT_998);
d4371 1
a4371 1
    stringBuffer.append(TEXT_999);
d4375 1
a4375 1
    stringBuffer.append(TEXT_1000);
d4377 1
a4377 1
    stringBuffer.append(TEXT_1001);
d4379 1
a4379 1
    stringBuffer.append(TEXT_1002);
d4381 1
a4381 1
    stringBuffer.append(TEXT_1003);
d4383 1
a4383 1
    stringBuffer.append(TEXT_1004);
d4387 1
a4387 1
    stringBuffer.append(TEXT_1005);
d4389 1
a4389 1
    stringBuffer.append(TEXT_1006);
d4391 1
a4391 1
    stringBuffer.append(TEXT_1007);
d4393 1
a4393 1
    stringBuffer.append(TEXT_1008);
d4395 1
a4395 1
    stringBuffer.append(TEXT_1009);
d4400 1
a4400 1
    stringBuffer.append(TEXT_1010);
d4402 1
a4402 1
    stringBuffer.append(TEXT_1011);
d4408 1
a4408 1
    stringBuffer.append(TEXT_1012);
d4410 1
a4410 1
    stringBuffer.append(TEXT_1013);
d4412 1
a4412 1
    stringBuffer.append(TEXT_1014);
d4414 1
a4414 1
    stringBuffer.append(TEXT_1015);
d4416 1
a4416 1
    stringBuffer.append(TEXT_1016);
d4418 1
a4418 1
    stringBuffer.append(TEXT_1017);
d4422 1
a4422 1
    stringBuffer.append(TEXT_1018);
d4424 1
a4424 1
    stringBuffer.append(TEXT_1019);
d4426 1
a4426 1
    stringBuffer.append(TEXT_1020);
d4428 1
a4428 1
    stringBuffer.append(TEXT_1021);
d4430 1
a4430 1
    stringBuffer.append(TEXT_1022);
d4432 1
a4432 1
    stringBuffer.append(TEXT_1023);
d4439 1
a4439 1
    stringBuffer.append(TEXT_1024);
d4441 1
a4441 1
    stringBuffer.append(TEXT_1025);
d4443 1
a4443 1
    stringBuffer.append(TEXT_1026);
d4445 1
a4445 1
    stringBuffer.append(TEXT_1027);
d4447 1
a4447 1
    stringBuffer.append(TEXT_1028);
d4449 1
a4449 1
    stringBuffer.append(TEXT_1029);
d4453 1
a4453 1
    stringBuffer.append(TEXT_1030);
d4455 1
a4455 1
    stringBuffer.append(TEXT_1031);
d4457 1
a4457 1
    stringBuffer.append(TEXT_1032);
d4459 1
a4459 1
    stringBuffer.append(TEXT_1033);
d4461 1
a4461 1
    stringBuffer.append(TEXT_1034);
d4463 1
a4463 1
    stringBuffer.append(TEXT_1035);
d4470 1
a4470 1
    stringBuffer.append(TEXT_1036);
d4472 1
a4472 1
    stringBuffer.append(TEXT_1037);
d4474 1
a4474 1
    stringBuffer.append(TEXT_1038);
d4476 1
a4476 1
    stringBuffer.append(TEXT_1039);
d4478 1
a4478 1
    stringBuffer.append(TEXT_1040);
d4480 1
a4480 1
    stringBuffer.append(TEXT_1041);
d4484 1
a4484 1
    stringBuffer.append(TEXT_1042);
d4486 1
a4486 1
    stringBuffer.append(TEXT_1043);
d4488 1
a4488 1
    stringBuffer.append(TEXT_1044);
d4490 1
a4490 1
    stringBuffer.append(TEXT_1045);
d4492 1
a4492 1
    stringBuffer.append(TEXT_1046);
d4494 1
a4494 1
    stringBuffer.append(TEXT_1047);
d4499 1
a4499 1
    stringBuffer.append(TEXT_1048);
d4505 1
a4505 1
    stringBuffer.append(TEXT_1049);
d4507 1
a4507 1
    stringBuffer.append(TEXT_1050);
d4509 1
a4509 1
    stringBuffer.append(TEXT_1051);
d4511 1
a4511 1
    stringBuffer.append(TEXT_1052);
d4513 1
a4513 1
    stringBuffer.append(TEXT_1053);
d4515 1
a4515 1
    stringBuffer.append(TEXT_1054);
d4519 1
a4519 1
    stringBuffer.append(TEXT_1055);
d4521 1
a4521 1
    stringBuffer.append(TEXT_1056);
d4523 1
a4523 1
    stringBuffer.append(TEXT_1057);
d4525 1
a4525 1
    stringBuffer.append(TEXT_1058);
d4527 1
a4527 1
    stringBuffer.append(TEXT_1059);
d4529 1
a4529 1
    stringBuffer.append(TEXT_1060);
d4536 1
a4536 1
    stringBuffer.append(TEXT_1061);
d4540 1
a4540 1
    stringBuffer.append(TEXT_1062);
d4544 1
a4544 1
    stringBuffer.append(TEXT_1063);
d4547 1
a4547 1
    stringBuffer.append(TEXT_1064);
d4549 1
a4549 1
    stringBuffer.append(TEXT_1065);
d4551 1
a4551 1
    stringBuffer.append(TEXT_1066);
d4553 1
a4553 1
    stringBuffer.append(TEXT_1067);
d4555 1
a4555 1
    stringBuffer.append(TEXT_1068);
d4558 1
a4558 1
    stringBuffer.append(TEXT_1069);
d4560 1
a4560 1
    stringBuffer.append(TEXT_1070);
d4562 1
a4562 1
    stringBuffer.append(TEXT_1071);
d4564 1
a4564 1
    stringBuffer.append(TEXT_1072);
d4566 1
a4566 1
    stringBuffer.append(TEXT_1073);
d4568 1
a4568 1
    stringBuffer.append(TEXT_1074);
d4570 1
a4570 1
    stringBuffer.append(TEXT_1075);
d4572 1
a4572 1
    stringBuffer.append(TEXT_1076);
d4578 1
a4578 1
    stringBuffer.append(TEXT_1077);
d4580 1
a4580 1
    stringBuffer.append(TEXT_1078);
d4582 1
a4582 1
    stringBuffer.append(TEXT_1079);
d4584 7
a4590 1
    stringBuffer.append(TEXT_1080);
d4592 1
a4592 1
    stringBuffer.append(TEXT_1081);
d4594 1
a4594 1
    stringBuffer.append(TEXT_1082);
d4596 7
a4602 1
    stringBuffer.append(TEXT_1083);
d4606 1
a4606 1
    stringBuffer.append(TEXT_1084);
d4610 1
a4610 1
    stringBuffer.append(TEXT_1085);
d4612 1
a4612 1
    stringBuffer.append(TEXT_1086);
d4614 1
a4614 1
    stringBuffer.append(TEXT_1087);
d4616 1
a4616 1
    stringBuffer.append(TEXT_1088);
d4620 1
a4620 1
    stringBuffer.append(TEXT_1089);
d4647 1
a4647 1
    stringBuffer.append(TEXT_1090);
d4649 1
a4649 1
    stringBuffer.append(TEXT_1091);
d4651 1
a4651 1
    stringBuffer.append(TEXT_1092);
d4653 1
a4653 1
    stringBuffer.append(TEXT_1093);
d4655 1
a4655 1
    stringBuffer.append(TEXT_1094);
d4657 1
a4657 1
    stringBuffer.append(TEXT_1095);
d4659 1
a4659 1
    stringBuffer.append(TEXT_1096);
d4664 1
a4664 1
    stringBuffer.append(TEXT_1097);
d4666 1
a4666 1
    stringBuffer.append(TEXT_1098);
d4668 1
a4668 1
    stringBuffer.append(TEXT_1099);
d4670 1
a4670 1
    stringBuffer.append(TEXT_1100);
d4678 1
d4680 1
a4680 1
    stringBuffer.append(TEXT_1101);
d4686 3
a4688 5
    stringBuffer.append(TEXT_1102);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_1103);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_1104);
d4690 1
a4690 1
    stringBuffer.append(TEXT_1105);
d4694 3
a4696 5
    stringBuffer.append(TEXT_1106);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_1107);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_1108);
d4698 1
a4698 1
    stringBuffer.append(TEXT_1109);
d4700 1
a4700 1
    stringBuffer.append(TEXT_1110);
d4702 1
a4702 1
    stringBuffer.append(TEXT_1111);
d4710 1
a4710 1
    stringBuffer.append(TEXT_1112);
d4712 1
a4712 1
    stringBuffer.append(TEXT_1113);
d4714 1
a4714 1
    stringBuffer.append(TEXT_1114);
d4716 1
a4716 1
    stringBuffer.append(TEXT_1115);
d4724 1
d4726 1
a4726 1
    stringBuffer.append(TEXT_1116);
d4732 3
a4734 5
    stringBuffer.append(TEXT_1117);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_1118);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_1119);
d4736 1
a4736 1
    stringBuffer.append(TEXT_1120);
d4740 3
a4742 5
    stringBuffer.append(TEXT_1121);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_1122);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_1123);
d4744 1
a4744 1
    stringBuffer.append(TEXT_1124);
d4746 1
a4746 1
    stringBuffer.append(TEXT_1125);
d4748 1
a4748 1
    stringBuffer.append(TEXT_1126);
d4756 1
a4756 1
    stringBuffer.append(TEXT_1127);
d4758 1
a4758 1
    stringBuffer.append(TEXT_1128);
d4760 1
a4760 1
    stringBuffer.append(TEXT_1129);
d4762 1
a4762 1
    stringBuffer.append(TEXT_1130);
d4766 1
a4766 1
    stringBuffer.append(TEXT_1131);
d4771 1
a4771 1
    stringBuffer.append(TEXT_1132);
d4773 1
a4773 1
    stringBuffer.append(TEXT_1133);
d4775 1
a4775 1
    stringBuffer.append(TEXT_1134);
d4777 1
a4777 1
    stringBuffer.append(TEXT_1135);
d4781 2
a4782 2
    stringBuffer.append(TEXT_1136);
    stringBuffer.append(TEXT_1137);
d4786 1
a4786 1
    stringBuffer.append(TEXT_1138);
d4788 1
a4788 1
    stringBuffer.append(TEXT_1139);
d4790 1
a4790 1
    stringBuffer.append(TEXT_1140);
d4792 1
a4792 1
    stringBuffer.append(TEXT_1141);
d4796 1
a4796 1
    stringBuffer.append(TEXT_1142);
d4802 1
a4802 1
    stringBuffer.append(TEXT_1143);
d4806 1
a4806 1
    stringBuffer.append(TEXT_1144);
d4808 1
a4808 1
    stringBuffer.append(TEXT_1145);
d4810 1
a4810 1
    stringBuffer.append(TEXT_1146);
d4812 1
a4812 1
    stringBuffer.append(TEXT_1147);
d4819 1
a4819 1
    stringBuffer.append(TEXT_1148);
d4828 1
a4828 1
    stringBuffer.append(TEXT_1149);
d4830 1
a4830 1
    stringBuffer.append(TEXT_1150);
d4834 1
a4834 1
    stringBuffer.append(TEXT_1151);
d4841 1
a4841 1
    stringBuffer.append(TEXT_1152);
d4843 1
a4843 1
    stringBuffer.append(TEXT_1153);
@


1.15
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@d38 1
a38 1
  protected final String TEXT_17 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
d40 34
a73 34
  protected final String TEXT_19 = "\t\tinstallEditPolicy(";
  protected final String TEXT_20 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_21 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_22 = " createDeleteCommand(";
  protected final String TEXT_23 = " deleteRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_24 = " editingDomain = ";
  protected final String TEXT_25 = ".getEditingDomain(getDiagramNode().getDiagram().getElement());" + NL + "\t\t\t\t";
  protected final String TEXT_26 = " cc = new ";
  protected final String TEXT_27 = "();" + NL + "\t\t\t\tcc.append(getDomainModelRemoveCommand(editingDomain));" + NL + "\t\t\t\tcc.append(";
  protected final String TEXT_28 = ".create(editingDomain, getDiagramNode()));" + NL + "\t\t\t\treturn new WrappingCommand(editingDomain, cc);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand(";
  protected final String TEXT_29 = " editingDomain) {";
  protected final String TEXT_30 = NL + "\t\t\t\t";
  protected final String TEXT_31 = " result = new ";
  protected final String TEXT_32 = "();";
  protected final String TEXT_33 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_34 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_35 = ".eINSTANCE.get";
  protected final String TEXT_36 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_37 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_38 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_39 = ".eINSTANCE.get";
  protected final String TEXT_40 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_41 = ".UNSET_VALUE));";
  protected final String TEXT_42 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_43 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_44 = ".eINSTANCE.get";
  protected final String TEXT_45 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_46 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_47 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_48 = ".eINSTANCE.get";
  protected final String TEXT_49 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_50 = ".UNSET_VALUE));";
  protected final String TEXT_51 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_52 = NL + "\t\t\t\treturn ";
d76 475
a550 475
  protected final String TEXT_55 = "()," + NL + "\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_56 = NL + "\t\t\t\treturn ";
  protected final String TEXT_57 = ".create(" + NL + "\t\t\t\t\teditingDomain, " + NL + "\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_58 = ".eINSTANCE.get";
  protected final String TEXT_59 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_60 = ".UNSET_VALUE);";
  protected final String TEXT_61 = NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_62 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_63 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_64 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_65 = " getCreateCommand(";
  protected final String TEXT_66 = " request) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_67 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_68 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_69 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_70 = " createChangeConstraintCommand(";
  protected final String TEXT_71 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_72 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_73 = " createChildEditPolicy(";
  protected final String TEXT_74 = " child) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_75 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_76 = " getTargetEditPart(";
  protected final String TEXT_77 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_78 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_79 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_80 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_81 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_82 = " getReconnectTargetCommand(";
  protected final String TEXT_83 = " request) {";
  protected final String TEXT_84 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_85 = ".INSTANCE;";
  protected final String TEXT_86 = NL + "\t\t\t\t";
  protected final String TEXT_87 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_88 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_89 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_90 = " edge = (";
  protected final String TEXT_91 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_92 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_93 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_94 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_95 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_96 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_97 = NL + "\t\t\t\tcase ";
  protected final String TEXT_98 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_99 = "TargetCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_100 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_101 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_102 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_103 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_104 = " getReconnectSourceCommand(";
  protected final String TEXT_105 = " request) {";
  protected final String TEXT_106 = " " + NL + "\t\t\t\treturn ";
  protected final String TEXT_107 = ".INSTANCE;";
  protected final String TEXT_108 = NL + "\t\t\t\t";
  protected final String TEXT_109 = " connection = request.getConnectionEditPart();" + NL + "\t\t\t\tif (connection.getModel() instanceof ";
  protected final String TEXT_110 = " == false) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_111 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_112 = " edge = (";
  protected final String TEXT_113 = ")connection.getModel();" + NL + "\t\t\t\tString modelID = ";
  protected final String TEXT_114 = ".getModelID(edge);" + NL + "\t\t\t\tif (!";
  protected final String TEXT_115 = ".MODEL_ID.equals(modelID)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_116 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_117 = " result = null;" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_118 = ".getVisualID(edge);" + NL + "\t\t\t\tswitch (visualID) {";
  protected final String TEXT_119 = NL + "\t\t\t\tcase ";
  protected final String TEXT_120 = ".VISUAL_ID:" + NL + "\t\t\t\t\tresult = new Reconnect";
  protected final String TEXT_121 = "SourceCommand(request);" + NL + "\t\t\t\t\tbreak;";
  protected final String TEXT_122 = NL + "\t\t\t\t}" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_123 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_124 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);";
  protected final String TEXT_125 = NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_126 = " getConnectionCreateCommand(";
  protected final String TEXT_127 = " request) {";
  protected final String TEXT_128 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_129 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_130 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_131 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_132 = " result = new ";
  protected final String TEXT_133 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_134 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_135 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_136 = "StartCommand(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_137 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_138 = " wrappedResult = new WrappingCommand(";
  protected final String TEXT_139 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_140 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_141 = " getConnectionCompleteCommand(";
  protected final String TEXT_142 = " request) {";
  protected final String TEXT_143 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_144 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_145 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_146 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_147 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_148 = " result = new ";
  protected final String TEXT_149 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_150 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_151 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_152 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_153 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_154 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_155 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_156 = NL + "\t\t\t\treturn ";
  protected final String TEXT_157 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_158 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_159 = " invisibleRectangle = new ";
  protected final String TEXT_160 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_161 = "());" + NL + "\t\t";
  protected final String TEXT_162 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_163 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_164 = " createNodeShape() {";
  protected final String TEXT_165 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_166 = "()";
  protected final String TEXT_167 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_168 = ";";
  protected final String TEXT_169 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_170 = ";";
  protected final String TEXT_171 = NL + "\t\t";
  protected final String TEXT_172 = " figure = new ";
  protected final String TEXT_173 = "();";
  protected final String TEXT_174 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_175 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_176 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_177 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_178 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_179 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_180 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_181 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_182 = " view = (";
  protected final String TEXT_183 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_184 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_185 = " decorationPane = new ";
  protected final String TEXT_186 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_187 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_188 = " imageFigure = new ";
  protected final String TEXT_189 = "(";
  protected final String TEXT_190 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_191 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_192 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_193 = " setupContentPane(";
  protected final String TEXT_194 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_195 = NL + "\t\t\t";
  protected final String TEXT_196 = " layout = new ";
  protected final String TEXT_197 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_198 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_199 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_200 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_201 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_202 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_203 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_204 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_205 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_206 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_207 = " childEditPart) {";
  protected final String TEXT_208 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_209 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_210 = ") childEditPart).";
  protected final String TEXT_211 = "(getPrimaryShape().";
  protected final String TEXT_212 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_213 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_214 = ") {" + NL + "\t\t\t";
  protected final String TEXT_215 = " pane = getPrimaryShape().";
  protected final String TEXT_216 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_217 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_218 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_219 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_220 = ") {" + NL + "\t\t\t";
  protected final String TEXT_221 = " pane = getPrimaryShape().";
  protected final String TEXT_222 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_223 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_224 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_225 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_226 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_227 = NL + "\t\tfor(";
  protected final String TEXT_228 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_229 = " nextChild = (";
  protected final String TEXT_230 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_231 = ".getVisualID(nextChild) == ";
  protected final String TEXT_232 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_233 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_234 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_235 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_236 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_237 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_238 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_239 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_240 = " getLabelEditPart(";
  protected final String TEXT_241 = " req) {" + NL + "\t\t";
  protected final String TEXT_242 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_243 = " view = (";
  protected final String TEXT_244 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_245 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_246 = NL + "\t\t\t\tcase ";
  protected final String TEXT_247 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_248 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_249 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_250 = " childEditPart) {";
  protected final String TEXT_251 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_252 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_253 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_254 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_255 = " root = (";
  protected final String TEXT_256 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_257 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_258 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_259 = " childEditPart, int index) {";
  protected final String TEXT_260 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_261 = " labelFigure = ((";
  protected final String TEXT_262 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_263 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_264 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_265 = " childEditPart) {";
  protected final String TEXT_266 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_267 = " labelFigure = ((";
  protected final String TEXT_268 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_269 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_270 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_271 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_272 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_273 = " childEditPart = (";
  protected final String TEXT_274 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_275 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_276 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_277 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_278 = ";" + NL + "\t\t";
  protected final String TEXT_279 = " bounds = (";
  protected final String TEXT_280 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_281 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_282 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_283 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_284 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_285 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_286 = " getSourceConnectionAnchor(";
  protected final String TEXT_287 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_288 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_289 = " getSourceConnectionAnchor(";
  protected final String TEXT_290 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_291 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_292 = "  getTargetConnectionAnchor(";
  protected final String TEXT_293 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_294 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_295 = "  getTargetConnectionAnchor(";
  protected final String TEXT_296 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_297 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_298 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_299 = NL;
  protected final String TEXT_300 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_301 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_302 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_303 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_304 = NL;
  protected final String TEXT_305 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_306 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_307 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_308 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_309 = NL;
  protected final String TEXT_310 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_311 = NL + "\t\t";
  protected final String TEXT_312 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_313 = ") ";
  protected final String TEXT_314 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_315 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_316 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_317 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_318 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_319 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_320 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_321 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_322 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_323 = "\t" + NL + "\t}";
  protected final String TEXT_324 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_325 = " createdFont;";
  protected final String TEXT_326 = "\t" + NL;
  protected final String TEXT_327 = NL;
  protected final String TEXT_328 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_329 = " style = (";
  protected final String TEXT_330 = ")  ";
  protected final String TEXT_331 = ".getStyle(";
  protected final String TEXT_332 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_333 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_334 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_335 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_336 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_337 = " style = (";
  protected final String TEXT_338 = ")  ";
  protected final String TEXT_339 = ".getStyle(";
  protected final String TEXT_340 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_341 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_342 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_343 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_344 = " createdBackgroundColor;" + NL;
  protected final String TEXT_345 = NL;
  protected final String TEXT_346 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_347 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_348 = " feature, ";
  protected final String TEXT_349 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_350 = "();";
  protected final String TEXT_351 = NL;
  protected final String TEXT_352 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_353 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_354 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_355 = NL;
  protected final String TEXT_356 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_357 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_358 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_359 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_360 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_361 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_362 = NL;
  protected final String TEXT_363 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_364 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_365 = NL;
  protected final String TEXT_366 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_367 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_368 = NL;
  protected final String TEXT_369 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_370 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_371 = NL;
  protected final String TEXT_372 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_373 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_374 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_375 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_376 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_377 = NL;
  protected final String TEXT_378 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_379 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_380 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_381 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_382 = "SourceCommand extends ";
  protected final String TEXT_383 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_384 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_385 = " newSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_386 = " oldSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_387 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_388 = "SourceCommand(";
  protected final String TEXT_389 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_390 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_391 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_392 = "SourceCommand(";
  protected final String TEXT_393 = " edge, ";
  protected final String TEXT_394 = " newSource) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newSource = newSource;" + NL + "\t\t\tthis.oldSource = edge.getSource();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_395 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_396 = " domainModelEditDomain = ";
  protected final String TEXT_397 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_398 = " command = new ";
  protected final String TEXT_399 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_400 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew WrappingCommand(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_401 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_402 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_403 = NL + "\t\t\treturn false;";
  protected final String TEXT_404 = NL + "\t\t\t";
  protected final String TEXT_405 = " container = (";
  protected final String TEXT_406 = ")getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_407 = ".eINSTANCE.get";
  protected final String TEXT_408 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_409 = NL;
  protected final String TEXT_410 = NL + "\t\tif (";
  protected final String TEXT_411 = ".";
  protected final String TEXT_412 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_413 = NL + "\t\t}";
  protected final String TEXT_414 = NL + "\t\tif (";
  protected final String TEXT_415 = ".";
  protected final String TEXT_416 = "().size() >= ";
  protected final String TEXT_417 = ".eINSTANCE.get";
  protected final String TEXT_418 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_419 = NL + "\t\t}";
  protected final String TEXT_420 = NL;
  protected final String TEXT_421 = NL + "\t\tif (";
  protected final String TEXT_422 = ".";
  protected final String TEXT_423 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_424 = NL + "\t\t}";
  protected final String TEXT_425 = NL + "\t\tif (";
  protected final String TEXT_426 = ".";
  protected final String TEXT_427 = "().size() >= ";
  protected final String TEXT_428 = ".eINSTANCE.get";
  protected final String TEXT_429 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_430 = NL + "\t\t}";
  protected final String TEXT_431 = NL;
  protected final String TEXT_432 = NL + "\t\t\tif(!";
  protected final String TEXT_433 = ".canCreateLink(";
  protected final String TEXT_434 = ", ";
  protected final String TEXT_435 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_436 = NL + "\t\t\treturn true;";
  protected final String TEXT_437 = NL;
  protected final String TEXT_438 = NL + "\t\tif (";
  protected final String TEXT_439 = ".";
  protected final String TEXT_440 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_441 = NL + "\t\t}";
  protected final String TEXT_442 = NL + "\t\tif (";
  protected final String TEXT_443 = ".";
  protected final String TEXT_444 = "().size() >= ";
  protected final String TEXT_445 = ".eINSTANCE.get";
  protected final String TEXT_446 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_447 = NL + "\t\t}";
  protected final String TEXT_448 = NL;
  protected final String TEXT_449 = NL + "\t\t\tif(!";
  protected final String TEXT_450 = ".canCreateLink(";
  protected final String TEXT_451 = ", ";
  protected final String TEXT_452 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_453 = NL + "\t\t\treturn true;";
  protected final String TEXT_454 = NL + "\t\t\treturn false;";
  protected final String TEXT_455 = NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_456 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_457 = " editingDomain = ";
  protected final String TEXT_458 = ".getEditingDomain(oldSource.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_459 = " result = new ";
  protected final String TEXT_460 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_461 = "(edge, newSource));";
  protected final String TEXT_462 = NL + "\t\t\t";
  protected final String TEXT_463 = " container = getRelationshipContainer(newSource.getElement(), ";
  protected final String TEXT_464 = ".eINSTANCE.get";
  protected final String TEXT_465 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_466 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_467 = " oldContainer = edge.getElement().eContainer();" + NL + "\t\t\tif (oldContainer == null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_468 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tif (oldContainer != container) {";
  protected final String TEXT_469 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_470 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), edge.getElement()));";
  protected final String TEXT_471 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_472 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), edge.getElement().eContainmentFeature(), ";
  protected final String TEXT_473 = ".UNSET_VALUE));";
  protected final String TEXT_474 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_475 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_476 = ".eINSTANCE.get";
  protected final String TEXT_477 = "(), edge.getElement()));";
  protected final String TEXT_478 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_479 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_480 = ".eINSTANCE.get";
  protected final String TEXT_481 = "()," + NL + "\t\t\t\t\tedge.getElement()));";
  protected final String TEXT_482 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_483 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tedge.getElement().eContainer(), ";
  protected final String TEXT_484 = ".eINSTANCE.get";
  protected final String TEXT_485 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_486 = ".UNSET_VALUE));";
  protected final String TEXT_487 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_488 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\tcontainer, ";
  protected final String TEXT_489 = ".eINSTANCE.get";
  protected final String TEXT_490 = "(), edge.getElement()));";
  protected final String TEXT_491 = NL + "\t\t\t}";
  protected final String TEXT_492 = NL + "\t\t\tresult.append(";
  protected final String TEXT_493 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_494 = ".eINSTANCE.get";
  protected final String TEXT_495 = "()," + NL + "\t\t\t\toldSource.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_496 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_497 = ".eINSTANCE.get";
  protected final String TEXT_498 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_499 = NL + "\t\t\tresult.append(";
  protected final String TEXT_500 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_501 = ".eINSTANCE.get";
  protected final String TEXT_502 = "()," + NL + "\t\t\t\tnewSource.getElement()));";
  protected final String TEXT_503 = NL + "\t\t\tresult.append(";
  protected final String TEXT_504 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_505 = ".eINSTANCE.get";
  protected final String TEXT_506 = "(), edge.getTarget().getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_507 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_508 = ".eINSTANCE.get";
  protected final String TEXT_509 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_510 = NL + "\t\t\tresult.append(";
  protected final String TEXT_511 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\toldSource.getElement(), ";
  protected final String TEXT_512 = ".eINSTANCE.get";
  protected final String TEXT_513 = "(), ";
  protected final String TEXT_514 = ".UNSET_VALUE));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_515 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tnewSource.getElement(), ";
  protected final String TEXT_516 = ".eINSTANCE.get";
  protected final String TEXT_517 = "(), edge.getTarget().getElement()));";
  protected final String TEXT_518 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL;
  protected final String TEXT_519 = NL;
  protected final String TEXT_520 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_521 = " getRelationshipContainer(";
  protected final String TEXT_522 = " element, ";
  protected final String TEXT_523 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_524 = NL;
  protected final String TEXT_525 = NL + "\t\t\tprivate ";
  protected final String TEXT_526 = " createDomainModelRemoveCommand(";
  protected final String TEXT_527 = " editingDomain) {";
  protected final String TEXT_528 = NL + "\t\t\t\t";
  protected final String TEXT_529 = " result = new ";
d552 157
a708 157
  protected final String TEXT_531 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_532 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_533 = ".getElement().eContainer(), ";
  protected final String TEXT_534 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_535 = ".getElement()));";
  protected final String TEXT_536 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_537 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_538 = ".getElement().eContainer(), ";
  protected final String TEXT_539 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_540 = ".UNSET_VALUE));";
  protected final String TEXT_541 = NL + "\t\t\t\treturn ";
  protected final String TEXT_542 = ".INSTANCE;";
  protected final String TEXT_543 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_544 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_545 = ".getElement().eContainer(), ";
  protected final String TEXT_546 = ".eINSTANCE.get";
  protected final String TEXT_547 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_548 = ".getElement()));";
  protected final String TEXT_549 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_550 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_551 = ".getElement().eContainer(), ";
  protected final String TEXT_552 = ".eINSTANCE.get";
  protected final String TEXT_553 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_554 = ".UNSET_VALUE));";
  protected final String TEXT_555 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_556 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_557 = ".getElement(), ";
  protected final String TEXT_558 = ".eINSTANCE.get";
  protected final String TEXT_559 = "(), ";
  protected final String TEXT_560 = ".getSource().getElement()));";
  protected final String TEXT_561 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_562 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_563 = ".getElement(), ";
  protected final String TEXT_564 = ".eINSTANCE.get";
  protected final String TEXT_565 = "(), ";
  protected final String TEXT_566 = ".UNSET_VALUE));";
  protected final String TEXT_567 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_568 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_569 = ".getElement(), ";
  protected final String TEXT_570 = ".eINSTANCE.get";
  protected final String TEXT_571 = "(), ";
  protected final String TEXT_572 = ".getTarget().getElement()));";
  protected final String TEXT_573 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_574 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_575 = ".getElement(), ";
  protected final String TEXT_576 = ".eINSTANCE.get";
  protected final String TEXT_577 = "(), ";
  protected final String TEXT_578 = ".UNSET_VALUE));";
  protected final String TEXT_579 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_580 = NL + "\t\t\t\treturn ";
  protected final String TEXT_581 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_582 = ".getSource().getElement(), ";
  protected final String TEXT_583 = ".eINSTANCE.get";
  protected final String TEXT_584 = "(), ";
  protected final String TEXT_585 = ".getTarget().getElement());";
  protected final String TEXT_586 = NL + "\t\t\t\treturn ";
  protected final String TEXT_587 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_588 = ".getSource().getElement(), ";
  protected final String TEXT_589 = ".eINSTANCE.get";
  protected final String TEXT_590 = "(), ";
  protected final String TEXT_591 = ".UNSET_VALUE);";
  protected final String TEXT_592 = NL + "\t\t\t}";
  protected final String TEXT_593 = NL + "\t}" + NL;
  protected final String TEXT_594 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_595 = "StartCommand extends ";
  protected final String TEXT_596 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_597 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_598 = "StartCommand(";
  protected final String TEXT_599 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_600 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_601 = NL + "\t\t\treturn false;";
  protected final String TEXT_602 = NL + "\t\t\t";
  protected final String TEXT_603 = " container = (";
  protected final String TEXT_604 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_605 = ".eINSTANCE.get";
  protected final String TEXT_606 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_607 = NL;
  protected final String TEXT_608 = NL + "\t\tif (";
  protected final String TEXT_609 = ".";
  protected final String TEXT_610 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_611 = NL + "\t\t}";
  protected final String TEXT_612 = NL + "\t\tif (";
  protected final String TEXT_613 = ".";
  protected final String TEXT_614 = "().size() >= ";
  protected final String TEXT_615 = ".eINSTANCE.get";
  protected final String TEXT_616 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_617 = NL + "\t\t}";
  protected final String TEXT_618 = NL;
  protected final String TEXT_619 = NL + "\t\tif (";
  protected final String TEXT_620 = ".";
  protected final String TEXT_621 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_622 = NL + "\t\t}";
  protected final String TEXT_623 = NL + "\t\tif (";
  protected final String TEXT_624 = ".";
  protected final String TEXT_625 = "().size() >= ";
  protected final String TEXT_626 = ".eINSTANCE.get";
  protected final String TEXT_627 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_628 = NL + "\t\t}";
  protected final String TEXT_629 = NL;
  protected final String TEXT_630 = NL + "\t\t\tif(!";
  protected final String TEXT_631 = ".canCreateLink(";
  protected final String TEXT_632 = ", ";
  protected final String TEXT_633 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_634 = NL + "\t\t\treturn true;";
  protected final String TEXT_635 = NL;
  protected final String TEXT_636 = NL + "\t\tif (";
  protected final String TEXT_637 = ".";
  protected final String TEXT_638 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_639 = NL + "\t\t}";
  protected final String TEXT_640 = NL + "\t\tif (";
  protected final String TEXT_641 = ".";
  protected final String TEXT_642 = "().size() >= ";
  protected final String TEXT_643 = ".eINSTANCE.get";
  protected final String TEXT_644 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_645 = NL + "\t\t}";
  protected final String TEXT_646 = NL;
  protected final String TEXT_647 = NL + "\t\t\tif(!";
  protected final String TEXT_648 = ".canCreateLink(";
  protected final String TEXT_649 = ", ";
  protected final String TEXT_650 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_651 = NL + "\t\t\treturn true;";
  protected final String TEXT_652 = NL + "\t\t\treturn false;";
  protected final String TEXT_653 = NL + "\t\t}";
  protected final String TEXT_654 = NL;
  protected final String TEXT_655 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_656 = " getRelationshipContainer(";
  protected final String TEXT_657 = " element, ";
  protected final String TEXT_658 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_659 = NL + NL + "\t}";
  protected final String TEXT_660 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Reconnect";
  protected final String TEXT_661 = "TargetCommand extends ";
  protected final String TEXT_662 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_663 = " edge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_664 = " newTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_665 = " oldTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_666 = " reconnectCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_667 = "TargetCommand(";
  protected final String TEXT_668 = " request) {" + NL + "\t\t\tthis((";
  protected final String TEXT_669 = ")request.getConnectionEditPart().getModel(), (";
  protected final String TEXT_670 = ")request.getTarget().getModel());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Reconnect";
  protected final String TEXT_671 = "TargetCommand(";
  protected final String TEXT_672 = " edge, ";
  protected final String TEXT_673 = " newTarget) {" + NL + "\t\t\tthis.edge = edge;" + NL + "\t\t\tthis.newTarget = newTarget;" + NL + "\t\t\tthis.oldTarget = edge.getTarget();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\treconnectCommand.execute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn reconnectCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\treconnectCommand.undo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {";
  protected final String TEXT_674 = NL + "\t\t\tfinal boolean[] resultHolder = new boolean[1];" + NL + "\t\t\t//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion." + NL + "\t\t\tfinal ";
  protected final String TEXT_675 = " domainModelEditDomain = ";
  protected final String TEXT_676 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_677 = " command = new ";
  protected final String TEXT_678 = "() {" + NL + "\t\t\t\tprivate ";
  protected final String TEXT_679 = " deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);" + NL + "\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\treturn deleteCommand.canExecute();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void redo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t}" + NL + "\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\tdeleteCommand.execute();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tresultHolder[0] = canReconnect();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tdeleteCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tif (!command.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tnew WrappingCommand(domainModelEditDomain, command).execute();" + NL + "\t\t\tif (resultHolder[0]) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t}" + NL + "\t\t\treturn resultHolder[0] && reconnectCommand.canExecute();";
  protected final String TEXT_680 = NL + "\t\t\tif (canReconnect()) {" + NL + "\t\t\t\treconnectCommand = createReconnectCommand();" + NL + "\t\t\t\treturn reconnectCommand.canExecute();" + NL + "\t\t\t}" + NL + "\t\t\treturn false;";
  protected final String TEXT_681 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean canReconnect() {";
  protected final String TEXT_682 = NL;
  protected final String TEXT_683 = NL + "\t\t\tif(!";
  protected final String TEXT_684 = ".canCreateLink(";
  protected final String TEXT_685 = ", ";
  protected final String TEXT_686 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_687 = NL + "\t\t\treturn true;";
d710 48
a757 48
  protected final String TEXT_689 = NL + "\t\t\tif(!";
  protected final String TEXT_690 = ".canCreateLink(";
  protected final String TEXT_691 = ", ";
  protected final String TEXT_692 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_693 = NL + "\t\t\treturn true;";
  protected final String TEXT_694 = NL + "\t\t\treturn false;";
  protected final String TEXT_695 = NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_696 = " createReconnectCommand() {" + NL + "\t\t\t";
  protected final String TEXT_697 = " editingDomain = ";
  protected final String TEXT_698 = ".getEditingDomain(oldTarget.getDiagram().getElement());" + NL + "\t\t\t";
  protected final String TEXT_699 = " result = new ";
  protected final String TEXT_700 = "();" + NL + "\t\t\tresult.append(new ";
  protected final String TEXT_701 = "(edge, newTarget));";
  protected final String TEXT_702 = NL + "\t\t\tresult.append(";
  protected final String TEXT_703 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_704 = ".eINSTANCE.get";
  protected final String TEXT_705 = "()," + NL + "\t\t\t\toldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_706 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_707 = ".eINSTANCE.get";
  protected final String TEXT_708 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_709 = NL + "\t\t\tresult.append(";
  protected final String TEXT_710 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getElement(), ";
  protected final String TEXT_711 = ".eINSTANCE.get";
  protected final String TEXT_712 = "()," + NL + "\t\t\t\tnewTarget.getElement()));";
  protected final String TEXT_713 = NL + "\t\t\tresult.append(";
  protected final String TEXT_714 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_715 = ".eINSTANCE.get";
  protected final String TEXT_716 = "(), oldTarget.getElement()));" + NL + "\t\t\tresult.append(";
  protected final String TEXT_717 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_718 = ".eINSTANCE.get";
  protected final String TEXT_719 = "(), newTarget.getElement()));";
  protected final String TEXT_720 = NL + "\t\t\tresult.append(";
  protected final String TEXT_721 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge.getSource().getElement(), ";
  protected final String TEXT_722 = ".eINSTANCE.get";
  protected final String TEXT_723 = "(), newTarget.getElement()));";
  protected final String TEXT_724 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_725 = NL;
  protected final String TEXT_726 = NL + "\t\t\tprivate ";
  protected final String TEXT_727 = " createDomainModelRemoveCommand(";
  protected final String TEXT_728 = " editingDomain) {";
  protected final String TEXT_729 = NL + "\t\t\t\t";
  protected final String TEXT_730 = " result = new ";
  protected final String TEXT_731 = "();";
  protected final String TEXT_732 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_733 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_734 = ".getElement().eContainer(), ";
  protected final String TEXT_735 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_736 = ".getElement()));";
d759 3
a761 3
  protected final String TEXT_738 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_739 = ".getElement().eContainer(), ";
  protected final String TEXT_740 = ".getElement().eContainmentFeature(), ";
d763 8
a770 8
  protected final String TEXT_742 = NL + "\t\t\t\treturn ";
  protected final String TEXT_743 = ".INSTANCE;";
  protected final String TEXT_744 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_745 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_746 = ".getElement().eContainer(), ";
  protected final String TEXT_747 = ".eINSTANCE.get";
  protected final String TEXT_748 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_749 = ".getElement()));";
d772 14
a785 14
  protected final String TEXT_751 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_752 = ".getElement().eContainer(), ";
  protected final String TEXT_753 = ".eINSTANCE.get";
  protected final String TEXT_754 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_755 = ".UNSET_VALUE));";
  protected final String TEXT_756 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_757 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_758 = ".getElement(), ";
  protected final String TEXT_759 = ".eINSTANCE.get";
  protected final String TEXT_760 = "(), ";
  protected final String TEXT_761 = ".getSource().getElement()));";
  protected final String TEXT_762 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_763 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_764 = ".getElement(), ";
d787 18
a804 18
  protected final String TEXT_766 = "(), ";
  protected final String TEXT_767 = ".UNSET_VALUE));";
  protected final String TEXT_768 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_769 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_770 = ".getElement(), ";
  protected final String TEXT_771 = ".eINSTANCE.get";
  protected final String TEXT_772 = "(), ";
  protected final String TEXT_773 = ".getTarget().getElement()));";
  protected final String TEXT_774 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_775 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_776 = ".getElement(), ";
  protected final String TEXT_777 = ".eINSTANCE.get";
  protected final String TEXT_778 = "(), ";
  protected final String TEXT_779 = ".UNSET_VALUE));";
  protected final String TEXT_780 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_781 = NL + "\t\t\t\treturn ";
  protected final String TEXT_782 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_783 = ".getSource().getElement(), ";
d806 90
a895 90
  protected final String TEXT_785 = "(), ";
  protected final String TEXT_786 = ".getTarget().getElement());";
  protected final String TEXT_787 = NL + "\t\t\t\treturn ";
  protected final String TEXT_788 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_789 = ".getSource().getElement(), ";
  protected final String TEXT_790 = ".eINSTANCE.get";
  protected final String TEXT_791 = "(), ";
  protected final String TEXT_792 = ".UNSET_VALUE);";
  protected final String TEXT_793 = NL + "\t\t\t}";
  protected final String TEXT_794 = NL + "\t}" + NL;
  protected final String TEXT_795 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_796 = "Command extends ";
  protected final String TEXT_797 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_798 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_799 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_800 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_801 = "Command(";
  protected final String TEXT_802 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_803 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_804 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_805 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_806 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_807 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_808 = ".eINSTANCE.createEdge();";
  protected final String TEXT_809 = NL + "\t\t\t";
  protected final String TEXT_810 = " createdDomainElement = ";
  protected final String TEXT_811 = ".eINSTANCE.create";
  protected final String TEXT_812 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_813 = NL + "\t\t\t";
  protected final String TEXT_814 = ".";
  protected final String TEXT_815 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_816 = NL + "\t\t\tcreatedEdge.setElement(null);";
  protected final String TEXT_817 = NL + "\t\t\t";
  protected final String TEXT_818 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_819 = " domainModelEditDomain = ";
  protected final String TEXT_820 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_821 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_822 = NL + "\t\t\t";
  protected final String TEXT_823 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_824 = ".eINSTANCE.get";
  protected final String TEXT_825 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_826 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_827 = ".eINSTANCE.get";
  protected final String TEXT_828 = "(), createdDomainElement));";
  protected final String TEXT_829 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_830 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_831 = ".eINSTANCE.get";
  protected final String TEXT_832 = "(), createdDomainElement));";
  protected final String TEXT_833 = NL;
  protected final String TEXT_834 = NL + "\t\tif (";
  protected final String TEXT_835 = ".";
  protected final String TEXT_836 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_837 = NL + "\t\t}";
  protected final String TEXT_838 = NL + "\t\tif (";
  protected final String TEXT_839 = ".";
  protected final String TEXT_840 = "().size() >= ";
  protected final String TEXT_841 = ".eINSTANCE.get";
  protected final String TEXT_842 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_843 = NL + "\t\t}";
  protected final String TEXT_844 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_845 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_846 = ".eINSTANCE.get";
  protected final String TEXT_847 = "(), source.getElement()));";
  protected final String TEXT_848 = NL;
  protected final String TEXT_849 = NL + "\t\tif (";
  protected final String TEXT_850 = ".";
  protected final String TEXT_851 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_852 = NL + "\t\t}";
  protected final String TEXT_853 = NL + "\t\tif (";
  protected final String TEXT_854 = ".";
  protected final String TEXT_855 = "().size() >= ";
  protected final String TEXT_856 = ".eINSTANCE.get";
  protected final String TEXT_857 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_858 = NL + "\t\t}";
  protected final String TEXT_859 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_860 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_861 = ".eINSTANCE.get";
  protected final String TEXT_862 = "(), target.getElement()));";
  protected final String TEXT_863 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_864 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_865 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_866 = ".eINSTANCE.get";
  protected final String TEXT_867 = "(), target.getElement());";
  protected final String TEXT_868 = NL + "\t\t}" + NL;
  protected final String TEXT_869 = NL;
  protected final String TEXT_870 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_871 = " getRelationshipContainer(";
  protected final String TEXT_872 = " element, ";
  protected final String TEXT_873 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_874 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
d897 278
a1174 10
  protected final String TEXT_876 = NL + "\t\t\tif(!";
  protected final String TEXT_877 = ".canCreateLink(";
  protected final String TEXT_878 = ", ";
  protected final String TEXT_879 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_880 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_881 = NL;
  protected final String TEXT_882 = NL;
  protected final String TEXT_883 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_884 = NL + "}";
  protected final String TEXT_885 = NL;
d1186 2
d1195 2
d1238 1
d1245 6
d1255 1
d1261 7
d1271 12
d1330 8
d1382 10
d1393 1
a1393 1
    stringBuffer.append(TEXT_20);
d1395 1
a1395 1
    stringBuffer.append(TEXT_21);
d1397 1
a1397 1
    stringBuffer.append(TEXT_22);
d1399 1
a1399 1
    stringBuffer.append(TEXT_23);
d1401 1
a1401 1
    stringBuffer.append(TEXT_24);
d1403 1
a1403 1
    stringBuffer.append(TEXT_25);
d1405 1
a1405 1
    stringBuffer.append(TEXT_26);
d1407 1
a1407 1
    stringBuffer.append(TEXT_27);
d1409 1
a1409 1
    stringBuffer.append(TEXT_28);
d1411 1
a1411 1
    stringBuffer.append(TEXT_29);
d1419 1
a1419 1
    stringBuffer.append(TEXT_30);
d1421 1
a1421 1
    stringBuffer.append(TEXT_31);
d1423 1
a1423 1
    stringBuffer.append(TEXT_32);
d1427 1
a1427 1
    stringBuffer.append(TEXT_33);
d1429 1
a1429 1
    stringBuffer.append(TEXT_34);
d1431 1
a1431 1
    stringBuffer.append(TEXT_35);
d1433 1
a1433 1
    stringBuffer.append(TEXT_36);
d1437 1
a1437 1
    stringBuffer.append(TEXT_37);
d1439 1
a1439 1
    stringBuffer.append(TEXT_38);
d1441 1
a1441 1
    stringBuffer.append(TEXT_39);
d1443 1
a1443 1
    stringBuffer.append(TEXT_40);
d1445 1
a1445 1
    stringBuffer.append(TEXT_41);
d1452 1
a1452 1
    stringBuffer.append(TEXT_42);
d1454 1
a1454 1
    stringBuffer.append(TEXT_43);
d1456 1
a1456 1
    stringBuffer.append(TEXT_44);
d1458 1
a1458 1
    stringBuffer.append(TEXT_45);
d1462 1
a1462 1
    stringBuffer.append(TEXT_46);
d1464 1
a1464 1
    stringBuffer.append(TEXT_47);
d1466 1
a1466 1
    stringBuffer.append(TEXT_48);
d1468 1
a1468 1
    stringBuffer.append(TEXT_49);
d1470 1
a1470 1
    stringBuffer.append(TEXT_50);
d1474 1
a1474 1
    stringBuffer.append(TEXT_51);
d1479 1
a1479 1
    stringBuffer.append(TEXT_52);
d1481 1
a1481 1
    stringBuffer.append(TEXT_53);
d1483 1
a1483 1
    stringBuffer.append(TEXT_54);
d1485 1
a1485 1
    stringBuffer.append(TEXT_55);
d1489 1
a1489 1
    stringBuffer.append(TEXT_56);
d1491 1
a1491 1
    stringBuffer.append(TEXT_57);
d1493 1
a1493 1
    stringBuffer.append(TEXT_58);
d1495 1
a1495 1
    stringBuffer.append(TEXT_59);
d1497 1
a1497 1
    stringBuffer.append(TEXT_60);
d1502 1
a1502 1
    stringBuffer.append(TEXT_61);
d1506 1
a1506 1
    stringBuffer.append(TEXT_62);
d1508 1
a1508 1
    stringBuffer.append(TEXT_63);
d1510 1
a1510 1
    stringBuffer.append(TEXT_64);
d1512 1
a1512 1
    stringBuffer.append(TEXT_65);
d1514 1
a1514 1
    stringBuffer.append(TEXT_66);
d1516 1
a1516 1
    stringBuffer.append(TEXT_67);
d1518 1
a1518 1
    stringBuffer.append(TEXT_68);
d1520 1
a1520 1
    stringBuffer.append(TEXT_69);
d1522 1
a1522 1
    stringBuffer.append(TEXT_70);
d1524 1
a1524 1
    stringBuffer.append(TEXT_71);
d1526 1
a1526 1
    stringBuffer.append(TEXT_72);
d1528 1
a1528 1
    stringBuffer.append(TEXT_73);
d1530 1
a1530 1
    stringBuffer.append(TEXT_74);
d1532 1
a1532 1
    stringBuffer.append(TEXT_75);
d1534 1
a1534 1
    stringBuffer.append(TEXT_76);
d1536 1
a1536 1
    stringBuffer.append(TEXT_77);
d1538 1
a1538 1
    stringBuffer.append(TEXT_78);
d1540 1
a1540 1
    stringBuffer.append(TEXT_79);
d1542 1
a1542 1
    stringBuffer.append(TEXT_80);
d1544 1
a1544 1
    stringBuffer.append(TEXT_81);
d1546 1
a1546 1
    stringBuffer.append(TEXT_82);
d1548 1
a1548 1
    stringBuffer.append(TEXT_83);
d1552 1
a1552 1
    stringBuffer.append(TEXT_84);
d1554 1
a1554 1
    stringBuffer.append(TEXT_85);
d1558 1
a1558 1
    stringBuffer.append(TEXT_86);
d1560 1
a1560 1
    stringBuffer.append(TEXT_87);
d1562 1
a1562 1
    stringBuffer.append(TEXT_88);
d1564 1
a1564 1
    stringBuffer.append(TEXT_89);
d1566 1
a1566 1
    stringBuffer.append(TEXT_90);
d1568 1
a1568 1
    stringBuffer.append(TEXT_91);
d1570 1
a1570 1
    stringBuffer.append(TEXT_92);
d1572 1
a1572 1
    stringBuffer.append(TEXT_93);
d1574 1
a1574 1
    stringBuffer.append(TEXT_94);
d1576 1
a1576 1
    stringBuffer.append(TEXT_95);
d1578 1
a1578 1
    stringBuffer.append(TEXT_96);
d1602 1
a1602 1
    stringBuffer.append(TEXT_97);
d1604 1
a1604 1
    stringBuffer.append(TEXT_98);
d1607 1
a1607 1
    stringBuffer.append(TEXT_99);
d1611 1
a1611 1
    stringBuffer.append(TEXT_100);
d1613 1
a1613 1
    stringBuffer.append(TEXT_101);
d1615 1
a1615 1
    stringBuffer.append(TEXT_102);
d1619 1
a1619 1
    stringBuffer.append(TEXT_103);
d1621 1
a1621 1
    stringBuffer.append(TEXT_104);
d1623 1
a1623 1
    stringBuffer.append(TEXT_105);
d1627 1
a1627 1
    stringBuffer.append(TEXT_106);
d1629 1
a1629 1
    stringBuffer.append(TEXT_107);
d1633 1
a1633 1
    stringBuffer.append(TEXT_108);
d1635 1
a1635 1
    stringBuffer.append(TEXT_109);
d1637 1
a1637 1
    stringBuffer.append(TEXT_110);
d1639 1
a1639 1
    stringBuffer.append(TEXT_111);
d1641 1
a1641 1
    stringBuffer.append(TEXT_112);
d1643 1
a1643 1
    stringBuffer.append(TEXT_113);
d1645 1
a1645 1
    stringBuffer.append(TEXT_114);
d1647 1
a1647 1
    stringBuffer.append(TEXT_115);
d1649 1
a1649 1
    stringBuffer.append(TEXT_116);
d1651 1
a1651 1
    stringBuffer.append(TEXT_117);
d1653 1
a1653 1
    stringBuffer.append(TEXT_118);
d1679 1
a1679 1
    stringBuffer.append(TEXT_119);
d1681 1
a1681 1
    stringBuffer.append(TEXT_120);
d1684 1
a1684 1
    stringBuffer.append(TEXT_121);
d1688 1
a1688 1
    stringBuffer.append(TEXT_122);
d1690 1
a1690 1
    stringBuffer.append(TEXT_123);
d1692 1
a1692 1
    stringBuffer.append(TEXT_124);
d1696 1
a1696 1
    stringBuffer.append(TEXT_125);
d1698 1
a1698 1
    stringBuffer.append(TEXT_126);
d1700 1
a1700 1
    stringBuffer.append(TEXT_127);
d1702 1
a1702 1
    stringBuffer.append(TEXT_128);
d1704 1
a1704 1
    stringBuffer.append(TEXT_129);
d1706 1
a1706 1
    stringBuffer.append(TEXT_130);
d1708 1
a1708 1
    stringBuffer.append(TEXT_131);
d1710 1
a1710 1
    stringBuffer.append(TEXT_132);
d1712 1
a1712 1
    stringBuffer.append(TEXT_133);
d1738 1
a1738 1
    stringBuffer.append(TEXT_134);
d1740 1
a1740 1
    stringBuffer.append(TEXT_135);
d1743 1
a1743 1
    stringBuffer.append(TEXT_136);
d1747 1
a1747 1
    stringBuffer.append(TEXT_137);
d1749 1
a1749 1
    stringBuffer.append(TEXT_138);
d1751 1
a1751 1
    stringBuffer.append(TEXT_139);
d1753 1
a1753 1
    stringBuffer.append(TEXT_140);
d1755 1
a1755 1
    stringBuffer.append(TEXT_141);
d1757 1
a1757 1
    stringBuffer.append(TEXT_142);
d1759 1
a1759 1
    stringBuffer.append(TEXT_143);
d1761 1
a1761 1
    stringBuffer.append(TEXT_144);
d1763 1
a1763 1
    stringBuffer.append(TEXT_145);
d1765 1
a1765 1
    stringBuffer.append(TEXT_146);
d1767 1
a1767 1
    stringBuffer.append(TEXT_147);
d1769 1
a1769 1
    stringBuffer.append(TEXT_148);
d1771 1
a1771 1
    stringBuffer.append(TEXT_149);
d1795 1
a1795 1
    stringBuffer.append(TEXT_150);
d1797 1
a1797 1
    stringBuffer.append(TEXT_151);
d1800 1
a1800 1
    stringBuffer.append(TEXT_152);
d1804 1
a1804 1
    stringBuffer.append(TEXT_153);
d1806 1
a1806 1
    stringBuffer.append(TEXT_154);
d1808 1
a1808 1
    stringBuffer.append(TEXT_155);
d1810 1
a1810 1
    stringBuffer.append(TEXT_156);
d1812 9
a1820 1
    stringBuffer.append(TEXT_157);
d1822 1
a1822 1
    stringBuffer.append(TEXT_158);
d1824 1
a1824 1
    stringBuffer.append(TEXT_159);
d1826 1
a1826 1
    stringBuffer.append(TEXT_160);
d1828 1
a1828 1
    stringBuffer.append(TEXT_161);
d1830 1
a1830 1
    stringBuffer.append(TEXT_162);
d1832 1
a1832 1
    stringBuffer.append(TEXT_163);
d1834 1
a1834 1
    stringBuffer.append(TEXT_164);
d1844 1
a1844 1
    stringBuffer.append(TEXT_165);
d1846 1
a1846 1
    stringBuffer.append(TEXT_166);
d1848 1
a1848 1
    stringBuffer.append(TEXT_167);
d1850 1
a1850 1
    stringBuffer.append(TEXT_168);
d1852 1
a1852 1
    stringBuffer.append(TEXT_169);
d1854 1
a1854 1
    stringBuffer.append(TEXT_170);
d1858 1
a1858 1
    stringBuffer.append(TEXT_171);
d1860 1
a1860 1
    stringBuffer.append(TEXT_172);
d1862 1
a1862 1
    stringBuffer.append(TEXT_173);
d1864 1
a1864 1
    stringBuffer.append(TEXT_174);
d1866 1
a1866 1
    stringBuffer.append(TEXT_175);
d1868 1
a1868 1
    stringBuffer.append(TEXT_176);
d1870 1
a1870 1
    stringBuffer.append(TEXT_177);
d1872 1
a1872 1
    stringBuffer.append(TEXT_178);
d1874 1
a1874 1
    stringBuffer.append(TEXT_179);
d1876 1
a1876 1
    stringBuffer.append(TEXT_180);
d1878 1
a1878 1
    stringBuffer.append(TEXT_181);
d1880 1
a1880 1
    stringBuffer.append(TEXT_182);
d1882 1
a1882 1
    stringBuffer.append(TEXT_183);
d1884 1
a1884 1
    stringBuffer.append(TEXT_184);
d1886 1
a1886 1
    stringBuffer.append(TEXT_185);
d1888 1
a1888 1
    stringBuffer.append(TEXT_186);
d1890 1
a1890 1
    stringBuffer.append(TEXT_187);
d1892 1
a1892 1
    stringBuffer.append(TEXT_188);
d1894 1
a1894 1
    stringBuffer.append(TEXT_189);
d1896 1
a1896 1
    stringBuffer.append(TEXT_190);
d1898 1
a1898 1
    stringBuffer.append(TEXT_191);
d1900 1
a1900 1
    stringBuffer.append(TEXT_192);
d1902 1
a1902 1
    stringBuffer.append(TEXT_193);
d1904 1
a1904 1
    stringBuffer.append(TEXT_194);
d1909 1
a1909 1
    stringBuffer.append(TEXT_195);
d1911 1
a1911 1
    stringBuffer.append(TEXT_196);
d1913 1
a1913 1
    stringBuffer.append(TEXT_197);
d1915 1
a1915 1
    stringBuffer.append(TEXT_198);
d1917 1
a1917 1
    stringBuffer.append(TEXT_199);
d1919 1
a1919 1
    stringBuffer.append(TEXT_200);
d1921 1
a1921 1
    stringBuffer.append(TEXT_201);
d1923 1
a1923 1
    stringBuffer.append(TEXT_202);
d1925 1
a1925 1
    stringBuffer.append(TEXT_203);
d1927 1
a1927 1
    stringBuffer.append(TEXT_204);
d1929 1
a1929 1
    stringBuffer.append(TEXT_205);
d1933 1
a1933 1
    stringBuffer.append(TEXT_206);
d1935 1
a1935 1
    stringBuffer.append(TEXT_207);
d1943 1
a1943 1
    stringBuffer.append(TEXT_208);
d1945 1
a1945 1
    stringBuffer.append(TEXT_209);
d1947 1
a1947 1
    stringBuffer.append(TEXT_210);
d1949 1
a1949 1
    stringBuffer.append(TEXT_211);
d1951 1
a1951 1
    stringBuffer.append(TEXT_212);
d1960 1
a1960 1
    stringBuffer.append(TEXT_213);
d1962 1
a1962 1
    stringBuffer.append(TEXT_214);
d1964 1
a1964 1
    stringBuffer.append(TEXT_215);
d1966 1
a1966 1
    stringBuffer.append(TEXT_216);
d1968 1
a1968 1
    stringBuffer.append(TEXT_217);
d1972 1
a1972 1
    stringBuffer.append(TEXT_218);
d1980 1
a1980 1
    stringBuffer.append(TEXT_219);
d1982 1
a1982 1
    stringBuffer.append(TEXT_220);
d1984 1
a1984 1
    stringBuffer.append(TEXT_221);
d1986 1
a1986 1
    stringBuffer.append(TEXT_222);
d1988 1
a1988 1
    stringBuffer.append(TEXT_223);
d1992 1
a1992 1
    stringBuffer.append(TEXT_224);
d1996 1
a1996 1
    stringBuffer.append(TEXT_225);
d1998 1
a1998 1
    stringBuffer.append(TEXT_226);
d2010 1
a2010 1
    stringBuffer.append(TEXT_227);
d2012 1
a2012 1
    stringBuffer.append(TEXT_228);
d2014 1
a2014 1
    stringBuffer.append(TEXT_229);
d2016 1
a2016 1
    stringBuffer.append(TEXT_230);
d2018 1
a2018 1
    stringBuffer.append(TEXT_231);
d2020 1
a2020 1
    stringBuffer.append(TEXT_232);
d2022 1
a2022 1
    stringBuffer.append(TEXT_233);
d2026 1
a2026 1
    stringBuffer.append(TEXT_234);
d2028 1
a2028 1
    stringBuffer.append(TEXT_235);
d2030 1
a2030 1
    stringBuffer.append(TEXT_236);
d2032 1
a2032 1
    stringBuffer.append(TEXT_237);
d2034 1
a2034 1
    stringBuffer.append(TEXT_238);
d2036 1
a2036 1
    stringBuffer.append(TEXT_239);
d2038 1
a2038 1
    stringBuffer.append(TEXT_240);
d2040 1
a2040 1
    stringBuffer.append(TEXT_241);
d2042 1
a2042 1
    stringBuffer.append(TEXT_242);
d2044 1
a2044 1
    stringBuffer.append(TEXT_243);
d2046 1
a2046 1
    stringBuffer.append(TEXT_244);
d2048 1
a2048 1
    stringBuffer.append(TEXT_245);
d2056 1
a2056 1
    stringBuffer.append(TEXT_246);
d2058 1
a2058 1
    stringBuffer.append(TEXT_247);
d2062 1
a2062 1
    stringBuffer.append(TEXT_248);
d2066 1
a2066 1
    stringBuffer.append(TEXT_249);
d2068 1
a2068 1
    stringBuffer.append(TEXT_250);
d2073 1
a2073 1
    stringBuffer.append(TEXT_251);
d2075 1
a2075 1
    stringBuffer.append(TEXT_252);
d2079 1
a2079 1
    stringBuffer.append(TEXT_253);
d2081 1
a2081 1
    stringBuffer.append(TEXT_254);
d2083 1
a2083 1
    stringBuffer.append(TEXT_255);
d2085 1
a2085 1
    stringBuffer.append(TEXT_256);
d2087 1
a2087 1
    stringBuffer.append(TEXT_257);
d2092 1
a2092 1
    stringBuffer.append(TEXT_258);
d2094 1
a2094 1
    stringBuffer.append(TEXT_259);
d2098 1
a2098 1
    stringBuffer.append(TEXT_260);
d2100 1
a2100 1
    stringBuffer.append(TEXT_261);
d2102 1
a2102 1
    stringBuffer.append(TEXT_262);
d2107 1
a2107 1
    stringBuffer.append(TEXT_263);
d2111 1
a2111 1
    stringBuffer.append(TEXT_264);
d2113 1
a2113 1
    stringBuffer.append(TEXT_265);
d2117 1
a2117 1
    stringBuffer.append(TEXT_266);
d2119 1
a2119 1
    stringBuffer.append(TEXT_267);
d2121 1
a2121 1
    stringBuffer.append(TEXT_268);
d2126 1
a2126 1
    stringBuffer.append(TEXT_269);
d2130 1
a2130 1
    stringBuffer.append(TEXT_270);
d2137 1
a2137 1
    stringBuffer.append(TEXT_271);
d2139 1
a2139 1
    stringBuffer.append(TEXT_272);
d2141 1
a2141 1
    stringBuffer.append(TEXT_273);
d2143 1
a2143 1
    stringBuffer.append(TEXT_274);
d2145 1
a2145 1
    stringBuffer.append(TEXT_275);
d2149 1
a2149 1
    stringBuffer.append(TEXT_276);
d2151 1
a2151 1
    stringBuffer.append(TEXT_277);
d2153 1
a2153 1
    stringBuffer.append(TEXT_278);
d2155 1
a2155 1
    stringBuffer.append(TEXT_279);
d2157 1
a2157 1
    stringBuffer.append(TEXT_280);
d2159 1
a2159 1
    stringBuffer.append(TEXT_281);
d2161 1
a2161 1
    stringBuffer.append(TEXT_282);
d2163 1
a2163 1
    stringBuffer.append(TEXT_283);
d2165 1
a2165 1
    stringBuffer.append(TEXT_284);
d2167 1
a2167 1
    stringBuffer.append(TEXT_285);
d2169 1
a2169 1
    stringBuffer.append(TEXT_286);
d2171 1
a2171 1
    stringBuffer.append(TEXT_287);
d2173 1
a2173 1
    stringBuffer.append(TEXT_288);
d2175 1
a2175 1
    stringBuffer.append(TEXT_289);
d2177 1
a2177 1
    stringBuffer.append(TEXT_290);
d2179 1
a2179 1
    stringBuffer.append(TEXT_291);
d2181 1
a2181 1
    stringBuffer.append(TEXT_292);
d2183 1
a2183 1
    stringBuffer.append(TEXT_293);
d2185 1
a2185 1
    stringBuffer.append(TEXT_294);
d2187 1
a2187 1
    stringBuffer.append(TEXT_295);
d2189 1
a2189 1
    stringBuffer.append(TEXT_296);
d2191 1
a2191 1
    stringBuffer.append(TEXT_297);
a2192 12
    stringBuffer.append(TEXT_298);
    stringBuffer.append(TEXT_299);
    stringBuffer.append(TEXT_300);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
    stringBuffer.append(TEXT_301);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_302);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_303);
    stringBuffer.append(TEXT_304);
    stringBuffer.append(TEXT_305);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d2194 3
a2196 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d2198 3
a2200 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d2203 1
a2203 1
	final String primaryView = "getDiagramNode()";
a2206 4
boolean isFixedFontSetInFigure;
{
	StyleAttributes styleAttributes = (genElement.getViewmap() == null) ? null : (StyleAttributes)genElement.getViewmap().find(StyleAttributes.class);
	isFixedFontSetInFigure = styleAttributes != null && styleAttributes.isFixedFont();
d2211 5
a2215 1
if (!isFixedFontSetInFigure) {
d2218 3
a2220 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d2222 1
a2222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d2224 1
a2224 1
    stringBuffer.append(primaryView);
d2226 1
a2226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2228 1
a2228 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d2230 1
a2230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d2232 1
a2232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d2234 12
a2245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d2247 1
a2247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d2249 1
a2249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d2251 1
a2251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d2254 2
a2255 1
}
d2258 1
a2258 3
    
if (!isFixedFontSetInFigure) {

d2260 1
a2260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d2262 1
a2262 3
    
}

d2264 1
d2266 1
d2268 1
a2268 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d2270 1
a2270 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d2272 1
a2272 1
    stringBuffer.append(primaryView);
d2274 1
a2274 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2276 3
a2278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d2280 12
a2291 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d2293 13
a2305 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d2307 1
a2307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d2309 1
a2309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d2311 1
a2311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d2313 3
a2315 1
    stringBuffer.append(primaryView);
d2317 1
a2317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2319 1
a2319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d2321 1
a2321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d2323 6
a2328 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d2330 13
a2342 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d2344 1
d2346 1
d2348 1
a2348 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d2350 3
a2352 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d2354 1
a2354 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d2356 1
a2356 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d2358 1
d2360 6
d2367 13
a2379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2381 1
a2381 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2383 1
d2385 1
d2387 3
a2389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2391 1
a2391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2393 1
a2393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2395 1
a2395 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2397 9
a2405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2407 13
d2421 1
d2423 1
a2423 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d2425 1
d2427 3
d2431 706
d3138 3
a3140 3
    stringBuffer.append(TEXT_367);
    stringBuffer.append(TEXT_368);
    stringBuffer.append(TEXT_369);
d3142 1
a3142 3
    stringBuffer.append(TEXT_370);
    stringBuffer.append(TEXT_371);
    stringBuffer.append(TEXT_372);
d3144 1
a3144 1
    stringBuffer.append(TEXT_373);
d3146 1
a3146 1
    stringBuffer.append(TEXT_374);
d3148 3
a3150 1
    stringBuffer.append(TEXT_375);
d3152 1
a3152 3
    stringBuffer.append(TEXT_376);
    stringBuffer.append(TEXT_377);
    stringBuffer.append(TEXT_378);
d3154 1
a3154 3
    stringBuffer.append(TEXT_379);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_380);
d3182 1
a3182 1
    stringBuffer.append(TEXT_381);
d3185 1
a3185 1
    stringBuffer.append(TEXT_382);
d3187 1
a3187 1
    stringBuffer.append(TEXT_383);
d3189 1
a3189 1
    stringBuffer.append(TEXT_384);
d3191 1
a3191 1
    stringBuffer.append(TEXT_385);
d3193 1
a3193 1
    stringBuffer.append(TEXT_386);
d3195 1
a3195 1
    stringBuffer.append(TEXT_387);
d3198 1
a3198 1
    stringBuffer.append(TEXT_388);
d3200 1
a3200 1
    stringBuffer.append(TEXT_389);
d3202 1
a3202 1
    stringBuffer.append(TEXT_390);
d3204 1
a3204 1
    stringBuffer.append(TEXT_391);
d3207 1
a3207 1
    stringBuffer.append(TEXT_392);
d3209 1
a3209 1
    stringBuffer.append(TEXT_393);
d3211 1
a3211 1
    stringBuffer.append(TEXT_394);
d3215 1
a3215 1
    stringBuffer.append(TEXT_395);
d3217 1
a3217 1
    stringBuffer.append(TEXT_396);
d3219 1
a3219 1
    stringBuffer.append(TEXT_397);
d3221 1
a3221 1
    stringBuffer.append(TEXT_398);
d3223 1
a3223 1
    stringBuffer.append(TEXT_399);
d3225 1
a3225 1
    stringBuffer.append(TEXT_400);
d3229 1
a3229 1
    stringBuffer.append(TEXT_401);
d3233 1
a3233 1
    stringBuffer.append(TEXT_402);
d3240 1
a3240 1
    stringBuffer.append(TEXT_403);
d3244 1
a3244 1
    stringBuffer.append(TEXT_404);
d3246 1
a3246 1
    stringBuffer.append(TEXT_405);
d3248 1
a3248 1
    stringBuffer.append(TEXT_406);
d3250 1
a3250 1
    stringBuffer.append(TEXT_407);
d3252 1
a3252 1
    stringBuffer.append(TEXT_408);
d3259 1
a3259 1
    stringBuffer.append(TEXT_409);
d3265 1
a3265 1
    stringBuffer.append(TEXT_410);
d3267 1
a3267 1
    stringBuffer.append(TEXT_411);
d3269 1
a3269 1
    stringBuffer.append(TEXT_412);
d3271 1
a3271 1
    stringBuffer.append(TEXT_413);
d3275 1
a3275 1
    stringBuffer.append(TEXT_414);
d3277 1
a3277 1
    stringBuffer.append(TEXT_415);
d3279 1
a3279 1
    stringBuffer.append(TEXT_416);
d3281 1
a3281 1
    stringBuffer.append(TEXT_417);
d3283 1
a3283 1
    stringBuffer.append(TEXT_418);
d3285 1
a3285 1
    stringBuffer.append(TEXT_419);
d3299 1
a3299 1
    stringBuffer.append(TEXT_420);
d3305 1
a3305 1
    stringBuffer.append(TEXT_421);
d3307 1
a3307 1
    stringBuffer.append(TEXT_422);
d3309 1
a3309 1
    stringBuffer.append(TEXT_423);
d3311 1
a3311 1
    stringBuffer.append(TEXT_424);
d3315 1
a3315 1
    stringBuffer.append(TEXT_425);
d3317 1
a3317 1
    stringBuffer.append(TEXT_426);
d3319 1
a3319 1
    stringBuffer.append(TEXT_427);
d3321 1
a3321 1
    stringBuffer.append(TEXT_428);
d3323 1
a3323 1
    stringBuffer.append(TEXT_429);
d3325 1
a3325 1
    stringBuffer.append(TEXT_430);
d3339 1
a3339 1
    stringBuffer.append(TEXT_431);
d3343 1
a3343 1
    stringBuffer.append(TEXT_432);
d3345 1
a3345 1
    stringBuffer.append(TEXT_433);
d3347 1
a3347 1
    stringBuffer.append(TEXT_434);
d3349 1
a3349 1
    stringBuffer.append(TEXT_435);
d3356 1
a3356 1
    stringBuffer.append(TEXT_436);
d3365 1
a3365 1
    stringBuffer.append(TEXT_437);
d3371 1
a3371 1
    stringBuffer.append(TEXT_438);
d3373 1
a3373 1
    stringBuffer.append(TEXT_439);
d3375 1
a3375 1
    stringBuffer.append(TEXT_440);
d3377 1
a3377 1
    stringBuffer.append(TEXT_441);
d3381 1
a3381 1
    stringBuffer.append(TEXT_442);
d3383 1
a3383 1
    stringBuffer.append(TEXT_443);
d3385 1
a3385 1
    stringBuffer.append(TEXT_444);
d3387 1
a3387 1
    stringBuffer.append(TEXT_445);
d3389 1
a3389 1
    stringBuffer.append(TEXT_446);
d3391 1
a3391 1
    stringBuffer.append(TEXT_447);
d3402 1
a3402 1
    stringBuffer.append(TEXT_448);
d3406 1
a3406 1
    stringBuffer.append(TEXT_449);
d3408 1
a3408 1
    stringBuffer.append(TEXT_450);
d3410 1
a3410 1
    stringBuffer.append(TEXT_451);
d3412 1
a3412 1
    stringBuffer.append(TEXT_452);
d3419 1
a3419 1
    stringBuffer.append(TEXT_453);
d3423 1
a3423 1
    stringBuffer.append(TEXT_454);
d3427 1
a3427 1
    stringBuffer.append(TEXT_455);
d3429 1
a3429 1
    stringBuffer.append(TEXT_456);
d3431 1
a3431 1
    stringBuffer.append(TEXT_457);
d3433 1
a3433 1
    stringBuffer.append(TEXT_458);
d3435 1
a3435 1
    stringBuffer.append(TEXT_459);
d3437 1
a3437 1
    stringBuffer.append(TEXT_460);
d3439 1
a3439 1
    stringBuffer.append(TEXT_461);
d3458 1
a3458 1
    stringBuffer.append(TEXT_462);
d3460 1
a3460 1
    stringBuffer.append(TEXT_463);
d3462 1
a3462 1
    stringBuffer.append(TEXT_464);
d3464 1
a3464 1
    stringBuffer.append(TEXT_465);
d3466 1
a3466 1
    stringBuffer.append(TEXT_466);
d3468 1
a3468 1
    stringBuffer.append(TEXT_467);
d3470 1
a3470 1
    stringBuffer.append(TEXT_468);
d3476 1
a3476 1
    stringBuffer.append(TEXT_469);
d3478 1
a3478 1
    stringBuffer.append(TEXT_470);
d3482 1
a3482 1
    stringBuffer.append(TEXT_471);
d3484 1
a3484 1
    stringBuffer.append(TEXT_472);
d3486 1
a3486 1
    stringBuffer.append(TEXT_473);
d3490 1
a3490 1
    stringBuffer.append(TEXT_474);
d3492 1
a3492 1
    stringBuffer.append(TEXT_475);
d3494 1
a3494 1
    stringBuffer.append(TEXT_476);
d3496 1
a3496 1
    stringBuffer.append(TEXT_477);
d3502 1
a3502 1
    stringBuffer.append(TEXT_478);
d3504 1
a3504 1
    stringBuffer.append(TEXT_479);
d3506 1
a3506 1
    stringBuffer.append(TEXT_480);
d3508 1
a3508 1
    stringBuffer.append(TEXT_481);
d3512 1
a3512 1
    stringBuffer.append(TEXT_482);
d3514 1
a3514 1
    stringBuffer.append(TEXT_483);
d3516 1
a3516 1
    stringBuffer.append(TEXT_484);
d3518 1
a3518 1
    stringBuffer.append(TEXT_485);
d3520 1
a3520 1
    stringBuffer.append(TEXT_486);
d3524 1
a3524 1
    stringBuffer.append(TEXT_487);
d3526 1
a3526 1
    stringBuffer.append(TEXT_488);
d3528 1
a3528 1
    stringBuffer.append(TEXT_489);
d3530 1
a3530 1
    stringBuffer.append(TEXT_490);
d3534 1
a3534 1
    stringBuffer.append(TEXT_491);
d3539 1
a3539 1
    stringBuffer.append(TEXT_492);
d3541 1
a3541 1
    stringBuffer.append(TEXT_493);
d3543 1
a3543 1
    stringBuffer.append(TEXT_494);
d3545 1
a3545 1
    stringBuffer.append(TEXT_495);
d3547 1
a3547 1
    stringBuffer.append(TEXT_496);
d3549 1
a3549 1
    stringBuffer.append(TEXT_497);
d3551 1
a3551 1
    stringBuffer.append(TEXT_498);
d3555 1
a3555 1
    stringBuffer.append(TEXT_499);
d3557 1
a3557 1
    stringBuffer.append(TEXT_500);
d3559 1
a3559 1
    stringBuffer.append(TEXT_501);
d3561 1
a3561 1
    stringBuffer.append(TEXT_502);
d3569 1
a3569 1
    stringBuffer.append(TEXT_503);
d3571 1
a3571 1
    stringBuffer.append(TEXT_504);
d3573 1
a3573 1
    stringBuffer.append(TEXT_505);
d3575 1
a3575 1
    stringBuffer.append(TEXT_506);
d3577 1
a3577 1
    stringBuffer.append(TEXT_507);
d3579 1
a3579 1
    stringBuffer.append(TEXT_508);
d3581 1
a3581 1
    stringBuffer.append(TEXT_509);
d3585 1
a3585 1
    stringBuffer.append(TEXT_510);
d3587 1
a3587 1
    stringBuffer.append(TEXT_511);
d3589 1
a3589 1
    stringBuffer.append(TEXT_512);
d3591 1
a3591 1
    stringBuffer.append(TEXT_513);
d3593 1
a3593 1
    stringBuffer.append(TEXT_514);
d3595 1
a3595 1
    stringBuffer.append(TEXT_515);
d3597 1
a3597 1
    stringBuffer.append(TEXT_516);
d3599 1
a3599 1
    stringBuffer.append(TEXT_517);
d3604 2
a3605 2
    stringBuffer.append(TEXT_518);
    stringBuffer.append(TEXT_519);
d3609 1
a3609 1
    stringBuffer.append(TEXT_520);
d3611 1
a3611 1
    stringBuffer.append(TEXT_521);
d3613 1
a3613 1
    stringBuffer.append(TEXT_522);
d3615 1
a3615 1
    stringBuffer.append(TEXT_523);
d3623 1
a3623 1
    stringBuffer.append(TEXT_524);
d3627 1
a3627 1
    stringBuffer.append(TEXT_525);
d3629 1
a3629 1
    stringBuffer.append(TEXT_526);
d3631 1
a3631 1
    stringBuffer.append(TEXT_527);
d3658 1
a3658 1
    stringBuffer.append(TEXT_528);
d3660 1
a3660 1
    stringBuffer.append(TEXT_529);
d3662 1
a3662 1
    stringBuffer.append(TEXT_530);
d3666 1
a3666 1
    stringBuffer.append(TEXT_531);
d3668 1
a3668 1
    stringBuffer.append(TEXT_532);
d3670 1
a3670 1
    stringBuffer.append(TEXT_533);
d3672 1
a3672 1
    stringBuffer.append(TEXT_534);
d3674 1
a3674 1
    stringBuffer.append(TEXT_535);
d3678 1
a3678 1
    stringBuffer.append(TEXT_536);
d3680 1
a3680 1
    stringBuffer.append(TEXT_537);
d3682 1
a3682 1
    stringBuffer.append(TEXT_538);
d3684 1
a3684 1
    stringBuffer.append(TEXT_539);
d3686 1
a3686 1
    stringBuffer.append(TEXT_540);
d3691 1
a3691 1
    stringBuffer.append(TEXT_541);
d3693 1
a3693 1
    stringBuffer.append(TEXT_542);
d3699 1
a3699 1
    stringBuffer.append(TEXT_543);
d3701 1
a3701 1
    stringBuffer.append(TEXT_544);
d3703 1
a3703 1
    stringBuffer.append(TEXT_545);
d3705 1
a3705 1
    stringBuffer.append(TEXT_546);
d3707 1
a3707 1
    stringBuffer.append(TEXT_547);
d3709 1
a3709 1
    stringBuffer.append(TEXT_548);
d3713 1
a3713 1
    stringBuffer.append(TEXT_549);
d3715 1
a3715 1
    stringBuffer.append(TEXT_550);
d3717 1
a3717 1
    stringBuffer.append(TEXT_551);
d3719 1
a3719 1
    stringBuffer.append(TEXT_552);
d3721 1
a3721 1
    stringBuffer.append(TEXT_553);
d3723 1
a3723 1
    stringBuffer.append(TEXT_554);
d3730 1
a3730 1
    stringBuffer.append(TEXT_555);
d3732 1
a3732 1
    stringBuffer.append(TEXT_556);
d3734 1
a3734 1
    stringBuffer.append(TEXT_557);
d3736 1
a3736 1
    stringBuffer.append(TEXT_558);
d3738 1
a3738 1
    stringBuffer.append(TEXT_559);
d3740 1
a3740 1
    stringBuffer.append(TEXT_560);
d3744 1
a3744 1
    stringBuffer.append(TEXT_561);
d3746 1
a3746 1
    stringBuffer.append(TEXT_562);
d3748 1
a3748 1
    stringBuffer.append(TEXT_563);
d3750 1
a3750 1
    stringBuffer.append(TEXT_564);
d3752 1
a3752 1
    stringBuffer.append(TEXT_565);
d3754 1
a3754 1
    stringBuffer.append(TEXT_566);
d3761 1
a3761 1
    stringBuffer.append(TEXT_567);
d3763 1
a3763 1
    stringBuffer.append(TEXT_568);
d3765 1
a3765 1
    stringBuffer.append(TEXT_569);
d3767 1
a3767 1
    stringBuffer.append(TEXT_570);
d3769 1
a3769 1
    stringBuffer.append(TEXT_571);
d3771 1
a3771 1
    stringBuffer.append(TEXT_572);
d3775 1
a3775 1
    stringBuffer.append(TEXT_573);
d3777 1
a3777 1
    stringBuffer.append(TEXT_574);
d3779 1
a3779 1
    stringBuffer.append(TEXT_575);
d3781 1
a3781 1
    stringBuffer.append(TEXT_576);
d3783 1
a3783 1
    stringBuffer.append(TEXT_577);
d3785 1
a3785 1
    stringBuffer.append(TEXT_578);
d3790 1
a3790 1
    stringBuffer.append(TEXT_579);
d3796 1
a3796 1
    stringBuffer.append(TEXT_580);
d3798 1
a3798 1
    stringBuffer.append(TEXT_581);
d3800 1
a3800 1
    stringBuffer.append(TEXT_582);
d3802 1
a3802 1
    stringBuffer.append(TEXT_583);
d3804 1
a3804 1
    stringBuffer.append(TEXT_584);
d3806 1
a3806 1
    stringBuffer.append(TEXT_585);
d3810 1
a3810 1
    stringBuffer.append(TEXT_586);
d3812 1
a3812 1
    stringBuffer.append(TEXT_587);
d3814 1
a3814 1
    stringBuffer.append(TEXT_588);
d3816 1
a3816 1
    stringBuffer.append(TEXT_589);
d3818 1
a3818 1
    stringBuffer.append(TEXT_590);
d3820 1
a3820 1
    stringBuffer.append(TEXT_591);
d3827 1
a3827 1
    stringBuffer.append(TEXT_592);
d3831 1
a3831 1
    stringBuffer.append(TEXT_593);
d3835 1
a3835 1
    stringBuffer.append(TEXT_594);
d3838 1
a3838 1
    stringBuffer.append(TEXT_595);
d3840 1
a3840 1
    stringBuffer.append(TEXT_596);
d3842 1
a3842 1
    stringBuffer.append(TEXT_597);
d3845 1
a3845 1
    stringBuffer.append(TEXT_598);
d3847 1
a3847 1
    stringBuffer.append(TEXT_599);
d3849 1
a3849 1
    stringBuffer.append(TEXT_600);
d3856 1
a3856 1
    stringBuffer.append(TEXT_601);
d3860 1
a3860 1
    stringBuffer.append(TEXT_602);
d3862 1
a3862 1
    stringBuffer.append(TEXT_603);
d3864 1
a3864 1
    stringBuffer.append(TEXT_604);
d3866 1
a3866 1
    stringBuffer.append(TEXT_605);
d3868 1
a3868 1
    stringBuffer.append(TEXT_606);
d3875 1
a3875 1
    stringBuffer.append(TEXT_607);
d3881 1
a3881 1
    stringBuffer.append(TEXT_608);
d3883 1
a3883 1
    stringBuffer.append(TEXT_609);
d3885 1
a3885 1
    stringBuffer.append(TEXT_610);
d3887 1
a3887 1
    stringBuffer.append(TEXT_611);
d3891 1
a3891 1
    stringBuffer.append(TEXT_612);
d3893 1
a3893 1
    stringBuffer.append(TEXT_613);
d3895 1
a3895 1
    stringBuffer.append(TEXT_614);
d3897 1
a3897 1
    stringBuffer.append(TEXT_615);
d3899 1
a3899 1
    stringBuffer.append(TEXT_616);
d3901 1
a3901 1
    stringBuffer.append(TEXT_617);
d3915 1
a3915 1
    stringBuffer.append(TEXT_618);
d3921 1
a3921 1
    stringBuffer.append(TEXT_619);
d3923 1
a3923 1
    stringBuffer.append(TEXT_620);
d3925 1
a3925 1
    stringBuffer.append(TEXT_621);
d3927 1
a3927 1
    stringBuffer.append(TEXT_622);
d3931 1
a3931 1
    stringBuffer.append(TEXT_623);
d3933 1
a3933 1
    stringBuffer.append(TEXT_624);
d3935 1
a3935 1
    stringBuffer.append(TEXT_625);
d3937 1
a3937 1
    stringBuffer.append(TEXT_626);
d3939 1
a3939 1
    stringBuffer.append(TEXT_627);
d3941 1
a3941 1
    stringBuffer.append(TEXT_628);
d3953 1
a3953 1
    stringBuffer.append(TEXT_629);
d3957 1
a3957 1
    stringBuffer.append(TEXT_630);
d3959 1
a3959 1
    stringBuffer.append(TEXT_631);
d3961 1
a3961 1
    stringBuffer.append(TEXT_632);
d3963 1
a3963 1
    stringBuffer.append(TEXT_633);
d3970 1
a3970 1
    stringBuffer.append(TEXT_634);
d3980 1
a3980 1
    stringBuffer.append(TEXT_635);
d3986 1
a3986 1
    stringBuffer.append(TEXT_636);
d3988 1
a3988 1
    stringBuffer.append(TEXT_637);
d3990 1
a3990 1
    stringBuffer.append(TEXT_638);
d3992 1
a3992 1
    stringBuffer.append(TEXT_639);
d3996 1
a3996 1
    stringBuffer.append(TEXT_640);
d3998 1
a3998 1
    stringBuffer.append(TEXT_641);
d4000 1
a4000 1
    stringBuffer.append(TEXT_642);
d4002 1
a4002 1
    stringBuffer.append(TEXT_643);
d4004 1
a4004 1
    stringBuffer.append(TEXT_644);
d4006 1
a4006 1
    stringBuffer.append(TEXT_645);
d4017 1
a4017 1
    stringBuffer.append(TEXT_646);
d4021 1
a4021 1
    stringBuffer.append(TEXT_647);
d4023 1
a4023 1
    stringBuffer.append(TEXT_648);
d4025 1
a4025 1
    stringBuffer.append(TEXT_649);
d4027 1
a4027 1
    stringBuffer.append(TEXT_650);
d4034 1
a4034 1
    stringBuffer.append(TEXT_651);
d4038 1
a4038 1
    stringBuffer.append(TEXT_652);
d4042 2
a4043 2
    stringBuffer.append(TEXT_653);
    stringBuffer.append(TEXT_654);
d4047 1
a4047 1
    stringBuffer.append(TEXT_655);
d4049 1
a4049 1
    stringBuffer.append(TEXT_656);
d4051 1
a4051 1
    stringBuffer.append(TEXT_657);
d4053 1
a4053 1
    stringBuffer.append(TEXT_658);
d4057 1
a4057 1
    stringBuffer.append(TEXT_659);
d4087 1
a4087 1
    stringBuffer.append(TEXT_660);
d4090 1
a4090 1
    stringBuffer.append(TEXT_661);
d4092 1
a4092 1
    stringBuffer.append(TEXT_662);
d4094 1
a4094 1
    stringBuffer.append(TEXT_663);
d4096 1
a4096 1
    stringBuffer.append(TEXT_664);
d4098 1
a4098 1
    stringBuffer.append(TEXT_665);
d4100 1
a4100 1
    stringBuffer.append(TEXT_666);
d4103 1
a4103 1
    stringBuffer.append(TEXT_667);
d4105 1
a4105 1
    stringBuffer.append(TEXT_668);
d4107 1
a4107 1
    stringBuffer.append(TEXT_669);
d4109 1
a4109 1
    stringBuffer.append(TEXT_670);
d4112 1
a4112 1
    stringBuffer.append(TEXT_671);
d4114 1
a4114 1
    stringBuffer.append(TEXT_672);
d4116 1
a4116 1
    stringBuffer.append(TEXT_673);
d4120 1
a4120 1
    stringBuffer.append(TEXT_674);
d4122 1
a4122 1
    stringBuffer.append(TEXT_675);
d4124 1
a4124 1
    stringBuffer.append(TEXT_676);
d4126 1
a4126 1
    stringBuffer.append(TEXT_677);
d4128 1
a4128 1
    stringBuffer.append(TEXT_678);
d4130 1
a4130 1
    stringBuffer.append(TEXT_679);
d4134 1
a4134 1
    stringBuffer.append(TEXT_680);
d4138 1
a4138 1
    stringBuffer.append(TEXT_681);
d4145 1
a4145 1
    stringBuffer.append(TEXT_682);
d4149 1
a4149 1
    stringBuffer.append(TEXT_683);
d4151 1
a4151 1
    stringBuffer.append(TEXT_684);
d4153 1
a4153 1
    stringBuffer.append(TEXT_685);
d4155 1
a4155 1
    stringBuffer.append(TEXT_686);
d4162 1
a4162 1
    stringBuffer.append(TEXT_687);
d4169 1
a4169 1
    stringBuffer.append(TEXT_688);
d4173 1
a4173 1
    stringBuffer.append(TEXT_689);
d4175 1
a4175 1
    stringBuffer.append(TEXT_690);
d4177 1
a4177 1
    stringBuffer.append(TEXT_691);
d4179 1
a4179 1
    stringBuffer.append(TEXT_692);
d4186 1
a4186 1
    stringBuffer.append(TEXT_693);
d4190 1
a4190 1
    stringBuffer.append(TEXT_694);
d4194 1
a4194 1
    stringBuffer.append(TEXT_695);
d4196 1
a4196 1
    stringBuffer.append(TEXT_696);
d4198 1
a4198 1
    stringBuffer.append(TEXT_697);
d4200 1
a4200 1
    stringBuffer.append(TEXT_698);
d4202 1
a4202 1
    stringBuffer.append(TEXT_699);
d4204 1
a4204 1
    stringBuffer.append(TEXT_700);
d4206 1
a4206 1
    stringBuffer.append(TEXT_701);
d4213 1
a4213 1
    stringBuffer.append(TEXT_702);
d4215 1
a4215 1
    stringBuffer.append(TEXT_703);
d4217 1
a4217 1
    stringBuffer.append(TEXT_704);
d4219 1
a4219 1
    stringBuffer.append(TEXT_705);
d4221 1
a4221 1
    stringBuffer.append(TEXT_706);
d4223 1
a4223 1
    stringBuffer.append(TEXT_707);
d4225 1
a4225 1
    stringBuffer.append(TEXT_708);
d4229 1
a4229 1
    stringBuffer.append(TEXT_709);
d4231 1
a4231 1
    stringBuffer.append(TEXT_710);
d4233 1
a4233 1
    stringBuffer.append(TEXT_711);
d4235 1
a4235 1
    stringBuffer.append(TEXT_712);
d4242 1
a4242 1
    stringBuffer.append(TEXT_713);
d4244 1
a4244 1
    stringBuffer.append(TEXT_714);
d4246 1
a4246 1
    stringBuffer.append(TEXT_715);
d4248 1
a4248 1
    stringBuffer.append(TEXT_716);
d4250 1
a4250 1
    stringBuffer.append(TEXT_717);
d4252 1
a4252 1
    stringBuffer.append(TEXT_718);
d4254 1
a4254 1
    stringBuffer.append(TEXT_719);
d4258 1
a4258 1
    stringBuffer.append(TEXT_720);
d4260 1
a4260 1
    stringBuffer.append(TEXT_721);
d4262 1
a4262 1
    stringBuffer.append(TEXT_722);
d4264 1
a4264 1
    stringBuffer.append(TEXT_723);
d4269 1
a4269 1
    stringBuffer.append(TEXT_724);
d4274 1
a4274 1
    stringBuffer.append(TEXT_725);
d4278 1
a4278 1
    stringBuffer.append(TEXT_726);
d4280 1
a4280 1
    stringBuffer.append(TEXT_727);
d4282 1
a4282 1
    stringBuffer.append(TEXT_728);
d4309 1
a4309 1
    stringBuffer.append(TEXT_729);
d4311 1
a4311 1
    stringBuffer.append(TEXT_730);
d4313 1
a4313 1
    stringBuffer.append(TEXT_731);
d4317 1
a4317 1
    stringBuffer.append(TEXT_732);
d4319 1
a4319 1
    stringBuffer.append(TEXT_733);
d4321 1
a4321 1
    stringBuffer.append(TEXT_734);
d4323 1
a4323 1
    stringBuffer.append(TEXT_735);
d4325 1
a4325 1
    stringBuffer.append(TEXT_736);
d4329 1
a4329 1
    stringBuffer.append(TEXT_737);
d4331 1
a4331 1
    stringBuffer.append(TEXT_738);
d4333 1
a4333 1
    stringBuffer.append(TEXT_739);
d4335 1
a4335 1
    stringBuffer.append(TEXT_740);
d4337 1
a4337 1
    stringBuffer.append(TEXT_741);
d4342 1
a4342 1
    stringBuffer.append(TEXT_742);
d4344 1
a4344 1
    stringBuffer.append(TEXT_743);
d4350 1
a4350 1
    stringBuffer.append(TEXT_744);
d4352 1
a4352 1
    stringBuffer.append(TEXT_745);
d4354 1
a4354 1
    stringBuffer.append(TEXT_746);
d4356 1
a4356 1
    stringBuffer.append(TEXT_747);
d4358 1
a4358 1
    stringBuffer.append(TEXT_748);
d4360 1
a4360 1
    stringBuffer.append(TEXT_749);
d4364 1
a4364 1
    stringBuffer.append(TEXT_750);
d4366 1
a4366 1
    stringBuffer.append(TEXT_751);
d4368 1
a4368 1
    stringBuffer.append(TEXT_752);
d4370 1
a4370 1
    stringBuffer.append(TEXT_753);
d4372 1
a4372 1
    stringBuffer.append(TEXT_754);
d4374 1
a4374 1
    stringBuffer.append(TEXT_755);
d4381 1
a4381 1
    stringBuffer.append(TEXT_756);
d4383 1
a4383 1
    stringBuffer.append(TEXT_757);
d4385 1
a4385 1
    stringBuffer.append(TEXT_758);
d4387 1
a4387 1
    stringBuffer.append(TEXT_759);
d4389 1
a4389 1
    stringBuffer.append(TEXT_760);
d4391 1
a4391 1
    stringBuffer.append(TEXT_761);
d4395 1
a4395 1
    stringBuffer.append(TEXT_762);
d4397 1
a4397 1
    stringBuffer.append(TEXT_763);
d4399 1
a4399 1
    stringBuffer.append(TEXT_764);
d4401 1
a4401 1
    stringBuffer.append(TEXT_765);
d4403 1
a4403 1
    stringBuffer.append(TEXT_766);
d4405 1
a4405 1
    stringBuffer.append(TEXT_767);
d4412 1
a4412 1
    stringBuffer.append(TEXT_768);
d4414 1
a4414 1
    stringBuffer.append(TEXT_769);
d4416 1
a4416 1
    stringBuffer.append(TEXT_770);
d4418 1
a4418 1
    stringBuffer.append(TEXT_771);
d4420 1
a4420 1
    stringBuffer.append(TEXT_772);
d4422 1
a4422 1
    stringBuffer.append(TEXT_773);
d4426 1
a4426 1
    stringBuffer.append(TEXT_774);
d4428 1
a4428 1
    stringBuffer.append(TEXT_775);
d4430 1
a4430 1
    stringBuffer.append(TEXT_776);
d4432 1
a4432 1
    stringBuffer.append(TEXT_777);
d4434 1
a4434 1
    stringBuffer.append(TEXT_778);
d4436 1
a4436 1
    stringBuffer.append(TEXT_779);
d4441 1
a4441 1
    stringBuffer.append(TEXT_780);
d4447 1
a4447 1
    stringBuffer.append(TEXT_781);
d4449 1
a4449 1
    stringBuffer.append(TEXT_782);
d4451 1
a4451 1
    stringBuffer.append(TEXT_783);
d4453 1
a4453 1
    stringBuffer.append(TEXT_784);
d4455 1
a4455 1
    stringBuffer.append(TEXT_785);
d4457 1
a4457 1
    stringBuffer.append(TEXT_786);
d4461 1
a4461 1
    stringBuffer.append(TEXT_787);
d4463 1
a4463 1
    stringBuffer.append(TEXT_788);
d4465 1
a4465 1
    stringBuffer.append(TEXT_789);
d4467 1
a4467 1
    stringBuffer.append(TEXT_790);
d4469 1
a4469 1
    stringBuffer.append(TEXT_791);
d4471 1
a4471 1
    stringBuffer.append(TEXT_792);
d4478 1
a4478 1
    stringBuffer.append(TEXT_793);
d4482 1
a4482 1
    stringBuffer.append(TEXT_794);
d4486 1
a4486 1
    stringBuffer.append(TEXT_795);
d4489 1
a4489 1
    stringBuffer.append(TEXT_796);
d4491 1
a4491 1
    stringBuffer.append(TEXT_797);
d4493 1
a4493 1
    stringBuffer.append(TEXT_798);
d4495 1
a4495 1
    stringBuffer.append(TEXT_799);
d4497 1
a4497 1
    stringBuffer.append(TEXT_800);
d4500 1
a4500 1
    stringBuffer.append(TEXT_801);
d4502 1
a4502 1
    stringBuffer.append(TEXT_802);
d4504 1
a4504 1
    stringBuffer.append(TEXT_803);
d4506 1
a4506 1
    stringBuffer.append(TEXT_804);
d4508 1
a4508 1
    stringBuffer.append(TEXT_805);
d4510 1
a4510 1
    stringBuffer.append(TEXT_806);
d4512 1
a4512 1
    stringBuffer.append(TEXT_807);
d4514 1
a4514 1
    stringBuffer.append(TEXT_808);
d4520 1
a4520 1
    stringBuffer.append(TEXT_809);
d4522 1
a4522 1
    stringBuffer.append(TEXT_810);
d4524 1
a4524 1
    stringBuffer.append(TEXT_811);
d4526 1
a4526 1
    stringBuffer.append(TEXT_812);
d4528 1
a4528 1
    stringBuffer.append(TEXT_813);
d4530 1
a4530 1
    stringBuffer.append(TEXT_814);
d4532 1
a4532 1
    stringBuffer.append(TEXT_815);
d4536 1
a4536 1
    stringBuffer.append(TEXT_816);
d4540 1
a4540 1
    stringBuffer.append(TEXT_817);
d4542 1
a4542 1
    stringBuffer.append(TEXT_818);
d4544 1
a4544 1
    stringBuffer.append(TEXT_819);
d4546 1
a4546 1
    stringBuffer.append(TEXT_820);
d4550 1
a4550 1
    stringBuffer.append(TEXT_821);
d4577 1
a4577 1
    stringBuffer.append(TEXT_822);
d4579 1
a4579 1
    stringBuffer.append(TEXT_823);
d4581 1
a4581 1
    stringBuffer.append(TEXT_824);
d4583 1
a4583 1
    stringBuffer.append(TEXT_825);
d4585 1
a4585 1
    stringBuffer.append(TEXT_826);
d4587 1
a4587 1
    stringBuffer.append(TEXT_827);
d4589 1
a4589 1
    stringBuffer.append(TEXT_828);
d4594 1
a4594 1
    stringBuffer.append(TEXT_829);
d4596 1
a4596 1
    stringBuffer.append(TEXT_830);
d4598 1
a4598 1
    stringBuffer.append(TEXT_831);
d4600 1
a4600 1
    stringBuffer.append(TEXT_832);
d4609 1
a4609 1
    stringBuffer.append(TEXT_833);
d4615 1
a4615 1
    stringBuffer.append(TEXT_834);
d4617 1
a4617 1
    stringBuffer.append(TEXT_835);
d4619 1
a4619 1
    stringBuffer.append(TEXT_836);
d4621 1
a4621 1
    stringBuffer.append(TEXT_837);
d4625 1
a4625 1
    stringBuffer.append(TEXT_838);
d4627 1
a4627 1
    stringBuffer.append(TEXT_839);
d4629 1
a4629 1
    stringBuffer.append(TEXT_840);
d4631 1
a4631 1
    stringBuffer.append(TEXT_841);
d4633 1
a4633 1
    stringBuffer.append(TEXT_842);
d4635 1
a4635 1
    stringBuffer.append(TEXT_843);
d4643 1
a4643 1
    stringBuffer.append(TEXT_844);
d4645 1
a4645 1
    stringBuffer.append(TEXT_845);
d4647 1
a4647 1
    stringBuffer.append(TEXT_846);
d4649 1
a4649 1
    stringBuffer.append(TEXT_847);
d4658 1
a4658 1
    stringBuffer.append(TEXT_848);
d4664 1
a4664 1
    stringBuffer.append(TEXT_849);
d4666 1
a4666 1
    stringBuffer.append(TEXT_850);
d4668 1
a4668 1
    stringBuffer.append(TEXT_851);
d4670 1
a4670 1
    stringBuffer.append(TEXT_852);
d4674 1
a4674 1
    stringBuffer.append(TEXT_853);
d4676 1
a4676 1
    stringBuffer.append(TEXT_854);
d4678 1
a4678 1
    stringBuffer.append(TEXT_855);
d4680 1
a4680 1
    stringBuffer.append(TEXT_856);
d4682 1
a4682 1
    stringBuffer.append(TEXT_857);
d4684 1
a4684 1
    stringBuffer.append(TEXT_858);
d4692 1
a4692 1
    stringBuffer.append(TEXT_859);
d4694 1
a4694 1
    stringBuffer.append(TEXT_860);
d4696 1
a4696 1
    stringBuffer.append(TEXT_861);
d4698 1
a4698 1
    stringBuffer.append(TEXT_862);
d4702 1
a4702 1
    stringBuffer.append(TEXT_863);
d4707 1
a4707 1
    stringBuffer.append(TEXT_864);
d4709 1
a4709 1
    stringBuffer.append(TEXT_865);
d4711 1
a4711 1
    stringBuffer.append(TEXT_866);
d4713 1
a4713 1
    stringBuffer.append(TEXT_867);
d4717 2
a4718 2
    stringBuffer.append(TEXT_868);
    stringBuffer.append(TEXT_869);
d4722 1
a4722 1
    stringBuffer.append(TEXT_870);
d4724 1
a4724 1
    stringBuffer.append(TEXT_871);
d4726 1
a4726 1
    stringBuffer.append(TEXT_872);
d4728 1
a4728 1
    stringBuffer.append(TEXT_873);
d4732 1
a4732 1
    stringBuffer.append(TEXT_874);
d4738 1
a4738 1
    stringBuffer.append(TEXT_875);
d4742 1
a4742 1
    stringBuffer.append(TEXT_876);
d4744 1
a4744 1
    stringBuffer.append(TEXT_877);
d4746 1
a4746 1
    stringBuffer.append(TEXT_878);
d4748 1
a4748 1
    stringBuffer.append(TEXT_879);
d4755 1
a4755 1
    stringBuffer.append(TEXT_880);
d4764 1
a4764 1
    stringBuffer.append(TEXT_881);
d4766 1
a4766 1
    stringBuffer.append(TEXT_882);
d4770 1
a4770 1
    stringBuffer.append(TEXT_883);
d4777 1
a4777 1
    stringBuffer.append(TEXT_884);
d4779 1
a4779 1
    stringBuffer.append(TEXT_885);
@


1.14
log
@#149298 Lite Generator: Make it possible to reroute links
@
text
@d745 103
a847 103
  protected final String TEXT_724 = NL + "\t\t\tresult.append(";
  protected final String TEXT_725 = ".create(" + NL + "\t\t\t\teditingDomain," + NL + "\t\t\t\tedge, ";
  protected final String TEXT_726 = ".eINSTANCE.getView_Element(), newTarget.getElement()));";
  protected final String TEXT_727 = NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_728 = NL;
  protected final String TEXT_729 = NL + "\t\t\tprivate ";
  protected final String TEXT_730 = " createDomainModelRemoveCommand(";
  protected final String TEXT_731 = " editingDomain) {";
  protected final String TEXT_732 = NL + "\t\t\t\t";
  protected final String TEXT_733 = " result = new ";
  protected final String TEXT_734 = "();";
  protected final String TEXT_735 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_736 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_737 = ".getElement().eContainer(), ";
  protected final String TEXT_738 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_739 = ".getElement()));";
  protected final String TEXT_740 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_741 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_742 = ".getElement().eContainer(), ";
  protected final String TEXT_743 = ".getElement().eContainmentFeature(), ";
  protected final String TEXT_744 = ".UNSET_VALUE));";
  protected final String TEXT_745 = NL + "\t\t\t\treturn ";
  protected final String TEXT_746 = ".INSTANCE;";
  protected final String TEXT_747 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_748 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_749 = ".getElement().eContainer(), ";
  protected final String TEXT_750 = ".eINSTANCE.get";
  protected final String TEXT_751 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_752 = ".getElement()));";
  protected final String TEXT_753 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_754 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_755 = ".getElement().eContainer(), ";
  protected final String TEXT_756 = ".eINSTANCE.get";
  protected final String TEXT_757 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_758 = ".UNSET_VALUE));";
  protected final String TEXT_759 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_760 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_761 = ".getElement(), ";
  protected final String TEXT_762 = ".eINSTANCE.get";
  protected final String TEXT_763 = "(), ";
  protected final String TEXT_764 = ".getSource().getElement()));";
  protected final String TEXT_765 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_766 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_767 = ".getElement(), ";
  protected final String TEXT_768 = ".eINSTANCE.get";
  protected final String TEXT_769 = "(), ";
  protected final String TEXT_770 = ".UNSET_VALUE));";
  protected final String TEXT_771 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_772 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_773 = ".getElement(), ";
  protected final String TEXT_774 = ".eINSTANCE.get";
  protected final String TEXT_775 = "(), ";
  protected final String TEXT_776 = ".getTarget().getElement()));";
  protected final String TEXT_777 = NL + "\t\t\t\tresult.append(";
  protected final String TEXT_778 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_779 = ".getElement(), ";
  protected final String TEXT_780 = ".eINSTANCE.get";
  protected final String TEXT_781 = "(), ";
  protected final String TEXT_782 = ".UNSET_VALUE));";
  protected final String TEXT_783 = NL + "\t\t\t\treturn result;";
  protected final String TEXT_784 = NL + "\t\t\t\treturn ";
  protected final String TEXT_785 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_786 = ".getSource().getElement(), ";
  protected final String TEXT_787 = ".eINSTANCE.get";
  protected final String TEXT_788 = "(), ";
  protected final String TEXT_789 = ".getTarget().getElement());";
  protected final String TEXT_790 = NL + "\t\t\t\treturn ";
  protected final String TEXT_791 = ".create(" + NL + "\t\t\t\t\teditingDomain," + NL + "\t\t\t\t\t";
  protected final String TEXT_792 = ".getSource().getElement(), ";
  protected final String TEXT_793 = ".eINSTANCE.get";
  protected final String TEXT_794 = "(), ";
  protected final String TEXT_795 = ".UNSET_VALUE);";
  protected final String TEXT_796 = NL + "\t\t\t}";
  protected final String TEXT_797 = NL + "\t}" + NL;
  protected final String TEXT_798 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_799 = "Command extends ";
  protected final String TEXT_800 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_801 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_802 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_803 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_804 = "Command(";
  protected final String TEXT_805 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_806 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_807 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_808 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_809 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_810 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_811 = ".eINSTANCE.createEdge();";
  protected final String TEXT_812 = NL + "\t\t\t";
  protected final String TEXT_813 = " createdDomainElement = ";
  protected final String TEXT_814 = ".eINSTANCE.create";
  protected final String TEXT_815 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_816 = NL + "\t\t\t";
  protected final String TEXT_817 = ".";
  protected final String TEXT_818 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_819 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
  protected final String TEXT_820 = NL + "\t\t\t";
  protected final String TEXT_821 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_822 = " domainModelEditDomain = ";
  protected final String TEXT_823 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_824 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_825 = NL + "\t\t\t";
  protected final String TEXT_826 = " container = getRelationshipContainer(source.getElement(), ";
d849 57
a905 57
  protected final String TEXT_828 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_829 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_830 = ".eINSTANCE.get";
  protected final String TEXT_831 = "(), createdDomainElement));";
  protected final String TEXT_832 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_833 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_834 = ".eINSTANCE.get";
  protected final String TEXT_835 = "(), createdDomainElement));";
  protected final String TEXT_836 = NL;
  protected final String TEXT_837 = NL + "\t\tif (";
  protected final String TEXT_838 = ".";
  protected final String TEXT_839 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_840 = NL + "\t\t}";
  protected final String TEXT_841 = NL + "\t\tif (";
  protected final String TEXT_842 = ".";
  protected final String TEXT_843 = "().size() >= ";
  protected final String TEXT_844 = ".eINSTANCE.get";
  protected final String TEXT_845 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_846 = NL + "\t\t}";
  protected final String TEXT_847 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_848 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_849 = ".eINSTANCE.get";
  protected final String TEXT_850 = "(), source.getElement()));";
  protected final String TEXT_851 = NL;
  protected final String TEXT_852 = NL + "\t\tif (";
  protected final String TEXT_853 = ".";
  protected final String TEXT_854 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_855 = NL + "\t\t}";
  protected final String TEXT_856 = NL + "\t\tif (";
  protected final String TEXT_857 = ".";
  protected final String TEXT_858 = "().size() >= ";
  protected final String TEXT_859 = ".eINSTANCE.get";
  protected final String TEXT_860 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_861 = NL + "\t\t}";
  protected final String TEXT_862 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_863 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_864 = ".eINSTANCE.get";
  protected final String TEXT_865 = "(), target.getElement()));";
  protected final String TEXT_866 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_867 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_868 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_869 = ".eINSTANCE.get";
  protected final String TEXT_870 = "(), target.getElement());";
  protected final String TEXT_871 = NL + "\t\t}" + NL;
  protected final String TEXT_872 = NL;
  protected final String TEXT_873 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_874 = " getRelationshipContainer(";
  protected final String TEXT_875 = " element, ";
  protected final String TEXT_876 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_877 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_878 = NL;
  protected final String TEXT_879 = NL + "\t\t\tif(!";
  protected final String TEXT_880 = ".canCreateLink(";
  protected final String TEXT_881 = ", ";
  protected final String TEXT_882 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_883 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_884 = NL;
a906 3
  protected final String TEXT_886 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_887 = NL + "}";
  protected final String TEXT_888 = NL;
d3139 1
a3141 8
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_725);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_726);
    
		}

    stringBuffer.append(TEXT_727);
d3146 1
a3146 1
    stringBuffer.append(TEXT_728);
d3150 1
a3150 1
    stringBuffer.append(TEXT_729);
d3152 1
a3152 1
    stringBuffer.append(TEXT_730);
d3154 1
a3154 1
    stringBuffer.append(TEXT_731);
d3181 1
a3181 1
    stringBuffer.append(TEXT_732);
d3183 1
a3183 1
    stringBuffer.append(TEXT_733);
d3185 1
a3185 1
    stringBuffer.append(TEXT_734);
d3189 1
a3189 1
    stringBuffer.append(TEXT_735);
d3191 1
a3191 1
    stringBuffer.append(TEXT_736);
d3193 1
a3193 1
    stringBuffer.append(TEXT_737);
d3195 1
a3195 1
    stringBuffer.append(TEXT_738);
d3197 1
a3197 1
    stringBuffer.append(TEXT_739);
d3201 1
a3201 1
    stringBuffer.append(TEXT_740);
d3203 1
a3203 1
    stringBuffer.append(TEXT_741);
d3205 1
a3205 1
    stringBuffer.append(TEXT_742);
d3207 1
a3207 1
    stringBuffer.append(TEXT_743);
d3209 1
a3209 1
    stringBuffer.append(TEXT_744);
d3214 1
a3214 1
    stringBuffer.append(TEXT_745);
d3216 1
a3216 1
    stringBuffer.append(TEXT_746);
d3222 1
a3222 1
    stringBuffer.append(TEXT_747);
d3224 1
a3224 1
    stringBuffer.append(TEXT_748);
d3226 1
a3226 1
    stringBuffer.append(TEXT_749);
d3228 1
a3228 1
    stringBuffer.append(TEXT_750);
d3230 1
a3230 1
    stringBuffer.append(TEXT_751);
d3232 1
a3232 1
    stringBuffer.append(TEXT_752);
d3236 1
a3236 1
    stringBuffer.append(TEXT_753);
d3238 1
a3238 1
    stringBuffer.append(TEXT_754);
d3240 1
a3240 1
    stringBuffer.append(TEXT_755);
d3242 1
a3242 1
    stringBuffer.append(TEXT_756);
d3244 1
a3244 1
    stringBuffer.append(TEXT_757);
d3246 1
a3246 1
    stringBuffer.append(TEXT_758);
d3253 1
a3253 1
    stringBuffer.append(TEXT_759);
d3255 1
a3255 1
    stringBuffer.append(TEXT_760);
d3257 1
a3257 1
    stringBuffer.append(TEXT_761);
d3259 1
a3259 1
    stringBuffer.append(TEXT_762);
d3261 1
a3261 1
    stringBuffer.append(TEXT_763);
d3263 1
a3263 1
    stringBuffer.append(TEXT_764);
d3267 1
a3267 1
    stringBuffer.append(TEXT_765);
d3269 1
a3269 1
    stringBuffer.append(TEXT_766);
d3271 1
a3271 1
    stringBuffer.append(TEXT_767);
d3273 1
a3273 1
    stringBuffer.append(TEXT_768);
d3275 1
a3275 1
    stringBuffer.append(TEXT_769);
d3277 1
a3277 1
    stringBuffer.append(TEXT_770);
d3284 1
a3284 1
    stringBuffer.append(TEXT_771);
d3286 1
a3286 1
    stringBuffer.append(TEXT_772);
d3288 1
a3288 1
    stringBuffer.append(TEXT_773);
d3290 1
a3290 1
    stringBuffer.append(TEXT_774);
d3292 1
a3292 1
    stringBuffer.append(TEXT_775);
d3294 1
a3294 1
    stringBuffer.append(TEXT_776);
d3298 1
a3298 1
    stringBuffer.append(TEXT_777);
d3300 1
a3300 1
    stringBuffer.append(TEXT_778);
d3302 1
a3302 1
    stringBuffer.append(TEXT_779);
d3304 1
a3304 1
    stringBuffer.append(TEXT_780);
d3306 1
a3306 1
    stringBuffer.append(TEXT_781);
d3308 1
a3308 1
    stringBuffer.append(TEXT_782);
d3313 1
a3313 1
    stringBuffer.append(TEXT_783);
d3319 1
a3319 1
    stringBuffer.append(TEXT_784);
d3321 1
a3321 1
    stringBuffer.append(TEXT_785);
d3323 1
a3323 1
    stringBuffer.append(TEXT_786);
d3325 1
a3325 1
    stringBuffer.append(TEXT_787);
d3327 1
a3327 1
    stringBuffer.append(TEXT_788);
d3329 1
a3329 1
    stringBuffer.append(TEXT_789);
d3333 1
a3333 1
    stringBuffer.append(TEXT_790);
d3335 1
a3335 1
    stringBuffer.append(TEXT_791);
d3337 1
a3337 1
    stringBuffer.append(TEXT_792);
d3339 1
a3339 1
    stringBuffer.append(TEXT_793);
d3341 1
a3341 1
    stringBuffer.append(TEXT_794);
d3343 1
a3343 1
    stringBuffer.append(TEXT_795);
d3350 1
a3350 1
    stringBuffer.append(TEXT_796);
d3354 1
a3354 1
    stringBuffer.append(TEXT_797);
d3358 1
a3358 1
    stringBuffer.append(TEXT_798);
d3361 1
a3361 1
    stringBuffer.append(TEXT_799);
d3363 1
a3363 1
    stringBuffer.append(TEXT_800);
d3365 1
a3365 1
    stringBuffer.append(TEXT_801);
d3367 1
a3367 1
    stringBuffer.append(TEXT_802);
d3369 1
a3369 1
    stringBuffer.append(TEXT_803);
d3372 1
a3372 1
    stringBuffer.append(TEXT_804);
d3374 1
a3374 1
    stringBuffer.append(TEXT_805);
d3376 1
a3376 1
    stringBuffer.append(TEXT_806);
d3378 1
a3378 1
    stringBuffer.append(TEXT_807);
d3380 1
a3380 1
    stringBuffer.append(TEXT_808);
d3382 1
a3382 1
    stringBuffer.append(TEXT_809);
d3384 1
a3384 1
    stringBuffer.append(TEXT_810);
d3386 1
a3386 1
    stringBuffer.append(TEXT_811);
d3392 1
a3392 1
    stringBuffer.append(TEXT_812);
d3394 1
a3394 1
    stringBuffer.append(TEXT_813);
d3396 1
a3396 1
    stringBuffer.append(TEXT_814);
d3398 1
a3398 1
    stringBuffer.append(TEXT_815);
d3400 1
a3400 1
    stringBuffer.append(TEXT_816);
d3402 1
a3402 1
    stringBuffer.append(TEXT_817);
d3404 1
a3404 1
    stringBuffer.append(TEXT_818);
d3408 1
a3408 1
    stringBuffer.append(TEXT_819);
d3412 1
a3412 1
    stringBuffer.append(TEXT_820);
d3414 1
a3414 1
    stringBuffer.append(TEXT_821);
d3416 1
a3416 1
    stringBuffer.append(TEXT_822);
d3418 1
a3418 1
    stringBuffer.append(TEXT_823);
d3422 1
a3422 1
    stringBuffer.append(TEXT_824);
d3449 1
a3449 1
    stringBuffer.append(TEXT_825);
d3451 1
a3451 1
    stringBuffer.append(TEXT_826);
d3453 1
a3453 1
    stringBuffer.append(TEXT_827);
d3455 1
a3455 1
    stringBuffer.append(TEXT_828);
d3457 1
a3457 1
    stringBuffer.append(TEXT_829);
d3459 1
a3459 1
    stringBuffer.append(TEXT_830);
d3461 1
a3461 1
    stringBuffer.append(TEXT_831);
d3466 1
a3466 1
    stringBuffer.append(TEXT_832);
d3468 1
a3468 1
    stringBuffer.append(TEXT_833);
d3470 1
a3470 1
    stringBuffer.append(TEXT_834);
d3472 1
a3472 1
    stringBuffer.append(TEXT_835);
d3481 1
a3481 1
    stringBuffer.append(TEXT_836);
d3487 1
a3487 1
    stringBuffer.append(TEXT_837);
d3489 1
a3489 1
    stringBuffer.append(TEXT_838);
d3491 1
a3491 1
    stringBuffer.append(TEXT_839);
d3493 1
a3493 1
    stringBuffer.append(TEXT_840);
d3497 1
a3497 1
    stringBuffer.append(TEXT_841);
d3499 1
a3499 1
    stringBuffer.append(TEXT_842);
d3501 1
a3501 1
    stringBuffer.append(TEXT_843);
d3503 1
a3503 1
    stringBuffer.append(TEXT_844);
d3505 1
a3505 1
    stringBuffer.append(TEXT_845);
d3507 1
a3507 1
    stringBuffer.append(TEXT_846);
d3515 1
a3515 1
    stringBuffer.append(TEXT_847);
d3517 1
a3517 1
    stringBuffer.append(TEXT_848);
d3519 1
a3519 1
    stringBuffer.append(TEXT_849);
d3521 1
a3521 1
    stringBuffer.append(TEXT_850);
d3530 1
a3530 1
    stringBuffer.append(TEXT_851);
d3536 1
a3536 1
    stringBuffer.append(TEXT_852);
d3538 1
a3538 1
    stringBuffer.append(TEXT_853);
d3540 1
a3540 1
    stringBuffer.append(TEXT_854);
d3542 1
a3542 1
    stringBuffer.append(TEXT_855);
d3546 1
a3546 1
    stringBuffer.append(TEXT_856);
d3548 1
a3548 1
    stringBuffer.append(TEXT_857);
d3550 1
a3550 1
    stringBuffer.append(TEXT_858);
d3552 1
a3552 1
    stringBuffer.append(TEXT_859);
d3554 1
a3554 1
    stringBuffer.append(TEXT_860);
d3556 1
a3556 1
    stringBuffer.append(TEXT_861);
d3564 1
a3564 1
    stringBuffer.append(TEXT_862);
d3566 1
a3566 1
    stringBuffer.append(TEXT_863);
d3568 1
a3568 1
    stringBuffer.append(TEXT_864);
d3570 1
a3570 1
    stringBuffer.append(TEXT_865);
d3574 1
a3574 1
    stringBuffer.append(TEXT_866);
d3579 1
a3579 1
    stringBuffer.append(TEXT_867);
d3581 1
a3581 1
    stringBuffer.append(TEXT_868);
d3583 1
a3583 1
    stringBuffer.append(TEXT_869);
d3585 1
a3585 1
    stringBuffer.append(TEXT_870);
d3589 2
a3590 2
    stringBuffer.append(TEXT_871);
    stringBuffer.append(TEXT_872);
d3594 1
a3594 1
    stringBuffer.append(TEXT_873);
d3596 1
a3596 1
    stringBuffer.append(TEXT_874);
d3598 1
a3598 1
    stringBuffer.append(TEXT_875);
d3600 1
a3600 1
    stringBuffer.append(TEXT_876);
d3604 1
a3604 1
    stringBuffer.append(TEXT_877);
d3610 1
a3610 1
    stringBuffer.append(TEXT_878);
d3614 1
a3614 1
    stringBuffer.append(TEXT_879);
d3616 1
a3616 1
    stringBuffer.append(TEXT_880);
d3618 1
a3618 1
    stringBuffer.append(TEXT_881);
d3620 1
a3620 1
    stringBuffer.append(TEXT_882);
d3627 1
a3627 1
    stringBuffer.append(TEXT_883);
d3636 1
a3636 1
    stringBuffer.append(TEXT_884);
d3638 1
a3638 1
    stringBuffer.append(TEXT_885);
d3642 1
a3642 1
    stringBuffer.append(TEXT_886);
d3649 1
a3649 1
    stringBuffer.append(TEXT_887);
d3651 1
a3651 1
    stringBuffer.append(TEXT_888);
@


1.13
log
@copy of #127491 fix (issue #3) to remove external labels
@
text
@d104 130
a233 130
  protected final String TEXT_83 = " request) {" + NL + "\t\t\t\t//XXX: reconnect command" + NL + "\t\t\t\treturn ";
  protected final String TEXT_84 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_85 = " getReconnectSourceCommand(";
  protected final String TEXT_86 = " request) {" + NL + "\t\t\t\t//XXX: reconnect command" + NL + "\t\t\t\treturn ";
  protected final String TEXT_87 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_88 = " getConnectionCreateCommand(";
  protected final String TEXT_89 = " request) {";
  protected final String TEXT_90 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_91 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_92 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_93 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_94 = " result = new ";
  protected final String TEXT_95 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_96 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_97 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_98 = "StartCommand(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_99 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1 || !result.canExecute()) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\t//returning an unexecutable command does not change cursor to \"No\"." + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_100 = " wrappedResult = new WrappingCommand(";
  protected final String TEXT_101 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t\trequest.setStartCommand(wrappedResult);" + NL + "\t\t\t\t\treturn wrappedResult;" + NL + "\t\t\t\t}";
  protected final String TEXT_102 = NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_103 = " getConnectionCompleteCommand(";
  protected final String TEXT_104 = " request) {";
  protected final String TEXT_105 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_106 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_107 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_108 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_109 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_110 = " result = new ";
  protected final String TEXT_111 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_112 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_113 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_114 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_115 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_116 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_117 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_118 = NL + "\t\t\t\treturn ";
  protected final String TEXT_119 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_120 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_121 = " invisibleRectangle = new ";
  protected final String TEXT_122 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_123 = "());" + NL + "\t\t";
  protected final String TEXT_124 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_125 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_126 = " createNodeShape() {";
  protected final String TEXT_127 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_128 = "()";
  protected final String TEXT_129 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_130 = ";";
  protected final String TEXT_131 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_132 = ";";
  protected final String TEXT_133 = NL + "\t\t";
  protected final String TEXT_134 = " figure = new ";
  protected final String TEXT_135 = "();";
  protected final String TEXT_136 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_137 = NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_138 = NL + "\t\treturn primaryShape;" + NL + "\t}";
  protected final String TEXT_139 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_140 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_141 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_142 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_143 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_144 = " view = (";
  protected final String TEXT_145 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_146 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_147 = " decorationPane = new ";
  protected final String TEXT_148 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_149 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_150 = " imageFigure = new ";
  protected final String TEXT_151 = "(";
  protected final String TEXT_152 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_153 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_154 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_155 = " setupContentPane(";
  protected final String TEXT_156 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_157 = NL + "\t\t\t";
  protected final String TEXT_158 = " layout = new ";
  protected final String TEXT_159 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_160 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_161 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_162 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_163 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_164 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_165 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_166 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_167 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_168 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_169 = " childEditPart) {";
  protected final String TEXT_170 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_171 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_172 = ") childEditPart).";
  protected final String TEXT_173 = "(getPrimaryShape().";
  protected final String TEXT_174 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_175 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_176 = ") {" + NL + "\t\t\t";
  protected final String TEXT_177 = " pane = getPrimaryShape().";
  protected final String TEXT_178 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_179 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_180 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_181 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_182 = ") {" + NL + "\t\t\t";
  protected final String TEXT_183 = " pane = getPrimaryShape().";
  protected final String TEXT_184 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_185 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_186 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_187 = NL + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_188 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_189 = NL + "\t\tfor(";
  protected final String TEXT_190 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_191 = " nextChild = (";
  protected final String TEXT_192 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_193 = ".getVisualID(nextChild) == ";
  protected final String TEXT_194 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_195 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_196 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_197 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_198 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_199 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_200 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_201 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_202 = " getLabelEditPart(";
  protected final String TEXT_203 = " req) {" + NL + "\t\t";
  protected final String TEXT_204 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_205 = " view = (";
  protected final String TEXT_206 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_207 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_208 = NL + "\t\t\t\tcase ";
  protected final String TEXT_209 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_210 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_211 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_212 = " childEditPart) {";
d235 113
a347 113
  protected final String TEXT_214 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_215 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_216 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_217 = " root = (";
  protected final String TEXT_218 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_219 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_220 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_221 = " childEditPart, int index) {";
  protected final String TEXT_222 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_223 = " labelFigure = ((";
  protected final String TEXT_224 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_225 = NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_226 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_227 = " childEditPart) {";
  protected final String TEXT_228 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_229 = " labelFigure = ((";
  protected final String TEXT_230 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_231 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_232 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_233 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_234 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_235 = " childEditPart = (";
  protected final String TEXT_236 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_237 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_238 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_239 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_240 = ";" + NL + "\t\t";
  protected final String TEXT_241 = " bounds = (";
  protected final String TEXT_242 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_243 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_244 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_245 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_246 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_247 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_248 = " getSourceConnectionAnchor(";
  protected final String TEXT_249 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_250 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_251 = " getSourceConnectionAnchor(";
  protected final String TEXT_252 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_253 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_254 = "  getTargetConnectionAnchor(";
  protected final String TEXT_255 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_256 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_257 = "  getTargetConnectionAnchor(";
  protected final String TEXT_258 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_259 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_260 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_261 = NL;
  protected final String TEXT_262 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_263 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_264 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_265 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_266 = NL;
  protected final String TEXT_267 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_268 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_269 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_270 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_271 = NL;
  protected final String TEXT_272 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_273 = NL + "\t\t";
  protected final String TEXT_274 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_275 = ") ";
  protected final String TEXT_276 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_277 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_278 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_279 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_280 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_281 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_282 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_283 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_284 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_285 = "\t" + NL + "\t}";
  protected final String TEXT_286 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_287 = " createdFont;";
  protected final String TEXT_288 = "\t" + NL;
  protected final String TEXT_289 = NL;
  protected final String TEXT_290 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_291 = " style = (";
  protected final String TEXT_292 = ")  ";
  protected final String TEXT_293 = ".getStyle(";
  protected final String TEXT_294 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_295 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_296 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_297 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_298 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_299 = " style = (";
  protected final String TEXT_300 = ")  ";
  protected final String TEXT_301 = ".getStyle(";
  protected final String TEXT_302 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_303 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_304 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_305 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_306 = " createdBackgroundColor;" + NL;
  protected final String TEXT_307 = NL;
  protected final String TEXT_308 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_309 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_310 = " feature, ";
  protected final String TEXT_311 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_312 = "();";
  protected final String TEXT_313 = NL;
  protected final String TEXT_314 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_315 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_316 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_317 = NL;
  protected final String TEXT_318 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_319 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_320 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_321 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_322 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_323 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_324 = NL;
  protected final String TEXT_325 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_326 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
d349 561
a909 173
  protected final String TEXT_328 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_329 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_330 = NL;
  protected final String TEXT_331 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_332 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_333 = NL;
  protected final String TEXT_334 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_335 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_336 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_337 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_338 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_339 = NL;
  protected final String TEXT_340 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_341 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_342 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_343 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_344 = "StartCommand extends ";
  protected final String TEXT_345 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_346 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_347 = "StartCommand(";
  protected final String TEXT_348 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_349 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_350 = NL + "\t\t\treturn false;";
  protected final String TEXT_351 = NL + "\t\t\t";
  protected final String TEXT_352 = " container = (";
  protected final String TEXT_353 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_354 = ".eINSTANCE.get";
  protected final String TEXT_355 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_356 = NL;
  protected final String TEXT_357 = NL + "\t\tif (";
  protected final String TEXT_358 = ".";
  protected final String TEXT_359 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_360 = NL + "\t\t}";
  protected final String TEXT_361 = NL + "\t\tif (";
  protected final String TEXT_362 = ".";
  protected final String TEXT_363 = "().size() >= ";
  protected final String TEXT_364 = ".eINSTANCE.get";
  protected final String TEXT_365 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_366 = NL + "\t\t}";
  protected final String TEXT_367 = NL;
  protected final String TEXT_368 = NL + "\t\tif (";
  protected final String TEXT_369 = ".";
  protected final String TEXT_370 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_371 = NL + "\t\t}";
  protected final String TEXT_372 = NL + "\t\tif (";
  protected final String TEXT_373 = ".";
  protected final String TEXT_374 = "().size() >= ";
  protected final String TEXT_375 = ".eINSTANCE.get";
  protected final String TEXT_376 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_377 = NL + "\t\t}";
  protected final String TEXT_378 = NL;
  protected final String TEXT_379 = NL + "\t\t\tif(!";
  protected final String TEXT_380 = ".canCreateLink(";
  protected final String TEXT_381 = ", ";
  protected final String TEXT_382 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_383 = NL + "\t\t\treturn true;";
  protected final String TEXT_384 = NL + "\t\t\t";
  protected final String TEXT_385 = " domainElement = (";
  protected final String TEXT_386 = ")source.getElement();";
  protected final String TEXT_387 = NL;
  protected final String TEXT_388 = NL + "\t\tif (";
  protected final String TEXT_389 = ".";
  protected final String TEXT_390 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_391 = NL + "\t\t}";
  protected final String TEXT_392 = NL + "\t\tif (";
  protected final String TEXT_393 = ".";
  protected final String TEXT_394 = "().size() >= ";
  protected final String TEXT_395 = ".eINSTANCE.get";
  protected final String TEXT_396 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_397 = NL + "\t\t}";
  protected final String TEXT_398 = NL;
  protected final String TEXT_399 = NL + "\t\t\tif(!";
  protected final String TEXT_400 = ".canCreateLink(";
  protected final String TEXT_401 = ", ";
  protected final String TEXT_402 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_403 = NL + "\t\t\treturn true;";
  protected final String TEXT_404 = NL + "\t\t\treturn false;";
  protected final String TEXT_405 = NL + "\t\t}";
  protected final String TEXT_406 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_407 = " getRelationshipContainer(";
  protected final String TEXT_408 = " element, ";
  protected final String TEXT_409 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_410 = NL + NL + "\t}";
  protected final String TEXT_411 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_412 = "Command extends ";
  protected final String TEXT_413 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_414 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_415 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_416 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_417 = "Command(";
  protected final String TEXT_418 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_419 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_420 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_421 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_422 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_423 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_424 = ".eINSTANCE.createEdge();";
  protected final String TEXT_425 = NL + "\t\t\t";
  protected final String TEXT_426 = " createdDomainElement = ";
  protected final String TEXT_427 = ".eINSTANCE.create";
  protected final String TEXT_428 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_429 = NL + "\t\t\t";
  protected final String TEXT_430 = ".";
  protected final String TEXT_431 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_432 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
  protected final String TEXT_433 = NL + "\t\t\t";
  protected final String TEXT_434 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_435 = " domainModelEditDomain = ";
  protected final String TEXT_436 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_437 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_438 = NL + "\t\t\t";
  protected final String TEXT_439 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_440 = ".eINSTANCE.get";
  protected final String TEXT_441 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_442 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_443 = ".eINSTANCE.get";
  protected final String TEXT_444 = "(), createdDomainElement));";
  protected final String TEXT_445 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_446 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_447 = ".eINSTANCE.get";
  protected final String TEXT_448 = "(), createdDomainElement));";
  protected final String TEXT_449 = NL;
  protected final String TEXT_450 = NL + "\t\tif (";
  protected final String TEXT_451 = ".";
  protected final String TEXT_452 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_453 = NL + "\t\t}";
  protected final String TEXT_454 = NL + "\t\tif (";
  protected final String TEXT_455 = ".";
  protected final String TEXT_456 = "().size() >= ";
  protected final String TEXT_457 = ".eINSTANCE.get";
  protected final String TEXT_458 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_459 = NL + "\t\t}";
  protected final String TEXT_460 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_461 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_462 = ".eINSTANCE.get";
  protected final String TEXT_463 = "(), source.getElement()));";
  protected final String TEXT_464 = NL;
  protected final String TEXT_465 = NL + "\t\tif (";
  protected final String TEXT_466 = ".";
  protected final String TEXT_467 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_468 = NL + "\t\t}";
  protected final String TEXT_469 = NL + "\t\tif (";
  protected final String TEXT_470 = ".";
  protected final String TEXT_471 = "().size() >= ";
  protected final String TEXT_472 = ".eINSTANCE.get";
  protected final String TEXT_473 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_474 = NL + "\t\t}";
  protected final String TEXT_475 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_476 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_477 = ".eINSTANCE.get";
  protected final String TEXT_478 = "(), target.getElement()));";
  protected final String TEXT_479 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_480 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_481 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_482 = ".eINSTANCE.get";
  protected final String TEXT_483 = "(), target.getElement());";
  protected final String TEXT_484 = NL + "\t\t}" + NL;
  protected final String TEXT_485 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_486 = " getRelationshipContainer(";
  protected final String TEXT_487 = " element, ";
  protected final String TEXT_488 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_489 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_490 = NL;
  protected final String TEXT_491 = NL + "\t\t\tif(!";
  protected final String TEXT_492 = ".canCreateLink(";
  protected final String TEXT_493 = ", ";
  protected final String TEXT_494 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_495 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_496 = NL;
  protected final String TEXT_497 = NL;
  protected final String TEXT_498 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_499 = NL + "}";
  protected final String TEXT_500 = NL;
d917 1
a917 1
GenDiagram genDiagram = genNode.getDiagram();
d930 3
a932 1
	
d961 32
d994 1
a994 1
	
d1235 4
a1239 2
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1241 3
a1243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
d1245 1
a1245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d1247 1
a1247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1249 1
a1249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
d1251 1
a1251 1
    if (palette != null) {
d1253 136
d1390 1
a1390 1
    stringBuffer.append(TEXT_91);
d1392 1
a1392 1
    stringBuffer.append(TEXT_92);
d1394 1
a1394 1
    stringBuffer.append(TEXT_93);
d1396 1
a1396 1
    stringBuffer.append(TEXT_94);
d1398 1
a1398 1
    stringBuffer.append(TEXT_95);
d1424 1
a1424 1
    stringBuffer.append(TEXT_96);
d1426 1
a1426 1
    stringBuffer.append(TEXT_97);
d1429 1
a1429 1
    stringBuffer.append(TEXT_98);
d1433 1
a1433 1
    stringBuffer.append(TEXT_99);
d1435 1
a1435 1
    stringBuffer.append(TEXT_100);
d1437 1
a1437 1
    stringBuffer.append(TEXT_101);
d1439 1
a1439 1
    stringBuffer.append(TEXT_102);
d1441 1
a1441 1
    stringBuffer.append(TEXT_103);
d1443 3
a1445 3
    stringBuffer.append(TEXT_104);
    if (palette != null) {
    stringBuffer.append(TEXT_105);
d1447 1
a1447 1
    stringBuffer.append(TEXT_106);
d1449 1
a1449 1
    stringBuffer.append(TEXT_107);
d1451 1
a1451 1
    stringBuffer.append(TEXT_108);
d1453 1
a1453 1
    stringBuffer.append(TEXT_109);
d1455 1
a1455 1
    stringBuffer.append(TEXT_110);
d1457 1
a1457 1
    stringBuffer.append(TEXT_111);
d1481 1
a1481 1
    stringBuffer.append(TEXT_112);
d1483 1
a1483 1
    stringBuffer.append(TEXT_113);
d1486 1
a1486 1
    stringBuffer.append(TEXT_114);
d1490 1
a1490 1
    stringBuffer.append(TEXT_115);
d1492 1
a1492 1
    stringBuffer.append(TEXT_116);
d1494 1
a1494 1
    stringBuffer.append(TEXT_117);
d1496 1
a1496 1
    stringBuffer.append(TEXT_118);
d1498 1
a1498 1
    stringBuffer.append(TEXT_119);
d1500 1
a1500 1
    stringBuffer.append(TEXT_120);
d1502 1
a1502 1
    stringBuffer.append(TEXT_121);
d1504 1
a1504 1
    stringBuffer.append(TEXT_122);
d1506 1
a1506 1
    stringBuffer.append(TEXT_123);
d1508 1
a1508 1
    stringBuffer.append(TEXT_124);
d1510 1
a1510 1
    stringBuffer.append(TEXT_125);
d1512 1
a1512 1
    stringBuffer.append(TEXT_126);
d1522 1
a1522 1
    stringBuffer.append(TEXT_127);
d1524 1
a1524 1
    stringBuffer.append(TEXT_128);
d1526 1
a1526 1
    stringBuffer.append(TEXT_129);
d1528 1
a1528 1
    stringBuffer.append(TEXT_130);
d1530 1
a1530 1
    stringBuffer.append(TEXT_131);
d1532 1
a1532 1
    stringBuffer.append(TEXT_132);
d1536 1
a1536 1
    stringBuffer.append(TEXT_133);
d1538 1
a1538 1
    stringBuffer.append(TEXT_134);
d1540 1
a1540 1
    stringBuffer.append(TEXT_135);
d1542 1
a1542 1
    stringBuffer.append(TEXT_136);
d1544 1
a1544 1
    stringBuffer.append(TEXT_137);
d1546 1
a1546 1
    stringBuffer.append(TEXT_138);
d1548 1
a1548 1
    stringBuffer.append(TEXT_139);
d1550 1
a1550 1
    stringBuffer.append(TEXT_140);
d1552 1
a1552 1
    stringBuffer.append(TEXT_141);
d1554 1
a1554 1
    stringBuffer.append(TEXT_142);
d1556 1
a1556 1
    stringBuffer.append(TEXT_143);
d1558 1
a1558 1
    stringBuffer.append(TEXT_144);
d1560 1
a1560 1
    stringBuffer.append(TEXT_145);
d1562 1
a1562 1
    stringBuffer.append(TEXT_146);
d1564 1
a1564 1
    stringBuffer.append(TEXT_147);
d1566 1
a1566 1
    stringBuffer.append(TEXT_148);
d1568 1
a1568 1
    stringBuffer.append(TEXT_149);
d1570 1
a1570 1
    stringBuffer.append(TEXT_150);
d1572 1
a1572 1
    stringBuffer.append(TEXT_151);
d1574 1
a1574 1
    stringBuffer.append(TEXT_152);
d1576 1
a1576 1
    stringBuffer.append(TEXT_153);
d1578 1
a1578 1
    stringBuffer.append(TEXT_154);
d1580 1
a1580 1
    stringBuffer.append(TEXT_155);
d1582 1
a1582 1
    stringBuffer.append(TEXT_156);
d1587 1
a1587 1
    stringBuffer.append(TEXT_157);
d1589 1
a1589 1
    stringBuffer.append(TEXT_158);
d1591 1
a1591 1
    stringBuffer.append(TEXT_159);
d1593 1
a1593 1
    stringBuffer.append(TEXT_160);
d1595 1
a1595 1
    stringBuffer.append(TEXT_161);
d1597 1
a1597 1
    stringBuffer.append(TEXT_162);
d1599 1
a1599 1
    stringBuffer.append(TEXT_163);
d1601 1
a1601 1
    stringBuffer.append(TEXT_164);
d1603 1
a1603 1
    stringBuffer.append(TEXT_165);
d1605 1
a1605 1
    stringBuffer.append(TEXT_166);
d1607 1
a1607 1
    stringBuffer.append(TEXT_167);
d1611 1
a1611 1
    stringBuffer.append(TEXT_168);
d1613 1
a1613 1
    stringBuffer.append(TEXT_169);
d1621 1
a1621 1
    stringBuffer.append(TEXT_170);
d1623 1
a1623 1
    stringBuffer.append(TEXT_171);
d1625 1
a1625 1
    stringBuffer.append(TEXT_172);
d1627 1
a1627 1
    stringBuffer.append(TEXT_173);
d1629 1
a1629 1
    stringBuffer.append(TEXT_174);
d1638 1
a1638 1
    stringBuffer.append(TEXT_175);
d1640 1
a1640 1
    stringBuffer.append(TEXT_176);
d1642 1
a1642 1
    stringBuffer.append(TEXT_177);
d1644 1
a1644 1
    stringBuffer.append(TEXT_178);
d1646 1
a1646 1
    stringBuffer.append(TEXT_179);
d1650 1
a1650 1
    stringBuffer.append(TEXT_180);
d1658 1
a1658 1
    stringBuffer.append(TEXT_181);
d1660 1
a1660 1
    stringBuffer.append(TEXT_182);
d1662 1
a1662 1
    stringBuffer.append(TEXT_183);
d1664 1
a1664 1
    stringBuffer.append(TEXT_184);
d1666 1
a1666 1
    stringBuffer.append(TEXT_185);
d1670 1
a1670 1
    stringBuffer.append(TEXT_186);
d1674 1
a1674 1
    stringBuffer.append(TEXT_187);
d1676 1
a1676 1
    stringBuffer.append(TEXT_188);
d1688 1
a1688 1
    stringBuffer.append(TEXT_189);
d1690 1
a1690 1
    stringBuffer.append(TEXT_190);
d1692 1
a1692 1
    stringBuffer.append(TEXT_191);
d1694 1
a1694 1
    stringBuffer.append(TEXT_192);
d1696 1
a1696 1
    stringBuffer.append(TEXT_193);
d1698 1
a1698 1
    stringBuffer.append(TEXT_194);
d1700 1
a1700 1
    stringBuffer.append(TEXT_195);
d1704 1
a1704 1
    stringBuffer.append(TEXT_196);
d1706 1
a1706 1
    stringBuffer.append(TEXT_197);
d1708 1
a1708 1
    stringBuffer.append(TEXT_198);
d1710 1
a1710 1
    stringBuffer.append(TEXT_199);
d1712 1
a1712 1
    stringBuffer.append(TEXT_200);
d1714 1
a1714 1
    stringBuffer.append(TEXT_201);
d1716 1
a1716 1
    stringBuffer.append(TEXT_202);
d1718 1
a1718 1
    stringBuffer.append(TEXT_203);
d1720 1
a1720 1
    stringBuffer.append(TEXT_204);
d1722 1
a1722 1
    stringBuffer.append(TEXT_205);
d1724 1
a1724 1
    stringBuffer.append(TEXT_206);
d1726 1
a1726 1
    stringBuffer.append(TEXT_207);
d1734 1
a1734 1
    stringBuffer.append(TEXT_208);
d1736 1
a1736 1
    stringBuffer.append(TEXT_209);
d1740 1
a1740 1
    stringBuffer.append(TEXT_210);
d1744 1
a1744 1
    stringBuffer.append(TEXT_211);
d1746 1
a1746 1
    stringBuffer.append(TEXT_212);
d1751 1
a1751 1
    stringBuffer.append(TEXT_213);
d1753 1
a1753 1
    stringBuffer.append(TEXT_214);
d1757 1
a1757 1
    stringBuffer.append(TEXT_215);
d1759 1
a1759 1
    stringBuffer.append(TEXT_216);
d1761 1
a1761 1
    stringBuffer.append(TEXT_217);
d1763 1
a1763 1
    stringBuffer.append(TEXT_218);
d1765 1
a1765 1
    stringBuffer.append(TEXT_219);
d1770 1
a1770 1
    stringBuffer.append(TEXT_220);
d1772 1
a1772 1
    stringBuffer.append(TEXT_221);
d1776 1
a1776 1
    stringBuffer.append(TEXT_222);
d1778 1
a1778 1
    stringBuffer.append(TEXT_223);
d1780 1
a1780 1
    stringBuffer.append(TEXT_224);
d1785 1
a1785 1
    stringBuffer.append(TEXT_225);
d1789 1
a1789 1
    stringBuffer.append(TEXT_226);
d1791 1
a1791 1
    stringBuffer.append(TEXT_227);
d1795 1
a1795 1
    stringBuffer.append(TEXT_228);
d1797 1
a1797 1
    stringBuffer.append(TEXT_229);
d1799 1
a1799 1
    stringBuffer.append(TEXT_230);
d1804 1
a1804 1
    stringBuffer.append(TEXT_231);
d1808 1
a1808 1
    stringBuffer.append(TEXT_232);
d1815 1
a1815 1
    stringBuffer.append(TEXT_233);
d1817 1
a1817 1
    stringBuffer.append(TEXT_234);
d1819 1
a1819 1
    stringBuffer.append(TEXT_235);
d1821 1
a1821 1
    stringBuffer.append(TEXT_236);
d1823 1
a1823 1
    stringBuffer.append(TEXT_237);
d1827 1
a1827 1
    stringBuffer.append(TEXT_238);
d1829 1
a1829 1
    stringBuffer.append(TEXT_239);
d1831 1
a1831 1
    stringBuffer.append(TEXT_240);
d1833 1
a1833 1
    stringBuffer.append(TEXT_241);
d1835 1
a1835 1
    stringBuffer.append(TEXT_242);
d1837 1
a1837 1
    stringBuffer.append(TEXT_243);
d1839 1
a1839 1
    stringBuffer.append(TEXT_244);
d1841 1
a1841 1
    stringBuffer.append(TEXT_245);
d1843 1
a1843 1
    stringBuffer.append(TEXT_246);
d1845 1
a1845 1
    stringBuffer.append(TEXT_247);
d1847 1
a1847 1
    stringBuffer.append(TEXT_248);
d1849 1
a1849 1
    stringBuffer.append(TEXT_249);
d1851 1
a1851 1
    stringBuffer.append(TEXT_250);
d1853 1
a1853 1
    stringBuffer.append(TEXT_251);
d1855 1
a1855 1
    stringBuffer.append(TEXT_252);
d1857 1
a1857 1
    stringBuffer.append(TEXT_253);
d1859 1
a1859 1
    stringBuffer.append(TEXT_254);
d1861 1
a1861 1
    stringBuffer.append(TEXT_255);
d1863 1
a1863 1
    stringBuffer.append(TEXT_256);
d1865 1
a1865 1
    stringBuffer.append(TEXT_257);
d1867 1
a1867 1
    stringBuffer.append(TEXT_258);
d1869 1
a1869 1
    stringBuffer.append(TEXT_259);
d1871 3
a1873 3
    stringBuffer.append(TEXT_260);
    stringBuffer.append(TEXT_261);
    stringBuffer.append(TEXT_262);
d1875 1
a1875 1
    stringBuffer.append(TEXT_263);
d1877 1
a1877 1
    stringBuffer.append(TEXT_264);
d1879 3
a1881 3
    stringBuffer.append(TEXT_265);
    stringBuffer.append(TEXT_266);
    stringBuffer.append(TEXT_267);
d1883 1
a1883 1
    stringBuffer.append(TEXT_268);
d1885 1
a1885 1
    stringBuffer.append(TEXT_269);
d1887 1
a1887 1
    stringBuffer.append(TEXT_270);
d1891 1
a1891 1
    stringBuffer.append(TEXT_271);
d1899 1
a1899 1
    stringBuffer.append(TEXT_272);
d1903 1
a1903 1
    stringBuffer.append(TEXT_273);
d1905 1
a1905 1
    stringBuffer.append(TEXT_274);
d1907 1
a1907 1
    stringBuffer.append(TEXT_275);
d1909 1
a1909 1
    stringBuffer.append(TEXT_276);
d1911 1
a1911 1
    stringBuffer.append(TEXT_277);
d1913 1
a1913 1
    stringBuffer.append(TEXT_278);
d1915 1
a1915 1
    stringBuffer.append(TEXT_279);
d1917 1
a1917 1
    stringBuffer.append(TEXT_280);
d1919 1
a1919 1
    stringBuffer.append(TEXT_281);
d1921 1
a1921 1
    stringBuffer.append(TEXT_282);
d1923 1
a1923 1
    stringBuffer.append(TEXT_283);
d1925 1
a1925 1
    stringBuffer.append(TEXT_284);
d1929 1
a1929 1
    stringBuffer.append(TEXT_285);
d1933 1
a1933 1
    stringBuffer.append(TEXT_286);
d1935 1
a1935 1
    stringBuffer.append(TEXT_287);
d1939 3
a1941 3
    stringBuffer.append(TEXT_288);
    stringBuffer.append(TEXT_289);
    stringBuffer.append(TEXT_290);
d1943 1
a1943 1
    stringBuffer.append(TEXT_291);
d1945 1
a1945 1
    stringBuffer.append(TEXT_292);
d1947 1
a1947 1
    stringBuffer.append(TEXT_293);
d1949 1
a1949 1
    stringBuffer.append(TEXT_294);
d1951 1
a1951 1
    stringBuffer.append(TEXT_295);
d1953 1
a1953 1
    stringBuffer.append(TEXT_296);
d1955 1
a1955 1
    stringBuffer.append(TEXT_297);
d1957 1
a1957 1
    stringBuffer.append(TEXT_298);
d1959 1
a1959 1
    stringBuffer.append(TEXT_299);
d1961 1
a1961 1
    stringBuffer.append(TEXT_300);
d1963 1
a1963 1
    stringBuffer.append(TEXT_301);
d1965 1
a1965 1
    stringBuffer.append(TEXT_302);
d1967 1
a1967 1
    stringBuffer.append(TEXT_303);
d1969 1
a1969 1
    stringBuffer.append(TEXT_304);
d1971 1
a1971 1
    stringBuffer.append(TEXT_305);
d1973 3
a1975 3
    stringBuffer.append(TEXT_306);
    stringBuffer.append(TEXT_307);
    stringBuffer.append(TEXT_308);
d1977 1
a1977 1
    stringBuffer.append(TEXT_309);
d1979 1
a1979 1
    stringBuffer.append(TEXT_310);
d1981 1
a1981 1
    stringBuffer.append(TEXT_311);
d1983 3
a1985 3
    stringBuffer.append(TEXT_312);
    stringBuffer.append(TEXT_313);
    stringBuffer.append(TEXT_314);
d1987 1
a1987 1
    stringBuffer.append(TEXT_315);
d1989 3
a1991 3
    stringBuffer.append(TEXT_316);
    stringBuffer.append(TEXT_317);
    stringBuffer.append(TEXT_318);
d1993 1
a1993 1
    stringBuffer.append(TEXT_319);
d1995 1
a1995 1
    stringBuffer.append(TEXT_320);
d1997 1
a1997 1
    stringBuffer.append(TEXT_321);
d1999 1
a1999 1
    stringBuffer.append(TEXT_322);
d2001 3
a2003 3
    stringBuffer.append(TEXT_323);
    stringBuffer.append(TEXT_324);
    stringBuffer.append(TEXT_325);
d2005 3
a2007 3
    stringBuffer.append(TEXT_326);
    stringBuffer.append(TEXT_327);
    stringBuffer.append(TEXT_328);
d2009 3
a2011 3
    stringBuffer.append(TEXT_329);
    stringBuffer.append(TEXT_330);
    stringBuffer.append(TEXT_331);
d2013 3
a2015 3
    stringBuffer.append(TEXT_332);
    stringBuffer.append(TEXT_333);
    stringBuffer.append(TEXT_334);
d2017 1
a2017 1
    stringBuffer.append(TEXT_335);
d2019 1
a2019 1
    stringBuffer.append(TEXT_336);
d2021 1
a2021 1
    stringBuffer.append(TEXT_337);
d2023 3
a2025 3
    stringBuffer.append(TEXT_338);
    stringBuffer.append(TEXT_339);
    stringBuffer.append(TEXT_340);
d2027 1
a2027 1
    stringBuffer.append(TEXT_341);
d2029 1
a2029 3
    stringBuffer.append(TEXT_342);
    /*XXX: probably, this should go to a separate jet-template along with GraphicalNodeEditPolicy*/
    if (palette != null) {
d2038 1
d2044 1
a2044 1
		createCommandNameInfix = modelFacet.getMetaClass().getName();
d2048 1
a2048 1
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
d2057 2
a2058 2
    stringBuffer.append(TEXT_343);
    stringBuffer.append(createCommandNameInfix);
d2060 1
a2060 1
    stringBuffer.append(TEXT_344);
d2062 16
a2077 1
    stringBuffer.append(TEXT_345);
d2079 2
a2080 2
    stringBuffer.append(TEXT_346);
    stringBuffer.append(createCommandNameInfix);
d2082 3
a2084 3
    stringBuffer.append(TEXT_347);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_348);
d2086 23
a2108 1
    stringBuffer.append(TEXT_349);
d2110 4
a2113 4
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		if (containmentFeature == null) {
d2115 1
a2115 1
    stringBuffer.append(TEXT_350);
d2117 1
a2117 1
		} else {
d2119 1
a2119 1
    stringBuffer.append(TEXT_351);
d2121 1
a2121 1
    stringBuffer.append(TEXT_352);
d2123 1
a2123 1
    stringBuffer.append(TEXT_353);
d2125 1
a2125 1
    stringBuffer.append(TEXT_354);
d2127 1
a2127 1
    stringBuffer.append(TEXT_355);
d2129 4
a2132 4
			{
				GenFeature _feature = containmentFeature;
				String _ownerInstance = "container";
				String _exceedsUpperBound = "return false;";
d2134 1
a2134 1
    stringBuffer.append(TEXT_356);
d2140 1
a2140 1
    stringBuffer.append(TEXT_357);
d2142 1
a2142 1
    stringBuffer.append(TEXT_358);
d2144 1
a2144 1
    stringBuffer.append(TEXT_359);
d2146 1
a2146 1
    stringBuffer.append(TEXT_360);
d2150 1
a2150 1
    stringBuffer.append(TEXT_361);
d2152 1
a2152 1
    stringBuffer.append(TEXT_362);
d2154 1
a2154 1
    stringBuffer.append(TEXT_363);
d2156 1
a2156 1
    stringBuffer.append(TEXT_364);
d2158 1
a2158 1
    stringBuffer.append(TEXT_365);
d2160 1
a2160 1
    stringBuffer.append(TEXT_366);
d2166 7
a2172 7
			}
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
				{
					GenFeature _feature = childFeature;
					String _ownerInstance = "container";
					String _exceedsUpperBound = "return false;";
d2174 1
a2174 1
    stringBuffer.append(TEXT_367);
d2180 1
a2180 1
    stringBuffer.append(TEXT_368);
d2182 1
a2182 1
    stringBuffer.append(TEXT_369);
d2184 1
a2184 1
    stringBuffer.append(TEXT_370);
d2186 1
a2186 1
    stringBuffer.append(TEXT_371);
d2190 1
a2190 1
    stringBuffer.append(TEXT_372);
d2192 1
a2192 1
    stringBuffer.append(TEXT_373);
d2194 1
a2194 1
    stringBuffer.append(TEXT_374);
d2196 1
a2196 1
    stringBuffer.append(TEXT_375);
d2198 1
a2198 1
    stringBuffer.append(TEXT_376);
d2200 1
a2200 1
    stringBuffer.append(TEXT_377);
d2206 1
d2209 1
d2211 2
a2212 2
	String _source = "source.getElement()";
	String _target = "null";
d2214 1
a2214 1
    stringBuffer.append(TEXT_378);
d2218 1
a2218 1
    stringBuffer.append(TEXT_379);
d2220 1
a2220 1
    stringBuffer.append(TEXT_380);
d2222 1
a2222 1
    stringBuffer.append(TEXT_381);
d2224 1
a2224 1
    stringBuffer.append(TEXT_382);
d2231 698
a2928 1
    stringBuffer.append(TEXT_383);
d2931 19
d2952 246
d3199 9
a3207 5
    stringBuffer.append(TEXT_384);
    stringBuffer.append(importManager.getImportedName(outgoingClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_385);
    stringBuffer.append(importManager.getImportedName(outgoingClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_386);
d3209 1
a3209 4
		{
			GenFeature _feature = metaFeature;
			String _ownerInstance = "domainElement";
			String _exceedsUpperBound = "return false;";
d3211 9
a3219 1
    stringBuffer.append(TEXT_387);
d3221 2
a3222 3
int upperBound = _feature.getEcoreFeature().getUpperBound();
if (upperBound > 0) {
	if (upperBound == 1) {
d3224 3
a3226 7
    stringBuffer.append(TEXT_388);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_389);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_390);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_391);
d3228 3
a3230 1
	} else {
d3232 11
a3242 11
    stringBuffer.append(TEXT_392);
    stringBuffer.append(_ownerInstance);
    stringBuffer.append(TEXT_393);
    stringBuffer.append(_feature.getGetAccessor());
    stringBuffer.append(TEXT_394);
    stringBuffer.append(importManager.getImportedName(_feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_395);
    stringBuffer.append(_feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_396);
    stringBuffer.append(_exceedsUpperBound);
    stringBuffer.append(TEXT_397);
d3244 1
a3244 2
	}
}
d3246 11
d3258 1
d3260 2
a3261 3
{
	String _source = "source.getElement()";
	String _target = "null";
d3263 11
a3273 1
    stringBuffer.append(TEXT_398);
d3275 1
a3275 1
			if (linkConstraints != null) {
d3277 11
a3287 7
    stringBuffer.append(TEXT_399);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_400);
    stringBuffer.append(_source);
    stringBuffer.append(TEXT_401);
    stringBuffer.append(_target);
    stringBuffer.append(TEXT_402);
d3290 17
d3308 11
d3320 2
a3321 1
}	//local declarations for linkConstraints.jetinc
d3323 1
a3323 1
    stringBuffer.append(TEXT_403);
d3325 3
a3327 1
	} else {
d3329 11
a3339 1
    stringBuffer.append(TEXT_404);
d3341 1
a3341 1
	}
d3343 11
a3353 1
    stringBuffer.append(TEXT_405);
d3355 1
a3355 1
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
a3356 7
    stringBuffer.append(TEXT_406);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_407);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_408);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_409);
d3360 1
a3360 1
    stringBuffer.append(TEXT_410);
d3362 1
a3362 1
}	//outgoing links
d3364 1
d3366 1
a3366 22
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass incomingClass;
	String createCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
		incomingClass = metaFeature.getTypeGenClass();
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
d3368 1
a3368 1
    stringBuffer.append(TEXT_411);
d3371 1
a3371 1
    stringBuffer.append(TEXT_412);
d3373 1
a3373 1
    stringBuffer.append(TEXT_413);
d3375 1
a3375 1
    stringBuffer.append(TEXT_414);
d3377 1
a3377 1
    stringBuffer.append(TEXT_415);
d3379 1
a3379 1
    stringBuffer.append(TEXT_416);
d3382 1
a3382 1
    stringBuffer.append(TEXT_417);
d3384 1
a3384 1
    stringBuffer.append(TEXT_418);
d3386 1
a3386 1
    stringBuffer.append(TEXT_419);
d3388 1
a3388 1
    stringBuffer.append(TEXT_420);
d3390 1
a3390 1
    stringBuffer.append(TEXT_421);
d3392 1
a3392 1
    stringBuffer.append(TEXT_422);
d3394 1
a3394 1
    stringBuffer.append(TEXT_423);
d3396 1
a3396 1
    stringBuffer.append(TEXT_424);
d3398 3
a3400 3
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenClass linkClass = modelFacet.getMetaClass();
d3402 1
a3402 1
    stringBuffer.append(TEXT_425);
d3404 1
a3404 1
    stringBuffer.append(TEXT_426);
d3406 1
a3406 1
    stringBuffer.append(TEXT_427);
d3408 1
a3408 1
    stringBuffer.append(TEXT_428);
d3410 1
a3410 1
    stringBuffer.append(TEXT_429);
d3412 1
a3412 1
    stringBuffer.append(TEXT_430);
d3414 1
a3414 1
    stringBuffer.append(TEXT_431);
d3416 1
a3416 1
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d3418 1
a3418 1
    stringBuffer.append(TEXT_432);
d3420 1
a3420 1
	}
d3422 1
a3422 1
    stringBuffer.append(TEXT_433);
d3424 1
a3424 1
    stringBuffer.append(TEXT_434);
d3426 1
a3426 1
    stringBuffer.append(TEXT_435);
d3428 1
a3428 1
    stringBuffer.append(TEXT_436);
d3430 1
a3430 1
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
d3432 1
a3432 1
    stringBuffer.append(TEXT_437);
d3434 17
a3450 16
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();
		GenFeature targetFeature = modelFacet.getTargetMetaFeature();
		//source/link features seem to be pointing from link to its ends, not vice versa.
		//Anyway, if there is containment feature and it is not opposite to either the source/target, we should add containment, 
		//otherwise we will have problems with saving uncontained EObjects.
		boolean addSource = sourceFeature != null;
		boolean addTarget = targetFeature != null;
		boolean addChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
		if (containmentFeature != null) {
			if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
				EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
				if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					addSource = false;
d3452 5
a3456 5
			}
			if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
				EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
				if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					addTarget = false;
a3457 1
			}
d3459 1
a3459 1
    stringBuffer.append(TEXT_438);
d3461 1
a3461 1
    stringBuffer.append(TEXT_439);
d3463 1
a3463 1
    stringBuffer.append(TEXT_440);
d3465 1
a3465 1
    stringBuffer.append(TEXT_441);
d3467 1
a3467 1
    stringBuffer.append(TEXT_442);
d3469 1
a3469 1
    stringBuffer.append(TEXT_443);
d3471 1
a3471 1
    stringBuffer.append(TEXT_444);
d3473 2
a3474 2
		}
		if (addChild) {
d3476 1
a3476 1
    stringBuffer.append(TEXT_445);
d3478 1
a3478 1
    stringBuffer.append(TEXT_446);
d3480 1
a3480 1
    stringBuffer.append(TEXT_447);
d3482 1
a3482 1
    stringBuffer.append(TEXT_448);
d3484 6
a3489 6
		}
		if (addSource) {
			{
				GenFeature _feature = sourceFeature;
				String _ownerInstance = "createdDomainElement";
				String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
d3491 1
a3491 1
    stringBuffer.append(TEXT_449);
d3497 1
a3497 1
    stringBuffer.append(TEXT_450);
d3499 1
a3499 1
    stringBuffer.append(TEXT_451);
d3501 1
a3501 1
    stringBuffer.append(TEXT_452);
d3503 1
a3503 1
    stringBuffer.append(TEXT_453);
d3507 1
a3507 1
    stringBuffer.append(TEXT_454);
d3509 1
a3509 1
    stringBuffer.append(TEXT_455);
d3511 1
a3511 1
    stringBuffer.append(TEXT_456);
d3513 1
a3513 1
    stringBuffer.append(TEXT_457);
d3515 1
a3515 1
    stringBuffer.append(TEXT_458);
d3517 1
a3517 1
    stringBuffer.append(TEXT_459);
d3523 1
a3523 1
			}
d3525 1
a3525 1
    stringBuffer.append(TEXT_460);
d3527 1
a3527 1
    stringBuffer.append(TEXT_461);
d3529 1
a3529 1
    stringBuffer.append(TEXT_462);
d3531 1
a3531 1
    stringBuffer.append(TEXT_463);
d3533 6
a3538 6
		}
		if (addTarget) {
			{
				GenFeature _feature = targetFeature;
				String _ownerInstance = "createdDomainElement";
				String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
d3540 1
a3540 1
    stringBuffer.append(TEXT_464);
d3546 1
a3546 1
    stringBuffer.append(TEXT_465);
d3548 1
a3548 1
    stringBuffer.append(TEXT_466);
d3550 1
a3550 1
    stringBuffer.append(TEXT_467);
d3552 1
a3552 1
    stringBuffer.append(TEXT_468);
d3556 1
a3556 1
    stringBuffer.append(TEXT_469);
d3558 1
a3558 1
    stringBuffer.append(TEXT_470);
d3560 1
a3560 1
    stringBuffer.append(TEXT_471);
d3562 1
a3562 1
    stringBuffer.append(TEXT_472);
d3564 1
a3564 1
    stringBuffer.append(TEXT_473);
d3566 1
a3566 1
    stringBuffer.append(TEXT_474);
d3572 1
a3572 1
			}
d3574 1
a3574 1
    stringBuffer.append(TEXT_475);
d3576 1
a3576 1
    stringBuffer.append(TEXT_476);
d3578 1
a3578 1
    stringBuffer.append(TEXT_477);
d3580 1
a3580 1
    stringBuffer.append(TEXT_478);
d3582 1
a3582 1
		}
d3584 1
a3584 1
    stringBuffer.append(TEXT_479);
d3586 2
a3587 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d3589 1
a3589 1
    stringBuffer.append(TEXT_480);
d3591 1
a3591 1
    stringBuffer.append(TEXT_481);
d3593 1
a3593 1
    stringBuffer.append(TEXT_482);
d3595 1
a3595 1
    stringBuffer.append(TEXT_483);
d3597 1
a3597 1
	}
d3599 2
a3600 1
    stringBuffer.append(TEXT_484);
d3602 1
a3602 1
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
d3604 1
a3604 1
    stringBuffer.append(TEXT_485);
d3606 1
a3606 1
    stringBuffer.append(TEXT_486);
d3608 1
a3608 1
    stringBuffer.append(TEXT_487);
d3610 1
a3610 1
    stringBuffer.append(TEXT_488);
d3612 1
a3612 1
	}
d3614 1
a3614 1
    stringBuffer.append(TEXT_489);
d3620 1
a3620 1
    stringBuffer.append(TEXT_490);
d3624 1
a3624 1
    stringBuffer.append(TEXT_491);
d3626 1
a3626 1
    stringBuffer.append(TEXT_492);
d3628 1
a3628 1
    stringBuffer.append(TEXT_493);
d3630 1
a3630 1
    stringBuffer.append(TEXT_494);
d3637 1
a3637 1
    stringBuffer.append(TEXT_495);
d3639 1
a3639 1
}
d3646 1
a3646 1
    stringBuffer.append(TEXT_496);
d3648 1
a3648 1
    stringBuffer.append(TEXT_497);
d3652 1
a3652 1
    stringBuffer.append(TEXT_498);
d3659 1
a3659 1
    stringBuffer.append(TEXT_499);
d3661 1
a3661 1
    stringBuffer.append(TEXT_500);
@


1.13.2.1
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@d453 1
a453 1
  protected final String TEXT_432 = NL + "\t\t\tcreatedEdge.setElement(null);";
@


1.13.2.2
log
@[152859] bblajer - Lite Generator: All generated methods should be marked as @@generated
[152854] bblajer - Lite Generator: Allow shape nodes to be placed inside list-layout compartments
@
text
@d260 1
a260 1
  protected final String TEXT_239 = " node = getDiagramNode();" + NL + "\t\tif (node.getLayoutConstraint() == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
@


1.12
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d254 28
a281 28
  protected final String TEXT_233 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_234 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_235 = ";" + NL + "\t\t";
  protected final String TEXT_236 = " bounds = (";
  protected final String TEXT_237 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_238 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_239 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_240 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_241 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_242 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_243 = " getSourceConnectionAnchor(";
  protected final String TEXT_244 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_245 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_246 = " getSourceConnectionAnchor(";
  protected final String TEXT_247 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_248 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_249 = "  getTargetConnectionAnchor(";
  protected final String TEXT_250 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_251 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_252 = "  getTargetConnectionAnchor(";
  protected final String TEXT_253 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_254 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_255 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_256 = NL;
  protected final String TEXT_257 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_258 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_259 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_260 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
d283 4
a286 4
  protected final String TEXT_262 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addRefresher(";
  protected final String TEXT_263 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_264 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_265 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
d288 99
a386 99
  protected final String TEXT_267 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_268 = NL + "\t\t";
  protected final String TEXT_269 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_270 = ") ";
  protected final String TEXT_271 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_272 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_273 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_274 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_275 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_276 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_277 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_278 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_279 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_280 = "\t" + NL + "\t}";
  protected final String TEXT_281 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_282 = " createdFont;";
  protected final String TEXT_283 = "\t" + NL;
  protected final String TEXT_284 = NL;
  protected final String TEXT_285 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_286 = " style = (";
  protected final String TEXT_287 = ")  ";
  protected final String TEXT_288 = ".getStyle(";
  protected final String TEXT_289 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_290 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_291 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_292 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_293 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_294 = " style = (";
  protected final String TEXT_295 = ")  ";
  protected final String TEXT_296 = ".getStyle(";
  protected final String TEXT_297 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_298 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_299 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_300 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_301 = " createdBackgroundColor;" + NL;
  protected final String TEXT_302 = NL;
  protected final String TEXT_303 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_304 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_305 = " feature, ";
  protected final String TEXT_306 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_307 = "();";
  protected final String TEXT_308 = NL;
  protected final String TEXT_309 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_310 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_311 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_312 = NL;
  protected final String TEXT_313 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_314 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_315 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_316 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_317 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_318 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_319 = NL;
  protected final String TEXT_320 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_321 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_322 = NL;
  protected final String TEXT_323 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_324 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_325 = NL;
  protected final String TEXT_326 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_327 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_328 = NL;
  protected final String TEXT_329 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_330 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_331 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_332 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_333 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_334 = NL;
  protected final String TEXT_335 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_336 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_337 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_338 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_339 = "StartCommand extends ";
  protected final String TEXT_340 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_341 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_342 = "StartCommand(";
  protected final String TEXT_343 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_344 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_345 = NL + "\t\t\treturn false;";
  protected final String TEXT_346 = NL + "\t\t\t";
  protected final String TEXT_347 = " container = (";
  protected final String TEXT_348 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_349 = ".eINSTANCE.get";
  protected final String TEXT_350 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_351 = NL;
  protected final String TEXT_352 = NL + "\t\tif (";
  protected final String TEXT_353 = ".";
  protected final String TEXT_354 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_355 = NL + "\t\t}";
  protected final String TEXT_356 = NL + "\t\tif (";
  protected final String TEXT_357 = ".";
  protected final String TEXT_358 = "().size() >= ";
  protected final String TEXT_359 = ".eINSTANCE.get";
  protected final String TEXT_360 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_361 = NL + "\t\t}";
  protected final String TEXT_362 = NL;
  protected final String TEXT_363 = NL + "\t\tif (";
  protected final String TEXT_364 = ".";
  protected final String TEXT_365 = "() != null) {" + NL + "\t\t\t";
d388 66
a453 66
  protected final String TEXT_367 = NL + "\t\tif (";
  protected final String TEXT_368 = ".";
  protected final String TEXT_369 = "().size() >= ";
  protected final String TEXT_370 = ".eINSTANCE.get";
  protected final String TEXT_371 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_372 = NL + "\t\t}";
  protected final String TEXT_373 = NL;
  protected final String TEXT_374 = NL + "\t\t\tif(!";
  protected final String TEXT_375 = ".canCreateLink(";
  protected final String TEXT_376 = ", ";
  protected final String TEXT_377 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_378 = NL + "\t\t\treturn true;";
  protected final String TEXT_379 = NL + "\t\t\t";
  protected final String TEXT_380 = " domainElement = (";
  protected final String TEXT_381 = ")source.getElement();";
  protected final String TEXT_382 = NL;
  protected final String TEXT_383 = NL + "\t\tif (";
  protected final String TEXT_384 = ".";
  protected final String TEXT_385 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_386 = NL + "\t\t}";
  protected final String TEXT_387 = NL + "\t\tif (";
  protected final String TEXT_388 = ".";
  protected final String TEXT_389 = "().size() >= ";
  protected final String TEXT_390 = ".eINSTANCE.get";
  protected final String TEXT_391 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_392 = NL + "\t\t}";
  protected final String TEXT_393 = NL;
  protected final String TEXT_394 = NL + "\t\t\tif(!";
  protected final String TEXT_395 = ".canCreateLink(";
  protected final String TEXT_396 = ", ";
  protected final String TEXT_397 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_398 = NL + "\t\t\treturn true;";
  protected final String TEXT_399 = NL + "\t\t\treturn false;";
  protected final String TEXT_400 = NL + "\t\t}";
  protected final String TEXT_401 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_402 = " getRelationshipContainer(";
  protected final String TEXT_403 = " element, ";
  protected final String TEXT_404 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_405 = NL + NL + "\t}";
  protected final String TEXT_406 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_407 = "Command extends ";
  protected final String TEXT_408 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_409 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_410 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_411 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_412 = "Command(";
  protected final String TEXT_413 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_414 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_415 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_416 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_417 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_418 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_419 = ".eINSTANCE.createEdge();";
  protected final String TEXT_420 = NL + "\t\t\t";
  protected final String TEXT_421 = " createdDomainElement = ";
  protected final String TEXT_422 = ".eINSTANCE.create";
  protected final String TEXT_423 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_424 = NL + "\t\t\t";
  protected final String TEXT_425 = ".";
  protected final String TEXT_426 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_427 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
  protected final String TEXT_428 = NL + "\t\t\t";
  protected final String TEXT_429 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_430 = " domainModelEditDomain = ";
  protected final String TEXT_431 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_432 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
d455 23
a477 23
  protected final String TEXT_434 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_435 = ".eINSTANCE.get";
  protected final String TEXT_436 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_437 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_438 = ".eINSTANCE.get";
  protected final String TEXT_439 = "(), createdDomainElement));";
  protected final String TEXT_440 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_441 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_442 = ".eINSTANCE.get";
  protected final String TEXT_443 = "(), createdDomainElement));";
  protected final String TEXT_444 = NL;
  protected final String TEXT_445 = NL + "\t\tif (";
  protected final String TEXT_446 = ".";
  protected final String TEXT_447 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_448 = NL + "\t\t}";
  protected final String TEXT_449 = NL + "\t\tif (";
  protected final String TEXT_450 = ".";
  protected final String TEXT_451 = "().size() >= ";
  protected final String TEXT_452 = ".eINSTANCE.get";
  protected final String TEXT_453 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_454 = NL + "\t\t}";
  protected final String TEXT_455 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_456 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
d479 14
a492 14
  protected final String TEXT_458 = "(), source.getElement()));";
  protected final String TEXT_459 = NL;
  protected final String TEXT_460 = NL + "\t\tif (";
  protected final String TEXT_461 = ".";
  protected final String TEXT_462 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_463 = NL + "\t\t}";
  protected final String TEXT_464 = NL + "\t\tif (";
  protected final String TEXT_465 = ".";
  protected final String TEXT_466 = "().size() >= ";
  protected final String TEXT_467 = ".eINSTANCE.get";
  protected final String TEXT_468 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_469 = NL + "\t\t}";
  protected final String TEXT_470 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_471 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
d494 4
a497 4
  protected final String TEXT_473 = "(), target.getElement()));";
  protected final String TEXT_474 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_475 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_476 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
d499 23
a521 18
  protected final String TEXT_478 = "(), target.getElement());";
  protected final String TEXT_479 = NL + "\t\t}" + NL;
  protected final String TEXT_480 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_481 = " getRelationshipContainer(";
  protected final String TEXT_482 = " element, ";
  protected final String TEXT_483 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_484 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_485 = NL;
  protected final String TEXT_486 = NL + "\t\t\tif(!";
  protected final String TEXT_487 = ".canCreateLink(";
  protected final String TEXT_488 = ", ";
  protected final String TEXT_489 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_490 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_491 = NL;
  protected final String TEXT_492 = NL;
  protected final String TEXT_493 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_494 = NL + "}";
  protected final String TEXT_495 = NL;
d1250 3
d1254 1
a1254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1256 1
a1256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1258 1
a1258 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1260 1
a1260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1262 3
a1264 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d1266 1
a1266 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1268 1
a1268 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1270 1
a1270 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1272 1
a1272 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1274 1
a1274 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
d1276 1
a1276 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d1278 1
a1278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d1280 1
a1280 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
d1282 1
a1282 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d1284 1
a1284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d1286 1
a1286 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
d1288 1
a1288 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d1290 1
a1290 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d1292 1
a1292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
d1294 1
a1294 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d1296 1
a1296 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d1298 1
a1298 1
    /*@@ include file="adapters/propertySource.javajetinc"*/
d1300 1
d1302 1
d1304 1
a1304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d1306 1
a1306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1308 1
a1308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1312 1
a1312 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1314 1
a1314 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1318 8
d1329 1
a1329 1
    stringBuffer.append(TEXT_266);
d1337 1
a1337 1
    stringBuffer.append(TEXT_267);
d1341 1
a1341 1
    stringBuffer.append(TEXT_268);
d1343 1
a1343 1
    stringBuffer.append(TEXT_269);
d1345 1
a1345 1
    stringBuffer.append(TEXT_270);
d1347 1
a1347 1
    stringBuffer.append(TEXT_271);
d1349 1
a1349 1
    stringBuffer.append(TEXT_272);
d1351 1
a1351 1
    stringBuffer.append(TEXT_273);
d1353 1
a1353 1
    stringBuffer.append(TEXT_274);
d1355 1
a1355 1
    stringBuffer.append(TEXT_275);
d1357 1
a1357 1
    stringBuffer.append(TEXT_276);
d1359 1
a1359 1
    stringBuffer.append(TEXT_277);
d1361 1
a1361 1
    stringBuffer.append(TEXT_278);
d1363 1
a1363 1
    stringBuffer.append(TEXT_279);
d1367 1
a1367 1
    stringBuffer.append(TEXT_280);
d1371 1
a1371 1
    stringBuffer.append(TEXT_281);
d1373 1
a1373 1
    stringBuffer.append(TEXT_282);
a1376 8
    stringBuffer.append(TEXT_283);
    stringBuffer.append(TEXT_284);
    stringBuffer.append(TEXT_285);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_286);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
    stringBuffer.append(TEXT_287);
    stringBuffer.append(primaryView);
a1377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1380 1
a1380 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1382 1
a1382 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1384 1
a1384 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1386 1
a1386 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1388 1
a1388 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1390 1
a1390 1
    stringBuffer.append(primaryView);
d1392 1
a1392 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1396 1
a1396 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1398 1
a1398 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1400 1
a1400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1402 1
d1404 1
d1406 1
a1406 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d1408 1
a1408 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1410 1
a1410 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
a1411 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d1414 1
d1416 1
a1416 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1418 1
a1418 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1420 1
a1422 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1429 1
a1430 1
    stringBuffer.append(TEXT_318);
d1432 1
d1436 1
d1438 1
a1439 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1442 1
a1443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1446 1
a1447 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1448 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1454 1
d1460 8
d1496 1
a1496 1
    stringBuffer.append(TEXT_338);
d1499 1
a1499 1
    stringBuffer.append(TEXT_339);
d1501 1
a1501 1
    stringBuffer.append(TEXT_340);
d1503 1
a1503 1
    stringBuffer.append(TEXT_341);
d1506 1
a1506 1
    stringBuffer.append(TEXT_342);
d1508 1
a1508 1
    stringBuffer.append(TEXT_343);
d1510 1
a1510 1
    stringBuffer.append(TEXT_344);
d1517 1
a1517 1
    stringBuffer.append(TEXT_345);
d1521 1
a1521 1
    stringBuffer.append(TEXT_346);
d1523 1
a1523 1
    stringBuffer.append(TEXT_347);
d1525 1
a1525 1
    stringBuffer.append(TEXT_348);
d1527 1
a1527 1
    stringBuffer.append(TEXT_349);
d1529 1
a1529 1
    stringBuffer.append(TEXT_350);
d1536 1
a1536 1
    stringBuffer.append(TEXT_351);
d1542 1
a1542 1
    stringBuffer.append(TEXT_352);
d1544 1
a1544 1
    stringBuffer.append(TEXT_353);
d1546 1
a1546 1
    stringBuffer.append(TEXT_354);
d1548 1
a1548 1
    stringBuffer.append(TEXT_355);
d1552 1
a1552 1
    stringBuffer.append(TEXT_356);
d1554 1
a1554 1
    stringBuffer.append(TEXT_357);
d1556 1
a1556 1
    stringBuffer.append(TEXT_358);
d1558 1
a1558 1
    stringBuffer.append(TEXT_359);
d1560 1
a1560 1
    stringBuffer.append(TEXT_360);
d1562 1
a1562 1
    stringBuffer.append(TEXT_361);
d1576 1
a1576 1
    stringBuffer.append(TEXT_362);
d1582 1
a1582 1
    stringBuffer.append(TEXT_363);
d1584 1
a1584 1
    stringBuffer.append(TEXT_364);
d1586 1
a1586 1
    stringBuffer.append(TEXT_365);
d1588 1
a1588 1
    stringBuffer.append(TEXT_366);
d1592 1
a1592 1
    stringBuffer.append(TEXT_367);
d1594 1
a1594 1
    stringBuffer.append(TEXT_368);
d1596 1
a1596 1
    stringBuffer.append(TEXT_369);
d1598 1
a1598 1
    stringBuffer.append(TEXT_370);
d1600 1
a1600 1
    stringBuffer.append(TEXT_371);
d1602 1
a1602 1
    stringBuffer.append(TEXT_372);
d1614 1
a1614 1
    stringBuffer.append(TEXT_373);
d1618 1
a1618 1
    stringBuffer.append(TEXT_374);
d1620 1
a1620 1
    stringBuffer.append(TEXT_375);
d1622 1
a1622 1
    stringBuffer.append(TEXT_376);
d1624 1
a1624 1
    stringBuffer.append(TEXT_377);
d1631 1
a1631 1
    stringBuffer.append(TEXT_378);
d1637 1
a1637 1
    stringBuffer.append(TEXT_379);
d1639 1
a1639 1
    stringBuffer.append(TEXT_380);
d1641 1
a1641 1
    stringBuffer.append(TEXT_381);
d1648 1
a1648 1
    stringBuffer.append(TEXT_382);
d1654 1
a1654 1
    stringBuffer.append(TEXT_383);
d1656 1
a1656 1
    stringBuffer.append(TEXT_384);
d1658 1
a1658 1
    stringBuffer.append(TEXT_385);
d1660 1
a1660 1
    stringBuffer.append(TEXT_386);
d1664 1
a1664 1
    stringBuffer.append(TEXT_387);
d1666 1
a1666 1
    stringBuffer.append(TEXT_388);
d1668 1
a1668 1
    stringBuffer.append(TEXT_389);
d1670 1
a1670 1
    stringBuffer.append(TEXT_390);
d1672 1
a1672 1
    stringBuffer.append(TEXT_391);
d1674 1
a1674 1
    stringBuffer.append(TEXT_392);
d1685 1
a1685 1
    stringBuffer.append(TEXT_393);
d1689 1
a1689 1
    stringBuffer.append(TEXT_394);
d1691 1
a1691 1
    stringBuffer.append(TEXT_395);
d1693 1
a1693 1
    stringBuffer.append(TEXT_396);
d1695 1
a1695 1
    stringBuffer.append(TEXT_397);
d1702 1
a1702 1
    stringBuffer.append(TEXT_398);
d1706 1
a1706 1
    stringBuffer.append(TEXT_399);
d1710 1
a1710 1
    stringBuffer.append(TEXT_400);
d1714 1
a1714 1
    stringBuffer.append(TEXT_401);
d1716 1
a1716 1
    stringBuffer.append(TEXT_402);
d1718 1
a1718 1
    stringBuffer.append(TEXT_403);
d1720 1
a1720 1
    stringBuffer.append(TEXT_404);
d1724 1
a1724 1
    stringBuffer.append(TEXT_405);
d1752 1
a1752 1
    stringBuffer.append(TEXT_406);
d1755 1
a1755 1
    stringBuffer.append(TEXT_407);
d1757 1
a1757 1
    stringBuffer.append(TEXT_408);
d1759 1
a1759 1
    stringBuffer.append(TEXT_409);
d1761 1
a1761 1
    stringBuffer.append(TEXT_410);
d1763 1
a1763 1
    stringBuffer.append(TEXT_411);
d1766 1
a1766 1
    stringBuffer.append(TEXT_412);
d1768 1
a1768 1
    stringBuffer.append(TEXT_413);
d1770 1
a1770 1
    stringBuffer.append(TEXT_414);
d1772 1
a1772 1
    stringBuffer.append(TEXT_415);
d1774 1
a1774 1
    stringBuffer.append(TEXT_416);
d1776 1
a1776 1
    stringBuffer.append(TEXT_417);
d1778 1
a1778 1
    stringBuffer.append(TEXT_418);
d1780 1
a1780 1
    stringBuffer.append(TEXT_419);
d1786 1
a1786 1
    stringBuffer.append(TEXT_420);
d1788 1
a1788 1
    stringBuffer.append(TEXT_421);
d1790 1
a1790 1
    stringBuffer.append(TEXT_422);
d1792 1
a1792 1
    stringBuffer.append(TEXT_423);
d1794 1
a1794 1
    stringBuffer.append(TEXT_424);
d1796 1
a1796 1
    stringBuffer.append(TEXT_425);
d1798 1
a1798 1
    stringBuffer.append(TEXT_426);
d1802 1
a1802 1
    stringBuffer.append(TEXT_427);
d1806 1
a1806 1
    stringBuffer.append(TEXT_428);
d1808 1
a1808 1
    stringBuffer.append(TEXT_429);
d1810 1
a1810 1
    stringBuffer.append(TEXT_430);
d1812 1
a1812 1
    stringBuffer.append(TEXT_431);
d1816 1
a1816 1
    stringBuffer.append(TEXT_432);
d1843 1
a1843 1
    stringBuffer.append(TEXT_433);
d1845 1
a1845 1
    stringBuffer.append(TEXT_434);
d1847 1
a1847 1
    stringBuffer.append(TEXT_435);
d1849 1
a1849 1
    stringBuffer.append(TEXT_436);
d1851 1
a1851 1
    stringBuffer.append(TEXT_437);
d1853 1
a1853 1
    stringBuffer.append(TEXT_438);
d1855 1
a1855 1
    stringBuffer.append(TEXT_439);
d1860 1
a1860 1
    stringBuffer.append(TEXT_440);
d1862 1
a1862 1
    stringBuffer.append(TEXT_441);
d1864 1
a1864 1
    stringBuffer.append(TEXT_442);
d1866 1
a1866 1
    stringBuffer.append(TEXT_443);
d1875 1
a1875 1
    stringBuffer.append(TEXT_444);
d1881 1
a1881 1
    stringBuffer.append(TEXT_445);
d1883 1
a1883 1
    stringBuffer.append(TEXT_446);
d1885 1
a1885 1
    stringBuffer.append(TEXT_447);
d1887 1
a1887 1
    stringBuffer.append(TEXT_448);
d1891 1
a1891 1
    stringBuffer.append(TEXT_449);
d1893 1
a1893 1
    stringBuffer.append(TEXT_450);
d1895 1
a1895 1
    stringBuffer.append(TEXT_451);
d1897 1
a1897 1
    stringBuffer.append(TEXT_452);
d1899 1
a1899 1
    stringBuffer.append(TEXT_453);
d1901 1
a1901 1
    stringBuffer.append(TEXT_454);
d1909 1
a1909 1
    stringBuffer.append(TEXT_455);
d1911 1
a1911 1
    stringBuffer.append(TEXT_456);
d1913 1
a1913 1
    stringBuffer.append(TEXT_457);
d1915 1
a1915 1
    stringBuffer.append(TEXT_458);
d1924 1
a1924 1
    stringBuffer.append(TEXT_459);
d1930 1
a1930 1
    stringBuffer.append(TEXT_460);
d1932 1
a1932 1
    stringBuffer.append(TEXT_461);
d1934 1
a1934 1
    stringBuffer.append(TEXT_462);
d1936 1
a1936 1
    stringBuffer.append(TEXT_463);
d1940 1
a1940 1
    stringBuffer.append(TEXT_464);
d1942 1
a1942 1
    stringBuffer.append(TEXT_465);
d1944 1
a1944 1
    stringBuffer.append(TEXT_466);
d1946 1
a1946 1
    stringBuffer.append(TEXT_467);
d1948 1
a1948 1
    stringBuffer.append(TEXT_468);
d1950 1
a1950 1
    stringBuffer.append(TEXT_469);
d1958 1
a1958 1
    stringBuffer.append(TEXT_470);
d1960 1
a1960 1
    stringBuffer.append(TEXT_471);
d1962 1
a1962 1
    stringBuffer.append(TEXT_472);
d1964 1
a1964 1
    stringBuffer.append(TEXT_473);
d1968 1
a1968 1
    stringBuffer.append(TEXT_474);
d1973 1
a1973 1
    stringBuffer.append(TEXT_475);
d1975 1
a1975 1
    stringBuffer.append(TEXT_476);
d1977 1
a1977 1
    stringBuffer.append(TEXT_477);
d1979 1
a1979 1
    stringBuffer.append(TEXT_478);
d1983 1
a1983 1
    stringBuffer.append(TEXT_479);
d1987 1
a1987 1
    stringBuffer.append(TEXT_480);
d1989 1
a1989 1
    stringBuffer.append(TEXT_481);
d1991 1
a1991 1
    stringBuffer.append(TEXT_482);
d1993 1
a1993 1
    stringBuffer.append(TEXT_483);
d1997 1
a1997 1
    stringBuffer.append(TEXT_484);
d2003 1
a2003 1
    stringBuffer.append(TEXT_485);
d2007 1
a2007 1
    stringBuffer.append(TEXT_486);
d2009 1
a2009 1
    stringBuffer.append(TEXT_487);
d2011 1
a2011 1
    stringBuffer.append(TEXT_488);
d2013 1
a2013 1
    stringBuffer.append(TEXT_489);
d2020 1
a2020 1
    stringBuffer.append(TEXT_490);
d2029 1
a2029 1
    stringBuffer.append(TEXT_491);
d2031 1
a2031 1
    stringBuffer.append(TEXT_492);
d2035 1
a2035 1
    stringBuffer.append(TEXT_493);
d2042 1
a2042 1
    stringBuffer.append(TEXT_494);
d2044 1
a2044 1
    stringBuffer.append(TEXT_495);
@


1.11
log
@#146009 Lite Generator: Changes in the underlying domain model should be automatically reflected in the notational model
1,2,3 Parts commited.
@
text
@d288 41
a328 41
  protected final String TEXT_267 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_268 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_269 = ") ";
  protected final String TEXT_270 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_271 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_272 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_273 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_274 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_275 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_276 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_277 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_278 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_279 = " createdFont;" + NL;
  protected final String TEXT_280 = NL;
  protected final String TEXT_281 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_282 = " style = (";
  protected final String TEXT_283 = ")  ";
  protected final String TEXT_284 = ".getStyle(";
  protected final String TEXT_285 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_286 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_287 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_288 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_289 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_290 = " style = (";
  protected final String TEXT_291 = ")  ";
  protected final String TEXT_292 = ".getStyle(";
  protected final String TEXT_293 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_294 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_295 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_296 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_297 = " createdBackgroundColor;" + NL;
  protected final String TEXT_298 = NL;
  protected final String TEXT_299 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_300 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_301 = " feature, ";
  protected final String TEXT_302 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_303 = "();";
  protected final String TEXT_304 = NL;
  protected final String TEXT_305 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_306 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_307 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
d330 43
a372 43
  protected final String TEXT_309 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_310 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_311 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_312 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_313 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_314 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_315 = NL;
  protected final String TEXT_316 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_317 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_318 = NL;
  protected final String TEXT_319 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_320 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_321 = NL;
  protected final String TEXT_322 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_323 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_324 = NL;
  protected final String TEXT_325 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_326 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_327 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_328 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_329 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_330 = NL;
  protected final String TEXT_331 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_332 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_333 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_334 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_335 = "StartCommand extends ";
  protected final String TEXT_336 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_337 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_338 = "StartCommand(";
  protected final String TEXT_339 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_340 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_341 = NL + "\t\t\treturn false;";
  protected final String TEXT_342 = NL + "\t\t\t";
  protected final String TEXT_343 = " container = (";
  protected final String TEXT_344 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_345 = ".eINSTANCE.get";
  protected final String TEXT_346 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_347 = NL;
  protected final String TEXT_348 = NL + "\t\tif (";
  protected final String TEXT_349 = ".";
  protected final String TEXT_350 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_351 = NL + "\t\t}";
d375 9
a383 9
  protected final String TEXT_354 = "().size() >= ";
  protected final String TEXT_355 = ".eINSTANCE.get";
  protected final String TEXT_356 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_357 = NL + "\t\t}";
  protected final String TEXT_358 = NL;
  protected final String TEXT_359 = NL + "\t\tif (";
  protected final String TEXT_360 = ".";
  protected final String TEXT_361 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_362 = NL + "\t\t}";
d386 18
a403 18
  protected final String TEXT_365 = "().size() >= ";
  protected final String TEXT_366 = ".eINSTANCE.get";
  protected final String TEXT_367 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_368 = NL + "\t\t}";
  protected final String TEXT_369 = NL;
  protected final String TEXT_370 = NL + "\t\t\tif(!";
  protected final String TEXT_371 = ".canCreateLink(";
  protected final String TEXT_372 = ", ";
  protected final String TEXT_373 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_374 = NL + "\t\t\treturn true;";
  protected final String TEXT_375 = NL + "\t\t\t";
  protected final String TEXT_376 = " domainElement = (";
  protected final String TEXT_377 = ")source.getElement();";
  protected final String TEXT_378 = NL;
  protected final String TEXT_379 = NL + "\t\tif (";
  protected final String TEXT_380 = ".";
  protected final String TEXT_381 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_382 = NL + "\t\t}";
d406 35
a440 35
  protected final String TEXT_385 = "().size() >= ";
  protected final String TEXT_386 = ".eINSTANCE.get";
  protected final String TEXT_387 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_388 = NL + "\t\t}";
  protected final String TEXT_389 = NL;
  protected final String TEXT_390 = NL + "\t\t\tif(!";
  protected final String TEXT_391 = ".canCreateLink(";
  protected final String TEXT_392 = ", ";
  protected final String TEXT_393 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_394 = NL + "\t\t\treturn true;";
  protected final String TEXT_395 = NL + "\t\t\treturn false;";
  protected final String TEXT_396 = NL + "\t\t}";
  protected final String TEXT_397 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_398 = " getRelationshipContainer(";
  protected final String TEXT_399 = " element, ";
  protected final String TEXT_400 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_401 = NL + NL + "\t}";
  protected final String TEXT_402 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_403 = "Command extends ";
  protected final String TEXT_404 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_405 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_406 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_407 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_408 = "Command(";
  protected final String TEXT_409 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_410 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_411 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_412 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_413 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_414 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_415 = ".eINSTANCE.createEdge();";
  protected final String TEXT_416 = NL + "\t\t\t";
  protected final String TEXT_417 = " createdDomainElement = ";
  protected final String TEXT_418 = ".eINSTANCE.create";
  protected final String TEXT_419 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
d442 3
a444 3
  protected final String TEXT_421 = ".";
  protected final String TEXT_422 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_423 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
d446 13
a458 13
  protected final String TEXT_425 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_426 = " domainModelEditDomain = ";
  protected final String TEXT_427 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_428 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_429 = NL + "\t\t\t";
  protected final String TEXT_430 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_431 = ".eINSTANCE.get";
  protected final String TEXT_432 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_433 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_434 = ".eINSTANCE.get";
  protected final String TEXT_435 = "(), createdDomainElement));";
  protected final String TEXT_436 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_437 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
d461 5
a465 5
  protected final String TEXT_440 = NL;
  protected final String TEXT_441 = NL + "\t\tif (";
  protected final String TEXT_442 = ".";
  protected final String TEXT_443 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_444 = NL + "\t\t}";
d468 13
a480 13
  protected final String TEXT_447 = "().size() >= ";
  protected final String TEXT_448 = ".eINSTANCE.get";
  protected final String TEXT_449 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_450 = NL + "\t\t}";
  protected final String TEXT_451 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_452 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_453 = ".eINSTANCE.get";
  protected final String TEXT_454 = "(), source.getElement()));";
  protected final String TEXT_455 = NL;
  protected final String TEXT_456 = NL + "\t\tif (";
  protected final String TEXT_457 = ".";
  protected final String TEXT_458 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_459 = NL + "\t\t}";
d483 29
a511 29
  protected final String TEXT_462 = "().size() >= ";
  protected final String TEXT_463 = ".eINSTANCE.get";
  protected final String TEXT_464 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_465 = NL + "\t\t}";
  protected final String TEXT_466 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_467 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_468 = ".eINSTANCE.get";
  protected final String TEXT_469 = "(), target.getElement()));";
  protected final String TEXT_470 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_471 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_472 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_473 = ".eINSTANCE.get";
  protected final String TEXT_474 = "(), target.getElement());";
  protected final String TEXT_475 = NL + "\t\t}" + NL;
  protected final String TEXT_476 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_477 = " getRelationshipContainer(";
  protected final String TEXT_478 = " element, ";
  protected final String TEXT_479 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_480 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_481 = NL;
  protected final String TEXT_482 = NL + "\t\t\tif(!";
  protected final String TEXT_483 = ".canCreateLink(";
  protected final String TEXT_484 = ", ";
  protected final String TEXT_485 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_486 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_487 = NL;
  protected final String TEXT_488 = NL;
  protected final String TEXT_489 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_490 = NL + "}";
d513 4
d522 2
a523 1
GenNode genNode = (GenNode) ((Object[]) argument)[0];
d1310 7
d1318 3
a1320 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d1324 2
d1327 1
a1327 1
    stringBuffer.append(TEXT_270);
d1329 1
a1329 1
    stringBuffer.append(TEXT_271);
a1330 2
    stringBuffer.append(TEXT_272);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1336 2
d1339 1
a1339 1
    stringBuffer.append(TEXT_276);
a1340 2
    stringBuffer.append(TEXT_277);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1344 3
d1348 3
d1352 1
a1352 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1354 3
a1356 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
a1357 1
    stringBuffer.append(primaryView);
a1358 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1360 1
a1360 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1362 1
a1362 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1364 1
a1364 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1366 2
a1368 2
    stringBuffer.append(TEXT_289);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1370 1
a1370 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1372 1
a1372 1
    stringBuffer.append(primaryView);
d1374 1
a1374 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1376 1
a1376 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1378 1
a1378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1380 1
a1380 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1382 2
a1384 1
    stringBuffer.append(TEXT_297);
d1386 1
d1388 1
a1388 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d1390 1
a1390 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a1391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1393 1
a1394 1
    stringBuffer.append(TEXT_303);
d1396 1
d1398 1
a1398 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1400 1
a1400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1408 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1412 1
d1414 1
d1418 1
d1421 1
a1422 1
    stringBuffer.append(TEXT_320);
d1425 1
a1426 1
    stringBuffer.append(TEXT_323);
a1428 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1433 1
a1434 1
    stringBuffer.append(TEXT_329);
d1436 1
d1442 6
d1476 1
a1476 1
    stringBuffer.append(TEXT_334);
d1479 1
a1479 1
    stringBuffer.append(TEXT_335);
d1481 1
a1481 1
    stringBuffer.append(TEXT_336);
d1483 1
a1483 1
    stringBuffer.append(TEXT_337);
d1486 1
a1486 1
    stringBuffer.append(TEXT_338);
d1488 1
a1488 1
    stringBuffer.append(TEXT_339);
d1490 1
a1490 1
    stringBuffer.append(TEXT_340);
d1497 1
a1497 1
    stringBuffer.append(TEXT_341);
d1501 1
a1501 1
    stringBuffer.append(TEXT_342);
d1503 1
a1503 1
    stringBuffer.append(TEXT_343);
d1505 1
a1505 1
    stringBuffer.append(TEXT_344);
d1507 1
a1507 1
    stringBuffer.append(TEXT_345);
d1509 1
a1509 1
    stringBuffer.append(TEXT_346);
d1516 1
a1516 1
    stringBuffer.append(TEXT_347);
d1522 1
a1522 1
    stringBuffer.append(TEXT_348);
d1524 1
a1524 1
    stringBuffer.append(TEXT_349);
d1526 1
a1526 1
    stringBuffer.append(TEXT_350);
d1528 1
a1528 1
    stringBuffer.append(TEXT_351);
d1532 1
a1532 1
    stringBuffer.append(TEXT_352);
d1534 1
a1534 1
    stringBuffer.append(TEXT_353);
d1536 1
a1536 1
    stringBuffer.append(TEXT_354);
d1538 1
a1538 1
    stringBuffer.append(TEXT_355);
d1540 1
a1540 1
    stringBuffer.append(TEXT_356);
d1542 1
a1542 1
    stringBuffer.append(TEXT_357);
d1556 1
a1556 1
    stringBuffer.append(TEXT_358);
d1562 1
a1562 1
    stringBuffer.append(TEXT_359);
d1564 1
a1564 1
    stringBuffer.append(TEXT_360);
d1566 1
a1566 1
    stringBuffer.append(TEXT_361);
d1568 1
a1568 1
    stringBuffer.append(TEXT_362);
d1572 1
a1572 1
    stringBuffer.append(TEXT_363);
d1574 1
a1574 1
    stringBuffer.append(TEXT_364);
d1576 1
a1576 1
    stringBuffer.append(TEXT_365);
d1578 1
a1578 1
    stringBuffer.append(TEXT_366);
d1580 1
a1580 1
    stringBuffer.append(TEXT_367);
d1582 1
a1582 1
    stringBuffer.append(TEXT_368);
d1594 1
a1594 1
    stringBuffer.append(TEXT_369);
d1598 1
a1598 1
    stringBuffer.append(TEXT_370);
d1600 1
a1600 1
    stringBuffer.append(TEXT_371);
d1602 1
a1602 1
    stringBuffer.append(TEXT_372);
d1604 1
a1604 1
    stringBuffer.append(TEXT_373);
d1611 1
a1611 1
    stringBuffer.append(TEXT_374);
d1617 1
a1617 1
    stringBuffer.append(TEXT_375);
d1619 1
a1619 1
    stringBuffer.append(TEXT_376);
d1621 1
a1621 1
    stringBuffer.append(TEXT_377);
d1628 1
a1628 1
    stringBuffer.append(TEXT_378);
d1634 1
a1634 1
    stringBuffer.append(TEXT_379);
d1636 1
a1636 1
    stringBuffer.append(TEXT_380);
d1638 1
a1638 1
    stringBuffer.append(TEXT_381);
d1640 1
a1640 1
    stringBuffer.append(TEXT_382);
d1644 1
a1644 1
    stringBuffer.append(TEXT_383);
d1646 1
a1646 1
    stringBuffer.append(TEXT_384);
d1648 1
a1648 1
    stringBuffer.append(TEXT_385);
d1650 1
a1650 1
    stringBuffer.append(TEXT_386);
d1652 1
a1652 1
    stringBuffer.append(TEXT_387);
d1654 1
a1654 1
    stringBuffer.append(TEXT_388);
d1665 1
a1665 1
    stringBuffer.append(TEXT_389);
d1669 1
a1669 1
    stringBuffer.append(TEXT_390);
d1671 1
a1671 1
    stringBuffer.append(TEXT_391);
d1673 1
a1673 1
    stringBuffer.append(TEXT_392);
d1675 1
a1675 1
    stringBuffer.append(TEXT_393);
d1682 1
a1682 1
    stringBuffer.append(TEXT_394);
d1686 1
a1686 1
    stringBuffer.append(TEXT_395);
d1690 1
a1690 1
    stringBuffer.append(TEXT_396);
d1694 1
a1694 1
    stringBuffer.append(TEXT_397);
d1696 1
a1696 1
    stringBuffer.append(TEXT_398);
d1698 1
a1698 1
    stringBuffer.append(TEXT_399);
d1700 1
a1700 1
    stringBuffer.append(TEXT_400);
d1704 1
a1704 1
    stringBuffer.append(TEXT_401);
d1732 1
a1732 1
    stringBuffer.append(TEXT_402);
d1735 1
a1735 1
    stringBuffer.append(TEXT_403);
d1737 1
a1737 1
    stringBuffer.append(TEXT_404);
d1739 1
a1739 1
    stringBuffer.append(TEXT_405);
d1741 1
a1741 1
    stringBuffer.append(TEXT_406);
d1743 1
a1743 1
    stringBuffer.append(TEXT_407);
d1746 1
a1746 1
    stringBuffer.append(TEXT_408);
d1748 1
a1748 1
    stringBuffer.append(TEXT_409);
d1750 1
a1750 1
    stringBuffer.append(TEXT_410);
d1752 1
a1752 1
    stringBuffer.append(TEXT_411);
d1754 1
a1754 1
    stringBuffer.append(TEXT_412);
d1756 1
a1756 1
    stringBuffer.append(TEXT_413);
d1758 1
a1758 1
    stringBuffer.append(TEXT_414);
d1760 1
a1760 1
    stringBuffer.append(TEXT_415);
d1766 1
a1766 1
    stringBuffer.append(TEXT_416);
d1768 1
a1768 1
    stringBuffer.append(TEXT_417);
d1770 1
a1770 1
    stringBuffer.append(TEXT_418);
d1772 1
a1772 1
    stringBuffer.append(TEXT_419);
d1774 1
a1774 1
    stringBuffer.append(TEXT_420);
d1776 1
a1776 1
    stringBuffer.append(TEXT_421);
d1778 1
a1778 1
    stringBuffer.append(TEXT_422);
d1782 1
a1782 1
    stringBuffer.append(TEXT_423);
d1786 1
a1786 1
    stringBuffer.append(TEXT_424);
d1788 1
a1788 1
    stringBuffer.append(TEXT_425);
d1790 1
a1790 1
    stringBuffer.append(TEXT_426);
d1792 1
a1792 1
    stringBuffer.append(TEXT_427);
d1796 1
a1796 1
    stringBuffer.append(TEXT_428);
d1823 1
a1823 1
    stringBuffer.append(TEXT_429);
d1825 1
a1825 1
    stringBuffer.append(TEXT_430);
d1827 1
a1827 1
    stringBuffer.append(TEXT_431);
d1829 1
a1829 1
    stringBuffer.append(TEXT_432);
d1831 1
a1831 1
    stringBuffer.append(TEXT_433);
d1833 1
a1833 1
    stringBuffer.append(TEXT_434);
d1835 1
a1835 1
    stringBuffer.append(TEXT_435);
d1840 1
a1840 1
    stringBuffer.append(TEXT_436);
d1842 1
a1842 1
    stringBuffer.append(TEXT_437);
d1844 1
a1844 1
    stringBuffer.append(TEXT_438);
d1846 1
a1846 1
    stringBuffer.append(TEXT_439);
d1855 1
a1855 1
    stringBuffer.append(TEXT_440);
d1861 1
a1861 1
    stringBuffer.append(TEXT_441);
d1863 1
a1863 1
    stringBuffer.append(TEXT_442);
d1865 1
a1865 1
    stringBuffer.append(TEXT_443);
d1867 1
a1867 1
    stringBuffer.append(TEXT_444);
d1871 1
a1871 1
    stringBuffer.append(TEXT_445);
d1873 1
a1873 1
    stringBuffer.append(TEXT_446);
d1875 1
a1875 1
    stringBuffer.append(TEXT_447);
d1877 1
a1877 1
    stringBuffer.append(TEXT_448);
d1879 1
a1879 1
    stringBuffer.append(TEXT_449);
d1881 1
a1881 1
    stringBuffer.append(TEXT_450);
d1889 1
a1889 1
    stringBuffer.append(TEXT_451);
d1891 1
a1891 1
    stringBuffer.append(TEXT_452);
d1893 1
a1893 1
    stringBuffer.append(TEXT_453);
d1895 1
a1895 1
    stringBuffer.append(TEXT_454);
d1904 1
a1904 1
    stringBuffer.append(TEXT_455);
d1910 1
a1910 1
    stringBuffer.append(TEXT_456);
d1912 1
a1912 1
    stringBuffer.append(TEXT_457);
d1914 1
a1914 1
    stringBuffer.append(TEXT_458);
d1916 1
a1916 1
    stringBuffer.append(TEXT_459);
d1920 1
a1920 1
    stringBuffer.append(TEXT_460);
d1922 1
a1922 1
    stringBuffer.append(TEXT_461);
d1924 1
a1924 1
    stringBuffer.append(TEXT_462);
d1926 1
a1926 1
    stringBuffer.append(TEXT_463);
d1928 1
a1928 1
    stringBuffer.append(TEXT_464);
d1930 1
a1930 1
    stringBuffer.append(TEXT_465);
d1938 1
a1938 1
    stringBuffer.append(TEXT_466);
d1940 1
a1940 1
    stringBuffer.append(TEXT_467);
d1942 1
a1942 1
    stringBuffer.append(TEXT_468);
d1944 1
a1944 1
    stringBuffer.append(TEXT_469);
d1948 1
a1948 1
    stringBuffer.append(TEXT_470);
d1953 1
a1953 1
    stringBuffer.append(TEXT_471);
d1955 1
a1955 1
    stringBuffer.append(TEXT_472);
d1957 1
a1957 1
    stringBuffer.append(TEXT_473);
d1959 1
a1959 1
    stringBuffer.append(TEXT_474);
d1963 1
a1963 1
    stringBuffer.append(TEXT_475);
d1967 1
a1967 1
    stringBuffer.append(TEXT_476);
d1969 1
a1969 1
    stringBuffer.append(TEXT_477);
d1971 1
a1971 1
    stringBuffer.append(TEXT_478);
d1973 1
a1973 1
    stringBuffer.append(TEXT_479);
d1977 1
a1977 1
    stringBuffer.append(TEXT_480);
d1983 1
a1983 1
    stringBuffer.append(TEXT_481);
d1987 1
a1987 1
    stringBuffer.append(TEXT_482);
d1989 1
a1989 1
    stringBuffer.append(TEXT_483);
d1991 1
a1991 1
    stringBuffer.append(TEXT_484);
d1993 1
a1993 1
    stringBuffer.append(TEXT_485);
d2000 1
a2000 1
    stringBuffer.append(TEXT_486);
d2009 1
a2009 1
    stringBuffer.append(TEXT_487);
d2011 1
a2011 1
    stringBuffer.append(TEXT_488);
d2015 1
a2015 1
    stringBuffer.append(TEXT_489);
d2022 1
a2022 1
    stringBuffer.append(TEXT_490);
d2024 1
a2024 1
    stringBuffer.append(TEXT_491);
@


1.10
log
@[bblajer] #147076 Lite generator: Support ParentAssignedViewmap for labels and compartments
@
text
@d283 3
a285 3
  protected final String TEXT_262 = "\tpublic void addRefresher(";
  protected final String TEXT_263 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_264 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
@


1.9
log
@[bblajer] #144412 Allow non-OCL-based FeatureSeqInitializers, constraints and selectors
@
text
@d159 170
a328 170
  protected final String TEXT_138 = NL + "\t\treturn primaryShape;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_140 = " view = (";
  protected final String TEXT_141 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_142 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_143 = " decorationPane = new ";
  protected final String TEXT_144 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_145 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_146 = " imageFigure = new ";
  protected final String TEXT_147 = "(";
  protected final String TEXT_148 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_149 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_150 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_151 = " setupContentPane(";
  protected final String TEXT_152 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_153 = NL + "\t\t\t";
  protected final String TEXT_154 = " layout = new ";
  protected final String TEXT_155 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_156 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_157 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_158 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_159 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_160 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_161 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_162 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_163 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_164 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_165 = " childEditPart) {";
  protected final String TEXT_166 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_167 = ") {";
  protected final String TEXT_168 = NL + "\t\t\t((";
  protected final String TEXT_169 = ") childEditPart).setLabel(((";
  protected final String TEXT_170 = ") primaryShape).getFigure";
  protected final String TEXT_171 = "());";
  protected final String TEXT_172 = NL + "\t\t\t((";
  protected final String TEXT_173 = ") childEditPart).setLabel(new ";
  protected final String TEXT_174 = "());";
  protected final String TEXT_175 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_176 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_177 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_178 = NL + "\t\tfor(";
  protected final String TEXT_179 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_180 = " nextChild = (";
  protected final String TEXT_181 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_182 = ".getVisualID(nextChild) == ";
  protected final String TEXT_183 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_184 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_186 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_187 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_188 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_189 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_190 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_191 = " getLabelEditPart(";
  protected final String TEXT_192 = " req) {" + NL + "\t\t";
  protected final String TEXT_193 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_194 = " view = (";
  protected final String TEXT_195 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_196 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_197 = NL + "\t\t\t\tcase ";
  protected final String TEXT_198 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_199 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_200 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_201 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_202 = " labelFigure = ((";
  protected final String TEXT_203 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_204 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_205 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_206 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_207 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_208 = " labelFigure = ((";
  protected final String TEXT_209 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_210 = " childEditPart) {";
  protected final String TEXT_211 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_212 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_213 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_214 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_215 = " root = (";
  protected final String TEXT_216 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_217 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_218 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_219 = " childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_220 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_221 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_222 = ";" + NL + "\t\t";
  protected final String TEXT_223 = " bounds = (";
  protected final String TEXT_224 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_225 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_226 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_227 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_228 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_229 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_230 = " getSourceConnectionAnchor(";
  protected final String TEXT_231 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_232 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_233 = " getSourceConnectionAnchor(";
  protected final String TEXT_234 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_235 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_236 = "  getTargetConnectionAnchor(";
  protected final String TEXT_237 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_238 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_239 = "  getTargetConnectionAnchor(";
  protected final String TEXT_240 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_241 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_242 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_243 = NL;
  protected final String TEXT_244 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_245 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_246 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_247 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_248 = NL;
  protected final String TEXT_249 = "\tpublic void addRefresher(";
  protected final String TEXT_250 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_251 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_252 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_253 = NL;
  protected final String TEXT_254 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_255 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_256 = ") ";
  protected final String TEXT_257 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_258 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_259 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_260 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_261 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_262 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_263 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_264 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_265 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_266 = " createdFont;" + NL;
  protected final String TEXT_267 = NL;
  protected final String TEXT_268 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_269 = " style = (";
  protected final String TEXT_270 = ")  ";
  protected final String TEXT_271 = ".getStyle(";
  protected final String TEXT_272 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_273 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_274 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_275 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_276 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_277 = " style = (";
  protected final String TEXT_278 = ")  ";
  protected final String TEXT_279 = ".getStyle(";
  protected final String TEXT_280 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_281 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_282 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_283 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_284 = " createdBackgroundColor;" + NL;
  protected final String TEXT_285 = NL;
  protected final String TEXT_286 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_287 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_288 = " feature, ";
  protected final String TEXT_289 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_290 = "();";
  protected final String TEXT_291 = NL;
  protected final String TEXT_292 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_293 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_294 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_295 = NL;
  protected final String TEXT_296 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_297 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_298 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_299 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_300 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_301 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_302 = NL;
  protected final String TEXT_303 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_304 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_305 = NL;
  protected final String TEXT_306 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_307 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
d330 107
a436 107
  protected final String TEXT_309 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_310 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_311 = NL;
  protected final String TEXT_312 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_313 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_314 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_315 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_316 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_317 = NL;
  protected final String TEXT_318 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_319 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_320 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_321 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_322 = "StartCommand extends ";
  protected final String TEXT_323 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_324 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_325 = "StartCommand(";
  protected final String TEXT_326 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_327 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_328 = NL + "\t\t\treturn false;";
  protected final String TEXT_329 = NL + "\t\t\t";
  protected final String TEXT_330 = " container = (";
  protected final String TEXT_331 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_332 = ".eINSTANCE.get";
  protected final String TEXT_333 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_334 = NL;
  protected final String TEXT_335 = NL + "\t\tif (";
  protected final String TEXT_336 = ".";
  protected final String TEXT_337 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_338 = NL + "\t\t}";
  protected final String TEXT_339 = NL + "\t\tif (";
  protected final String TEXT_340 = ".";
  protected final String TEXT_341 = "().size() >= ";
  protected final String TEXT_342 = ".eINSTANCE.get";
  protected final String TEXT_343 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_344 = NL + "\t\t}";
  protected final String TEXT_345 = NL;
  protected final String TEXT_346 = NL + "\t\tif (";
  protected final String TEXT_347 = ".";
  protected final String TEXT_348 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_349 = NL + "\t\t}";
  protected final String TEXT_350 = NL + "\t\tif (";
  protected final String TEXT_351 = ".";
  protected final String TEXT_352 = "().size() >= ";
  protected final String TEXT_353 = ".eINSTANCE.get";
  protected final String TEXT_354 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_355 = NL + "\t\t}";
  protected final String TEXT_356 = NL;
  protected final String TEXT_357 = NL + "\t\t\tif(!";
  protected final String TEXT_358 = ".canCreateLink(";
  protected final String TEXT_359 = ", ";
  protected final String TEXT_360 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_361 = NL + "\t\t\treturn true;";
  protected final String TEXT_362 = NL + "\t\t\t";
  protected final String TEXT_363 = " domainElement = (";
  protected final String TEXT_364 = ")source.getElement();";
  protected final String TEXT_365 = NL;
  protected final String TEXT_366 = NL + "\t\tif (";
  protected final String TEXT_367 = ".";
  protected final String TEXT_368 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_369 = NL + "\t\t}";
  protected final String TEXT_370 = NL + "\t\tif (";
  protected final String TEXT_371 = ".";
  protected final String TEXT_372 = "().size() >= ";
  protected final String TEXT_373 = ".eINSTANCE.get";
  protected final String TEXT_374 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_375 = NL + "\t\t}";
  protected final String TEXT_376 = NL;
  protected final String TEXT_377 = NL + "\t\t\tif(!";
  protected final String TEXT_378 = ".canCreateLink(";
  protected final String TEXT_379 = ", ";
  protected final String TEXT_380 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_381 = NL + "\t\t\treturn true;";
  protected final String TEXT_382 = NL + "\t\t\treturn false;";
  protected final String TEXT_383 = NL + "\t\t}";
  protected final String TEXT_384 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_385 = " getRelationshipContainer(";
  protected final String TEXT_386 = " element, ";
  protected final String TEXT_387 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_388 = NL + NL + "\t}";
  protected final String TEXT_389 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_390 = "Command extends ";
  protected final String TEXT_391 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_392 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_393 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_394 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_395 = "Command(";
  protected final String TEXT_396 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_397 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_398 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_399 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_400 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_401 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_402 = ".eINSTANCE.createEdge();";
  protected final String TEXT_403 = NL + "\t\t\t";
  protected final String TEXT_404 = " createdDomainElement = ";
  protected final String TEXT_405 = ".eINSTANCE.create";
  protected final String TEXT_406 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_407 = NL + "\t\t\t";
  protected final String TEXT_408 = ".";
  protected final String TEXT_409 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_410 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
  protected final String TEXT_411 = NL + "\t\t\t";
  protected final String TEXT_412 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_413 = " domainModelEditDomain = ";
  protected final String TEXT_414 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_415 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
d438 75
a512 62
  protected final String TEXT_417 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_418 = ".eINSTANCE.get";
  protected final String TEXT_419 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_420 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_421 = ".eINSTANCE.get";
  protected final String TEXT_422 = "(), createdDomainElement));";
  protected final String TEXT_423 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_424 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_425 = ".eINSTANCE.get";
  protected final String TEXT_426 = "(), createdDomainElement));";
  protected final String TEXT_427 = NL;
  protected final String TEXT_428 = NL + "\t\tif (";
  protected final String TEXT_429 = ".";
  protected final String TEXT_430 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_431 = NL + "\t\t}";
  protected final String TEXT_432 = NL + "\t\tif (";
  protected final String TEXT_433 = ".";
  protected final String TEXT_434 = "().size() >= ";
  protected final String TEXT_435 = ".eINSTANCE.get";
  protected final String TEXT_436 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_437 = NL + "\t\t}";
  protected final String TEXT_438 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_439 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_440 = ".eINSTANCE.get";
  protected final String TEXT_441 = "(), source.getElement()));";
  protected final String TEXT_442 = NL;
  protected final String TEXT_443 = NL + "\t\tif (";
  protected final String TEXT_444 = ".";
  protected final String TEXT_445 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_446 = NL + "\t\t}";
  protected final String TEXT_447 = NL + "\t\tif (";
  protected final String TEXT_448 = ".";
  protected final String TEXT_449 = "().size() >= ";
  protected final String TEXT_450 = ".eINSTANCE.get";
  protected final String TEXT_451 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_452 = NL + "\t\t}";
  protected final String TEXT_453 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_454 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_455 = ".eINSTANCE.get";
  protected final String TEXT_456 = "(), target.getElement()));";
  protected final String TEXT_457 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_458 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_459 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_460 = ".eINSTANCE.get";
  protected final String TEXT_461 = "(), target.getElement());";
  protected final String TEXT_462 = NL + "\t\t}" + NL;
  protected final String TEXT_463 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_464 = " getRelationshipContainer(";
  protected final String TEXT_465 = " element, ";
  protected final String TEXT_466 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_467 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_468 = NL;
  protected final String TEXT_469 = NL + "\t\t\tif(!";
  protected final String TEXT_470 = ".canCreateLink(";
  protected final String TEXT_471 = ", ";
  protected final String TEXT_472 = ", false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_473 = NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_474 = NL;
  protected final String TEXT_475 = NL;
  protected final String TEXT_476 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_477 = NL + "}";
  protected final String TEXT_478 = NL;
d524 81
d975 8
d984 1
a984 1
    stringBuffer.append(TEXT_139);
d986 1
a986 1
    stringBuffer.append(TEXT_140);
d988 1
a988 1
    stringBuffer.append(TEXT_141);
d990 1
a990 1
    stringBuffer.append(TEXT_142);
d992 1
a992 1
    stringBuffer.append(TEXT_143);
d994 1
a994 1
    stringBuffer.append(TEXT_144);
d996 1
a996 1
    stringBuffer.append(TEXT_145);
d998 1
a998 1
    stringBuffer.append(TEXT_146);
d1000 1
a1000 1
    stringBuffer.append(TEXT_147);
d1002 1
a1002 1
    stringBuffer.append(TEXT_148);
d1004 1
a1004 1
    stringBuffer.append(TEXT_149);
d1006 1
a1006 1
    stringBuffer.append(TEXT_150);
d1008 1
a1008 1
    stringBuffer.append(TEXT_151);
d1010 1
a1010 1
    stringBuffer.append(TEXT_152);
d1015 1
a1015 1
    stringBuffer.append(TEXT_153);
d1017 1
a1017 1
    stringBuffer.append(TEXT_154);
d1019 1
a1019 1
    stringBuffer.append(TEXT_155);
d1021 1
a1021 1
    stringBuffer.append(TEXT_156);
d1023 1
a1023 1
    stringBuffer.append(TEXT_157);
d1025 1
a1025 1
    stringBuffer.append(TEXT_158);
d1027 1
a1027 1
    stringBuffer.append(TEXT_159);
d1029 1
a1029 1
    stringBuffer.append(TEXT_160);
d1031 1
a1031 1
    stringBuffer.append(TEXT_161);
d1033 1
a1033 1
    stringBuffer.append(TEXT_162);
d1035 1
a1035 1
    stringBuffer.append(TEXT_163);
d1037 1
a1037 10
	boolean hasFixedChildren = false;
	List innerLabels = new ArrayList(genNode.getLabels().size());
	for (Iterator it = genNode.getLabels().iterator(); it.hasNext(); ) {
		GenNodeLabel genLabel = (GenNodeLabel) it.next();
		if (!(genLabel instanceof GenExternalNodeLabel)) {
			innerLabels.add(genLabel);
		}
	}
	if (!innerLabels.isEmpty()) {
		hasFixedChildren = true;
d1039 1
a1039 1
    stringBuffer.append(TEXT_164);
d1041 1
a1041 1
    stringBuffer.append(TEXT_165);
d1043 5
a1047 16
		for (Iterator it = innerLabels.iterator(); it.hasNext(); ) {
			GenNodeLabel genLabel = (GenNodeLabel) it.next();
			String labelEditPart = importManager.getImportedName(genLabel.getEditPartQualifiedClassName());
			String labelFigureClassName = null;
			boolean isAccessor;
			if (genLabel.getViewmap() instanceof InnerClassViewmap) {
				labelFigureClassName = ((InnerClassViewmap) genLabel.getViewmap()).getClassName();
				isAccessor = true;
			} else if (genLabel.getViewmap() instanceof FigureViewmap) {
				labelFigureClassName = ((FigureViewmap) genLabel.getViewmap()).getFigureQualifiedClassName();
				isAccessor = false;
			} else {
				// temp hack to make tests pass
				labelFigureClassName = "org.eclipse.draw2d.Label";
				isAccessor = false;
			}
d1049 1
a1049 1
    stringBuffer.append(TEXT_166);
d1051 1
a1051 3
    stringBuffer.append(TEXT_167);
    			if (isAccessor) {
    stringBuffer.append(TEXT_168);
a1052 6
    stringBuffer.append(TEXT_169);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_170);
    stringBuffer.append(labelFigureClassName);
    stringBuffer.append(TEXT_171);
    			} else {
d1054 1
a1054 1
    stringBuffer.append(labelEditPart);
d1056 1
a1056 1
    stringBuffer.append(labelFigureClassName);
d1058 8
a1065 1
    			}
d1067 1
a1067 1
    		}
d1069 34
d1104 1
a1104 1
    stringBuffer.append(TEXT_177);
d1107 1
a1107 1
		for (Iterator it = innerLabels.iterator(); it.hasNext(); ) {
d1116 1
a1116 1
    stringBuffer.append(TEXT_178);
d1118 1
a1118 1
    stringBuffer.append(TEXT_179);
d1120 1
a1120 1
    stringBuffer.append(TEXT_180);
d1122 1
a1122 1
    stringBuffer.append(TEXT_181);
d1124 1
a1124 1
    stringBuffer.append(TEXT_182);
d1126 1
a1126 1
    stringBuffer.append(TEXT_183);
d1128 1
a1128 1
    stringBuffer.append(TEXT_184);
d1132 1
a1132 1
    stringBuffer.append(TEXT_185);
d1134 1
a1134 1
    stringBuffer.append(TEXT_186);
d1136 1
a1136 1
    stringBuffer.append(TEXT_187);
d1138 1
a1138 1
    stringBuffer.append(TEXT_188);
d1140 1
a1140 1
    stringBuffer.append(TEXT_189);
d1142 1
a1142 1
    stringBuffer.append(TEXT_190);
d1144 1
a1144 1
    stringBuffer.append(TEXT_191);
d1146 1
a1146 1
    stringBuffer.append(TEXT_192);
d1148 1
a1148 1
    stringBuffer.append(TEXT_193);
d1150 1
a1150 1
    stringBuffer.append(TEXT_194);
d1152 1
a1152 1
    stringBuffer.append(TEXT_195);
d1154 1
a1154 1
    stringBuffer.append(TEXT_196);
d1156 1
a1156 1
		for (Iterator it = innerLabels.iterator(); it.hasNext(); ) {
d1162 1
a1162 1
    stringBuffer.append(TEXT_197);
d1164 1
a1164 1
    stringBuffer.append(TEXT_198);
a1167 35
    stringBuffer.append(TEXT_199);
    
	}

    
boolean hasExternalLabels = false;
for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
	GenNodeLabel label = (GenNodeLabel) labels.next();
	if (label instanceof GenExternalNodeLabel) {
		hasExternalLabels = true;
		break;
	}
}
if (hasExternalLabels) {

    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_203);
    	if (hasFixedChildren) {
    stringBuffer.append(TEXT_204);
    	} else {
    stringBuffer.append(TEXT_205);
    	}
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1170 1
a1170 3
	for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
		GenNodeLabel label = (GenNodeLabel) labels.next();
		if (label instanceof GenExternalNodeLabel) {
d1173 1
a1173 1
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
d1176 2
a1177 2
		}
	}
d1180 1
a1180 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d1182 3
a1184 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart"));
d1186 1
a1186 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart"));
d1188 1
a1188 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
d1190 1
a1190 3
    
} else {
	if (hasFixedChildren) {
d1192 1
a1192 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a1194 1
	}
d1196 1
d1199 1
a1199 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1201 3
a1203 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1205 1
a1205 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1207 1
a1207 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1209 4
a1212 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d1214 3
a1216 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d1218 1
a1218 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1220 3
a1222 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1224 1
a1224 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1226 1
a1226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
d1228 4
a1231 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d1233 3
a1235 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d1237 3
a1239 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
d1241 1
a1241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d1243 1
a1243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d1245 1
a1245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
d1247 1
a1247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d1249 1
a1249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d1251 1
a1251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
d1253 1
a1253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d1255 1
a1255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
d1257 1
a1257 1
    /*@@ include file="adapters/propertySource.javajetinc"*/
d1259 1
d1261 1
d1263 1
a1263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
d1265 1
a1265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1267 1
a1267 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1269 1
d1271 1
d1273 1
a1273 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1275 1
a1275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1277 1
a1277 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1279 1
a1279 3
    
	final String primaryView = "getDiagramNode()";

d1281 1
d1283 1
a1283 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a1284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a1285 1
    stringBuffer.append(primaryView);
d1287 1
a1287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1289 1
a1289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1291 1
a1291 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
a1292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
a1293 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1295 1
a1295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1297 1
a1297 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d1299 1
a1299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1301 3
a1303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1306 1
d1308 1
a1308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1310 1
a1310 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1312 1
a1312 1
    stringBuffer.append(primaryView);
d1314 1
a1314 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1316 1
a1316 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1318 1
a1318 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1320 1
a1320 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1322 1
a1322 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1324 1
a1324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1326 1
a1326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1328 1
a1328 1
    stringBuffer.append(primaryView);
a1329 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1330 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1332 1
a1332 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1334 1
a1334 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1336 1
a1336 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1338 1
d1340 1
d1342 1
a1342 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d1344 1
a1344 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1346 1
a1346 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1348 1
a1348 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d1350 1
d1352 1
d1356 1
a1356 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1358 1
d1360 1
d1362 1
a1362 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1364 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1366 1
a1366 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1368 1
a1368 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1370 1
d1372 1
a1373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1376 1
d1384 1
d1386 1
a1391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1393 1
a1394 1
    stringBuffer.append(TEXT_316);
a1396 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1400 20
d1448 1
a1448 1
    stringBuffer.append(TEXT_321);
d1451 1
a1451 1
    stringBuffer.append(TEXT_322);
d1453 1
a1453 1
    stringBuffer.append(TEXT_323);
d1455 1
a1455 1
    stringBuffer.append(TEXT_324);
d1458 1
a1458 1
    stringBuffer.append(TEXT_325);
d1460 1
a1460 1
    stringBuffer.append(TEXT_326);
d1462 1
a1462 1
    stringBuffer.append(TEXT_327);
d1469 1
a1469 1
    stringBuffer.append(TEXT_328);
d1473 1
a1473 1
    stringBuffer.append(TEXT_329);
d1475 1
a1475 1
    stringBuffer.append(TEXT_330);
d1477 1
a1477 1
    stringBuffer.append(TEXT_331);
d1479 1
a1479 1
    stringBuffer.append(TEXT_332);
d1481 1
a1481 1
    stringBuffer.append(TEXT_333);
d1488 1
a1488 1
    stringBuffer.append(TEXT_334);
d1494 1
a1494 1
    stringBuffer.append(TEXT_335);
d1496 1
a1496 1
    stringBuffer.append(TEXT_336);
d1498 1
a1498 1
    stringBuffer.append(TEXT_337);
d1500 1
a1500 1
    stringBuffer.append(TEXT_338);
d1504 1
a1504 1
    stringBuffer.append(TEXT_339);
d1506 1
a1506 1
    stringBuffer.append(TEXT_340);
d1508 1
a1508 1
    stringBuffer.append(TEXT_341);
d1510 1
a1510 1
    stringBuffer.append(TEXT_342);
d1512 1
a1512 1
    stringBuffer.append(TEXT_343);
d1514 1
a1514 1
    stringBuffer.append(TEXT_344);
d1528 1
a1528 1
    stringBuffer.append(TEXT_345);
d1534 1
a1534 1
    stringBuffer.append(TEXT_346);
d1536 1
a1536 1
    stringBuffer.append(TEXT_347);
d1538 1
a1538 1
    stringBuffer.append(TEXT_348);
d1540 1
a1540 1
    stringBuffer.append(TEXT_349);
d1544 1
a1544 1
    stringBuffer.append(TEXT_350);
d1546 1
a1546 1
    stringBuffer.append(TEXT_351);
d1548 1
a1548 1
    stringBuffer.append(TEXT_352);
d1550 1
a1550 1
    stringBuffer.append(TEXT_353);
d1552 1
a1552 1
    stringBuffer.append(TEXT_354);
d1554 1
a1554 1
    stringBuffer.append(TEXT_355);
d1566 1
a1566 1
    stringBuffer.append(TEXT_356);
d1570 1
a1570 1
    stringBuffer.append(TEXT_357);
d1572 1
a1572 1
    stringBuffer.append(TEXT_358);
d1574 1
a1574 1
    stringBuffer.append(TEXT_359);
d1576 1
a1576 1
    stringBuffer.append(TEXT_360);
d1583 1
a1583 1
    stringBuffer.append(TEXT_361);
d1589 1
a1589 1
    stringBuffer.append(TEXT_362);
d1591 1
a1591 1
    stringBuffer.append(TEXT_363);
d1593 1
a1593 1
    stringBuffer.append(TEXT_364);
d1600 1
a1600 1
    stringBuffer.append(TEXT_365);
d1606 1
a1606 1
    stringBuffer.append(TEXT_366);
d1608 1
a1608 1
    stringBuffer.append(TEXT_367);
d1610 1
a1610 1
    stringBuffer.append(TEXT_368);
d1612 1
a1612 1
    stringBuffer.append(TEXT_369);
d1616 1
a1616 1
    stringBuffer.append(TEXT_370);
d1618 1
a1618 1
    stringBuffer.append(TEXT_371);
d1620 1
a1620 1
    stringBuffer.append(TEXT_372);
d1622 1
a1622 1
    stringBuffer.append(TEXT_373);
d1624 1
a1624 1
    stringBuffer.append(TEXT_374);
d1626 1
a1626 1
    stringBuffer.append(TEXT_375);
d1637 1
a1637 1
    stringBuffer.append(TEXT_376);
d1641 1
a1641 1
    stringBuffer.append(TEXT_377);
d1643 1
a1643 1
    stringBuffer.append(TEXT_378);
d1645 1
a1645 1
    stringBuffer.append(TEXT_379);
d1647 1
a1647 1
    stringBuffer.append(TEXT_380);
d1654 1
a1654 1
    stringBuffer.append(TEXT_381);
d1658 1
a1658 1
    stringBuffer.append(TEXT_382);
d1662 1
a1662 1
    stringBuffer.append(TEXT_383);
d1666 1
a1666 1
    stringBuffer.append(TEXT_384);
d1668 1
a1668 1
    stringBuffer.append(TEXT_385);
d1670 1
a1670 1
    stringBuffer.append(TEXT_386);
d1672 1
a1672 1
    stringBuffer.append(TEXT_387);
d1676 1
a1676 1
    stringBuffer.append(TEXT_388);
d1704 1
a1704 1
    stringBuffer.append(TEXT_389);
d1707 1
a1707 1
    stringBuffer.append(TEXT_390);
d1709 1
a1709 1
    stringBuffer.append(TEXT_391);
d1711 1
a1711 1
    stringBuffer.append(TEXT_392);
d1713 1
a1713 1
    stringBuffer.append(TEXT_393);
d1715 1
a1715 1
    stringBuffer.append(TEXT_394);
d1718 1
a1718 1
    stringBuffer.append(TEXT_395);
d1720 1
a1720 1
    stringBuffer.append(TEXT_396);
d1722 1
a1722 1
    stringBuffer.append(TEXT_397);
d1724 1
a1724 1
    stringBuffer.append(TEXT_398);
d1726 1
a1726 1
    stringBuffer.append(TEXT_399);
d1728 1
a1728 1
    stringBuffer.append(TEXT_400);
d1730 1
a1730 1
    stringBuffer.append(TEXT_401);
d1732 1
a1732 1
    stringBuffer.append(TEXT_402);
d1738 1
a1738 1
    stringBuffer.append(TEXT_403);
d1740 1
a1740 1
    stringBuffer.append(TEXT_404);
d1742 1
a1742 1
    stringBuffer.append(TEXT_405);
d1744 1
a1744 1
    stringBuffer.append(TEXT_406);
d1746 1
a1746 1
    stringBuffer.append(TEXT_407);
d1748 1
a1748 1
    stringBuffer.append(TEXT_408);
d1750 1
a1750 1
    stringBuffer.append(TEXT_409);
d1754 1
a1754 1
    stringBuffer.append(TEXT_410);
d1758 1
a1758 1
    stringBuffer.append(TEXT_411);
d1760 1
a1760 1
    stringBuffer.append(TEXT_412);
d1762 1
a1762 1
    stringBuffer.append(TEXT_413);
d1764 1
a1764 1
    stringBuffer.append(TEXT_414);
d1768 1
a1768 1
    stringBuffer.append(TEXT_415);
d1795 1
a1795 1
    stringBuffer.append(TEXT_416);
d1797 1
a1797 1
    stringBuffer.append(TEXT_417);
d1799 1
a1799 1
    stringBuffer.append(TEXT_418);
d1801 1
a1801 1
    stringBuffer.append(TEXT_419);
d1803 1
a1803 1
    stringBuffer.append(TEXT_420);
d1805 1
a1805 1
    stringBuffer.append(TEXT_421);
d1807 1
a1807 1
    stringBuffer.append(TEXT_422);
d1812 1
a1812 1
    stringBuffer.append(TEXT_423);
d1814 1
a1814 1
    stringBuffer.append(TEXT_424);
d1816 1
a1816 1
    stringBuffer.append(TEXT_425);
d1818 1
a1818 1
    stringBuffer.append(TEXT_426);
d1827 1
a1827 1
    stringBuffer.append(TEXT_427);
d1833 1
a1833 1
    stringBuffer.append(TEXT_428);
d1835 1
a1835 1
    stringBuffer.append(TEXT_429);
d1837 1
a1837 1
    stringBuffer.append(TEXT_430);
d1839 1
a1839 1
    stringBuffer.append(TEXT_431);
d1843 1
a1843 1
    stringBuffer.append(TEXT_432);
d1845 1
a1845 1
    stringBuffer.append(TEXT_433);
d1847 1
a1847 1
    stringBuffer.append(TEXT_434);
d1849 1
a1849 1
    stringBuffer.append(TEXT_435);
d1851 1
a1851 1
    stringBuffer.append(TEXT_436);
d1853 1
a1853 1
    stringBuffer.append(TEXT_437);
d1861 1
a1861 1
    stringBuffer.append(TEXT_438);
d1863 1
a1863 1
    stringBuffer.append(TEXT_439);
d1865 1
a1865 1
    stringBuffer.append(TEXT_440);
d1867 1
a1867 1
    stringBuffer.append(TEXT_441);
d1876 1
a1876 1
    stringBuffer.append(TEXT_442);
d1882 1
a1882 1
    stringBuffer.append(TEXT_443);
d1884 1
a1884 1
    stringBuffer.append(TEXT_444);
d1886 1
a1886 1
    stringBuffer.append(TEXT_445);
d1888 1
a1888 1
    stringBuffer.append(TEXT_446);
d1892 1
a1892 1
    stringBuffer.append(TEXT_447);
d1894 1
a1894 1
    stringBuffer.append(TEXT_448);
d1896 1
a1896 1
    stringBuffer.append(TEXT_449);
d1898 1
a1898 1
    stringBuffer.append(TEXT_450);
d1900 1
a1900 1
    stringBuffer.append(TEXT_451);
d1902 1
a1902 1
    stringBuffer.append(TEXT_452);
d1910 1
a1910 1
    stringBuffer.append(TEXT_453);
d1912 1
a1912 1
    stringBuffer.append(TEXT_454);
d1914 1
a1914 1
    stringBuffer.append(TEXT_455);
d1916 1
a1916 1
    stringBuffer.append(TEXT_456);
d1920 1
a1920 1
    stringBuffer.append(TEXT_457);
d1925 1
a1925 1
    stringBuffer.append(TEXT_458);
d1927 1
a1927 1
    stringBuffer.append(TEXT_459);
d1929 1
a1929 1
    stringBuffer.append(TEXT_460);
d1931 1
a1931 1
    stringBuffer.append(TEXT_461);
d1935 1
a1935 1
    stringBuffer.append(TEXT_462);
d1939 1
a1939 1
    stringBuffer.append(TEXT_463);
d1941 1
a1941 1
    stringBuffer.append(TEXT_464);
d1943 1
a1943 1
    stringBuffer.append(TEXT_465);
d1945 1
a1945 1
    stringBuffer.append(TEXT_466);
d1949 1
a1949 1
    stringBuffer.append(TEXT_467);
d1955 1
a1955 1
    stringBuffer.append(TEXT_468);
d1959 1
a1959 1
    stringBuffer.append(TEXT_469);
d1961 1
a1961 1
    stringBuffer.append(TEXT_470);
d1963 1
a1963 1
    stringBuffer.append(TEXT_471);
d1965 1
a1965 1
    stringBuffer.append(TEXT_472);
d1972 1
a1972 1
    stringBuffer.append(TEXT_473);
d1981 1
a1981 1
    stringBuffer.append(TEXT_474);
d1983 1
a1983 1
    stringBuffer.append(TEXT_475);
d1987 1
a1987 1
    stringBuffer.append(TEXT_476);
d1994 1
a1994 1
    stringBuffer.append(TEXT_477);
d1996 1
a1996 1
    stringBuffer.append(TEXT_478);
@


1.8
log
@[bblajer] #144180 CCE in generated diagram when trying to direct-edit an element
@
text
@d156 234
a389 234
  protected final String TEXT_135 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_136 = ");" + NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_137 = NL + "\t\treturn primaryShape;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_138 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_139 = " view = (";
  protected final String TEXT_140 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_141 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_142 = " decorationPane = new ";
  protected final String TEXT_143 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_144 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_145 = " imageFigure = new ";
  protected final String TEXT_146 = "(";
  protected final String TEXT_147 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_148 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_149 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_150 = " setupContentPane(";
  protected final String TEXT_151 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_152 = NL + "\t\t\t";
  protected final String TEXT_153 = " layout = new ";
  protected final String TEXT_154 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_155 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_156 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_157 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_158 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_159 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_160 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_161 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_162 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_163 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_164 = " childEditPart) {";
  protected final String TEXT_165 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_166 = ") {";
  protected final String TEXT_167 = NL + "\t\t\t((";
  protected final String TEXT_168 = ") childEditPart).setLabel(((";
  protected final String TEXT_169 = ") primaryShape).getFigure";
  protected final String TEXT_170 = "());";
  protected final String TEXT_171 = NL + "\t\t\t((";
  protected final String TEXT_172 = ") childEditPart).setLabel(new ";
  protected final String TEXT_173 = "());";
  protected final String TEXT_174 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_175 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_176 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_177 = NL + "\t\tfor(";
  protected final String TEXT_178 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_179 = " nextChild = (";
  protected final String TEXT_180 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_181 = ".getVisualID(nextChild) == ";
  protected final String TEXT_182 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_183 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_184 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_185 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_186 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_187 = " labelToEdit;" + NL + "\t\t\tif (req instanceof ";
  protected final String TEXT_188 = ") {" + NL + "\t\t\t\tlabelToEdit = getLabelEditPart((";
  protected final String TEXT_189 = ")req);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tlabelToEdit = getPrimaryLabelEditPart();" + NL + "\t\t\t}" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_190 = " getLabelEditPart(";
  protected final String TEXT_191 = " req) {" + NL + "\t\t";
  protected final String TEXT_192 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_193 = " view = (";
  protected final String TEXT_194 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_195 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_196 = NL + "\t\t\t\tcase ";
  protected final String TEXT_197 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_198 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_199 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_200 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_201 = " labelFigure = ((";
  protected final String TEXT_202 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_203 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_204 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_205 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_206 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_207 = " labelFigure = ((";
  protected final String TEXT_208 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_209 = " childEditPart) {";
  protected final String TEXT_210 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_211 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_212 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_213 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_214 = " root = (";
  protected final String TEXT_215 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_216 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_217 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_218 = " childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_219 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_220 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_221 = ";" + NL + "\t\t";
  protected final String TEXT_222 = " bounds = (";
  protected final String TEXT_223 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_224 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_225 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_226 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_227 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_228 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_229 = " getSourceConnectionAnchor(";
  protected final String TEXT_230 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_231 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_232 = " getSourceConnectionAnchor(";
  protected final String TEXT_233 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_234 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_235 = "  getTargetConnectionAnchor(";
  protected final String TEXT_236 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_237 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_238 = "  getTargetConnectionAnchor(";
  protected final String TEXT_239 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_240 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_241 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_242 = NL;
  protected final String TEXT_243 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_244 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_245 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_246 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_247 = NL;
  protected final String TEXT_248 = "\tpublic void addRefresher(";
  protected final String TEXT_249 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_250 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_251 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_252 = NL;
  protected final String TEXT_253 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_254 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_255 = ") ";
  protected final String TEXT_256 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_257 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_258 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_259 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_260 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_261 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_262 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_263 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_264 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_265 = " createdFont;" + NL;
  protected final String TEXT_266 = NL;
  protected final String TEXT_267 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_268 = " style = (";
  protected final String TEXT_269 = ")  ";
  protected final String TEXT_270 = ".getStyle(";
  protected final String TEXT_271 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_272 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_273 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_274 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_275 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_276 = " style = (";
  protected final String TEXT_277 = ")  ";
  protected final String TEXT_278 = ".getStyle(";
  protected final String TEXT_279 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_280 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_281 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_282 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_283 = " createdBackgroundColor;" + NL;
  protected final String TEXT_284 = NL;
  protected final String TEXT_285 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_286 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_287 = " feature, ";
  protected final String TEXT_288 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_289 = "();";
  protected final String TEXT_290 = NL;
  protected final String TEXT_291 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_292 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_293 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_294 = NL;
  protected final String TEXT_295 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_296 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_297 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_298 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_299 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_300 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_301 = NL;
  protected final String TEXT_302 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_303 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_304 = NL;
  protected final String TEXT_305 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_306 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_307 = NL;
  protected final String TEXT_308 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_309 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_310 = NL;
  protected final String TEXT_311 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_312 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_313 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_314 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_315 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_316 = NL;
  protected final String TEXT_317 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_318 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_319 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_320 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_321 = "StartCommand extends ";
  protected final String TEXT_322 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_323 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_324 = "StartCommand(";
  protected final String TEXT_325 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_326 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_327 = NL + "\t\t\treturn false;";
  protected final String TEXT_328 = NL + "\t\t\t";
  protected final String TEXT_329 = " container = (";
  protected final String TEXT_330 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_331 = ".eINSTANCE.get";
  protected final String TEXT_332 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_333 = NL;
  protected final String TEXT_334 = NL + "\t\tif (";
  protected final String TEXT_335 = ".";
  protected final String TEXT_336 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_337 = NL + "\t\t}";
  protected final String TEXT_338 = NL + "\t\tif (";
  protected final String TEXT_339 = ".";
  protected final String TEXT_340 = "().size() >= ";
  protected final String TEXT_341 = ".eINSTANCE.get";
  protected final String TEXT_342 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_343 = NL + "\t\t}";
  protected final String TEXT_344 = NL;
  protected final String TEXT_345 = NL + "\t\tif (";
  protected final String TEXT_346 = ".";
  protected final String TEXT_347 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_348 = NL + "\t\t}";
  protected final String TEXT_349 = NL + "\t\tif (";
  protected final String TEXT_350 = ".";
  protected final String TEXT_351 = "().size() >= ";
  protected final String TEXT_352 = ".eINSTANCE.get";
  protected final String TEXT_353 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_354 = NL + "\t\t}";
  protected final String TEXT_355 = NL + "\t\t\treturn true;";
  protected final String TEXT_356 = NL + "\t\t\t";
  protected final String TEXT_357 = " domainElement = (";
  protected final String TEXT_358 = ")source.getElement();";
  protected final String TEXT_359 = NL;
  protected final String TEXT_360 = NL + "\t\tif (";
  protected final String TEXT_361 = ".";
  protected final String TEXT_362 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_363 = NL + "\t\t}";
  protected final String TEXT_364 = NL + "\t\tif (";
  protected final String TEXT_365 = ".";
  protected final String TEXT_366 = "().size() >= ";
  protected final String TEXT_367 = ".eINSTANCE.get";
  protected final String TEXT_368 = ".getUpperBound()) {" + NL + "\t\t\t";
d391 62
a452 62
  protected final String TEXT_370 = NL + "\t\t\treturn true;";
  protected final String TEXT_371 = NL + "\t\t\treturn false;";
  protected final String TEXT_372 = NL + "\t\t}";
  protected final String TEXT_373 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_374 = " getRelationshipContainer(";
  protected final String TEXT_375 = " element, ";
  protected final String TEXT_376 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_377 = NL + NL + "\t}";
  protected final String TEXT_378 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_379 = "Command extends ";
  protected final String TEXT_380 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_381 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_382 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_383 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_384 = "Command(";
  protected final String TEXT_385 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_386 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_387 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_388 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_389 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_390 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_391 = ".eINSTANCE.createEdge();";
  protected final String TEXT_392 = NL + "\t\t\t";
  protected final String TEXT_393 = " createdDomainElement = ";
  protected final String TEXT_394 = ".eINSTANCE.create";
  protected final String TEXT_395 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_396 = NL + "\t\t\t";
  protected final String TEXT_397 = ".";
  protected final String TEXT_398 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_399 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
  protected final String TEXT_400 = NL + "\t\t\t";
  protected final String TEXT_401 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_402 = " domainModelEditDomain = ";
  protected final String TEXT_403 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_404 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_405 = NL + "\t\t\t";
  protected final String TEXT_406 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_407 = ".eINSTANCE.get";
  protected final String TEXT_408 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_409 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_410 = ".eINSTANCE.get";
  protected final String TEXT_411 = "(), createdDomainElement));";
  protected final String TEXT_412 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_413 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_414 = ".eINSTANCE.get";
  protected final String TEXT_415 = "(), createdDomainElement));";
  protected final String TEXT_416 = NL;
  protected final String TEXT_417 = NL + "\t\tif (";
  protected final String TEXT_418 = ".";
  protected final String TEXT_419 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_420 = NL + "\t\t}";
  protected final String TEXT_421 = NL + "\t\tif (";
  protected final String TEXT_422 = ".";
  protected final String TEXT_423 = "().size() >= ";
  protected final String TEXT_424 = ".eINSTANCE.get";
  protected final String TEXT_425 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_426 = NL + "\t\t}";
  protected final String TEXT_427 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_428 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_429 = ".eINSTANCE.get";
  protected final String TEXT_430 = "(), source.getElement()));";
  protected final String TEXT_431 = NL;
d455 45
a499 28
  protected final String TEXT_434 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_435 = NL + "\t\t}";
  protected final String TEXT_436 = NL + "\t\tif (";
  protected final String TEXT_437 = ".";
  protected final String TEXT_438 = "().size() >= ";
  protected final String TEXT_439 = ".eINSTANCE.get";
  protected final String TEXT_440 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_441 = NL + "\t\t}";
  protected final String TEXT_442 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_443 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_444 = ".eINSTANCE.get";
  protected final String TEXT_445 = "(), target.getElement()));";
  protected final String TEXT_446 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_447 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_448 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_449 = ".eINSTANCE.get";
  protected final String TEXT_450 = "(), target.getElement());";
  protected final String TEXT_451 = NL + "\t\t}" + NL;
  protected final String TEXT_452 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_453 = " getRelationshipContainer(";
  protected final String TEXT_454 = " element, ";
  protected final String TEXT_455 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_456 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_457 = NL;
  protected final String TEXT_458 = NL;
  protected final String TEXT_459 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_460 = NL + "}";
  protected final String TEXT_461 = NL;
d508 1
a508 1
boolean useFlowLayout = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genNode);
d859 1
a859 1
    if (useFlowLayout) {
d875 1
a875 1
    stringBuffer.append(useFlowLayout ? "true" : "false");
d879 2
a881 2
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d885 2
a887 2
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
d891 2
a893 2
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ImageFigure"));
d897 2
d900 1
a900 1
    stringBuffer.append(TEXT_147);
d902 1
a902 1
    stringBuffer.append(TEXT_148);
a903 2
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d907 2
d910 1
a910 1
if (!useFlowLayout) {
a912 2
    stringBuffer.append(TEXT_152);
    stringBuffer.append(layoutClassName);
d916 2
d919 1
a919 1
    stringBuffer.append(TEXT_155);
d921 1
a921 1
    stringBuffer.append(TEXT_156);
d923 1
a923 1
    stringBuffer.append(TEXT_157);
d925 1
a925 1
    stringBuffer.append(TEXT_158);
d927 1
a927 1
    stringBuffer.append(TEXT_159);
a928 2
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d932 2
d946 1
a946 1
    stringBuffer.append(TEXT_163);
d948 1
a948 1
    stringBuffer.append(TEXT_164);
d967 1
a967 1
    stringBuffer.append(TEXT_165);
d969 1
a969 1
    stringBuffer.append(TEXT_166);
d971 1
a971 1
    stringBuffer.append(TEXT_167);
d973 1
a973 1
    stringBuffer.append(TEXT_168);
d975 1
a975 1
    stringBuffer.append(TEXT_169);
d977 1
a977 1
    stringBuffer.append(TEXT_170);
d979 1
a979 1
    stringBuffer.append(TEXT_171);
d981 1
a981 1
    stringBuffer.append(TEXT_172);
d983 1
a983 1
    stringBuffer.append(TEXT_173);
d985 1
a985 1
    stringBuffer.append(TEXT_174);
d987 1
a987 1
    stringBuffer.append(TEXT_175);
d989 1
a989 1
    stringBuffer.append(TEXT_176);
d1001 1
a1001 1
    stringBuffer.append(TEXT_177);
a1002 2
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1006 2
d1009 1
a1009 1
    stringBuffer.append(TEXT_181);
d1011 1
a1011 1
    stringBuffer.append(TEXT_182);
d1013 1
a1013 1
    stringBuffer.append(TEXT_183);
d1017 1
a1017 1
    stringBuffer.append(TEXT_184);
d1019 1
a1019 1
    stringBuffer.append(TEXT_185);
d1021 1
a1021 1
    stringBuffer.append(TEXT_186);
a1022 2
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d1026 2
d1029 1
a1029 1
    stringBuffer.append(TEXT_190);
d1031 1
a1031 1
    stringBuffer.append(TEXT_191);
a1032 2
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1036 2
d1039 1
a1039 1
    stringBuffer.append(TEXT_195);
d1047 1
a1047 1
    stringBuffer.append(TEXT_196);
d1049 1
a1049 1
    stringBuffer.append(TEXT_197);
d1053 1
a1053 1
    stringBuffer.append(TEXT_198);
d1068 1
a1068 1
    stringBuffer.append(TEXT_199);
d1070 1
a1070 1
    stringBuffer.append(TEXT_200);
d1072 1
a1072 1
    stringBuffer.append(TEXT_201);
d1074 1
a1074 1
    stringBuffer.append(TEXT_202);
d1076 1
a1076 1
    stringBuffer.append(TEXT_203);
d1078 1
a1078 1
    stringBuffer.append(TEXT_204);
d1080 1
a1080 1
    stringBuffer.append(TEXT_205);
d1082 1
a1082 1
    stringBuffer.append(TEXT_206);
d1084 1
a1084 1
    stringBuffer.append(TEXT_207);
d1086 1
a1086 1
    stringBuffer.append(TEXT_208);
d1088 1
a1088 1
    stringBuffer.append(TEXT_209);
d1094 1
a1094 1
    stringBuffer.append(TEXT_210);
d1096 1
a1096 1
    stringBuffer.append(TEXT_211);
d1101 1
a1101 1
    stringBuffer.append(TEXT_212);
a1102 2
    stringBuffer.append(TEXT_213);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart"));
d1106 2
d1109 1
a1109 1
    stringBuffer.append(TEXT_216);
d1113 1
a1113 1
    stringBuffer.append(TEXT_217);
d1115 1
a1115 1
    stringBuffer.append(TEXT_218);
d1120 1
a1120 1
    stringBuffer.append(TEXT_219);
a1121 2
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1127 2
d1130 1
a1130 1
    stringBuffer.append(TEXT_224);
a1131 2
    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1137 2
d1140 1
a1140 1
    stringBuffer.append(TEXT_229);
d1142 1
a1142 1
    stringBuffer.append(TEXT_230);
d1144 1
a1144 1
    stringBuffer.append(TEXT_231);
d1146 1
a1146 1
    stringBuffer.append(TEXT_232);
d1148 1
a1148 1
    stringBuffer.append(TEXT_233);
d1150 1
a1150 1
    stringBuffer.append(TEXT_234);
d1152 1
a1152 1
    stringBuffer.append(TEXT_235);
d1154 1
a1154 1
    stringBuffer.append(TEXT_236);
d1156 1
a1156 1
    stringBuffer.append(TEXT_237);
d1158 1
a1158 1
    stringBuffer.append(TEXT_238);
d1160 1
a1160 1
    stringBuffer.append(TEXT_239);
d1162 1
a1162 1
    stringBuffer.append(TEXT_240);
a1163 1
    stringBuffer.append(TEXT_241);
d1166 1
d1168 1
a1168 1
    stringBuffer.append(TEXT_244);
d1170 1
a1170 1
    stringBuffer.append(TEXT_245);
a1171 1
    stringBuffer.append(TEXT_246);
a1173 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1179 2
a1183 1
    stringBuffer.append(TEXT_252);
a1184 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d1188 2
d1191 1
a1191 1
    stringBuffer.append(TEXT_256);
d1193 1
a1193 1
    stringBuffer.append(TEXT_257);
a1194 2
    stringBuffer.append(TEXT_258);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1200 2
d1203 1
a1203 1
    stringBuffer.append(TEXT_262);
a1204 2
    stringBuffer.append(TEXT_263);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1208 1
a1210 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1214 2
d1217 1
a1217 1
    stringBuffer.append(TEXT_270);
a1218 2
    stringBuffer.append(TEXT_271);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1226 1
a1226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1230 2
d1233 1
a1233 1
    stringBuffer.append(TEXT_278);
a1234 2
    stringBuffer.append(TEXT_279);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1242 1
d1245 1
d1247 1
a1247 1
    stringBuffer.append(TEXT_286);
d1249 1
a1249 1
    stringBuffer.append(TEXT_287);
d1251 1
a1251 1
    stringBuffer.append(TEXT_288);
a1252 1
    stringBuffer.append(TEXT_289);
a1254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1258 1
a1260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1270 1
d1273 1
a1274 1
    stringBuffer.append(TEXT_303);
d1277 1
a1278 1
    stringBuffer.append(TEXT_306);
d1281 1
a1282 1
    stringBuffer.append(TEXT_309);
a1284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1292 1
a1294 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1298 2
d1326 1
d1328 1
a1328 1
    stringBuffer.append(TEXT_320);
d1331 1
a1331 1
    stringBuffer.append(TEXT_321);
d1333 1
a1333 1
    stringBuffer.append(TEXT_322);
d1335 1
a1335 1
    stringBuffer.append(TEXT_323);
d1338 1
a1338 1
    stringBuffer.append(TEXT_324);
d1340 1
a1340 1
    stringBuffer.append(TEXT_325);
d1342 1
a1342 1
    stringBuffer.append(TEXT_326);
d1349 1
a1349 1
    stringBuffer.append(TEXT_327);
a1352 2
    stringBuffer.append(TEXT_328);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName()));
d1356 2
d1359 1
a1359 1
    stringBuffer.append(TEXT_331);
d1361 1
a1361 1
    stringBuffer.append(TEXT_332);
d1368 1
a1368 1
    stringBuffer.append(TEXT_333);
d1374 1
a1374 1
    stringBuffer.append(TEXT_334);
d1376 1
a1376 1
    stringBuffer.append(TEXT_335);
d1378 1
a1378 1
    stringBuffer.append(TEXT_336);
d1380 1
a1380 1
    stringBuffer.append(TEXT_337);
d1384 1
a1384 1
    stringBuffer.append(TEXT_338);
d1386 1
a1386 1
    stringBuffer.append(TEXT_339);
d1388 1
a1388 1
    stringBuffer.append(TEXT_340);
d1390 1
a1390 1
    stringBuffer.append(TEXT_341);
d1392 1
a1392 1
    stringBuffer.append(TEXT_342);
d1394 1
a1394 1
    stringBuffer.append(TEXT_343);
d1408 1
a1408 1
    stringBuffer.append(TEXT_344);
d1414 1
a1414 1
    stringBuffer.append(TEXT_345);
d1416 1
a1416 1
    stringBuffer.append(TEXT_346);
d1418 1
a1418 1
    stringBuffer.append(TEXT_347);
d1420 1
a1420 1
    stringBuffer.append(TEXT_348);
d1424 1
a1424 1
    stringBuffer.append(TEXT_349);
d1426 1
a1426 1
    stringBuffer.append(TEXT_350);
d1428 1
a1428 1
    stringBuffer.append(TEXT_351);
d1430 1
a1430 1
    stringBuffer.append(TEXT_352);
d1432 1
a1432 1
    stringBuffer.append(TEXT_353);
d1434 1
a1434 1
    stringBuffer.append(TEXT_354);
d1442 20
d1463 1
a1463 1
    stringBuffer.append(TEXT_355);
d1469 1
a1469 1
    stringBuffer.append(TEXT_356);
d1471 1
a1471 1
    stringBuffer.append(TEXT_357);
d1473 1
a1473 1
    stringBuffer.append(TEXT_358);
d1480 1
a1480 1
    stringBuffer.append(TEXT_359);
d1486 1
a1486 1
    stringBuffer.append(TEXT_360);
d1488 1
a1488 1
    stringBuffer.append(TEXT_361);
d1490 1
a1490 1
    stringBuffer.append(TEXT_362);
d1492 1
a1492 1
    stringBuffer.append(TEXT_363);
d1496 1
a1496 1
    stringBuffer.append(TEXT_364);
d1498 1
a1498 1
    stringBuffer.append(TEXT_365);
d1500 1
a1500 1
    stringBuffer.append(TEXT_366);
d1502 1
a1502 1
    stringBuffer.append(TEXT_367);
d1504 1
a1504 1
    stringBuffer.append(TEXT_368);
d1506 1
a1506 1
    stringBuffer.append(TEXT_369);
d1513 17
d1531 4
a1534 1
    stringBuffer.append(TEXT_370);
d1538 1
a1538 1
    stringBuffer.append(TEXT_371);
d1542 1
a1542 1
    stringBuffer.append(TEXT_372);
d1546 1
a1546 1
    stringBuffer.append(TEXT_373);
d1548 1
a1548 1
    stringBuffer.append(TEXT_374);
d1550 1
a1550 1
    stringBuffer.append(TEXT_375);
d1552 1
a1552 1
    stringBuffer.append(TEXT_376);
d1556 1
a1556 1
    stringBuffer.append(TEXT_377);
d1582 1
d1584 1
a1584 1
    stringBuffer.append(TEXT_378);
d1587 1
a1587 1
    stringBuffer.append(TEXT_379);
d1589 1
a1589 1
    stringBuffer.append(TEXT_380);
d1591 1
a1591 1
    stringBuffer.append(TEXT_381);
d1593 1
a1593 1
    stringBuffer.append(TEXT_382);
d1595 1
a1595 1
    stringBuffer.append(TEXT_383);
d1598 1
a1598 1
    stringBuffer.append(TEXT_384);
d1600 1
a1600 1
    stringBuffer.append(TEXT_385);
d1602 1
a1602 1
    stringBuffer.append(TEXT_386);
d1604 1
a1604 1
    stringBuffer.append(TEXT_387);
d1606 1
a1606 1
    stringBuffer.append(TEXT_388);
d1608 1
a1608 1
    stringBuffer.append(TEXT_389);
d1610 1
a1610 1
    stringBuffer.append(TEXT_390);
d1612 1
a1612 1
    stringBuffer.append(TEXT_391);
d1618 1
a1618 1
    stringBuffer.append(TEXT_392);
d1620 1
a1620 1
    stringBuffer.append(TEXT_393);
d1622 1
a1622 1
    stringBuffer.append(TEXT_394);
d1624 1
a1624 1
    stringBuffer.append(TEXT_395);
d1626 1
a1626 1
    stringBuffer.append(TEXT_396);
d1628 1
a1628 1
    stringBuffer.append(TEXT_397);
d1630 1
a1630 1
    stringBuffer.append(TEXT_398);
d1634 1
a1634 1
    stringBuffer.append(TEXT_399);
d1638 1
a1638 1
    stringBuffer.append(TEXT_400);
d1640 1
a1640 1
    stringBuffer.append(TEXT_401);
d1642 1
a1642 1
    stringBuffer.append(TEXT_402);
d1644 1
a1644 1
    stringBuffer.append(TEXT_403);
d1648 1
a1648 1
    stringBuffer.append(TEXT_404);
d1675 1
a1675 1
    stringBuffer.append(TEXT_405);
d1677 1
a1677 1
    stringBuffer.append(TEXT_406);
d1679 1
a1679 1
    stringBuffer.append(TEXT_407);
d1681 1
a1681 1
    stringBuffer.append(TEXT_408);
d1683 1
a1683 1
    stringBuffer.append(TEXT_409);
d1685 1
a1685 1
    stringBuffer.append(TEXT_410);
d1687 1
a1687 1
    stringBuffer.append(TEXT_411);
d1692 1
a1692 1
    stringBuffer.append(TEXT_412);
d1694 1
a1694 1
    stringBuffer.append(TEXT_413);
d1696 1
a1696 1
    stringBuffer.append(TEXT_414);
d1698 1
a1698 1
    stringBuffer.append(TEXT_415);
d1707 1
a1707 1
    stringBuffer.append(TEXT_416);
d1713 1
a1713 1
    stringBuffer.append(TEXT_417);
d1715 1
a1715 1
    stringBuffer.append(TEXT_418);
d1717 1
a1717 1
    stringBuffer.append(TEXT_419);
d1719 1
a1719 1
    stringBuffer.append(TEXT_420);
d1723 1
a1723 1
    stringBuffer.append(TEXT_421);
d1725 1
a1725 1
    stringBuffer.append(TEXT_422);
d1727 1
a1727 1
    stringBuffer.append(TEXT_423);
d1729 1
a1729 1
    stringBuffer.append(TEXT_424);
d1731 1
a1731 1
    stringBuffer.append(TEXT_425);
d1733 1
a1733 1
    stringBuffer.append(TEXT_426);
d1741 1
a1741 1
    stringBuffer.append(TEXT_427);
d1743 1
a1743 1
    stringBuffer.append(TEXT_428);
d1745 1
a1745 1
    stringBuffer.append(TEXT_429);
d1747 1
a1747 1
    stringBuffer.append(TEXT_430);
d1756 1
a1756 1
    stringBuffer.append(TEXT_431);
d1762 1
a1762 1
    stringBuffer.append(TEXT_432);
d1764 1
a1764 1
    stringBuffer.append(TEXT_433);
d1766 1
a1766 1
    stringBuffer.append(TEXT_434);
d1768 1
a1768 1
    stringBuffer.append(TEXT_435);
d1772 1
a1772 1
    stringBuffer.append(TEXT_436);
d1774 1
a1774 1
    stringBuffer.append(TEXT_437);
d1776 1
a1776 1
    stringBuffer.append(TEXT_438);
d1778 1
a1778 1
    stringBuffer.append(TEXT_439);
d1780 1
a1780 1
    stringBuffer.append(TEXT_440);
d1782 1
a1782 1
    stringBuffer.append(TEXT_441);
d1790 1
a1790 1
    stringBuffer.append(TEXT_442);
d1792 1
a1792 1
    stringBuffer.append(TEXT_443);
d1794 1
a1794 1
    stringBuffer.append(TEXT_444);
d1796 1
a1796 1
    stringBuffer.append(TEXT_445);
d1800 1
a1800 1
    stringBuffer.append(TEXT_446);
d1805 1
a1805 1
    stringBuffer.append(TEXT_447);
d1807 1
a1807 1
    stringBuffer.append(TEXT_448);
d1809 1
a1809 1
    stringBuffer.append(TEXT_449);
d1811 1
a1811 1
    stringBuffer.append(TEXT_450);
d1815 1
a1815 1
    stringBuffer.append(TEXT_451);
d1819 1
a1819 1
    stringBuffer.append(TEXT_452);
d1821 1
a1821 1
    stringBuffer.append(TEXT_453);
d1823 1
a1823 1
    stringBuffer.append(TEXT_454);
d1825 1
a1825 1
    stringBuffer.append(TEXT_455);
d1829 24
a1852 1
    stringBuffer.append(TEXT_456);
d1861 1
a1861 1
    stringBuffer.append(TEXT_457);
d1863 1
a1863 1
    stringBuffer.append(TEXT_458);
d1867 1
a1867 1
    stringBuffer.append(TEXT_459);
d1874 1
a1874 1
    stringBuffer.append(TEXT_460);
d1876 1
a1876 1
    stringBuffer.append(TEXT_461);
@


1.7
log
@[bblajer] #143983 Respect link cardinality in commands that start connections
@
text
@d208 270
a477 270
  protected final String TEXT_187 = " labelToEdit = getLabelEditPart((";
  protected final String TEXT_188 = ")req);" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_189 = " getLabelEditPart(";
  protected final String TEXT_190 = " req) {" + NL + "\t\t";
  protected final String TEXT_191 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_192 = " view = (";
  protected final String TEXT_193 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_194 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_195 = NL + "\t\t\t\tcase ";
  protected final String TEXT_196 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_197 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_198 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_199 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_200 = " labelFigure = ((";
  protected final String TEXT_201 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_202 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_203 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_204 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_205 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_206 = " labelFigure = ((";
  protected final String TEXT_207 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_208 = " childEditPart) {";
  protected final String TEXT_209 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_210 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_211 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_212 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_213 = " root = (";
  protected final String TEXT_214 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_215 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_216 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_217 = " childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_218 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_219 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_220 = ";" + NL + "\t\t";
  protected final String TEXT_221 = " bounds = (";
  protected final String TEXT_222 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_223 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_224 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_225 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_226 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_227 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_228 = " getSourceConnectionAnchor(";
  protected final String TEXT_229 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_230 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_231 = " getSourceConnectionAnchor(";
  protected final String TEXT_232 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_233 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_234 = "  getTargetConnectionAnchor(";
  protected final String TEXT_235 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_236 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_237 = "  getTargetConnectionAnchor(";
  protected final String TEXT_238 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_239 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_240 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_241 = NL;
  protected final String TEXT_242 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_243 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_244 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_245 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_246 = NL;
  protected final String TEXT_247 = "\tpublic void addRefresher(";
  protected final String TEXT_248 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_249 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_250 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_251 = NL;
  protected final String TEXT_252 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_253 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_254 = ") ";
  protected final String TEXT_255 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_256 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_257 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_258 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_259 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_260 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_261 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_262 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_263 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_264 = " createdFont;" + NL;
  protected final String TEXT_265 = NL;
  protected final String TEXT_266 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_267 = " style = (";
  protected final String TEXT_268 = ")  ";
  protected final String TEXT_269 = ".getStyle(";
  protected final String TEXT_270 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_271 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_272 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_273 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_274 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_275 = " style = (";
  protected final String TEXT_276 = ")  ";
  protected final String TEXT_277 = ".getStyle(";
  protected final String TEXT_278 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_279 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_280 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_281 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_282 = " createdBackgroundColor;" + NL;
  protected final String TEXT_283 = NL;
  protected final String TEXT_284 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_285 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_286 = " feature, ";
  protected final String TEXT_287 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_288 = "();";
  protected final String TEXT_289 = NL;
  protected final String TEXT_290 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_291 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_292 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_293 = NL;
  protected final String TEXT_294 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_295 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_296 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_297 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_298 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_299 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_300 = NL;
  protected final String TEXT_301 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_302 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_303 = NL;
  protected final String TEXT_304 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_305 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_306 = NL;
  protected final String TEXT_307 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_308 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_309 = NL;
  protected final String TEXT_310 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_311 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_312 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_313 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_314 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_315 = NL;
  protected final String TEXT_316 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_317 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_318 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_319 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_320 = "StartCommand extends ";
  protected final String TEXT_321 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_322 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_323 = "StartCommand(";
  protected final String TEXT_324 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\t//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart()." + NL + "\t\t\tsource = (";
  protected final String TEXT_325 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\t//This command never gets executed" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean prepare() {" + NL + "\t\t\tif (source == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_326 = NL + "\t\t\treturn false;";
  protected final String TEXT_327 = NL + "\t\t\t";
  protected final String TEXT_328 = " container = (";
  protected final String TEXT_329 = ")getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_330 = ".eINSTANCE.get";
  protected final String TEXT_331 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_332 = NL;
  protected final String TEXT_333 = NL + "\t\tif (";
  protected final String TEXT_334 = ".";
  protected final String TEXT_335 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_336 = NL + "\t\t}";
  protected final String TEXT_337 = NL + "\t\tif (";
  protected final String TEXT_338 = ".";
  protected final String TEXT_339 = "().size() >= ";
  protected final String TEXT_340 = ".eINSTANCE.get";
  protected final String TEXT_341 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_342 = NL + "\t\t}";
  protected final String TEXT_343 = NL;
  protected final String TEXT_344 = NL + "\t\tif (";
  protected final String TEXT_345 = ".";
  protected final String TEXT_346 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_347 = NL + "\t\t}";
  protected final String TEXT_348 = NL + "\t\tif (";
  protected final String TEXT_349 = ".";
  protected final String TEXT_350 = "().size() >= ";
  protected final String TEXT_351 = ".eINSTANCE.get";
  protected final String TEXT_352 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_353 = NL + "\t\t}";
  protected final String TEXT_354 = NL + "\t\t\treturn true;";
  protected final String TEXT_355 = NL + "\t\t\t";
  protected final String TEXT_356 = " domainElement = (";
  protected final String TEXT_357 = ")source.getElement();";
  protected final String TEXT_358 = NL;
  protected final String TEXT_359 = NL + "\t\tif (";
  protected final String TEXT_360 = ".";
  protected final String TEXT_361 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_362 = NL + "\t\t}";
  protected final String TEXT_363 = NL + "\t\tif (";
  protected final String TEXT_364 = ".";
  protected final String TEXT_365 = "().size() >= ";
  protected final String TEXT_366 = ".eINSTANCE.get";
  protected final String TEXT_367 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_368 = NL + "\t\t}";
  protected final String TEXT_369 = NL + "\t\t\treturn true;";
  protected final String TEXT_370 = NL + "\t\t\treturn false;";
  protected final String TEXT_371 = NL + "\t\t}";
  protected final String TEXT_372 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_373 = " getRelationshipContainer(";
  protected final String TEXT_374 = " element, ";
  protected final String TEXT_375 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_376 = NL + NL + "\t}";
  protected final String TEXT_377 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_378 = "Command extends ";
  protected final String TEXT_379 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_380 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_381 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_382 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_383 = "Command(";
  protected final String TEXT_384 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_385 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_386 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_387 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_388 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_389 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_390 = ".eINSTANCE.createEdge();";
  protected final String TEXT_391 = NL + "\t\t\t";
  protected final String TEXT_392 = " createdDomainElement = ";
  protected final String TEXT_393 = ".eINSTANCE.create";
  protected final String TEXT_394 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_395 = NL + "\t\t\t";
  protected final String TEXT_396 = ".";
  protected final String TEXT_397 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_398 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
  protected final String TEXT_399 = NL + "\t\t\t";
  protected final String TEXT_400 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_401 = " domainModelEditDomain = ";
  protected final String TEXT_402 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_403 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_404 = NL + "\t\t\t";
  protected final String TEXT_405 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_406 = ".eINSTANCE.get";
  protected final String TEXT_407 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_408 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_409 = ".eINSTANCE.get";
  protected final String TEXT_410 = "(), createdDomainElement));";
  protected final String TEXT_411 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_412 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_413 = ".eINSTANCE.get";
  protected final String TEXT_414 = "(), createdDomainElement));";
  protected final String TEXT_415 = NL;
  protected final String TEXT_416 = NL + "\t\tif (";
  protected final String TEXT_417 = ".";
  protected final String TEXT_418 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_419 = NL + "\t\t}";
  protected final String TEXT_420 = NL + "\t\tif (";
  protected final String TEXT_421 = ".";
  protected final String TEXT_422 = "().size() >= ";
  protected final String TEXT_423 = ".eINSTANCE.get";
  protected final String TEXT_424 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_425 = NL + "\t\t}";
  protected final String TEXT_426 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_427 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_428 = ".eINSTANCE.get";
  protected final String TEXT_429 = "(), source.getElement()));";
  protected final String TEXT_430 = NL;
  protected final String TEXT_431 = NL + "\t\tif (";
  protected final String TEXT_432 = ".";
  protected final String TEXT_433 = "() != null) {" + NL + "\t\t\t";
  protected final String TEXT_434 = NL + "\t\t}";
  protected final String TEXT_435 = NL + "\t\tif (";
  protected final String TEXT_436 = ".";
  protected final String TEXT_437 = "().size() >= ";
  protected final String TEXT_438 = ".eINSTANCE.get";
  protected final String TEXT_439 = ".getUpperBound()) {" + NL + "\t\t\t";
  protected final String TEXT_440 = NL + "\t\t}";
  protected final String TEXT_441 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_442 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_443 = ".eINSTANCE.get";
  protected final String TEXT_444 = "(), target.getElement()));";
  protected final String TEXT_445 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_446 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_447 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_448 = ".eINSTANCE.get";
  protected final String TEXT_449 = "(), target.getElement());";
  protected final String TEXT_450 = NL + "\t\t}" + NL;
  protected final String TEXT_451 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_452 = " getRelationshipContainer(";
  protected final String TEXT_453 = " element, ";
  protected final String TEXT_454 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_455 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_456 = NL;
d479 4
a482 3
  protected final String TEXT_458 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_459 = NL + "}";
  protected final String TEXT_460 = NL;
d1007 2
d1010 1
a1010 1
    stringBuffer.append(TEXT_189);
d1012 1
a1012 1
    stringBuffer.append(TEXT_190);
a1013 2
    stringBuffer.append(TEXT_191);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1017 2
d1020 1
a1020 1
    stringBuffer.append(TEXT_194);
d1028 1
a1028 1
    stringBuffer.append(TEXT_195);
d1030 1
a1030 1
    stringBuffer.append(TEXT_196);
d1034 1
a1034 1
    stringBuffer.append(TEXT_197);
d1049 1
a1049 1
    stringBuffer.append(TEXT_198);
d1051 1
a1051 1
    stringBuffer.append(TEXT_199);
d1053 1
a1053 1
    stringBuffer.append(TEXT_200);
d1055 1
a1055 1
    stringBuffer.append(TEXT_201);
d1057 1
a1057 1
    stringBuffer.append(TEXT_202);
d1059 1
a1059 1
    stringBuffer.append(TEXT_203);
d1061 1
a1061 1
    stringBuffer.append(TEXT_204);
d1063 1
a1063 1
    stringBuffer.append(TEXT_205);
d1065 1
a1065 1
    stringBuffer.append(TEXT_206);
d1067 1
a1067 1
    stringBuffer.append(TEXT_207);
d1069 1
a1069 1
    stringBuffer.append(TEXT_208);
d1075 1
a1075 1
    stringBuffer.append(TEXT_209);
d1077 1
a1077 1
    stringBuffer.append(TEXT_210);
d1082 1
a1082 1
    stringBuffer.append(TEXT_211);
a1083 2
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart"));
d1087 2
d1090 1
a1090 1
    stringBuffer.append(TEXT_215);
d1094 1
a1094 1
    stringBuffer.append(TEXT_216);
d1096 1
a1096 1
    stringBuffer.append(TEXT_217);
d1101 1
a1101 1
    stringBuffer.append(TEXT_218);
a1102 2
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1108 2
d1111 1
a1111 1
    stringBuffer.append(TEXT_223);
a1112 2
    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1118 2
d1121 1
a1121 1
    stringBuffer.append(TEXT_228);
d1123 1
a1123 1
    stringBuffer.append(TEXT_229);
d1125 1
a1125 1
    stringBuffer.append(TEXT_230);
d1127 1
a1127 1
    stringBuffer.append(TEXT_231);
d1129 1
a1129 1
    stringBuffer.append(TEXT_232);
d1131 1
a1131 1
    stringBuffer.append(TEXT_233);
d1133 1
a1133 1
    stringBuffer.append(TEXT_234);
d1135 1
a1135 1
    stringBuffer.append(TEXT_235);
d1137 1
a1137 1
    stringBuffer.append(TEXT_236);
d1139 1
a1139 1
    stringBuffer.append(TEXT_237);
d1141 1
a1141 1
    stringBuffer.append(TEXT_238);
d1143 1
a1143 1
    stringBuffer.append(TEXT_239);
a1144 1
    stringBuffer.append(TEXT_240);
d1147 1
d1149 1
a1149 1
    stringBuffer.append(TEXT_243);
d1151 1
a1151 1
    stringBuffer.append(TEXT_244);
a1152 1
    stringBuffer.append(TEXT_245);
a1154 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1160 2
a1164 1
    stringBuffer.append(TEXT_251);
a1165 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d1169 2
d1172 1
a1172 1
    stringBuffer.append(TEXT_255);
d1174 1
a1174 1
    stringBuffer.append(TEXT_256);
a1175 2
    stringBuffer.append(TEXT_257);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1181 2
d1184 1
a1184 1
    stringBuffer.append(TEXT_261);
a1185 2
    stringBuffer.append(TEXT_262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1189 1
a1191 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1195 2
d1198 1
a1198 1
    stringBuffer.append(TEXT_269);
a1199 2
    stringBuffer.append(TEXT_270);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1207 1
a1207 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1211 2
d1214 1
a1214 1
    stringBuffer.append(TEXT_277);
a1215 2
    stringBuffer.append(TEXT_278);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1223 1
d1226 1
d1228 1
a1228 1
    stringBuffer.append(TEXT_285);
d1230 1
a1230 1
    stringBuffer.append(TEXT_286);
d1232 1
a1232 1
    stringBuffer.append(TEXT_287);
a1233 1
    stringBuffer.append(TEXT_288);
a1235 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1239 1
a1241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1251 1
d1254 1
a1255 1
    stringBuffer.append(TEXT_302);
d1258 1
a1259 1
    stringBuffer.append(TEXT_305);
d1262 1
a1263 1
    stringBuffer.append(TEXT_308);
a1265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1273 1
a1275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1279 2
d1308 1
a1308 1
    stringBuffer.append(TEXT_319);
d1311 1
a1311 1
    stringBuffer.append(TEXT_320);
d1313 1
a1313 1
    stringBuffer.append(TEXT_321);
d1315 1
a1315 1
    stringBuffer.append(TEXT_322);
d1318 1
a1318 1
    stringBuffer.append(TEXT_323);
d1320 1
a1320 1
    stringBuffer.append(TEXT_324);
d1322 1
a1322 1
    stringBuffer.append(TEXT_325);
d1329 1
a1329 1
    stringBuffer.append(TEXT_326);
a1332 2
    stringBuffer.append(TEXT_327);
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName()));
d1336 2
d1339 1
a1339 1
    stringBuffer.append(TEXT_330);
d1341 1
a1341 1
    stringBuffer.append(TEXT_331);
d1348 1
a1348 1
    stringBuffer.append(TEXT_332);
d1354 1
a1354 1
    stringBuffer.append(TEXT_333);
d1356 1
a1356 1
    stringBuffer.append(TEXT_334);
d1358 1
a1358 1
    stringBuffer.append(TEXT_335);
d1360 1
a1360 1
    stringBuffer.append(TEXT_336);
d1364 1
a1364 1
    stringBuffer.append(TEXT_337);
d1366 1
a1366 1
    stringBuffer.append(TEXT_338);
d1368 1
a1368 1
    stringBuffer.append(TEXT_339);
d1370 1
a1370 1
    stringBuffer.append(TEXT_340);
d1372 1
a1372 1
    stringBuffer.append(TEXT_341);
d1374 1
a1374 1
    stringBuffer.append(TEXT_342);
d1388 1
a1388 1
    stringBuffer.append(TEXT_343);
d1394 1
a1394 1
    stringBuffer.append(TEXT_344);
d1396 1
a1396 1
    stringBuffer.append(TEXT_345);
d1398 1
a1398 1
    stringBuffer.append(TEXT_346);
d1400 1
a1400 1
    stringBuffer.append(TEXT_347);
d1404 1
a1404 1
    stringBuffer.append(TEXT_348);
d1406 1
a1406 1
    stringBuffer.append(TEXT_349);
d1408 1
a1408 1
    stringBuffer.append(TEXT_350);
d1410 1
a1410 1
    stringBuffer.append(TEXT_351);
d1412 1
a1412 1
    stringBuffer.append(TEXT_352);
d1414 1
a1414 1
    stringBuffer.append(TEXT_353);
d1423 1
a1423 1
    stringBuffer.append(TEXT_354);
a1428 2
    stringBuffer.append(TEXT_355);
    stringBuffer.append(importManager.getImportedName(outgoingClass.getQualifiedInterfaceName()));
d1432 2
d1440 1
a1440 1
    stringBuffer.append(TEXT_358);
d1446 1
a1446 1
    stringBuffer.append(TEXT_359);
d1448 1
a1448 1
    stringBuffer.append(TEXT_360);
d1450 1
a1450 1
    stringBuffer.append(TEXT_361);
d1452 1
a1452 1
    stringBuffer.append(TEXT_362);
d1456 1
a1456 1
    stringBuffer.append(TEXT_363);
d1458 1
a1458 1
    stringBuffer.append(TEXT_364);
d1460 1
a1460 1
    stringBuffer.append(TEXT_365);
d1462 1
a1462 1
    stringBuffer.append(TEXT_366);
d1464 1
a1464 1
    stringBuffer.append(TEXT_367);
d1466 1
a1466 1
    stringBuffer.append(TEXT_368);
d1474 1
a1474 1
    stringBuffer.append(TEXT_369);
d1478 1
a1478 1
    stringBuffer.append(TEXT_370);
d1482 1
a1482 1
    stringBuffer.append(TEXT_371);
a1485 2
    stringBuffer.append(TEXT_372);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1489 2
d1492 1
a1492 1
    stringBuffer.append(TEXT_375);
d1496 1
a1496 1
    stringBuffer.append(TEXT_376);
d1523 1
a1523 1
    stringBuffer.append(TEXT_377);
d1526 1
a1526 1
    stringBuffer.append(TEXT_378);
a1527 2
    stringBuffer.append(TEXT_379);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1531 2
d1534 1
a1534 1
    stringBuffer.append(TEXT_382);
d1537 1
a1537 1
    stringBuffer.append(TEXT_383);
a1538 2
    stringBuffer.append(TEXT_384);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1546 2
d1549 1
a1549 1
    stringBuffer.append(TEXT_389);
d1551 1
a1551 1
    stringBuffer.append(TEXT_390);
d1557 1
a1557 1
    stringBuffer.append(TEXT_391);
d1559 1
a1559 1
    stringBuffer.append(TEXT_392);
d1561 1
a1561 1
    stringBuffer.append(TEXT_393);
d1563 1
a1563 1
    stringBuffer.append(TEXT_394);
d1565 1
a1565 1
    stringBuffer.append(TEXT_395);
d1567 1
a1567 1
    stringBuffer.append(TEXT_396);
d1569 1
a1569 1
    stringBuffer.append(TEXT_397);
d1573 1
a1573 1
    stringBuffer.append(TEXT_398);
d1577 1
a1577 1
    stringBuffer.append(TEXT_399);
d1579 1
a1579 1
    stringBuffer.append(TEXT_400);
d1581 1
a1581 1
    stringBuffer.append(TEXT_401);
d1583 1
a1583 1
    stringBuffer.append(TEXT_402);
d1587 1
a1587 1
    stringBuffer.append(TEXT_403);
d1614 1
a1614 1
    stringBuffer.append(TEXT_404);
d1616 1
a1616 1
    stringBuffer.append(TEXT_405);
d1618 1
a1618 1
    stringBuffer.append(TEXT_406);
d1620 1
a1620 1
    stringBuffer.append(TEXT_407);
d1622 1
a1622 1
    stringBuffer.append(TEXT_408);
d1624 1
a1624 1
    stringBuffer.append(TEXT_409);
d1626 1
a1626 1
    stringBuffer.append(TEXT_410);
d1631 1
a1631 1
    stringBuffer.append(TEXT_411);
d1633 1
a1633 1
    stringBuffer.append(TEXT_412);
d1635 1
a1635 1
    stringBuffer.append(TEXT_413);
d1637 1
a1637 1
    stringBuffer.append(TEXT_414);
d1646 1
a1646 1
    stringBuffer.append(TEXT_415);
d1652 1
a1652 1
    stringBuffer.append(TEXT_416);
d1654 1
a1654 1
    stringBuffer.append(TEXT_417);
d1656 1
a1656 1
    stringBuffer.append(TEXT_418);
d1658 1
a1658 1
    stringBuffer.append(TEXT_419);
d1662 1
a1662 1
    stringBuffer.append(TEXT_420);
d1664 1
a1664 1
    stringBuffer.append(TEXT_421);
d1666 1
a1666 1
    stringBuffer.append(TEXT_422);
d1668 1
a1668 1
    stringBuffer.append(TEXT_423);
d1670 1
a1670 1
    stringBuffer.append(TEXT_424);
d1672 1
a1672 1
    stringBuffer.append(TEXT_425);
d1680 1
a1680 1
    stringBuffer.append(TEXT_426);
d1682 1
a1682 1
    stringBuffer.append(TEXT_427);
d1684 1
a1684 1
    stringBuffer.append(TEXT_428);
d1686 1
a1686 1
    stringBuffer.append(TEXT_429);
d1695 1
a1695 1
    stringBuffer.append(TEXT_430);
d1701 1
a1701 1
    stringBuffer.append(TEXT_431);
d1703 1
a1703 1
    stringBuffer.append(TEXT_432);
d1705 1
a1705 1
    stringBuffer.append(TEXT_433);
d1707 1
a1707 1
    stringBuffer.append(TEXT_434);
d1711 1
a1711 1
    stringBuffer.append(TEXT_435);
d1713 1
a1713 1
    stringBuffer.append(TEXT_436);
d1715 1
a1715 1
    stringBuffer.append(TEXT_437);
d1717 1
a1717 1
    stringBuffer.append(TEXT_438);
d1719 1
a1719 1
    stringBuffer.append(TEXT_439);
d1721 1
a1721 1
    stringBuffer.append(TEXT_440);
d1729 1
a1729 1
    stringBuffer.append(TEXT_441);
d1731 1
a1731 1
    stringBuffer.append(TEXT_442);
d1733 1
a1733 1
    stringBuffer.append(TEXT_443);
d1735 1
a1735 1
    stringBuffer.append(TEXT_444);
d1739 1
a1739 1
    stringBuffer.append(TEXT_445);
d1744 1
a1744 1
    stringBuffer.append(TEXT_446);
d1746 1
a1746 1
    stringBuffer.append(TEXT_447);
d1748 1
a1748 1
    stringBuffer.append(TEXT_448);
d1750 1
a1750 1
    stringBuffer.append(TEXT_449);
d1754 1
a1754 1
    stringBuffer.append(TEXT_450);
a1757 2
    stringBuffer.append(TEXT_451);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1761 2
d1764 1
a1764 1
    stringBuffer.append(TEXT_454);
d1768 1
a1768 1
    stringBuffer.append(TEXT_455);
d1777 1
a1777 1
    stringBuffer.append(TEXT_456);
d1779 1
a1779 1
    stringBuffer.append(TEXT_457);
d1783 1
a1783 1
    stringBuffer.append(TEXT_458);
d1790 1
a1790 1
    stringBuffer.append(TEXT_459);
d1792 1
a1792 1
    stringBuffer.append(TEXT_460);
@


1.6
log
@[bblajer] #143687 impossible to direct-edit any label except the first one
@
text
@d114 368
a481 287
  protected final String TEXT_93 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\tint matchingVisualIdsCount = 0;" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_94 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_95 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tmatchingVisualIdsCount++;" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_96 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (matchingVisualIdsCount != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_97 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_98 = " result = new ";
  protected final String TEXT_99 = "() {" + NL + "\t\t\t\t\t\t//XXX: check multiplicity requirements etc." + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t\trequest.setStartCommand(result);" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}";
  protected final String TEXT_100 = NL + "\t\t\t\treturn ";
  protected final String TEXT_101 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_102 = " getConnectionCompleteCommand(";
  protected final String TEXT_103 = " request) {";
  protected final String TEXT_104 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_105 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_106 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_107 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_108 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_109 = " result = new ";
  protected final String TEXT_110 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_111 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_112 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.append(new Create";
  protected final String TEXT_113 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_114 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getCommandList().size() != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_115 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new WrappingCommand(";
  protected final String TEXT_116 = ".getEditingDomain(getDiagramNode().getDiagram().getElement()), result);" + NL + "\t\t\t\t}";
  protected final String TEXT_117 = NL + "\t\t\t\treturn ";
  protected final String TEXT_118 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_119 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_120 = " invisibleRectangle = new ";
  protected final String TEXT_121 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_122 = "());" + NL + "\t\t";
  protected final String TEXT_123 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_124 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_125 = " createNodeShape() {";
  protected final String TEXT_126 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_127 = "()";
  protected final String TEXT_128 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_129 = ";";
  protected final String TEXT_130 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_131 = ";";
  protected final String TEXT_132 = NL + "\t\t";
  protected final String TEXT_133 = " figure = new ";
  protected final String TEXT_134 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_135 = ");" + NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_136 = NL + "\t\treturn primaryShape;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_137 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_138 = " view = (";
  protected final String TEXT_139 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_140 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_141 = " decorationPane = new ";
  protected final String TEXT_142 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_143 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_144 = " imageFigure = new ";
  protected final String TEXT_145 = "(";
  protected final String TEXT_146 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_147 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_148 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_149 = " setupContentPane(";
  protected final String TEXT_150 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_151 = NL + "\t\t\t";
  protected final String TEXT_152 = " layout = new ";
  protected final String TEXT_153 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_154 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_155 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_156 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_157 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_158 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_159 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_160 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_161 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_162 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_163 = " childEditPart) {";
  protected final String TEXT_164 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_165 = ") {";
  protected final String TEXT_166 = NL + "\t\t\t((";
  protected final String TEXT_167 = ") childEditPart).setLabel(((";
  protected final String TEXT_168 = ") primaryShape).getFigure";
  protected final String TEXT_169 = "());";
  protected final String TEXT_170 = NL + "\t\t\t((";
  protected final String TEXT_171 = ") childEditPart).setLabel(new ";
  protected final String TEXT_172 = "());";
  protected final String TEXT_173 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_174 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_175 = " getPrimaryLabelEditPart() {";
  protected final String TEXT_176 = NL + "\t\tfor(";
  protected final String TEXT_177 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_178 = " nextChild = (";
  protected final String TEXT_179 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_180 = ".getVisualID(nextChild) == ";
  protected final String TEXT_181 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_182 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_183 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_184 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_185 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_186 = " labelToEdit = getLabelEditPart((";
  protected final String TEXT_187 = ")req);" + NL + "\t\t\tif (labelToEdit != null) {" + NL + "\t\t\t\tlabelToEdit.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_188 = " getLabelEditPart(";
  protected final String TEXT_189 = " req) {" + NL + "\t\t";
  protected final String TEXT_190 = " result = getViewer().findObjectAt(req.getLocation());" + NL + "\t\tif (result != null) {" + NL + "\t\t\t";
  protected final String TEXT_191 = " view = (";
  protected final String TEXT_192 = ") result.getModel();" + NL + "\t\t\tif (getDiagramNode().getChildren().contains(view)) {" + NL + "\t\t\t\tint visualId = ";
  protected final String TEXT_193 = ".getVisualID(view);" + NL + "\t\t\t\tswitch (visualId) {";
  protected final String TEXT_194 = NL + "\t\t\t\tcase ";
  protected final String TEXT_195 = ".VISUAL_ID:" + NL + "\t\t\t\t\treturn result;";
  protected final String TEXT_196 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getPrimaryLabelEditPart();" + NL + "\t}" + NL;
  protected final String TEXT_197 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_198 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_199 = " labelFigure = ((";
  protected final String TEXT_200 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_201 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_202 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_203 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_204 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_205 = " labelFigure = ((";
  protected final String TEXT_206 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_207 = " childEditPart) {";
  protected final String TEXT_208 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_209 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_210 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_211 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_212 = " root = (";
  protected final String TEXT_213 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_214 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_215 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_216 = " childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_217 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_218 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_219 = ";" + NL + "\t\t";
  protected final String TEXT_220 = " bounds = (";
  protected final String TEXT_221 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_222 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_223 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_224 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_225 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_226 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_227 = " getSourceConnectionAnchor(";
  protected final String TEXT_228 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_229 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_230 = " getSourceConnectionAnchor(";
  protected final String TEXT_231 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_232 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_233 = "  getTargetConnectionAnchor(";
  protected final String TEXT_234 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_235 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_236 = "  getTargetConnectionAnchor(";
  protected final String TEXT_237 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_238 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_239 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_242 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_243 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_244 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_245 = NL;
  protected final String TEXT_246 = "\tpublic void addRefresher(";
  protected final String TEXT_247 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_248 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_249 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_250 = NL;
  protected final String TEXT_251 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_252 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_253 = ") ";
  protected final String TEXT_254 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_255 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_256 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_257 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_258 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_259 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_260 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_261 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_262 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_263 = " createdFont;" + NL;
  protected final String TEXT_264 = NL;
  protected final String TEXT_265 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_266 = " style = (";
  protected final String TEXT_267 = ")  ";
  protected final String TEXT_268 = ".getStyle(";
  protected final String TEXT_269 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_270 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_271 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_272 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_273 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_274 = " style = (";
  protected final String TEXT_275 = ")  ";
  protected final String TEXT_276 = ".getStyle(";
  protected final String TEXT_277 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_278 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_279 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_280 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_281 = " createdBackgroundColor;" + NL;
  protected final String TEXT_282 = NL;
  protected final String TEXT_283 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_284 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_285 = " feature, ";
  protected final String TEXT_286 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_287 = "();";
  protected final String TEXT_288 = NL;
  protected final String TEXT_289 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_290 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_291 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_292 = NL;
  protected final String TEXT_293 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_294 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_295 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_296 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_297 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_298 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_299 = NL;
  protected final String TEXT_300 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_301 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_302 = NL;
  protected final String TEXT_303 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_304 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_305 = NL;
  protected final String TEXT_306 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_307 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_308 = NL;
  protected final String TEXT_309 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_310 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_311 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_312 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_313 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_314 = NL;
  protected final String TEXT_315 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_316 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_317 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_318 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_319 = "Command extends ";
  protected final String TEXT_320 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_321 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_322 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_323 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_324 = "Command(";
  protected final String TEXT_325 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_326 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_327 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_328 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_329 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_330 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_331 = ".eINSTANCE.createEdge();";
  protected final String TEXT_332 = NL + "\t\t\t";
  protected final String TEXT_333 = " createdDomainElement = ";
  protected final String TEXT_334 = ".eINSTANCE.create";
  protected final String TEXT_335 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_336 = NL + "\t\t\t";
  protected final String TEXT_337 = ".";
  protected final String TEXT_338 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_339 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
  protected final String TEXT_340 = NL + "\t\t\t";
  protected final String TEXT_341 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_342 = " domainModelEditDomain = ";
  protected final String TEXT_343 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_344 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_345 = NL + "\t\t\t";
  protected final String TEXT_346 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_347 = ".eINSTANCE.get";
  protected final String TEXT_348 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_349 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_350 = ".eINSTANCE.get";
  protected final String TEXT_351 = "(), createdDomainElement));";
  protected final String TEXT_352 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_353 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_354 = ".eINSTANCE.get";
  protected final String TEXT_355 = "(), createdDomainElement));";
  protected final String TEXT_356 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_357 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_358 = ".eINSTANCE.get";
  protected final String TEXT_359 = "(), source.getElement()));";
  protected final String TEXT_360 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_361 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_362 = ".eINSTANCE.get";
  protected final String TEXT_363 = "(), target.getElement()));";
  protected final String TEXT_364 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_365 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_366 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_367 = ".eINSTANCE.get";
  protected final String TEXT_368 = "(), target.getElement());";
  protected final String TEXT_369 = NL + "\t\t}" + NL;
  protected final String TEXT_370 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_371 = " getRelationshipContainer(";
  protected final String TEXT_372 = " element, ";
  protected final String TEXT_373 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_374 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_375 = NL;
  protected final String TEXT_376 = NL;
  protected final String TEXT_377 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_378 = NL + "}";
  protected final String TEXT_379 = NL;
d711 4
d722 1
d728 1
d732 1
d740 1
a740 1
    stringBuffer.append(TEXT_94);
d742 4
a745 1
    stringBuffer.append(TEXT_95);
d749 1
a749 5
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_98);
a750 2
    stringBuffer.append(TEXT_99);
    }/*when there's palette*/
d752 1
a752 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d754 2
d757 1
a757 1
    stringBuffer.append(TEXT_102);
d759 1
a759 1
    stringBuffer.append(TEXT_103);
d761 1
a761 1
    stringBuffer.append(TEXT_104);
a762 2
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
d768 1
a768 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d772 2
d797 1
a797 1
    stringBuffer.append(TEXT_111);
d799 1
a799 1
    stringBuffer.append(TEXT_112);
d802 1
a802 1
    stringBuffer.append(TEXT_113);
d806 1
a806 1
    stringBuffer.append(TEXT_114);
d808 1
a808 1
    stringBuffer.append(TEXT_115);
d810 1
a810 1
    stringBuffer.append(TEXT_116);
d812 1
a812 1
    stringBuffer.append(TEXT_117);
a813 2
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d817 2
d820 1
a820 1
    stringBuffer.append(TEXT_121);
a821 2
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d827 2
d838 1
a838 1
    stringBuffer.append(TEXT_126);
d840 1
a840 1
    stringBuffer.append(TEXT_127);
d842 1
a842 1
    stringBuffer.append(TEXT_128);
d844 1
a844 1
    stringBuffer.append(TEXT_129);
d846 1
a846 1
    stringBuffer.append(TEXT_130);
d848 1
a848 1
    stringBuffer.append(TEXT_131);
a851 2
    stringBuffer.append(TEXT_132);
    stringBuffer.append(figureQualifiedClassName);
d855 2
d858 1
a858 1
    stringBuffer.append(TEXT_135);
d860 1
a860 1
    stringBuffer.append(TEXT_136);
a861 2
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d865 2
a867 2
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
d871 2
a873 2
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ImageFigure"));
d877 2
d880 1
a880 1
    stringBuffer.append(TEXT_146);
d882 1
a882 1
    stringBuffer.append(TEXT_147);
a883 2
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d887 2
a892 2
    stringBuffer.append(TEXT_151);
    stringBuffer.append(layoutClassName);
d896 2
d899 1
a899 1
    stringBuffer.append(TEXT_154);
d901 1
a901 1
    stringBuffer.append(TEXT_155);
d903 1
a903 1
    stringBuffer.append(TEXT_156);
d905 1
a905 1
    stringBuffer.append(TEXT_157);
d907 1
a907 1
    stringBuffer.append(TEXT_158);
a908 2
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d912 2
d926 1
a926 1
    stringBuffer.append(TEXT_162);
d928 1
a928 1
    stringBuffer.append(TEXT_163);
d947 1
a947 1
    stringBuffer.append(TEXT_164);
d949 1
a949 1
    stringBuffer.append(TEXT_165);
d951 1
a951 1
    stringBuffer.append(TEXT_166);
d953 1
a953 1
    stringBuffer.append(TEXT_167);
d955 1
a955 1
    stringBuffer.append(TEXT_168);
d957 1
a957 1
    stringBuffer.append(TEXT_169);
d959 1
a959 1
    stringBuffer.append(TEXT_170);
d961 1
a961 1
    stringBuffer.append(TEXT_171);
d963 1
a963 1
    stringBuffer.append(TEXT_172);
d965 1
a965 1
    stringBuffer.append(TEXT_173);
d967 1
a967 1
    stringBuffer.append(TEXT_174);
d969 1
a969 1
    stringBuffer.append(TEXT_175);
d981 1
a981 1
    stringBuffer.append(TEXT_176);
a982 2
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d986 2
d989 1
a989 1
    stringBuffer.append(TEXT_180);
d991 1
a991 1
    stringBuffer.append(TEXT_181);
d993 1
a993 1
    stringBuffer.append(TEXT_182);
d997 1
a997 1
    stringBuffer.append(TEXT_183);
d999 1
a999 1
    stringBuffer.append(TEXT_184);
d1001 1
a1001 1
    stringBuffer.append(TEXT_185);
d1003 1
a1003 1
    stringBuffer.append(TEXT_186);
d1005 1
a1005 1
    stringBuffer.append(TEXT_187);
d1007 1
a1007 1
    stringBuffer.append(TEXT_188);
d1009 1
a1009 1
    stringBuffer.append(TEXT_189);
a1010 2
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1014 2
d1017 1
a1017 1
    stringBuffer.append(TEXT_193);
d1025 1
a1025 1
    stringBuffer.append(TEXT_194);
d1027 1
a1027 1
    stringBuffer.append(TEXT_195);
d1031 1
a1031 1
    stringBuffer.append(TEXT_196);
d1046 1
a1046 1
    stringBuffer.append(TEXT_197);
d1048 1
a1048 1
    stringBuffer.append(TEXT_198);
d1050 1
a1050 1
    stringBuffer.append(TEXT_199);
d1052 1
a1052 1
    stringBuffer.append(TEXT_200);
d1054 1
a1054 1
    stringBuffer.append(TEXT_201);
d1056 1
a1056 1
    stringBuffer.append(TEXT_202);
d1058 1
a1058 1
    stringBuffer.append(TEXT_203);
d1060 1
a1060 1
    stringBuffer.append(TEXT_204);
d1062 1
a1062 1
    stringBuffer.append(TEXT_205);
d1064 1
a1064 1
    stringBuffer.append(TEXT_206);
d1066 1
a1066 1
    stringBuffer.append(TEXT_207);
d1072 1
a1072 1
    stringBuffer.append(TEXT_208);
d1074 1
a1074 1
    stringBuffer.append(TEXT_209);
d1079 1
a1079 1
    stringBuffer.append(TEXT_210);
a1080 2
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart"));
d1084 2
d1087 1
a1087 1
    stringBuffer.append(TEXT_214);
d1091 1
a1091 1
    stringBuffer.append(TEXT_215);
d1093 1
a1093 1
    stringBuffer.append(TEXT_216);
d1098 1
a1098 1
    stringBuffer.append(TEXT_217);
a1099 2
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d1105 2
d1108 1
a1108 1
    stringBuffer.append(TEXT_222);
a1109 2
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d1115 2
d1118 1
a1118 1
    stringBuffer.append(TEXT_227);
d1120 1
a1120 1
    stringBuffer.append(TEXT_228);
d1122 1
a1122 1
    stringBuffer.append(TEXT_229);
d1124 1
a1124 1
    stringBuffer.append(TEXT_230);
d1126 1
a1126 1
    stringBuffer.append(TEXT_231);
d1128 1
a1128 1
    stringBuffer.append(TEXT_232);
d1130 1
a1130 1
    stringBuffer.append(TEXT_233);
d1132 1
a1132 1
    stringBuffer.append(TEXT_234);
d1134 1
a1134 1
    stringBuffer.append(TEXT_235);
d1136 1
a1136 1
    stringBuffer.append(TEXT_236);
d1138 1
a1138 1
    stringBuffer.append(TEXT_237);
d1140 1
a1140 1
    stringBuffer.append(TEXT_238);
a1141 1
    stringBuffer.append(TEXT_239);
d1144 1
d1146 1
a1146 1
    stringBuffer.append(TEXT_242);
d1148 1
a1148 1
    stringBuffer.append(TEXT_243);
a1149 1
    stringBuffer.append(TEXT_244);
a1151 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1157 2
a1161 1
    stringBuffer.append(TEXT_250);
a1162 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d1166 2
d1169 1
a1169 1
    stringBuffer.append(TEXT_254);
d1171 1
a1171 1
    stringBuffer.append(TEXT_255);
a1172 2
    stringBuffer.append(TEXT_256);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1178 2
d1181 1
a1181 1
    stringBuffer.append(TEXT_260);
a1182 2
    stringBuffer.append(TEXT_261);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1186 1
a1188 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1192 2
d1195 1
a1195 1
    stringBuffer.append(TEXT_268);
a1196 2
    stringBuffer.append(TEXT_269);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1204 1
a1204 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1208 2
d1211 1
a1211 1
    stringBuffer.append(TEXT_276);
a1212 2
    stringBuffer.append(TEXT_277);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1220 1
d1223 1
d1225 1
a1225 1
    stringBuffer.append(TEXT_284);
d1227 1
a1227 1
    stringBuffer.append(TEXT_285);
d1229 1
a1229 1
    stringBuffer.append(TEXT_286);
a1230 1
    stringBuffer.append(TEXT_287);
a1232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1236 1
a1238 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1248 1
d1251 1
a1252 1
    stringBuffer.append(TEXT_301);
d1255 1
a1256 1
    stringBuffer.append(TEXT_304);
d1259 1
a1260 1
    stringBuffer.append(TEXT_307);
a1262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1270 1
a1272 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1276 2
d1279 218
d1520 1
a1520 2
    if (palette != null) {
    stringBuffer.append(TEXT_318);
d1523 1
a1523 1
    stringBuffer.append(TEXT_319);
d1525 1
a1525 1
    stringBuffer.append(TEXT_320);
d1527 1
a1527 1
    stringBuffer.append(TEXT_321);
d1529 1
a1529 1
    stringBuffer.append(TEXT_322);
d1531 1
a1531 1
    stringBuffer.append(TEXT_323);
d1534 1
a1534 1
    stringBuffer.append(TEXT_324);
d1536 1
a1536 1
    stringBuffer.append(TEXT_325);
d1538 1
a1538 1
    stringBuffer.append(TEXT_326);
d1540 1
a1540 1
    stringBuffer.append(TEXT_327);
d1542 1
a1542 1
    stringBuffer.append(TEXT_328);
d1544 1
a1544 1
    stringBuffer.append(TEXT_329);
d1546 1
a1546 1
    stringBuffer.append(TEXT_330);
d1548 1
a1548 1
    stringBuffer.append(TEXT_331);
d1554 1
a1554 1
    stringBuffer.append(TEXT_332);
d1556 1
a1556 1
    stringBuffer.append(TEXT_333);
d1558 1
a1558 1
    stringBuffer.append(TEXT_334);
d1560 1
a1560 1
    stringBuffer.append(TEXT_335);
d1562 1
a1562 1
    stringBuffer.append(TEXT_336);
d1564 1
a1564 1
    stringBuffer.append(TEXT_337);
d1566 1
a1566 1
    stringBuffer.append(TEXT_338);
d1570 1
a1570 1
    stringBuffer.append(TEXT_339);
d1574 1
a1574 1
    stringBuffer.append(TEXT_340);
d1576 1
a1576 1
    stringBuffer.append(TEXT_341);
d1578 1
a1578 1
    stringBuffer.append(TEXT_342);
d1580 1
a1580 1
    stringBuffer.append(TEXT_343);
d1584 1
a1584 1
    stringBuffer.append(TEXT_344);
d1611 1
a1611 1
    stringBuffer.append(TEXT_345);
d1613 1
a1613 1
    stringBuffer.append(TEXT_346);
d1615 1
a1615 1
    stringBuffer.append(TEXT_347);
d1617 1
a1617 1
    stringBuffer.append(TEXT_348);
d1619 1
a1619 1
    stringBuffer.append(TEXT_349);
d1621 1
a1621 1
    stringBuffer.append(TEXT_350);
d1623 1
a1623 1
    stringBuffer.append(TEXT_351);
d1628 1
a1628 1
    stringBuffer.append(TEXT_352);
d1630 1
a1630 1
    stringBuffer.append(TEXT_353);
d1632 1
a1632 1
    stringBuffer.append(TEXT_354);
d1634 1
a1634 1
    stringBuffer.append(TEXT_355);
d1638 20
d1659 19
a1677 1
    stringBuffer.append(TEXT_356);
d1679 1
a1679 1
    stringBuffer.append(TEXT_357);
d1681 1
a1681 1
    stringBuffer.append(TEXT_358);
d1683 1
a1683 1
    stringBuffer.append(TEXT_359);
d1687 35
d1723 4
a1726 1
    stringBuffer.append(TEXT_360);
d1728 1
a1728 1
    stringBuffer.append(TEXT_361);
d1730 1
a1730 1
    stringBuffer.append(TEXT_362);
d1732 1
a1732 1
    stringBuffer.append(TEXT_363);
d1736 1
a1736 1
    stringBuffer.append(TEXT_364);
d1741 1
a1741 1
    stringBuffer.append(TEXT_365);
d1743 1
a1743 1
    stringBuffer.append(TEXT_366);
d1745 1
a1745 1
    stringBuffer.append(TEXT_367);
d1747 1
a1747 1
    stringBuffer.append(TEXT_368);
d1751 1
a1751 1
    stringBuffer.append(TEXT_369);
d1755 1
a1755 1
    stringBuffer.append(TEXT_370);
d1757 1
a1757 1
    stringBuffer.append(TEXT_371);
d1759 1
a1759 1
    stringBuffer.append(TEXT_372);
d1761 1
a1761 1
    stringBuffer.append(TEXT_373);
d1765 1
a1765 1
    stringBuffer.append(TEXT_374);
d1774 1
a1774 1
    stringBuffer.append(TEXT_375);
d1776 1
a1776 1
    stringBuffer.append(TEXT_376);
d1780 1
a1780 1
    stringBuffer.append(TEXT_377);
d1787 1
a1787 1
    stringBuffer.append(TEXT_378);
d1789 1
a1789 1
    stringBuffer.append(TEXT_379);
@


1.5
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d196 127
a322 127
  protected final String TEXT_175 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_176 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_177 = " nextChild = (";
  protected final String TEXT_178 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_179 = ".getVisualID(nextChild) == ";
  protected final String TEXT_180 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_181 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_182 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_183 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_184 = " primaryLabel = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabel != null) {" + NL + "\t\t\t\tprimaryLabel.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_185 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_186 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_187 = " labelFigure = ((";
  protected final String TEXT_188 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_189 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_190 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_191 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_192 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_193 = " labelFigure = ((";
  protected final String TEXT_194 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_195 = " childEditPart) {";
  protected final String TEXT_196 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_197 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_198 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_199 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_200 = " root = (";
  protected final String TEXT_201 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_202 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_203 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_204 = " childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_205 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_206 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_207 = ";" + NL + "\t\t";
  protected final String TEXT_208 = " bounds = (";
  protected final String TEXT_209 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_210 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_211 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_212 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_213 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_214 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_215 = " getSourceConnectionAnchor(";
  protected final String TEXT_216 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_217 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_218 = " getSourceConnectionAnchor(";
  protected final String TEXT_219 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_220 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_221 = "  getTargetConnectionAnchor(";
  protected final String TEXT_222 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_223 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_224 = "  getTargetConnectionAnchor(";
  protected final String TEXT_225 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_226 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_227 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_228 = NL;
  protected final String TEXT_229 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_230 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_231 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_232 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_233 = NL;
  protected final String TEXT_234 = "\tpublic void addRefresher(";
  protected final String TEXT_235 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_236 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_237 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_238 = NL;
  protected final String TEXT_239 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_240 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_241 = ") ";
  protected final String TEXT_242 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_243 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_244 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_245 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_246 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_247 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_248 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_249 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_250 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_251 = " createdFont;" + NL;
  protected final String TEXT_252 = NL;
  protected final String TEXT_253 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_254 = " style = (";
  protected final String TEXT_255 = ")  ";
  protected final String TEXT_256 = ".getStyle(";
  protected final String TEXT_257 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_258 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_259 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_260 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_261 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_262 = " style = (";
  protected final String TEXT_263 = ")  ";
  protected final String TEXT_264 = ".getStyle(";
  protected final String TEXT_265 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_266 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_267 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_268 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_269 = " createdBackgroundColor;" + NL;
  protected final String TEXT_270 = NL;
  protected final String TEXT_271 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_272 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_273 = " feature, ";
  protected final String TEXT_274 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_275 = "();";
  protected final String TEXT_276 = NL;
  protected final String TEXT_277 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_278 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_279 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_280 = NL;
  protected final String TEXT_281 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_282 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_283 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_284 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_285 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_286 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_287 = NL;
  protected final String TEXT_288 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_289 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_290 = NL;
  protected final String TEXT_291 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_292 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_293 = NL;
  protected final String TEXT_294 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_295 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_296 = NL;
  protected final String TEXT_297 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_298 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_299 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_300 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_301 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
d324 47
a370 47
  protected final String TEXT_303 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_304 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_305 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_306 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_307 = "Command extends ";
  protected final String TEXT_308 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_309 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_310 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_311 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_312 = "Command(";
  protected final String TEXT_313 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_314 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_315 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_316 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_317 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (source == null || target == null) {" + NL + "\t\t\t\tcreatedEdge = null;" + NL + "\t\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_318 = ".INSTANCE;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_319 = ".eINSTANCE.createEdge();";
  protected final String TEXT_320 = NL + "\t\t\t";
  protected final String TEXT_321 = " createdDomainElement = ";
  protected final String TEXT_322 = ".eINSTANCE.create";
  protected final String TEXT_323 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_324 = NL + "\t\t\t";
  protected final String TEXT_325 = ".";
  protected final String TEXT_326 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_327 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
  protected final String TEXT_328 = NL + "\t\t\t";
  protected final String TEXT_329 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_330 = " domainModelEditDomain = ";
  protected final String TEXT_331 = ".getEditingDomain(source.getDiagram().getElement());";
  protected final String TEXT_332 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_333 = NL + "\t\t\t";
  protected final String TEXT_334 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_335 = ".eINSTANCE.get";
  protected final String TEXT_336 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_337 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_338 = ".eINSTANCE.get";
  protected final String TEXT_339 = "(), createdDomainElement));";
  protected final String TEXT_340 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_341 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_342 = ".eINSTANCE.get";
  protected final String TEXT_343 = "(), createdDomainElement));";
  protected final String TEXT_344 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_345 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_346 = ".eINSTANCE.get";
  protected final String TEXT_347 = "(), source.getElement()));";
  protected final String TEXT_348 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_349 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
d372 29
a400 17
  protected final String TEXT_351 = "(), target.getElement()));";
  protected final String TEXT_352 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_353 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_354 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_355 = ".eINSTANCE.get";
  protected final String TEXT_356 = "(), target.getElement());";
  protected final String TEXT_357 = NL + "\t\t}" + NL;
  protected final String TEXT_358 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_359 = " getRelationshipContainer(";
  protected final String TEXT_360 = " element, ";
  protected final String TEXT_361 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_362 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void redo() {" + NL + "\t\t\texecute();" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_363 = NL;
  protected final String TEXT_364 = NL;
  protected final String TEXT_365 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_366 = NL + "}";
  protected final String TEXT_367 = NL;
d883 12
a895 2
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d899 2
a901 2
    stringBuffer.append(TEXT_179);
    stringBuffer.append(importManager.getImportedName(((GenNodeLabel)innerLabels.get(0)).getEditPartQualifiedClassName()));
d903 2
d906 5
a910 1
    stringBuffer.append(TEXT_181);
d912 1
a912 1
    stringBuffer.append(TEXT_182);
d914 9
a922 1
    stringBuffer.append(TEXT_183);
d924 21
a944 1
    stringBuffer.append(TEXT_184);
d959 1
a959 1
    stringBuffer.append(TEXT_185);
d961 1
a961 1
    stringBuffer.append(TEXT_186);
d963 1
a963 1
    stringBuffer.append(TEXT_187);
d965 1
a965 1
    stringBuffer.append(TEXT_188);
d967 1
a967 1
    stringBuffer.append(TEXT_189);
d969 1
a969 1
    stringBuffer.append(TEXT_190);
d971 1
a971 1
    stringBuffer.append(TEXT_191);
d973 1
a973 1
    stringBuffer.append(TEXT_192);
d975 1
a975 1
    stringBuffer.append(TEXT_193);
d977 1
a977 1
    stringBuffer.append(TEXT_194);
d979 1
a979 1
    stringBuffer.append(TEXT_195);
d985 1
a985 1
    stringBuffer.append(TEXT_196);
d987 1
a987 1
    stringBuffer.append(TEXT_197);
d992 1
a992 1
    stringBuffer.append(TEXT_198);
d994 1
a994 1
    stringBuffer.append(TEXT_199);
d996 1
a996 1
    stringBuffer.append(TEXT_200);
d998 1
a998 1
    stringBuffer.append(TEXT_201);
d1000 1
a1000 1
    stringBuffer.append(TEXT_202);
d1004 1
a1004 1
    stringBuffer.append(TEXT_203);
d1006 1
a1006 1
    stringBuffer.append(TEXT_204);
d1011 1
a1011 1
    stringBuffer.append(TEXT_205);
d1013 1
a1013 1
    stringBuffer.append(TEXT_206);
d1015 1
a1015 1
    stringBuffer.append(TEXT_207);
d1017 1
a1017 1
    stringBuffer.append(TEXT_208);
d1019 1
a1019 1
    stringBuffer.append(TEXT_209);
d1021 1
a1021 1
    stringBuffer.append(TEXT_210);
d1023 1
a1023 1
    stringBuffer.append(TEXT_211);
d1025 1
a1025 1
    stringBuffer.append(TEXT_212);
d1027 1
a1027 1
    stringBuffer.append(TEXT_213);
d1029 1
a1029 1
    stringBuffer.append(TEXT_214);
d1031 1
a1031 1
    stringBuffer.append(TEXT_215);
d1033 1
a1033 1
    stringBuffer.append(TEXT_216);
d1035 1
a1035 1
    stringBuffer.append(TEXT_217);
d1037 1
a1037 1
    stringBuffer.append(TEXT_218);
d1039 1
a1039 1
    stringBuffer.append(TEXT_219);
d1041 1
a1041 1
    stringBuffer.append(TEXT_220);
d1043 1
a1043 1
    stringBuffer.append(TEXT_221);
d1045 1
a1045 1
    stringBuffer.append(TEXT_222);
d1047 1
a1047 1
    stringBuffer.append(TEXT_223);
d1049 1
a1049 1
    stringBuffer.append(TEXT_224);
d1051 1
a1051 1
    stringBuffer.append(TEXT_225);
d1053 1
a1053 1
    stringBuffer.append(TEXT_226);
a1054 21
    stringBuffer.append(TEXT_227);
    stringBuffer.append(TEXT_228);
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_232);
    stringBuffer.append(TEXT_233);
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_236);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_237);
    
	final String primaryView = "getDiagramNode()";

    stringBuffer.append(TEXT_238);
a1055 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a1056 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d1058 1
a1058 1
    stringBuffer.append(primaryView);
d1060 1
a1060 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1062 1
a1062 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
a1063 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
a1064 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1066 1
a1066 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1068 1
a1068 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1070 1
a1070 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d1072 3
a1074 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
a1075 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1077 1
d1079 1
d1081 1
a1081 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1083 1
a1083 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1085 1
a1085 1
    stringBuffer.append(primaryView);
d1087 1
a1087 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1089 1
a1089 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1091 1
a1091 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1093 1
a1093 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1095 1
a1095 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1097 1
a1097 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1099 1
a1099 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
a1100 1
    stringBuffer.append(primaryView);
a1101 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1103 1
a1103 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1105 1
a1105 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1107 1
a1107 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1109 2
a1111 1
    stringBuffer.append(TEXT_269);
d1113 1
d1115 1
a1115 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d1117 1
a1117 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d1119 1
a1119 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1121 1
a1121 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d1123 1
d1125 1
d1127 1
a1127 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1129 1
a1129 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1131 1
d1133 1
a1134 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1135 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1137 1
a1137 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1139 1
a1139 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1141 1
a1141 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1143 1
d1146 1
a1147 1
    stringBuffer.append(TEXT_289);
d1149 1
a1150 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1153 1
d1157 1
d1159 1
a1162 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1163 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1171 16
d1188 3
a1190 1
    stringBuffer.append(TEXT_305);
d1216 1
a1216 1
    stringBuffer.append(TEXT_306);
d1219 1
a1219 1
    stringBuffer.append(TEXT_307);
d1221 1
a1221 1
    stringBuffer.append(TEXT_308);
d1223 1
a1223 1
    stringBuffer.append(TEXT_309);
d1225 1
a1225 1
    stringBuffer.append(TEXT_310);
d1227 1
a1227 1
    stringBuffer.append(TEXT_311);
d1230 1
a1230 1
    stringBuffer.append(TEXT_312);
d1232 1
a1232 1
    stringBuffer.append(TEXT_313);
d1234 1
a1234 1
    stringBuffer.append(TEXT_314);
d1236 1
a1236 1
    stringBuffer.append(TEXT_315);
d1238 1
a1238 1
    stringBuffer.append(TEXT_316);
d1240 1
a1240 1
    stringBuffer.append(TEXT_317);
d1242 1
a1242 1
    stringBuffer.append(TEXT_318);
d1244 1
a1244 1
    stringBuffer.append(TEXT_319);
d1250 1
a1250 1
    stringBuffer.append(TEXT_320);
d1252 1
a1252 1
    stringBuffer.append(TEXT_321);
d1254 1
a1254 1
    stringBuffer.append(TEXT_322);
d1256 1
a1256 1
    stringBuffer.append(TEXT_323);
d1258 1
a1258 1
    stringBuffer.append(TEXT_324);
d1260 1
a1260 1
    stringBuffer.append(TEXT_325);
d1262 1
a1262 1
    stringBuffer.append(TEXT_326);
d1266 1
a1266 1
    stringBuffer.append(TEXT_327);
d1270 1
a1270 1
    stringBuffer.append(TEXT_328);
d1272 1
a1272 1
    stringBuffer.append(TEXT_329);
d1274 1
a1274 1
    stringBuffer.append(TEXT_330);
d1276 1
a1276 1
    stringBuffer.append(TEXT_331);
d1280 1
a1280 1
    stringBuffer.append(TEXT_332);
d1307 1
a1307 1
    stringBuffer.append(TEXT_333);
d1309 1
a1309 1
    stringBuffer.append(TEXT_334);
d1311 1
a1311 1
    stringBuffer.append(TEXT_335);
d1313 1
a1313 1
    stringBuffer.append(TEXT_336);
d1315 1
a1315 1
    stringBuffer.append(TEXT_337);
d1317 1
a1317 1
    stringBuffer.append(TEXT_338);
d1319 1
a1319 1
    stringBuffer.append(TEXT_339);
d1324 1
a1324 1
    stringBuffer.append(TEXT_340);
d1326 1
a1326 1
    stringBuffer.append(TEXT_341);
d1328 1
a1328 1
    stringBuffer.append(TEXT_342);
d1330 1
a1330 1
    stringBuffer.append(TEXT_343);
d1335 1
a1335 1
    stringBuffer.append(TEXT_344);
d1337 1
a1337 1
    stringBuffer.append(TEXT_345);
d1339 1
a1339 1
    stringBuffer.append(TEXT_346);
d1341 1
a1341 1
    stringBuffer.append(TEXT_347);
d1346 1
a1346 1
    stringBuffer.append(TEXT_348);
d1348 1
a1348 1
    stringBuffer.append(TEXT_349);
d1350 1
a1350 1
    stringBuffer.append(TEXT_350);
d1352 1
a1352 1
    stringBuffer.append(TEXT_351);
d1356 1
a1356 1
    stringBuffer.append(TEXT_352);
d1361 1
a1361 1
    stringBuffer.append(TEXT_353);
d1363 1
a1363 1
    stringBuffer.append(TEXT_354);
d1365 1
a1365 1
    stringBuffer.append(TEXT_355);
d1367 1
a1367 1
    stringBuffer.append(TEXT_356);
d1371 1
a1371 1
    stringBuffer.append(TEXT_357);
d1375 1
a1375 1
    stringBuffer.append(TEXT_358);
d1377 1
a1377 1
    stringBuffer.append(TEXT_359);
d1379 1
a1379 1
    stringBuffer.append(TEXT_360);
d1381 1
a1381 1
    stringBuffer.append(TEXT_361);
d1385 1
a1385 1
    stringBuffer.append(TEXT_362);
d1394 1
a1394 1
    stringBuffer.append(TEXT_363);
d1396 1
a1396 1
    stringBuffer.append(TEXT_364);
d1400 1
a1400 1
    stringBuffer.append(TEXT_365);
d1407 1
a1407 1
    stringBuffer.append(TEXT_366);
d1409 1
a1409 1
    stringBuffer.append(TEXT_367);
@


1.4
log
@hack no longer needed, cu's name is imported implicitly with importAssistant
@
text
@d44 31
a74 31
  protected final String TEXT_23 = " deleteRequest) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_24 = "() {";
  protected final String TEXT_25 = NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = getDomainModelRemoveCommand();" + NL + "\t\t\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_26 = " result = new ";
  protected final String TEXT_27 = "();";
  protected final String TEXT_28 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_29 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_30 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_31 = ".eINSTANCE.get";
  protected final String TEXT_32 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_33 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_34 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_35 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_36 = ".eINSTANCE.get";
  protected final String TEXT_37 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_38 = ".UNSET_VALUE));";
  protected final String TEXT_39 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_40 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_41 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_42 = ".eINSTANCE.get";
  protected final String TEXT_43 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_44 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_45 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_46 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_47 = ".eINSTANCE.get";
  protected final String TEXT_48 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_49 = ".UNSET_VALUE));";
  protected final String TEXT_50 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_51 = NL + "\t\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = ";
  protected final String TEXT_52 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_53 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
d76 31
a106 31
  protected final String TEXT_55 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_56 = NL + "\t\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = ";
  protected final String TEXT_57 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_58 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_59 = ".eINSTANCE.get";
  protected final String TEXT_60 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_61 = ".UNSET_VALUE);";
  protected final String TEXT_62 = NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command viewRemoveCommand = ";
  protected final String TEXT_63 = ".create(" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_64 = ".getEditingDomainFor(getDiagramNode().getDiagram()), " + NL + "\t\t\t\t\t\tgetDiagramNode());" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canExecute() && viewRemoveCommand != null && viewRemoveCommand.canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.execute();" + NL + "\t\t\t\t\t\tviewRemoveCommand.execute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canUndo() && viewRemoveCommand != null && viewRemoveCommand.canUndo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.undo();" + NL + "\t\t\t\t\t\tviewRemoveCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_65 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_66 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_67 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_68 = " getCreateCommand(";
  protected final String TEXT_69 = " request) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_70 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_71 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_72 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_73 = " createChangeConstraintCommand(";
  protected final String TEXT_74 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_75 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_76 = " createChildEditPolicy(";
  protected final String TEXT_77 = " child) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_78 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_79 = " getTargetEditPart(";
  protected final String TEXT_80 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_81 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_82 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_83 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_84 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_85 = " getReconnectTargetCommand(";
d109 43
a151 43
  protected final String TEXT_88 = " getReconnectSourceCommand(";
  protected final String TEXT_89 = " request) {" + NL + "\t\t\t\t//XXX: reconnect command" + NL + "\t\t\t\treturn ";
  protected final String TEXT_90 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_91 = " getConnectionCreateCommand(";
  protected final String TEXT_92 = " request) {";
  protected final String TEXT_93 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_94 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_95 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_96 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\tint matchingVisualIdsCount = 0;" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_97 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_98 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tmatchingVisualIdsCount++;" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_99 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (matchingVisualIdsCount != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_100 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_101 = " result = new ";
  protected final String TEXT_102 = "() {" + NL + "\t\t\t\t\t\t//XXX: check multiplicity requirements etc." + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t\trequest.setStartCommand(result);" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}";
  protected final String TEXT_103 = NL + "\t\t\t\treturn ";
  protected final String TEXT_104 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_105 = " getConnectionCompleteCommand(";
  protected final String TEXT_106 = " request) {";
  protected final String TEXT_107 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_108 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_109 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_110 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_111 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_112 = " result = new ";
  protected final String TEXT_113 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_114 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_115 = ".VISUAL_ID:" + NL + "\t\t\t\t\t\t\tresult.add(new Create";
  protected final String TEXT_116 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_117 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getChildren().length != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_118 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn result.unwrap();" + NL + "\t\t\t\t}";
  protected final String TEXT_119 = NL + "\t\t\t\treturn ";
  protected final String TEXT_120 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_121 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_122 = " invisibleRectangle = new ";
  protected final String TEXT_123 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_124 = "());" + NL + "\t\t";
  protected final String TEXT_125 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_126 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_127 = " createNodeShape() {";
  protected final String TEXT_128 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_129 = "()";
  protected final String TEXT_130 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
d153 232
a384 232
  protected final String TEXT_132 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_133 = ";";
  protected final String TEXT_134 = NL + "\t\t";
  protected final String TEXT_135 = " figure = new ";
  protected final String TEXT_136 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_137 = ");" + NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_138 = NL + "\t\treturn primaryShape;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_140 = " view = (";
  protected final String TEXT_141 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_142 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_143 = " decorationPane = new ";
  protected final String TEXT_144 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_145 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_146 = " imageFigure = new ";
  protected final String TEXT_147 = "(";
  protected final String TEXT_148 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_149 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_150 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_151 = " setupContentPane(";
  protected final String TEXT_152 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_153 = NL + "\t\t\t";
  protected final String TEXT_154 = " layout = new ";
  protected final String TEXT_155 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_156 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_157 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_158 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_159 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_160 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_161 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_162 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_163 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_164 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_165 = " childEditPart) {";
  protected final String TEXT_166 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_167 = ") {";
  protected final String TEXT_168 = NL + "\t\t\t((";
  protected final String TEXT_169 = ") childEditPart).setLabel(((";
  protected final String TEXT_170 = ") primaryShape).getFigure";
  protected final String TEXT_171 = "());";
  protected final String TEXT_172 = NL + "\t\t\t((";
  protected final String TEXT_173 = ") childEditPart).setLabel(new ";
  protected final String TEXT_174 = "());";
  protected final String TEXT_175 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_176 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_177 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_178 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_179 = " nextChild = (";
  protected final String TEXT_180 = ")it.next();" + NL + "\t\t\tif (";
  protected final String TEXT_181 = ".getVisualID(nextChild) == ";
  protected final String TEXT_182 = ".VISUAL_ID) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_183 = ") getViewer().getEditPartRegistry().get(nextChild);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_184 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_185 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\t";
  protected final String TEXT_186 = " primaryLabel = getPrimaryLabelEditPart();" + NL + "\t\t\tif (primaryLabel != null) {" + NL + "\t\t\t\tprimaryLabel.performRequest(req);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_187 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_188 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_189 = " labelFigure = ((";
  protected final String TEXT_190 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_191 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_192 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_193 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_194 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t";
  protected final String TEXT_195 = " labelFigure = ((";
  protected final String TEXT_196 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_197 = " childEditPart) {";
  protected final String TEXT_198 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_199 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_200 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_201 = " getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_202 = " root = (";
  protected final String TEXT_203 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_204 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_205 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_206 = " childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_207 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\trefreshBackgroundColor();" + NL + "\t\trefreshForegroundColor();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshVisibility();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisibility() {" + NL + "\t\tboolean isVisible = getDiagramNode().isVisible();" + NL + "\t\tboolean wasVisible = getFigure().isVisible();" + NL + "\t\tif (isVisible == wasVisible) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (!isVisible && (getSelected() != SELECTED_NONE)) {" + NL + "\t\t\tgetViewer().deselect(this);" + NL + "\t\t}" + NL + "" + NL + "\t\tgetFigure().setVisible(isVisible);" + NL + "\t\tgetFigure().revalidate();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\t";
  protected final String TEXT_208 = " node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof ";
  protected final String TEXT_209 = ";" + NL + "\t\t";
  protected final String TEXT_210 = " bounds = (";
  protected final String TEXT_211 = ") node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_212 = ") getParent()).setLayoutConstraint(this, getFigure(), " + NL + "\t\t\tnew ";
  protected final String TEXT_213 = "(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_214 = " getModelChildren() {" + NL + "\t\treturn getDiagramNode().getVisibleChildren();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_215 = " getModelSourceConnections() {" + NL + "\t\treturn getDiagramNode().getSourceEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_216 = " getModelTargetConnections() {" + NL + "\t\treturn getDiagramNode().getTargetEdges();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_217 = " getSourceConnectionAnchor(";
  protected final String TEXT_218 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_219 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_220 = " getSourceConnectionAnchor(";
  protected final String TEXT_221 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_222 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_223 = "  getTargetConnectionAnchor(";
  protected final String TEXT_224 = " connection) {" + NL + "\t\treturn new ";
  protected final String TEXT_225 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_226 = "  getTargetConnectionAnchor(";
  protected final String TEXT_227 = " request) {" + NL + "\t\treturn new ";
  protected final String TEXT_228 = "(getFigure());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class key) {";
  protected final String TEXT_229 = NL + "\t\treturn super.getAdapter(key);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\tgetDiagramNode().getElement().eAdapters().add(domainModelRefresher);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tgetDiagramNode().getElement().eAdapters().remove(domainModelRefresher);" + NL + "\t\tsuper.deactivate();" + NL + "\t}" + NL;
  protected final String TEXT_230 = NL;
  protected final String TEXT_231 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate DomainModelRefresher domainModelRefresher = new DomainModelRefresher();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class DomainModelRefresher extends ";
  protected final String TEXT_232 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void notifyChanged(";
  protected final String TEXT_233 = " msg) {" + NL + "\t\t\tsuper.notifyChanged(msg);" + NL + "\t\t\tif (msg.isTouch()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tRefresher refresher = getRefresher((";
  protected final String TEXT_234 = ") msg.getFeature(), msg);" + NL + "\t\t\tif (refresher != null) {" + NL + "\t\t\t\trefresher.refresh();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_235 = NL;
  protected final String TEXT_236 = "\tpublic void addRefresher(";
  protected final String TEXT_237 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.addRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tpublic void removeRefresher(";
  protected final String TEXT_238 = " feature, Refresher refresher) {" + NL + "\t\tCompositeRefresher compositeRefresher = getCompositeRefresher(feature);" + NL + "\t\tcompositeRefresher.removeRefresher(refresher);" + NL + "\t}" + NL + "" + NL + "\tprivate CompositeRefresher getCompositeRefresher(";
  protected final String TEXT_239 = " feature) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\tRefresher refresher = (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t\tif (refresher instanceof CompositeRefresher) {" + NL + "\t\t\treturn (CompositeRefresher) refresher;" + NL + "\t\t}" + NL + "\t\tCompositeRefresher result = new CompositeRefresher();" + NL + "\t\tif (refresher != null) {" + NL + "\t\t\tresult.addRefresher(refresher);" + NL + "\t\t}" + NL + "\t\tstructuralFeatures2Refresher.put(feature, result);" + NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_242 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_243 = ") ";
  protected final String TEXT_244 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_245 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_246 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_247 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_248 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_249 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_250 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_251 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_252 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_253 = " createdFont;" + NL;
  protected final String TEXT_254 = NL;
  protected final String TEXT_255 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshForegroundColor() {" + NL + "\t\t";
  protected final String TEXT_256 = " style = (";
  protected final String TEXT_257 = ")  ";
  protected final String TEXT_258 = ".getStyle(";
  protected final String TEXT_259 = ".eINSTANCE.getLineStyle());" + NL + "\t\t";
  protected final String TEXT_260 = " toDispose = createdForegroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint foregroundColor = style.getLineColor();" + NL + "\t\t\tint red = foregroundColor & 0x000000FF;" + NL + "\t\t\tint green = (foregroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (foregroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_261 = " currentColor = getFigure().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedForegroundColor = new ";
  protected final String TEXT_262 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdForegroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedForegroundColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshForegroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_263 = " createdForegroundColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBackgroundColor() {" + NL + "\t\t";
  protected final String TEXT_264 = " style = (";
  protected final String TEXT_265 = ")  ";
  protected final String TEXT_266 = ".getStyle(";
  protected final String TEXT_267 = ".eINSTANCE.getFillStyle());" + NL + "\t\t";
  protected final String TEXT_268 = " toDispose = createdBackgroundColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint backgroundColor = style.getFillColor();" + NL + "\t\t\tint red = backgroundColor & 0x000000FF;" + NL + "\t\t\tint green = (backgroundColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (backgroundColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_269 = " currentColor = getFigure().getBackgroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedBackgroundColor = new ";
  protected final String TEXT_270 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setBackgroundColor(createdBackgroundColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setBackgroundColor(getViewer().getControl().getBackground());" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshBackgroundColor()}) currently assigned to the figure." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_271 = " createdBackgroundColor;" + NL;
  protected final String TEXT_272 = NL;
  protected final String TEXT_273 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_274 = " structuralFeatures2Refresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Refresher getRefresher(";
  protected final String TEXT_275 = " feature, ";
  protected final String TEXT_276 = " msg) {" + NL + "\t\tif (structuralFeatures2Refresher == null) {" + NL + "\t\t\tcreateRefreshers();" + NL + "\t\t}" + NL + "\t\treturn (Refresher) structuralFeatures2Refresher.get(feature);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createRefreshers() {" + NL + "\t\tstructuralFeatures2Refresher = new ";
  protected final String TEXT_277 = "();";
  protected final String TEXT_278 = NL;
  protected final String TEXT_279 = "\t\tRefresher childrenRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshChildren();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_280 = ".eINSTANCE.getView_PersistedChildren(), childrenRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_281 = ".eINSTANCE.getView_TransientChildren(), childrenRefresher);";
  protected final String TEXT_282 = NL;
  protected final String TEXT_283 = "\t\tRefresher boundsRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBounds();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_284 = ".eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_285 = ".eINSTANCE.getSize_Width(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_286 = ".eINSTANCE.getSize_Height(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_287 = ".eINSTANCE.getLocation_X(), boundsRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_288 = ".eINSTANCE.getLocation_Y(), boundsRefresher);";
  protected final String TEXT_289 = NL;
  protected final String TEXT_290 = "\t\tRefresher visibilityRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshVisibility();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_291 = ".eINSTANCE.getView_Visible(), visibilityRefresher);";
  protected final String TEXT_292 = NL;
  protected final String TEXT_293 = "\t\tRefresher sourceEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshSourceConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_294 = ".eINSTANCE.getView_SourceEdges(), sourceEdgesRefresher);";
  protected final String TEXT_295 = NL;
  protected final String TEXT_296 = "\t\tRefresher targetEdgesRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshTargetConnections();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_297 = ".eINSTANCE.getView_TargetEdges(), targetEdgesRefresher);";
  protected final String TEXT_298 = NL;
  protected final String TEXT_299 = "\t\tRefresher fontRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshFont();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_300 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_301 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_302 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_303 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t";
  protected final String TEXT_304 = NL;
  protected final String TEXT_305 = "\t\tRefresher backgroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshBackgroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_306 = ".eINSTANCE.getFillStyle_FillColor(), backgroundColorRefresher);" + NL + "\t\tRefresher foregroundColorRefresher = new Refresher() {" + NL + "\t\t\tpublic void refresh() {" + NL + "\t\t\t\trefreshForegroundColor();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tstructuralFeatures2Refresher.put(";
  protected final String TEXT_307 = ".eINSTANCE.getLineStyle_LineColor(), foregroundColorRefresher);" + NL + "\t}" + NL;
  protected final String TEXT_308 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_309 = "Command extends ";
  protected final String TEXT_310 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_311 = " source;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_312 = " target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final ";
  protected final String TEXT_313 = " createdEdge;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final org.eclipse.emf.common.command.Command domainModelAddCommand;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_314 = "Command(";
  protected final String TEXT_315 = ".CreateConnectionRequestEx requestEx) {" + NL + "\t\t\tif (requestEx.getSourceEditPart().getModel() instanceof ";
  protected final String TEXT_316 = ") {" + NL + "\t\t\t\tsource = (";
  protected final String TEXT_317 = ")requestEx.getSourceEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsource = null;" + NL + "\t\t\t}" + NL + "\t\t\tif (requestEx.getTargetEditPart().getModel() instanceof ";
  protected final String TEXT_318 = ") {" + NL + "\t\t\t\ttarget = (";
  protected final String TEXT_319 = ")requestEx.getTargetEditPart().getModel();" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttarget = null;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedEdge = ";
  protected final String TEXT_320 = ".eINSTANCE.createEdge();";
  protected final String TEXT_321 = NL + "\t\t\t";
  protected final String TEXT_322 = " createdDomainElement = ";
  protected final String TEXT_323 = ".eINSTANCE.create";
  protected final String TEXT_324 = "();" + NL + "\t\t\tcreatedEdge.setElement(createdDomainElement);" + NL + "\t\t\t";
  protected final String TEXT_325 = NL + "\t\t\t";
  protected final String TEXT_326 = ".";
  protected final String TEXT_327 = ".initializeElement(createdDomainElement);";
  protected final String TEXT_328 = NL + "\t\t\tcreatedEdge.setElement(target.getElement());\t\t//XXX: is this correct?";
  protected final String TEXT_329 = NL + "\t\t\t";
  protected final String TEXT_330 = ".decorateView(createdEdge);" + NL + "\t\t\t";
  protected final String TEXT_331 = " domainModelEditDomain = ";
  protected final String TEXT_332 = ".getEditingDomainFor(source.getDiagram().getElement());";
  protected final String TEXT_333 = NL + "\t\t\torg.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();";
  protected final String TEXT_334 = NL + "\t\t\t";
  protected final String TEXT_335 = " container = getRelationshipContainer(source.getElement(), ";
  protected final String TEXT_336 = ".eINSTANCE.get";
  protected final String TEXT_337 = "());" + NL + "\t\t\tif (container == null) {" + NL + "\t\t\t\tdomainModelAddCommand = null;" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_338 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_339 = ".eINSTANCE.get";
  protected final String TEXT_340 = "(), createdDomainElement));";
  protected final String TEXT_341 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_342 = ".create(domainModelEditDomain," + NL + "\t\t\t\tcontainer, ";
  protected final String TEXT_343 = ".eINSTANCE.get";
  protected final String TEXT_344 = "(), createdDomainElement));";
  protected final String TEXT_345 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_346 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_347 = ".eINSTANCE.get";
  protected final String TEXT_348 = "(), source.getElement()));";
  protected final String TEXT_349 = NL + "\t\t\taddLinkEndsCommand.append(";
  protected final String TEXT_350 = ".create(domainModelEditDomain, " + NL + "\t\t\t\tcreatedDomainElement, ";
  protected final String TEXT_351 = ".eINSTANCE.get";
  protected final String TEXT_352 = "(), target.getElement()));";
  protected final String TEXT_353 = NL + "\t\tdomainModelAddCommand = addLinkEndsCommand;";
  protected final String TEXT_354 = NL + "\t\t\tdomainModelAddCommand = ";
  protected final String TEXT_355 = ".create(domainModelEditDomain, source.getElement(), " + NL + "\t\t\t\t";
  protected final String TEXT_356 = ".eINSTANCE.get";
  protected final String TEXT_357 = "(), target.getElement());";
  protected final String TEXT_358 = NL + "\t\t}" + NL;
  protected final String TEXT_359 = NL + "\t\t/**" + NL + "\t\t * Finds container element for the new relationship of the specified type." + NL + "\t\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t\t * the specified element and returns the first element that is instance of" + NL + "\t\t * the specified container class." + NL + "\t\t * " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_360 = " getRelationshipContainer(";
  protected final String TEXT_361 = " element, ";
  protected final String TEXT_362 = " containerClass) {" + NL + "\t\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\t\treturn element;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_363 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canExecute();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canUndo() {" + NL + "\t\t\treturn source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void execute() {" + NL + "\t\t\tdomainModelAddCommand.execute();" + NL + "\t\t\tsource.getDiagram().insertEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(source);" + NL + "\t\t\tcreatedEdge.setTarget(target);" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void undo() {" + NL + "\t\t\tdomainModelAddCommand.undo();" + NL + "\t\t\tsource.getDiagram().removeEdge(createdEdge);" + NL + "\t\t\tcreatedEdge.setSource(null);" + NL + "\t\t\tcreatedEdge.setTarget(null);" + NL + "\t\t}" + NL + "\t}";
d386 3
a388 4
  protected final String TEXT_365 = NL;
  protected final String TEXT_366 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_367 = NL + "}";
  protected final String TEXT_368 = NL;
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d451 10
d468 1
a468 1
    stringBuffer.append(TEXT_25);
d470 1
a470 1
    stringBuffer.append(TEXT_26);
d472 1
a472 1
    stringBuffer.append(TEXT_27);
d476 1
a476 1
    stringBuffer.append(TEXT_28);
d478 1
a478 3
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_30);
d480 1
a480 1
    stringBuffer.append(TEXT_31);
d482 1
a482 1
    stringBuffer.append(TEXT_32);
d486 1
a486 1
    stringBuffer.append(TEXT_33);
d488 1
a488 3
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_35);
d490 1
a490 1
    stringBuffer.append(TEXT_36);
d492 1
a492 1
    stringBuffer.append(TEXT_37);
d494 1
a494 1
    stringBuffer.append(TEXT_38);
d501 1
a501 1
    stringBuffer.append(TEXT_39);
d503 1
a503 3
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_41);
d505 1
a505 1
    stringBuffer.append(TEXT_42);
d507 1
a507 1
    stringBuffer.append(TEXT_43);
d511 1
a511 1
    stringBuffer.append(TEXT_44);
d513 1
a513 3
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_46);
d515 1
a515 1
    stringBuffer.append(TEXT_47);
d517 1
a517 1
    stringBuffer.append(TEXT_48);
d519 1
a519 1
    stringBuffer.append(TEXT_49);
d523 1
a523 1
    stringBuffer.append(TEXT_50);
d528 1
a528 1
    stringBuffer.append(TEXT_51);
a529 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d541 1
a541 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d543 1
a543 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d545 1
a545 1
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
a546 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_61);
d551 4
d556 1
a556 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d560 1
a560 3
    
}	/*restrict local vars used in component edit policy*/

d562 1
a562 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy"));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
d570 1
a570 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d572 1
a572 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d576 1
a576 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d580 1
a580 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d582 1
a582 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d584 1
a584 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d594 1
a594 1
    stringBuffer.append(genNode.getEditPartClassName());
d596 1
a596 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d598 1
a598 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.GraphicalNodeEditPolicy"));
d608 1
a608 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest"));
d610 1
a610 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d612 1
a612 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
d616 1
a616 1
    if (palette != null) {
a617 6
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_96);
d640 1
a640 1
    stringBuffer.append(TEXT_97);
d642 1
a642 1
    stringBuffer.append(TEXT_98);
d646 6
d653 2
a655 2
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d659 1
a659 1
    }/*when there's palette*/
d661 2
a663 2
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d665 1
a665 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
d667 1
a667 1
    if (palette != null) {
d669 1
a669 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d671 1
a671 1
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
d673 1
a673 1
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
a674 6
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand"));
    stringBuffer.append(TEXT_113);
d698 1
a698 1
    stringBuffer.append(TEXT_114);
d700 1
a700 1
    stringBuffer.append(TEXT_115);
d703 1
a703 1
    stringBuffer.append(TEXT_116);
d707 6
d716 1
a716 1
    }/*when there's palette*/
d718 1
a718 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d720 1
a720 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d722 2
a724 2
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
d726 1
a726 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.StackLayout"));
a729 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_127);
d739 1
a739 1
    stringBuffer.append(TEXT_128);
d741 1
a741 1
    stringBuffer.append(TEXT_129);
d743 1
a743 1
    stringBuffer.append(TEXT_130);
d745 1
a745 1
    stringBuffer.append(TEXT_131);
d747 1
a747 1
    stringBuffer.append(TEXT_132);
d749 1
a749 1
    stringBuffer.append(TEXT_133);
d753 1
a753 1
    stringBuffer.append(TEXT_134);
d755 1
a755 1
    stringBuffer.append(TEXT_135);
d757 1
a757 1
    stringBuffer.append(TEXT_136);
d759 1
a759 1
    stringBuffer.append(TEXT_137);
d761 1
a761 1
    stringBuffer.append(TEXT_138);
d763 1
a763 1
    stringBuffer.append(TEXT_139);
d765 1
a765 1
    stringBuffer.append(TEXT_140);
d767 1
a767 1
    stringBuffer.append(TEXT_141);
d769 1
a769 1
    stringBuffer.append(TEXT_142);
d771 1
a771 1
    stringBuffer.append(TEXT_143);
d773 1
a773 1
    stringBuffer.append(TEXT_144);
d775 1
a775 1
    stringBuffer.append(TEXT_145);
d777 1
a777 1
    stringBuffer.append(TEXT_146);
d779 1
a779 1
    stringBuffer.append(TEXT_147);
d781 1
a781 1
    stringBuffer.append(TEXT_148);
d783 1
a783 1
    stringBuffer.append(TEXT_149);
d785 1
a785 1
    stringBuffer.append(TEXT_150);
d787 1
a787 1
    stringBuffer.append(TEXT_151);
d789 1
a789 1
    stringBuffer.append(TEXT_152);
d794 1
a794 1
    stringBuffer.append(TEXT_153);
d796 1
a796 1
    stringBuffer.append(TEXT_154);
d798 1
a798 1
    stringBuffer.append(TEXT_155);
d800 1
a800 1
    stringBuffer.append(TEXT_156);
d802 1
a802 1
    stringBuffer.append(TEXT_157);
d804 1
a804 1
    stringBuffer.append(TEXT_158);
d806 1
a806 1
    stringBuffer.append(TEXT_159);
d808 1
a808 1
    stringBuffer.append(TEXT_160);
d810 1
a810 1
    stringBuffer.append(TEXT_161);
d812 1
a812 1
    stringBuffer.append(TEXT_162);
d814 1
a814 1
    stringBuffer.append(TEXT_163);
d827 1
a827 1
    stringBuffer.append(TEXT_164);
d829 1
a829 1
    stringBuffer.append(TEXT_165);
d848 4
d855 1
a855 1
    			if (isAccessor) {
d857 1
a857 1
    stringBuffer.append(labelEditPart);
d859 1
a859 1
    stringBuffer.append(figureQualifiedClassName);
d861 2
a863 2
    stringBuffer.append(TEXT_171);
    			} else {
d865 1
a865 1
    stringBuffer.append(labelEditPart);
d867 1
a867 1
    stringBuffer.append(labelFigureClassName);
d869 1
a869 1
    			}
d871 1
a871 1
    		}
d873 1
a873 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d875 1
a875 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d877 1
a877 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d879 1
a879 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d881 1
a881 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d883 1
a883 1
    stringBuffer.append(importManager.getImportedName(((GenNodeLabel)innerLabels.get(0)).getEditPartQualifiedClassName()));
d885 2
a887 2
    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
a888 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_186);
d903 1
a903 1
    stringBuffer.append(TEXT_187);
d905 1
a905 1
    stringBuffer.append(TEXT_188);
d907 1
a907 1
    stringBuffer.append(TEXT_189);
d909 1
a909 1
    stringBuffer.append(TEXT_190);
d911 1
a911 1
    stringBuffer.append(TEXT_191);
d913 1
a913 1
    stringBuffer.append(TEXT_192);
d915 1
a915 1
    stringBuffer.append(TEXT_193);
d917 1
a917 1
    stringBuffer.append(TEXT_194);
d919 1
a919 1
    stringBuffer.append(TEXT_195);
d921 1
a921 1
    stringBuffer.append(TEXT_196);
d923 1
a923 1
    stringBuffer.append(TEXT_197);
d929 1
a929 1
    stringBuffer.append(TEXT_198);
d931 1
a931 1
    stringBuffer.append(TEXT_199);
d936 1
a936 1
    stringBuffer.append(TEXT_200);
d938 1
a938 1
    stringBuffer.append(TEXT_201);
d940 1
a940 1
    stringBuffer.append(TEXT_202);
d942 1
a942 1
    stringBuffer.append(TEXT_203);
d944 1
a944 1
    stringBuffer.append(TEXT_204);
d948 1
a948 1
    stringBuffer.append(TEXT_205);
d950 1
a950 1
    stringBuffer.append(TEXT_206);
d955 4
d960 1
a960 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d964 1
a964 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d966 1
a966 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds"));
d968 1
a968 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d970 1
a970 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d974 1
a974 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d976 1
a976 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d978 2
a980 2
    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d982 2
d985 1
a985 1
    stringBuffer.append(TEXT_219);
a986 2
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d988 2
d991 1
a991 1
    stringBuffer.append(TEXT_222);
a992 2
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ConnectionEditPart"));
d994 2
a996 2
    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor"));
d998 1
a998 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
a999 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor"));
a1000 1
    /*@@ include file="adapters/propertySource.javajetinc"*/
d1002 1
d1004 1
d1006 1
a1006 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.impl.AdapterImpl"));
a1007 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d1009 1
a1010 1
    stringBuffer.append(TEXT_234);
d1012 1
a1015 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_239);
d1019 3
d1023 1
d1025 1
a1025 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d1027 1
a1027 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d1029 1
a1029 1
    stringBuffer.append(primaryView);
d1031 1
a1031 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1033 1
a1033 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1037 1
a1037 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1039 1
a1039 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1043 1
a1043 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
a1044 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
a1045 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d1047 1
d1049 1
d1051 1
a1051 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1053 1
a1053 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LineStyle"));
d1055 1
a1055 1
    stringBuffer.append(primaryView);
d1057 1
a1057 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1063 1
a1063 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1065 1
a1065 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1067 1
a1067 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1069 1
a1069 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FillStyle"));
d1071 1
a1071 1
    stringBuffer.append(primaryView);
d1073 1
a1073 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a1078 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
a1079 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d1081 1
d1083 1
d1085 2
a1087 2
    stringBuffer.append(TEXT_274);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a1088 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
a1089 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d1091 1
d1093 1
a1094 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1096 1
a1097 1
    stringBuffer.append(TEXT_281);
d1099 1
a1106 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1108 1
a1109 1
    stringBuffer.append(TEXT_288);
d1112 1
a1113 1
    stringBuffer.append(TEXT_291);
d1116 1
a1117 1
    stringBuffer.append(TEXT_294);
d1120 1
a1121 1
    stringBuffer.append(TEXT_297);
d1123 1
a1128 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d1130 1
a1131 1
    stringBuffer.append(TEXT_303);
d1133 1
a1134 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_306);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_307);
d1160 1
a1160 1
    stringBuffer.append(TEXT_308);
d1163 4
d1168 1
a1168 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d1170 1
a1170 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1172 2
a1173 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1175 1
a1175 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d1177 1
a1177 2
    stringBuffer.append(createCommandNameInfix);
    stringBuffer.append(genLink.getVisualID());
d1179 1
a1179 1
    stringBuffer.append(importManager.getImportedName(palette.getFactoryQualifiedClassName()));
d1185 1
a1185 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1187 1
a1187 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1188 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_320);
d1194 2
d1197 1
a1197 1
    stringBuffer.append(importManager.getImportedName(importManager.getImportedName(linkClass.getQualifiedInterfaceName())));
d1199 1
a1199 1
    stringBuffer.append(importManager.getImportedName(linkClass.getGenPackage().getQualifiedFactoryInterfaceName()));
d1201 1
a1201 1
    stringBuffer.append(linkClass.getClassifierAccessorName());
d1203 1
a1203 1
    /*XXX: Class name DomainElementInitializer should be user-customizable*/
d1205 1
a1205 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer"));
a1206 2
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_327);
d1210 1
a1210 1
    stringBuffer.append(TEXT_328);
d1214 2
d1217 1
a1217 1
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
d1219 1
a1219 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain"));
a1220 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_332);
d1224 1
a1224 1
    stringBuffer.append(TEXT_333);
d1251 2
d1254 1
a1254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1256 1
a1256 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName()));
d1258 1
a1258 1
    stringBuffer.append(containmentFeature.getGenClass().getClassifierAccessorName());
d1260 1
a1260 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1262 1
a1262 1
    stringBuffer.append(importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a1263 2
    stringBuffer.append(containmentFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_340);
d1268 2
d1271 1
a1271 1
    stringBuffer.append(importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1273 1
a1273 1
    stringBuffer.append(importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a1274 2
    stringBuffer.append(childFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_344);
d1279 2
d1282 1
a1282 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1284 1
a1284 1
    stringBuffer.append(importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a1285 2
    stringBuffer.append(sourceFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_348);
d1290 2
d1293 1
a1293 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1295 1
a1295 1
    stringBuffer.append(importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a1296 2
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_352);
d1300 1
a1300 1
    stringBuffer.append(TEXT_353);
d1305 2
d1308 1
a1308 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getEcoreFeature().isMany()? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand"));
d1310 1
a1310 1
    stringBuffer.append(importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a1311 2
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_357);
d1315 1
a1315 1
    stringBuffer.append(TEXT_358);
d1319 2
d1324 1
a1324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a1325 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_362);
d1329 1
a1329 1
    stringBuffer.append(TEXT_363);
d1338 2
a1340 2
    stringBuffer.append(classBody);
    stringBuffer.append(TEXT_365);
d1344 1
a1344 1
    stringBuffer.append(TEXT_366);
d1351 2
a1353 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_368);
@


1.3
log
@Made compilable with  #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@a412 2
/*XXX: temporary hack to generate compilable code in tests (where class NodeEditPart extends NodeEditPart is generated otherwise)*/
importManager.registerInnerClass(genNode.getEditPartClassName());
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d6 1
d398 1
a398 1
boolean useFlowLayout = !genNode.isListLayout();
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d28 160
a187 160
  protected final String TEXT_8 = ", IUpdatableEditPart {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_9 = " contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_10 = " primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_11 = "(";
  protected final String TEXT_12 = " model) {" + NL + "\t\tassert model instanceof ";
  protected final String TEXT_13 = ";" + NL + "\t\tsetModel(model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = "\t\tinstallEditPolicy(";
  protected final String TEXT_16 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_17 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_18 = " createDeleteCommand(";
  protected final String TEXT_19 = " deleteRequest) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_20 = "() {";
  protected final String TEXT_21 = NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = getDomainModelRemoveCommand();" + NL + "\t\t\t\t\tprivate org.eclipse.emf.common.command.Command getDomainModelRemoveCommand() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_22 = " result = new ";
  protected final String TEXT_23 = "();";
  protected final String TEXT_24 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_25 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_26 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_27 = ".eINSTANCE.get";
  protected final String TEXT_28 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_29 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_30 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_31 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_32 = ".eINSTANCE.get";
  protected final String TEXT_33 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_34 = ".UNSET_VALUE));";
  protected final String TEXT_35 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_36 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_37 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement()));";
  protected final String TEXT_40 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_41 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_42 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_43 = ".eINSTANCE.get";
  protected final String TEXT_44 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_45 = ".UNSET_VALUE));";
  protected final String TEXT_46 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_47 = NL + "\t\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = ";
  protected final String TEXT_48 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_49 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "()," + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement());";
  protected final String TEXT_52 = NL + "\t\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command domainModelRemoveCommand = ";
  protected final String TEXT_53 = ".create(" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_54 = ".getEditingDomainFor(getDiagramNode().getDiagram().getElement()), " + NL + "\t\t\t\t\t\t\tgetDiagramNode().getElement().eContainer(), ";
  protected final String TEXT_55 = ".eINSTANCE.get";
  protected final String TEXT_56 = "()," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_57 = ".UNSET_VALUE);";
  protected final String TEXT_58 = NL + "\t\t\t\t\tprivate final org.eclipse.emf.common.command.Command viewRemoveCommand = ";
  protected final String TEXT_59 = ".create(" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_60 = ".getEditingDomainFor(getDiagramNode().getDiagram()), " + NL + "\t\t\t\t\t\tgetDiagramNode());" + NL + "\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canExecute() && viewRemoveCommand != null && viewRemoveCommand.canExecute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.execute();" + NL + "\t\t\t\t\t\tviewRemoveCommand.execute();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\treturn domainModelRemoveCommand != null && domainModelRemoveCommand.canUndo() && viewRemoveCommand != null && viewRemoveCommand.canUndo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\tdomainModelRemoveCommand.undo();" + NL + "\t\t\t\t\t\tviewRemoveCommand.undo();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_61 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_62 = ".LAYOUT_ROLE, new ";
  protected final String TEXT_63 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_64 = " getCreateCommand(";
  protected final String TEXT_65 = " request) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_66 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_67 = " rect) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected Object getConstraintFor(";
  protected final String TEXT_68 = " point) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_69 = " createChangeConstraintCommand(";
  protected final String TEXT_70 = " child, Object constraint) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_71 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_72 = " createChildEditPolicy(";
  protected final String TEXT_73 = " child) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_74 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_75 = " getTargetEditPart(";
  protected final String TEXT_76 = " request) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_77 = ".REQ_SELECTION.equals(request.getType())) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_78 = ".this;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getTargetEditPart(request);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_79 = ".GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_80 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_81 = " getReconnectTargetCommand(";
  protected final String TEXT_82 = " request) {" + NL + "\t\t\t\t//XXX: reconnect command" + NL + "\t\t\t\treturn ";
  protected final String TEXT_83 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_84 = " getReconnectSourceCommand(";
  protected final String TEXT_85 = " request) {" + NL + "\t\t\t\t//XXX: reconnect command" + NL + "\t\t\t\treturn ";
  protected final String TEXT_86 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_87 = " getConnectionCreateCommand(";
  protected final String TEXT_88 = " request) {";
  protected final String TEXT_89 = NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_90 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_91 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_92 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\tint matchingVisualIdsCount = 0;" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_93 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_94 = ":" + NL + "\t\t\t\t\t\t\tmatchingVisualIdsCount++;" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_95 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (matchingVisualIdsCount != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_96 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_97 = " result = new ";
  protected final String TEXT_98 = "() {" + NL + "\t\t\t\t\t\t//XXX: check multiplicity requirements etc." + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t\trequest.setStartCommand(result);" + NL + "\t\t\t\t\treturn result;" + NL + "\t\t\t\t}";
  protected final String TEXT_99 = NL + "\t\t\t\treturn ";
  protected final String TEXT_100 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\tprotected ";
  protected final String TEXT_101 = " getConnectionCompleteCommand(";
  protected final String TEXT_102 = " request) {";
  protected final String TEXT_103 = NL + "\t\t\t\tif (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_104 = ".INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (request instanceof ";
  protected final String TEXT_105 = ".CreateConnectionRequestEx) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_106 = ".CreateConnectionRequestEx requestEx = (";
  protected final String TEXT_107 = ".CreateConnectionRequestEx) request;" + NL + "\t\t\t\t\tint[] visualIds = requestEx.getVisualIds();" + NL + "\t\t\t\t\t";
  protected final String TEXT_108 = " result = new ";
  protected final String TEXT_109 = "();" + NL + "\t\t\t\t\tfor (int i = 0; i < visualIds.length; i++) {" + NL + "\t\t\t\t\t\tint nextVisualId = visualIds[i];" + NL + "\t\t\t\t\t\tswitch (nextVisualId) {";
  protected final String TEXT_110 = NL + "\t\t\t\t\t\tcase ";
  protected final String TEXT_111 = ":" + NL + "\t\t\t\t\t\t\tresult.add(new Create";
  protected final String TEXT_112 = "Command(requestEx));" + NL + "\t\t\t\t\t\t\tbreak;";
  protected final String TEXT_113 = NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (result.getChildren().length != 1) {" + NL + "\t\t\t\t\t\t//Cannot create several connections at once." + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_114 = ".INSTANCE;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn result.unwrap();" + NL + "\t\t\t\t}";
  protected final String TEXT_115 = NL + "\t\t\t\treturn ";
  protected final String TEXT_116 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_117 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_118 = " invisibleRectangle = new ";
  protected final String TEXT_119 = "();" + NL + "\t\tinvisibleRectangle.setLayoutManager(new ";
  protected final String TEXT_120 = "());" + NL + "\t\t";
  protected final String TEXT_121 = " shape = createNodeShape();" + NL + "\t\tinvisibleRectangle.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_122 = " decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tinvisibleRectangle.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn invisibleRectangle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_123 = " createNodeShape() {";
  protected final String TEXT_124 = NL + "\t\tprimaryShape = new ";
  protected final String TEXT_125 = "()";
  protected final String TEXT_126 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_127 = ";";
  protected final String TEXT_128 = NL + "\t\tprimaryShape = ";
  protected final String TEXT_129 = ";";
  protected final String TEXT_130 = NL + "\t\t";
  protected final String TEXT_131 = " figure = new ";
  protected final String TEXT_132 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_133 = ");" + NL + " \t\tprimaryShape = figure;";
  protected final String TEXT_134 = NL + "\t\treturn primaryShape;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_135 = " createDecorationPane() {" + NL + "\t\t";
  protected final String TEXT_136 = " view = (";
  protected final String TEXT_137 = ") getModel();" + NL + "\t\t";
  protected final String TEXT_138 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_139 = " decorationPane = new ";
  protected final String TEXT_140 = "();" + NL + "\t\tdecorationPane.setLayoutManager(new ";
  protected final String TEXT_141 = "());" + NL + "" + NL + "\t\t";
  protected final String TEXT_142 = " imageFigure = new ";
  protected final String TEXT_143 = "(";
  protected final String TEXT_144 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), ";
  protected final String TEXT_145 = ".EAST);" + NL + "\t\tdecorationPane.add(imageFigure, ";
  protected final String TEXT_146 = ".BOTTOM);" + NL + " \t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_147 = " setupContentPane(";
  protected final String TEXT_148 = " nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_149 = NL + "\t\t\t";
  protected final String TEXT_150 = " layout = new ";
  protected final String TEXT_151 = "();" + NL + "\t\t\tlayout.setSpacing(5);" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_152 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_153 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(";
  protected final String TEXT_154 = " figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_155 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_156 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_157 = " getContentPane() {" + NL + "\t\tif (contentPane == null) {" + NL + "\t\t\treturn super.getContentPane();" + NL + "\t\t}" + NL + "\t\treturn contentPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_158 = " getDiagramNode() {" + NL + "\t\treturn (";
  protected final String TEXT_159 = ") getModel();" + NL + "\t}" + NL;
  protected final String TEXT_160 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(";
  protected final String TEXT_161 = " childEditPart) {";
  protected final String TEXT_162 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_163 = ") {";
  protected final String TEXT_164 = NL + "\t\t\t((";
  protected final String TEXT_165 = ") childEditPart).setLabel(((";
  protected final String TEXT_166 = ") primaryShape).getFigure";
  protected final String TEXT_167 = "());";
d189 14
a202 14
  protected final String TEXT_169 = ") childEditPart).setLabel(new ";
  protected final String TEXT_170 = "());";
  protected final String TEXT_171 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_172 = NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_173 = NL;
  protected final String TEXT_174 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(";
  protected final String TEXT_175 = " containerView) {" + NL + "\t\t";
  protected final String TEXT_176 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_177 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the label which should be direct-edited by default." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_178 = " getPrimaryLabelEditPart() {" + NL + "\t\tfor(";
  protected final String TEXT_179 = " it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {" + NL + "\t\t\t";
  protected final String TEXT_180 = " nextChild = (";
  protected final String TEXT_181 = ")it.next();" + NL + "\t\t\tif (getVisualID(nextChild) == ";
  protected final String TEXT_182 = ") {" + NL + "\t\t\t\treturn (";
d423 2
a424 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d427 1
a427 1
    stringBuffer.append(genNode.getEditPartClassName());
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d433 1
d435 1
d437 6
d444 1
a444 1
    stringBuffer.append(TEXT_16);
d446 1
a446 1
    stringBuffer.append(TEXT_17);
d448 1
a448 1
    stringBuffer.append(TEXT_18);
d450 1
a450 1
    stringBuffer.append(TEXT_19);
d452 1
a452 1
    stringBuffer.append(TEXT_20);
d460 1
a460 1
    stringBuffer.append(TEXT_21);
d462 1
a462 1
    stringBuffer.append(TEXT_22);
d464 1
a464 1
    stringBuffer.append(TEXT_23);
d468 1
a468 1
    stringBuffer.append(TEXT_24);
d470 1
a470 1
    stringBuffer.append(TEXT_25);
d472 1
a472 1
    stringBuffer.append(TEXT_26);
d474 1
a474 1
    stringBuffer.append(TEXT_27);
d476 1
a476 1
    stringBuffer.append(TEXT_28);
d480 1
a480 1
    stringBuffer.append(TEXT_29);
d482 1
a482 1
    stringBuffer.append(TEXT_30);
d484 1
a484 1
    stringBuffer.append(TEXT_31);
d486 1
a486 1
    stringBuffer.append(TEXT_32);
d488 1
a488 1
    stringBuffer.append(TEXT_33);
d490 1
a490 1
    stringBuffer.append(TEXT_34);
d497 1
a497 1
    stringBuffer.append(TEXT_35);
d499 1
a499 1
    stringBuffer.append(TEXT_36);
d501 1
a501 1
    stringBuffer.append(TEXT_37);
d503 1
a503 1
    stringBuffer.append(TEXT_38);
d505 1
a505 1
    stringBuffer.append(TEXT_39);
d509 1
a509 1
    stringBuffer.append(TEXT_40);
d511 1
a511 1
    stringBuffer.append(TEXT_41);
d513 1
a513 1
    stringBuffer.append(TEXT_42);
d515 1
a515 1
    stringBuffer.append(TEXT_43);
d517 1
a517 1
    stringBuffer.append(TEXT_44);
d519 1
a519 1
    stringBuffer.append(TEXT_45);
d523 1
a523 1
    stringBuffer.append(TEXT_46);
d528 1
a528 1
    stringBuffer.append(TEXT_47);
d530 1
a530 1
    stringBuffer.append(TEXT_48);
d532 1
a532 1
    stringBuffer.append(TEXT_49);
d534 1
a534 1
    stringBuffer.append(TEXT_50);
d536 1
a536 1
    stringBuffer.append(TEXT_51);
d540 1
a540 1
    stringBuffer.append(TEXT_52);
d542 1
a542 1
    stringBuffer.append(TEXT_53);
d544 1
a544 1
    stringBuffer.append(TEXT_54);
d546 1
a546 1
    stringBuffer.append(TEXT_55);
d548 1
a548 1
    stringBuffer.append(TEXT_56);
d550 1
a550 1
    stringBuffer.append(TEXT_57);
d555 1
a555 1
    stringBuffer.append(TEXT_58);
d557 1
a557 1
    stringBuffer.append(TEXT_59);
d559 1
a559 1
    stringBuffer.append(TEXT_60);
d563 1
a563 1
    stringBuffer.append(TEXT_61);
d565 1
a565 1
    stringBuffer.append(TEXT_62);
d567 1
a567 1
    stringBuffer.append(TEXT_63);
d569 1
a569 1
    stringBuffer.append(TEXT_64);
d571 1
a571 1
    stringBuffer.append(TEXT_65);
d573 1
a573 1
    stringBuffer.append(TEXT_66);
d575 1
a575 1
    stringBuffer.append(TEXT_67);
d577 1
a577 1
    stringBuffer.append(TEXT_68);
d579 1
a579 1
    stringBuffer.append(TEXT_69);
d581 1
a581 1
    stringBuffer.append(TEXT_70);
d583 1
a583 1
    stringBuffer.append(TEXT_71);
d585 1
a585 1
    stringBuffer.append(TEXT_72);
d587 1
a587 1
    stringBuffer.append(TEXT_73);
d589 1
a589 1
    stringBuffer.append(TEXT_74);
d591 1
a591 1
    stringBuffer.append(TEXT_75);
d593 1
a593 1
    stringBuffer.append(TEXT_76);
d595 1
a595 1
    stringBuffer.append(TEXT_77);
d597 1
a597 1
    stringBuffer.append(TEXT_78);
d599 1
a599 1
    stringBuffer.append(TEXT_79);
d601 1
a601 1
    stringBuffer.append(TEXT_80);
d603 1
a603 1
    stringBuffer.append(TEXT_81);
d605 1
a605 1
    stringBuffer.append(TEXT_82);
d607 1
a607 1
    stringBuffer.append(TEXT_83);
d609 1
a609 1
    stringBuffer.append(TEXT_84);
d611 1
a611 1
    stringBuffer.append(TEXT_85);
d613 1
a613 1
    stringBuffer.append(TEXT_86);
d615 1
a615 1
    stringBuffer.append(TEXT_87);
d617 1
a617 1
    stringBuffer.append(TEXT_88);
d619 1
a619 1
    stringBuffer.append(TEXT_89);
d621 1
a621 1
    stringBuffer.append(TEXT_90);
d623 1
a623 1
    stringBuffer.append(TEXT_91);
d625 1
a625 1
    stringBuffer.append(TEXT_92);
d648 3
a650 3
    stringBuffer.append(TEXT_93);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_94);
d654 1
a654 1
    stringBuffer.append(TEXT_95);
d656 1
a656 1
    stringBuffer.append(TEXT_96);
d658 1
a658 1
    stringBuffer.append(TEXT_97);
d660 1
a660 1
    stringBuffer.append(TEXT_98);
d662 1
a662 1
    stringBuffer.append(TEXT_99);
d664 1
a664 1
    stringBuffer.append(TEXT_100);
d666 1
a666 1
    stringBuffer.append(TEXT_101);
d668 1
a668 1
    stringBuffer.append(TEXT_102);
d670 1
a670 1
    stringBuffer.append(TEXT_103);
d672 1
a672 1
    stringBuffer.append(TEXT_104);
d674 1
a674 1
    stringBuffer.append(TEXT_105);
d676 1
a676 1
    stringBuffer.append(TEXT_106);
d678 1
a678 1
    stringBuffer.append(TEXT_107);
d680 1
a680 1
    stringBuffer.append(TEXT_108);
d682 1
a682 1
    stringBuffer.append(TEXT_109);
d706 3
a708 3
    stringBuffer.append(TEXT_110);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_111);
d711 1
a711 1
    stringBuffer.append(TEXT_112);
d715 1
a715 1
    stringBuffer.append(TEXT_113);
d717 1
a717 1
    stringBuffer.append(TEXT_114);
d719 1
a719 1
    stringBuffer.append(TEXT_115);
d721 1
a721 1
    stringBuffer.append(TEXT_116);
d723 1
a723 1
    stringBuffer.append(TEXT_117);
d725 1
a725 1
    stringBuffer.append(TEXT_118);
d727 1
a727 1
    stringBuffer.append(TEXT_119);
d729 1
a729 1
    stringBuffer.append(TEXT_120);
d731 1
a731 1
    stringBuffer.append(TEXT_121);
d733 1
a733 1
    stringBuffer.append(TEXT_122);
d735 1
a735 1
    stringBuffer.append(TEXT_123);
d745 1
a745 1
    stringBuffer.append(TEXT_124);
d747 1
a747 1
    stringBuffer.append(TEXT_125);
d749 1
a749 1
    stringBuffer.append(TEXT_126);
d751 1
a751 1
    stringBuffer.append(TEXT_127);
d753 1
a753 1
    stringBuffer.append(TEXT_128);
d755 1
a755 1
    stringBuffer.append(TEXT_129);
d759 1
a759 1
    stringBuffer.append(TEXT_130);
d761 1
a761 1
    stringBuffer.append(TEXT_131);
d763 1
a763 1
    stringBuffer.append(TEXT_132);
d765 1
a765 1
    stringBuffer.append(TEXT_133);
d767 1
a767 1
    stringBuffer.append(TEXT_134);
d769 1
a769 1
    stringBuffer.append(TEXT_135);
d771 1
a771 1
    stringBuffer.append(TEXT_136);
d773 1
a773 1
    stringBuffer.append(TEXT_137);
d775 1
a775 1
    stringBuffer.append(TEXT_138);
d777 1
a777 1
    stringBuffer.append(TEXT_139);
d779 1
a779 1
    stringBuffer.append(TEXT_140);
d781 1
a781 1
    stringBuffer.append(TEXT_141);
d783 1
a783 1
    stringBuffer.append(TEXT_142);
d785 1
a785 1
    stringBuffer.append(TEXT_143);
d787 1
a787 1
    stringBuffer.append(TEXT_144);
d789 1
a789 1
    stringBuffer.append(TEXT_145);
d791 1
a791 1
    stringBuffer.append(TEXT_146);
d793 1
a793 1
    stringBuffer.append(TEXT_147);
d795 1
a795 1
    stringBuffer.append(TEXT_148);
d800 1
a800 1
    stringBuffer.append(TEXT_149);
d802 1
a802 1
    stringBuffer.append(TEXT_150);
d804 1
a804 1
    stringBuffer.append(TEXT_151);
d806 1
a806 1
    stringBuffer.append(TEXT_152);
d808 1
a808 1
    stringBuffer.append(TEXT_153);
d810 1
a810 1
    stringBuffer.append(TEXT_154);
d812 1
a812 1
    stringBuffer.append(TEXT_155);
d814 1
a814 1
    stringBuffer.append(TEXT_156);
d816 1
a816 1
    stringBuffer.append(TEXT_157);
d818 1
a818 1
    stringBuffer.append(TEXT_158);
d820 1
a820 1
    stringBuffer.append(TEXT_159);
d833 1
a833 1
    stringBuffer.append(TEXT_160);
d835 1
a835 1
    stringBuffer.append(TEXT_161);
d854 1
a854 1
    stringBuffer.append(TEXT_162);
d856 1
a856 1
    stringBuffer.append(TEXT_163);
a857 8
    stringBuffer.append(TEXT_164);
    stringBuffer.append(labelEditPart);
    stringBuffer.append(TEXT_165);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_166);
    stringBuffer.append(labelFigureClassName);
    stringBuffer.append(TEXT_167);
    			} else {
d861 2
a863 2
    stringBuffer.append(TEXT_170);
    			}
d865 1
a865 1
    		}
d867 1
d869 1
d871 1
a871 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d873 1
a873 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d875 1
a875 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d877 1
a877 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d879 1
a879 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d883 1
a883 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d885 1
a885 1
    stringBuffer.append(((GenNodeLabel)innerLabels.get(0)).getVisualID());
@

