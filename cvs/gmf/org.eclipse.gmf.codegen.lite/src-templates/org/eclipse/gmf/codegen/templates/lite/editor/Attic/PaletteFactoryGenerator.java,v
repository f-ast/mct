head	1.15;
access;
symbols
	v20080910-1520:1.15
	RC3_20:1.14
	v20070614-1400:1.14
	v20070608-1300:1.14
	v20070601-1400:1.13
	v20070525-1500:1.13
	v20070520-1200:1.13
	v20070518-1300:1.12
	v20070504-1000:1.11
	v20070427-0600:1.11
	v20070420-1000:1.11
	v20070413-1300:1.11
	v20070405-1100:1.11
	v20070403-1500:1.11
	v20070330-1300:1.11
	v20060330-1300:1.11
	v20070322-1100:1.11
	v20060316-0600:1.11
	v20070307-0700:1.11
	v20070228-2000:1.11
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070103-0300:1.10
	M4_20:1.10
	v20061222-1800:1.10
	v20061214-0000:1.10
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.6
	v20061005-1700:1.4
	M1_20:1.5
	v20060904-1500:1.5
	v20060824-1600:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.15
date	2007.06.20.10.16.10;	author bblajer;	state dead;
branches;
next	1.14;
commitid	37dd4678fe694567;

1.14
date	2007.06.04.16.20.30;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	17cf46643bca4567;

1.13
date	2007.05.20.12.55.36;	author mfeldman;	state Exp;
branches;
next	1.12;
commitid	7d1d465045114567;

1.12
date	2007.05.18.13.54.13;	author bblajer;	state Exp;
branches;
next	1.11;
commitid	4090464db0054567;

1.11
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.10;
commitid	496945df14164567;

1.10
date	2006.11.24.15.05.16;	author bblajer;	state Exp;
branches;
next	1.9;
commitid	524b45670a2b4567;

1.9
date	2006.11.22.16.27.49;	author bblajer;	state Exp;
branches;
next	1.8;
commitid	35045647a844567;

1.8
date	2006.11.03.18.05.39;	author bblajer;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.17.14.50.08;	author bblajer;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.25.14.22.15;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.26.11.58.48;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.19.19.42.29;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Rewrite /editor/* templates in XPand;
Use common template to generate code that creates an editing domain in various places;
OpenDiagramEditPolicy: package statement was missing.
@
text
@package org.eclipse.gmf.codegen.templates.lite.editor;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;

public class PaletteFactoryGenerator
{
  protected static String nl;
  public static synchronized PaletteFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    PaletteFactoryGenerator result = new PaletteFactoryGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_2 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final AdapterFactory domainAdapterFactory;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_3 = "(AdapterFactory domainAdapterFactory) {" + NL + "\t\tthis.domainAdapterFactory = domainAdapterFactory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void contributeToPalette(PaletteRoot paletteRoot) {";
  protected final String TEXT_4 = NL + "        PaletteGroup controls = new PaletteGroup(\"Controls\");" + NL + "        paletteRoot.add(controls);" + NL + "" + NL + "        ToolEntry tool = new ";
  protected final String TEXT_5 = "();" + NL + "        controls.add(tool);" + NL + "        paletteRoot.setDefaultEntry(tool);" + NL + "" + NL + "        controls.add(new MarqueeToolEntry());";
  protected final String TEXT_6 = NL + "\t\tpaletteRoot.add(";
  protected final String TEXT_7 = "());";
  protected final String TEXT_8 = NL + "\t}" + NL;
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer ";
  protected final String TEXT_10 = "() {";
  protected final String TEXT_11 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_12 = "(\"";
  protected final String TEXT_13 = "\");";
  protected final String TEXT_14 = NL + "\t\t";
  protected final String TEXT_15 = " smallImage = ";
  protected final String TEXT_16 = ".findImageDescriptor(\"";
  protected final String TEXT_17 = "\");";
  protected final String TEXT_18 = NL + "\t\t";
  protected final String TEXT_19 = " smallImage = null;";
  protected final String TEXT_20 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_21 = "(\"";
  protected final String TEXT_22 = "\", ";
  protected final String TEXT_23 = "\"";
  protected final String TEXT_24 = "\"";
  protected final String TEXT_25 = "null";
  protected final String TEXT_26 = ", smallImage);";
  protected final String TEXT_27 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_28 = "(\"";
  protected final String TEXT_29 = "\");";
  protected final String TEXT_30 = NL + "\t\tpaletteContainer.setDescription(\"";
  protected final String TEXT_31 = "\");";
  protected final String TEXT_32 = NL + "\t\t";
  protected final String TEXT_33 = " ";
  protected final String TEXT_34 = " ";
  protected final String TEXT_35 = "paletteEntry = ";
  protected final String TEXT_36 = "();" + NL + "\t\tif (paletteEntry != null) {" + NL + "\t\t\tpaletteContainer.add(paletteEntry);" + NL + "\t\t}";
  protected final String TEXT_37 = NL + "\t\t";
  protected final String TEXT_38 = " ";
  protected final String TEXT_39 = " ";
  protected final String TEXT_40 = "paletteEntry = ";
  protected final String TEXT_41 = "();" + NL + "\t\tif (paletteEntry != null) {" + NL + "\t\t\tpaletteContainer.add(paletteEntry);" + NL + "\t\t}";
  protected final String TEXT_42 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_43 = "());";
  protected final String TEXT_44 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_46 = "() {";
  protected final String TEXT_47 = NL + "\t\treturn null;";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = " result = new ";
  protected final String TEXT_50 = "();";
  protected final String TEXT_51 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_52 = ".class);";
  protected final String TEXT_53 = NL;
  protected final String TEXT_54 = NL + "\t\tresult.setToolProperty(";
  protected final String TEXT_55 = ", ";
  protected final String TEXT_56 = ");";
  protected final String TEXT_57 = NL + "\t\treturn result;";
  protected final String TEXT_58 = NL + "\t}" + NL;
  protected final String TEXT_59 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_60 = "() {" + NL + "\t\t";
  protected final String TEXT_61 = NL + "\t\t";
  protected final String TEXT_62 = " smallImage = ";
  protected final String TEXT_63 = ".findImageDescriptor(\"";
  protected final String TEXT_64 = "\");" + NL + "\t\t";
  protected final String TEXT_65 = NL + "\t\t";
  protected final String TEXT_66 = " smallImage = getImageDescriptor(";
  protected final String TEXT_67 = "); " + NL + "\t\t";
  protected final String TEXT_68 = NL + "\t\t";
  protected final String TEXT_69 = " smallImage = null;" + NL + "\t\t";
  protected final String TEXT_70 = NL + "\t\t";
  protected final String TEXT_71 = NL + "\t\t";
  protected final String TEXT_72 = " largeImage = ";
  protected final String TEXT_73 = ".findImageDescriptor(\"";
  protected final String TEXT_74 = "\");" + NL + "\t\t";
  protected final String TEXT_75 = NL + "\t\t";
  protected final String TEXT_76 = " largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_77 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_78 = NL + "\t\t\t";
  protected final String TEXT_79 = ".VISUAL_ID";
  protected final String TEXT_80 = ",";
  protected final String TEXT_81 = NL + "\t\t};";
  protected final String TEXT_82 = NL + "\t\tToolEntry result = new NodeToolEntry(\"";
  protected final String TEXT_83 = "\", \"";
  protected final String TEXT_84 = "\", smallImage, largeImage, visualIds);";
  protected final String TEXT_85 = NL + "\t\tToolEntry result = new LinkToolEntry(\"";
  protected final String TEXT_86 = "\", \"";
  protected final String TEXT_87 = "\", smallImage, largeImage, visualIds);";
  protected final String TEXT_88 = NL + "\t\tToolEntry result = new ToolEntry(\"";
  protected final String TEXT_89 = "\", \"";
  protected final String TEXT_90 = "\", smallImage, largeImage) {};";
  protected final String TEXT_91 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_92 = ".class);";
  protected final String TEXT_93 = NL;
  protected final String TEXT_94 = NL + "\t\tresult.setToolProperty(";
  protected final String TEXT_95 = ", ";
  protected final String TEXT_96 = ");";
  protected final String TEXT_97 = NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_98 = NL;
  protected final String TEXT_99 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class NodeToolEntry extends ";
  protected final String TEXT_100 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] myVisualIDs;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {" + NL + "\t\t\tsuper(title, description, new ";
  protected final String TEXT_101 = "(";
  protected final String TEXT_102 = ".class), smallIcon, largeIcon);" + NL + "\t\t\tmyVisualIDs = visualIDs;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool result = new CreationTool() {" + NL + "\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t";
  protected final String TEXT_103 = " request = new ";
  protected final String TEXT_104 = "(";
  protected final String TEXT_105 = ".MODEL_ID, myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected void performCreation(int button) {" + NL + "\t\t\t\t\tsuper.performCreation(button);" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_106 = " createdEditPart = (";
  protected final String TEXT_107 = ")getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());" + NL + "\t\t\t\t\tif (createdEditPart != null) {" + NL + "\t\t\t\t\t\tgetCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tif (createdEditPart.isActive()) {" + NL + "\t\t\t\t\t\t\t\t\tcreatedEditPart.performRequest(new ";
  protected final String TEXT_108 = "(";
  protected final String TEXT_109 = ".REQ_DIRECT_EDIT));" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_110 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ConnectionCreationToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] myVisualIDs;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {" + NL + "\t\t\tsuper(title, description, new ";
  protected final String TEXT_111 = "(";
  protected final String TEXT_112 = ".class), smallIcon, largeIcon);" + NL + "\t\t\tmyVisualIDs = visualIDs;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool result = new ConnectionCreationTool() {" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\tsetUnloadWhenFinished(true);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t";
  protected final String TEXT_113 = " request = new ";
  protected final String TEXT_114 = "(";
  protected final String TEXT_115 = ".MODEL_ID, myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_116 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImageDescriptor(Object o) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_117 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0]; 
final Palette palette = genDiagram.getPalette();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

importManager.emitPackageStatement(stringBuffer);

importManager.addImport("org.eclipse.gef.Tool");
importManager.addImport("org.eclipse.gef.Request");
importManager.addImport("org.eclipse.gef.tools.CreationTool");
importManager.addImport("org.eclipse.gef.tools.ConnectionCreationTool");
importManager.addImport("org.eclipse.gef.palette.PaletteContainer");
importManager.addImport("org.eclipse.gef.palette.PaletteDrawer");
importManager.addImport("org.eclipse.gef.palette.PaletteGroup");
importManager.addImport("org.eclipse.gef.palette.PaletteRoot");
importManager.addImport("org.eclipse.gef.palette.ConnectionCreationToolEntry");
importManager.addImport("org.eclipse.gef.palette.MarqueeToolEntry");
importManager.addImport("org.eclipse.gef.palette.ToolEntry");
importManager.addImport("org.eclipse.jface.resource.ImageDescriptor");
importManager.addImport("org.eclipse.emf.edit.provider.IItemLabelProvider");
importManager.addImport("org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry");
importManager.addImport("org.eclipse.emf.common.notify.AdapterFactory");

importManager.registerInnerClass("LinkToolEntry");
importManager.registerInnerClass("NodeToolEntry");

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_1);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_3);
    
if (!palette.definesStandardTools()) {

    stringBuffer.append(TEXT_4);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.SelectionToolEntry"));
    stringBuffer.append(TEXT_5);
    
}

    
List toolGroups = palette.getGroups();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);

    stringBuffer.append(TEXT_6);
    stringBuffer.append(toolGroup.getCreateMethodName());
    stringBuffer.append(TEXT_7);
    }
    stringBuffer.append(TEXT_8);
    
final LinkedList<ToolGroup> toolGroupsQueue = new LinkedList<ToolGroup>();
for(Object next : palette.getGroups()) {
	toolGroupsQueue.add((ToolGroup) next);
}
final LinkedList<AbstractToolEntry> toolsQueue = new LinkedList<AbstractToolEntry>();
while (!toolGroupsQueue.isEmpty()) {
	// TODO with additional counter and hashmap here it's easy to add "unique method name" check here
	ToolGroup toolGroup = (ToolGroup) toolGroupsQueue.removeFirst();

    stringBuffer.append(TEXT_9);
    stringBuffer.append(toolGroup.getCreateMethodName());
    stringBuffer.append(TEXT_10);
    if (toolGroup.isCollapse() && toolGroup.isToolsOnly()) { 
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteDrawer"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(toolGroup.getTitle());
    stringBuffer.append(TEXT_13);
    } else if (toolGroup.isStack()) {
    
	if (toolGroup.getSmallIconPath() != null) {

    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(toolGroup.getSmallIconPath());
    stringBuffer.append(TEXT_17);
    
	} else {

    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_19);
    
	}

    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteStack"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(toolGroup.getTitle());
    stringBuffer.append(TEXT_22);
    if (toolGroup.getDescription() != null) {
    stringBuffer.append(TEXT_23);
    stringBuffer.append(toolGroup.getDescription());
    stringBuffer.append(TEXT_24);
    } else {
    stringBuffer.append(TEXT_25);
    }
    stringBuffer.append(TEXT_26);
    } else {
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteGroup"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(toolGroup.getTitle());
    stringBuffer.append(TEXT_29);
    }
if (toolGroup.getDescription() != null) {
    stringBuffer.append(TEXT_30);
    stringBuffer.append(toolGroup.getDescription());
    stringBuffer.append(TEXT_31);
    }
    
boolean hasDeclaredPaletteEntry = false;
for(Iterator it = toolGroup.getEntries().iterator(); it.hasNext(); ) {
	ToolGroupItem groupItem = (ToolGroupItem) it.next();
	if (groupItem instanceof AbstractToolEntry) {
		toolsQueue.add((AbstractToolEntry) groupItem);

    stringBuffer.append(TEXT_32);
    if (!hasDeclaredPaletteEntry) { hasDeclaredPaletteEntry = true;
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteEntry"));
    stringBuffer.append(TEXT_34);
    }
    stringBuffer.append(TEXT_35);
    stringBuffer.append(((AbstractToolEntry) groupItem).getCreateMethodName());
    stringBuffer.append(TEXT_36);
    	} else if (groupItem instanceof ToolGroup) {
		toolGroupsQueue.addLast((ToolGroup) groupItem);

    stringBuffer.append(TEXT_37);
    if (!hasDeclaredPaletteEntry) { hasDeclaredPaletteEntry = true;
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteEntry"));
    stringBuffer.append(TEXT_39);
    }
    stringBuffer.append(TEXT_40);
    stringBuffer.append(((ToolGroup) groupItem).getCreateMethodName());
    stringBuffer.append(TEXT_41);
    
	} else if (groupItem instanceof Separator) {
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteSeparator"));
    stringBuffer.append(TEXT_43);
    	} /*else - no more options possible, log warning? */
    } /*for*/
    stringBuffer.append(TEXT_44);
    
} /*while*/
boolean hasNodeEntries = false;
boolean hasLinkEntries = false;
for(AbstractToolEntry abstractToolEntry : toolsQueue) {
	if (abstractToolEntry instanceof StandardEntry) {
		StandardEntry toolEntry = (StandardEntry) abstractToolEntry;

    stringBuffer.append(TEXT_45);
    stringBuffer.append(toolEntry.getCreateMethodName());
    stringBuffer.append(TEXT_46);
    
		String toolEntryQualifiedName;
		if (toolEntry.getKind() == StandardEntryKind.SELECT_LITERAL) {
			toolEntryQualifiedName = "org.eclipse.gef.palette.PanningSelectionToolEntry";
		} else if (toolEntry.getKind() == StandardEntryKind.MARQUEE_LITERAL) {
			toolEntryQualifiedName = "org.eclipse.gef.palette.MarqueeToolEntry";
		} else {
			toolEntryQualifiedName = null;
		}
		if (toolEntryQualifiedName == null) {

    stringBuffer.append(TEXT_47);
    
		} else {

    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName(toolEntryQualifiedName));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName(toolEntryQualifiedName));
    stringBuffer.append(TEXT_50);
    
// there's a problem with qualifieToolName - we should also respect different tools 
// in NodeToolEntry and LinkToolEntry (right now there's hardcoded name of the tool) 
if (toolEntry.getQualifiedToolName() != null && toolEntry.getQualifiedToolName().trim().length() > 0 ) {

    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(toolEntry.getQualifiedToolName()));
    stringBuffer.append(TEXT_52);
    
} /*tool class presence*/
    stringBuffer.append(TEXT_53);
    if (!toolEntry.getProperties().isEmpty()) {
	for (Iterator it = toolEntry.getProperties().entrySet().iterator(); it.hasNext();) {
		Map.Entry entry = (Map.Entry) it.next();

    stringBuffer.append(TEXT_54);
    stringBuffer.append(entry.getKey());
    stringBuffer.append(TEXT_55);
    stringBuffer.append(entry.getValue());
    stringBuffer.append(TEXT_56);
    
	} /*properties iterator*/
} /*properties presence check*/

    stringBuffer.append(TEXT_57);
    
		}

    stringBuffer.append(TEXT_58);
    
		continue;
	}
	ToolEntry toolEntry = (ToolEntry) abstractToolEntry;
	GenCommonBase firstGenElement = toolEntry.getElements().isEmpty() ? null : (GenCommonBase) toolEntry.getElements().get(0);
	String domainElementInstanceCreationCode = null;
	if (firstGenElement instanceof GenNode) {
		GenNode firstGenNode = (GenNode) firstGenElement;
		GenClass genClass = firstGenNode.getDomainMetaClass();
		if (!genClass.isMapEntry()) {
			domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		} else {
			domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + 
				importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName() + "())";
		}
	} else if (firstGenElement instanceof GenLink) {
		GenLink firstGenLink = (GenLink) firstGenElement;
		LinkModelFacet linkModelFacet = firstGenLink.getModelFacet();
		if (linkModelFacet instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) linkModelFacet;
			GenClass genClass = typeLinkModelFacet.getMetaClass();
			domainElementInstanceCreationCode = importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		}
	}

    stringBuffer.append(TEXT_59);
    stringBuffer.append(toolEntry.getCreateMethodName());
    stringBuffer.append(TEXT_60);
    if (toolEntry.getSmallIconPath() != null) {
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(toolEntry.getSmallIconPath());
    stringBuffer.append(TEXT_64);
    } else if (domainElementInstanceCreationCode != null) {
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(domainElementInstanceCreationCode);
    stringBuffer.append(TEXT_67);
    } else {
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_69);
    }
    stringBuffer.append(TEXT_70);
    if (toolEntry.getLargeIconPath() != null) {
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(toolEntry.getLargeIconPath());
    stringBuffer.append(TEXT_74);
    } else {
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_76);
    }
    
	if (!toolEntry.getElements().isEmpty()) {

    stringBuffer.append(TEXT_77);
    
		for (Iterator genElementsIterator = toolEntry.getElements().iterator(); genElementsIterator.hasNext();) {
			GenCommonBase next = (GenCommonBase) genElementsIterator.next();

    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_79);
    if (genElementsIterator.hasNext()) {
    stringBuffer.append(TEXT_80);
    }
    
		}

    stringBuffer.append(TEXT_81);
    
	}
	if (firstGenElement instanceof GenNode) {
		hasNodeEntries = true;

    stringBuffer.append(TEXT_82);
    stringBuffer.append(toolEntry.getTitle());
    stringBuffer.append(TEXT_83);
    stringBuffer.append(toolEntry.getDescription());
    stringBuffer.append(TEXT_84);
    
	} else if (firstGenElement instanceof GenLink) {
		hasLinkEntries = true;

    stringBuffer.append(TEXT_85);
    stringBuffer.append(toolEntry.getTitle());
    stringBuffer.append(TEXT_86);
    stringBuffer.append(toolEntry.getDescription());
    stringBuffer.append(TEXT_87);
    
	} else {

    stringBuffer.append(TEXT_88);
    stringBuffer.append(toolEntry.getTitle());
    stringBuffer.append(TEXT_89);
    stringBuffer.append(toolEntry.getDescription());
    stringBuffer.append(TEXT_90);
    
	}

    
// there's a problem with qualifieToolName - we should also respect different tools 
// in NodeToolEntry and LinkToolEntry (right now there's hardcoded name of the tool) 
if (toolEntry.getQualifiedToolName() != null && toolEntry.getQualifiedToolName().trim().length() > 0 ) {

    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName(toolEntry.getQualifiedToolName()));
    stringBuffer.append(TEXT_92);
    
} /*tool class presence*/
    stringBuffer.append(TEXT_93);
    if (!toolEntry.getProperties().isEmpty()) {
	for (Iterator it = toolEntry.getProperties().entrySet().iterator(); it.hasNext();) {
		Map.Entry entry = (Map.Entry) it.next();

    stringBuffer.append(TEXT_94);
    stringBuffer.append(entry.getKey());
    stringBuffer.append(TEXT_95);
    stringBuffer.append(entry.getValue());
    stringBuffer.append(TEXT_96);
    
	} /*properties iterator*/
} /*properties presence check*/

    stringBuffer.append(TEXT_97);
    
}	/*for*/

    stringBuffer.append(TEXT_98);
    
if (hasNodeEntries) {

    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.CombinedTemplateCreationEntry"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory"));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_109);
    
}	/*if (hasNodeEntries)*/
if (hasLinkEntries) {

    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_115);
    
}	/*if (hasLinkEntries)*/

    stringBuffer.append(TEXT_116);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_117);
    return stringBuffer.toString();
  }
}
@


1.14
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.13
log
@Anna Karyakina's migration fix
@
text
@d19 1
a19 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.12
log
@Uncompilable code generated if a tool does not define any visual IDs it is able to create
@
text
@d70 20
a89 20
  protected final String TEXT_51 = NL;
  protected final String TEXT_52 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_53 = ".class);";
  protected final String TEXT_54 = NL;
  protected final String TEXT_55 = NL + "\t\tresult.setToolProperty(";
  protected final String TEXT_56 = ", ";
  protected final String TEXT_57 = ");";
  protected final String TEXT_58 = NL + "\t\treturn result;";
  protected final String TEXT_59 = NL + "\t}" + NL;
  protected final String TEXT_60 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_61 = "() {" + NL + "\t\t";
  protected final String TEXT_62 = NL + "\t\t";
  protected final String TEXT_63 = " smallImage = ";
  protected final String TEXT_64 = ".findImageDescriptor(\"";
  protected final String TEXT_65 = "\");" + NL + "\t\t";
  protected final String TEXT_66 = NL + "\t\t";
  protected final String TEXT_67 = " smallImage = getImageDescriptor(";
  protected final String TEXT_68 = "); " + NL + "\t\t";
  protected final String TEXT_69 = NL + "\t\t";
  protected final String TEXT_70 = " smallImage = null;" + NL + "\t\t";
d91 46
a136 48
  protected final String TEXT_72 = NL + "\t\t";
  protected final String TEXT_73 = " largeImage = ";
  protected final String TEXT_74 = ".findImageDescriptor(\"";
  protected final String TEXT_75 = "\");" + NL + "\t\t";
  protected final String TEXT_76 = NL + "\t\t";
  protected final String TEXT_77 = " largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_78 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_79 = NL + "\t\t\t";
  protected final String TEXT_80 = ".VISUAL_ID";
  protected final String TEXT_81 = ",";
  protected final String TEXT_82 = NL + "\t\t};";
  protected final String TEXT_83 = NL + "\t\tToolEntry result = new NodeToolEntry(\"";
  protected final String TEXT_84 = "\", \"";
  protected final String TEXT_85 = "\", smallImage, largeImage, visualIds);";
  protected final String TEXT_86 = NL + "\t\tToolEntry result = new LinkToolEntry(\"";
  protected final String TEXT_87 = "\", \"";
  protected final String TEXT_88 = "\", smallImage, largeImage, visualIds);";
  protected final String TEXT_89 = NL + "\t\tToolEntry result = new ToolEntry(\"";
  protected final String TEXT_90 = "\", \"";
  protected final String TEXT_91 = "\", smallImage, largeImage) {};";
  protected final String TEXT_92 = NL;
  protected final String TEXT_93 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_94 = ".class);";
  protected final String TEXT_95 = NL;
  protected final String TEXT_96 = NL + "\t\tresult.setToolProperty(";
  protected final String TEXT_97 = ", ";
  protected final String TEXT_98 = ");";
  protected final String TEXT_99 = NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_100 = NL;
  protected final String TEXT_101 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class NodeToolEntry extends ";
  protected final String TEXT_102 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] myVisualIDs;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {" + NL + "\t\t\tsuper(title, description, new ";
  protected final String TEXT_103 = "(";
  protected final String TEXT_104 = ".class), smallIcon, largeIcon);" + NL + "\t\t\tmyVisualIDs = visualIDs;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool result = new CreationTool() {" + NL + "\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t";
  protected final String TEXT_105 = " request = new ";
  protected final String TEXT_106 = "(";
  protected final String TEXT_107 = ".MODEL_ID, myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected void performCreation(int button) {" + NL + "\t\t\t\t\tsuper.performCreation(button);" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_108 = " createdEditPart = (";
  protected final String TEXT_109 = ")getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());" + NL + "\t\t\t\t\tif (createdEditPart != null) {" + NL + "\t\t\t\t\t\tgetCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tif (createdEditPart.isActive()) {" + NL + "\t\t\t\t\t\t\t\t\tcreatedEditPart.performRequest(new ";
  protected final String TEXT_110 = "(";
  protected final String TEXT_111 = ".REQ_DIRECT_EDIT));" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_112 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ConnectionCreationToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] myVisualIDs;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {" + NL + "\t\t\tsuper(title, description, new ";
  protected final String TEXT_113 = "(";
  protected final String TEXT_114 = ".class), smallIcon, largeIcon);" + NL + "\t\t\tmyVisualIDs = visualIDs;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool result = new ConnectionCreationTool() {" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\tsetUnloadWhenFinished(true);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t";
  protected final String TEXT_115 = " request = new ";
  protected final String TEXT_116 = "(";
  protected final String TEXT_117 = ".MODEL_ID, myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_118 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImageDescriptor(Object o) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_119 = NL;
a323 1
    stringBuffer.append(TEXT_51);
d329 2
a331 2
    stringBuffer.append(importManager.getImportedName(toolEntry.getQualifiedToolName()));
    stringBuffer.append(TEXT_53);
d334 1
a334 1
    stringBuffer.append(TEXT_54);
d339 2
d342 1
a342 1
    stringBuffer.append(entry.getKey());
a343 2
    stringBuffer.append(entry.getValue());
    stringBuffer.append(TEXT_57);
d348 1
a348 1
    stringBuffer.append(TEXT_58);
d352 1
a352 1
    stringBuffer.append(TEXT_59);
d378 2
d381 1
a381 1
    stringBuffer.append(toolEntry.getCreateMethodName());
d383 1
a383 1
    if (toolEntry.getSmallIconPath() != null) {
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d387 1
a387 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d389 1
a389 1
    stringBuffer.append(toolEntry.getSmallIconPath());
d391 1
a391 1
    } else if (domainElementInstanceCreationCode != null) {
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d395 1
a395 1
    stringBuffer.append(domainElementInstanceCreationCode);
d397 1
a397 1
    } else {
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d401 1
a401 1
    }
d403 1
a403 1
    if (toolEntry.getLargeIconPath() != null) {
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d409 1
a409 1
    stringBuffer.append(toolEntry.getLargeIconPath());
d411 1
a411 1
    } else {
a412 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_77);
d417 1
a417 1
    stringBuffer.append(TEXT_78);
d422 2
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
a426 2
    if (genElementsIterator.hasNext()) {
    stringBuffer.append(TEXT_81);
d431 1
a431 1
    stringBuffer.append(TEXT_82);
d437 2
d440 1
a440 1
    stringBuffer.append(toolEntry.getTitle());
a441 2
    stringBuffer.append(toolEntry.getDescription());
    stringBuffer.append(TEXT_85);
d446 2
d449 1
a449 1
    stringBuffer.append(toolEntry.getTitle());
a450 2
    stringBuffer.append(toolEntry.getDescription());
    stringBuffer.append(TEXT_88);
d454 2
d457 1
a457 1
    stringBuffer.append(toolEntry.getTitle());
a458 2
    stringBuffer.append(toolEntry.getDescription());
    stringBuffer.append(TEXT_91);
a461 1
    stringBuffer.append(TEXT_92);
d467 1
a467 1
    stringBuffer.append(TEXT_93);
d469 1
a469 1
    stringBuffer.append(TEXT_94);
d472 1
a472 1
    stringBuffer.append(TEXT_95);
d477 1
a477 1
    stringBuffer.append(TEXT_96);
d479 1
a479 1
    stringBuffer.append(TEXT_97);
d481 1
a481 1
    stringBuffer.append(TEXT_98);
d486 1
a486 1
    stringBuffer.append(TEXT_99);
d490 1
a490 1
    stringBuffer.append(TEXT_100);
d494 1
a494 1
    stringBuffer.append(TEXT_101);
d496 1
a496 1
    stringBuffer.append(TEXT_102);
d498 1
a498 1
    stringBuffer.append(TEXT_103);
d500 1
a500 1
    stringBuffer.append(TEXT_104);
d502 1
a502 1
    stringBuffer.append(TEXT_105);
d504 1
a504 1
    stringBuffer.append(TEXT_106);
d506 1
a506 1
    stringBuffer.append(TEXT_107);
d508 1
a508 1
    stringBuffer.append(TEXT_108);
d510 1
a510 1
    stringBuffer.append(TEXT_109);
d512 1
a512 1
    stringBuffer.append(TEXT_110);
d514 1
a514 1
    stringBuffer.append(TEXT_111);
d519 1
a519 1
    stringBuffer.append(TEXT_112);
d521 1
a521 1
    stringBuffer.append(TEXT_113);
d523 1
a523 1
    stringBuffer.append(TEXT_114);
d525 1
a525 1
    stringBuffer.append(TEXT_115);
d527 1
a527 1
    stringBuffer.append(TEXT_116);
d529 1
a529 1
    stringBuffer.append(TEXT_117);
d533 1
a533 1
    stringBuffer.append(TEXT_118);
d535 1
a535 1
    stringBuffer.append(TEXT_119);
@


1.11
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@a432 1
	}
d436 1
@


1.10
log
@[164021] allow to choose standard tools for lite generator
@
text
@d125 14
a138 12
  protected final String TEXT_106 = "(myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected void performCreation(int button) {" + NL + "\t\t\t\t\tsuper.performCreation(button);" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_107 = " createdEditPart = (";
  protected final String TEXT_108 = ")getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());" + NL + "\t\t\t\t\tif (createdEditPart != null) {" + NL + "\t\t\t\t\t\tgetCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tif (createdEditPart.isActive()) {" + NL + "\t\t\t\t\t\t\t\t\tcreatedEditPart.performRequest(new ";
  protected final String TEXT_109 = "(";
  protected final String TEXT_110 = ".REQ_DIRECT_EDIT));" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_111 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ConnectionCreationToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] myVisualIDs;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {" + NL + "\t\t\tsuper(title, description, new ";
  protected final String TEXT_112 = "(";
  protected final String TEXT_113 = ".class), smallIcon, largeIcon);" + NL + "\t\t\tmyVisualIDs = visualIDs;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool result = new ConnectionCreationTool() {" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\tsetUnloadWhenFinished(true);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t";
  protected final String TEXT_114 = " request = new ";
  protected final String TEXT_115 = "(myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_116 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImageDescriptor(Object o) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_117 = NL;
d509 1
a509 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d513 2
d516 1
a516 1
    stringBuffer.append(TEXT_109);
d518 1
a518 1
    stringBuffer.append(TEXT_110);
d523 1
a523 1
    stringBuffer.append(TEXT_111);
d525 1
a525 1
    stringBuffer.append(TEXT_112);
a526 2
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx"));
d530 4
d537 1
a537 1
    stringBuffer.append(TEXT_116);
d539 1
a539 1
    stringBuffer.append(TEXT_117);
@


1.9
log
@Do not assume tool entry's properties are strings, let users specify whatever they want (e.g. constants)
@
text
@d22 26
a47 26
  protected final String TEXT_3 = "(AdapterFactory domainAdapterFactory) {" + NL + "\t\tthis.domainAdapterFactory = domainAdapterFactory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void contributeToPalette(PaletteRoot paletteRoot) {" + NL + "        PaletteGroup controls = new PaletteGroup(\"Controls\");" + NL + "        paletteRoot.add(controls);" + NL + "" + NL + "        ToolEntry tool = new SelectionToolEntry();" + NL + "        controls.add(tool);" + NL + "        paletteRoot.setDefaultEntry(tool);" + NL + "" + NL + "        controls.add(new MarqueeToolEntry());";
  protected final String TEXT_4 = NL + "\t\tpaletteRoot.add(";
  protected final String TEXT_5 = "());";
  protected final String TEXT_6 = NL + "\t}" + NL;
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer ";
  protected final String TEXT_8 = "() {";
  protected final String TEXT_9 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_10 = "(\"";
  protected final String TEXT_11 = "\");";
  protected final String TEXT_12 = NL + "\t\t";
  protected final String TEXT_13 = " smallImage = ";
  protected final String TEXT_14 = ".findImageDescriptor(\"";
  protected final String TEXT_15 = "\");";
  protected final String TEXT_16 = NL + "\t\t";
  protected final String TEXT_17 = " smallImage = null;";
  protected final String TEXT_18 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_19 = "(\"";
  protected final String TEXT_20 = "\", ";
  protected final String TEXT_21 = "\"";
  protected final String TEXT_22 = "\"";
  protected final String TEXT_23 = "null";
  protected final String TEXT_24 = ", smallImage);";
  protected final String TEXT_25 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_26 = "(\"";
  protected final String TEXT_27 = "\");";
  protected final String TEXT_28 = NL + "\t\tpaletteContainer.setDescription(\"";
d49 18
a66 18
  protected final String TEXT_30 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_31 = "());";
  protected final String TEXT_32 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_33 = "());";
  protected final String TEXT_34 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_35 = "());";
  protected final String TEXT_36 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_38 = "() {" + NL + "\t\t";
  protected final String TEXT_39 = NL + "\t\t";
  protected final String TEXT_40 = " smallImage = ";
  protected final String TEXT_41 = ".findImageDescriptor(\"";
  protected final String TEXT_42 = "\");" + NL + "\t\t";
  protected final String TEXT_43 = NL + "\t\t";
  protected final String TEXT_44 = " smallImage = getImageDescriptor(";
  protected final String TEXT_45 = "); " + NL + "\t\t";
  protected final String TEXT_46 = NL + "\t\t";
  protected final String TEXT_47 = " smallImage = null;" + NL + "\t\t";
d68 43
a110 43
  protected final String TEXT_49 = NL + "\t\t";
  protected final String TEXT_50 = " largeImage = ";
  protected final String TEXT_51 = ".findImageDescriptor(\"";
  protected final String TEXT_52 = "\");" + NL + "\t\t";
  protected final String TEXT_53 = NL + "\t\t";
  protected final String TEXT_54 = " largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_55 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_56 = NL + "\t\t\t";
  protected final String TEXT_57 = ".VISUAL_ID";
  protected final String TEXT_58 = ",";
  protected final String TEXT_59 = NL + "\t\t};";
  protected final String TEXT_60 = NL + "\t\tToolEntry result = new NodeToolEntry(\"";
  protected final String TEXT_61 = "\", \"";
  protected final String TEXT_62 = "\", smallImage, largeImage, visualIds);";
  protected final String TEXT_63 = NL + "\t\tToolEntry result = new LinkToolEntry(\"";
  protected final String TEXT_64 = "\", \"";
  protected final String TEXT_65 = "\", smallImage, largeImage, visualIds);";
  protected final String TEXT_66 = NL + "\t\tToolEntry result = new ToolEntry(\"";
  protected final String TEXT_67 = "\", \"";
  protected final String TEXT_68 = "\", smallImage, largeImage) {};";
  protected final String TEXT_69 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_70 = ".class);";
  protected final String TEXT_71 = NL + "\t\tresult.setToolProperty(";
  protected final String TEXT_72 = ", ";
  protected final String TEXT_73 = ");";
  protected final String TEXT_74 = NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_75 = NL;
  protected final String TEXT_76 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class NodeToolEntry extends ";
  protected final String TEXT_77 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] myVisualIDs;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {" + NL + "\t\t\tsuper(title, description, new ";
  protected final String TEXT_78 = "(";
  protected final String TEXT_79 = ".class), smallIcon, largeIcon);" + NL + "\t\t\tmyVisualIDs = visualIDs;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool result = new CreationTool() {" + NL + "\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t";
  protected final String TEXT_80 = " request = new ";
  protected final String TEXT_81 = "(myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected void performCreation(int button) {" + NL + "\t\t\t\t\tsuper.performCreation(button);" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_82 = " createdEditPart = (";
  protected final String TEXT_83 = ")getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());" + NL + "\t\t\t\t\tif (createdEditPart != null) {" + NL + "\t\t\t\t\t\tgetCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tif (createdEditPart.isActive()) {" + NL + "\t\t\t\t\t\t\t\t\tcreatedEditPart.performRequest(new ";
  protected final String TEXT_84 = "(";
  protected final String TEXT_85 = ".REQ_DIRECT_EDIT));" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_86 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ConnectionCreationToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] myVisualIDs;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {" + NL + "\t\t\tsuper(title, description, new ";
  protected final String TEXT_87 = "(";
  protected final String TEXT_88 = ".class), smallIcon, largeIcon);" + NL + "\t\t\tmyVisualIDs = visualIDs;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool result = new ConnectionCreationTool() {" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\tsetUnloadWhenFinished(true);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t";
  protected final String TEXT_89 = " request = new ";
  protected final String TEXT_90 = "(myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_91 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImageDescriptor(Object o) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
d112 25
a157 1
importManager.addImport("org.eclipse.gef.palette.SelectionToolEntry");
d175 9
d188 1
a188 1
    stringBuffer.append(TEXT_4);
d190 1
a190 1
    stringBuffer.append(TEXT_5);
d192 1
a192 1
    stringBuffer.append(TEXT_6);
d198 1
a198 1
final LinkedList<ToolEntry> toolsQueue = new LinkedList<ToolEntry>();
d203 1
a203 1
    stringBuffer.append(TEXT_7);
d205 1
a205 1
    stringBuffer.append(TEXT_8);
d207 1
a207 1
    stringBuffer.append(TEXT_9);
d209 1
a209 1
    stringBuffer.append(TEXT_10);
d211 1
a211 1
    stringBuffer.append(TEXT_11);
d216 1
a216 1
    stringBuffer.append(TEXT_12);
d218 1
a218 1
    stringBuffer.append(TEXT_13);
d220 1
a220 1
    stringBuffer.append(TEXT_14);
d222 1
a222 1
    stringBuffer.append(TEXT_15);
d226 1
a226 1
    stringBuffer.append(TEXT_16);
d228 1
a228 1
    stringBuffer.append(TEXT_17);
d232 1
a232 1
    stringBuffer.append(TEXT_18);
d234 1
a234 1
    stringBuffer.append(TEXT_19);
d236 1
a236 1
    stringBuffer.append(TEXT_20);
d238 1
a238 1
    stringBuffer.append(TEXT_21);
d240 1
a240 1
    stringBuffer.append(TEXT_22);
d242 1
a242 1
    stringBuffer.append(TEXT_23);
d244 1
a244 1
    stringBuffer.append(TEXT_24);
d246 1
a246 1
    stringBuffer.append(TEXT_25);
d248 1
a248 1
    stringBuffer.append(TEXT_26);
d250 1
a250 1
    stringBuffer.append(TEXT_27);
d253 1
a253 1
    stringBuffer.append(TEXT_28);
d255 1
a255 1
    stringBuffer.append(TEXT_29);
d258 1
d261 2
a262 2
	if (groupItem instanceof ToolEntry) {
		toolsQueue.add((ToolEntry) groupItem);
d264 9
a272 3
    stringBuffer.append(TEXT_30);
    stringBuffer.append(((ToolEntry) groupItem).getCreateMethodName());
    stringBuffer.append(TEXT_31);
d276 7
a282 1
    stringBuffer.append(TEXT_32);
d284 1
a284 1
    stringBuffer.append(TEXT_33);
d287 1
a287 1
    stringBuffer.append(TEXT_34);
d289 1
a289 1
    stringBuffer.append(TEXT_35);
d292 1
a292 1
    stringBuffer.append(TEXT_36);
d297 61
a357 1
for(ToolEntry toolEntry : toolsQueue) {
d379 1
a379 1
    stringBuffer.append(TEXT_37);
d381 1
a381 1
    stringBuffer.append(TEXT_38);
d383 1
a383 1
    stringBuffer.append(TEXT_39);
d385 1
a385 1
    stringBuffer.append(TEXT_40);
d387 1
a387 1
    stringBuffer.append(TEXT_41);
d389 1
a389 1
    stringBuffer.append(TEXT_42);
d391 1
a391 1
    stringBuffer.append(TEXT_43);
d393 1
a393 1
    stringBuffer.append(TEXT_44);
d395 1
a395 1
    stringBuffer.append(TEXT_45);
d397 1
a397 1
    stringBuffer.append(TEXT_46);
d399 1
a399 1
    stringBuffer.append(TEXT_47);
d401 1
a401 1
    stringBuffer.append(TEXT_48);
d403 1
a403 1
    stringBuffer.append(TEXT_49);
d405 1
a405 1
    stringBuffer.append(TEXT_50);
d407 1
a407 1
    stringBuffer.append(TEXT_51);
d409 1
a409 1
    stringBuffer.append(TEXT_52);
d411 1
a411 1
    stringBuffer.append(TEXT_53);
d413 1
a413 1
    stringBuffer.append(TEXT_54);
d418 1
a418 1
    stringBuffer.append(TEXT_55);
d423 1
a423 1
    stringBuffer.append(TEXT_56);
d425 1
a425 1
    stringBuffer.append(TEXT_57);
d427 1
a427 1
    stringBuffer.append(TEXT_58);
d433 1
a433 1
    stringBuffer.append(TEXT_59);
d438 1
a438 1
    stringBuffer.append(TEXT_60);
d440 1
a440 1
    stringBuffer.append(TEXT_61);
d442 1
a442 1
    stringBuffer.append(TEXT_62);
d447 1
a447 1
    stringBuffer.append(TEXT_63);
d449 1
a449 1
    stringBuffer.append(TEXT_64);
d451 1
a451 1
    stringBuffer.append(TEXT_65);
d455 1
a455 1
    stringBuffer.append(TEXT_66);
d457 1
a457 1
    stringBuffer.append(TEXT_67);
d459 1
a459 1
    stringBuffer.append(TEXT_68);
a461 3
	// there's a problem with qualifiedToolName - we should also respect different tools 
	// in NodeToolEntry and LinkToolEntry (right now there's hardcoded name of the tool) 
	if (toolEntry.getQualifiedToolName() != null && toolEntry.getQualifiedToolName().trim().length() > 0 ) {
d463 7
a469 1
    stringBuffer.append(TEXT_69);
d471 1
a471 1
    stringBuffer.append(TEXT_70);
d473 5
a477 4
	} /*tool class presence*/
	if (!toolEntry.getProperties().isEmpty()) {
		for (Iterator it = toolEntry.getProperties().entrySet().iterator(); it.hasNext();) {
			Map.Entry entry = (Map.Entry) it.next();
d479 1
a479 1
    stringBuffer.append(TEXT_71);
d481 1
a481 1
    stringBuffer.append(TEXT_72);
d483 1
a483 1
    stringBuffer.append(TEXT_73);
d485 2
a486 2
		} /*properties iterator*/
	} /*properties presence check*/
d488 1
a488 1
    stringBuffer.append(TEXT_74);
d492 1
a492 1
    stringBuffer.append(TEXT_75);
d496 1
a496 1
    stringBuffer.append(TEXT_76);
d498 1
a498 1
    stringBuffer.append(TEXT_77);
d500 1
a500 1
    stringBuffer.append(TEXT_78);
d502 1
a502 1
    stringBuffer.append(TEXT_79);
d504 1
a504 1
    stringBuffer.append(TEXT_80);
d506 1
a506 1
    stringBuffer.append(TEXT_81);
d508 1
a508 1
    stringBuffer.append(TEXT_82);
d510 1
a510 1
    stringBuffer.append(TEXT_83);
d512 1
a512 1
    stringBuffer.append(TEXT_84);
d514 1
a514 1
    stringBuffer.append(TEXT_85);
d519 1
a519 1
    stringBuffer.append(TEXT_86);
d521 1
a521 1
    stringBuffer.append(TEXT_87);
d523 1
a523 1
    stringBuffer.append(TEXT_88);
d525 1
a525 1
    stringBuffer.append(TEXT_89);
d527 1
a527 1
    stringBuffer.append(TEXT_90);
d531 1
a531 1
    stringBuffer.append(TEXT_91);
d533 1
a533 1
    stringBuffer.append(TEXT_92);
@


1.8
log
@[163126] Using ToolGroup with stack = true produces uncompiliable code + Tests
@
text
@d90 3
a92 3
  protected final String TEXT_71 = NL + "\t\tresult.setToolProperty(\"";
  protected final String TEXT_72 = "\", \"";
  protected final String TEXT_73 = "\");";
@


1.7
log
@Correct icons in wizards and palette: generate images, recognize relative paths, fix incorrect paths in wizard code;
Make it possible to nest palette groups
@
text
@d31 81
a111 69
  protected final String TEXT_12 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_13 = "(\"";
  protected final String TEXT_14 = "\");";
  protected final String TEXT_15 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_16 = "(\"";
  protected final String TEXT_17 = "\");";
  protected final String TEXT_18 = NL + "\t\tpaletteContainer.setDescription(\"";
  protected final String TEXT_19 = "\");";
  protected final String TEXT_20 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_21 = "());";
  protected final String TEXT_22 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_23 = "());";
  protected final String TEXT_24 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_26 = "() {" + NL + "\t\t";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = " smallImage = ";
  protected final String TEXT_29 = ".findImageDescriptor(\"";
  protected final String TEXT_30 = "\");" + NL + "\t\t";
  protected final String TEXT_31 = NL + "\t\t";
  protected final String TEXT_32 = " smallImage = getImageDescriptor(";
  protected final String TEXT_33 = "); " + NL + "\t\t";
  protected final String TEXT_34 = NL + "\t\t";
  protected final String TEXT_35 = " smallImage = null;" + NL + "\t\t";
  protected final String TEXT_36 = NL + "\t\t";
  protected final String TEXT_37 = NL + "\t\t";
  protected final String TEXT_38 = " largeImage = ";
  protected final String TEXT_39 = ".findImageDescriptor(\"";
  protected final String TEXT_40 = "\");" + NL + "\t\t";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = " largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_43 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_44 = NL + "\t\t\t";
  protected final String TEXT_45 = ".VISUAL_ID";
  protected final String TEXT_46 = ",";
  protected final String TEXT_47 = NL + "\t\t};";
  protected final String TEXT_48 = NL + "\t\tToolEntry result = new NodeToolEntry(\"";
  protected final String TEXT_49 = "\", \"";
  protected final String TEXT_50 = "\", smallImage, largeImage, visualIds);";
  protected final String TEXT_51 = NL + "\t\tToolEntry result = new LinkToolEntry(\"";
  protected final String TEXT_52 = "\", \"";
  protected final String TEXT_53 = "\", smallImage, largeImage, visualIds);";
  protected final String TEXT_54 = NL + "\t\tToolEntry result = new ToolEntry(\"";
  protected final String TEXT_55 = "\", \"";
  protected final String TEXT_56 = "\", smallImage, largeImage) {};";
  protected final String TEXT_57 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_58 = ".class);";
  protected final String TEXT_59 = NL + "\t\tresult.setToolProperty(\"";
  protected final String TEXT_60 = "\", \"";
  protected final String TEXT_61 = "\");";
  protected final String TEXT_62 = NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_63 = NL;
  protected final String TEXT_64 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class NodeToolEntry extends ";
  protected final String TEXT_65 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] myVisualIDs;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {" + NL + "\t\t\tsuper(title, description, new ";
  protected final String TEXT_66 = "(";
  protected final String TEXT_67 = ".class), smallIcon, largeIcon);" + NL + "\t\t\tmyVisualIDs = visualIDs;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool result = new CreationTool() {" + NL + "\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t";
  protected final String TEXT_68 = " request = new ";
  protected final String TEXT_69 = "(myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected void performCreation(int button) {" + NL + "\t\t\t\t\tsuper.performCreation(button);" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_70 = " createdEditPart = (";
  protected final String TEXT_71 = ")getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());" + NL + "\t\t\t\t\tif (createdEditPart != null) {" + NL + "\t\t\t\t\t\tgetCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tif (createdEditPart.isActive()) {" + NL + "\t\t\t\t\t\t\t\t\tcreatedEditPart.performRequest(new ";
  protected final String TEXT_72 = "(";
  protected final String TEXT_73 = ".REQ_DIRECT_EDIT));" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_74 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ConnectionCreationToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] myVisualIDs;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {" + NL + "\t\t\tsuper(title, description, new ";
  protected final String TEXT_75 = "(";
  protected final String TEXT_76 = ".class), smallIcon, largeIcon);" + NL + "\t\t\tmyVisualIDs = visualIDs;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool result = new ConnectionCreationTool() {" + NL + "\t\t\t\t{" + NL + "\t\t\t\t\tsetUnloadWhenFinished(true);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t";
  protected final String TEXT_77 = " request = new ";
  protected final String TEXT_78 = "(myVisualIDs);" + NL + "\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\treturn request;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImageDescriptor(Object o) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_80 = NL;
d180 3
d184 16
d201 1
a201 1
    stringBuffer.append(TEXT_13);
d203 9
a211 1
    stringBuffer.append(TEXT_14);
d213 1
a213 1
    stringBuffer.append(TEXT_15);
d215 1
a215 1
    stringBuffer.append(TEXT_16);
d217 1
a217 1
    stringBuffer.append(TEXT_17);
d220 1
a220 1
    stringBuffer.append(TEXT_18);
d222 1
a222 1
    stringBuffer.append(TEXT_19);
d230 1
a230 1
    stringBuffer.append(TEXT_20);
d232 1
a232 1
    stringBuffer.append(TEXT_21);
d235 5
d241 1
a241 1
    stringBuffer.append(TEXT_22);
d243 1
a243 1
    stringBuffer.append(TEXT_23);
d246 1
a246 1
    stringBuffer.append(TEXT_24);
d273 1
a273 1
    stringBuffer.append(TEXT_25);
d275 1
a275 1
    stringBuffer.append(TEXT_26);
d277 1
a277 1
    stringBuffer.append(TEXT_27);
d279 1
a279 1
    stringBuffer.append(TEXT_28);
d281 1
a281 1
    stringBuffer.append(TEXT_29);
d283 1
a283 1
    stringBuffer.append(TEXT_30);
d285 1
a285 1
    stringBuffer.append(TEXT_31);
d287 1
a287 1
    stringBuffer.append(TEXT_32);
d289 1
a289 1
    stringBuffer.append(TEXT_33);
d291 1
a291 1
    stringBuffer.append(TEXT_34);
d293 1
a293 1
    stringBuffer.append(TEXT_35);
d295 1
a295 1
    stringBuffer.append(TEXT_36);
d297 1
a297 1
    stringBuffer.append(TEXT_37);
d299 1
a299 1
    stringBuffer.append(TEXT_38);
d301 1
a301 1
    stringBuffer.append(TEXT_39);
d303 1
a303 1
    stringBuffer.append(TEXT_40);
d305 1
a305 1
    stringBuffer.append(TEXT_41);
d307 1
a307 1
    stringBuffer.append(TEXT_42);
d312 1
a312 1
    stringBuffer.append(TEXT_43);
d317 1
a317 1
    stringBuffer.append(TEXT_44);
d319 1
a319 1
    stringBuffer.append(TEXT_45);
d321 1
a321 1
    stringBuffer.append(TEXT_46);
d327 1
a327 1
    stringBuffer.append(TEXT_47);
d332 1
a332 1
    stringBuffer.append(TEXT_48);
d334 1
a334 1
    stringBuffer.append(TEXT_49);
d336 1
a336 1
    stringBuffer.append(TEXT_50);
d341 1
a341 1
    stringBuffer.append(TEXT_51);
d343 1
a343 1
    stringBuffer.append(TEXT_52);
d345 1
a345 1
    stringBuffer.append(TEXT_53);
d349 1
a349 1
    stringBuffer.append(TEXT_54);
d351 1
a351 1
    stringBuffer.append(TEXT_55);
d353 1
a353 1
    stringBuffer.append(TEXT_56);
d360 1
a360 1
    stringBuffer.append(TEXT_57);
d362 1
a362 1
    stringBuffer.append(TEXT_58);
d369 1
a369 1
    stringBuffer.append(TEXT_59);
d371 1
a371 1
    stringBuffer.append(TEXT_60);
d373 1
a373 1
    stringBuffer.append(TEXT_61);
d378 1
a378 1
    stringBuffer.append(TEXT_62);
d382 1
a382 1
    stringBuffer.append(TEXT_63);
d386 1
a386 1
    stringBuffer.append(TEXT_64);
d388 1
a388 1
    stringBuffer.append(TEXT_65);
d390 1
a390 1
    stringBuffer.append(TEXT_66);
d392 1
a392 1
    stringBuffer.append(TEXT_67);
d394 1
a394 1
    stringBuffer.append(TEXT_68);
d396 1
a396 1
    stringBuffer.append(TEXT_69);
d398 1
a398 1
    stringBuffer.append(TEXT_70);
d400 1
a400 1
    stringBuffer.append(TEXT_71);
d402 1
a402 1
    stringBuffer.append(TEXT_72);
d404 1
a404 1
    stringBuffer.append(TEXT_73);
d409 1
a409 1
    stringBuffer.append(TEXT_74);
d411 1
a411 1
    stringBuffer.append(TEXT_75);
d413 1
a413 1
    stringBuffer.append(TEXT_76);
d415 1
a415 1
    stringBuffer.append(TEXT_77);
d417 1
a417 1
    stringBuffer.append(TEXT_78);
d421 1
a421 1
    stringBuffer.append(TEXT_79);
d423 1
a423 1
    stringBuffer.append(TEXT_80);
@


1.6
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d27 52
a78 52
  protected final String TEXT_8 = "() {" + NL + "\t\tPaletteContainer paletteContainer = createContainer(\"";
  protected final String TEXT_9 = "\");";
  protected final String TEXT_10 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_11 = "());";
  protected final String TEXT_12 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_13 = "());";
  protected final String TEXT_14 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_16 = "() {" + NL + "\t\t";
  protected final String TEXT_17 = NL + "\t\tImageDescriptor smallImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_18 = ".class, \"";
  protected final String TEXT_19 = "\");" + NL + "\t\t";
  protected final String TEXT_20 = NL + "\t\tImageDescriptor smallImage = getImage(";
  protected final String TEXT_21 = ");" + NL + "\t\t";
  protected final String TEXT_22 = NL + "\t\t";
  protected final String TEXT_23 = NL + "\t\tImageDescriptor largeImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_24 = ".class, \"";
  protected final String TEXT_25 = "\");" + NL + "\t\t";
  protected final String TEXT_26 = NL + "\t\tImageDescriptor largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_27 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_28 = NL + "\t\t\t";
  protected final String TEXT_29 = ".VISUAL_ID";
  protected final String TEXT_30 = ",";
  protected final String TEXT_31 = "\t\t" + NL + "\t\t};" + NL + "\t\treturn new ";
  protected final String TEXT_32 = "(\"";
  protected final String TEXT_33 = "\", " + NL + "\t\t\t\"";
  protected final String TEXT_34 = "\", new ";
  protected final String TEXT_35 = "(";
  protected final String TEXT_36 = ".class), smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool result = new CreationTool() {" + NL + "\t\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_37 = " request = new ";
  protected final String TEXT_38 = "(visualIds);" + NL + "\t\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\t\treturn request;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected void performCreation(int button) {" + NL + "\t\t\t\t\t\tsuper.performCreation(button);" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_39 = " createdEditPart = (";
  protected final String TEXT_40 = ")getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());" + NL + "\t\t\t\t\t\tif (createdEditPart != null) {" + NL + "\t\t\t\t\t\t\tgetCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\t\tif (createdEditPart.isActive()) {" + NL + "\t\t\t\t\t\t\t\t\t\tcreatedEditPart.performRequest(new ";
  protected final String TEXT_41 = "(";
  protected final String TEXT_42 = ".REQ_DIRECT_EDIT));" + NL + "\t\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_44 = "() {" + NL + "\t\t";
  protected final String TEXT_45 = NL + "\t\tImageDescriptor smallImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_46 = ".class, \"";
  protected final String TEXT_47 = "\");" + NL + "\t\t";
  protected final String TEXT_48 = NL + "\t\tImageDescriptor smallImage = getImage(";
  protected final String TEXT_49 = ");" + NL + "\t\t";
  protected final String TEXT_50 = NL + "\t\t";
  protected final String TEXT_51 = NL + "\t\tImageDescriptor largeImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_52 = ".class, \"";
  protected final String TEXT_53 = "\");" + NL + "\t\t";
  protected final String TEXT_54 = NL + "\t\tImageDescriptor largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_55 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_56 = NL + "\t\t\t";
  protected final String TEXT_57 = ".VISUAL_ID";
  protected final String TEXT_58 = ",";
  protected final String TEXT_59 = "\t\t" + NL + "\t\t};" + NL + "\t\treturn new ConnectionCreationToolEntry(\"";
d80 20
a99 7
  protected final String TEXT_61 = "\", " + NL + "\t\t\tnew ";
  protected final String TEXT_62 = "(";
  protected final String TEXT_63 = ".class), smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool result = new ConnectionCreationTool() {" + NL + "\t\t\t\t\t{" + NL + "\t\t\t\t\t\tsetUnloadWhenFinished(true);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_64 = " request = new ";
  protected final String TEXT_65 = "(visualIds);" + NL + "\t\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\t\treturn request;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImage(Object o) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_67 = NL;
d128 3
d149 8
a156 4
final List nodeCreationTools = new ArrayList();
final List linkCreationTools = new ArrayList();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
d161 10
d172 13
a184 1
    stringBuffer.append(TEXT_9);
d186 2
a187 3
List tools = toolGroup.getEntries();
for (int j = 0; j < tools.size(); j++) {
	ToolGroupItem groupItem = (ToolGroupItem) tools.get(j);
d189 5
a193 9
			ToolEntry toolEntry = (ToolEntry) groupItem;
			if (!toolEntry.getGenNodes().isEmpty()) {
				nodeCreationTools.add(toolEntry);
			} else if (!toolEntry.getGenLinks().isEmpty()) {
				linkCreationTools.add(toolEntry);
			}
    stringBuffer.append(TEXT_10);
    stringBuffer.append(toolEntry.getCreateMethodName());
    stringBuffer.append(TEXT_11);
d195 1
a195 1
	/* FIXME */
d197 1
a197 1
    stringBuffer.append(TEXT_12);
d199 1
a199 1
    stringBuffer.append(TEXT_13);
d202 1
a202 1
    stringBuffer.append(TEXT_14);
d204 8
a211 5
}
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		ToolEntry nodeCreationTool = (ToolEntry) nodeCreationTools.get(j);
		List genNodes = nodeCreationTool.getGenNodes();
		GenNode firstGenNode = (GenNode) genNodes.get(0);
a212 1
		final String domainElementInstanceCreationCode;
d219 9
a228 20
    stringBuffer.append(TEXT_15);
    stringBuffer.append(nodeCreationTool.getCreateMethodName());
    stringBuffer.append(TEXT_16);
    if (nodeCreationTool.getSmallIconPath() != null) {
    stringBuffer.append(TEXT_17);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_18);
    stringBuffer.append(nodeCreationTool.getSmallIconPath());
    stringBuffer.append(TEXT_19);
    } else {
    stringBuffer.append(TEXT_20);
    stringBuffer.append(domainElementInstanceCreationCode);
    stringBuffer.append(TEXT_21);
    }
    stringBuffer.append(TEXT_22);
    if (nodeCreationTool.getLargeIconPath() != null) {
    stringBuffer.append(TEXT_23);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_24);
    stringBuffer.append(nodeCreationTool.getLargeIconPath());
d230 1
a230 1
    } else {
d232 1
a232 1
    }
d234 1
a234 4
    
		for (Iterator genNodesIterator = genNodes.iterator(); genNodesIterator.hasNext();) {
			GenNode nextNode = (GenNode) genNodesIterator.next();

d236 1
a236 1
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
d238 1
a238 1
    if (genNodesIterator.hasNext()) {
d240 1
a240 4
    }
    
		}

d242 1
a242 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.CombinedTemplateCreationEntry"));
d244 1
a244 1
    stringBuffer.append(nodeCreationTool.getTitle());
d246 1
a246 1
    stringBuffer.append(nodeCreationTool.getDescription());
d248 1
a248 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory"));
d250 1
a250 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d252 1
a252 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d254 1
a254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx"));
d256 1
a256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d258 1
a258 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d260 1
a260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d262 1
a262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d264 1
d266 1
a266 1
	}
d268 4
a271 13
	for (int j = 0; j < linkCreationTools.size(); j++) {
		ToolEntry linkCreationTool = (ToolEntry) linkCreationTools.get(j);
		List genLinks = linkCreationTool.getGenLinks();
		GenLink firstGenLink = (GenLink) genLinks.get(0);
		LinkModelFacet linkModelFacet = firstGenLink.getModelFacet();
		final String domainElementInstanceCreationCode;
		if (linkModelFacet instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) linkModelFacet;
			GenClass genClass = typeLinkModelFacet.getMetaClass();
			domainElementInstanceCreationCode = importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		} else {
			domainElementInstanceCreationCode = "null";
		}
a272 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(linkCreationTool.getCreateMethodName());
d274 1
a274 1
    if (linkCreationTool.getSmallIconPath() != null) {
d276 1
a276 1
    stringBuffer.append(palette.getFactoryClassName());
d278 5
a282 1
    stringBuffer.append(linkCreationTool.getSmallIconPath());
d284 4
a287 1
    } else {
d289 1
a289 1
    stringBuffer.append(domainElementInstanceCreationCode);
d291 1
a291 1
    }
d293 4
a296 1
    if (linkCreationTool.getLargeIconPath() != null) {
d298 1
a298 1
    stringBuffer.append(palette.getFactoryClassName());
d300 1
a300 1
    stringBuffer.append(linkCreationTool.getLargeIconPath());
d302 3
a304 1
    } else {
d306 1
a306 1
    }
d308 2
d311 4
a314 2
		for (Iterator genLinksIterator = genLinks.iterator(); genLinksIterator.hasNext();) {
			GenLink nextLink = (GenLink) genLinksIterator.next();
a315 2
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d317 1
a317 1
    if (genLinksIterator.hasNext()) {
a318 1
    }
d320 4
a323 1
		}
d326 1
a326 1
    stringBuffer.append(linkCreationTool.getTitle());
d328 1
a328 1
    stringBuffer.append(linkCreationTool.getDescription());
d330 15
d346 22
a367 1
    stringBuffer.append(TEXT_62);
d369 1
a369 1
    stringBuffer.append(TEXT_63);
d371 1
a371 1
    stringBuffer.append(TEXT_64);
d373 1
a373 1
    stringBuffer.append(TEXT_65);
d375 1
a375 1
	}
d377 1
a377 1
    stringBuffer.append(TEXT_66);
d379 1
a379 1
    stringBuffer.append(TEXT_67);
@


1.5
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@a99 1
importManager.addImport("org.eclipse.gef.requests.CreationFactory");
@


1.4
log
@[bblajer] #143686 getCreateNodeCommand returns null
@
text
@d53 34
a86 30
  protected final String TEXT_34 = "\", new ModelCreationFactory(";
  protected final String TEXT_35 = ".class), smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool result = new CreationTool() {" + NL + "\t\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t\tCreateRequestEx request = new CreateRequestEx(visualIds);" + NL + "\t\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\t\treturn request;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected void performCreation(int button) {" + NL + "\t\t\t\t\t\tsuper.performCreation(button);" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_36 = " createdEditPart = (";
  protected final String TEXT_37 = ")getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());" + NL + "\t\t\t\t\t\tif (createdEditPart != null) {" + NL + "\t\t\t\t\t\t\tgetCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\t\tif (createdEditPart.isActive()) {" + NL + "\t\t\t\t\t\t\t\t\t\tcreatedEditPart.performRequest(new ";
  protected final String TEXT_38 = "(";
  protected final String TEXT_39 = ".REQ_DIRECT_EDIT));" + NL + "\t\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_40 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_41 = "() {" + NL + "\t\t";
  protected final String TEXT_42 = NL + "\t\tImageDescriptor smallImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_43 = ".class, \"";
  protected final String TEXT_44 = "\");" + NL + "\t\t";
  protected final String TEXT_45 = NL + "\t\tImageDescriptor smallImage = getImage(";
  protected final String TEXT_46 = ");" + NL + "\t\t";
  protected final String TEXT_47 = NL + "\t\t";
  protected final String TEXT_48 = NL + "\t\tImageDescriptor largeImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_49 = ".class, \"";
  protected final String TEXT_50 = "\");" + NL + "\t\t";
  protected final String TEXT_51 = NL + "\t\tImageDescriptor largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_52 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_53 = NL + "\t\t\t";
  protected final String TEXT_54 = ".VISUAL_ID";
  protected final String TEXT_55 = ",";
  protected final String TEXT_56 = "\t\t" + NL + "\t\t};" + NL + "\t\treturn new ConnectionCreationToolEntry(\"";
  protected final String TEXT_57 = "\", \"";
  protected final String TEXT_58 = "\", " + NL + "\t\t\tnew ModelCreationFactory(";
  protected final String TEXT_59 = ".class), smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool result = new ConnectionCreationTool() {" + NL + "\t\t\t\t\t{" + NL + "\t\t\t\t\t\tsetUnloadWhenFinished(true);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t\tCreateConnectionRequestEx request = new CreateConnectionRequestEx(visualIds);" + NL + "\t\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\t\treturn request;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_60 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImage(Object o) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class CreateRequestEx extends ";
  protected final String TEXT_61 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] visualIds;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic CreateRequestEx(int[] visualIds) {" + NL + "\t\t\tthis.visualIds = visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int[] getVisualIds() {" + NL + "\t\t\treturn visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\t((ModelCreationFactory)getFactory()).setCreatedObject(createdObject);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class CreateConnectionRequestEx extends ";
  protected final String TEXT_62 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] visualIds;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic CreateConnectionRequestEx(int[] visualIds) {" + NL + "\t\t\tthis.visualIds = visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int[] getVisualIds() {" + NL + "\t\t\treturn visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\t((ModelCreationFactory)getFactory()).setCreatedObject(createdObject);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ModelCreationFactory implements CreationFactory {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Object createdObject;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Class createdObjectType;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ModelCreationFactory(Class objectType) {" + NL + "\t\t\tcreatedObjectType = objectType;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getNewObject() {" + NL + "\t\t\treturn createdObject;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getObjectType() {" + NL + "\t\t\treturn createdObjectType;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\tthis.createdObject = createdObject;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_63 = NL;
d227 2
d230 5
a234 1
    stringBuffer.append(TEXT_35);
d236 1
a236 1
    stringBuffer.append(TEXT_36);
d238 1
a238 1
    stringBuffer.append(TEXT_37);
d240 1
a240 1
    stringBuffer.append(TEXT_38);
d242 1
a242 1
    stringBuffer.append(TEXT_39);
d260 1
a260 1
    stringBuffer.append(TEXT_40);
d262 1
a262 1
    stringBuffer.append(TEXT_41);
d264 1
a264 1
    stringBuffer.append(TEXT_42);
d266 1
a266 1
    stringBuffer.append(TEXT_43);
d268 1
a268 1
    stringBuffer.append(TEXT_44);
d270 1
a270 1
    stringBuffer.append(TEXT_45);
d272 1
a272 1
    stringBuffer.append(TEXT_46);
d274 1
a274 1
    stringBuffer.append(TEXT_47);
d276 1
a276 1
    stringBuffer.append(TEXT_48);
d278 1
a278 1
    stringBuffer.append(TEXT_49);
d280 1
a280 1
    stringBuffer.append(TEXT_50);
d282 1
a282 1
    stringBuffer.append(TEXT_51);
d284 1
a284 1
    stringBuffer.append(TEXT_52);
d289 1
a289 1
    stringBuffer.append(TEXT_53);
d291 1
a291 1
    stringBuffer.append(TEXT_54);
d293 1
a293 1
    stringBuffer.append(TEXT_55);
d298 1
a298 1
    stringBuffer.append(TEXT_56);
d300 1
a300 1
    stringBuffer.append(TEXT_57);
d302 3
a304 1
    stringBuffer.append(TEXT_58);
d306 5
a310 1
    stringBuffer.append(TEXT_59);
d314 1
a314 5
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
    stringBuffer.append(TEXT_62);
d316 1
a316 1
    stringBuffer.append(TEXT_63);
@


1.3
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d81 1
a81 1
  protected final String TEXT_62 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] visualIds;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic CreateConnectionRequestEx(int[] visualIds) {" + NL + "\t\t\tthis.visualIds = visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int[] getVisualIds() {" + NL + "\t\t\treturn visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\t((ModelCreationFactory)getFactory()).setCreatedObject(createdObject);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ModelCreationFactory implements CreationFactory {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Object createdObject;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Class createdObjectType;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ModelCreationFactory(Class objectType) {" + NL + "\t\t\tcreatedObjectType = objectType;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getNewObject() {" + NL + "\t\t\treturn createdObject;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getObjectType() {" + NL + "\t\t\treturn createdObjectType;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\tthis.createdObject = createdObject;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
@


1.2
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d48 35
a82 33
  protected final String TEXT_29 = ",";
  protected final String TEXT_30 = "\t\t" + NL + "\t\t};" + NL + "\t\treturn new ";
  protected final String TEXT_31 = "(\"";
  protected final String TEXT_32 = "\", " + NL + "\t\t\t\"";
  protected final String TEXT_33 = "\", new ModelCreationFactory(";
  protected final String TEXT_34 = ".class), smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool result = new CreationTool() {" + NL + "\t\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t\tCreateRequestEx request = new CreateRequestEx(visualIds);" + NL + "\t\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\t\treturn request;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected void performCreation(int button) {" + NL + "\t\t\t\t\t\tsuper.performCreation(button);" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_35 = " createdEditPart = (";
  protected final String TEXT_36 = ")getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());" + NL + "\t\t\t\t\t\tif (createdEditPart != null) {" + NL + "\t\t\t\t\t\t\tgetCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\t\tif (createdEditPart.isActive()) {" + NL + "\t\t\t\t\t\t\t\t\t\tcreatedEditPart.performRequest(new ";
  protected final String TEXT_37 = "(";
  protected final String TEXT_38 = ".REQ_DIRECT_EDIT));" + NL + "\t\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_40 = "() {" + NL + "\t\t";
  protected final String TEXT_41 = NL + "\t\tImageDescriptor smallImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_42 = ".class, \"";
  protected final String TEXT_43 = "\");" + NL + "\t\t";
  protected final String TEXT_44 = NL + "\t\tImageDescriptor smallImage = getImage(";
  protected final String TEXT_45 = ");" + NL + "\t\t";
  protected final String TEXT_46 = NL + "\t\t";
  protected final String TEXT_47 = NL + "\t\tImageDescriptor largeImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_48 = ".class, \"";
  protected final String TEXT_49 = "\");" + NL + "\t\t";
  protected final String TEXT_50 = NL + "\t\tImageDescriptor largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_51 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_52 = NL + "\t\t\t";
  protected final String TEXT_53 = ",";
  protected final String TEXT_54 = "\t\t" + NL + "\t\t};" + NL + "\t\treturn new ConnectionCreationToolEntry(\"";
  protected final String TEXT_55 = "\", \"";
  protected final String TEXT_56 = "\", " + NL + "\t\t\tnew ModelCreationFactory(";
  protected final String TEXT_57 = ".class), smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool result = new ConnectionCreationTool() {" + NL + "\t\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t\tCreateConnectionRequestEx request = new CreateConnectionRequestEx(visualIds);" + NL + "\t\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\t\treturn request;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_58 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImage(Object o) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class CreateRequestEx extends ";
  protected final String TEXT_59 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] visualIds;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic CreateRequestEx(int[] visualIds) {" + NL + "\t\t\tthis.visualIds = visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int[] getVisualIds() {" + NL + "\t\t\treturn visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\t((ModelCreationFactory)getFactory()).setCreatedObject(createdObject);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class CreateConnectionRequestEx extends ";
  protected final String TEXT_60 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] visualIds;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic CreateConnectionRequestEx(int[] visualIds) {" + NL + "\t\t\tthis.visualIds = visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int[] getVisualIds() {" + NL + "\t\t\treturn visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\t((ModelCreationFactory)getFactory()).setCreatedObject(createdObject);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ModelCreationFactory implements CreationFactory {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Object createdObject;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Class createdObjectType;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ModelCreationFactory(Class objectType) {" + NL + "\t\t\tcreatedObjectType = objectType;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getNewObject() {" + NL + "\t\t\treturn createdObject;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getObjectType() {" + NL + "\t\t\treturn createdObjectType;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\tthis.createdObject = createdObject;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_61 = NL;
d208 2
a209 1
    stringBuffer.append(nextNode.getVisualID());
d211 1
a211 1
    stringBuffer.append(TEXT_29);
d216 1
a216 1
    stringBuffer.append(TEXT_30);
d218 1
a218 1
    stringBuffer.append(TEXT_31);
d220 1
a220 1
    stringBuffer.append(TEXT_32);
d222 1
a222 1
    stringBuffer.append(TEXT_33);
a223 2
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d227 2
d230 1
a230 1
    stringBuffer.append(TEXT_37);
d232 1
a232 1
    stringBuffer.append(TEXT_38);
d250 1
a250 1
    stringBuffer.append(TEXT_39);
d252 1
a252 1
    stringBuffer.append(TEXT_40);
d254 1
a254 1
    stringBuffer.append(TEXT_41);
d256 1
a256 1
    stringBuffer.append(TEXT_42);
d258 1
a258 1
    stringBuffer.append(TEXT_43);
d260 1
a260 1
    stringBuffer.append(TEXT_44);
d262 1
a262 1
    stringBuffer.append(TEXT_45);
d264 1
a264 1
    stringBuffer.append(TEXT_46);
d266 1
a266 1
    stringBuffer.append(TEXT_47);
d268 1
a268 1
    stringBuffer.append(TEXT_48);
d270 1
a270 1
    stringBuffer.append(TEXT_49);
d272 1
a272 1
    stringBuffer.append(TEXT_50);
d274 1
a274 1
    stringBuffer.append(TEXT_51);
d279 3
a281 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(nextLink.getVisualID());
d283 1
a283 1
    stringBuffer.append(TEXT_53);
d288 1
a288 1
    stringBuffer.append(TEXT_54);
d290 1
a290 1
    stringBuffer.append(TEXT_55);
d292 1
a292 1
    stringBuffer.append(TEXT_56);
d294 1
a294 1
    stringBuffer.append(TEXT_57);
d298 1
a298 1
    stringBuffer.append(TEXT_58);
d300 1
a300 1
    stringBuffer.append(TEXT_59);
d302 1
a302 1
    stringBuffer.append(TEXT_60);
d304 1
a304 1
    stringBuffer.append(TEXT_61);
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d33 48
a80 50
  protected final String TEXT_14 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_18 = "() {" + NL + "\t\t";
  protected final String TEXT_19 = NL + "\t\tImageDescriptor smallImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_20 = ".class, \"";
  protected final String TEXT_21 = "\");" + NL + "\t\t";
  protected final String TEXT_22 = NL + "\t\tImageDescriptor smallImage = getImage(";
  protected final String TEXT_23 = ");" + NL + "\t\t";
  protected final String TEXT_24 = NL + "\t\t";
  protected final String TEXT_25 = NL + "\t\tImageDescriptor largeImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_26 = ".class, \"";
  protected final String TEXT_27 = "\");" + NL + "\t\t";
  protected final String TEXT_28 = NL + "\t\tImageDescriptor largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_29 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_30 = NL + "\t\t\t";
  protected final String TEXT_31 = ",";
  protected final String TEXT_32 = "\t\t" + NL + "\t\t};" + NL + "\t\treturn new ";
  protected final String TEXT_33 = "(\"";
  protected final String TEXT_34 = "\", " + NL + "\t\t\t\"";
  protected final String TEXT_35 = "\", new ModelCreationFactory(";
  protected final String TEXT_36 = ".class), smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool result = new CreationTool() {" + NL + "\t\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t\tCreateRequestEx request = new CreateRequestEx(visualIds);" + NL + "\t\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\t\treturn request;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected void performCreation(int button) {" + NL + "\t\t\t\t\t\tsuper.performCreation(button);" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_37 = " createdEditPart = (";
  protected final String TEXT_38 = ")getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());" + NL + "\t\t\t\t\t\tif (createdEditPart != null) {" + NL + "\t\t\t\t\t\t\tgetCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\t\tif (createdEditPart.isActive()) {" + NL + "\t\t\t\t\t\t\t\t\t\tcreatedEditPart.performRequest(new ";
  protected final String TEXT_39 = "(";
  protected final String TEXT_40 = ".REQ_DIRECT_EDIT));" + NL + "\t\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_42 = "() {" + NL + "\t\t";
  protected final String TEXT_43 = NL + "\t\tImageDescriptor smallImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_44 = ".class, \"";
  protected final String TEXT_45 = "\");" + NL + "\t\t";
  protected final String TEXT_46 = NL + "\t\tImageDescriptor smallImage = getImage(";
  protected final String TEXT_47 = ");" + NL + "\t\t";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = NL + "\t\tImageDescriptor largeImage = ImageDescriptor.createFromFile(";
  protected final String TEXT_50 = ".class, \"";
  protected final String TEXT_51 = "\");" + NL + "\t\t";
  protected final String TEXT_52 = NL + "\t\tImageDescriptor largeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_53 = NL + "\t\tfinal int[] visualIds = new int[] {";
  protected final String TEXT_54 = NL + "\t\t\t";
  protected final String TEXT_55 = ",";
  protected final String TEXT_56 = "\t\t" + NL + "\t\t};" + NL + "\t\treturn new ConnectionCreationToolEntry(\"";
  protected final String TEXT_57 = "\", \"";
  protected final String TEXT_58 = "\", " + NL + "\t\t\tnew ModelCreationFactory(";
  protected final String TEXT_59 = ".class), smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool result = new ConnectionCreationTool() {" + NL + "\t\t\t\t\tprotected Request createTargetRequest() {" + NL + "\t\t\t\t\t\tCreateConnectionRequestEx request = new CreateConnectionRequestEx(visualIds);" + NL + "\t\t\t\t\t\trequest.setFactory(getFactory());" + NL + "\t\t\t\t\t\treturn request;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tresult.setProperties(getToolProperties());" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_60 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImage(Object o) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class CreateRequestEx extends ";
  protected final String TEXT_61 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] visualIds;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic CreateRequestEx(int[] visualIds) {" + NL + "\t\t\tthis.visualIds = visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int[] getVisualIds() {" + NL + "\t\t\treturn visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\t((ModelCreationFactory)getFactory()).setCreatedObject(createdObject);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class CreateConnectionRequestEx extends ";
  protected final String TEXT_62 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final int[] visualIds;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic CreateConnectionRequestEx(int[] visualIds) {" + NL + "\t\t\tthis.visualIds = visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int[] getVisualIds() {" + NL + "\t\t\treturn visualIds;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\t((ModelCreationFactory)getFactory()).setCreatedObject(createdObject);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ModelCreationFactory implements CreationFactory {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Object createdObject;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final Class createdObjectType;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ModelCreationFactory(Class objectType) {" + NL + "\t\t\tcreatedObjectType = objectType;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getNewObject() {" + NL + "\t\t\treturn createdObject;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getObjectType() {" + NL + "\t\t\treturn createdObjectType;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setCreatedObject(Object createdObject) {" + NL + "\t\t\tthis.createdObject = createdObject;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_63 = NL;
d128 2
d136 1
a136 1
    stringBuffer.append(toolGroup.getTitleKey());
d139 10
a148 4
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);

d150 1
a150 1
    stringBuffer.append(nodeCreationTool.getCreateMethodName());
d152 3
a154 6
    	}
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		if (j == 0) {

d158 2
a159 1
    		}
a160 4
    stringBuffer.append(linkCreationTool.getCreateMethodName());
    stringBuffer.append(TEXT_15);
    	}
    stringBuffer.append(TEXT_16);
a162 3
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
	List nodeCreationTools = toolGroup.getNodeTools();
d164 2
a165 2
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
		List genNodes = nodeCreationTool.getGenNode();
d176 1
a176 1
    stringBuffer.append(TEXT_17);
d178 1
a178 1
    stringBuffer.append(TEXT_18);
d180 1
a180 1
    stringBuffer.append(TEXT_19);
d182 1
a182 1
    stringBuffer.append(TEXT_20);
d184 1
a184 1
    stringBuffer.append(TEXT_21);
d186 1
a186 1
    stringBuffer.append(TEXT_22);
d188 1
a188 1
    stringBuffer.append(TEXT_23);
d190 1
a190 1
    stringBuffer.append(TEXT_24);
d192 1
a192 1
    stringBuffer.append(TEXT_25);
d194 1
a194 1
    stringBuffer.append(TEXT_26);
d196 1
a196 1
    stringBuffer.append(TEXT_27);
d198 1
a198 1
    stringBuffer.append(TEXT_28);
d200 1
a200 1
    stringBuffer.append(TEXT_29);
d205 1
a205 1
    stringBuffer.append(TEXT_30);
d208 1
a208 1
    stringBuffer.append(TEXT_31);
d213 4
d218 1
a218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.CombinedTemplateCreationEntry"));
d220 1
a220 1
    stringBuffer.append(nodeCreationTool.getTitleKey());
d222 1
a222 1
    stringBuffer.append(nodeCreationTool.getDescriptionKey());
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a229 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_40);
d232 1
a232 1
	List linkCreationTools = toolGroup.getLinkTools();
d234 2
a235 2
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		List genLinks = linkCreationTool.getGenLink();
d247 1
a247 1
    stringBuffer.append(TEXT_41);
d249 1
a249 1
    stringBuffer.append(TEXT_42);
d251 1
a251 1
    stringBuffer.append(TEXT_43);
d253 1
a253 1
    stringBuffer.append(TEXT_44);
d255 1
a255 1
    stringBuffer.append(TEXT_45);
d257 1
a257 1
    stringBuffer.append(TEXT_46);
d259 1
a259 1
    stringBuffer.append(TEXT_47);
d261 1
a261 1
    stringBuffer.append(TEXT_48);
d263 1
a263 1
    stringBuffer.append(TEXT_49);
d265 1
a265 1
    stringBuffer.append(TEXT_50);
d267 1
a267 1
    stringBuffer.append(TEXT_51);
d269 1
a269 1
    stringBuffer.append(TEXT_52);
d271 1
a271 1
    stringBuffer.append(TEXT_53);
d276 1
a276 1
    stringBuffer.append(TEXT_54);
d279 1
a279 1
    stringBuffer.append(TEXT_55);
d284 4
d289 1
a289 1
    stringBuffer.append(linkCreationTool.getTitleKey());
a290 4
    stringBuffer.append(linkCreationTool.getDescriptionKey());
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_59);
a292 1
}
d294 1
a294 1
    stringBuffer.append(TEXT_60);
d296 1
a296 1
    stringBuffer.append(TEXT_61);
d298 1
a298 1
    stringBuffer.append(TEXT_62);
d300 1
a300 1
    stringBuffer.append(TEXT_63);
@

