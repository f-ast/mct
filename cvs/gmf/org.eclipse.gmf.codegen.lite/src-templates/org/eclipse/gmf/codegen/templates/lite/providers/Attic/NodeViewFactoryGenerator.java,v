head	1.6;
access;
symbols
	v20080910-1520:1.6
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.4
	v20061005-1700:1.2.2.1
	M1_20:1.3
	v20060904-1500:1.3
	v20060824-1600:1.2.2.1
	v20060713-1700:1.2.2.1
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.02.08.16.35.07;	author bblajer;	state dead;
branches;
next	1.5;
commitid	4b245cb513a4567;

1.5
date	2006.11.09.18.15.43;	author bblajer;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.04.16.14.20;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;

1.2.2.1
date	2006.07.04.16.05.51;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Rewritten View factories using xpand;
[173476]: Respect label offset attributes when generating code
@
text
@package org.eclipse.gmf.codegen.templates.lite.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import java.util.*;

public class NodeViewFactoryGenerator
{
  protected static String nl;
  public static synchronized NodeViewFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NodeViewFactoryGenerator result = new NodeViewFactoryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " implements ";
  protected final String TEXT_6 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_7 = " INSTANCE = new ";
  protected final String TEXT_8 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void decorateView(";
  protected final String TEXT_9 = " view) {" + NL + "\t\tif (view.eIsSet(";
  protected final String TEXT_10 = ".eINSTANCE.getView_Type())) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = "view.setType(";
  protected final String TEXT_13 = ".getType(";
  protected final String TEXT_14 = ".VISUAL_ID));" + NL + "\t\t";
  protected final String TEXT_15 = " style = ";
  protected final String TEXT_16 = ".eINSTANCE.createShapeStyle();" + NL + "\t\tview.getStyles().add(style);" + NL + "\t\t//XXX: init styles from attributes!!!";
  protected final String TEXT_17 = NL + "\t\tcreate";
  protected final String TEXT_18 = "Label(view);";
  protected final String TEXT_19 = NL + "\t\tcreate";
  protected final String TEXT_20 = "Compartment(view);";
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = NL + "\t\t";
  protected final String TEXT_23 = " diagramFacet = ";
  protected final String TEXT_24 = ".eINSTANCE.createEAnnotation();" + NL + "\t\tdiagramFacet.setSource(\"";
  protected final String TEXT_25 = "\");" + NL + "\t\tview.getEAnnotations().add(diagramFacet);";
  protected final String TEXT_26 = NL + "\t}" + NL;
  protected final String TEXT_27 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_28 = "Label(";
  protected final String TEXT_29 = " view) {" + NL + "\t\t";
  protected final String TEXT_30 = " label = ";
  protected final String TEXT_31 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(label);" + NL + "\t\t";
  protected final String TEXT_32 = ".INSTANCE.decorateView(label);" + NL + "\t}";
  protected final String TEXT_33 = NL;
  protected final String TEXT_34 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_35 = "Compartment(";
  protected final String TEXT_36 = " view) {" + NL + "\t\t";
  protected final String TEXT_37 = " compartment = ";
  protected final String TEXT_38 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(compartment);" + NL + "\t\t";
  protected final String TEXT_39 = ".INSTANCE.decorateView(compartment);" + NL + "\t}";
  protected final String TEXT_40 = NL + "}";
  protected final String TEXT_41 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenNode genElement = (GenNode) ((Object[]) argument)[0];
GenDiagram genDiagram = genElement.getDiagram();
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_4);
    stringBuffer.append(genElement.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.IViewDecorator"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genElement.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genElement.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genElement.getDiagram().getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(genElement.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.ShapeStyle"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_16);
    
for (Iterator it = genElement.getLabels().iterator(); it.hasNext(); ) {
	GenNodeLabel label = (GenNodeLabel) it.next();

    stringBuffer.append(TEXT_17);
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_18);
    
}/*iterate over labels*/

    
for (Iterator it = genElement.getCompartments().iterator(); it.hasNext(); ) {
	GenCompartment compartment = (GenCompartment) it.next();

    stringBuffer.append(TEXT_19);
    stringBuffer.append(compartment.getVisualID());
    stringBuffer.append(TEXT_20);
    
}/*iterate over compartments*/

    stringBuffer.append(TEXT_21);
    
if (genElement.getBehaviour(OpenDiagramBehaviour.class).size() == 1) {

    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(org.eclipse.gmf.codegen.gmfgen.impl.OpenDiagramBehaviourImpl.ANNOTATION_SOURCE);
    stringBuffer.append(TEXT_25);
    
}

    stringBuffer.append(TEXT_26);
    
for (Iterator it = genElement.getLabels().iterator(); it.hasNext(); ) {
	GenNodeLabel label = (GenNodeLabel) it.next();

    stringBuffer.append(TEXT_27);
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_32);
    
}/*iterate over labels*/

    stringBuffer.append(TEXT_33);
    
for (Iterator it = genElement.getCompartments().iterator(); it.hasNext(); ) {
	GenCompartment compartment = (GenCompartment) it.next();

    stringBuffer.append(TEXT_34);
    stringBuffer.append(compartment.getVisualID());
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName(compartment.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_39);
    
}/*iterate over compartments*/

    stringBuffer.append(TEXT_40);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_41);
    return stringBuffer.toString();
  }
}
@


1.5
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@@


1.4
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d27 33
a59 27
  protected final String TEXT_9 = " view) {";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = "view.setType(";
  protected final String TEXT_12 = ".getType(";
  protected final String TEXT_13 = ".VISUAL_ID));" + NL + "\t\t";
  protected final String TEXT_14 = " style = ";
  protected final String TEXT_15 = ".eINSTANCE.createShapeStyle();" + NL + "\t\tview.getStyles().add(style);" + NL + "\t\t//XXX: init styles from attributes!!!";
  protected final String TEXT_16 = NL + "\t\tcreate";
  protected final String TEXT_17 = "Label(view);";
  protected final String TEXT_18 = NL + "\t\tcreate";
  protected final String TEXT_19 = "Compartment(view);";
  protected final String TEXT_20 = NL + "\t}" + NL;
  protected final String TEXT_21 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_22 = "Label(";
  protected final String TEXT_23 = " view) {" + NL + "\t\t";
  protected final String TEXT_24 = " label = ";
  protected final String TEXT_25 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(label);" + NL + "\t\t";
  protected final String TEXT_26 = ".INSTANCE.decorateView(label);" + NL + "\t}";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_29 = "Compartment(";
  protected final String TEXT_30 = " view) {" + NL + "\t\t";
  protected final String TEXT_31 = " compartment = ";
  protected final String TEXT_32 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(compartment);" + NL + "\t\t";
  protected final String TEXT_33 = ".INSTANCE.decorateView(compartment);" + NL + "\t}";
  protected final String TEXT_34 = NL + "}";
  protected final String TEXT_35 = NL;
d93 1
d96 1
d98 1
a98 1
    stringBuffer.append(TEXT_12);
d100 1
a100 1
    stringBuffer.append(TEXT_13);
d102 1
a102 1
    stringBuffer.append(TEXT_14);
d104 1
a104 1
    stringBuffer.append(TEXT_15);
d109 1
a109 1
    stringBuffer.append(TEXT_16);
d111 1
a111 1
    stringBuffer.append(TEXT_17);
d119 1
a119 1
    stringBuffer.append(TEXT_18);
d121 1
a121 1
    stringBuffer.append(TEXT_19);
d125 15
a139 1
    stringBuffer.append(TEXT_20);
d144 1
a144 1
    stringBuffer.append(TEXT_21);
d146 1
a146 1
    stringBuffer.append(TEXT_22);
d148 1
a148 1
    stringBuffer.append(TEXT_23);
d150 1
a150 1
    stringBuffer.append(TEXT_24);
d152 1
a152 1
    stringBuffer.append(TEXT_25);
d154 1
a154 1
    stringBuffer.append(TEXT_26);
d158 1
a158 1
    stringBuffer.append(TEXT_27);
d163 1
a163 1
    stringBuffer.append(TEXT_28);
d165 1
a165 1
    stringBuffer.append(TEXT_29);
d167 1
a167 1
    stringBuffer.append(TEXT_30);
d169 1
a169 1
    stringBuffer.append(TEXT_31);
d171 1
a171 1
    stringBuffer.append(TEXT_32);
d173 1
a173 1
    stringBuffer.append(TEXT_33);
d177 1
a177 1
    stringBuffer.append(TEXT_34);
d179 1
a179 1
    stringBuffer.append(TEXT_35);
@


1.3
log
@[bblajer] #149579 Lite Generator [File format]: Compartments and labels should have element feature unset
@
text
@d23 31
a53 28
  protected final String TEXT_5 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void decorateView(";
  protected final String TEXT_6 = " view) {";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = "view.setType(";
  protected final String TEXT_9 = ".getType(";
  protected final String TEXT_10 = ".VISUAL_ID));" + NL + "\t\t";
  protected final String TEXT_11 = " style = ";
  protected final String TEXT_12 = ".eINSTANCE.createShapeStyle();" + NL + "\t\tview.getStyles().add(style);" + NL + "\t\t//XXX: init styles from attributes!!!";
  protected final String TEXT_13 = NL + "\t\tcreate";
  protected final String TEXT_14 = "Label(view);";
  protected final String TEXT_15 = NL + "\t\tcreate";
  protected final String TEXT_16 = "Compartment(view);";
  protected final String TEXT_17 = NL + "\t}" + NL;
  protected final String TEXT_18 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void create";
  protected final String TEXT_19 = "Label(";
  protected final String TEXT_20 = " view) {" + NL + "\t\t";
  protected final String TEXT_21 = " label = ";
  protected final String TEXT_22 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(label);" + NL + "\t\t";
  protected final String TEXT_23 = ".decorateView(label);" + NL + "\t}";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void create";
  protected final String TEXT_26 = "Compartment(";
  protected final String TEXT_27 = " view) {" + NL + "\t\t";
  protected final String TEXT_28 = " compartment = ";
  protected final String TEXT_29 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(compartment);" + NL + "\t\t";
  protected final String TEXT_30 = ".decorateView(compartment);" + NL + "\t}";
  protected final String TEXT_31 = NL + "}";
  protected final String TEXT_32 = NL;
d79 1
a79 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d81 1
d83 1
d85 4
d90 1
a90 1
    stringBuffer.append(TEXT_9);
d92 1
a92 1
    stringBuffer.append(TEXT_10);
d94 1
a94 1
    stringBuffer.append(TEXT_11);
d96 1
a96 1
    stringBuffer.append(TEXT_12);
d101 1
a101 1
    stringBuffer.append(TEXT_13);
d103 1
a103 1
    stringBuffer.append(TEXT_14);
d111 1
a111 1
    stringBuffer.append(TEXT_15);
d113 1
a113 1
    stringBuffer.append(TEXT_16);
d117 1
a117 1
    stringBuffer.append(TEXT_17);
d122 1
a122 1
    stringBuffer.append(TEXT_18);
d124 1
a124 1
    stringBuffer.append(TEXT_19);
d126 1
a126 1
    stringBuffer.append(TEXT_20);
d128 1
a128 1
    stringBuffer.append(TEXT_21);
d130 1
a130 1
    stringBuffer.append(TEXT_22);
d132 1
a132 1
    stringBuffer.append(TEXT_23);
d136 1
a136 1
    stringBuffer.append(TEXT_24);
d141 1
a141 1
    stringBuffer.append(TEXT_25);
d143 1
a143 1
    stringBuffer.append(TEXT_26);
d145 1
a145 1
    stringBuffer.append(TEXT_27);
d147 1
a147 1
    stringBuffer.append(TEXT_28);
d149 1
a149 1
    stringBuffer.append(TEXT_29);
d151 1
a151 1
    stringBuffer.append(TEXT_30);
d155 1
a155 1
    stringBuffer.append(TEXT_31);
d157 1
a157 1
    stringBuffer.append(TEXT_32);
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d40 1
a40 1
  protected final String TEXT_22 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(label);" + NL + "\t\tlabel.setElement(null);" + NL + "\t\t";
d47 1
a47 1
  protected final String TEXT_29 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(compartment);" + NL + "\t\tcompartment.setElement(null);" + NL + "\t\t";
@


1.2.2.1
log
@[bblajer] #149579 Lite Generator [File format]: Compartments and labels should have element feature unset
@
text
@d40 1
a40 1
  protected final String TEXT_22 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(label);" + NL + "\t\t";
d47 1
a47 1
  protected final String TEXT_29 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(compartment);" + NL + "\t\t";
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d26 25
a50 26
  protected final String TEXT_8 = " annotation = ";
  protected final String TEXT_9 = ".eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"modelID\", \"";
  protected final String TEXT_10 = "\"); //$NON-NLS-1$" + NL + "annotation.getDetails().put(\"visualID\", \"";
  protected final String TEXT_11 = "\"); //$NON-NLS-1$" + NL + "\t\t";
  protected final String TEXT_12 = " style = ";
  protected final String TEXT_13 = ".eINSTANCE.createShapeStyle();" + NL + "\t\tview.getStyles().add(style);" + NL + "\t\t//XXX: init styles from attributes!!!";
  protected final String TEXT_14 = NL + "\t\tcreate";
  protected final String TEXT_15 = "Label(view);";
  protected final String TEXT_16 = NL + "\t\tcreate";
  protected final String TEXT_17 = "Compartment(view);";
  protected final String TEXT_18 = NL + "\t}" + NL;
  protected final String TEXT_19 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void create";
  protected final String TEXT_20 = "Label(";
  protected final String TEXT_21 = " view) {" + NL + "\t\t";
  protected final String TEXT_22 = " label = ";
  protected final String TEXT_23 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(label);" + NL + "\t\tlabel.setElement(null);" + NL + "\t\t";
  protected final String TEXT_24 = ".decorateView(label);" + NL + "\t}";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void create";
  protected final String TEXT_27 = "Compartment(";
  protected final String TEXT_28 = " view) {" + NL + "\t\t";
  protected final String TEXT_29 = " compartment = ";
  protected final String TEXT_30 = ".eINSTANCE.createNode();" + NL + "\t\tview.getPersistedChildren().add(compartment);" + NL + "\t\tcompartment.setElement(null);" + NL + "\t\t";
  protected final String TEXT_31 = ".decorateView(compartment);" + NL + "\t}";
  protected final String TEXT_32 = NL + "}";
  protected final String TEXT_33 = NL;
a78 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d80 1
a80 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
d82 1
a82 1
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
d84 1
a84 1
    stringBuffer.append(genElement.getVisualID());
d86 1
a86 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.ShapeStyle"));
a87 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_13);
d92 2
a94 2
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_15);
d102 2
a104 2
    stringBuffer.append(compartment.getVisualID());
    stringBuffer.append(TEXT_17);
d108 1
a108 1
    stringBuffer.append(TEXT_18);
d113 2
d116 1
a116 1
    stringBuffer.append(label.getVisualID());
d118 1
a118 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d120 1
a120 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d122 1
a122 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
a123 2
    stringBuffer.append(importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_24);
d127 1
a127 1
    stringBuffer.append(TEXT_25);
d132 2
d135 1
a135 1
    stringBuffer.append(compartment.getVisualID());
d137 1
a137 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d139 1
a139 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d141 1
a141 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
a142 2
    stringBuffer.append(importManager.getImportedName(compartment.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_31);
d146 2
a148 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_33);
@

