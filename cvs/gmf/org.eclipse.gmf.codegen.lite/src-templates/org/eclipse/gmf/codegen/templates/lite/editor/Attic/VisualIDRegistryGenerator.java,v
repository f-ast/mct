head	1.10;
access;
symbols
	v20080910-1520:1.10
	v20070525-1500:1.9
	v20070520-1200:1.9
	v20070518-1300:1.8
	v20070504-1000:1.8
	v20070427-0600:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070405-1100:1.7
	v20070403-1500:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070307-0700:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.7
	v20061214-0000:1.7
	v20061120-1300:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061013-1330:1.7
	v20061005-1700:1.5
	M1_20:1.6
	v20060904-1500:1.6
	v20060824-1600:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.05.29.14.55.32;	author bblajer;	state dead;
branches;
next	1.9;
commitid	2543465c3ee24567;

1.9
date	2007.05.20.12.55.36;	author mfeldman;	state Exp;
branches;
next	1.8;
commitid	7d1d465045114567;

1.8
date	2007.05.03.14.45.19;	author bblajer;	state Exp;
branches;
next	1.7;
commitid	510b4639f57c4567;

1.7
date	2006.09.06.20.09.23;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.02.10.43.52;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.14.13.56.41;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.13.12.53.40;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.31.15.54.57;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.48;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Rewrite some templates with XPand;
Adopt VisualIDRegistry from full RT.
@
text
@package org.eclipse.gmf.codegen.templates.lite.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import java.util.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;

public class VisualIDRegistryGenerator
{
  protected static String nl;
  public static synchronized VisualIDRegistryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    VisualIDRegistryGenerator result = new VisualIDRegistryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * This registry is used to determine which type of visual object should be" + NL + " * created for the corresponding Diagram, Node, ChildNode or Link represented " + NL + " * by a domain model object. Note that it only returns semantically complete objects (those who must have an element associated with them)." + NL + " *" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_5 = " INSTANCE = new ";
  protected final String TEXT_6 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(View view) {" + NL + "\t\tif (view instanceof Diagram) {" + NL + "\t\t\tif (";
  protected final String TEXT_7 = ".MODEL_ID.equals(view.getType())) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_8 = ".VISUAL_ID;" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getVisualID(view.getType());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getModelID(View view) {" + NL + "\t\tView diagram = view.getDiagram();" + NL + "\t\twhile (view != diagram) {" + NL + "\t\t\t";
  protected final String TEXT_9 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tview = (View) view.eContainer();" + NL + "\t\t}" + NL + "\t\treturn diagram != null ? diagram.getType() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(String type) {" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(type);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_10 = ".getInstance().logInfo(\"Unable to parse view type as a visualID number: \" + type);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getType(int visualID) {" + NL + "\t\treturn String.valueOf(visualID);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_11 = NL + "\t\tif (";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "().equals(domainElementMetaclass) && isDiagram";
  protected final String TEXT_14 = "((";
  protected final String TEXT_15 = ") domainElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_16 = ".VISUAL_ID;" + NL + "\t\t}";
  protected final String TEXT_17 = NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!";
  protected final String TEXT_18 = ".MODEL_ID.equals(containerModelID)) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tint containerVisualID;" + NL + "\t\tif (";
  protected final String TEXT_19 = ".MODEL_ID.equals(containerModelID)) {" + NL + "\t\t\tcontainerVisualID = getVisualID(containerView);" + NL + "\t\t} else {" + NL + "\t\t\tif (containerView instanceof Diagram) {" + NL + "\t\t\t\tcontainerVisualID = ";
  protected final String TEXT_20 = ".VISUAL_ID;" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tswitch (containerVisualID) {";
  protected final String TEXT_21 = NL + "\t\tcase ";
  protected final String TEXT_22 = ".VISUAL_ID:";
  protected final String TEXT_23 = NL + "\t\t\tif (";
  protected final String TEXT_24 = ".eINSTANCE.get";
  protected final String TEXT_25 = "().isSuperTypeOf(domainElementMetaclass) && isNode";
  protected final String TEXT_26 = "((";
  protected final String TEXT_27 = ") domainElement)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_28 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_29 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_30 = "ChildNodeID(domainElement);";
  protected final String TEXT_31 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_32 = NL + "\t\tif (";
  protected final String TEXT_33 = ".eINSTANCE.get";
  protected final String TEXT_34 = "().isSuperTypeOf(domainElementMetaclass) && isLinkWithClass";
  protected final String TEXT_35 = "((";
  protected final String TEXT_36 = ") domainElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_37 = ".VISUAL_ID;" + NL + "\t\t}";
  protected final String TEXT_38 = NL + "\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t}" + NL;
  protected final String TEXT_39 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_40 = "(";
  protected final String TEXT_41 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_42 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_44 = "(";
  protected final String TEXT_45 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_46 = ".matches(element)";
  protected final String TEXT_47 = "true";
  protected final String TEXT_48 = ";" + NL + "\t}";
  protected final String TEXT_49 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_50 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_51 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_52 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_53 = "(";
  protected final String TEXT_54 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_55 = ".matches(element)";
  protected final String TEXT_56 = "true";
  protected final String TEXT_57 = ";" + NL + "\t}";
  protected final String TEXT_58 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final ";
  protected final String TEXT_59 = " ";
  protected final String TEXT_60 = " = new ";
  protected final String TEXT_61 = "(";
  protected final String TEXT_62 = "null";
  protected final String TEXT_63 = ".";
  protected final String TEXT_64 = "(";
  protected final String TEXT_65 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_66 = ", ";
  protected final String TEXT_67 = ")";
  protected final String TEXT_68 = ".";
  protected final String TEXT_69 = "(";
  protected final String TEXT_70 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_71 = ")";
  protected final String TEXT_72 = "new ";
  protected final String TEXT_73 = "(";
  protected final String TEXT_74 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_75 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_76 = " self = (";
  protected final String TEXT_77 = ")context;";
  protected final String TEXT_78 = "\t" + NL + "\t\t";
  protected final String TEXT_79 = " ";
  protected final String TEXT_80 = " = (";
  protected final String TEXT_81 = ")env.get(\"";
  protected final String TEXT_82 = "\"); //$NON-NLS-1$";
  protected final String TEXT_83 = NL + "\t\treturn ";
  protected final String TEXT_84 = ".";
  protected final String TEXT_85 = "(self";
  protected final String TEXT_86 = ", ";
  protected final String TEXT_87 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_88 = NL + ");";
  protected final String TEXT_89 = "\t\t\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic class ";
  protected final String TEXT_90 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_91 = " condition;" + NL + "\t\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t" + NL + "\t\t";
  protected final String TEXT_92 = "(";
  protected final String TEXT_93 = " conditionExpression) {\t\t\t" + NL + "\t\t\tthis.condition = conditionExpression;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tboolean matches(EObject object) {" + NL + "\t\t\tObject result = condition.evaluate(object);" + NL + "\t\t\treturn result instanceof Boolean && ((Boolean)result).booleanValue();\t\t\t" + NL + "\t\t}" + NL + "\t}// ";
  protected final String TEXT_94 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private static class ";
  protected final String TEXT_95 = " {";
  protected final String TEXT_96 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_97 = " ";
  protected final String TEXT_98 = "(";
  protected final String TEXT_99 = " self";
  protected final String TEXT_100 = ", ";
  protected final String TEXT_101 = " ";
  protected final String TEXT_102 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_103 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_104 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_105 = NL + "\t}// ";
  protected final String TEXT_106 = NL + "}" + NL + "\t";
  protected final String TEXT_107 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);

final String matcherClassName = "Matcher";
final String javaMatcherContainer = "JavaMatchers";
importManager.registerInnerClass(matcherClassName);
importManager.registerInnerClass(javaMatcherContainer);

importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_3);
    stringBuffer.append(genDiagram.getVisualIDRegistryClassName());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getVisualIDRegistryClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getVisualIDRegistryClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_10);
    
if (genDiagram.getDomainDiagramElement() != null) {	/*we do not support diagrams without domain elements in other places, but keep this copy-pasted occurrence*/
	String classifierAccessorName = genDiagram.getDomainDiagramElement().getClassifierAccessorName();
	String interfaceName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_11);
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(classifierAccessorName);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_14);
    stringBuffer.append(interfaceName);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    }
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_20);
    
List nodeContainers = genDiagram.getAllContainers();
for(Iterator it = nodeContainers.iterator(); it.hasNext(); ) {
	GenContainerBase nextContainer = (GenContainerBase) it.next();
	if (nextContainer.getContainedNodes().isEmpty()) {
		continue;
	}

    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName(nextContainer.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_22);
    
	for (Iterator childNodes = nextContainer.getContainedNodes().iterator(); childNodes.hasNext(); ) {
		GenNode childNode = (GenNode) childNodes.next();
		final String classifierAccessorName = childNode.getDomainMetaClass().getClassifierAccessorName();
		final String interfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getQualifiedInterfaceName());
		final String semanticPackageInterfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()); 

    stringBuffer.append(TEXT_23);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(classifierAccessorName);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(childNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_26);
    stringBuffer.append(interfaceName);
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName(childNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_28);
    
	}

    stringBuffer.append(TEXT_29);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_30);
    
}

    stringBuffer.append(TEXT_31);
    
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink) it.next();
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		final TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		final String semanticLinkInterfaceName = modelFacet.getMetaClass().getClassifierAccessorName();
		final String interfaceName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());
		final String semanticPackageInterfaceName = importManager.getImportedName(modelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());

    stringBuffer.append(TEXT_32);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_34);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_35);
    stringBuffer.append(interfaceName);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_37);
    
	}
}

    stringBuffer.append(TEXT_38);
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_39);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_41);
    }
    stringBuffer.append(TEXT_42);
    
for (Iterator nodes = genDiagram.getAllNodes().iterator(); nodes.hasNext();) {
	GenNode nextNode = (GenNode) nodes.next();
	if (nextNode.getModelFacet() == null) {
		continue;
	}
	String childNodeInterfaceName = importManager.getImportedName(nextNode.getDomainMetaClass().getQualifiedInterfaceName());
	boolean callMatcher = nextNode.getModelFacet() != null && nextNode.getModelFacet().getModelElementSelector() != null;

    stringBuffer.append(TEXT_43);
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_44);
    stringBuffer.append(childNodeInterfaceName);
    stringBuffer.append(TEXT_45);
    if (callMatcher) {
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_46);
    } else {
    stringBuffer.append(TEXT_47);
    }
    stringBuffer.append(TEXT_48);
    
}
for (Iterator containers = nodeContainers.iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();
	if (nextContainer.getContainedNodes().isEmpty()) {
		continue;
	}

    stringBuffer.append(TEXT_49);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_50);
    
}

    stringBuffer.append(TEXT_51);
    
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink) it.next();
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		String interfaceName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());
		boolean callMatcher = modelFacet.getModelElementSelector() != null;		

    stringBuffer.append(TEXT_52);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_53);
    stringBuffer.append(interfaceName);
    stringBuffer.append(TEXT_54);
    if (callMatcher) {
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_55);
    } else {
    stringBuffer.append(TEXT_56);
    }
    stringBuffer.append(TEXT_57);
    
	}
}


final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final List javaSelectorFacets = new ArrayList();
final Map __exprEnvVariables = Collections.EMPTY_MAP;
final String __outEnvVarName = null; // no custom env
final String __javaOperationContainer = javaMatcherContainer; // put method here

int selectorCounter = 0;
for (Iterator it = genDiagram.eAllContents(); it.hasNext() && expressionProviders != null;) {
	Object next = it.next();
	String id = null;
	TypeModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink && ((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
	}
	if (modelFacet == null || modelFacet.getModelElementSelector() == null || modelFacet.getMetaClass() == null) {
		continue;
	}
	GenConstraint selector = modelFacet.getModelElementSelector();
	selectorCounter++;
	// setup expression factory
	ValueExpression __genValueExpression = selector;
	GenClassifier __genExprContext = modelFacet.getMetaClass();
	GenExpressionProviderBase expressionProvider = expressionProviders.getProvider(__genValueExpression); 
	if(expressionProvider instanceof GenJavaExpressionProvider && !expressionProviders.isCopy(__genValueExpression)) {
		// skipping duplicates coming from reused node mappings 
		javaSelectorFacets.add(modelFacet);
	}

    stringBuffer.append(TEXT_58);
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_60);
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_61);
    
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {

    stringBuffer.append(TEXT_62);
    
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_64);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_65);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_67);
    
		} else { 		

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_70);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_71);
    
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	


    stringBuffer.append(TEXT_72);
    stringBuffer.append(__importedAbstractClass);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_77);
    	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_82);
    		} 
    stringBuffer.append(TEXT_83);
    
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { 
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_84);
    
		} 
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_85);
    
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){
    stringBuffer.append(TEXT_86);
    stringBuffer.append((String)envVarIt.next());
    }
    stringBuffer.append(TEXT_87);
    }
    } /*end of scope*/
    stringBuffer.append(TEXT_88);
    
} /* end of selector interation */

if(selectorCounter > 0) { 
    stringBuffer.append(TEXT_89);
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(matcherClassName);
    
	if(!javaSelectorFacets.isEmpty()) {

    stringBuffer.append(TEXT_94);
    stringBuffer.append(javaMatcherContainer);
    stringBuffer.append(TEXT_95);
    
		for(Iterator it = javaSelectorFacets.iterator(); it.hasNext();) {
			TypeModelFacet modelFacet = (TypeModelFacet) it.next();
			ValueExpression __genValueExpression = modelFacet.getModelElementSelector();
			GenClassifier __genExprContext = modelFacet.getMetaClass();
			String __genExprResultType = "java.lang.Boolean"; //$NON-NLS-1$

    
/* 
ValueExpression __genValueExpression
java.util.Map __exprEnvVariables
GenClassifier __genExprContext
GenClassifier || String/qualifiedClassName/__genExprResultType
*/
org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) {
	String __importedAbstractExpr = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());
	String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
	// support GenClassifier and also String based qualified java class name
	Object __genExprResultTypeObj = __genExprResultType;
	String __exprResultTypeQualifiedName = null;
	if(__genExprResultTypeObj instanceof String) 
		__exprResultTypeQualifiedName = (String)__genExprResultTypeObj;
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)
		__exprResultTypeQualifiedName = __genExprProvider.getQualifiedInstanceClassName((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj);
	String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);

    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_99);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String __nextVarName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(__nextVarName);
		String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

	
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(__nextVarName);
    	} 

    stringBuffer.append(TEXT_102);
    stringBuffer.append(__importedAbstractExpr);
    stringBuffer.append(TEXT_103);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_104);
    
} /* end of GenJavaExpressionProvider */

    
		} /* java javaSelectorFacets iteration */

    stringBuffer.append(TEXT_105);
    stringBuffer.append(javaMatcherContainer);
    
	} /* !javaSelectorFacets.isEmpty() */
} /* selectorCounter > 0 */

    stringBuffer.append(TEXT_106);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_107);
    return stringBuffer.toString();
  }
}
@


1.9
log
@Anna Karyakina's migration fix
@
text
@@


1.8
log
@eliminate compilation problems in tests
@
text
@d20 107
a126 109
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * This registry is used to determine which type of visual object should be" + NL + " * created for the corresponding Diagram, Node, ChildNode or Link represented " + NL + " * by a domain model object. Note that it only returns semantically complete objects (those who must have an element associated with them)." + NL + " *" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_6 = " INSTANCE = new ";
  protected final String TEXT_7 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(View view) {" + NL + "\t\tif (view instanceof Diagram) {" + NL + "\t\t\tif (";
  protected final String TEXT_8 = ".MODEL_ID.equals(view.getType())) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_9 = ".VISUAL_ID;" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getVisualID(view.getType());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getModelID(View view) {" + NL + "\t\tView diagram = view.getDiagram();" + NL + "\t\twhile (view != diagram) {" + NL + "\t\t\t";
  protected final String TEXT_10 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tview = (View) view.eContainer();" + NL + "\t\t}" + NL + "\t\treturn diagram != null ? diagram.getType() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(String type) {" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(type);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_11 = ".getInstance().logInfo(\"Unable to parse view type as a visualID number: \" + type);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getType(int visualID) {" + NL + "\t\treturn String.valueOf(visualID);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_12 = NL + "\t\tif (";
  protected final String TEXT_13 = ".eINSTANCE.get";
  protected final String TEXT_14 = "().equals(domainElementMetaclass) && isDiagram";
  protected final String TEXT_15 = "((";
  protected final String TEXT_16 = ") domainElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_17 = ".VISUAL_ID;" + NL + "\t\t}";
  protected final String TEXT_18 = NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!";
  protected final String TEXT_19 = ".MODEL_ID.equals(containerModelID)) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tint containerVisualID;" + NL + "\t\tif (";
  protected final String TEXT_20 = ".MODEL_ID.equals(containerModelID)) {" + NL + "\t\t\tcontainerVisualID = getVisualID(containerView);" + NL + "\t\t} else {" + NL + "\t\t\tif (containerView instanceof Diagram) {" + NL + "\t\t\t\tcontainerVisualID = ";
  protected final String TEXT_21 = ".VISUAL_ID;" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tswitch (containerVisualID) {";
  protected final String TEXT_22 = NL + "\t\tcase ";
  protected final String TEXT_23 = ".VISUAL_ID:";
  protected final String TEXT_24 = NL + "\t\t\tif (";
  protected final String TEXT_25 = ".eINSTANCE.get";
  protected final String TEXT_26 = "().isSuperTypeOf(domainElementMetaclass) && isNode";
  protected final String TEXT_27 = "((";
  protected final String TEXT_28 = ") domainElement)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_29 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_30 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_31 = "ChildNodeID(domainElement);";
  protected final String TEXT_32 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_33 = NL + "\t\tif (";
  protected final String TEXT_34 = ".eINSTANCE.get";
  protected final String TEXT_35 = "().isSuperTypeOf(domainElementMetaclass) && isLinkWithClass";
  protected final String TEXT_36 = "((";
  protected final String TEXT_37 = ") domainElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_38 = ".VISUAL_ID;" + NL + "\t\t}";
  protected final String TEXT_39 = NL + "\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t}" + NL;
  protected final String TEXT_40 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_41 = "(";
  protected final String TEXT_42 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_44 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_45 = "(";
  protected final String TEXT_46 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_47 = ".matches(element)";
  protected final String TEXT_48 = "true";
  protected final String TEXT_49 = ";" + NL + "\t}";
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_51 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_52 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_53 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_54 = "(";
  protected final String TEXT_55 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_56 = ".matches(element)";
  protected final String TEXT_57 = "true";
  protected final String TEXT_58 = ";" + NL + "\t}";
  protected final String TEXT_59 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final ";
  protected final String TEXT_60 = " ";
  protected final String TEXT_61 = " = new ";
  protected final String TEXT_62 = "(";
  protected final String TEXT_63 = "null";
  protected final String TEXT_64 = ".";
  protected final String TEXT_65 = "(";
  protected final String TEXT_66 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_67 = ", ";
  protected final String TEXT_68 = ")";
  protected final String TEXT_69 = ".";
  protected final String TEXT_70 = "(";
  protected final String TEXT_71 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_72 = ")";
  protected final String TEXT_73 = "new ";
  protected final String TEXT_74 = "(";
  protected final String TEXT_75 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_76 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_77 = " self = (";
  protected final String TEXT_78 = ")context;";
  protected final String TEXT_79 = "\t" + NL + "\t\t";
  protected final String TEXT_80 = " ";
  protected final String TEXT_81 = " = (";
  protected final String TEXT_82 = ")env.get(\"";
  protected final String TEXT_83 = "\"); //$NON-NLS-1$";
  protected final String TEXT_84 = NL + "\t\treturn ";
  protected final String TEXT_85 = ".";
  protected final String TEXT_86 = "(self";
  protected final String TEXT_87 = ", ";
  protected final String TEXT_88 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_89 = NL + ");";
  protected final String TEXT_90 = "\t\t\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic class ";
  protected final String TEXT_91 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_92 = " condition;" + NL + "\t\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t" + NL + "\t\t";
  protected final String TEXT_93 = "(";
  protected final String TEXT_94 = " conditionExpression) {\t\t\t" + NL + "\t\t\tthis.condition = conditionExpression;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tboolean matches(EObject object) {" + NL + "\t\t\tObject result = condition.evaluate(object);" + NL + "\t\t\treturn result instanceof Boolean && ((Boolean)result).booleanValue();\t\t\t" + NL + "\t\t}" + NL + "\t}// ";
  protected final String TEXT_95 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private static class ";
  protected final String TEXT_96 = " {";
  protected final String TEXT_97 = NL;
  protected final String TEXT_98 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_99 = " ";
  protected final String TEXT_100 = "(";
  protected final String TEXT_101 = " self";
  protected final String TEXT_102 = ", ";
  protected final String TEXT_103 = " ";
  protected final String TEXT_104 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_105 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_106 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_107 = NL + "\t}// ";
  protected final String TEXT_108 = NL + "}" + NL + "\t";
  protected final String TEXT_109 = NL;
a134 1
    stringBuffer.append(TEXT_1);
d139 2
a141 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d157 2
d164 1
a164 1
    stringBuffer.append(genDiagram.getVisualIDRegistryClassName());
d168 1
a168 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d170 1
a170 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
a171 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_11);
d177 2
d180 1
a180 1
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
d182 1
a182 1
    stringBuffer.append(classifierAccessorName);
d184 1
a184 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d186 1
a186 1
    stringBuffer.append(interfaceName);
d188 2
a190 2
    stringBuffer.append(TEXT_17);
    }
a195 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_21);
d204 2
a206 2
    stringBuffer.append(importManager.getImportedName(nextContainer.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_23);
d214 2
d217 1
a217 1
    stringBuffer.append(semanticPackageInterfaceName);
d219 1
a219 1
    stringBuffer.append(classifierAccessorName);
d221 1
a221 1
    stringBuffer.append(childNode.getUniqueIdentifier());
d223 1
a223 1
    stringBuffer.append(interfaceName);
a224 2
    stringBuffer.append(importManager.getImportedName(childNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_29);
d228 2
a230 2
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_31);
d234 1
a234 1
    stringBuffer.append(TEXT_32);
d244 2
d247 1
a247 1
    stringBuffer.append(semanticPackageInterfaceName);
d249 1
a249 1
    stringBuffer.append(semanticLinkInterfaceName);
d251 1
a251 1
    stringBuffer.append(genLink.getUniqueIdentifier());
d253 1
a253 1
    stringBuffer.append(interfaceName);
a254 2
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_38);
d259 2
d262 1
a262 1
    if (genDiagram.getDomainDiagramElement() != null) {
d264 1
a264 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
a267 2
    }
    stringBuffer.append(TEXT_43);
d277 2
d280 1
a280 1
    stringBuffer.append(nextNode.getUniqueIdentifier());
a281 2
    stringBuffer.append(childNodeInterfaceName);
    stringBuffer.append(TEXT_46);
d284 2
d287 1
a287 1
    } else {
a288 2
    }
    stringBuffer.append(TEXT_49);
d297 2
a299 2
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_51);
d303 1
a303 1
    stringBuffer.append(TEXT_52);
d312 2
d315 1
a315 1
    stringBuffer.append(genLink.getUniqueIdentifier());
a316 2
    stringBuffer.append(interfaceName);
    stringBuffer.append(TEXT_55);
d319 2
d322 1
a322 1
    } else {
a323 2
    }
    stringBuffer.append(TEXT_58);
d361 2
d364 2
a366 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(id);
a367 2
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_62);
d383 1
a383 1
    stringBuffer.append(TEXT_63);
d392 2
d395 1
a395 1
    stringBuffer.append(__expressionAccessor);
d397 1
a397 1
    stringBuffer.append(__genValueExpression.getBodyString());
d399 1
a399 1
    stringBuffer.append(__ctxEClassifierAccess);
a400 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_68);
d405 2
d408 1
a408 1
    stringBuffer.append(__expressionAccessor);
d410 1
a410 1
    stringBuffer.append(__genValueExpression.getBodyString());
a411 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_72);
d419 2
d422 1
a422 1
    stringBuffer.append(__importedAbstractClass);
d424 1
a424 1
    stringBuffer.append(__ctxEClassifierAccess);
d426 1
a426 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a429 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_78);
d436 2
d439 2
d442 1
a442 1
    stringBuffer.append(TEXT_80);
a443 2
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d445 1
a445 1
    stringBuffer.append(nextVariableName);
a446 2
    		} 
    stringBuffer.append(TEXT_84);
d450 1
a450 1
    stringBuffer.append(TEXT_85);
d454 1
a454 1
    stringBuffer.append(TEXT_86);
d457 1
a457 1
    stringBuffer.append(TEXT_87);
d460 1
a460 1
    stringBuffer.append(TEXT_88);
d463 1
a463 1
    stringBuffer.append(TEXT_89);
d468 2
d471 2
d474 1
a474 1
    stringBuffer.append(TEXT_91);
a475 2
    stringBuffer.append(TEXT_92);
    stringBuffer.append(matcherClassName);
a476 2
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_94);
d481 2
a483 2
    stringBuffer.append(javaMatcherContainer);
    stringBuffer.append(TEXT_96);
a490 1
    stringBuffer.append(TEXT_97);
d511 1
a511 1
    stringBuffer.append(TEXT_98);
d513 1
a513 1
    stringBuffer.append(TEXT_99);
d515 1
a515 1
    stringBuffer.append(TEXT_100);
d517 1
a517 1
    stringBuffer.append(TEXT_101);
d525 1
a525 1
    stringBuffer.append(TEXT_102);
d527 1
a527 1
    stringBuffer.append(TEXT_103);
d531 1
a531 1
    stringBuffer.append(TEXT_104);
d533 1
a533 1
    stringBuffer.append(TEXT_105);
d535 1
a535 1
    stringBuffer.append(TEXT_106);
d542 1
a542 1
    stringBuffer.append(TEXT_107);
d548 1
a548 1
    stringBuffer.append(TEXT_108);
d550 1
a550 1
    stringBuffer.append(TEXT_109);
@


1.7
log
@[155955] bblajer -  Allow creation of child nodes directly in parent elements
@
text
@a388 1
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
d398 1
a398 1
    stringBuffer.append(__bodyLiteral);
d411 1
a411 1
    stringBuffer.append(__bodyLiteral);
@


1.6
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d200 1
a200 2
Collection nodeContainers = new ArrayList(genDiagram.getCompartments());
nodeContainers.add(genDiagram);
d203 3
d296 3
@


1.5
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@d51 1
a51 1
  protected final String TEXT_32 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
d326 1
@


1.4
log
@#145753 Suppress exceptions logged from unimplemented methods of JavaAudits during tests execution
@
text
@d84 2
a85 2
  protected final String TEXT_65 = "(\"";
  protected final String TEXT_66 = "\", //$NON-NLS-1$" + NL + "\t";
d89 2
a90 2
  protected final String TEXT_70 = "(\"";
  protected final String TEXT_71 = "\", //$NON-NLS-1$" + NL + "\t";
d383 1
d393 1
a393 1
    stringBuffer.append(__genValueExpression.getBody());
d406 1
a406 1
    stringBuffer.append(__genValueExpression.getBody());
@


1.3
log
@[bblajer] #144412 Allow non-OCL-based FeatureSeqInitializers, constraints and selectors
@
text
@d123 6
a128 5
  protected final String TEXT_104 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_105 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_106 = NL + "\t}// ";
  protected final String TEXT_107 = NL + "}" + NL + "\t";
  protected final String TEXT_108 = NL;
d498 1
d530 2
d533 1
a533 1
    stringBuffer.append(TEXT_105);
d535 1
a535 1
}
d540 1
a540 1
    stringBuffer.append(TEXT_106);
d546 1
a546 1
    stringBuffer.append(TEXT_107);
d548 1
a548 1
    stringBuffer.append(TEXT_108);
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d6 1
d24 1
a24 1
  protected final String TEXT_5 = " {" + NL + "" + NL + "\tpublic static final ";
d65 63
a127 23
  protected final String TEXT_46 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_47 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_48 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_49 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_51 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_52 = "(";
  protected final String TEXT_53 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_54 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_55 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_56 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_57 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_58 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_59 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_60 = " = new Matcher(\"";
  protected final String TEXT_61 = "\");";
  protected final String TEXT_62 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_63 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_64 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_65 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new ";
  protected final String TEXT_66 = "(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_67 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}";
  protected final String TEXT_68 = NL;
d146 6
a268 1
String acceptAllMatcherAccessor = "acceptAllMatcher()"; //$NON-NLS-1$
d271 5
a275 2
	String qualifiedChildNodeInterfaceName = nextNode.getDomainMetaClass().getQualifiedInterfaceName();
	String childNodeSelector = nextNode.getModelFacet() != null && nextNode.getModelFacet().getModelElementSelector() != null ? nextNode.getUniqueIdentifier() : acceptAllMatcherAccessor;
d280 1
a280 1
    stringBuffer.append(importManager.getImportedName(qualifiedChildNodeInterfaceName));
d282 2
a283 1
    stringBuffer.append(childNodeSelector);
d285 4
d294 1
a294 1
    stringBuffer.append(TEXT_48);
d296 1
a296 1
    stringBuffer.append(TEXT_49);
d300 1
a300 1
    stringBuffer.append(TEXT_50);
d307 1
a307 1
		String linkSelector = modelFacet.getModelElementSelector() != null ? genLink.getUniqueIdentifier() : acceptAllMatcherAccessor;		
d309 1
a309 1
    stringBuffer.append(TEXT_51);
d311 1
a311 1
    stringBuffer.append(TEXT_52);
d313 8
a320 3
    stringBuffer.append(TEXT_53);
    stringBuffer.append(linkSelector);
    stringBuffer.append(TEXT_54);
d325 6
a330 2
    stringBuffer.append(TEXT_55);
    
d332 1
a332 1
for (Iterator it = genDiagram.eAllContents(); it.hasNext();) {
d343 1
a343 1
	if (modelFacet == null || modelFacet.getModelElementSelector() == null) {
d348 8
a356 6
    stringBuffer.append(TEXT_56);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(selector.getLanguage());
    stringBuffer.append(TEXT_58);
    stringBuffer.append(selector.getBody());
d358 2
a360 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(selector.getBody());
d362 1
a362 1
    }
d364 15
a378 1
    if(selectorCounter > 0) { 
d380 8
a387 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition"));
d393 62
d456 87
a542 1
    stringBuffer.append(TEXT_67);
d544 1
a544 1
    stringBuffer.append(TEXT_68);
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d25 34
a58 34
  protected final String TEXT_7 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_8 = NL + "\t\tif (";
  protected final String TEXT_9 = ".eINSTANCE.get";
  protected final String TEXT_10 = "().equals(domainElementMetaclass) && isDiagram";
  protected final String TEXT_11 = "((";
  protected final String TEXT_12 = ") domainElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_13 = ";" + NL + "\t\t}";
  protected final String TEXT_14 = NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!\"";
  protected final String TEXT_15 = "\".equals(containerModelID)) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tint containerVisualID;" + NL + "\t\tif (\"";
  protected final String TEXT_16 = "\".equals(containerModelID)) {" + NL + "\t\t\tcontainerVisualID = getVisualID(containerView);" + NL + "\t\t} else {" + NL + "\t\t\tif (containerView instanceof Diagram) {" + NL + "\t\t\t\tcontainerVisualID = ";
  protected final String TEXT_17 = ";\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tswitch (containerVisualID) {";
  protected final String TEXT_18 = NL + "\t\tcase ";
  protected final String TEXT_19 = ":";
  protected final String TEXT_20 = NL + "\t\t\tif (";
  protected final String TEXT_21 = ".eINSTANCE.get";
  protected final String TEXT_22 = "().isSuperTypeOf(domainElementMetaclass) && isNode";
  protected final String TEXT_23 = "((";
  protected final String TEXT_24 = ") domainElement)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_25 = ";" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_27 = "ChildNodeID(domainElement);";
  protected final String TEXT_28 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_29 = NL + "\t\tif (";
  protected final String TEXT_30 = ".eINSTANCE.get";
  protected final String TEXT_31 = "().isSuperTypeOf(domainElementMetaclass) && isLinkWithClass";
  protected final String TEXT_32 = "((";
  protected final String TEXT_33 = ") domainElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_34 = ";" + NL + "\t\t}";
  protected final String TEXT_35 = NL + "\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t}" + NL;
  protected final String TEXT_36 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_37 = "(";
  protected final String TEXT_38 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_40 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
d60 27
a86 32
  protected final String TEXT_42 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_43 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_44 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_45 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_46 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_47 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_48 = "(";
  protected final String TEXT_49 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_50 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_51 = NL;
  protected final String TEXT_52 = NL;
  protected final String TEXT_53 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(";
  protected final String TEXT_54 = " containerView) {" + NL + "\t\t";
  protected final String TEXT_55 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
  protected final String TEXT_56 = NL;
  protected final String TEXT_57 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(";
  protected final String TEXT_58 = " containerView) {" + NL + "\t\t";
  protected final String TEXT_59 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_60 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_61 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_62 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_63 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_64 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_65 = " = new Matcher(\"";
  protected final String TEXT_66 = "\");";
  protected final String TEXT_67 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_68 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_69 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_70 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new ";
  protected final String TEXT_71 = "(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_72 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}";
  protected final String TEXT_73 = NL;
a92 1
final String modelID = genDiagram.getEditorGen().getModelID();
d119 8
d132 1
a132 1
    stringBuffer.append(TEXT_8);
d134 1
a134 1
    stringBuffer.append(TEXT_9);
d136 1
a136 1
    stringBuffer.append(TEXT_10);
d138 1
a138 1
    stringBuffer.append(TEXT_11);
a139 8
    stringBuffer.append(TEXT_12);
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_13);
    }
    stringBuffer.append(TEXT_14);
    stringBuffer.append(modelID);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(modelID);
d141 1
a141 1
    stringBuffer.append(genDiagram.getVisualID());
d143 8
d157 3
a159 3
    stringBuffer.append(TEXT_18);
    stringBuffer.append(nextContainer.getVisualID());
    stringBuffer.append(TEXT_19);
d167 1
a167 1
    stringBuffer.append(TEXT_20);
d169 1
a169 1
    stringBuffer.append(TEXT_21);
d171 1
a171 1
    stringBuffer.append(TEXT_22);
d173 1
a173 1
    stringBuffer.append(TEXT_23);
d175 3
a177 3
    stringBuffer.append(TEXT_24);
    stringBuffer.append(childNode.getVisualID());
    stringBuffer.append(TEXT_25);
d181 1
a181 1
    stringBuffer.append(TEXT_26);
d183 1
a183 1
    stringBuffer.append(TEXT_27);
d187 1
a187 1
    stringBuffer.append(TEXT_28);
d197 1
a197 1
    stringBuffer.append(TEXT_29);
d199 1
a199 1
    stringBuffer.append(TEXT_30);
d201 1
a201 1
    stringBuffer.append(TEXT_31);
d203 1
a203 1
    stringBuffer.append(TEXT_32);
d205 3
a207 3
    stringBuffer.append(TEXT_33);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_34);
d212 1
a212 1
    stringBuffer.append(TEXT_35);
d214 1
a214 1
    stringBuffer.append(TEXT_36);
d216 1
a216 1
    stringBuffer.append(TEXT_37);
d218 1
a218 1
    stringBuffer.append(TEXT_38);
d220 1
a220 1
    stringBuffer.append(TEXT_39);
d228 1
a228 1
    stringBuffer.append(TEXT_40);
d230 1
a230 1
    stringBuffer.append(TEXT_41);
d232 1
a232 1
    stringBuffer.append(TEXT_42);
d234 1
a234 1
    stringBuffer.append(TEXT_43);
d240 1
a240 1
    stringBuffer.append(TEXT_44);
d242 1
a242 1
    stringBuffer.append(TEXT_45);
d246 1
a246 1
    stringBuffer.append(TEXT_46);
d255 1
a255 1
    stringBuffer.append(TEXT_47);
d257 1
a257 1
    stringBuffer.append(TEXT_48);
d259 1
a259 1
    stringBuffer.append(TEXT_49);
d261 1
a261 1
    stringBuffer.append(TEXT_50);
a265 6
    stringBuffer.append(TEXT_51);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
a266 8
    stringBuffer.append(TEXT_56);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_60);
d286 1
a286 1
    stringBuffer.append(TEXT_61);
d288 1
a288 1
    stringBuffer.append(TEXT_62);
d290 1
a290 1
    stringBuffer.append(TEXT_63);
d292 1
a292 1
    stringBuffer.append(TEXT_64);
d294 1
a294 1
    stringBuffer.append(TEXT_65);
d296 1
a296 1
    stringBuffer.append(TEXT_66);
d298 1
a298 1
    stringBuffer.append(TEXT_67);
d300 1
a300 1
    stringBuffer.append(TEXT_68);
d302 1
a302 1
    stringBuffer.append(TEXT_69);
d304 1
a304 1
    stringBuffer.append(TEXT_70);
d306 1
a306 1
    stringBuffer.append(TEXT_71);
d308 1
a308 1
    stringBuffer.append(TEXT_72);
d310 1
a310 1
    stringBuffer.append(TEXT_73);
@

