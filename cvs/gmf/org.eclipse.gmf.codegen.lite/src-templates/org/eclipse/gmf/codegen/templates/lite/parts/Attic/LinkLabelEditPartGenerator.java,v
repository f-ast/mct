head	1.22;
access;
symbols
	v20080910-1520:1.22
	v20070403-1500:1.21
	v20070330-1300:1.21
	v20060330-1300:1.21
	v20070322-1100:1.21
	v20060316-0600:1.21
	v20070307-0700:1.20
	v20070228-2000:1.19
	v20070221-1500:1.19
	v20070208-1800:1.19
	v20070103-0300:1.18
	M4_20:1.18
	v20061222-1800:1.18
	v20061214-0000:1.17
	v20061120-1300:1.17
	M3_20:1.17
	v20061117-0800:1.17
	v20061013-1330:1.12
	v20061005-1700:1.7
	M1_20:1.11
	v20060904-1500:1.11
	v20060824-1600:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.22
date	2007.04.04.11.04.49;	author bblajer;	state dead;
branches;
next	1.21;
commitid	18c54613864d4567;

1.21
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.20;
commitid	617845f977b04567;

1.20
date	2007.03.03.23.45.11;	author bblajer;	state Exp;
branches;
next	1.19;
commitid	2e3145ea08814567;

1.19
date	2007.01.19.17.15.18;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	781645b0fca44567;

1.18
date	2006.12.19.19.11.42;	author bblajer;	state Exp;
branches;
next	1.17;
commitid	733e4588396c4567;

1.17
date	2006.11.09.18.15.42;	author bblajer;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.26.14.34.57;	author bblajer;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.18.16.29.03;	author bblajer;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.18.09.56.59;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.17.13.08.27;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.11.15.45.01;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.03.18.10.52;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.21.15.22.44;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.16.07.52.07;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.08.16.01.40;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.15.11.19.18;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.22
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@package org.eclipse.gmf.codegen.templates.lite.parts;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.emf.ecore.*;

public class LinkLabelEditPartGenerator
{
  protected static String nl;
  public static synchronized LinkLabelEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    LinkLabelEditPartGenerator result = new LinkLabelEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL;
  protected final String TEXT_6 = "((";
  protected final String TEXT_7 = ")";
  protected final String TEXT_8 = "((";
  protected final String TEXT_9 = ")";
  protected final String TEXT_10 = ")";
  protected final String TEXT_11 = ".eGet(";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "())";
  protected final String TEXT_14 = ")";
  protected final String TEXT_15 = "((";
  protected final String TEXT_16 = ")";
  protected final String TEXT_17 = ")";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = "()";
  protected final String TEXT_20 = NL;
  protected final String TEXT_21 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_22 = " extends ";
  protected final String TEXT_23 = " implements ";
  protected final String TEXT_24 = " {";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL;
  protected final String TEXT_30 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_31 = " manager;" + NL;
  protected final String TEXT_32 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_33 = " LABEL_DISPLAYER = createLabelTextDisplayer();" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_34 = "(View view) {" + NL + "\t\tassert view instanceof Node;" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Node getDiagramNode() {" + NL + "\t\treturn (Node)getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_35 = NL + "\t\tinstallEditPolicy(EditPolicy.CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_36 = "() {" + NL + "\t\t\tpublic EditPart getHost() {" + NL + "\t\t\t\treturn getUpdatableParent();" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_37 = NL;
  protected final String TEXT_38 = "\t\tinstallEditPolicy(";
  protected final String TEXT_39 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_40 = "());";
  protected final String TEXT_41 = NL;
  protected final String TEXT_42 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_43 = "\", new ";
  protected final String TEXT_44 = "()); //$NON-NLS-1$";
  protected final String TEXT_45 = NL;
  protected final String TEXT_46 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_47 = ".OPEN_ROLE";
  protected final String TEXT_48 = " + \"";
  protected final String TEXT_49 = "\" ";
  protected final String TEXT_50 = ", new ";
  protected final String TEXT_51 = "());";
  protected final String TEXT_52 = NL + "\t}" + NL;
  protected final String TEXT_53 = NL;
  protected final String TEXT_54 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_55 = " req) {";
  protected final String TEXT_56 = NL + "\t\tif (";
  protected final String TEXT_57 = ".REQ_DIRECT_EDIT.equals(req.getType()) && understandsRequest(req)) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_58 = NL;
  protected final String TEXT_59 = "if (";
  protected final String TEXT_60 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_61 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}";
  protected final String TEXT_62 = NL;
  protected final String TEXT_63 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_64 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_65 = "(this, ";
  protected final String TEXT_66 = ".class, new ";
  protected final String TEXT_67 = "(getViewer(), getLabel())) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelTextDisplayer().getEditText(";
  protected final String TEXT_68 = ".getElement()));" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tif (";
  protected final String TEXT_69 = ".isReadOnly(";
  protected final String TEXT_70 = ".getElement()) || ";
  protected final String TEXT_71 = ".isReadOnly(";
  protected final String TEXT_72 = ")) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_73 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_74 = " parent = getUpdatableParent();" + NL + "\t\t";
  protected final String TEXT_75 = " connection = (";
  protected final String TEXT_76 = ") parent.getFigure();";
  protected final String TEXT_77 = NL + "\t\t((";
  protected final String TEXT_78 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_79 = "(connection, ";
  protected final String TEXT_80 = ".";
  protected final String TEXT_81 = ") {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_82 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL;
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_85 = " createLabelTextDisplayer() {";
  protected final String TEXT_86 = NL + "\t\treturn new ";
  protected final String TEXT_87 = "(\"";
  protected final String TEXT_88 = "\"";
  protected final String TEXT_89 = ", \"";
  protected final String TEXT_90 = "\"";
  protected final String TEXT_91 = ", " + NL + "\t\t\tnew ";
  protected final String TEXT_92 = "[] {";
  protected final String TEXT_93 = NL + "\t\t";
  protected final String TEXT_94 = ".eINSTANCE.get";
  protected final String TEXT_95 = "()";
  protected final String TEXT_96 = ",";
  protected final String TEXT_97 = "});";
  protected final String TEXT_98 = NL + "\t\t// TODO: implement this method" + NL + "\t\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t\treturn null;";
  protected final String TEXT_99 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_100 = " getLabelTextDisplayer() {" + NL + "\t\treturn LABEL_DISPLAYER;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tgetLabel().setText(text);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_101 = " element = ";
  protected final String TEXT_102 = ".getElement();" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\tString result = getLabelTextDisplayer().getDisplayText(element);" + NL + "\t\tif (result == null || result.length() == 0) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_103 = NL;
  protected final String TEXT_104 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_105 = NL + "\t\t";
  protected final String TEXT_106 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_107 = ") ";
  protected final String TEXT_108 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_109 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_110 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_111 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_112 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_113 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_114 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_115 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_116 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_117 = "\t" + NL + "\t}";
  protected final String TEXT_118 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_119 = " createdFont;";
  protected final String TEXT_120 = "\t";
  protected final String TEXT_121 = NL;
  protected final String TEXT_122 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_123 = " style = (";
  protected final String TEXT_124 = ")  ";
  protected final String TEXT_125 = ".getStyle(";
  protected final String TEXT_126 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_127 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_128 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_129 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_130 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_131 = " getLabelIcon() {";
  protected final String TEXT_132 = NL + "\t\t";
  protected final String TEXT_133 = " semanticElement = ";
  protected final String TEXT_134 = "(";
  protected final String TEXT_135 = ") ";
  protected final String TEXT_136 = "resolveSemanticElement();" + NL + "\t\tif (semanticElement != null) {" + NL + "\t\t\treturn ";
  protected final String TEXT_137 = ".getImage(semanticElement.eClass());" + NL + "\t\t}";
  protected final String TEXT_138 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_140 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_141 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_142 = NL + "\t\t";
  protected final String TEXT_143 = " view = (";
  protected final String TEXT_144 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_145 = ") view.getElement();";
  protected final String TEXT_146 = NL + "\t\t";
  protected final String TEXT_147 = " target = ((";
  protected final String TEXT_148 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_149 = ") ? (";
  protected final String TEXT_150 = ") target.getElement() : null;";
  protected final String TEXT_151 = NL + "\t\treturn null;";
  protected final String TEXT_152 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_153 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_154 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_155 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_156 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_158 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_159 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_160 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_161 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t\tupdatableParent.addExternalRefresher(getLabelRefresher());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_162 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_163 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_164 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_165 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_166 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_167 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeExternalRefresher(getLabelRefresher());" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_168 = NL;
  protected final String TEXT_169 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_170 = ".ExternalRefresher labelRefresher;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_171 = ".ExternalRefresher getLabelRefresher() {" + NL + "\t\tif (labelRefresher == null && getDiagramNode() != null) {" + NL + "\t\t\tlabelRefresher = new ";
  protected final String TEXT_172 = ".ExternalRefresherAdapter(this, getDiagramNode().getElement());" + NL + "\t\t}" + NL + "\t\treturn labelRefresher;" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_173 = ".Refresher fontColorRefresher = new ";
  protected final String TEXT_174 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_175 = ".Refresher fontRefresher = new ";
  protected final String TEXT_176 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_177 = NL;
  protected final String TEXT_178 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_179 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_180 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_181 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_182 = " createLabel() {";
  protected final String TEXT_183 = NL + "\t\treturn new ";
  protected final String TEXT_184 = "();";
  protected final String TEXT_185 = NL + "\t\treturn ";
  protected final String TEXT_186 = ";";
  protected final String TEXT_187 = NL + "\t\treturn new ";
  protected final String TEXT_188 = "();";
  protected final String TEXT_189 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_190 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_191 = " label = createLabel();";
  protected final String TEXT_192 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_193 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_194 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_195 = NL + NL + "\t/**";
  protected final String TEXT_196 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_197 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_198 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_199 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_200 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_201 = "(";
  protected final String TEXT_202 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_203 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_204 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_205 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = NL;
  protected final String TEXT_208 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_209 = NL + "}";
  protected final String TEXT_210 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final GenLinkLabel genLabel = (GenLinkLabel)genElement;
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenLink genHost = genLabel.getLink();
GenDiagram genDiagram = genLabel.getDiagram();
LabelModelFacet labelModelFacet = genLabel.getModelFacet();
GenClass underlyingMetaClass;
if (genHost.getModelFacet() instanceof TypeLinkModelFacet) {
	TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) genHost.getModelFacet();
	underlyingMetaClass = typeLinkModelFacet.getMetaClass();
} else if (genHost.getModelFacet() instanceof FeatureLinkModelFacet) {
	FeatureLinkModelFacet featureLinkModelFacet = (FeatureLinkModelFacet) genHost.getModelFacet();
	underlyingMetaClass = featureLinkModelFacet.getMetaFeature().getTypeGenClass();
} else {
	underlyingMetaClass = null;
}
final boolean isReadOnly = genLabel.isReadOnly();

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    stringBuffer.append(TEXT_4);
    stringBuffer.append(TEXT_5);
    
class FeatureGetAccessorHelper {
	/**
	 * @@param containerName the name of the container
	 * @@param feature the feature whose value is in interest
	 * @@param containerMetaClass the <code>GenClass</code> of the container, or <code>null</code>, if the container is declared as an <code>EObject</code>.
	 * @@param needsCastToResultType whether the cast to the result type is required (this parameter is only used if the <code>EClass</code> this feature belongs to is an external interface). 
	 */
	public void appendFeatureValueGetter(String containerName, GenFeature feature, GenClass containerMetaClass, boolean needsCastToResultType) {
		if (feature.getGenClass().isExternalInterface()) {
			boolean needsCastToEObject = containerMetaClass != null && containerMetaClass.isExternalInterface();
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(feature.isListType() ? "java.util.Collection" : feature.getTypeGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_7);
    
			}
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_9);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToEObject) {

    stringBuffer.append(TEXT_10);
    
			}

    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_13);
    
			if (needsCastToResultType) {

    stringBuffer.append(TEXT_14);
    
			}
		} else {
			boolean needsCastToFeatureGenType = containerMetaClass == null || containerMetaClass.isExternalInterface();
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_16);
    
			}

    stringBuffer.append(containerName);
    
			if (needsCastToFeatureGenType) {

    stringBuffer.append(TEXT_17);
    
			}

    stringBuffer.append(TEXT_18);
    stringBuffer.append(feature.getGetAccessor());
    stringBuffer.append(TEXT_19);
    
		}
	}
}
final FeatureGetAccessorHelper myFeatureGetAccessorHelper = new FeatureGetAccessorHelper();

    stringBuffer.append(TEXT_20);
    importManager.emitPackageStatement(stringBuffer);
importManager.addImport("org.eclipse.draw2d.geometry.Point");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.EditPolicy");
importManager.addImport("org.eclipse.gmf.runtime.notation.Location");
importManager.addImport("org.eclipse.gmf.runtime.notation.Node");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_21);
    stringBuffer.append(genLabel.getEditPartClassName());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelController"));
    stringBuffer.append(TEXT_24);
    {
GenCommonBase genCommonBase = genLabel;
    stringBuffer.append(TEXT_25);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_27);
    }
    stringBuffer.append(TEXT_28);
    stringBuffer.append(TEXT_29);
    
if (!isReadOnly) {

    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_31);
    
}

    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(genLabel.getEditPartClassName());
    stringBuffer.append(TEXT_34);
    
final String primaryView = "getUpdatableParent().getDiagramEdge()";
final String resolvedSemanticElement = "resolveSemanticElement()";

    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ConnectionEndpointEditPolicy"));
    stringBuffer.append(TEXT_36);
    
if (labelModelFacet instanceof FeatureLabelModelFacet && !isReadOnly) {

    stringBuffer.append(TEXT_37);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.LabelDirectEditPolicy"));
    stringBuffer.append(TEXT_40);
    
}

    {
GenCommonBase genCommonBase = genLabel;
    stringBuffer.append(TEXT_41);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_42);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_44);
    }
    stringBuffer.append(TEXT_45);
    
{
	List<OpenDiagramBehaviour> behaviours = genCommonBase.getBehaviour(OpenDiagramBehaviour.class);
	for(int i = 0, iMax = behaviours.size(); i < iMax; i++) {
	/*doesn't make sense to install more than one policy for the same role*/ 
		OpenDiagramBehaviour next = behaviours.get(i);

    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.EditPolicyRoles"));
    stringBuffer.append(TEXT_47);
    if (i > 0) {
    stringBuffer.append(TEXT_48);
    stringBuffer.append(i+1);
    stringBuffer.append(TEXT_49);
    }
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName(genCommonBase.getBehaviour(OpenDiagramBehaviour.class).get(0).getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_51);
    
	}
}

    }
    stringBuffer.append(TEXT_52);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_55);
    
if (!isReadOnly) {

    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_57);
    
}

    stringBuffer.append(TEXT_58);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_61);
    
if (!isReadOnly) {

    stringBuffer.append(TEXT_62);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.LabelCellEditorLocator"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_72);
    
}

    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
    stringBuffer.append(TEXT_76);
    
	final String alignment;
	LinkLabelAlignment genAlignment = genLabel.getAlignment();
	if (genAlignment == null) {
		alignment = "MIDDLE";
	} else {
		switch (genAlignment.getValue()) {
		case LinkLabelAlignment.MIDDLE:
			alignment = "MIDDLE";
			break;
		case LinkLabelAlignment.TARGET:
			alignment = "TARGET";
			break;
		case LinkLabelAlignment.SOURCE:
			alignment = "SOURCE";
			break;
		default:
			alignment = "MIDDLE";
			break;
		}
	}

    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionLocator"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionLocator"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(alignment);
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer"));
    stringBuffer.append(TEXT_85);
    
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	String viewPattern = featureLabelModelFacet.getViewPattern();
	if (viewPattern == null || viewPattern.length() == 0) {
		StringBuffer patternBuffer = new StringBuffer();
		for(int i = 0; i < featureLabelModelFacet.getMetaFeatures().size(); i++) {
			patternBuffer.append("{").append(i).append("} ");
		}
		viewPattern = patternBuffer.toString().trim();
	}
	String editPattern = null;
	if (!isReadOnly) {
		editPattern = featureLabelModelFacet.getEditPattern();
		if (editPattern == null || editPattern.length() == 0) {
			StringBuffer patternBuffer = new StringBuffer();
			for(int i = 0; i < featureLabelModelFacet.getMetaFeatures().size(); i++) {
				patternBuffer.append("{").append(i).append("} ");
			}
			editPattern = patternBuffer.toString().trim();
		}
	}

    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.SimpleLabelTextDisplayer"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(viewPattern);
    stringBuffer.append(TEXT_88);
    if (!isReadOnly) {
    stringBuffer.append(TEXT_89);
    stringBuffer.append(editPattern);
    stringBuffer.append(TEXT_90);
    }
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_92);
    
	for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
		GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_95);
    if (it.hasNext()) {
    stringBuffer.append(TEXT_96);
    }

    
	}

    stringBuffer.append(TEXT_97);
    
} else {

    stringBuffer.append(TEXT_98);
    
}

    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(TEXT_103);
    
boolean isFixedFontSetInFigure;
{
	StyleAttributes styleAttributes = (genElement.getViewmap() == null) ? null : (StyleAttributes)genElement.getViewmap().find(StyleAttributes.class);
	isFixedFontSetInFigure = styleAttributes != null && styleAttributes.isFixedFont();
}

    stringBuffer.append(TEXT_104);
    
if (!isFixedFontSetInFigure) {

    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_116);
    
}

    stringBuffer.append(TEXT_117);
    
if (!isFixedFontSetInFigure) {

    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_119);
    
}

    stringBuffer.append(TEXT_120);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_131);
    
if (genLabel.isElementIcon()) {

    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_133);
    if (underlyingMetaClass.isExternalInterface()) {
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_135);
    }
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_137);
    
}

    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_141);
    
if (genHost.getModelFacet() instanceof TypeLinkModelFacet) {

    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_145);
    
} else if (genHost.getModelFacet() instanceof FeatureLinkModelFacet) {

    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_150);
    
} else {

    stringBuffer.append(TEXT_151);
    
}

    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(TEXT_168);
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart"));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelController"));
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_176);
    
final Viewmap viewmap = genLabel.getViewmap();

    stringBuffer.append(TEXT_177);
    
final String figureQualifiedClassName;
if (viewmap instanceof ParentAssignedViewmap) {
	ParentAssignedViewmap parentAssignedViewmap = (ParentAssignedViewmap) viewmap;
	figureQualifiedClassName = parentAssignedViewmap.getFigureQualifiedClassName() == null ? "org.eclipse.draw2d.IFigure" : parentAssignedViewmap.getFigureQualifiedClassName();
} else if (viewmap instanceof FigureViewmap) {
	String figureQualifiedClassNameCandidate = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassNameCandidate == null || figureQualifiedClassNameCandidate.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.Label";
	} else {
		figureQualifiedClassName = figureQualifiedClassNameCandidate;
	}
} else if (viewmap instanceof SnippetViewmap) {
	figureQualifiedClassName = "org.eclipse.draw2d.IFigure";
} else if (viewmap instanceof InnerClassViewmap) {
	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();
} else {
	figureQualifiedClassName = "org.eclipse.draw2d.IFigure";
}
final String figureImportedName;
if (viewmap instanceof InnerClassViewmap) {
	figureImportedName = figureQualifiedClassName;	//do not import inner class
} else {
	figureImportedName = importManager.getImportedName(figureQualifiedClassName);
}
if (viewmap instanceof ParentAssignedViewmap) {
	final ParentAssignedViewmap parentAssignedViewmap = (ParentAssignedViewmap) viewmap;

    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_179);
    stringBuffer.append((parentAssignedViewmap.getSetterName() == null ? "setLabel" : parentAssignedViewmap.getSetterName()));
    stringBuffer.append(TEXT_180);
    } else { 
    stringBuffer.append(TEXT_181);
    stringBuffer.append(figureImportedName);
    stringBuffer.append(TEXT_182);
    
if (viewmap instanceof FigureViewmap) {

    stringBuffer.append(TEXT_183);
    stringBuffer.append(figureImportedName);
    stringBuffer.append(TEXT_184);
    } // instanceof FigureViewmap
 else if (viewmap instanceof SnippetViewmap) {
    stringBuffer.append(TEXT_185);
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_186);
    } // instanceof SnippetViewmap; FIXME : obtain figure class name to generate getter
 else if (viewmap instanceof InnerClassViewmap) {

    stringBuffer.append(TEXT_187);
    stringBuffer.append(figureImportedName);
    stringBuffer.append(TEXT_188);
    }
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_190);
    stringBuffer.append(figureImportedName);
    stringBuffer.append(TEXT_191);
    
if ("org.eclipse.draw2d.Label".equals(figureQualifiedClassName) || viewmap instanceof InnerClassViewmap) {

    stringBuffer.append(TEXT_192);
    
} else {

    stringBuffer.append(TEXT_193);
    
}

    stringBuffer.append(TEXT_194);
    }	/*not parent-assigned*/
    stringBuffer.append(TEXT_195);
    
if (!"org.eclipse.draw2d.Label".equals(figureQualifiedClassName) && viewmap instanceof InnerClassViewmap==false) {

    stringBuffer.append(TEXT_196);
    
}

    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_199);
    
String labelSetterName = "setLabel"; // same assumption in NodeEditPart
String labelFigureClassName = "org.eclipse.draw2d.IFigure";
if (viewmap instanceof ParentAssignedViewmap) {
	ParentAssignedViewmap parentAssignedViewmap = (ParentAssignedViewmap) viewmap;
	if (parentAssignedViewmap.getSetterName() != null) {
		labelSetterName = parentAssignedViewmap.getSetterName();
	}
	if (parentAssignedViewmap.getFigureQualifiedClassName() != null) {
		labelFigureClassName = parentAssignedViewmap.getFigureQualifiedClassName();
	}
} // FIXME perhaps, there's no sense to have setLabel for any other viewmap than ParentAssigned?

    stringBuffer.append(TEXT_200);
    stringBuffer.append(labelSetterName);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName(labelFigureClassName));
    stringBuffer.append(TEXT_202);
    
if ("org.eclipse.draw2d.Label".equals(labelFigureClassName)) {

    stringBuffer.append(TEXT_203);
    
} else {

    stringBuffer.append(TEXT_204);
    
}

    stringBuffer.append(TEXT_205);
    
if (viewmap instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) viewmap).getClassBody();

    stringBuffer.append(TEXT_206);
    stringBuffer.append(classBody);
    stringBuffer.append(TEXT_207);
    
if (classBody.indexOf("DPtoLP") != -1) {

    stringBuffer.append(TEXT_208);
    
}

    
}

    stringBuffer.append(TEXT_209);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_210);
    return stringBuffer.toString();
  }
}
@


1.21
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.20
log
@Images should be reused across the editparts that represent same model element types (prevent SWTErrors when opening huge diagrams)
@
text
@d43 5
a47 5
  protected final String TEXT_23 = " {";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL;
d49 74
a122 74
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_30 = " manager;" + NL;
  protected final String TEXT_31 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_32 = "(View view) {" + NL + "\t\tassert view instanceof Node;" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Node getDiagramNode() {" + NL + "\t\treturn (Node)getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_33 = NL + "\t\tinstallEditPolicy(EditPolicy.CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_34 = "() {" + NL + "\t\t\tpublic EditPart getHost() {" + NL + "\t\t\t\treturn getUpdatableParent();" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = "\t\tinstallEditPolicy(";
  protected final String TEXT_37 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_38 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_39 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_40 = NL;
  protected final String TEXT_41 = "\t\t\t\t\tprotected ";
  protected final String TEXT_42 = " getDirectEditCommand(";
  protected final String TEXT_43 = " request) {";
  protected final String TEXT_44 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_45 = ".INSTANCE;";
  protected final String TEXT_46 = NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_47 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;";
  protected final String TEXT_48 = NL + "\t\t\t\t\t\tif (value.length() == 0) {" + NL + "\t\t\t\t\t\t\tparseResult = new Object[] { null };" + NL + "\t\t\t\t\t\t} else {";
  protected final String TEXT_49 = NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_50 = "(";
  protected final String TEXT_51 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_52 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_53 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_54 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_55 = NL + "\t\t\t\t\t\t}";
  protected final String TEXT_56 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_57 = " editingDomain = ";
  protected final String TEXT_58 = ".getEditingDomain(";
  protected final String TEXT_59 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_60 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_61 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_62 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_63 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_64 = " createDomainModelCommand(";
  protected final String TEXT_65 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_66 = " element = ";
  protected final String TEXT_67 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_68 = " result = new ";
  protected final String TEXT_69 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_70 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_71 = " ";
  protected final String TEXT_72 = "feature = (";
  protected final String TEXT_73 = ") ";
  protected final String TEXT_74 = ".eINSTANCE.get";
  protected final String TEXT_75 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_76 = ".parseValue(feature, values[";
  protected final String TEXT_77 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_78 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_79 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_80 = " ";
  protected final String TEXT_81 = "values = new ";
  protected final String TEXT_82 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_83 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_84 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tif (valueToSet != null) {" + NL + "\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_85 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_86 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_87 = ".create(editingDomain, element, feature, valueToSet == null ? ";
  protected final String TEXT_88 = ".UNSET_VALUE : valueToSet));";
  protected final String TEXT_89 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_90 = NL + "\t\t\t\t});";
  protected final String TEXT_91 = NL;
  protected final String TEXT_92 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_93 = "\", new ";
  protected final String TEXT_94 = "()); //$NON-NLS-1$";
  protected final String TEXT_95 = NL;
  protected final String TEXT_96 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_97 = ".OPEN_ROLE";
  protected final String TEXT_98 = " + \"";
  protected final String TEXT_99 = "\" ";
  protected final String TEXT_100 = ", new ";
  protected final String TEXT_101 = "());";
  protected final String TEXT_102 = NL + "\t}" + NL;
d124 107
a230 170
  protected final String TEXT_104 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_105 = " req) {";
  protected final String TEXT_106 = NL + "\t\tif (";
  protected final String TEXT_107 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_108 = NL;
  protected final String TEXT_109 = "if (";
  protected final String TEXT_110 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_111 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}";
  protected final String TEXT_112 = NL;
  protected final String TEXT_113 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_114 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_115 = "(this, ";
  protected final String TEXT_116 = ".class, new ";
  protected final String TEXT_117 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_118 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_119 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\t";
  protected final String TEXT_120 = " zoomManager = (";
  protected final String TEXT_121 = ") getViewer().getProperty(";
  protected final String TEXT_122 = ".class.toString());" + NL + "\t\t\t\t\tdouble zoomLevel = zoomManager == null ? 1.0 : zoomManager.getZoom();" + NL + "\t\t\t\t\tif (zoomLevel > 1.0 && getLabel().getFont() != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_123 = "[] datas = getLabel().getFont().getFontData();" + NL + "\t\t\t\t\t\tfor(int i = 0; i < datas.length; i++) {" + NL + "\t\t\t\t\t\t\tdatas[i].height *= zoomLevel;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_124 = " font = new ";
  protected final String TEXT_125 = "(getLabel().getFont().getDevice(), datas);" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(font);" + NL + "\t\t\t\t\t\tcelleditor.getControl().addDisposeListener(new ";
  protected final String TEXT_126 = "() {" + NL + "\t\t\t\t\t\t\tpublic void widgetDisposed(";
  protected final String TEXT_127 = " e) {" + NL + "\t\t\t\t\t\t\t\tfont.dispose();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint avr = ";
  protected final String TEXT_128 = ".getFontMetrics(celleditor.getControl().getFont()).getAverageCharWidth();" + NL + "\t\t\t\t\trect.setSize(new ";
  protected final String TEXT_129 = "(celleditor.getControl().computeSize(";
  protected final String TEXT_130 = ".DEFAULT, ";
  protected final String TEXT_131 = ".DEFAULT)).expand(avr * 2, 0));" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_132 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_133 = " parent = getUpdatableParent();" + NL + "\t\t";
  protected final String TEXT_134 = " connection = (";
  protected final String TEXT_135 = ") parent.getFigure();";
  protected final String TEXT_136 = NL + "\t\t((";
  protected final String TEXT_137 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_138 = "(connection, ";
  protected final String TEXT_139 = ".";
  protected final String TEXT_140 = ") {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_141 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL;
  protected final String TEXT_142 = NL;
  protected final String TEXT_143 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String VIEW_PATTERN = \"";
  protected final String TEXT_144 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_145 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_146 = " element = ";
  protected final String TEXT_147 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t\tif (result == null || result.length() == 0) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_148 = " element = ";
  protected final String TEXT_149 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn \"\";\t//$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t\tif (result == null) {" + NL + "\t\t\treturn \"\";\t//$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String buildTextByPattern(";
  protected final String TEXT_150 = " element, String pattern) {";
  protected final String TEXT_151 = NL + "\t\treturn ";
  protected final String TEXT_152 = ".format(pattern, new Object[] {";
  protected final String TEXT_153 = NL + "\t\t\tnew ";
  protected final String TEXT_154 = "(";
  protected final String TEXT_155 = ")";
  protected final String TEXT_156 = " == null ? \"\" : ";
  protected final String TEXT_157 = ",";
  protected final String TEXT_158 = NL + "\t\t});";
  protected final String TEXT_159 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn null;";
  protected final String TEXT_160 = NL + "\t}";
  protected final String TEXT_161 = NL;
  protected final String TEXT_162 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_163 = NL + "\t\t";
  protected final String TEXT_164 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_165 = ") ";
  protected final String TEXT_166 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_167 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_168 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_169 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_170 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_171 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_172 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_173 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_174 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_175 = "\t" + NL + "\t}";
  protected final String TEXT_176 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_177 = " createdFont;";
  protected final String TEXT_178 = "\t";
  protected final String TEXT_179 = NL;
  protected final String TEXT_180 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_181 = " style = (";
  protected final String TEXT_182 = ")  ";
  protected final String TEXT_183 = ".getStyle(";
  protected final String TEXT_184 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_185 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_186 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_187 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_188 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_189 = " getLabelIcon() {";
  protected final String TEXT_190 = NL + "\t\t";
  protected final String TEXT_191 = " semanticElement = ";
  protected final String TEXT_192 = "(";
  protected final String TEXT_193 = ") ";
  protected final String TEXT_194 = "resolveSemanticElement();" + NL + "\t\tif (semanticElement != null) {" + NL + "\t\t\treturn ";
  protected final String TEXT_195 = ".getImage(semanticElement.eClass());" + NL + "\t\t}";
  protected final String TEXT_196 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_197 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_198 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_199 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_200 = NL + "\t\t";
  protected final String TEXT_201 = " view = (";
  protected final String TEXT_202 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_203 = ") view.getElement();";
  protected final String TEXT_204 = NL + "\t\t";
  protected final String TEXT_205 = " target = ((";
  protected final String TEXT_206 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_207 = ") ? (";
  protected final String TEXT_208 = ") target.getElement() : null;";
  protected final String TEXT_209 = NL + "\t\treturn null;";
  protected final String TEXT_210 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_211 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_212 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_213 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_214 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_215 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_216 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_217 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_218 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_219 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_220 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_221 = ".eINSTANCE.get";
  protected final String TEXT_222 = "(), labelRefresher);";
  protected final String TEXT_223 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_224 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_225 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_226 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_227 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_228 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_229 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_230 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_231 = ".eINSTANCE.get";
  protected final String TEXT_232 = "(), labelRefresher);";
  protected final String TEXT_233 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_234 = ".Refresher labelRefresher = new ";
  protected final String TEXT_235 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_236 = ".Refresher fontColorRefresher = new ";
  protected final String TEXT_237 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_238 = ".Refresher fontRefresher = new ";
  protected final String TEXT_239 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_242 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_243 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_244 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_245 = " createLabel() {";
  protected final String TEXT_246 = NL + "\t\treturn new ";
  protected final String TEXT_247 = "();";
  protected final String TEXT_248 = NL + "\t\treturn ";
  protected final String TEXT_249 = ";";
  protected final String TEXT_250 = NL + "\t\treturn new ";
  protected final String TEXT_251 = "();";
  protected final String TEXT_252 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_253 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_254 = " label = createLabel();";
  protected final String TEXT_255 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_256 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_257 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_258 = NL + NL + "\t/**";
  protected final String TEXT_259 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_260 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_261 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_262 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_263 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_264 = "(";
  protected final String TEXT_265 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_266 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_267 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_268 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_269 = NL;
  protected final String TEXT_270 = NL;
  protected final String TEXT_271 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_272 = NL + "}";
  protected final String TEXT_273 = NL;
d353 2
a356 1
    stringBuffer.append(TEXT_24);
d358 1
d360 1
a360 1
    stringBuffer.append(TEXT_26);
a361 1
    stringBuffer.append(TEXT_27);
d363 1
d367 1
a367 1
    stringBuffer.append(TEXT_29);
d369 1
a369 1
    stringBuffer.append(TEXT_30);
d373 3
a375 1
    stringBuffer.append(TEXT_31);
d377 1
a377 1
    stringBuffer.append(TEXT_32);
d382 1
a382 1
    stringBuffer.append(TEXT_33);
d384 1
a384 1
    stringBuffer.append(TEXT_34);
a386 1
		String editPatternCode = "EDIT_PATTERN";	//declared in labelText.javajetinc, used in directEditCommand.jetinc.
a387 3
    stringBuffer.append(TEXT_35);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
a388 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy"));
d390 1
a390 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d392 1
a393 131
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_43);
    
if (labelModelFacet instanceof FeatureLabelModelFacet == false) {

    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_45);
    
} else {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = featureLabelModelFacet.getMetaFeatures();

    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_47);
    
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {

    stringBuffer.append(TEXT_48);
    
	}

    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(editPatternCode);
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_54);
    
	if (metaFeatures.size() == 1 && String.class.equals(((GenFeature) metaFeatures.get(0)).getEcoreFeature().getEType().getInstanceClass())) {

    stringBuffer.append(TEXT_55);
    
	}

    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(primaryView);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(metaFeatures.size());
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_69);
    
	boolean haveDeclaredValues = false;
	for(int i = 0; i < metaFeatures.size(); i++) {
		GenFeature nextFeatureToSet = (GenFeature) metaFeatures.get(i);
		EStructuralFeature nextEcoreFeature = nextFeatureToSet.getEcoreFeature();

    stringBuffer.append(TEXT_70);
    if (i == 0) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_71);
    }
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName(nextFeatureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(nextFeatureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(i);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_78);
    
		if (nextEcoreFeature.isMany()) {

    stringBuffer.append(TEXT_79);
    if (!haveDeclaredValues) { haveDeclaredValues = true;
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_80);
    }
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(nextFeatureToSet.getAccessorName());
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_85);
    
		} else {

    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_88);
    
		}

    
	}

    stringBuffer.append(TEXT_89);
    
}

    stringBuffer.append(TEXT_90);
d399 1
a399 1
    stringBuffer.append(TEXT_91);
d403 1
a403 1
    stringBuffer.append(TEXT_92);
d405 1
a405 1
    stringBuffer.append(TEXT_93);
d407 1
a407 1
    stringBuffer.append(TEXT_94);
d409 1
a409 1
    stringBuffer.append(TEXT_95);
d417 1
a417 1
    stringBuffer.append(TEXT_96);
d419 1
a419 1
    stringBuffer.append(TEXT_97);
d421 1
a421 1
    stringBuffer.append(TEXT_98);
d423 1
a423 1
    stringBuffer.append(TEXT_99);
d425 1
a425 1
    stringBuffer.append(TEXT_100);
d427 1
a427 1
    stringBuffer.append(TEXT_101);
d433 3
a435 3
    stringBuffer.append(TEXT_102);
    stringBuffer.append(TEXT_103);
    stringBuffer.append(TEXT_104);
d437 1
a437 1
    stringBuffer.append(TEXT_105);
d441 1
a441 1
    stringBuffer.append(TEXT_106);
d443 1
a443 1
    stringBuffer.append(TEXT_107);
d447 2
a448 2
    stringBuffer.append(TEXT_108);
    stringBuffer.append(TEXT_109);
d450 1
a450 1
    stringBuffer.append(TEXT_110);
d452 1
a452 1
    stringBuffer.append(TEXT_111);
d456 2
a457 2
    stringBuffer.append(TEXT_112);
    stringBuffer.append(TEXT_113);
d459 1
a459 1
    stringBuffer.append(TEXT_114);
d461 1
a461 1
    stringBuffer.append(TEXT_115);
d463 13
a475 31
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.DisposeListener"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.DisposeEvent"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FigureUtilities"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_131);
d479 1
a479 1
    stringBuffer.append(TEXT_132);
d481 1
a481 1
    stringBuffer.append(TEXT_133);
d483 1
a483 1
    stringBuffer.append(TEXT_134);
d485 1
a485 1
    stringBuffer.append(TEXT_135);
d508 1
a508 1
    stringBuffer.append(TEXT_136);
d510 1
a510 1
    stringBuffer.append(TEXT_137);
d512 1
a512 1
    stringBuffer.append(TEXT_138);
d514 1
a514 1
    stringBuffer.append(TEXT_139);
d516 1
a516 1
    stringBuffer.append(TEXT_140);
d518 5
a522 2
    stringBuffer.append(TEXT_141);
    stringBuffer.append(TEXT_142);
a523 12
/*genFeature.getObjectType() throws NPE on primitive types. This is a workaround. */
HashMap primitiveTypeToWrapperClassName = new HashMap();
primitiveTypeToWrapperClassName.put(Boolean.TYPE, "Boolean");
primitiveTypeToWrapperClassName.put(Byte.TYPE, "Byte");
primitiveTypeToWrapperClassName.put(Character.TYPE, "Character");
primitiveTypeToWrapperClassName.put(Double.TYPE, "Double");
primitiveTypeToWrapperClassName.put(Float.TYPE, "Float");
primitiveTypeToWrapperClassName.put(Integer.TYPE, "Integer");
primitiveTypeToWrapperClassName.put(Long.TYPE, "Long");
primitiveTypeToWrapperClassName.put(Short.TYPE, "Short");
String viewPattern = null;
String editPattern = null;
d526 1
a526 1
	viewPattern = featureLabelModelFacet.getViewPattern();
d534 9
a542 5
	editPattern = featureLabelModelFacet.getEditPattern();
	if (editPattern == null || editPattern.length() == 0) {
		StringBuffer patternBuffer = new StringBuffer();
		for(int i = 0; i < featureLabelModelFacet.getMetaFeatures().size(); i++) {
			patternBuffer.append("{").append(i).append("} ");
a543 1
		editPattern = patternBuffer.toString().trim();
a544 1
}
d546 3
a548 1
    stringBuffer.append(TEXT_143);
d550 3
a552 1
    stringBuffer.append(TEXT_144);
d554 5
a558 18
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_150);
    
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;

    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
    stringBuffer.append(TEXT_152);
a561 1
		if (next.isPrimitiveType()) {
d563 8
a570 12
    stringBuffer.append(TEXT_153);
    stringBuffer.append(primitiveTypeToWrapperClassName.get(next.getTypeGenClassifier().getEcoreClassifier().getInstanceClass()));
    stringBuffer.append(TEXT_154);
    
		}
		myFeatureGetAccessorHelper.appendFeatureValueGetter("element", next, underlyingMetaClass, false);
		if (next.isPrimitiveType()) {

    stringBuffer.append(TEXT_155);
    
		} else {
			if (String.class.equals(next.getEcoreFeature().getEType().getInstanceClass())) {
a571 8
    stringBuffer.append(TEXT_156);
    
				myFeatureGetAccessorHelper.appendFeatureValueGetter("element", next, underlyingMetaClass, false);
			}
		}
		if (it.hasNext()) {
    stringBuffer.append(TEXT_157);
    }
d575 1
a575 1
    stringBuffer.append(TEXT_158);
d579 1
a579 1
    stringBuffer.append(TEXT_159);
d583 8
a590 2
    stringBuffer.append(TEXT_160);
    stringBuffer.append(TEXT_161);
d598 1
a598 1
    stringBuffer.append(TEXT_162);
d602 1
a602 1
    stringBuffer.append(TEXT_163);
d604 1
a604 1
    stringBuffer.append(TEXT_164);
d606 1
a606 1
    stringBuffer.append(TEXT_165);
d608 1
a608 1
    stringBuffer.append(TEXT_166);
d610 1
a610 1
    stringBuffer.append(TEXT_167);
d612 1
a612 1
    stringBuffer.append(TEXT_168);
d614 1
a614 1
    stringBuffer.append(TEXT_169);
d616 1
a616 1
    stringBuffer.append(TEXT_170);
d618 1
a618 1
    stringBuffer.append(TEXT_171);
d620 1
a620 1
    stringBuffer.append(TEXT_172);
d622 1
a622 1
    stringBuffer.append(TEXT_173);
d624 1
a624 1
    stringBuffer.append(TEXT_174);
d628 1
a628 1
    stringBuffer.append(TEXT_175);
d632 1
a632 1
    stringBuffer.append(TEXT_176);
d634 1
a634 1
    stringBuffer.append(TEXT_177);
d638 3
a640 3
    stringBuffer.append(TEXT_178);
    stringBuffer.append(TEXT_179);
    stringBuffer.append(TEXT_180);
d642 1
a642 1
    stringBuffer.append(TEXT_181);
d644 1
a644 1
    stringBuffer.append(TEXT_182);
d646 1
a646 1
    stringBuffer.append(TEXT_183);
d648 1
a648 1
    stringBuffer.append(TEXT_184);
d650 1
a650 1
    stringBuffer.append(TEXT_185);
d652 1
a652 1
    stringBuffer.append(TEXT_186);
d654 1
a654 1
    stringBuffer.append(TEXT_187);
d656 1
a656 1
    stringBuffer.append(TEXT_188);
d658 1
a658 1
    stringBuffer.append(TEXT_189);
d662 1
a662 1
    stringBuffer.append(TEXT_190);
d664 1
a664 1
    stringBuffer.append(TEXT_191);
d666 1
a666 1
    stringBuffer.append(TEXT_192);
d668 1
a668 1
    stringBuffer.append(TEXT_193);
d670 1
a670 1
    stringBuffer.append(TEXT_194);
d672 1
a672 1
    stringBuffer.append(TEXT_195);
d676 1
a676 1
    stringBuffer.append(TEXT_196);
d678 1
a678 1
    stringBuffer.append(TEXT_197);
d680 1
a680 1
    stringBuffer.append(TEXT_198);
d682 1
a682 1
    stringBuffer.append(TEXT_199);
d686 1
a686 1
    stringBuffer.append(TEXT_200);
d688 1
a688 1
    stringBuffer.append(TEXT_201);
d690 1
a690 1
    stringBuffer.append(TEXT_202);
d692 1
a692 1
    stringBuffer.append(TEXT_203);
d696 1
a696 1
    stringBuffer.append(TEXT_204);
d698 1
a698 1
    stringBuffer.append(TEXT_205);
d700 1
a700 1
    stringBuffer.append(TEXT_206);
d702 1
a702 1
    stringBuffer.append(TEXT_207);
d704 1
a704 1
    stringBuffer.append(TEXT_208);
d708 1
a708 1
    stringBuffer.append(TEXT_209);
d712 1
a712 1
    stringBuffer.append(TEXT_210);
d714 1
a714 1
    stringBuffer.append(TEXT_211);
d716 1
a716 1
    stringBuffer.append(TEXT_212);
d718 1
a718 1
    stringBuffer.append(TEXT_213);
d720 1
a720 1
    stringBuffer.append(TEXT_214);
d722 1
a722 1
    stringBuffer.append(TEXT_215);
d724 1
a724 1
    stringBuffer.append(TEXT_216);
d726 1
a726 1
    stringBuffer.append(TEXT_217);
d728 1
a728 1
    stringBuffer.append(TEXT_218);
d730 1
a730 17
    stringBuffer.append(TEXT_219);
    
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
		GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_222);
    
	}
}

    stringBuffer.append(TEXT_223);
d732 1
a732 1
    stringBuffer.append(TEXT_224);
d734 1
a734 1
    stringBuffer.append(TEXT_225);
d736 1
a736 1
    stringBuffer.append(TEXT_226);
d738 1
a738 1
    stringBuffer.append(TEXT_227);
d740 1
a740 1
    stringBuffer.append(TEXT_228);
d742 9
a750 17
    stringBuffer.append(TEXT_229);
    
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
		GenFeature next = (GenFeature) it.next();

    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(next.getFeatureAccessorName());
    stringBuffer.append(TEXT_232);
    
	}
}

    stringBuffer.append(TEXT_233);
d752 1
a752 1
    stringBuffer.append(TEXT_234);
d754 1
a754 1
    stringBuffer.append(TEXT_235);
d756 1
a756 1
    stringBuffer.append(TEXT_236);
d758 1
a758 5
    stringBuffer.append(TEXT_237);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_239);
d762 1
a762 1
    stringBuffer.append(TEXT_240);
d791 1
a791 1
    stringBuffer.append(TEXT_241);
d793 1
a793 1
    stringBuffer.append(TEXT_242);
d795 1
a795 1
    stringBuffer.append(TEXT_243);
d797 1
a797 1
    stringBuffer.append(TEXT_244);
d799 1
a799 1
    stringBuffer.append(TEXT_245);
d803 1
a803 1
    stringBuffer.append(TEXT_246);
d805 1
a805 1
    stringBuffer.append(TEXT_247);
d808 1
a808 1
    stringBuffer.append(TEXT_248);
d810 1
a810 1
    stringBuffer.append(TEXT_249);
d814 1
a814 1
    stringBuffer.append(TEXT_250);
d816 1
a816 1
    stringBuffer.append(TEXT_251);
d818 1
a818 1
    stringBuffer.append(TEXT_252);
d820 1
a820 1
    stringBuffer.append(TEXT_253);
d822 1
a822 1
    stringBuffer.append(TEXT_254);
d826 1
a826 1
    stringBuffer.append(TEXT_255);
d830 1
a830 1
    stringBuffer.append(TEXT_256);
d834 1
a834 1
    stringBuffer.append(TEXT_257);
d836 1
a836 1
    stringBuffer.append(TEXT_258);
d840 1
a840 1
    stringBuffer.append(TEXT_259);
d844 1
a844 1
    stringBuffer.append(TEXT_260);
d846 1
a846 1
    stringBuffer.append(TEXT_261);
d848 1
a848 1
    stringBuffer.append(TEXT_262);
d862 1
a862 1
    stringBuffer.append(TEXT_263);
d864 1
a864 1
    stringBuffer.append(TEXT_264);
d866 1
a866 1
    stringBuffer.append(TEXT_265);
d870 1
a870 1
    stringBuffer.append(TEXT_266);
d874 1
a874 1
    stringBuffer.append(TEXT_267);
d878 1
a878 1
    stringBuffer.append(TEXT_268);
d883 1
a883 1
    stringBuffer.append(TEXT_269);
d885 1
a885 1
    stringBuffer.append(TEXT_270);
d889 1
a889 1
    stringBuffer.append(TEXT_271);
d896 1
a896 1
    stringBuffer.append(TEXT_272);
d898 1
a898 1
    stringBuffer.append(TEXT_273);
@


1.19
log
@Default label text should be displayed instead of the "null" string when the corresponding feature is not set;
It should be possible to unset the value of a feature using a diagram label;
Fixed compilation errors when a label is not feature-based
@
text
@d211 79
a289 79
  protected final String TEXT_191 = " imageDescriptor = ";
  protected final String TEXT_192 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_193 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_194 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_195 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_196 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_197 = NL + "\t\t";
  protected final String TEXT_198 = " view = (";
  protected final String TEXT_199 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_200 = ") view.getElement();";
  protected final String TEXT_201 = NL + "\t\t";
  protected final String TEXT_202 = " target = ((";
  protected final String TEXT_203 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_204 = ") ? (";
  protected final String TEXT_205 = ") target.getElement() : null;";
  protected final String TEXT_206 = NL + "\t\treturn null;";
  protected final String TEXT_207 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_208 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_209 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_210 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_211 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_212 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_213 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_214 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_215 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_216 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_217 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_218 = ".eINSTANCE.get";
  protected final String TEXT_219 = "(), labelRefresher);";
  protected final String TEXT_220 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_221 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_222 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_223 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_224 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_225 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_226 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_227 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_228 = ".eINSTANCE.get";
  protected final String TEXT_229 = "(), labelRefresher);";
  protected final String TEXT_230 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_231 = ".Refresher labelRefresher = new ";
  protected final String TEXT_232 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_233 = ".Refresher fontColorRefresher = new ";
  protected final String TEXT_234 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_235 = ".Refresher fontRefresher = new ";
  protected final String TEXT_236 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_237 = NL;
  protected final String TEXT_238 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_239 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_240 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_241 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_242 = " createLabel() {";
  protected final String TEXT_243 = NL + "\t\treturn new ";
  protected final String TEXT_244 = "();";
  protected final String TEXT_245 = NL + "\t\treturn ";
  protected final String TEXT_246 = ";";
  protected final String TEXT_247 = NL + "\t\treturn new ";
  protected final String TEXT_248 = "();";
  protected final String TEXT_249 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_250 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_251 = " label = createLabel();";
  protected final String TEXT_252 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_253 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_254 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_255 = NL + NL + "\t/**";
  protected final String TEXT_256 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_257 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_258 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_259 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_260 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_261 = "(";
  protected final String TEXT_262 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_263 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_264 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_265 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_266 = NL;
  protected final String TEXT_267 = NL;
  protected final String TEXT_268 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_269 = NL + "}";
d291 3
d898 1
a898 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d900 1
a900 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d902 6
d911 1
a911 1
    stringBuffer.append(TEXT_193);
d913 1
a913 1
    stringBuffer.append(TEXT_194);
d915 1
a915 1
    stringBuffer.append(TEXT_195);
d917 1
a917 1
    stringBuffer.append(TEXT_196);
d921 1
a921 1
    stringBuffer.append(TEXT_197);
d923 1
a923 1
    stringBuffer.append(TEXT_198);
d925 1
a925 1
    stringBuffer.append(TEXT_199);
d927 1
a927 1
    stringBuffer.append(TEXT_200);
d931 1
a931 1
    stringBuffer.append(TEXT_201);
d933 1
a933 1
    stringBuffer.append(TEXT_202);
d935 1
a935 1
    stringBuffer.append(TEXT_203);
d937 1
a937 1
    stringBuffer.append(TEXT_204);
d939 1
a939 1
    stringBuffer.append(TEXT_205);
d943 1
a943 1
    stringBuffer.append(TEXT_206);
a946 6
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d950 1
a950 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d952 1
a952 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d954 1
a954 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d960 6
d972 1
a972 1
    stringBuffer.append(TEXT_217);
d974 1
a974 1
    stringBuffer.append(TEXT_218);
d976 1
a976 1
    stringBuffer.append(TEXT_219);
d981 1
a981 1
    stringBuffer.append(TEXT_220);
d983 1
a983 1
    stringBuffer.append(TEXT_221);
d985 1
a985 1
    stringBuffer.append(TEXT_222);
d987 1
a987 1
    stringBuffer.append(TEXT_223);
d989 1
a989 1
    stringBuffer.append(TEXT_224);
d991 1
a991 1
    stringBuffer.append(TEXT_225);
d993 1
a993 1
    stringBuffer.append(TEXT_226);
d1000 1
a1000 1
    stringBuffer.append(TEXT_227);
d1002 1
a1002 1
    stringBuffer.append(TEXT_228);
d1004 1
a1004 1
    stringBuffer.append(TEXT_229);
a1008 6
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
d1016 6
d1025 1
a1025 1
    stringBuffer.append(TEXT_237);
d1054 1
a1054 1
    stringBuffer.append(TEXT_238);
d1056 1
a1056 1
    stringBuffer.append(TEXT_239);
d1058 1
a1058 1
    stringBuffer.append(TEXT_240);
d1060 1
a1060 1
    stringBuffer.append(TEXT_241);
d1062 1
a1062 1
    stringBuffer.append(TEXT_242);
d1066 1
a1066 1
    stringBuffer.append(TEXT_243);
d1068 1
a1068 1
    stringBuffer.append(TEXT_244);
d1071 1
a1071 1
    stringBuffer.append(TEXT_245);
d1073 1
a1073 1
    stringBuffer.append(TEXT_246);
d1077 1
a1077 1
    stringBuffer.append(TEXT_247);
d1079 1
a1079 1
    stringBuffer.append(TEXT_248);
d1081 1
a1081 1
    stringBuffer.append(TEXT_249);
d1083 1
a1083 1
    stringBuffer.append(TEXT_250);
d1085 1
a1085 1
    stringBuffer.append(TEXT_251);
d1089 1
a1089 1
    stringBuffer.append(TEXT_252);
d1093 1
a1093 1
    stringBuffer.append(TEXT_253);
d1097 1
a1097 1
    stringBuffer.append(TEXT_254);
d1099 1
a1099 1
    stringBuffer.append(TEXT_255);
d1103 1
a1103 1
    stringBuffer.append(TEXT_256);
d1107 1
a1107 1
    stringBuffer.append(TEXT_257);
d1109 1
a1109 1
    stringBuffer.append(TEXT_258);
d1111 1
a1111 1
    stringBuffer.append(TEXT_259);
d1125 1
a1125 1
    stringBuffer.append(TEXT_260);
d1127 1
a1127 1
    stringBuffer.append(TEXT_261);
d1129 1
a1129 1
    stringBuffer.append(TEXT_262);
d1133 1
a1133 1
    stringBuffer.append(TEXT_263);
d1137 1
a1137 1
    stringBuffer.append(TEXT_264);
d1141 1
a1141 1
    stringBuffer.append(TEXT_265);
d1146 1
a1146 1
    stringBuffer.append(TEXT_266);
d1148 1
a1148 1
    stringBuffer.append(TEXT_267);
d1152 1
a1152 1
    stringBuffer.append(TEXT_268);
d1159 1
a1159 1
    stringBuffer.append(TEXT_269);
d1161 1
a1161 1
    stringBuffer.append(TEXT_270);
@


1.18
log
@Generate support for Navigator
@
text
@d63 228
a290 220
  protected final String TEXT_43 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_44 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_45 = "(";
  protected final String TEXT_46 = ").parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_47 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_48 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_49 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_50 = " editingDomain = ";
  protected final String TEXT_51 = ".getEditingDomain(";
  protected final String TEXT_52 = ".getDiagram().getElement());";
  protected final String TEXT_53 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_54 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_55 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_56 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_57 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_58 = " createDomainModelCommand(";
  protected final String TEXT_59 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_60 = " element = ";
  protected final String TEXT_61 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_62 = " result = new ";
  protected final String TEXT_63 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_64 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_65 = " ";
  protected final String TEXT_66 = "feature = (";
  protected final String TEXT_67 = ") ";
  protected final String TEXT_68 = ".eINSTANCE.get";
  protected final String TEXT_69 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_70 = ".parseValue(feature, values[";
  protected final String TEXT_71 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_72 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_73 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_74 = " ";
  protected final String TEXT_75 = "values = new ";
  protected final String TEXT_76 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_77 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_78 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_79 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_80 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_81 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_82 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_83 = NL + "\t\t\t\t});";
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_86 = "\", new ";
  protected final String TEXT_87 = "()); //$NON-NLS-1$";
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_90 = ".OPEN_ROLE";
  protected final String TEXT_91 = " + \"";
  protected final String TEXT_92 = "\" ";
  protected final String TEXT_93 = ", new ";
  protected final String TEXT_94 = "());";
  protected final String TEXT_95 = NL + "\t}" + NL;
  protected final String TEXT_96 = NL;
  protected final String TEXT_97 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_98 = " req) {";
  protected final String TEXT_99 = NL + "\t\tif (";
  protected final String TEXT_100 = ".REQ_DIRECT_EDIT.equals(req.getType())) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_101 = NL;
  protected final String TEXT_102 = "if (";
  protected final String TEXT_103 = ".REQ_OPEN.equals(req.getType())) {" + NL + "\t";
  protected final String TEXT_104 = " command = getCommand(req);" + NL + "\tif (command != null && command.canExecute()) {" + NL + "\t\tgetViewer().getEditDomain().getCommandStack().execute(command);" + NL + "\t}" + NL + "\treturn;" + NL + "}" + NL + "\t\tsuper.performRequest(req);" + NL + "\t}";
  protected final String TEXT_105 = NL;
  protected final String TEXT_106 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_107 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_108 = "(this, ";
  protected final String TEXT_109 = ".class, new ";
  protected final String TEXT_110 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_111 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_112 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\t";
  protected final String TEXT_113 = " zoomManager = (";
  protected final String TEXT_114 = ") getViewer().getProperty(";
  protected final String TEXT_115 = ".class.toString());" + NL + "\t\t\t\t\tdouble zoomLevel = zoomManager == null ? 1.0 : zoomManager.getZoom();" + NL + "\t\t\t\t\tif (zoomLevel > 1.0 && getLabel().getFont() != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_116 = "[] datas = getLabel().getFont().getFontData();" + NL + "\t\t\t\t\t\tfor(int i = 0; i < datas.length; i++) {" + NL + "\t\t\t\t\t\t\tdatas[i].height *= zoomLevel;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_117 = " font = new ";
  protected final String TEXT_118 = "(getLabel().getFont().getDevice(), datas);" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(font);" + NL + "\t\t\t\t\t\tcelleditor.getControl().addDisposeListener(new ";
  protected final String TEXT_119 = "() {" + NL + "\t\t\t\t\t\t\tpublic void widgetDisposed(";
  protected final String TEXT_120 = " e) {" + NL + "\t\t\t\t\t\t\t\tfont.dispose();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint avr = ";
  protected final String TEXT_121 = ".getFontMetrics(celleditor.getControl().getFont()).getAverageCharWidth();" + NL + "\t\t\t\t\trect.setSize(new ";
  protected final String TEXT_122 = "(celleditor.getControl().computeSize(";
  protected final String TEXT_123 = ".DEFAULT, ";
  protected final String TEXT_124 = ".DEFAULT)).expand(avr * 2, 0));" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_125 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_126 = " parent = getUpdatableParent();" + NL + "\t\t";
  protected final String TEXT_127 = " connection = (";
  protected final String TEXT_128 = ") parent.getFigure();";
  protected final String TEXT_129 = NL + "\t\t((";
  protected final String TEXT_130 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_131 = "(connection, ";
  protected final String TEXT_132 = ".";
  protected final String TEXT_133 = ") {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_134 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL;
  protected final String TEXT_135 = NL;
  protected final String TEXT_136 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String VIEW_PATTERN = \"";
  protected final String TEXT_137 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_138 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_139 = " element = ";
  protected final String TEXT_140 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t\tif (result == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_141 = " element = ";
  protected final String TEXT_142 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\tString result = buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t\tif (result == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String buildTextByPattern(";
  protected final String TEXT_143 = " element, String pattern) {";
  protected final String TEXT_144 = NL + "\t\treturn ";
  protected final String TEXT_145 = ".format(pattern, new Object[] {";
  protected final String TEXT_146 = NL + "\t\t\tnew ";
  protected final String TEXT_147 = "(";
  protected final String TEXT_148 = ")";
  protected final String TEXT_149 = ",";
  protected final String TEXT_150 = NL + "\t\t});";
  protected final String TEXT_151 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn null;";
  protected final String TEXT_152 = NL + "\t}";
  protected final String TEXT_153 = NL;
  protected final String TEXT_154 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_155 = NL + "\t\t";
  protected final String TEXT_156 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_157 = ") ";
  protected final String TEXT_158 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_159 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_160 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_161 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_162 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_163 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_164 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_165 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_166 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_167 = "\t" + NL + "\t}";
  protected final String TEXT_168 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_169 = " createdFont;";
  protected final String TEXT_170 = "\t";
  protected final String TEXT_171 = NL;
  protected final String TEXT_172 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_173 = " style = (";
  protected final String TEXT_174 = ")  ";
  protected final String TEXT_175 = ".getStyle(";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_177 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_178 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_179 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_180 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_181 = " getLabelIcon() {";
  protected final String TEXT_182 = NL + "\t\t";
  protected final String TEXT_183 = " imageDescriptor = ";
  protected final String TEXT_184 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_186 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_187 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_188 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_189 = NL + "\t\t";
  protected final String TEXT_190 = " view = (";
  protected final String TEXT_191 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_192 = ") view.getElement();";
  protected final String TEXT_193 = NL + "\t\t";
  protected final String TEXT_194 = " target = ((";
  protected final String TEXT_195 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_196 = ") ? (";
  protected final String TEXT_197 = ") target.getElement() : null;";
  protected final String TEXT_198 = NL + "\t\treturn null;";
  protected final String TEXT_199 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_200 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_201 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_202 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_203 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_204 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_205 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_206 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_207 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_208 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_209 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_210 = ".eINSTANCE.get";
  protected final String TEXT_211 = "(), labelRefresher);";
  protected final String TEXT_212 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_213 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_214 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_215 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_216 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_217 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_218 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_219 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_220 = ".eINSTANCE.get";
  protected final String TEXT_221 = "(), labelRefresher);";
  protected final String TEXT_222 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_223 = ".Refresher labelRefresher = new ";
  protected final String TEXT_224 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_225 = ".Refresher fontColorRefresher = new ";
  protected final String TEXT_226 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_227 = ".Refresher fontRefresher = new ";
  protected final String TEXT_228 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_229 = NL;
  protected final String TEXT_230 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_231 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_232 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_233 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_234 = " createLabel() {";
  protected final String TEXT_235 = NL + "\t\treturn new ";
  protected final String TEXT_236 = "();";
  protected final String TEXT_237 = NL + "\t\treturn ";
  protected final String TEXT_238 = ";";
  protected final String TEXT_239 = NL + "\t\treturn new ";
  protected final String TEXT_240 = "();";
  protected final String TEXT_241 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_242 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_243 = " label = createLabel();";
  protected final String TEXT_244 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_245 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_246 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_247 = NL + NL + "\t/**";
  protected final String TEXT_248 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_249 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_250 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_251 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_252 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_253 = "(";
  protected final String TEXT_254 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_255 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_256 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_257 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_258 = NL;
  protected final String TEXT_259 = NL;
  protected final String TEXT_260 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_261 = NL + "}";
  protected final String TEXT_262 = NL;
d459 4
a463 2
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d465 5
a469 1
    stringBuffer.append(editPatternCode);
d473 3
a475 1
    stringBuffer.append(importManager.getImportedName("java.text.ParseException"));
d477 3
a479 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d483 1
a483 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d485 1
a485 1
    stringBuffer.append(primaryView);
d487 8
d496 1
a496 3
if (labelModelFacet instanceof FeatureLabelModelFacet) {
	FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = featureLabelModelFacet.getMetaFeatures();
d498 7
a504 1
    stringBuffer.append(TEXT_53);
d506 1
a506 1
    stringBuffer.append(TEXT_54);
d508 1
a508 1
    stringBuffer.append(TEXT_55);
d510 1
a510 1
    stringBuffer.append(TEXT_56);
d512 1
a512 1
    stringBuffer.append(TEXT_57);
d514 1
a514 1
    stringBuffer.append(TEXT_58);
d516 1
a516 1
    stringBuffer.append(TEXT_59);
d518 1
a518 1
    stringBuffer.append(TEXT_60);
d520 1
a520 1
    stringBuffer.append(TEXT_61);
d522 1
a522 1
    stringBuffer.append(TEXT_62);
d524 1
a524 1
    stringBuffer.append(TEXT_63);
d531 1
a531 1
    stringBuffer.append(TEXT_64);
d534 1
a534 1
    stringBuffer.append(TEXT_65);
d536 1
a536 1
    stringBuffer.append(TEXT_66);
d538 1
a538 1
    stringBuffer.append(TEXT_67);
d540 1
a540 1
    stringBuffer.append(TEXT_68);
d542 1
a542 1
    stringBuffer.append(TEXT_69);
d544 1
a544 1
    stringBuffer.append(TEXT_70);
d546 1
a546 1
    stringBuffer.append(TEXT_71);
d548 1
a548 1
    stringBuffer.append(TEXT_72);
d552 1
a552 1
    stringBuffer.append(TEXT_73);
d555 1
a555 1
    stringBuffer.append(TEXT_74);
d557 1
a557 1
    stringBuffer.append(TEXT_75);
d559 1
a559 1
    stringBuffer.append(TEXT_76);
d561 1
a561 1
    stringBuffer.append(TEXT_77);
d563 1
a563 1
    stringBuffer.append(TEXT_78);
d565 1
a565 1
    stringBuffer.append(TEXT_79);
d569 3
a571 1
    stringBuffer.append(TEXT_80);
d573 1
a573 1
    stringBuffer.append(TEXT_81);
d580 1
a580 1
    stringBuffer.append(TEXT_82);
d584 1
a584 1
    stringBuffer.append(TEXT_83);
d590 1
a590 1
    stringBuffer.append(TEXT_84);
d594 1
a594 1
    stringBuffer.append(TEXT_85);
d596 1
a596 1
    stringBuffer.append(TEXT_86);
d598 1
a598 1
    stringBuffer.append(TEXT_87);
d600 1
a600 1
    stringBuffer.append(TEXT_88);
d608 1
a608 1
    stringBuffer.append(TEXT_89);
d610 1
a610 1
    stringBuffer.append(TEXT_90);
d612 1
a612 1
    stringBuffer.append(TEXT_91);
d614 1
a614 1
    stringBuffer.append(TEXT_92);
d616 1
a616 1
    stringBuffer.append(TEXT_93);
d618 1
a618 1
    stringBuffer.append(TEXT_94);
d624 3
a626 3
    stringBuffer.append(TEXT_95);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(TEXT_97);
d628 1
a628 1
    stringBuffer.append(TEXT_98);
d632 1
a632 1
    stringBuffer.append(TEXT_99);
d634 1
a634 1
    stringBuffer.append(TEXT_100);
d638 2
a639 2
    stringBuffer.append(TEXT_101);
    stringBuffer.append(TEXT_102);
d641 1
a641 1
    stringBuffer.append(TEXT_103);
d643 1
a643 1
    stringBuffer.append(TEXT_104);
d647 2
a648 2
    stringBuffer.append(TEXT_105);
    stringBuffer.append(TEXT_106);
d650 1
a650 1
    stringBuffer.append(TEXT_107);
d652 1
a652 1
    stringBuffer.append(TEXT_108);
d654 1
a654 1
    stringBuffer.append(TEXT_109);
d656 1
a656 1
    stringBuffer.append(TEXT_110);
d658 1
a658 1
    stringBuffer.append(TEXT_111);
d660 1
a660 1
    stringBuffer.append(TEXT_112);
d662 1
a662 1
    stringBuffer.append(TEXT_113);
d664 1
a664 1
    stringBuffer.append(TEXT_114);
d666 1
a666 1
    stringBuffer.append(TEXT_115);
d668 1
a668 1
    stringBuffer.append(TEXT_116);
d670 1
a670 1
    stringBuffer.append(TEXT_117);
d672 1
a672 1
    stringBuffer.append(TEXT_118);
d674 1
a674 1
    stringBuffer.append(TEXT_119);
d676 1
a676 1
    stringBuffer.append(TEXT_120);
d678 1
a678 1
    stringBuffer.append(TEXT_121);
d680 1
a680 1
    stringBuffer.append(TEXT_122);
d682 1
a682 1
    stringBuffer.append(TEXT_123);
d684 1
a684 1
    stringBuffer.append(TEXT_124);
d688 1
a688 1
    stringBuffer.append(TEXT_125);
d690 1
a690 1
    stringBuffer.append(TEXT_126);
d692 1
a692 1
    stringBuffer.append(TEXT_127);
d694 1
a694 1
    stringBuffer.append(TEXT_128);
d717 1
a717 1
    stringBuffer.append(TEXT_129);
d719 1
a719 1
    stringBuffer.append(TEXT_130);
d721 1
a721 1
    stringBuffer.append(TEXT_131);
d723 1
a723 1
    stringBuffer.append(TEXT_132);
d725 1
a725 1
    stringBuffer.append(TEXT_133);
d727 2
a728 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(TEXT_135);
d762 1
a762 1
    stringBuffer.append(TEXT_136);
d764 1
a764 1
    stringBuffer.append(TEXT_137);
d766 1
a766 1
    stringBuffer.append(TEXT_138);
d768 1
a768 1
    stringBuffer.append(TEXT_139);
d770 1
a770 1
    stringBuffer.append(TEXT_140);
d772 1
a772 1
    stringBuffer.append(TEXT_141);
d774 1
a774 1
    stringBuffer.append(TEXT_142);
d776 1
a776 1
    stringBuffer.append(TEXT_143);
d781 1
a781 1
    stringBuffer.append(TEXT_144);
d783 1
a783 1
    stringBuffer.append(TEXT_145);
d789 1
a789 1
    stringBuffer.append(TEXT_146);
d791 1
a791 1
    stringBuffer.append(TEXT_147);
d797 6
a802 1
    stringBuffer.append(TEXT_148);
d804 2
d808 1
a808 1
    stringBuffer.append(TEXT_149);
d813 1
a813 1
    stringBuffer.append(TEXT_150);
d817 1
a817 1
    stringBuffer.append(TEXT_151);
d821 2
a822 2
    stringBuffer.append(TEXT_152);
    stringBuffer.append(TEXT_153);
d830 1
a830 1
    stringBuffer.append(TEXT_154);
d834 1
a834 1
    stringBuffer.append(TEXT_155);
d836 1
a836 1
    stringBuffer.append(TEXT_156);
d838 1
a838 1
    stringBuffer.append(TEXT_157);
d840 1
a840 1
    stringBuffer.append(TEXT_158);
d842 1
a842 1
    stringBuffer.append(TEXT_159);
d844 1
a844 1
    stringBuffer.append(TEXT_160);
d846 1
a846 1
    stringBuffer.append(TEXT_161);
d848 1
a848 1
    stringBuffer.append(TEXT_162);
d850 1
a850 1
    stringBuffer.append(TEXT_163);
d852 1
a852 1
    stringBuffer.append(TEXT_164);
d854 1
a854 1
    stringBuffer.append(TEXT_165);
d856 1
a856 1
    stringBuffer.append(TEXT_166);
d860 1
a860 1
    stringBuffer.append(TEXT_167);
d864 1
a864 1
    stringBuffer.append(TEXT_168);
d866 1
a866 1
    stringBuffer.append(TEXT_169);
d870 3
a872 3
    stringBuffer.append(TEXT_170);
    stringBuffer.append(TEXT_171);
    stringBuffer.append(TEXT_172);
d874 1
a874 1
    stringBuffer.append(TEXT_173);
d876 1
a876 1
    stringBuffer.append(TEXT_174);
d878 1
a878 1
    stringBuffer.append(TEXT_175);
d880 1
a880 1
    stringBuffer.append(TEXT_176);
d882 1
a882 1
    stringBuffer.append(TEXT_177);
d884 1
a884 1
    stringBuffer.append(TEXT_178);
d886 1
a886 1
    stringBuffer.append(TEXT_179);
d888 1
a888 1
    stringBuffer.append(TEXT_180);
d890 1
a890 1
    stringBuffer.append(TEXT_181);
d894 1
a894 1
    stringBuffer.append(TEXT_182);
d896 1
a896 1
    stringBuffer.append(TEXT_183);
d898 1
a898 1
    stringBuffer.append(TEXT_184);
d902 1
a902 1
    stringBuffer.append(TEXT_185);
d904 1
a904 1
    stringBuffer.append(TEXT_186);
d906 1
a906 1
    stringBuffer.append(TEXT_187);
d908 1
a908 1
    stringBuffer.append(TEXT_188);
d912 1
a912 1
    stringBuffer.append(TEXT_189);
d914 1
a914 1
    stringBuffer.append(TEXT_190);
d916 1
a916 1
    stringBuffer.append(TEXT_191);
d918 1
a918 1
    stringBuffer.append(TEXT_192);
d922 1
a922 1
    stringBuffer.append(TEXT_193);
d924 1
a924 1
    stringBuffer.append(TEXT_194);
d926 1
a926 1
    stringBuffer.append(TEXT_195);
d928 1
a928 1
    stringBuffer.append(TEXT_196);
d930 1
a930 1
    stringBuffer.append(TEXT_197);
d934 1
a934 1
    stringBuffer.append(TEXT_198);
d938 1
a938 1
    stringBuffer.append(TEXT_199);
d940 1
a940 1
    stringBuffer.append(TEXT_200);
d942 1
a942 1
    stringBuffer.append(TEXT_201);
d944 1
a944 1
    stringBuffer.append(TEXT_202);
d946 1
a946 1
    stringBuffer.append(TEXT_203);
d948 1
a948 1
    stringBuffer.append(TEXT_204);
d950 1
a950 1
    stringBuffer.append(TEXT_205);
d952 1
a952 1
    stringBuffer.append(TEXT_206);
d954 1
a954 1
    stringBuffer.append(TEXT_207);
d956 1
a956 1
    stringBuffer.append(TEXT_208);
d963 1
a963 1
    stringBuffer.append(TEXT_209);
d965 1
a965 1
    stringBuffer.append(TEXT_210);
d967 1
a967 1
    stringBuffer.append(TEXT_211);
d972 1
a972 1
    stringBuffer.append(TEXT_212);
d974 1
a974 1
    stringBuffer.append(TEXT_213);
d976 1
a976 1
    stringBuffer.append(TEXT_214);
d978 1
a978 1
    stringBuffer.append(TEXT_215);
d980 1
a980 1
    stringBuffer.append(TEXT_216);
d982 1
a982 1
    stringBuffer.append(TEXT_217);
d984 1
a984 1
    stringBuffer.append(TEXT_218);
d991 1
a991 1
    stringBuffer.append(TEXT_219);
d993 1
a993 1
    stringBuffer.append(TEXT_220);
d995 1
a995 1
    stringBuffer.append(TEXT_221);
d1000 1
a1000 1
    stringBuffer.append(TEXT_222);
d1002 1
a1002 1
    stringBuffer.append(TEXT_223);
d1004 1
a1004 1
    stringBuffer.append(TEXT_224);
d1006 1
a1006 1
    stringBuffer.append(TEXT_225);
d1008 1
a1008 1
    stringBuffer.append(TEXT_226);
d1010 1
a1010 1
    stringBuffer.append(TEXT_227);
d1012 1
a1012 1
    stringBuffer.append(TEXT_228);
d1016 1
a1016 1
    stringBuffer.append(TEXT_229);
d1045 1
a1045 1
    stringBuffer.append(TEXT_230);
d1047 1
a1047 1
    stringBuffer.append(TEXT_231);
d1049 1
a1049 1
    stringBuffer.append(TEXT_232);
d1051 1
a1051 1
    stringBuffer.append(TEXT_233);
d1053 1
a1053 1
    stringBuffer.append(TEXT_234);
d1057 1
a1057 1
    stringBuffer.append(TEXT_235);
d1059 1
a1059 1
    stringBuffer.append(TEXT_236);
d1062 1
a1062 1
    stringBuffer.append(TEXT_237);
d1064 1
a1064 1
    stringBuffer.append(TEXT_238);
d1068 1
a1068 1
    stringBuffer.append(TEXT_239);
d1070 1
a1070 1
    stringBuffer.append(TEXT_240);
d1072 1
a1072 1
    stringBuffer.append(TEXT_241);
d1074 1
a1074 1
    stringBuffer.append(TEXT_242);
d1076 1
a1076 1
    stringBuffer.append(TEXT_243);
d1080 1
a1080 1
    stringBuffer.append(TEXT_244);
d1084 1
a1084 1
    stringBuffer.append(TEXT_245);
d1088 1
a1088 1
    stringBuffer.append(TEXT_246);
d1090 1
a1090 1
    stringBuffer.append(TEXT_247);
d1094 1
a1094 1
    stringBuffer.append(TEXT_248);
d1098 1
a1098 1
    stringBuffer.append(TEXT_249);
d1100 1
a1100 1
    stringBuffer.append(TEXT_250);
d1102 1
a1102 1
    stringBuffer.append(TEXT_251);
d1116 1
a1116 1
    stringBuffer.append(TEXT_252);
d1118 1
a1118 1
    stringBuffer.append(TEXT_253);
d1120 1
a1120 1
    stringBuffer.append(TEXT_254);
d1124 1
a1124 1
    stringBuffer.append(TEXT_255);
d1128 1
a1128 1
    stringBuffer.append(TEXT_256);
d1132 1
a1132 1
    stringBuffer.append(TEXT_257);
d1137 1
a1137 1
    stringBuffer.append(TEXT_258);
d1139 1
a1139 1
    stringBuffer.append(TEXT_259);
d1143 1
a1143 1
    stringBuffer.append(TEXT_260);
d1150 1
a1150 1
    stringBuffer.append(TEXT_261);
d1152 1
a1152 1
    stringBuffer.append(TEXT_262);
@


1.17
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d156 1
a156 1
  protected final String TEXT_136 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
d160 1
a160 1
  protected final String TEXT_140 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
d162 1
a162 1
  protected final String TEXT_142 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
d171 1
a171 1
  protected final String TEXT_151 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
@


1.16
log
@When zoom level is > 100%, font height of the inplace editor should be adjusted to match the font height of the label (when zoom level is < 100%, no scaling is performed, otherwise the text is not readable)
@
text
@d104 51
a154 51
  protected final String TEXT_84 = NL + "\t}" + NL;
  protected final String TEXT_85 = NL;
  protected final String TEXT_86 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_87 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_88 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_89 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_90 = "(this, ";
  protected final String TEXT_91 = ".class, new ";
  protected final String TEXT_92 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_93 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_94 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\t";
  protected final String TEXT_95 = " zoomManager = (";
  protected final String TEXT_96 = ") getViewer().getProperty(";
  protected final String TEXT_97 = ".class.toString());" + NL + "\t\t\t\t\tdouble zoomLevel = zoomManager == null ? 1.0 : zoomManager.getZoom();" + NL + "\t\t\t\t\tif (zoomLevel > 1.0 && getLabel().getFont() != null) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_98 = "[] datas = getLabel().getFont().getFontData();" + NL + "\t\t\t\t\t\tfor(int i = 0; i < datas.length; i++) {" + NL + "\t\t\t\t\t\t\tdatas[i].height *= zoomLevel;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal ";
  protected final String TEXT_99 = " font = new ";
  protected final String TEXT_100 = "(getLabel().getFont().getDevice(), datas);" + NL + "\t\t\t\t\t\tcelleditor.getControl().setFont(font);" + NL + "\t\t\t\t\t\tcelleditor.getControl().addDisposeListener(new ";
  protected final String TEXT_101 = "() {" + NL + "\t\t\t\t\t\t\tpublic void widgetDisposed(";
  protected final String TEXT_102 = " e) {" + NL + "\t\t\t\t\t\t\t\tfont.dispose();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tint avr = ";
  protected final String TEXT_103 = ".getFontMetrics(celleditor.getControl().getFont()).getAverageCharWidth();" + NL + "\t\t\t\t\trect.setSize(new ";
  protected final String TEXT_104 = "(celleditor.getControl().computeSize(";
  protected final String TEXT_105 = ".DEFAULT, ";
  protected final String TEXT_106 = ".DEFAULT)).expand(avr * 2, 0));" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_107 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_108 = " parent = getUpdatableParent();" + NL + "\t\t";
  protected final String TEXT_109 = " connection = (";
  protected final String TEXT_110 = ") parent.getFigure();";
  protected final String TEXT_111 = NL + "\t\t((";
  protected final String TEXT_112 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_113 = "(connection, ";
  protected final String TEXT_114 = ".";
  protected final String TEXT_115 = ") {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_116 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL;
  protected final String TEXT_117 = NL;
  protected final String TEXT_118 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_119 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_120 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_121 = " element = ";
  protected final String TEXT_122 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_123 = " element = ";
  protected final String TEXT_124 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_125 = " element, String pattern) {";
  protected final String TEXT_126 = NL + "\t\treturn ";
  protected final String TEXT_127 = ".format(pattern, new Object[] {";
  protected final String TEXT_128 = NL + "\t\t\tnew ";
  protected final String TEXT_129 = "(";
  protected final String TEXT_130 = ")";
  protected final String TEXT_131 = ",";
  protected final String TEXT_132 = NL + "\t\t});";
  protected final String TEXT_133 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_134 = NL + "\t}";
d156 17
a172 17
  protected final String TEXT_136 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_137 = NL + "\t\t";
  protected final String TEXT_138 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_139 = ") ";
  protected final String TEXT_140 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_141 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_142 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_143 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_144 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_145 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_146 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_147 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_148 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_149 = "\t" + NL + "\t}";
  protected final String TEXT_150 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_151 = " createdFont;";
  protected final String TEXT_152 = "\t";
d174 109
a282 91
  protected final String TEXT_154 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_155 = " style = (";
  protected final String TEXT_156 = ")  ";
  protected final String TEXT_157 = ".getStyle(";
  protected final String TEXT_158 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_159 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_160 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_161 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_162 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_163 = " getLabelIcon() {";
  protected final String TEXT_164 = NL + "\t\t";
  protected final String TEXT_165 = " imageDescriptor = ";
  protected final String TEXT_166 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_167 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_168 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_169 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_170 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_171 = NL + "\t\t";
  protected final String TEXT_172 = " view = (";
  protected final String TEXT_173 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_174 = ") view.getElement();";
  protected final String TEXT_175 = NL + "\t\t";
  protected final String TEXT_176 = " target = ((";
  protected final String TEXT_177 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_178 = ") ? (";
  protected final String TEXT_179 = ") target.getElement() : null;";
  protected final String TEXT_180 = NL + "\t\treturn null;";
  protected final String TEXT_181 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_182 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_183 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_184 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_185 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_186 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_187 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_188 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_189 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_190 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_191 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_192 = ".eINSTANCE.get";
  protected final String TEXT_193 = "(), labelRefresher);";
  protected final String TEXT_194 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_195 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_196 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_197 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_198 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_199 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_200 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_201 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_202 = ".eINSTANCE.get";
  protected final String TEXT_203 = "(), labelRefresher);";
  protected final String TEXT_204 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_205 = ".Refresher labelRefresher = new ";
  protected final String TEXT_206 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_207 = ".Refresher fontColorRefresher = new ";
  protected final String TEXT_208 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_209 = ".Refresher fontRefresher = new ";
  protected final String TEXT_210 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_211 = NL;
  protected final String TEXT_212 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_213 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_214 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_215 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_216 = " createLabel() {";
  protected final String TEXT_217 = NL + "\t\treturn new ";
  protected final String TEXT_218 = "();";
  protected final String TEXT_219 = NL + "\t\treturn ";
  protected final String TEXT_220 = ";";
  protected final String TEXT_221 = NL + "\t\treturn new ";
  protected final String TEXT_222 = "();";
  protected final String TEXT_223 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_224 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_225 = " label = createLabel();";
  protected final String TEXT_226 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_227 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_228 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_229 = NL + NL + "\t/**";
  protected final String TEXT_230 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_231 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_232 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_233 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_234 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_235 = "(";
  protected final String TEXT_236 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_237 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_238 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_239 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = NL;
  protected final String TEXT_242 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_243 = NL + "}";
  protected final String TEXT_244 = NL;
d556 2
d560 1
a560 1
if (labelModelFacet instanceof FeatureLabelModelFacet && !isReadOnly) {
d563 1
d565 30
d596 12
a607 1
    stringBuffer.append(TEXT_87);
d609 8
a616 1
    stringBuffer.append(TEXT_88);
d618 1
a618 1
    stringBuffer.append(TEXT_89);
d620 1
a620 1
    stringBuffer.append(TEXT_90);
d622 1
a622 1
    stringBuffer.append(TEXT_91);
d624 1
a624 1
    stringBuffer.append(TEXT_92);
d626 1
a626 1
    stringBuffer.append(TEXT_93);
d628 1
a628 1
    stringBuffer.append(TEXT_94);
d630 1
a630 1
    stringBuffer.append(TEXT_95);
d632 1
a632 1
    stringBuffer.append(TEXT_96);
d634 1
a634 1
    stringBuffer.append(TEXT_97);
d636 1
a636 1
    stringBuffer.append(TEXT_98);
d638 1
a638 1
    stringBuffer.append(TEXT_99);
d640 1
a640 1
    stringBuffer.append(TEXT_100);
d642 1
a642 1
    stringBuffer.append(TEXT_101);
d644 1
a644 1
    stringBuffer.append(TEXT_102);
d646 1
a646 1
    stringBuffer.append(TEXT_103);
d648 1
a648 1
    stringBuffer.append(TEXT_104);
d650 1
a650 1
    stringBuffer.append(TEXT_105);
d652 1
a652 1
    stringBuffer.append(TEXT_106);
d656 1
a656 1
    stringBuffer.append(TEXT_107);
d658 1
a658 1
    stringBuffer.append(TEXT_108);
d660 1
a660 1
    stringBuffer.append(TEXT_109);
d662 1
a662 1
    stringBuffer.append(TEXT_110);
d685 1
a685 1
    stringBuffer.append(TEXT_111);
d687 1
a687 1
    stringBuffer.append(TEXT_112);
d689 1
a689 1
    stringBuffer.append(TEXT_113);
d691 1
a691 1
    stringBuffer.append(TEXT_114);
d693 1
a693 1
    stringBuffer.append(TEXT_115);
d695 2
a696 2
    stringBuffer.append(TEXT_116);
    stringBuffer.append(TEXT_117);
d730 1
a730 1
    stringBuffer.append(TEXT_118);
d732 1
a732 1
    stringBuffer.append(TEXT_119);
d734 1
a734 1
    stringBuffer.append(TEXT_120);
d736 1
a736 1
    stringBuffer.append(TEXT_121);
d738 1
a738 1
    stringBuffer.append(TEXT_122);
d740 1
a740 1
    stringBuffer.append(TEXT_123);
d742 1
a742 1
    stringBuffer.append(TEXT_124);
d744 1
a744 1
    stringBuffer.append(TEXT_125);
d749 1
a749 1
    stringBuffer.append(TEXT_126);
d751 1
a751 1
    stringBuffer.append(TEXT_127);
d757 1
a757 1
    stringBuffer.append(TEXT_128);
d759 1
a759 1
    stringBuffer.append(TEXT_129);
d765 1
a765 1
    stringBuffer.append(TEXT_130);
d769 1
a769 1
    stringBuffer.append(TEXT_131);
d774 1
a774 1
    stringBuffer.append(TEXT_132);
d778 1
a778 1
    stringBuffer.append(TEXT_133);
d782 2
a783 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(TEXT_135);
d791 1
a791 1
    stringBuffer.append(TEXT_136);
d795 1
a795 1
    stringBuffer.append(TEXT_137);
d797 1
a797 1
    stringBuffer.append(TEXT_138);
d799 1
a799 1
    stringBuffer.append(TEXT_139);
d801 1
a801 1
    stringBuffer.append(TEXT_140);
d803 1
a803 1
    stringBuffer.append(TEXT_141);
d805 1
a805 1
    stringBuffer.append(TEXT_142);
d807 1
a807 1
    stringBuffer.append(TEXT_143);
d809 1
a809 1
    stringBuffer.append(TEXT_144);
d811 1
a811 1
    stringBuffer.append(TEXT_145);
d813 1
a813 1
    stringBuffer.append(TEXT_146);
d815 1
a815 1
    stringBuffer.append(TEXT_147);
d817 1
a817 1
    stringBuffer.append(TEXT_148);
d821 1
a821 1
    stringBuffer.append(TEXT_149);
d825 1
a825 1
    stringBuffer.append(TEXT_150);
d827 1
a827 1
    stringBuffer.append(TEXT_151);
d831 3
a833 3
    stringBuffer.append(TEXT_152);
    stringBuffer.append(TEXT_153);
    stringBuffer.append(TEXT_154);
d835 1
a835 1
    stringBuffer.append(TEXT_155);
d837 1
a837 1
    stringBuffer.append(TEXT_156);
d839 1
a839 1
    stringBuffer.append(TEXT_157);
d841 1
a841 1
    stringBuffer.append(TEXT_158);
d843 1
a843 1
    stringBuffer.append(TEXT_159);
d845 1
a845 1
    stringBuffer.append(TEXT_160);
d847 1
a847 1
    stringBuffer.append(TEXT_161);
d849 1
a849 1
    stringBuffer.append(TEXT_162);
d851 1
a851 1
    stringBuffer.append(TEXT_163);
d855 1
a855 1
    stringBuffer.append(TEXT_164);
d857 1
a857 1
    stringBuffer.append(TEXT_165);
d859 1
a859 1
    stringBuffer.append(TEXT_166);
d863 1
a863 1
    stringBuffer.append(TEXT_167);
d865 1
a865 1
    stringBuffer.append(TEXT_168);
d867 1
a867 1
    stringBuffer.append(TEXT_169);
d869 1
a869 1
    stringBuffer.append(TEXT_170);
d873 1
a873 1
    stringBuffer.append(TEXT_171);
d875 1
a875 1
    stringBuffer.append(TEXT_172);
d877 1
a877 1
    stringBuffer.append(TEXT_173);
d879 1
a879 1
    stringBuffer.append(TEXT_174);
d883 1
a883 1
    stringBuffer.append(TEXT_175);
d885 1
a885 1
    stringBuffer.append(TEXT_176);
d887 1
a887 1
    stringBuffer.append(TEXT_177);
d889 1
a889 1
    stringBuffer.append(TEXT_178);
d891 1
a891 1
    stringBuffer.append(TEXT_179);
d895 1
a895 1
    stringBuffer.append(TEXT_180);
d899 1
a899 1
    stringBuffer.append(TEXT_181);
d901 1
a901 1
    stringBuffer.append(TEXT_182);
d903 1
a903 1
    stringBuffer.append(TEXT_183);
d905 1
a905 1
    stringBuffer.append(TEXT_184);
d907 1
a907 1
    stringBuffer.append(TEXT_185);
d909 1
a909 1
    stringBuffer.append(TEXT_186);
d911 1
a911 1
    stringBuffer.append(TEXT_187);
d913 1
a913 1
    stringBuffer.append(TEXT_188);
d915 1
a915 1
    stringBuffer.append(TEXT_189);
d917 1
a917 1
    stringBuffer.append(TEXT_190);
d924 1
a924 1
    stringBuffer.append(TEXT_191);
d926 1
a926 1
    stringBuffer.append(TEXT_192);
d928 1
a928 1
    stringBuffer.append(TEXT_193);
d933 1
a933 1
    stringBuffer.append(TEXT_194);
d935 1
a935 1
    stringBuffer.append(TEXT_195);
d937 1
a937 1
    stringBuffer.append(TEXT_196);
d939 1
a939 1
    stringBuffer.append(TEXT_197);
d941 1
a941 1
    stringBuffer.append(TEXT_198);
d943 1
a943 1
    stringBuffer.append(TEXT_199);
d945 1
a945 1
    stringBuffer.append(TEXT_200);
d952 1
a952 1
    stringBuffer.append(TEXT_201);
d954 1
a954 1
    stringBuffer.append(TEXT_202);
d956 1
a956 1
    stringBuffer.append(TEXT_203);
d961 1
a961 1
    stringBuffer.append(TEXT_204);
d963 1
a963 1
    stringBuffer.append(TEXT_205);
d965 1
a965 1
    stringBuffer.append(TEXT_206);
d967 1
a967 1
    stringBuffer.append(TEXT_207);
d969 1
a969 1
    stringBuffer.append(TEXT_208);
d971 1
a971 1
    stringBuffer.append(TEXT_209);
d973 1
a973 1
    stringBuffer.append(TEXT_210);
d977 1
a977 1
    stringBuffer.append(TEXT_211);
d1006 1
a1006 1
    stringBuffer.append(TEXT_212);
d1008 1
a1008 1
    stringBuffer.append(TEXT_213);
d1010 1
a1010 1
    stringBuffer.append(TEXT_214);
d1012 1
a1012 1
    stringBuffer.append(TEXT_215);
d1014 1
a1014 1
    stringBuffer.append(TEXT_216);
d1018 1
a1018 1
    stringBuffer.append(TEXT_217);
d1020 1
a1020 1
    stringBuffer.append(TEXT_218);
d1023 1
a1023 1
    stringBuffer.append(TEXT_219);
d1025 1
a1025 1
    stringBuffer.append(TEXT_220);
d1029 1
a1029 1
    stringBuffer.append(TEXT_221);
d1031 1
a1031 1
    stringBuffer.append(TEXT_222);
d1033 1
a1033 1
    stringBuffer.append(TEXT_223);
d1035 1
a1035 1
    stringBuffer.append(TEXT_224);
d1037 1
a1037 1
    stringBuffer.append(TEXT_225);
d1041 1
a1041 1
    stringBuffer.append(TEXT_226);
d1045 1
a1045 1
    stringBuffer.append(TEXT_227);
d1049 1
a1049 1
    stringBuffer.append(TEXT_228);
d1051 1
a1051 1
    stringBuffer.append(TEXT_229);
d1055 1
a1055 1
    stringBuffer.append(TEXT_230);
d1059 1
a1059 1
    stringBuffer.append(TEXT_231);
d1061 1
a1061 1
    stringBuffer.append(TEXT_232);
d1063 1
a1063 1
    stringBuffer.append(TEXT_233);
d1077 1
a1077 1
    stringBuffer.append(TEXT_234);
d1079 1
a1079 1
    stringBuffer.append(TEXT_235);
d1081 1
a1081 1
    stringBuffer.append(TEXT_236);
d1085 1
a1085 1
    stringBuffer.append(TEXT_237);
d1089 1
a1089 1
    stringBuffer.append(TEXT_238);
d1093 1
a1093 1
    stringBuffer.append(TEXT_239);
d1098 1
a1098 1
    stringBuffer.append(TEXT_240);
d1100 1
a1100 1
    stringBuffer.append(TEXT_241);
d1104 1
a1104 1
    stringBuffer.append(TEXT_242);
d1111 1
a1111 1
    stringBuffer.append(TEXT_243);
d1113 1
a1113 1
    stringBuffer.append(TEXT_244);
@


1.15
log
@Fix compilation problems introduced by recent fix of https://bugs.eclipse.org/bugs/show_bug.cgi?id=161380
@
text
@d114 151
a264 139
  protected final String TEXT_94 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_95 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_96 = " parent = getUpdatableParent();" + NL + "\t\t";
  protected final String TEXT_97 = " connection = (";
  protected final String TEXT_98 = ") parent.getFigure();";
  protected final String TEXT_99 = NL + "\t\t((";
  protected final String TEXT_100 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_101 = "(connection, ";
  protected final String TEXT_102 = ".";
  protected final String TEXT_103 = ") {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_104 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL;
  protected final String TEXT_105 = NL;
  protected final String TEXT_106 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_107 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_108 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_109 = " element = ";
  protected final String TEXT_110 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_111 = " element = ";
  protected final String TEXT_112 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_113 = " element, String pattern) {";
  protected final String TEXT_114 = NL + "\t\treturn ";
  protected final String TEXT_115 = ".format(pattern, new Object[] {";
  protected final String TEXT_116 = NL + "\t\t\tnew ";
  protected final String TEXT_117 = "(";
  protected final String TEXT_118 = ")";
  protected final String TEXT_119 = ",";
  protected final String TEXT_120 = NL + "\t\t});";
  protected final String TEXT_121 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_122 = NL + "\t}";
  protected final String TEXT_123 = NL;
  protected final String TEXT_124 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_125 = NL + "\t\t";
  protected final String TEXT_126 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_127 = ") ";
  protected final String TEXT_128 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_129 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_130 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_131 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_132 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_133 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_134 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_135 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_136 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_137 = "\t" + NL + "\t}";
  protected final String TEXT_138 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " createdFont;";
  protected final String TEXT_140 = "\t";
  protected final String TEXT_141 = NL;
  protected final String TEXT_142 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_143 = " style = (";
  protected final String TEXT_144 = ")  ";
  protected final String TEXT_145 = ".getStyle(";
  protected final String TEXT_146 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_147 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_148 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_149 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_150 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_151 = " getLabelIcon() {";
  protected final String TEXT_152 = NL + "\t\t";
  protected final String TEXT_153 = " imageDescriptor = ";
  protected final String TEXT_154 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_155 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_156 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_157 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_158 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_159 = NL + "\t\t";
  protected final String TEXT_160 = " view = (";
  protected final String TEXT_161 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_162 = ") view.getElement();";
  protected final String TEXT_163 = NL + "\t\t";
  protected final String TEXT_164 = " target = ((";
  protected final String TEXT_165 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_166 = ") ? (";
  protected final String TEXT_167 = ") target.getElement() : null;";
  protected final String TEXT_168 = NL + "\t\treturn null;";
  protected final String TEXT_169 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_170 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_171 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_172 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_173 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_175 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_177 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_178 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_179 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_180 = ".eINSTANCE.get";
  protected final String TEXT_181 = "(), labelRefresher);";
  protected final String TEXT_182 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_183 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_184 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_185 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_186 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_187 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_188 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_189 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_190 = ".eINSTANCE.get";
  protected final String TEXT_191 = "(), labelRefresher);";
  protected final String TEXT_192 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_193 = ".Refresher labelRefresher = new ";
  protected final String TEXT_194 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_195 = ".Refresher fontColorRefresher = new ";
  protected final String TEXT_196 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_197 = ".Refresher fontRefresher = new ";
  protected final String TEXT_198 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_199 = NL;
  protected final String TEXT_200 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_201 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_202 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_203 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_204 = " createLabel() {";
  protected final String TEXT_205 = NL + "\t\treturn new ";
  protected final String TEXT_206 = "();";
  protected final String TEXT_207 = NL + "\t\treturn ";
  protected final String TEXT_208 = ";";
  protected final String TEXT_209 = NL + "\t\treturn new ";
  protected final String TEXT_210 = "();";
  protected final String TEXT_211 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_212 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_213 = " label = createLabel();";
  protected final String TEXT_214 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_215 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_216 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_217 = NL + NL + "\t/**";
  protected final String TEXT_218 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_219 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_220 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_221 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_222 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_223 = "(";
  protected final String TEXT_224 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_225 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_226 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_227 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_228 = NL;
  protected final String TEXT_229 = NL;
  protected final String TEXT_230 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_231 = NL + "}";
  protected final String TEXT_232 = NL;
d560 24
d587 1
a587 1
    stringBuffer.append(TEXT_95);
d589 1
a589 1
    stringBuffer.append(TEXT_96);
d591 1
a591 1
    stringBuffer.append(TEXT_97);
d593 1
a593 1
    stringBuffer.append(TEXT_98);
d616 1
a616 1
    stringBuffer.append(TEXT_99);
d618 1
a618 1
    stringBuffer.append(TEXT_100);
d620 1
a620 1
    stringBuffer.append(TEXT_101);
d622 1
a622 1
    stringBuffer.append(TEXT_102);
d624 1
a624 1
    stringBuffer.append(TEXT_103);
d626 2
a627 2
    stringBuffer.append(TEXT_104);
    stringBuffer.append(TEXT_105);
d661 1
a661 1
    stringBuffer.append(TEXT_106);
d663 1
a663 1
    stringBuffer.append(TEXT_107);
d665 1
a665 1
    stringBuffer.append(TEXT_108);
d667 1
a667 1
    stringBuffer.append(TEXT_109);
d669 1
a669 1
    stringBuffer.append(TEXT_110);
d671 1
a671 1
    stringBuffer.append(TEXT_111);
d673 1
a673 1
    stringBuffer.append(TEXT_112);
d675 1
a675 1
    stringBuffer.append(TEXT_113);
d680 1
a680 1
    stringBuffer.append(TEXT_114);
d682 1
a682 1
    stringBuffer.append(TEXT_115);
d688 1
a688 1
    stringBuffer.append(TEXT_116);
d690 1
a690 1
    stringBuffer.append(TEXT_117);
d696 1
a696 1
    stringBuffer.append(TEXT_118);
d700 1
a700 1
    stringBuffer.append(TEXT_119);
d705 1
a705 1
    stringBuffer.append(TEXT_120);
d709 1
a709 1
    stringBuffer.append(TEXT_121);
d713 2
a714 2
    stringBuffer.append(TEXT_122);
    stringBuffer.append(TEXT_123);
d722 1
a722 1
    stringBuffer.append(TEXT_124);
d726 1
a726 1
    stringBuffer.append(TEXT_125);
d728 1
a728 1
    stringBuffer.append(TEXT_126);
d730 1
a730 1
    stringBuffer.append(TEXT_127);
d732 1
a732 1
    stringBuffer.append(TEXT_128);
d734 1
a734 1
    stringBuffer.append(TEXT_129);
d736 1
a736 1
    stringBuffer.append(TEXT_130);
d738 1
a738 1
    stringBuffer.append(TEXT_131);
d740 1
a740 1
    stringBuffer.append(TEXT_132);
d742 1
a742 1
    stringBuffer.append(TEXT_133);
d744 1
a744 1
    stringBuffer.append(TEXT_134);
d746 1
a746 1
    stringBuffer.append(TEXT_135);
d748 1
a748 1
    stringBuffer.append(TEXT_136);
d752 1
a752 1
    stringBuffer.append(TEXT_137);
d756 1
a756 1
    stringBuffer.append(TEXT_138);
d758 1
a758 1
    stringBuffer.append(TEXT_139);
d762 3
a764 3
    stringBuffer.append(TEXT_140);
    stringBuffer.append(TEXT_141);
    stringBuffer.append(TEXT_142);
d766 1
a766 1
    stringBuffer.append(TEXT_143);
d768 1
a768 1
    stringBuffer.append(TEXT_144);
d770 1
a770 1
    stringBuffer.append(TEXT_145);
d772 1
a772 1
    stringBuffer.append(TEXT_146);
d774 1
a774 1
    stringBuffer.append(TEXT_147);
d776 1
a776 1
    stringBuffer.append(TEXT_148);
d778 1
a778 1
    stringBuffer.append(TEXT_149);
d780 1
a780 1
    stringBuffer.append(TEXT_150);
d782 1
a782 1
    stringBuffer.append(TEXT_151);
d786 1
a786 1
    stringBuffer.append(TEXT_152);
d788 1
a788 1
    stringBuffer.append(TEXT_153);
d790 1
a790 1
    stringBuffer.append(TEXT_154);
d794 1
a794 1
    stringBuffer.append(TEXT_155);
d796 1
a796 1
    stringBuffer.append(TEXT_156);
d798 1
a798 1
    stringBuffer.append(TEXT_157);
d800 1
a800 1
    stringBuffer.append(TEXT_158);
d804 1
a804 1
    stringBuffer.append(TEXT_159);
d806 1
a806 1
    stringBuffer.append(TEXT_160);
d808 1
a808 1
    stringBuffer.append(TEXT_161);
d810 1
a810 1
    stringBuffer.append(TEXT_162);
d814 1
a814 1
    stringBuffer.append(TEXT_163);
d816 1
a816 1
    stringBuffer.append(TEXT_164);
d818 1
a818 1
    stringBuffer.append(TEXT_165);
d820 1
a820 1
    stringBuffer.append(TEXT_166);
d822 1
a822 1
    stringBuffer.append(TEXT_167);
d826 1
a826 1
    stringBuffer.append(TEXT_168);
d830 1
a830 1
    stringBuffer.append(TEXT_169);
d832 1
a832 1
    stringBuffer.append(TEXT_170);
d834 1
a834 1
    stringBuffer.append(TEXT_171);
d836 1
a836 1
    stringBuffer.append(TEXT_172);
d838 1
a838 1
    stringBuffer.append(TEXT_173);
d840 1
a840 1
    stringBuffer.append(TEXT_174);
d842 1
a842 1
    stringBuffer.append(TEXT_175);
d844 1
a844 1
    stringBuffer.append(TEXT_176);
d846 1
a846 1
    stringBuffer.append(TEXT_177);
d848 1
a848 1
    stringBuffer.append(TEXT_178);
d855 1
a855 1
    stringBuffer.append(TEXT_179);
d857 1
a857 1
    stringBuffer.append(TEXT_180);
d859 1
a859 1
    stringBuffer.append(TEXT_181);
d864 1
a864 1
    stringBuffer.append(TEXT_182);
d866 1
a866 1
    stringBuffer.append(TEXT_183);
d868 1
a868 1
    stringBuffer.append(TEXT_184);
d870 1
a870 1
    stringBuffer.append(TEXT_185);
d872 1
a872 1
    stringBuffer.append(TEXT_186);
d874 1
a874 1
    stringBuffer.append(TEXT_187);
d876 1
a876 1
    stringBuffer.append(TEXT_188);
d883 1
a883 1
    stringBuffer.append(TEXT_189);
d885 1
a885 1
    stringBuffer.append(TEXT_190);
d887 1
a887 1
    stringBuffer.append(TEXT_191);
d892 1
a892 1
    stringBuffer.append(TEXT_192);
d894 1
a894 1
    stringBuffer.append(TEXT_193);
d896 1
a896 1
    stringBuffer.append(TEXT_194);
d898 1
a898 1
    stringBuffer.append(TEXT_195);
d900 1
a900 1
    stringBuffer.append(TEXT_196);
d902 1
a902 1
    stringBuffer.append(TEXT_197);
d904 1
a904 1
    stringBuffer.append(TEXT_198);
d908 1
a908 1
    stringBuffer.append(TEXT_199);
d937 1
a937 1
    stringBuffer.append(TEXT_200);
d939 1
a939 1
    stringBuffer.append(TEXT_201);
d941 1
a941 1
    stringBuffer.append(TEXT_202);
d943 1
a943 1
    stringBuffer.append(TEXT_203);
d945 1
a945 1
    stringBuffer.append(TEXT_204);
d949 1
a949 1
    stringBuffer.append(TEXT_205);
d951 1
a951 1
    stringBuffer.append(TEXT_206);
d954 1
a954 1
    stringBuffer.append(TEXT_207);
d956 1
a956 1
    stringBuffer.append(TEXT_208);
d960 1
a960 1
    stringBuffer.append(TEXT_209);
d962 1
a962 1
    stringBuffer.append(TEXT_210);
d964 1
a964 1
    stringBuffer.append(TEXT_211);
d966 1
a966 1
    stringBuffer.append(TEXT_212);
d968 1
a968 1
    stringBuffer.append(TEXT_213);
d972 1
a972 1
    stringBuffer.append(TEXT_214);
d976 1
a976 1
    stringBuffer.append(TEXT_215);
d980 1
a980 1
    stringBuffer.append(TEXT_216);
d982 1
a982 1
    stringBuffer.append(TEXT_217);
d986 1
a986 1
    stringBuffer.append(TEXT_218);
d990 1
a990 1
    stringBuffer.append(TEXT_219);
d992 1
a992 1
    stringBuffer.append(TEXT_220);
d994 1
a994 1
    stringBuffer.append(TEXT_221);
d1008 1
a1008 1
    stringBuffer.append(TEXT_222);
d1010 1
a1010 1
    stringBuffer.append(TEXT_223);
d1012 1
a1012 1
    stringBuffer.append(TEXT_224);
d1016 1
a1016 1
    stringBuffer.append(TEXT_225);
d1020 1
a1020 1
    stringBuffer.append(TEXT_226);
d1024 1
a1024 1
    stringBuffer.append(TEXT_227);
d1029 1
a1029 1
    stringBuffer.append(TEXT_228);
d1031 1
a1031 1
    stringBuffer.append(TEXT_229);
d1035 1
a1035 1
    stringBuffer.append(TEXT_230);
d1042 1
a1042 1
    stringBuffer.append(TEXT_231);
d1044 1
a1044 1
    stringBuffer.append(TEXT_232);
@


1.14
log
@#161380 move readOnly back to GenLabel
@
text
@d73 180
a252 219
  protected final String TEXT_53 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_54 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_55 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_56 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_57 = " createDomainModelCommand(";
  protected final String TEXT_58 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_59 = " element = ";
  protected final String TEXT_60 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_61 = " feature = (";
  protected final String TEXT_62 = ") ";
  protected final String TEXT_63 = ".eINSTANCE.get";
  protected final String TEXT_64 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_65 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_66 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_67 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_68 = " result = new ";
  protected final String TEXT_69 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_70 = " values = new ";
  protected final String TEXT_71 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_72 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_73 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_74 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_75 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_76 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_77 = NL + "\t\t\t\t\t}";
  protected final String TEXT_78 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_79 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_80 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_81 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_82 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_83 = " createDomainModelCommand(";
  protected final String TEXT_84 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_85 = " element = ";
  protected final String TEXT_86 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_87 = " result = new ";
  protected final String TEXT_88 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_89 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_90 = " ";
  protected final String TEXT_91 = "feature = (";
  protected final String TEXT_92 = ") ";
  protected final String TEXT_93 = ".eINSTANCE.get";
  protected final String TEXT_94 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_95 = ".parseValue(feature, values[";
  protected final String TEXT_96 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_97 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_98 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_99 = " ";
  protected final String TEXT_100 = "values = new ";
  protected final String TEXT_101 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_102 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_103 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_104 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_105 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_106 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_107 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_108 = NL + "\t\t\t\t});";
  protected final String TEXT_109 = NL + "\t}" + NL;
  protected final String TEXT_110 = NL;
  protected final String TEXT_111 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_112 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_113 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_114 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_115 = "(this, ";
  protected final String TEXT_116 = ".class, new ";
  protected final String TEXT_117 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_118 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_119 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_120 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_121 = " parent = getUpdatableParent();" + NL + "\t\t";
  protected final String TEXT_122 = " connection = (";
  protected final String TEXT_123 = ") parent.getFigure();";
  protected final String TEXT_124 = NL + "\t\t((";
  protected final String TEXT_125 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_126 = "(connection, ";
  protected final String TEXT_127 = ".";
  protected final String TEXT_128 = ") {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_129 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL;
  protected final String TEXT_130 = NL;
  protected final String TEXT_131 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_132 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_PATTERN = \"";
  protected final String TEXT_133 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_134 = " element = ";
  protected final String TEXT_135 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_136 = " element = ";
  protected final String TEXT_137 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_138 = " element, String pattern) {";
  protected final String TEXT_139 = NL + "\t\tif (";
  protected final String TEXT_140 = " == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_141 = NL + "\t\treturn ";
  protected final String TEXT_142 = ".format(pattern, new Object[] {";
  protected final String TEXT_143 = NL + "\t\t\tnew ";
  protected final String TEXT_144 = "(";
  protected final String TEXT_145 = ")";
  protected final String TEXT_146 = NL + "\t\t});";
  protected final String TEXT_147 = NL + "\t\treturn ";
  protected final String TEXT_148 = ".format(pattern, new Object[] {";
  protected final String TEXT_149 = NL + "\t\t\tnew ";
  protected final String TEXT_150 = "(";
  protected final String TEXT_151 = ")";
  protected final String TEXT_152 = ",";
  protected final String TEXT_153 = NL + "\t\t});";
  protected final String TEXT_154 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_155 = NL + "\t}";
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_158 = NL + "\t\t";
  protected final String TEXT_159 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_160 = ") ";
  protected final String TEXT_161 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_162 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_163 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_164 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_165 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_166 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_167 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_168 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_169 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_170 = "\t" + NL + "\t}";
  protected final String TEXT_171 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_172 = " createdFont;";
  protected final String TEXT_173 = "\t";
  protected final String TEXT_174 = NL;
  protected final String TEXT_175 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_176 = " style = (";
  protected final String TEXT_177 = ")  ";
  protected final String TEXT_178 = ".getStyle(";
  protected final String TEXT_179 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_180 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_181 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_182 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_183 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_184 = " getLabelIcon() {";
  protected final String TEXT_185 = NL + "\t\t";
  protected final String TEXT_186 = " imageDescriptor = ";
  protected final String TEXT_187 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_188 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_189 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_190 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_191 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_192 = NL + "\t\t";
  protected final String TEXT_193 = " view = (";
  protected final String TEXT_194 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_195 = ") view.getElement();";
  protected final String TEXT_196 = NL + "\t\t";
  protected final String TEXT_197 = " target = ((";
  protected final String TEXT_198 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_199 = ") ? (";
  protected final String TEXT_200 = ") target.getElement() : null;";
  protected final String TEXT_201 = NL + "\t\treturn null;";
  protected final String TEXT_202 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_203 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_204 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_205 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_206 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_207 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_208 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_209 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_210 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_211 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_212 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_213 = ".eINSTANCE.get";
  protected final String TEXT_214 = "(), labelRefresher);";
  protected final String TEXT_215 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_216 = ".eINSTANCE.get";
  protected final String TEXT_217 = "(), labelRefresher);";
  protected final String TEXT_218 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_219 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_220 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_221 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_222 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_223 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_224 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_225 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_226 = ".eINSTANCE.get";
  protected final String TEXT_227 = "(), labelRefresher);";
  protected final String TEXT_228 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_229 = ".eINSTANCE.get";
  protected final String TEXT_230 = "(), labelRefresher);";
  protected final String TEXT_231 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_232 = ".Refresher labelRefresher = new ";
  protected final String TEXT_233 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_234 = ".Refresher fontColorRefresher = new ";
  protected final String TEXT_235 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_236 = ".Refresher fontRefresher = new ";
  protected final String TEXT_237 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_238 = NL;
  protected final String TEXT_239 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_240 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_241 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_242 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_243 = " createLabel() {";
  protected final String TEXT_244 = NL + "\t\treturn new ";
  protected final String TEXT_245 = "();";
  protected final String TEXT_246 = NL + "\t\treturn ";
  protected final String TEXT_247 = ";";
  protected final String TEXT_248 = NL + "\t\treturn new ";
  protected final String TEXT_249 = "();";
  protected final String TEXT_250 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_251 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_252 = " label = createLabel();";
  protected final String TEXT_253 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_254 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_255 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_256 = NL + NL + "\t/**";
  protected final String TEXT_257 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_258 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_259 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_260 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_261 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_262 = "(";
  protected final String TEXT_263 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_264 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_265 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_266 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_267 = NL;
  protected final String TEXT_268 = NL;
  protected final String TEXT_269 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_270 = NL + "}";
  protected final String TEXT_271 = NL;
d404 1
a404 1
if (labelModelFacet instanceof FeatureLabelModelFacet || labelModelFacet instanceof CompositeFeatureLabelModelFacet && !isReadOnly) {
d441 2
a442 2
	GenFeature featureToSet = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();
	EStructuralFeature ecoreFeature = featureToSet.getEcoreFeature();
d445 2
d448 1
a448 1
    stringBuffer.append(TEXT_54);
d450 1
a450 1
    stringBuffer.append(TEXT_55);
d452 1
a452 1
    stringBuffer.append(TEXT_56);
d454 1
a454 1
    stringBuffer.append(TEXT_57);
d456 1
a456 1
    stringBuffer.append(TEXT_58);
d458 1
a458 1
    stringBuffer.append(TEXT_59);
a459 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d463 1
a463 1
    stringBuffer.append(importManager.getImportedName(featureToSet.getGenPackage().getQualifiedPackageInterfaceName()));
a464 60
    stringBuffer.append(featureToSet.getFeatureAccessorName());
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.ParserUtil"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"));
    stringBuffer.append(TEXT_66);
    
	if (ecoreFeature.isMany()) {

    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.EList"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(featureToSet.getAccessorName());
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand"));
    stringBuffer.append(TEXT_74);
    
	} else {

    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand"));
    stringBuffer.append(TEXT_76);
    
	}

    stringBuffer.append(TEXT_77);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	List metaFeatures = compositeFeatureLabelModelFacet.getMetaFeatures();

    stringBuffer.append(TEXT_78);
    stringBuffer.append(metaFeatures.size());
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_88);
d471 1
a471 1
    stringBuffer.append(TEXT_89);
d474 1
a474 1
    stringBuffer.append(TEXT_90);
d476 1
a476 1
    stringBuffer.append(TEXT_91);
d478 1
a478 1
    stringBuffer.append(TEXT_92);
d480 1
a480 1
    stringBuffer.append(TEXT_93);
d482 1
a482 1
    stringBuffer.append(TEXT_94);
d484 1
a484 1
    stringBuffer.append(TEXT_95);
d486 1
a486 1
    stringBuffer.append(TEXT_96);
d488 1
a488 1
    stringBuffer.append(TEXT_97);
d492 1
a492 1
    stringBuffer.append(TEXT_98);
d495 1
a495 1
    stringBuffer.append(TEXT_99);
d497 1
a497 1
    stringBuffer.append(TEXT_100);
d499 1
a499 1
    stringBuffer.append(TEXT_101);
d501 1
a501 1
    stringBuffer.append(TEXT_102);
d503 1
a503 1
    stringBuffer.append(TEXT_103);
d505 1
a505 1
    stringBuffer.append(TEXT_104);
d509 1
a509 1
    stringBuffer.append(TEXT_105);
d511 1
a511 1
    stringBuffer.append(TEXT_106);
d518 1
a518 1
    stringBuffer.append(TEXT_107);
d522 1
a522 1
    stringBuffer.append(TEXT_108);
d526 1
a526 1
    stringBuffer.append(TEXT_109);
d528 1
a528 1
if (labelModelFacet instanceof FeatureLabelModelFacet || labelModelFacet instanceof CompositeFeatureLabelModelFacet && !isReadOnly) {
d530 2
a531 2
    stringBuffer.append(TEXT_110);
    stringBuffer.append(TEXT_111);
d533 1
a533 1
    stringBuffer.append(TEXT_112);
d535 1
a535 1
    stringBuffer.append(TEXT_113);
d537 1
a537 1
    stringBuffer.append(TEXT_114);
d539 1
a539 1
    stringBuffer.append(TEXT_115);
d541 1
a541 1
    stringBuffer.append(TEXT_116);
d543 1
a543 1
    stringBuffer.append(TEXT_117);
d545 1
a545 1
    stringBuffer.append(TEXT_118);
d547 1
a547 1
    stringBuffer.append(TEXT_119);
d551 1
a551 1
    stringBuffer.append(TEXT_120);
d553 1
a553 1
    stringBuffer.append(TEXT_121);
d555 1
a555 1
    stringBuffer.append(TEXT_122);
d557 1
a557 1
    stringBuffer.append(TEXT_123);
d580 1
a580 1
    stringBuffer.append(TEXT_124);
d582 1
a582 1
    stringBuffer.append(TEXT_125);
d584 1
a584 1
    stringBuffer.append(TEXT_126);
d586 1
a586 1
    stringBuffer.append(TEXT_127);
d588 1
a588 1
    stringBuffer.append(TEXT_128);
d590 2
a591 2
    stringBuffer.append(TEXT_129);
    stringBuffer.append(TEXT_130);
a608 10
		viewPattern = "{0}";
	}
	editPattern = featureLabelModelFacet.getEditPattern();
	if (editPattern == null || editPattern.length() == 0) {
		editPattern = "{0}";
	}
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	viewPattern = compositeFeatureLabelModelFacet.getViewPattern();
	if (viewPattern == null || viewPattern.length() == 0) {
d610 1
a610 1
		for(int i = 0; i < compositeFeatureLabelModelFacet.getMetaFeatures().size(); i++) {
d615 1
a615 1
	editPattern = compositeFeatureLabelModelFacet.getEditPattern();
d618 1
a618 1
		for(int i = 0; i < compositeFeatureLabelModelFacet.getMetaFeatures().size(); i++) {
d625 1
a625 1
    stringBuffer.append(TEXT_131);
d627 1
a627 1
    stringBuffer.append(TEXT_132);
d629 1
a629 1
    stringBuffer.append(TEXT_133);
d631 1
a631 1
    stringBuffer.append(TEXT_134);
d633 1
a633 1
    stringBuffer.append(TEXT_135);
d635 1
a635 1
    stringBuffer.append(TEXT_136);
d637 1
a637 1
    stringBuffer.append(TEXT_137);
d639 1
a639 1
    stringBuffer.append(TEXT_138);
a642 2
	GenFeature feature = featureLabelModelFacet.getMetaFeature();
	if (!feature.isPrimitiveType()) {
d644 1
a644 7
    stringBuffer.append(TEXT_139);
    myFeatureGetAccessorHelper.appendFeatureValueGetter("element", feature, underlyingMetaClass, false);
    stringBuffer.append(TEXT_140);
    
	}

    stringBuffer.append(TEXT_141);
d646 1
a646 13
    stringBuffer.append(TEXT_142);
    
		if (feature.isPrimitiveType()) {

    stringBuffer.append(TEXT_143);
    stringBuffer.append(primitiveTypeToWrapperClassName.get(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClass()));
    stringBuffer.append(TEXT_144);
    
		}
		myFeatureGetAccessorHelper.appendFeatureValueGetter("element", feature, underlyingMetaClass, false);
		if (feature.isPrimitiveType()) {

    stringBuffer.append(TEXT_145);
d648 1
a648 12
		}

    stringBuffer.append(TEXT_146);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;

    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
    stringBuffer.append(TEXT_148);
    
	for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
d652 1
a652 1
    stringBuffer.append(TEXT_149);
d654 1
a654 1
    stringBuffer.append(TEXT_150);
d660 1
a660 1
    stringBuffer.append(TEXT_151);
d664 1
a664 1
    stringBuffer.append(TEXT_152);
d669 1
a669 1
    stringBuffer.append(TEXT_153);
d673 1
a673 1
    stringBuffer.append(TEXT_154);
d677 2
a678 2
    stringBuffer.append(TEXT_155);
    stringBuffer.append(TEXT_156);
d686 1
a686 1
    stringBuffer.append(TEXT_157);
d690 1
a690 1
    stringBuffer.append(TEXT_158);
d692 1
a692 1
    stringBuffer.append(TEXT_159);
d694 1
a694 1
    stringBuffer.append(TEXT_160);
d696 1
a696 1
    stringBuffer.append(TEXT_161);
d698 1
a698 1
    stringBuffer.append(TEXT_162);
d700 1
a700 1
    stringBuffer.append(TEXT_163);
d702 1
a702 1
    stringBuffer.append(TEXT_164);
d704 1
a704 1
    stringBuffer.append(TEXT_165);
d706 1
a706 1
    stringBuffer.append(TEXT_166);
d708 1
a708 1
    stringBuffer.append(TEXT_167);
d710 1
a710 1
    stringBuffer.append(TEXT_168);
d712 1
a712 1
    stringBuffer.append(TEXT_169);
d716 1
a716 1
    stringBuffer.append(TEXT_170);
d720 1
a720 1
    stringBuffer.append(TEXT_171);
d722 1
a722 1
    stringBuffer.append(TEXT_172);
d726 3
a728 3
    stringBuffer.append(TEXT_173);
    stringBuffer.append(TEXT_174);
    stringBuffer.append(TEXT_175);
d730 1
a730 1
    stringBuffer.append(TEXT_176);
d732 1
a732 1
    stringBuffer.append(TEXT_177);
d734 1
a734 1
    stringBuffer.append(TEXT_178);
d736 1
a736 1
    stringBuffer.append(TEXT_179);
d738 1
a738 1
    stringBuffer.append(TEXT_180);
d740 1
a740 1
    stringBuffer.append(TEXT_181);
d742 1
a742 1
    stringBuffer.append(TEXT_182);
d744 1
a744 1
    stringBuffer.append(TEXT_183);
d746 1
a746 1
    stringBuffer.append(TEXT_184);
d750 1
a750 1
    stringBuffer.append(TEXT_185);
d752 1
a752 1
    stringBuffer.append(TEXT_186);
d754 1
a754 1
    stringBuffer.append(TEXT_187);
d758 1
a758 1
    stringBuffer.append(TEXT_188);
d760 1
a760 1
    stringBuffer.append(TEXT_189);
d762 1
a762 1
    stringBuffer.append(TEXT_190);
d764 1
a764 1
    stringBuffer.append(TEXT_191);
d768 1
a768 1
    stringBuffer.append(TEXT_192);
d770 1
a770 1
    stringBuffer.append(TEXT_193);
d772 1
a772 1
    stringBuffer.append(TEXT_194);
d774 1
a774 1
    stringBuffer.append(TEXT_195);
d778 1
a778 1
    stringBuffer.append(TEXT_196);
d780 1
a780 1
    stringBuffer.append(TEXT_197);
d782 1
a782 1
    stringBuffer.append(TEXT_198);
d784 1
a784 1
    stringBuffer.append(TEXT_199);
d786 1
a786 1
    stringBuffer.append(TEXT_200);
d790 1
a790 1
    stringBuffer.append(TEXT_201);
d794 1
a794 1
    stringBuffer.append(TEXT_202);
d796 1
a796 1
    stringBuffer.append(TEXT_203);
d798 1
a798 1
    stringBuffer.append(TEXT_204);
d800 1
a800 1
    stringBuffer.append(TEXT_205);
d802 1
a802 1
    stringBuffer.append(TEXT_206);
d804 1
a804 1
    stringBuffer.append(TEXT_207);
d806 1
a806 1
    stringBuffer.append(TEXT_208);
d808 1
a808 1
    stringBuffer.append(TEXT_209);
d810 1
a810 1
    stringBuffer.append(TEXT_210);
d812 1
a812 1
    stringBuffer.append(TEXT_211);
d815 2
a816 11
	GenFeature feature = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();

    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_214);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
d819 1
a819 1
    stringBuffer.append(TEXT_215);
d821 1
a821 1
    stringBuffer.append(TEXT_216);
d823 1
a823 1
    stringBuffer.append(TEXT_217);
d828 1
a828 1
    stringBuffer.append(TEXT_218);
d830 1
a830 1
    stringBuffer.append(TEXT_219);
d832 1
a832 1
    stringBuffer.append(TEXT_220);
d834 1
a834 1
    stringBuffer.append(TEXT_221);
d836 1
a836 1
    stringBuffer.append(TEXT_222);
d838 1
a838 1
    stringBuffer.append(TEXT_223);
d840 1
a840 1
    stringBuffer.append(TEXT_224);
d843 2
a844 11
	GenFeature feature = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();

    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_226);
    stringBuffer.append(feature.getFeatureAccessorName());
    stringBuffer.append(TEXT_227);
    
} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
	for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
d847 1
a847 1
    stringBuffer.append(TEXT_228);
d849 1
a849 1
    stringBuffer.append(TEXT_229);
d851 1
a851 1
    stringBuffer.append(TEXT_230);
d856 1
a856 1
    stringBuffer.append(TEXT_231);
d858 1
a858 1
    stringBuffer.append(TEXT_232);
d860 1
a860 1
    stringBuffer.append(TEXT_233);
d862 1
a862 1
    stringBuffer.append(TEXT_234);
d864 1
a864 1
    stringBuffer.append(TEXT_235);
d866 1
a866 1
    stringBuffer.append(TEXT_236);
d868 1
a868 1
    stringBuffer.append(TEXT_237);
d872 1
a872 1
    stringBuffer.append(TEXT_238);
d901 1
a901 1
    stringBuffer.append(TEXT_239);
d903 1
a903 1
    stringBuffer.append(TEXT_240);
d905 1
a905 1
    stringBuffer.append(TEXT_241);
d907 1
a907 1
    stringBuffer.append(TEXT_242);
d909 1
a909 1
    stringBuffer.append(TEXT_243);
d913 1
a913 1
    stringBuffer.append(TEXT_244);
d915 1
a915 1
    stringBuffer.append(TEXT_245);
d918 1
a918 1
    stringBuffer.append(TEXT_246);
d920 1
a920 1
    stringBuffer.append(TEXT_247);
d924 1
a924 1
    stringBuffer.append(TEXT_248);
d926 1
a926 1
    stringBuffer.append(TEXT_249);
d928 1
a928 1
    stringBuffer.append(TEXT_250);
d930 1
a930 1
    stringBuffer.append(TEXT_251);
d932 1
a932 1
    stringBuffer.append(TEXT_252);
d936 1
a936 1
    stringBuffer.append(TEXT_253);
d940 1
a940 1
    stringBuffer.append(TEXT_254);
d944 1
a944 1
    stringBuffer.append(TEXT_255);
d946 1
a946 1
    stringBuffer.append(TEXT_256);
d950 1
a950 1
    stringBuffer.append(TEXT_257);
d954 1
a954 1
    stringBuffer.append(TEXT_258);
d956 1
a956 1
    stringBuffer.append(TEXT_259);
d958 1
a958 1
    stringBuffer.append(TEXT_260);
d972 1
a972 1
    stringBuffer.append(TEXT_261);
d974 1
a974 1
    stringBuffer.append(TEXT_262);
d976 1
a976 1
    stringBuffer.append(TEXT_263);
d980 1
a980 1
    stringBuffer.append(TEXT_264);
d984 1
a984 1
    stringBuffer.append(TEXT_265);
d988 1
a988 1
    stringBuffer.append(TEXT_266);
d993 1
a993 1
    stringBuffer.append(TEXT_267);
d995 1
a995 1
    stringBuffer.append(TEXT_268);
d999 1
a999 1
    stringBuffer.append(TEXT_269);
d1006 1
a1006 1
    stringBuffer.append(TEXT_270);
d1008 1
a1008 1
    stringBuffer.append(TEXT_271);
@


1.13
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d313 1
a313 1
final boolean isReadOnly = genLabel.getModelFacet() != null && genLabel.getModelFacet().isReadOnly();
@


1.12
log
@[156358] bblajer - Diagram overview with Lite runtime
@
text
@d313 1
a313 1
final boolean isReadOnly = genLabel.isReadOnly();
@


1.11
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d59 173
a231 173
  protected final String TEXT_39 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_40 = " getDirectEditCommand(";
  protected final String TEXT_41 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_42 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_43 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_44 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_45 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_46 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_47 = " editingDomain = ";
  protected final String TEXT_48 = ".getEditingDomain(";
  protected final String TEXT_49 = ".getDiagram().getElement());";
  protected final String TEXT_50 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_51 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_52 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_53 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_54 = " createDomainModelCommand(";
  protected final String TEXT_55 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_56 = " element = ";
  protected final String TEXT_57 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_58 = " feature = (";
  protected final String TEXT_59 = ") ";
  protected final String TEXT_60 = ".eINSTANCE.get";
  protected final String TEXT_61 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_62 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_63 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_64 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_65 = " result = new ";
  protected final String TEXT_66 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_67 = " values = new ";
  protected final String TEXT_68 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_69 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_70 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_71 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_72 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_73 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_74 = NL + "\t\t\t\t\t}";
  protected final String TEXT_75 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_76 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_77 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_78 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_79 = "(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_80 = " createDomainModelCommand(";
  protected final String TEXT_81 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_82 = " element = ";
  protected final String TEXT_83 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_84 = " result = new ";
  protected final String TEXT_85 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_86 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_87 = " ";
  protected final String TEXT_88 = "feature = (";
  protected final String TEXT_89 = ") ";
  protected final String TEXT_90 = ".eINSTANCE.get";
  protected final String TEXT_91 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_92 = ".parseValue(feature, values[";
  protected final String TEXT_93 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_94 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_95 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_96 = " ";
  protected final String TEXT_97 = "values = new ";
  protected final String TEXT_98 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_99 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_100 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_101 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_102 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_103 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_104 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_105 = NL + "\t\t\t\t});";
  protected final String TEXT_106 = NL + "\t}" + NL;
  protected final String TEXT_107 = NL;
  protected final String TEXT_108 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_109 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_110 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_111 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_112 = "(this, ";
  protected final String TEXT_113 = ".class, new ";
  protected final String TEXT_114 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_115 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_116 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_117 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_118 = " parent = getUpdatableParent();" + NL + "\t\t";
  protected final String TEXT_119 = " connection = (";
  protected final String TEXT_120 = ") parent.getFigure();";
  protected final String TEXT_121 = NL + "\t\t((";
  protected final String TEXT_122 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_123 = "(connection, ";
  protected final String TEXT_124 = ".";
  protected final String TEXT_125 = ") {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_126 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL;
  protected final String TEXT_127 = NL;
  protected final String TEXT_128 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_129 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_130 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_131 = " element = ";
  protected final String TEXT_132 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_133 = " element = ";
  protected final String TEXT_134 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_135 = " element, String pattern) {";
  protected final String TEXT_136 = NL + "\t\tif (";
  protected final String TEXT_137 = " == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_138 = NL + "\t\treturn ";
  protected final String TEXT_139 = ".format(pattern, new Object[] {";
  protected final String TEXT_140 = NL + "\t\t\tnew ";
  protected final String TEXT_141 = "(";
  protected final String TEXT_142 = ")";
  protected final String TEXT_143 = NL + "\t\t});";
  protected final String TEXT_144 = NL + "\t\treturn ";
  protected final String TEXT_145 = ".format(pattern, new Object[] {";
  protected final String TEXT_146 = NL + "\t\t\tnew ";
  protected final String TEXT_147 = "(";
  protected final String TEXT_148 = ")";
  protected final String TEXT_149 = ",";
  protected final String TEXT_150 = NL + "\t\t});";
  protected final String TEXT_151 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_152 = NL + "\t}";
  protected final String TEXT_153 = NL;
  protected final String TEXT_154 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_155 = NL + "\t\t";
  protected final String TEXT_156 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_157 = ") ";
  protected final String TEXT_158 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_159 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_160 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_161 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_162 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_163 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_164 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_165 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_166 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_167 = "\t" + NL + "\t}";
  protected final String TEXT_168 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_169 = " createdFont;";
  protected final String TEXT_170 = "\t";
  protected final String TEXT_171 = NL;
  protected final String TEXT_172 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_173 = " style = (";
  protected final String TEXT_174 = ")  ";
  protected final String TEXT_175 = ".getStyle(";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_177 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_178 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_179 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_180 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_181 = " getLabelIcon() {";
  protected final String TEXT_182 = NL + "\t\t";
  protected final String TEXT_183 = " imageDescriptor = ";
  protected final String TEXT_184 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_186 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_187 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_188 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_189 = NL + "\t\t";
  protected final String TEXT_190 = " view = (";
  protected final String TEXT_191 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_192 = ") view.getElement();";
  protected final String TEXT_193 = NL + "\t\t";
  protected final String TEXT_194 = " target = ((";
  protected final String TEXT_195 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_196 = ") ? (";
  protected final String TEXT_197 = ") target.getElement() : null;";
  protected final String TEXT_198 = NL + "\t\treturn null;";
  protected final String TEXT_199 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_200 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_201 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_202 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_203 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_204 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_205 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_206 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_207 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_208 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_209 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_210 = ".eINSTANCE.get";
  protected final String TEXT_211 = "(), labelRefresher);";
d235 10
a244 10
  protected final String TEXT_215 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_216 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_217 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_218 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_219 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_220 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_221 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_222 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_223 = ".eINSTANCE.get";
  protected final String TEXT_224 = "(), labelRefresher);";
d248 40
a287 40
  protected final String TEXT_228 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_229 = ".Refresher labelRefresher = new ";
  protected final String TEXT_230 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_231 = ".Refresher fontColorRefresher = new ";
  protected final String TEXT_232 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_233 = ".Refresher fontRefresher = new ";
  protected final String TEXT_234 = ".Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_235 = NL;
  protected final String TEXT_236 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_237 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_238 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_239 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_240 = " createLabel() {";
  protected final String TEXT_241 = NL + "\t\treturn new ";
  protected final String TEXT_242 = "();";
  protected final String TEXT_243 = NL + "\t\treturn ";
  protected final String TEXT_244 = ";";
  protected final String TEXT_245 = NL + "\t\treturn new ";
  protected final String TEXT_246 = "();";
  protected final String TEXT_247 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_248 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_249 = " label = createLabel();";
  protected final String TEXT_250 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_251 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_252 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_253 = NL + NL + "\t/**";
  protected final String TEXT_254 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_255 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_256 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_257 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_258 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_259 = "(";
  protected final String TEXT_260 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_261 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_262 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_263 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_264 = NL;
  protected final String TEXT_265 = NL;
  protected final String TEXT_266 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_267 = NL + "}";
d289 3
d444 1
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a454 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d456 1
a456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand"));
d458 1
a458 1
    stringBuffer.append(importManager.getImportedName("java.text.MessageFormat"));
d462 6
d469 1
a469 1
    stringBuffer.append(TEXT_45);
d471 1
a471 1
    stringBuffer.append(TEXT_46);
d473 1
a473 1
    stringBuffer.append(TEXT_47);
d475 1
a475 1
    stringBuffer.append(TEXT_48);
d477 1
a477 1
    stringBuffer.append(TEXT_49);
d483 1
a483 1
    stringBuffer.append(TEXT_50);
d485 1
a485 1
    stringBuffer.append(TEXT_51);
d487 1
a487 1
    stringBuffer.append(TEXT_52);
d489 1
a489 1
    stringBuffer.append(TEXT_53);
d491 1
a491 1
    stringBuffer.append(TEXT_54);
d493 1
a493 1
    stringBuffer.append(TEXT_55);
d495 1
a495 1
    stringBuffer.append(TEXT_56);
d497 1
a497 1
    stringBuffer.append(TEXT_57);
d499 1
a499 1
    stringBuffer.append(TEXT_58);
d501 1
a501 1
    stringBuffer.append(TEXT_59);
d503 1
a503 1
    stringBuffer.append(TEXT_60);
d505 1
a505 1
    stringBuffer.append(TEXT_61);
d507 1
a507 1
    stringBuffer.append(TEXT_62);
d509 1
a509 1
    stringBuffer.append(TEXT_63);
d513 1
a513 1
    stringBuffer.append(TEXT_64);
d515 1
a515 1
    stringBuffer.append(TEXT_65);
d517 1
a517 1
    stringBuffer.append(TEXT_66);
d519 1
a519 1
    stringBuffer.append(TEXT_67);
d521 1
a521 1
    stringBuffer.append(TEXT_68);
d523 1
a523 1
    stringBuffer.append(TEXT_69);
d525 1
a525 1
    stringBuffer.append(TEXT_70);
d527 1
a527 1
    stringBuffer.append(TEXT_71);
d531 1
a531 1
    stringBuffer.append(TEXT_72);
d533 1
a533 1
    stringBuffer.append(TEXT_73);
d537 1
a537 1
    stringBuffer.append(TEXT_74);
d543 1
a543 1
    stringBuffer.append(TEXT_75);
d545 1
a545 1
    stringBuffer.append(TEXT_76);
d547 1
a547 1
    stringBuffer.append(TEXT_77);
d549 1
a549 1
    stringBuffer.append(TEXT_78);
d551 1
a551 1
    stringBuffer.append(TEXT_79);
d553 1
a553 1
    stringBuffer.append(TEXT_80);
d555 1
a555 1
    stringBuffer.append(TEXT_81);
d557 1
a557 1
    stringBuffer.append(TEXT_82);
d559 1
a559 1
    stringBuffer.append(TEXT_83);
d561 1
a561 1
    stringBuffer.append(TEXT_84);
d563 1
a563 1
    stringBuffer.append(TEXT_85);
d570 1
a570 1
    stringBuffer.append(TEXT_86);
d573 1
a573 1
    stringBuffer.append(TEXT_87);
d575 1
a575 1
    stringBuffer.append(TEXT_88);
d577 1
a577 1
    stringBuffer.append(TEXT_89);
d579 1
a579 1
    stringBuffer.append(TEXT_90);
d581 1
a581 1
    stringBuffer.append(TEXT_91);
d583 1
a583 1
    stringBuffer.append(TEXT_92);
d585 1
a585 1
    stringBuffer.append(TEXT_93);
d587 1
a587 1
    stringBuffer.append(TEXT_94);
d591 1
a591 1
    stringBuffer.append(TEXT_95);
d594 1
a594 1
    stringBuffer.append(TEXT_96);
d596 1
a596 1
    stringBuffer.append(TEXT_97);
d598 1
a598 1
    stringBuffer.append(TEXT_98);
d600 1
a600 1
    stringBuffer.append(TEXT_99);
d602 1
a602 1
    stringBuffer.append(TEXT_100);
d604 1
a604 1
    stringBuffer.append(TEXT_101);
d608 1
a608 1
    stringBuffer.append(TEXT_102);
d610 1
a610 1
    stringBuffer.append(TEXT_103);
d617 1
a617 1
    stringBuffer.append(TEXT_104);
d621 1
a621 1
    stringBuffer.append(TEXT_105);
d625 1
a625 1
    stringBuffer.append(TEXT_106);
d629 2
a630 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(TEXT_108);
d632 1
a632 1
    stringBuffer.append(TEXT_109);
d634 1
a634 1
    stringBuffer.append(TEXT_110);
d636 1
a636 1
    stringBuffer.append(TEXT_111);
d638 1
a638 1
    stringBuffer.append(TEXT_112);
d640 1
a640 1
    stringBuffer.append(TEXT_113);
d642 1
a642 1
    stringBuffer.append(TEXT_114);
d644 1
a644 1
    stringBuffer.append(TEXT_115);
d646 1
a646 1
    stringBuffer.append(TEXT_116);
d650 1
a650 1
    stringBuffer.append(TEXT_117);
d652 1
a652 1
    stringBuffer.append(TEXT_118);
d654 1
a654 1
    stringBuffer.append(TEXT_119);
d656 1
a656 1
    stringBuffer.append(TEXT_120);
d679 1
a679 1
    stringBuffer.append(TEXT_121);
d681 1
a681 1
    stringBuffer.append(TEXT_122);
d683 1
a683 1
    stringBuffer.append(TEXT_123);
d685 1
a685 1
    stringBuffer.append(TEXT_124);
d687 1
a687 1
    stringBuffer.append(TEXT_125);
d689 2
a690 2
    stringBuffer.append(TEXT_126);
    stringBuffer.append(TEXT_127);
d734 1
a734 1
    stringBuffer.append(TEXT_128);
d736 1
a736 1
    stringBuffer.append(TEXT_129);
d738 1
a738 1
    stringBuffer.append(TEXT_130);
d740 1
a740 1
    stringBuffer.append(TEXT_131);
d742 1
a742 1
    stringBuffer.append(TEXT_132);
d744 1
a744 1
    stringBuffer.append(TEXT_133);
d746 1
a746 1
    stringBuffer.append(TEXT_134);
d748 1
a748 1
    stringBuffer.append(TEXT_135);
d755 1
a755 1
    stringBuffer.append(TEXT_136);
d757 1
a757 1
    stringBuffer.append(TEXT_137);
d761 1
a761 1
    stringBuffer.append(TEXT_138);
d763 1
a763 1
    stringBuffer.append(TEXT_139);
d767 1
a767 1
    stringBuffer.append(TEXT_140);
d769 1
a769 1
    stringBuffer.append(TEXT_141);
d775 1
a775 1
    stringBuffer.append(TEXT_142);
d779 1
a779 1
    stringBuffer.append(TEXT_143);
d784 1
a784 1
    stringBuffer.append(TEXT_144);
d786 1
a786 1
    stringBuffer.append(TEXT_145);
d792 1
a792 1
    stringBuffer.append(TEXT_146);
d794 1
a794 1
    stringBuffer.append(TEXT_147);
d800 1
a800 1
    stringBuffer.append(TEXT_148);
d804 1
a804 1
    stringBuffer.append(TEXT_149);
d809 1
a809 1
    stringBuffer.append(TEXT_150);
d813 1
a813 1
    stringBuffer.append(TEXT_151);
d817 2
a818 2
    stringBuffer.append(TEXT_152);
    stringBuffer.append(TEXT_153);
d826 1
a826 1
    stringBuffer.append(TEXT_154);
d830 1
a830 1
    stringBuffer.append(TEXT_155);
d832 1
a832 1
    stringBuffer.append(TEXT_156);
d834 1
a834 1
    stringBuffer.append(TEXT_157);
d836 1
a836 1
    stringBuffer.append(TEXT_158);
d838 1
a838 1
    stringBuffer.append(TEXT_159);
d840 1
a840 1
    stringBuffer.append(TEXT_160);
d842 1
a842 1
    stringBuffer.append(TEXT_161);
d844 1
a844 1
    stringBuffer.append(TEXT_162);
d846 1
a846 1
    stringBuffer.append(TEXT_163);
d848 1
a848 1
    stringBuffer.append(TEXT_164);
d850 1
a850 1
    stringBuffer.append(TEXT_165);
d852 1
a852 1
    stringBuffer.append(TEXT_166);
d856 1
a856 1
    stringBuffer.append(TEXT_167);
d860 1
a860 1
    stringBuffer.append(TEXT_168);
d862 1
a862 1
    stringBuffer.append(TEXT_169);
a865 4
    stringBuffer.append(TEXT_170);
    stringBuffer.append(TEXT_171);
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a866 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a867 1
    stringBuffer.append(primaryView);
d869 1
a869 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d871 1
a871 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d873 1
a873 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d875 1
a875 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d879 6
d886 1
a886 1
    stringBuffer.append(TEXT_181);
d890 1
a890 1
    stringBuffer.append(TEXT_182);
d892 1
a892 1
    stringBuffer.append(TEXT_183);
d894 1
a894 1
    stringBuffer.append(TEXT_184);
d898 1
a898 1
    stringBuffer.append(TEXT_185);
d900 1
a900 1
    stringBuffer.append(TEXT_186);
d902 1
a902 1
    stringBuffer.append(TEXT_187);
d904 1
a904 1
    stringBuffer.append(TEXT_188);
d908 1
a908 1
    stringBuffer.append(TEXT_189);
d910 1
a910 1
    stringBuffer.append(TEXT_190);
d912 1
a912 1
    stringBuffer.append(TEXT_191);
d914 1
a914 1
    stringBuffer.append(TEXT_192);
d918 1
a918 1
    stringBuffer.append(TEXT_193);
d920 1
a920 1
    stringBuffer.append(TEXT_194);
d922 1
a922 1
    stringBuffer.append(TEXT_195);
d924 1
a924 1
    stringBuffer.append(TEXT_196);
d926 1
a926 1
    stringBuffer.append(TEXT_197);
d930 1
a930 1
    stringBuffer.append(TEXT_198);
a933 6
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d937 1
a937 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d939 1
a939 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d941 1
a941 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d947 6
d957 1
a957 1
    stringBuffer.append(TEXT_209);
d959 1
a959 1
    stringBuffer.append(TEXT_210);
d961 1
a961 1
    stringBuffer.append(TEXT_211);
d968 1
a968 1
    stringBuffer.append(TEXT_212);
d970 1
a970 1
    stringBuffer.append(TEXT_213);
d972 1
a972 1
    stringBuffer.append(TEXT_214);
d977 1
a977 1
    stringBuffer.append(TEXT_215);
d979 1
a979 1
    stringBuffer.append(TEXT_216);
d981 1
a981 1
    stringBuffer.append(TEXT_217);
d983 1
a983 1
    stringBuffer.append(TEXT_218);
d985 1
a985 1
    stringBuffer.append(TEXT_219);
d987 1
a987 1
    stringBuffer.append(TEXT_220);
d989 1
a989 1
    stringBuffer.append(TEXT_221);
d994 1
a994 1
    stringBuffer.append(TEXT_222);
d996 1
a996 1
    stringBuffer.append(TEXT_223);
d998 1
a998 1
    stringBuffer.append(TEXT_224);
d1005 1
a1005 1
    stringBuffer.append(TEXT_225);
d1007 1
a1007 1
    stringBuffer.append(TEXT_226);
d1009 1
a1009 1
    stringBuffer.append(TEXT_227);
a1013 6
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart"));
d1021 6
d1030 1
a1030 1
    stringBuffer.append(TEXT_235);
d1059 1
a1059 1
    stringBuffer.append(TEXT_236);
d1061 1
a1061 1
    stringBuffer.append(TEXT_237);
d1063 1
a1063 1
    stringBuffer.append(TEXT_238);
d1065 1
a1065 1
    stringBuffer.append(TEXT_239);
d1067 1
a1067 1
    stringBuffer.append(TEXT_240);
d1071 1
a1071 1
    stringBuffer.append(TEXT_241);
d1073 1
a1073 1
    stringBuffer.append(TEXT_242);
d1076 1
a1076 1
    stringBuffer.append(TEXT_243);
d1078 1
a1078 1
    stringBuffer.append(TEXT_244);
d1082 1
a1082 1
    stringBuffer.append(TEXT_245);
d1084 1
a1084 1
    stringBuffer.append(TEXT_246);
d1086 1
a1086 1
    stringBuffer.append(TEXT_247);
d1088 1
a1088 1
    stringBuffer.append(TEXT_248);
d1090 1
a1090 1
    stringBuffer.append(TEXT_249);
d1094 1
a1094 1
    stringBuffer.append(TEXT_250);
d1098 1
a1098 1
    stringBuffer.append(TEXT_251);
d1102 1
a1102 1
    stringBuffer.append(TEXT_252);
d1104 1
a1104 1
    stringBuffer.append(TEXT_253);
d1108 1
a1108 1
    stringBuffer.append(TEXT_254);
d1112 1
a1112 1
    stringBuffer.append(TEXT_255);
d1114 1
a1114 1
    stringBuffer.append(TEXT_256);
d1116 1
a1116 1
    stringBuffer.append(TEXT_257);
d1130 1
a1130 1
    stringBuffer.append(TEXT_258);
d1132 1
a1132 1
    stringBuffer.append(TEXT_259);
d1134 1
a1134 1
    stringBuffer.append(TEXT_260);
d1138 1
a1138 1
    stringBuffer.append(TEXT_261);
d1142 1
a1142 1
    stringBuffer.append(TEXT_262);
d1146 1
a1146 1
    stringBuffer.append(TEXT_263);
d1151 1
a1151 1
    stringBuffer.append(TEXT_264);
d1153 1
a1153 1
    stringBuffer.append(TEXT_265);
d1157 1
a1157 1
    stringBuffer.append(TEXT_266);
d1164 1
a1164 1
    stringBuffer.append(TEXT_267);
d1166 1
a1166 1
    stringBuffer.append(TEXT_268);
@


1.10
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d72 49
a120 49
  protected final String TEXT_52 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_53 = " createDomainModelCommand(";
  protected final String TEXT_54 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_55 = " element = ";
  protected final String TEXT_56 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_57 = " feature = (";
  protected final String TEXT_58 = ") ";
  protected final String TEXT_59 = ".eINSTANCE.get";
  protected final String TEXT_60 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_61 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_62 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_63 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_64 = " result = new ";
  protected final String TEXT_65 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_66 = " values = new ";
  protected final String TEXT_67 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_68 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_69 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_70 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_71 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_72 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_73 = NL + "\t\t\t\t\t}";
  protected final String TEXT_74 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_75 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_76 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_77 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_78 = " createDomainModelCommand(";
  protected final String TEXT_79 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_80 = " element = ";
  protected final String TEXT_81 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_82 = " result = new ";
  protected final String TEXT_83 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_84 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_85 = " ";
  protected final String TEXT_86 = "feature = (";
  protected final String TEXT_87 = ") ";
  protected final String TEXT_88 = ".eINSTANCE.get";
  protected final String TEXT_89 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_90 = ".parseValue(feature, values[";
  protected final String TEXT_91 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_92 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_93 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_94 = " ";
  protected final String TEXT_95 = "values = new ";
  protected final String TEXT_96 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_97 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_98 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_99 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_100 = NL + "\t\t\t\t\t\tresult.append(";
d122 29
a150 29
  protected final String TEXT_102 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_103 = NL + "\t\t\t\t});";
  protected final String TEXT_104 = NL + "\t}" + NL;
  protected final String TEXT_105 = NL;
  protected final String TEXT_106 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_107 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_108 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_109 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_110 = "(this, ";
  protected final String TEXT_111 = ".class, new ";
  protected final String TEXT_112 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_113 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_114 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_115 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_116 = " parent = getUpdatableParent();" + NL + "\t\t";
  protected final String TEXT_117 = " connection = (";
  protected final String TEXT_118 = ") parent.getFigure();";
  protected final String TEXT_119 = NL + "\t\t((";
  protected final String TEXT_120 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_121 = "(connection, ";
  protected final String TEXT_122 = ".";
  protected final String TEXT_123 = ") {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_124 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL;
  protected final String TEXT_125 = NL;
  protected final String TEXT_126 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_127 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_128 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_129 = " element = ";
  protected final String TEXT_130 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
d152 137
a288 129
  protected final String TEXT_132 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_133 = " element, String pattern) {";
  protected final String TEXT_134 = NL + "\t\tif (";
  protected final String TEXT_135 = " == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_136 = NL + "\t\treturn ";
  protected final String TEXT_137 = ".format(pattern, new Object[] {";
  protected final String TEXT_138 = NL + "\t\t\tnew ";
  protected final String TEXT_139 = "(";
  protected final String TEXT_140 = ")";
  protected final String TEXT_141 = NL + "\t\t});";
  protected final String TEXT_142 = NL + "\t\treturn ";
  protected final String TEXT_143 = ".format(pattern, new Object[] {";
  protected final String TEXT_144 = NL + "\t\t\tnew ";
  protected final String TEXT_145 = "(";
  protected final String TEXT_146 = ")";
  protected final String TEXT_147 = ",";
  protected final String TEXT_148 = NL + "\t\t});";
  protected final String TEXT_149 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_150 = NL + "\t}";
  protected final String TEXT_151 = NL;
  protected final String TEXT_152 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_153 = NL + "\t\t";
  protected final String TEXT_154 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_155 = ") ";
  protected final String TEXT_156 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_158 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_159 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_160 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_161 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_162 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_163 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_164 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_165 = "\t" + NL + "\t}";
  protected final String TEXT_166 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_167 = " createdFont;";
  protected final String TEXT_168 = "\t";
  protected final String TEXT_169 = NL;
  protected final String TEXT_170 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_171 = " style = (";
  protected final String TEXT_172 = ")  ";
  protected final String TEXT_173 = ".getStyle(";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_175 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_176 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_177 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_178 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_179 = " getLabelIcon() {";
  protected final String TEXT_180 = NL + "\t\t";
  protected final String TEXT_181 = " imageDescriptor = ";
  protected final String TEXT_182 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_183 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_184 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_185 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_186 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_187 = NL + "\t\t";
  protected final String TEXT_188 = " view = (";
  protected final String TEXT_189 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_190 = ") view.getElement();";
  protected final String TEXT_191 = NL + "\t\t";
  protected final String TEXT_192 = " target = ((";
  protected final String TEXT_193 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_194 = ") ? (";
  protected final String TEXT_195 = ") target.getElement() : null;";
  protected final String TEXT_196 = NL + "\t\treturn null;";
  protected final String TEXT_197 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_198 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_199 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_200 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_201 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_202 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_203 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_204 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_205 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_206 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_207 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_208 = ".eINSTANCE.get";
  protected final String TEXT_209 = "(), labelRefresher);";
  protected final String TEXT_210 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_211 = ".eINSTANCE.get";
  protected final String TEXT_212 = "(), labelRefresher);";
  protected final String TEXT_213 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_214 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_215 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_216 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_217 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_218 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_219 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_220 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_221 = ".eINSTANCE.get";
  protected final String TEXT_222 = "(), labelRefresher);";
  protected final String TEXT_223 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_224 = ".eINSTANCE.get";
  protected final String TEXT_225 = "(), labelRefresher);";
  protected final String TEXT_226 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher labelRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontColorRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_227 = NL;
  protected final String TEXT_228 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_229 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_230 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_231 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_232 = " createLabel() {";
  protected final String TEXT_233 = NL + "\t\treturn new ";
  protected final String TEXT_234 = "();";
  protected final String TEXT_235 = NL + "\t\treturn ";
  protected final String TEXT_236 = ";";
  protected final String TEXT_237 = NL + "\t\treturn new ";
  protected final String TEXT_238 = "();";
  protected final String TEXT_239 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_240 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_241 = " label = createLabel();";
  protected final String TEXT_242 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_243 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_244 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_245 = NL + NL + "\t/**";
  protected final String TEXT_246 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_247 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_248 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_249 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_250 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_251 = "(";
  protected final String TEXT_252 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_253 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_254 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_255 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_256 = NL;
  protected final String TEXT_257 = NL;
  protected final String TEXT_258 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_259 = NL + "}";
  protected final String TEXT_260 = NL;
d480 2
d483 1
a483 1
    stringBuffer.append(TEXT_53);
d485 1
a485 1
    stringBuffer.append(TEXT_54);
d487 1
a487 1
    stringBuffer.append(TEXT_55);
a488 2
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d492 2
d495 1
a495 1
    stringBuffer.append(TEXT_59);
a496 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName(genDiagram.getAbstractParserQualifiedClassName()));
d498 2
d501 1
a501 1
    stringBuffer.append(TEXT_62);
a504 2
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d508 2
d511 1
a511 1
    stringBuffer.append(TEXT_66);
d513 1
a513 1
    stringBuffer.append(TEXT_67);
d515 1
a515 1
    stringBuffer.append(TEXT_68);
d517 1
a517 1
    stringBuffer.append(TEXT_69);
d519 1
a519 1
    stringBuffer.append(TEXT_70);
d523 1
a523 1
    stringBuffer.append(TEXT_71);
d525 1
a525 1
    stringBuffer.append(TEXT_72);
d529 1
a529 1
    stringBuffer.append(TEXT_73);
d535 1
a535 1
    stringBuffer.append(TEXT_74);
d537 1
a537 1
    stringBuffer.append(TEXT_75);
a538 2
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d542 4
d547 1
a547 1
    stringBuffer.append(TEXT_79);
d549 1
a549 1
    stringBuffer.append(TEXT_80);
d551 1
a551 1
    stringBuffer.append(TEXT_81);
d553 1
a553 1
    stringBuffer.append(TEXT_82);
d555 1
a555 1
    stringBuffer.append(TEXT_83);
d562 1
a562 1
    stringBuffer.append(TEXT_84);
d565 1
a565 1
    stringBuffer.append(TEXT_85);
d567 1
a567 1
    stringBuffer.append(TEXT_86);
d569 1
a569 1
    stringBuffer.append(TEXT_87);
d571 1
a571 1
    stringBuffer.append(TEXT_88);
d573 3
a575 3
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName(genDiagram.getAbstractParserQualifiedClassName()));
    stringBuffer.append(TEXT_90);
d577 1
a577 1
    stringBuffer.append(TEXT_91);
d579 1
a579 1
    stringBuffer.append(TEXT_92);
d583 1
a583 1
    stringBuffer.append(TEXT_93);
d586 1
a586 1
    stringBuffer.append(TEXT_94);
d588 1
a588 1
    stringBuffer.append(TEXT_95);
d590 1
a590 1
    stringBuffer.append(TEXT_96);
d592 1
a592 1
    stringBuffer.append(TEXT_97);
d594 1
a594 1
    stringBuffer.append(TEXT_98);
d596 1
a596 1
    stringBuffer.append(TEXT_99);
d600 1
a600 1
    stringBuffer.append(TEXT_100);
d602 1
a602 1
    stringBuffer.append(TEXT_101);
d609 1
a609 1
    stringBuffer.append(TEXT_102);
d613 1
a613 1
    stringBuffer.append(TEXT_103);
d617 1
a617 1
    stringBuffer.append(TEXT_104);
d621 2
a622 2
    stringBuffer.append(TEXT_105);
    stringBuffer.append(TEXT_106);
d624 1
a624 1
    stringBuffer.append(TEXT_107);
d626 1
a626 1
    stringBuffer.append(TEXT_108);
d628 1
a628 1
    stringBuffer.append(TEXT_109);
d630 1
a630 1
    stringBuffer.append(TEXT_110);
d632 1
a632 1
    stringBuffer.append(TEXT_111);
d634 1
a634 1
    stringBuffer.append(TEXT_112);
d636 1
a636 1
    stringBuffer.append(TEXT_113);
d638 1
a638 1
    stringBuffer.append(TEXT_114);
d642 1
a642 1
    stringBuffer.append(TEXT_115);
d644 1
a644 1
    stringBuffer.append(TEXT_116);
d646 1
a646 1
    stringBuffer.append(TEXT_117);
d648 1
a648 1
    stringBuffer.append(TEXT_118);
d671 1
a671 1
    stringBuffer.append(TEXT_119);
d673 1
a673 1
    stringBuffer.append(TEXT_120);
d675 1
a675 1
    stringBuffer.append(TEXT_121);
d677 1
a677 1
    stringBuffer.append(TEXT_122);
d679 1
a679 1
    stringBuffer.append(TEXT_123);
d681 2
a682 2
    stringBuffer.append(TEXT_124);
    stringBuffer.append(TEXT_125);
d726 1
a726 1
    stringBuffer.append(TEXT_126);
d728 1
a728 1
    stringBuffer.append(TEXT_127);
a729 4
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(resolvedSemanticElement);
d737 4
d747 1
a747 1
    stringBuffer.append(TEXT_134);
d749 1
a749 1
    stringBuffer.append(TEXT_135);
d753 1
a753 1
    stringBuffer.append(TEXT_136);
d755 1
a755 1
    stringBuffer.append(TEXT_137);
d759 1
a759 1
    stringBuffer.append(TEXT_138);
d761 1
a761 1
    stringBuffer.append(TEXT_139);
d767 1
a767 1
    stringBuffer.append(TEXT_140);
d771 1
a771 1
    stringBuffer.append(TEXT_141);
d776 1
a776 1
    stringBuffer.append(TEXT_142);
d778 1
a778 1
    stringBuffer.append(TEXT_143);
d784 1
a784 1
    stringBuffer.append(TEXT_144);
d786 1
a786 1
    stringBuffer.append(TEXT_145);
d792 1
a792 1
    stringBuffer.append(TEXT_146);
d796 1
a796 1
    stringBuffer.append(TEXT_147);
d801 1
a801 1
    stringBuffer.append(TEXT_148);
d805 1
a805 1
    stringBuffer.append(TEXT_149);
d809 2
a810 2
    stringBuffer.append(TEXT_150);
    stringBuffer.append(TEXT_151);
d818 1
a818 1
    stringBuffer.append(TEXT_152);
d822 1
a822 1
    stringBuffer.append(TEXT_153);
d824 1
a824 1
    stringBuffer.append(TEXT_154);
d826 1
a826 1
    stringBuffer.append(TEXT_155);
d828 1
a828 1
    stringBuffer.append(TEXT_156);
d830 1
a830 1
    stringBuffer.append(TEXT_157);
a831 4
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d835 1
a835 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d837 1
a837 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d841 4
d848 1
a848 1
    stringBuffer.append(TEXT_165);
d852 1
a852 1
    stringBuffer.append(TEXT_166);
d854 1
a854 1
    stringBuffer.append(TEXT_167);
a857 2
    stringBuffer.append(TEXT_168);
    stringBuffer.append(TEXT_169);
a858 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d860 1
a861 2
    stringBuffer.append(TEXT_172);
    stringBuffer.append(primaryView);
d863 1
a863 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d865 1
a865 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d867 1
a867 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d873 4
d878 1
a878 1
    stringBuffer.append(TEXT_179);
d882 1
a882 1
    stringBuffer.append(TEXT_180);
d884 1
a884 1
    stringBuffer.append(TEXT_181);
d886 1
a886 1
    stringBuffer.append(TEXT_182);
d890 1
a890 1
    stringBuffer.append(TEXT_183);
d892 1
a892 1
    stringBuffer.append(TEXT_184);
d894 1
a894 1
    stringBuffer.append(TEXT_185);
d896 1
a896 1
    stringBuffer.append(TEXT_186);
d900 1
a900 1
    stringBuffer.append(TEXT_187);
d902 1
a902 1
    stringBuffer.append(TEXT_188);
d904 1
a904 1
    stringBuffer.append(TEXT_189);
d906 1
a906 1
    stringBuffer.append(TEXT_190);
d910 1
a910 1
    stringBuffer.append(TEXT_191);
d912 1
a912 1
    stringBuffer.append(TEXT_192);
d914 1
a914 1
    stringBuffer.append(TEXT_193);
d916 1
a916 1
    stringBuffer.append(TEXT_194);
d918 1
a918 1
    stringBuffer.append(TEXT_195);
d922 1
a922 1
    stringBuffer.append(TEXT_196);
a925 4
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d931 1
a931 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d933 1
a933 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d941 4
d949 1
a949 1
    stringBuffer.append(TEXT_207);
d951 1
a951 1
    stringBuffer.append(TEXT_208);
d953 1
a953 1
    stringBuffer.append(TEXT_209);
d960 1
a960 1
    stringBuffer.append(TEXT_210);
d962 1
a962 1
    stringBuffer.append(TEXT_211);
d964 1
a964 1
    stringBuffer.append(TEXT_212);
d969 1
a969 1
    stringBuffer.append(TEXT_213);
a970 4
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d978 4
d986 1
a986 1
    stringBuffer.append(TEXT_220);
d988 1
a988 1
    stringBuffer.append(TEXT_221);
d990 1
a990 1
    stringBuffer.append(TEXT_222);
d997 1
a997 1
    stringBuffer.append(TEXT_223);
d999 1
a999 1
    stringBuffer.append(TEXT_224);
d1001 1
a1001 1
    stringBuffer.append(TEXT_225);
d1006 13
a1018 1
    stringBuffer.append(TEXT_226);
d1022 1
a1022 1
    stringBuffer.append(TEXT_227);
d1051 1
a1051 1
    stringBuffer.append(TEXT_228);
d1053 1
a1053 1
    stringBuffer.append(TEXT_229);
d1055 1
a1055 1
    stringBuffer.append(TEXT_230);
d1057 1
a1057 1
    stringBuffer.append(TEXT_231);
d1059 1
a1059 1
    stringBuffer.append(TEXT_232);
d1063 1
a1063 1
    stringBuffer.append(TEXT_233);
d1065 1
a1065 1
    stringBuffer.append(TEXT_234);
d1068 1
a1068 1
    stringBuffer.append(TEXT_235);
d1070 1
a1070 1
    stringBuffer.append(TEXT_236);
d1074 1
a1074 1
    stringBuffer.append(TEXT_237);
d1076 1
a1076 1
    stringBuffer.append(TEXT_238);
d1078 1
a1078 1
    stringBuffer.append(TEXT_239);
d1080 1
a1080 1
    stringBuffer.append(TEXT_240);
d1082 1
a1082 1
    stringBuffer.append(TEXT_241);
d1086 1
a1086 1
    stringBuffer.append(TEXT_242);
d1090 1
a1090 1
    stringBuffer.append(TEXT_243);
d1094 1
a1094 1
    stringBuffer.append(TEXT_244);
d1096 1
a1096 1
    stringBuffer.append(TEXT_245);
d1100 1
a1100 1
    stringBuffer.append(TEXT_246);
d1104 1
a1104 1
    stringBuffer.append(TEXT_247);
d1106 1
a1106 1
    stringBuffer.append(TEXT_248);
d1108 1
a1108 1
    stringBuffer.append(TEXT_249);
d1122 1
a1122 1
    stringBuffer.append(TEXT_250);
d1124 1
a1124 1
    stringBuffer.append(TEXT_251);
d1126 1
a1126 1
    stringBuffer.append(TEXT_252);
d1130 1
a1130 1
    stringBuffer.append(TEXT_253);
d1134 1
a1134 1
    stringBuffer.append(TEXT_254);
d1138 1
a1138 1
    stringBuffer.append(TEXT_255);
d1143 1
a1143 1
    stringBuffer.append(TEXT_256);
d1145 1
a1145 1
    stringBuffer.append(TEXT_257);
d1149 1
a1149 1
    stringBuffer.append(TEXT_258);
d1156 1
a1156 1
    stringBuffer.append(TEXT_259);
d1158 1
a1158 1
    stringBuffer.append(TEXT_260);
@


1.9
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d24 257
a280 236
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_9 = ";";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_13 = " manager;" + NL;
  protected final String TEXT_14 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_15 = "(View view) {" + NL + "\t\tassert view instanceof Node;" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Node getDiagramNode() {" + NL + "\t\treturn (Node)getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_16 = NL + "\t\tinstallEditPolicy(EditPolicy.CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_17 = "() {" + NL + "\t\t\tpublic EditPart getHost() {" + NL + "\t\t\t\treturn getUpdatableParent();" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = "\t\tinstallEditPolicy(";
  protected final String TEXT_20 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_21 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_22 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_23 = " getDirectEditCommand(";
  protected final String TEXT_24 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_25 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_26 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_27 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_28 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_29 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_30 = " editingDomain = ";
  protected final String TEXT_31 = ".getEditingDomain(";
  protected final String TEXT_32 = ".getDiagram().getElement());";
  protected final String TEXT_33 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_34 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_35 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult[0]);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_36 = " createDomainModelCommand(";
  protected final String TEXT_37 = " editingDomain, Object value) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_38 = " element = ";
  protected final String TEXT_39 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_40 = " feature = (";
  protected final String TEXT_41 = ") ";
  protected final String TEXT_42 = ".eINSTANCE.get";
  protected final String TEXT_43 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_44 = ".parseValue(feature, value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_45 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_46 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_47 = " result = new ";
  protected final String TEXT_48 = "();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_49 = " values = new ";
  protected final String TEXT_50 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_51 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_52 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_53 = ".create(editingDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\treturn result;";
  protected final String TEXT_54 = NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_55 = ".create(editingDomain, element, feature, valueToSet);";
  protected final String TEXT_56 = NL + "\t\t\t\t\t}";
  protected final String TEXT_57 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_58 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_59 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_60 = " domainModelCommand = createDomainModelCommand(editingDomain, parseResult);" + NL + "\t\t\t\t\t\treturn new WrappingCommand(editingDomain, domainModelCommand);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_61 = " createDomainModelCommand(";
  protected final String TEXT_62 = " editingDomain, Object[] values) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_63 = " element = ";
  protected final String TEXT_64 = ";" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_65 = " result = new ";
  protected final String TEXT_66 = "();" + NL + "\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_67 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_68 = " ";
  protected final String TEXT_69 = "feature = (";
  protected final String TEXT_70 = ") ";
  protected final String TEXT_71 = ".eINSTANCE.get";
  protected final String TEXT_72 = "();" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_73 = ".parseValue(feature, values[";
  protected final String TEXT_74 = "]);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_75 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_76 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_77 = " ";
  protected final String TEXT_78 = "values = new ";
  protected final String TEXT_79 = "();" + NL + "\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_80 = "());" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_81 = ".create(editingDomain, element, feature, values));" + NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_82 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_83 = NL + "\t\t\t\t\t\tresult.append(";
  protected final String TEXT_84 = ".create(editingDomain, element, feature, valueToSet));";
  protected final String TEXT_85 = NL + "\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t}";
  protected final String TEXT_86 = NL + "\t\t\t\t});";
  protected final String TEXT_87 = NL + "\t}" + NL;
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_90 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_91 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_92 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_93 = "(this, ";
  protected final String TEXT_94 = ".class, new ";
  protected final String TEXT_95 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_96 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_97 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_98 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_99 = " parent = getUpdatableParent();" + NL + "\t\t";
  protected final String TEXT_100 = " connection = (";
  protected final String TEXT_101 = ") parent.getFigure();";
  protected final String TEXT_102 = NL + "\t\t((";
  protected final String TEXT_103 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_104 = "(connection, ";
  protected final String TEXT_105 = ".";
  protected final String TEXT_106 = ") {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_107 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL;
  protected final String TEXT_108 = NL;
  protected final String TEXT_109 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_110 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_111 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_112 = " element = ";
  protected final String TEXT_113 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_114 = " element = ";
  protected final String TEXT_115 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_116 = " element, String pattern) {";
  protected final String TEXT_117 = NL + "\t\tif (element.get";
  protected final String TEXT_118 = "() == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_119 = NL + "\t\treturn ";
  protected final String TEXT_120 = ".format(pattern, new Object[] {";
  protected final String TEXT_121 = NL + "\t\t\t";
  protected final String TEXT_122 = NL + "\t\t});";
  protected final String TEXT_123 = NL + "\t\treturn ";
  protected final String TEXT_124 = ".format(pattern, new Object[] {";
  protected final String TEXT_125 = NL + "\t\t";
  protected final String TEXT_126 = ",";
  protected final String TEXT_127 = NL + "\t\t});";
  protected final String TEXT_128 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_129 = NL + "\t}";
  protected final String TEXT_130 = NL;
  protected final String TEXT_131 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {";
  protected final String TEXT_132 = NL + "\t\t";
  protected final String TEXT_133 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_134 = ") ";
  protected final String TEXT_135 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_136 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_137 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_138 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_139 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_140 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_141 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_142 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_143 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}";
  protected final String TEXT_144 = "\t" + NL + "\t}";
  protected final String TEXT_145 = NL + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_146 = " createdFont;";
  protected final String TEXT_147 = "\t";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_150 = " style = (";
  protected final String TEXT_151 = ")  ";
  protected final String TEXT_152 = ".getStyle(";
  protected final String TEXT_153 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_154 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_155 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_156 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_157 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_158 = " getLabelIcon() {";
  protected final String TEXT_159 = NL + "\t\t";
  protected final String TEXT_160 = " imageDescriptor = ";
  protected final String TEXT_161 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (imageDescriptor != null) {" + NL + "\t\t\treturn imageDescriptor.createImage();" + NL + "\t\t}";
  protected final String TEXT_162 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_163 = " resolveSemanticElement() {" + NL + "\t\t";
  protected final String TEXT_164 = " parent = getUpdatableParent();" + NL + "\t\tif (parent == null || parent.getModel() instanceof ";
  protected final String TEXT_165 = " == false) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_166 = NL + "\t\t";
  protected final String TEXT_167 = " view = (";
  protected final String TEXT_168 = ") parent.getModel();" + NL + "\t\treturn (";
  protected final String TEXT_169 = ") view.getElement();";
  protected final String TEXT_170 = NL + "\t\t";
  protected final String TEXT_171 = " target = ((";
  protected final String TEXT_172 = ") parent.getModel()).getTarget();" + NL + "\t\treturn (target != null && target.getElement() instanceof ";
  protected final String TEXT_173 = ") ? (";
  protected final String TEXT_174 = ") target.getElement() : null;";
  protected final String TEXT_175 = NL + "\t\treturn null;";
  protected final String TEXT_176 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_177 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_178 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_179 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_180 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_181 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_182 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_183 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_184 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_185 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_186 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_187 = ".eINSTANCE.get";
  protected final String TEXT_188 = "(), labelRefresher);";
  protected final String TEXT_189 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_190 = ".eINSTANCE.get";
  protected final String TEXT_191 = "(), labelRefresher);";
  protected final String TEXT_192 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_193 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_194 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_195 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_196 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_197 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_198 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_199 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_200 = ".eINSTANCE.get";
  protected final String TEXT_201 = "(), labelRefresher);";
  protected final String TEXT_202 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_203 = ".eINSTANCE.get";
  protected final String TEXT_204 = "(), labelRefresher);";
  protected final String TEXT_205 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher labelRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontColorRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_208 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_209 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_210 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_211 = " createLabel() {";
  protected final String TEXT_212 = NL + "\t\treturn new ";
  protected final String TEXT_213 = "();";
  protected final String TEXT_214 = NL + "\t\treturn ";
  protected final String TEXT_215 = ";";
  protected final String TEXT_216 = NL + "\t\treturn new ";
  protected final String TEXT_217 = "();";
  protected final String TEXT_218 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_219 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_220 = " label = createLabel();";
  protected final String TEXT_221 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_222 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_223 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_224 = NL + NL + "\t/**";
  protected final String TEXT_225 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_226 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_227 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_228 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_229 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_230 = "(";
  protected final String TEXT_231 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_232 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_233 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_234 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_235 = NL;
  protected final String TEXT_236 = NL;
  protected final String TEXT_237 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_238 = NL + "}";
  protected final String TEXT_239 = NL;
d288 1
a288 1
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
d313 75
d398 1
a398 1
    stringBuffer.append(TEXT_4);
d400 1
a400 1
    stringBuffer.append(TEXT_5);
d402 1
a402 1
    stringBuffer.append(TEXT_6);
d405 2
a406 2
    stringBuffer.append(TEXT_7);
    stringBuffer.append(TEXT_8);
d408 1
a408 1
    stringBuffer.append(TEXT_9);
d410 2
a411 2
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
d415 1
a415 1
    stringBuffer.append(TEXT_12);
d417 1
a417 1
    stringBuffer.append(TEXT_13);
d421 1
a421 1
    stringBuffer.append(TEXT_14);
d423 1
a423 1
    stringBuffer.append(TEXT_15);
d428 1
a428 1
    stringBuffer.append(TEXT_16);
d430 1
a430 1
    stringBuffer.append(TEXT_17);
d434 2
a435 2
    stringBuffer.append(TEXT_18);
    stringBuffer.append(TEXT_19);
d437 1
a437 1
    stringBuffer.append(TEXT_20);
d439 1
a439 1
    stringBuffer.append(TEXT_21);
d441 1
a441 1
    stringBuffer.append(TEXT_22);
d443 1
a443 1
    stringBuffer.append(TEXT_23);
d445 1
a445 1
    stringBuffer.append(TEXT_24);
d447 1
a447 1
    stringBuffer.append(TEXT_25);
d449 1
a449 1
    stringBuffer.append(TEXT_26);
d451 1
a451 1
    stringBuffer.append(TEXT_27);
d453 1
a453 1
    stringBuffer.append(TEXT_28);
d455 1
a455 1
    stringBuffer.append(TEXT_29);
d457 1
a457 1
    stringBuffer.append(TEXT_30);
d459 1
a459 1
    stringBuffer.append(TEXT_31);
d461 1
a461 1
    stringBuffer.append(TEXT_32);
d467 1
a467 1
    stringBuffer.append(TEXT_33);
d469 1
a469 1
    stringBuffer.append(TEXT_34);
d471 1
a471 1
    stringBuffer.append(TEXT_35);
d473 1
a473 1
    stringBuffer.append(TEXT_36);
d475 1
a475 1
    stringBuffer.append(TEXT_37);
d477 1
a477 1
    stringBuffer.append(TEXT_38);
d479 1
a479 1
    stringBuffer.append(TEXT_39);
d481 1
a481 1
    stringBuffer.append(TEXT_40);
d483 1
a483 1
    stringBuffer.append(TEXT_41);
d485 1
a485 1
    stringBuffer.append(TEXT_42);
d487 1
a487 1
    stringBuffer.append(TEXT_43);
d489 1
a489 1
    stringBuffer.append(TEXT_44);
d491 1
a491 1
    stringBuffer.append(TEXT_45);
d495 1
a495 1
    stringBuffer.append(TEXT_46);
d497 1
a497 1
    stringBuffer.append(TEXT_47);
d499 1
a499 1
    stringBuffer.append(TEXT_48);
d501 1
a501 1
    stringBuffer.append(TEXT_49);
d503 1
a503 1
    stringBuffer.append(TEXT_50);
d505 1
a505 1
    stringBuffer.append(TEXT_51);
d507 1
a507 1
    stringBuffer.append(TEXT_52);
d509 1
a509 1
    stringBuffer.append(TEXT_53);
d513 1
a513 1
    stringBuffer.append(TEXT_54);
d515 1
a515 1
    stringBuffer.append(TEXT_55);
d519 1
a519 1
    stringBuffer.append(TEXT_56);
d525 1
a525 1
    stringBuffer.append(TEXT_57);
d527 1
a527 1
    stringBuffer.append(TEXT_58);
d529 1
a529 1
    stringBuffer.append(TEXT_59);
d531 1
a531 1
    stringBuffer.append(TEXT_60);
d533 1
a533 1
    stringBuffer.append(TEXT_61);
d535 1
a535 1
    stringBuffer.append(TEXT_62);
d537 1
a537 1
    stringBuffer.append(TEXT_63);
d539 1
a539 1
    stringBuffer.append(TEXT_64);
d541 1
a541 1
    stringBuffer.append(TEXT_65);
d543 1
a543 1
    stringBuffer.append(TEXT_66);
d550 1
a550 1
    stringBuffer.append(TEXT_67);
d553 1
a553 1
    stringBuffer.append(TEXT_68);
d555 1
a555 1
    stringBuffer.append(TEXT_69);
d557 1
a557 1
    stringBuffer.append(TEXT_70);
d559 1
a559 1
    stringBuffer.append(TEXT_71);
d561 1
a561 1
    stringBuffer.append(TEXT_72);
d563 1
a563 1
    stringBuffer.append(TEXT_73);
d565 1
a565 1
    stringBuffer.append(TEXT_74);
d567 1
a567 1
    stringBuffer.append(TEXT_75);
d571 1
a571 1
    stringBuffer.append(TEXT_76);
d574 1
a574 1
    stringBuffer.append(TEXT_77);
d576 1
a576 1
    stringBuffer.append(TEXT_78);
d578 1
a578 1
    stringBuffer.append(TEXT_79);
d580 1
a580 1
    stringBuffer.append(TEXT_80);
d582 1
a582 1
    stringBuffer.append(TEXT_81);
d584 1
a584 1
    stringBuffer.append(TEXT_82);
d588 1
a588 1
    stringBuffer.append(TEXT_83);
d590 1
a590 1
    stringBuffer.append(TEXT_84);
d597 1
a597 1
    stringBuffer.append(TEXT_85);
d601 1
a601 1
    stringBuffer.append(TEXT_86);
d605 1
a605 1
    stringBuffer.append(TEXT_87);
d609 2
a610 2
    stringBuffer.append(TEXT_88);
    stringBuffer.append(TEXT_89);
d612 1
a612 1
    stringBuffer.append(TEXT_90);
d614 1
a614 1
    stringBuffer.append(TEXT_91);
d616 1
a616 1
    stringBuffer.append(TEXT_92);
d618 1
a618 1
    stringBuffer.append(TEXT_93);
d620 1
a620 1
    stringBuffer.append(TEXT_94);
d622 1
a622 1
    stringBuffer.append(TEXT_95);
d624 1
a624 1
    stringBuffer.append(TEXT_96);
d626 1
a626 1
    stringBuffer.append(TEXT_97);
d630 1
a630 1
    stringBuffer.append(TEXT_98);
d632 1
a632 1
    stringBuffer.append(TEXT_99);
d634 1
a634 1
    stringBuffer.append(TEXT_100);
d636 1
a636 1
    stringBuffer.append(TEXT_101);
d659 1
a659 1
    stringBuffer.append(TEXT_102);
d661 1
a661 1
    stringBuffer.append(TEXT_103);
d663 1
a663 1
    stringBuffer.append(TEXT_104);
d665 1
a665 1
    stringBuffer.append(TEXT_105);
d667 1
a667 1
    stringBuffer.append(TEXT_106);
d669 2
a670 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(TEXT_108);
d714 1
a714 1
    stringBuffer.append(TEXT_109);
d716 1
a716 1
    stringBuffer.append(TEXT_110);
d718 1
a718 1
    stringBuffer.append(TEXT_111);
d720 1
a720 1
    stringBuffer.append(TEXT_112);
d722 1
a722 1
    stringBuffer.append(TEXT_113);
d724 1
a724 1
    stringBuffer.append(TEXT_114);
d726 1
a726 1
    stringBuffer.append(TEXT_115);
d728 1
a728 1
    stringBuffer.append(TEXT_116);
d735 3
a737 3
    stringBuffer.append(TEXT_117);
    stringBuffer.append(feature.getCapName());
    stringBuffer.append(TEXT_118);
d741 1
a741 1
    stringBuffer.append(TEXT_119);
d743 7
a749 1
    stringBuffer.append(TEXT_120);
d751 2
a752 1
		String value = "element.get" + feature.getCapName() + "()";	/*XXX: getTypedKey is not a part of public API!*/
d754 3
a756 1
			value = "new " + primitiveTypeToWrapperClassName.get(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClass()) + "(" + value + ")";
d759 1
a759 3
    stringBuffer.append(TEXT_121);
    stringBuffer.append(value);
    stringBuffer.append(TEXT_122);
d764 1
a764 1
    stringBuffer.append(TEXT_123);
d766 1
a766 1
    stringBuffer.append(TEXT_124);
a769 1
		String value = "element.get" + next.getCapName() + "()";	/*XXX: getTypedKey is not a part of public API!*/
d771 5
a775 1
			value = "new " + primitiveTypeToWrapperClassName.get(next.getTypeGenClassifier().getEcoreClassifier().getInstanceClass()) + "(" + value + ")";
d777 2
d780 5
a784 4
    stringBuffer.append(TEXT_125);
    stringBuffer.append(value);
    if (it.hasNext()) {
    stringBuffer.append(TEXT_126);
d789 1
a789 1
    stringBuffer.append(TEXT_127);
d793 1
a793 1
    stringBuffer.append(TEXT_128);
d797 2
a798 2
    stringBuffer.append(TEXT_129);
    stringBuffer.append(TEXT_130);
d806 1
a806 1
    stringBuffer.append(TEXT_131);
d810 1
a810 1
    stringBuffer.append(TEXT_132);
d812 1
a812 1
    stringBuffer.append(TEXT_133);
d814 1
a814 1
    stringBuffer.append(TEXT_134);
d816 1
a816 1
    stringBuffer.append(TEXT_135);
d818 1
a818 1
    stringBuffer.append(TEXT_136);
d820 1
a820 1
    stringBuffer.append(TEXT_137);
d822 1
a822 1
    stringBuffer.append(TEXT_138);
d824 1
a824 1
    stringBuffer.append(TEXT_139);
d826 1
a826 1
    stringBuffer.append(TEXT_140);
d828 1
a828 1
    stringBuffer.append(TEXT_141);
d830 1
a830 1
    stringBuffer.append(TEXT_142);
d832 1
a832 1
    stringBuffer.append(TEXT_143);
d836 1
a836 1
    stringBuffer.append(TEXT_144);
d840 1
a840 1
    stringBuffer.append(TEXT_145);
d842 1
a842 1
    stringBuffer.append(TEXT_146);
d846 3
a848 3
    stringBuffer.append(TEXT_147);
    stringBuffer.append(TEXT_148);
    stringBuffer.append(TEXT_149);
d850 1
a850 1
    stringBuffer.append(TEXT_150);
d852 1
a852 1
    stringBuffer.append(TEXT_151);
d854 1
a854 1
    stringBuffer.append(TEXT_152);
d856 1
a856 1
    stringBuffer.append(TEXT_153);
d858 1
a858 1
    stringBuffer.append(TEXT_154);
d860 1
a860 1
    stringBuffer.append(TEXT_155);
d862 1
a862 1
    stringBuffer.append(TEXT_156);
d864 1
a864 1
    stringBuffer.append(TEXT_157);
d866 1
a866 1
    stringBuffer.append(TEXT_158);
d870 1
a870 1
    stringBuffer.append(TEXT_159);
d872 1
a872 1
    stringBuffer.append(TEXT_160);
d874 1
a874 1
    stringBuffer.append(TEXT_161);
d878 1
a878 1
    stringBuffer.append(TEXT_162);
d880 1
a880 1
    stringBuffer.append(TEXT_163);
d882 1
a882 1
    stringBuffer.append(TEXT_164);
d884 1
a884 1
    stringBuffer.append(TEXT_165);
d888 1
a888 1
    stringBuffer.append(TEXT_166);
d890 1
a890 1
    stringBuffer.append(TEXT_167);
d892 1
a892 1
    stringBuffer.append(TEXT_168);
d894 1
a894 1
    stringBuffer.append(TEXT_169);
d898 1
a898 1
    stringBuffer.append(TEXT_170);
d900 1
a900 1
    stringBuffer.append(TEXT_171);
d902 1
a902 1
    stringBuffer.append(TEXT_172);
d904 1
a904 1
    stringBuffer.append(TEXT_173);
d906 1
a906 1
    stringBuffer.append(TEXT_174);
d910 1
a910 1
    stringBuffer.append(TEXT_175);
d914 1
a914 1
    stringBuffer.append(TEXT_176);
d916 1
a916 1
    stringBuffer.append(TEXT_177);
d918 1
a918 1
    stringBuffer.append(TEXT_178);
d920 1
a920 1
    stringBuffer.append(TEXT_179);
d922 1
a922 1
    stringBuffer.append(TEXT_180);
d924 1
a924 1
    stringBuffer.append(TEXT_181);
d926 1
a926 1
    stringBuffer.append(TEXT_182);
d928 1
a928 1
    stringBuffer.append(TEXT_183);
d930 1
a930 1
    stringBuffer.append(TEXT_184);
d932 1
a932 1
    stringBuffer.append(TEXT_185);
d937 1
a937 1
    stringBuffer.append(TEXT_186);
d939 1
a939 1
    stringBuffer.append(TEXT_187);
d941 1
a941 1
    stringBuffer.append(TEXT_188);
d948 1
a948 1
    stringBuffer.append(TEXT_189);
d950 1
a950 1
    stringBuffer.append(TEXT_190);
d952 1
a952 1
    stringBuffer.append(TEXT_191);
d957 1
a957 1
    stringBuffer.append(TEXT_192);
d959 1
a959 1
    stringBuffer.append(TEXT_193);
d961 1
a961 1
    stringBuffer.append(TEXT_194);
d963 1
a963 1
    stringBuffer.append(TEXT_195);
d965 1
a965 1
    stringBuffer.append(TEXT_196);
d967 1
a967 1
    stringBuffer.append(TEXT_197);
d969 1
a969 1
    stringBuffer.append(TEXT_198);
d974 1
a974 1
    stringBuffer.append(TEXT_199);
d976 1
a976 1
    stringBuffer.append(TEXT_200);
d978 1
a978 1
    stringBuffer.append(TEXT_201);
d985 1
a985 1
    stringBuffer.append(TEXT_202);
d987 1
a987 1
    stringBuffer.append(TEXT_203);
d989 1
a989 1
    stringBuffer.append(TEXT_204);
d994 1
a994 1
    stringBuffer.append(TEXT_205);
d998 1
a998 1
    stringBuffer.append(TEXT_206);
d1027 1
a1027 1
    stringBuffer.append(TEXT_207);
d1029 1
a1029 1
    stringBuffer.append(TEXT_208);
d1031 1
a1031 1
    stringBuffer.append(TEXT_209);
d1033 1
a1033 1
    stringBuffer.append(TEXT_210);
d1035 1
a1035 1
    stringBuffer.append(TEXT_211);
d1039 1
a1039 1
    stringBuffer.append(TEXT_212);
d1041 1
a1041 1
    stringBuffer.append(TEXT_213);
d1044 1
a1044 1
    stringBuffer.append(TEXT_214);
d1046 1
a1046 1
    stringBuffer.append(TEXT_215);
d1050 1
a1050 1
    stringBuffer.append(TEXT_216);
d1052 1
a1052 1
    stringBuffer.append(TEXT_217);
d1054 1
a1054 1
    stringBuffer.append(TEXT_218);
d1056 1
a1056 1
    stringBuffer.append(TEXT_219);
d1058 1
a1058 1
    stringBuffer.append(TEXT_220);
d1062 1
a1062 1
    stringBuffer.append(TEXT_221);
d1066 1
a1066 1
    stringBuffer.append(TEXT_222);
d1070 1
a1070 1
    stringBuffer.append(TEXT_223);
d1072 1
a1072 1
    stringBuffer.append(TEXT_224);
d1076 1
a1076 1
    stringBuffer.append(TEXT_225);
d1080 1
a1080 1
    stringBuffer.append(TEXT_226);
d1082 1
a1082 1
    stringBuffer.append(TEXT_227);
d1084 1
a1084 1
    stringBuffer.append(TEXT_228);
d1098 1
a1098 1
    stringBuffer.append(TEXT_229);
d1100 1
a1100 1
    stringBuffer.append(TEXT_230);
d1102 1
a1102 1
    stringBuffer.append(TEXT_231);
d1106 1
a1106 1
    stringBuffer.append(TEXT_232);
d1110 1
a1110 1
    stringBuffer.append(TEXT_233);
d1114 1
a1114 1
    stringBuffer.append(TEXT_234);
d1119 1
a1119 1
    stringBuffer.append(TEXT_235);
d1121 1
a1121 1
    stringBuffer.append(TEXT_236);
d1125 1
a1125 1
    stringBuffer.append(TEXT_237);
d1132 1
a1132 1
    stringBuffer.append(TEXT_238);
d1134 1
a1134 1
    stringBuffer.append(TEXT_239);
@


1.8
log
@#149455 Lite Generation: Respect option for labels to display node icon
@
text
@d183 77
a259 65
  protected final String TEXT_163 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_164 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_165 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_166 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_167 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_168 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_169 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_170 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_173 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_174 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_175 = ".eINSTANCE.get";
  protected final String TEXT_176 = "(), labelRefresher);";
  protected final String TEXT_177 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_178 = ".eINSTANCE.get";
  protected final String TEXT_179 = "(), labelRefresher);";
  protected final String TEXT_180 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_181 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_182 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_183 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_184 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_185 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_186 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_187 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_188 = ".eINSTANCE.get";
  protected final String TEXT_189 = "(), labelRefresher);";
  protected final String TEXT_190 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_191 = ".eINSTANCE.get";
  protected final String TEXT_192 = "(), labelRefresher);";
  protected final String TEXT_193 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher labelRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontColorRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_194 = NL;
  protected final String TEXT_195 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_196 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_197 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_198 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_199 = " createLabel() {";
  protected final String TEXT_200 = NL + "\t\treturn new ";
  protected final String TEXT_201 = "();";
  protected final String TEXT_202 = NL + "\t\treturn ";
  protected final String TEXT_203 = ";";
  protected final String TEXT_204 = NL + "\t\treturn new ";
  protected final String TEXT_205 = "();";
  protected final String TEXT_206 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_207 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_208 = " label = createLabel();";
  protected final String TEXT_209 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_210 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_211 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_212 = NL + NL + "\t/**";
  protected final String TEXT_213 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_214 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_215 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_216 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_217 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_218 = "(";
  protected final String TEXT_219 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_220 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_221 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_222 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_223 = NL;
  protected final String TEXT_224 = NL;
  protected final String TEXT_225 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_226 = NL + "}";
  protected final String TEXT_227 = NL;
d772 24
d797 9
a805 1
    stringBuffer.append(TEXT_164);
d807 1
a807 1
    stringBuffer.append(TEXT_165);
d809 1
a809 1
    stringBuffer.append(TEXT_166);
d811 1
a811 1
    stringBuffer.append(TEXT_167);
d813 1
a813 1
    stringBuffer.append(TEXT_168);
d815 1
a815 1
    stringBuffer.append(TEXT_169);
d817 1
a817 1
    stringBuffer.append(TEXT_170);
d819 1
a819 1
    stringBuffer.append(TEXT_171);
d821 1
a821 1
    stringBuffer.append(TEXT_172);
d823 1
a823 1
    stringBuffer.append(TEXT_173);
d828 1
a828 1
    stringBuffer.append(TEXT_174);
d830 1
a830 1
    stringBuffer.append(TEXT_175);
d832 1
a832 1
    stringBuffer.append(TEXT_176);
d839 1
a839 1
    stringBuffer.append(TEXT_177);
d841 1
a841 1
    stringBuffer.append(TEXT_178);
d843 1
a843 1
    stringBuffer.append(TEXT_179);
d848 1
a848 1
    stringBuffer.append(TEXT_180);
d850 1
a850 1
    stringBuffer.append(TEXT_181);
d852 1
a852 1
    stringBuffer.append(TEXT_182);
d854 1
a854 1
    stringBuffer.append(TEXT_183);
d856 1
a856 1
    stringBuffer.append(TEXT_184);
d858 1
a858 1
    stringBuffer.append(TEXT_185);
d860 1
a860 1
    stringBuffer.append(TEXT_186);
d865 1
a865 1
    stringBuffer.append(TEXT_187);
d867 1
a867 1
    stringBuffer.append(TEXT_188);
d869 1
a869 1
    stringBuffer.append(TEXT_189);
d876 1
a876 1
    stringBuffer.append(TEXT_190);
d878 1
a878 1
    stringBuffer.append(TEXT_191);
d880 1
a880 1
    stringBuffer.append(TEXT_192);
d885 1
a885 1
    stringBuffer.append(TEXT_193);
d889 1
a889 1
    stringBuffer.append(TEXT_194);
d918 1
a918 1
    stringBuffer.append(TEXT_195);
d920 1
a920 1
    stringBuffer.append(TEXT_196);
d922 1
a922 1
    stringBuffer.append(TEXT_197);
d924 1
a924 1
    stringBuffer.append(TEXT_198);
d926 1
a926 1
    stringBuffer.append(TEXT_199);
d930 1
a930 1
    stringBuffer.append(TEXT_200);
d932 1
a932 1
    stringBuffer.append(TEXT_201);
d935 1
a935 1
    stringBuffer.append(TEXT_202);
d937 1
a937 1
    stringBuffer.append(TEXT_203);
d941 1
a941 1
    stringBuffer.append(TEXT_204);
d943 1
a943 1
    stringBuffer.append(TEXT_205);
d945 1
a945 1
    stringBuffer.append(TEXT_206);
d947 1
a947 1
    stringBuffer.append(TEXT_207);
d949 1
a949 1
    stringBuffer.append(TEXT_208);
d953 1
a953 1
    stringBuffer.append(TEXT_209);
d957 1
a957 1
    stringBuffer.append(TEXT_210);
d961 1
a961 1
    stringBuffer.append(TEXT_211);
d963 1
a963 1
    stringBuffer.append(TEXT_212);
d967 1
a967 1
    stringBuffer.append(TEXT_213);
d971 1
a971 1
    stringBuffer.append(TEXT_214);
d973 1
a973 1
    stringBuffer.append(TEXT_215);
d975 1
a975 1
    stringBuffer.append(TEXT_216);
d989 1
a989 1
    stringBuffer.append(TEXT_217);
d991 1
a991 1
    stringBuffer.append(TEXT_218);
d993 1
a993 1
    stringBuffer.append(TEXT_219);
d997 1
a997 1
    stringBuffer.append(TEXT_220);
d1001 1
a1001 1
    stringBuffer.append(TEXT_221);
d1005 1
a1005 1
    stringBuffer.append(TEXT_222);
d1010 1
a1010 1
    stringBuffer.append(TEXT_223);
d1012 1
a1012 1
    stringBuffer.append(TEXT_224);
d1016 1
a1016 1
    stringBuffer.append(TEXT_225);
d1023 1
a1023 1
    stringBuffer.append(TEXT_226);
d1025 1
a1025 1
    stringBuffer.append(TEXT_227);
@


1.7
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d127 1
a127 1
  protected final String TEXT_107 = " getReferencePoint() {" + NL + "\t\t\t\t\t\treturn super.getReferencePoint().translate(location.getX(), location.getY());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t}" + NL;
d177 71
a247 66
  protected final String TEXT_157 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_158 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_159 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_160 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_161 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_162 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_163 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_164 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_165 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_166 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_167 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_168 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_169 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_170 = ".eINSTANCE.get";
  protected final String TEXT_171 = "(), labelRefresher);";
  protected final String TEXT_172 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_173 = ".eINSTANCE.get";
  protected final String TEXT_174 = "(), labelRefresher);";
  protected final String TEXT_175 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_176 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_177 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_178 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_179 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_180 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_181 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_182 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_183 = ".eINSTANCE.get";
  protected final String TEXT_184 = "(), labelRefresher);";
  protected final String TEXT_185 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_186 = ".eINSTANCE.get";
  protected final String TEXT_187 = "(), labelRefresher);";
  protected final String TEXT_188 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher labelRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontColorRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_189 = NL;
  protected final String TEXT_190 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_191 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_192 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_193 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_194 = " createLabel() {";
  protected final String TEXT_195 = NL + "\t\treturn new ";
  protected final String TEXT_196 = "();";
  protected final String TEXT_197 = NL + "\t\treturn ";
  protected final String TEXT_198 = ";";
  protected final String TEXT_199 = NL + "\t\treturn new ";
  protected final String TEXT_200 = "();";
  protected final String TEXT_201 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_202 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_203 = " label = createLabel();";
  protected final String TEXT_204 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_205 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_206 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_207 = NL + NL + "\t/**";
  protected final String TEXT_208 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_209 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_210 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_211 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_212 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_213 = "(";
  protected final String TEXT_214 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_215 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_216 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_217 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_218 = NL;
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_221 = NL + "}";
  protected final String TEXT_222 = NL;
d744 14
d759 1
a759 1
    stringBuffer.append(TEXT_158);
d761 1
a761 1
    stringBuffer.append(TEXT_159);
d763 1
a763 1
    stringBuffer.append(TEXT_160);
d765 1
a765 1
    stringBuffer.append(TEXT_161);
d767 1
a767 1
    stringBuffer.append(TEXT_162);
d769 1
a769 1
    stringBuffer.append(TEXT_163);
d771 1
a771 1
    stringBuffer.append(TEXT_164);
d773 1
a773 1
    stringBuffer.append(TEXT_165);
d775 1
a775 1
    stringBuffer.append(TEXT_166);
d777 1
a777 1
    stringBuffer.append(TEXT_167);
d779 1
a779 1
    stringBuffer.append(TEXT_168);
d784 1
a784 1
    stringBuffer.append(TEXT_169);
d786 1
a786 1
    stringBuffer.append(TEXT_170);
d788 1
a788 1
    stringBuffer.append(TEXT_171);
d795 1
a795 1
    stringBuffer.append(TEXT_172);
d797 1
a797 1
    stringBuffer.append(TEXT_173);
d799 1
a799 1
    stringBuffer.append(TEXT_174);
d804 1
a804 1
    stringBuffer.append(TEXT_175);
d806 1
a806 1
    stringBuffer.append(TEXT_176);
d808 1
a808 1
    stringBuffer.append(TEXT_177);
d810 1
a810 1
    stringBuffer.append(TEXT_178);
d812 1
a812 1
    stringBuffer.append(TEXT_179);
d814 1
a814 1
    stringBuffer.append(TEXT_180);
d816 1
a816 1
    stringBuffer.append(TEXT_181);
d821 1
a821 1
    stringBuffer.append(TEXT_182);
d823 1
a823 1
    stringBuffer.append(TEXT_183);
d825 1
a825 1
    stringBuffer.append(TEXT_184);
d832 1
a832 1
    stringBuffer.append(TEXT_185);
d834 1
a834 1
    stringBuffer.append(TEXT_186);
d836 1
a836 1
    stringBuffer.append(TEXT_187);
d841 1
a841 1
    stringBuffer.append(TEXT_188);
d845 1
a845 1
    stringBuffer.append(TEXT_189);
d874 1
a874 1
    stringBuffer.append(TEXT_190);
d876 1
a876 1
    stringBuffer.append(TEXT_191);
d878 1
a878 1
    stringBuffer.append(TEXT_192);
d880 1
a880 1
    stringBuffer.append(TEXT_193);
d882 1
a882 1
    stringBuffer.append(TEXT_194);
d886 1
a886 1
    stringBuffer.append(TEXT_195);
d888 1
a888 1
    stringBuffer.append(TEXT_196);
d891 1
a891 1
    stringBuffer.append(TEXT_197);
d893 1
a893 1
    stringBuffer.append(TEXT_198);
d897 1
a897 1
    stringBuffer.append(TEXT_199);
d899 1
a899 1
    stringBuffer.append(TEXT_200);
d901 1
a901 1
    stringBuffer.append(TEXT_201);
d903 1
a903 1
    stringBuffer.append(TEXT_202);
d905 1
a905 1
    stringBuffer.append(TEXT_203);
d909 1
a909 1
    stringBuffer.append(TEXT_204);
d913 1
a913 1
    stringBuffer.append(TEXT_205);
d917 1
a917 1
    stringBuffer.append(TEXT_206);
d919 1
a919 1
    stringBuffer.append(TEXT_207);
d923 1
a923 1
    stringBuffer.append(TEXT_208);
d927 1
a927 1
    stringBuffer.append(TEXT_209);
d929 1
a929 1
    stringBuffer.append(TEXT_210);
d931 1
a931 1
    stringBuffer.append(TEXT_211);
d945 1
a945 1
    stringBuffer.append(TEXT_212);
d947 1
a947 1
    stringBuffer.append(TEXT_213);
d949 1
a949 1
    stringBuffer.append(TEXT_214);
d953 1
a953 1
    stringBuffer.append(TEXT_215);
d957 1
a957 1
    stringBuffer.append(TEXT_216);
d961 1
a961 1
    stringBuffer.append(TEXT_217);
d966 1
a966 1
    stringBuffer.append(TEXT_218);
d968 1
a968 1
    stringBuffer.append(TEXT_219);
d972 1
a972 1
    stringBuffer.append(TEXT_220);
d979 1
a979 1
    stringBuffer.append(TEXT_221);
d981 1
a981 1
    stringBuffer.append(TEXT_222);
@


1.6
log
@[bblajer] #147076 Lite generator: Support ParentAssignedViewmap for labels and compartments
@
text
@d151 64
a214 64
  protected final String TEXT_131 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_132 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_133 = ") ";
  protected final String TEXT_134 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_135 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_136 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_137 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_138 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_139 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_140 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_141 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_142 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_143 = " createdFont;";
  protected final String TEXT_144 = NL;
  protected final String TEXT_145 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_146 = " style = (";
  protected final String TEXT_147 = ")  ";
  protected final String TEXT_148 = ".getStyle(";
  protected final String TEXT_149 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_150 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_151 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_152 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_153 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_154 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_155 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_156 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_157 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_158 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_159 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_160 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_161 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_162 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_163 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_164 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_165 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_166 = ".eINSTANCE.get";
  protected final String TEXT_167 = "(), labelRefresher);";
  protected final String TEXT_168 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_169 = ".eINSTANCE.get";
  protected final String TEXT_170 = "(), labelRefresher);";
  protected final String TEXT_171 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_172 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_173 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_175 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_177 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_178 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_179 = ".eINSTANCE.get";
  protected final String TEXT_180 = "(), labelRefresher);";
  protected final String TEXT_181 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_182 = ".eINSTANCE.get";
  protected final String TEXT_183 = "(), labelRefresher);";
  protected final String TEXT_184 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher labelRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontColorRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_185 = NL;
  protected final String TEXT_186 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_187 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_188 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_189 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_190 = " createLabel() {";
  protected final String TEXT_191 = NL + "\t\treturn new ";
  protected final String TEXT_192 = "();";
  protected final String TEXT_193 = NL + "\t\treturn ";
  protected final String TEXT_194 = ";";
d217 21
a237 21
  protected final String TEXT_197 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_198 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_199 = " label = createLabel();";
  protected final String TEXT_200 = NL + "\t\tdefaultText = label.getText();";
  protected final String TEXT_201 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_202 = NL + "\t\treturn label;" + NL + "\t}";
  protected final String TEXT_203 = NL + NL + "\t/**";
  protected final String TEXT_204 = NL + "\t * TODO: reimplement, since the figure used by this editpart is not a Label.";
  protected final String TEXT_205 = NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_206 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_207 = ") getFigure();" + NL + "\t}" + NL;
  protected final String TEXT_208 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_209 = "(";
  protected final String TEXT_210 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);";
  protected final String TEXT_211 = NL + "\t\tdefaultText = figure.getText();";
  protected final String TEXT_212 = NL + "\t\tdefaultText = \"\";\t//$NON-NLS-1$";
  protected final String TEXT_213 = NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = NL;
  protected final String TEXT_216 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_217 = NL + "}";
d239 4
d248 2
a249 1
GenLinkLabel genLabel = (GenLinkLabel) ((Object[]) argument)[0];
d673 7
d681 3
a683 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d687 2
d690 1
a690 1
    stringBuffer.append(TEXT_134);
d692 1
a692 1
    stringBuffer.append(TEXT_135);
a693 2
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d699 2
d702 1
a702 1
    stringBuffer.append(TEXT_140);
a703 2
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d707 3
d711 3
d715 1
a715 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d717 3
a719 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a720 1
    stringBuffer.append(primaryView);
a721 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d723 1
a723 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d725 1
a725 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d727 1
a727 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d729 2
a731 2
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d733 1
a733 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d735 1
a735 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d737 1
a737 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d739 1
a739 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d741 2
a743 2
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d745 1
a745 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d747 1
a747 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d749 1
a749 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d753 8
d765 1
a765 1
    stringBuffer.append(TEXT_165);
d767 1
a767 1
    stringBuffer.append(TEXT_166);
d769 1
a769 1
    stringBuffer.append(TEXT_167);
d776 1
a776 1
    stringBuffer.append(TEXT_168);
d778 1
a778 1
    stringBuffer.append(TEXT_169);
d780 1
a780 1
    stringBuffer.append(TEXT_170);
d785 1
a785 1
    stringBuffer.append(TEXT_171);
d787 1
a787 1
    stringBuffer.append(TEXT_172);
d789 1
a789 1
    stringBuffer.append(TEXT_173);
d791 1
a791 1
    stringBuffer.append(TEXT_174);
d793 1
a793 1
    stringBuffer.append(TEXT_175);
d795 1
a795 1
    stringBuffer.append(TEXT_176);
d797 1
a797 1
    stringBuffer.append(TEXT_177);
d802 1
a802 1
    stringBuffer.append(TEXT_178);
d804 1
a804 1
    stringBuffer.append(TEXT_179);
d806 1
a806 1
    stringBuffer.append(TEXT_180);
d813 1
a813 1
    stringBuffer.append(TEXT_181);
d815 1
a815 1
    stringBuffer.append(TEXT_182);
d817 1
a817 1
    stringBuffer.append(TEXT_183);
d822 1
a822 1
    stringBuffer.append(TEXT_184);
d826 1
a826 1
    stringBuffer.append(TEXT_185);
d855 1
a855 1
    stringBuffer.append(TEXT_186);
d857 1
a857 1
    stringBuffer.append(TEXT_187);
d859 1
a859 1
    stringBuffer.append(TEXT_188);
d861 1
a861 1
    stringBuffer.append(TEXT_189);
d863 1
a863 1
    stringBuffer.append(TEXT_190);
d867 1
a867 1
    stringBuffer.append(TEXT_191);
d869 1
a869 1
    stringBuffer.append(TEXT_192);
d872 1
a872 1
    stringBuffer.append(TEXT_193);
d874 1
a874 1
    stringBuffer.append(TEXT_194);
d878 1
a878 1
    stringBuffer.append(TEXT_195);
d880 1
a880 1
    stringBuffer.append(TEXT_196);
d882 1
a882 1
    stringBuffer.append(TEXT_197);
d884 1
a884 1
    stringBuffer.append(TEXT_198);
d886 1
a886 1
    stringBuffer.append(TEXT_199);
d890 1
a890 1
    stringBuffer.append(TEXT_200);
d894 1
a894 1
    stringBuffer.append(TEXT_201);
d898 1
a898 1
    stringBuffer.append(TEXT_202);
d900 1
a900 1
    stringBuffer.append(TEXT_203);
d904 1
a904 1
    stringBuffer.append(TEXT_204);
d908 1
a908 1
    stringBuffer.append(TEXT_205);
d910 1
a910 1
    stringBuffer.append(TEXT_206);
d912 1
a912 1
    stringBuffer.append(TEXT_207);
d926 1
a926 1
    stringBuffer.append(TEXT_208);
d928 1
a928 1
    stringBuffer.append(TEXT_209);
d930 1
a930 1
    stringBuffer.append(TEXT_210);
d934 1
a934 1
    stringBuffer.append(TEXT_211);
d938 1
a938 1
    stringBuffer.append(TEXT_212);
d942 1
a942 1
    stringBuffer.append(TEXT_213);
d947 1
a947 1
    stringBuffer.append(TEXT_214);
d949 1
a949 1
    stringBuffer.append(TEXT_215);
d953 1
a953 1
    stringBuffer.append(TEXT_216);
d960 1
a960 1
    stringBuffer.append(TEXT_217);
d962 1
a962 1
    stringBuffer.append(TEXT_218);
@


1.5
log
@[bblajer] #146004 Lite Generator: Respect link label alignment
@
text
@d207 32
a238 18
  protected final String TEXT_187 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_188 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_189 = " createLabel() {";
  protected final String TEXT_190 = NL + "\t\treturn new ";
  protected final String TEXT_191 = "();";
  protected final String TEXT_192 = NL + "\t\treturn ";
  protected final String TEXT_193 = ";";
  protected final String TEXT_194 = NL + "\t\treturn new ";
  protected final String TEXT_195 = "();";
  protected final String TEXT_196 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_197 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_198 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_199 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_200 = NL;
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_203 = NL + "}";
  protected final String TEXT_204 = NL;
d799 28
d830 1
a830 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d832 1
a832 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d834 2
a836 1
String figureQualifiedClassName = null;
a837 4
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.Label";
	}
a838 2
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
d840 2
d844 1
a844 1
    stringBuffer.append(TEXT_192);
d846 1
a846 1
    stringBuffer.append(TEXT_193);
a848 1
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();
a849 2
    stringBuffer.append(TEXT_194);
    stringBuffer.append(figureQualifiedClassName);
d851 2
a853 2
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d855 26
d882 1
a882 1
    stringBuffer.append(TEXT_198);
d884 31
a914 1
    stringBuffer.append(TEXT_199);
d919 1
a919 1
    stringBuffer.append(TEXT_200);
d921 1
a921 1
    stringBuffer.append(TEXT_201);
d925 1
a925 1
    stringBuffer.append(TEXT_202);
d932 1
a932 1
    stringBuffer.append(TEXT_203);
d934 1
a934 1
    stringBuffer.append(TEXT_204);
@


1.4
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d118 102
a219 102
  protected final String TEXT_98 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_99 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_100 = "() {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_101 = " getReferencePoint() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_102 = " parent = getUpdatableParent();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_103 = " connection = (";
  protected final String TEXT_104 = ") parent.getFigure();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_105 = " midPoint = connection.getPoints().getMidpoint().getCopy();" + NL + "\t\t\t\t\t\tconnection.translateToAbsolute(midPoint);" + NL + "\t\t\t\t\t\treturn midPoint.translate(new ";
  protected final String TEXT_106 = "(location.getX(), location.getY()));" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t}" + NL;
  protected final String TEXT_107 = NL;
  protected final String TEXT_108 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_109 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_110 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_111 = " element = ";
  protected final String TEXT_112 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_113 = " element = ";
  protected final String TEXT_114 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_115 = " element, String pattern) {";
  protected final String TEXT_116 = NL + "\t\tif (element.get";
  protected final String TEXT_117 = "() == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_118 = NL + "\t\treturn ";
  protected final String TEXT_119 = ".format(pattern, new Object[] {";
  protected final String TEXT_120 = NL + "\t\t\t";
  protected final String TEXT_121 = NL + "\t\t});";
  protected final String TEXT_122 = NL + "\t\treturn ";
  protected final String TEXT_123 = ".format(pattern, new Object[] {";
  protected final String TEXT_124 = NL + "\t\t";
  protected final String TEXT_125 = ",";
  protected final String TEXT_126 = NL + "\t\t});";
  protected final String TEXT_127 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_128 = NL + "\t}";
  protected final String TEXT_129 = NL;
  protected final String TEXT_130 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_131 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_132 = ") ";
  protected final String TEXT_133 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_134 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_135 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_136 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_137 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_138 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_139 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_140 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_141 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_142 = " createdFont;";
  protected final String TEXT_143 = NL;
  protected final String TEXT_144 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_145 = " style = (";
  protected final String TEXT_146 = ")  ";
  protected final String TEXT_147 = ".getStyle(";
  protected final String TEXT_148 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_149 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_150 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_151 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_152 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_153 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_154 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_155 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_156 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_157 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_158 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_159 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_160 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_161 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_162 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_163 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_164 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_165 = ".eINSTANCE.get";
  protected final String TEXT_166 = "(), labelRefresher);";
  protected final String TEXT_167 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_168 = ".eINSTANCE.get";
  protected final String TEXT_169 = "(), labelRefresher);";
  protected final String TEXT_170 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_171 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_173 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_175 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_177 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_178 = ".eINSTANCE.get";
  protected final String TEXT_179 = "(), labelRefresher);";
  protected final String TEXT_180 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_181 = ".eINSTANCE.get";
  protected final String TEXT_182 = "(), labelRefresher);";
  protected final String TEXT_183 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher labelRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontColorRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_184 = NL;
  protected final String TEXT_185 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_186 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_187 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_188 = " createLabel() {";
  protected final String TEXT_189 = NL + "\t\treturn new ";
  protected final String TEXT_190 = "();";
  protected final String TEXT_191 = NL + "\t\treturn ";
  protected final String TEXT_192 = ";";
  protected final String TEXT_193 = NL + "\t\treturn new ";
  protected final String TEXT_194 = "();";
  protected final String TEXT_195 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_196 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_197 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_198 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_199 = NL;
d221 4
a224 3
  protected final String TEXT_201 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_202 = NL + "}";
  protected final String TEXT_203 = NL;
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d501 1
a501 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.AbstractLocator"));
d503 1
a503 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d505 22
a526 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d528 1
a528 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
d530 1
a530 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
d532 1
a532 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d534 2
a536 1
    stringBuffer.append(TEXT_106);
d538 1
d582 1
a582 1
    stringBuffer.append(TEXT_108);
d584 1
a584 1
    stringBuffer.append(TEXT_109);
d586 1
a586 1
    stringBuffer.append(TEXT_110);
d588 1
a588 1
    stringBuffer.append(TEXT_111);
d590 1
a590 1
    stringBuffer.append(TEXT_112);
d592 1
a592 1
    stringBuffer.append(TEXT_113);
d594 1
a594 1
    stringBuffer.append(TEXT_114);
d596 1
a596 1
    stringBuffer.append(TEXT_115);
d603 1
a603 1
    stringBuffer.append(TEXT_116);
d605 1
a605 1
    stringBuffer.append(TEXT_117);
d609 1
a609 1
    stringBuffer.append(TEXT_118);
d611 1
a611 1
    stringBuffer.append(TEXT_119);
d618 1
a618 1
    stringBuffer.append(TEXT_120);
d620 1
a620 1
    stringBuffer.append(TEXT_121);
d625 1
a625 1
    stringBuffer.append(TEXT_122);
d627 1
a627 1
    stringBuffer.append(TEXT_123);
d636 1
a636 1
    stringBuffer.append(TEXT_124);
d639 1
a639 1
    stringBuffer.append(TEXT_125);
d644 1
a644 1
    stringBuffer.append(TEXT_126);
d648 1
a648 1
    stringBuffer.append(TEXT_127);
a651 1
    stringBuffer.append(TEXT_128);
a653 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d657 2
d660 1
a660 1
    stringBuffer.append(TEXT_133);
d662 1
a662 1
    stringBuffer.append(TEXT_134);
a663 2
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d669 2
d672 1
a672 1
    stringBuffer.append(TEXT_139);
a673 2
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d677 1
a679 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d683 2
d686 1
a686 1
    stringBuffer.append(TEXT_147);
a687 2
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d695 1
a695 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d699 1
a699 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d707 1
a707 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d717 2
d723 1
a723 1
    stringBuffer.append(TEXT_164);
d725 1
a725 1
    stringBuffer.append(TEXT_165);
d727 1
a727 1
    stringBuffer.append(TEXT_166);
d734 1
a734 1
    stringBuffer.append(TEXT_167);
d736 1
a736 1
    stringBuffer.append(TEXT_168);
d738 1
a738 1
    stringBuffer.append(TEXT_169);
d743 1
a743 1
    stringBuffer.append(TEXT_170);
a744 2
    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d754 2
d760 1
a760 1
    stringBuffer.append(TEXT_177);
d762 1
a762 1
    stringBuffer.append(TEXT_178);
d764 1
a764 1
    stringBuffer.append(TEXT_179);
d771 1
a771 1
    stringBuffer.append(TEXT_180);
d773 1
a773 1
    stringBuffer.append(TEXT_181);
d775 1
a775 1
    stringBuffer.append(TEXT_182);
d780 1
a780 1
    stringBuffer.append(TEXT_183);
a783 1
    stringBuffer.append(TEXT_184);
d785 1
a786 2
    stringBuffer.append(TEXT_186);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d790 2
d800 1
a800 1
    stringBuffer.append(TEXT_189);
d802 1
a802 1
    stringBuffer.append(TEXT_190);
d805 1
a805 1
    stringBuffer.append(TEXT_191);
d807 1
a807 1
    stringBuffer.append(TEXT_192);
d812 1
a812 1
    stringBuffer.append(TEXT_193);
d814 1
a814 1
    stringBuffer.append(TEXT_194);
a815 2
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d821 2
d827 1
a827 1
    stringBuffer.append(TEXT_199);
d829 1
a829 1
    stringBuffer.append(TEXT_200);
d833 1
a833 1
    stringBuffer.append(TEXT_201);
d840 1
a840 1
    stringBuffer.append(TEXT_202);
d842 1
a842 1
    stringBuffer.append(TEXT_203);
@


1.3
log
@[bblajer] #141280 Support child nodes without label
@
text
@d33 100
a132 100
  protected final String TEXT_13 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_14 = "(View view) {" + NL + "\t\tassert view instanceof Node;" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Node getDiagramNode() {" + NL + "\t\treturn (Node)getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_15 = NL + "\t\tinstallEditPolicy(EditPolicy.CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_16 = "() {" + NL + "\t\t\tpublic EditPart getHost() {" + NL + "\t\t\t\treturn getUpdatableParent();" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = "\t\tinstallEditPolicy(";
  protected final String TEXT_19 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_20 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_21 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_22 = " getDirectEditCommand(";
  protected final String TEXT_23 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_24 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_25 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_26 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_27 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_28 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_29 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_30 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_31 = "() {" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_32 = " element = ";
  protected final String TEXT_33 = ";" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_34 = " domainModelCommand = createDomainModelCommand();" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_35 = " createDomainModelCommand() {" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_36 = " domainModelEditDomain = ";
  protected final String TEXT_37 = ".getEditingDomainFor(";
  protected final String TEXT_38 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_39 = " feature = (";
  protected final String TEXT_40 = ") ";
  protected final String TEXT_41 = ".eINSTANCE.get";
  protected final String TEXT_42 = "();" + NL + "\t\t\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_43 = ".parseValue(feature, parseResult[0]);" + NL + "\t\t\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_44 = ".INSTANCE;" + NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_45 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_46 = " result = new ";
  protected final String TEXT_47 = "();" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_48 = " values = new ";
  protected final String TEXT_49 = "();" + NL + "\t\t\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_50 = "());" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_51 = ".create(domainModelEditDomain, element, feature, values));" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_52 = ".create(domainModelEditDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t\t\treturn result;";
  protected final String TEXT_53 = NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_54 = ".create(domainModelEditDomain, element, feature, valueToSet);";
  protected final String TEXT_55 = NL + "\t\t\t\t\t\t\t}";
  protected final String TEXT_56 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_57 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_58 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_59 = "() {" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_60 = " element = ";
  protected final String TEXT_61 = ";" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_62 = " domainModelCommand = createDomainModelCommand();" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_63 = " createDomainModelCommand() {" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_64 = " domainModelEditDomain = ";
  protected final String TEXT_65 = ".getEditingDomainFor(";
  protected final String TEXT_66 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_67 = " result = new ";
  protected final String TEXT_68 = "();" + NL + "\t\t\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_69 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_70 = " ";
  protected final String TEXT_71 = "feature = (";
  protected final String TEXT_72 = ") ";
  protected final String TEXT_73 = ".eINSTANCE.get";
  protected final String TEXT_74 = "();" + NL + "\t\t\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_75 = ".parseValue(feature, parseResult[";
  protected final String TEXT_76 = "]);" + NL + "\t\t\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_77 = ".INSTANCE;" + NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_78 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_79 = " ";
  protected final String TEXT_80 = "values = new ";
  protected final String TEXT_81 = "();" + NL + "\t\t\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_82 = "());" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_83 = ".create(domainModelEditDomain, element, feature, values));" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_84 = ".create(domainModelEditDomain, element, feature, valueToSet));";
  protected final String TEXT_85 = NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_86 = ".create(domainModelEditDomain, element, feature, valueToSet));";
  protected final String TEXT_87 = NL + "\t\t\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t\t\t}";
  protected final String TEXT_88 = NL + "\t\t\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\t\t\tdomainModelCommand.undo();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\t\t\tdomainModelCommand.execute();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\t\t\treturn element != null && domainModelCommand != null && domainModelCommand.canUndo();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\t\t\treturn element != null && domainModelCommand != null && domainModelCommand.canExecute();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t};" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});";
  protected final String TEXT_89 = NL + "\t}" + NL;
  protected final String TEXT_90 = NL;
  protected final String TEXT_91 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_92 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_93 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_94 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_95 = "(this, ";
  protected final String TEXT_96 = ".class, new ";
  protected final String TEXT_97 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_98 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_99 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_100 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_101 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_102 = "() {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_103 = " getReferencePoint() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_104 = " parent = getUpdatableParent();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_105 = " connection = (";
  protected final String TEXT_106 = ") parent.getFigure();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_107 = " midPoint = connection.getPoints().getMidpoint().getCopy();" + NL + "\t\t\t\t\t\tconnection.translateToAbsolute(midPoint);" + NL + "\t\t\t\t\t\treturn midPoint.translate(new ";
  protected final String TEXT_108 = "(location.getX(), location.getY()));" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t}" + NL;
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_111 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_112 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
d134 90
a223 92
  protected final String TEXT_114 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_115 = " element = ";
  protected final String TEXT_116 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_117 = " element, String pattern) {";
  protected final String TEXT_118 = NL + "\t\tif (element.get";
  protected final String TEXT_119 = "() == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_120 = NL + "\t\treturn ";
  protected final String TEXT_121 = ".format(pattern, new Object[] {";
  protected final String TEXT_122 = NL + "\t\t\t";
  protected final String TEXT_123 = NL + "\t\t});";
  protected final String TEXT_124 = NL + "\t\treturn ";
  protected final String TEXT_125 = ".format(pattern, new Object[] {";
  protected final String TEXT_126 = NL + "\t\t";
  protected final String TEXT_127 = ",";
  protected final String TEXT_128 = NL + "\t\t});";
  protected final String TEXT_129 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_130 = NL + "\t}";
  protected final String TEXT_131 = NL;
  protected final String TEXT_132 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_133 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_134 = ") ";
  protected final String TEXT_135 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_136 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_137 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_138 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_139 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_140 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_141 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_142 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_143 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_144 = " createdFont;";
  protected final String TEXT_145 = NL;
  protected final String TEXT_146 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_147 = " style = (";
  protected final String TEXT_148 = ")  ";
  protected final String TEXT_149 = ".getStyle(";
  protected final String TEXT_150 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_151 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_152 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_153 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_154 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_155 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_156 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_157 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_158 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_159 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_160 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_161 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_162 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_163 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_164 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_165 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_166 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_167 = ".eINSTANCE.get";
  protected final String TEXT_168 = "(), labelRefresher);";
  protected final String TEXT_169 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_170 = ".eINSTANCE.get";
  protected final String TEXT_171 = "(), labelRefresher);";
  protected final String TEXT_172 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_173 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_175 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_177 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_178 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_179 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_180 = ".eINSTANCE.get";
  protected final String TEXT_181 = "(), labelRefresher);";
  protected final String TEXT_182 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_183 = ".eINSTANCE.get";
  protected final String TEXT_184 = "(), labelRefresher);";
  protected final String TEXT_185 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher labelRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontColorRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_186 = NL;
  protected final String TEXT_187 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_188 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_189 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_190 = " createLabel() {";
  protected final String TEXT_191 = NL + "\t\treturn new ";
  protected final String TEXT_192 = "();";
  protected final String TEXT_193 = NL + "\t\treturn ";
  protected final String TEXT_194 = ";";
  protected final String TEXT_195 = NL + "\t\treturn new ";
  protected final String TEXT_196 = "();";
  protected final String TEXT_197 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_198 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_199 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_200 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = NL;
  protected final String TEXT_203 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_204 = NL + "}";
  protected final String TEXT_205 = NL;
d244 1
d279 3
d285 4
d290 1
a290 1
    stringBuffer.append(TEXT_14);
d295 1
a295 1
    stringBuffer.append(TEXT_15);
d297 1
a297 1
    stringBuffer.append(TEXT_16);
d299 1
a299 2
if (labelModelFacet instanceof FeatureLabelModelFacet == true || labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
	boolean isReadOnly = genLabel.isReadOnly();
a300 1
    stringBuffer.append(TEXT_17);
d302 1
d304 1
a304 1
    stringBuffer.append(TEXT_19);
d306 1
a306 1
    stringBuffer.append(TEXT_20);
d308 1
a308 1
    stringBuffer.append(TEXT_21);
d310 1
a310 1
    stringBuffer.append(TEXT_22);
d312 1
a312 1
    stringBuffer.append(TEXT_23);
d314 1
a314 1
    stringBuffer.append(TEXT_24);
d316 1
a316 1
    stringBuffer.append(TEXT_25);
d318 1
a318 1
    stringBuffer.append(TEXT_26);
d320 1
a320 1
    stringBuffer.append(TEXT_27);
d322 7
a328 1
    stringBuffer.append(TEXT_28);
d330 1
a330 1
if (labelModelFacet instanceof FeatureLabelModelFacet && !isReadOnly) {
d334 1
a334 1
    stringBuffer.append(TEXT_29);
a335 8
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d343 1
a343 1
    stringBuffer.append(primaryView);
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAttribute"));
d349 2
d352 1
a352 1
    stringBuffer.append(TEXT_41);
d354 1
a354 1
    stringBuffer.append(TEXT_42);
d356 1
a356 1
    stringBuffer.append(TEXT_43);
d358 1
a358 1
    stringBuffer.append(TEXT_44);
a361 2
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
d365 2
d368 1
a368 1
    stringBuffer.append(TEXT_48);
d370 1
a370 1
    stringBuffer.append(TEXT_49);
d372 1
a372 1
    stringBuffer.append(TEXT_50);
d374 1
a374 1
    stringBuffer.append(TEXT_51);
d376 1
a376 1
    stringBuffer.append(TEXT_52);
d380 1
a380 1
    stringBuffer.append(TEXT_53);
d382 1
a382 1
    stringBuffer.append(TEXT_54);
d386 1
a386 1
    stringBuffer.append(TEXT_55);
d392 1
a392 1
    stringBuffer.append(TEXT_56);
d394 1
a394 1
    stringBuffer.append(TEXT_57);
a395 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d399 1
a399 1
    stringBuffer.append(resolvedSemanticElement);
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.Command"));
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d409 1
a409 1
    stringBuffer.append(primaryView);
a410 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand"));
    stringBuffer.append(TEXT_68);
d417 1
a417 1
    stringBuffer.append(TEXT_69);
d420 1
a420 1
    stringBuffer.append(TEXT_70);
d422 1
a422 1
    stringBuffer.append(TEXT_71);
d424 1
a424 1
    stringBuffer.append(TEXT_72);
d426 1
a426 1
    stringBuffer.append(TEXT_73);
d428 1
a428 1
    stringBuffer.append(TEXT_74);
d430 1
a430 1
    stringBuffer.append(TEXT_75);
d432 1
a432 1
    stringBuffer.append(TEXT_76);
d434 1
a434 1
    stringBuffer.append(TEXT_77);
d438 1
a438 1
    stringBuffer.append(TEXT_78);
d441 1
a441 1
    stringBuffer.append(TEXT_79);
d443 1
a443 1
    stringBuffer.append(TEXT_80);
d445 1
a445 1
    stringBuffer.append(TEXT_81);
d447 1
a447 1
    stringBuffer.append(TEXT_82);
d449 1
a449 1
    stringBuffer.append(TEXT_83);
d451 1
a451 1
    stringBuffer.append(TEXT_84);
d455 1
a455 1
    stringBuffer.append(TEXT_85);
d457 1
a457 1
    stringBuffer.append(TEXT_86);
d464 1
a464 1
    stringBuffer.append(TEXT_87);
d468 1
a468 1
    stringBuffer.append(TEXT_88);
d472 1
a472 1
    stringBuffer.append(TEXT_89);
d474 1
a474 1
if (labelModelFacet instanceof FeatureLabelModelFacet == true || labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
d476 3
d480 1
d482 1
a482 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d484 1
a484 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.RequestConstants"));
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d490 1
a490 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor"));
d492 1
a492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator"));
a493 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.CellEditor"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_99);
d497 4
d502 1
a502 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d504 1
a504 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.AbstractLocator"));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d510 1
a510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
a513 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
a514 3
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(TEXT_109);
d558 4
d563 1
a563 1
    stringBuffer.append(viewPattern);
d565 1
a565 1
    stringBuffer.append(editPattern);
a572 4
    stringBuffer.append(resolvedSemanticElement);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_117);
d579 1
a579 1
    stringBuffer.append(TEXT_118);
d581 1
a581 1
    stringBuffer.append(TEXT_119);
d585 1
a585 1
    stringBuffer.append(TEXT_120);
d587 1
a587 1
    stringBuffer.append(TEXT_121);
d594 1
a594 1
    stringBuffer.append(TEXT_122);
d596 1
a596 1
    stringBuffer.append(TEXT_123);
d601 1
a601 1
    stringBuffer.append(TEXT_124);
d603 1
a603 1
    stringBuffer.append(TEXT_125);
d612 1
a612 1
    stringBuffer.append(TEXT_126);
d615 1
a615 1
    stringBuffer.append(TEXT_127);
d620 1
a620 1
    stringBuffer.append(TEXT_128);
d624 1
a624 1
    stringBuffer.append(TEXT_129);
d628 2
d631 1
d633 1
d635 1
a635 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d637 1
a637 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d639 1
a639 1
    stringBuffer.append(primaryView);
d641 1
a641 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d643 1
a643 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d649 1
a649 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d653 1
a653 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
a654 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
a655 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d657 1
d659 1
d661 1
a661 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d663 1
a663 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d665 1
a665 1
    stringBuffer.append(primaryView);
d667 1
a667 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d673 1
a673 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d675 1
a675 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d677 1
a677 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d679 1
a679 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d685 1
a685 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d687 1
a687 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
a694 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_165);
d699 1
a699 1
    stringBuffer.append(TEXT_166);
d701 1
a701 1
    stringBuffer.append(TEXT_167);
d703 1
a703 1
    stringBuffer.append(TEXT_168);
d710 1
a710 1
    stringBuffer.append(TEXT_169);
d712 1
a712 1
    stringBuffer.append(TEXT_170);
d714 1
a714 1
    stringBuffer.append(TEXT_171);
d719 4
d724 1
a724 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
a731 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_178);
d736 1
a736 1
    stringBuffer.append(TEXT_179);
d738 1
a738 1
    stringBuffer.append(TEXT_180);
d740 1
a740 1
    stringBuffer.append(TEXT_181);
d747 1
a747 1
    stringBuffer.append(TEXT_182);
d749 1
a749 1
    stringBuffer.append(TEXT_183);
d751 1
a751 1
    stringBuffer.append(TEXT_184);
d756 1
a756 1
    stringBuffer.append(TEXT_185);
d760 3
d764 1
d766 1
a766 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
a767 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_190);
d776 1
a776 1
    stringBuffer.append(TEXT_191);
d778 1
a778 1
    stringBuffer.append(TEXT_192);
d781 1
a781 1
    stringBuffer.append(TEXT_193);
d783 1
a783 1
    stringBuffer.append(TEXT_194);
d788 4
d793 1
a793 1
    stringBuffer.append(figureQualifiedClassName);
d795 1
a795 1
    }
a798 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_200);
d803 1
a803 1
    stringBuffer.append(TEXT_201);
d805 1
a805 1
    stringBuffer.append(TEXT_202);
d809 1
a809 1
    stringBuffer.append(TEXT_203);
d816 1
a816 1
    stringBuffer.append(TEXT_204);
d818 1
a818 1
    stringBuffer.append(TEXT_205);
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d294 1
d319 1
a319 1
if (labelModelFacet instanceof FeatureLabelModelFacet && !genLabel.isReadOnly()) {
d758 3
a770 1
Viewmap viewmap = genLabel.getViewmap();
d801 2
a802 2
if (genLabel.getViewmap() instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) genLabel.getViewmap()).getClassBody();
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d28 112
a139 112
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_9 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = "(View view) {" + NL + "\t\tassert view instanceof Node;" + NL + "\t\tsetModel(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Node getDiagramNode() {" + NL + "\t\treturn (Node)getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createEditPolicies() {";
  protected final String TEXT_11 = NL + "\t\tinstallEditPolicy(EditPolicy.CONNECTION_ENDPOINTS_ROLE, new ";
  protected final String TEXT_12 = "() {" + NL + "\t\t\tpublic EditPart getHost() {" + NL + "\t\t\t\treturn getUpdatableParent();" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_13 = NL;
  protected final String TEXT_14 = "\t\tinstallEditPolicy(";
  protected final String TEXT_15 = ".DIRECT_EDIT_ROLE," + NL + "\t\t\t\tnew ";
  protected final String TEXT_16 = "() {" + NL + "\t\t\t\t\tprotected void showCurrentEditValue(";
  protected final String TEXT_17 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tgetLabel().setText(value);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_18 = " getDirectEditCommand(";
  protected final String TEXT_19 = " request) {" + NL + "\t\t\t\t\t\tString value = (String) request.getCellEditor().getValue();" + NL + "\t\t\t\t\t\tif (value == null) {" + NL + "\t\t\t\t\t\t\t//Invalid value is transformed into a null by the validator." + NL + "\t\t\t\t\t\t\t//XXX: implement validator" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_20 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tfinal Object[] parseResult;" + NL + "\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\tparseResult = new ";
  protected final String TEXT_21 = "(EDIT_PATTERN).parse(value);" + NL + "\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_22 = ".INSTANCE;" + NL + "\t\t\t\t\t\t} catch (";
  protected final String TEXT_23 = " e) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_24 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_25 = NL + "\t\t\t\t\t\tif (parseResult.length != 1) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_26 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_27 = "() {" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_28 = " element = ";
  protected final String TEXT_29 = ";" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_30 = " domainModelCommand = createDomainModelCommand();" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_31 = " createDomainModelCommand() {" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_32 = " domainModelEditDomain = ";
  protected final String TEXT_33 = ".getEditingDomainFor(";
  protected final String TEXT_34 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_35 = " feature = (";
  protected final String TEXT_36 = ") ";
  protected final String TEXT_37 = ".eINSTANCE.get";
  protected final String TEXT_38 = "();" + NL + "\t\t\t\t\t\t\t\tObject valueToSet;" + NL + "\t\t\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_39 = ".parseValue(feature, parseResult[0]);" + NL + "\t\t\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_40 = ".INSTANCE;" + NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_41 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_42 = " result = new ";
  protected final String TEXT_43 = "();" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_44 = " values = new ";
  protected final String TEXT_45 = "();" + NL + "\t\t\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_46 = "());" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_47 = ".create(domainModelEditDomain, element, feature, values));" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_48 = ".create(domainModelEditDomain, element, feature, valueToSet));" + NL + "\t\t\t\t\t\t\t\treturn result;";
  protected final String TEXT_49 = NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_50 = ".create(domainModelEditDomain, element, feature, valueToSet);";
  protected final String TEXT_51 = NL + "\t\t\t\t\t\t\t}";
  protected final String TEXT_52 = NL + "\t\t\t\t\t\tif (parseResult.length != ";
  protected final String TEXT_53 = ") {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_54 = ".INSTANCE;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_55 = "() {" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_56 = " element = ";
  protected final String TEXT_57 = ";" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_58 = " domainModelCommand = createDomainModelCommand();" + NL + "\t\t\t\t\t\t\tprivate ";
  protected final String TEXT_59 = " createDomainModelCommand() {" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_60 = " domainModelEditDomain = ";
  protected final String TEXT_61 = ".getEditingDomainFor(";
  protected final String TEXT_62 = ".getDiagram().getElement());" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_63 = " result = new ";
  protected final String TEXT_64 = "();" + NL + "\t\t\t\t\t\t\t\tObject valueToSet;";
  protected final String TEXT_65 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_66 = " ";
  protected final String TEXT_67 = "feature = (";
  protected final String TEXT_68 = ") ";
  protected final String TEXT_69 = ".eINSTANCE.get";
  protected final String TEXT_70 = "();" + NL + "\t\t\t\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t\t\t\tvalueToSet = ";
  protected final String TEXT_71 = ".parseValue(feature, parseResult[";
  protected final String TEXT_72 = "]);" + NL + "\t\t\t\t\t\t\t\t} catch (IllegalArgumentException e) {" + NL + "\t\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_73 = ".INSTANCE;" + NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_74 = NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_75 = " ";
  protected final String TEXT_76 = "values = new ";
  protected final String TEXT_77 = "();" + NL + "\t\t\t\t\t\t\t\tvalues.addAll(element.get";
  protected final String TEXT_78 = "());" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_79 = ".create(domainModelEditDomain, element, feature, values));" + NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_80 = ".create(domainModelEditDomain, element, feature, valueToSet));";
  protected final String TEXT_81 = NL + "\t\t\t\t\t\t\t\tresult.append(";
  protected final String TEXT_82 = ".create(domainModelEditDomain, element, feature, valueToSet));";
  protected final String TEXT_83 = NL + "\t\t\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t\t\t}";
  protected final String TEXT_84 = NL + "\t\t\t\t\t\t\tpublic void undo() {" + NL + "\t\t\t\t\t\t\t\tdomainModelCommand.undo();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic void execute() {" + NL + "\t\t\t\t\t\t\t\tdomainModelCommand.execute();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic boolean canUndo() {" + NL + "\t\t\t\t\t\t\t\treturn element != null && domainModelCommand != null && domainModelCommand.canUndo();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\tpublic boolean canExecute() {" + NL + "\t\t\t\t\t\t\t\treturn element != null && domainModelCommand != null && domainModelCommand.canExecute();" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t};" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});";
  protected final String TEXT_85 = NL + "\t}" + NL;
  protected final String TEXT_86 = NL;
  protected final String TEXT_87 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void performRequest(";
  protected final String TEXT_88 = " req) {" + NL + "\t\tif (";
  protected final String TEXT_89 = ".REQ_DIRECT_EDIT == req.getType()) {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.performRequest(req);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_90 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tmanager = new ";
  protected final String TEXT_91 = "(this, ";
  protected final String TEXT_92 = ".class, new ";
  protected final String TEXT_93 = "() {" + NL + "\t\t\t\tpublic void relocate(";
  protected final String TEXT_94 = " celleditor) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_95 = " rect = getLabel().getTextBounds();" + NL + "\t\t\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "\t\t\t\t\tcelleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t\t\t}" + NL + "\t\t\t}) {" + NL + "\t\t\t\tprotected void initCellEditor() {" + NL + "\t\t\t\t\tgetCellEditor().setValue(getLabelEditText());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL;
  protected final String TEXT_96 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tNode node = getDiagramNode();" + NL + "\t\tassert node.getLayoutConstraint() instanceof Location;" + NL + "\t\tfinal Location location = (Location) node.getLayoutConstraint();" + NL + "\t\t((";
  protected final String TEXT_97 = ") getParent()).setLayoutConstraint(this," + NL + "\t\t\t\tgetFigure(), new ";
  protected final String TEXT_98 = "() {" + NL + "\t\t\t\t\tprotected ";
  protected final String TEXT_99 = " getReferencePoint() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_100 = " parent = getUpdatableParent();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_101 = " connection = (";
  protected final String TEXT_102 = ") parent.getFigure();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_103 = " midPoint = connection.getPoints().getMidpoint().getCopy();" + NL + "\t\t\t\t\t\tconnection.translateToAbsolute(midPoint);" + NL + "\t\t\t\t\t\treturn midPoint.translate(new ";
  protected final String TEXT_104 = "(location.getX(), location.getY()));" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t}" + NL;
  protected final String TEXT_105 = NL;
  protected final String TEXT_106 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String VIEW_PATTERN = \"";
  protected final String TEXT_107 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String EDIT_PATTERN = \"";
  protected final String TEXT_108 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_109 = " element = ";
  protected final String TEXT_110 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, VIEW_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelEditText() {" + NL + "\t\t";
  protected final String TEXT_111 = " element = ";
  protected final String TEXT_112 = ";" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn buildTextByPattern(element, EDIT_PATTERN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String buildTextByPattern(";
  protected final String TEXT_113 = " element, String pattern) {";
  protected final String TEXT_114 = NL + "\t\tif (element.get";
  protected final String TEXT_115 = "() == null) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}";
  protected final String TEXT_116 = NL + "\t\treturn ";
  protected final String TEXT_117 = ".format(pattern, new Object[] {";
  protected final String TEXT_118 = NL + "\t\t\t";
  protected final String TEXT_119 = NL + "\t\t});";
d142 69
a210 69
  protected final String TEXT_122 = NL + "\t\t";
  protected final String TEXT_123 = ",";
  protected final String TEXT_124 = NL + "\t\t});";
  protected final String TEXT_125 = NL + "\t\t//XXX: unexpected model facet." + NL + "\t\treturn defaultText;";
  protected final String TEXT_126 = NL + "\t}";
  protected final String TEXT_127 = NL;
  protected final String TEXT_128 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_129 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_130 = ") ";
  protected final String TEXT_131 = ".getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_132 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_133 = " toDispose = createdFont;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tString fontName = style.getFontName();" + NL + "\t\t\tint fontHeight = style.getFontHeight();" + NL + "\t\t\tint fontStyle = ";
  protected final String TEXT_134 = ".NORMAL;" + NL + "\t\t\tif (style.isBold()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_135 = ".BOLD;" + NL + "\t\t\t}" + NL + "\t\t\tif (style.isItalic()) {" + NL + "\t\t\t\tfontStyle |= ";
  protected final String TEXT_136 = ".ITALIC;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_137 = " currentFont = getFigure().getFont();" + NL + "\t\t\tif (currentFont != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_138 = " currentFontData = currentFont.getFontData()[0];" + NL + "\t\t\t\tif (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFont = new ";
  protected final String TEXT_139 = "(null, fontName, fontHeight, fontStyle);" + NL + "\t\t\tgetFigure().setFont(createdFont);" + NL + "\t\t} else {" + NL + "\t\t\t//revert to the default font" + NL + "\t\t\tgetFigure().setFont(getViewer().getControl().getFont());" + NL + "\t\t\tcreatedFont = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned)." + NL + "\t * Whenever another non-default font is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_140 = " createdFont;";
  protected final String TEXT_141 = NL;
  protected final String TEXT_142 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFontColor() {" + NL + "\t\t";
  protected final String TEXT_143 = " style = (";
  protected final String TEXT_144 = ")  ";
  protected final String TEXT_145 = ".getStyle(";
  protected final String TEXT_146 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_147 = " toDispose = createdFontColor;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tint fontColor = style.getFontColor();" + NL + "\t\t\tint red = fontColor & 0x000000FF;" + NL + "\t\t\tint green = (fontColor & 0x0000FF00) >> 8;" + NL + "\t\t\tint blue = (fontColor & 0x00FF0000) >> 16;" + NL + "\t\t\t";
  protected final String TEXT_148 = " currentColor = getLabel().getForegroundColor();" + NL + "\t\t\tif (currentColor != null && currentColor.getRed() == red && currentColor.getGreen() == green && currentColor.getBlue() == blue) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tcreatedFontColor = new ";
  protected final String TEXT_149 = "(null, red, green, blue);" + NL + "\t\t\tgetFigure().setForegroundColor(createdFontColor);" + NL + "\t\t} else {" + NL + "\t\t\tgetFigure().setForegroundColor(getViewer().getControl().getForeground());" + NL + "\t\t\tcreatedFontColor = null;" + NL + "\t\t}" + NL + "\t\tif (toDispose != null) {" + NL + "\t\t\ttoDispose.dispose();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * The color (created by {@@link #refreshFontColor()}) currently assigned to the label." + NL + "\t * Whenever another color is assigned to it, it is safe to dispose the previous one." + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_150 = " createdFontColor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_151 = " resolveSemanticElement() {" + NL + "\t\tfor(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tView view = (View)editPart.getModel();" + NL + "\t\t\tif (view != null && view.getElement() != null) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_152 = ") view.getElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_153 = " getUpdatableParent() {" + NL + "\t\tfor(EditPart editPart = getParent(); editPart != null; editPart = editPart.getParent()) {" + NL + "\t\t\tif (editPart instanceof ";
  protected final String TEXT_154 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_155 = ") editPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void activate() {" + NL + "\t\tsuper.activate();" + NL + "\t\t";
  protected final String TEXT_156 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_158 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_159 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_160 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_161 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_162 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_163 = ".eINSTANCE.get";
  protected final String TEXT_164 = "(), labelRefresher);";
  protected final String TEXT_165 = NL + "\t\t\tupdatableParent.addRefresher(";
  protected final String TEXT_166 = ".eINSTANCE.get";
  protected final String TEXT_167 = "(), labelRefresher);";
  protected final String TEXT_168 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void deactivate() {" + NL + "\t\tsuper.deactivate();" + NL + "\t\t";
  protected final String TEXT_169 = " updatableParent = getUpdatableParent();" + NL + "\t\tif (updatableParent != null) {" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_170 = ".eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle_FontHeight(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle_FontName(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_173 = ".eINSTANCE.getFontStyle_Bold(), fontRefresher);" + NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_Italic(), fontRefresher);";
  protected final String TEXT_175 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_176 = ".eINSTANCE.get";
  protected final String TEXT_177 = "(), labelRefresher);";
  protected final String TEXT_178 = NL + "\t\t\tupdatableParent.removeRefresher(";
  protected final String TEXT_179 = ".eINSTANCE.get";
  protected final String TEXT_180 = "(), labelRefresher);";
  protected final String TEXT_181 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher labelRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshLabel();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontColorRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFontColor();" + NL + "\t\t}" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IUpdatableEditPart.Refresher fontRefresher = new IUpdatableEditPart.Refresher() {" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\trefreshFont();" + NL + "\t\t}" + NL + "\t};" + NL;
  protected final String TEXT_182 = NL;
  protected final String TEXT_183 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_184 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_185 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_186 = " createLabel() {";
  protected final String TEXT_187 = NL + "\t\treturn new ";
  protected final String TEXT_188 = "();";
  protected final String TEXT_189 = NL + "\t\treturn ";
  protected final String TEXT_190 = ";";
d213 8
a220 8
  protected final String TEXT_193 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_194 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_195 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_196 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL;
  protected final String TEXT_197 = NL;
  protected final String TEXT_198 = NL;
  protected final String TEXT_199 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MapModeWorkaround {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int DPtoLP(int dp) {" + NL + "\t\t\treturn dp;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static MapModeWorkaround INSTANCE = new MapModeWorkaround();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate MapModeWorkaround getMapMode() {" + NL + "\t\treturn MapModeWorkaround.INSTANCE;" + NL + "\t}";
  protected final String TEXT_200 = NL + "}";
d222 4
d271 2
d275 6
d282 1
a282 1
    stringBuffer.append(TEXT_9);
d284 1
a284 1
    stringBuffer.append(TEXT_10);
d289 1
a289 1
    stringBuffer.append(TEXT_11);
d291 1
a291 1
    stringBuffer.append(TEXT_12);
d295 2
a296 2
    stringBuffer.append(TEXT_13);
    stringBuffer.append(TEXT_14);
d298 1
a298 1
    stringBuffer.append(TEXT_15);
d300 1
a300 1
    stringBuffer.append(TEXT_16);
d302 1
a302 1
    stringBuffer.append(TEXT_17);
d304 1
a304 1
    stringBuffer.append(TEXT_18);
d306 1
a306 1
    stringBuffer.append(TEXT_19);
d308 1
a308 1
    stringBuffer.append(TEXT_20);
d310 1
a310 1
    stringBuffer.append(TEXT_21);
d312 1
a312 1
    stringBuffer.append(TEXT_22);
d314 1
a314 1
    stringBuffer.append(TEXT_23);
d316 1
a316 1
    stringBuffer.append(TEXT_24);
d322 1
a322 1
    stringBuffer.append(TEXT_25);
d324 1
a324 1
    stringBuffer.append(TEXT_26);
d326 1
a326 1
    stringBuffer.append(TEXT_27);
d328 1
a328 1
    stringBuffer.append(TEXT_28);
d330 1
a330 1
    stringBuffer.append(TEXT_29);
d332 1
a332 1
    stringBuffer.append(TEXT_30);
d334 1
a334 1
    stringBuffer.append(TEXT_31);
d336 1
a336 1
    stringBuffer.append(TEXT_32);
d338 1
a338 1
    stringBuffer.append(TEXT_33);
d340 1
a340 1
    stringBuffer.append(TEXT_34);
d342 1
a342 1
    stringBuffer.append(TEXT_35);
d344 1
a344 1
    stringBuffer.append(TEXT_36);
d346 1
a346 1
    stringBuffer.append(TEXT_37);
d348 1
a348 1
    stringBuffer.append(TEXT_38);
d350 1
a350 1
    stringBuffer.append(TEXT_39);
d352 1
a352 1
    stringBuffer.append(TEXT_40);
d356 1
a356 1
    stringBuffer.append(TEXT_41);
d358 1
a358 1
    stringBuffer.append(TEXT_42);
d360 1
a360 1
    stringBuffer.append(TEXT_43);
d362 1
a362 1
    stringBuffer.append(TEXT_44);
d364 1
a364 1
    stringBuffer.append(TEXT_45);
d366 1
a366 1
    stringBuffer.append(TEXT_46);
d368 1
a368 1
    stringBuffer.append(TEXT_47);
d370 1
a370 1
    stringBuffer.append(TEXT_48);
d374 1
a374 1
    stringBuffer.append(TEXT_49);
d376 1
a376 1
    stringBuffer.append(TEXT_50);
d380 1
a380 1
    stringBuffer.append(TEXT_51);
d386 1
a386 1
    stringBuffer.append(TEXT_52);
d388 1
a388 1
    stringBuffer.append(TEXT_53);
d390 1
a390 1
    stringBuffer.append(TEXT_54);
d392 1
a392 1
    stringBuffer.append(TEXT_55);
d394 1
a394 1
    stringBuffer.append(TEXT_56);
d396 1
a396 1
    stringBuffer.append(TEXT_57);
d398 1
a398 1
    stringBuffer.append(TEXT_58);
d400 1
a400 1
    stringBuffer.append(TEXT_59);
d402 1
a402 1
    stringBuffer.append(TEXT_60);
d404 1
a404 1
    stringBuffer.append(TEXT_61);
d406 1
a406 1
    stringBuffer.append(TEXT_62);
d408 1
a408 1
    stringBuffer.append(TEXT_63);
d410 1
a410 1
    stringBuffer.append(TEXT_64);
d417 1
a417 1
    stringBuffer.append(TEXT_65);
d420 1
a420 1
    stringBuffer.append(TEXT_66);
d422 1
a422 1
    stringBuffer.append(TEXT_67);
d424 1
a424 1
    stringBuffer.append(TEXT_68);
d426 1
a426 1
    stringBuffer.append(TEXT_69);
d428 1
a428 1
    stringBuffer.append(TEXT_70);
d430 1
a430 1
    stringBuffer.append(TEXT_71);
d432 1
a432 1
    stringBuffer.append(TEXT_72);
d434 1
a434 1
    stringBuffer.append(TEXT_73);
d438 1
a438 1
    stringBuffer.append(TEXT_74);
d441 1
a441 1
    stringBuffer.append(TEXT_75);
d443 1
a443 1
    stringBuffer.append(TEXT_76);
d445 1
a445 1
    stringBuffer.append(TEXT_77);
d447 1
a447 1
    stringBuffer.append(TEXT_78);
d449 1
a449 1
    stringBuffer.append(TEXT_79);
d451 1
a451 1
    stringBuffer.append(TEXT_80);
d455 1
a455 1
    stringBuffer.append(TEXT_81);
d457 1
a457 1
    stringBuffer.append(TEXT_82);
d464 1
a464 1
    stringBuffer.append(TEXT_83);
d468 1
a468 1
    stringBuffer.append(TEXT_84);
d472 1
a472 1
    stringBuffer.append(TEXT_85);
d476 2
a477 2
    stringBuffer.append(TEXT_86);
    stringBuffer.append(TEXT_87);
d479 1
a479 1
    stringBuffer.append(TEXT_88);
d481 1
a481 1
    stringBuffer.append(TEXT_89);
d483 1
a483 1
    stringBuffer.append(TEXT_90);
d485 1
a485 1
    stringBuffer.append(TEXT_91);
d487 1
a487 1
    stringBuffer.append(TEXT_92);
d489 1
a489 1
    stringBuffer.append(TEXT_93);
d491 1
a491 1
    stringBuffer.append(TEXT_94);
d493 1
a493 1
    stringBuffer.append(TEXT_95);
d497 1
a497 1
    stringBuffer.append(TEXT_96);
d499 1
a499 1
    stringBuffer.append(TEXT_97);
d501 1
a501 1
    stringBuffer.append(TEXT_98);
d503 1
a503 1
    stringBuffer.append(TEXT_99);
d505 1
a505 1
    stringBuffer.append(TEXT_100);
d507 1
a507 1
    stringBuffer.append(TEXT_101);
d509 1
a509 1
    stringBuffer.append(TEXT_102);
d511 1
a511 1
    stringBuffer.append(TEXT_103);
d513 2
a514 2
    stringBuffer.append(TEXT_104);
    stringBuffer.append(TEXT_105);
d558 1
a558 1
    stringBuffer.append(TEXT_106);
d560 1
a560 1
    stringBuffer.append(TEXT_107);
d562 1
a562 1
    stringBuffer.append(TEXT_108);
d564 1
a564 1
    stringBuffer.append(TEXT_109);
d566 1
a566 1
    stringBuffer.append(TEXT_110);
d568 1
a568 1
    stringBuffer.append(TEXT_111);
d570 1
a570 1
    stringBuffer.append(TEXT_112);
d572 1
a572 1
    stringBuffer.append(TEXT_113);
d579 1
a579 1
    stringBuffer.append(TEXT_114);
d581 1
a581 1
    stringBuffer.append(TEXT_115);
d585 1
a585 1
    stringBuffer.append(TEXT_116);
d587 1
a587 1
    stringBuffer.append(TEXT_117);
d594 1
a594 1
    stringBuffer.append(TEXT_118);
d596 1
a596 1
    stringBuffer.append(TEXT_119);
d601 1
a601 1
    stringBuffer.append(TEXT_120);
d603 1
a603 1
    stringBuffer.append(TEXT_121);
d612 1
a612 1
    stringBuffer.append(TEXT_122);
d615 1
a615 1
    stringBuffer.append(TEXT_123);
d620 1
a620 1
    stringBuffer.append(TEXT_124);
d624 1
a624 1
    stringBuffer.append(TEXT_125);
a627 6
    stringBuffer.append(TEXT_126);
    stringBuffer.append(TEXT_127);
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a628 1
    stringBuffer.append(primaryView);
a629 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d631 1
a631 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d633 1
a633 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d635 1
a635 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d637 1
a637 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d641 1
a641 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d643 1
a643 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
d645 2
a647 1
    stringBuffer.append(TEXT_140);
d649 1
d651 1
a651 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d653 1
a653 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a654 1
    stringBuffer.append(primaryView);
a655 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d657 1
a657 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d659 1
a659 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d661 1
a661 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d663 2
a665 2
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d667 1
a667 1
    stringBuffer.append(importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName()));
d669 1
a669 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d671 1
a671 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d673 1
a673 1
    stringBuffer.append(importManager.getImportedName(genHost.getEditPartQualifiedClassName()));
d675 2
a677 2
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d679 1
a679 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d681 1
a681 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d683 1
a683 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d687 8
d699 1
a699 1
    stringBuffer.append(TEXT_162);
d701 1
a701 1
    stringBuffer.append(TEXT_163);
d703 1
a703 1
    stringBuffer.append(TEXT_164);
d710 1
a710 1
    stringBuffer.append(TEXT_165);
d712 1
a712 1
    stringBuffer.append(TEXT_166);
d714 1
a714 1
    stringBuffer.append(TEXT_167);
d719 1
a719 1
    stringBuffer.append(TEXT_168);
d721 1
a721 1
    stringBuffer.append(TEXT_169);
d723 1
a723 1
    stringBuffer.append(TEXT_170);
d725 1
a725 1
    stringBuffer.append(TEXT_171);
d727 1
a727 1
    stringBuffer.append(TEXT_172);
d729 1
a729 1
    stringBuffer.append(TEXT_173);
d731 1
a731 1
    stringBuffer.append(TEXT_174);
d736 1
a736 1
    stringBuffer.append(TEXT_175);
d738 1
a738 1
    stringBuffer.append(TEXT_176);
d740 1
a740 1
    stringBuffer.append(TEXT_177);
d747 1
a747 1
    stringBuffer.append(TEXT_178);
d749 1
a749 1
    stringBuffer.append(TEXT_179);
d751 1
a751 1
    stringBuffer.append(TEXT_180);
d756 3
a758 3
    stringBuffer.append(TEXT_181);
    stringBuffer.append(TEXT_182);
    stringBuffer.append(TEXT_183);
d760 1
a760 1
    stringBuffer.append(TEXT_184);
d762 1
a762 1
    stringBuffer.append(TEXT_185);
d764 1
a764 1
    stringBuffer.append(TEXT_186);
d774 1
a774 1
    stringBuffer.append(TEXT_187);
d776 1
a776 1
    stringBuffer.append(TEXT_188);
d779 1
a779 1
    stringBuffer.append(TEXT_189);
d781 1
a781 1
    stringBuffer.append(TEXT_190);
d786 1
a786 1
    stringBuffer.append(TEXT_191);
d788 1
a788 1
    stringBuffer.append(TEXT_192);
d790 1
a790 1
    stringBuffer.append(TEXT_193);
d792 1
a792 1
    stringBuffer.append(TEXT_194);
d794 1
a794 1
    stringBuffer.append(TEXT_195);
d796 1
a796 1
    stringBuffer.append(TEXT_196);
d801 1
a801 1
    stringBuffer.append(TEXT_197);
d803 1
a803 1
    stringBuffer.append(TEXT_198);
d807 1
a807 1
    stringBuffer.append(TEXT_199);
d814 1
a814 1
    stringBuffer.append(TEXT_200);
d816 1
a816 1
    stringBuffer.append(TEXT_201);
@

