head	1.1;
access;
symbols
	v20081020-0700:1.1
	v20080722-1827:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.6
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20080402-1725:1.1
	v20080222-1200:1.1
	v20080114-2222:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.4
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070330-1300:1.1
	v20070221-1500:1.1
	v20070209-1900:1.1
	v20060209-1900:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061020-1000:1.1
	v20061013-1330:1.1
	v20060925-1700:1.1
	v20060919-0800:1.1
	M1_20:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1
	v20060519-0800:1.1
	I20060505-1400:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2006.02.13.19.11.05;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.1
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.commands.core.command;

import org.eclipse.core.commands.operations.IUndoContext;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.gmf.runtime.emf.commands.core.internal.l10n.EMFCommandsCoreMessages;

/**
 * An {@@link IUndoContext} that tags an EMF operation with the editing domain
 * that it affects. Two editing domain contexts match if and only if they
 * reference the same {@@link EditingDomain} instance.
 * 
 * @@author ldamus
 */
public final class EditingDomainUndoContext
    implements IUndoContext {

    private final EditingDomain editingDomain;

    /**
     * Initializes me with the editing domain that I represent.
     * 
     * @@param domain
     *            the editing domain
     */
    public EditingDomainUndoContext(EditingDomain domain) {
        this.editingDomain = domain;
    }

    // Documentation copied from the interface
    public String getLabel() {
        return EMFCommandsCoreMessages.editingDomainContext;
    }

    /**
     * I match another <code>context</code> if it is a
     * <code>EditingDomainUndoContext</code> representing the same editing
     * domain as I.
     */
    public boolean matches(IUndoContext context) {
        return this.equals(context);
    }

    /**
     * I am equal to other <code>EditingDomainUndoContext</code> on the same
     * editing domain as mine.
     */
    public boolean equals(Object o) {
        boolean result = false;

        if (o instanceof EditingDomainUndoContext) {
            result = getEditingDomain() == ((EditingDomainUndoContext) o)
                .getEditingDomain();
        }

        return result;
    }

    // Redefines the inherited method
    public int hashCode() {
        return editingDomain == null ? 0
            : editingDomain.hashCode();
    }

    /**
     * Obtains the editing domain.
     * 
     * @@return my editing domain
     */
    public final EditingDomain getEditingDomain() {
        return editingDomain;
    }
}
@
