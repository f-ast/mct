head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.6.6.1
	v20080716-1642:1.7
	R2_1_maintenance:1.6.0.6
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080425-1959:1.6
	v20080402-1725:1.6
	v20080222-1200:1.6
	v20080114-2222:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070601-1400:1.6
	v20070330-1300:1.6
	v20070221-1500:1.6
	v20070209-1900:1.6
	v20060209-1900:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061020-1000:1.6
	v20061013-1330:1.6
	v20060925-1700:1.6
	v20060919-0800:1.6
	M1_20:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060519-0800:1.6
	I20060505-1400:1.6
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.06.18.20.24.33;	author aboyko;	state Exp;
branches;
next	1.6;
commitid	597a48596f014567;

1.6
date	2006.05.04.19.49.48;	author vramaswamy;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2006.03.07.02.40.42;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.20.11.04;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.19.11.05;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.16;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.47;	author sshaw;	state Exp;
branches;
next	;

1.6.6.1
date	2008.06.18.20.26.01;	author aboyko;	state Exp;
branches;
next	;
commitid	5aad48596f594567;


desc
@@


1.7
log
@[237686] gmf_head aboyko 080618 [Commands] DuplicateEObjectsCommand has wrong list of affected files for an external duplication
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.commands.core.commands;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.util.FeatureMapUtil;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.emf.clipboard.core.ClipboardSupportUtil;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

/**
 * This command duplicates a list of <code>EObjects</code> and adds each
 * duplicate to it's originator's container. All references between objects that
 * are duplicated are updated to refer to the new duplicated objects.
 * <p>
 * The command returns a map which contains all the <code>EObjects</code> that
 * were duplicated mapped to their new duplicated objects. This map can also be
 * retrieved prior to having executed the command (it will be populated when the
 * command is executed). NOTE: The keyset of this map is not just the original
 * objects passed in; more objects may have been duplicated as well (e.g.
 * contained objects).
 * </p>
 * 
 * @@author cmahoney
 */
public abstract class DuplicateEObjectsCommand
	extends AbstractTransactionalCommand {

	/**
	 * The list of <code>EObjects</code> to be duplicated.
	 */
	private List objectsToBeDuplicated;

	/**
	 * The map of all duplicated objects to be populated at command execution time..
	 */
	private Map allDuplicatedObjects;

	/**
	 * Constructs a new duplicate EObjects command with the specified label and
	 * list of EObjects.
	 * 
     * @@param editingDomain
     *            the editing domain through which model changes are made
	 * @@param label
	 *            The label for the new command.
	 * @@param eObjectsToBeDuplicated
	 *            The list of <code>EObjects</code> to be duplicated.
	 */
	public DuplicateEObjectsCommand(TransactionalEditingDomain editingDomain, String label, List eObjectsToBeDuplicated) {
		super(editingDomain, label,
            getWorkspaceFiles(eObjectsToBeDuplicated));
        this.objectsToBeDuplicated = eObjectsToBeDuplicated;
		allDuplicatedObjects = new HashMap();
	}

	/**
	 * Constructs a new duplicate EObjects command with the specified label and
	 * list of EObjects.
	 * 
     * @@param editingDomain
     *            the editing domain through which model changes are made
	 * @@param label
	 *            The label for the new command.
	 * @@param eObjectsToBeDuplicated
	 *            The list of <code>EObjects</code> to be duplicated.
	 * @@param allDuplicatedObjectsMap
	 * 			An empty map to be populated with the duplicated objects.
	 */
	public DuplicateEObjectsCommand(TransactionalEditingDomain editingDomain, String label, List eObjectsToBeDuplicated, Map allDuplicatedObjectsMap) {
        super(editingDomain, label,
            getWorkspaceFiles(eObjectsToBeDuplicated));
		this.objectsToBeDuplicated = eObjectsToBeDuplicated;
		this.allDuplicatedObjects = allDuplicatedObjectsMap;
	}
	
	/**
	 * Constructs a new duplicate EObjects command with the specified label and
	 * list of EObjects. Also sets the list of affected files to be the files,
	 * where the targetContainer is stored. Target container specifies the
	 * eObject into which the duplicated eObjects will be added.
	 * 
	 * @@param editingDomain
	 * 		the editing domain through which model changes are made
	 * @@param label
	 * 		The label for the new command.
	 * @@param eObjectsToBeDuplicated
	 * 		The list of <code>EObjects</code> to be duplicated.
	 * @@param allDuplicatedObjectsMap
	 * 		An empty map to be populated with the duplicated objects.
	 */
	public DuplicateEObjectsCommand(TransactionalEditingDomain editingDomain,
			String label, List eObjectsToBeDuplicated,
			Map allDuplicatedObjectsMap, EObject targetContainer) {
		super(editingDomain, label, getWorkspaceFiles(targetContainer));
		this.objectsToBeDuplicated = eObjectsToBeDuplicated;
		this.allDuplicatedObjects = allDuplicatedObjectsMap;
	}
	
	/**
	 * Returns a map which contains all the <code>EObjects</code> that were
	 * duplicated mapped to their new duplicated objects. NOTE: The keyset of
	 * this map is not just the original objects passed in; more objects may
	 * have been duplicated as well (e.g. contained objects). This map can be
	 * retrieved prior to command execution time. It will be populated when the
	 * command is executed.
	 * 
	 * @@return The map of duplicated objects.
	 */
	protected Map getAllDuplicatedObjectsMap() {
		return allDuplicatedObjects;
	}

	/**
	 * Returns the list of objects to be duplicated.
	 * 
	 * @@return The list of objects to be duplicated.
	 */
	protected List getObjectsToBeDuplicated() {
		return objectsToBeDuplicated;
	}

	/**
	 * Verifies that the container of all the original objects can contain
	 * multiple objects.
	 * 
	 */
	public boolean canExecute() {
		for (Iterator iter = objectsToBeDuplicated.iterator(); iter.hasNext();) {
			EObject original = (EObject) iter.next();

			EReference reference = original.eContainmentFeature();
			if (reference == null || !FeatureMapUtil.isMany(original.eContainer(),reference)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Executes this command by duplicating the orignal eobjects, adding the
	 * duplicates to the original's container, and populating the map of
	 * duplicates to be returned.
	 * 
	 */
	protected CommandResult doExecuteWithResult(
            IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {
		
		// Remove elements whose container is getting copied.
		ClipboardSupportUtil.getCopyElements(getObjectsToBeDuplicated());

		// Perform the copy and update the references.
		EcoreUtil.Copier copier = new EcoreUtil.Copier();
		copier.copyAll(objectsToBeDuplicated);
		copier.copyReferences();

		// Update the map with all elements duplicated.
		getAllDuplicatedObjectsMap().putAll(copier);

		// Add the duplicates to the original's container.
		for (Iterator i = objectsToBeDuplicated.iterator(); i.hasNext();) {
			EObject original = (EObject) i.next();
			EObject duplicate = (EObject) copier.get(original);

			EReference reference = original.eContainmentFeature();
			if (reference != null
				&& FeatureMapUtil.isMany(original.eContainer(),reference)
				&& ClipboardSupportUtil.isOkToAppendEObjectAt(
					original.eContainer(), reference, duplicate)) {
				
				ClipboardSupportUtil.appendEObjectAt(original.eContainer(),
					reference, duplicate);
			}
		}
		return CommandResult.newOKCommandResult(getAllDuplicatedObjectsMap());
	}

}@


1.6
log
@[131094] gmf_head cmcgee 060504 Sweep Code for EReference.isMany() calls
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d98 23
@


1.6.6.1
log
@[237686] gmf_R2_1_maintenance aboyko 080618 [Commands] DuplicateEObjectsCommand has wrong list of affected files for an external duplication
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2008 IBM Corporation and others.
a97 23
	 * Constructs a new duplicate EObjects command with the specified label and
	 * list of EObjects. Also sets the list of affected files to be the files,
	 * where the targetContainer is stored. Target container specifies the
	 * eObject into which the duplicated eObjects will be added.
	 * 
	 * @@param editingDomain
	 * 		the editing domain through which model changes are made
	 * @@param label
	 * 		The label for the new command.
	 * @@param eObjectsToBeDuplicated
	 * 		The list of <code>EObjects</code> to be duplicated.
	 * @@param allDuplicatedObjectsMap
	 * 		An empty map to be populated with the duplicated objects.
	 */
	public DuplicateEObjectsCommand(TransactionalEditingDomain editingDomain,
			String label, List eObjectsToBeDuplicated,
			Map allDuplicatedObjectsMap, EObject targetContainer) {
		super(editingDomain, label, getWorkspaceFiles(targetContainer));
		this.objectsToBeDuplicated = eObjectsToBeDuplicated;
		this.allDuplicatedObjects = allDuplicatedObjectsMap;
	}
	
	/**
@


1.5
log
@[129773] gmf_head cdamus 060306 EMFCoreUtil.destroy() cannot destroy non-contained dependents
@
text
@d25 1
d130 1
a130 1
			if (reference == null || !reference.isMany()) {
d165 1
a165 1
				&& reference.isMany()
@


1.4
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@a28 1
import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
a94 21
    
    /**
     * Constructs a new duplicate EObjects command with the specified label and
     * list of EObjects.
     * 
     * @@param label
     *            The label for the new command.
     * @@param eObjectsToBeDuplicated
     *            The list of <code>EObjects</code> to be duplicated.
     * @@param allDuplicatedObjectsMap
     *            An empty map to be populated with the duplicated objects.
     * @@deprecated Use
     *             {@@link #DuplicateEObjectsCommand(TransactionalEditingDomain, String, List, Map)}
     *             instead. This constructor assumed the singleton editing
     *             domain.
     */
    public DuplicateEObjectsCommand(String label, List eObjectsToBeDuplicated,
            Map allDuplicatedObjectsMap) {
        this(MEditingDomain.INSTANCE, label, eObjectsToBeDuplicated,
            allDuplicatedObjectsMap);
    }
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d29 1
d96 21
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d19 2
d25 1
a25 1

d28 1
a28 1
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;
d46 1
a46 1
	extends AbstractModelCommand {
d62 2
d69 4
a72 3
	public DuplicateEObjectsCommand(String label, List eObjectsToBeDuplicated) {
		super(label, eObjectsToBeDuplicated);
		this.objectsToBeDuplicated = eObjectsToBeDuplicated;
d80 2
d89 3
a91 2
	public DuplicateEObjectsCommand(String label, List eObjectsToBeDuplicated, Map allDuplicatedObjectsMap) {
		super(label, eObjectsToBeDuplicated);
a122 1
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#isExecutable()
d124 1
a124 1
	public boolean isExecutable() {
a140 1
	 * @@see org.eclipse.gmf.runtime.common.core.internal.command.AbstractCommand#doExecute(org.eclipse.core.runtime.IProgressMonitor)
d142 3
a144 1
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
d172 1
a172 1
		return newOKCommandResult(getAllDuplicatedObjectsMap());
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

