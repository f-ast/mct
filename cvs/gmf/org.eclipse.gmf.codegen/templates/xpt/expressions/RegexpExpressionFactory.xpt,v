head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081015-1925:1.2
	v20081008-1925:1.2
	v20081001-1925:1.2
	v20080930-1130:1.2
	v20080926-1245:1.2
	v20080924-1925:1.2
	v20080917-1925:1.2
	v20080911-1728:1.2
	v20080910-1520:1.2
	v20080903-1520:1.2
	v20080827-1520:1.2
	v20080813-1520:1.2
	v20080806-1520:1.2
	v20080722-1827:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080528-1052:1.2
	v20080521:1.2
	v20080516-1543:1.2
	v20080516-1143:1.2
	v20080512-1200:1.2
	v20080508-2000:1.2
	v20080507-1326:1.2
	v20080503-1740:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080417-1610:1.1
	v20080411-0411:1.1
	v20080404-1111:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20080215-1500:1.1
	v20080207-0207:1.1.2.2
	v20071222-1111:1.1
	v20071214-1111:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1.2.2
	v20071112-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070928-0000:1.1.2.2
	v20070921-0000:1.1.2.2
	v20070915-0000:1.1.2.2
	R2_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	39124821b4de4567;

1.1
date	2007.09.14.18.23.24;	author dstadnik;	state Exp;
branches
	1.1.2.1;
next	;
commitid	153b46ead19a4567;

1.1.2.1
date	2007.09.14.18.23.24;	author dstadnik;	state dead;
branches;
next	1.1.2.2;
commitid	622c46ead7044567;

1.1.2.2
date	2007.09.14.18.46.29;	author dstadnik;	state Exp;
branches;
next	;
commitid	622c46ead7044567;


desc
@@


1.2
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»

«DEFINE RegexpExpressionFactory FOR gmfgen::GenExpressionInterpreter-»
«EXPAND xpt::Common::copyright FOR container.editorGen-»
package «container.expressionsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «className» {

	«EXPAND xpt::Common::generatedMemberComment»
	private «className»() {
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static «container.getAbstractExpressionQualifiedClassName()» getExpression(
			String body, org.eclipse.emf.ecore.EClassifier context, java.util.Map environment) {
		return new Expression(body, context, environment);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static «container.getAbstractExpressionQualifiedClassName()» getExpression(
			String body, org.eclipse.emf.ecore.EClassifier context) {
		return getExpression(body, context, java.util.Collections.EMPTY_MAP);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class Expression extends «container.getAbstractExpressionQualifiedClassName()» {

		«EXPAND xpt::Common::generatedMemberComment»
		private final java.util.regex.Pattern pattern;

		«EXPAND xpt::Common::generatedMemberComment»
		public Expression(String body, org.eclipse.emf.ecore.EClassifier context, java.util.Map environment) {
			super(body, context);
			java.util.regex.Pattern p;
			try {
				p = java.util.regex.Pattern.compile(body);
			} catch (java.util.regex.PatternSyntaxException e) {
				setStatus(org.eclipse.core.runtime.IStatus.ERROR, e.getMessage(), e);
				p = null;
			}
			this.pattern = p;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected Object doEvaluate(Object contextInstance, java.util.Map env) {
			if (pattern == null) {
				return null;
			}
			if (context() instanceof org.eclipse.emf.ecore.EDataType) {
				contextInstance = org.eclipse.emf.ecore.util.EcoreUtil.convertToString(
						(org.eclipse.emf.ecore.EDataType) context(), contextInstance);
			}
			java.util.regex.Matcher matcher = this.pattern.matcher(String.valueOf(contextInstance));
			return Boolean.valueOf(«IF language.literal == gmfgen::GenLanguage::nregexp.literal»!«ENDIF»matcher.matches());
		}
	}
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenExpressionInterpreter»«ENDDEFINE»
@


1.1
log
@get rid of jet
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.1.2.1
log
@file RegexpExpressionFactory.xpt was added on branch R2_0_maintenance on 2007-09-14 18:46:29 +0000
@
text
@d1 74
@


1.1.2.2
log
@get rid of jet
@
text
@a0 74
/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»

«DEFINE RegexpExpressionFactory FOR gmfgen::GenExpressionInterpreter-»
«EXPAND xpt::Common::copyright FOR container.editorGen-»
package «container.expressionsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «className» {

	«EXPAND xpt::Common::generatedMemberComment»
	private «className»() {
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static «container.getAbstractExpressionQualifiedClassName()» getExpression(
			String body, org.eclipse.emf.ecore.EClassifier context, java.util.Map environment) {
		return new Expression(body, context, environment);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static «container.getAbstractExpressionQualifiedClassName()» getExpression(
			String body, org.eclipse.emf.ecore.EClassifier context) {
		return getExpression(body, context, java.util.Collections.EMPTY_MAP);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class Expression extends «container.getAbstractExpressionQualifiedClassName()» {

		«EXPAND xpt::Common::generatedMemberComment»
		private final java.util.regex.Pattern pattern;

		«EXPAND xpt::Common::generatedMemberComment»
		public Expression(String body, org.eclipse.emf.ecore.EClassifier context, java.util.Map environment) {
			super(body, context);
			java.util.regex.Pattern p;
			try {
				p = java.util.regex.Pattern.compile(body);
			} catch (java.util.regex.PatternSyntaxException e) {
				setStatus(org.eclipse.core.runtime.IStatus.ERROR, e.getMessage(), e);
				p = null;
			}
			this.pattern = p;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected Object doEvaluate(Object contextInstance, java.util.Map env) {
			if (pattern == null) {
				return null;
			}
			if (context() instanceof org.eclipse.emf.ecore.EDataType) {
				contextInstance = org.eclipse.emf.ecore.util.EcoreUtil.convertToString(
						(org.eclipse.emf.ecore.EDataType) context(), contextInstance);
			}
			java.util.regex.Matcher matcher = this.pattern.matcher(String.valueOf(contextInstance));
			return Boolean.valueOf(«IF language.literal == gmfgen::GenLanguage::nregexp.literal»!«ENDIF»matcher.matches());
		}
	}
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenExpressionInterpreter»«ENDDEFINE»
@


