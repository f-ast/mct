head	1.15;
access;
symbols
	v20081022-1925:1.15
	v20081015-1925:1.15
	v20081008-1925:1.15
	v20081001-1925:1.15
	v20080930-1130:1.15
	v20080926-1245:1.15
	v20080924-1925:1.15
	v20080917-1925:1.15
	v20080911-1728:1.15
	v20080910-1520:1.15
	v20080903-1520:1.15
	v20080827-1520:1.15
	v20080813-1520:1.14
	v20080806-1520:1.14
	v20080722-1827:1.14
	v20080718-1731:1.14
	v20080716-1600:1.14
	v20080716-1642:1.14
	R2_1_maintenance:1.14.0.2
	Root_R2_1_maintenance:1.14
	R2_1_0:1.14
	v20080610-1132:1.14
	v20080603-1553:1.14
	v20080528-1052:1.12
	v20080521:1.12
	v20080516-1543:1.12
	v20080516-1143:1.12
	v20080512-1200:1.12
	v20080508-2000:1.12
	v20080507-1326:1.12
	v20080503-1740:1.11
	v20080501-1739:1.11
	v20080425-1959:1.11
	v20080417-1610:1.11
	v20080411-0411:1.11
	v20080404-1111:1.11
	v20080322-0000:1.11
	v20080222-1200:1.10
	v20080215-1500:1.10
	v20080207-0207:1.9.2.1
	v20071222-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071124-0000:1.9.2.1
	v20071112-0000:1.10
	v20071108-0000:1.10
	v20071003-0000:1.9
	v20070928-0000:1.9
	v20070921-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070520-1200:1.8
	v20070518-1300:1.7
	v20070504-1000:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.15
date	2008.08.22.15.20.16;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	1abb48aed9234567;

1.14
date	2008.06.03.16.41.51;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	78f24845744e4567;

1.13
date	2008.06.03.16.04.22;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	515748456b854567;

1.12
date	2008.05.07.13.56.02;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	39124821b4de4567;

1.11
date	2008.02.22.20.24.44;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	377d47bf2f8a4567;

1.10
date	2007.10.26.16.28.06;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	7648472215964567;

1.9
date	2007.05.24.10.53.39;	author ashatalin;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	81e46556eb34567;

1.8
date	2007.05.18.21.17.20;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	2591464e17d14567;

1.7
date	2007.05.17.17.36.25;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	48df464c92984567;

1.6
date	2007.05.11.13.50.54;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	6340464474b24567;

1.5
date	2007.05.09.16.19.09;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	714a4641f47d4567;

1.4
date	2007.05.08.12.14.58;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	3985464069c14567;

1.3
date	2007.05.04.15.27.49;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	6ef6463b50ec4567;

1.2
date	2007.05.03.20.42.14;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	7f0b463a49254567;

1.1
date	2007.05.01.13.28.04;	author ashatalin;	state Exp;
branches;
next	;
commitid	143a463740554567;

1.9.2.1
date	2007.10.26.16.26.35;	author ashatalin;	state Exp;
branches;
next	;
commitid	74864722153a4567;


desc
@@


1.15
log
@[243151] mgolubev - explicit source/target for links
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 *    Michael Golubev (Borland) - [243151] explicit source/target for links
 */

import "http://www.eclipse.org/gmf/2008/GenModel";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";
extension xpt::diagram::editpolicies::LinkUtils;

String getContainedLinksMethodNameSuffix() :
	"Contained"
;

String getIncomingLinksMethodNameSuffix() :
	"Incoming"
;

String getOutgoingLinksMethodNameSuffix() :
	"Outgoing"
;

cached List[gmfgen::GenLink] getContainedLinks(genmodel::GenClass metaClass, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeContainer(link, metaClass))
;

//XXX[MG]: it would be better to use linkEnd.outgoingLinks here 
//but it will change the ordering and produce meaningless diff in the generated code
cached List[gmfgen::GenLink] getOutgoingLinks(gmfgen::GenLinkEnd linkEnd) :
	linkEnd.getDiagram().links.select(link | linkEnd.genOutgoingLinks.contains(link))
;

//XXX[MG]: see above
cached List[gmfgen::GenLink] getIncomingLinks(gmfgen::GenLinkEnd linkEnd) :
	linkEnd.getDiagram().links.select(link | linkEnd.genIncomingLinks.contains(link))
;

List[gmfgen::GenLink] getAllContainedLinks(gmfgen::GenDiagram diagram) :
	diagram.links.select(link | !getAllSemanticElements(diagram).select(commonBase | canBeContainer(link, getMetaClass(commonBase))).isEmpty())
;

List[gmfgen::GenLink] getAllIncomingLinks(gmfgen::GenDiagram diagram) :
	diagram.links.select(link | !link.targets.isEmpty())
;

//XXX[MG]: I don't see the reason to make the additional check (isOutgoingLink) below 
List[gmfgen::GenLink] getAllOutgoingLinks(gmfgen::GenDiagram diagram) :
	diagram.links
		.select(link | isOutgoingLink(link))
		.select(link | !link.sources.isEmpty())
;

private boolean isOutgoingLink(gmfgen::GenLink link) :
	null != link.modelFacet && isOutgoingLink(link.modelFacet)
;

private boolean isOutgoingLink(gmfgen::LinkModelFacet modelFacet) :
	true
;

private boolean isOutgoingLink(gmfgen::TypeLinkModelFacet modelFacet) :
	null != modelFacet.sourceMetaFeature
;

cached List[gmfgen::GenLinkEnd] getAllSemanticDiagramElements(gmfgen::GenDiagram diagram) :
	diagram.getAllNodes().toList().addAll(diagram.links).typeSelect(gmfgen::GenLinkEnd).select(linkEnd | null != getMetaClass(linkEnd))
;

//(false == GenDiagram instanceof GenLinkEnd), so we have to downcast list type to gmfgen::GenCommonBase  
cached List[gmfgen::GenCommonBase] getAllSemanticElements(gmfgen::GenDiagram diagram) :
	null != diagram.domainDiagramElement 
		? {diagram}.addAll(getAllSemanticDiagramElements(diagram)) 
		: getAllSemanticDiagramElements(diagram)
;

cached genmodel::GenClass getMetaClass(gmfgen::GenCommonBase commonBase) :
	null
;

cached genmodel::GenClass getMetaClass(gmfgen::GenDiagram diagram) :
	diagram.domainDiagramElement
;

cached genmodel::GenClass getMetaClass(gmfgen::GenNode node) :
	node.modelFacet.metaClass
;

cached genmodel::GenClass getMetaClass(gmfgen::GenLink link) :
	null != link.modelFacet ? getMetaClass(link.modelFacet) : null
;

private genmodel::GenClass getMetaClass(gmfgen::LinkModelFacet modelFacet) :
	null
;

private genmodel::GenClass getMetaClass(gmfgen::TypeLinkModelFacet modelFacet) :
	modelFacet.metaClass
;

boolean hasSemanticChildren(gmfgen::GenContainerBase container) :
	!container.sansDomain && !container.containedNodes.isEmpty()
;

genmodel::GenClass getModelElementType(gmfgen::GenContainerBase containerBase) :
// Never should be here!
	null
;

genmodel::GenClass getModelElementType(gmfgen::GenDiagram diagram) :
	diagram.domainDiagramElement
;

genmodel::GenClass getModelElementType(gmfgen::GenCompartment compartment) :
	getModelElementType(compartment.node)
;

genmodel::GenClass getModelElementType(gmfgen::GenNode node) :
	node.modelFacet.metaClass
;

cached Set[genmodel::GenFeature] getSemanticChildrenChildFeatures(gmfgen::GenContainerBase containerBase) :
	getNonPhantomSemanticChildren(containerBase).collect(node | node.modelFacet.childMetaFeature).toSet()
;

cached Set[genmodel::GenFeature] getSemanticChildrenContainmentFeatures(gmfgen::GenContainerBase containerBase) :
	getNonPhantomSemanticChildren(containerBase).collect(node | node.modelFacet.containmentMetaFeature).toSet()
;

cached List[gmfgen::GenNode] getSemanticChildren(gmfgen::GenContainerBase containerBase, genmodel::GenFeature childMetaFeature) :
	getNonPhantomSemanticChildren(containerBase).select(node | node.modelFacet.childMetaFeature == childMetaFeature)
;

private cached List[gmfgen::GenNode] getNonPhantomSemanticChildren(gmfgen::GenContainerBase containerBase) :
	getSemanticChildren(containerBase).select(node | !node.modelFacet.isPhantomElement())
;

cached List[gmfgen::GenNode] getPhantomNodes(gmfgen::GenContainerBase containerBase) :
	{}
;

cached List[gmfgen::GenNode] getPhantomNodes(gmfgen::GenDiagram diagram) :
	getSemanticChildren(diagram).select(node | node.modelFacet.isPhantomElement())
;

cached List[gmfgen::GenNode] getSemanticChildren(gmfgen::GenContainerBase containerBase) :
	containerBase.containedNodes.select(node | null != node.modelFacet)
;

cached boolean hasConformableSemanticChildren(gmfgen::GenContainerBase containerBase) :
	let childMetaClasses = getSemanticChildren(containerBase).collect(node | node.modelFacet.metaClass) :
		!childMetaClasses.forAll(mc | childMetaClasses.select(mc2 | mc == mc2).size() == 1)
;

GenClass getLinkEndType(gmfgen::LinkModelFacet f, String methodNameSuffix) :
	null
;

//	For FeatureModelFacet-based links we are calling 
//	getOutgoing???Links instead of getContained???Links
GenClass getLinkEndType(gmfgen::FeatureLinkModelFacet f, String methodNameSuffix) :
	getIncomingLinksMethodNameSuffix() == methodNameSuffix
		? f.getTargetType()
		: f.getSourceType()
;

// 	For TypeModelFacet-based links we are calling 
//	getContained???Links instead of getOutgoinf???Links 
//	if sourceMetaFeature was not specified
GenClass getLinkEndType(gmfgen::TypeLinkModelFacet f, String methodNameSuffix) :
	getIncomingLinksMethodNameSuffix() == methodNameSuffix
		? f.getTargetType()
		: (getOutgoingLinksMethodNameSuffix() == methodNameSuffix && null != f.sourceMetaFeature
			? f.getSourceType()
			: f.containmentMetaFeature.genClass
		)
;
@


1.14
log
@[224206] - Support switching figure of EditPart with domain element property change
@
text
@d11 1
d35 4
a38 2
cached List[gmfgen::GenLink] getOutgoingLinks(genmodel::GenClass metaClass, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeSource(link, metaClass))
d41 3
a43 2
cached List[gmfgen::GenLink] getIncomingLinks(genmodel::GenClass metaClass, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeTarget(link, metaClass))
d51 1
a51 1
	diagram.links.select(link | !getAllSemanticDiagramElements(diagram).select(commonBase | canBeTarget(link, getMetaClass(commonBase))).isEmpty())
d54 1
d56 3
a58 1
	diagram.links.select(link | isOutgoingLink(link)).select(link | !getAllSemanticDiagramElements(diagram).select(commonBase | canBeSource(link, getMetaClass(commonBase))).isEmpty())
d73 2
a74 2
cached List[gmfgen::GenCommonBase] getAllSemanticDiagramElements(gmfgen::GenDiagram diagram) :
	diagram.getAllNodes().toList().addAll(diagram.links).typeSelect(gmfgen::GenCommonBase).select(commonBase | null != getMetaClass(commonBase))
d77 1
@


1.13
log
@[224206] - Support switching figure of EditPart with domain element property change
@
text
@d151 1
a151 1
		!childMetaClasses.forAll(mc | childMetaClasses.collect(mc2 | mc == mc2).size() == 1)
@


1.12
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d149 4
@


1.11
log
@[150177] phase I, refactor existing code: extract metamodel/generated code access into single place
@
text
@d13 1
a13 1
import "http://www.eclipse.org/gmf/2006/GenModel";
@


1.10
log
@[192876] - CanonicalEditPolicy should respect containment feature instead/in addition to children feature
@
text
@d147 26
a172 1
;@


1.9
log
@[188662] - Connection links are lost in new OpenDiagramEditPolicy editor
@
text
@d125 4
@


1.9.2.1
log
@[192876] - CanonicalEditPolicy should respect containment feature instead/in addition to children feature
@
text
@a124 4
cached Set[genmodel::GenFeature] getSemanticChildrenContainmentFeatures(gmfgen::GenContainerBase containerBase) :
	getNonPhantomSemanticChildren(containerBase).collect(node | node.modelFacet.containmentMetaFeature).toSet()
;

@


1.8
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d30 2
a31 2
cached List[gmfgen::GenLink] getContainedLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeContainer(link, typeModelFacet))
d34 2
a35 2
cached List[gmfgen::GenLink] getOutgoingLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeSource(link, typeModelFacet))
d38 2
a39 2
cached List[gmfgen::GenLink] getIncomingLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeTarget(link, typeModelFacet))
d43 1
a43 1
	diagram.links.select(link | !getAllSemanticElements(diagram).select(commonBase | canBeContainer(link, getTypeModelFacet(commonBase))).isEmpty())
d47 1
a47 1
	diagram.links.select(link | !getAllSemanticElements(diagram).select(commonBase | canBeTarget(link, getTypeModelFacet(commonBase))).isEmpty())
d51 17
a67 1
	diagram.links.select(link | !getAllSemanticElements(diagram).select(commonBase | canBeSource(link, getTypeModelFacet(commonBase))).isEmpty())
d71 3
a73 1
	diagram.getAllNodes().toList().addAll(diagram.links).typeSelect(gmfgen::GenCommonBase).select(commonBase | null != getTypeModelFacet(commonBase))
d76 1
a76 1
gmfgen::TypeModelFacet getTypeModelFacet(gmfgen::GenCommonBase commonBase) :
d80 6
a85 2
gmfgen::TypeModelFacet getTypeModelFacet(gmfgen::GenNode node) :
	node.modelFacet
d88 2
a89 2
gmfgen::TypeLinkModelFacet getTypeModelFacet(gmfgen::GenLink link) :
	null != link.modelFacet ? getTypeModelFacet(link.modelFacet) : null
d92 1
a92 1
private gmfgen::TypeLinkModelFacet getTypeModelFacet(gmfgen::LinkModelFacet modelFacet) :
d96 2
a97 2
private gmfgen::TypeLinkModelFacet getTypeModelFacet(gmfgen::TypeLinkModelFacet modelFacet) :
	modelFacet
@


1.7
log
@Checking visual ID whild collecting semic children..
@
text
@d13 1
a13 1
import "http://www.eclipse.org/gmf/2005/GenModel/2.0";
@


1.6
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d100 13
a112 1
	getSemanticChildren(containerBase).select(node | !node.modelFacet.isPhantomElement()).collect(node | node.modelFacet.childMetaFeature).toSet()
@


1.5
log
@Updater was adopted to return incoming/outgoing links.
@
text
@d58 1
a58 1
gmfgen::TypeLinkModelFacet getTypeModelFacet(gmfgen::GenCommonBase commonBase) :
d62 1
a62 1
gmfgen::TypeLinkModelFacet getTypeModelFacet(gmfgen::GenNode node) :
@


1.4
log
@Updating copyrights.
@
text
@d18 12
d34 8
d46 8
@


1.3
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.2
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d16 33
@


1.1
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d15 5
d39 5
a43 1
	getSemanticChildren(containerBase).collect(node | node.modelFacet.childMetaFeature).toSet()
d47 1
a47 1
	containerBase.containedNodes.select(node | null != node.modelFacet && !node.modelFacet.isPhantomElement())
@

