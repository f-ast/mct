head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081015-1925:1.2
	v20081008-1925:1.2
	v20081001-1925:1.2
	v20080924-1925:1.2
	v20080917-1925:1.2
	v20080911-1728:1.2
	v20080910-1520:1.2
	v20080903-1520:1.2
	v20080827-1520:1.2
	v20080813-1520:1.2
	v20080806-1520:1.2
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.06.12.12.20.13;	author dstadnik;	state dead;
branches;
next	1.1;
commitid	5d34466e8f7c4567;

1.1
date	2007.05.28.16.52.23;	author ashatalin;	state Exp;
branches;
next	;
commitid	51cb465b08c54567;


desc
@@


1.2
log
@move providers out of diagram folder
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::diagram::Utils»

«DEFINE ViewProvider FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «providersPackageName»;

	«EXPAND xpt::Common::generatedClassComment»
public class «notationViewProviderClassName» extends org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider {

	«EXPAND getDiagramViewClass-»
	
	«EXPAND getNodeViewClass-»
	
	«EXPAND getEdgeViewClass-»
	
	«EXPAND getSemanticElementType-»
	
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE getDiagramViewClass FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected Class getDiagramViewClass(org.eclipse.core.runtime.IAdaptable semanticAdapter, String diagramKind) {
	«EXPAND defineSemanticElement FOR domainDiagramElement-»
	if («EXPAND xpt::editor::VisualIDRegistry::modelID».equals(diagramKind)«EXPAND checkSemanticElement(this) FOR domainDiagramElement») {
			return «getNotationViewFactoryQualifiedClassName()».class;
	}
	return null;
}
«ENDDEFINE»

«DEFINE defineSemanticElement FOR genmodel::GenClass-»
org.eclipse.emf.ecore.EObject semanticElement = getSemanticElement(semanticAdapter);
«ENDDEFINE»

«DEFINE checkSemanticElement(gmfgen::GenDiagram diagram) FOR genmodel::GenClass» && «EXPAND xpt::editor::VisualIDRegistry::getDiagramVisualIDMethodCall FOR diagram»(semanticElement) != -1«ENDDEFINE»
	
«DEFINE getNodeViewClass FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected Class getNodeViewClass(org.eclipse.core.runtime.IAdaptable semanticAdapter, org.eclipse.gmf.runtime.notation.View containerView, String semanticHint) {
	if (containerView == null) {
		return null;
	}
	org.eclipse.gmf.runtime.emf.type.core.IElementType elementType = getSemanticElementType(semanticAdapter);
	org.eclipse.emf.ecore.EObject domainElement = getSemanticElement(semanticAdapter);
	
	int visualID;
	if (semanticHint == null) {
«REM»
	No semanticHint specified. Can be a result of call from CanonicalEditPolicy.
	In this situation there should be NO elementType, visualID will be determined
	by VisualIDRegistry.getNodeVisualID() for domainElement.
«ENDREM»«-»
		if (elementType != null || domainElement == null) {
			return null;
		}
		visualID = «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall»(containerView, domainElement);
	} else {
		visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(semanticHint);
		if (elementType != null) {
«REM»
	semanticHint specified together with elementType. Both parameters should describe exactly the same 
	diagram element. In addition cecking visualID returned by VisualIDRegistry.getNodeVisualID() for
	domainElement (if specified) - there should be same value.
«ENDREM»«-»
			«EXPAND defineElementTypeHint-»
			if (!semanticHint.equals(elementTypeHint)) {
				return null;
			}
			if (domainElement != null && visualID != «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall»(containerView, domainElement)) {
				return null;
			}
		} «IF !getElements(this).select(commonBase | null != commonBase.elementType).isEmpty()»	else {
«REM»
	elementType was not specified. This should happen only for compartments and labels. Checking that 
	semanticHint reference to one of these elements + do not checking domainElement visualID since passed
	domainElement belongs to the parent view.
«ENDREM»«-»
			switch (visualID) {
				«EXPAND xpt::Common::caseVisualID FOREACH getElements(this).select(commonBase | null != commonBase.elementType)»
				return null;
			}
		}«ENDIF»
	}
	if (!«EXPAND xpt::editor::VisualIDRegistry::canCreateNodeMethodCall»(containerView, visualID)) {
		return null;
	}
	switch (visualID) {
		«EXPAND caseContainerVisualID FOREACH getAllChildContainers()-»
		«EXPAND caseEntry FOREACH links.labels-»
	}
	return null;
}
«ENDDEFINE»

«DEFINE defineElementTypeHint FOR gmfgen::GenDiagram-»
if (!«getElementTypesQualifiedClassName()».isKnownElementType(elementType) || false == elementType instanceof org.eclipse.gmf.runtime.emf.type.core.IHintedType) {
	return null;
}
String elementTypeHint = ((org.eclipse.gmf.runtime.emf.type.core.IHintedType) elementType).getSemanticHint();
«ENDDEFINE»

«DEFINE caseContainerVisualID FOR gmfgen::GenChildContainer-»
	«EXPAND caseEntry-»
«ENDDEFINE»

«DEFINE caseContainerVisualID FOR gmfgen::GenNode-»
	«EXPAND caseEntry-»
	«EXPAND caseEntry FOREACH labels-»
«ENDDEFINE»

«DEFINE caseEntry FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::caseVisualID»
	return «getNotationViewFactoryQualifiedClassName()».class;
«ENDDEFINE»

	
«DEFINE getEdgeViewClass FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected Class getEdgeViewClass(org.eclipse.core.runtime.IAdaptable semanticAdapter, org.eclipse.gmf.runtime.notation.View containerView, String semanticHint) {
	org.eclipse.gmf.runtime.emf.type.core.IElementType elementType = getSemanticElementType(semanticAdapter);
	if (elementType == null) {
		return null;
	}
	«EXPAND defineElementTypeHint-»
	if (elementTypeHint == null) {
		return null;
	}
	if (semanticHint != null && !semanticHint.equals(elementTypeHint)) {
		return null;
	}
	int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(elementTypeHint);
	org.eclipse.emf.ecore.EObject domainElement = getSemanticElement(semanticAdapter);
	if (domainElement != null && visualID != «EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall»(domainElement)) {
		return null;
	}
	switch (visualID) {
		«EXPAND caseEntry FOREACH links-»
	}
	return null;
}
«ENDDEFINE»

«DEFINE getSemanticElementType FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.emf.type.core.IElementType getSemanticElementType(org.eclipse.core.runtime.IAdaptable semanticAdapter) {
	if (semanticAdapter == null) {
		return null;
	}
	return (org.eclipse.gmf.runtime.emf.type.core.IElementType) semanticAdapter.getAdapter(org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
}
«ENDDEFINE»
	
«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»@


1.1
log
@- ViewProvider is in xpand now.
- Separating semantic part of VisualIDRegistry from pure-notation.
@
text
@@

