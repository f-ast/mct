head	1.12;
access;
symbols
	v20081022-1925:1.12
	v20081015-1925:1.12
	v20081008-1925:1.12
	v20081001-1925:1.12
	v20080924-1925:1.12
	v20080917-1925:1.12
	v20080911-1728:1.12
	v20080910-1520:1.12
	v20080903-1520:1.12
	v20080827-1520:1.12
	v20080813-1520:1.12
	v20080806-1520:1.12
	v20080207-0207:1.11.2.1
	v20071124-0000:1.11.2.1
	v20071108-0000:1.11
	v20071003-0000:1.11
	v20070928-0000:1.11
	v20070921-0000:1.11
	v20070915-0000:1.11
	v20070903-0000:1.11
	v20070809-0000:1.11
	R2_0_maintenance:1.11.0.2
	R2_0:1.11
	R4_20:1.11
	v20070621-0000:1.11
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070605-1400:1.10
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070520-1200:1.9
	v20070518-1300:1.8
	v20070504-1000:1.8
	v20070427-0600:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070405-1100:1.7
	v20070403-1500:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070307-0700:1.6
	v20070301-1200:1.6
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061218-1200:1.5
	v20061214-0000:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.12
date	2007.11.09.19.24.20;	author ashatalin;	state dead;
branches;
next	1.11;
commitid	a704734b3e34567;

1.11
date	2007.06.19.15.16.57;	author atikhomirov;	state Exp;
branches
	1.11.2.1;
next	1.10;
commitid	585f4677f3684567;

1.10
date	2007.06.05.19.46.57;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	419c4665bdb14567;

1.9
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	2591464e17d14567;

1.8
date	2007.04.27.12.19.28;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	38924631ea4f4567;

1.7
date	2007.04.04.11.18.20;	author bblajer;	state Exp;
branches;
next	1.6;
commitid	2664461389794567;

1.6
date	2007.01.30.16.42.28;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	4e0e45bf75734567;

1.5
date	2006.12.18.12.21.38;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	3d30458687d04567;

1.4
date	2006.12.12.11.28.43;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	29c3457e926a4567;

1.3
date	2006.12.08.14.39.38;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	75d4457979294567;

1.2
date	2006.12.07.17.36.28;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	418d4578511c4567;

1.1
date	2006.12.07.17.33.48;	author dstadnik;	state Exp;
branches;
next	;
commitid	23d0457850794567;

1.11.2.1
date	2007.11.09.19.19.32;	author ashatalin;	state Exp;
branches;
next	;
commitid	68db4734b2c34567;


desc
@@


1.12
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»

«DEFINE fields FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gef.tools.DirectEditManager manager;

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser;

	«EXPAND xpt::Common::generatedMemberComment»
	private java.util.List parserElements;

	«EXPAND xpt::Common::generatedMemberComment»
	private String defaultText;
«ENDDEFINE»

«DEFINE methods(Boolean needsRefreshBounds, Boolean readOnly, Boolean useElementIcon, gmfgen::Viewmap viewmap,
		gmfgen::LabelModelFacet modelFacet, gmfgen::GenCommonBase host, gmfgen::GenDiagram diagram) FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected String getLabelTextHelper(org.eclipse.draw2d.IFigure figure) {
		if (figure instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			return ((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) figure).getText();
		} else {
			return ((org.eclipse.draw2d.Label) figure).getText();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void setLabelTextHelper(org.eclipse.draw2d.IFigure figure, String text) {
		if (figure instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) figure).setText(text);
		} else {
			((org.eclipse.draw2d.Label) figure).setText(text);
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.swt.graphics.Image getLabelIconHelper(org.eclipse.draw2d.IFigure figure) {
		if (figure instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			return ((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) figure).getIcon();
		} else {
			return ((org.eclipse.draw2d.Label) figure).getIcon();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void setLabelIconHelper(org.eclipse.draw2d.IFigure figure, org.eclipse.swt.graphics.Image icon) {
		if (figure instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) figure).setIcon(icon);
		} else {
			((org.eclipse.draw2d.Label) figure).setIcon(icon);
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void
			«EXPAND labelSetterName FOR viewmap-»
			(
			«EXPAND labelSetterFigureClassName FOR viewmap-»
			figure) {
		unregisterVisuals();
		setFigure(figure);
		defaultText = getLabelTextHelper(figure);
		registerVisuals();
		refreshVisuals();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.util.List getModelChildren() {
		return java.util.Collections.EMPTY_LIST;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart getChildBySemanticHint(String semanticHint) {
		return null;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EObject getParserElement() {
«IF modelFacet == null»
		org.eclipse.emf.ecore.EObject element = resolveSemanticElement();
		return element != null ? element : (org.eclipse.gmf.runtime.notation.View) getModel();
«ELSE»«EXPAND getParserElement FOR modelFacet»«ENDIF-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.swt.graphics.Image getLabelIcon() {
		«IF useElementIcon-»
		org.eclipse.emf.ecore.EObject parserElement = getParserElement();
		if (parserElement == null) {
			return null;
		}
		return «diagram.getElementTypesQualifiedClassName()».getImage(parserElement.eClass());
		«ELSE-»
		return null;
		«ENDIF-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected String getLabelText() {
		String text = null;
		org.eclipse.emf.ecore.EObject parserElement = getParserElement();
		if (parserElement != null && getParser() != null) {
			text = getParser().getPrintString(
				new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(parserElement),
				getParserOptions().intValue());
		}
		if (text == null || text.length() == 0) {
			text = defaultText;
		}
		return text;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setLabelText(String text) {
		setLabelTextHelper(getFigure(), text);
		Object pdEditPolicy = getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
		if (pdEditPolicy instanceof «diagram.getTextSelectionEditPolicyQualifiedClassName()») {
			((«diagram.getTextSelectionEditPolicyQualifiedClassName()») pdEditPolicy).refreshFeedback();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public String getEditText() {
		if (getParserElement() == null || getParser() == null) {
			return ""; «EXPAND xpt::Common::nonNLS»
		}
		return getParser().getEditString(
			new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(getParserElement()),
			getParserOptions().intValue());
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean isEditable() {
		«IF readOnly-»
		return false;
		«ELSE-»
		return getParser() != null;
		«ENDIF-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.jface.viewers.ICellEditorValidator getEditTextValidator() {
		return new org.eclipse.jface.viewers.ICellEditorValidator() {

			public String isValid(final Object value) {
				if (value instanceof String) {
					final org.eclipse.emf.ecore.EObject element = getParserElement();
					final org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = getParser();
					try {
						org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus valid =
							(org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus) getEditingDomain().runExclusive(
								new org.eclipse.emf.transaction.RunnableWithResult.Impl() {

							public void run() {
								setResult(parser.isValidEditString(
									new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(element), (String) value));
							}
						});
						return valid.getCode() == org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus.EDITABLE ?
							null : valid.getMessage();
					} catch (InterruptedException ie) {
						ie.printStackTrace();
					}
				}

				// shouldn't get here
				return null;
			}
		};
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.jface.text.contentassist.IContentAssistProcessor getCompletionProcessor() {
		if (getParserElement() == null || getParser() == null) {
			return null;
		}
		return getParser().getCompletionProcessor(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(getParserElement()));
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions getParserOptions() {
		return org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.common.ui.services.parser.IParser getParser() {
		if (parser == null) {
            String parserHint = 
                «IF null == modelFacet-»
                    ((org.eclipse.gmf.runtime.notation.View) getModel()).getType();
                «ELSE-»
                    «EXPAND parserHint FOR modelFacet-»
                «ENDIF-»
			org.eclipse.core.runtime.IAdaptable hintAdapter = new «diagram.getParserProviderQualifiedClassName()».HintAdapter(
				«diagram.getElementTypesQualifiedClassName()».«host.getUniqueIdentifier()», getParserElement(), parserHint);
			parser = org.eclipse.gmf.runtime.common.ui.services.parser.ParserService.getInstance().getParser(hintAdapter);
		}
		return parser;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gef.tools.DirectEditManager getManager() {
		if (manager == null) {
			setManager(new org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager(this,
				org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager.getTextCellEditorClass(this),
				«diagram.getEditPartFactoryQualifiedClassName()».getTextCellEditorLocator(this)));
		}
		return manager;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void setManager(org.eclipse.gef.tools.DirectEditManager manager) {
		this.manager = manager;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void performDirectEdit() {
		getManager().show();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void performDirectEdit(org.eclipse.draw2d.geometry.Point eventLocation) {
		if (getManager().getClass() == org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager.class) {
			((org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private void performDirectEdit(char initialCharacter) {
		if (getManager() instanceof org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager) {
			((org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager) getManager()).show(initialCharacter);
		} else {
			performDirectEdit();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void performDirectEditRequest(org.eclipse.gef.Request request) {
		final org.eclipse.gef.Request theRequest = request;
		try {
			getEditingDomain().runExclusive(new Runnable() {

				public void run() {
					if (isActive() && isEditable()) {
						if (theRequest.getExtendedData().get(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
							Character initialChar = (Character) theRequest.getExtendedData().get(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
							performDirectEdit(initialChar.charValue());
						} else if ((theRequest instanceof org.eclipse.gef.requests.DirectEditRequest) && (getEditText().equals(getLabelText()))) {
							org.eclipse.gef.requests.DirectEditRequest editRequest = (org.eclipse.gef.requests.DirectEditRequest) theRequest;
							performDirectEdit(editRequest.getLocation());
						} else {
							performDirectEdit();
						}
					}
				}
			});
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshLabel();
		refreshFont();
		refreshFontColor();
		refreshUnderline();
		refreshStrikeThrough();
		«IF needsRefreshBounds-»
		refreshBounds();
		«ENDIF-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshLabel() {
		setLabelTextHelper(getFigure(), getLabelText());
		setLabelIconHelper(getFigure(), getLabelIcon());
		Object pdEditPolicy = getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
		if (pdEditPolicy instanceof «diagram.getTextSelectionEditPolicyQualifiedClassName()») {
			((«diagram.getTextSelectionEditPolicyQualifiedClassName()») pdEditPolicy).refreshFeedback();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshUnderline() {
		org.eclipse.gmf.runtime.notation.FontStyle style =
			(org.eclipse.gmf.runtime.notation.FontStyle) getFontStyleOwnerView().getStyle(
				org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle());
		if (style != null && getFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getFigure()).setTextUnderline(style.isUnderline());
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshStrikeThrough() {
		org.eclipse.gmf.runtime.notation.FontStyle style =
			(org.eclipse.gmf.runtime.notation.FontStyle) getFontStyleOwnerView().getStyle(
				org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle());
		if (style != null && getFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshFont() {
		org.eclipse.gmf.runtime.notation.FontStyle style =
			(org.eclipse.gmf.runtime.notation.FontStyle) getFontStyleOwnerView().getStyle(
				org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle());
		if (style != null) {
			org.eclipse.swt.graphics.FontData fontData = new org.eclipse.swt.graphics.FontData(
				style.getFontName(), style.getFontHeight(),
				(style.isBold() ? org.eclipse.swt.SWT.BOLD : org.eclipse.swt.SWT.NORMAL) |
				(style.isItalic() ? org.eclipse.swt.SWT.ITALIC : org.eclipse.swt.SWT.NORMAL));
			setFont(fontData);
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void setFontColor(org.eclipse.swt.graphics.Color color) {
		getFigure().setForegroundColor(color);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void addSemanticListeners() {
		if (getParser() instanceof org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser) {
			org.eclipse.emf.ecore.EObject element = resolveSemanticElement();
			parserElements = ((org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
			for (int i = 0; i < parserElements.size(); i++) {
				addListenerFilter("SemanticModel" + i, this, (org.eclipse.emf.ecore.EObject) parserElements.get(i)); «EXPAND xpt::Common::nonNLS»
			}
		} else {
			super.addSemanticListeners();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void removeSemanticListeners() {
		if (parserElements != null) {
			for (int i = 0; i < parserElements.size(); i++) {
				removeListenerFilter("SemanticModel" + i); «EXPAND xpt::Common::nonNLS»
			}
		} else {
			super.removeSemanticListeners();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gef.AccessibleEditPart getAccessibleEditPart() {
		if (accessibleEP == null) {
			accessibleEP = new AccessibleGraphicalEditPart() {

				public void getName(org.eclipse.swt.accessibility.AccessibleEvent e) {
					e.result = getLabelTextHelper(getFigure());
				}
			};
		}
		return accessibleEP;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	 private org.eclipse.gmf.runtime.notation.View getFontStyleOwnerView() {
		«IF isFixedFont(viewmap)-»
		return (org.eclipse.gmf.runtime.notation.View) getModel();
		«ELSE-»
		return getPrimaryView();
		«ENDIF-»
	 }
«ENDDEFINE»

«DEFINE labelSetterName FOR gmfgen::ParentAssignedViewmap-»
«IF setterName != null»«setterName»«ELSE»setLabel«ENDIF-»
«ENDDEFINE»

«DEFINE labelSetterName FOR gmfgen::Viewmap»setLabel«ENDDEFINE»

«DEFINE labelSetterFigureClassName FOR gmfgen::ParentAssignedViewmap-»
	«IF figureQualifiedClassName != null-»
	«figureQualifiedClassName»
	«ELSE-»
	org.eclipse.draw2d.IFigure
	«ENDIF-»
«ENDDEFINE»

«DEFINE labelSetterFigureClassName FOR gmfgen::Viewmap-»
	org.eclipse.draw2d.IFigure
«ENDDEFINE»

«DEFINE parserHint FOR gmfgen::LabelModelFacet-»
	((org.eclipse.gmf.runtime.notation.View) getModel()).getType();
«ENDDEFINE»

«DEFINE parserHint FOR gmfgen::DesignLabelModelFacet-»
	org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint.DESCRIPTION;
«ENDDEFINE»

«DEFINE getParserElement FOR gmfgen::LabelModelFacet-»
		return resolveSemanticElement();
«ENDDEFINE»

«DEFINE getParserElement FOR gmfgen::DesignLabelModelFacet-»
		return (org.eclipse.gmf.runtime.notation.View) getModel();
«ENDDEFINE»
@


1.11
log
@[193133] Shortcut deletion should not freeze diagram
@
text
@@


1.11.2.1
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation
a12 4
«REM»
	@@deprecated: This template file will be removed in GMF version 2.1
«ENDREM»

d15 1
d18 11
a28 1
	«EXPAND impl::diagram::editparts::TextAware::fields-»
d33 351
a383 1
	«EXPAND impl::diagram::editparts::TextAware::methods(needsRefreshBounds, readOnly, useElementIcon, viewmap, modelFacet, host, diagram)-»
d390 29
a418 1
«DEFINE labelSetterName FOR gmfgen::Viewmap»«EXPAND impl::diagram::editparts::TextAware::labelSetterName»«ENDDEFINE»@


1.10
log
@use same code to find out accessor name everywhere
@
text
@d94 1
d97 1
d116 2
a117 1
		if (getParser() != null) {
d119 1
a119 1
				new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(getParserElement()),
d139 1
a139 1
		if (getParser() == null) {
d189 1
a189 1
		if (getParser() == null) {
d411 8
@


1.9
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d384 1
a384 5
	«IF setterName != null-»
	«setterName»
	«ELSE-»
	setLabel
	«ENDIF-»
d387 1
a387 3
«DEFINE labelSetterName FOR gmfgen::Viewmap-»
	setLabel
«ENDDEFINE»
@


1.8
log
@do not generate superfluous anonymous inner classes for parser hints
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.7
log
@User should be able to configure whether NON-NLS markers are shown or not
@
text
@d206 2
a207 10
			org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter hintAdapter =
				new org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter(getParserElement(), parserHint) {

				public Object getAdapter(Class adapter) {
					if (org.eclipse.gmf.runtime.emf.type.core.IElementType.class.equals(adapter)) {
						return «diagram.getElementTypesQualifiedClassName()».«host.getUniqueIdentifier()»;
					}
					return super.getAdapter(adapter);
				}
			};
@


1.6
log
@All the @@generated comments moved into a separate "define" statement.
@
text
@d137 1
a137 1
			return ""; //$NON-NLS-1$
d350 1
a350 1
				addListenerFilter("SemanticModel" + i, this, (org.eclipse.emf.ecore.EObject) parserElements.get(i)); //$NON-NLS-1$
d361 1
a361 1
				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
@


1.5
log
@add copyright headers
@
text
@d18 1
a18 3
	/**
	 * @@generated
	 */
d21 1
a21 3
	/**
	 * @@generated
	 */
d24 1
a24 3
	/**
	 * @@generated
	 */
d27 1
a27 3
	/**
	 * @@generated
	 */
d33 1
a33 3
	/**
	 * @@generated
	 */
d42 1
a42 3
	/**
	 * @@generated
	 */
d51 1
a51 3
	/**
	 * @@generated
	 */
d60 1
a60 3
	/**
	 * @@generated
	 */
d69 1
a69 3
	/**
	 * @@generated
	 */
d82 1
a82 3
	/**
	 * @@generated
	 */
d87 1
a87 3
	/**
	 * @@generated
	 */
d92 1
a92 3
	/**
	 * @@generated
	 */
d98 1
a98 3
	/**
	 * @@generated
	 */
d111 1
a111 3
	/**
	 * @@generated
	 */
d125 1
a125 3
	/**
	 * @@generated
	 */
d134 1
a134 3
	/**
	 * @@generated
	 */
d144 1
a144 3
	/**
	 * @@generated
	 */
d153 1
a153 3
	/**
	 * @@generated
	 */
d184 1
a184 3
	/**
	 * @@generated
	 */
d192 1
a192 3
	/**
	 * @@generated
	 */
d197 1
a197 3
	/**
	 * @@generated
	 */
d221 1
a221 3
	/**
	 * @@generated
	 */
d231 1
a231 3
	/**
	 * @@generated
	 */
d236 1
a236 3
	/**
	 * @@generated
	 */
d241 1
a241 3
	/**
	 * @@generated
	 */
d248 1
a248 3
	/**
	 * @@generated
	 */
d257 1
a257 3
	/**
	 * @@generated
	 */
d282 1
a282 3
	/**
	 * @@generated
	 */
d295 1
a295 3
	/**
	 * @@generated
	 */
d305 1
a305 3
	/**
	 * @@generated
	 */
d315 1
a315 3
	/**
	 * @@generated
	 */
d325 1
a325 3
	/**
	 * @@generated
	 */
d339 1
a339 3
	/**
	 * @@generated
	 */
d344 1
a344 3
	/**
	 * @@generated
	 */
d357 1
a357 3
	/**
	 * @@generated
	 */
d368 1
a368 3
	/**
	 * @@generated
	 */
d381 1
a381 3
	/**
	 * @@generated
	 */
@


1.4
log
@[mgolubev] code should compile when no model facet provided
@
text
@d1 12
@


1.3
log
@rewrite link label edit part template in xpand
@
text
@d230 6
a235 1
			String parserHint = «EXPAND parserHint FOR modelFacet-»
@


1.2
log
@switch from binary to ascii
@
text
@d3 1
a3 1
«EXTENSION xpt::diagram::editparts::TextAwareUtils»
@


1.1
log
@rewrite ext node label edit part template in xpand
@
text
@@

