head	1.22;
access;
symbols
	v20081022-1925:1.22
	v20081015-1925:1.22
	v20081008-1925:1.22
	v20081001-1925:1.22
	v20080924-1925:1.22
	v20080917-1925:1.22
	v20080911-1728:1.22
	v20080910-1520:1.22
	v20080903-1520:1.22
	v20080827-1520:1.22
	v20080813-1520:1.22
	v20080806-1520:1.22
	v20080207-0207:1.21.2.1
	v20071124-0000:1.21.2.1
	v20071108-0000:1.21
	v20071003-0000:1.21
	v20070928-0000:1.21
	v20070921-0000:1.21
	v20070915-0000:1.21
	v20070903-0000:1.21
	v20070809-0000:1.21
	R2_0_maintenance:1.21.0.2
	R2_0:1.21
	R4_20:1.21
	v20070621-0000:1.21
	RC3_20:1.21
	v20070614-1400:1.21
	v20070608-1300:1.21
	v20070605-1400:1.20
	v20070601-1400:1.19
	v20070525-1500:1.17
	v20070520-1200:1.17
	v20070518-1300:1.16
	v20070504-1000:1.14
	v20070427-0600:1.14
	v20070420-1000:1.14
	v20070413-1300:1.14
	v20070405-1100:1.14
	v20070403-1500:1.14
	v20070330-1300:1.14
	v20060330-1300:1.14
	v20070322-1100:1.14
	v20060316-0600:1.14
	v20070307-0700:1.14
	v20070301-1200:1.14
	v20070228-2000:1.14
	v20070221-1500:1.14
	v20070208-1800:1.14
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.7
	v20061218-1200:1.4
	v20061214-0000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.22
date	2007.11.09.16.28.34;	author ashatalin;	state dead;
branches;
next	1.21;
commitid	42df47348ab14567;

1.21
date	2007.06.06.17.43.18;	author atikhomirov;	state Exp;
branches
	1.21.2.1;
next	1.20;
commitid	71d44666f2354567;

1.20
date	2007.06.05.19.46.57;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	419c4665bdb14567;

1.19
date	2007.05.28.09.06.14;	author atikhomirov;	state Exp;
branches;
next	1.18;
commitid	199465a9b864567;

1.18
date	2007.05.28.09.05.31;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	7e41465a9b5b4567;

1.17
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	2591464e17d14567;

1.16
date	2007.05.15.19.19.22;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	43d3464a07b84567;

1.15
date	2007.05.15.18.34.13;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	25434649fd1f4567;

1.14
date	2007.02.06.14.57.11;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	42db45c897474567;

1.13
date	2007.02.06.14.36.55;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	2e745c892874567;

1.12
date	2007.02.01.14.52.09;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	a7d45c1fe974567;

1.11
date	2007.01.30.16.42.28;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	4e0e45bf75734567;

1.10
date	2007.01.29.19.30.15;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	7ac145be4b464567;

1.9
date	2007.01.29.18.45.58;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	3b8945be40e54567;

1.8
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	21cf45be38464567;

1.7
date	2006.12.20.02.08.34;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	589f45889b214567;

1.6
date	2006.12.19.13.26.54;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	27a84587e89d4567;

1.5
date	2006.12.18.19.27.42;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	44c4586ebad4567;

1.4
date	2006.12.18.12.21.38;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	3d30458687d04567;

1.3
date	2006.12.15.16.09.06;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	2bf24582c89b4567;

1.2
date	2006.12.14.19.02.19;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	408e45819fb94567;

1.1
date	2006.12.13.18.57.26;	author dstadnik;	state Exp;
branches;
next	;
commitid	68a45804d154567;

1.21.2.1
date	2007.11.09.16.24.59;	author ashatalin;	state Exp;
branches;
next	;
commitid	3ae3473489da4567;


desc
@@


1.22
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::editparts::Utils»

«DEFINE NodeEditPart FOR gmfgen::GenNode-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «getDiagram().editPartsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «editPartClassName» extends «EXPAND extendsList» {

	«EXPAND xpt::diagram::editparts::Common::visualIDConstant FOR this-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure contentPane;

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure primaryShape;

	«EXPAND xpt::Common::generatedMemberComment»
	public «editPartClassName»(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void createDefaultEditPolicies() {
		«EXPAND editPoliciesMethodBody-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
		«EXPAND createLayoutEditPolicyMethodBody-»
	}

	«EXPAND createNodeShape(this) FOR viewmap-»

	«IF hasFixedChildren()-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
		«FOREACH getInnerFixedLabels() AS label-»
			«LET (gmfgen::ParentAssignedViewmap) label.viewmap AS childViewmap-»
		if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
			((«label.getEditPartQualifiedClassName()») childEditPart).«EXPAND TextAware::labelSetterName FOR childViewmap»(
				getPrimaryShape().«childViewmap.getterName»());
			return true;
		}
			«ENDLET-»
		«ENDFOREACH-»
		«FOREACH getPinnedCompartments() AS compartment-»
			«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
		if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}	
			«ENDLET-»
		«ENDFOREACH-»
		«FOREACH getSideAffixedChildren() AS child-»
		if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
			org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator =
				new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(
					getMainFigure(), org.eclipse.draw2d.PositionConstants.«child.preferredSideName»);
			getBorderedFigure().getBorderItemContainer().add(
				((«child.getEditPartQualifiedClassName()») childEditPart).getFigure(), locator);
			return true;
		}
		«ENDFOREACH-»
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
		«REM»ignore labels assuming that they never may be removed«ENDREM»
		«FOREACH getPinnedCompartments() AS compartment-»
			«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
		if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.remove(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}	
			«ENDLET-»
		«ENDFOREACH-»
		«FOREACH getSideAffixedChildren() AS child-»
		if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
			getBorderedFigure().getBorderItemContainer().remove(
				((«child.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}
		«ENDFOREACH-»
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
		«REM»it is unclear what we should return for labels here«ENDREM»
		«FOREACH getPinnedCompartments() AS compartment-»
			«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
		if (editPart instanceof «compartment.getEditPartQualifiedClassName()») {
			return getPrimaryShape().«childViewmap.getterName»();
		}	
			«ENDLET-»
		«ENDFOREACH-»
		«FOREACH getSideAffixedChildren() AS child-»
		if (editPart instanceof «child.getEditPartQualifiedClassName()») {
			return getBorderedFigure().getBorderItemContainer();
		}
		«ENDFOREACH-»
		return super.getContentPaneFor(editPart);
	}

	«ENDIF-»

	«IF getExternalLabels().size() > 0-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void addBorderItem(org.eclipse.draw2d.IFigure borderItemContainer,
			org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart borderItemEditPart) {
		if (
			«FOREACH getExternalLabels() AS label SEPARATOR ' || '-»
				borderItemEditPart instanceof «label.getEditPartQualifiedClassName()»
			«ENDFOREACH-»
				) {
			org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator =
				new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure(),
					org.eclipse.draw2d.PositionConstants.SOUTH);
			locator.setBorderItemOffset(new org.eclipse.draw2d.geometry.Dimension(-20, -20));
			borderItemContainer.add(borderItemEditPart.getFigure(), locator);
		} else {
			super.addBorderItem(borderItemContainer, borderItemEditPart);
		}
	}
	«ENDIF-»

«EXPAND createNodePlateMethod-»

	«LET getResizeConstraints(viewmap) AS rc-»
	«IF null != primaryDragEditPolicyQualifiedClassName || null != rc-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gef.EditPolicy getPrimaryDragEditPolicy() {
		«IF null != primaryDragEditPolicyQualifiedClassName-»
		return new «primaryDragEditPolicyQualifiedClassName»();
		«ELSE-»
		org.eclipse.gef.EditPolicy result = super.getPrimaryDragEditPolicy();
		if (result instanceof org.eclipse.gef.editpolicies.ResizableEditPolicy) {
			org.eclipse.gef.editpolicies.ResizableEditPolicy ep =
				(org.eclipse.gef.editpolicies.ResizableEditPolicy) result;
			ep.setResizeDirections(
				«IF rc.resizeHandleNames.size() > 0-»
					«FOREACH rc.resizeHandleNames AS name SEPARATOR ' | '-»
				org.eclipse.draw2d.PositionConstants.«name»
					«ENDFOREACH-»
				«ELSE-»
				org.eclipse.draw2d.PositionConstants.NONE
				«ENDIF-»
			);
		}
		return result;
		«ENDIF-»
	}
	«ENDIF-»
	«ENDLET-»

	«EXPAND xpt::Common::generatedMemberComment(
		"Creates figure for this edit part.\n" +
		"\n" +
		"Body of this method does not depend on settings in generation model\n" +
		"so you may safely remove <i>generated</i> tag and modify it.\n"
	)»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure create«IF hasBorderItems()»Main«ELSE»Node«ENDIF»Figure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	«EXPAND xpt::Common::generatedMemberComment(
		"Default implementation treats passed figure as content pane.\n" +
		"Respects layout one may have set for generated figure.\n" +
		"@@param nodeShape instance of generated figure class"
	)»
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
«IF !childNodes.isEmpty() || !compartments.isEmpty() || !labels.without(labels.typeSelect(GenExternalNodeLabel)).isEmpty()-»
		if (nodeShape.getLayoutManager() == null) {
		«IF getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value-»
		nodeShape.setLayoutManager(new org.eclipse.draw2d.FreeformLayout() {

			public Object getConstraint(org.eclipse.draw2d.IFigure figure) {
				Object result = constraints.get(figure);
				if (result == null) {
					result = new org.eclipse.draw2d.geometry.Rectangle(0, 0, -1, -1);
				}
				return result;
			}
		});
		«ELSE-»
			org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =
				new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
			layout.setSpacing(getMapMode().DPtoLP(5));
			nodeShape.setLayoutManager(layout);
		«ENDIF-»
		}
«ENDIF-»
		return nodeShape; // use nodeShape itself as contentPane
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	«IF !labels.isEmpty()-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
		return getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::getTypeMethodCall FOR getDiagram()»(
			«EXPAND xpt::editor::VisualIDRegistry::visualID FOR (GenLabel) labels.toList().first()»));
	}
	«ENDIF-»

	«EXPAND handleNotificationEvent FOR this-»

	«EXPAND additions-»
	
	«EXPAND innerClassDeclaration FOR viewmap-»
}
«ENDDEFINE»

«DEFINE extendsList FOR gmfgen::GenNode-»
«IF hasBorderItems()»org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderedShapeEditPart«ELSE»org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart«ENDIF-»
«ENDDEFINE»

«DEFINE extendsList FOR gmfgen::GenChildSideAffixedNode-»
«IF hasBorderItems()»org.eclipse.gmf.runtime.diagram.ui.editparts.BorderedBorderItemEditPart«ELSE»org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderItemEditPart«ENDIF-»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenNode»«ENDDEFINE»

«DEFINE editPoliciesMethodBody FOR gmfgen::GenNode-»
		«EXPAND installCreationRolePolicy»
		super.createDefaultEditPolicies();
		«EXPAND installPrimaryDragEditPolicy-»
		«EXPAND xpt::diagram::editparts::Common::installSemanticEditPolicy-»
		«IF needsGraphicalNodeEditPolicy()-»
		installEditPolicy(org.eclipse.gef.EditPolicy.GRAPHICAL_NODE_ROLE,
			new «getGraphicalNodeEditPolicyQualifiedClassName()»());
		«ENDIF-»
		«IF !childNodes.isEmpty()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.DRAG_DROP_ROLE,
			new org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy());
		«ENDIF-»
		«EXPAND xpt::diagram::editparts::Common::installCanonicalEditPolicy-»
		installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		«EXPAND xpt::diagram::editparts::Common::behaviour FOR this-»
		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
«ENDDEFINE»

«DEFINE installCreationRolePolicy FOR gmfgen::GenNode-»
«IF hasChildren() || hasChildrenInListCompartments()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CREATION_ROLE,
				new org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy()«IF hasChildrenInListCompartments()» {
			public org.eclipse.gef.commands.Command getCommand(org.eclipse.gef.Request request) {
				if (understandsRequest(request)) {
					if (request instanceof org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) {
						org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter adapter =
							((org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) request).
								getViewAndElementDescriptor().getCreateElementRequestAdapter();
						org.eclipse.gmf.runtime.emf.type.core.IElementType type =
							(org.eclipse.gmf.runtime.emf.type.core.IElementType) adapter.getAdapter(
								org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
						«FOREACH compartments AS compartment-»
							«IF listCompartmentHasChildren(compartment)-»
								«FOREACH compartment.childNodes AS childNode-»
						if (type == «getDiagram().getElementTypesQualifiedClassName()».«childNode.getUniqueIdentifier()») {
							org.eclipse.gef.EditPart compartmentEditPart =
								getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::getTypeMethodCall FOR getDiagram()»(
									«EXPAND xpt::editor::VisualIDRegistry::visualID FOR compartment»));
							return compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);
						}
								«ENDFOREACH-»
							«ENDIF-»
						«ENDFOREACH-»
					}
					return super.getCommand(request);
				}
				return null;
			}
		}
		«ENDIF»);
«ENDIF-»
«ENDDEFINE»

«DEFINE installPrimaryDragEditPolicy FOR gmfgen::GenNode»«ENDDEFINE»

«DEFINE installPrimaryDragEditPolicy FOR gmfgen::GenChildSideAffixedNode-»
		installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());
«ENDDEFINE»

«DEFINE createLayoutEditPolicyMethodBody FOR gmfgen::GenNode-»
		«IF gmfgen::ViewmapLayoutType::XY_LAYOUT.value == getLayoutType().value-»
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy lep =
				new org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«IF hasBorderItems()-»
				if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
				}
				«ENDIF-»
				org.eclipse.gef.EditPolicy result = super.createChildEditPolicy(child);
				if (result == null) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy();
				}
				return result;
			}
		};
		return lep;
		«ELSEIF gmfgen::ViewmapLayoutType::TOOLBAR_LAYOUT.value == getLayoutType().value»
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy lep =
				new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«IF hasBorderItems()-»
				if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
				}
				«ENDIF-»
				if (child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE) == null) {
					if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart) {
						return new «getDiagram().getTextSelectionEditPolicyQualifiedClassName()»();
					}
				}
				return super.createChildEditPolicy(child);
			}
		};
		return lep;
		«ELSEIF gmfgen::ViewmapLayoutType::FLOW_LAYOUT.value == getLayoutType().value»
		org.eclipse.gef.editpolicies.FlowLayoutEditPolicy lep =
				new org.eclipse.gef.editpolicies.FlowLayoutEditPolicy() {

			«IF hasBorderItems()-»
			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
				}
				return super.createChildEditPolicy(child);
			}
			«ENDIF-»

			protected org.eclipse.gef.commands.Command createAddCommand(
					org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command createMoveChildCommand(
					org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(
					org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		«ELSE-»
		org.eclipse.gef.editpolicies.LayoutEditPolicy lep =
				new org.eclipse.gef.editpolicies.LayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«IF hasBorderItems()-»
				if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
				}
				«ENDIF-»
				org.eclipse.gef.EditPolicy result = child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
				}
				return result;
			}

			protected org.eclipse.gef.commands.Command getMoveChildrenCommand(
					org.eclipse.gef.Request request) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(
					org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		«ENDIF-»
«ENDDEFINE»

«DEFINE createNodePlateMethod FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result =
			new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(
				getMapMode().DPtoLP(«defaultSizeWidth(viewmap, 40)»),
				getMapMode().DPtoLP(«defaultSizeHeight(viewmap, 40)»));
		«EXPAND setupNodePlate-»
		return result;
	}
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::Viewmap»
	«ERROR "Unknown viewmap: " + this-»
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::FigureViewmap»
	«LET figureQualifiedClassName == null ? "org.eclipse.draw2d.RectangleFigure" : figureQualifiedClassName AS fqn-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return primaryShape = new «fqn»()
			«IF node.getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value-»
			{
				protected boolean useLocalCoordinates() {
					return true;
				}
			}
			«ENDIF-»
		;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public «fqn» getPrimaryShape() {
		return («fqn») primaryShape;
	}
	«ENDLET-»
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::SnippetViewmap»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return «body»;
	}
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::InnerClassViewmap»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		«className» figure = new «className»();
		«IF node.childNodes.size() > 0 && node.getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value-»
 		figure.setUseLocalCoordinates(true);
		«ENDIF-»
 		return primaryShape = figure;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public «className» getPrimaryShape() {
		return («className») primaryShape;
	}
«ENDDEFINE»

«DEFINE innerClassDeclaration FOR gmfgen::Viewmap»
«ENDDEFINE»

«DEFINE innerClassDeclaration FOR gmfgen::InnerClassViewmap»
	«classBody»
«ENDDEFINE»

«DEFINE setupNodePlate FOR gmfgen::GenNode»«ENDDEFINE»

«DEFINE setupNodePlate FOR gmfgen::GenChildSideAffixedNode»
	//FIXME: workaround for #154536
	result.getBounds().setSize(result.getPreferredSize());
«ENDDEFINE»

«DEFINE handleNotificationEvent FOR gmfgen::GenNode»
«ENDDEFINE»

«DEFINE handleNotificationEvent FOR gmfgen::GenTopLevelNode»
	«REM»This code is important for refreshing shortcut decoration
	on adding corresponding annotation to the View instance.«ENDREM»
	«IF getDiagram().generateShortcutIcon()-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification event) {
		if (event.getNotifier() == getModel() &&
				org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEModelElement_EAnnotations().equals(event.getFeature())) {
			handleMajorSemanticChange();
		} else {
			super.handleNotificationEvent(event);
		}
	}
	«ENDIF-»
«ENDDEFINE»
@


1.21
log
@[191303] Restore old behavior (adding layout manager) for diagram nodes with inner labels; CCE in xpand's Collection.isEmpty fixed; better formatting for layout generated code
@
text
@@


1.21.2.1
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@a12 4
«REM»
	@@deprecated: This template file will be removed in GMF version 2.1
«ENDREM»

d14 3
d19 506
a524 2
	«EXPAND diagram::editparts::NodeEditPart::Main-»
«ENDDEFINE»@


1.20
log
@use same code to find out accessor name everywhere
@
text
@d214 1
a214 1
«IF !childNodes.isEmpty() || !compartments.isEmpty()-»
@


1.19
log
@reminder and a hint how to remove useless popups
@
text
@d56 1
a56 1
			((«label.getEditPartQualifiedClassName()») childEditPart).«getSetterName(childViewmap)»(
@


1.18
log
@if there's no children, no need to set layout for content pane (otherwise, figures with localCoords get messed up)
@
text
@d288 2
@


1.17
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d214 1
d234 1
@


1.16
log
@Replacing static method calls with templates.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.15
log
@Generating VisualIDRegistry using XPAND.
@
text
@d247 1
a247 1
		return getChildBySemanticHint(«getDiagram().getVisualIDRegistryQualifiedClassName()».getType(
d306 1
a306 1
								getChildBySemanticHint(«getDiagram().getVisualIDRegistryQualifiedClassName()».getType(
@


1.14
log
@[172375] more customization points in xpt templates
@
text
@d248 1
a248 1
			«((GenLabel) labels.toList().first()).getEditPartQualifiedClassName()».VISUAL_ID));
d307 1
a307 1
									«compartment.getEditPartQualifiedClassName()».VISUAL_ID));
@


1.13
log
@[172375] more customization points in xpt templates
@
text
@d164 1
a164 9
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result =
			new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(
				getMapMode().DPtoLP(«defaultSizeWidth(viewmap, 40)»),
				getMapMode().DPtoLP(«defaultSizeHeight(viewmap, 40)»));
		«EXPAND setupNodePlate FOR this-»
		return result;
	}
d270 1
a270 1
«DEFINE editPoliciesMethodBody FOR gmfgen::GenNode»
d329 1
a329 1
«DEFINE createLayoutEditPolicyMethodBody FOR gmfgen::GenNode»
d427 12
d495 1
a495 2
«DEFINE setupNodePlate FOR gmfgen::GenNode»
«ENDDEFINE»
@


1.12
log
@[172375] customization points for the edit part
extendsList needed for gmfgraph diagram editor
@
text
@d40 1
a40 50
		«IF hasChildren() || hasChildrenInListCompartments()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CREATION_ROLE,
				new org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy()
			«IF hasChildrenInListCompartments()-»
			{

			public org.eclipse.gef.commands.Command getCommand(org.eclipse.gef.Request request) {
				if (understandsRequest(request)) {
					if (request instanceof org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) {
						org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter adapter =
							((org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) request).
								getViewAndElementDescriptor().getCreateElementRequestAdapter();
						org.eclipse.gmf.runtime.emf.type.core.IElementType type =
							(org.eclipse.gmf.runtime.emf.type.core.IElementType) adapter.getAdapter(
								org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
						«FOREACH compartments AS compartment-»
							«IF listCompartmentHasChildren(compartment)-»
								«FOREACH compartment.childNodes AS childNode-»
						if (type == «getDiagram().getElementTypesQualifiedClassName()».«childNode.getUniqueIdentifier()») {
							org.eclipse.gef.EditPart compartmentEditPart =
								getChildBySemanticHint(«getDiagram().getVisualIDRegistryQualifiedClassName()».getType(
									«compartment.getEditPartQualifiedClassName()».VISUAL_ID));
							return compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);
						}
								«ENDFOREACH-»
							«ENDIF-»
						«ENDFOREACH-»
					}
					return super.getCommand(request);
				}
				return null;
			}
		}
		«ENDIF-»
		);
		«ENDIF-»
		super.createDefaultEditPolicies();
		«EXPAND installPrimaryDragEditPolicy FOR this-»
		«EXPAND xpt::diagram::editparts::Common::installSemanticEditPolicy-»
		«IF needsGraphicalNodeEditPolicy()-»
		installEditPolicy(org.eclipse.gef.EditPolicy.GRAPHICAL_NODE_ROLE,
			new «getGraphicalNodeEditPolicyQualifiedClassName()»());
		«ENDIF-»
		«IF !childNodes.isEmpty()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.DRAG_DROP_ROLE,
			new org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy());
		«ENDIF-»
		«EXPAND xpt::diagram::editparts::Common::installCanonicalEditPolicy-»
		installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		«EXPAND xpt::diagram::editparts::Common::behaviour FOR this-»
d45 1
a45 95
		«IF gmfgen::ViewmapLayoutType::XY_LAYOUT.value == getLayoutType().value-»
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy lep =
				new org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«IF hasBorderItems()-»
				if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
				}
				«ENDIF-»
				org.eclipse.gef.EditPolicy result = super.createChildEditPolicy(child);
				if (result == null) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy();
				}
				return result;
			}
		};
		return lep;
		«ELSEIF gmfgen::ViewmapLayoutType::TOOLBAR_LAYOUT.value == getLayoutType().value»
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy lep =
				new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«IF hasBorderItems()-»
				if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
				}
				«ENDIF-»
				if (child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE) == null) {
					if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart) {
						return new «getDiagram().getTextSelectionEditPolicyQualifiedClassName()»();
					}
				}
				return super.createChildEditPolicy(child);
			}
		};
		return lep;
		«ELSEIF gmfgen::ViewmapLayoutType::FLOW_LAYOUT.value == getLayoutType().value»
		org.eclipse.gef.editpolicies.FlowLayoutEditPolicy lep =
				new org.eclipse.gef.editpolicies.FlowLayoutEditPolicy() {

			«IF hasBorderItems()-»
			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
				}
				return super.createChildEditPolicy(child);
			}
			«ENDIF-»

			protected org.eclipse.gef.commands.Command createAddCommand(
					org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command createMoveChildCommand(
					org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(
					org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		«ELSE-»
		org.eclipse.gef.editpolicies.LayoutEditPolicy lep =
				new org.eclipse.gef.editpolicies.LayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«IF hasBorderItems()-»
				if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
				}
				«ENDIF-»
				org.eclipse.gef.EditPolicy result = child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
				}
				return result;
			}

			protected org.eclipse.gef.commands.Command getMoveChildrenCommand(
					org.eclipse.gef.Request request) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(
					org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		«ENDIF-»
d278 57
a334 1
«DEFINE installPrimaryDragEditPolicy FOR gmfgen::GenNode»
d337 96
a432 2
«DEFINE installPrimaryDragEditPolicy FOR gmfgen::GenChildSideAffixedNode»
	installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());
@


1.11
log
@All the @@generated comments moved into a separate "define" statement.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
d23 1
a23 1
public class «editPartClassName» extends «nodeEditPartSuperClass()» {
d404 2
d411 10
@


1.10
log
@[172032] - Do not generate ??CanonicalEditPolicy for pure-design elements
@
text
@d22 1
a22 3
/**
 * @@generated
 */
d27 1
a27 3
	/**
	 * @@generated
	 */
d30 1
a30 3
	/**
	 * @@generated
	 */
d33 1
a33 3
	/**
	 * @@generated
	 */
d38 1
a38 3
	/**
	 * @@generated
	 */
d92 1
a92 3
	/**
	 * @@generated
	 */
d194 1
a194 3
	/**
	 * @@generated
	 */
d228 1
a228 3
	/**
	 * @@generated
	 */
d251 1
a251 3
	/**
	 * @@generated
	 */
d259 1
a259 3
	/**
	 * @@generated
	 */
d267 1
a267 3
	/**
	 * @@generated
	 */
d288 1
a288 3
	/**
	 * @@generated
	 */
d307 1
a307 3
	/**
	 * @@generated
	 */
d319 1
a319 3
	/**
	 * @@generated
	 */
d344 6
a349 8
	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
d359 5
a363 6
	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @@param nodeShape instance of generated figure class
	 * @@generated
	 */
d387 1
a387 3
	/**
	 * @@generated
	 */
d396 1
a396 3
	/**
	 * @@generated
	 */
d422 1
a422 3
	/**
	 * @@generated
	 */
d435 1
a435 3
	/**
	 * @@generated
	 */
d443 1
a443 3
	/**
	 * @@generated
	 */
d450 1
a450 3
	/**
	 * @@generated
	 */
d459 1
a459 3
	/**
	 * @@generated
	 */
d488 1
a488 3
	/**
	 * @@generated
	 */
@


1.9
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@d97 1
a97 4
		«IF needsCanonicalEditPolicy()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CANONICAL_ROLE,
			new «getCanonicalEditPolicyQualifiedClassName()»());
		«ENDIF-»
@


1.8
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@d88 1
a88 1
		«EXPAND installSemanticEditPolicy-»
a453 6
«DEFINE installSemanticEditPolicy FOR gmfgen::GenNode-»
	«IF null != modelFacet-»
		«EXPAND xpt::diagram::editparts::Common::installSemanticEditPolicy-»
	«ENDIF-»
«ENDDEFINE»

@


1.7
log
@remove dup
@
text
@d88 1
a88 2
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE,
			new «getItemSemanticEditPolicyQualifiedClassName()»());
d454 6
@


1.6
log
@mgolubev - add getContentPaneFor() support
@
text
@a520 3
«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::Viewmap-»
«ENDDEFINE»

@


1.5
log
@useless (this) argument for extension operations removed
@
text
@d290 21
d356 15
a370 12
		org.eclipse.gef.editpolicies.ResizableEditPolicy ep =
			(org.eclipse.gef.editpolicies.ResizableEditPolicy) super.getPrimaryDragEditPolicy();
		ep.setResizeDirections(
			«IF rc.resizeHandleNames.size() > 0-»
				«FOREACH rc.resizeHandleNames AS name SEPARATOR ' | '-»
			org.eclipse.draw2d.PositionConstants.«name»
				«ENDFOREACH-»
			«ELSE-»
			org.eclipse.draw2d.PositionConstants.NONE
			«ENDIF-»
		);
		return ep;
d443 2
d512 1
d514 4
d521 3
@


1.4
log
@add copyright headers
@
text
@d25 1
a25 1
public class «editPartClassName» extends «nodeEditPartSuperClass(this)» {
d115 1
a115 1
				«IF hasBorderItems(this)-»
d133 1
a133 1
				«IF hasBorderItems(this)-»
d151 1
a151 1
			«IF hasBorderItems(this)-»
d181 1
a181 1
				«IF hasBorderItems(this)-»
d209 1
a209 1
	«IF hasFixedChildren(this)-»
d214 1
a214 1
		«FOREACH getInnerFixedLabels(this) AS label-»
d223 1
a223 1
		«FOREACH getPinnedCompartments(this) AS compartment-»
d233 1
a233 1
		«FOREACH getSideAffixedChildren(this) AS child-»
d251 1
a251 1
		«FOREACH getPinnedCompartments(this) AS compartment-»
d261 1
a261 1
		«FOREACH getSideAffixedChildren(this) AS child-»
d292 1
a292 1
	«IF getExternalLabels(this).size() > 0-»
d299 1
a299 1
			«FOREACH getExternalLabels(this) AS label SEPARATOR ' || '-»
d360 1
a360 1
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure create«IF hasBorderItems(this)»Main«ELSE»Node«ENDIF»Figure() {
@


1.3
log
@allow to specify custom primary drag edit policy
@
text
@d1 12
@


1.2
log
@[164935] Use border items infrastructure to support external labels
@
text
@d315 1
a315 1
		«IF null != rc-»
d320 3
d326 2
a327 2
		«IF rc.resizeHandleNames.size() > 0-»
			«FOREACH rc.resizeHandleNames AS name SEPARATOR ' | '-»
d329 2
a330 2
			«ENDFOREACH-»
		«ELSE-»
d332 1
a332 1
		«ENDIF-»
d335 1
d337 1
a337 1
		«ENDIF-»
@


1.1
log
@use xpand template to generate node edit part
@
text
@a100 1
			«IF hasExternalLabels(this)-»
d102 4
a105 3
			protected void decorateChild(org.eclipse.gef.EditPart child) {
				if (isExternalLabel(child)) {
					return;
d107 1
a107 5
				super.decorateChild(child);
			}
			«ENDIF-»

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
a114 11
			«IF hasExternalLabels(this)-»
		«getDiagram().getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()» xlep =
			new «getDiagram().getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()»() {

			protected boolean isExternalLabel(org.eclipse.gef.EditPart editPart) {
				return «editPartClassName».this.isExternalLabel(editPart);
			}
		};
		xlep.setRealLayoutEditPolicy(lep);
		return xlep;
			«ELSE-»
a115 1
			«ENDIF-»
a118 1
			«IF hasExternalLabels(this)-»
d120 4
a123 3
			protected void decorateChild(org.eclipse.gef.EditPart child) {
				if (isExternalLabel(child)) {
					return;
d125 1
a125 5
				super.decorateChild(child);
			}
			«ENDIF-»

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
a133 11
			«IF hasExternalLabels(this)-»
		«getDiagram().getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()» xlep =
			new «getDiagram().getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()»() {

			protected boolean isExternalLabel(org.eclipse.gef.EditPart editPart) {
				return «editPartClassName».this.isExternalLabel(editPart);
			}
		};
		xlep.setRealLayoutEditPolicy(lep);
		return xlep;
			«ELSE-»
a134 1
			«ENDIF-»
a137 1
			«IF hasExternalLabels(this)-»
d139 1
a139 9
			protected void decorateChild(org.eclipse.gef.EditPart child) {
				if (isExternalLabel(child)) {
					return;
				}
				super.decorateChild(child);
			}
			«ENDIF-»

			«IF getSideAffixedChildren(this).size() > 0-»
a162 11
			«IF hasExternalLabels(this)-»
		«getDiagram().getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()» xlep =
			new «getDiagram().getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()»() {

			protected boolean isExternalLabel(org.eclipse.gef.EditPart editPart) {
				return «editPartClassName».this.isExternalLabel(editPart);
			}
		};
		xlep.setRealLayoutEditPolicy(lep);
		return xlep;
			«ELSE-»
a163 1
			«ENDIF-»
a166 1
			«IF hasExternalLabels(this)-»
d168 4
a171 3
			protected void decorateChild(org.eclipse.gef.EditPart child) {
				if (isExternalLabel(child)) {
					return;
d173 2
a174 7
				super.decorateChild(child);
			}
			«ENDIF-»

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				org.eclipse.gef.EditPolicy result =
					child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
a190 11
			«IF hasExternalLabels(this)-»
		«getDiagram().getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()» xlep =
			new «getDiagram().getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()»() {

			protected boolean isExternalLabel(org.eclipse.gef.EditPart editPart) {
				return «editPartClassName».this.isExternalLabel(editPart);
			}
		};
		xlep.setRealLayoutEditPolicy(lep);
		return xlep;
			«ELSE-»
a191 1
			«ENDIF-»
d258 42
d344 1
a344 1
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure create«IF getSideAffixedChildren(this).size() > 0»Main«ELSE»Node«ENDIF»Figure() {
a401 81
	«IF hasExternalLabels(this)-»
	/**
	 * @@generated
	 */
	protected boolean isExternalLabel(org.eclipse.gef.EditPart childEditPart) {
		«FOREACH labels.typeSelect(gmfgen::GenExternalNodeLabel) AS label-»
		if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
			return true;
		}
		«ENDFOREACH-»
		return false;
	}

	/**
	 * @@generated
	 */
	protected org.eclipse.draw2d.IFigure getExternalLabelsContainer() {
		org.eclipse.gef.editparts.LayerManager root = (org.eclipse.gef.editparts.LayerManager) getRoot();
		return root.getLayer(«getDiagram().getEditPartFactoryQualifiedClassName()».EXTERNAL_NODE_LABELS_LAYER);
	}
	«ENDIF-»

	«IF hasFixedChildren(this) || hasExternalLabels(this)-»
	/**
	 * @@generated
	 */
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		«IF hasExternalLabels(this)-»
		if (isExternalLabel(childEditPart)) {
			org.eclipse.draw2d.IFigure labelFigure =
				((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			getExternalLabelsContainer().add(labelFigure);
			return;
		} 
		«ENDIF-»
		«IF hasFixedChildren(this)-»
		if (addFixedChild(childEditPart)) {
			return;
		}
		«ENDIF-»
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @@generated
	 */
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		«IF hasExternalLabels(this)-»
		if (isExternalLabel(childEditPart)) {
			org.eclipse.draw2d.IFigure labelFigure =
				((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			getExternalLabelsContainer().remove(labelFigure);
			return;
		} 
		«ENDIF-»
		«IF hasFixedChildren(this)-»
		if (removeFixedChild(childEditPart)){
			return;
		}
		«ENDIF-»
		super.removeChildVisual(childEditPart);
	}
		«IF hasExternalLabels(this)-»

	/**
	 * @@generated
	 */
	public void removeNotify() {
		for (java.util.Iterator it = getChildren().iterator(); it.hasNext();) {
			org.eclipse.gef.EditPart childEditPart = (org.eclipse.gef.EditPart) it.next();
			if (isExternalLabel(childEditPart)) {
				org.eclipse.draw2d.IFigure labelFigure =
					((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
				getExternalLabelsContainer().remove(labelFigure);
			}
		}
		super.removeNotify();
	}
		«ENDIF-»
	«ENDIF-»

@

