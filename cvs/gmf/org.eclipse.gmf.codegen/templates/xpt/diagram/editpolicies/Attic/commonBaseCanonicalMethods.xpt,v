head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20070427-0600:1.3
	v20070420-1000:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.05.01.13.28.03;	author ashatalin;	state dead;
branches;
next	1.5;
commitid	143a463740554567;

1.5
date	2007.04.27.17.49.26;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	45d8463237a64567;

1.4
date	2007.04.27.12.21.54;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	1df4631eae24567;

1.3
date	2007.04.24.18.22.42;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	1456462e4af04567;

1.2
date	2007.04.18.19.20.52;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	bf246266f934567;

1.1
date	2007.04.18.17.34.28;	author ashatalin;	state Exp;
branches;
next	;
commitid	2e44462656a24567;


desc
@@


1.6
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE commonBaseCanonicalMethods(List[gmfgen::GenNode] nodes) FOR gmfgen::GenCommonBase-»
	«IF null == getModelElementType()-»
		«REM»
			Supported "this" parameter types:
			- GenDiagram
			- GenNode
			- GenCompartment
		«ENDREM»
		«ERROR "Unrecognized GenCommonBase: " + this»
	«ENDIF-»
	«EXPAND attributes FOR nodes-»
	«EXPAND getSemanticChildrenList(nodes)-»
	«EXPAND shouldDeleteView-»
	
	«EXPAND isOrphaned(nodes)-»
	«EXPAND isDomainMetaChild(nodes)-»
	
	«EXPAND getDefaultFactoryHint-»
	«EXPAND getFeaturesToSynchronize(nodes)-»
«ENDDEFINE»

«DEFINE attributes FOR List[gmfgen::GenNode]-»
«IF getContainmentFeatures(this).size() > 0-»
	«EXPAND xpt::Common::generatedMemberComment»
java.util.Set myFeaturesToSynchronize;

«ENDIF-»
«ENDDEFINE»

«DEFINE getSemanticChildrenList(List[gmfgen::GenNode] nodes) FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getSemanticChildrenList() {
	«IF getChildFeatures(nodes).size() > 0-»
	java.util.List result = new java.util.LinkedList();
	org.eclipse.gmf.runtime.notation.View viewObject = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	«EXPAND getModelelementType» modelObject = («EXPAND getModelelementType») viewObject.getElement();
	«EXPAND collectAllFeatureFalues(getModelElementType()) FOR getChildFeatures(nodes)-»
	for (java.util.Iterator valuesIterator = allValues.iterator(); valuesIterator.hasNext();) {
		org.eclipse.emf.ecore.EObject nextValue = (org.eclipse.emf.ecore.EObject) valuesIterator.next();
		if (isDomainMetaChild(«getDiagram().getVisualIDRegistryQualifiedClassName()».getNodeVisualID(viewObject, nextValue))) {
			result.add(nextValue);
		}
	}
	return result;
	«ELSE-»
	return java.util.Collections.EMPTY_LIST;
	«ENDIF-»
}
«ENDDEFINE»

«DEFINE getModelelementType FOR gmfgen::GenCommonBase»«getQualifiedInterfaceName(getModelElementType())»«ENDDEFINE»

«DEFINE collectAllFeatureFalues(genmodel::GenClass containerGenClass) FOR Set[genmodel::GenFeature]-»
java.util.List allValues = new java.util.LinkedList();
	«FOREACH this AS childFeature-»
		«IF null == childFeature-»
allValues.add(/*FIXME no containment/child feature found in the genmodel, toolsmith need to specify correct one here manually*/);
		«ELSEIF isListType(childFeature)-»
allValues.addAll(«EXPAND xpt::Common::getFeatureValue("modelObject", containerGenClass) FOR childFeature»);
		«ELSE-»
allValues.add(«EXPAND xpt::Common::getFeatureValue("modelObject", containerGenClass) FOR childFeature»);
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE shouldDeleteView FOR gmfgen::GenCommonBase»«ENDDEFINE»

«DEFINE shouldDeleteView FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
protected boolean shouldDeleteView(org.eclipse.gmf.runtime.notation.View view) {
	return true;
}
«ENDDEFINE»

«DEFINE checkShortcutProperty FOR gmfgen::GenDiagram-»
	«IF !containsShortcutsTo.isEmpty()-»
if (view.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
	return view.isSetElement() && (view.getElement() == null || view.getElement().eIsProxy());
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE checkShortcutProperty FOR gmfgen::GenCommonBase»«ENDDEFINE»

«DEFINE getDefaultFactoryHint FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
protected String getDefaultFactoryHint() {
	return null;
}
«ENDDEFINE»

«DEFINE isOrphaned(List[gmfgen::GenNode] nodes) FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
protected boolean isOrphaned(java.util.Collection semanticChildren, final org.eclipse.gmf.runtime.notation.View view) {
	«EXPAND checkShortcutProperty-»
	«IF !selectSemanticChildren(nodes).isEmpty()-»
	int visualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(view);
	return isDomainMetaChild(visualID) && (!semanticChildren.contains(view.getElement()) || visualID != «getDiagram().getVisualIDRegistryQualifiedClassName()».getNodeVisualID((org.eclipse.gmf.runtime.notation.View) getHost().getModel(), view.getElement()));
	«ELSE-»
	return false;
	«ENDIF-»	
}
«ENDDEFINE»

«DEFINE isDomainMetaChild(List[gmfgen::GenNode] nodes) FOR gmfgen::GenCommonBase-»
	«IF !selectSemanticChildren(nodes).isEmpty()-»

		«EXPAND xpt::Common::generatedMemberComment»
private boolean isDomainMetaChild(int visualID) {
	switch (visualID) {
	«EXPAND xpt::Common::caseVisualID FOREACH selectSemanticChildren(nodes)»
		return true;
	}
	return false;
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getFeaturesToSynchronize(List[gmfgen::GenNode] nodes) FOR gmfgen::GenCommonBase-»
«IF getContainmentFeatures(nodes).size() > 0-»

		«EXPAND xpt::Common::generatedMemberComment»
protected java.util.Set getFeaturesToSynchronize(){
	if (myFeaturesToSynchronize == null) {
		myFeaturesToSynchronize = new java.util.HashSet();
		«EXPAND addContainmentFeature FOREACH getContainmentFeatures(nodes)-»
	}
	return myFeaturesToSynchronize;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE addContainmentFeature FOR genmodel::GenFeature-»
myFeaturesToSynchronize.add(«EXPAND xpt::Common::metaFeatureAccessor»);
«ENDDEFINE»@


1.5
log
@[174801] - Generated ???CanonicalEditpolicy should implement getFeaturesToSynchronize() method
@
text
@@


1.4
log
@isOrphaned method added
@
text
@d29 1
d31 1
d33 2
a34 1
	«EXPAND shouldDeleteView(nodes)-»
d37 9
a45 4
	«IF !selectNotationChildren(nodes).isEmpty()-»
	
	«EXPAND isOrphaned(nodes)-»
	«ENDIF-»
d58 1
a58 2
		switch(«getDiagram().getVisualIDRegistryQualifiedClassName()».getNodeVisualID(viewObject, nextValue)) {
		«EXPAND xpt::Common::caseVisualID FOREACH selectSemanticChildren(nodes)»
d84 4
a87 1
«DEFINE shouldDeleteView(List[gmfgen::GenNode] nodes) FOR gmfgen::GenCommonBase-»
d90 1
a90 8
	«EXPAND checkShortcutProperty-»
	«IF !selectNotationChildren(nodes).isEmpty()-»
	switch («getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(view)) {
	«EXPAND xpt::Common::caseVisualID FOREACH selectNotationChildren(nodes)»	
		return true;
	}
	«ENDIF-»
	return false;
d95 1
d99 1
a110 1
«REM»Create different implementation for the diagram«ENDREM»
d114 32
a145 6
	if (semanticChildren.contains(view.getElement())) {
		switch («getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(view)) {
		«EXPAND xpt::Common::caseVisualID FOREACH selectNotationChildren(nodes)»	
			return «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(view) != «getDiagram().getVisualIDRegistryQualifiedClassName()».getNodeVisualID((org.eclipse.gmf.runtime.notation.View) getHost().getModel(), view.getElement());
		}
		return false;
d147 1
a147 1
	return true;
d149 5
@


1.3
log
@DiagramCanonicalEditpolicy template is in XPAND now.
[182556] - getSemanticChildrenList.jetinc generates empty switch statement causing generation to fail
@
text
@d34 4
d104 15
@


1.2
log
@Removing unnecessary parameters + more correct external interface check added.
@
text
@d19 1
a19 1
«DEFINE commonBaseCanonicalMethods(List[gmfgen::GenChildNode] childNodes) FOR gmfgen::GenCommonBase-»
d29 1
a29 1
	«EXPAND getSemanticChildrenList(childNodes)-»
d31 1
a31 1
	«EXPAND shouldDeleteView(childNodes)-»
d36 1
a36 1
«DEFINE getSemanticChildrenList(List[gmfgen::GenChildNode] childNodes) FOR gmfgen::GenCommonBase-»
d39 1
a39 1
	«IF getChildFeatures(childNodes).size() > 0-»
d43 1
a43 1
	«EXPAND collectAllFeatureFalues(getModelElementType()) FOR getChildFeatures(childNodes)-»
d47 1
a47 1
		«EXPAND caseNodeVID FOREACH selectSemanticChildren(childNodes)-»
d73 1
a73 1
«DEFINE shouldDeleteView(List[gmfgen::GenNode] childNodes) FOR gmfgen::GenCommonBase-»
d77 1
a77 1
	«IF !selectNotationChildren(childNodes).isEmpty()-»
d79 1
a79 1
		«EXPAND caseNodeVID FOREACH selectNotationChildren(childNodes)-»	
a94 4
«DEFINE caseNodeVID FOR gmfgen::GenNode-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
«ENDDEFINE»

@


1.1
log
@Rewriting template to xpt

[170079] - Do not generate unnecessary CanonicalEditPolicies in case if phantoms are allowed for diagram
@
text
@d66 1
a66 1
allValues.addAll(«EXPAND xpt::Common::getFeatureValue("modelObject", containerGenClass, true) FOR childFeature»);
d68 1
a68 1
allValues.add(«EXPAND xpt::Common::getFeatureValue("modelObject", containerGenClass, true) FOR childFeature»);
@

