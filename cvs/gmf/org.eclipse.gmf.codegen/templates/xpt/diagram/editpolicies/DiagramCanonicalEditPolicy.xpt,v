head	1.14;
access;
symbols
	v20081022-1925:1.14
	v20081015-1925:1.14
	v20081008-1925:1.14
	v20081001-1925:1.14
	v20080930-1130:1.14
	v20080926-1245:1.14
	v20080924-1925:1.14
	v20080917-1925:1.14
	v20080911-1728:1.14
	v20080910-1520:1.14
	v20080903-1520:1.14
	v20080827-1520:1.14
	v20080813-1520:1.14
	v20080806-1520:1.14
	v20080722-1827:1.14
	v20080718-1731:1.14
	v20080716-1600:1.13
	v20080716-1642:1.14
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080528-1052:1.13
	v20080521:1.13
	v20080516-1543:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080508-2000:1.13
	v20080507-1326:1.13
	v20080503-1740:1.12
	v20080501-1739:1.12
	v20080425-1959:1.12
	v20080417-1610:1.12
	v20080411-0411:1.12
	v20080404-1111:1.12
	v20080322-0000:1.12
	v20080222-1200:1.12
	v20080215-1500:1.12
	v20080207-0207:1.10.2.2
	v20071222-1111:1.12
	v20071214-1111:1.12
	v20071130-1111:1.12
	v20071124-0000:1.10.2.2
	v20071112-0000:1.12
	v20071108-0000:1.12
	v20071003-0000:1.10
	v20070928-0000:1.10
	v20070921-0000:1.10
	v20070915-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.2
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070520-1200:1.9
	v20070518-1300:1.8
	v20070504-1000:1.4
	v20070427-0600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2008.07.12.12.19.06;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	45544878a1394567;

1.13
date	2008.05.07.13.55.59;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	39124821b4de4567;

1.12
date	2007.10.29.12.19.56;	author ashatalin;	state Exp;
branches;
next	1.11;
commitid	154b4725cfec4567;

1.11
date	2007.10.25.17.54.43;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	6d3c4720d8634567;

1.10
date	2007.06.07.16.15.34;	author ashatalin;	state Exp;
branches
	1.10.2.1;
next	1.9;
commitid	68ff46682f264567;

1.9
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	2591464e17d14567;

1.8
date	2007.05.15.19.19.22;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	43d3464a07b84567;

1.7
date	2007.05.11.16.01.31;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	44f84644934f4567;

1.6
date	2007.05.08.12.14.58;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	3985464069c14567;

1.5
date	2007.05.04.15.27.49;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	6ef6463b50ec4567;

1.4
date	2007.05.04.09.57.48;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	53fc463b039b4567;

1.3
date	2007.05.03.20.42.14;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	7f0b463a49254567;

1.2
date	2007.05.01.13.28.03;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	143a463740554567;

1.1
date	2007.04.24.18.22.42;	author ashatalin;	state Exp;
branches;
next	;
commitid	1456462e4af04567;

1.10.2.1
date	2007.10.25.17.52.06;	author ashatalin;	state Exp;
branches;
next	1.10.2.2;
commitid	652b4720d7c64567;

1.10.2.2
date	2007.10.29.12.12.36;	author ashatalin;	state Exp;
branches;
next	;
commitid	7fc04725ce344567;


desc
@@


1.14
log
@[234562] - Adding child elements into a shortcut causes stack overflow
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE DiagramCanonicalEditPolicy FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «editPoliciesPackageName»;

	«EXPAND xpt::Common::generatedClassComment»
public class «canonicalEditPolicyClassName» extends org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy {

	«EXPAND xpt::diagram::updater::containerBaseCanonicalMethods::containerBaseCanonicalMethods-»

	«EXPAND getSemanticConnectionsList-»
	
	«EXPAND getSourceElement-»

	«EXPAND getTargetElement-»

	«EXPAND shouldIncludeConnection-»
	
	«EXPAND refreshSemantic-»
	
	«EXPAND getDiagram-»
	
	«EXPAND refreshLinks-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE getSemanticConnectionsList FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getSemanticConnectionsList() {
	return java.util.Collections.EMPTY_LIST;
}
«ENDDEFINE»
	
«DEFINE getSourceElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject getSourceElement(org.eclipse.emf.ecore.EObject relationship) {
	return null;
}
«ENDDEFINE»

«DEFINE getTargetElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject getTargetElement(org.eclipse.emf.ecore.EObject relationship) {
	return null;
}
«ENDDEFINE»

«DEFINE shouldIncludeConnection FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected boolean shouldIncludeConnection(org.eclipse.gmf.runtime.notation.Edge connector, java.util.Collection children) {
	return false;
}
«ENDDEFINE»

«DEFINE refreshSemantic FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void refreshSemantic() {
	java.util.List createdViews = new java.util.LinkedList();
	createdViews.addAll(refreshSemanticChildren());
	java.util.List createdConnectionViews = new java.util.LinkedList();
	createdConnectionViews.addAll(refreshSemanticConnections());
	«IF !links.isEmpty()-»
	createdConnectionViews.addAll(refreshConnections());
	«ENDIF-»

	if (createdViews.size() > 1) {
		// perform a layout of the container
		org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand layoutCmd = new org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand(host().getEditingDomain(), createdViews, host());
		executeCommand(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(layoutCmd));
	}

	createdViews.addAll(createdConnectionViews);
	makeViewsImmutable(createdViews);
}
«ENDDEFINE»

«DEFINE refreshLinks FOR gmfgen::GenDiagram-»
	«IF !links.isEmpty()-»
		«EXPAND refreshConnections-»
		
		«EXPAND collectAllLinks-»
		
		«EXPAND createConnections-»
		
		«EXPAND getEditPart-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE refreshConnections FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection refreshConnections() {
	java.util.Map domain2NotationMap = new java.util.HashMap();
	java.util.Collection linkDescriptors = collectAllLinks(getDiagram(), domain2NotationMap);
	java.util.Collection existingLinks = new java.util.LinkedList(getDiagram().getEdges());
	for (java.util.Iterator linksIterator = existingLinks.iterator(); linksIterator.hasNext();) {
		org.eclipse.gmf.runtime.notation.Edge nextDiagramLink = (org.eclipse.gmf.runtime.notation.Edge) linksIterator.next();
		int diagramLinkVisualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(nextDiagramLink);
		if (diagramLinkVisualID == -1) {
			if (nextDiagramLink.getSource() != null && nextDiagramLink.getTarget() != null) {
				linksIterator.remove();
			}
			continue;
		}
		org.eclipse.emf.ecore.EObject diagramLinkObject = nextDiagramLink.getElement();
		org.eclipse.emf.ecore.EObject diagramLinkSrc = nextDiagramLink.getSource().getElement();
		org.eclipse.emf.ecore.EObject diagramLinkDst = nextDiagramLink.getTarget().getElement();
		for (java.util.Iterator linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {
			«editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()» nextLinkDescriptor = («editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()») linkDescriptorsIterator.next();
			if (diagramLinkObject == nextLinkDescriptor.getModelElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
				linksIterator.remove();
				linkDescriptorsIterator.remove();
				break;
			}
		}
	}
	deleteViews(existingLinks.iterator());
	return createConnections(linkDescriptors, domain2NotationMap);
}
«ENDDEFINE»

«DEFINE collectAllLinks FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection collectAllLinks(org.eclipse.gmf.runtime.notation.View view, java.util.Map domain2NotationMap) {
	if (!«EXPAND xpt::editor::VisualIDRegistry::modelID».equals(«EXPAND xpt::editor::VisualIDRegistry::getModelIDMethodCall»(view))) {
		return java.util.Collections.EMPTY_LIST;
	}
	java.util.Collection result = new java.util.LinkedList();
	switch («EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(view)) {
		«EXPAND caseSemanticElement FOREACH getAllSemanticElements(this)-»
	}
	for (java.util.Iterator children = view.getChildren().iterator(); children.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) children.next(), domain2NotationMap));
	}
	for (java.util.Iterator edges = view.getSourceEdges().iterator(); edges.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) edges.next(), domain2NotationMap));
	}
	return result;
}
«ENDDEFINE»

«DEFINE caseSemanticElement FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::caseVisualID» {
	if (!domain2NotationMap.containsKey(view.getElement())) {
«REM»
	Processing each domain element only once. Prevents us from 
	having duplicated links if a shortcut to one of the "main"
	diagram elements present on diagram.
«ENDREM»«-»
		result.addAll(«EXPAND xpt::diagram::updater::DiagramUpdater::getContainedLinksMethodCall»(view));
	}
	if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { «EXPAND xpt::Common::nonNLS»
«REM»
	Storing element view or replacing shortcut by the "original" element view.
«ENDREM»«-»
		domain2NotationMap.put(view.getElement(), view);
	}	
	break;	
}
«ENDDEFINE»

«REM»
	GMF has no links to "leaf" child nodes.
«ENDREM»
«DEFINE caseSemanticElement FOR gmfgen::GenChildLabelNode»«ENDDEFINE»

«DEFINE colectContainedLink FOR gmfgen::GenLink-»
«EXPAND xpt::diagram::updater::DiagramUpdater::getContainedLinksMethodCall»(modelElement));
«ENDDEFINE»

«DEFINE createConnections FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection createConnections(java.util.Collection linkDescriptors, java.util.Map domain2NotationMap) {
	java.util.List adapters = new java.util.LinkedList();
	for (java.util.Iterator linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {
		final «editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()» nextLinkDescriptor = («editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()») linkDescriptorsIterator.next();
		org.eclipse.gef.EditPart sourceEditPart = getEditPart(nextLinkDescriptor.getSource(), domain2NotationMap);
		org.eclipse.gef.EditPart targetEditPart = getEditPart(nextLinkDescriptor.getDestination(), domain2NotationMap);
		if (sourceEditPart == null || targetEditPart == null) {
			continue;
		}
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, false, ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getDiagramPreferencesHint());
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest ccr = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest(descriptor);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_START);
		ccr.setSourceEditPart(sourceEditPart);
		sourceEditPart.getCommand(ccr);
		ccr.setTargetEditPart(targetEditPart);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_END);
		org.eclipse.gef.commands.Command cmd = targetEditPart.getCommand(ccr);
		if (cmd != null && cmd.canExecute()) {
			executeCommand(cmd);
			org.eclipse.core.runtime.IAdaptable viewAdapter = (org.eclipse.core.runtime.IAdaptable) ccr.getNewObject();
			if (viewAdapter != null) {
				adapters.add(viewAdapter);
			}
		}
	}
	return adapters;
}
«ENDDEFINE»

«DEFINE getEditPart FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getEditPart(org.eclipse.emf.ecore.EObject domainModelElement, java.util.Map domain2NotationMap) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) domain2NotationMap.get(domainModelElement);
	if (view != null) {
		return (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(view);
	}
	return null;
}
«ENDDEFINE»

«DEFINE getDiagram FOR gmfgen::GenContainerBase-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.notation.Diagram getDiagram() {
	return ((org.eclipse.gmf.runtime.notation.View) getHost().getModel()).getDiagram();
}
«ENDDEFINE»

«DEFINE incorrectLinkModelFacet FOR gmfgen::LinkModelFacet-»
	«ERROR "Incorrect LinkModelFacet: " + this»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»@


1.13
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d124 2
a125 2
		for (java.util.Iterator LinkDescriptorsIterator = linkDescriptors.iterator(); LinkDescriptorsIterator.hasNext();) {
			«editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()» nextLinkDescriptor = («editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()») LinkDescriptorsIterator.next();
d128 2
a129 1
				LinkDescriptorsIterator.remove();
@


1.12
log
@[149547] - Ecore diagram editor : relationships between elements from different packages
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.11
log
@[201088] - Note Attachment is removed by canonical edit policy
@
text
@d159 14
a172 2
	domain2NotationMap.put(view.getElement(), view);
	result.addAll(«EXPAND xpt::diagram::updater::DiagramUpdater::getContainedLinksMethodCall»(view));	
d177 5
@


1.10
log
@[179323] - Generated CanonicalEditPolicy.collectAllLinks() should check ModelID
@
text
@d114 7
a123 1
		int diagramLinkVisualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(nextDiagramLink);
@


1.10.2.1
log
@[201088] - Note Attachment is removed by canonical edit policy
@
text
@a113 7
		int diagramLinkVisualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(nextDiagramLink);
		if (diagramLinkVisualID == -1) {
			if (nextDiagramLink.getSource() != null && nextDiagramLink.getTarget() != null) {
				linksIterator.remove();
			}
			continue;
		}
d117 1
@


1.10.2.2
log
@[149547] - Ecore diagram editor : relationships between elements from different packages
@
text
@d159 2
a160 14
	if (!domain2NotationMap.containsKey(view.getElement())) {
«REM»
	Processing each domain element only once. Prevents us from 
	having duplicated links if a shortcut to one of the "main"
	diagram elements present on diagram.
«ENDREM»«-»
		result.addAll(«EXPAND xpt::diagram::updater::DiagramUpdater::getContainedLinksMethodCall»(view));
	}
	if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { «EXPAND xpt::Common::nonNLS»
«REM»
	Storing element view or replacing shortcut by the "original" element view.
«ENDREM»«-»
		domain2NotationMap.put(view.getElement(), view);
	}	
a164 5
«REM»
	GMF has no links to "leaf" child nodes.
«ENDREM»
«DEFINE caseSemanticElement FOR gmfgen::GenChildLabelNode»«ENDDEFINE»

@


1.9
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d134 3
@


1.8
log
@Replacing static method calls with templates.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.7
log
@GenDiagramUpdater created in .gmfgen model
@
text
@d117 1
a117 1
		int diagramLinkVisualID = «getVisualIDRegistryQualifiedClassName()».getVisualID(nextDiagramLink);
d135 1
a135 1
	switch («getVisualIDRegistryQualifiedClassName()».getVisualID(view)) {
@


1.6
log
@Updating copyrights.
@
text
@d119 1
a119 1
			«getLinkDescriptorQualifiedClassName()» nextLinkDescriptor = («getLinkDescriptorQualifiedClassName()») LinkDescriptorsIterator.next();
d165 1
a165 1
		final «getLinkDescriptorQualifiedClassName()» nextLinkDescriptor = («getLinkDescriptorQualifiedClassName()») linkDescriptorsIterator.next();
@


1.5
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.4
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d15 1
a99 2
		«EXPAND getContainedLinksMethod FOREACH getAllContainedLinks(this)-»
		
a102 2
		
		«EXPAND xpt::diagram::editpolicies::LinkDescriptor::LinkDescriptor-»
d119 2
a120 2
			LinkDescriptor nextLinkDescriptor = (LinkDescriptor) LinkDescriptorsIterator.next();
			if (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
d136 1
a136 2
		«EXPAND caseModelElementHolder FOREACH getAllNodes().select(node | null != node.modelFacet)-»
		«EXPAND caseModelElementHolder FOREACH links-»
d148 1
a148 1
«DEFINE caseModelElementHolder FOR gmfgen::GenNode-»
d150 2
a151 2
	«EXPAND storeDomainElement-»
	«EXPAND colectContainedLinks(getDiagram()) FOR modelFacet-»
a155 25
«DEFINE caseModelElementHolder FOR gmfgen::GenLink-»
	«EXPAND caseModelElementHolder(this) FOR modelFacet-»
«ENDDEFINE»

«DEFINE caseModelElementHolder(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet»«ENDDEFINE»

«DEFINE caseModelElementHolder(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
«EXPAND xpt::Common::caseVisualID FOR link» {
	«EXPAND storeDomainElement FOR link-»
	«EXPAND colectContainedLinks(link.getDiagram())-»
	break;
}
«ENDDEFINE»

«DEFINE storeDomainElement FOR gmfgen::GenCommonBase-»
domain2NotationMap.put(view.getElement(), view);
«ENDDEFINE»

«DEFINE colectContainedLinks(gmfgen::GenDiagram diagram) FOR gmfgen::TypeModelFacet-»
	«IF !getContainedLinks(this, diagram).isEmpty()-»
«metaClass.getQualifiedInterfaceName()» modelElement = («metaClass.getQualifiedInterfaceName()») view.getElement();
«EXPAND colectContainedLink FOREACH getContainedLinks(this, diagram)-»
	«ENDIF-»
«ENDDEFINE»

d157 1
a157 79
result.addAll(«EXPAND getContainedLinksMethodName»(modelElement));
«ENDDEFINE»

«DEFINE getContainedLinksMethodName FOR gmfgen::GenLink»getContained«EXPAND getContainedLinksMethodFragment FOR modelFacet»_«visualID»«ENDDEFINE»

«DEFINE getContainedLinksMethodFragment FOR gmfgen::TypeLinkModelFacet»TypeModelFacetLinks_«metaClass.ecoreClass.name»«ENDDEFINE»

«DEFINE getContainedLinksMethodFragment FOR gmfgen::FeatureLinkModelFacet»FeatureModelFacetLinks_«getFeatureAccessorName(metaFeature)»«ENDDEFINE»

«DEFINE getContainedLinksMethodFragment FOR gmfgen::LinkModelFacet-»
	«EXPAND incorrectLinkModelFacet-»
«ENDDEFINE»

«DEFINE getContainedLinksMethod FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection «EXPAND getContainedLinksMethodName»(«getQualifiedInterfaceName(getContainerClass(modelFacet))» container) {
	java.util.Collection result = new java.util.LinkedList();
	«EXPAND getContainedLinksMethodBody(this) FOR modelFacet-»
	return result;	
}
«ENDDEFINE»

«DEFINE getContainedLinksMethodBody(gmfgen::GenLink genLink) FOR gmfgen::TypeLinkModelFacet-»
	«IF childMetaFeature.isListType()-»
for (java.util.Iterator links = «EXPAND xpt::Common::getFeatureValue("container", getContainerClass(this)) FOR childMetaFeature».iterator(); links.hasNext();) {
	«getQualifiedInterfaceName(getTypeGenClassX(childMetaFeature))» link = («getQualifiedInterfaceName(getTypeGenClassX(childMetaFeature))») links.next();
	«ELSE-»
«getQualifiedInterfaceName(getTypeGenClassX(childMetaFeature))» link = («getQualifiedInterfaceName(getTypeGenClassX(childMetaFeature))») «EXPAND xpt::Common::getFeatureValue("container", getSourceType()) FOR childMetaFeature»;
	«ENDIF-»
int linkVID = «genLink.getDiagram().getVisualIDRegistryQualifiedClassName()».getLinkWithClassVisualID(«EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(childMetaFeature)»link);
if (linkVID == «genLink.getEditPartQualifiedClassName()».VISUAL_ID) {
	«IF targetMetaFeature.isListType()-»
	java.util.List targets = «EXPAND xpt::Common::getFeatureValue("link", getTypeGenClassX(childMetaFeature)) FOR targetMetaFeature»;
	Object target = targets.size() == 1 ? targets.get(0) : null;
	if (target instanceof «getQualifiedInterfaceName(getTargetType())») {
		«getQualifiedInterfaceName(getTargetType())» dst = («getQualifiedInterfaceName(getTargetType())») target;
	«ELSE-»
	«getQualifiedInterfaceName(getTargetType())» dst = «EXPAND xpt::Common::getFeatureValue("link", getTypeGenClassX(childMetaFeature)) FOR targetMetaFeature»;
	«ENDIF-»
	«IF null != sourceMetaFeature-»
		«IF sourceMetaFeature.isListType()-»
	java.util.List sources = «EXPAND xpt::Common::getFeatureValue("link", getTypeGenClassX(childMetaFeature)) FOR sourceMetaFeature»;
	Object source = sources.size() == 1 ? sources.get(0) : null;
	if (source instanceof «getQualifiedInterfaceName(getTypeGenClassX(sourceMetaFeature))») {
		«getQualifiedInterfaceName(getTypeGenClassX(sourceMetaFeature))» src = («getQualifiedInterfaceName(getTypeGenClassX(sourceMetaFeature))») structuralFeatureResult;
		«ELSE-»
	«getQualifiedInterfaceName(getTypeGenClassX(sourceMetaFeature))» src = «EXPAND xpt::Common::getFeatureValue("link", getTypeGenClassX(childMetaFeature)) FOR sourceMetaFeature»;
		«ENDIF-»
	result.add(new LinkDescriptor(«EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(sourceMetaFeature)»src, «EXPAND xpt::Common::castToEObject FOR getTargetType()»dst, «EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(childMetaFeature)»link, «genLink.getDiagram().getElementTypesQualifiedClassName()».«genLink.getUniqueIdentifier()», linkVID));
		«IF sourceMetaFeature.isListType()-»
	}
		«ENDIF-»
	«ELSE-»
	result.add(new LinkDescriptor(«EXPAND xpt::Common::castToEObject FOR getContainerClass(this)»container, «EXPAND xpt::Common::castToEObject FOR getTargetType()»dst, «EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(childMetaFeature)»link, «genLink.getDiagram().getElementTypesQualifiedClassName()».«genLink.getUniqueIdentifier()», linkVID));
	«ENDIF-»
	«IF targetMetaFeature.isListType()-»
	}
	«ENDIF-»
}
	«IF childMetaFeature.isListType()-»
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getContainedLinksMethodBody(gmfgen::GenLink genLink) FOR gmfgen::FeatureLinkModelFacet-»
	«IF metaFeature.isListType()-»
for (java.util.Iterator destinations = «EXPAND xpt::Common::getFeatureValue("container", getContainerClass(this)) FOR metaFeature».iterator(); destinations.hasNext();) {
	«getQualifiedInterfaceName(getTypeGenClassX(metaFeature))» destination = («getQualifiedInterfaceName(getTypeGenClassX(metaFeature))») destinations.next();
	«ELSE-»
«getQualifiedInterfaceName(getTypeGenClassX(metaFeature))» destination = «EXPAND xpt::Common::getFeatureValue("container", getContainerClass(this)) FOR metaFeature»;
	«ENDIF-»
result.add(new LinkDescriptor(«EXPAND xpt::Common::castToEObject FOR getContainerClass(this)»container, «EXPAND xpt::Common::castToEObject FOR getTypeGenClassX(metaFeature)»destination, «genLink.getDiagram().getElementTypesQualifiedClassName()».«genLink.getUniqueIdentifier()», «genLink.getEditPartQualifiedClassName()».VISUAL_ID));
	«IF metaFeature.isListType()-»
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getContainedLinksMethodBody(gmfgen::GenLink genLink) FOR gmfgen::LinkModelFacet-»
	«EXPAND incorrectLinkModelFacet-»
d165 1
a165 1
		final LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();
@


1.3
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d99 1
a99 1
		«EXPAND getContainedLinksMethod FOREACH getAllSemanticLinks(this)-»
@


1.2
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d36 1
a36 2
	«EXPAND xpt::diagram::editpolicies::phantomsSupport::canonicalRefresh-»
	«EXPAND xpt::diagram::editpolicies::phantomsSupport::getDiagram-»
a75 3
	«IF !getPhantomNodes(this).isEmpty()-»
	createdViews.addAll(refreshPhantoms());
	«ENDIF-»
d99 1
a99 1
		«EXPAND getContainedLinksMethod FOREACH links.select(link | !getAllNodes().select(node | canBeContainer(link, node.modelFacet)).isEmpty())-»
d139 2
a140 1
		«EXPAND colectOutgoingLink FOREACH getAllNodes()-»
d145 3
d152 1
a152 2
«DEFINE colectOutgoingLink FOR gmfgen::GenNode-»
	«IF null != modelFacet-»
d154 16
a169 5
	domain2NotationMap.put(view.getElement(), view);
		«IF !getContainedLinks(modelFacet, getDiagram()).isEmpty()-»
	«modelFacet.metaClass.getQualifiedInterfaceName()» modelElement = («modelFacet.metaClass.getQualifiedInterfaceName()») view.getElement();
	«EXPAND colectContainedLink FOREACH getContainedLinks(modelFacet, getDiagram())-»
		«ENDIF-»
d172 10
d309 7
@


1.1
log
@DiagramCanonicalEditpolicy template is in XPAND now.
[182556] - getSemanticChildrenList.jetinc generates empty switch statement causing generation to fail
@
text
@d24 1
a24 1
	«EXPAND xpt::diagram::editpolicies::commonBaseCanonicalMethods::commonBaseCanonicalMethods(topLevelNodes)-»
@

