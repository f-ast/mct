head	1.13;
access;
symbols
	v20081022-1925:1.13
	v20081015-1925:1.13
	v20081008-1925:1.13
	v20081001-1925:1.13
	v20080924-1925:1.13
	v20080917-1925:1.13
	v20080911-1728:1.13
	v20080910-1520:1.13
	v20080903-1520:1.13
	v20080827-1520:1.13
	v20080813-1520:1.13
	v20080806-1520:1.13
	v20070420-1000:1.11
	v20070413-1300:1.9
	v20070405-1100:1.9
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2007.04.24.08.17.31;	author dstadnik;	state dead;
branches;
next	1.12;
commitid	3da9462dbd1a4567;

1.12
date	2007.04.23.10.07.46;	author dstadnik;	state Exp;
branches;
next	1.11;
commitid	4f3c462c85714567;

1.11
date	2007.04.18.19.20.52;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	bf246266f934567;

1.10
date	2007.04.18.17.34.28;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	2e44462656a24567;

1.9
date	2007.04.05.15.18.39;	author dstadnik;	state Exp;
branches;
next	1.8;
commitid	3ff34615134c4567;

1.8
date	2007.04.05.13.02.52;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	45da4614f37a4567;

1.7
date	2007.04.05.11.56.15;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	a474614e3dd4567;

1.6
date	2007.04.05.11.04.13;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	5a714614d7ad4567;

1.5
date	2007.04.05.10.33.12;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	69594614d0664567;

1.4
date	2007.04.04.13.57.24;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	4c6f4613aec34567;

1.3
date	2007.04.04.11.18.20;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	2664461389794567;

1.2
date	2007.03.29.12.16.36;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	6b76460bae204567;

1.1
date	2007.03.29.09.07.15;	author dstadnik;	state Exp;
branches;
next	;
commitid	4ea2460b81c24567;


desc
@@


1.13
log
@rename ReorientUtils template
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::Utils»
«EXTENSION xpt::diagram::Utils»

«REM»
	Expands to all accessor methods for link and it's ends.
«ENDREM»
«DEFINE accessors FOR gmfgen::GenLink-»
	«EXPAND linkAccessor FOR modelFacet-»
	«EXPAND oldSourceAccessor FOR modelFacet-»
	«EXPAND newSourceAccessor FOR modelFacet-»
	«EXPAND oldTargetAccessor FOR modelFacet-»
	«EXPAND newTargetAccessor FOR modelFacet-»
«ENDDEFINE»

«DEFINE linkAccessor FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE linkAccessor FOR gmfgen::TypeLinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «getQualifiedInterfaceName(metaClass)» getLink() {
		return («getQualifiedInterfaceName(metaClass)») getElementToEdit();
	}
«ENDDEFINE»

«DEFINE oldSourceAccessor FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE oldSourceAccessor FOR gmfgen::TypeLinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «getQualifiedInterfaceName(getSourceType())» getOldSource() {
		return («getQualifiedInterfaceName(getSourceType())») oldEnd;
	}
«ENDDEFINE»

«DEFINE oldSourceAccessor FOR gmfgen::FeatureLinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «getQualifiedInterfaceName(getSourceType())» getOldSource() {
		return («getQualifiedInterfaceName(getSourceType())») referenceOwner;
	}
«ENDDEFINE»

«DEFINE newSourceAccessor FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «getQualifiedInterfaceName(getSourceType())» getNewSource() {
		return («getQualifiedInterfaceName(getSourceType())») newEnd;
	}
«ENDDEFINE»

«DEFINE oldTargetAccessor FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «getQualifiedInterfaceName(getTargetType())» getOldTarget() {
		return («getQualifiedInterfaceName(getTargetType())») oldEnd;
	}
«ENDDEFINE»

«DEFINE newTargetAccessor FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «getQualifiedInterfaceName(getTargetType())» getNewTarget() {
		return («getQualifiedInterfaceName(getTargetType())») newEnd;
	}
«ENDDEFINE»

«REM»
	Generates canExecute() method for the command that reorients link.
	Implementation should perform all static checks that command can be executed.
«ENDREM»
«DEFINE canReorient(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean canExecute() {
		«EXPAND checkLinkValidity-»
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
			return canReorientSource();
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
			return canReorientTarget();
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean canReorientSource() {
		«EXPAND checkSourceRequestValidity(link)-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean canReorientTarget() {
		«EXPAND checkTargetRequestValidity(link)-»
	}
«ENDDEFINE»

«DEFINE checkLinkValidity FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE checkLinkValidity FOR gmfgen::TypeLinkModelFacet-»
	if (!(getElementToEdit() instanceof «getQualifiedInterfaceName(metaClass)»)) {
		return false;
	}
«ENDDEFINE»

«DEFINE checkLinkValidity FOR gmfgen::FeatureLinkModelFacet-»
	if (!(referenceOwner instanceof «getQualifiedInterfaceName(getSourceType())»)) {
		return false;
	}
«ENDDEFINE»

«DEFINE checkSourceRequestValidity(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE checkSourceRequestValidity(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getSourceType())» && newEnd instanceof «getQualifiedInterfaceName(getSourceType())»)) {
		return false;
	}
	«EXPAND extractFeatureWithCheck("getLink()", metaClass, "target", getQualifiedInterfaceName(getTargetType())) FOR targetMetaFeature-»
	«EXPAND checkLinkConstraint(link, "getNewSource()", "target")-»
«ENDDEFINE»

«REM»
	When feature source is being reoriented oldEnd is the link target.
«ENDREM»
«DEFINE checkSourceRequestValidity(gmfgen::GenLink link) FOR gmfgen::FeatureLinkModelFacet-»
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» && newEnd instanceof «getQualifiedInterfaceName(getSourceType())»)) {
		return false;
	}
	return «EXPAND checkLinkConstraintInvocation FOR link»(getNewSource(), getOldTarget());
«ENDDEFINE»

«DEFINE checkTargetRequestValidity(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE checkTargetRequestValidity(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» && newEnd instanceof «getQualifiedInterfaceName(getTargetType())»)) {
		return false;
	}
	«IF sourceMetaFeature != null-»
		«EXPAND extractFeatureWithCheck("getLink()", metaClass, "source", getQualifiedInterfaceName(getSourceType())) FOR sourceMetaFeature-»
	«ELSE-»
		if (!(«EXPAND extractContainer("getLink()") FOR metaClass» instanceof «getQualifiedInterfaceName(getSourceType())»)) {
			return false;
		}
		«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») «EXPAND extractContainer("getLink()") FOR metaClass»;
	«ENDIF-»
	«EXPAND checkLinkConstraint(link, "source", "getNewTarget()")-»
«ENDDEFINE»

«DEFINE checkTargetRequestValidity(gmfgen::GenLink link) FOR gmfgen::FeatureLinkModelFacet-»
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» && newEnd instanceof «getQualifiedInterfaceName(getTargetType())»)) {
		return false;
	}
	return «EXPAND checkLinkConstraintInvocation FOR link»(getOldSource(), getNewTarget());
«ENDDEFINE»

«DEFINE extractFeatureWithCheck(String containerVar, genmodel::GenClass containerGenClass, String featureVar, String featureTypeFQN) FOR genmodel::GenFeature-»
	«IF ecoreFeature.many-»
		if («EXPAND xpt::Common::getFeatureValue(containerVar, containerGenClass)».size() != 1) {
			return false;
		}
		«featureTypeFQN» «featureVar» = («featureTypeFQN») «EXPAND xpt::Common::getFeatureValue(containerVar, containerGenClass)».get(0);
	«ELSE-»
		«featureTypeFQN» «featureVar» = «EXPAND xpt::Common::getFeatureValue(containerVar, containerGenClass)»;
	«ENDIF-»
«ENDDEFINE»

«DEFINE checkLinkConstraint(gmfgen::GenLink link, String sourceVar, String targetVar) FOR gmfgen::TypeLinkModelFacet-»
	«IF sourceMetaFeature != null-»
		if (!(«EXPAND extractContainer("getLink()") FOR metaClass» instanceof «containmentMetaFeature.genClass.getQualifiedInterfaceName()»)) {
			return false;
		}
		«containmentMetaFeature.genClass.getQualifiedInterfaceName()» container =
				(«containmentMetaFeature.genClass.getQualifiedInterfaceName()») «EXPAND extractContainer("getLink()") FOR metaClass»;
		return «EXPAND checkLinkConstraintInvocation FOR link»(container, «sourceVar», «targetVar»);
	«ELSE-»
		return «EXPAND checkLinkConstraintInvocation FOR link»(«sourceVar», «targetVar»);
	«ENDIF-»
«ENDDEFINE»

«DEFINE checkLinkConstraintInvocation FOR gmfgen::GenLink-»
	«diagram.getBaseItemSemanticEditPolicyQualifiedClassName()».«diagram.getLinkCreationConstraintsClassName()».canExist«getUniqueIdentifier()»
«ENDDEFINE»

«DEFINE extractContainer(String var) FOR genmodel::GenClass-»
	«IF isExternalInterface()»((org.eclipse.emf.ecore.EObject) «ENDIF»«var»«IF isExternalInterface()»)«ENDIF».eContainer()
«ENDDEFINE»

«REM»
	Generates doExecuteWithResult() method for the command that reorients link.
	Implementation should throw ExecutionException if it can't execute the command.
«ENDREM»
«DEFINE reorient FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(
			org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
			throws org.eclipse.core.commands.ExecutionException {
		if (!canExecute()) {
			throw new org.eclipse.core.commands.ExecutionException("Invalid arguments in reorient link command"); «EXPAND xpt::Common::nonNLS»
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
			return reorientSource();
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
			return reorientTarget();
		}
		throw new IllegalStateException();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult reorientSource() throws org.eclipse.core.commands.ExecutionException {
		«EXPAND reorientSource-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult reorientTarget() throws org.eclipse.core.commands.ExecutionException {
		«EXPAND reorientTarget-»
	}
«ENDDEFINE»

«DEFINE reorientSource FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«REM»
	Shouldn't we change link container here?
«ENDREM»
«DEFINE reorientSource FOR gmfgen::TypeLinkModelFacet-»
	«IF sourceMetaFeature != null-»
		«EXPAND changeTarget("getLink()", metaClass, "getOldSource()", "getNewSource()") FOR sourceMetaFeature-»
	«ELSE-»
		«EXPAND changeSource("getLink()", "getOldSource()", "getNewSource()", getSourceType()) FOR containmentMetaFeature-»
	«ENDIF-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(getLink());
«ENDDEFINE»

«REM»
	When feature source is being reoriented oldEnd is the link target.
«ENDREM»
«DEFINE reorientSource FOR gmfgen::FeatureLinkModelFacet-»
	«EXPAND changeSource("getOldTarget()", "getOldSource()", "getNewSource()", getSourceType()) FOR metaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(referenceOwner);
«ENDDEFINE»

«DEFINE reorientTarget FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE reorientTarget FOR gmfgen::TypeLinkModelFacet-»
	«EXPAND changeTarget("getLink()", metaClass, "getOldTarget()", "getNewTarget()") FOR targetMetaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(getLink());
«ENDDEFINE»

«DEFINE reorientTarget FOR gmfgen::FeatureLinkModelFacet-»
	«EXPAND changeTarget("getOldSource()", getSourceType(), "getOldTarget()", "getNewTarget()") FOR metaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(referenceOwner);
«ENDDEFINE»

«REM»
	Replace old target with the new one in the source.
«ENDREM»
«DEFINE changeTarget(String sourceVar, genmodel::GenClass sourceVarGenClass, String oldTargetVar, String newTargetVar) FOR genmodel::GenFeature-»
	«IF isListType()-»
		«EXPAND xpt::Common::getFeatureValue(sourceVar, sourceVarGenClass)».remove(«oldTargetVar»);
		«EXPAND xpt::Common::getFeatureValue(sourceVar, sourceVarGenClass)».add(«newTargetVar»);
	«ELSE-»
		«EXPAND xpt::Common::setFeatureValue(sourceVar, sourceVarGenClass, newTargetVar)»;
	«ENDIF-»
«ENDDEFINE»

«REM»
	Move target from old source to the new one.
«ENDREM»
«DEFINE changeSource(String targetVar, String oldSourceVar, String newSourceVar, genmodel::GenClass sourceVarGenClass) FOR genmodel::GenFeature-»
	«IF isListType()-»
		«EXPAND xpt::Common::getFeatureValue(oldSourceVar, sourceVarGenClass)».remove(«targetVar»);
		«EXPAND xpt::Common::getFeatureValue(newSourceVar, sourceVarGenClass)».add(«targetVar»);
	«ELSE-»
		«EXPAND xpt::Common::setFeatureValue(oldSourceVar, sourceVarGenClass, "null")»;
		«EXPAND xpt::Common::setFeatureValue(newSourceVar, sourceVarGenClass, targetVar)»;
	«ENDIF-»
«ENDDEFINE»
@


1.12
log
@better link multiplicity detection
@
text
@@


1.11
log
@Removing unnecessary parameters + more correct external interface check added.
@
text
@d281 1
a281 1
	«IF ecoreFeature.many-»
d293 1
a293 1
	«IF ecoreFeature.many-»
@


1.10
log
@Rewriting template to xpt

[170079] - Do not generate unnecessary CanonicalEditPolicies in case if phantoms are allowed for diagram
@
text
@d178 1
a178 1
		if («EXPAND xpt::Common::getFeatureValue(containerVar, containerGenClass, true)».size() != 1) {
d181 1
a181 1
		«featureTypeFQN» «featureVar» = («featureTypeFQN») «EXPAND xpt::Common::getFeatureValue(containerVar, containerGenClass, true)».get(0);
d183 1
a183 1
		«featureTypeFQN» «featureVar» = «EXPAND xpt::Common::getFeatureValue(containerVar, containerGenClass, true)»;
d280 1
a280 1
«DEFINE changeTarget(String sourceVar, genmodel::GenClass sourceGenClass, String oldTargetVar, String newTargetVar) FOR genmodel::GenFeature-»
d282 2
a283 2
		«EXPAND xpt::Common::getFeatureValue(sourceVar, sourceGenClass, true)».remove(«oldTargetVar»);
		«EXPAND xpt::Common::getFeatureValue(sourceVar, sourceGenClass, true)».add(«newTargetVar»);
d285 1
a285 1
		«EXPAND xpt::Common::setFeatureValue(sourceVar, true, newTargetVar, true)»;
d294 2
a295 2
		«EXPAND xpt::Common::getFeatureValue(oldSourceVar, sourceVarGenClass, true)».remove(«targetVar»);
		«EXPAND xpt::Common::getFeatureValue(newSourceVar, sourceVarGenClass, true)».add(«targetVar»);
d297 2
a298 2
		«EXPAND xpt::Common::setFeatureValue(oldSourceVar, true, "null", true)»;
		«EXPAND xpt::Common::setFeatureValue(newSourceVar, true, targetVar, true)»;
@


1.9
log
@Cast link to EObject if necessary to get container
@
text
@d137 1
a137 1
	«EXPAND extractFeatureWithCheck("getLink()", "target", getQualifiedInterfaceName(getTargetType())) FOR targetMetaFeature-»
d159 1
a159 1
		«EXPAND extractFeatureWithCheck("getLink()", "source", getQualifiedInterfaceName(getSourceType())) FOR sourceMetaFeature-»
d176 1
a176 1
«DEFINE extractFeatureWithCheck(String containerVar, String featureVar, String featureTypeFQN) FOR genmodel::GenFeature-»
d178 1
a178 1
		if («EXPAND xpt::Common::getFeatureValue(containerVar, true)».size() != 1) {
d181 1
a181 1
		«featureTypeFQN» «featureVar» = («featureTypeFQN») «EXPAND xpt::Common::getFeatureValue(containerVar, true)».get(0);
d183 1
a183 1
		«featureTypeFQN» «featureVar» = «EXPAND xpt::Common::getFeatureValue(containerVar, true)»;
d249 1
a249 1
		«EXPAND changeTarget("getLink()", "getOldSource()", "getNewSource()") FOR sourceMetaFeature-»
d251 1
a251 1
		«EXPAND changeSource("getLink()", "getOldSource()", "getNewSource()") FOR containmentMetaFeature-»
d260 1
a260 1
	«EXPAND changeSource("getOldTarget()", "getOldSource()", "getNewSource()") FOR metaFeature-»
d268 1
a268 1
	«EXPAND changeTarget("getLink()", "getOldTarget()", "getNewTarget()") FOR targetMetaFeature-»
d273 1
a273 1
	«EXPAND changeTarget("getOldSource()", "getOldTarget()", "getNewTarget()") FOR metaFeature-»
d280 1
a280 1
«DEFINE changeTarget(String sourceVar, String oldTargetVar, String newTargetVar) FOR genmodel::GenFeature-»
d282 2
a283 2
		«EXPAND xpt::Common::getFeatureValue(sourceVar, true)».remove(«oldTargetVar»);
		«EXPAND xpt::Common::getFeatureValue(sourceVar, true)».add(«newTargetVar»);
d292 1
a292 1
«DEFINE changeSource(String targetVar, String oldSourceVar, String newSourceVar) FOR genmodel::GenFeature-»
d294 2
a295 2
		«EXPAND xpt::Common::getFeatureValue(oldSourceVar, true)».remove(«targetVar»);
		«EXPAND xpt::Common::getFeatureValue(newSourceVar, true)».add(«targetVar»);
@


1.8
log
@[179063] check constraints for ref-based links
@
text
@d161 1
a161 1
		if (!(getLink().eContainer() instanceof «getQualifiedInterfaceName(getSourceType())»)) {
d164 1
a164 1
		«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») getLink().eContainer();
d189 1
a189 1
		if (!(getLink().eContainer() instanceof «containmentMetaFeature.genClass.getQualifiedInterfaceName()»)) {
d193 1
a193 1
				(«containmentMetaFeature.genClass.getQualifiedInterfaceName()») getLink().eContainer();
d204 4
@


1.7
log
@minor refactorings
@
text
@a136 1
	«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») newEnd;
d138 1
a138 1
	«EXPAND checkLinkConstraint(link)-»
d148 1
a148 1
	return true;
d166 1
a166 2
	«getQualifiedInterfaceName(getTargetType())» target = («getQualifiedInterfaceName(getTargetType())») newEnd;
	«EXPAND checkLinkConstraint(link)-»
d173 1
a173 1
	return true;
d187 1
a187 1
«DEFINE checkLinkConstraint(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
d194 1
a194 1
		return «EXPAND checkLinkConstraintInvocation FOR link»(container, source, target);
d196 1
a196 1
		return «EXPAND checkLinkConstraintInvocation FOR link»(source, target);
@


1.6
log
@generate accessors for link ends
@
text
@d54 6
a59 1
«DEFINE newSourceAccessor FOR gmfgen::LinkModelFacet-»
d62 1
a62 1
«DEFINE newSourceAccessor FOR gmfgen::TypeLinkModelFacet-»
a70 3
«ENDDEFINE»

«DEFINE oldTargetAccessor FOR gmfgen::TypeLinkModelFacet-»
a78 3
«ENDDEFINE»

«DEFINE newTargetAccessor FOR gmfgen::TypeLinkModelFacet-»
d229 1
a229 2
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult reorientSource()
			throws org.eclipse.core.commands.ExecutionException {
d234 1
a234 2
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult reorientTarget()
			throws org.eclipse.core.commands.ExecutionException {
a241 3
«DEFINE reorientTarget FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

d246 1
a246 1
	«IF null != sourceMetaFeature-»
d249 1
a249 1
		«EXPAND changeSource("getOldSource()", "getNewSource()", "getLink()") FOR containmentMetaFeature-»
a253 5
«DEFINE reorientTarget FOR gmfgen::TypeLinkModelFacet-»
	«EXPAND changeTarget("getLink()", "getOldTarget()", "getNewTarget()") FOR targetMetaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(getLink());
«ENDDEFINE»

d258 1
a258 4
	«getQualifiedInterfaceName(getSourceType())» oldSource = («getQualifiedInterfaceName(getSourceType())») referenceOwner;
	«getQualifiedInterfaceName(getSourceType())» newSource = («getQualifiedInterfaceName(getSourceType())») newEnd;
	«getQualifiedInterfaceName(getTargetType())» target = («getQualifiedInterfaceName(getTargetType())») oldEnd;
	«EXPAND changeSource("oldSource", "newSource", "target") FOR metaFeature-»
d262 8
d271 1
a271 4
	«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») referenceOwner;
	«getQualifiedInterfaceName(getTargetType())» oldTarget = («getQualifiedInterfaceName(getTargetType())») oldEnd;
	«getQualifiedInterfaceName(getTargetType())» newTarget = («getQualifiedInterfaceName(getTargetType())») newEnd;
	«EXPAND changeTarget("source", "oldTarget", "newTarget") FOR metaFeature-»
d290 1
a290 1
«DEFINE changeSource(String oldSourceVar, String newSourceVar, String targetVar) FOR genmodel::GenFeature-»
@


1.5
log
@minor refactorings
@
text
@d26 4
d43 44
d248 3
a251 3
	«getQualifiedInterfaceName(metaClass)» link = («getQualifiedInterfaceName(metaClass)») getElementToEdit();
	«getQualifiedInterfaceName(getSourceType())» oldSource = («getQualifiedInterfaceName(getSourceType())») oldEnd;
	«getQualifiedInterfaceName(getSourceType())» newSource = («getQualifiedInterfaceName(getSourceType())») newEnd;
d253 1
a253 2
		«EXPAND changeTarget("link", "oldSource", "newSource") FOR sourceMetaFeature-»
		«REM»Shouldn't we change link container here?«ENDREM»
d255 1
a255 1
		«EXPAND changeSource("oldSource", "newSource", "link") FOR containmentMetaFeature-»
d257 1
a257 1
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(link);
d261 2
a262 5
	«getQualifiedInterfaceName(metaClass)» link = («getQualifiedInterfaceName(metaClass)») getElementToEdit();
	«getQualifiedInterfaceName(getTargetType())» oldTarget = («getQualifiedInterfaceName(getTargetType())») oldEnd;
	«getQualifiedInterfaceName(getTargetType())» newTarget = («getQualifiedInterfaceName(getTargetType())») newEnd;
	«EXPAND changeTarget("link", "oldTarget", "newTarget") FOR targetMetaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(link);
d287 1
a287 1
«DEFINE changeTarget(String sourceVar, String oldTargetVar, String newTargetVar) FOR genmodel::GenFeature»
d299 1
a299 1
«DEFINE changeSource(String oldSourceVar, String newSourceVar, String targetVar) FOR genmodel::GenFeature»
@


1.4
log
@[179063] check link constraints for type based links on reroute
@
text
@d22 18
d49 1
a49 1
			«EXPAND checkSourceRequestValidity(link)-»
d52 1
a52 1
			«EXPAND checkTargetRequestValidity(link)-»
d56 10
a74 1
	«getQualifiedInterfaceName(metaClass)» link = («getQualifiedInterfaceName(metaClass)») getElementToEdit();
d91 1
a91 1
	«EXPAND extractFeatureWithCheck("link", "target", getQualifiedInterfaceName(getTargetType())) FOR targetMetaFeature-»
d113 1
a113 1
		«EXPAND extractFeatureWithCheck("link", "source", getQualifiedInterfaceName(getSourceType())) FOR sourceMetaFeature-»
d115 1
a115 1
		if (!(link.eContainer() instanceof «getQualifiedInterfaceName(getSourceType())»)) {
d118 1
a118 1
		«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») link.eContainer();
d144 1
a144 1
		if (!(link.eContainer() instanceof «containmentMetaFeature.genClass.getQualifiedInterfaceName()»)) {
d148 1
a148 1
				(«containmentMetaFeature.genClass.getQualifiedInterfaceName()») link.eContainer();
d182 1
a182 1
	private org.eclipse.gmf.runtime.common.core.command.CommandResult reorientSource()
d188 1
a188 1
	private org.eclipse.gmf.runtime.common.core.command.CommandResult reorientTarget()
@


1.3
log
@User should be able to configure whether NON-NLS markers are shown or not
@
text
@d18 2
d25 1
a25 1
«DEFINE canReorient FOR gmfgen::LinkModelFacet-»
d31 1
a31 1
			«EXPAND checkSourceRequestValidity-»
d34 1
a34 1
			«EXPAND checkTargetRequestValidity-»
d47 1
d56 1
a56 1
«DEFINE checkSourceRequestValidity FOR gmfgen::LinkModelFacet-»
d59 7
a65 3
«DEFINE checkSourceRequestValidity FOR gmfgen::TypeLinkModelFacet-»
	return oldEnd instanceof «getQualifiedInterfaceName(getSourceType())» &&
			newEnd instanceof «getQualifiedInterfaceName(getSourceType())»;
d71 55
a125 3
«DEFINE checkSourceRequestValidity FOR gmfgen::FeatureLinkModelFacet-»
	return oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» &&
			newEnd instanceof «getQualifiedInterfaceName(getSourceType())»;
d128 2
a129 3
«DEFINE checkTargetRequestValidity FOR gmfgen::LinkModelFacet-»
	return oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» &&
			newEnd instanceof «getQualifiedInterfaceName(getTargetType())»;
@


1.2
log
@refactor to remove precise link end
@
text
@d85 1
a85 1
			throw new org.eclipse.core.commands.ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
@


1.1
log
@move shared code in one template file
@
text
@d29 1
a29 1
			return newEnd instanceof «getQualifiedInterfaceName(getSourceType())»;
d32 1
a32 1
			return newEnd instanceof «getQualifiedInterfaceName(getTargetType())»;
d53 21
d117 1
d120 1
a120 1
		«EXPAND reorientEnd("link", "newSource") FOR sourceMetaFeature-»
d123 1
a123 3
		«getQualifiedInterfaceName(containmentMetaFeature.genClass)» source =
				(«getQualifiedInterfaceName(containmentMetaFeature.genClass)») getElementToEdit().eContainer();
		«EXPAND reorientReference("source", "link", "newSource") FOR containmentMetaFeature-»
d130 1
d132 1
a132 1
	«EXPAND reorientEnd("link", "newTarget") FOR targetMetaFeature-»
d136 3
d140 1
a140 1
	«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») referenceOwner;
d142 2
a143 1
	«EXPAND reorientSelfAsEnd("source", "newSource") FOR metaFeature-»
d149 1
d151 1
a151 1
	«EXPAND reorientEnd("source", "newTarget") FOR metaFeature-»
d156 1
a156 2
	Set link feature to hold the newEnd value. All old values are discarded.
	In this context means to reorient the link.
d158 1
a158 1
«DEFINE reorientEnd(String linkVar, String newEndVar) FOR genmodel::GenFeature»
d160 2
a161 2
		«EXPAND xpt::Common::getFeatureValue(linkVar, true)».clear();
		«EXPAND xpt::Common::getFeatureValue(linkVar, true)».add(«newEndVar»);
d163 1
a163 1
		«EXPAND xpt::Common::setFeatureValue(linkVar, true, newEndVar, true)»;
d168 1
a168 3
	Remove reference to targetVar element from sourceVar and add it to the newSourceVar
	sourceVar and newSourceVar should have the same feature pointing to targetVar.
	In this context means to reorient the link.
d170 1
a170 1
«DEFINE reorientReference(String sourceVar, String targetVar, String newSourceVar) FOR genmodel::GenFeature»
d172 1
a172 1
		«EXPAND xpt::Common::getFeatureValue(sourceVar, true)».remove(«targetVar»);
d175 1
a175 1
		«EXPAND xpt::Common::setFeatureValue(sourceVar, true, "null", true)»;
a178 15

«REM»
	Move reference value from the current reference owner to the new end.
	In this context means to reorient the link.
«ENDREM»
«DEFINE reorientSelfAsEnd(String referenceOwnerVar, String newEndVar) FOR genmodel::GenFeature»
	«IF ecoreFeature.many-»
		«EXPAND xpt::Common::getFeatureValue(referenceOwnerVar, true)».clear();
		«EXPAND xpt::Common::getFeatureValue(newEndVar, true)».addAll(«EXPAND xpt::Common::getFeatureValue(referenceOwnerVar, true)»);
	«ELSE-»
		«getQualifiedInterfaceName(getTypeGenClassX(this))» value = «EXPAND xpt::Common::getFeatureValue(referenceOwnerVar, true)»;
		«EXPAND xpt::Common::setFeatureValue(referenceOwnerVar, true, "null", true)»;
		«EXPAND xpt::Common::setFeatureValue(newEndVar, true, "value", true)»;
	«ENDIF-»
«ENDDEFINE»
@

