head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080930-1130:1.5
	v20080926-1245:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080722-1827:1.5
	v20080718-1731:1.5
	v20080716-1600:1.4
	v20080716-1642:1.5
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080528-1052:1.4
	v20080521:1.4
	v20080516-1543:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080508-2000:1.4
	v20080507-1326:1.4
	v20080503-1740:1.3
	v20080501-1739:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080411-0411:1.3
	v20080404-1111:1.3
	v20080322-0000:1.3
	v20080222-1200:1.1
	v20080215-1500:1.1
	v20080207-0207:1.1
	v20071222-1111:1.1
	v20071214-1111:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071112-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070928-0000:1.1
	v20070921-0000:1.1
	v20070915-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2008.07.12.12.19.06;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	45544878a1394567;

1.4
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	39124821b4de4567;

1.3
date	2008.02.26.13.53.51;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	19d047c419ed4567;

1.2
date	2008.02.22.11.56.45;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	6cf447beb87c4567;

1.1
date	2007.06.12.12.20.13;	author dstadnik;	state Exp;
branches;
next	;
commitid	5d34466e8f7c4567;


desc
@@


1.5
log
@[234562] - Adding child elements into a shortcut causes stack overflow
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE ElementTypes FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «elementTypesClassName» extends ElementInitializers {

	«EXPAND constructor-»
	
	«EXPAND attributes-»
	
	«EXPAND elementTypeField FOREACH getElements()-»
	
	«EXPAND getImageRegistry-»

	«EXPAND getImageRegistryKey-»

	«EXPAND getProvidedImageDescriptor-»

	«EXPAND getNamedElementImageDescriptor-»

	«EXPAND getNamedElementImage-»

	«EXPAND getAdaptableImageDescriptor-»

	«EXPAND getAdaptableImage-»

	«EXPAND getElement-»

	«EXPAND getElementType-»

	«EXPAND isKnownElementType-»
	
	«EXPAND getElementTypeByVisualID-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE constructor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private «elementTypesClassName»() {
}
«ENDDEFINE»

«DEFINE attributes FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Map elements;

	«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.jface.resource.ImageRegistry imageRegistry;

	«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Set KNOWN_ELEMENT_TYPES;
«ENDDEFINE»


«DEFINE getImageRegistry FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.jface.resource.ImageRegistry getImageRegistry() {
	if (imageRegistry == null) {
		imageRegistry = new org.eclipse.jface.resource.ImageRegistry();
	}
	return imageRegistry;
}
«ENDDEFINE»

«DEFINE getImageRegistryKey FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static String getImageRegistryKey(org.eclipse.emf.ecore.ENamedElement element) {
	return element.getName();
}
«ENDDEFINE»

«DEFINE getProvidedImageDescriptor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.jface.resource.ImageDescriptor getProvidedImageDescriptor(org.eclipse.emf.ecore.ENamedElement element) {
	if (element instanceof org.eclipse.emf.ecore.EStructuralFeature) {
		org.eclipse.emf.ecore.EStructuralFeature feature = ((org.eclipse.emf.ecore.EStructuralFeature) element);
		org.eclipse.emf.ecore.EClass eContainingClass = feature.getEContainingClass();
		org.eclipse.emf.ecore.EClassifier eType = feature.getEType();
		if (eContainingClass != null && !eContainingClass.isAbstract()){
			element = eContainingClass;
		} else if (eType instanceof org.eclipse.emf.ecore.EClass && !((org.eclipse.emf.ecore.EClass)eType).isAbstract()){
			element = eType;
		}
	}
	if (element instanceof org.eclipse.emf.ecore.EClass) {
		org.eclipse.emf.ecore.EClass eClass = (org.eclipse.emf.ecore.EClass) element;
		if (!eClass.isAbstract()) {
			return «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemImageDescriptor(
				eClass.getEPackage().getEFactoryInstance().create(eClass));
		}
	}
	// TODO : support structural features
	return null;
}
«ENDDEFINE»

«DEFINE getNamedElementImageDescriptor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(org.eclipse.emf.ecore.ENamedElement element) {
	String key = getImageRegistryKey(element);
	org.eclipse.jface.resource.ImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);
	if (imageDescriptor == null) {
		«EXPAND loadProvidedImageDescriptor-»
	}
	return imageDescriptor;
}
«ENDDEFINE»

«DEFINE loadProvidedImageDescriptor FOR gmfgen::GenDiagram-»
imageDescriptor = getProvidedImageDescriptor(element);
if (imageDescriptor == null) {
	imageDescriptor = org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor();
}
getImageRegistry().put(key, imageDescriptor);
«ENDDEFINE»

«DEFINE getNamedElementImage FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static org.eclipse.swt.graphics.Image getImage(org.eclipse.emf.ecore.ENamedElement element) {
	String key = getImageRegistryKey(element);
	org.eclipse.swt.graphics.Image image = getImageRegistry().get(key);
	if (image == null) {
		org.eclipse.jface.resource.ImageDescriptor «EXPAND loadProvidedImageDescriptor-»
		image = getImageRegistry().get(key);
	}
	return image;
}
«ENDDEFINE»

«DEFINE getAdaptableImageDescriptor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(org.eclipse.core.runtime.IAdaptable hint) {
	«EXPAND getNamedElement-»
	return getImageDescriptor(element);
}
«ENDDEFINE»

«DEFINE getNamedElement FOR gmfgen::GenDiagram-»
org.eclipse.emf.ecore.ENamedElement element = getElement(hint);
if (element == null) {
	return null;
}
«ENDDEFINE»

«DEFINE getAdaptableImage FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static org.eclipse.swt.graphics.Image getImage(org.eclipse.core.runtime.IAdaptable hint) {
	«EXPAND getNamedElement-»
	return getImage(element);
}
«ENDDEFINE»

«DEFINE getElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment("Returns \'type\' of the ecore object associated with the hint.\n")»
public static org.eclipse.emf.ecore.ENamedElement getElement(org.eclipse.core.runtime.IAdaptable hint) {
	Object type = hint.getAdapter(org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
	if (elements == null) {
		elements = new java.util.IdentityHashMap();
		«EXPAND bindUniqueIdentifierToNamedElement(getUniqueIdentifier()) FOR domainDiagramElement-»
		«FOREACH getNodes() AS node-»
			«EXPAND bindUniqueIdentifierToNamedElement(node.getUniqueIdentifier()) FOR node.modelFacet-»
		«ENDFOREACH-»
		«FOREACH links AS link-»
			«EXPAND bindUniqueIdentifierToNamedElement(link.getUniqueIdentifier()) FOR link.modelFacet-»
		«ENDFOREACH-»
	}
	return (org.eclipse.emf.ecore.ENamedElement) elements.get(type);
}
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR genmodel::GenClass»
	elements.put(«id», «EXPAND MetaModel::MetaClass»);
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR gmfgen::ModelFacet»
	«ERROR "Unsupported model facet: " + this-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR gmfgen::TypeModelFacet»
	«EXPAND bindUniqueIdentifierToNamedElement(id) FOR metaClass-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR gmfgen::FeatureLinkModelFacet»
	elements.put(«id», «EXPAND MetaModel::MetaFeature FOR metaFeature»);
«ENDDEFINE»

«DEFINE elementTypeField FOR gmfgen::GenCommonBase-»
	«IF null != elementType-»
		«EXPAND xpt::Common::generatedMemberComment»
public static final org.eclipse.gmf.runtime.emf.type.core.IElementType «getUniqueIdentifier()» = getElementType("«elementType.uniqueIdentifier»"); «EXPAND xpt::Common::nonNLS»
	«ENDIF-»
«ENDDEFINE»

«DEFINE getElementType FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.gmf.runtime.emf.type.core.IElementType getElementType(String id) {
	return org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry.getInstance().getType(id);
}
«ENDDEFINE»

«DEFINE isKnownElementType FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static boolean isKnownElementType(org.eclipse.gmf.runtime.emf.type.core.IElementType elementType) {
	if (KNOWN_ELEMENT_TYPES == null) {
		KNOWN_ELEMENT_TYPES = new java.util.HashSet();
		«EXPAND addKnownElementType FOREACH getElements()-»
	}
	return KNOWN_ELEMENT_TYPES.contains(elementType);
}
«ENDDEFINE»

«DEFINE addKnownElementType FOR gmfgen::GenCommonBase-»
	«IF null != elementType-»
KNOWN_ELEMENT_TYPES.add(«getUniqueIdentifier()»);
	«ENDIF-»
«ENDDEFINE»

«DEFINE getElementTypeByVisualID FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public static org.eclipse.gmf.runtime.emf.type.core.IElementType getElementType(int visualID) {
		switch (visualID) {
			«EXPAND caseElementType FOREACH getElements().select(el | el.elementType != null)-»
		}
		return null;
	}
«ENDDEFINE»

«DEFINE caseElementType FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::caseVisualID-»
		return «getUniqueIdentifier()»;
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram-»
«ENDDEFINE»@


1.4
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d51 2
d239 15
@


1.3
log
@[150177] phase I, refactor existing code: completed - all metamodel access moved to MetaModel template.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.2
log
@copyright year updated; minor fix to use common code
@
text
@d191 1
a191 1
	elements.put(«id», «EXPAND xpt::Common::metaClassAccessor»);
d203 1
a203 1
	elements.put(«id», «EXPAND xpt::Common::metaFeatureAccessor FOR metaFeature»);
@


1.1
log
@move providers out of diagram folder
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
d191 1
a191 1
	elements.put(«id», «getQualifiedPackageInterfaceName(genPackage)».eINSTANCE.get«getClassifierAccessorName()»());
@

