head	1.21;
access;
symbols
	v20081022-1925:1.21
	v20081015-1925:1.21
	v20081008-1925:1.21
	v20081001-1925:1.20
	v20080930-1130:1.20
	v20080926-1245:1.20
	v20080924-1925:1.20
	v20080917-1925:1.20
	v20080911-1728:1.20
	v20080910-1520:1.20
	v20080903-1520:1.20
	v20080827-1520:1.20
	v20080813-1520:1.20
	v20080806-1520:1.20
	v20080722-1827:1.20
	v20080718-1731:1.20
	v20080716-1600:1.20
	v20080716-1642:1.20
	R2_1_maintenance:1.20.0.2
	Root_R2_1_maintenance:1.20
	R2_1_0:1.20
	v20080610-1132:1.20
	v20080603-1553:1.19
	v20080528-1052:1.19
	v20080521:1.19
	v20080516-1543:1.19
	v20080516-1143:1.19
	v20080512-1200:1.19
	v20080508-2000:1.19
	v20080507-1326:1.19
	v20080503-1740:1.18
	v20080501-1739:1.18
	v20080425-1959:1.18
	v20080417-1610:1.18
	v20080411-0411:1.18
	v20080404-1111:1.18
	v20080322-0000:1.18
	v20080222-1200:1.18
	v20080215-1500:1.18
	v20080207-0207:1.18
	v20071222-1111:1.18
	v20071214-1111:1.18
	v20071130-1111:1.18
	v20071124-0000:1.18
	v20071112-0000:1.18
	v20071108-0000:1.18
	v20071003-0000:1.18
	v20070928-0000:1.18
	v20070921-0000:1.18
	v20070915-0000:1.18
	v20070903-0000:1.18
	v20070809-0000:1.18
	R2_0_maintenance:1.18.0.2
	R2_0:1.18
	R4_20:1.18
	v20070621-0000:1.18
	RC3_20:1.18
	v20070614-1400:1.18
	v20070608-1300:1.17
	v20070605-1400:1.16
	v20070601-1400:1.15
	v20070525-1500:1.15
	v20070520-1200:1.15
	v20070518-1300:1.14
	v20070504-1000:1.14
	v20070427-0600:1.14
	v20070420-1000:1.14
	v20070413-1300:1.12
	v20070405-1100:1.10
	v20070403-1500:1.9
	v20070330-1300:1.9
	v20060330-1300:1.9
	v20070322-1100:1.9
	v20060316-0600:1.9
	v20070307-0700:1.9
	v20070301-1200:1.9
	v20070228-2000:1.9
	v20070221-1500:1.6
	v20070208-1800:1.6;
locks; strict;
comment	@# @;
expand	@k@;


1.21
date	2008.10.08.14.23.47;	author atikhomirov;	state Exp;
branches;
next	1.20;
commitid	3df1348ecc2734567;

1.20
date	2008.06.06.12.58.27;	author ashatalin;	state Exp;
branches;
next	1.19;
commitid	5e7f484934734567;

1.19
date	2008.05.07.13.56.00;	author atikhomirov;	state Exp;
branches;
next	1.18;
commitid	39124821b4de4567;

1.18
date	2007.06.11.15.39.12;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	72a1466d6c9f4567;

1.17
date	2007.06.08.16.56.58;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	6c9b46698a5a4567;

1.16
date	2007.06.04.18.46.53;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	1b6f46645e1d4567;

1.15
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	2591464e17d14567;

1.14
date	2007.04.16.11.07.59;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	2bf4623590e4567;

1.13
date	2007.04.13.14.39.28;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	6bf3461f961f4567;

1.12
date	2007.04.06.15.34.21;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	33134616687b4567;

1.11
date	2007.04.05.15.03.04;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	7e8946150fa54567;

1.10
date	2007.04.04.11.18.20;	author bblajer;	state Exp;
branches;
next	1.9;
commitid	2664461389794567;

1.9
date	2007.02.26.11.38.20;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	16ac45e2c6ab4567;

1.8
date	2007.02.23.14.41.18;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	211e45defd0c4567;

1.7
date	2007.02.22.19.49.49;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	299645ddf3da4567;

1.6
date	2007.02.08.19.07.09;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	6ed845cb74dc4567;

1.5
date	2007.02.07.12.05.15;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	37da45c9c07a4567;

1.4
date	2007.02.05.17.28.03;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	155b45c769234567;

1.3
date	2007.02.02.12.48.04;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	569345c333034567;

1.2
date	2007.02.02.11.07.23;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	67f745c31b6a4567;

1.1
date	2007.02.02.10.49.59;	author ashatalin;	state Exp;
branches;
next	;
commitid	527745c317554567;


desc
@@


1.21
log
@fix spacing
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«EXTENSION xpt::editor::Utils»

«DEFINE DocumentProvider FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «documentProviderClassName» extends org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider implements org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider {
	
	«EXPAND createElementInfo-»
	
	«EXPAND createDocument-»
	
	«EXPAND setupDocument-»
	
	«EXPAND computeModificationStamp-»
	
	«EXPAND createEmptyDocument-»
	
	«EXPAND createEditingDomain-»
	
	«EXPAND setDocumentContent-»
	
	«EXPAND getModificationStamp-»
	
	«EXPAND isDeleted-»
	
	«EXPAND getResourceSetInfo-»
	
	«EXPAND disposeElementInfo-»
	«IF null == editorGen.application-»

		«EXPAND doValidateState-»
	«ENDIF-»
	
	«EXPAND isReadOnly-»
	
	«EXPAND isModifiable-»
	
	«EXPAND updateCache-»
	
	«EXPAND doUpdateStateCache-»
	
	«EXPAND isSynchronized-»
	«IF null == editorGen.application-»
		
		«EXPAND getResetRule-»
	
		«EXPAND getSaveRule-»
	
		«EXPAND getSynchronizeRule-»
	
		«EXPAND getValidateStateRule-»
	
		«EXPAND computeSchedulingRule-»
	«ENDIF-»
	
	«EXPAND doSynchronize-»
	
	«EXPAND doSaveDocument-»
	
	«EXPAND handleElementChanged-»

	«EXPAND handleElementMoved-»

	«EXPAND createInputWithEditingDomain-»

	«EXPAND getDiagramDocument-»
	
	«EXPAND getOperationRunner-»
	«IF null != editorGen.application-»

		«EXPAND getFile-»
	«ENDIF-»
	
	«EXPAND xpt::editor::ResourceSetInfo::ResourceSetInfo-»
	
	«EXPAND xpt::editor::ResourceSetModificationListener::ResourceSetModificationListener-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE createElementInfo FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected ElementInfo createElementInfo(Object element) throws org.eclipse.core.runtime.CoreException {
	«EXPAND checkEditorInputInstance-»
	org.eclipse.ui.IEditorInput editorInput = (org.eclipse.ui.IEditorInput) element;
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) createDocument(editorInput);

	ResourceSetInfo info = new ResourceSetInfo(document, editorInput);
	info.setModificationStamp(computeModificationStamp(info));
	info.fStatus = null;
	return info;
}
«ENDDEFINE»

«DEFINE checkEditorInputInstance FOR gmfgen::GenDiagram-»
if («IF null == editorGen.application»false == element instanceof «EXPAND fileEditorInputClassFQName» && «ENDIF»false == element instanceof «EXPAND uriEditorInputClassFQName») {
	«EXPAND throwIncorrectInputException-»
}
«ENDDEFINE»

«DEFINE throwIncorrectInputException FOR gmfgen::GenDiagram-»
throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, 
		org.eclipse.osgi.util.NLS.bind(
			«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderIncorrectInputError()) FOR editorGen»,
			new Object[] {element, «IF null == editorGen.application»"«EXPAND fileEditorInputClassFQName»", «ENDIF»"«EXPAND uriEditorInputClassFQName»"}),«EXPAND xpt::Common::nonNLS(1)»«IF null == editorGen.application»«EXPAND xpt::Common::nonNLS(2)»«ENDIF» 
		null));
«ENDDEFINE»

«DEFINE fileEditorInputClassFQName FOR gmfgen::GenDiagram»org.eclipse.ui.part.FileEditorInput«ENDDEFINE»

«DEFINE uriEditorInputClassFQName FOR gmfgen::GenDiagram»org.eclipse.emf.common.ui.URIEditorInput«ENDDEFINE»

«DEFINE createDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument createDocument(Object element) throws org.eclipse.core.runtime.CoreException {
	«EXPAND checkEditorInputInstance-»
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = createEmptyDocument();
	setDocumentContent(document, (org.eclipse.ui.IEditorInput) element);
	setupDocument(element, document);
	return document;
}
«ENDDEFINE»

«DEFINE setupDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment(
		"Sets up the given document as it would be provided for the given element. The\n" +
		"content of the document is not changed. This default implementation is empty.\n" +
		"Subclasses may reimplement.\n" +
		"\n" +
		"@@param element the blue-print element\n" +
		"@@param document the document to set up"
	)»
protected void setupDocument(Object element, org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document) {
	// for subclasses
}
«ENDDEFINE»

«DEFINE computeModificationStamp FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private long computeModificationStamp(ResourceSetInfo info) {
	int result = 0;
	for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = info.getLoadedResourcesIterator(); it.hasNext();) {
		org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
	«IF null == editorGen.application-»
		org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
		if (file != null) {
			if (file.getLocation() != null) {
				result += file.getLocation().toFile().lastModified();
			} else {
				result += file.getModificationStamp();
			}
		}
	«ELSE-»
		java.io.File file = getFile(nextResource);
		if (file != null && file.exists()) {
			result += file.lastModified();
		}
	«ENDIF-»
	}
	return result;
}
«ENDDEFINE»

«DEFINE createEmptyDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument createEmptyDocument() {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument document = new org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument();
	document.setEditingDomain(createEditingDomain());
	return document;
}
«ENDDEFINE»

«DEFINE createEditingDomain FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.transaction.TransactionalEditingDomain createEditingDomain() {
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.diagram.core.DiagramEditingDomainFactory.getInstance().createEditingDomain();
	editingDomain.setID("«editingDomainID»");«EXPAND xpt::Common::nonNLS»
	final org.eclipse.emf.transaction.NotificationFilter diagramResourceModifiedFilter = org.eclipse.emf.transaction.NotificationFilter.createNotifierFilter(editingDomain.getResourceSet()).and(org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter(org.eclipse.emf.common.notify.Notification.ADD)).and(org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(org.eclipse.emf.ecore.resource.ResourceSet.class, org.eclipse.emf.ecore.resource.ResourceSet.RESOURCE_SET__RESOURCES));
	editingDomain.getResourceSet().eAdapters().add(new org.eclipse.emf.common.notify.Adapter() {

		private org.eclipse.emf.common.notify.Notifier myTarger;

		public org.eclipse.emf.common.notify.Notifier getTarget() {
			return myTarger;
		}

		public boolean isAdapterForType(Object type) {
			return false;
		}

		public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
			if (diagramResourceModifiedFilter.matches(notification)) {
				Object value = notification.getNewValue();
				if (value instanceof org.eclipse.emf.ecore.resource.Resource) {
					((org.eclipse.emf.ecore.resource.Resource) value).setTrackingModification(true);
				}
			}
		}

		public void setTarget(org.eclipse.emf.common.notify.Notifier newTarget) {
			myTarger = newTarget;
		}
			
	});	
	
	return editingDomain;
}
«ENDDEFINE»

«DEFINE setDocumentContent FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void setDocumentContent(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, org.eclipse.ui.IEditorInput element) throws org.eclipse.core.runtime.CoreException {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument diagramDocument = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document;
	org.eclipse.emf.transaction.TransactionalEditingDomain domain = diagramDocument.getEditingDomain();
	«IF null == editorGen.application»if (element instanceof «EXPAND fileEditorInputClassFQName») {
		org.eclipse.core.resources.IStorage storage = ((«EXPAND fileEditorInputClassFQName») element).getStorage();
		org.eclipse.gmf.runtime.notation.Diagram diagram = org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
		document.setContent(diagram);
	} else «ENDIF»if(element instanceof «EXPAND uriEditorInputClassFQName») {
		org.eclipse.emf.common.util.URI uri = ((«EXPAND uriEditorInputClassFQName») element).getURI();
		org.eclipse.emf.ecore.resource.Resource resource = null;
		try {
			resource = domain.getResourceSet().getResource(uri.trimFragment(), false);
			if (resource == null) {
				resource = domain.getResourceSet().createResource(uri.trimFragment());
			}
			if (!resource.isLoaded()) {
				try {
					java.util.Map options = new java.util.HashMap(org.eclipse.gmf.runtime.emf.core.resources.GMFResourceFactory.getDefaultLoadOptions());
					// @@see 171060 
					// options.put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
					resource.load(options);
				} catch (java.io.IOException e) {
					resource.unload();
					throw e;
				}
			}
			if (uri.fragment() != null) {
				org.eclipse.emf.ecore.EObject rootElement = resource.getEObject(uri.fragment());
				if (rootElement instanceof org.eclipse.gmf.runtime.notation.Diagram) {
					document.setContent((org.eclipse.gmf.runtime.notation.Diagram) rootElement);
					return;
				}
			} else {
				for (java.util.Iterator it = resource.getContents().iterator(); it.hasNext();) {
					Object rootElement = it.next();
					if (rootElement instanceof org.eclipse.gmf.runtime.notation.Diagram) {
						document.setContent((org.eclipse.gmf.runtime.notation.Diagram) rootElement);
						return;
					}
				}
			}
			throw new RuntimeException(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderNoDiagramInResourceError()) FOR editorGen»);
		} catch (Exception e) {
			org.eclipse.core.runtime.CoreException thrownExcp = null;
			if (e instanceof org.eclipse.core.runtime.CoreException) {
				thrownExcp = (org.eclipse.core.runtime.CoreException) e;
			} else {
				String msg = e.getLocalizedMessage();
				thrownExcp = new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, 
				msg != null ? msg : «EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderDiagramLoadingError()) FOR editorGen», e));
			}
			throw thrownExcp;
		}
	} else {
	«EXPAND throwIncorrectInputException-»
	}	
}
«ENDDEFINE»

«DEFINE getModificationStamp FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public long getModificationStamp(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		return computeModificationStamp(info);
	}
	return super.getModificationStamp(element);
}
«ENDDEFINE»

«DEFINE isDeleted FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isDeleted(Object element) {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document = getDiagramDocument(element);
	if (document != null) {
		org.eclipse.emf.ecore.resource.Resource diagramResource = document.getDiagram().eResource();
		if (diagramResource != null) {
	«IF null == editorGen.application-»
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(diagramResource);
			return file == null || file.getLocation() == null || !file.getLocation().toFile().exists();
	«ELSE-»
			java.io.File file = getFile(diagramResource);
			return file != null && !file.exists();
	«ENDIF-»
		}
	}
	return super.isDeleted(element);
}
«ENDDEFINE»

«DEFINE getResourceSetInfo FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public ResourceSetInfo getResourceSetInfo(Object editorInput) {
	return (ResourceSetInfo) super.getElementInfo(editorInput);
}
«ENDDEFINE»

«DEFINE disposeElementInfo FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void disposeElementInfo(Object element, ElementInfo info) {
	if (info instanceof ResourceSetInfo) {
		ResourceSetInfo resourceSetInfo = (ResourceSetInfo) info;
		resourceSetInfo.dispose();
	}
	super.disposeElementInfo(element, info);
}
«ENDDEFINE»

«DEFINE doValidateState FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void doValidateState(Object element, Object computationContext) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection/*<org.eclipse.core.resources.IFile>*/ files2Validate = new java.util.ArrayList/*<org.eclipse.core.resources.IFile>*/();
		for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = info.getLoadedResourcesIterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null && file.isReadOnly()) {
				files2Validate.add(file);
			}
		}
		org.eclipse.core.resources.ResourcesPlugin.getWorkspace().validateEdit((org.eclipse.core.resources.IFile[]) files2Validate.toArray(new org.eclipse.core.resources.IFile[files2Validate.size()]), computationContext);
	}

	super.doValidateState(element, computationContext);
}
«ENDDEFINE»

«DEFINE isReadOnly FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isReadOnly(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		«EXPAND callUpdateCache-»
		return info.isReadOnly();
	}
	return super.isReadOnly(element);
}
«ENDDEFINE»

«DEFINE isModifiable FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isModifiable(Object element) {
	if (!isStateValidated(element)) {
		if («IF null == editorGen.application»element instanceof «EXPAND fileEditorInputClassFQName» || «ENDIF»element instanceof «EXPAND uriEditorInputClassFQName») {
			return true;
		}
	}
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		«EXPAND callUpdateCache-»
		return info.isModifiable();
	}
	return super.isModifiable(element);
}
«ENDDEFINE»

«DEFINE callUpdateCache FOR gmfgen::GenDiagram-»
if (info.isUpdateCache()) {
	try {
		updateCache(element);
	} catch (org.eclipse.core.runtime.CoreException ex) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderIsModifiable()) FOR editorGen», ex);
		// Error message to log was initially taken from org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable
	}
}
«ENDDEFINE»

«DEFINE updateCache FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void updateCache(Object element) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = info.getLoadedResourcesIterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
	«IF null == editorGen.application-»
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null && file.isReadOnly()) {
	«ELSE-»
			java.io.File file = getFile(nextResource);
			if (file != null && file.exists() && !file.canWrite()) {
	«ENDIF-»
				info.setReadOnly(true);
				info.setModifiable(false);
				return;
			}
		}
		info.setReadOnly(false);
		info.setModifiable(true);
		return;
	}
}
«ENDDEFINE»

«DEFINE doUpdateStateCache FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void doUpdateStateCache(Object element) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		info.setUpdateCache(true);
	}
	super.doUpdateStateCache(element);
}
«ENDDEFINE»

«DEFINE isSynchronized FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isSynchronized(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		return info.isSynchronized();
	}
	return super.isSynchronized(element);
}
«ENDDEFINE»

«DEFINE getResetRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.core.runtime.jobs.ISchedulingRule getResetRule(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection/*<org.eclipse.core.runtime.jobs.ISchedulingRule>*/ rules = new java.util.ArrayList/*<org.eclipse.core.runtime.jobs.ISchedulingRule>*/();
		for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = info.getLoadedResourcesIterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null) {
				rules.add(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(file));
			}
		}
		return new org.eclipse.core.runtime.jobs.MultiRule((org.eclipse.core.runtime.jobs.ISchedulingRule[]) rules.toArray(new org.eclipse.core.runtime.jobs.ISchedulingRule[rules.size()]));
	}
	return null;
}
«ENDDEFINE»

«DEFINE getSaveRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.core.runtime.jobs.ISchedulingRule getSaveRule(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection/*<org.eclipse.core.runtime.jobs.ISchedulingRule>*/ rules = new java.util.ArrayList/*<org.eclipse.core.runtime.jobs.ISchedulingRule>*/();
		for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = info.getLoadedResourcesIterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null) {
				rules.add(computeSchedulingRule(file));
			}
		}
		return new org.eclipse.core.runtime.jobs.MultiRule((org.eclipse.core.runtime.jobs.ISchedulingRule[]) rules.toArray(new org.eclipse.core.runtime.jobs.ISchedulingRule[rules.size()]));
	}
	return null;
}
«ENDDEFINE»

«DEFINE getSynchronizeRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.core.runtime.jobs.ISchedulingRule getSynchronizeRule(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection/*<org.eclipse.core.runtime.jobs.ISchedulingRule>*/ rules = new java.util.ArrayList/*<org.eclipse.core.runtime.jobs.ISchedulingRule>*/();
		for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = info.getLoadedResourcesIterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null) {
				rules.add(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().refreshRule(file));
			}
		}
		return new org.eclipse.core.runtime.jobs.MultiRule((org.eclipse.core.runtime.jobs.ISchedulingRule[]) rules.toArray(new org.eclipse.core.runtime.jobs.ISchedulingRule[rules.size()]));
	}
	return null;
}
«ENDDEFINE»

«DEFINE getValidateStateRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.core.runtime.jobs.ISchedulingRule getValidateStateRule(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		java.util.Collection/*<org.eclipse.core.runtime.jobs.ISchedulingRule>*/ files = new java.util.ArrayList/*<org.eclipse.core.runtime.jobs.ISchedulingRule>*/();
		for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = info.getLoadedResourcesIterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
			if (file != null) {
				files.add(file);
			}
		}
		return org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().validateEditRule((org.eclipse.core.resources.IFile[]) files.toArray(new org.eclipse.core.resources.IFile[files.size()]));
	}
	return null;
}
«ENDDEFINE»

«DEFINE computeSchedulingRule FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.core.runtime.jobs.ISchedulingRule computeSchedulingRule(org.eclipse.core.resources.IResource toCreateOrModify) {
	if (toCreateOrModify.exists())
		return org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(toCreateOrModify);

	org.eclipse.core.resources.IResource parent = toCreateOrModify;
	do {
		/*
		 * XXX This is a workaround for
		 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=67601
		 * IResourceRuleFactory.createRule should iterate the hierarchy
		 * itself.
		 */
		toCreateOrModify = parent;
		parent = toCreateOrModify.getParent();
	} while (parent != null && !parent.exists());

	return org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRuleFactory().createRule(toCreateOrModify);
}
«ENDDEFINE»

«DEFINE doSynchronize FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void doSynchronize(Object element, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = info.getLoadedResourcesIterator(); it.hasNext();) {
			org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
			handleElementChanged(info, nextResource, monitor);	
		}
		return;
	}
	super.doSynchronize(element, monitor);
}
«ENDDEFINE»

«DEFINE handleElementChanged FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void handleElementChanged(ResourceSetInfo info, org.eclipse.emf.ecore.resource.Resource changedResource, org.eclipse.core.runtime.IProgressMonitor monitor) {
	«IF null == editorGen.application-»
	org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(changedResource);
	if (file != null) {
		try {
			file.refreshLocal(org.eclipse.core.resources.IResource.DEPTH_INFINITE, monitor);
		} catch (org.eclipse.core.runtime.CoreException ex) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderHandleElementContentChanged()) FOR editorGen», ex);
			// Error message to log was initially taken from org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileDocumentProvider_handleElementContentChanged
		}
	}
	«ENDIF-»
	changedResource.unload();
	
	fireElementContentAboutToBeReplaced(info.getEditorInput());
	removeUnchangedElementListeners(info.getEditorInput(), info);
	info.fStatus = null;
	try {
		setDocumentContent(info.fDocument, info.getEditorInput());
	} catch (org.eclipse.core.runtime.CoreException e) {
		info.fStatus = e.getStatus();
	}
«REM»TODO: Remove this if and call setModificationStamp only from doSaveDocument method«ENDREM»«-»
	if (!info.fCanBeSaved) {
		info.setModificationStamp(computeModificationStamp(info));
	}
	addUnchangedElementListeners(info.getEditorInput(), info);
	fireElementContentReplaced(info.getEditorInput());
}
«ENDDEFINE»

«DEFINE doSaveDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void doSaveDocument(org.eclipse.core.runtime.IProgressMonitor monitor, Object element, org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, boolean overwrite) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		if (!overwrite && !info.isSynchronized()) {
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 
				«IF null == editorGen.application»org.eclipse.core.resources.IResourceStatus.OUT_OF_SYNC_LOCAL«ELSE»org.eclipse.core.runtime.IStatus.ERROR«ENDIF», 
				«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentUnsynchronizedFileSaveError()) FOR editorGen», 
				null));
		}
	«IF null == editorGen.application-»
		info.stopResourceListening();
	«ENDIF-»
		fireElementStateChanging(element);
		try {
			monitor.beginTask(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveDiagramTask()) FOR editorGen», info.getResourceSet().getResources().size() + 1); //"Saving diagram"
			for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = info.getLoadedResourcesIterator(); it.hasNext();) {
				org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
				monitor.setTaskName(org.eclipse.osgi.util.NLS.bind(
						«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveNextResourceTask()) FOR editorGen», 
						nextResource.getURI()));
				if (nextResource.isLoaded() && !info.getEditingDomain().isReadOnly(nextResource)) {
					try {
						nextResource.save(«EXPAND xpt::Common::getSaveOptions»);
					} catch (java.io.IOException e) {
						fireElementStateChangeFailed(element);
						throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
					}
				}
				monitor.worked(1);
			}
			monitor.done();
			info.setModificationStamp(computeModificationStamp(info));
		} catch (RuntimeException x) {
			fireElementStateChangeFailed(element);
			throw x;
		} «IF null == editorGen.application» finally {
			info.startResourceListening();
		} «ENDIF»
	} else {
		org.eclipse.emf.common.util.URI newResoruceURI;
		java.util.List affectedFiles = null;
		«IF null == editorGen.application»if (element instanceof «EXPAND fileEditorInputClassFQName») {
			org.eclipse.core.resources.IFile newFile = ((«EXPAND fileEditorInputClassFQName») element).getFile();
			affectedFiles = java.util.Collections.singletonList(newFile);
			newResoruceURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI(newFile.getFullPath().toString(), true);
		} else «ENDIF»if(element instanceof «EXPAND uriEditorInputClassFQName») {
			newResoruceURI = ((«EXPAND uriEditorInputClassFQName») element).getURI();
		} else {
			fireElementStateChangeFailed(element);
			«EXPAND throwIncorrectInputException-»
		}
		if (false == document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0,
			"Incorrect document used: " + document + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument", null));«EXPAND xpt::Common::nonNLS(1)»«EXPAND xpt::Common::nonNLS(2)»
		}
		org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument diagramDocument = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document;
		final org.eclipse.emf.ecore.resource.Resource newResource = diagramDocument.getEditingDomain().getResourceSet().createResource(newResoruceURI);
		final org.eclipse.gmf.runtime.notation.Diagram diagramCopy = (org.eclipse.gmf.runtime.notation.Diagram) org.eclipse.emf.ecore.util.EcoreUtil.copy(diagramDocument.getDiagram());
		try {
			new org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand(diagramDocument.getEditingDomain(), org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveAs()) FOR editorGen», diagramCopy.getName()), affectedFiles) {
				protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
					newResource.getContents().add(diagramCopy);					
					return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult();
				}
			}.execute(monitor, null);
			newResource.save(«EXPAND xpt::Common::getSaveOptions»);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, e.getLocalizedMessage(), null));
		} catch (java.io.IOException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, e.getLocalizedMessage(), null));
		}
		newResource.unload();
	}
}
«ENDDEFINE»

«DEFINE handleElementMoved FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void handleElementMoved(org.eclipse.ui.IEditorInput input, org.eclipse.emf.common.util.URI uri) {
	«IF null == editorGen.application»if (input instanceof «EXPAND fileEditorInputClassFQName») {
		org.eclipse.core.resources.IFile newFile = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getFile(new org.eclipse.core.runtime.Path(org.eclipse.emf.common.util.URI.decode(uri.path())).removeFirstSegments(1));
		fireElementMoved(input, newFile == null ? null : new org.eclipse.ui.part.FileEditorInput(newFile));
		return;
	}«ENDIF»
	// TODO: append suffix to the URI! (use diagram as a parameter)
	fireElementMoved(input, new org.eclipse.emf.common.ui.URIEditorInput(uri));
}
«ENDDEFINE»

«DEFINE createInputWithEditingDomain FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.ui.IEditorInput createInputWithEditingDomain(org.eclipse.ui.IEditorInput editorInput, org.eclipse.emf.transaction.TransactionalEditingDomain domain) {
	return editorInput;
}
«ENDDEFINE»

«DEFINE getDiagramDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument getDiagramDocument(Object element) {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument doc = getDocument(element);
	if (doc instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
		return (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) doc;
	}
	return null;
}
«ENDDEFINE»

«DEFINE getOperationRunner FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.jface.operation.IRunnableContext getOperationRunner(org.eclipse.core.runtime.IProgressMonitor monitor) {
	return null;
}
«ENDDEFINE»

«DEFINE getFile FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static java.io.File getFile(org.eclipse.emf.ecore.resource.Resource resource) {
	org.eclipse.emf.common.util.URI resourceUri = resource.getURI();
	if (resourceUri != null && resourceUri.isFile()) {
		java.io.File file = new java.io.File(resourceUri.toFileString());
		if (!file.isDirectory()) {
			return file;
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentProviderIsModifiable())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentProviderHandleElementContentChanged())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentProviderIncorrectInputError())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentProviderNoDiagramInResourceError())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentProviderDiagramLoadingError())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentUnsynchronizedFileSaveError())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentSaveDiagramTask())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentSaveNextResourceTask())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentSaveAs())-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentProviderIsModifiable(), "Updating cache failed")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentProviderHandleElementContentChanged(), "Failed to refresh hierarchy for changed resource")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentProviderIncorrectInputError(), "Incorrect element used: {0} instead of " + editorGen.application == null ? "{1} or {2}" : "{1}")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentProviderNoDiagramInResourceError(), "Diagram is not present in resource")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentProviderDiagramLoadingError(), "Error loading diagram")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentUnsynchronizedFileSaveError(), "The file has been changed on the file system")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentSaveDiagramTask(), "Saving diagram")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentSaveNextResourceTask(), "Saving {0}")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentSaveAs(), "Saving {0} diagram as")-»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram-»
«ENDDEFINE»@


1.20
log
@[209917] - ConcurrentModificationException
@
text
@d121 1
a121 1
			new Object[] {element, «IF null == editorGen.application»"«EXPAND fileEditorInputClassFQName»", «ENDIF»"«EXPAND uriEditorInputClassFQName»"}), «EXPAND xpt::Common::nonNLS(1)»«IF null == editorGen.application» «EXPAND xpt::Common::nonNLS(2)»«ENDIF» 
d193 1
a193 1
	editingDomain.setID("«editingDomainID»"); «EXPAND xpt::Common::nonNLS»
d646 1
a646 1
			"Incorrect document used: " + document + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument", null)); «EXPAND xpt::Common::nonNLS(1)» «EXPAND xpt::Common::nonNLS(2)»
@


1.19
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d158 1
a158 1
	for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
d341 2
a342 2
		java.util.Collection files2Validate = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
d401 1
a401 1
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
d449 2
a450 2
		java.util.Collection rules = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
d468 2
a469 2
		java.util.Collection rules = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
d487 2
a488 2
		java.util.Collection rules = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
d506 2
a507 2
		java.util.Collection files = new java.util.ArrayList();
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
d547 1
a547 1
		for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
a604 1
		java.util.List resources = info.getResourceSet().getResources();
d606 2
a607 2
			monitor.beginTask(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveDiagramTask()) FOR editorGen», resources.size() + 1); //"Saving diagram"
			for (java.util.Iterator it = resources.iterator(); it.hasNext();) {
@


1.18
log
@[191960] - User is not able to overwrite external resource changes
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.17
log
@[185940] - Strange behaviour of the GMF-RCP editor
@
text
@d596 2
a597 1
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.core.runtime.IStatus.OK, 
@


1.16
log
@[187772] - "Save as..." doesn't work
@
text
@d581 1
d623 1
@


1.15
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d121 1
a121 1
			new Object[] {element, «IF null == editorGen.application»"«EXPAND fileEditorInputClassFQName»", «ENDIF»"«EXPAND uriEditorInputClassFQName»"}), 
d628 37
d730 1
d742 1
@


1.14
log
@do not generate superfluous null check
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.13
log
@Saving non-readonly resources.
@
text
@a253 3
			if (resource == null) {
				throw new RuntimeException(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderUnableToLoadResourceError()) FOR editorGen»);
			}
a687 1
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForDocumentProviderUnableToLoadResourceError())-»
a698 1
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForDocumentProviderUnableToLoadResourceError(), "Unable to load diagram resource")-»
@


1.12
log
@[139733] akarjakina - i18n support
@
text
@d614 1
a614 1
				if (nextResource.isLoaded()) {
@


1.11
log
@[179970] - Adopt code generater to make use of EMF "conditional resource saving"
@
text
@d118 5
a122 1
throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, "Incorrect element used: " + element + " instead of «IF null == editorGen.application»«EXPAND fileEditorInputClassFQName» or «ENDIF»«EXPAND uriEditorInputClassFQName»", null)); «EXPAND xpt::Common::nonNLS» «EXPAND xpt::Common::nonNLS(2)»
d255 1
a255 1
				throw new RuntimeException("Unable to load diagram resource");
d272 1
a272 1
			throw new RuntimeException("Diagram is not present in resource");
d279 2
a280 1
				thrownExcp = new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, msg != null ? msg : "Error loading diagram", e)); «EXPAND xpt::Common::nonNLS»
d393 2
a394 1
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(«EXPAND xpt::Externalizer::accessorCall(i18nDocumentProviderKey("isModifiable")) FOR editorGen», ex);
d569 2
a570 1
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(«EXPAND xpt::Externalizer::accessorCall(i18nDocumentProviderKey("handleElementContentChanged")) FOR editorGen», ex);
d598 3
a600 1
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.core.runtime.IStatus.OK, "The file has been changed on the file system", null)); «EXPAND xpt::Common::nonNLS»
d608 1
a608 1
			monitor.beginTask("Saving diagram", resources.size() + 1);
d611 3
a613 1
				monitor.setTaskName("Saving " + nextResource.getURI());
d688 9
a696 2
	«EXPAND xpt::Externalizer::accessorField(i18nDocumentProviderKey("isModifiable"))-»
	«EXPAND xpt::Externalizer::accessorField(i18nDocumentProviderKey("handleElementContentChanged"))-»
d700 9
a708 2
«EXPAND xpt::Externalizer::messageEntry(i18nDocumentProviderKey("isModifiable"), i18nDocumentProviderKey("isModifiable"))-»
«EXPAND xpt::Externalizer::messageEntry(i18nDocumentProviderKey("handleElementContentChanged"), i18nDocumentProviderKey("handleElementContentChanged"))-»
@


1.10
log
@User should be able to configure whether NON-NLS markers are shown or not
@
text
@a599 2
			java.util.Map options = new java.util.HashMap();
			options.put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
d603 1
a603 1
				if (nextResource.isLoaded() && (!nextResource.isTrackingModification() || nextResource.isModified())) {
d605 1
a605 1
						nextResource.save(options);
@


1.9
log
@[175402] - Generated Diagram code, leaks the whole semantic and notation resources
@
text
@d118 1
a118 1
throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, "Incorrect element used: " + element + " instead of «IF null == editorGen.application»«EXPAND fileEditorInputClassFQName» or «ENDIF»«EXPAND uriEditorInputClassFQName»", null)); //$NON-NLS-1$ //$NON-NLS-2$
d189 1
a189 1
	editingDomain.setID("«editingDomainID»"); //$NON-NLS-1$
d275 1
a275 1
				thrownExcp = new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, msg != null ? msg : "Error loading diagram", e)); //$NON-NLS-1$
d591 1
a591 1
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.core.runtime.IStatus.OK, "The file has been changed on the file system", null)); //$NON-NLS-1$
@


1.8
log
@Removing additional dependencied to make the code compilable with RCP.
@
text
@a106 2
	ResourceSetModificationListener modificationListener = new ResourceSetModificationListener(info);
	info.getResourceSet().eAdapters().add(modificationListener);
@


1.7
log
@[175169] - Double-click on diagram in Project Explorer should open corresponding diagram editor as before
@
text
@d14 1
d390 1
a390 1
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable, ex);
d565 1
a565 1
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileDocumentProvider_handleElementContentChanged, ex);
d680 10
@


1.6
log
@Refactoring DocumentProvider.
@
text
@a37 2
	«EXPAND getSynchronizationStamp-»
	
d43 4
a46 2
	
	«EXPAND doValidateState-»
d57 3
d61 1
a61 1
	«EXPAND getResetRule-»
d63 1
a63 1
	«EXPAND getSaveRule-»
d65 1
a65 1
	«EXPAND getSynchronizeRule-»
d67 2
a68 3
	«EXPAND getValidateStateRule-»
	
	«EXPAND computeSchedulingRule-»
a71 2
	«EXPAND markWholeResourceSetAsDirty-»
	
d83 4
d100 9
a108 1
	«EXPAND createElementInfoBody-»
d113 2
a114 2
if (false == element instanceof «EXPAND editorInputClassFQName») {
	throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.ui.part.FileEditorInput", null)); //$NON-NLS-1$ //$NON-NLS-2$
d118 3
a120 1
«DEFINE editorInputClassFQName FOR gmfgen::GenDiagram»org.eclipse.ui.part.FileEditorInput«ENDDEFINE»
d122 1
a122 3
«DEFINE createElementInfoBody FOR gmfgen::GenDiagram-»
org.eclipse.ui.IEditorInput editorInput = (org.eclipse.ui.IEditorInput) element;
org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) createDocument(editorInput);
d124 1
a124 7
ResourceSetInfo info = new ResourceSetInfo(document, editorInput);
info.setModificationStamp(computeModificationStamp(info));
info.fStatus = null;
ResourceSetModificationListener modificationListener = new ResourceSetModificationListener(info);
info.getResourceSet().eAdapters().add(modificationListener);
return info;
«ENDDEFINE»
d131 1
a131 1
	setDocumentContent(document, («EXPAND editorInputClassFQName») element);
d167 1
a167 1
		java.io.File file = getFile(nextResource.getURI());
a225 2
	«EXPAND checkEditorInputInstance-»
	org.eclipse.core.resources.IStorage storage = ((«EXPAND editorInputClassFQName») element).getStorage();
a226 11
//	org.eclipse.gmf.runtime.notation.Diagram diagram = diagramDocument.getDiagram();

//	org.eclipse.emf.transaction.TransactionalEditingDomain domain = diagramDocument.getEditingDomain();
//	diagram = org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
//	if (myContentObjectURI != null && diagram != null && diagram.eResource() != null && !diagram.eResource().getURIFragment(diagram).equals(myContentObjectURI)) {
//		org.eclipse.emf.ecore.EObject anotherContentObject = diagram.eResource().getEObject(myContentObjectURI);
//		document.setContent(anotherContentObject);
//	} else {
//		document.setContent(diagram);
//	}

d228 55
a282 2
	org.eclipse.gmf.runtime.notation.Diagram diagram = org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
	document.setContent(diagram);
a296 11
«DEFINE getSynchronizationStamp FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public long getSynchronizationStamp(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		return info.getModificationStamp();
	}
	return super.getSynchronizationStamp(element);
}
«ENDDEFINE»

d300 11
a310 5
	if (element instanceof org.eclipse.ui.IFileEditorInput) {
		org.eclipse.ui.IFileEditorInput input = (org.eclipse.ui.IFileEditorInput) element;
		org.eclipse.core.runtime.IPath path = input.getFile().getLocation();
		if (path == null) {
			return true;
a311 1
		return !path.toFile().exists();
d371 1
a371 1
		if (element instanceof org.eclipse.ui.part.FileEditorInput) {
d387 1
a387 1
		updateCache((org.eclipse.ui.IStorageEditorInput) element);
d396 2
a397 2
protected void updateCache(org.eclipse.ui.IStorageEditorInput input) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(input);
d401 1
d404 4
d544 1
a544 1
	if (info != null && element instanceof org.eclipse.ui.part.FileEditorInput) {
a554 10
«DEFINE markWholeResourceSetAsDirty FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void markWholeResourceSetAsDirty(org.eclipse.emf.ecore.resource.ResourceSet resourceSet) {
	for (java.util.Iterator it = resourceSet.getResources().iterator(); it.hasNext();) {
		org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
		nextResource.setModified(true);
	}
}
«ENDDEFINE»

d630 7
a636 2
	org.eclipse.core.resources.IFile newFile = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getFile(new org.eclipse.core.runtime.Path(org.eclipse.emf.common.util.URI.decode(uri.path())).removeFirstSegments(1));
	fireElementMoved(input, newFile == null ? null : new org.eclipse.ui.part.FileEditorInput(newFile));
d665 14
@


1.5
log
@Removing *EditorInputProxies - only EditorInputs are used in generated code from now.
@
text
@d20 1
a20 1
public class «documentProviderClassName» extends org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDocumentProvider implements org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider {
d24 4
d34 1
a34 1
	«EXPAND setDocumentContentFromStorage-»
d48 2
d54 2
a77 2
	«EXPAND handleElementDeleted-»

d82 2
d95 35
a129 5
	if (false == element instanceof org.eclipse.ui.part.FileEditorInput) {
		throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.ui.part.FileEditorInput", null)); //$NON-NLS-1$ //$NON-NLS-2$
	}
	org.eclipse.ui.part.FileEditorInput editorInput = (org.eclipse.ui.part.FileEditorInput) element;
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) createDocument(editorInput);
d131 11
a141 6
	ResourceSetInfo info = new ResourceSetInfo(document, editorInput);
	info.setModificationStamp(computeModificationStamp(info));
	info.fStatus = null;
	ResourceSetModificationListener modificationListener = new ResourceSetModificationListener(info);
	info.getResourceSet().eAdapters().add(modificationListener);
	return info;
d151 1
d160 6
d181 1
d217 1
a217 1
«DEFINE setDocumentContentFromStorage FOR gmfgen::GenDiagram-»
d219 3
a221 1
protected void setDocumentContentFromStorage(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, org.eclipse.core.resources.IStorage storage) throws org.eclipse.core.runtime.CoreException {
d315 12
d335 5
d344 10
d363 2
a364 2
				info.fIsReadOnly = true;
				info.fIsModifiable = false;
d368 2
a369 2
		info.fIsReadOnly = false;
		info.fIsModifiable = true;
d372 11
a382 1
	super.updateCache(input);
d523 1
d528 2
a529 2
		} catch (org.eclipse.core.runtime.CoreException e) {
			handleCoreException(e, "FileDocumentProvider.handleElementContentChanged");
d532 1
d534 1
a534 1

d557 1
a557 1
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.core.resources.IResourceStatus.OUT_OF_SYNC_LOCAL, "The file has been changed on the file system", null)); //$NON-NLS-1$
d559 1
d561 1
d565 17
a581 1
			«EXPAND saveResourcesCollection-»
d585 1
a585 1
		} finally {
d587 1
a587 6
		}

		if (info != null) {
			info.setModificationStamp(computeModificationStamp(info));
			info.setSynchronized();
		}
a588 1
	super.doSaveDocument(monitor, element, document, overwrite);
a591 20
«DEFINE saveResourcesCollection FOR gmfgen::GenDiagram-»
monitor.beginTask("Saving diagram", resources.size() + 1);
java.util.Map options = new java.util.HashMap();
options.put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
for (java.util.Iterator it = resources.iterator(); it.hasNext();) {
	org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
	monitor.setTaskName("Saving " + nextResource.getURI());
	if (nextResource.isLoaded() && (!nextResource.isTrackingModification() || nextResource.isModified())) {
		try {
			nextResource.save(options);
		} catch (java.io.IOException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
		}
	}
	monitor.worked(1);
}
monitor.done();
«ENDDEFINE»

d594 2
a595 3
protected void handleElementMoved(org.eclipse.ui.part.FileEditorInput input, org.eclipse.core.runtime.IPath path) {
	org.eclipse.core.resources.IWorkspace workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace();
	org.eclipse.core.resources.IFile newFile = workspace.getRoot().getFile(path);
a599 7
«DEFINE handleElementDeleted FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void handleElementDeleted(org.eclipse.ui.part.FileEditorInput input) {
	fireElementDeleted(input);
}
«ENDDEFINE»

d618 7
@


1.4
log
@Using WorkspaceSynchronized to listen notification from the resources subsystem.
@
text
@a21 4
	«EXPAND attributes-»
	
	«EXPAND constructors-»
	
d28 1
a28 1
	«EXPAND setDocumentContent-»
a83 17
«DEFINE attributes FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private final String myContentObjectURI;
«ENDDEFINE»

«DEFINE constructors FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public «documentProviderClassName»() {
	this(null);
}

	«EXPAND xpt::Common::generatedMemberComment»
public «documentProviderClassName»(String rootObjectURI) {
	myContentObjectURI = rootObjectURI;
}
«ENDDEFINE»

d87 2
a88 2
	if (false == element instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy) {
		throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy", null)); //$NON-NLS-1$ //$NON-NLS-2$
d90 1
a90 1
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy editorInput = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy) element;
d124 3
a126 1
	return new org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument();
d130 33
a162 9
«DEFINE setDocumentContent FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected boolean setDocumentContent(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, org.eclipse.ui.IEditorInput editorInput) throws org.eclipse.core.runtime.CoreException {
	if (editorInput instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy && document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
		org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy editorInputProxy = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy) editorInput;
		org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument diagramDocument = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document;
		diagramDocument.setEditingDomain(editorInputProxy.getEditingDomain());
	}
	return super.setDocumentContent(document, editorInput);
d170 10
a179 1
	org.eclipse.gmf.runtime.notation.Diagram diagram = diagramDocument.getDiagram();
d182 2
a183 7
	diagram = org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
	if (myContentObjectURI != null && diagram != null && diagram.eResource() != null && !diagram.eResource().getURIFragment(diagram).equals(myContentObjectURI)) {
		org.eclipse.emf.ecore.EObject anotherContentObject = diagram.eResource().getEObject(myContentObjectURI);
		document.setContent(anotherContentObject);
	} else {
		document.setContent(diagram);
	}
d201 3
a203 5
	if (element instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy) {
		ResourceSetInfo info = getResourceSetInfo(element);
		if (info != null) {
			return info.getModificationStamp();
		}
d266 1
a266 1
		if (element instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy) {
d409 1
a409 1
	if (info != null && element instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy) {
d510 1
a510 1
protected void handleElementMoved(org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy input, org.eclipse.core.runtime.IPath path) {
d519 1
a519 1
protected void handleElementDeleted(org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy input) {
d527 1
a527 5
	if (editorInput instanceof org.eclipse.ui.IFileEditorInput) {
		return new org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy((org.eclipse.ui.IFileEditorInput) editorInput, domain);
	}
	assert false;
	return null;
@


1.3
log
@Reusing DocumentProvider.xpt from URIDiagramDocumentProvider.xpt
@
text
@a65 2
	«EXPAND handleResourcesMoved-»
	
d68 1
a68 1
	«EXPAND handleResourcesChanged-»
d70 1
a70 1
	«EXPAND doSaveDocument-»
a81 2
	«EXPAND xpt::editor::ResourceSetSynchronizer::ResourceSetSynchronizer-»
	
d403 4
a406 1
		handleResourcesChanged(info, info.getResourceSet().getResources(), monitor);
a412 12
«DEFINE handleResourcesMoved FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void handleResourcesMoved(java.util.Map movedPathToResource) {
	for (java.util.Iterator it = movedPathToResource.entrySet().iterator(); it.hasNext();) {
		java.util.Map.Entry nextEntry = (java.util.Map.Entry) it.next();
		org.eclipse.core.runtime.IPath newPath = (org.eclipse.core.runtime.IPath) nextEntry.getKey();
		org.eclipse.emf.ecore.resource.Resource resource = (org.eclipse.emf.ecore.resource.Resource) nextEntry.getValue();
		resource.setURI(org.eclipse.emf.common.util.URI.createURI(newPath.toString()));
	}
}
«ENDDEFINE»

d423 1
a423 1
«DEFINE handleResourcesChanged FOR gmfgen::GenDiagram-»
d425 7
a431 11
protected void handleResourcesChanged(ResourceSetInfo info, java.util.Collection changedResources, org.eclipse.core.runtime.IProgressMonitor monitor) {
	info.stopResourceListening();
	for (java.util.Iterator it = changedResources.iterator(); it.hasNext();) {
		org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
		org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(nextResource);
		if (file != null) {
			try {
				file.refreshLocal(org.eclipse.core.resources.IResource.DEPTH_INFINITE, monitor);
			} catch (org.eclipse.core.runtime.CoreException e) {
				handleCoreException(e, "FileDocumentProvider.handleElementContentChanged");
			}
a432 1
		nextResource.unload();
d434 1
a434 1
	info.startResourceListening();
@


1.2
log
@Adding NONNLS
@
text
@d480 1
d482 1
a482 13
			monitor.beginTask("Saving diagram editor", info.getResourceSet().getResources().size());
			for (java.util.Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
				org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
				monitor.setTaskName("Saving " + nextResource.getURI());
				if (nextResource.isLoaded() && (!nextResource.isTrackingModification() || nextResource.isModified())) {
					nextResource.save(java.util.Collections.EMPTY_MAP);
				}
				monitor.worked(1);
			}
			monitor.done();
		} catch (java.io.IOException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
d499 20
@


1.1
log
@Document Provider generated using xpand templates.
@
text
@d113 1
a113 1
		throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy", null));
d476 1
a476 1
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.core.resources.IResourceStatus.OUT_OF_SYNC_LOCAL, "The file has been changed on the file system", null));
@

