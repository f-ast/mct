head	1.11;
access;
symbols
	v20081022-1925:1.11
	v20081015-1925:1.11
	v20081008-1925:1.11
	v20081001-1925:1.11
	v20080930-1130:1.11
	v20080926-1245:1.11
	v20080924-1925:1.11
	v20080917-1925:1.11
	v20080911-1728:1.11
	v20080910-1520:1.11
	v20080903-1520:1.11
	v20080827-1520:1.11
	v20080813-1520:1.11
	v20080806-1520:1.10
	v20080722-1827:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080528-1052:1.10
	v20080521:1.10
	v20080516-1543:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080508-2000:1.10
	v20080507-1326:1.10
	v20080503-1740:1.9
	v20080501-1739:1.9
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080411-0411:1.9
	v20080404-1111:1.9
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080207-0207:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070928-0000:1.9
	v20070921-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.5
	v20070504-1000:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2008.08.13.13.50.34;	author dstadnik;	state Exp;
branches;
next	1.10;
commitid	440348a2e6584567;

1.10
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	39124821b4de4567;

1.9
date	2007.06.19.09.01.10;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	1b846779b554567;

1.8
date	2007.06.06.14.42.27;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	16514666c7d24567;

1.7
date	2007.06.06.10.32.21;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	1ca546668d354567;

1.6
date	2007.05.18.21.17.19;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	2591464e17d14567;

1.5
date	2007.05.15.18.18.16;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	186b4649f9674567;

1.4
date	2007.05.07.11.53.55;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	7329463f13504567;

1.3
date	2007.05.04.15.05.21;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	2fa4463b4bb14567;

1.2
date	2007.05.03.11.02.26;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	ed04639c1424567;

1.1
date	2007.05.03.09.58.55;	author dstadnik;	state Exp;
branches;
next	;
commitid	518a4639b24f4567;


desc
@@


1.11
log
@[231322] allow to specify editable features
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«EXTENSION xpt::parsers::i18n»

«DEFINE className FOR gmfgen::GenDiagram»«defaultAbstractParserClassName()»«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenDiagram»«parsersPackageName».«EXPAND className»«ENDDEFINE»

«DEFINE AbstractParser FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «parsersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public abstract class «EXPAND className» implements org.eclipse.gmf.runtime.common.ui.services.parser.IParser {

	«EXPAND xpt::Common::generatedMemberComment»
	protected final org.eclipse.emf.ecore.EAttribute[] features;

	«EXPAND xpt::Common::generatedMemberComment»
	protected final org.eclipse.emf.ecore.EAttribute[] editableFeatures;

	«EXPAND xpt::Common::generatedMemberComment»
	private String viewPattern;

	«EXPAND xpt::Common::generatedMemberComment»
	private String editorPattern;

	«EXPAND xpt::Common::generatedMemberComment»
	private String editPattern;

	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.emf.ecore.EAttribute[] features) {
		if (features == null || java.util.Arrays.asList(features).contains(null)) {
			throw new IllegalArgumentException();
		}
		this.editableFeatures = this.features = features;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.emf.ecore.EAttribute[] features,
			org.eclipse.emf.ecore.EAttribute[] editableFeatures) {
		if (features == null || java.util.Arrays.asList(features).contains(null)) {
			throw new IllegalArgumentException();
		}
		this.features = features;
		if (editableFeatures == null || java.util.Arrays.asList(editableFeatures).contains(null)) {
			throw new IllegalArgumentException();
		}
		this.editableFeatures = editableFeatures;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public String getViewPattern() {
		return viewPattern;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setViewPattern(String viewPattern) {
		this.viewPattern = viewPattern;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public String getEditorPattern() {
		return editorPattern;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setEditorPattern(String editorPattern) {
		this.editorPattern = editorPattern;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public String getEditPattern() {
		return editPattern;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setEditPattern(String editPattern) {
		this.editPattern = editPattern;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean isAffectingEvent(Object event, int flags) {
		if (event instanceof org.eclipse.emf.common.notify.Notification) {
			return isAffectingFeature(((org.eclipse.emf.common.notify.Notification) event).getFeature());
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean isAffectingFeature(Object feature) {
		for (int i = 0; i < features.length; i++) {
			if (features[i] == feature) {
				return true;
			}
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.jface.text.contentassist.IContentAssistProcessor getCompletionProcessor(
			org.eclipse.core.runtime.IAdaptable element) {
		return null;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected Object[] getValues(org.eclipse.emf.ecore.EObject element) {
		Object[] values = new Object[features.length];
		for (int i = 0; i < features.length; i++) {
			values[i] = getValue(element, features[i]);
		}
		return values;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected Object[] getEditableValues(org.eclipse.emf.ecore.EObject element) {
		Object[] values = new Object[editableFeatures.length];
		for (int i = 0; i < editableFeatures.length; i++) {
			values[i] = getValue(element, editableFeatures[i]);
		}
		return values;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected Object getValue(org.eclipse.emf.ecore.EObject element, org.eclipse.emf.ecore.EAttribute feature) {
		Object value = element.eGet(feature);
		Class iClass = feature.getEAttributeType().getInstanceClass();
		if (String.class.equals(iClass)) {
			if (value == null) {
				value = ""; «EXPAND xpt::Common::nonNLS»
			}
		}
		return value;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.ICommand getParseCommand(
			org.eclipse.core.runtime.IAdaptable adapter, Object[] values, int flags) {
		if (values == null || validateNewValues(values).getCode() !=
				org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus.EDITABLE) {
			return org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand.INSTANCE;
		}
		org.eclipse.emf.ecore.EObject element =
				(org.eclipse.emf.ecore.EObject) adapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
		org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain =
				org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(element);
		if (editingDomain == null) {
			return org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand.INSTANCE;
		}
		org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand command =
				new org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand(
						editingDomain, "Set Values"); «EXPAND xpt::Common::nonNLS»
		for (int i = 0; i < values.length; i++) {
			command.compose(getModificationCommand(element, editableFeatures[i], values[i]));
		}
		return command;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.ICommand getModificationCommand(
			org.eclipse.emf.ecore.EObject element, org.eclipse.emf.ecore.EAttribute feature, Object value) {
		value = getValidNewValue(feature, value);
		if (value instanceof InvalidValue) {
			return org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand.INSTANCE;
		}
		org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest request =
				new org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest(element, feature, value);
		return new org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand(request);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus validateNewValues(Object[] values) {
		if (values.length != editableFeatures.length) {
			return org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus.UNEDITABLE_STATUS;
		}
		for (int i = 0; i < values.length; i++) {
			Object value = getValidNewValue(editableFeatures[i], values[i]);
			if (value instanceof InvalidValue) {
				return new org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus(
						«editorGen.plugin.getActivatorQualifiedClassName()».ID,
						org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus.UNEDITABLE,
						value.toString());
			}
		}
		return org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus.EDITABLE_STATUS;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected Object getValidNewValue(org.eclipse.emf.ecore.EAttribute feature, Object value) {
		org.eclipse.emf.ecore.EClassifier type = feature.getEType();
		if (type instanceof org.eclipse.emf.ecore.EDataType) {
			Class iClass = type.getInstanceClass();
			if (Boolean.TYPE.equals(iClass)) {
				if (value instanceof Boolean) {
					// ok
				} else if (value instanceof String) {
					value = Boolean.valueOf((String) value);
				} else {
					value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnexpectedValueTypeMessage()) FOR editorGen», iClass.getName()));
				}
			} else if (Character.TYPE.equals(iClass)) {
				if (value instanceof Character) {
					// ok
				} else if (value instanceof String) {
					String s = (String) value;
					if (s.length() == 0) {
						value = null;
					} else {
						value = new Character(s.charAt(0));
					}
				} else {
					value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnexpectedValueTypeMessage()) FOR editorGen», iClass.getName()));
				}
			} else if (Byte.TYPE.equals(iClass)) {
				if (value instanceof Byte) {
					// ok
				} else if (value instanceof Number) {
					value = new Byte(((Number) value).byteValue());
				} else if (value instanceof String) {
					String s = (String) value;
					if (s.length() == 0) {
						value = null;
					} else {
						try {
							value = Byte.valueOf(s);
						} catch (NumberFormatException nfe) {
							value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserWrongStringConversionMessage()) FOR editorGen», iClass.getName()));
						}
					}
				} else {
					value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnexpectedValueTypeMessage()) FOR editorGen», iClass.getName()));
				}
			} else if (Short.TYPE.equals(iClass)) {
				if (value instanceof Short) {
					// ok
				} else if (value instanceof Number) {
					value = new Short(((Number) value).shortValue());
				} else if (value instanceof String) {
					String s = (String) value;
					if (s.length() == 0) {
						value = null;
					} else {
						try {
							value = Short.valueOf(s);
						} catch (NumberFormatException nfe) {
							value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserWrongStringConversionMessage()) FOR editorGen», iClass.getName()));
						}
					}
				} else {
					value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnexpectedValueTypeMessage()) FOR editorGen», iClass.getName()));
				}
			} else if (Integer.TYPE.equals(iClass)) {
				if (value instanceof Integer) {
					// ok
				} else if (value instanceof Number) {
					value = new Integer(((Number) value).intValue());
				} else if (value instanceof String) {
					String s = (String) value;
					if (s.length() == 0) {
						value = null;
					} else {
						try {
							value = Integer.valueOf(s);
						} catch (NumberFormatException nfe) {
							value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserWrongStringConversionMessage()) FOR editorGen», iClass.getName()));
						}
					}
				} else {
					value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnexpectedValueTypeMessage()) FOR editorGen», iClass.getName()));
				}
			} else if (Long.TYPE.equals(iClass)) {
				if (value instanceof Long) {
					// ok
				} else if (value instanceof Number) {
					value = new Long(((Number) value).longValue());
				} else if (value instanceof String) {
					String s = (String) value;
					if (s.length() == 0) {
						value = null;
					} else {
						try {
							value = Long.valueOf(s);
						} catch (NumberFormatException nfe) {
							value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserWrongStringConversionMessage()) FOR editorGen», iClass.getName()));
						}
					}
				} else {
					value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnexpectedValueTypeMessage()) FOR editorGen», iClass.getName()));
				}
			} else if (Float.TYPE.equals(iClass)) {
				if (value instanceof Float) {
					// ok
				} else if (value instanceof Number) {
					value = new Float(((Number) value).floatValue());
				} else if (value instanceof String) {
					String s = (String) value;
					if (s.length() == 0) {
						value = null;
					} else {
						try {
							value = Float.valueOf(s);
						} catch (NumberFormatException nfe) {
							value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserWrongStringConversionMessage()) FOR editorGen», iClass.getName()));
						}
					}
				} else {
					value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnexpectedValueTypeMessage()) FOR editorGen», iClass.getName()));
				}
			} else if (Double.TYPE.equals(iClass)) {
				if (value instanceof Double) {
					// ok
				} else if (value instanceof Number) {
					value = new Double(((Number) value).doubleValue());
				} else if (value instanceof String) {
					String s = (String) value;
					if (s.length() == 0) {
						value = null;
					} else {
						try {
							value = Double.valueOf(s);
						} catch (NumberFormatException nfe) {
							value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserWrongStringConversionMessage()) FOR editorGen», iClass.getName()));
						}
					}
				} else {
					value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnexpectedValueTypeMessage()) FOR editorGen», iClass.getName()));
				}
			} else if (type instanceof org.eclipse.emf.ecore.EEnum) {
				if (value instanceof String) {
					org.eclipse.emf.ecore.EEnumLiteral literal =
							((org.eclipse.emf.ecore.EEnum) type).getEEnumLiteralByLiteral((String) value);
					if (literal == null) {
						value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnknownLiteralMessage()) FOR editorGen», value));
					} else {
						value = literal.getInstance();
					}
				} else {
					value = new InvalidValue(org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForAbstractParserUnexpectedValueTypeMessage()) FOR editorGen», String.class.getName()));
				}
			}
		}
		return value;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected class InvalidValue {

		«EXPAND xpt::Common::generatedMemberComment»
		private String description;

		«EXPAND xpt::Common::generatedMemberComment»
		public InvalidValue(String description) {
			this.description = description;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public String toString() {
			return description;
		}
	}
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForAbstractParserUnexpectedValueTypeMessage(), "Value of type {0} is expected")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForAbstractParserWrongStringConversionMessage(), "String value does not convert to {0} value")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForAbstractParserUnknownLiteralMessage(), "Unknown literal: {0}")-»
«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForAbstractParserUnexpectedValueTypeMessage())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForAbstractParserWrongStringConversionMessage())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForAbstractParserUnknownLiteralMessage())-»
«ENDDEFINE»
@


1.10
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d34 3
d50 9
d60 4
d130 9
d168 1
a168 1
			command.compose(getModificationCommand(element, features[i], values[i]));
d187 1
a187 1
		if (values.length != features.length) {
d191 1
a191 1
			Object value = getValidNewValue(features[i], values[i]);
@


1.9
log
@[139733] akarjakina - i18n support
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.8
log
@allow to set empty features list
@
text
@d17 3
a19 1
«DEFINE className FOR gmfgen::GenDiagram»AbstractParser«ENDDEFINE»
d188 1
a188 1
					value = new InvalidValue("Value of type Boolean is expected");
d201 1
a201 1
					value = new InvalidValue("Value of type Character is expected");
d216 1
a216 1
							value = new InvalidValue("String value does not convert to Byte value");
d220 1
a220 1
					value = new InvalidValue("Value of type Byte is expected");
d235 1
a235 1
							value = new InvalidValue("String value does not convert to Short value");
d239 1
a239 1
					value = new InvalidValue("Value of type Short is expected");
d254 1
a254 1
							value = new InvalidValue("String value does not convert to Integer value");
d258 1
a258 1
					value = new InvalidValue("Value of type Integer is expected");
d273 1
a273 1
							value = new InvalidValue("String value does not convert to Long value");
d277 1
a277 1
					value = new InvalidValue("Value of type Long is expected");
d292 1
a292 1
							value = new InvalidValue("String value does not convert to Float value");
d296 1
a296 1
					value = new InvalidValue("Value of type Float is expected");
d311 1
a311 1
							value = new InvalidValue("String value does not convert to Double value");
d315 1
a315 1
					value = new InvalidValue("Value of type Double is expected");
d322 1
a322 1
						value = new InvalidValue("Unknown literal: " + value);
d327 1
a327 1
					value = new InvalidValue("Value of type String is expected");
d355 12
@


1.7
log
@remove java5 code
@
text
@d42 1
a42 1
		if (features == null || features.length == 0 || java.util.Arrays.asList(features).contains(null)) {
@


1.6
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d43 1
a43 1
			throw new IllegalArgumentException(java.util.Arrays.toString(features));
@


1.5
log
@Non-nls comment replaced by template call.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.4
log
@[185563] Parsers should use some default pattern if none was specified
@
text
@d117 1
a117 1
				value = ""; //$NON-NLS-1$
d139 1
a139 1
						editingDomain, "Set Values"); //$NON-NLS-1$
@


1.3
log
@add features check
@
text
@d49 1
a49 1
	public final String getViewPattern() {
d59 1
a59 1
	public final String getEditorPattern() {
d69 1
a69 1
	public final String getEditPattern() {
@


1.2
log
@remove extra dash
@
text
@d42 3
@


1.1
log
@refactor message format parser; introduce editor pattern
@
text
@d349 1
a349 1
«DEFINE additions FOR gmfgen::GenDiagram-»«ENDDEFINE»
@

