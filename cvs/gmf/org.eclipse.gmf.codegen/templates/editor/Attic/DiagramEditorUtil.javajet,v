head	1.50;
access;
symbols
	v20081022-1925:1.50
	v20081015-1925:1.50
	v20081008-1925:1.50
	v20081001-1925:1.50
	v20080924-1925:1.50
	v20080917-1925:1.50
	v20080911-1728:1.50
	v20080910-1520:1.50
	v20080903-1520:1.50
	v20080827-1520:1.50
	v20080813-1520:1.50
	v20080806-1520:1.50
	v20070202-0200:1.28
	v20070103-0300:1.49
	M4_20:1.49
	v20061222-1800:1.49
	v20061218-1200:1.49
	v20061214-0000:1.49
	v20061120-1300:1.44
	M3_20:1.41
	v20061117-0800:1.41
	v20061027-1200:1.28
	v20061020-1000:1.28
	v20061013-1330:1.32
	v20060919-0800:1.28
	v20060907-1100:1.28
	M1_20:1.29
	v20060904-1500:1.29
	v20060824-1600:1.28
	v20060817-1500:1.28
	v20060728-0500:1.28
	v20060713-1700:1.28
	R1_0_maintenance:1.28.0.2
	R1_0:1.28
	v20060627-1200:1.28
	v20060626-1420:1.28
	v20060620-0400:1.28
	v20060616-1400:1.28
	v20060616-1200:1.28
	v20060609-1400:1.28
	v20060531-1730:1.28
	v20060530-1930:1.28
	v20060526-1200:1.27
	v20060519-1300:1.27
	v20060519-0800:1.27
	v20060512-1000:1.26
	I20060512-1000:1.26
	I20060505-1400:1.24
	I20060428-1300:1.23
	I20060424-0500:1.23
	I20060424-0300:1.23
	M6_10:1.23
	I20060407-1200:1.23
	I20060331-1000:1.22
	I20060324-0300:1.21
	I20060317-1300:1.20
	I20060317-1200:1.20
	I20060316-1300:1.20
	I20060309-1300:1.20
	M5_10:1.18
	S20060303-1600:1.18
	I20060227-1730:1.16
	I20060216-1945:1.15
	I20060210-1715:1.15
	I20060209-1815:1.15
	I20060203-0830:1.10
	I20060202-1415:1.10
	I20060129-1145:1.10
	I20060127-0900:1.10
	I20060120-1530:1.8
	I20060113-1700:1.8
	M4_10:1.8
	I20060107-1100:1.8
	I20060105-1630:1.8
	I20051230-1230:1.8
	I20051223-1100:1.8
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.7
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.5
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.50
date	2007.02.02.19.45.10;	author atikhomirov;	state dead;
branches;
next	1.49;
commitid	1a2145c394c34567;

1.49
date	2006.12.11.09.58.32;	author radvorak;	state Exp;
branches;
next	1.48;
commitid	5d2a457d2bc44567;

1.48
date	2006.12.07.13.09.08;	author ashatalin;	state Exp;
branches;
next	1.47;
commitid	58e6457812734567;

1.47
date	2006.12.01.19.10.28;	author radvorak;	state Exp;
branches;
next	1.46;
commitid	144145707e224567;

1.46
date	2006.11.22.14.59.29;	author dstadnik;	state Exp;
branches;
next	1.45;
commitid	2e20456465d04567;

1.45
date	2006.11.21.11.43.34;	author dstadnik;	state Exp;
branches;
next	1.44;
commitid	109b4562e6644567;

1.44
date	2006.11.20.18.46.04;	author ashatalin;	state Exp;
branches;
next	1.43;
commitid	2b754561f7eb4567;

1.43
date	2006.11.17.12.15.36;	author dstadnik;	state Exp;
branches;
next	1.42;
commitid	153d455da7e74567;

1.42
date	2006.11.17.11.46.55;	author dstadnik;	state Exp;
branches;
next	1.41;
commitid	3ca455da12e4567;

1.41
date	2006.11.10.15.56.09;	author ashatalin;	state Exp;
branches;
next	1.40;
commitid	7c954554a1184567;

1.40
date	2006.11.03.20.42.47;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.11.03.12.28.31;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.37;

1.37
date	2006.10.24.17.25.11;	author dstadnik;	state Exp;
branches;
next	1.36;

1.36
date	2006.10.24.15.55.35;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.10.24.14.37.53;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.10.19.13.49.53;	author ashatalin;	state Exp;
branches;
next	1.33;

1.33
date	2006.10.16.12.50.45;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2006.09.29.18.48.22;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.09.29.16.56.25;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.09.27.17.03.35;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.08.01.18.02.34;	author ashatalin;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.29.13.55.19;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.15.17.30.44;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.10.17.20.15;	author atikhomirov;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.10.14.05.58;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.05.03.19.19.34;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.06.13.05.16;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.29.15.01.32;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.03.18.03.12.51;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.03.07.16.41.22;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.01.14.55.16;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.28.18.15.00;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.17.12.02.06;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.13.05.28;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.08.00.17.45;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.26.18.36.27;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.20.18.29.34;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.15.00.13.01;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.07.15.41.03;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.19.17.56.08;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.50
log
@DiagramEditorUtil with xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="DiagramEditorUtilGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.io.IOException;
import java.util.Collections;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.operations.OperationHistoryFactory;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.SubProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.ui.PartInitException;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> {

	/**
	 * @@generated
	 */
	public static boolean openDiagram(Resource diagram) throws PartInitException {
<%if (editorGen.getApplication() == null) {%>
		return <%=importManager.getImportedName("org.eclipse.emf.edit.ui.util.EditUIUtil")%>.openEditor((<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) diagram.getContents().get(0));
<%} else {%>
		<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPage")%> page = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage();
		page.openEditor(new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(diagram.getURI()), <%=importManager.getImportedName(editorGen.getEditor().getQualifiedClassName())%>.ID);
		return true;
<%}%>
	}
<%if (editorGen.getApplication() == null) {%>

	/**
	 * @@generated
	 */
	private static void setCharset(URI uri) {
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = getFile(uri);
		if (file == null) {
			return;
		}
		try {
			file.setCharset("UTF-8", new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>()); //$NON-NLS-1$
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to set charset for file " + file.getFullPath(), e); //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	public static IFile getFile(URI uri) {
		if (uri.toString().startsWith("platform:/resource")) { //$NON-NLS-1$
			String path = uri.toString().substring("platform:/resource".length()); //$NON-NLS-1$
			<%=importManager.getImportedName("org.eclipse.core.resources.IResource")%> workspaceResource =
				<%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().findMember(new <%=importManager.getImportedName("org.eclipse.core.runtime.Path")%>(path));
			if (workspaceResource instanceof <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) {
				return (<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) workspaceResource;
			}
		}
		return null;
	}
<%}%>

	/**
	 * @@generated
	 */
	public static boolean exists(<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> path) {
<%if (editorGen.getApplication() == null) {%>
		return <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().exists(path);
<%} else {%>
		return path.toFile().exists();
<%}%>
	}

	/**
<%if (editorGen.getApplication() == null) {%>
	 * <p>
	 * This method should be called within a workspace modify operation since it creates resources.
	 * </p>
<%}%>
	 * @@generated
	 * @@return the created resource, or <code>null</code> if the resource was not created
	 */
<%final boolean standaloneDomainModel = !editorGen.isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;%>
	public static final Resource createDiagram(URI diagramURI,
<%if (standaloneDomainModel) {%>
			URI modelURI,
<%}%>
			IProgressMonitor progressMonitor) {
		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
		progressMonitor.beginTask("Creating diagram and model files", 3);
		final Resource diagramResource = editingDomain.getResourceSet().createResource(diagramURI);
<%if (standaloneDomainModel) {%>
		final Resource modelResource = editingDomain.getResourceSet().createResource(modelURI);
<%}%>
		final String diagramName = diagramURI.lastSegment();
		AbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, "Creating diagram and model", Collections.EMPTY_LIST) { //$NON-NLS-1$
			protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<%if (genDiagram.getDomainDiagramElement() != null) {%>
				<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> model = createInitialModel();
				attachModelToResource(model, <%if (standaloneDomainModel) {%>model<%} else {%>diagram<%}%>Resource);
<%}%>
				Diagram diagram = ViewService.createDiagram(
<%if (genDiagram.getDomainDiagramElement() != null) {%>
				<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model, 
<%}%>
					<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID,
					<%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT);
				if (diagram != null) {
					diagramResource.getContents().add(diagram);
					diagram.setName(diagramName);
<%if (genDiagram.getDomainDiagramElement() != null) {%>
					diagram.setElement(<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model);
<%}%>
				}
			try {
				<%=importManager.getImportedName("java.util.Map")%> options = new <%=importManager.getImportedName("java.util.HashMap")%>();
				options.put(<%=importManager.getImportedName("org.eclipse.emf.ecore.xmi.XMIResource")%>.OPTION_ENCODING, "UTF-8"); //$NON-NLS-1$
<%if (standaloneDomainModel) {%>
				modelResource.save(options);
<%}%>
				diagramResource.save(options);
			} catch (IOException e) {
				<%// TODO CommandResult.newErrorCommandResult(e) would be better? %>
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to store model and diagram resources", e); //$NON-NLS-1$
			}
				return CommandResult.newOKCommandResult();
			}
		};
		try {
			OperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);
		} catch (ExecutionException e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to create model and diagram", e); //$NON-NLS-1$
		}
<%if (editorGen.getApplication() == null) {%>
<%	if (standaloneDomainModel) {%>
		setCharset(modelURI);
<%	}%>
		setCharset(diagramURI);
<%}%>
		return diagramResource;
	}
<%if (genDiagram.getDomainDiagramElement() != null) {
	final String diagramElementImportedName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
	final GenPackage domainGenPackage = genDiagram.getDomainDiagramElement().getGenPackage();%>
	/**
	 * Create a new instance of domain element associated with canvas.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private static <%=diagramElementImportedName%> createInitialModel() {
		return <%=importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName())%>.<%=domainGenPackage.getFactoryInstanceName()%>.create<%=genDiagram.getDomainDiagramElement().getName()%>();
	}
	
	/**
	 * Store model element in the resource.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private static void attachModelToResource(<%=diagramElementImportedName%> model, Resource resource) {
<%	boolean createDocRoot = standaloneDomainModel /*may need docRoot only if separate file for domain model*/ && domainGenPackage.hasDocumentRoot();
	boolean generateCreateInitialRoot = genDiagram.getDomainDiagramElement().isExternalInterface() || createDocRoot;%>
		resource.getContents().add(<%if (generateCreateInitialRoot) {%>createInitialRoot(<%}%>model<%if (generateCreateInitialRoot) {%>)<%}%>);
	}

<%	if (generateCreateInitialRoot) {%>
	/**
	 * @@generated
	 */
	private static <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> createInitialRoot(<%=diagramElementImportedName%> model) {
<%		if (!createDocRoot) { %>
		return <%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model;
<%		} else {
			// would be better to get GenClass for docRoot and directly use setter
			GenClass docRoot = domainGenPackage.getDocumentRoot();
			String featureAccessor = "null"; // Alternative is: genDiagram.getDomainDiagramElement().getInterfaceName(); although it's a hack. Seems better to fail right away
			for (java.util.Iterator it = docRoot.getGenFeatures().iterator(); it.hasNext(); ) {
				GenFeature genFeature = (GenFeature) it.next();
				boolean unspecifiedUpperBound = ETypedElement.UNSPECIFIED_MULTIPLICITY == genFeature.getEcoreFeature().getUpperBound();
				// Perhaps, makes sense to check instanceof EReference && isContainment
				if (genFeature.isSet() && unspecifiedUpperBound && genDiagram.getDomainDiagramElement().equals(genFeature.getTypeGenClass())) {
					featureAccessor = genFeature.getAccessorName();
					break;
				}
			} /*for*/
%>
		<%=importManager.getImportedName(docRoot.getQualifiedInterfaceName())%> docRoot =
				<%=importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName())%>.<%=domainGenPackage.getFactoryInstanceName()%>.create<%=docRoot.getName()%>();
		docRoot.set<%=featureAccessor%>(model);
		return docRoot;
<%		}%>
	}
<%	} /*if generateCreateInitialRoot*/
} /* domainDiagramElement != null */%>

	/**
	 * @@generated
	 */	
	public static void selectElementsInDiagram(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart")%> diagramPart, <%=importManager.getImportedName("java.util.List")%>/*EditPart*/ editParts) {
		diagramPart.getDiagramGraphicalViewer().deselectAll();

		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> firstPrimary = null;
		for (java.util.Iterator it = editParts.iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> nextPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) it.next();
			diagramPart.getDiagramGraphicalViewer().appendSelection(nextPart);
			if(firstPrimary == null && nextPart instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart")%>) {
				firstPrimary = nextPart;
			}
		}

		if(!editParts.isEmpty()) {
			diagramPart.getDiagramGraphicalViewer().reveal(firstPrimary != null ? firstPrimary : (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>)editParts.get(0));
		}
	}
	
	/**
	 * @@generated
	 */	
	public static org.eclipse.gmf.runtime.notation.View findView(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart, org.eclipse.emf.ecore.EObject targetElement, LazyElement2ViewMap lazyElement2ViewMap) {
		boolean hasStructuralURI = false;						
		if(targetElement.eResource() instanceof org.eclipse.emf.ecore.xmi.XMLResource) {
			hasStructuralURI = ((org.eclipse.emf.ecore.xmi.XMLResource)targetElement.eResource()).getID(targetElement) == null;
		}
		
		org.eclipse.gmf.runtime.notation.View view = null;
		if(hasStructuralURI && !lazyElement2ViewMap.getElement2ViewMap().isEmpty()) {
			view = (org.eclipse.gmf.runtime.notation.View)lazyElement2ViewMap.getElement2ViewMap().get(targetElement);
		} else if (findElementsInDiagramByID(diagramEditPart, targetElement, lazyElement2ViewMap.editPartTmpHolder) > 0) {
			org.eclipse.gef.EditPart editPart = (EditPart) lazyElement2ViewMap.editPartTmpHolder.get(0);
			lazyElement2ViewMap.editPartTmpHolder.clear();
			view = editPart.getModel() instanceof org.eclipse.gmf.runtime.notation.View ? (org.eclipse.gmf.runtime.notation.View) editPart.getModel() : null;
		}
	
		return (view == null) ? diagramEditPart.getDiagramView() : view;
	}
		
	/**
	 * @@generated
	 */
	private static int findElementsInDiagramByID(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramPart, org.eclipse.emf.ecore.EObject element, java.util.List editPartCollector) {
		org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer viewer = (org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer) diagramPart.getViewer();
		final int intialNumOfEditParts = editPartCollector.size();
		
		if (element instanceof org.eclipse.gmf.runtime.notation.View) { // support notation element lookup
			org.eclipse.gef.EditPart editPart = (org.eclipse.gef.EditPart) viewer.getEditPartRegistry().get(element);
			if (editPart != null) {
				editPartCollector.add(editPart);
				return 1;
			}
		}

		String elementID = org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(element);
		java.util.List associatedParts = viewer.findEditPartsForElement(elementID, org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);
		// perform the possible hierarchy disjoint -> take the top-most parts only
		for (java.util.Iterator editPartIt = associatedParts.iterator(); editPartIt.hasNext();) {
			org.eclipse.gef.EditPart nextPart = (org.eclipse.gef.EditPart) editPartIt.next();
			org.eclipse.gef.EditPart parentPart = nextPart.getParent();
			while (parentPart != null && !associatedParts.contains(parentPart)) {
				parentPart = parentPart.getParent();
			}
			if (parentPart == null) {
				editPartCollector.add(nextPart);
			}
		}

		if (intialNumOfEditParts == editPartCollector.size()) {
			if (!associatedParts.isEmpty()) {
				editPartCollector.add(associatedParts.iterator().next());
			} else {
				if (element.eContainer() != null) {
					return findElementsInDiagramByID(diagramPart, element.eContainer(), editPartCollector);
				}
			}
		}
		return editPartCollector.size() - intialNumOfEditParts;
	}
	
	/**
	 * @@generated
	 */	
	public static class LazyElement2ViewMap {
		/**
		 * @@generated
		 */				
		private java.util.Map element2ViewMap;
		/**
		 * @@generated
		 */				
		private org.eclipse.gmf.runtime.notation.View scope;
		/**
		 * @@generated
		 */						
		private java.util.Set elementSet;
		/**
		 * @@generated
		 */		
		public final java.util.List editPartTmpHolder = new java.util.ArrayList();
		/**
		 * @@generated
		 */			
		public LazyElement2ViewMap(org.eclipse.gmf.runtime.notation.View scope, java.util.Set elements) {
			this.scope = scope;
			this.elementSet = elements;
		}

		/**
		 * @@generated
		 */				
		public final java.util.Map getElement2ViewMap() {
			if(element2ViewMap == null) {
				element2ViewMap = new java.util.HashMap();
				// map possible notation elements to itself as these can't be found by view.getElement()
				for (java.util.Iterator it = elementSet.iterator(); it.hasNext();) {
					org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) it.next();
					if(element instanceof org.eclipse.gmf.runtime.notation.View) {
						org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) element;
						if(view.getDiagram() == scope.getDiagram()) {
							element2ViewMap.put(element, element); // take only those that part of our diagram
						}
					}
				}
				
				buildElement2ViewMap(scope, element2ViewMap, elementSet);					
			}
			return element2ViewMap;
		}
		/**
		 * @@generated
		 */						
		static java.util.Map buildElement2ViewMap(org.eclipse.gmf.runtime.notation.View parentView, java.util.Map element2ViewMap, java.util.Set elements) {
			if(elements.size() == element2ViewMap.size()) return element2ViewMap;

			if(parentView.isSetElement() && !element2ViewMap.containsKey(parentView.getElement()) && elements.contains(parentView.getElement())) {
				element2ViewMap.put(parentView.getElement(), parentView);
				if(elements.size() == element2ViewMap.size()) return element2ViewMap;
			}
			
			for (java.util.Iterator it = parentView.getChildren().iterator(); it.hasNext();) {
				buildElement2ViewMap((org.eclipse.gmf.runtime.notation.View) it.next(), element2ViewMap, elements);			
				if(elements.size() == element2ViewMap.size()) return element2ViewMap;
			}
			for (java.util.Iterator it = parentView.getSourceEdges().iterator(); it.hasNext();) {
				buildElement2ViewMap((org.eclipse.gmf.runtime.notation.View) it.next(), element2ViewMap, elements);			
				if(elements.size() == element2ViewMap.size()) return element2ViewMap;
			}
			for (java.util.Iterator it = parentView.getSourceEdges().iterator(); it.hasNext();) {
				buildElement2ViewMap((org.eclipse.gmf.runtime.notation.View) it.next(), element2ViewMap, elements);			
				if(elements.size() == element2ViewMap.size()) return element2ViewMap;
			}	
			return element2ViewMap;
		}
	} //LazyElement2ViewMap	
}
<%importManager.emitSortedImports();%>
@


1.49
log
@[166814] Refactor diagram editor Audits&Metrics support
@
text
@@


1.48
log
@Separate method generated for saving newly created model object inside resource. Could be necessary to decorate model object on saving it in the resource set.
@
text
@d216 41
d258 7
a264 14
	public static int findElementsInDiagram(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart")%> diagramPart, <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> elementURI, <%=importManager.getImportedName("java.util.List")%>/*EditPart*/ editPartCollector) {
		final int originalNumOfEditParts = editPartCollector.size();
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = null;
		try {
			element = diagramPart.getDiagram().eResource().getResourceSet().getEObject(elementURI, false);
		} catch(RuntimeException e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Failed to get EObject by uri: " + elementURI, e); //$NON-NLS-1$
			return 0;
		}
		if(element == null) {
			return 0;
		} else if(element instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> editPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>)diagramPart.getDiagramGraphicalViewer().getEditPartRegistry().get(element);
			if(editPart != null) {
d269 8
a276 9
		
		String elementID = <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil")%>.getProxyID(element);
		<%=importManager.getImportedName("java.util.List")%> associatedParts = diagramPart.getDiagramGraphicalViewer()
			.findEditPartsForElement(elementID, <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart")%>.class);
		// peform the possible hierarchy disjoint -> take the top-most parts
		for (<%=importManager.getImportedName("java.util.Iterator")%> editPartIt = associatedParts.iterator(); editPartIt.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> nextPart = (org.eclipse.gef.EditPart)editPartIt.next();
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> parentPart = nextPart.getParent();
			while(parentPart != null && !associatedParts.contains(parentPart)) {
d278 2
a279 2
			}		
			if(parentPart == null) {
d283 3
a285 3
		
		if(originalNumOfEditParts == editPartCollector.size()) {
			if(!associatedParts.isEmpty()) {
d288 2
a289 3
				element = element.eContainer();
				if(element != null) {
					return findElementsInDiagram(diagramPart, <%=importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil")%>.getURI(element), editPartCollector);
d293 1
a293 1
		return editPartCollector.size() - originalNumOfEditParts;
d295 1
a295 1

d299 24
a322 2
	public static void selectElementsInDiagram(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart")%> diagramPart, <%=importManager.getImportedName("java.util.List")%>/*EditPart*/ editParts) {
		diagramPart.getDiagramGraphicalViewer().deselectAll();
d324 18
a341 6
		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> firstPrimary = null;
		for (java.util.Iterator it = editParts.iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> nextPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) it.next();
			diagramPart.getDiagramGraphicalViewer().appendSelection(nextPart);
			if(firstPrimary == null && nextPart instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart")%>) {
				firstPrimary = nextPart;
d343 1
d345 5
d351 18
a368 2
		if(!editParts.isEmpty()) {
			diagramPart.getDiagramGraphicalViewer().reveal(firstPrimary != null ? firstPrimary : (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>)editParts.get(0));
d370 1
a370 1
	}	
@


1.47
log
@[161018] Metrics View should support navigation to destination diagram element.
@
text
@d117 2
a118 8
<%	if (standaloneDomainModel) {%>
				modelResource.getContents().add(createInitialRoot(model));
<%	} else {%>
				diagramResource.getContents().add(model);
<%
	}
}
%>
d160 2
a161 3
final String diagramElementImportedName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
final GenPackage domainGenPackage = genDiagram.getDomainDiagramElement().getGenPackage();
%>
d171 12
d184 1
a184 1
<%if (standaloneDomainModel /*may need docRoot only if separate file for domain model*/) {%>
d189 1
a189 1
<%if (!domainGenPackage.hasDocumentRoot()) { %>
d191 13
a203 13
<%} else {
// would be better to get GenClass for docRoot and directly use setter
GenClass docRoot = domainGenPackage.getDocumentRoot();
String featureAccessor = "null"; // Alternative is: genDiagram.getDomainDiagramElement().getInterfaceName(); although it's a hack. Seems better to fail right away
for (java.util.Iterator it = docRoot.getGenFeatures().iterator(); it.hasNext(); ) {
	GenFeature genFeature = (GenFeature) it.next();
	boolean unspecifiedUpperBound = ETypedElement.UNSPECIFIED_MULTIPLICITY == genFeature.getEcoreFeature().getUpperBound();
	// Perhaps, makes sense to check instanceof EReference && isContainment
	if (genFeature.isSet() && unspecifiedUpperBound && genDiagram.getDomainDiagramElement().equals(genFeature.getTypeGenClass())) {
		featureAccessor = genFeature.getAccessorName();
		break;
	}
} /*for*/
d209 1
a209 1
<%}%>
d211 1
a211 1
<%} /*if standaloneDomainModel*/
@


1.46
log
@[165303] Use one more page in generated wizard to ask for model file when standalone domain model option is set
@
text
@d208 70
@


1.45
log
@refactor: pass uris to diagram editor util
@
text
@d81 11
@


1.44
log
@[164952] - Unable to generate diagram editor without domain model
@
text
@a16 1
import org.eclipse.core.runtime.IPath;
d43 1
a43 7
		<%=importManager.getImportedName("org.eclipse.ui.IEditorDescriptor")%> editorDescriptor = page.getWorkbenchWindow().getWorkbench().getEditorRegistry().getDefaultEditor(diagram.getURI().toFileString());
		if (editorDescriptor == null) {
			<%=importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog")%>.openError(page.getWorkbenchWindow().getShell(), "Error",
					<%=importManager.getImportedName("org.eclipse.osgi.util.NLS")%>.bind("There is no editor registered for the file ''{0}''.", diagram.getURI()));
			return false;
		}
		page.openEditor(new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(diagram.getURI()), editorDescriptor.getId());
d52 5
a56 2
	private static void setCharset(IPath path) {
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().getFile(path);
d60 15
a74 1
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to set charset for file " + path, e); //$NON-NLS-1$
d76 1
d89 6
a94 2
	public static final Resource createDiagram(IPath containerFullPath, String fileNameParameter, IProgressMonitor progressMonitor) {
		final String fileName = fileNameParameter;
d96 4
a99 9
		progressMonitor.beginTask("Creating diagram and model files", 3); //$NON-NLS-1$
		IPath diagramPath = containerFullPath.append(fileName);
		final Resource diagramResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(diagramPath.toString()));
<%
final boolean standaloneDomainModel = !editorGen.isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;
if (standaloneDomainModel) {
%>
		IPath modelPath = diagramPath.removeFileExtension().addFileExtension("<%=editorGen.getDomainFileExtension()%>"); //$NON-NLS-1$
		final Resource modelResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(modelPath.toString()));
d101 1
d104 1
a104 2
<%
if (genDiagram.getDomainDiagramElement() != null) {%>
d122 1
a122 1
					diagram.setName(fileName);
a140 1
		
a145 1
		
d148 1
a148 1
		setCharset(modelPath);
d150 1
a150 1
		setCharset(diagramPath);
@


1.43
log
@remove core.resources dep for rcp app
@
text
@d41 1
a41 1
		return <%=importManager.getImportedName("org.eclipse.emf.edit.ui.util.EditUIUtil")%>.openEditor((EObject) diagram.getContents().get(0));
@


1.42
log
@fix diagram open code for rcp app
@
text
@a15 1
import org.eclipse.core.resources.IFile;
d54 1
d60 1
a60 1
		IFile file = <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().getFile(path);
d67 1
d138 2
a139 1
<%if (standaloneDomainModel) {%>
d141 2
a143 1
		setCharset(diagramPath);
@


1.41
log
@[163810] - Diagram editor generated by N20061107 always creates a domain file called "<name>.taipan"?!?
@
text
@d44 2
a45 2
		URI fileURI = URI.createFileURI(file.getLocation().toString());
		<%=importManager.getImportedName("org.eclipse.ui.IEditorDescriptor")%> editorDescriptor = page.getWorkbenchWindow().getWorkbench().getEditorRegistry().getDefaultEditor(fileURI.toFileString());
d48 2
a49 2
					<%=importManager.getImportedName("org.eclipse.osgi.util.NLS")%>.bind("There is no editor registered for the file ''{0}''.", fileURI.toFileString()));
			return null;
d51 2
a52 1
		return page.openEditor(new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(fileURI), editorDescriptor.getId());
@


1.40
log
@"final" modifier will be removed by merger on next code regeneration.
@
text
@d86 1
a86 1
		IPath modelPath = diagramPath.removeFileExtension().addFileExtension("taipan"); //$NON-NLS-1$
@


1.39
log
@remove deps from core.resources
@
text
@d76 2
a77 1
	public static final Resource createDiagram(IPath containerFullPath, final String fileName, IProgressMonitor progressMonitor) {
@


1.38
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@a11 1
import java.util.ArrayList;
a12 1
import java.util.List;
a16 1
import org.eclipse.core.resources.IResource;
a22 1
import org.eclipse.emf.ecore.resource.ResourceSet;
a27 4
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
d40 1
a40 33
	public static final URI createAndOpenDiagram(IPath containerPath, String fileName, IWorkbenchWindow window, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {
		IFile diagramFile = createNewDiagramFile(containerPath, fileName, window.getShell(), progressMonitor);
		if (diagramFile != null && openEditor) {
			openDiagramEditor(window, diagramFile, saveDiagram, progressMonitor);
		}
		return URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);
	}

	/**
	 * @@generated
	 */
	public static final IEditorPart openDiagramEditor(IWorkbenchWindow window, IFile file, boolean saveDiagram, IProgressMonitor progressMonitor) {
		IEditorPart editorPart = null;
		try {
			IWorkbenchPage page = window.getActivePage();
			if (page != null) {
				editorPart = openDiagramEditor(page, file);
				if (saveDiagram) {
					editorPart.doSave(progressMonitor);
				}
			}
			file.refreshLocal(IResource.DEPTH_ZERO, null);
			return editorPart;
		} catch (Exception e) {
			<%=importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Error opening diagram", e);
		}
		return null;
	}

	/**
	 * @@generated
	 */
	public static final IEditorPart openDiagramEditor(IWorkbenchPage page, IFile file) throws PartInitException {
d42 1
a42 1
		return <%=importManager.getImportedName("org.eclipse.ui.ide.IDE")%>.openEditor(page, file);
d56 13
d72 1
d74 1
a74 1
	 * @@return the created file resource, or <code>null</code> if the file was not created
d76 1
a76 1
	public static final IFile createNewDiagramFile(IPath containerFullPath, String fileName, Shell shell, IProgressMonitor progressMonitor) {
a77 1
		ResourceSet resourceSet = editingDomain.getResourceSet();
d79 2
a80 4
		final IFile diagramFile = createNewFile(containerFullPath, fileName, shell);
		final Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true));
		List affectedFiles = new ArrayList();
		affectedFiles.add(diagramFile);
d85 2
a86 4
		IPath modelFileRelativePath = diagramFile.getFullPath().removeFileExtension().addFileExtension("<%=editorGen.getDomainFileExtension()%>"); //$NON-NLS-1$
		IFile modelFile = diagramFile.getParent().getFile(new <%=importManager.getImportedName("org.eclipse.core.runtime.Path")%>(modelFileRelativePath.lastSegment()));
		final Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString(), true));
		affectedFiles.add(modelFile);
d88 1
a88 1
		AbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, "Creating diagram and model", affectedFiles) { //$NON-NLS-1$
d109 1
a109 1
					diagram.setName(diagramFile.getName());
a114 1
<%if (standaloneDomainModel) {%>
d117 1
d120 1
a120 1
				diagramResource.save(Collections.EMPTY_MAP);
d136 1
a136 5
		try {
			modelFile.setCharset("UTF-8", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to set charset for model file", e); //$NON-NLS-1$
		}
d138 2
a139 7
		try {
			diagramFile.setCharset("UTF-8", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to set charset for diagram file", e); //$NON-NLS-1$
		}
		
		return diagramFile;
a183 32

	/**
	 * @@generated
	 */
	public static IFile createNewFile(IPath containerPath, String fileName, Shell shell) {
		IPath newFilePath = containerPath.append(fileName);
		IFile newFileHandle = <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().getFile(newFilePath);
		try {
			createFile(newFileHandle);
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
			<%=importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog")%>.openError(shell, "Creation Problems", null, e.getStatus());
			return null;
		}
		return newFileHandle;
	}

	/**
	 * @@generated
	 */
	protected static void createFile(IFile fileHandle) throws <%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> {
		try {
			fileHandle.create(new <%=importManager.getImportedName("java.io.ByteArrayInputStream")%>(new byte[0]),
					false, new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>());
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
			// If the file already existed locally, just refresh to get contents
			if (e.getStatus().getCode() == <%=importManager.getImportedName("org.eclipse.core.resources.IResourceStatus")%>.PATH_OCCUPIED) {
				fileHandle.refreshLocal(<%=importManager.getImportedName("org.eclipse.core.resources.IResource")%>.DEPTH_ZERO, null);
			} else {
				throw e;
			}
		}
	}
@


1.37
log
@remove file creator template
@
text
@d53 1
a53 1
		return URI.createPlatformResourceURI(diagramFile.getFullPath().toString());
d107 1
a107 1
		final Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));
d116 1
a116 1
		final Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString()));
@


1.36
log
@simplify file names handling
@
text
@d106 1
a106 1
		final IFile diagramFile = <%=importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName())%>.createNewFile(containerFullPath, fileName, shell);
d224 32
@


1.35
log
@remove unused parameters
@
text
@d106 1
a106 1
		final IFile diagramFile = <%=importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName())%>.getInstance().createNewFile(containerFullPath, fileName, shell);
@


1.34
log
@Correcting Progress monitor.
@
text
@a11 1
import java.io.InputStream;
d48 2
a49 3
	public static final URI createAndOpenDiagram(<%=importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName())%> diagramFileCreator,
			IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {
		IFile diagramFile = createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);
d102 1
a102 2
	public static final IFile createNewDiagramFile(<%=importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName())%> diagramFileCreator,
			IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {
d106 1
a106 1
		final IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell);
a118 1
		final String kindParam = kind;
d136 2
a137 1
				kindParam, <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT);
@


1.33
log
@#114200 remove resource deps from wizard
@
text
@d108 1
a108 2
		progressMonitor.beginTask("Creating diagram and model files", 4); //$NON-NLS-1$
		final IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);
@


1.32
log
@#114200 refactor 'open diagram editor' code to support RCP
@
text
@a12 1
import java.lang.reflect.InvocationTargetException;
a29 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;
a32 2
import org.eclipse.jface.operation.IRunnableContext;
import org.eclipse.jface.operation.IRunnableWithProgress;
d44 1
a44 1
public class <%=genDiagram.getDiagramEditorUtilClassName()%> {
d49 2
a50 2
	public static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window,
			IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {
d55 1
a55 1
		return diagramFile;
d86 1
a86 1
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> fileURI = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createFileURI(file.getLocation().toString());
d89 2
a90 1
			<%=importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog")%>.openError(page.getWorkbenchWindow().getShell(), "Error", <%=importManager.getImportedName("org.eclipse.osgi.util.NLS")%>.bind("There is no editor registered for the file ''{0}''.", fileURI.toFileString()));
d104 2
a105 1
	public static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {
d110 1
a110 5
		final IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {
			public void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {
				runnable.run(subProgressMonitor);
			}
		});
a113 1
		
a121 1
		
@


1.31
log
@#114200 avoid IDE usage in RCP mode
@
text
@a30 2
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
d41 1
d57 1
a57 1
			openDiagram(diagramFile, window, saveDiagram, progressMonitor);
d65 1
a65 1
	public static final DiagramEditPart openDiagram(IFile file, IWorkbenchWindow window, boolean saveDiagram, IProgressMonitor progressMonitor) {
d70 1
a70 11
<%if (editorGen.getApplication() == null) {%>
				editorPart = <%=importManager.getImportedName("org.eclipse.ui.ide.IDE")%>.openEditor(page, file, true);
<%} else {%>
				<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> fileURI = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createFileURI(file.getLocation().toString());
				<%=importManager.getImportedName("org.eclipse.ui.IEditorDescriptor")%> editorDescriptor = window.getWorkbench().getEditorRegistry().getDefaultEditor(fileURI.toFileString());
				if (editorDescriptor == null) {
					<%=importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog")%>.openError(window.getShell(), "Error", <%=importManager.getImportedName("org.eclipse.osgi.util.NLS")%>.bind("There is no editor registered for the file ''{0}''.", fileURI.toFileString()));
					return null;
				}
				editorPart = page.openEditor(new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(fileURI), editorDescriptor.getId());
<%}%>
d76 1
a76 1
			return ((IDiagramWorkbenchPart) editorPart).getDiagramEditPart();
d84 17
@


1.30
log
@#114200 remove gmf runtime ide dependencies
@
text
@a42 1
import org.eclipse.ui.ide.IDE;
d71 11
a81 1
				editorPart = IDE.openEditor(page, file, true);
@


1.29
log
@#116861 [Tests] Create unit-tests checking code generated for the models with "instance class name" specified

- templates corrected
@
text
@d21 1
d31 2
a32 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;
d40 2
d43 1
d50 1
a50 1
public class <%=genDiagram.getDiagramEditorUtilClassName()%> extends IDEEditorUtil {
d55 3
a57 2
	public static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {
		IFile diagramFile = <%=genDiagram.getDiagramEditorUtilClassName()%>.createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);
d59 1
a59 1
			IDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);
d65 21
d213 2
a214 1
		<%=importManager.getImportedName(docRoot.getQualifiedInterfaceName())%> docRoot = <%=importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName())%>.<%=domainGenPackage.getFactoryInstanceName()%>.create<%=docRoot.getName()%>();
@


1.28
log
@avoid generating unused imports in pure pure design projects
@
text
@d105 1
a105 1
				model, 
d112 1
a112 1
					diagram.setElement(model);
d171 1
a171 1
		return model;
@


1.27
log
@Reverted fix for #139375 (unable to edit diagrams generated from XSD schema) from reflective to qualified classes (made possible with EMF RC3)
@
text
@a23 1
import org.eclipse.core.runtime.Path;
a25 1
import org.eclipse.emf.ecore.EObject;
d84 1
a84 1
		IFile modelFile = diagramFile.getParent().getFile(new Path(modelFileRelativePath.lastSegment()));
d169 1
a169 1
	private static EObject createInitialRoot(<%=diagramElementImportedName%> model) {
@


1.26
log
@#139375 unable to edit diagrams generated from XSD schema
@
text
@d96 1
a96 1
				EObject model = createInitialModel();
d153 4
a156 1

d163 2
a164 5
	private static EObject createInitialModel() {
<%
final GenPackage domainGenPackage = genDiagram.getDomainDiagramElement().getGenPackage();
%>
		return <%=importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName())%>.<%=domainGenPackage.getFactoryInstanceName()%>.create(<%=genDiagram.getMetaPackageName(importManager)%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>());
d171 1
a171 1
	private static EObject createInitialRoot(EObject model) {
d176 8
a183 6
EClass docRoot = org.eclipse.emf.ecore.util.ExtendedMetaData.INSTANCE.getDocumentRoot(domainGenPackage.getEcorePackage());
String featureName = genDiagram.getDomainDiagramElement().getInterfaceName().toLowerCase(); // using interface name is a HACK
for (int i = 0, size = docRoot.getFeatureCount(); i < size; i++) {
	EStructuralFeature eStructuralFeature = docRoot.getEStructuralFeature(i);
	if (genDiagram.getDomainDiagramElement().getEcoreClass().equals(eStructuralFeature.getEType())) {
		featureName = eStructuralFeature.getName();
d188 3
a190 5
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> eClass = <%=importManager.getImportedName("org.eclipse.emf.ecore.util.ExtendedMetaData")%>.INSTANCE.getDocumentRoot(<%=genDiagram.getMetaPackageName(importManager)%>.eINSTANCE);
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> eStructuralFeature = eClass.getEStructuralFeature("<%=featureName%>");
		EObject rootObject = <%=importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName())%>.<%=domainGenPackage.getFactoryInstanceName()%>.create(eClass);
		rootObject.eSet(eStructuralFeature, model);
		return rootObject;
d193 2
a194 1
<%} /*if standaloneDomainModel*/%>
@


1.25
log
@importAssistant for #139375 changes
@
text
@d117 11
a137 11
		try {
<%if (standaloneDomainModel) {%>
			<%=importManager.getImportedName("java.util.Map")%> options = new <%=importManager.getImportedName("java.util.HashMap")%>();
			options.put(<%=importManager.getImportedName("org.eclipse.emf.ecore.xmi.XMIResource")%>.OPTION_ENCODING, "UTF-8"); //$NON-NLS-1$
			modelResource.save(options);
<%}%>
			diagramResource.save(Collections.EMPTY_MAP);
		} catch (IOException e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to store model and diagram resources", e); //$NON-NLS-1$
		}	

@


1.24
log
@#139375 respect documentRoot for models generated from schema (like emf/templates/editor/ModelWizard.javajet#createInitialModel  does)
@
text
@d186 2
a187 2
		EClass eClass = <%=importManager.getImportedName("org.eclipse.emf.ecore.util.ExtendedMetaData")%>.INSTANCE.getDocumentRoot(<%=genDiagram.getMetaPackageName(importManager)%>.eINSTANCE);
		EStructuralFeature eStructuralFeature = eClass.getEStructuralFeature("<%=featureName%>");
@


1.23
log
@#132465 Bidi3.2: [HCG]Encoding of the mindmap diagram is always ASCII
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
d95 2
a96 4
if (genDiagram.getDomainDiagramElement() != null) {
	GenPackage domainGenPackage = genDiagram.getDomainDiagramElement().getGenPackage();
%>
				EObject model = <%=importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName())%>.<%=domainGenPackage.getFactoryInstanceName()%>.create(<%=genDiagram.getMetaPackageName(importManager)%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>());
d98 1
a98 1
				modelResource.getContents().add(model);
d153 41
@


1.22
log
@#132465 Bidi3.2: [HCG]Encoding of the mindmap diagram is always ASCII
@
text
@d70 1
a70 1
		progressMonitor.beginTask("Creating diagram and model files", 2); //$NON-NLS-1$
d140 13
@


1.21
log
@#131439 Factory.eINSTANCE should be FactoryImpl.eINSTANCE
@
text
@d131 3
a133 1
			modelResource.save(Collections.EMPTY_MAP);
@


1.20
log
@#130491 typo (missed "()")  in generated code
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
d94 5
a98 2
<%if (genDiagram.getDomainDiagramElement() != null) {%>
				EObject model = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create(<%=genDiagram.getMetaPackageName(importManager)%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>());
@


1.19
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d99 1
a99 1
				diagramResource.getContents.add(model);
@


1.18
log
@#127696 Templates should use new transaction API
@
text
@d7 3
a9 2

importManager.emitPackageStatement(stringBuffer);%>
@


1.17
log
@#127696 Templates should use new transaction API
@
text
@d28 1
d68 1
d76 1
a76 1
		final Resource diagramResource = editingDomain.createResource(URI.createFileURI(diagramFile.getLocation().toOSString()).toString());
d86 1
a86 1
		final Resource modelResource = editingDomain.createResource(URI.createFileURI(modelFile.getLocation().toOSString()).toString());
@


1.16
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d10 1
d13 6
d20 1
d23 3
d28 1
d32 2
a33 2
import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d39 1
d66 3
a68 2
		final MEditingDomain editingDomain = MEditingDomain.createNewDomain();
		final IProgressMonitor progressMonitorCopy = progressMonitor;
d71 1
a71 1
				runnable.run(progressMonitorCopy);
d74 4
a77 3

		IPath diagramFilePath = diagramFile.getLocation();
		final Resource diagramResource = editingDomain.createResource(diagramFilePath.toOSString());
d82 5
a86 2
		IPath modelFilePath = diagramFilePath.removeFileExtension().addFileExtension("<%=editorGen.getDomainFileExtension()%>"); //$NON-NLS-1$
		final Resource modelResource = editingDomain.createResource(modelFilePath.toOSString());
d88 3
a90 6

		if (diagramResource != null<%if (standaloneDomainModel) {%> && modelResource != null<%}%>) {
			final String kindParam = kind;
			editingDomain.runAsUnchecked(new MRunnable() {

				public Object run() {
d92 1
a92 1
					EObject model = editingDomain.create(<%=genDiagram.getMetaPackageName(importManager)%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>());
d94 1
a94 2
					modelResource.getContents().add(model);
					editingDomain.saveResource(modelResource);
d96 1
a96 1
					diagramResource.getContents.add(model);
d101 1
a101 1
					Diagram diagram = ViewService.createDiagram(
d103 1
a103 1
					model, 
d105 4
a108 4
					kindParam, <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT);
					if (diagram != null) {
						diagramResource.getContents().add(diagram);
						diagram.setName(diagramFile.getName());
d110 1
a110 1
						diagram.setElement(model);
a111 3
						editingDomain.saveResource(diagramResource);
					}
					return null;
d113 8
a120 2

			});
d122 9
@


1.15
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d63 4
a66 1
<%if (!editorGen.isSameFileForDiagramAndModel()) {%>
d71 1
a71 1
		if (diagramResource != null<%if (!editorGen.isSameFileForDiagramAndModel()) {%> && modelResource != null<%}%>) {
d76 1
d78 1
a78 1
<%if (!editorGen.isSameFileForDiagramAndModel()) {%>					
d81 1
a81 1
<%} else {%>
d83 7
d91 1
a91 1
					Diagram diagram = ViewService.createDiagram(model, kindParam, <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT);
d95 1
d97 1
@


1.14
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d4 5
a8 3
GenDiagram genDiagram = (GenDiagram) argument;
GenEditorGenerator editorGen = genDiagram.getEditorGen();%>
package <%=editorGen.getEditor().getPackageName()%>;
a9 1
<%ImportUtil importManager = new ImportUtil(editorGen.getEditor().getPackageName());%>
@


1.13
log
@file extensions moved out from genDiagram. Distinct property captures extension of domain model file now
@
text
@d6 1
a6 1
package <%=genDiagram.getEditorPackageName()%>;
d8 1
a8 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());%>
@


1.12
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d3 3
a5 1
<%GenDiagram genDiagram = (GenDiagram) argument;%>
d62 2
a63 2
<%if (!genDiagram.isSameFileForDiagramAndModel()) {%>
		IPath modelFilePath = diagramFilePath.removeFileExtension().addFileExtension("<%=genDiagram.getDomainDiagramElement().getGenPackage().getPrefix().toLowerCase()%>"); //$NON-NLS-1$
d67 1
a67 1
		if (diagramResource != null<%if (!genDiagram.isSameFileForDiagramAndModel()) {%> && modelResource != null<%}%>) {
d73 1
a73 1
<%if (!genDiagram.isSameFileForDiagramAndModel()) {%>					
@


1.11
log
@ImportManager moved to oeg.common
@
text
@d2 1
a2 1
    imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
d70 1
a70 5
<%
GenPackage genPackage = genDiagram.getDomainMetaModel();
String domainPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
%>
					EObject model = editingDomain.create(<%=domainPackageInterfaceName%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>());
d77 1
a77 1
					Diagram diagram = ViewService.createDiagram(model, kindParam, <%=genDiagram.getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT);
@


1.10
log
@#121427
Fixing problems with re-creation recently removed diagram.
@
text
@d2 1
a2 1
    imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.ImportUtil"%>
@


1.9
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@a9 1
import org.eclipse.core.resources.IResource;
a11 2
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
a13 1
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
d17 1
a18 3
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;
import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;
d34 2
a35 6
	public static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator,
		IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window,
		IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {

		IFile diagramFile = <%=genDiagram.getDiagramEditorUtilClassName()%>.createNewDiagramFile(diagramFileCreator,
			containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);
a42 8
	 * Creates a new diagram file resource in the selected container and with
	 * the selected name. Creates any missing resource containers along the
	 * path; does nothing if the container resources already exist.
	 * <p>
	 * In normal usage, this method is invoked after the user has pressed Finish
	 * on the wizard; the enablement of the Finish button implies that all
	 * controls on on this page currently contain valid values.
	 * </p>
d44 1
a44 3
	 * Note that this page caches the new file once it has been successfully
	 * created; subsequent invocations of this method will answer the same file
	 * resource without attempting to create it again.
a45 5
	 * <p>
	 * This method should be called within a workspace modify operation since it
	 * creates resources.
	 * </p>
	 * 
d47 1
a47 2
	 * @@return the created file resource, or <code>null</code> if the file was
	 *         not created
d49 4
a52 8
	public static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator,
		IPath containerFullPath, String fileName, InputStream initialContents,
		String kind, Shell shell, IProgressMonitor progressMonitor) {

		final IProgressMonitor progressMonitorParam = progressMonitor;
		final IFile newDiagramFile = diagramFileCreator.createNewFile(containerFullPath,
			fileName, initialContents, shell, new IRunnableContext() {

d54 1
a54 1
				runnable.run(progressMonitorParam);
d57 3
d61 2
a62 3
		IPath modelFilePath = newDiagramFile.getLocation().removeFileExtension();
		modelFilePath = modelFilePath.addFileExtension("<%=genDiagram.getDomainDiagramElement().getGenPackage().getPrefix().toLowerCase()%>"); //$NON-NLS-1$
		final Resource modelResource = ResourceUtil.create(modelFilePath.toOSString(), null);
a63 9
		Resource notationModel = null;
		try {
			newDiagramFile.refreshLocal(IResource.DEPTH_ZERO, null);
			String completeFileName = newDiagramFile.getLocation().toOSString();
			notationModel = ResourceUtil.create(completeFileName, null);
		} catch (Exception e) {
			IStatus status = new Status(IStatus.ERROR, <%=genDiagram.getPlugin().getActivatorClassName()%>.ID, 0, e.getMessage(), e);
			<%=genDiagram.getPlugin().getActivatorClassName()%>.getInstance().getLog().log(status);
		}
d65 1
a65 2
		if (notationModel != null) {
			final Resource notationModelParam = notationModel;
d67 1
a67 1
			OperationUtil.runAsUnchecked(new MRunnable() {
d74 7
a80 1
					EObject model = EObjectUtil.create(<%=domainPackageInterfaceName%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>());
d83 2
a84 8
						notationModelParam.getContents().add(diagram);
<%if (genDiagram.isSameFileForDiagramAndModel()) {%>
						notationModelParam.getContents().add(model);
<%} else {%>
						modelResource.getContents().add(model);
						ResourceUtil.save(modelResource);
<%}%>
						diagram.setName(newDiagramFile.getName());
d86 1
a86 1
						ResourceUtil.save(notationModelParam);
d90 1
d94 1
a94 1
		return newDiagramFile;
@


1.8
log
@Removing usages of deprecated API.
@
text
@d98 2
a99 2
			IStatus status = new Status(IStatus.ERROR, <%=genDiagram.getPluginClassName()%>.ID, 0, e.getMessage(), e);
			<%=genDiagram.getPluginClassName()%>.getInstance().getLog().log(status);
d113 1
a113 1
					Diagram diagram = ViewService.createDiagram(model, kindParam, new PreferencesHint(<%=genDiagram.getPluginClassName()%>.EDITOR_ID));
@


1.7
log
@#116031 avoid hardcoded class names in templates
@
text
@d18 1
a18 1
import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;
d113 1
a113 1
					Diagram diagram = DiagramUtil.createDiagram(model, kindParam, new PreferencesHint(<%=genDiagram.getPluginClassName()%>.EDITOR_ID));
@


1.6
log
@catch up with recent API changes in the runtime
@
text
@d35 1
a35 1
public class DiagramEditorUtil extends IDEEditorUtil {
d44 1
a44 1
		IFile diagramFile = DiagramEditorUtil.createNewDiagramFile(diagramFileCreator,
@


1.5
log
@[ashatalin] #115311 use accessor name helper methods instead of constructing them
@
text
@d20 1
a20 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.EditorFileCreator;
d40 1
a40 1
	public static final IFile createAndOpenDiagram(EditorFileCreator diagramFileCreator,
d75 1
a75 1
	public static final IFile createNewDiagramFile(EditorFileCreator diagramFileCreator,
@


1.4
log
@[ashatalin] #112988 use either same as diagram or separate file to persist domain model
@
text
@d112 1
a112 1
					EObject model = EObjectUtil.create(<%=domainPackageInterfaceName%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getName()%>());
@


1.3
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@a10 1
import org.eclipse.core.runtime.IAdaptable;
a21 1
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
d87 5
a91 1

a94 1
			InputStream stream = newDiagramFile.getContents();
d96 1
a96 5
			try {
				notationModel = ResourceUtil.create(completeFileName, null);
			} finally {
				stream.close();
			}
d113 1
a113 3
					IAdaptable adapter = new EObjectAdapter(model);
					Diagram diagram = DiagramUtil.createDiagram(model, kindParam,
						new PreferencesHint(<%=genDiagram.getPluginClassName()%>.EDITOR_ID));
d116 1
d118 4
d124 1
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d79 1
a79 1
		final String kind, Shell shell, final IProgressMonitor progressMonitor) {
d81 1
d86 1
a86 1
				runnable.run(progressMonitor);
d107 1
d117 1
a117 1
					Diagram diagram = DiagramUtil.createDiagram(model, kind,
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d2 1
a2 1
    imports="org.eclipse.emf.ecore.EPackage org.eclipse.emf.common.util.EList org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.ImportUtil"%>
a3 1
<%GenModel genModel = genDiagram.getEmfGenModel();%>
d110 1
a110 1
GenPackage genPackage = genDiagram.getEmfGenModel().findGenPackage(genDiagram.getDomainMetaModel());
@

