head	1.59;
access;
symbols
	v20081022-1925:1.59
	v20081015-1925:1.59
	v20081008-1925:1.59
	v20081001-1925:1.59
	v20080924-1925:1.59
	v20080917-1925:1.59
	v20080911-1728:1.59
	v20080910-1520:1.59
	v20080903-1520:1.59
	v20080827-1520:1.59
	v20080813-1520:1.59
	v20080806-1520:1.59
	v20070608-1300:1.57
	v20070605-1400:1.56
	v20070601-1400:1.56
	v20070525-1500:1.56
	v20070520-1200:1.55
	v20070518-1300:1.55
	v20070504-1000:1.55
	v20070427-0600:1.55
	v20070420-1000:1.55
	v20070413-1300:1.55
	v20070405-1100:1.55
	v20070403-1500:1.55
	v20070330-1300:1.55
	v20060330-1300:1.55
	v20070322-1100:1.55
	v20060316-0600:1.54
	v20070307-0700:1.54
	v20070301-1200:1.54
	v20070228-2000:1.54
	v20070221-1500:1.52
	v20070208-1800:1.52
	v20070202-0200:1.24.2.1
	v20070103-0300:1.48
	M4_20:1.48
	v20061222-1800:1.48
	v20061218-1200:1.46
	v20061214-0000:1.45
	v20061120-1300:1.45
	M3_20:1.45
	v20061117-0800:1.45
	v20061027-1200:1.24
	v20061020-1000:1.24
	v20061013-1330:1.40
	v20060919-0800:1.24
	v20060907-1100:1.24
	M1_20:1.24
	v20060904-1500:1.24
	v20060824-1600:1.24
	v20060817-1500:1.24
	v20060728-0500:1.24
	v20060713-1700:1.24
	R1_0_maintenance:1.24.0.2
	R1_0:1.24
	v20060627-1200:1.24
	v20060626-1420:1.24
	v20060620-0400:1.24
	v20060616-1400:1.24
	v20060616-1200:1.24
	v20060609-1400:1.22
	v20060531-1730:1.20
	v20060530-1930:1.20
	v20060526-1200:1.20
	v20060519-1300:1.20
	v20060519-0800:1.20
	v20060512-1000:1.18
	I20060512-1000:1.18
	I20060505-1400:1.18
	I20060428-1300:1.18
	I20060424-0500:1.18
	I20060424-0300:1.18
	M6_10:1.18
	I20060407-1200:1.18
	I20060331-1000:1.18
	I20060324-0300:1.18
	I20060317-1300:1.18
	I20060317-1200:1.18
	I20060316-1300:1.18
	I20060309-1300:1.17
	M5_10:1.16
	S20060303-1600:1.16
	I20060227-1730:1.16
	I20060216-1945:1.16
	I20060210-1715:1.15
	I20060209-1815:1.15
	I20060203-0830:1.11
	I20060202-1415:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.10
	I20060113-1700:1.9
	M4_10:1.9
	I20060107-1100:1.8
	I20060105-1630:1.8
	I20051230-1230:1.8
	I20051223-1100:1.8
	I20051217-0925:1.8
	I20051208-2000:1.8
	I20051201-1800:1.8
	I20051124-2000:1.8
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.7
	I20051106-0900:1.7
	v20051030:1.7
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.59
date	2007.06.12.14.18.39;	author ashatalin;	state dead;
branches;
next	1.58;
commitid	6fec466eab3f4567;

1.58
date	2007.06.10.10.34.13;	author ashatalin;	state Exp;
branches;
next	1.57;
commitid	e4e466bd3a44567;

1.57
date	2007.06.07.16.07.47;	author ashatalin;	state Exp;
branches;
next	1.56;
commitid	36a046682d514567;

1.56
date	2007.05.22.18.18.54;	author ashatalin;	state Exp;
branches;
next	1.55;
commitid	5a1d465333ad4567;

1.55
date	2007.03.20.20.15.02;	author ashatalin;	state Exp;
branches;
next	1.54;
commitid	1c03460040bd4567;

1.54
date	2007.02.23.14.41.18;	author ashatalin;	state Exp;
branches;
next	1.53;
commitid	211e45defd0c4567;

1.53
date	2007.02.22.19.49.50;	author ashatalin;	state Exp;
branches;
next	1.52;
commitid	299645ddf3da4567;

1.52
date	2007.02.07.12.05.15;	author ashatalin;	state Exp;
branches;
next	1.51;
commitid	37da45c9c07a4567;

1.51
date	2007.01.29.14.20.30;	author dstadnik;	state Exp;
branches;
next	1.50;
commitid	69ed45be02ac4567;

1.50
date	2007.01.26.19.01.05;	author atikhomirov;	state Exp;
branches;
next	1.49;
commitid	792e45ba4ff04567;

1.49
date	2007.01.26.15.15.51;	author dstadnik;	state Exp;
branches;
next	1.48;
commitid	22b345ba1b264567;

1.48
date	2006.12.19.16.16.51;	author ashatalin;	state Exp;
branches;
next	1.47;
commitid	284a458810724567;

1.47
date	2006.12.18.18.20.51;	author dstadnik;	state Exp;
branches;
next	1.46;
commitid	7d774586dbfa4567;

1.46
date	2006.12.14.19.02.24;	author dstadnik;	state Exp;
branches;
next	1.45;
commitid	408e45819fb94567;

1.45
date	2006.11.16.19.24.51;	author atikhomirov;	state Exp;
branches;
next	1.44;
commitid	1423455cbb014567;

1.44
date	2006.11.10.15.39.56;	author ashatalin;	state Exp;
branches;
next	1.43;
commitid	6da745549d4c4567;

1.43
date	2006.10.24.19.20.43;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.10.24.15.08.25;	author ashatalin;	state Exp;
branches;
next	1.41;

1.41
date	2006.10.24.14.49.08;	author ashatalin;	state Exp;
branches;
next	1.40;

1.40
date	2006.10.09.17.30.47;	author dstadnik;	state Exp;
branches;
next	1.39;

1.39
date	2006.10.06.11.33.07;	author ashatalin;	state Exp;
branches;
next	1.38;

1.38
date	2006.10.05.18.43.33;	author atikhomirov;	state Exp;
branches;
next	1.37;

1.37
date	2006.10.03.16.47.11;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2006.09.29.18.04.08;	author atikhomirov;	state Exp;
branches;
next	1.35;

1.35
date	2006.09.29.17.06.31;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.09.29.16.10.37;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.09.29.12.15.04;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2006.09.27.20.39.06;	author atikhomirov;	state Exp;
branches;
next	1.31;

1.31
date	2006.09.22.13.21.24;	author ashatalin;	state Exp;
branches;
next	1.30;

1.30
date	2006.09.21.12.14.21;	author atikhomirov;	state Exp;
branches;
next	1.29;

1.29
date	2006.09.15.21.37.49;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.09.15.20.44.32;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.09.14.18.01.23;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2006.09.13.16.10.18;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.09.13.10.50.42;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.06.13.13.28.06;	author ashatalin;	state Exp;
branches
	1.24.2.1;
next	1.23;

1.23
date	2006.06.12.14.02.09;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.06.09.10.15.51;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.17.12.38.17;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.16.07.30.34;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.14.19.19.46;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.15.18.11.24;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.08.16.27.57;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.25.14.27.29;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.17.10.55.00;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.12.11.43.59;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.24.10.07.29;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.19.17.56.08;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.18.10.16.44;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.04.15.40.38;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.26.14.51.39;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.29;	author atikhomirov;	state Exp;
branches;
next	;

1.24.2.1
date	2007.01.26.14.04.38;	author mfeldman;	state Exp;
branches;
next	;
commitid	3b7045ba0a764567;


desc
@@


1.59
log
@[191856] - Convert /editor/Editor.javajet template to xpand
[192134] - NPE while regenerating TaiPan diagram (in editor template)
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="EditorGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenEditorView genEditor = (GenEditorView) ((Object[]) argument)[0];
final GenDiagram genDiagram = genEditor.getEditorGen().getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenPropertySheet propertySheet = genDiagram.getEditorGen().getPropertySheet();
importManager.registerInnerClass("DropTargetListener");
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genEditor.getClassName()%> extends DiagramDocumentEditor
<%
Set<String> ifaces = new LinkedHashSet<String>();
if (genEditor.getEditorGen().getApplication() == null) {
	ifaces.add(importManager.getImportedName("org.eclipse.ui.ide.IGotoMarker"));
}
if (propertySheet != null && propertySheet.isReadOnly()) {
	ifaces.add(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.properties.views.IReadOnlyDiagramPropertySheetPageContributor"));
}
if (!ifaces.isEmpty()) {
%>
		implements <%=ifaces.toString().substring(1, ifaces.toString().length() - 1)%>
<%}%>
{

	/**
	 * @@generated
	 */
	public static final String ID = "<%=genEditor.getID()%>"; //$NON-NLS-1$
	
	/**
	 * @@generated
	 */
	public static final String CONTEXT_ID = "<%=genEditor.getContextID()%>"; //$NON-NLS-1$

	/**
	 * @@generated
	 */
	public <%=genEditor.getClassName()%>() {
		super(<%=genDiagram.getPalette() != null && genDiagram.getPalette().isFlyout()%>);
	}
	
	/**
	 * @@generated
	 */
	protected String getContextID() {
		return CONTEXT_ID;
	}

<%if (genDiagram.getPalette() != null) {%>
	/**
	 * @@generated
	 */
	protected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {
		PaletteRoot root = super.createPaletteRoot(existingPaletteRoot);
		new <%=importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName())%>().fillPalette(root);
		return root;
	}
<%}%>
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint")%> getPreferencesHint() {<%/*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */%>
		return <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT;
	}
<%if (genDiagram.getEditorGen().getPropertySheet() != null) { /*perhaps, we should override contributor id regardless of sheet presence, there's no much sense in default id either.*/%>

	/**
	 * @@generated
	 */
	public String getContributorId() {
		return <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.ID;
	}
<%} else {%>

	/**
	 * @@generated
	 */
	public Object getAdapter(Class type) {
		if (type == <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySheetPage")%>.class) {
			return null;
		}
		return super.getAdapter(type);
	}
<%}%>

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider")%> getDocumentProvider(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (<%if (genDiagram.getEditorGen().getApplication() == null) {%>input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%> || <%}%>input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			return <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getDocumentProvider();
		}
		return super.getDocumentProvider(input);
	}
	
	/**
	 * @@generated
	 */
    public <%=importManager.getImportedName("TransactionalEditingDomain")%> getEditingDomain() {
    	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = getEditorInput() != null ? getDocumentProvider().getDocument(getEditorInput()) : null;
    	if (document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
    		return ((org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document).getEditingDomain();
    	}
        return super.getEditingDomain();
    }

	/**
	 * @@generated
	 */
	protected void setDocumentProvider(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (<%if (genDiagram.getEditorGen().getApplication() == null) {%>input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%> || <%}%>input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			setDocumentProvider(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getDocumentProvider());
		} else {
			super.setDocumentProvider(input);
		}
	}
	
<%if (genDiagram.getEditorGen().getApplication() == null) {%>

	/**
	 * @@generated
	 */
	public void gotoMarker(<%=importManager.getImportedName("org.eclipse.core.resources.IMarker")%> marker) {
        <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService")%>.getInstance().gotoMarker(this, marker);
    }

	/**
	 * @@generated
	 */
	public boolean isSaveAsAllowed() {
		return true;
	}

	/**
	 * @@generated
	 */
	public void doSaveAs() {
		performSaveAs(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>());
	}

	/**
	 * @@generated
	 */
	protected void performSaveAs(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> progressMonitor) {
		<%=importManager.getImportedName("org.eclipse.swt.widgets.Shell")%> shell = getSite().getShell();
		<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input = getEditorInput();
		<%=importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog")%> dialog = new <%=importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog")%>(shell);
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> original = input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%> ? ((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) input).getFile() : null;
		if (original != null) {
			dialog.setOriginalFile(original);
		}
		dialog.create();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider")%> provider = getDocumentProvider();
		if (provider == null) {
			// editor has been programmatically closed while the dialog was open
			return;
		}
		if (provider.isDeleted(input) && original != null) {
			String message = <%=importManager.getImportedName("org.eclipse.osgi.util.NLS")%>.bind("The original file ''{0}'' has been deleted.", original.getName());
			dialog.setErrorMessage(null);
			dialog.setMessage(message, <%=importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider")%>.WARNING);
		}
		if (dialog.open() == <%=importManager.getImportedName("org.eclipse.jface.window.Window")%>.CANCEL) {
			if (progressMonitor != null) {
				progressMonitor.setCanceled(true);
			}
			return;
		}
		<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> filePath = dialog.getResult();
		if (filePath == null) {
			if (progressMonitor != null) {
				progressMonitor.setCanceled(true);
			}
			return;
		}
		<%=importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot")%> workspaceRoot = <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot();
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = workspaceRoot.getFile(filePath);
		final <%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> newInput = new <%=importManager.getImportedName("org.eclipse.ui.part.FileEditorInput")%>(file);
		// Check if the editor is already open
		<%=importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy")%> matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();
		<%=importManager.getImportedName("org.eclipse.ui.IEditorReference")%>[] editorRefs = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
		for (int i = 0; i < editorRefs.length; i++) {
			if (matchingStrategy.matches(editorRefs[i], newInput)) {
				<%=importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog")%>.openWarning(shell, "Problem During Save As...", "Save could not be completed. Target file is already open in another editor.");
				return;
			}
		}
		boolean success = false;
		try {
			provider.aboutToChange(newInput);
			getDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);
			success = true;
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> x) {
			<%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%> status = x.getStatus();
			if (status == null || status.getSeverity() != <%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%>.CANCEL) {
				<%=importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog")%>.openError(shell, "Save Problems", "Could not save file.", x.getStatus());
			}
		} finally {
			provider.changed(newInput);
			if (success) {
				setInput(newInput);
			}
		}
		if (progressMonitor != null) {
			progressMonitor.setCanceled(!success);
		}
	}
<%}

if (genDiagram.generateCreateShortcutAction()) {%>

	/**
	 * @@generated
	 */
	protected void initializeGraphicalViewer() {
		super.initializeGraphicalViewer();
		getDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), <%=importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer")%>.getTransfer()) {

			protected Object getJavaObject(<%=importManager.getImportedName("org.eclipse.swt.dnd.TransferData")%> data) {
				return <%=importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer")%>.getTransfer().nativeToJava(data);
			}
			
		});
		getDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), <%=importManager.getImportedName("org.eclipse.emf.edit.ui.dnd.LocalTransfer")%>.getInstance()) {

			protected Object getJavaObject(<%=importManager.getImportedName("org.eclipse.swt.dnd.TransferData")%> data) {
				return <%=importManager.getImportedName("org.eclipse.emf.edit.ui.dnd.LocalTransfer")%>.getInstance().nativeToJava(data);
			}
			
		});
	}
<%if (genEditor.getEditorGen().getApplication() == null) {%>

	/**
	 * @@generated
	 */
    public <%=importManager.getImportedName("org.eclipse.ui.part.ShowInContext")%> getShowInContext() {
    	return new ShowInContext(getEditorInput(), getNavigatorSelection());
    }

<%
	/*
		Similar to NavigatorLinkHelper.xpt
	*/
%>    
	/**
	 * @@generated
	 */
    private <%=importManager.getImportedName("org.eclipse.jface.viewers.ISelection")%> getNavigatorSelection() {
        <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument")%> document = getDiagramDocument();
		if (document == null) {
			return <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>.EMPTY;
		}
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = document.getDiagram();
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = <%=importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer")%>.getFile(diagram.eResource());
		if (file != null) {
			<%=importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName())%> item = new <%=importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName())%>(diagram, file, false);
			return new <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>(item);
		}
		return <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>.EMPTY;
    }

	/**
	 * @@generated
	 */
	public Object getAdapter(Class required) {
		if (required == <%=importManager.getImportedName("org.eclipse.ui.part.IShowInTargetList")%>.class) {
			return new <%=importManager.getImportedName("org.eclipse.ui.part.IShowInTargetList")%>() {
				public String[] getShowInTargetIds() {
					return new String[] { <%=importManager.getImportedName("org.eclipse.ui.navigator.resources.ProjectExplorer")%>.VIEW_ID };
				}

			};
		}
		return super.getAdapter(required);
	}
<%}%>
	
	/**
	 * @@generated
	 */
	private abstract class DropTargetListener extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener")%> {
	
		/**
		 * @@generated
		 */
		public DropTargetListener(<%=importManager.getImportedName("org.eclipse.gef.EditPartViewer")%> viewer, <%=importManager.getImportedName("org.eclipse.swt.dnd.Transfer")%> xfer) {
			super(viewer, xfer);
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getObjectsBeingDropped() {
			<%=importManager.getImportedName("org.eclipse.swt.dnd.TransferData")%> data = getCurrentEvent().currentDataType;
			<%=importManager.getImportedName("java.util.Collection")%> uris = new <%=importManager.getImportedName("java.util.HashSet")%>();

			Object transferedObject = getJavaObject(data);
			if (transferedObject instanceof <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) {
				<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> selection = (<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) transferedObject;
				for (<%=importManager.getImportedName("java.util.Iterator")%> it = selection.iterator(); it.hasNext();) {
					Object nextSelectedObject = it.next();
<%
/*
 * TODO: move NavigatorItem to some place available in runtime and remove 
 * "genEditor.getEditorGen().getNavigator() != null" test
 */
	if (genEditor.getEditorGen().getNavigator() != null) {%>
					if (nextSelectedObject instanceof <%=importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName())%>) {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = ((<%=importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName())%>) nextSelectedObject).getView();
						nextSelectedObject = view.getElement();
					} else <%}%>if (nextSelectedObject instanceof <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) {
						<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> adaptable = (<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) nextSelectedObject;
						nextSelectedObject = adaptable.getAdapter(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>.class);
					}
	
					if (nextSelectedObject instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
						<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelElement = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) nextSelectedObject;
						<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> modelElementResource = modelElement.eResource();
						uris.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));	
					}
				}
			}

			<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			for (<%=importManager.getImportedName("java.util.Iterator")%> it = uris.iterator(); it.hasNext();) {
				<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> nextURI = (<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>) it.next();
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);
				result.add(modelObject);
			}
			return result;
		}

		/**
		 * @@generated
		 */
		protected abstract Object getJavaObject(<%=importManager.getImportedName("org.eclipse.swt.dnd.TransferData")%> data);
	
	}
<%}%>
	
}
<%importManager.emitSortedImports();%>@


1.58
log
@[182535] - Show In action doesn't work for generated diagram
@
text
@@


1.57
log
@[182535] - Show In action doesn't work for generated diagram
@
text
@d261 1
a261 1
        <%=importManager.getImportedName("IDiagramDocument")%> document = getDiagramDocument();
@


1.56
log
@F5 triggering update of selected element added
@
text
@d243 46
@


1.55
log
@NavigatorReference type constant name corrected.
Generating wrapper for domain model navigator nodes to preserve navigator tree selection/expansion on model files reload.
@
text
@d40 5
d52 7
@


1.54
log
@Removing additional dependencied to make the code compilable with RCP.
@
text
@d265 3
d269 1
a269 1
<%	}%>								
@


1.53
log
@[175169] - Double-click on diagram in Project Explorer should open corresponding diagram editor as before
@
text
@d113 1
a113 1
			setDocumentProvider(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider")%>());
d116 1
d258 1
a258 1
 * TODO: movel NavigatorItem to some public place and remove 
@


1.52
log
@Removing *EditorInputProxies - only EditorInputs are used in generated code from now.
@
text
@d89 2
a90 2
		if (input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			return new <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getPackageName() + ".URIDiagramDocumentProvider")%>();
a104 1
<%if (genDiagram.getEditorGen().getApplication() == null) {%>
d110 1
a110 1
		if (input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) {
a111 2
		} else if (input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			setDocumentProvider(new <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getPackageName() + ".URIDiagramDocumentProvider")%>());
d116 1
a205 12
<%} else { // genDiagram.getEditorGen().getApplication() != null %>

	/**
	 * @@generated
	 */
	protected void setDocumentProvider(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			setDocumentProvider(new <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getPackageName() + ".URIDiagramDocumentProvider")%>());
		} else {
			super.setDocumentProvider(input);
		}
	}
@


1.51
log
@[171528] use URIEditorInput to open diagrams
@
text
@a47 46
	/**
	 * @@generated
	 */
	protected String getEditingDomainID() {
		return "<%=genDiagram.getEditingDomainID()%>"; //$NON-NLS-1$
	}
	
	/**
	 * @@generated
	 */
	protected TransactionalEditingDomain createEditingDomain() {
		TransactionalEditingDomain domain = super.createEditingDomain();
		domain.setID(getEditingDomainID());
<%String notificationGilterFQName = importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter");%>
		final <%=notificationGilterFQName%> diagramResourceModifiedFilter = <%=notificationGilterFQName%>.createNotifierFilter(domain.getResourceSet()).and(<%=notificationGilterFQName%>.createEventTypeFilter(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%>.ADD)).and(<%=notificationGilterFQName%>.createFeatureFilter(<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%>.class, <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%>.RESOURCE_SET__RESOURCES));
		domain.getResourceSet().eAdapters().add(new <%=importManager.getImportedName("org.eclipse.emf.common.notify.Adapter")%>() {

			private <%=importManager.getImportedName("org.eclipse.emf.common.notify.Notifier")%> myTarger;

			public <%=importManager.getImportedName("org.eclipse.emf.common.notify.Notifier")%> getTarget() {
				return myTarger;
			}

			public boolean isAdapterForType(Object type) {
				return false;
			}

			public void notifyChanged(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%> notification) {
				if (diagramResourceModifiedFilter.matches(notification)) {
					Object value = notification.getNewValue();
					if (value instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%>) {
						((<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%>) value).setTrackingModification(true);
					}
				}
			}

			public void setTarget(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notifier")%> newTarget) {
				myTarger = newTarget;
			}
			
		});


		return domain;
	}

d94 11
d112 1
a112 1
			setDocumentProvider(new <%=genDiagram.getDocumentProviderClassName()%>());
@


1.50
log
@comment not to forget reason for doSetInput
@
text
@a129 1
<%if (genDiagram.getEditorGen().getApplication() == null) {%>
d134 7
a140 1
	private String contentObjectURI;
d147 3
a149 1
			setDocumentProvider(new <%=genDiagram.getDocumentProviderClassName()%>(contentObjectURI));
a154 22
<%for (Iterator it = genDiagram.getAllNodes().iterator(); it.hasNext();) {
	GenCommonBase next = (GenCommonBase) it.next();
	if (!next.getBehaviour(OpenDiagramBehaviour.class).isEmpty()) {%>
	/**
	 * @@generated
	 */
	public void doSetInput(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input, boolean releaseEditorContents) throws <%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> {
		contentObjectURI = null;
		if (input instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput")%>) {
			final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput")%>) input).getDiagram();
			final <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> diagramFile = <%=importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer")%>.getFile(diagram.eResource());
			<%=importManager.getImportedName("org.eclipse.ui.part.FileEditorInput")%> newInput = new <%=importManager.getImportedName("org.eclipse.ui.part.FileEditorInput")%>(diagramFile);
			contentObjectURI = diagram.eResource().getURIFragment(diagram);
			super.doSetInput(newInput, releaseEditorContents);
		} else {
			super.doSetInput(input, releaseEditorContents);
		}
	}
<%
	break; // suffice to find at least one element with opendiagram policy to know we should override doSetInput
	}
}%>
d243 1
a243 14
<%} else { // genDiagram.getEditorGen().getApplication() != null %><%/*XXX unconditionally adding doSetInput() which is needed only for opening this editor from another diagram, is a temp workaround, as long as we use IDiagramEditorInput in OpenEditPolicy*/%>

	/**
	 * @@generated
	 */
	public void doSetInput(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input, boolean releaseEditorContents) throws <%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> {
		if (input instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput")%>) {
			final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput")%>) input).getDiagram();
			<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> newInput = new <%="org.eclipse.emf.common.ui.URIEditorInput"%>(diagram.eResource().getURI());
			super.doSetInput(newInput, releaseEditorContents);
		} else {
			super.doSetInput(input, releaseEditorContents);
		}
	}
d250 1
a250 1
			setDocumentProvider(new <%=importManager.getImportedName(genDiagram.getEditorGen().getApplication().getPackageName() + ".URIDiagramDocumentProvider")%>());
a254 10

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider")%> getDocumentProvider(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			return new <%=importManager.getImportedName(genDiagram.getEditorGen().getApplication().getPackageName() + ".URIDiagramDocumentProvider")%>();
		}
		return super.getDocumentProvider(input);
	}
@


1.49
log
@do not thow error on opening diagram in rcp
@
text
@d258 1
a258 1
<%} else { // genDiagram.getEditorGen().getApplication() != null %>
@


1.48
log
@Removing unnecessary imports.
@
text
@d263 13
@


1.47
log
@rewrite application templates in xpand; simplify genmodel
@
text
@a12 4
import org.eclipse.draw2d.DelegatingLayout;
import org.eclipse.draw2d.FreeformLayer;
import org.eclipse.draw2d.LayeredPane;
import org.eclipse.gef.LayerConstants;
a13 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;
@


1.46
log
@[164935] Use border items infrastructure to support external labels
@
text
@d270 1
a270 1
			setDocumentProvider(new <%=importManager.getImportedName(genDiagram.getEditorGen().getApplication().getApplicationPackageName() + ".URIDiagramDocumentProvider")%>());
d281 1
a281 1
			return new <%=importManager.getImportedName(genDiagram.getEditorGen().getApplication().getApplicationPackageName() + ".URIDiagramDocumentProvider")%>();
@


1.45
log
@heading towards full palette specification in tooldef model - no reason to invoke palette factory indirectly through services
@
text
@a98 16
	/**
	 * @@generated
	 */
	protected void configureGraphicalViewer() {
		super.configureGraphicalViewer();
		DiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();
		LayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);
		FreeformLayer extLabelsLayer = new FreeformLayer();
		extLabelsLayer.setLayoutManager(new DelegatingLayout());
		printableLayers.addLayerAfter(extLabelsLayer, <%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);
		LayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);
		FreeformLayer scaledFeedbackLayer = new FreeformLayer();
		scaledFeedbackLayer.setEnabled(false);
		scalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);
	}

@


1.44
log
@[155209] - GMF Editor does not get dirty when elements are added/removed thru custom code
@
text
@d17 1
d115 10
@


1.43
log
@Supporting EMF transfer for D&D
@
text
@d65 30
@


1.42
log
@Correcting D&D processing.
@
text
@d8 1
d269 1
a269 1
		getDiagramGraphicalViewer().addDropTargetListener(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener")%>(getDiagramGraphicalViewer(), <%=importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer")%>.getTransfer()) {
d271 38
a308 10
			protected <%=importManager.getImportedName("java.util.List")%> getObjectsBeingDropped() {
				<%=importManager.getImportedName("org.eclipse.swt.dnd.TransferData")%>[] data = getCurrentEvent().dataTypes;
				<%=importManager.getImportedName("java.util.Collection")%> uris = new <%=importManager.getImportedName("java.util.HashSet")%>();
				for (int i=0; i<data.length; i++) {
					if (<%=importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer")%>.getTransfer().isSupportedType(data[i])) {
						Object result = <%=importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer")%>.getTransfer().nativeToJava(data[i]);
						if (result instanceof <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) {
							<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> selection = (<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) LocalSelectionTransfer.getTransfer().nativeToJava(data[i]);
							for (<%=importManager.getImportedName("java.util.Iterator")%> it = selection.iterator(); it.hasNext();) {
								Object nextSelectedObject = it.next();
d315 4
a318 4
								if (nextSelectedObject instanceof <%=importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName())%>) {
									<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = ((<%=importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName())%>) nextSelectedObject).getView();
									nextSelectedObject = view.getElement();
								}
d320 4
a323 7
								if (nextSelectedObject instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
									<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelElement = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) nextSelectedObject;
									<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> modelElementResource = modelElement.eResource();
									uris.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));	
								}
							}
						}
a325 7
				<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
				for (<%=importManager.getImportedName("java.util.Iterator")%> it = uris.iterator(); it.hasNext();) {
					<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> nextURI = (<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>) it.next();
					<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);
					result.add(modelObject);
				}
				return result;
d327 15
a341 2
			
		});
@


1.41
log
@D&D from diagram content navigator to Diagram surface.
@
text
@d260 2
a261 5
/*
 * TODO: movel NavigatorItem to some public place and remove 
 * "genEditor.getEditorGen().getNavigator() != null" test
 */
if (genEditor.getEditorGen().getNavigator() != null && genDiagram.generateCreateShortcutAction()) {%>
d280 6
d288 7
a294 5
									if (view.getElement() != null) {
										<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelElement = view.getElement();
										<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> modelElementResource = modelElement.eResource();
										uris.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));	
									}
@


1.40
log
@#114200 use uri editor input for diagram editor
@
text
@d259 47
d307 1
@


1.39
log
@Correcting imports.
@
text
@d237 22
@


1.38
log
@[119465] support for diagram partitioning - few hacks to use FileEditorInput because otherwise nothing gonna work
@
text
@d136 2
a137 2
			final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram diagram")%> = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput")%>) input).getDiagram();
			final <%=importManager.getImportedName("org.eclipse.core.resources.IFile diagramFile")%> = <%=importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer")%>.getFile(diagram.eResource());
@


1.37
log
@Removing unnecessary imports.
@
text
@d114 5
d121 1
a121 27
			setDocumentProvider(new <%=genDiagram.getDocumentProviderClassName()%>());
		} else if (input instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput")%>) {
			setDocumentProvider(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramInputDocumentProvider")%>() {

				public IEditorInput createInputWithEditingDomain(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> editorInput, TransactionalEditingDomain domain) {
					assert editorInput instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput")%>;
					class Proxy extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.EditorInputProxy")%> implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput")%> {

						// workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=158740
						Proxy(IEditorInput input, TransactionalEditingDomain domain) {
							super(input, domain);
						}

						public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> getDiagram() {
							return ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput")%>) fProxied).getDiagram();
						}

						public Object getAdapter(Class adapter) {
							if (adapter == org.eclipse.core.resources.IStorage.class) {
								return super.getAdapter(org.eclipse.core.resources.IFile.class);
							}
							return super.getAdapter(adapter);
						}
					}
					return new Proxy(editorInput, domain);
				}
			});
d127 22
@


1.36
log
@one more workaround for #158740
@
text
@d2 1
a2 1
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.common.codegen.*"%>
@


1.35
log
@#114200 implement 'save as' later for RCP
@
text
@d132 7
d238 1
a238 1
<%importManager.emitSortedImports();%>
@


1.34
log
@support 'save as' in rcp
@
text
@a146 1
<%}%>
d229 1
@


1.33
log
@#114200 remove editor.ide dep for rcp configuration
@
text
@d147 1
a229 1
<%}%>
@


1.32
log
@[119465] support for diagram partitioning - use annotations to keep references to diagrams and to pass information about editors to be open.
Still a lot of subtle issues to resolve, do not turn editpolicy generation on for a while
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
d17 1
a17 3
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditor;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.ide.IGotoMarker;
d24 14
a37 1
public class <%=genEditor.getClassName()%> extends FileDiagramEditor implements IGotoMarker<%if (propertySheet != null && propertySheet.isReadOnly()) {%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.properties.views.IReadOnlyDiagramPropertySheetPageContributor")%><%}%> {
d70 45
a114 1
	protected void setDocumentProvider(IEditorInput input) {
d119 2
a120 1
				public IEditorInput createInputWithEditingDomain(IEditorInput editorInput, TransactionalEditingDomain domain) {
d123 1
d144 3
a146 12
	protected void configureGraphicalViewer() {
		super.configureGraphicalViewer();
		DiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();
		LayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);
		FreeformLayer extLabelsLayer = new FreeformLayer();
		extLabelsLayer.setLayoutManager(new DelegatingLayout());
		printableLayers.addLayerAfter(extLabelsLayer, <%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);
		LayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);
		FreeformLayer scaledFeedbackLayer = new FreeformLayer();
		scaledFeedbackLayer.setEnabled(false);
		scalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);
	}
d151 2
a152 2
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint")%> getPreferencesHint() {<%/*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */%>
		return <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT;
d154 1
a154 1
<%if (genDiagram.getEditorGen().getPropertySheet() != null) { /*perhaps, we should override contributor id regardless of sheet presence, there's no much sense in default id either.*/%>
d158 2
a159 2
	public String getContributorId() {
		return <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.ID;
d161 1
a161 1
<%} else {%>
d165 62
a226 3
	public Object getAdapter(Class type) {
		if (type == <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySheetPage")%>.class) {
			return null;
a227 1
		return super.getAdapter(type);
@


1.31
log
@Read-only properties provided into the navigator.
@
text
@d60 1
a60 1
		if (input.getAdapter(<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>.class) != null) {
d62 17
@


1.30
log
@handle readOnly attribute of the property sheet
@
text
@d7 1
d26 1
a26 1
public class <%=genEditor.getClassName()%> extends FileDiagramEditor implements IGotoMarker<%if (genDiagram.getEditorGen().getPropertySheet().isReadOnly()) {%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.properties.views.IReadOnlyDiagramPropertySheetPageContributor")%><%}%> {
@


1.29
log
@fully-qualified class names are much better
@
text
@d25 1
a25 1
public class <%=genEditor.getClassName()%> extends FileDiagramEditor implements IGotoMarker {
@


1.28
log
@Generate PropertySheet pluged into tabbed page framework of Eclipse instead of plug-in as runtime provider.
Eases pages being added/removed/replaced/tuned
@
text
@d100 1
a100 1
		if (type == IPropertySheetPage.class) {
@


1.27
log
@generated tag
@
text
@d88 18
@


1.26
log
@Import statement added.
@
text
@d82 3
@


1.25
log
@[157119] use correct preference store in the editor
@
text
@d82 1
a82 1
	protected PreferencesHint getPreferencesHint() {<%/*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */%>
@


1.24
log
@Supporting EditorInput returned from version-control.
@
text
@d81 4
@


1.24.2.1
log
@#165077. PreferenceInitializer is never invoked
@
text
@a80 7
	
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint")%> getPreferencesHint() {<%/*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */%> 
		return <%=genDiagram.getEditorGen().getPlugin().getActivatorClassName()%>.DIAGRAM_PREFERENCES_HINT;
	}
@


1.23
log
@Supporting EditorInput returned from version-control.
@
text
@d59 3
a61 1
		if (input instanceof <%=importManager.getImportedName("org.eclipse.ui.IStorageEditorInput")%>) {
a62 2
		} else {
			setDocumentProvider(new <%=genDiagram.getDocumentProviderClassName()%>());
@


1.22
log
@#143541 Add property to gmfgen to hold editing domain id
#144205 Add property to gmfgen model to hold diagram creation wizard category id
@
text
@d59 5
a63 1
		setDocumentProvider(new <%=genDiagram.getDocumentProviderClassName()%>());
@


1.21
log
@fix some nls markers
@
text
@d43 1
a43 1
		return "<%=genEditor.getEditorGen().getModelID()%>EditingDomain"; //$NON-NLS-1$
@


1.20
log
@#142179 Each instance of the generated DiagramEditor should operate with own instance of editing domain
@
text
@d30 1
a30 1
	public static final String ID = "<%=genEditor.getID()%>";
d43 1
a43 1
		return "<%=genEditor.getEditorGen().getModelID()%>EditingDomain";
@


1.19
log
@use element type bindings #136760
@
text
@d19 1
d45 9
@


1.18
log
@provide feedback consistent with the runtime
@
text
@d41 7
@


1.17
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d55 4
@


1.16
log
@#126199 add palette provider
@
text
@d7 3
a9 2

importManager.emitPackageStatement(stringBuffer);%>
@


1.15
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d34 1
a34 1
		super(<%=genDiagram.getPalette() != null%>);
a36 10
<%if (genDiagram.getPalette() != null) {%>
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot")%> createPaletteRoot(<%=importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot")%> existingPaletteRoot) {
		existingPaletteRoot = super.createPaletteRoot(existingPaletteRoot);
		<%=importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName())%>.fillPalette(existingPaletteRoot, getDiagram());
		return existingPaletteRoot;
	}
<%}%>
@


1.14
log
@EDITOR_ID moved out from plugin to Editor
@
text
@d4 1
a4 1
final GenEditorView genEditor = (GenEditorView) argument;
d6 3
a8 2
%>
package <%=genEditor.getPackageName()%>;
a9 1
<%ImportUtil importManager = new ImportUtil(genEditor.getPackageName());%>
@


1.13
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d28 5
@


1.12
log
@ImportManager moved to oeg.common
@
text
@d3 5
a7 2
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getEditorPackageName()%>;
d9 1
a9 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());%>
d23 1
a23 1
public class <%=genDiagram.getEditorClassName()%> extends FileDiagramEditor implements IGotoMarker {
d28 1
a28 1
	public <%=genDiagram.getEditorClassName()%>() {
@


1.11
log
@[rdvorak] #114189 Provide support for batch validation
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.10
log
@#123411 Support diagram without palette
cleanup (deprecated attribute removed, as well as incorrect javadoc)
@
text
@d14 1
d20 1
a20 1
public class <%=genDiagram.getEditorClassName()%> extends FileDiagramEditor {
@


1.9
log
@#122054 support external node labels
@
text
@a10 1
import org.eclipse.gef.palette.PaletteRoot;
d12 1
a12 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditorWithFlyoutPalette;
d19 1
a19 1
public class <%=genDiagram.getEditorClassName()%> extends FileDiagramEditorWithFlyoutPalette {
d24 9
a32 1
	protected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {
d37 1
a37 1

@


1.8
log
@#117857 Generate palette factory that may contribute to existing palette model
@
text
@d7 4
d12 1
d37 12
@


1.7
log
@[ashatalin] #112988 use either same as diagram or separate file to persist domain model
@
text
@d21 3
a23 4
		if (existingPaletteRoot != null) {
			return existingPaletteRoot;
		}
		return <%=importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName())%>.createPalette(getDiagram());
d25 1
a25 1
	
a31 1
	
@


1.6
log
@[dstadnik] #112764 sync with rt api update
@
text
@d9 1
d26 8
@


1.5
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d19 4
a22 1
	protected PaletteRoot createPaletteRoot() {
a24 6

	/**
	 * @@generated
	 */
	protected void updatePaletteRoot() {
	}
@


1.4
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d2 1
a2 1
    imports="java.util.List org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.util.ImportUtil"%>
a3 1
<%GenModel genModel = genDiagram.getEMFGenModel();%>
a6 7
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
d20 1
a20 1
		return <%=importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName())%>.createPalette(getSemanticAdapterFactory(), getDiagram());
a27 37

	/**
	 * @@generated
	 */
	protected AdapterFactory getSemanticAdapterFactory() {
		List factories = new ArrayList();
		fillItemProviderFactories(factories);
		return new ComposedAdapterFactory(factories);
	}

	/**
	 * @@generated
	 */
	protected void fillItemProviderFactories(List factories) {
<%
List genPackages = genModel.getAllGenPackagesWithClassifiers();
for (int i = 0; i < genPackages.size(); i++) {
	GenPackage genPackage = (GenPackage) genPackages.get(i);
	if (genPackage.getGenModel().hasEditSupport()) {
%>
		factories.add(new <%=importManager.getImportedName(genPackage.getQualifiedItemProviderAdapterFactoryClassName())%>());
<%
	}
}
genPackages = genModel.getAllUsedGenPackagesWithClassifiers();
for (int i = 0; i < genPackages.size(); i++) {
	GenPackage genPackage = (GenPackage) genPackages.get(i);
	if (genPackage.getGenModel().hasEditSupport()) {
%>
		factories.add(new <%=importManager.getImportedName(genPackage.getQualifiedItemProviderAdapterFactoryClassName())%>());
<%
	}
}
%>
		factories.add(new ResourceItemProviderAdapterFactory());
		factories.add(new ReflectiveItemProviderAdapterFactory());
	}
@


1.3
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d4 1
a4 1
<%GenModel genModel = genDiagram.getEmfGenModel();%>
@


1.2
log
@[ashatalin] correctly create instances of the user domain model if "InstanceClassName" property was specified in .ecore file. (using "create(EClass)" method instead of typed "create????()" methods)
@
text
@d1 2
a2 1
<%@@ jet package="org.eclipse.gmf.codegen.templates.diacanvas" class="EditorGen" imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.ecore.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.ImportUtil"%>
d6 1
a7 2

import java.io.IOException;
a8 3
import java.util.EventObject;
import java.util.Collections;
import java.util.Iterator;
d10 1
a10 5
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.emf.common.command.BasicCommandStack;
import org.eclipse.emf.common.command.CommandStackListener;
a11 6
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
a14 14
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.actions.ActionFactory;
import org.eclipse.ui.views.contentoutline.IContentOutlinePage;
import org.eclipse.ui.views.properties.IPropertySheetPage;
import org.eclipse.gef.*;
import org.eclipse.gef.editparts.ScalableFreeformRootEditPart;
d16 1
a16 6
import org.eclipse.gef.ui.actions.*;
import org.eclipse.gef.ui.palette.FlyoutPaletteComposite.FlyoutPreferences;
import org.eclipse.gef.ui.parts.*;
import org.eclipse.gmf.diagramrt.DiagramCanvas;
import org.eclipse.gmf.edit.provider.metainfo.AdapterFactoryMetaInfoSource;
import org.eclipse.gmf.util.SelectionUnwrapProvider;
d22 1
a22 31
public class <%=genDiagram.getEditorClassName()%> extends GraphicalEditorWithFlyoutPalette {
	// XXX subclass or add adapter to myResourceSet to manage IEditingDomainProvider

	/**
	 * @@generated
	 */
	private final ResourceSet myResourceSet = new ResourceSetImpl();

	/**
	 * @@generated
	 */
	private DiagramCanvas myDiagram;

	/**
	 * @@generated
	 */
	private PaletteRoot myPaletteRoot;

	/**
	 * @@generated
	 */
	private AdapterFactory myDomainModelAdapterFactory;

	/**
	 * @@generated
	 */
	public <%=genDiagram.getEditorClassName()%>() {
		// FIXME move to #init() - setEditDomain calls other methods of this class, so it's better to have construction complete
		setEditDomain(new DefaultEditDomain(this));
		setupDomainsEMFEdititngDomain();
	}
d27 2
a28 25
	protected void configureGraphicalViewer() {
		super.configureGraphicalViewer();

		GraphicalViewer viewer = getGraphicalViewer();
		viewer.setRootEditPart(new ScalableFreeformRootEditPart());
		viewer.setProperty(SnapToGrid.PROPERTY_GRID_SPACING, new Dimension(25, 25));
		viewer.setProperty(SnapToGrid.PROPERTY_GRID_VISIBLE, Boolean.TRUE);
		viewer.setEditPartFactory(new <%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>());
		ContextMenuProvider contextMenu = new ContextMenuProvider(viewer) {
			public void buildContextMenu(IMenuManager menu) {
				GEFActionConstants.addStandardActionGroups(menu);
			}
		};
		viewer.setContextMenu(contextMenu);
		getSite().registerContextMenu(contextMenu, new SelectionUnwrapProvider(viewer));
		// XXX registerContextMenu("anotherID", contextMenu, viewer); - for actions that need editPart in selection?

		// XXX menu manager as part of genModel?

		KeyHandler keyHandler = new GraphicalViewerKeyHandler(viewer);
		keyHandler.put(KeyStroke.getPressed(SWT.F2, 0), getActionRegistry().getAction(GEFActionConstants.DIRECT_EDIT));
		keyHandler.put(KeyStroke.getPressed(SWT.DEL, SWT.DEL, 0), getActionRegistry().getAction(ActionFactory.DELETE.getId()));
		viewer.setKeyHandler(keyHandler);

		viewer.setProperty(MouseWheelHandler.KeyGenerator.getKey(SWT.CTRL), MouseWheelZoomHandler.SINGLETON);
d34 1
a34 6
	protected void createActions() {
		super.createActions();

		Action action = new DirectEditAction((IWorkbenchPart)this);
		getActionRegistry().registerAction(action);
		getSelectionActions().add(action.getId());
d40 4
a43 2
	protected FlyoutPreferences getPalettePreferences() {
		return new <%=importManager.getImportedName("org.eclipse.gmf.util.DefaultPalettePreferences")%>(<%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.getInstance().getPluginPreferences());
d49 1
a49 91
	protected PaletteRoot getPaletteRoot() {
		if (myPaletteRoot == null) {
			myPaletteRoot = <%=importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName())%>.createPalette(getAdapterFactory4DomainModel());
		}
		return myPaletteRoot;
	}

	/**
	 * @@generated
	 */
	public Object getAdapter(Class type) {
		if (type == IPropertySheetPage.class) {
			// placeholder
		} else if (type == IContentOutlinePage.class) {
			// another placeholder
		}
		return super.getAdapter(type);
	}

	// TODO later...
//	protected PaletteViewerProvider createPaletteViewerProvider() {
//		return new PaletteViewerProvider(getEditDomain()) {
//			protected void configurePaletteViewer(PaletteViewer viewer) {
//				super.configurePaletteViewer(viewer);
//				viewer.setCustomizer(new PaletteCustomizer()...
//				// to get Customize... action on palette 
//			}
//		};
//	}

	/**
	 * @@generated
	 */
	protected void initializeGraphicalViewer() {
		super.initializeGraphicalViewer();
		GraphicalViewer viewer = getGraphicalViewer();
		viewer.setContents(myDiagram);
	}

	/**
	 * @@generated
	 */
	protected void setInput(IEditorInput input) {
		super.setInput(input);

		IFile file = ((IFileEditorInput)input).getFile();
		URI uri = URI.createURI(file.getFullPath().toString());
		Resource resource = myResourceSet.getResource(uri, true);
		myDiagram = (DiagramCanvas) resource.getContents().get(0);
		setupDomainForDiagram(file);
		AdapterFactory metaInfoAdapterFactory = new <%=importManager.getImportedName(genDiagram.getMetaInfoFactoryQualifiedClassName())%>();
		myDiagram.eAdapters().add(new AdapterFactoryMetaInfoSource(metaInfoAdapterFactory));

		setPartName(file.getName());
		setContentDescription(file.getFullPath().toString());
	}

	/**
	 * @@generated
	 */
	public void doSave(IProgressMonitor monitor) {
		try {
			for (Iterator it = myResourceSet.getResources().iterator(); it.hasNext();) {
				((Resource) it.next()).save(Collections.EMPTY_MAP);
			}
			getCommandStack().markSaveLocation();
		} catch (IOException ex) {
			// TODO handle exception
			ex.printStackTrace();
			MessageDialog.openWarning(getGraphicalControl().getShell(), "Errors Detected", ex.getMessage());
		}
	}
	public void doSaveAs() {
	}
	public boolean isSaveAsAllowed() {
		return false;
	}

	/**
	 * @@generated
	 */
	public void commandStackChanged(EventObject event) {
		firePropertyChange(PROP_DIRTY);
		super.commandStackChanged(event);
	}

	/**
	 * @@generated
	 */
	private void setupDomainForDiagram(IFile file) {
		EObject domainContainer = myDiagram.getDomainContainerObject();
d51 4
a54 4
		EClass domainContainerClass = genDiagram.getDomainDiagramElement();
		GenClass genClass = genDiagram.findGenClass(domainContainerClass);
		GenPackage genPackage = genClass.getGenPackage();
		importManager.addImport(genPackage.getInterfacePackageName(), genPackage.getPackageInterfaceName());
d56 2
a57 18
		if (domainContainer == null || domainContainer.eClass() != <%=genPackage.getPackageInterfaceName()%>.eINSTANCE.get<%=genClass.getClassifierAccessorName()%>()) {
			// XXX limiting outselves to single container which itself has no containers
			domainContainer = <%=importManager.getImportedName(genPackage.getQualifiedFactoryInterfaceName())%>.eINSTANCE.create(<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=genClass.getName()%>());
<%if (genDiagram.isSameFileForDiagramAndModel()) {%>
			Resource domainRes = myDiagram.eResource();
<%} else {%>
			URI domainResURI = URI.createURI(file.getFullPath().removeFileExtension().addFileExtension("<%=genPackage.getPrefix().toLowerCase()%>").toString());
			Resource domainRes = myResourceSet.createResource(domainResURI);
<%}%>
			domainRes.getContents().add(domainContainer);
			myDiagram.setDomainResource(domainRes);
			myDiagram.setDomainContainerObject(domainContainer);
		} else {
			// XXX keeping domainResource in addition to domainContainerObject
			// for future - when we implement support for "no dedicated domain container object"
			// case, and created nodes go directly to the object
			myDiagram.setDomainResource(domainContainer.eResource());
		}
d59 8
a66 11

	/**
	 * @@generated
	 */
	protected AdapterFactory getAdapterFactory4DomainModel() {
		if (myDomainModelAdapterFactory == null) {
			ArrayList factories = new ArrayList();
			fillItemProviderFactories(factories);
			myDomainModelAdapterFactory = new ComposedAdapterFactory(factories);
		}
		return myDomainModelAdapterFactory;
d68 1
a68 40

	/**
	 * @@generated
	 */
	protected void setupDomainsEMFEdititngDomain() {
		BasicCommandStack commandStack = new BasicCommandStack();
		commandStack.addCommandStackListener(new CommandStackListener() {
			public void commandStackChanged(final EventObject event) {
				getEditorDisplay().asyncExec(new Runnable() {
					public void run() {
						firePropertyChange(IEditorPart.PROP_DIRTY);
					}
				});
			}
		});
		AdapterFactoryEditingDomain afed = new AdapterFactoryEditingDomain(getAdapterFactory4DomainModel(), commandStack);
		myResourceSet.eAdapters().add(new AdapterFactoryEditingDomain.EditingDomainProvider(afed));
	}

	/**
	 * @@generated
	 */
	Display getEditorDisplay() {
		return getGraphicalControl().getDisplay();
	}

	/**
	 * @@generated
	 */
	protected void fillItemProviderFactories(List factories) {
<%for (Iterator i = genModel.getAllGenPackagesWithClassifiers().iterator(); i.hasNext(); ) {
	GenPackage aGenPackage = (GenPackage)i.next();
	if (aGenPackage.getGenModel().hasEditSupport()) {
%>
		factories.add(new <%=importManager.getImportedName(aGenPackage.getQualifiedItemProviderAdapterFactoryClassName())%>());
<%	}%>
<%}%>
<%for (Iterator i = genModel.getAllUsedGenPackagesWithClassifiers().iterator(); i.hasNext(); ) {
	GenPackage aGenPackage = (GenPackage)i.next();
	if (aGenPackage.getGenModel().hasEditSupport()) {
a69 3
		factories.add(new <%=importManager.getImportedName(aGenPackage.getQualifiedItemProviderAdapterFactoryClassName())%>());
<%	}%>
<%}%>
a72 8

	/**
	 * make accessible for command stack listener
	 * @@generated
	 */
	protected void firePropertyChange(int property) {
		super.firePropertyChange(property);
	}
d74 1
a74 1
<%importManager.emitSortedImports();%>@


1.1
log
@*** empty log message ***
@
text
@d236 1
a236 1
			domainContainer = <%=importManager.getImportedName(genPackage.getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=genClass.getName()%>();
@

