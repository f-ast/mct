head	1.32;
access;
symbols
	v20081022-1925:1.32
	v20081015-1925:1.32
	v20081008-1925:1.32
	v20081001-1925:1.32
	v20080924-1925:1.32
	v20080917-1925:1.32
	v20080911-1728:1.32
	v20080910-1520:1.32
	v20080903-1520:1.32
	v20080827-1520:1.32
	v20080813-1520:1.32
	v20080806-1520:1.32
	v20070202-0200:1.25
	v20061120-1300:1.28
	M3_20:1.28
	v20061117-0800:1.28
	v20061027-1200:1.25
	v20061020-1000:1.25
	v20061013-1330:1.25
	v20060919-0800:1.25
	v20060907-1100:1.25
	M1_20:1.25
	v20060904-1500:1.25
	v20060824-1600:1.25
	v20060817-1500:1.25
	v20060728-0500:1.25
	v20060713-1700:1.25
	R1_0_maintenance:1.25.0.2
	R1_0:1.25
	v20060627-1200:1.25
	v20060626-1420:1.25
	v20060620-0400:1.25
	v20060616-1400:1.25
	v20060616-1200:1.25
	v20060609-1400:1.25
	v20060531-1730:1.25
	v20060530-1930:1.25
	v20060526-1200:1.25
	v20060519-1300:1.25
	v20060519-0800:1.25
	v20060512-1000:1.24
	I20060512-1000:1.24
	I20060505-1400:1.24
	I20060428-1300:1.24
	I20060424-0500:1.24
	I20060424-0300:1.24
	M6_10:1.23
	I20060407-1200:1.22
	I20060331-1000:1.22
	I20060324-0300:1.22
	I20060317-1300:1.22
	I20060317-1200:1.22
	I20060316-1300:1.22
	I20060309-1300:1.22
	M5_10:1.21
	S20060303-1600:1.21
	I20060227-1730:1.21
	I20060216-1945:1.21
	I20060210-1715:1.20
	I20060209-1815:1.20
	I20060203-0830:1.17
	I20060202-1415:1.17
	I20060129-1145:1.17
	I20060127-0900:1.17
	I20060120-1530:1.16
	I20060113-1700:1.16
	M4_10:1.16
	I20060107-1100:1.16
	I20060105-1630:1.16
	I20051230-1230:1.16
	I20051223-1100:1.16
	I20051217-0925:1.15
	I20051208-2000:1.14
	I20051201-1800:1.11
	I20051124-2000:1.11
	M3_10:1.10
	I20051118-1245:1.10
	I20051111-1800:1.9
	I20051106-0900:1.9
	v20051030:1.8;
locks; strict;
comment	@# @;
expand	@k@;


1.32
date	2006.11.29.19.57.56;	author atikhomirov;	state dead;
branches;
next	1.31;
commitid	5235456de6434567;

1.31
date	2006.11.23.17.05.22;	author atikhomirov;	state Exp;
branches;
next	1.30;
commitid	656a4565d4d24567;

1.30
date	2006.11.22.20.09.57;	author atikhomirov;	state Exp;
branches;
next	1.29;
commitid	29594564ae8d4567;

1.29
date	2006.11.22.15.48.13;	author atikhomirov;	state Exp;
branches;
next	1.28;
commitid	609b4564713c4567;

1.28
date	2006.11.16.13.31.32;	author atikhomirov;	state Exp;
branches;
next	1.27;
commitid	5510455c68334567;

1.27
date	2006.11.16.12.07.07;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2006.11.16.12.00.04;	author atikhomirov;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.18.10.54.31;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.19.19.42.26;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.14.18.06.24;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.15.18.11.24;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.22.16.10.18;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.13.17.11.22;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.08.14.15.12;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.05.19.16.56;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.02.13.53.09;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.24.10.07.29;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.04.18.26.17;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.24.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.19.13.51.49;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.06.15.59.27;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.15.40.38;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.32
log
@get started using xpand templates. PaletteFactory template replaced with xpand version
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="PaletteFactoryGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0]; 
final Palette palette = genDiagram.getPalette();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.util.List;
import org.eclipse.gef.Tool;
import org.eclipse.gef.palette.PaletteContainer;
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gef.palette.ToolEntry;
import org.eclipse.jface.resource.ImageDescriptor;
<%
importManager.registerInnerClass("LinkToolEntry");
importManager.registerInnerClass("NodeToolEntry");
importManager.markImportLocation(stringBuffer);
boolean needNodeToolEntry = false;
boolean needLinkToolEntry = false;
final String activatorFQN = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());%>

/**
 * @@generated
 */
public class <%=palette.getFactoryClassName()%> {

	/**
	 * @@generated
	 */
	public void fillPalette(PaletteRoot paletteRoot) {
<%if (palette.definesStandardTools()) {%>
		cleanStandardTools(paletteRoot);
<%}
for (int i = 0; i < palette.getGroups().size(); i++) {
	ToolGroup toolGroup = (ToolGroup) palette.getGroups().get(i);%>
		paletteRoot.add(<%=toolGroup.getCreateMethodName()%>());
<%}%>
	}

<%if (palette.definesStandardTools()) {%>
	/**
	 * Workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=159289
	 * @@generated
	 */
	private void cleanStandardTools(PaletteRoot paletteRoot) {
		for (java.util.Iterator it = paletteRoot.getChildren().iterator(); it.hasNext();) {
			org.eclipse.gef.palette.PaletteEntry entry = (org.eclipse.gef.palette.PaletteEntry) it.next();
			if (!"standardGroup".equals(entry.getId())) { //$NON-NLS-1$
				continue;
			}
			for (java.util.Iterator it2 = ((PaletteContainer) entry).getChildren().iterator(); it2.hasNext();) {
				org.eclipse.gef.palette.PaletteEntry entry2 = (org.eclipse.gef.palette.PaletteEntry) it2.next();
				if ("zoomTool".equals(entry2.getId())) { //$NON-NLS-1$
					it2.remove();
				} else if ("noteStack".equals(entry2.getId())) { //$NON-NLS-1$
					it2.remove();
				} else if ("selectionTool".equals(entry2.getId())) { //$NON-NLS-1$
					it2.remove();
				}
				if (paletteRoot.getDefaultEntry() == entry2) {
					paletteRoot.setDefaultEntry(null);
				}
			}
		}
	}
<%}
final LinkedList<ToolGroup> toolGroupsQueue = new LinkedList<ToolGroup>();
toolGroupsQueue.addAll((List<ToolGroup>) palette.getGroups());
final LinkedList<AbstractToolEntry> toolsQueue = new LinkedList<AbstractToolEntry>();
while (!toolGroupsQueue.isEmpty()) {
	// TODO with additional counter and hashmap here it's easy to add "unique method name" check here
	ToolGroup toolGroup = toolGroupsQueue.removeFirst();
%>

	/**
     * Creates "<%=toolGroup.getTitle()%>" palette tool group
	 * @@generated
	 */
	private PaletteContainer <%=toolGroup.getCreateMethodName()%>() {
<%if (toolGroup.isCollapse() && toolGroup.isToolsOnly()) {
		String containerClassName = importManager.getImportedName("org.eclipse.gef.palette.PaletteDrawer");%>
		<%=containerClassName%> paletteContainer = new <%=containerClassName%>(<%=activatorFQN%>.getString("<%=toolGroup.getIntKey()%>.title")); //$NON-NLS-1$
<%} else if (toolGroup.isStack()) {
		String containerClassName = importManager.getImportedName("org.eclipse.gef.palette.PaletteStack");%>
		<%=containerClassName%> paletteContainer = new <%=containerClassName%>(<%=activatorFQN%>.getString("<%=toolGroup.getIntKey()%>.title"), null, null); //$NON-NLS-1$
<%} else {
		String containerClassName = importManager.getImportedName("org.eclipse.gef.palette.PaletteGroup");%>
		<%=containerClassName%> paletteContainer = new <%=containerClassName%>(<%=activatorFQN%>.getString("<%=toolGroup.getIntKey()%>.title")); //$NON-NLS-1$
<%}
if (toolGroup.getDescription() != null) {%>
		paletteContainer.setDescription(<%=activatorFQN%>.getString("<%=toolGroup.getIntKey()%>.desc")); //$NON-NLS-1$
<%}%>
<%for (Iterator itGroupItems = toolGroup.getEntries().iterator(); itGroupItems.hasNext(); ) {
	ToolGroupItem groupItem = (ToolGroupItem) itGroupItems.next();
	if (groupItem instanceof AbstractToolEntry) {
		AbstractToolEntry toolEntry = (AbstractToolEntry) groupItem;
		toolsQueue.add(toolEntry);%>
		paletteContainer.add(<%=toolEntry.getCreateMethodName()%>());
<%	if (toolEntry.isDefault() && toolGroup.isStack()) {%>
		paletteContainer.setActiveEntry((ToolEntry) paletteContainer.getChildren().get(paletteContainer.getChildren().size() - 1));
<%	}%>
<%	} else if (groupItem instanceof ToolGroup) {
		// though, the only reasonable nested group is group with isStack = false
		toolGroupsQueue.addLast((ToolGroup) groupItem);%>
		paletteContainer.add(<%=((ToolGroup) groupItem).getCreateMethodName()%>());
<%	} else if (groupItem instanceof Separator) {%>
		paletteContainer.add(new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteSeparator")%>());
<%	} /*else - no more options possible, log warning? */%>
<%} /*for*/%>
		return paletteContainer;
	}
<%
}
final String importedElementTypesClassName = importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName());
final String importedPluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
while (!toolsQueue.isEmpty()) {
	if (toolsQueue.element() instanceof StandardEntry) {
		StandardEntry toolEntry = (StandardEntry) toolsQueue.removeFirst();%>
<%@@include file="palette-std-tool.jetinc"%>
<%} else {
	ToolEntry toolEntry = (ToolEntry) toolsQueue.removeFirst();
	GenCommonBase firstGenElement = toolEntry.getElements().isEmpty() ? null : (GenCommonBase) toolEntry.getElements().get(0);
%>

	/**
	 * @@generated
	 */
	private ToolEntry <%=toolEntry.getCreateMethodName()%>() {
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;<% /* FIXME do not pass images into cons, use setX instead to reuse same image init code in std-tool*/%>
		<%if (toolEntry.getSmallIconPath() != null) {%>
		smallImage = <%=importedPluginClassName%>.findImageDescriptor("<%=toolEntry.getSmallIconPath()%>"); //$NON-NLS-1$
		<%} else if (firstGenElement != null) {%>
		smallImage = <%=importedElementTypesClassName%>.getImageDescriptor(<%=importedElementTypesClassName%>.<%=firstGenElement.getUniqueIdentifier()%>); 
		<%} else {%>
		smallImage = null;
		<%}%>
		<%if (toolEntry.getLargeIconPath() != null) {%>
		largeImage = <%=importedPluginClassName%>.findImageDescriptor("<%=toolEntry.getLargeIconPath()%>"); //$NON-NLS-1$
		<%} else {%>
		largeImage = smallImage;
		<%}%>
<%
if (toolEntry.getElements().isEmpty()) {%>
		ToolEntry result = new ToolEntry(<%=activatorFQN%>.getString("<%=toolEntry.getIntKey()%>.title"), <%=activatorFQN%>.getString("<%=toolEntry.getIntKey()%>.desc"), smallImage, largeImage) {}; //$NON-NLS-1$ $NON-NLS-2$
<%}
	else if (firstGenElement instanceof GenNode) {
%>
		final <%=importManager.getImportedName("java.util.List")%> elementTypes = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%		for (Iterator genNodesIterator = toolEntry.getGenNodes().iterator(); genNodesIterator.hasNext();) {
			GenNode nextNode = (GenNode) genNodesIterator.next();
%>
		elementTypes.add(<%=importedElementTypesClassName%>.<%=nextNode.getUniqueIdentifier()%>);
<%		}
		needNodeToolEntry = true;%>		
		ToolEntry result = new NodeToolEntry(<%=activatorFQN%>.getString("<%=toolEntry.getIntKey()%>.title"), <%=activatorFQN%>.getString("<%=toolEntry.getIntKey()%>.desc"), smallImage, largeImage, elementTypes); //$NON-NLS-1$ $NON-NLS-2$
<%}
	else if (firstGenElement instanceof GenLink) {
%>
		final <%=importManager.getImportedName("java.util.List")%> relationshipTypes = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%		for (Iterator genLinksIterator = toolEntry.getGenLinks().iterator(); genLinksIterator.hasNext();) {
			GenLink nextLink = (GenLink) genLinksIterator.next();
%>
		relationshipTypes.add(<%=importedElementTypesClassName%>.<%=nextLink.getUniqueIdentifier()%>);
<%		}
		needLinkToolEntry = true;%>		
		ToolEntry result = new LinkToolEntry(<%=activatorFQN%>.getString("<%=toolEntry.getIntKey()%>.title"), <%=activatorFQN%>.getString("<%=toolEntry.getIntKey()%>.desc"), smallImage, largeImage, relationshipTypes); //$NON-NLS-1$ $NON-NLS-2$
<%} /*else - has no more ideas what's there*/ %>
<%@@include file="palette-tool-props.jetinc"%>
		return result;
	}

<%} /*else instanceof*/
} /*while toolsQueue*/ %>
<%if (needNodeToolEntry) {%>
	/**
	 * @@generated
	 */
	private static class NodeToolEntry extends ToolEntry {

		/**
		 * @@generated
		 */
		private final List elementTypes;

		/**
		 * @@generated
		 */
		private NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List elementTypes) {
			super(title, description, smallIcon, largeIcon);
			this.elementTypes = elementTypes;
		}

		/**
		 * @@generated
		 */
		public Tool createTool() {
			Tool tool = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool")%>(elementTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}
<%}
if (needLinkToolEntry) {%>
	/**
	 * @@generated
	 */
	private static class LinkToolEntry extends ToolEntry {

		/**
		 * @@generated
		 */
		private final List relationshipTypes;

		/**
		 * @@generated
		 */
		private LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List relationshipTypes) {
			super(title, description, smallIcon, largeIcon);
			this.relationshipTypes = relationshipTypes;
		}

		/**
		 * @@generated
		 */
		public Tool createTool() {
			Tool tool = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeConnectionTool")%>(relationshipTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}
<%}%>
}
<%importManager.emitSortedImports();%>
@


1.31
log
@comment why do we need the method
@
text
@@


1.30
log
@[164021] allow to choose standard tools
@
text
@d45 1
@


1.29
log
@Do not assume tool entry's properties are strings, let users specify whatever they want (e.g. constants)
@
text
@d34 3
a36 1
<%
d43 26
a68 1
<%
d71 1
a71 1
final LinkedList<ToolEntry> toolsQueue = new LinkedList<ToolEntry>();
d97 2
a98 2
	if (groupItem instanceof ToolEntry) {
		ToolEntry toolEntry = (ToolEntry) groupItem;
d119 5
a123 1
	ToolEntry toolEntry = toolsQueue.removeFirst();
d132 1
a132 1
		ImageDescriptor largeImage;
d171 1
a171 14

<%
// there's a problem with qualifieToolName - we should also respect different tools 
// in NodeToolEntry and LinkToolEntry (right now there's hardcoded name of the tool) 
if (toolEntry.getQualifiedToolName() != null && toolEntry.getQualifiedToolName().trim().length() > 0 ) {%>
		result.setToolClass(<%=importManager.getImportedName(toolEntry.getQualifiedToolName())%>.class);
<%} /*tool class presence*/%>

<%if (!toolEntry.getProperties().isEmpty()) {
	for (Iterator it = toolEntry.getProperties().entrySet().iterator(); it.hasNext();) {
		Map.Entry entry = (Map.Entry) it.next();%>
		result.setToolProperty(<%=entry.getKey()%>, <%=entry.getValue()%>);
<%	} /*properties iterator*/
} /*properties presence check*/ %>
d175 2
a176 1
<%} /*while toolsQueue*/ %>
@


1.28
log
@[162552] - Tool descriptions that contain special characters yield uncompilable code
Refactored to use externalized strings instead (for now from plugin.xml, may later switch to new nls bundles)
@
text
@d151 1
a151 1
		result.setToolProperty("<%=entry.getKey()%>", "<%=entry.getValue()%>");
@


1.27
log
@[148371] - Unused LinkToolEntry inner classes generated
@
text
@d22 2
a23 1
boolean needLinkToolEntry = false;%>
d57 1
a57 1
		<%=containerClassName%> paletteContainer = new <%=containerClassName%>("<%=toolGroup.getTitle()%>");
d60 1
a60 1
		<%=containerClassName%> paletteContainer = new <%=containerClassName%>("<%=toolGroup.getTitle()%>", null, null);
d63 1
a63 1
		<%=containerClassName%> paletteContainer = new <%=containerClassName%>("<%=toolGroup.getTitle()%>");
d66 1
a66 1
		paletteContainer.setDescription("<%=toolGroup.getDescription()%>");
d103 1
a103 1
		smallImage = <%=importedPluginClassName%>.findImageDescriptor("<%=toolEntry.getSmallIconPath()%>");
d110 1
a110 1
		largeImage = <%=importedPluginClassName%>.findImageDescriptor("<%=toolEntry.getLargeIconPath()%>");
d116 1
a116 1
		ToolEntry result = new ToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage) {};
d127 1
a127 1
		ToolEntry result = new NodeToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage, elementTypes);
d138 1
a138 1
		ToolEntry result = new LinkToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage, relationshipTypes);
@


1.26
log
@[163126] mgolubev - Using ToolGroup with stack = true produces uncompiliable code
using java 5 collections
set active tool for toolstack
@
text
@d20 3
a22 1
importManager.markImportLocation(stringBuffer);%>
d124 2
a125 1
<%		}%>		
d135 2
a136 1
<%		}%>		
d157 1
d185 2
a186 1

d214 1
@


1.25
log
@minor import and template fixes to prevent compilation errors in generated code
@
text
@d39 3
a41 3
final LinkedList/*<ToolGroup>*/ toolGroupsQueue = new LinkedList();
toolGroupsQueue.addAll(palette.getGroups());
final LinkedList/*<ToolEntry>*/ toolsQueue = new LinkedList();
d44 1
a44 1
	ToolGroup toolGroup = (ToolGroup) toolGroupsQueue.removeFirst();
d48 1
d52 9
a60 6
<%if (toolGroup.isCollapse() && toolGroup.isToolsOnly()) { %>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteDrawer")%>("<%=toolGroup.getTitle()%>");
<%} else if (toolGroup.isStack()) {%>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteStack")%>("<%=toolGroup.getTitle()%>");
<%} else {%>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteGroup")%>("<%=toolGroup.getTitle()%>");
d68 6
a73 2
		toolsQueue.add(groupItem);%>
		paletteContainer.add(<%=((ToolEntry) groupItem).getCreateMethodName()%>());
d75 4
a78 2
		toolGroupsQueue.addLast(groupItem);
	} else if (groupItem instanceof Separator) {%>
d89 1
a89 1
	ToolEntry toolEntry = (ToolEntry) toolsQueue.removeFirst();
@


1.24
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d11 1
d147 4
d175 4
@


1.23
log
@#128404 palette factory ignores bundle name
@
text
@a12 1
import org.eclipse.gef.palette.PaletteDrawer;
d16 4
a19 1
<%importManager.markImportLocation(stringBuffer);%>
d31 2
a32 4
List toolGroups = palette.getGroups();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
%>
d38 6
a43 2
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
d50 18
a67 13
		PaletteContainer paletteContainer = createContainer("<%=toolGroup.getTitleKey()%>");
<%
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
%>
		paletteContainer.add(<%=nodeCreationTool.getCreateMethodName()%>());
<%	}
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		if (j == 0) {
%>
d69 2
a70 3
<%		}%>
		paletteContainer.add(<%=linkCreationTool.getCreateMethodName()%>());
<%	}%>
d77 3
a79 7
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
		List genNodes = nodeCreationTool.getGenNode();
		GenNode firstGenNode = (GenNode) genNodes.get(0);
d85 1
a85 1
	private ToolEntry <%=nodeCreationTool.getCreateMethodName()%>() {
d88 4
a91 2
		<%if (nodeCreationTool.getSmallIconPath() != null) {%>
		smallImage = <%=importedPluginClassName%>.findImageDescriptor("<%=nodeCreationTool.getSmallIconPath()%>");
d93 1
a93 1
		smallImage = <%=importedElementTypesClassName%>.getImageDescriptor(<%=importedElementTypesClassName%>.<%=firstGenNode.getUniqueIdentifier()%>); 
d95 2
a96 2
		<%if (nodeCreationTool.getLargeIconPath() != null) {%>
		largeImage = <%=importedPluginClassName%>.findImageDescriptor("<%=nodeCreationTool.getLargeIconPath()%>");
d100 6
d107 1
a107 2
<%
		for (Iterator genNodesIterator = genNodes.iterator(); genNodesIterator.hasNext();) {
d111 28
a138 12
<%
		}
%>		
		return new ToolEntry("<%=nodeCreationTool.getTitleKey()%>", "<%=nodeCreationTool.getDescriptionKey()%>", smallImage, largeImage) {
			public Tool createTool() {
				Tool tool = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool")%>(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
	}
<%
a139 6
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		List genLinks = linkCreationTool.getGenLink();
		GenLink firstGenLink = (GenLink) genLinks.get(0);
%>
d141 1
d145 9
a153 20
	private ToolEntry <%=linkCreationTool.getCreateMethodName()%>() {
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;
		<%if (linkCreationTool.getSmallIconPath() != null) {%>
		smallImage = <%=importedPluginClassName%>.getBundledImageDescriptor("<%=linkCreationTool.getSmallIconPath()%>");
		<%} else {%>
		smallImage = <%=importedElementTypesClassName%>.getImageDescriptor(<%=importedElementTypesClassName%>.<%=firstGenLink.getUniqueIdentifier()%>); 
		<%}%>
		<%if (linkCreationTool.getLargeIconPath() != null) {%>
		largeImage = <%=importedPluginClassName%>.getBundledImageDescriptor("<%=linkCreationTool.getLargeIconPath()%>");
		<%} else {%>
		largeImage = smallImage;
		<%}%>
		final <%=importManager.getImportedName("java.util.List")%> relationshipTypes = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%
		for (Iterator genLinksIterator = genLinks.iterator(); genLinksIterator.hasNext();) {
			GenLink nextLink = (GenLink) genLinksIterator.next();
%>
		relationshipTypes.add(<%=importedElementTypesClassName%>.<%=nextLink.getUniqueIdentifier()%>);
<%
a154 2
%>		
		return new ToolEntry("<%=linkCreationTool.getTitleKey()%>", "<%=linkCreationTool.getDescriptionKey()%>", smallImage, largeImage) {
d156 8
a163 6
			public Tool createTool() {
				Tool tool = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeConnectionTool")%>(relationshipTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
a164 4
<%
	}
}
%>
d169 19
a187 2
	private PaletteContainer createContainer(String title) {
		return new PaletteDrawer(title);
a188 1
	
@


1.22
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d85 1
a85 1
		smallImage = <%=importedPluginClassName%>.getBundledImageDescriptor("<%=nodeCreationTool.getSmallIconPath()%>");
d90 1
a90 1
		largeImage = <%=importedPluginClassName%>.getBundledImageDescriptor("<%=nodeCreationTool.getLargeIconPath()%>");
@


1.21
log
@#126199 add palette provider
@
text
@d7 3
a9 2

importManager.emitPackageStatement(stringBuffer);%>
@


1.20
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@a10 1
import org.eclipse.gef.palette.MarqueeToolEntry;
a12 1
import org.eclipse.gef.palette.PaletteGroup;
a13 1
import org.eclipse.gef.palette.PanningSelectionToolEntry;
a14 1
import org.eclipse.gmf.runtime.notation.Diagram;
d26 1
a26 41
	private Diagram diagram;

	/**
	 * @@generated
	 */
	private <%=palette.getFactoryClassName()%>(Diagram diagram) {
		this.diagram = diagram;
	}

	/**
	 * @@generated
	 */
	protected final Diagram getDiagram() {
		return diagram;
	}

	/**
	 * @@generated
	 */
	public static PaletteRoot createPalette(Diagram diagram) {
		PaletteRoot paletteRoot = new PaletteRoot();
		<%=palette.getFactoryClassName()%> factory = new <%=palette.getFactoryClassName()%>(diagram);
		PaletteContainer commonTools = factory.createCommonTools();
		paletteRoot.add(commonTools);
		paletteRoot.setDefaultEntry((ToolEntry) commonTools.getChildren().get(0));
		factory.fillPalette(paletteRoot);
		return paletteRoot;
	}

	/**
	 * @@generated
	 */
	public static void fillPalette(PaletteRoot paletteRoot, Diagram diagram) {
		<%=palette.getFactoryClassName()%> factory = new <%=palette.getFactoryClassName()%>(diagram);
		factory.fillPalette(paletteRoot);
	}

	/**
	 * @@generated
	 */
	private void fillPalette(PaletteRoot paletteRoot) {
a35 23
	/**
	 * @@generated
	 */
	private PaletteContainer createCommonTools() {
		PaletteGroup common = new PaletteGroup("Common");
		ToolEntry selectionTool = new PanningSelectionToolEntry();
		common.add(selectionTool);
		common.add(new MarqueeToolEntry());
<%if (palette.isNeedZoomTools()) {%>
		common.add(new ToolEntry("Zoom", null, getZoomToolImage(), getZoomToolImage(),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.internal.tools.ZoomTool")%>.class) {});
<%}%>
		return common;
	}
<%if (palette.isNeedZoomTools()) {%>

	/**
	 * @@generated
	 */
	private ImageDescriptor getZoomToolImage() {
		<%=importManager.getImportedName("org.eclipse.gef.ui.actions.ZoomInAction")%> action = new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.ZoomInAction")%>(new <%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%>(null, null));
		return action.getImageDescriptor();
	}
a36 1
}
@


1.19
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d3 6
a8 2
<%GenDiagram genDiagram = (GenDiagram) argument; Palette palette = genDiagram.getPalette();%>
package <%=palette.getPackageName()%>;
a9 1
<%ImportUtil importManager = new ImportUtil(palette.getPackageName());%>
@


1.18
log
@ImportManager moved to oeg.common
@
text
@d132 1
a132 1
final String importedPluginClassName = importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName());
@


1.17
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d2 1
a2 1
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.16
log
@#121888
One toolbar tool can create several elements.
@
text
@d132 1
a132 1
final String importedPluginClassName = importManager.getImportedName(genDiagram.getPluginQualifiedClassName());
@


1.15
log
@#120553
- Adding accessors for the palette entries factory methods into genmodel
- Refreshing unit-tests
- Fixing some old problems found by this refreshment.
@
text
@a14 1
import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;
d138 2
a139 1
		GenNode genNode = nodeCreationTool.getGenNode(); 
d151 1
a151 1
		smallImage = <%=importedElementTypesClassName%>.getImageDescriptor(<%=importedElementTypesClassName%>.<%=genNode.getUniqueIdentifier()%>); 
d158 9
a167 1

d169 1
a169 1
				Tool tool = new CreationTool(<%=importedElementTypesClassName%>.<%=genNode.getUniqueIdentifier()%>);
a178 1
		final String connToolClassName = importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool");
d180 2
a181 1
		GenLink genLink = linkCreationTool.getGenLink();
d193 1
a193 1
		smallImage = <%=importedElementTypesClassName%>.getImageDescriptor(<%=importedElementTypesClassName%>.<%=genLink.getUniqueIdentifier()%>); 
d200 9
d212 1
a212 1
				Tool tool = new <%=connToolClassName%>(<%=importedElementTypesClassName%>.<%=genLink.getUniqueIdentifier()%>);
d229 1
@


1.14
log
@Removing extra import
@
text
@d74 1
a74 1
		paletteRoot.add(create<%=AccessUtil.getPaletteEntryId(toolGroup)%>Group());
d110 1
a110 1
	private PaletteContainer create<%=AccessUtil.getPaletteEntryId(toolGroup)%>Group() {
d117 1
a117 1
		paletteContainer.add(create<%=AccessUtil.getPaletteEntryId(nodeCreationTool)%>CreationTool());
d126 1
a126 1
		paletteContainer.add(create<%=AccessUtil.getPaletteEntryId(linkCreationTool)%>CreationTool());
d145 1
a145 1
	private ToolEntry create<%=AccessUtil.getPaletteEntryId(nodeCreationTool)%>CreationTool() {
d179 1
a179 1
	private ToolEntry create<%=AccessUtil.getPaletteEntryId(linkCreationTool)%>CreationTool() {
@


1.13
log
@#117731 icons defined has no effect in the generated code
@
text
@a169 1
	final String connToolClassName = importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool");
d171 1
@


1.12
log
@Correcting imports
@
text
@d132 2
d146 13
a158 3
		ImageDescriptor image = <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.getImageDescriptor(
			<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genNode.getUniqueIdentifier()%>);
		return new ToolEntry("<%=nodeCreationTool.getTitleKey()%>", "<%=nodeCreationTool.getDescriptionKey()%>", image, image) {
d161 1
a161 1
				Tool tool = new CreationTool(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genNode.getUniqueIdentifier()%>);
d170 1
d180 13
a192 3
		ImageDescriptor image = <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.getImageDescriptor(
			<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
		return new ToolEntry("<%=linkCreationTool.getTitleKey()%>", "<%=linkCreationTool.getDescriptionKey()%>", image, image) {
d195 1
a195 1
				Tool tool = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool")%>(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
@


1.11
log
@#117857 Generate palette factory that may contribute to existing palette model
@
text
@a12 1
import org.eclipse.gef.palette.PaletteSeparator;
a14 1
import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool;
d124 1
a124 1
		paletteContainer.add(new PaletteSeparator());
d172 1
a172 1
				Tool tool = new ConnectionCreationTool(<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
@


1.10
log
@#116031 avoid hardcoded class names in templates
@
text
@a7 1
import org.eclipse.gef.editparts.ZoomManager;
a15 2
import org.eclipse.gef.ui.actions.ZoomInAction;
import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ZoomTool;
d30 1
a30 1
	private final PaletteRoot root = new PaletteRoot();
d35 3
a37 1
	private final Diagram diagram;
d42 2
a43 2
	private <%=palette.getFactoryClassName()%>(Diagram diagram) {
		this.diagram = diagram;
d50 1
d52 19
a70 1
		factory.createCommonTools();
d76 1
a76 1
		factory.create<%=AccessUtil.getPaletteEntryId(toolGroup)%>Group();
a77 8
		return factory.root;
	}

	/**
	 * @@generated
	 */
	protected Diagram getDiagram() {
		return diagram;
d83 1
a83 1
	private void createCommonTools() {
d89 2
a90 1
		common.add(new ToolEntry("Zoom", null, getZoomToolImage(), getZoomToolImage(), ZoomTool.class) {});
d92 1
a92 2
		root.add(common);
		root.setDefaultEntry(selectionTool);
d94 1
d100 1
a100 1
		ZoomInAction action = new ZoomInAction(new ZoomManager(null, null));
d104 1
d112 1
a112 1
	private void create<%=AccessUtil.getPaletteEntryId(toolGroup)%>Group() {
d119 1
a119 1
		create<%=AccessUtil.getPaletteEntryId(nodeCreationTool)%>CreationTool(paletteContainer);
d128 1
a128 1
		create<%=AccessUtil.getPaletteEntryId(linkCreationTool)%>CreationTool(paletteContainer);
d130 1
a130 1
		root.add(paletteContainer);
d145 1
a145 1
	private void create<%=AccessUtil.getPaletteEntryId(nodeCreationTool)%>CreationTool(PaletteContainer paletteContainer) {
d148 1
a148 2
		paletteContainer.add(new ToolEntry("<%=nodeCreationTool.getTitleKey()%>",
			"<%=nodeCreationTool.getDescriptionKey()%>", image, image) {
d155 1
a155 1
		});
d168 1
a168 1
	private void create<%=AccessUtil.getPaletteEntryId(linkCreationTool)%>CreationTool(PaletteContainer paletteContainer) {
d171 1
a171 2
		paletteContainer.add(new ToolEntry("<%=linkCreationTool.getTitleKey()%>",
			"<%=linkCreationTool.getDescriptionKey()%>", image, image) {
d178 1
a178 1
		});
@


1.9
log
@[ashatalin] #115107 remove uses of deprecated runtime code in templates
@
text
@a22 1
import <%=genDiagram.getProvidersPackageName()%>.ElementTypes;
d134 2
a135 1
		ImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.<%=genNode.getUniqueIdentifier()%>);
d140 1
a140 1
				Tool tool = new CreationTool(ElementTypes.<%=genNode.getUniqueIdentifier()%>);
d158 2
a159 1
		ImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.<%=genLink.getUniqueIdentifier()%>);
d164 1
a164 1
				Tool tool = new ConnectionCreationTool(ElementTypes.<%=genLink.getUniqueIdentifier()%>);
@


1.8
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d19 1
a19 1
import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectorCreationTool;
d163 1
a163 1
				Tool tool = new ConnectorCreationTool(ElementTypes.<%=genLink.getUniqueIdentifier()%>);
@


1.7
log
@[dstadnik] #112901 modeling assistant provider
@
text
@d128 1
a134 3
<%
		GenNode genNode = nodeCreationTool.getGenNode(); 
%>
d146 2
a147 1
<%	}
d151 1
d158 1
a158 6
<%
		GenLink genLink = linkCreationTool.getGenLink();
		if (genLink instanceof GenLinkWithClass) {
			GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
%>
		ImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.<%=genLinkWithClass.getUniqueIdentifier()%>);
d163 1
a163 1
				Tool tool = new ConnectorCreationTool(ElementTypes.<%=genLinkWithClass.getUniqueIdentifier()%>);
d168 1
a169 14
		} else if (genLink instanceof GenLinkReferenceOnly) {
			GenLinkReferenceOnly genLinkWithRef = (GenLinkReferenceOnly) genLink;
%>
		ImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.<%=genLinkWithRef.getUniqueIdentifier()%>);
		paletteContainer.add(new ToolEntry("<%=linkCreationTool.getTitleKey()%>",
			"<%=linkCreationTool.getDescriptionKey()%>", image, image) {

			public Tool createTool() {
				Tool tool = new ConnectorCreationTool(ElementTypes.<%=genLinkWithRef.getUniqueIdentifier()%>);
				tool.setProperties(getToolProperties());
				return tool;
			}
		});
<%		}%>
a170 1
<%	}
@


1.6
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.*"%>
a135 2
		GenClass genClass = genNode.getDomainMetaClass();
		String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName()+ "())";
d137 1
a137 1
		ImageDescriptor img = getImage(<%=domainElementInstanceCreationCode%>);
d139 1
a139 1
			"<%=nodeCreationTool.getDescriptionKey()%>", img, img) {
a161 2
			GenClass genClass = genLinkWithClass.getDomainMetaClass();
			String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName()+ "())";
d163 1
a163 1
		ImageDescriptor img = getImage(<%=domainElementInstanceCreationCode%>);
d165 1
a165 1
			"<%=linkCreationTool.getDescriptionKey()%>", img, img) {
a175 2
			GenClass genClass = genLinkWithRef.getDomainLinkTargetFeature().getGenClass();
			String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName()+ "())";
d177 1
a177 1
		ImageDescriptor img = getImage(<%=domainElementInstanceCreationCode%>);
d179 1
a179 1
			"<%=linkCreationTool.getDescriptionKey()%>", img, img) {
a198 7

	/**
	 * @@generated
	 */
	private ImageDescriptor getImage(Object item) {
		return <%=genDiagram.getPluginClassName()%>.getInstance().getItemImageDescriptor(item);
	}
@


1.5
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d177 16
@


1.4
log
@[ashatalin] #111772 EFactory.create(..) instead of XXFactory.createXXClass
@
text
@d144 1
a144 1
				Tool tool = new CreationTool(ElementTypes.<%=genNode.getDomainMetaClass().getName() + "_" + genNode.getVisualID()%>);
d172 1
a172 1
				Tool tool = new ConnectorCreationTool(ElementTypes.<%=genLinkWithClass.getDomainMetaClass().getName() + "_" + genLinkWithClass.getVisualID()%>);
@


1.3
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d137 1
a137 1
		String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
d144 1
a144 1
				Tool tool = new CreationTool(ElementTypes.<%=genNode.getDomainMetaClass().getName()%>);
d165 1
a165 1
			String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
d172 1
a172 1
				Tool tool = new ConnectorCreationTool(ElementTypes.<%=genLinkWithClass.getDomainMetaClass().getName()%>);
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.ImportUtil"%>
a6 3
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;
d8 1
d17 2
a38 5
	private final AdapterFactory adapterFactory;

	/**
	 * @@generated
	 */
d44 1
a44 2
	private <%=palette.getFactoryClassName()%>(AdapterFactory adapterFactory, Diagram diagram) {
		this.adapterFactory = adapterFactory;
d51 9
a59 5
	public static PaletteRoot createPalette(AdapterFactory adapterFactory, Diagram diagram) {
		<%=palette.getFactoryClassName()%> factory = new <%=palette.getFactoryClassName()%>(adapterFactory, diagram);
		factory.setupCommonTools();
<%for (int toolGroupIndex = 0; toolGroupIndex < palette.getGroups().size(); toolGroupIndex++) {%>
		factory.createToolGroup<%=toolGroupIndex%>();
d74 1
a74 1
	private void setupCommonTools() {
a75 1

d79 4
a82 1

d84 1
d86 6
a91 1
		root.add(common);
d94 2
a95 5
int nodeToolIndex = 0;
int linkToolIndex = 0;
List toolGroups = palette.getGroups();
for (int toolGroupIndex = 0; toolGroupIndex < toolGroups.size(); toolGroupIndex++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(toolGroupIndex);
d101 1
a101 1
	private void createToolGroup<%=toolGroupIndex%>() {
d103 12
a114 3
<%	for (int i = toolGroup.getNodeTools().size(); i > 0; i--, nodeToolIndex++) {%>
		createNodeTool<%=nodeToolIndex%>(paletteContainer);
<%	}%>
d116 2
a117 2
<%	for (int i = toolGroup.getLinkTools().size(); i > 0; i--, linkToolIndex++) {%>
		createLinkTool<%=linkToolIndex%>(paletteContainer);
d123 5
a127 8
// Move on and create methods called from createToolGroup 
nodeToolIndex = 0;
linkToolIndex = 0;
for (int toolGroupIndex = 0; toolGroupIndex < toolGroups.size(); toolGroupIndex++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(toolGroupIndex);
	List nodeEntries = toolGroup.getNodeTools();
	for (int i = 0; i < nodeEntries.size(); i++, nodeToolIndex++) {
		NodeEntry nodeEntry = (NodeEntry) nodeEntries.get(i);
d133 1
a133 1
	private void createNodeTool<%=nodeToolIndex%>(PaletteContainer paletteContainer) {
d135 1
a135 1
		GenNode genNode = nodeEntry.getGenNode(); 
d140 2
a141 2
		paletteContainer.add(new ToolEntry("<%=nodeEntry.getTitleKey()%>",
			"<%=nodeEntry.getDescriptionKey()%>", img, img) {
d151 3
a153 3
	List linkEntries = toolGroup.getLinkTools();
	for (int i = 0; i < linkEntries.size(); i++, linkToolIndex++) {
		LinkEntry linkEntry = (LinkEntry) linkEntries.get(i);
d159 1
a159 1
	private void createLinkTool<%=linkToolIndex%>(PaletteContainer paletteContainer) {
d161 1
a161 1
		GenLink genLink = linkEntry.getGenLink();
d168 2
a169 2
		paletteContainer.add(new ToolEntry("<%=linkEntry.getTitleKey()%>",
			"<%=linkEntry.getDescriptionKey()%>", img, img) {
d193 2
a194 6
	private ImageDescriptor getImage(Object obj) {
		IItemLabelProvider labelProvider = (IItemLabelProvider) adapterFactory.adapt(obj, IItemLabelProvider.class);
		if (labelProvider != null) {
			return ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(obj));
		}
		return null;
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.ecore.EClass org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.ImportUtil"%>
d127 1
a127 1
		GenClass genClass = genDiagram.findGenClass(genNode.getDomainMetaClass());
d155 1
a155 1
			GenClass genClass = genDiagram.findGenClass(genLinkWithClass.getDomainMetaClass());
@

