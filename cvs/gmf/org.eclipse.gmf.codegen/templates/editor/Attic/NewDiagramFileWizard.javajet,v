head	1.17;
access;
symbols
	v20081022-1925:1.17
	v20081015-1925:1.17
	v20081008-1925:1.17
	v20081001-1925:1.17
	v20080924-1925:1.17
	v20080917-1925:1.17
	v20080911-1728:1.17
	v20080910-1520:1.17
	v20080903-1520:1.17
	v20080827-1520:1.17
	v20080813-1520:1.17
	v20080806-1520:1.17
	v20070228-2000:1.16
	v20070221-1500:1.16
	v20070208-1800:1.16
	v20070202-0200:1.12.2.1
	v20070103-0300:1.16
	M4_20:1.16
	v20061222-1800:1.16
	v20061218-1200:1.16
	v20061214-0000:1.16
	v20061120-1300:1.16
	M3_20:1.16
	v20061117-0800:1.16
	v20061027-1200:1.12.2.1
	v20061020-1000:1.12.2.1
	v20061013-1330:1.14
	v20060919-0800:1.12.2.1
	v20060907-1100:1.12.2.1
	M1_20:1.13
	v20060904-1500:1.13
	v20060824-1600:1.12
	v20060817-1500:1.12
	v20060728-0500:1.12
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060626-1420:1.12
	v20060620-0400:1.12
	v20060616-1400:1.11
	v20060616-1200:1.11
	v20060609-1400:1.11
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-1300:1.9
	v20060519-0800:1.9
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.5
	I20060407-1200:1.4
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.17
date	2007.03.01.13.05.36;	author dstadnik;	state dead;
branches;
next	1.16;
commitid	1a6045e6cf9e4567;

1.16
date	2006.11.03.12.28.31;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.09.29.18.48.22;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.01.12.39.05;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.19.11.06.40;	author dstadnik;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2006.06.05.16.33.13;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.02.15.08.49;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.15.17.18.17;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.25.20.29.12;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.21.17.12.00;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.06.13.05.16;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.19.16.57.17;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.14.17.40.30;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.14.14.18.23;	author ashatalin;	state Exp;
branches;
next	;

1.12.2.1
date	2006.09.01.12.42.40;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.17
log
@rewrite NewDiagramFileWizard in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="NewDiagramFileWizardGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.common.codegen.*"
	skeleton="../common.skeleton"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final String pluginActivatorClass = importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName());
%>
<%@@ include file="../copyright4java.jetinc"%>
<%
importManager.emitPackageStatement(stringBuffer);

importManager.addImport("java.io.IOException");
importManager.addImport("java.util.Collections");
importManager.addImport("java.util.List");
importManager.addImport("java.util.LinkedList");
importManager.addImport("org.eclipse.core.commands.ExecutionException");
importManager.addImport("org.eclipse.core.commands.operations.OperationHistoryFactory");
importManager.addImport("org.eclipse.core.resources.IContainer");
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.core.runtime.IProgressMonitor");
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.core.runtime.NullProgressMonitor");
importManager.addImport("org.eclipse.core.runtime.Path");
importManager.addImport("org.eclipse.emf.common.util.URI");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.resource.Resource");
importManager.addImport("org.eclipse.emf.ecore.resource.ResourceSet");
importManager.addImport("org.eclipse.gmf.runtime.common.core.command.CommandResult");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.services.ViewService");
importManager.addImport("org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.jface.viewers.IStructuredSelection");
importManager.addImport("org.eclipse.jface.wizard.Wizard");
importManager.addImport("org.eclipse.swt.widgets.Composite");
importManager.addImport("org.eclipse.ui.PartInitException");
importManager.addImport("org.eclipse.ui.dialogs.WizardNewFileCreationPage");
importManager.addImport("org.eclipse.ui.IWorkbenchPage");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=genDiagram.getNewDiagramFileWizardClassName()%> extends Wizard {

	/**
     * @@generated
	 */
	private TransactionalEditingDomain myEditingDomain;
		
	/**
     * @@generated
	 */
	private WizardNewFileCreationPage myFileCreationPage;
		
	/**
     * @@generated
	 */
	private IFile mySelectedModelFile;
		
	/**
     * @@generated
	 */
	private IWorkbenchPage myWorkbenchPage;
		
	/**
     * @@generated
	 */
	private IStructuredSelection mySelection;
	
	/**
     * @@generated
	 */
	private EObject myDiagramRoot;

	/**
	 * @@generated
	 */
	public <%=genDiagram.getNewDiagramFileWizardClassName()%>(IFile selectedModelFile, IWorkbenchPage workbenchPage, IStructuredSelection selection, EObject diagramRoot, TransactionalEditingDomain editingDomain) {
		assert selectedModelFile != null : "Null selectedModelFile in <%=genDiagram.getNewDiagramFileWizardClassName()%> constructor"; //$NON-NLS-1$
		assert workbenchPage != null : "Null workbenchPage in <%=genDiagram.getNewDiagramFileWizardClassName()%> constructor"; //$NON-NLS-1$
		assert selection != null : "Null selection in <%=genDiagram.getNewDiagramFileWizardClassName()%> constructor"; //$NON-NLS-1$
	    assert diagramRoot != null : "Null diagramRoot in <%=genDiagram.getNewDiagramFileWizardClassName()%> constructor"; //$NON-NLS-1$
	    assert editingDomain != null : "Null editingDomain in <%=genDiagram.getNewDiagramFileWizardClassName()%> constructor"; //$NON-NLS-1$
	    
	   	mySelectedModelFile = selectedModelFile;
	   	myWorkbenchPage = workbenchPage;
	   	mySelection = selection;
	   	myDiagramRoot = diagramRoot;
	   	myEditingDomain = editingDomain;
	}
	     		
	/**
	 * @@generated
	 */
	public void addPages() {
		myFileCreationPage = new WizardNewFileCreationPage("Initialize new Ecore diagram file", mySelection) {

			public void createControl(Composite parent) {
				super.createControl(parent);
				
				IContainer parentContainer = mySelectedModelFile.getParent();
				String originalFileName = mySelectedModelFile.getProjectRelativePath().removeFileExtension().lastSegment();
				String fileExtension = ".<%=editorGen.getDiagramFileExtension()%>"; //$NON-NLS-1$
				String fileName = originalFileName + fileExtension;
				for (int i = 1; parentContainer.getFile(new Path(fileName)).exists(); i++) {
					fileName = originalFileName + i + fileExtension;
				}
				setFileName(fileName);
			}
		
		};
		myFileCreationPage.setTitle("Diagram file");
		myFileCreationPage.setDescription("Create new diagram based on " + <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID + " model content");
		addPage(myFileCreationPage);
		addPage(new RootElementSelectorPage());
	}

	/**
	 * @@generated
	 */
	public boolean performFinish() {
		IFile diagramFile = myFileCreationPage.createNewFile();
		try {
			diagramFile.setCharset("UTF-8", new NullProgressMonitor()); //$NON-NLS-1$
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to set charset for diagram file", e); //$NON-NLS-1$
		}
		
		ResourceSet resourceSet = myEditingDomain.getResourceSet();
		final Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true));

		List affectedFiles = new LinkedList();
		affectedFiles.add(mySelectedModelFile);
		affectedFiles.add(diagramFile);
			
		AbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain, "Initializing diagram contents", affectedFiles) { //$NON-NLS-1$
			protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
				int diagramVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getDiagramVisualID(myDiagramRoot);
				if (diagramVID != <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.VISUAL_ID) {
					return CommandResult.newErrorCommandResult("Incorrect model object stored as a root resource object"); //$NON-NLS-1$
				}
				Diagram diagram = ViewService.createDiagram(myDiagramRoot, <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
				diagramResource.getContents().add(diagram);
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
				diagramResource.getContents().add(diagram.getElement());
<%
}
if (!genDiagram.isSynchronized()) {
%>
				initDiagramContents(diagram, myDiagramRoot);
<%}%>
				return CommandResult.newOKCommandResult();
			}
		};
			
		try {
			OperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);
			diagramResource.save(Collections.EMPTY_MAP);
			<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.openDiagram(diagramResource);
		} catch (ExecutionException e) {
			<%=pluginActivatorClass%>.getInstance().logError("Unable to create model and diagram", e); //$NON-NLS-1$
		} catch (IOException ex) {
			<%=pluginActivatorClass%>.getInstance().logError("Save operation failed for: " + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$
		} catch (PartInitException ex) {
			<%=pluginActivatorClass%>.getInstance().logError("Unable to open editor", ex); //$NON-NLS-1$
		}			
		return true;
	}
		
<%if (!genDiagram.isSynchronized()) {%>
<%@@ include file="../semanticSync.jetinc/initDiagramContents.jetinc"%>
<%}%>	

	/**
     * @@generated
	 */
	private class RootElementSelectorPage extends <%=importManager.getImportedName("org.eclipse.jface.wizard.WizardPage")%> implements <%=importManager.getImportedName("org.eclipse.jface.viewers.ISelectionChangedListener")%> {
	
		/**
    	 * @@generated
		 */
		protected RootElementSelectorPage() {
			super("Select diagram root element");
			setTitle("Diagram root element");
			setDescription("Select semantic model element to be depicted on diagram");
		}

		/**
    	 * @@generated
		 */		
		public void createControl(<%=importManager.getImportedName("org.eclipse.swt.widgets.Composite")%> parent) {
			initializeDialogUnits(parent);
			<%=importManager.getImportedName("org.eclipse.swt.widgets.Composite")%> topLevel = new <%=importManager.getImportedName("org.eclipse.swt.widgets.Composite")%>(parent, <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.NONE);
			topLevel.setLayout(new <%=importManager.getImportedName("org.eclipse.swt.layout.GridLayout")%>());
			topLevel.setLayoutData(new <%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%>(<%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%>.VERTICAL_ALIGN_FILL | <%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%>.HORIZONTAL_ALIGN_FILL));
			topLevel.setFont(parent.getFont());
			setControl(topLevel);
			createModelBrowser(topLevel);
			setPageComplete(validatePage());
		}
		
		/**
		 * @@generated
		 */
		private void createModelBrowser(<%=importManager.getImportedName("org.eclipse.swt.widgets.Composite")%> parent) {
			<%=importManager.getImportedName("org.eclipse.swt.widgets.Composite")%> panel = new <%=importManager.getImportedName("org.eclipse.swt.widgets.Composite")%>(parent, <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.NONE);
			panel.setLayoutData(new <%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%>(<%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%>.FILL_BOTH));
			<%=importManager.getImportedName("org.eclipse.swt.layout.GridLayout")%> layout = new <%=importManager.getImportedName("org.eclipse.swt.layout.GridLayout")%>();
			layout.marginWidth = 0;
			panel.setLayout(layout);
			
			<%=importManager.getImportedName("org.eclipse.swt.widgets.Label")%> label = new <%=importManager.getImportedName("org.eclipse.swt.widgets.Label")%>(panel, <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.NONE);
			label.setText("Select diagram root element:");
			label.setLayoutData(new <%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%>(<%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%>.HORIZONTAL_ALIGN_BEGINNING));
		
			<%=importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer")%> treeViewer = new <%=importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer")%>(panel, <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.SINGLE | <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.H_SCROLL | <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.V_SCROLL | <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.BORDER);
			<%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%> layoutData = new <%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%>(<%=importManager.getImportedName("org.eclipse.swt.layout.GridData")%>.FILL_BOTH);
			layoutData.heightHint = 300;
			layoutData.widthHint = 300;
			treeViewer.getTree().setLayoutData(layoutData);
			treeViewer.setContentProvider(new <%=importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider")%>(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory()));
			treeViewer.setLabelProvider(new <%=importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider")%>(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory()));
			treeViewer.setInput(myDiagramRoot.eResource());
			treeViewer.setSelection(new <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>(myDiagramRoot));
			treeViewer.addSelectionChangedListener(this);
		}

		/**
		 * @@generated
		 */
		public void selectionChanged(<%=importManager.getImportedName("org.eclipse.jface.viewers.SelectionChangedEvent")%> event) {
			myDiagramRoot = null;
			if (event.getSelection() instanceof <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) {
				<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> selection = (<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) event.getSelection();
				if (selection.size() == 1) {
					Object selectedElement = selection.getFirstElement();
					if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider")%>) {
						selectedElement = ((<%=importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider")%>) selectedElement).getValue();
					}
					if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap")%>.Entry) {
						selectedElement = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap")%>.Entry) selectedElement).getValue();
					}
					if (selectedElement instanceof EObject) {
						myDiagramRoot = (EObject) selectedElement;
					}
				}
			}
			setPageComplete(validatePage());
		}
		
		/**
    	 * @@generated
		 */	
		private boolean validatePage() {
			if (myDiagramRoot == null) {
				setErrorMessage("No diagram root element selected");
				return false;
			}
			boolean result = ViewService.getInstance().provides(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.services.view.CreateDiagramViewOperation")%>(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(myDiagramRoot), <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT));
			setErrorMessage(result ? null : "Invalid diagram root element was selected");
			return result;
		}
		
	}
}
<%importManager.emitSortedImports();%>@


1.16
log
@remove deps from core.resources
@
text
@@


1.15
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@d164 1
a164 1
			<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.openDiagramEditor(myWorkbenchPage, diagramFile);
@


1.14
log
@#114200 refactor 'open diagram editor' code to support RCP
@
text
@d135 1
a135 1
		final Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));
@


1.13
log
@[155966] - No valid diagram root in "Initialize ... diagram file" wizard on XSD generated models
@
text
@a38 1
importManager.addImport("org.eclipse.ui.ide.IDE");
d164 1
a164 1
			IDE.openEditor(myWorkbenchPage, diagramFile);
@


1.12
log
@prevent compilation error
@
text
@d241 11
a251 2
				if (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {
					myDiagramRoot = (EObject) selection.getFirstElement();
@


1.12.2.1
log
@[155966] - No valid diagram root in "Initialize ... diagram file" wizard on XSD generated models
@
text
@d241 2
a242 11
				if (selection.size() == 1) {
					Object selectedElement = selection.getFirstElement();
					if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider")%>) {
						selectedElement = ((<%=importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider")%>) selectedElement).getValue();
					}
					if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap")%>.Entry) {
						selectedElement = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap")%>.Entry) selectedElement).getValue();
					}
					if (selectedElement instanceof EObject) {
						myDiagramRoot = (EObject) selectedElement;
					}
@


1.11
log
@- ElementChooserDialog title generated
- diagram file extension marked as non-nls
@
text
@d156 1
a156 1
				initDiagramContents(diagram, diagramModelObject);
@


1.10
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d109 1
a109 1
				String fileExtension = ".<%=editorGen.getDiagramFileExtension()%>";
@


1.9
log
@#131543 Obsolete code should be eliminated
@
text
@a24 1
importManager.addImport("org.eclipse.emf.common.util.WrappedException");
a32 1
importManager.addImport("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory");
a34 1
importManager.addImport("org.eclipse.jface.dialogs.MessageDialog");
d54 1
a54 1
	private TransactionalEditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
d75 5
d84 7
a90 1
	public <%=genDiagram.getNewDiagramFileWizardClassName()%>(IFile selectedModelFile, IWorkbenchPage workbenchPage, IStructuredSelection selection) {
d94 2
d119 1
a119 1
		myFileCreationPage.setDescription("Create new diagram and initialize it using specified " + <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID + " model content");
d121 1
a127 6
		final EObject diagramModelObject = load();
		if (diagramModelObject == null) {
			MessageDialog.openError(getShell(), "Error", "Failed to load user model");
			return false;
		}
			
d144 1
a144 1
				int diagramVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getDiagramVisualID(diagramModelObject);
d148 1
a148 1
				Diagram diagram = ViewService.createDiagram(diagramModelObject, <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
d176 4
d183 76
a258 11
	private EObject load() {
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
		ResourceSet resourceSet = new <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl")%>();
<%} else {%>
		ResourceSet resourceSet = myEditingDomain.getResourceSet();
<%}%>
		try {
			Resource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);
			return (EObject) resource.getContents().get(0);
		} catch (WrappedException ex) {
			<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$
d260 1
a260 1
		return null;
a261 4
<%if (!genDiagram.isSynchronized()) {%>
<%@@ include file="../semanticSync.jetinc/initDiagramContents.jetinc"%>
<%}%>	

@


1.8
log
@Suggesting correct diagram file name in wizard.
@
text
@a4 3
// TODO: move this attribute to the genmodel
final boolean isSynchronizedDiagram = true;

d149 1
a149 1
if (!isSynchronizedDiagram) {
d188 1
a188 1
<%if (!isSynchronizedDiagram) {%>
@


1.7
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d23 1
d29 1
d43 1
d95 16
a110 2
		myFileCreationPage = new WizardNewFileCreationPage("Initialize new Ecore diagram file", mySelection);
		myFileCreationPage.setFileName(mySelectedModelFile.getProjectRelativePath().removeFileExtension().addFileExtension("<%=editorGen.getDiagramFileExtension()%>").lastSegment());
@


1.6
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d125 1
a125 1
				int diagramVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getDiagramVisualID(diagramModelObject);
@


1.5
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d126 1
a126 1
				if (diagramVID != <%=genDiagram.getVisualID()%>) {
@


1.4
log
@#132465 Bidi3.2: [HCG]Encoding of the mindmap diagram is always ASCII
@
text
@a10 1
final String modelID = editorGen.getModelID();
d95 1
a95 1
		myFileCreationPage.setDescription("Create new diagram and initialize it using specified <%=modelID%> model content");
d129 1
a129 1
				Diagram diagram = ViewService.createDiagram(diagramModelObject, "<%=modelID%>", <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
@


1.3
log
@#128024 Model references are not recognized as links
#131543 Obsolete code should be eliminated
@
text
@d111 6
@


1.2
log
@#131543 Correcting InitDiagramFile logic
@
text
@d6 1
a6 1
final boolean isSynchronizedDiagram = false;
d170 1
a170 1
<%@@ include file="initDiagramContents.jetinc"%>
@


1.1
log
@#131543 Code reconstructing the diagram contents separated from the init diagram file action.
@
text
@a12 12
List genLinks = genDiagram.getLinks();

// Collecting all phantom elements
Map genClass2Phantom = new LinkedHashMap();
for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
	GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
	TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
	if (!nextModelFacet.isPhantomElement()) {
		continue;
	}
	genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
}
@

