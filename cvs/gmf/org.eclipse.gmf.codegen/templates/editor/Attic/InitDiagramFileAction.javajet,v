head	1.48;
access;
symbols
	v20081022-1925:1.48
	v20081015-1925:1.48
	v20081008-1925:1.48
	v20081001-1925:1.48
	v20080924-1925:1.48
	v20080917-1925:1.48
	v20080911-1728:1.48
	v20080910-1520:1.48
	v20080903-1520:1.48
	v20080827-1520:1.48
	v20080813-1520:1.48
	v20080806-1520:1.48
	v20060316-0600:1.46
	v20070307-0700:1.44
	v20070301-1200:1.44
	v20070228-2000:1.44
	v20070221-1500:1.44
	v20070208-1800:1.44
	v20070202-0200:1.43
	v20070103-0300:1.44
	M4_20:1.44
	v20061222-1800:1.44
	v20061218-1200:1.44
	v20061214-0000:1.44
	v20061120-1300:1.44
	M3_20:1.44
	v20061117-0800:1.44
	v20061027-1200:1.43
	v20061020-1000:1.43
	v20061013-1330:1.43
	v20060919-0800:1.43
	v20060907-1100:1.43
	M1_20:1.43
	v20060904-1500:1.43
	v20060824-1600:1.43
	v20060817-1500:1.43
	v20060728-0500:1.43
	v20060713-1700:1.43
	R1_0_maintenance:1.43.0.2
	R1_0:1.43
	v20060627-1200:1.43
	v20060626-1420:1.43
	v20060620-0400:1.43
	v20060616-1400:1.43
	v20060616-1200:1.43
	v20060609-1400:1.43
	v20060531-1730:1.42
	v20060530-1930:1.42
	v20060526-1200:1.42
	v20060519-1300:1.42
	v20060519-0800:1.42
	v20060512-1000:1.42
	I20060512-1000:1.42
	I20060505-1400:1.42
	I20060428-1300:1.42
	I20060424-0500:1.40
	I20060424-0300:1.40
	M6_10:1.40
	I20060407-1200:1.39
	I20060331-1000:1.39
	I20060324-0300:1.39
	I20060317-1300:1.39
	I20060317-1200:1.39
	I20060316-1300:1.39
	I20060309-1300:1.38
	M5_10:1.37
	S20060303-1600:1.37
	I20060227-1730:1.35
	I20060216-1945:1.34
	I20060210-1715:1.33
	I20060209-1815:1.33
	I20060203-0830:1.26
	I20060202-1415:1.26
	I20060129-1145:1.25
	I20060127-0900:1.25
	I20060120-1530:1.21
	I20060113-1700:1.19
	M4_10:1.19
	I20060107-1100:1.19
	I20060105-1630:1.19
	I20051230-1230:1.19
	I20051223-1100:1.19
	I20051217-0925:1.17
	I20051208-2000:1.17
	I20051201-1800:1.17
	I20051124-2000:1.15
	M3_10:1.15
	I20051118-1245:1.15
	I20051111-1800:1.11
	I20051106-0900:1.10
	v20051030:1.9;
locks; strict;
comment	@# @;
expand	@k@;


1.48
date	2007.03.16.14.45.34;	author dstadnik;	state dead;
branches;
next	1.47;
commitid	2a5045faad8d4567;

1.47
date	2007.03.16.13.57.05;	author dstadnik;	state Exp;
branches;
next	1.46;
commitid	741e45faa2304567;

1.46
date	2007.03.15.12.21.03;	author dstadnik;	state Exp;
branches;
next	1.45;
commitid	34a45f93a2e4567;

1.45
date	2007.03.15.11.57.13;	author dstadnik;	state Exp;
branches;
next	1.44;
commitid	21b545f934984567;

1.44
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.43;

1.43
date	2006.06.02.15.08.49;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.26.11.00.56;	author ashatalin;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.25.20.29.12;	author ashatalin;	state Exp;
branches;
next	1.40;

1.40
date	2006.04.13.22.22.22;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.03.14.14.18.23;	author ashatalin;	state Exp;
branches;
next	1.38;

1.38
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.03.02.12.00.46;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2006.03.01.17.20.36;	author ashatalin;	state Exp;
branches;
next	1.35;

1.35
date	2006.02.17.12.00.40;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.02.13.17.20.07;	author ashatalin;	state Exp;
branches;
next	1.33;

1.33
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.32;

1.32
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.31;

1.31
date	2006.02.08.13.05.28;	author atikhomirov;	state Exp;
branches;
next	1.30;

1.30
date	2006.02.08.12.28.12;	author atikhomirov;	state Exp;
branches;
next	1.29;

1.29
date	2006.02.08.00.17.45;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.02.06.11.52.36;	author ashatalin;	state Exp;
branches;
next	1.27;

1.27
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.31.19.02.07;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.25.19.39.07;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.01.24.19.31.55;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.01.24.12.01.20;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.19.17.33.04;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.20.18.29.34;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.30.16.15.38;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2005.11.29.16.42.28;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.17.18.23.01;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.17.12.38.37;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.16.08.37.41;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.09.13.20.23;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.04.13.21.35;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.24.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.19.17.56.08;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.18.10.21.18;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.14.17.27.16;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.26.15.15.44;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.48
log
@rewrite init diagram file action in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="InitDiagramFileActionGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.common.codegen.*"
	skeleton="../common.skeleton"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final String pluginActivatorClass = importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName());
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.jface.action.IAction");
importManager.addImport("org.eclipse.jface.dialogs.IDialogSettings");
importManager.addImport("org.eclipse.jface.viewers.ISelection");
importManager.addImport("org.eclipse.jface.viewers.IStructuredSelection");
importManager.addImport("org.eclipse.jface.wizard.WizardDialog");
importManager.addImport("org.eclipse.jface.wizard.Wizard");
importManager.addImport("org.eclipse.ui.IObjectActionDelegate");
importManager.addImport("org.eclipse.ui.IWorkbenchPart");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.resource.Resource");
importManager.addImport("org.eclipse.emf.ecore.resource.ResourceSet");
importManager.addImport("org.eclipse.emf.common.util.URI");
importManager.addImport("org.eclipse.emf.common.util.WrappedException");
importManager.addImport("org.eclipse.jface.dialogs.MessageDialog");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=genDiagram.getInitDiagramFileActionClassName()%> implements IObjectActionDelegate {

	/**
	 * @@generated
	 */
	private IWorkbenchPart myPart;

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> domainModelURI;

    /**
     * @@generated
     */
	public void setActivePart(IAction action, IWorkbenchPart targetPart) {
		myPart = targetPart;
	}

    /**
     * @@generated
     */
	public void selectionChanged(IAction action, ISelection selection) {
		domainModelURI = null;
		action.setEnabled(false);
		if (selection instanceof IStructuredSelection == false || selection.isEmpty()) {
			return;
		}
		IFile file = (IFile) ((IStructuredSelection) selection).getFirstElement();
		domainModelURI = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(file.getFullPath().toString(), true);
		action.setEnabled(true);
	}

    /**
     * @@generated
     */
	public void run(IAction action) {
		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
		ResourceSet resourceSet = new <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl")%>();
<%} else {%>
		ResourceSet resourceSet = editingDomain.getResourceSet();
<%}%>
		EObject diagramRoot = null;
		try {
			Resource resource = resourceSet.getResource(domainModelURI, true);
			diagramRoot = (EObject) resource.getContents().get(0);
		} catch (WrappedException ex) {
			<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + domainModelURI, ex);
		}
		if (diagramRoot == null) {
			MessageDialog.openError(myPart.getSite().getShell(), "Error", "Model file loading failed");
			return;
		}
		Wizard wizard = new <%=importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName())%>(domainModelURI, diagramRoot, editingDomain);
        IDialogSettings pluginDialogSettings = <%=pluginActivatorClass%>.getInstance().getDialogSettings();
        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection("InitDiagramFile"); //$NON-NLS-1$
        if (initDiagramFileSettings == null) {
        	initDiagramFileSettings = pluginDialogSettings.addNewSection("InitDiagramFile"); //$NON-NLS-1$
        }
        wizard.setDialogSettings(initDiagramFileSettings);
		wizard.setForcePreviousAndNextButtons(false);
		wizard.setWindowTitle("Initialize new " + <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID + " diagram file");

        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);
        dialog.create();
        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);
        dialog.open();
	}

}
<%importManager.emitSortedImports();%>@


1.47
log
@remove stale attribute
@
text
@@


1.46
log
@refactor attributes to match types
@
text
@a18 1
importManager.addImport("org.eclipse.jface.viewers.StructuredSelection");
d92 1
a92 1
		Wizard wizard = new <%=importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName())%>(domainModelURI, myPart.getSite().getPage(), diagramRoot, editingDomain);
d94 1
a94 1
        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection("InisDiagramFile"); //$NON-NLS-1$
d96 1
a96 1
        	initDiagramFileSettings = pluginDialogSettings.addNewSection("InisDiagramFile"); //$NON-NLS-1$
@


1.45
log
@[168661] Use URIs instead of IResources to make code reusable in RCP
@
text
@d49 1
a49 1
	private <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> mySelectedModelFile;
d62 1
a62 1
		mySelectedModelFile = null;
d68 1
a68 1
		mySelectedModelFile = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(file.getFullPath().toString(), true);
d84 1
a84 1
			Resource resource = resourceSet.getResource(mySelectedModelFile, true);
d87 1
a87 1
			<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + mySelectedModelFile, ex);
d93 1
a93 1
		Wizard wizard = new <%=importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName())%>(mySelectedModelFile, myPart.getSite().getPage(), diagramRoot, editingDomain);
@


1.44
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@d45 1
a45 1
	
d49 2
a50 7
	private IFile mySelectedModelFile;
	
	/**
	 * @@generated
	 */
	private IStructuredSelection mySelection;
    
d57 1
a57 1
	
a62 1
		mySelection = StructuredSelection.EMPTY;
d67 2
a68 2
		mySelection = (IStructuredSelection) selection;
		mySelectedModelFile = (IFile) ((IStructuredSelection) selection).getFirstElement();
d71 1
a71 1
	
d84 1
a84 1
			Resource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString(), true), true);
d87 1
a87 1
			<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$
d93 1
a93 1
		Wizard wizard = new <%=importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName())%>(mySelectedModelFile, myPart.getSite().getPage(), mySelection, diagramRoot, editingDomain);
@


1.43
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d90 1
a90 1
			Resource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);
@


1.42
log
@#138574 NPE creating ship destination link in TaiPan sample
@
text
@d24 8
d82 18
a99 1
		Wizard wizard = new <%=importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName())%>(mySelectedModelFile, myPart.getSite().getPage(), mySelection);
@


1.41
log
@Suggesting correct diagram file name in wizard.
@
text
@a14 4
importManager.addImport("org.eclipse.core.resources.IResource");
importManager.addImport("org.eclipse.core.resources.ResourcesPlugin");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.core.runtime.Path");
a15 1
importManager.addImport("org.eclipse.jface.dialogs.IInputValidator");
@


1.40
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d36 1
a36 1
public class <%=genDiagram.getInitDiagramFileActionClassName()%> implements IObjectActionDelegate, IInputValidator {
a76 14
     */	
	public String isValid(String newText) {
		IStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);
		if (!status.isOK()) {
			return status.getMessage();
		}
		if (mySelectedModelFile.getParent().getFile(new Path(newText).addFileExtension("<%=editorGen.getDiagramFileExtension()%>")).exists()) {
			return "File already exists, choose another name";
		}
		return null;
	}
	
    /**
     * @@generated
@


1.39
log
@#131543 Code reconstructing the diagram contents separated from the init diagram file action.
@
text
@d101 1
a101 1
		wizard.setWindowTitle("Initialize new <%=editorGen.getModelID()%> diagram file");
@


1.38
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.common.codegen.*"
d6 1
a7 1
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
a8 15
final String modelID = editorGen.getModelID();
List genLinks = genDiagram.getLinks();

// Collecting all phantom elements
Map genClass2Phantom = new LinkedHashMap();
for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
	GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
	TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
	if (!nextModelFacet.isPhantomElement()) {
		continue;
	}
	genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
}

boolean generateGetCompartment = false;
a13 4
importManager.addImport("java.io.IOException");
importManager.addImport("java.util.Collections");
importManager.addImport("java.util.HashMap");
importManager.addImport("java.util.Map");
a18 4
importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.resource.Resource");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
d21 1
a21 1
importManager.addImport("org.eclipse.jface.dialogs.MessageDialog");
d25 2
a28 21
importManager.addImport("org.eclipse.ui.PartInitException");
importManager.addImport("org.eclipse.ui.ide.IDE");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.services.ViewService");
importManager.addImport("org.eclipse.jface.dialogs.IDialogSettings");
importManager.addImport("org.eclipse.jface.wizard.WizardDialog");
importManager.addImport("org.eclipse.jface.wizard.Wizard");
importManager.addImport("org.eclipse.ui.dialogs.WizardNewFileCreationPage");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory");
importManager.addImport("org.eclipse.emf.common.util.WrappedException");
importManager.addImport("org.eclipse.emf.ecore.resource.ResourceSet");
importManager.addImport("org.eclipse.emf.common.util.URI");
importManager.addImport("java.util.List");
importManager.addImport("java.util.LinkedList");
importManager.addImport("org.eclipse.core.runtime.IProgressMonitor");
importManager.addImport("org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand");
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.core.commands.ExecutionException");
importManager.addImport("org.eclipse.gmf.runtime.common.core.command.CommandResult");
importManager.addImport("org.eclipse.core.commands.operations.OperationHistoryFactory");
importManager.addImport("org.eclipse.core.runtime.NullProgressMonitor");
a37 13
<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
%>
	
	    /**
    	 * @@generated
		 */
		private static final Integer LINK_KEY_<%=nextLink.getVisualID()%> = new Integer(<%=nextLink.getVisualID()%>);
<%
}
%>

a52 10
	/**
	 * @@generated
	 */
	private Map myLinkVID2EObjectMap = new HashMap();
	
	/**
	 * @@generated
	 */
	private Map myEObject2NodeMap = new HashMap();

d83 1
a83 1
		if (mySelectedModelFile.getParent().getFile(new Path(newText).addFileExtension("editorGen.getDiagramFileExtension()")).exists()) {
d93 1
a93 1
		NewDiagramFileWizard wizard = new NewDiagramFileWizard();
d101 1
a101 1
		wizard.setWindowTitle("Initialize new <%=genDiagram.getEditorGen().getModelID()%> diagram file");
a108 435
    /**
     * @@generated
     */
	private class NewDiagramFileWizard extends Wizard {

	    /**
    	 * @@generated
		 */
		private TransactionalEditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
		
	    /**
    	 * @@generated
		 */
		private WizardNewFileCreationPage myFileCreationPage;
		
	    /**
	     * @@generated
	     */
		public void addPages() {
			myFileCreationPage = new WizardNewFileCreationPage("Initialize new Ecore diagram file", mySelection);
			myFileCreationPage.setFileName(mySelectedModelFile.getProjectRelativePath().removeFileExtension().addFileExtension("<%=editorGen.getDiagramFileExtension()%>").lastSegment());
			myFileCreationPage.setTitle("Diagram file");
			myFileCreationPage.setDescription("Create new diagram and initialize it using specified <%=genDiagram.getEditorGen().getModelID()%> model content");
			addPage(myFileCreationPage);
		}

	    /**
	     * @@generated
	     */
		public boolean performFinish() {
			final EObject diagramModelObject = load();
			if (diagramModelObject == null) {
				MessageDialog.openError(getShell(), "Error", "Failed to load user model");
				return false;
			}
			
			IFile diagramFile = myFileCreationPage.createNewFile();
			ResourceSet resourceSet = myEditingDomain.getResourceSet();
			final Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));

			List affectedFiles = new LinkedList();
			affectedFiles.add(mySelectedModelFile);
			affectedFiles.add(diagramFile);
			
			AbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain, "Initializing diagram contents", affectedFiles) { //$NON-NLS-1$
				protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
					int diagramVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getDiagramVisualID(diagramModelObject);
					if (diagramVID != <%=genDiagram.getVisualID()%>) {
						return CommandResult.newErrorCommandResult("Incorrect model object stored as a root resource object"); //$NON-NLS-1$
					}
<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
%>
					myLinkVID2EObjectMap.put(LINK_KEY_<%=nextLink.getVisualID()%>, new LinkedList());
<%
}
%>
					Diagram diagram = ViewService.createDiagram(diagramModelObject, "<%=modelID%>", <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
					diagramResource.getContents().add(diagram);
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
					diagramResource.getContents().add(diagram.getElement());
<%}%>
					create<%=genDiagram.getUniqueIdentifier()%>Children(diagram, diagramModelObject);
<%
if (!genClass2Phantom.isEmpty()) {
%>
					Resource resource = diagramModelObject.eResource();
					int nodeVID;
					for (<%=importManager.getImportedName("java.util.Iterator")%> it = resource.getContents().iterator(); it.hasNext();) {
						EObject nextResourceObject = (EObject) it.next();
						if (nextResourceObject == diagramModelObject) {
							continue;
						}
<%
	for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
		GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();
%>
						nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(diagram, nextResourceObject, "");
						if (<%=phantomNode.getVisualID()%> == nodeVID) {
							<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextResourceObject, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
							myEObject2NodeMap.put(nextResourceObject, nextNode);
							create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextResourceObject);
							continue;
						}
<%
	}
%>
					}
<%
}
%>		
					createLinks();
					myLinkVID2EObjectMap.clear();
					myEObject2NodeMap.clear();		
					return CommandResult.newOKCommandResult();
				}
			};
			
			try {
				OperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);
				diagramResource.save(Collections.EMPTY_MAP);
				IDE.openEditor(myPart.getSite().getPage(), diagramFile);
			} catch (ExecutionException e) {
				<%=pluginActivatorClass%>.getInstance().logError("Unable to create model and diagram", e); //$NON-NLS-1$
			} catch (IOException ex) {
				<%=pluginActivatorClass%>.getInstance().logError("Save operation failed for: " + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$
			} catch (PartInitException ex) {
				<%=pluginActivatorClass%>.getInstance().logError("Unable to open editor", ex); //$NON-NLS-1$
			}			
			return true;
		}
		
	    /**
    	 * @@generated
	     */
		private EObject load() {
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
			ResourceSet resourceSet = new <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl")%>();
<%} else {%>
			ResourceSet resourceSet = myEditingDomain.getResourceSet();
<%}%>
			try {
				Resource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);
				return (EObject) resource.getContents().get(0);
			} catch (WrappedException ex) {
				<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$
			}
			return null;
		}
		
	}
	
<%
for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();
%>	

    /**
     * @@generated
     */
	private void create<%=nextContainer.getUniqueIdentifier()%>Children(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> viewObject, EObject modelObject) {
<%
	if (nextContainer.getContainedNodes().size() > 0) {
%>
		EObject nextValue;
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode;
		int nodeVID;
<%
	} else if (nextContainer instanceof GenNode && ((GenNode) nextContainer).getCompartments().size() > 0) {
%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode;
<%
	}
	
	for (Iterator children = nextContainer.getContainedNodes().iterator(); children.hasNext();) {
		GenNode nextChild = (GenNode) children.next();
		TypeModelFacet typeModelFacet = nextChild.getModelFacet();
		if (typeModelFacet.isPhantomElement()) {
// Skipping top-leve phantoms
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (childMetaFeature.isListType()) {
%>
		for (<%=importManager.getImportedName("java.util.Iterator")%> values = <%=getFeatureValueGetter("modelObject", childMetaFeature, true, importManager)%>.iterator(); values.hasNext();) {
			nextValue = (EObject) values.next();

<%
		} else {
%>
		nextValue = <%=getFeatureValueGetter("modelObject", childMetaFeature, true, importManager)%>;
<%
		}
%>
		nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(viewObject, nextValue, "");
		if (<%=nextChild.getVisualID()%> == nodeVID) {
			nextNode = ViewService.createNode(viewObject, nextValue, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
			myEObject2NodeMap.put(nextValue, nextNode);
			create<%=nextChild.getUniqueIdentifier()%>Children(nextNode, nextValue);
		}
<%
		if (childMetaFeature.isListType()) {
%>
		}
<%
		}
	}
	
	if (nextContainer instanceof GenNode) {
		GenNode nextNode = (GenNode) nextContainer;
		for (Iterator compartments = nextNode.getCompartments().iterator(); compartments.hasNext();) {
			GenCompartment nextCompartment = (GenCompartment) compartments.next();
			generateGetCompartment = true;
%>
		nextNode = getCompartment(viewObject, "<%=nextCompartment.getTitle()%>");
		if (nextNode != null) {
			create<%=nextCompartment.getUniqueIdentifier()%>Children(nextNode, modelObject);
		}
<%
		}
	}
%>
		storeLinks(modelObject, viewObject.getDiagram());
	}
<%
}

if (generateGetCompartment) {
%>
	
    /**
     * @@generated
     */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getCompartment(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> node, String name) {
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = node.getChildren().iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
			if (nextView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> && name.equals(nextView.getType())) {
				return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) nextView;
			}
		}
		return null;
	}
<%
}
%>

	/**
	 *@@generated
	 */
	private void storeLinks(EObject container, Diagram diagram) {
		EClass containerMetaclass = container.eClass();
		storeFeatureModelFacetLinks(container, containerMetaclass, diagram);
		storeTypeModelFacetLinks(container, containerMetaclass, diagram);
	}
	
	/**
     * @@generated
     */
	private void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {	
<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();
%>		
		if (-1 != containerMetaclass.getFeatureID(<%=importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childMetaFeature.getFeatureAccessorName()%>())) {
			Object featureValue = <%=getFeatureValueGetter("container", childMetaFeature, true, importManager)%>;
<%
		if (childMetaFeature.isListType()) {
%>		
			for (<%=importManager.getImportedName("java.util.Iterator")%> values = ((<%=importManager.getImportedName("java.util.Collection")%>) featureValue).iterator(); values.hasNext();) {
				EObject nextValue = ((EObject) values.next());
<%
		} else {
%>
			EObject nextValue = (EObject) featureValue;
<%		
		}
%>
			int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getLinkWithClassVisualID(nextValue);
			if (<%=nextLink.getVisualID()%> == linkVID) {
				Object structuralFeatureResult = <%=getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager)%>;
				if (structuralFeatureResult instanceof EObject) {
					EObject dst = (EObject) structuralFeatureResult;
					((<%=importManager.getImportedName("java.util.Collection")%>) myLinkVID2EObjectMap.get(LINK_KEY_<%=nextLink.getVisualID()%>)).add(new LinkDescriptor(container, dst, nextValue, diagram));
				}
			}
<%
		if (childMetaFeature.isListType()) {
%>
			}
<%
		}
%>
		}
<%
	}
}
%>
	}

	/**
	 *@@generated
	 */
	private void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {
<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof FeatureModelFacet) {
		FeatureModelFacet linkFMF = (FeatureModelFacet) nextLink.getModelFacet();
		GenFeature genFeature = linkFMF.getMetaFeature();
		GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
%>
		if (-1 != containerMetaclass.getFeatureID(<%=importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=genFeature.getFeatureAccessorName()%>())) {
			Object structuralFeatureResult = <%=getFeatureValueGetter("container", genFeature, true, importManager)%>;
<%		if (genFeature.isListType()) {%>
			for (<%=importManager.getImportedName("java.util.Iterator")%> destinations = ((<%=importManager.getImportedName("java.util.Collection")%>) structuralFeatureResult).iterator(); destinations.hasNext();) {
				EObject nextDestination = (EObject) destinations.next();
<%		} else {%>
			if (structuralFeatureResult instanceof EObject) {
				EObject nextDestination = (EObject) structuralFeatureResult;
<%		}%>
				((<%=importManager.getImportedName("java.util.Collection")%>) myLinkVID2EObjectMap.get(LINK_KEY_<%=nextLink.getVisualID()%>)).add(new LinkDescriptor(container, nextDestination, <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextLink.getUniqueIdentifier()%>, diagram));
<%		if (genFeature.isContains() && phantomNode != null) {%>
				int nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(diagram, nextDestination, "");
				if (<%=phantomNode.getVisualID()%> == nodeVID) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextDestination, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
					myEObject2NodeMap.put(nextDestination, nextNode);
					create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextDestination);
				}
<%		}%>
			}
		}
<%
	}
}
%>
	}

	/**
     * @@generated
     */
	private void createLinks() {
<%
if (genLinks.size() > 0) {
%>
		<%=importManager.getImportedName("java.util.Collection")%> linkElements;
<%
}

for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
%>
		linkElements = (<%=importManager.getImportedName("java.util.Collection")%>) myLinkVID2EObjectMap.get(LINK_KEY_<%=nextLink.getVisualID()%>);
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = linkElements.iterator(); it.hasNext();) {
			LinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), nextLinkDescriptor.getDiagram(), "", <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
			if (edge != null) {
				edge.setSource((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) myEObject2NodeMap.get(nextLinkDescriptor.getSource()));
				edge.setTarget((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));
			}
		}
<%
}
%>
	}
	
	/**
     * @@generated
     */
	private class LinkDescriptor {
	
		/**
    	 * @@generated
	     */
		private EObject mySource;
		
		/**
    	 * @@generated
	     */
		private EObject myDestination;
		
		/**
    	 * @@generated
	     */
		private IAdaptable mySemanticAdapter;
		
		/**
    	 * @@generated
	     */
		private Diagram myDiagram;
		
		/**
    	 * @@generated
	     */
		protected LinkDescriptor(EObject source, EObject destination, EObject linkElement, Diagram diagram) {
			this(source, destination, diagram);
			mySemanticAdapter = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(linkElement);
		}

		/**
    	 * @@generated
	     */
		protected LinkDescriptor(EObject source, EObject destination, <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%> elementType, Diagram diagram) {
			this(source, destination, diagram);
			final <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%> elementTypeCopy = elementType;
			mySemanticAdapter = new <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>() {
				public Object getAdapter(Class adapter) {
					if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%>.class.equals(adapter)) {
						return elementTypeCopy;
					}
					return null;
				}
			};
		}
		
		/**
    	 * @@generated
	     */
		private LinkDescriptor(EObject source, EObject destination, Diagram diagram) {
			mySource = source;
			myDestination = destination;
			myDiagram = diagram;
		}
		
		/**
    	 * @@generated
	     */
		protected EObject getSource() {
			return mySource;
		}
		
		/**
    	 * @@generated
	     */
		protected EObject getDestination() {
			return myDestination;
		}
		
		/**
    	 * @@generated
	     */
		protected Diagram getDiagram() {
			return myDiagram;
		}
		
		/**
    	 * @@generated
	     */
		protected IAdaptable getSemanticAdapter() {
			return mySemanticAdapter;
		}
	}
d110 1
a110 1
<%importManager.emitSortedImports();%>
@


1.37
log
@#129162 Reinitializing diagrams / InitDiagramFileAction.javajet
@
text
@d24 3
a26 2

importManager.emitPackageStatement(stringBuffer);%>
@


1.36
log
@#127696 Templates should use new transaction API
@
text
@d79 13
d177 1
a177 1
	
d227 1
a227 1
					myLinkVID2EObjectMap.put(new Integer(<%=nextLink.getVisualID()%>), new LinkedList());
d406 1
a406 1
		storeTypeModelFacetLinks(container, containerMetaclass);
d412 1
a412 1
	private void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {	
d436 5
a440 1
				((<%=importManager.getImportedName("java.util.Collection")%>) myLinkVID2EObjectMap.get(new Integer(<%=nextLink.getVisualID()%>))).add(nextValue);
d466 1
d469 15
a483 16
			((<%=importManager.getImportedName("java.util.Collection")%>) myLinkVID2EObjectMap.get(new Integer(<%=nextLink.getVisualID()%>))).add(container);
<%
		if (genFeature.isContains()) {
// Processing phantom elements
// TODO: separate this code into incliuded file together with part of create???Children() operation
			GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
			if (phantomNode != null) {
				if (genFeature.isListType()) {
%>
			for (<%=importManager.getImportedName("java.util.Iterator")%> values = <%=getFeatureValueGetter("container", genFeature, true, importManager)%>.iterator(); values.hasNext();) {
				EObject nextValue = (EObject) values.next();
<%
				} else {
%>
			EObject nextValue = <%=getFeatureValueGetter("container", genFeature, true, importManager)%>;
<%
d485 1
a485 6
%>
			int nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(diagram, nextValue, "");
			if (<%=phantomNode.getVisualID()%> == nodeVID) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextValue, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
				myEObject2NodeMap.put(nextValue, nextNode);
				create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextValue);
a486 9
<%
				if (genFeature.isListType()) {
%>
			}
<%
				}
			}
		}
%>
a506 1
	GenFeature domainLinkTargetGenFeature;
d508 1
a508 1
		linkElements = (<%=importManager.getImportedName("java.util.Collection")%>) myLinkVID2EObjectMap.get(new Integer(<%=nextLink.getVisualID()%>));
d510 5
a514 10
			EObject linkElement = (EObject) it.next();
<%	
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		domainLinkTargetGenFeature = typeLinkModelFacet.getTargetMetaFeature();
		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
%>
			Object srcResult = <%=getFeatureValueGetter("linkElement", typeLinkModelFacet.getSourceMetaFeature(), true, importManager)%>;
			if (srcResult instanceof EObject == false) {
				continue;
d516 1
a516 1
			EObject src = (EObject) srcResult;
d518 1
a518 1
		} else {
a519 8
			EObject src = linkElement.eContainer();
<%
		}
	} else {
		domainLinkTargetGenFeature = ((FeatureModelFacet) nextLink.getModelFacet()).getMetaFeature();
%>
			EObject src = linkElement;
<%	
d521 32
a552 30
%>
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> srcNode = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) myEObject2NodeMap.get(src);
			if (srcNode == null) {
				continue;
			}
			Object structuralFeatureResult = <%=getFeatureValueGetter("linkElement", domainLinkTargetGenFeature, true, importManager)%>;
<%
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
			if (structuralFeatureResult instanceof EObject == false) {
				continue;
			}
			EObject dst = (EObject) structuralFeatureResult;
<%
	} else {
		if (domainLinkTargetGenFeature.isListType()) {
%>
			if (structuralFeatureResult instanceof <%=importManager.getImportedName("java.util.Collection")%> == false) {
				continue;
			}
			for (<%=importManager.getImportedName("java.util.Iterator")%> destinations = ((<%=importManager.getImportedName("java.util.Collection")%>) structuralFeatureResult).iterator(); destinations.hasNext();) {
				EObject dst = (EObject) destinations.next();
<%	
		} else {
%>
			if (structuralFeatureResult instanceof EObject == false) {
				continue;
			}
			EObject dst = (EObject) structuralFeatureResult;
<%
d554 11
a564 23
	}
%>
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> dstNode = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) myEObject2NodeMap.get(dst);
			if (dstNode != null) {
<%
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
				ViewService.createEdge(srcNode, dstNode, linkElement, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
			}
<%
	} else {
%>
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) ViewService.getInstance().createEdge(new <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>() {
						public Object getAdapter(Class adapter) {
							if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%>.class.equals(adapter)) {
								return <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextLink.getUniqueIdentifier()%>;
							}
							return null;
						}
					}, srcNode.getDiagram(), "", <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
					if (edge != null) {
						edge.setSource(srcNode);
						edge.setTarget(dstNode);
d566 1
a566 3
<%
		if (domainLinkTargetGenFeature.isListType()) {
%>
d568 38
a605 7
<%
}
%>
			}
<%	
	}
%>
a606 3
<%
}
%>
a607 1
	
@


1.35
log
@missed Iterator import
@
text
@a39 3
importManager.addImport("org.eclipse.gmf.runtime.emf.core.edit.MRunnable");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.OperationUtil");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.ResourceUtil");
a46 1
importManager.addImport("org.eclipse.swt.widgets.Shell");
d56 14
a113 7
	private Shell getShell() {
		return myPart.getSite().getShell();
	}
	
    /**
     * @@generated
     */
d164 5
d196 7
a202 1
			myFileCreationPage.getFileName();
d204 5
a208 7
			OperationUtil.runAsUnchecked(new MRunnable() {

				public Object run() {
					EObject diagram = create(diagramModelObject);
					if (diagram == null) {
						MessageDialog.openError(getShell(), "Error", "Failed to create diagram object");
						return null;
a209 71
					IFile destFile = myFileCreationPage.createNewFile();
					save(destFile.getLocation().toOSString(), diagram);
					try {
						IDE.openEditor(myPart.getSite().getPage(), destFile);
					} catch (PartInitException ex) {
						<%=pluginActivatorClass%>.getInstance().logError("Unable to open editor", ex);
					}
					return null;
				}
			});
			return true;
		}
		
	}

    /**
     * @@generated
     */
	private EObject load() {
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = new <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl")%>();
		Resource resource = resourceSet.getResource(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);
		try {
			resource.load(Collections.EMPTY_MAP);
			return (EObject) resource.getContents().get(0);
		} catch (IOException ex) {
			<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + mySelectedModelFile.getFullPath().toString(), ex);
		}
		return null;
<%} else {%>
		String resourcePath = mySelectedModelFile.getLocation().toOSString();
		Resource modelResource = ResourceUtil.findResource(resourcePath);
		if (modelResource == null) {
			modelResource = ResourceUtil.create(resourcePath);
		}
		if (!modelResource.isLoaded()) {
			try {
				ResourceUtil.load(modelResource);
			} catch (Exception e) {
				<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + resourcePath, e);
				return null;
			}
		}
		return (EObject) modelResource.getContents().get(0);
<%}%>
	}
	
    /**
     * @@generated
     */
	private void save(String filePath, EObject canvas) {
		Resource resource = ResourceUtil.create(filePath, null);
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
		resource.getContents().add(((Diagram) canvas).getElement());
<%}%>
		resource.getContents().add(canvas);
		try {
			resource.save(Collections.EMPTY_MAP);
		} catch (IOException ex) {
			<%=pluginActivatorClass%>.getInstance().logError("Save operation failed for: " + filePath, ex);
		}
	}
	
    /**
     * @@generated
     */
	private EObject create(EObject diagramModel) {
		int diagramVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getDiagramVisualID(diagramModel);
		if (diagramVID != <%=genDiagram.getVisualID()%>) {
			return null;
		}
d214 1
a214 1
		myLinkVID2EObjectMap.put(new Integer(<%=nextLink.getVisualID()%>), new <%=importManager.getImportedName("java.util.LinkedList")%>());
d218 6
a223 2
		Diagram diagram = ViewService.createDiagram(diagramModel, "<%=modelID%>", <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
		create<%=genDiagram.getUniqueIdentifier()%>Children(diagram, diagramModel);
d227 7
a233 7
		Resource resource = diagramModel.eResource();
		int nodeVID;
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = resource.getContents().iterator(); it.hasNext();) {
			EObject nextResourceObject = (EObject) it.next();
			if (nextResourceObject == diagramModel) {
				continue;
			}
d238 7
a244 7
			nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(diagram, nextResourceObject, "");
			if (<%=phantomNode.getVisualID()%> == nodeVID) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextResourceObject, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
				myEObject2NodeMap.put(nextResourceObject, nextNode);
				create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextResourceObject);
				continue;
			}
d248 1
a248 1
		}
d252 39
a290 4
		createLinks();
		myLinkVID2EObjectMap.clear();
		myEObject2NodeMap.clear();		
	    return diagram;
@


1.34
log
@#127497 Creating diagram file by InitDiagramFileAction in arbitrary location
+ correcting the case of OCL-related classes
@
text
@d284 1
a284 1
		for (Iterator it = resource.getContents().iterator(); it.hasNext();) {
@


1.33
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@a45 1
importManager.addImport("org.eclipse.jface.dialogs.InputDialog");
d49 1
d56 4
d77 6
a82 1
	private IFile mySelection;
d112 2
a113 1
		mySelection = null;
d118 2
a119 1
		mySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();
d131 1
a131 1
		if (mySelection.getParent().getFile(new Path(newText).addFileExtension("editorGen.getDiagramFileExtension()")).exists()) {
d141 64
a204 14
		final InputDialog outputFileNameDialog = new InputDialog(getShell(), "Diagram file name", "Please provide diagram file name", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension("editorGen.getDiagramFileExtension()").lastSegment(), this);
		if (outputFileNameDialog.open() != InputDialog.OK) {
			return;
		}
		final EObject diagramModelObject = load();
		if (diagramModelObject == null) {
			MessageDialog.openError(getShell(), "Error", "Failed to load user model");
			return;
		}
		OperationUtil.runAsUnchecked(new MRunnable() {
			public Object run() {
				EObject diagram = create(diagramModelObject);
				if (diagram == null) {
					MessageDialog.openError(getShell(), "Error", "Failed to create diagram object");
d207 4
a210 10
				IFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));
				save(destFile.getLocation().toOSString(), diagram);
				try {
					IDE.openEditor(myPart.getSite().getPage(), destFile);
				} catch (PartInitException ex) {
					<%=pluginActivatorClass%>.getInstance().logError("Unable to open editor", ex);
				}
				return null;
			}
		});
d212 1
a212 1
	
d219 1
a219 1
		Resource resource = resourceSet.getResource(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(mySelection.getFullPath().toString()), true);
d224 1
a224 1
			<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + mySelection.getFullPath().toString(), ex);
d228 1
a228 1
		String resourcePath = mySelection.getLocation().toOSString();
@


1.32
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d5 1
a5 1
final GenDiagram genDiagram = (GenDiagram) argument;
d7 1
a7 1
final ImportUtil importManager = new ImportUtil(editorGen.getEditor().getPackageName());
d24 2
a25 2
%>
package <%=editorGen.getEditor().getPackageName()%>;
@


1.31
log
@file extensions moved out from genDiagram. Distinct property captures extension of domain model file now
@
text
@d7 1
a7 1
final ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
d25 1
a25 1
package <%=genDiagram.getEditorPackageName()%>;
@


1.30
log
@constant used throughout templates to identify diagram (genModel.getModelName) was extracted as explicit attribute
packagePrefix added
@
text
@d6 1
d8 2
a9 2
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
final String modelID = genDiagram.getEditorGen().getModelID();
a67 5
    private static final String FILE_EXT = "<%=genDiagram.getDiagramFileExtension()%>";
    
	/**
	 * @@generated
	 */
d120 1
a120 1
		if (mySelection.getParent().getFile(new Path(newText).addFileExtension(FILE_EXT)).exists()) {
d130 1
a130 1
		final InputDialog outputFileNameDialog = new InputDialog(getShell(), "Diagram file name", "Please provide diagram file name", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(FILE_EXT).lastSegment(), this);
d162 1
a162 1
<%if (genDiagram.isSameFileForDiagramAndModel()) {%>
d195 1
a195 1
<%if (genDiagram.isSameFileForDiagramAndModel()) {%>
@


1.29
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d8 1
a8 1
final String modelID = genDiagram.getEditorGen().getDomainGenModel().getModelName();
@


1.28
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@d5 4
a8 1
GenDiagram genDiagram = (GenDiagram) argument;
a26 2
ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());

d155 1
a155 1
					<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to open editor", ex);
d173 1
a173 1
			<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to load resource: " + mySelection.getFullPath().toString(), ex);
d186 1
a186 1
				<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to load resource: " + resourcePath, e);
d206 1
a206 1
			<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Save operation failed for: " + filePath, ex);
d226 1
a226 1
		Diagram diagram = ViewService.createDiagram(diagramModel, "<%=genDiagram.getEMFGenModel().getModelName()%>", <%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d244 1
a244 1
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextResourceObject, null, <%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d306 1
a306 1
			nextNode = ViewService.createNode(viewObject, nextValue, null, <%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d440 1
a440 1
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextValue, null, <%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d539 1
a539 1
				ViewService.createEdge(srcNode, dstNode, linkElement, null, <%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d551 1
a551 1
					}, srcNode.getDiagram(), "", <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, <%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
@


1.27
log
@ImportManager moved to oeg.common
@
text
@d8 11
d227 28
d286 4
d331 1
a331 1
		storeLinks(modelObject);
d358 1
a358 1
	private void storeLinks(EObject container) {
d360 1
a360 1
		storeFeatureModelFacetLinks(container, containerMetaclass);
d410 1
a410 1
	private void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass) {
d415 2
a416 1
		GenFeature genFeature = ((FeatureModelFacet) nextLink.getModelFacet()).getMetaFeature();
d420 32
@


1.26
log
@#125893
Logging methods
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.ImportUtil"
@


1.25
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d143 1
a143 1
					ex.printStackTrace();
d161 1
a161 1
			ex.printStackTrace();
d174 1
a174 1
				e.printStackTrace();
d194 1
a194 1
			ex.printStackTrace();
@


1.24
log
@Correcting compilation errors in some cases.
@
text
@d214 1
a214 1
		Diagram diagram = ViewService.createDiagram(diagramModel, "<%=genDiagram.getEMFGenModel().getModelName()%>", <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d262 1
a262 1
			nextNode = ViewService.createNode(viewObject, nextValue, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d462 1
a462 1
				ViewService.createEdge(srcNode, dstNode, linkElement, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d474 1
a474 1
					}, srcNode.getDiagram(), "", <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
@


1.23
log
@#124958
Link processing in InitDiagramFileAction template was improved. From now it should works.
@
text
@d236 1
d260 1
a260 1
		int nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(viewObject, nextValue, "");
@


1.22
log
@rename GenContainerEditPart -> GenContainerBase
@
text
@d285 1
a287 3
<%
	}
%>
d402 11
a412 1
		domainLinkTargetGenFeature = ((TypeLinkModelFacet) nextLink.getModelFacet()).getTargetMetaFeature();
d416 1
d438 1
d446 8
d478 3
d482 3
@


1.21
log
@#124413
Cleaning up the gmfgen model
@
text
@d223 2
a224 2
for (Iterator containers = genDiagram.getAllContainerEditParts().iterator(); containers.hasNext();) {
	GenContainerEditPart nextContainer = (GenContainerEditPart) containers.next();
@


1.20
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@a6 2
Collection allContainers = new LinkedList(genDiagram.getAllContainers());
allContainers.add(genDiagram);
d223 1
a223 1
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
@


1.19
log
@Removing usages of deprecated API.
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.ImportUtil"
a5 1
List genNodes = genDiagram.getNodes();
d7 2
a8 1
Collection allContainers = AccessUtil.getAllContainers(genDiagram);
d217 1
a217 1
		createDiagramChildren(diagram, diagramModel);
a223 47
    /**
     * @@generated
     */
	private void createDiagramChildren(Diagram diagram, EObject diagramModel) {
<%
if (genNodes.size() > 0) {
%>
		EObject nextValue;
<%
}

if (genNodes.size() > 0) {
%>
		int nodeVID;
<%
}

for (Iterator diagramNodes = genNodes.iterator(); diagramNodes.hasNext();) {
	GenNode nextNode = (GenNode) diagramNodes.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();	
	if (childMetaFeature.isListType()) {
%>		
		for (<%=importManager.getImportedName("java.util.Iterator")%> values = <%=getFeatureValueGetter("diagramModel", childMetaFeature, true, importManager)%>.iterator(); values.hasNext();) {
			nextValue = (EObject) values.next();
<%
	} else {
%>
		nextValue = <%=getFeatureValueGetter("diagramModel", childMetaFeature, true, importManager)%>;
<%		
	}
%>
		nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(diagram, nextValue, "");
		if (<%=nextNode.getVisualID()%> == nodeVID) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextValue, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
			myEObject2NodeMap.put(nextValue, nextNode);
			create<%=nextNode.getUniqueIdentifier()%>Children(nextNode, nextValue);
		}
<%
	if (childMetaFeature.isListType()) {
%>
		}
<%
	}
}
%>
	}
d226 1
a226 1
	GenChildContainer nextContainer = (GenChildContainer) containers.next();
d232 1
a232 1
	private void create<%=nextContainer.getUniqueIdentifier()%>Children(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> viewObject, EObject modelObject) {
d234 1
a234 1
	if (nextContainer.getChildNodes().size() > 0) {
d245 2
a246 2
	for (Iterator children = nextContainer.getChildNodes().iterator(); children.hasNext();) {
		GenChildNode nextChild = (GenChildNode) children.next();
d302 1
a302 1
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getCompartment(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> node, String name) {
@


1.18
log
@#121581
Fields for the compartments are named unique.
@
text
@a28 1
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.DiagramUtil");
d44 1
d216 1
a216 1
		Diagram diagram = DiagramUtil.createDiagram(diagramModel, "<%=genDiagram.getEMFGenModel().getModelName()%>", <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d258 1
a258 1
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = DiagramUtil.createNode(diagram, nextValue, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d310 1
a310 1
			nextNode = DiagramUtil.createNode(viewObject, nextValue, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d492 1
a492 1
				DiagramUtil.createEdge(srcNode, dstNode, linkElement, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d497 1
a497 1
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.services.ViewService")%>.getInstance().createEdge(new <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>() {
@


1.17
log
@#118656
get rid of deprecated API usage
@
text
@d497 1
a497 1
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService")%>.getInstance().createEdge(new <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>() {
@


1.16
log
@Copilation error corrected in case of multiplicity = 1
@
text
@d167 13
a179 1
		Resource modelResource = ResourceUtil.load(mySelection.getLocation().toOSString());
@


1.15
log
@#116905
Using VisualIDRegistry to create CanonicalEditPolicies
@
text
@d223 6
d244 1
a244 1
		int nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(diagram, nextValue, "");
@


1.14
log
@#116655

Generating correct access for all the features.
@
text
@d219 1
a219 1
		Object featureValue;
a226 3
%>	
		featureValue = <%=getFeatureValueGetter("diagramModel", childMetaFeature, true, importManager)%>;
<%
d229 2
a230 2
		for (<%=importManager.getImportedName("java.util.Iterator")%> values = ((<%=importManager.getImportedName("java.util.Collection")%>) featureValue).iterator(); values.hasNext();) {
			EObject nextValue = ((EObject) values.next());
d234 1
a234 1
		EObject nextValue = (EObject) featureValue;
d265 1
a265 1
		Object featureValue;
d278 1
d280 3
a282 6
		featureValue = <%=getFeatureValueGetter("modelObject", childMetaFeature, true, importManager)%>;
<%
		if (childMetaFeature.isListType()) {
%>		
		for (<%=importManager.getImportedName("java.util.Iterator")%> values = ((<%=importManager.getImportedName("java.util.Collection")%>) featureValue).iterator(); values.hasNext();) {
			EObject nextValue = ((EObject) values.next());
d286 2
a287 2
		EObject nextValue = (EObject) featureValue;
<%		
@


1.13
log
@#116622
Supporting infinite ChildNode hierarchy in InitDiagramFileAction
@
text
@d2 2
a3 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.ImportUtil"%>
d228 1
a228 1
		featureValue = ((<%=importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName())%>) diagramModel).<%=childMetaFeature.getGetAccessor()%>();
d235 1
a235 1
	} else if (!childMetaFeature.isPrimitiveType()) {
a239 1
	if (childMetaFeature.isListType() || !childMetaFeature.isPrimitiveType()) {
a247 1
	}
d282 1
a282 1
		featureValue = ((<%=importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName())%>) modelObject).<%=childMetaFeature.getGetAccessor()%>();
d289 1
a289 1
		} else if (!childMetaFeature.isPrimitiveType()) {
a293 1
		if (childMetaFeature.isListType() || !childMetaFeature.isPrimitiveType()) {
a301 1
		}
d370 1
a370 1
			Object featureValue = ((<%=importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName())%>) container).<%=childMetaFeature.getGetAccessor()%>();
d377 1
a377 1
		} else if (!childMetaFeature.isPrimitiveType()) {
a381 1
		if (childMetaFeature.isListType() || !childMetaFeature.isPrimitiveType()) {
a387 1
		}
d455 1
a455 2
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> structuralFeature = <%=importManager.getImportedName(domainLinkTargetGenFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=domainLinkTargetGenFeature.getFeatureAccessorName()%>();
			Object structuralFeatureResult = linkElement.eGet(structuralFeature);
@


1.12
log
@#116031 avoid hardcoded class names in templates
@
text
@d7 3
d12 35
a46 37
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());%>
import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;
import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.IInputValidator;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.ide.IDE;
<%importManager.markImportLocation(stringBuffer);%>
d71 1
a71 1
	private Map myLinkWithClassVID2EObject = new HashMap();
d192 1
a192 1
		if (diagramVID == -1) {
a194 3
		
		myLinkWithClassVID2EObject.clear();
		myEObject2NodeMap.clear();
d199 1
a199 1
		myLinkWithClassVID2EObject.put(new Integer(<%=nextLink.getVisualID()%>), new LinkedList());
a204 1
		
d206 2
a207 1
		
d214 14
a227 12
	private void createDiagramChildren(Diagram diagram, EObject diagramObject) {
		for (Iterator it = diagramObject.eContents().iterator(); it.hasNext();) {
			EObject nextChild = (EObject) it.next();
			storeLinkReferenceOnly(nextChild);
			int nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(nextChild);
			if (nodeVID == -1) {
				storeLinkWithClass(nextChild);
				continue;
			}
			Node nextNode = DiagramUtil.createNode(diagram, nextChild, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
			myEObject2NodeMap.put(nextChild, nextNode);
			switch (nodeVID) {
d229 1
a229 2
for (Iterator it = genNodes.iterator(); it.hasNext();) {
	GenNode nextGenNode = (GenNode) it.next();
d231 2
a232 3
			case <%=nextGenNode.getVisualID()%>:
				create<%=nextGenNode.getUniqueIdentifier()%>Children(nextNode, nextChild);
				break;
d234 20
a255 2
			}
		}
a256 1
	
d258 4
a261 3
for (Iterator genNodesIt = genNodes.iterator(); genNodesIt.hasNext();) {
	GenNode nextGenNode = (GenNode) genNodesIt.next();
%>		
d265 19
a283 12
	private void create<%=nextGenNode.getUniqueIdentifier()%>Children(Node node, EObject nodeObject) {
		for (Iterator it = nodeObject.eContents().iterator(); it.hasNext();) {
			EObject nextChild = (EObject) it.next();
			storeLinkReferenceOnly(nextChild);
			int nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getChildNodeVisualID(nextChild);
			if (nodeVID == -1) {
				storeLinkWithClass(nextChild);
				continue;
			}
			
			Node container;
			switch (nodeVID) {
d285 1
a285 2
	for (Iterator childGenNodesIt = AccessUtil.getAllChildNodes(nextGenNode).iterator(); childGenNodesIt.hasNext();) {
		GenChildNode nextChildGenNode = (GenChildNode) childGenNodesIt.next();
d287 2
a288 1
			case <%=nextChildGenNode.getVisualID()%>:
d290 13
a302 4
		if (nextChildGenNode.getContainer() instanceof GenCompartment) {
			GenCompartment compartment = (GenCompartment) nextChildGenNode.getContainer();
%>			
				container = getCompartment(node, "<%=compartment.getTitle()%>");
d304 2
a305 1
		} else {
d307 1
a307 1
				container = node;
d310 7
d318 8
a325 1
				break;
a328 7
			default:
				container = node;
				break;
			}
			Node nextNode = DiagramUtil.createNode(container, nextChild, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
			myEObject2NodeMap.put(nextChild, nextNode);
		}
d332 2
d339 5
a343 5
	private Node getCompartment(Node node, String name) {
		for (Iterator it = node.getChildren().iterator(); it.hasNext();) {
			View nextView = (View) it.next();
			if (nextView instanceof Node && name.equals(nextView.getType())) {
				return (Node) nextView;
d346 13
a358 1
		return node;
d364 35
a398 4
	private void storeLinkWithClass(EObject link) {
		int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getLinkWithClassVisualID(link);
		if (linkVID == -1) {
			return;
d400 4
a403 1
		((Collection) myLinkWithClassVID2EObject.get(new Integer(linkVID))).add(link);
d405 1
a405 1
	
d409 1
a409 4
	private void storeLinkReferenceOnly(EObject container) {
		EClass containerMetaclass = container.eClass();
		for (Iterator it = containerMetaclass.getEAllStructuralFeatures().iterator(); it.hasNext();) {
			EStructuralFeature nextFeature = (EStructuralFeature) it.next();
d416 3
a418 3
			if (<%=importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=genFeature.getFeatureAccessorName()%>().equals(nextFeature)) {
				((Collection) myLinkWithClassVID2EObject.get(new Integer(<%=nextLink.getVisualID()%>))).add(container);
			}
a422 1
		}
a428 1
		Collection linkElements;
d430 6
d440 2
a441 2
		linkElements = (Collection) myLinkWithClassVID2EObject.get(new Integer(<%=nextLink.getVisualID()%>));
		for (Iterator it = linkElements.iterator(); it.hasNext();) {
d456 1
a456 1
			Node srcNode = (Node) myEObject2NodeMap.get(src);
d460 1
a460 1
			EStructuralFeature structuralFeature = <%=importManager.getImportedName(domainLinkTargetGenFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=domainLinkTargetGenFeature.getFeatureAccessorName()%>();
d472 1
a472 1
			if (structuralFeatureResult instanceof Collection == false) {
d475 1
a475 1
			for (Iterator destinations = ((Collection) structuralFeatureResult).iterator(); destinations.hasNext();) {
d480 1
a480 1
			Node dstNode = (Node) myEObject2NodeMap.get(dst);
@


1.11
log
@[ashatalin] #115625 fixes compilation problems with initializers
@
text
@d190 1
a190 1
		int diagramVID = <%=importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry")%>.INSTANCE.getDiagramVisualID(diagramModel);
d220 1
a220 1
			int nodeVID = <%=importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry")%>.INSTANCE.getNodeVisualID(nextChild);
d253 1
a253 1
			int nodeVID = <%=importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry")%>.INSTANCE.getChildNodeVisualID(nextChild);
d311 1
a311 1
		int linkVID = <%=importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry")%>.INSTANCE.getLinkWithClassVisualID(link);
d404 1
a404 1
								return <%=importManager.getImportedName(genDiagram.getProvidersPackageName() + ".ElementTypes")%>.<%=nextLink.getUniqueIdentifier()%>;
@


1.10
log
@[ashatalin] #115062 update to match changes in the runtime
@
text
@a20 1
import org.eclipse.core.runtime.IAdaptable;
a26 2
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
a30 1
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
a31 1
import org.eclipse.gmf.runtime.notation.Edge;
d401 1
a401 1
					Edge edge = (Edge) ViewService.getInstance().createEdge(new IAdaptable() {
d403 1
a403 1
							if (IElementType.class.equals(adapter)) {
d408 1
a408 1
					}, srcNode.getDiagram(), "", ViewUtil.APPEND, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
@


1.9
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d406 1
a406 1
					Edge edge = (Edge) ViewService.getInstance().createConnectorView(new IAdaptable() {
@


1.8
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.ImportUtil"%>
d267 1
a267 1
	for (Iterator childGenNodesIt = nextGenNode.getChildNodes().iterator(); childGenNodesIt.hasNext();) {
d271 12
a282 1
				container = getCompartment(node, "<%=nextChildGenNode.getGroupID()%>");
@


1.7
log
@[ashatalin] #112988 use either same as diagram or separate file to persist domain model
@
text
@d1 2
a2 1
<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="InitDiagramFileActionGen" imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.ImportUtil"%>
d322 2
a323 2
	if (nextLink instanceof GenLinkReferenceOnly) {
		GenFeature genFeature = nextLink.getDomainLinkTargetFeature();
d343 1
a343 1
	GenFeature domainLinkTargetGenFeature = nextLink.getDomainLinkTargetFeature();
d349 2
a350 1
	if (nextLink instanceof GenLinkWithClass) {
d355 1
d368 1
a368 1
	if (nextLink instanceof GenLinkWithClass) {
d388 1
a388 1
	if (nextLink instanceof GenLinkWithClass) {
@


1.6
log
@[ashatalin] #112776 correct imports for generated ElementTypes class
@
text
@a22 1
import org.eclipse.emf.common.util.URI;
a26 2
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
d158 3
a160 2
		ResourceSet resourceSet = new ResourceSetImpl();
		Resource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelection.getFullPath().toString()), true);
d168 4
d179 1
d181 1
@


1.5
log
@[ashatalin] #112664 Create links w/o dedicated domain metaelement during initial filling of diagram file
@
text
@a29 1
import org.eclipse.gmf.ecore.edit.providers.ElementTypes;
d391 1
a391 1
								return ElementTypes.<%=nextLink.getUniqueIdentifier()%>;
@


1.4
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d20 1
d24 1
d30 3
d37 1
d39 1
d220 1
d223 1
a223 1
				storeDiagramLink(nextChild);
d253 1
d256 1
a256 1
				storeDiagramLink(nextChild);
d300 1
a300 1
	private void storeDiagramLink(EObject link) {
d307 23
d344 3
d348 11
d361 3
d368 11
a378 2
			
			Node srcNode = (Node) myEObject2NodeMap.get(src);
d380 4
a383 1
			if (srcNode != null && dstNode != null) {
d386 20
@


1.3
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d2 5
a6 1
<%GenDiagram genDiagram = (GenDiagram) argument;%>
a8 1

a9 1
import java.util.LinkedList;
d14 1
a22 1
import org.eclipse.emf.ecore.EClass;
d28 7
a45 6

import org.eclipse.gmf.diagramrt.ChildNode;
import org.eclipse.gmf.diagramrt.DiagramCanvas;
import org.eclipse.gmf.diagramrt.DiagramLink;
import org.eclipse.gmf.diagramrt.DiagramNode;

d62 1
a62 1
    
d66 1
a66 1
	private ResourceSet myResSet;
d71 1
a71 1
	private IFile mySelection;
d76 1
a76 6
	private Map myObject2NodeMap = new HashMap();
	
	/**
	 * @@generated
	 */
	private Map myLinkFactory2SourceNodeMap = new HashMap();
d88 2
a89 25
	public void run(IAction action) {
		InputDialog outputFileNameDialog = new InputDialog(getShell(), "Diagram file name", "Please provide diagram file name", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(FILE_EXT)
				.lastSegment(), this);
		if (outputFileNameDialog.open() != InputDialog.OK) {
			return;
		}
		myResSet = new ResourceSetImpl();
		EObject diagramModelObject = load();
		if (diagramModelObject == null) {
			MessageDialog.openError(getShell(), "Error", "Failed to load user model");
			return;
		}
		EObject diagram = create(diagramModelObject);
		if (diagram == null) {
			MessageDialog.openError(getShell(), "Error", "Failed to create diagram object");
			return;
		}
		IFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));
		String filePath = mySelection.getFullPath().removeLastSegments(1).append(outputFileNameDialog.getValue()).toString();
		save(filePath, diagram);
		try {
			IDE.openEditor(myPart.getSite().getPage(), destFile);
		} catch (PartInitException ex) {
			ex.printStackTrace();
		}
d95 5
a99 31
	private EObject create(EObject diagramModel) {
		myObject2NodeMap.clear();
		myLinkFactory2SourceNodeMap.clear();
<% GenClass diagramGenClass = genDiagram.getDiagramRunTimeClass();%>
		DiagramCanvas diagramCanvas = <%=importManager.getImportedName(diagramGenClass.getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=diagramGenClass.getInterfaceName()%>();
		diagramCanvas.setDomainContainerObject(diagramModel);
		
<%
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext();) {
	GenLink nextGenLink = (GenLink) links.next();
%>
		myLinkFactory2SourceNodeMap.put(new LinkFactoryImpl<%=nextGenLink.getVisualID()%>(), new LinkedList());
<%
}
%>
		
		for (Iterator it = diagramModel.eContents().iterator(); it.hasNext();) {
			EObject next = (EObject) it.next();
			EClass nextEClass = next.eClass();
<%
for (Iterator nodes = genDiagram.getNodes().iterator(); nodes.hasNext();) {
	GenNode nextGenNode = (GenNode) nodes.next();
	GenClass nextGenNodeGenClass = nextGenNode.getDomainMetaClass();
%>
            if (<%=importManager.getImportedName(nextGenNodeGenClass.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=nextGenNodeGenClass.getInterfaceName()%>().equals(nextEClass)) {
            	generateNode<%=nextGenNode.getVisualID()%>(next, diagramCanvas);
            } else 
<%}%>
			{
				generateUnrecognizedNode(next, diagramCanvas);
			}
d101 2
a102 10
		
		for (Iterator it = myLinkFactory2SourceNodeMap.entrySet().iterator(); it.hasNext();) {
			Map.Entry entry = (Map.Entry) it.next();
			LinkFactory nextLinkFactory = (LinkFactory) entry.getKey();
			for (Iterator nodes = ((Collection) entry.getValue()).iterator(); nodes.hasNext();) {
				nextLinkFactory.createLinks((DiagramNode) nodes.next(), diagramCanvas);
			}
		}
		
	    return diagramCanvas;
d107 10
a116 3
     */
	private void generateUnrecognizedNode(EObject modelElement, DiagramCanvas diagramCanvas) {
		// Handle special cases here
a118 5
<%
for (Iterator nodes = genDiagram.getNodes().iterator(); nodes.hasNext();) {
	GenNode nextGenNode = (GenNode) nodes.next();
	GenClass nextNodeRuntimeGenClass = nextGenNode.getDiagramRunTimeClass();
%>
d122 25
a146 29
	private void generateNode<%=nextGenNode.getVisualID()%>(EObject modelElement, DiagramCanvas diagramCanvas) {
		DiagramNode diagramNode = <%=importManager.getImportedName(nextNodeRuntimeGenClass.getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=nextNodeRuntimeGenClass.getInterfaceName()%>();
		diagramNode.setDomainModelElement(modelElement);
		storeDiagramNode(diagramNode);
		diagramNode.setUin(diagramCanvas.nextAvailableUin());
		diagramNode.setVisualID(<%=importManager.getImportedName(nextGenNode.getEditPartQualifiedClassName())%>.VISUAL_ID);
		diagramCanvas.getNodes().add(diagramNode);
		
		for (Iterator it = modelElement.eContents().iterator(); it.hasNext();) {
			EObject next = (EObject) it.next();
			EClass nextEClass = next.eClass();
<%
	for (Iterator childNodes = nextGenNode.getChildNodes().iterator(); childNodes.hasNext();) {
		GenChildNode nextChildGenNode = (GenChildNode) childNodes.next();
		GenClass nextChildNodeRuntimeGenClass = nextChildGenNode.getDiagramRunTimeClass();
		GenClass nextChildNodeDomainGenClass = nextChildGenNode.getDomainMetaClass();
%>
            if (<%=importManager.getImportedName(nextChildNodeDomainGenClass.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=nextChildNodeDomainGenClass.getInterfaceName()%>().equals(nextEClass)) {
				ChildNode nextChildNode = <%=importManager.getImportedName(nextChildNodeRuntimeGenClass.getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=nextChildNodeRuntimeGenClass.getInterfaceName()%>();
				nextChildNode.setGroupID("<%=nextChildGenNode.getGroupID()%>");
				nextChildNode.setDomainModelElement(next);
				storeDiagramNode(nextChildNode);
				nextChildNode.setUin(diagramCanvas.nextAvailableUin());
				nextChildNode.setVisualID(<%=importManager.getImportedName(nextChildGenNode.getEditPartQualifiedClassName())%>.VISUAL_ID);
				diagramNode.getChildNodes().add(nextChildNode);
            } else 
<%	}%>
			{
				generateUnrecognizedSubNode<%=nextGenNode.getVisualID()%>(next, diagramNode, diagramCanvas);
d148 1
a148 1
		}
a153 30
	private void generateUnrecognizedSubNode<%=nextGenNode.getVisualID()%>(EObject modelElement, DiagramNode diagramNode, DiagramCanvas diagramCanvas) {
		// Handle special cases here for subnodes of the node with Visual_ID = <%=nextGenNode.getVisualID()%>
	}
<%}%>

    /**
     * @@generated
     */
	private void storeDiagramNode(DiagramNode diagramNode) {
		myObject2NodeMap.put(diagramNode.getDomainModelElement(), diagramNode);
		for (Iterator it = myLinkFactory2SourceNodeMap.entrySet().iterator(); it.hasNext();) {
			Map.Entry entry = (Map.Entry) it.next();
			LinkFactory nextLinkFactory = (LinkFactory) entry.getKey();
			Collection nodes = (Collection) entry.getValue();
			if (nextLinkFactory.isApplicable(diagramNode)) {
				nodes.add(diagramNode);
			}
		}
	}

    /**
     * @@generated
     */
	private DiagramNode getDiagramNode(EObject modelElement) {
		return (DiagramNode) myObject2NodeMap.get(modelElement);
	}

    /**
     * @@generated
     */
d155 2
a156 1
		Resource resource = myResSet.getResource(URI.createPlatformResourceURI(mySelection.getFullPath().toString()), true);
d170 2
a171 1
		Resource resource = myResSet.createResource(URI.createURI(filePath));
d179 1
a179 1

d183 4
a186 5
	public void selectionChanged(IAction action, ISelection selection) {
		mySelection = null;
		action.setEnabled(false);
		if (selection instanceof IStructuredSelection == false || selection.isEmpty()) {
			return;
a187 30
		mySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();
		action.setEnabled(true);
	}

    /**
     * @@generated
     */	
	public String isValid(String newText) {
		IStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);
		if (!status.isOK()) {
			return status.getMessage();
		}
		if (mySelection.getParent().getFile(new Path(newText).addFileExtension(FILE_EXT)).exists()) {
			return "File already exists, choose another name";
		}
		return null;
	}


    /**
     * @@generated
     */
	private Shell getShell() {
		return myPart.getSite().getShell();
	}
	
    /**
     * @@generated
     */
	private interface LinkFactory {
d189 12
a200 4
	    /**
    	 * @@generated
    	 */
		boolean isApplicable(DiagramNode node);
d202 1
a202 4
	    /**
    	 * @@generated
    	 */
		void createLinks(DiagramNode node, DiagramCanvas diagramCanvas);
d204 1
a206 19
<%
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext();) {
	GenLink nextGenLink = (GenLink) links.next();
	boolean referenceOnly = false;
	GenFeature containmentGenFeature = null;
	GenClass domainMetaElementGenClass = null;
	if (nextGenLink instanceof GenLinkReferenceOnly) {
		referenceOnly = true;
	} else {
		containmentGenFeature = nextGenLink.getContainmentMetaFeature();
		GenLinkWithClass withClassLink = (GenLinkWithClass) nextGenLink;
		if (withClassLink.getDomainMetaClass() != null) {
			domainMetaElementGenClass = withClassLink.getDomainMetaClass();
		}
	}
	
	GenClass nextLinkRuntimeGenClass = nextGenLink.getDiagramRunTimeClass();
	GenFeature domainLinkTargetGenFeature = nextGenLink.getDomainLinkTargetFeature();
%>
d210 7
a216 20
	private class LinkFactoryImpl<%=nextGenLink.getVisualID()%> implements LinkFactory {
		
	    /**
    	 * @@generated
    	 */
		public boolean isApplicable(DiagramNode node) {
			EObject modelObject = node.getDomainModelElement();
			EClass modelObjectEClass = modelObject.eClass();
<%
	GenFeature genFeature;
	if (referenceOnly) {
		genFeature = domainLinkTargetGenFeature;
	} else {
		genFeature = containmentGenFeature;
	}
%>
			for (Iterator it = modelObjectEClass.getEAllStructuralFeatures().iterator(); it.hasNext();) {
				if (<%=importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=genFeature.getFeatureAccessorName()%>().equals(it.next())) {
					return true;
				}
d218 10
a227 8
			return false;
		}
		
	    /**
    	 * @@generated
    	 */
		public void createLinks(DiagramNode node, DiagramCanvas diagramCanvas) {
			EObject modelObject = node.getDomainModelElement();
d229 1
a229 14
	if (referenceOnly) {
%>			
			EStructuralFeature structuralFeature = <%=importManager.getImportedName(domainLinkTargetGenFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=domainLinkTargetGenFeature.getFeatureAccessorName()%>();
			Object structuralFeatureResult = modelObject.eGet(structuralFeature);
			if (structuralFeatureResult instanceof Collection) {
				for (Iterator it = ((Collection) structuralFeatureResult).iterator(); it.hasNext();) {
					EObject nextLinkTarget = (EObject) it.next();
					DiagramNode targetNode = null;
					if (vetoLinkCreation(modelObject, nextLinkTarget)) {
						continue;
					}
					targetNode = getDiagramNode(nextLinkTarget);
<%	
	} else {
d231 1
a231 14
			EStructuralFeature containmentFeature = <%=importManager.getImportedName(containmentGenFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentGenFeature.getFeatureAccessorName()%>();
			Object containmentFeatureResult = modelObject.eGet(containmentFeature);
			if (containmentFeatureResult instanceof Collection) {
				for (Iterator it = ((Collection) containmentFeatureResult).iterator(); it.hasNext();) {
					EObject modelLinkObject = (EObject) it.next();
					DiagramNode targetNode = null;
<%
		if (domainMetaElementGenClass != null) {
%>
					EClass modelLinkObjectEClass = modelLinkObject.eClass();
            		if (!<%=importManager.getImportedName(domainMetaElementGenClass.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=domainMetaElementGenClass.getInterfaceName()%>().equals(modelLinkObjectEClass)) {
            			continue;
            		}
<%
a232 14
%>
					EStructuralFeature structuralFeature = <%=importManager.getImportedName(domainLinkTargetGenFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=domainLinkTargetGenFeature.getFeatureAccessorName()%>();
					if (structuralFeature == null) {
						continue;
					}
					Object structuralFeatureResult = modelLinkObject.eGet(structuralFeature);
					if (structuralFeatureResult instanceof EObject == false) {
						continue;
					}
					if (vetoLinkCreation(modelObject, (EObject) structuralFeatureResult, modelLinkObject)) {
						continue;
					}
					targetNode = getDiagramNode((EObject) structuralFeatureResult);
<%
d234 1
a234 10
%>
					if (targetNode == null) {
						continue;
					}
					DiagramLink diagramLink = <%=importManager.getImportedName(nextLinkRuntimeGenClass.getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=nextLinkRuntimeGenClass.getInterfaceName()%>();
					diagramLink.setSource(node);
					diagramLink.setUin(diagramCanvas.nextAvailableUin());
					diagramLink.setTarget(targetNode);
					diagramLink.setVisualID(<%=importManager.getImportedName(nextGenLink.getEditPartQualifiedClassName())%>.VISUAL_ID);
					diagramCanvas.getLinks().add(diagramLink);
d236 24
a259 3
	if (!referenceOnly) {
%>
					diagramLink.setDomainModelElement(modelLinkObject);
d263 3
a265 1
				}
d267 2
d270 1
a270 1
		
d272 1
a272 1
	if (referenceOnly) {
d274 10
a283 5
	    /**
    	 * @@generated
    	 */
		private boolean vetoLinkCreation(EObject linkSource, EObject target) {
			return false;
d285 10
a294 8
<%
	} else {
%>
	    /**
    	 * @@generated
    	 */
		private boolean vetoLinkCreation(EObject linkSource, EObject target, EObject linkObject) {
			return false;
d296 8
d305 20
a324 3
	}
%>
		
a325 1
	
d329 2
a330 1

@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d1 1
a1 1
<%@@ jet package="org.eclipse.gmf.codegen.templates.diacanvas" class="InitDiagramFileActionGen" imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.* org.eclipse.gmf.codegen.util.ImportUtil"%>
@


1.1
log
@[ashatalin] Action to initialize diagram from existing domain model gets generated.
@
text
@d142 1
a142 1
	GenClass nextGenNodeGenClass = genDiagram.findGenClass(nextGenNode.getDomainMetaClass());
d194 1
a194 1
		GenClass nextChildNodeDomainGenClass = genDiagram.findGenClass(nextChildGenNode.getDomainMetaClass());
d330 1
a330 1
		containmentGenFeature = genDiagram.findGenFeature(nextGenLink.getContainmentMetaFeature());
d333 1
a333 1
			domainMetaElementGenClass = genDiagram.findGenClass(withClassLink.getDomainMetaClass());
d338 1
a338 1
	GenFeature domainLinkTargetGenFeature = genDiagram.findGenFeature(nextGenLink.getDomainLinkTargetFeature());
@

