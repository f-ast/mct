head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20070202-0200:1.4
	v20061214-0000:1.4
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.4
	v20061020-1000:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060728-0500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.12.14.19.02.24;	author dstadnik;	state dead;
branches;
next	1.4;
commitid	408e45819fb94567;

1.4
date	2006.06.26.13.41.06;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.23.15.07.44;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.23.14.54.31;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.23.12.26.15;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[164935] Use border items infrastructure to support external labels
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="ExternalNodeLabelHostLayoutEditPolicyGenerator"
	imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"
	skeleton="../common.skeleton"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gef.requests.ChangeBoundsRequest;
import org.eclipse.gef.requests.GroupRequest;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getExternalNodeLabelHostLayoutEditPolicyClassName()%> extends XYLayoutEditPolicy {

	/**
	 * @@generated
	 */
	private LayoutEditPolicy realLayoutEditPolicy;

	/**
	 * @@generated
	 */
	public LayoutEditPolicy getRealLayoutEditPolicy() {
		return realLayoutEditPolicy;
	}

	/**
	 * @@generated
	 */
	public void setRealLayoutEditPolicy(LayoutEditPolicy realLayoutEditPolicy) {
		this.realLayoutEditPolicy = realLayoutEditPolicy;
	}

	/**
	 * @@generated
	 */
	protected boolean isExternalLabel(EditPart editPart) {
		return false;
	}

	/**
	 * @@generated
	 */
	protected final List getExternalLabels(GroupRequest request) {
		List editParts = new ArrayList();
		if (request.getEditParts() != null) {
			for (Iterator it = request.getEditParts().iterator(); it.hasNext();) {
				EditPart editPart = (EditPart) it.next();
				if (isExternalLabel(editPart)) {
					editParts.add(editPart);
				}
			}
		}
		return editParts;
	}

	/**
	 * @@generated
	 */
	public Command getCommand(Request request) {
		if (REQ_MOVE_CHILDREN.equals(request.getType())) {
			ChangeBoundsRequest cbRequest = (ChangeBoundsRequest) request;
			List extLabels = getExternalLabels(cbRequest);
			if (!extLabels.isEmpty()) {
				List editParts = cbRequest.getEditParts();
				Command cmd = null;
				if (realLayoutEditPolicy != null && editParts.size() > extLabels.size()) {
					List other = new ArrayList(editParts);
					other.removeAll(extLabels);
					cbRequest.setEditParts(other);
					cmd = realLayoutEditPolicy.getCommand(request);
				}
				cbRequest.setEditParts(extLabels);
				Command extLabelsCmd = getMoveChildrenCommand(request);
				cbRequest.setEditParts(editParts);
				return cmd == null ? extLabelsCmd : cmd.chain(extLabelsCmd);
			}
		}
		if (request instanceof GroupRequest) {
			List extLabels = getExternalLabels((GroupRequest) request);
			if (!extLabels.isEmpty()) {
				return null;
			}
		}
		return realLayoutEditPolicy == null ? null : realLayoutEditPolicy.getCommand(request);
	}

	/**
	 * @@generated
	 */
	protected Object getConstraintFor(ChangeBoundsRequest request, GraphicalEditPart child) {
		int dx = ((Integer) ViewUtil.getStructuralFeatureValue((View) child.getModel(), NotationPackage.eINSTANCE.getLocation_X())).intValue();
		int dy = ((Integer) ViewUtil.getStructuralFeatureValue((View) child.getModel(), NotationPackage.eINSTANCE.getLocation_Y())).intValue();
		Rectangle r = new Rectangle(dx, dy, 0, 0);
		child.getFigure().translateToAbsolute(r);
		r.translate(request.getMoveDelta());
		child.getFigure().translateToRelative(r);
		return r;
	}

	/**
	 * @@generated
	 */
	public boolean understandsRequest(Request req) {
		if (realLayoutEditPolicy != null && realLayoutEditPolicy.understandsRequest(req)) {
			return true;
		}
		return super.understandsRequest(req);
	}

	/**
	 * @@generated
	 */
	protected void decorateChild(EditPart child) {
	}

	/**
	 * @@generated
	 */
	public void setHost(EditPart host) {
		super.setHost(host);
		if (realLayoutEditPolicy != null) {
			realLayoutEditPolicy.setHost(host);
		}
	}

	/**
	 * @@generated
	 */
	public void activate() {
		super.activate();
		if (realLayoutEditPolicy != null) {
			realLayoutEditPolicy.activate();
		}
	}

	/**
	 * @@generated
	 */
	public void deactivate() {
		super.deactivate();
		if (realLayoutEditPolicy != null) {
			realLayoutEditPolicy.deactivate();
		}
	}

	/**
	 * @@generated
	 */
	public EditPart getTargetEditPart(Request request) {
		if (realLayoutEditPolicy != null) {
			return realLayoutEditPolicy.getTargetEditPart(request);
		} else {
			return super.getTargetEditPart(request);
		}
	}

	/**
	 * @@generated
	 */
	public void showSourceFeedback(Request request) {
		if (realLayoutEditPolicy != null) {
			realLayoutEditPolicy.showSourceFeedback(request);
		} else {
			super.showSourceFeedback(request);
		}
	}

	/**
	 * @@generated
	 */
	public void eraseSourceFeedback(Request request) {
		if (realLayoutEditPolicy != null) {
			realLayoutEditPolicy.eraseSourceFeedback(request);
		} else {
			super.eraseSourceFeedback(request);
		}
	}

	/**
	 * @@generated
	 */
	public void showTargetFeedback(Request request) {
		if (realLayoutEditPolicy != null) {
			realLayoutEditPolicy.showTargetFeedback(request);
		} else {
			super.showTargetFeedback(request);
		}
	}

	/**
	 * @@generated
	 */
	public void eraseTargetFeedback(Request request) {
		if (realLayoutEditPolicy != null) {
			realLayoutEditPolicy.eraseTargetFeedback(request);
		} else {
			super.eraseTargetFeedback(request);
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.4
log
@unused import removed
@
text
@@


1.3
log
@prevent npe
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"
@


1.2
log
@#144885 CCE while moving external node label on diagram
@
text
@d65 6
a70 4
		for (Iterator it = request.getEditParts().iterator(); it.hasNext();) {
			EditPart editPart = (EditPart) it.next();
			if (isExternalLabel(editPart)) {
				editParts.add(editPart);
@


1.1
log
@#144885 CCE while moving external node label on diagram
@
text
@d96 6
@

