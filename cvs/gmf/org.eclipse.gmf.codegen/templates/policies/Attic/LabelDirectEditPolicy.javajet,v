head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	M6_10:1.4
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.04.14.07.36.07;	author dstadnik;	state dead;
branches;
next	1.4;

1.4
date	2006.04.12.16.28.45;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.14.13.14.55;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.13.18.39.47;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove temporary label direct edit policy
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="LabelDirectEditPolicyGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
%>
<%@@ include file="../copyright4java.jetinc"%>
package <%=genDiagram.getEditPoliciesPackageName()%>;

import org.eclipse.draw2d.Label;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.editpolicies.DirectEditPolicy;
import org.eclipse.gef.requests.DirectEditRequest;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.gef.ui.internal.parts.TextCellEditorEx;
import org.eclipse.gmf.runtime.notation.View;
<%
ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class LabelDirectEditPolicy extends DirectEditPolicy {

	/**
	 * @@generated
	 */
	class EObjectAdapterEx
		extends EObjectAdapter {

		private View view = null;

		/**
		 * constructor
		 * @@param element	element to be wrapped
		 * @@param view	view to be wrapped
		 */
		public EObjectAdapterEx(EObject element, View view) {
			super(element);
			this.view = view;
		}

		public Object getAdapter(Class adapter) {
			Object o = super.getAdapter(adapter);
			if (o != null)
				return o;
			if (adapter.equals(View.class)) {
				return view;
			}
			return null;
		}
	}

	/**
	 * @@generated
	 */
	protected Command getDirectEditCommand(DirectEditRequest edit) {
		if (edit.getCellEditor() instanceof TextCellEditorEx)
			if (!((TextCellEditorEx) edit.getCellEditor()).hasValueChanged())
				return null;
			
		String labelText = (String) edit.getCellEditor().getValue();
		
		//for CellEditor, null is always returned for invalid values
		if (labelText == null) {
			return null;
		}
		
		ITextAwareEditPart compartment = (ITextAwareEditPart) getHost();
		View view = (View) compartment.getModel();
		EObjectAdapter elementAdapter = null ;
		if (view !=null)
			elementAdapter = new EObjectAdapterEx(ViewUtil.resolveSemanticElement(view),
				view);
		else
			elementAdapter = new EObjectAdapterEx((EObject)compartment.getModel(),
				null);
		// check to make sure an edit has occurred before returning a command.
		String prevText = compartment.getParser().getEditString(elementAdapter,
			compartment.getParserOptions().intValue());
		if (!prevText.equals(labelText)) {
			ICommand iCommand = 
				compartment.getParser().getParseCommand(elementAdapter, labelText, 0);
			return new EtoolsProxyCommand(iCommand);
		}

		return null;
	}

	/**
	 * @@generated
	 */
	protected void showCurrentEditValue(DirectEditRequest request) {
		String value = (String) request.getCellEditor().getValue();
		if (getHostFigure() instanceof Label) {
			((Label) getHostFigure()).setText(value);
		} else {
			((WrapLabel) getHostFigure()).setText(value);
		}
		Object pdEditPolicy = getHost().getEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.PRIMARY_DRAG_ROLE);
		if (pdEditPolicy instanceof <%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) {
			((<%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) pdEditPolicy).refreshFeedback();
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.4
log
@#135694 remove temporary code
@
text
@@


1.3
log
@provide custom text selection edit policy
@
text
@d17 1
a21 1
import <%=genDiagram.getEditPartsPackageName()%>.ITextAwareEditPart;
@


1.2
log
@use Labels instead of WrapLabels
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.*"%>
d22 4
d107 4
d113 1
@


1.1
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d9 1
d17 1
d98 5
a102 1
		((ITextAwareEditPart) getHost()).getLabel().setText(value);
@

