head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20070202-0200:1.4
	v20061214-0000:1.4
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.4
	v20061020-1000:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060728-0500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.12.18.13.23.13;	author dstadnik;	state dead;
branches;
next	1.4;
commitid	113e4586960e4567;

1.4
date	2006.04.14.16.05.47;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.16.16.06.46;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.14.19.19.44;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.14.15.31.58;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.5
log
@rewrite text feedback edit policies in xpand
@
text
@
	/**
	 * @@generated
	 */
	private IFigure selectionFeedbackFigure;

	/**
	 * @@generated
	 */
	private IFigure focusFeedbackFigure;

	/**
	 * @@generated
	 */
	protected void showPrimarySelection() {
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setSelected(true);
			((WrapLabel) getHostFigure()).setFocus(true);
		} else {
			showSelection();
			showFocus();
		}
	}

	/**
	 * @@generated
	 */
	protected void showSelection() {
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setSelected(true);
			((WrapLabel) getHostFigure()).setFocus(false);
		} else {
			hideSelection();
			addFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());
			refreshSelectionFeedback();
			hideFocus();
		}
	}

	/**
	 * @@generated
	 */
	protected void hideSelection() {
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setSelected(false);
			((WrapLabel) getHostFigure()).setFocus(false);
		} else {
			if (selectionFeedbackFigure != null) {
				removeFeedback(selectionFeedbackFigure);
				selectionFeedbackFigure = null;
			}
			hideFocus();
		}
	}

	/**
	 * @@generated
	 */
	protected void showFocus() {
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setFocus(true);
		} else {
			hideFocus();
			addFeedback(focusFeedbackFigure = createFocusFeedbackFigure());
			refreshFocusFeedback();
		}
	}

	/**
	 * @@generated
	 */
	protected void hideFocus() {
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setFocus(false);
		} else {
			if (focusFeedbackFigure != null) {
				removeFeedback(focusFeedbackFigure);
				focusFeedbackFigure = null;
			}
		}
	}

	/**
	 * @@generated
	 */
	protected IFigure getFeedbackLayer() {
		return getLayer(LayerConstants.SCALED_FEEDBACK_LAYER);
	}

	/**
	 * @@generated
	 */
	protected Rectangle getFeedbackBounds() {
		Rectangle bounds;
		if (getHostFigure() instanceof Label) {
			bounds = ((Label) getHostFigure()).getTextBounds();
			bounds.intersect(getHostFigure().getBounds());
		} else {
			bounds = getHostFigure().getBounds().getCopy();
		}
		getHostFigure().getParent().translateToAbsolute(bounds);
		getFeedbackLayer().translateToRelative(bounds);
		return bounds;
	}

	/**
	 * @@generated
	 */
	protected IFigure createSelectionFeedbackFigure() {
		if (getHostFigure() instanceof Label) {
			Label feedbackFigure = new Label();
			feedbackFigure.setOpaque(true);
			feedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);
			feedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);
			return feedbackFigure;
		} else {
			RectangleFigure feedbackFigure = new RectangleFigure();
			feedbackFigure.setFill(false);
			return feedbackFigure;
		}
	}

	/**
	 * @@generated
	 */
	protected IFigure createFocusFeedbackFigure() {
		return new Figure() {

			protected void paintFigure(Graphics graphics) {
				graphics.drawFocus(getBounds().getResized(-1, -1));
			}
		};
	}

	/**
	 * @@generated
	 */
	protected void updateLabel(Label target) {
		Label source = (Label) getHostFigure();
		target.setText(source.getText());
		target.setTextAlignment(source.getTextAlignment());
		target.setFont(source.getFont());
	}

	/**
	 * @@generated
	 */
	protected void refreshSelectionFeedback() {
		if (selectionFeedbackFigure != null) {
			if (selectionFeedbackFigure instanceof Label) {
				updateLabel((Label) selectionFeedbackFigure);
				selectionFeedbackFigure.setBounds(getFeedbackBounds());
			} else {
				selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));
			}
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshFocusFeedback() {
		if (focusFeedbackFigure != null) {
			focusFeedbackFigure.setBounds(getFeedbackBounds());
		}
	}

	/**
	 * @@generated
	 */
	public void refreshFeedback() {
		refreshSelectionFeedback();
		refreshFocusFeedback();
	}
@


1.4
log
@provide native feedback for WrapLabels
@
text
@@


1.3
log
@translate feedback bounds to consider zoom factor and coordinate systems
@
text
@d16 7
a22 2
		showSelection();
		showFocus();
d29 9
a37 4
		hideSelection();
		addFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());
		refreshSelectionFeedback();
		hideFocus();
d44 9
a52 3
		if (selectionFeedbackFigure != null) {
			removeFeedback(selectionFeedbackFigure);
			selectionFeedbackFigure = null;
a53 1
		hideFocus();
d60 7
a66 3
		hideFocus();
		addFeedback(focusFeedbackFigure = createFocusFeedbackFigure());
		refreshFocusFeedback();
d73 7
a79 3
		if (focusFeedbackFigure != null) {
			removeFeedback(focusFeedbackFigure);
			focusFeedbackFigure = null;
@


1.2
log
@provide feedback consistent with the runtime
@
text
@d78 2
@


1.1
log
@provide selection for the child nodes
@
text
@d15 8
d26 2
a27 1
		refreshSelectionFeedbackBounds();
d38 1
d47 1
a47 1
		refreshFocusFeedbackBounds();
d63 7
d72 3
a74 11
		IFigure hostFigure = getHostFigure();
		if (hostFigure instanceof Label) {
			Label label = (Label) hostFigure;
			bounds = label.getTextBounds();
			bounds.union(label.getIconBounds());
			bounds.intersect(label.getBounds());
		} else if (hostFigure instanceof WrapLabel) {
			WrapLabel label = (WrapLabel) hostFigure;
			bounds = label.getTextBounds();
			bounds.union(label.getIconBounds());
			bounds.intersect(label.getBounds());
a77 2
		getHostFigure().getParent().translateToAbsolute(bounds);
		getFeedbackLayer().translateToRelative(bounds);
d84 11
a94 3
	protected void refreshSelectionFeedbackBounds() {
		if (selectionFeedbackFigure != null) {
			selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(2, 2));
d101 7
a107 4
	protected void refreshFocusFeedbackBounds() {
		if (focusFeedbackFigure != null) {
			focusFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));
		}
d113 5
a117 2
	protected Color getFeedbackColor() {
		return null;
d123 8
a130 6
	protected IFigure createSelectionFeedbackFigure() {
		RectangleFigure feedbackFigure = new RectangleFigure();
		feedbackFigure.setFill(false);
		Color feedbackColor = getFeedbackColor();
		if (feedbackColor != null) {
			feedbackFigure.setForegroundColor(feedbackColor);
a131 1
		return feedbackFigure;
d137 3
a139 6
	protected IFigure createFocusFeedbackFigure() {
		RectangleFigure feedbackFigure = new RectangleFigure();
		feedbackFigure.setFill(false);
		Color feedbackColor = getFeedbackColor();
		if (feedbackColor != null) {
			feedbackFigure.setForegroundColor(feedbackColor);
a140 2
		feedbackFigure.setLineStyle(Graphics.LINE_DOT);
		return feedbackFigure;
d147 2
a148 2
		refreshSelectionFeedbackBounds();
		refreshFocusFeedbackBounds();
@

