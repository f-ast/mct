head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061218-1200:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.01.29.18.59.30;	author atikhomirov;	state dead;
branches;
next	1.6;
commitid	774445be44114567;

1.6
date	2007.01.29.14.20.30;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	69ed45be02ac4567;

1.5
date	2006.10.05.18.43.33;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.03.18.11.00;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.03.16.47.11;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.29.21.26.44;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.27.20.39.06;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@OpenDiagramEditPolicy as xpt
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="OpenDiagramPolicyGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final OpenDiagramBehaviour behaviour = (OpenDiagramBehaviour) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = behaviour.getSubject().getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
importManager.addImport("java.util.Iterator");
importManager.addImport("org.eclipse.core.commands.ExecutionException");
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.core.runtime.IProgressMonitor");
importManager.addImport("org.eclipse.emf.ecore.EAnnotation");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.Request");
importManager.addImport("org.eclipse.gef.commands.Command");
importManager.addImport("org.eclipse.emf.transaction.util.TransactionUtil");
importManager.addImport("org.eclipse.gmf.runtime.common.core.command.CommandResult");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.services.ViewService");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy");
importManager.addImport("org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.ui.IWorkbenchPage");
importManager.addImport("org.eclipse.ui.PlatformUI");
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.OpenEditPolicy")%> {

	/**
	 * @@generated
	 */
	protected Command getOpenCommand(Request request) {
		EditPart targetEditPart = getTargetEditPart(request);
		if (false == targetEditPart.getModel() instanceof View) {
			return null;
		}
		EAnnotation ann = ((View) targetEditPart.getModel()).getEAnnotation("<%=org.eclipse.gmf.codegen.gmfgen.impl.OpenDiagramBehaviourImpl.ANNOTATION_SOURCE%>");
		if (ann == null) {
			return null;
		}
		return new ICommandProxy(new OpenDiagramCommand(ann));
	}

	/**
	 * @@generated
	 */
	private static class OpenDiagramCommand extends AbstractTransactionalCommand {
		/**
		 * @@generated
		 */
		private final EAnnotation diagramFacet;

		/**
		 * @@generated
		 */
		OpenDiagramCommand(EAnnotation annotation) {
			// editing domain is taken for original diagram, 
			// if we open diagram from another file, we should use another editing domain
			super(TransactionUtil.getEditingDomain(annotation), "Open diagram", null);
			diagramFacet = annotation;
		}

		// FIXME canExecute if  !(readOnly && getDiagramToOpen == null), i.e. open works on ro diagrams only when there's associated diagram already

		/**
		 * @@generated
		 */
		protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
			try {
				Diagram diagram = getDiagramToOpen();
				if (diagram == null) {
					diagram = intializeNewDiagram();
				}
				<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> uri = diagram.eResource().getURI();
				uri = uri.appendFragment(diagram.eResource().getURIFragment(diagram));
				<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> editorInput =
					new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(uri);
				IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
				page.openEditor(editorInput, getEditorID());
				return CommandResult.newOKCommandResult();
			} catch (Exception ex) {
				throw new ExecutionException("Can't open diagram", ex);
			}
		}

		/**
		 * @@generated
		 */
		protected Diagram getDiagramToOpen() {
			// take first
			for (Iterator it = diagramFacet.getReferences().iterator(); it.hasNext();) {
				Object next = it.next();
				if (next instanceof Diagram) {
					return (Diagram) next;
				}
			}
			return null;
		}

		/**
		 * @@generated
		 */
		protected Diagram intializeNewDiagram() throws ExecutionException {
			Diagram d = ViewService.createDiagram(getDiagramDomainElement(), getDiagramKind(), getPreferencesHint());
			if (d == null) {
				throw new ExecutionException("Can't create diagram of '" + getDiagramKind() + "' kind");
			}
			diagramFacet.getReferences().add(d);
			assert diagramFacet.eResource() != null;
			diagramFacet.eResource().getContents().add(d);
			try {
				for (Iterator it = diagramFacet.eResource().getResourceSet().getResources().iterator(); it.hasNext();) {
					((org.eclipse.emf.ecore.resource.Resource) it.next()).save(java.util.Collections.EMPTY_MAP);
				}
			} catch (java.io.IOException ex) {
				throw new ExecutionException("Can't create diagram of '" + getDiagramKind() + "' kind", ex);
			}
			return d;
		}

		/**
		 * @@generated
		 */
		protected EObject getDiagramDomainElement() {
			// use same element as associated with EP
			return ((View) diagramFacet.getEModelElement()).getElement();
		}

		/**
		 * @@generated
		 */
		protected PreferencesHint getPreferencesHint() {
			// XXX prefhint from target diagram's editor?
			return <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT;
		}

		/**
		 * @@generated
		 */
		protected String getDiagramKind() {
<%if (behaviour.getDiagramKind() == null) {%>
			return <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID;
<%} else {%>
			return "<%=behaviour.getDiagramKind()%>";
<%}%>
		}

		/**
		 * @@generated
		 */
		protected String getEditorID() {
<%if (behaviour.getEditorID() == null) { %>
			return <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>.ID;
<%} else {%>
			return "<%=behaviour.getEditorID()%>";
<%}%>
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.6
log
@[171528] use URIEditorInput to open diagrams
@
text
@@


1.5
log
@[119465] support for diagram partitioning - few hacks to use FileEditorInput because otherwise nothing gonna work
@
text
@a25 1
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditorInput");
d84 4
a87 1
				final DiagramEditorInput editorInput = new DiagramEditorInput(diagram);
@


1.4
log
@[119465] support for diagram partitioning
@
text
@d119 7
@


1.3
log
@Removing unnecessary imports.
@
text
@d10 1
d48 1
a48 1
		EAnnotation ann = ((View) targetEditPart.getModel()).getEAnnotation("uri://eclipse.org/gmf/openDiagramPolicy");
a51 3
		if (!ann.getDetails().containsKey("editorID") || !ann.getDetails().containsKey("diagramKind")) {
			return null;
		}
d59 3
d64 3
d76 3
d94 3
d108 3
d116 1
a116 1
			diagramFacet.getEReferences().add(d);
d122 3
d130 3
d138 3
d142 5
a146 1
			return (String) diagramFacet.getDetails().get("diagramKind");
d149 3
d153 5
a157 1
			return (String) diagramFacet.getDetails().get("editorID");
@


1.2
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
@


1.1
log
@[119465] support for diagram partitioning - use annotations to keep references to diagrams and to pass information about editors to be open.
Still a lot of subtle issues to resolve, do not turn editpolicy generation on for a while
@
text
@d4 1
a4 1
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d6 1
@

