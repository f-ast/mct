head	1.13;
access;
symbols
	v20081022-1925:1.13
	v20081015-1925:1.13
	v20081008-1925:1.13
	v20081001-1925:1.13
	v20080924-1925:1.13
	v20080917-1925:1.13
	v20080911-1728:1.13
	v20080910-1520:1.13
	v20080903-1520:1.13
	v20080827-1520:1.13
	v20080813-1520:1.13
	v20080806-1520:1.13
	v20070403-1500:1.12
	v20070330-1300:1.12
	v20060330-1300:1.12
	v20070322-1100:1.12
	v20060316-0600:1.12
	v20070307-0700:1.12
	v20070301-1200:1.12
	v20070228-2000:1.12
	v20070221-1500:1.12
	v20070208-1800:1.12
	v20070202-0200:1.10
	v20070103-0300:1.11
	M4_20:1.11
	v20061222-1800:1.11
	v20061218-1200:1.11
	v20061214-0000:1.11
	v20061120-1300:1.11
	M3_20:1.11
	v20061117-0800:1.11
	v20061027-1200:1.10
	v20061020-1000:1.10
	v20061013-1330:1.10
	v20060919-0800:1.10
	v20060907-1100:1.10
	M1_20:1.10
	v20060904-1500:1.10
	v20060824-1600:1.10
	v20060817-1500:1.10
	v20060728-0500:1.10
	v20060713-1700:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20060627-1200:1.10
	v20060626-1420:1.10
	v20060620-0400:1.10
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.9
	v20060519-1300:1.9
	v20060519-0800:1.9
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2007.04.03.19.28.21;	author ashatalin;	state dead;
branches;
next	1.12;
commitid	24744612aad14567;

1.12
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.11;
commitid	21cf45be38464567;

1.11
date	2006.10.18.14.21.48;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.29.13.55.19;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.03.15.34.18;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.14.13.58.45;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.06.11.52.36;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.09.16.29.01;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@[177758] - Link from a node to a link is not possible
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="LinkItemSemanticEditPolicyGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
/*
	This template should be called only for non-design links (genLink.getModelFacet() != null) 
	because *ItemSemanticEditPolicy responsible for dealing with semantic model elements and 
	meaningless (should not	be generated) for pure design links.
*/

final GenLink genLink = (GenLink) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genLink.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genLink.getItemSemanticEditPolicyClassName()%> extends <%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())%> {
<%if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {%>

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getDestroyReferenceCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest")%> req) {
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand")%>(req)<%
	FeatureLinkModelFacet modelFacet = (FeatureLinkModelFacet) genLink.getModelFacet();
	if (modelFacet.getMetaFeature().isContains()) {
// Processing "phantom" objects
%> {
		
			protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult")%> doExecuteWithResult(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> progressMonitor, <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> info) throws <%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> {
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> referencedObject = getReferencedObject();
				<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = referencedObject.eResource();
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult")%> result = super.doExecuteWithResult(progressMonitor, info);
				resource.getContents().add(referencedObject);
				return result;
			}
		}<%
	}
%>);
	}
<%} else if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {%>

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getDestroyElementCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest")%> req) {
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand")%>(req));
	}
<%}%>
}
<%importManager.emitSortedImports();%>
@


1.12
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@@


1.11
log
@#161380 simplify feature model facets
@
text
@d4 6
@


1.10
log
@avoid generating unused imports in pure pure design projects
@
text
@d17 1
a17 1
<%if (genLink.getModelFacet() instanceof FeatureModelFacet) {%>
d24 1
a24 1
	FeatureModelFacet modelFacet = (FeatureModelFacet) genLink.getModelFacet();
@


1.9
log
@use importAssistant to emit package statement instead of handcoding
@
text
@a10 1
import org.eclipse.gef.commands.Command;
d22 1
a22 1
	protected Command getDestroyReferenceCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest")%> req) {
d45 1
a45 1
	protected Command getDestroyElementCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest")%> req) {
@


1.8
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d4 2
a5 1
GenLink genLink = (GenLink) ((Object[]) argument)[0];
d9 1
a9 1
package <%=genDiagram.getEditPoliciesPackageName()%>;
a10 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
@


1.7
log
@#127696 Templates should use new transaction API
In case of phantom nodes.
@
text
@d7 1
@


1.6
log
@use new transactional emf api
@
text
@d29 1
a29 1
			protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult")%> doExecute(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> progressMonitor) {
d32 1
a32 1
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult")%> result = super.doExecute(progressMonitor);
@


1.5
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d46 1
a46 1
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.commands.core.commands.MSLDestroyElementCommand")%>(req));
@


1.4
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@d4 1
a4 1
GenLink genLink = (GenLink) argument;
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d23 16
a38 1
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand")%>(req));
@


1.2
log
@Wrapping optional imports into importManager.getImportedName() calls
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.1
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@a10 4
import org.eclipse.gmf.runtime.emf.commands.core.commands.MSLDestroyElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;
d22 2
a23 2
	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
		return getMSLWrapper(new DestroyReferenceCommand(req));
d30 2
a31 2
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		return getMSLWrapper(new MSLDestroyElementCommand(req));
@

