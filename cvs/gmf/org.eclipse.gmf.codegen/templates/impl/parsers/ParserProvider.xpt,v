head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081015-1925:1.4
	v20081008-1925:1.3
	v20081001-1925:1.3
	v20080930-1130:1.3
	v20080926-1245:1.3
	v20080924-1925:1.3
	v20080917-1925:1.3
	v20080911-1728:1.3
	v20080910-1520:1.2
	v20080903-1520:1.2
	v20080827-1520:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2008.10.15.18.01.18;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	b45d48f62fed4567;

1.3
date	2008.09.11.16.46.28;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	38d1048c94b634567;

1.2
date	2008.08.29.18.54.10;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	48f948b845d14567;

1.1
date	2008.08.26.20.52.27;	author atikhomirov;	state Exp;
branches;
next	;
commitid	3a7648b46d064567;


desc
@@


1.4
log
@[249301] Wrap use of assert  into dedicated template
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - [235113] alternative parser access
 *                                 [244419] custom parsers
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«EXTENSION xpt::providers::ParserUtils»

«DEFINE accessorMethod_delegate2providers FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment("Utility method that consults ParserService")»
	public static org.eclipse.gmf.runtime.common.ui.services.parser.IParser getParser(org.eclipse.gmf.runtime.emf.type.core.IElementType type, org.eclipse.emf.ecore.EObject object, String parserHint) {
		return org.eclipse.gmf.runtime.common.ui.services.parser.ParserService.getInstance().getParser(new HintAdapter(type, object, parserHint));
	}
«ENDDEFINE»

// invokes method generated with accessorMethod_delegate2providers template
«DEFINE accessorCall_delegate2providers(gmfgen::GenCommonBase elementTypeHolder, gmfgen::LabelModelFacet labelModelFacet, String parsedElement) FOR gmfgen::GenCommonBase-»
«getDiagram().editorGen.labelParsers.getQualifiedClassName()».getParser(«getDiagram().getElementTypesQualifiedClassName()».«elementTypeHolder.getUniqueIdentifier()», «parsedElement», «IF labelModelFacet == null»«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall»«ELSE»«EXPAND _parserHint(labelModelFacet, this) FOR labelModelFacet.parser»«ENDIF»)«-»
«ENDDEFINE»

«DEFINE _parserHint(gmfgen::LabelModelFacet labelFacet, gmfgen::GenCommonBase hintHolder) FOR GenParserImplementation»«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall FOR hintHolder»«ENDDEFINE»
// ExternalParser may override hint
«DEFINE _parserHint(gmfgen::LabelModelFacet labelFacet, gmfgen::GenCommonBase hintHolder) FOR ExternalParser-»
«IF hint == null-»
«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall FOR hintHolder-»
«ELSE»«hint»«ENDIF-»
«ENDDEFINE»
«DEFINE _parserHint(gmfgen::DesignLabelModelFacet labelFacet, gmfgen::GenCommonBase hintHolder) FOR ExternalParser-»
«IF hint == null»org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint.DESCRIPTION«ELSE»«hint»«ENDIF-»
«ENDDEFINE»
«DEFINE _parserHint(gmfgen::DesignLabelModelFacet labelFacet, gmfgen::GenCommonBase hintHolder) FOR GenParserImplementation»org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint.DESCRIPTION«ENDDEFINE»

// FIXME refactor static field to an instance registered within Activator
«REM»Complementary method to accessorMethod_delegate2providers, although for direct access need an instance of this class«ENDREM»
«DEFINE accessorMethod_direct FOR gmfgen::GenParsers-»
	private static «getQualifiedClassName()» ourInstance;

	public static «getQualifiedClassName()» get() {
		if (ourInstance == null) {
			ourInstance = new «getQualifiedClassName()»();
		}
		return ourInstance;
	}
«ENDDEFINE»

// XXX consider adding #getDescriptionParser() method to control that kind of parser access? 
// XXX do I really need GenCommonBase elementTypeHolder, why not use elementType reference directly?
«DEFINE accessorCall_direct(gmfgen::GenCommonBase elementTypeHolder, gmfgen::LabelModelFacet labelModelFacet, String parsedElement) FOR gmfgen::GenCommonBase-»
«IF labelModelFacet == null || { labelModelFacet.parser }.typeSelect(ExternalParser).size() == 1-»
org.eclipse.gmf.runtime.common.ui.services.parser.ParserService.getInstance().getParser(new org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter(/*«getDiagram().getElementTypesQualifiedClassName()».«elementTypeHolder.getUniqueIdentifier()», */«parsedElement», «IF labelModelFacet == null»«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall»«ELSE»«EXPAND _parserHint(labelModelFacet, this) FOR labelModelFacet.parser»«ENDIF»))«-»
«ELSE-»
«getDiagram().editorGen.labelParsers.getQualifiedClassName()».get().«parserAccessorName(this)»()«-»
«ENDIF-»
«ENDDEFINE»

«DEFINE provider_getParserMethod FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.common.ui.services.parser.IParser getParser(
			org.eclipse.core.runtime.IAdaptable hint) {
		String vid = (String) hint.getAdapter(String.class);
		if (vid != null) {
			return getParser(«EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR editorGen.diagram»(vid));
		}
		org.eclipse.gmf.runtime.notation.View view =
				(org.eclipse.gmf.runtime.notation.View) hint.getAdapter(org.eclipse.gmf.runtime.notation.View.class);
		if (view != null) {
			return getParser(«EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR editorGen.diagram»(view));
		}
		return null;
	}
«ENDDEFINE»

«DEFINE provider_providesMethod FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment»
	public boolean provides(org.eclipse.gmf.runtime.common.core.service.IOperation operation) {
		if (operation instanceof org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation) {
			org.eclipse.core.runtime.IAdaptable hint =
					((org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation) operation).getHint();
			if («editorGen.diagram.getElementTypesQualifiedClassName()».getElement(hint) == null) {
				return false;
			}
			return getParser(hint) != null;
		}
		return false;
	}
«ENDDEFINE»

«DEFINE HintAdapterClass FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment»
	private static class HintAdapter extends org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter {

		«EXPAND xpt::Common::generatedMemberComment»
		private final org.eclipse.gmf.runtime.emf.type.core.IElementType elementType;

		«EXPAND xpt::Common::generatedMemberComment»
		public HintAdapter(org.eclipse.gmf.runtime.emf.type.core.IElementType type,
				org.eclipse.emf.ecore.EObject object, String parserHint) {
			super(object, parserHint);
			«EXPAND xpt::Common::assert("type != null")-»
			elementType = type;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public Object getAdapter(Class adapter) {
			if (org.eclipse.gmf.runtime.emf.type.core.IElementType.class.equals(adapter)) {
				return elementType;
			}
			return super.getAdapter(adapter);
		}
	}
«ENDDEFINE»

«DEFINE getParserByVisualIdMethod FOR gmfgen::GenParsers-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.ui.services.parser.IParser getParser(int visualID) {
		switch (visualID) {
		«EXPAND _getParsers FOREACH editorGen.diagram.topLevelNodes-»
		«EXPAND _getParsers FOREACH editorGen.diagram.childNodes-»
		«EXPAND _getParsers FOREACH editorGen.diagram.links-»
		}
		return null;
	}
«ENDDEFINE»

«DEFINE _getParsers FOR gmfgen::GenNode»«EXPAND _getParser FOREACH labels»«ENDDEFINE»
«DEFINE _getParsers FOR gmfgen::GenLink»«EXPAND _getParser FOREACH labels»«ENDDEFINE»
«DEFINE _getParsers FOR gmfgen::GenChildLabelNode»«EXPAND _getParser(this) FOR labelModelFacet»«ENDDEFINE»
«DEFINE _getParser FOR gmfgen::GenLabel»«EXPAND _getParser(this) FOR modelFacet»«ENDDEFINE»

«DEFINE _getParser(gmfgen::GenCommonBase element) FOR gmfgen::LabelModelFacet»«EXPAND _getParser(this, element) FOR parser»«ENDDEFINE»

«DEFINE _getParser(LabelModelFacet modelFacet, GenCommonBase element) FOR gmfgen::GenParserImplementation»«ERROR "Abstract template for " + this»«ENDDEFINE»
«DEFINE _getParser(LabelModelFacet modelFacet, GenCommonBase element) FOR gmfgen::ExternalParser»«REM»NOTHING TO DO«ENDREM»«ENDDEFINE»

«DEFINE _getParser(LabelModelFacet modelFacet, GenCommonBase element) FOR gmfgen::PredefinedParser-»
	«EXPAND xpt::Common::caseVisualID FOR element» return «parserAccessorName(element)»();
«ENDDEFINE»

«DEFINE _getParser(LabelModelFacet modelFacet, GenCommonBase element) FOR gmfgen::CustomParser-»
	«EXPAND xpt::Common::caseVisualID FOR element» return «parserAccessorName(element)»();
«ENDDEFINE»


«DEFINE parsers FOR gmfgen::GenNode»«EXPAND _parser FOREACH labels»«ENDDEFINE»
«DEFINE parsers FOR gmfgen::GenLink»«EXPAND _parser FOREACH labels»«ENDDEFINE»
«DEFINE parsers FOR gmfgen::GenChildLabelNode»«EXPAND _parser(this) FOR labelModelFacet»«ENDDEFINE»

«DEFINE _parser FOR gmfgen::GenLabel»«EXPAND _parser(this) FOR modelFacet»«ENDDEFINE»
«DEFINE _parser(gmfgen::GenCommonBase element) FOR gmfgen::LabelModelFacet»«EXPAND _parser(this, element) FOR parser»«ENDDEFINE»

«DEFINE _parser(LabelModelFacet modelFacet, GenCommonBase element) FOR gmfgen::GenParserImplementation»«ERROR "Abstract template for " + this»«ENDDEFINE»

«DEFINE _parser(LabelModelFacet modelFacet, GenCommonBase element) FOR gmfgen::CustomParser»
	«EXPAND xpt::Common::generatedMemberComment»
	private «qualifiedName» «parserFieldName(element)»;

	«EXPAND xpt::Common::generatedMemberComment»
	«IF holder.extensibleViaService»private«ELSE»public«ENDIF» org.eclipse.gmf.runtime.common.ui.services.parser.IParser «parserAccessorName(element)»() {
		if («parserFieldName(element)» == null) {
			«parserFieldName(element)» = new «qualifiedName»();
		}
		return «parserFieldName(element)»;
	}
«ENDDEFINE»

«DEFINE _parser(LabelModelFacet modelFacet, GenCommonBase element) FOR gmfgen::ExternalParser-»
«REM»NO-OP«ENDREM-»
«ENDDEFINE»

«DEFINE _parser(FeatureLabelModelFacet modelFacet, GenCommonBase element) FOR gmfgen::PredefinedParser»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.common.ui.services.parser.IParser «parserFieldName(element)»;

	«EXPAND xpt::Common::generatedMemberComment»
	«IF holder.extensibleViaService»private«ELSE»public«ENDIF» org.eclipse.gmf.runtime.common.ui.services.parser.IParser «parserAccessorName(element)»() {
		if («parserFieldName(element)» == null) {
			org.eclipse.emf.ecore.EAttribute[] features = new org.eclipse.emf.ecore.EAttribute[] {
				«EXPAND MetaModel::MetaFeature FOREACH modelFacet.metaFeatures SEPARATOR ", " »
			};
		«IF modelFacet.editableMetaFeatures.size() > 0-»
			org.eclipse.emf.ecore.EAttribute[] editableFeatures = new org.eclipse.emf.ecore.EAttribute[] {
				«EXPAND MetaModel::MetaFeature FOREACH modelFacet.editableMetaFeatures SEPARATOR ", "»
			};
		«ENDIF-»
		«EXPAND parsers::PredefinedParser::qualifiedClassName» parser = new «EXPAND parsers::PredefinedParser::qualifiedClassName»(features«IF modelFacet.editableMetaFeatures.size() > 0», editableFeatures«ENDIF»);
		«EXPAND _setPatterns(viewMethod, editMethod, "parser") FOR modelFacet-»
			«parserFieldName(element)» = parser;
		}
		return «parserFieldName(element)»;
	}
«ENDDEFINE»

«DEFINE _setPatterns(LabelTextAccessMethod viewMethod, LabelTextAccessMethod editMethod, String parserVar) FOR FeatureLabelModelFacet-»
«IF viewMethod != gmfgen::LabelTextAccessMethod::NATIVE-»
	«IF isPatternSpecified(viewPattern)-»
		«parserVar».setViewPattern("«viewPattern»");«EXPAND xpt::Common::nonNLS(1)»
	«ENDIF-»
	«IF isPatternSpecified(editorPattern)-»
		«parserVar».setEditorPattern("«editorPattern»");«EXPAND xpt::Common::nonNLS(1)»
	«ELSEIF isPatternSpecified(viewPattern)-»
		«parserVar».setEditorPattern("«viewPattern»");«EXPAND xpt::Common::nonNLS(1)»
	«ENDIF-»
«ENDIF-»
«IF editMethod != gmfgen::LabelTextAccessMethod::NATIVE-»
	«IF isPatternSpecified(editPattern)-»
		«parserVar».setEditPattern("«editPattern»");«EXPAND xpt::Common::nonNLS(1)»
	«ELSEIF isPatternSpecified(viewPattern)-»
		«parserVar».setEditPattern("«viewPattern»");«EXPAND xpt::Common::nonNLS(1)»
	«ENDIF-»
«ENDIF-»
«ENDDEFINE»
@


1.3
log
@[244419] Support for custom parser - tests for CustomParser and ExternalParser
@
text
@d111 1
a111 1
			assert type != null;
@


1.2
log
@[235113] alternative parser access
@
text
@d142 1
a142 1
«DEFINE _getParser(gmfgen::GenCommonBase element) FOR gmfgen::LabelModelFacet»«ENDDEFINE»
d144 8
a151 1
«DEFINE _getParser(gmfgen::GenCommonBase element) FOR gmfgen::FeatureLabelModelFacet-»
@


1.1
log
@[235113] alternative parser access, step 2: use dedicated GenParsers entry, along with exposing parts of template as API
@
text
@d30 1
a30 1
«getDiagram().editorGen.labelParsers.getQualifiedClassName()».getParser(«getDiagram().getElementTypesQualifiedClassName()».«elementTypeHolder.getUniqueIdentifier()», «parsedElement», «IF labelModelFacet == null»«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall»«ELSE»«EXPAND _parserHint(this) FOR labelModelFacet»«ENDIF»)«-»
d33 11
a43 2
«DEFINE _parserHint(gmfgen::GenCommonBase hintHolder) FOR gmfgen::LabelModelFacet»«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall FOR hintHolder»«ENDDEFINE»
«DEFINE _parserHint(gmfgen::GenCommonBase hintHolder) FOR gmfgen::DesignLabelModelFacet»org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint.DESCRIPTION«ENDDEFINE»
d45 2
a46 1
«REM»no-op, just to complement accessorMethod_delegate2providers«ENDREM»
d48 8
d58 1
a59 1
// XXX make HintAdapterClass private - don't use it for DESCRIPTION parsers
d61 2
a62 2
«IF labelModelFacet == null || { labelModelFacet }.typeSelect(DesignLabelModelFacet).size() == 1-»
org.eclipse.gmf.runtime.common.ui.services.parser.ParserService.getInstance().getParser(new «getDiagram().editorGen.labelParsers.getQualifiedClassName()».HintAdapter(«getDiagram().getElementTypesQualifiedClassName()».«elementTypeHolder.getUniqueIdentifier()», «parsedElement», «IF labelModelFacet == null»«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall»«ELSE»«EXPAND _parserHint(this) FOR labelModelFacet»«ENDIF»))«-»
d64 1
a64 1
«getDiagram().editorGen.labelParsers.getQualifiedClassName()».«parserAccessorName(this)»()«-»
a99 1
// FIXME private class
d102 1
a102 1
	public static class HintAdapter extends org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter {
d147 70
@

