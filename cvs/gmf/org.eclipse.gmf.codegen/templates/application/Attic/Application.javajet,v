head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20061218-1200:1.4
	v20061214-0000:1.4
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.12.18.18.20.51;	author dstadnik;	state dead;
branches;
next	1.4;
commitid	7d774586dbfa4567;

1.4
date	2006.10.16.17.42.17;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.09.16.07.49;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.04.11.05.53;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.03.08.05.55;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.5
log
@rewrite application templates in xpand; simplify genmodel
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.application" class="ApplicationGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenApplication application = (GenApplication) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.core.runtime.IPlatformRunnable;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.PlatformUI;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> implements IPlatformRunnable {

	/**
	 * @@generated
	 */
	public Object run(Object args) throws Exception {
		Display display = PlatformUI.createDisplay();
		try {
			int returnCode = PlatformUI.createAndRunWorkbench(display,
					new <%=importManager.getImportedName(application.getWorkbenchAdvisorQualifiedClassName())%>());
			if (returnCode == PlatformUI.RETURN_RESTART) {
				return IPlatformRunnable.EXIT_RESTART;
			}
			return IPlatformRunnable.EXIT_OK;
		} finally {
			display.dispose();
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.4
log
@#114200 no workspace operation in rcp
@
text
@@


1.3
log
@use generic getCompilationUnitName() call
@
text
@a9 6
import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspaceRunnable;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
a10 7
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.jobs.ISchedulingRule;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.operation.IThreadListener;
a35 84

	/**
	 * @@generated
	 */
	public static abstract class WorkspaceModifyOperation implements IRunnableWithProgress, IThreadListener {

		/**
		 * @@generated
		 */
		private ISchedulingRule rule;

		/**
		 * @@generated
		 */
		protected WorkspaceModifyOperation() {
			this(ResourcesPlugin.getWorkspace().getRoot());
		}

		/**
		 * @@generated
		 */
		protected WorkspaceModifyOperation(ISchedulingRule rule) {
			this.rule = rule;
		}

		/**
		 * @@generated
		 */
		protected abstract void execute(IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException;

		/**
		 * @@generated
		 */
		public synchronized final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
			final InvocationTargetException[] iteHolder = new InvocationTargetException[1];
			try {
				IWorkspaceRunnable workspaceRunnable = new IWorkspaceRunnable() {

					public void run(IProgressMonitor pm) throws CoreException {
						try {
							execute(pm);
						} catch (InvocationTargetException e) {
							// Pass it outside the workspace runnable
							iteHolder[0] = e;
						} catch (InterruptedException e) {
							// Re-throw as OperationCanceledException, which will be
							// caught and re-thrown as InterruptedException below.
							throw new OperationCanceledException(e.getMessage());
						}
						// CoreException and OperationCanceledException are propagated
					}
				};
				ResourcesPlugin.getWorkspace().run(workspaceRunnable, rule, IResource.NONE, monitor);
			} catch (CoreException e) {
				throw new InvocationTargetException(e);
			} catch (OperationCanceledException e) {
				throw new InterruptedException(e.getMessage());
			}
			// Re-throw the InvocationTargetException, if any occurred
			if (iteHolder[0] != null) {
				throw iteHolder[0];
			}
		}

		/**
		 * @@generated
		 */
		public void threadChange(Thread thread) {
			//we must make sure we aren't transferring control away from a thread that
			//already owns a scheduling rule because this is deadlock prone (bug 105491)
			if (rule == null) {
				return;
			}
			Job currentJob = Platform.getJobManager().currentJob();
			if (currentJob == null) {
				return;
			}
			ISchedulingRule currentRule = currentJob.getRule();
			if (currentRule == null) {
				return;
			}
			throw new IllegalStateException("Cannot fork a thread from a thread owning a rule"); //$NON-NLS-1$
		}
	}
@


1.2
log
@#114200 ws operation do not require application
@
text
@d31 1
a31 1
public class <%=application.getApplicationClassName()%> implements IPlatformRunnable {
@


1.1
log
@#114200 generate RCP specific classes
@
text
@d53 1
a53 1
	public abstract class WorkspaceModifyOperation implements IRunnableWithProgress, IThreadListener {
@

