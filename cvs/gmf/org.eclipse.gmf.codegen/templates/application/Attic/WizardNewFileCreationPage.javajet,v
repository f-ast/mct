head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081015-1925:1.3
	v20081008-1925:1.3
	v20081001-1925:1.3
	v20080924-1925:1.3
	v20080917-1925:1.3
	v20080911-1728:1.3
	v20080910-1520:1.3
	v20080903-1520:1.3
	v20080827-1520:1.3
	v20080813-1520:1.3
	v20080806-1520:1.3
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070520-1200:1.2
	v20070518-1300:1.2
	v20070504-1000:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061218-1200:1.1
	v20061214-0000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.06.05.17.01.07;	author dstadnik;	state dead;
branches;
next	1.2;
commitid	7adc466596d24567;

1.2
date	2006.12.20.13.24.20;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	374a458939834567;

1.1
date	2006.11.22.15.30.35;	author dstadnik;	state Exp;
branches;
next	;
commitid	2b2545646d1a4567;


desc
@@


1.3
log
@rewrite new file wizard page in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.application" class="WizardNewFileCreationPageGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenApplication application = (GenApplication) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class WizardNewFileCreationPage extends WizardPage {

	/**
	 * @@generated
	 */
	private final IStructuredSelection currentSelection;

	/**
	 * @@generated
	 */
	private String initialFileName;

	/**
	 * @@generated
	 */
	private IPath initialContainerFullPath;

	/**
	 * @@generated
	 */
	private Text fileNameEditor;

	/**
	 * @@generated
	 */
	public WizardNewFileCreationPage(String name, IStructuredSelection currentSelection) {
		super(name);
		this.currentSelection = currentSelection;
		String home = System.getProperty("user.home"); //$NON-NLS-1$
		if (home != null) {
			initialContainerFullPath = new Path(home);
		}
	}

	/**
	 * @@generated
	 */
	protected IStructuredSelection getSelection() {
		return currentSelection;
	}

	/**
	 * @@generated
	 */
	public String getFileName() {
		if (fileNameEditor == null) {
			return initialFileName;
		}
		IPath path = getFilePath();
		if (path == null || path.isEmpty() || path.hasTrailingSeparator()) {
			return null;
		}
		return path.lastSegment();
	}

	/**
	 * @@generated
	 */
	public void setFileName(String fileName) {
		if (fileNameEditor == null) {
			initialFileName = fileName;
			return;
		}
		setFilePath(getContainerFullPath(), fileName);
	}

	/**
	 * @@generated
	 */
	public IPath getContainerFullPath() {
		if (fileNameEditor == null) {
			return initialContainerFullPath;
		}
		IPath path = getFilePath();
		if (path == null || path.isEmpty()) {
			return null;
		}
		if (path.hasTrailingSeparator()) {
			return path;
		}
		path = path.removeLastSegments(1);
		if (path.isEmpty()) {
			return null;
		}
		return path.addTrailingSeparator();
	}

	/**
	 * @@generated
	 */
	public void setContainerFullPath(IPath containerPath) {
		if (fileNameEditor == null) {
			initialContainerFullPath = containerPath;
			return;
		}
		setFilePath(containerPath, getFileName());
	}

	/**
	 * @@generated
	 */
	protected IPath getFilePath() {
		String fileName = fileNameEditor.getText().trim();
		if (fileName.length() == 0) {
			return null;
		}
		return new Path(fileNameEditor.getText());
	}

	/**
	 * @@generated
	 */
	protected void setFilePath(IPath containerPath, String fileName) {
		if (fileName == null) {
			fileName = ""; //$NON-NLS-1$
		} else {
			fileName = fileName.trim();
		}
		if (containerPath == null) {
			fileNameEditor.setText(fileName);
		} else {
			if (!containerPath.hasTrailingSeparator()) {
				containerPath = containerPath.addTrailingSeparator();
			}
			IPath path = fileName.length() == 0 ? containerPath : containerPath.append(fileName);
			fileNameEditor.setText(path.toOSString());
		}
		setPageComplete(validatePage());
	}

	/**
	 * @@generated
	 */
	public void createControl(Composite parent) {
		Composite plate = new Composite(parent, SWT.NONE);
		plate.setLayout(new GridLayout(2, false));
		Label label = new Label(plate, SWT.NONE);
		label.setText("File:");
		label.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false, 2, 1));
		fileNameEditor = new Text(plate, SWT.SINGLE | SWT.BORDER);
		fileNameEditor.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
		Button button = new Button(plate, SWT.PUSH);
		button.setText("Browse");
		button.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false));

		// logic
		fileNameEditor.addModifyListener(new ModifyListener() {

			public void modifyText(ModifyEvent e) {
				setPageComplete(validatePage());
			}
		});
		button.addSelectionListener(new SelectionListener() {

			public void widgetSelected(SelectionEvent e) {
				FileDialog dialog = new FileDialog(getShell(), SWT.SAVE);
				dialog.setText("Select new file");
				dialog.setFileName(getFileName());
				String fileName = dialog.open();
				if (fileName != null) {
					fileNameEditor.setText(fileName);
					setPageComplete(validatePage());
				}
			}

			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});

		// init
		setFilePath(initialContainerFullPath, initialFileName);
		setControl(plate);
	}

	/**
	 * @@generated
	 */
	protected boolean validatePage() {
		String fileName = fileNameEditor.getText().trim();
		if (fileName.length() == 0) {
			setErrorMessage("Specify file name");
			return false;
		}
		if (!new Path("").isValidPath(fileName)) { //$NON-NLS-1$
			setErrorMessage("Invalid file name");
			return false;
		}
		setErrorMessage(null);
		return true;
	}
}
<%importManager.emitSortedImports();%>
@


1.2
log
@use home folder as default models container
@
text
@@


1.1
log
@generate wizard page that allows to select file
@
text
@d59 4
@

