head	1.8;
access;
symbols
	v20081022-1925:1.8
	v20081015-1925:1.8
	v20081008-1925:1.8
	v20081001-1925:1.8
	v20080924-1925:1.8
	v20080917-1925:1.8
	v20080911-1728:1.8
	v20080910-1520:1.8
	v20080903-1520:1.8
	v20080827-1520:1.8
	v20080813-1520:1.8
	v20080806-1520:1.8
	v20070504-1000:1.7
	v20070427-0600:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070405-1100:1.7
	v20070403-1500:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070307-0700:1.7
	v20070301-1200:1.7
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.5
	v20070103-0300:1.6
	M4_20:1.6
	v20061222-1800:1.6
	v20061218-1200:1.6
	v20061214-0000:1.6
	v20061120-1300:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.5
	v20061020-1000:1.5
	v20061013-1330:1.6
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060824-1600:1.5
	v20060817-1500:1.5
	v20060728-0500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-1300:1.5
	v20060519-0800:1.5
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.3
	I20060407-1200:1.2
	I20060331-1000:1.1
	I20060324-0300:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2007.05.11.13.50.53;	author ashatalin;	state dead;
branches;
next	1.7;
commitid	6340464474b24567;

1.7
date	2007.03.01.13.05.36;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	1a6045e6cf9e4567;

1.6
date	2006.10.06.13.28.47;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.15.18.34.06;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.04.14.12.04;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.19.16.57.17;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@<%
List genLinks = genDiagram.getLinks();
%>
<%final Map<GenClass, GenTopLevelNode> genClass2Phantom = genDiagram.getGenClass2PhantomMap();%>
	
/**
 * @@generated
 */
private <%=importManager.getImportedName("java.util.Collection")%> myLinkDescriptors = new <%=importManager.getImportedName("java.util.LinkedList")%>();
	
/**
 * @@generated
 */
private <%=importManager.getImportedName("java.util.Map")%> myEObject2NodeMap = new <%=importManager.getImportedName("java.util.HashMap")%>();

/**
 * @@generated
 */
public void initDiagramContents(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram, <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> diagramModelObject) {
	create<%=genDiagram.getUniqueIdentifier()%>Children(diagram, diagramModelObject);
<%@@ include file="collectDiagramPhantoms_header.jetinc"%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(diagram, nextResourceObject, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(phantomNode.getEditPartQualifiedClassName())%>.VISUAL_ID), <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
		myEObject2NodeMap.put(nextResourceObject, nextNode);
		create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextResourceObject);
<%@@ include file="collectDiagramPhantoms_footer.jetinc"%>
<%
// TODO: remove "createLinks()" method - this task should be done by canonicalEditPolicies
%>		
	createLinks(diagram);
}
<%
boolean generateGetCompartment = false;

for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();
%>	

/**
 * @@generated
 */
private void create<%=nextContainer.getUniqueIdentifier()%>Children(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> viewObject, <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelObject) {
<%	{
		List genNodes = nextContainer.getContainedNodes();%>
<%@@ include file="collectSemanticChildren_header.jetinc"%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(viewObject, nextValue, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextNode.getEditPartQualifiedClassName())%>.VISUAL_ID), <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
		myEObject2NodeMap.put(nextValue, nextNode);
		create<%=nextNode.getUniqueIdentifier()%>Children(nextNode, nextValue);
<%@@ include file="collectSemanticChildren_footer.jetinc"%>
<%	}

	if (nextContainer instanceof GenNode) {
		GenNode nextNode = (GenNode) nextContainer;
		for (int i = 0; i < nextNode.getCompartments().size(); i++) {
			generateGetCompartment = true;
			GenCompartment nextCompartment = (GenCompartment) nextNode.getCompartments().get(i);
%>
	<%=i == 0 ? importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node") : ""%> nextCompartment = getCompartment(viewObject, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextCompartment.getEditPartQualifiedClassName())%>.VISUAL_ID));
	if (nextCompartment != null) {
		create<%=nextCompartment.getUniqueIdentifier()%>Children(nextCompartment, modelObject);
	}
<%
		}
	}
	if (false == nextContainer instanceof GenCompartment) {
%>
	storeLinks(modelObject, viewObject.getDiagram());
<%	}%>
}
<%
}

if (generateGetCompartment) {
%>
	
/**
 * @@generated
 */
private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getCompartment(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> node, String name) {
	for (<%=importManager.getImportedName("java.util.Iterator")%> it = node.getChildren().iterator(); it.hasNext();) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
		if (nextView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> && name.equals(nextView.getType())) {
			return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) nextView;
		}
	}
	return null;
}
<%
}
%>

<%boolean createPhantoms = true;%>
<%@@ include file="storeLinks.jetinc"%>

/**
 * @@generated
 */
private void createLinks(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram) {
	for (<%=importManager.getImportedName("java.util.Iterator")%> it = myLinkDescriptors.iterator(); it.hasNext();) {
		LinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) org.eclipse.gmf.runtime.diagram.core.services.ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, String.valueOf(nextLinkDescriptor.getVisualID()), <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
		if (edge != null) {
			edge.setSource((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) myEObject2NodeMap.get(nextLinkDescriptor.getSource()));
			edge.setTarget((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));
		}
	}
}

<%@@ include file="linkDescriptor.jetinc"%>@


1.7
log
@rewrite NewDiagramFileWizard in xpand
@
text
@@


1.6
log
@moved code-only parts from templates to model impl classes
@
text
@d19 1
a19 1
private void initDiagramContents(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram, <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> diagramModelObject) {
d22 1
a22 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextResourceObject, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(phantomNode.getEditPartQualifiedClassName())%>.VISUAL_ID), <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
d45 1
a45 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(viewObject, nextValue, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextNode.getEditPartQualifiedClassName())%>.VISUAL_ID), <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
d100 1
a100 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, String.valueOf(nextLinkDescriptor.getVisualID()), <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
@


1.5
log
@Correcting visual ID generation for the links
@
text
@d4 1
a4 1
<%@@ include file="class2PhantomsCollector.jetinc"%>
@


1.4
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d100 1
a100 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, "", <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
@


1.3
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d22 1
a22 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextResourceObject, <%=importManager.getImportedName(phantomNode.getEditPartQualifiedClassName())%>.VISUAL_ID, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
d45 1
a45 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(viewObject, nextValue, <%=importManager.getImportedName(nextNode.getEditPartQualifiedClassName())%>.VISUAL_ID, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
d57 1
a57 1
	<%=i == 0 ? importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node") : ""%> nextCompartment = getCompartment(viewObject, <%=importManager.getImportedName(nextCompartment.getEditPartQualifiedClassName())%>.VISUAL_ID);
@


1.2
log
@#134737 Create connections (links) to the inner elements in CanonicalEditPolicy/InitDiagramFileAction
#134751 Generated code should return semantic children in a correct sequence from CanonicalEditPolicy.getSemanticChildrenList()
@
text
@d22 3
a24 13
<%
	for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
		GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();
%>
		case <%=phantomNode.getVisualID()%>: {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextResourceObject, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
			myEObject2NodeMap.put(nextResourceObject, nextNode);
			create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextResourceObject);
			break;
		}
<%
	}
%>
d45 1
a45 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(viewObject, nextValue, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
a55 2
			String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
			String compartmentViewId = semanticHintsClassName + '.' + nextNode.getUniqueIdentifier() + "Compartments." + nextCompartment.getSemanticHintFieldName();
d57 1
a57 1
	<%=i == 0 ? importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node") : ""%> nextCompartment = getCompartment(viewObject, <%=compartmentViewId%>);
@


1.1
log
@#128024 Model references are not recognized as links
#131543 Obsolete code should be eliminated
@
text
@d53 1
a53 2
		List genNodes = nextContainer.getContainedNodes();
		for (int nodeIndex = 0; nodeIndex < genNodes.size(); nodeIndex++) {%>
d59 1
a59 2
<%		}
	}
@

