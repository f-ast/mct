head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070405-1100:1.9
	v20070403-1500:1.9
	v20070330-1300:1.9
	v20060330-1300:1.9
	v20070322-1100:1.9
	v20060316-0600:1.9
	v20070307-0700:1.9
	v20070301-1200:1.9
	v20070228-2000:1.9
	v20070221-1500:1.9
	v20070208-1800:1.9
	v20070202-0200:1.7.2.1
	v20070103-0300:1.9
	M4_20:1.9
	v20061222-1800:1.9
	v20061218-1200:1.9
	v20061214-0000:1.9
	v20061120-1300:1.9
	M3_20:1.9
	v20061117-0800:1.9
	v20061027-1200:1.7.2.1
	v20061020-1000:1.7.2.1
	v20061013-1330:1.9
	v20060919-0800:1.7.2.1
	v20060907-1100:1.7.2.1
	M1_20:1.8
	v20060904-1500:1.8
	v20060824-1600:1.7.2.1
	v20060817-1500:1.7.2.1
	v20060728-0500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-1300:1.7
	v20060519-0800:1.6
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.4
	I20060407-1200:1.2
	I20060331-1000:1.1
	I20060324-0300:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.04.24.18.22.42;	author ashatalin;	state dead;
branches;
next	1.9;
commitid	1456462e4af04567;

1.9
date	2006.10.06.13.28.47;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.17.17.06.15;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.19.14.11.42;	author dstadnik;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.05.15.17.18.16;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.13.22.22.24;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.04.14.12.04;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.19.16.57.17;	author ashatalin;	state Exp;
branches;
next	;

1.7.2.1
date	2006.08.17.17.10.33;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.10
log
@DiagramCanonicalEditpolicy template is in XPAND now.
[182556] - getSemanticChildrenList.jetinc generates empty switch statement causing generation to fail
@
text
@<%final Map<GenClass, GenTopLevelNode> genClass2Phantom = genDiagram.getGenClass2PhantomMap();%>
	/**
	 * @@generated
	 */
	protected void refreshSemantic() {
		<%=importManager.getImportedName("java.util.List")%> createdViews = new <%=importManager.getImportedName("java.util.LinkedList")%>();
		createdViews.addAll(refreshSemanticChildren());
<%if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {%>
		createdViews.addAll(refreshPhantoms());
<%}%>
		<%=importManager.getImportedName("java.util.List")%> createdConnectionViews = new <%=importManager.getImportedName("java.util.LinkedList")%>();
		createdConnectionViews.addAll(refreshSemanticConnections());
		createdConnectionViews.addAll(refreshConnections());

		if (createdViews.size() > 1) {
			// perform a layout of the container
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand")%> layoutCmd = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand")%>(host().getEditingDomain(), createdViews, host());
			executeCommand(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy")%>(layoutCmd));
		}

		createdViews.addAll(createdConnectionViews);
		makeViewsImmutable(createdViews);
	}
<%if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {%>
	
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> refreshPhantoms() {
		<%=importManager.getImportedName("java.util.Collection")%> phantomNodes = new <%=importManager.getImportedName("java.util.LinkedList")%>();
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> diagramModelObject = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) getHost().getModel()).getElement();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = getDiagram();
<%@@ include file="collectDiagramPhantoms_header.jetinc"%>
			phantomNodes.add(nextResourceObject);
<%@@ include file="collectDiagramPhantoms_footer.jetinc"%>

<%@@ include file="filterOutExistingPhantoms.jetinc"%>
		return createPhantomNodes(phantomNodes);
	}

<%@@ include file="createPhantomNodes.jetinc" %>
<%}%>
	
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> myLinkDescriptors = new <%=importManager.getImportedName("java.util.LinkedList")%>();
	
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Map")%> myEObject2ViewMap = new <%=importManager.getImportedName("java.util.HashMap")%>();

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> refreshConnections() {
		try {
			collectAllLinks(getDiagram());
			<%=importManager.getImportedName("java.util.Collection")%> existingLinks = new <%=importManager.getImportedName("java.util.LinkedList")%>(getDiagram().getEdges());
			for (<%=importManager.getImportedName("java.util.Iterator")%> diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {
				Edge nextDiagramLink = (Edge) diagramLinks.next();
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> diagramLinkObject = nextDiagramLink.getElement();
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> diagramLinkSrc = nextDiagramLink.getSource().getElement();
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> diagramLinkDst = nextDiagramLink.getTarget().getElement();
				int diagramLinkVisualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextDiagramLink);
				for (<%=importManager.getImportedName("java.util.Iterator")%> modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {
					LinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();
					if (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
						diagramLinks.remove();
						modelLinkDescriptors.remove();
					}
				}
			}
			deleteViews(existingLinks.iterator());
			return createConnections(myLinkDescriptors);
		} finally {
			myLinkDescriptors.clear();
			myEObject2ViewMap.clear();
		}
	}
	
	/**
	 * @@generated
	 */
	private void collectAllLinks(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelElement = view.getElement();
		int diagramElementVisualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view);
		switch (diagramElementVisualID) {
<%
for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();
	if (nextContainer instanceof GenCompartment) {
		continue;
	}
	if (nextContainer instanceof GenNode && ((GenNode) nextContainer).getModelFacet() == null) {
		continue;
	}
%>
		case <%=importManager.getImportedName(nextContainer.getEditPartQualifiedClassName())%>.VISUAL_ID:<%
}		%> { myEObject2ViewMap.put(modelElement, view);
			storeLinks(modelElement, getDiagram());
		}
		default: {
		}
		for (<%=importManager.getImportedName("java.util.Iterator")%> children = view.getChildren().iterator(); children.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> childView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) children.next();
			collectAllLinks(childView);
		}
		}
	}

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> createConnections(<%=importManager.getImportedName("java.util.Collection")%> linkDescriptors) {
		if (linkDescriptors.isEmpty()) {
			return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
		}
		<%=importManager.getImportedName("java.util.List")%> adapters = new <%=importManager.getImportedName("java.util.LinkedList")%>();
		for (<%=importManager.getImportedName("java.util.Iterator")%> linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {
			final LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());
			if (sourceEditPart == null || targetEditPart == null) {
				continue;
			}
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest")%>.ConnectionViewDescriptor descriptor = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest")%>.ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, false, ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart")%>) getHost()).getDiagramPreferencesHint());
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest")%> ccr = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest")%>(descriptor);
			ccr.setType(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants")%>.REQ_CONNECTION_START);
			ccr.setSourceEditPart(sourceEditPart);
			sourceEditPart.getCommand(ccr);
			ccr.setTargetEditPart(targetEditPart);
			ccr.setType(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants")%>.REQ_CONNECTION_END);
			<%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> cmd = targetEditPart.getCommand(ccr);
			if (cmd != null && cmd.canExecute()) {
				executeCommand(cmd);
				<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> viewAdapter = (<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) ccr.getNewObject();
				if (viewAdapter != null) {
					adapters.add(viewAdapter);
				}
			}
		}
		return adapters;
	}
	
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getEditPartFor(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelElement) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) myEObject2ViewMap.get(modelElement);
		if (view != null) {
			return (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) getHost().getViewer().getEditPartRegistry().get(view);
		}
		return null;
	}
	
<%
boolean createPhantoms = false;
List genLinks = genDiagram.getLinks();
%>
<%@@ include file="storeLinks.jetinc"%>
	
<%@@ include file="getDiagram.jetinc" %>

<%@@ include file="linkDescriptor.jetinc"%>@


1.9
log
@moved code-only parts from templates to model impl classes
@
text
@@


1.8
log
@#141789 call "Arrange ALL" function in generation code for initialize the diagram
@
text
@d1 1
a1 1
<%@@ include file="class2PhantomsCollector.jetinc"%>
@


1.7
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d6 2
a7 1
		super.refreshSemantic();
d9 1
a9 1
		refreshPhantoms();
d11 12
a22 1
		refreshConnections();
d29 1
a29 1
	private void refreshPhantoms() {
d38 1
a38 1
		createPhantomNodes(phantomNodes);
d57 1
a57 1
	private void refreshConnections() {
d76 1
a76 1
			createConnections(myLinkDescriptors);
d116 1
a116 1
	private void createConnections(<%=importManager.getImportedName("java.util.Collection")%> linkDescriptors) {
d118 1
a118 1
			return;
d120 1
d139 3
a141 1
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand")%>.makeImmutable(viewAdapter).execute();
d144 1
@


1.7.2.1
log
@#141789 call "Arrange ALL" function in generation code for initialize the diagram
@
text
@d6 1
a6 2
		<%=importManager.getImportedName("java.util.List")%> createdViews = new <%=importManager.getImportedName("java.util.LinkedList")%>();
		createdViews.addAll(refreshSemanticChildren());
d8 1
a8 1
		createdViews.addAll(refreshPhantoms());
d10 1
a10 12
		<%=importManager.getImportedName("java.util.List")%> createdConnectionViews = new <%=importManager.getImportedName("java.util.LinkedList")%>();
		createdConnectionViews.addAll(refreshSemanticConnections());
		createdConnectionViews.addAll(refreshConnections());

		if (createdViews.size() > 1) {
			// perform a layout of the container
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand")%> layoutCmd = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand")%>(host().getEditingDomain(), createdViews, host());
			executeCommand(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy")%>(layoutCmd));
		}

		createdViews.addAll(createdConnectionViews);
		makeViewsImmutable(createdViews);
d17 1
a17 1
	private <%=importManager.getImportedName("java.util.Collection")%> refreshPhantoms() {
d26 1
a26 1
		return createPhantomNodes(phantomNodes);
d45 1
a45 1
	private <%=importManager.getImportedName("java.util.Collection")%> refreshConnections() {
d64 1
a64 1
			return createConnections(myLinkDescriptors);
d104 1
a104 1
	private <%=importManager.getImportedName("java.util.Collection")%> createConnections(<%=importManager.getImportedName("java.util.Collection")%> linkDescriptors) {
d106 1
a106 1
			return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
a107 1
		<%=importManager.getImportedName("java.util.List")%> adapters = new <%=importManager.getImportedName("java.util.LinkedList")%>();
d126 1
a126 3
				if (viewAdapter != null) {
					adapters.add(viewAdapter);
				}
a128 1
		return adapters;
@


1.6
log
@#131543 Obsolete code should be eliminated
@
text
@d84 3
@


1.5
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d7 1
a7 1
<%if (isSynchronizedDiagram && genClass2Phantom.size() > 0) {%>
d12 1
a12 1
<%if (isSynchronizedDiagram && genClass2Phantom.size() > 0) {%>
@


1.4
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d85 1
a85 1
		case <%=nextContainer.getVisualID()%>:<%
@


1.3
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d54 1
a54 1
				int diagramLinkVisualID = getVisualID(nextDiagramLink);
d76 1
a76 1
		int diagramElementVisualID = getVisualID(view);
d112 1
a112 2
			String factoryHint = "";
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest")%>.ConnectionViewDescriptor descriptor = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest")%>.ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), getFactoryHint(nextLinkDescriptor.getSemanticAdapter(), factoryHint), <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, false, ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart")%>) getHost()).getDiagramPreferencesHint());
a141 1
String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
a146 2
<%@@ include file="../editor/getVisualID.jetinc" %>

@


1.2
log
@#134737 Create connections (links) to the inner elements in CanonicalEditPolicy/InitDiagramFileAction
#134751 Generated code should return semantic children in a correct sequence from CanonicalEditPolicy.getSemanticChildrenList()
@
text
@a21 5
<%
	for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
		GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();
%>
		case <%=phantomNode.getVisualID()%>: {
a22 5
			break;
		}
<%
	}
%>
@


1.1
log
@#128024 Model references are not recognized as links
#131543 Obsolete code should be eliminated
@
text
@a97 5
			for (<%=importManager.getImportedName("java.util.Iterator")%> children = view.getChildren().iterator(); children.hasNext();) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> childView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) children.next();
				collectAllLinks(childView);
			}
			return;
d100 4
a103 1
			return;
@

