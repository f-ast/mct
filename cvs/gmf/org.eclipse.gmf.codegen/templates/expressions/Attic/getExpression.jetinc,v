head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.6
	v20070403-1500:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070307-0700:1.6
	v20070301-1200:1.6
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.5
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061218-1200:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061027-1200:1.5
	v20061020-1000:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060824-1600:1.5
	v20060817-1500:1.5
	v20060728-0500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.2;
locks; strict;
comment	@# @;


1.7
date	2007.09.14.18.23.24;	author dstadnik;	state dead;
branches;
next	1.6;
commitid	153b46ead19a4567;

1.6
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches
	1.6.2.1;
next	1.5;
commitid	271945b8e1904567;

1.5
date	2006.06.14.13.56.50;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.27.12.04.52;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.20.10.37.28;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.14.12.46.37;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.15.41.17;	author radvorak;	state Exp;
branches;
next	;

1.6.2.1
date	2007.09.14.18.46.29;	author dstadnik;	state dead;
branches;
next	;
commitid	622c46ead7044567;


desc
@@


1.7
log
@get rid of jet
@
text
@<%
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {
%>null<%
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			
%><%=providerImportedClass%>.<%=__expressionAccessor%>(<%=__genValueExpression.getBodyString()%>, //$NON-NLS-1$
	<%=__ctxEClassifierAccess%>, <%=__outEnvVarName%>)<%
		} else { 		
%><%=providerImportedClass%>.<%=__expressionAccessor%>(<%=__genValueExpression.getBodyString()%>, //$NON-NLS-1$
	<%=__ctxEClassifierAccess%>)<%
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	

%>new <%=__importedAbstractClass%>(<%=__ctxEClassifierAccess%>) {
	protected Object doEvaluate(Object context, <%=importManager.getImportedName("java.util.Map")%> env) {	
		<%=importManager.getImportedName(evalCtxQualifiedName)%> self = (<%=importManager.getImportedName(evalCtxQualifiedName)%>)context;
<%	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);
%>	
		<%=importManager.getImportedName(qualifiedTypeName)%> <%=nextVariableName%> = (<%=importManager.getImportedName(qualifiedTypeName)%>)env.get("<%=nextVariableName%>"); //$NON-NLS-1$
<%		} %>
		return <%
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { %><%=__javaOperationContainer%>.<%
		} %><%=__exprJavaOperName%>(self<%
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){%>, <%=(String)envVarIt.next()%><%}%>);
	}
}
<%}%>
<%} /*end of scope*/%>
@


1.6
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@@


1.6.2.1
log
@get rid of jet
@
text
@@


1.5
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@a16 1
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
d21 1
a21 1
%><%=providerImportedClass%>.<%=__expressionAccessor%>(<%=__bodyLiteral%>, //$NON-NLS-1$
d24 1
a24 1
%><%=providerImportedClass%>.<%=__expressionAccessor%>(<%=__bodyLiteral%>, //$NON-NLS-1$
@


1.4
log
@#138884  Expression accessors templates handle GenEnum classifier incorretly
@
text
@d17 1
d22 1
a22 1
%><%=providerImportedClass%>.<%=__expressionAccessor%>("<%=__genValueExpression.getBody()%>", //$NON-NLS-1$
d25 1
a25 1
%><%=providerImportedClass%>.<%=__expressionAccessor%>("<%=__genValueExpression.getBody()%>", //$NON-NLS-1$
@


1.3
log
@#136672 Adapt Element Initializers, Link Constraints templates
@
text
@d28 1
a28 1
		String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ?((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
d38 1
a38 1
			String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
@


1.2
log
@#136672 Adapt gmf.codegen templates using expressions to use common expression accessor
@
text
@d20 6
a25 8
		if(!__exprEnvVariables.isEmpty()) {	
		
%><%=providerImportedClass%>.<%=__expressionAccessor%>("<%=__genValueExpression.getBody()%>", <%=__ctxEClassifierAccess%>, <%=__outEnvVarName%>)<%

		} else { 
		
%><%=providerImportedClass%>.<%=__expressionAccessor%>("<%=__genValueExpression.getBody()%>", <%=__ctxEClassifierAccess%>)<%

d42 3
a44 1
		return <%=__javaOperationContainer%>.<%=__exprJavaOperName%>(self<%
@


1.1
log
@[#134511] common access to expressions of different languages
@
text
@d2 1
d12 1
a12 5
	String __importedAbstractClass = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());

	if(__genExprProvider == null) {

%><%=__importedAbstractClass%>.createNullExpression(<%=__ctxEClassifierAccess%>)<%
d14 2
d49 1
@

