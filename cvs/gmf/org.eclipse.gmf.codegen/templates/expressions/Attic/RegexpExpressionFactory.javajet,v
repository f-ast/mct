head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061027-1200:1.3
	v20061020-1000:1.3
	v20061013-1330:1.3
	v20060919-0800:1.3
	v20060907-1100:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060728-0500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1;
locks; strict;
comment	@# @;


1.5
date	2007.09.14.18.23.24;	author dstadnik;	state dead;
branches;
next	1.4;
commitid	153b46ead19a4567;

1.4
date	2007.04.30.11.55.02;	author atikhomirov;	state Exp;
branches
	1.4.2.1;
next	1.3;
commitid	27bb4635d9164567;

1.3
date	2006.06.06.16.22.23;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.30.19.09.09;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.26.17.48.40;	author radvorak;	state Exp;
branches;
next	;

1.4.2.1
date	2007.09.14.18.46.29;	author dstadnik;	state dead;
branches;
next	;
commitid	622c46ead7044567;


desc
@@


1.5
log
@get rid of jet
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.expressions" class="RegexpExpressionFactoryGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenExpressionInterpreter genInterpreter = (GenExpressionInterpreter) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = genInterpreter.getContainer().getEditorGen().getDiagram();
final String factoryClassName = genInterpreter.getClassName();
final String abstractExpressionClass = genInterpreter.getContainer().getAbstractExpressionQualifiedClassName();
final boolean isNegationRegexp = !GenLanguage.REGEXP_LITERAL.equals(genInterpreter.getLanguage());
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);
importManager.registerInnerClass("Expression");

importManager.addImport("java.util.Collections");
importManager.addImport("java.util.Map");
importManager.addImport("java.util.regex.Matcher");
importManager.addImport("java.util.regex.Pattern");
importManager.addImport("java.util.regex.PatternSyntaxException");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.ecore.EClassifier");
importManager.addImport("org.eclipse.emf.ecore.EDataType");
importManager.addImport("org.eclipse.emf.ecore.util.EcoreUtil");
%>

/**
 * @@generated 
 */
public class <%=factoryClassName%> {
	/**
	 * @@generated 
	 */
	private <%=factoryClassName%>() {
	}

	/**
	 * @@generated 
	 */
	public static <%=importManager.getImportedName(abstractExpressionClass)%> getExpression(String body,
			EClassifier context, Map environment) {
		return new Expression(body, context, environment);
	}

	/**
	 * @@generated 
	 */
	public static <%=importManager.getImportedName(abstractExpressionClass)%> getExpression(String body,
			EClassifier context) {
		return getExpression(body, context, Collections.EMPTY_MAP);
	}

	/**
	 * @@generated 
	 */
	private static class Expression extends <%=importManager.getImportedName(abstractExpressionClass)%> {
		/**
		 * @@generated 
		 */
		private final Pattern pattern;

		/**
		 * @@generated 
		 */
		public Expression(String body, EClassifier context, Map environment) {
			super(body, context);
			Pattern p;
			try {
				p = Pattern.compile(body);
			} catch (PatternSyntaxException e) {
				setStatus(IStatus.ERROR, e.getMessage(), e);
				p = null;
			}
			this.pattern = p;
		}

		/**
		 * @@generated 
		 */
		protected Object doEvaluate(Object contextInstance, Map env) {
			if (pattern == null) {
				return null;
			}
			
			if(context() instanceof EDataType) {
				contextInstance = EcoreUtil.convertToString((EDataType)context(), contextInstance);
			}
			
			Matcher matcher = this.pattern.matcher(String.valueOf(contextInstance));
			return Boolean.valueOf(<%=isNegationRegexp ? "!" : ""%>matcher.matches());
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.4
log
@update not to use deprecated ocl code
@
text
@@


1.4.2.1
log
@get rid of jet
@
text
@@


1.3
log
@#145042 Introduce expression Language enumeration into gmfmap, gfmgen models  instead of plain text attribute
@
text
@d61 1
a61 1
		private Pattern pattern;
d67 2
a68 1
			super(body, context, environment);
d70 1
a70 1
				this.pattern = Pattern.compile(body);
d73 1
d75 1
@


1.2
log
@#144518 Support negation of 'regexp' in gmf models expressions
@
text
@d9 1
a9 1
final boolean isNegationRegexp = !"regexp".equals(genInterpreter.getLanguage());
@


1.1
log
@#138687 Add RegExpExpressionFactory JET template to the editor generation step
@
text
@d9 1
d88 1
a88 1
			return Boolean.valueOf(matcher.matches());
@

