head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070405-1100:1.4
	v20070403-1500:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070307-0700:1.4
	v20070301-1200:1.4
	v20070228-2000:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.4
	v20070103-0300:1.4
	M4_20:1.4
	v20061222-1800:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.4
	v20061020-1000:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060728-0500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.1;
locks; strict;
comment	@# @;


1.5
date	2007.09.14.18.23.24;	author dstadnik;	state dead;
branches;
next	1.4;
commitid	153b46ead19a4567;

1.4
date	2006.06.13.12.53.34;	author radvorak;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2006.04.27.12.04.52;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.10.37.28;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.15.41.17;	author radvorak;	state Exp;
branches;
next	;

1.4.4.1
date	2007.09.14.18.46.29;	author dstadnik;	state dead;
branches;
next	;
commitid	622c46ead7044567;


desc
@@


1.5
log
@get rid of jet
@
text
@<%
/* 
ValueExpression __genValueExpression
java.util.Map __exprEnvVariables
GenClassifier __genExprContext
GenClassifier || String/qualifiedClassName/__genExprResultType
*/
org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) {
	String __importedAbstractExpr = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());
	String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
	// support GenClassifier and also String based qualified java class name
	Object __genExprResultTypeObj = __genExprResultType;
	String __exprResultTypeQualifiedName = null;
	if(__genExprResultTypeObj instanceof String) 
		__exprResultTypeQualifiedName = (String)__genExprResultTypeObj;
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)
		__exprResultTypeQualifiedName = __genExprProvider.getQualifiedInstanceClassName((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj);
	String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);
%>
/**
 * @@generated
 */
private static <%=importManager.getImportedName(__exprResultTypeQualifiedName)%> <%=__exprJavaOperName%>(<%=importManager.getImportedName(evalCtxQualifiedName)%> self<%
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String __nextVarName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(__nextVarName);
		String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

	%>, <%=importManager.getImportedName(qualifiedTypeName)%> <%=__nextVarName%>
<%	} 
%>) {
	// TODO: implement this method
	// Ensure that you remove @@generated or mark it @@generated NOT
	
	throw new <%=__importedAbstractExpr%>.NoImplException("No user java implementation provided in '<%=__exprJavaOperName%>' operation"); //$NON-NLS-1$
}
<%
} /* end of GenJavaExpressionProvider */
%>
@


1.4
log
@#145753 Suppress exceptions logged from unimplemented methods of JavaAudits during tests execution
@
text
@@


1.4.4.1
log
@get rid of jet
@
text
@@


1.3
log
@#138884  Expression accessors templates handle GenEnum classifier incorretly
@
text
@d10 1
d36 1
a36 1
	throw new UnsupportedOperationException("No user implementation provided in '<%=__exprJavaOperName%>' operation"); //$NON-NLS-1$
d39 1
a39 1
}
@


1.2
log
@#136672 Adapt Element Initializers, Link Constraints templates
@
text
@d10 1
a10 1
	String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
a15 2
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) 
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getQualifiedInterfaceName();
d17 1
a17 1
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj).getEcoreClassifier().getInstanceClassName();
d27 1
a27 1
		String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
@


1.1
log
@[#134511] common access to expressions of different languages
@
text
@d13 7
a19 2
	if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) __genExprResultTypeObj = ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getQualifiedInterfaceName();
	else if(!(__genExprResultTypeObj instanceof String)) ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getEcoreClassifier().getInstanceClassName();
d25 1
a25 1
private static <%=__genExprResultType%> <%=__exprJavaOperName%>(<%=evalCtxQualifiedName%> self<%
d31 1
a31 1
	%>, <%=qualifiedTypeName%> <%=__nextVarName%>
@

