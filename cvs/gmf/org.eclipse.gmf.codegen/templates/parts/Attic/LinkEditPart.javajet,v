head	1.27;
access;
symbols
	v20081022-1925:1.27
	v20081015-1925:1.27
	v20081008-1925:1.27
	v20081001-1925:1.27
	v20080924-1925:1.27
	v20080917-1925:1.27
	v20080911-1728:1.27
	v20080910-1520:1.27
	v20080903-1520:1.27
	v20080827-1520:1.27
	v20080813-1520:1.27
	v20080806-1520:1.27
	v20070202-0200:1.23
	v20061120-1300:1.25
	M3_20:1.25
	v20061117-0800:1.25
	v20061027-1200:1.23
	v20061020-1000:1.23
	v20061013-1330:1.24
	v20060919-0800:1.23
	v20060907-1100:1.23
	M1_20:1.24
	v20060904-1500:1.24
	v20060824-1600:1.23
	v20060817-1500:1.23
	v20060728-0500:1.23
	v20060713-1700:1.23
	R1_0_maintenance:1.23.0.2
	R1_0:1.23
	v20060627-1200:1.23
	v20060626-1420:1.23
	v20060620-0400:1.23
	v20060616-1400:1.23
	v20060616-1200:1.23
	v20060609-1400:1.22
	v20060531-1730:1.22
	v20060530-1930:1.21
	v20060526-1200:1.21
	v20060519-1300:1.19
	v20060519-0800:1.19
	v20060512-1000:1.18
	I20060512-1000:1.18
	I20060505-1400:1.18
	I20060428-1300:1.18
	I20060424-0500:1.17
	I20060424-0300:1.17
	M6_10:1.16
	I20060407-1200:1.15
	I20060331-1000:1.15
	I20060324-0300:1.15
	I20060317-1300:1.15
	I20060317-1200:1.15
	I20060316-1300:1.14
	I20060309-1300:1.14
	M5_10:1.13
	S20060303-1600:1.13
	I20060227-1730:1.12
	I20060216-1945:1.12
	I20060210-1715:1.12
	I20060209-1815:1.12
	I20060203-0830:1.10
	I20060202-1415:1.10
	I20060129-1145:1.10
	I20060127-0900:1.10
	I20060120-1530:1.10
	I20060113-1700:1.10
	M4_10:1.10
	I20060107-1100:1.10
	I20060105-1630:1.8
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.7
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.3
	v20051030:1.3
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.27
date	2006.12.13.19.37.23;	author dstadnik;	state dead;
branches;
next	1.26;
commitid	753f458056514567;

1.26
date	2006.11.22.10.21.45;	author ashatalin;	state Exp;
branches;
next	1.25;
commitid	7860456424b04567;

1.25
date	2006.10.18.14.21.46;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.06.14.18.40.16;	author ahunter;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.31.19.53.02;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.24.11.47.59;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.23.14.55.52;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.25.11.46.05;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.18.12.08.43;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.17.16.52.37;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.06.19.22.30;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.06.17.03.34;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.24.13.58.48;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.24.08.51.26;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.09.13.20.23;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.03.19.09.15;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.30.19.16.05;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.29;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.27
log
@use xpand template to generate link edit part
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.parts" class="LinkEditPartGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenLink genLink = (GenLink) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genLink.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
if (genLink.getViewmap() instanceof InnerClassViewmap) {
importManager.registerInnerClass(((InnerClassViewmap) genLink.getViewmap()).getClassName());
}
%>
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genLink.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart")%> {
<%{	GenCommonBase genCommonBase = genLink;%>
<%@@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @@generated
	 */
	public <%=genLink.getEditPartClassName()%>(View view) {
		super(view);
	}

	/**
	 * @@generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
<%if (genLink.getModelFacet() == null) {%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.COMPONENT_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ViewComponentEditPolicy")%>());
<%}%>
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new <%=importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName())%>()
<%if (genLink.getModelFacet() == null) {%>
		{
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getSemanticCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest")%> editRequest) {
				if (editRequest instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest")%> &&
						getHost() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart")%>) {
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy")%>(
						new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand")%>(
							editRequest.getEditingDomain(), ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart")%>) getHost()).getPrimaryView()));
				}
				return super.getSemanticCommand(editRequest);
			}

			public <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getCommand(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
				if (REQ_RECONNECT_SOURCE.equals(request.getType()) || REQ_RECONNECT_TARGET.equals(request.getType())) {
					return null;
				}
				return super.getCommand(request);
			}
		}
<%}%>
		);
<%{	GenCommonBase genCommonBase = genLink;%>
<%@@ include file="customBehaviour.jetinc"%>
<%}%>
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.Connection")%> createConnectionFigure() {<%
Viewmap viewmap = genLink.getViewmap();
if (viewmap instanceof FigureViewmap) {
	String figureQualifiedClassName = null;
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx";
	}
%>
		return new <%=importManager.getImportedName(figureQualifiedClassName)%>();
<%} // instanceof FigureViewmap
	else if (viewmap instanceof SnippetViewmap) {%>
		return <%=((SnippetViewmap) viewmap).getBody()%>;
<%} // instanceof SnippetViewmap 
	else if (viewmap instanceof InnerClassViewmap) {%>
 		return new <%=((InnerClassViewmap) viewmap).getClassName()%>();
<%}%>
	}

<%if (genLink.getViewmap() instanceof InnerClassViewmap) {%>
<%=((InnerClassViewmap) genLink.getViewmap()).getClassBody()%>
<%}%>
}
<%importManager.emitSortedImports();%>
@


1.26
log
@[152717] - Do not generate *ReferenceConnectionEditPolicy
@
text
@@


1.25
log
@#161380 simplify feature model facets
@
text
@d40 1
a40 5
<%if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.CONNECTION_ROLE, new <%=importManager.getImportedName(genDiagram.getReferenceConnectionEditPolicyQualifiedClassName())%>());
<%
} 
if (genLink.getModelFacet() == null) {%>
@


1.24
log
@add custom behaviour
@
text
@d40 1
a40 1
<%if (genLink.getModelFacet() instanceof FeatureModelFacet) {%>
@


1.23
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d24 1
a24 2
<%{
GenCommonBase genCommonBase = genLink;%>
d69 3
@


1.22
log
@#144251 Example ecore diagram editor creates invalid ecore file

Should be possible to remove reference-only links.
@
text
@d54 1
a54 1
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand")%>(
@


1.21
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d41 5
a45 1
<%if (genLink.getModelFacet() == null) {%>
@


1.20
log
@do not use NonSemanticEditPolicy
@
text
@a15 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;
d23 1
a23 1
public class <%=genLink.getEditPartClassName()%> extends ConnectionNodeEditPart {
@


1.19
log
@use importAssistant to emit package statement instead of handcoding
@
text
@a43 3
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NonSemanticEditPolicy")%>());
<%} else {%>
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new <%=importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName())%>());
d45 22
@


1.18
log
@support "NodeFigure", "DefaultSizeNodeFigure" and "Connection" as gmfgraph figure names
@
text
@d4 2
a5 1
GenLink genLink = (GenLink) ((Object[]) argument)[0];
d9 1
a9 1
package <%=genDiagram.getEditPartsPackageName()%>;
d11 1
a11 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
@


1.17
log
@provide only 'delete from model' action for the ref-based links
@
text
@d10 5
a14 2
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());%>
import org.eclipse.draw2d.Connection;
d18 1
a18 5
<%
if (genLink.getViewmap() instanceof InnerClassViewmap) {
importManager.registerInnerClass(((InnerClassViewmap) genLink.getViewmap()).getClassName());
}
importManager.markImportLocation(stringBuffer);%>
d57 1
a57 1
	protected Connection createConnectionFigure() {<%
@


1.16
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d42 1
a42 6
<%if (genLink.getModelFacet() instanceof FeatureModelFacet) {%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.CONNECTION_ROLE, new <%=importManager.getImportedName(genDiagram.getReferenceConnectionEditPolicyQualifiedClassName())%>());
<%
}
if (genLink.getModelFacet() == null) {
%>
@


1.15
log
@Class names of Figures generated as inner classes may clash with well-known classes, thus we have to make sure we avoid that
@
text
@d25 4
@


1.14
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d15 5
a19 1
<%importManager.markImportLocation(stringBuffer);%>
@


1.13
log
@#114175 for links
@
text
@d7 1
@


1.12
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d35 8
a43 1
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new <%=importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName())%>());
@


1.11
log
@ImportManager moved to oeg.common
@
text
@d4 1
a4 1
GenLink genLink = (GenLink) argument;
@


1.10
log
@New plugin with IFigure codegeneration to support #114177 (graphical definition model) was added
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.9
log
@one more flavor of snippet viewmap - inner class
@
text
@a10 3
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.PolylineConnection;
import org.eclipse.draw2d.RotatableDecoration;
@


1.8
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d63 3
d68 4
@


1.7
log
@#117881 Connection decorations should have the same line with as the host connection
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
d43 5
d50 1
a50 2
	protected PolylineConnection createConnectionShape() {
<%
a51 1
String figureQualifiedClassName = null;
d53 1
d55 3
a57 4
}
if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
	figureQualifiedClassName = "org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx";
}
d60 3
a62 22
	}

	/**
	 * @@generated
	 */
	protected void decorateConnectionShape(PolylineConnection shape) {
<%@@ include file="shapeattrs.jetinc"%>
<%if (viewmap instanceof DecoratedConnectionViewmap) {%>
		RotatableDecoration sourceDecoration = createSourceDecoration();
		if (sourceDecoration != null) {
			shape.setSourceDecoration(sourceDecoration);
			if (sourceDecoration instanceof <%=importManager.getImportedName("org.eclipse.draw2d.Shape")%>) {
				((<%=importManager.getImportedName("org.eclipse.draw2d.Shape")%>) sourceDecoration).setLineWidth(shape.getLineWidth());
			}
		}
		RotatableDecoration targetDecoration = createTargetDecoration();
		if (targetDecoration != null) {
			shape.setTargetDecoration(targetDecoration);
			if (targetDecoration instanceof <%=importManager.getImportedName("org.eclipse.draw2d.Shape")%>) {
				((<%=importManager.getImportedName("org.eclipse.draw2d.Shape")%>) targetDecoration).setLineWidth(shape.getLineWidth());
			}
		}
a64 33

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
	protected Connection createConnectionFigure() {
		PolylineConnection shape = createConnectionShape();
		decorateConnectionShape(shape);
		return shape;
	}

<%if (viewmap instanceof DecoratedConnectionViewmap) {%>

	/**
	 * @@generated
	 */
	protected RotatableDecoration createSourceDecoration() {
<%	LinkDecoration linkDecoration = ((DecoratedConnectionViewmap) viewmap).getSource();%>
<%@@ include file="linkdecoration.jetinc" %>
	}

	/**
	 * @@generated
	 */
	protected RotatableDecoration createTargetDecoration() {
<%	linkDecoration = ((DecoratedConnectionViewmap) viewmap).getTarget();%>
<%@@ include file="linkdecoration.jetinc" %>
	}
<%}%>
@


1.6
log
@#112318 Do not overwrite paintFigure() method in node edit part when specific figure class is specified
@
text
@d68 3
d75 3
@


1.5
log
@[ashatalin] #115625 fixes compilation problems with initializers
@
text
@d12 1
d45 1
a45 5
	protected Connection createConnectionFigure() {
<%
if (false == genLink.getViewmap() instanceof FigureViewmap) {
%>
		return null;
d47 7
a54 5
String connClassName = importManager.getImportedName(((FigureViewmap) genLink.getViewmap()).getFigureQualifiedClassName());
%>
		<%=connClassName%> connection = new <%=connClassName%>();
<%
if (genLink.getViewmap() instanceof DecoratedConnectionViewmap) {
d56 9
d67 1
a67 1
			connection.setSourceDecoration(sourceDecoration);
d71 1
a71 1
			connection.setTargetDecoration(targetDecoration);
d73 15
a87 10
<%
}
for (Iterator it = genLink.getViewmap().getAttributes().iterator(); it.hasNext(); ) {
	Attributes next = (Attributes) it.next();
	if (next instanceof ShapeAttributes) {
		String figureVarName = "connection";
		ShapeAttributes attrs = (ShapeAttributes) next;
%>
<%@@ include file="shapeattrs.jetinc" %>
<%
d89 9
a97 4
	// put additional Attributes support here 
} // for
%>
		return connection;
d100 7
a106 2
<%if (genLink.getViewmap() instanceof DecoratedConnectionViewmap) {%>
<%@@include file="decoratedconn.jetinc"%>
@


1.4
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@a12 1
import org.eclipse.gef.EditPolicy;
d36 1
a36 1
		installEditPolicy(EditPolicy.CONNECTION_ROLE, new <%=importManager.getImportedName(genDiagram.getReferenceConnectionEditPolicyQualifiedClassName())%>());
@


1.3
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@d13 1
d15 1
d34 11
d86 2
a87 1
}<%importManager.emitSortedImports();%>@


1.2
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@a13 2
import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d33 12
a44 1
		PolylineConnectionEx connection = new PolylineConnectionEx();
a53 14
String lineStyle = genLink.getLineStyle();
if (lineStyle != null && lineStyle.trim().length() > 0) {
%>
		connection.setLineStyle(Graphics.<%=lineStyle%>);
<%}%>
		return connection;
	}
<%
Set SCALABLE_DECORATIONS = new HashSet();
{
	SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolylineDecoration");
	SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolygonDecoration");
	SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.RhombDecoration");
	SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.FilledRhombDecoration");
d55 5
d61 1
a61 5

	/**
	 * @@generated
	 */
	protected RotatableDecoration createSourceDecoration() {
d63 3
a65 4
String sourceDecorationClassQualifiedName = genLink.getSourceDecorationFigureQualifiedClassName();
if (sourceDecorationClassQualifiedName != null && sourceDecorationClassQualifiedName.trim().length() > 0) {
	String sourceDecorationClassName = importManager.getImportedName(sourceDecorationClassQualifiedName);
	if (SCALABLE_DECORATIONS.contains(sourceDecorationClassQualifiedName)) {
d67 1
a67 9
		<%=sourceDecorationClassName%> decoration = new <%=sourceDecorationClassName%>();
		decoration.setScale(MapMode.DPtoLP(7), MapMode.DPtoLP(3));
		return decoration;
<%	} else {%>
		return new <%=sourceDecorationClassName%>();
<%	}
} else {%>
		return null;
<%}%>
d70 2
a71 18
	/**
	 * @@generated
	 */
	protected RotatableDecoration createTargetDecoration() {
<%
String targetDecorationClassQualifiedName = genLink.getTargetDecorationFigureQualifiedClassName();
if (targetDecorationClassQualifiedName != null && targetDecorationClassQualifiedName.trim().length() > 0) {
	String targetDecorationClassName = importManager.getImportedName(targetDecorationClassQualifiedName);
	if (SCALABLE_DECORATIONS.contains(targetDecorationClassQualifiedName)) {
%>
		<%=targetDecorationClassName%> decoration = new <%=targetDecorationClassName%>();
		decoration.setScale(MapMode.DPtoLP(7), MapMode.DPtoLP(3));
		return decoration;
<%	} else {%>
		return new <%=targetDecorationClassName%>();
<%	}
} else {%>
		return null;
d73 1
a73 3
	}
}
<%importManager.emitSortedImports();%>
@


1.1
log
@*** empty log message ***
@
text
@d1 6
a6 3
<%@@ jet package="org.eclipse.gmf.codegen.templates.diacanvas" class="LinkEditPartGen" imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.util.ImportUtil"%>
<%GenLink genLink = (GenLink) argument;%>
<%GenDiagram genDiagram = genLink.getDiagram();%>
d8 1
d10 7
a16 16

import org.eclipse.draw2d.*;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.*;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.editparts.*;
import org.eclipse.gef.editpolicies.*;
import org.eclipse.gef.requests.DirectEditRequest;
import org.eclipse.gef.requests.GroupRequest;
import org.eclipse.gef.tools.DirectEditManager;
import org.eclipse.gmf.diagramrt.DiagramLink;
import org.eclipse.gmf.runtime.gef.DefaultDirectEditManager;
import org.eclipse.gmf.runtime.gef.commands.ChangeDiagramElementNameCommand;
import org.eclipse.gmf.runtime.gef.commands.DeleteDiagramLinkCommand;
import org.eclipse.swt.graphics.Font;
d22 1
a22 5
public class <%=genLink.getEditPartClassName()%> extends AbstractConnectionEditPart {
	/**
	 * @@generated
	 */
	public static final int VISUAL_ID = <%=genLink.getVisualID()%>;
a23 1
<%if (genLink.hasNameToEdit()) {%>
d27 2
a28 13
	protected DirectEditManager myManager;

	/**
	 * @@generated
	 */
	private IFigure myLabelFigure;

<%}%>
	/**
	 * @@generated
	 */
	public <%=genLink.getEditPartClassName()%>(DiagramLink model) {
		setModel(model);
d34 15
a48 10
	protected void createEditPolicies() {
		installEditPolicy(EditPolicy.CONNECTION_ENDPOINTS_ROLE, new ConnectionEndpointEditPolicy());
		installEditPolicy(EditPolicy.CONNECTION_ROLE, new ConnectionEditPolicy() {
			protected Command getDeleteCommand(GroupRequest request) {
				// TODO perhaps, request.getEditParts().getModel()?
				return new DeleteDiagramLinkCommand(getDiagramLink());
			}
		});
<%if (genLink.hasNameToEdit()) {%>
		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, createDirectEditPolicy());
d50 1
a50 1
		// installEditPolicy(EditPolicy.CONNECTION_BENDPOINTS_ROLE, new BendpointEditPolicy() {});
d52 9
d65 1
a65 4
	protected IFigure createFigure() {
		PolylineConnection conn = createConnectionFigure();
<%if (genLink.getLineStyle() != null) {%>
		conn.setLineStyle(Graphics.<%=genLink.getLineStyle()%>);
d67 13
a79 14
}
if (genLink.getSourceDecorationFigureQualifiedClassName() != null && genLink.getSourceDecorationFigureQualifiedClassName().trim().length() != 0) {%>
		conn.setSourceDecoration(new <%=importManager.getImportedName(genLink.getSourceDecorationFigureQualifiedClassName())%>()); 
<%
}
if (genLink.getTargetDecorationFigureQualifiedClassName() != null && genLink.getTargetDecorationFigureQualifiedClassName().trim().length() != 0) {%>
		conn.setTargetDecoration(new <%=importManager.getImportedName(genLink.getTargetDecorationFigureQualifiedClassName())%>()); 
<%}%>
<%if (genLink.getForegroundColor() != null) {%>
		if (getDiagramLink().getForegroundColor() == null) {
			// set default color from genmodel
			// XXX no 'if' check? set color from genModel if any, and allow refreshColors to override later?
			conn.setForegroundColor(getColorSupport().get("<%=genLink.getForegroundColor()%>"));
		}
a80 5
<%if (genLink.hasNameToEdit()) {%>
		conn.add(getLabelFigure(), createLabelConstraint(conn));
<%}%>
		refreshColors(conn);
		return conn;
d86 1
a86 47
	protected PolylineConnection createConnectionFigure() {
		return new <%=importManager.getImportedName(genLink.getFigureQualifiedClassName())%>();
	}

<%if (genLink.hasNameToEdit()) {%>
	/**
	 * @@generated
	 */
	protected Object createLabelConstraint(Connection conn) {
		ConnectionLocator cl = new ConnectionLocator(conn, ConnectionLocator.MIDDLE);
		cl.setRelativePosition(PositionConstants.NORTH_EAST);
		cl.setGap(2);
		return cl;
	}

	/**
	 * @@generated
	 */
	protected final IFigure getLabelFigure() {
		if (myLabelFigure == null) {
			myLabelFigure = createLabelFigure();
		}
		return myLabelFigure;
	}

	/**
	 * @@generated
	 */
	protected IFigure createLabelFigure() {
		return new Label(getLabelText());
	}

	/**
	 * @@generated
	 */
	protected String getLabelText() {
		EObject owner = getDiagramLink().getDomainModelElement();
		if (owner == null) {
			return null;
		}
		return String.valueOf(owner.eGet(getLabelFeature()));
	}

	/**
	 * @@generated
	 */
	protected EAttribute getLabelFeature() {
d88 4
a91 2
final GenFeature genFeature = genDiagram.findGenFeature(genLink.getDomainNameFeature());
final String metaPackageInterfaceName = importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName());
d93 8
a100 59
		return <%=metaPackageInterfaceName%>.eINSTANCE.get<%=genFeature.getFeatureAccessorName()%>();
	}

	/**
	 * @@generated
	 */
	protected EditPolicy createDirectEditPolicy() {
		return new DirectEditPolicy() {
			protected Command getDirectEditCommand(DirectEditRequest request) {
				EAttribute domainNameFeature = (EAttribute) request.getDirectEditFeature();
				if (domainNameFeature == null) {
					System.err.println("Someone passes DirectEditRequest without directEditFeature set");
					domainNameFeature = getLabelFeature();
				}
				return new ChangeDiagramElementNameCommand(getDiagramLink(), domainNameFeature,(String) request.getCellEditor().getValue());
			}
			protected void showCurrentEditValue(DirectEditRequest request) {
				IFigure fig = getLabelFigure();
				if (fig instanceof Label) {
					((Label)fig).setText((String)request.getCellEditor().getValue());
					fig.getUpdateManager().performUpdate();
				}
			}
		};
	}

	/**
	 * @@generated
	 */
	protected void performDirectEdit() {
		if(myManager == null) {
			myManager = new DefaultDirectEditManager(this, new DefaultDirectEditManager.DirectEditInfoProvider() {
				public Object getDirectEditFeature() {
					return <%=metaPackageInterfaceName%>.eINSTANCE.get<%=genFeature.getFeatureAccessorName()%>();
				}
				public String getInitialText() {
					return String.valueOf(getDiagramLink().getDomainModelElement().eGet(getLabelFeature()));
				}
				public IFigure getDirectEditFigure() {
					return <%=genLink.getEditPartClassName()%>.this.getLabelFigure();
				}
				public Font getTextFont() {
					return getLabelFigure().getFont();
				}
			});
		}
		myManager.show();
	}

	/**
	 * @@generated
	 */
	public void performRequest(Request request) {
		if (request.getType() == RequestConstants.REQ_DIRECT_EDIT) {
			performDirectEdit();
		} else {
			super.performRequest(request);
		}
	}
a101 41
	/**
	 * @@generated
	 */
	public void activate() {
		super.activate();
		// FIXME placeholder for attaching listener to model object, e.g.:
		// ((Notifier) getModel()).eAdapters().add(myListener)
		// perhaps, for perfomance reasons it's better to have single listener
		// (e.g. diagram attaches one to domain model) and then request updates
		// of editParts (as maping of model element to edit part is known to diagram)
	}

	/**
	 * @@generated
	 */
	public DiagramLink getDiagramLink() {
		return (DiagramLink) getModel();
	}

	/**
	 * @@generated
	 */
	protected void refreshVisuals() {
		refreshColors(getFigure());
		super.refreshVisuals();
	}

	/**
	 * @@generated
	 */
	protected void refreshColors(IFigure fig) {
		if (getDiagramLink().getForegroundColor() != null) {
			fig.setForegroundColor(getColorSupport().get(getDiagramLink().getForegroundColor()));
		}
	}

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.gef.ColorSupport")%> getColorSupport() {
		return ((<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>) getRoot().getContents()).getColorSupport();
d104 1
a104 1
<%importManager.emitSortedImports();%>@

