head	1.19;
access;
symbols
	v20081022-1925:1.19
	v20081015-1925:1.19
	v20081008-1925:1.19
	v20081001-1925:1.19
	v20080924-1925:1.19
	v20080917-1925:1.19
	v20080911-1728:1.19
	v20080910-1520:1.19
	v20080903-1520:1.19
	v20080827-1520:1.19
	v20080813-1520:1.19
	v20080806-1520:1.19
	v20070202-0200:1.16
	v20061120-1300:1.17
	M3_20:1.17
	v20061117-0800:1.17
	v20061027-1200:1.16
	v20061020-1000:1.16
	v20061013-1330:1.16
	v20060919-0800:1.16
	v20060907-1100:1.16
	M1_20:1.16
	v20060904-1500:1.16
	v20060824-1600:1.16
	v20060817-1500:1.16
	v20060728-0500:1.16
	v20060713-1700:1.16
	R1_0_maintenance:1.16.0.2
	R1_0:1.16
	v20060627-1200:1.16
	v20060626-1420:1.16
	v20060620-0400:1.15
	v20060616-1400:1.15
	v20060616-1200:1.15
	v20060609-1400:1.15
	v20060531-1730:1.13
	v20060530-1930:1.13
	v20060526-1200:1.13
	v20060519-1300:1.12
	v20060519-0800:1.12
	v20060512-1000:1.11
	I20060512-1000:1.11
	I20060505-1400:1.10
	I20060428-1300:1.10
	I20060424-0500:1.10
	I20060424-0300:1.10
	M6_10:1.10
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5;
locks; strict;
comment	@# @;
expand	@k@;


1.19
date	2006.12.11.17.01.34;	author dstadnik;	state dead;
branches;
next	1.18;
commitid	30fa457d8eeb4567;

1.18
date	2006.12.06.17.49.51;	author dstadnik;	state Exp;
branches;
next	1.17;
commitid	5413457702be4567;

1.17
date	2006.10.24.11.50.11;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.21.15.22.41;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.06.09.12.31.18;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.24.18.05.30;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.17.14.22.47;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.14.15.19.57;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.14.14.47.54;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.14.05.32;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.12.16.28.45;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.14.13.14.55;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.14.10.27.02;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.13.22.31.59;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.13.18.39.47;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.19
log
@rewrite child node label edit part template in xpand
@
text
@
	/**
	 * @@generated
	 */
	protected String getLabelTextHelper(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure) {
		if (figure instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			return ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) figure).getText();
		} else {
			return ((<%=importManager.getImportedName("org.eclipse.draw2d.Label")%>) figure).getText();
		}
	}

	/**
	 * @@generated
	 */
	protected void setLabelTextHelper(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure, String text) {
		if (figure instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) figure).setText(text);
		} else {
			((<%=importManager.getImportedName("org.eclipse.draw2d.Label")%>) figure).setText(text);
		}
	}

	/**
	 * @@generated
	 */
	protected Image getLabelIconHelper(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure) {
		if (figure instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			return ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) figure).getIcon();
		} else {
			return ((<%=importManager.getImportedName("org.eclipse.draw2d.Label")%>) figure).getIcon();
		}
	}

	/**
	 * @@generated
	 */
	protected void setLabelIconHelper(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure, Image icon) {
		if (figure instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) figure).setIcon(icon);
		} else {
			((<%=importManager.getImportedName("org.eclipse.draw2d.Label")%>) figure).setIcon(icon);
		}
	}

<%
String labelSetterName = "setLabel"; // same assumption in NodeEditPart
String labelFigureClassName = "org.eclipse.draw2d.IFigure";
if (genLabel.getViewmap() instanceof ParentAssignedViewmap) {
	ParentAssignedViewmap viewmap = (ParentAssignedViewmap) genLabel.getViewmap();
	if (viewmap.getSetterName() != null) {
		labelSetterName = viewmap.getSetterName();
	}
	if (viewmap.getFigureQualifiedClassName() != null) {
		labelFigureClassName = viewmap.getFigureQualifiedClassName();
	}
} // FIXME perhaps, there's no sense to have setLabel for any other viewmap than ParentAssigned?
%>
	/**
	 * @@generated
	 */
	public void <%=labelSetterName%>(<%=importManager.getImportedName(labelFigureClassName)%> figure) {
		unregisterVisuals();
		setFigure(figure);
		defaultText = getLabelTextHelper(figure);
		registerVisuals();
		refreshVisuals();
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
		return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart")%> getChildBySemanticHint(String semanticHint) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected EObject getParserElement() {
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
		return element != null ? element : (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) getModel();
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getLabelIcon() {
<%if (useElementIcon) {%>
		EObject parserElement = getParserElement();
		if (parserElement == null) {
			return null;
		}
		return <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.getImage(parserElement.eClass());
<%} else {%>
		return null;
<%}%>
	}

	/**
	 * @@generated
	 */
	protected String getLabelText() {
		String text = null;
		if (getParser() != null) {
			text = getParser().getPrintString(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(getParserElement()),
				getParserOptions().intValue());
		}
		if (text == null || text.length() == 0) {
			text = defaultText;
		}
		return text;
	}

	/**
	 * @@generated
	 */
	public void setLabelText(String text) {
		setLabelTextHelper(getFigure(), text);
		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
		if (pdEditPolicy instanceof <%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) {
			((<%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) pdEditPolicy).refreshFeedback();
		}
	}

	/**
	 * @@generated
	 */
	public String getEditText() {
		if (getParser() == null) {
			return ""; //$NON-NLS-1$
		}
		return getParser().getEditString(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(getParserElement()),
			getParserOptions().intValue());
	}

	/**
	 * @@generated
	 */
	protected boolean isEditable() {
<%if (!readOnly) {%>
		return getParser() != null;
<%} else {%>
		return false;
<%}%>
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator")%> getEditTextValidator() {
		return new <%=importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator")%>() {

			public String isValid(final Object value) {
				if (value instanceof String) {
					final <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = getParserElement();
					final <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser")%> parser = getParser();
					try {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus")%> valid =
							(<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus")%>) getEditingDomain().runExclusive(
								new <%=importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult")%>.Impl() {

							public void run() {
								setResult(parser.isValidEditString(
									new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(element), (String) value));
							}
						});
						return valid.getCode() == <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus")%>.EDITABLE ?
							null : valid.getMessage();
					} catch (InterruptedException ie) {
						ie.printStackTrace();
					}
				}

				// shouldn't get here
				return null;
			}
		};
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor")%> getCompletionProcessor() {
		if (getParser() == null) {
			return null;
		}
		return getParser().getCompletionProcessor(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(getParserElement()));
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions")%> getParserOptions() {
		return <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions")%>.NONE;
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser")%> getParser() {
		if (parser == null) {
			String parserHint =
<%if (designLabel) {%>
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint")%>.DESCRIPTION;
<%} else {%>
				((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) getModel()).getType();
<%}%>
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter")%> hintAdapter =
				new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter")%>(getParserElement(), parserHint) {

				public Object getAdapter(Class adapter) {
					if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%>.class.equals(adapter)) {
						return <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genHost.getUniqueIdentifier()%>;
					}
					return super.getAdapter(adapter);
				}
			};
			parser = <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService")%>.getInstance().getParser(hintAdapter);
		}
		return parser;
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager")%> getManager() {
		if (manager == null) {
			setManager(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>(this,
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>.getTextCellEditorClass(this),
				<%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.getTextCellEditorLocator(this)));
		}
		return manager;
	}

	/**
	 * @@generated
	 */
	protected void setManager(<%=importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager")%> manager) {
		this.manager = manager;
	}

	/**
	 * @@generated
	 */
	protected void performDirectEdit() {
		getManager().show();
	}

	/**
	 * @@generated
	 */
	protected void performDirectEdit(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> eventLocation) {
		if (getManager().getClass() == <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>.class) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>) getManager()).show(eventLocation.getSWTPoint());
		}
	}

	/**
	 * @@generated
	 */
	private void performDirectEdit(char initialCharacter) {
		if (getManager() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>) getManager()).show(initialCharacter);
		} else {
			performDirectEdit();
		}
	}

	/**
	 * @@generated
	 */
	protected void performDirectEditRequest(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
		final <%=importManager.getImportedName("org.eclipse.gef.Request")%> theRequest = request;
		try {
			getEditingDomain().runExclusive(new Runnable() {

				public void run() {
					if (isActive() && isEditable()) {
						if (theRequest.getExtendedData().get(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants")%>.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
							Character initialChar = (Character) theRequest.getExtendedData().get(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants")%>.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
							performDirectEdit(initialChar.charValue());
						} else if ((theRequest instanceof <%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>) && (getEditText().equals(getLabelText()))) {
							<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> editRequest =
								(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>) theRequest;
							performDirectEdit(editRequest.getLocation());
						} else {
							performDirectEdit();
						}
					}
				}
			});
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshLabel();
		refreshFont();
		refreshFontColor();
		refreshUnderline();
		refreshStrikeThrough();
<%if (needsRefreshBounds) {%>
		refreshBounds();
<%}%>
	}

	/**
	 * @@generated
	 */
	protected void refreshLabel() {
		setLabelTextHelper(getFigure(), getLabelText());
		setLabelIconHelper(getFigure(), getLabelIcon());
		Object pdEditPolicy = getEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.PRIMARY_DRAG_ROLE);
		if (pdEditPolicy instanceof <%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) {
			((<%=importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName())%>) pdEditPolicy).refreshFeedback();
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshUnderline() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%> style =
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) getFontStyleOwnerView().getStyle(
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle());
		if (style != null && getFigure() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) getFigure()).setTextUnderline(style.isUnderline());
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshStrikeThrough() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%> style =
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) getFontStyleOwnerView().getStyle(
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle());
		if (style != null && getFigure() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel")%>) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshFont() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%> style =
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) getFontStyleOwnerView().getStyle(
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle());
		if (style != null) {
			<%=importManager.getImportedName("org.eclipse.swt.graphics.FontData")%> fontData = new <%=importManager.getImportedName("org.eclipse.swt.graphics.FontData")%>(
				style.getFontName(), style.getFontHeight(),
				(style.isBold() ? <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.BOLD : <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.NORMAL) |
				(style.isItalic() ? <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.ITALIC : <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.NORMAL));
			setFont(fontData);
		}
	}

	/**
	 * @@generated
	 */
	protected void setFontColor(<%=importManager.getImportedName("org.eclipse.swt.graphics.Color")%> color) {
		getFigure().setForegroundColor(color);
	}

	/**
	 * @@generated
	 */
	protected void addSemanticListeners() {
		if (getParser() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser")%>) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
			parserElements = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser")%>) getParser()).getSemanticElementsBeingParsed(element);
			for (int i = 0; i < parserElements.size(); i++) {
				addListenerFilter("SemanticModel" + i, this, (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) parserElements.get(i)); //$NON-NLS-1$
			}
		} else {
			super.addSemanticListeners();
		}
	}

	/**
	 * @@generated
	 */
	protected void removeSemanticListeners() {
		if (parserElements != null) {
			for (int i = 0; i < parserElements.size(); i++) {
				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
			}
		} else {
			super.removeSemanticListeners();
		}
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.AccessibleEditPart")%> getAccessibleEditPart() {
		if (accessibleEP == null) {
			accessibleEP = new AccessibleGraphicalEditPart() {

				public void getName(<%=importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent")%> e) {
					e.result = getLabelTextHelper(getFigure());
				}
			};
		}
		return accessibleEP;
	}
	
	/**
	 * @@generated
	 */
	 private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> getFontStyleOwnerView() {
<%
boolean fixedFont;
{ //namespace
Viewmap viewmap = genLabel.getViewmap();
StyleAttributes styleAttributes = (viewmap == null) ? null : (StyleAttributes)viewmap.find(StyleAttributes.class);
fixedFont = styleAttributes != null && styleAttributes.isFixedFont();
}
if (fixedFont) {
%>
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)getModel();
<%
} else {
%>
		return getPrimaryView();
<%
}
%>
	 }
	
@


1.18
log
@[166780] NPE while editing design label
@
text
@@


1.17
log
@[156362] Dispose images created in generated edit parts
@
text
@d149 1
a149 1
		return getEditText() != null;
@


1.16
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d97 3
a99 4
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> descriptor =
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemImageDescriptor(getParserElement());
		if (descriptor == null) {
			descriptor = <%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%>.getMissingImageDescriptor();
d101 1
a101 1
		return descriptor.createImage();
@


1.15
log
@#144683 It should be possible to modify label value on pure design diagram
@
text
@d338 1
a338 1
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) getPrimaryView().getStyle(
d350 1
a350 1
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) getPrimaryView().getStyle(
d362 1
a362 1
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) getPrimaryView().getStyle(
a363 1
		<%=importManager.getImportedName("org.eclipse.swt.graphics.FontData")%> fontData;
d365 1
a365 1
			fontData = new <%=importManager.getImportedName("org.eclipse.swt.graphics.FontData")%>(
d369 1
a369 5
		} else {
			// initialize font to defaults
			fontData = <%=importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter")%>.getFontData(
				(<%=importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore")%>) getDiagramPreferencesHint().getPreferenceStore(),
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants")%>.PREF_DEFAULT_FONT);
a370 1
		setFont(fontData);
d422 24
@


1.14
log
@fix some nls markers
@
text
@d87 8
a96 1
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
d98 1
a98 1
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemImageDescriptor(element);
a111 1
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
d113 2
a114 2
		if (element != null && getParser() != null) {
			text = getParser().getPrintString(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(element),
d138 1
a138 2
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
		if (element == null || getParser() == null) {
d141 1
a141 1
		return getParser().getEditString(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(element),
d150 3
a152 4
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
		if (element != null && getEditText() != null) {
			return true;
		}
a153 1
		return false;
d164 1
a164 1
					final <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
d193 1
a193 2
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
		if (element == null || getParser() == null) {
d196 1
a196 1
		return getParser().getCompletionProcessor(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(element));
d211 12
a222 11
			String parserHint = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) getModel()).getType();
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = resolveSemanticElement();
			if (element != null) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter")%> hintAdapter =
					new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter")%>(element, parserHint) {

					public Object getAdapter(Class adapter) {
						if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%>.class.equals(adapter)) {
							return <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genHost.getUniqueIdentifier()%>;
						}
						return super.getAdapter(adapter);
d224 4
a227 3
				};
				parser = <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService")%>.getInstance().getParser(hintAdapter);
			}
@


1.13
log
@Do not generate unnecessary code, e.g. label figure, when parent gonna assign one.
Explicitly handle (and distinguish) figures assigned by parent (thus placed in predefined location inside parent) and those added as ordinary child figures
InnerClassViewmapProducer updated to guess uses of parent's sub-figure inside children. It's not really a InnerClassViewmapProducer and should be renamed to smth like GeneratingViewmapProducer
Tests updated to cover logic added to the producer
@
text
@d134 1
a134 1
			return "";
@


1.12
log
@#139127 Provide an option for labels to display node icon
@
text
@d46 13
d62 1
a62 1
	public void setLabel(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure) {
@


1.11
log
@#133836 Creating a child node without a label causes error
@
text
@d74 17
@


1.10
log
@use correct cell editor locator for WrapLabels
@
text
@d114 1
a114 1
<%if (!genLabel.isReadOnly()) {%>
@


1.9
log
@handle both Label and WrapLabel : continued further
@
text
@d203 3
a205 1
			setManager(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>(this));
@


1.8
log
@handle both Label and WrapLabel : continued
@
text
@d5 55
d91 1
a91 1
		getLabel().setText(text);
d289 2
a290 2
		getLabel().setText(getLabelText());
		getLabel().setIcon(getLabelIcon());
d347 1
a347 1
		getLabel().setForegroundColor(color);
d386 1
a386 1
					e.result = getLabel().getText();
@


1.7
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d35 11
d245 24
@


1.6
log
@#135694 remove temporary code
@
text
@d186 3
a188 3
						if (theRequest instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper")%>) {
							char c = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper")%>) theRequest).getInitialCharacter();
							performDirectEdit(c);
@


1.5
log
@provide custom text selection edit policy
@
text
@a0 1
<%String textDirectEditManagerClassName = importManager.getImportedName(/*org.eclipse.gmf.runtime.diagram.ui.tools*/genDiagram.getEditPartsPackageName()+".TextDirectEditManager");%>
d137 1
a137 1
			setManager(new <%=textDirectEditManagerClassName%>(this));
d160 2
a161 2
		if (getManager().getClass() == <%=textDirectEditManagerClassName%>.class) {
			((<%=textDirectEditManagerClassName%>) getManager()).show(eventLocation.getSWTPoint());
d169 2
a170 2
		if (getManager() instanceof <%=textDirectEditManagerClassName%>) {
			((<%=textDirectEditManagerClassName%>) getManager()).show(initialCharacter);
@


1.4
log
@show selection; update default text
@
text
@d226 4
@


1.3
log
@duplicated refreshVisuals method when label's node has flow layout
@
text
@d1 1
a19 10
	public void setLabel(IFigure figure) {
		unregisterVisuals();
		setFigure(figure);
		registerVisuals();
		refreshVisuals();
	}

	/**
	 * @@generated
	 */
d138 1
a138 1
			setManager(new <%=importManager.getImportedName(/*org.eclipse.gmf.runtime.diagram.ui.tools*/genDiagram.getEditPartsPackageName()+".TextDirectEditManager")%>(this));
d161 2
a162 2
		if (getManager().getClass() == <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>.class) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>) getManager()).show(eventLocation.getSWTPoint());
d170 2
a171 4
		// Run the TextDirectEditManager show with the initial character
		// This will not send an extra mouse click
		if (getManager() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>) {
			((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager")%>) getManager()).show(initialCharacter);
@


1.2
log
@use Labels instead of WrapLabels
@
text
@d226 3
@


1.1
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d19 10
@

