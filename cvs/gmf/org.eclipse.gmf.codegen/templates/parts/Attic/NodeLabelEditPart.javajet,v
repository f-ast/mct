head	1.38;
access;
symbols
	v20081022-1925:1.38
	v20081015-1925:1.38
	v20081008-1925:1.38
	v20081001-1925:1.38
	v20080924-1925:1.38
	v20080917-1925:1.38
	v20080911-1728:1.38
	v20080910-1520:1.38
	v20080903-1520:1.38
	v20080827-1520:1.38
	v20080813-1520:1.38
	v20080806-1520:1.38
	v20070202-0200:1.33.2.1
	v20061120-1300:1.37
	M3_20:1.37
	v20061117-0800:1.37
	v20061027-1200:1.33.2.1
	v20061020-1000:1.33.2.1
	v20061013-1330:1.35
	v20060919-0800:1.33.2.1
	v20060907-1100:1.33.2.1
	M1_20:1.34
	v20060904-1500:1.34
	v20060824-1600:1.33
	v20060817-1500:1.33
	v20060728-0500:1.33
	v20060713-1700:1.33
	R1_0_maintenance:1.33.0.2
	R1_0:1.33
	v20060627-1200:1.33
	v20060626-1420:1.33
	v20060620-0400:1.33
	v20060616-1400:1.33
	v20060616-1200:1.33
	v20060609-1400:1.33
	v20060531-1730:1.32
	v20060530-1930:1.32
	v20060526-1200:1.32
	v20060519-1300:1.31
	v20060519-0800:1.31
	v20060512-1000:1.28
	I20060512-1000:1.28
	I20060505-1400:1.27
	I20060428-1300:1.27
	I20060424-0500:1.27
	I20060424-0300:1.27
	M6_10:1.27
	I20060407-1200:1.23
	I20060331-1000:1.23
	I20060324-0300:1.23
	I20060317-1300:1.23
	I20060317-1200:1.23
	I20060316-1300:1.22
	I20060309-1300:1.16
	M5_10:1.14
	S20060303-1600:1.14
	I20060227-1730:1.14
	I20060216-1945:1.14
	I20060210-1715:1.14
	I20060209-1815:1.14
	I20060203-0830:1.11
	I20060202-1415:1.11
	I20060129-1145:1.9
	I20060127-0900:1.9
	I20060120-1530:1.8
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.4
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.38
date	2006.12.08.19.20.41;	author dstadnik;	state dead;
branches;
next	1.37;
commitid	49124579bb084567;

1.37
date	2006.10.18.09.56.50;	author dstadnik;	state Exp;
branches;
next	1.36;

1.36
date	2006.10.17.13.08.11;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.09.05.17.38.16;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.06.09.12.31.18;	author dstadnik;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2006.05.24.11.57.33;	author atikhomirov;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.17.14.22.47;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.14.14.47.54;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.14.07.36.06;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.12.16.28.45;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.17.16.52.37;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.15.14.39.11;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.03.14.17.04.50;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.03.14.11.09.47;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.13.22.31.59;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.13.18.39.47;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.09.13.25.10;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.02.15.58.54;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.26.13.36.44;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.10.16.50.57;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.07.15.41.03;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.21.13.31.57;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	;

1.33.2.1
date	2006.09.05.17.49.03;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.38
log
@migrate node label edit part to xpand templates
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.parts" class="NodeLabelEditPartGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.codegen.gmfgen.util.* "%>
<%
final GenNodeLabel genLabel = (GenNodeLabel) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenCommonBase genHost = genLabel.getNode();
GenDiagram genDiagram = genLabel.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.util.ArrayList;
import java.util.List;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.editpolicies.NonResizableEditPolicy;
import org.eclipse.gef.handles.NonResizableHandleKit;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;
import org.eclipse.gmf.runtime.notation.View;
<%
if (genLabel.getViewmap() instanceof InnerClassViewmap) {
	importManager.registerInnerClass(((InnerClassViewmap) genLabel.getViewmap()).getClassName());
}
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=genLabel.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart")%> implements ITextAwareEditPart {
<%{	GenCommonBase genCommonBase = genLabel;%>
<%@@ include file="visualID.jetinc"%>
<%}%>
<%@@ include file="textAwareFields.jetinc"%>

	/**
	 * @@generated
	 */
	public <%=genLabel.getEditPartClassName()%>(View view) {
		super(view);
	}

	/**
	 * @@generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {

			protected List createSelectionHandles() {
				List handles = new ArrayList();
				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
				return handles;
			}

			public Command getCommand(Request request) {
				return null;
			}

			public boolean understandsRequest(Request request) {
				return false;
			}
		});
<%{	GenCommonBase genCommonBase = genLabel;%>
<%@@ include file="customBehaviour.jetinc"%>
<%}%>
	}

<%
final boolean needsRefreshBounds = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genLabel.getNode());
final boolean readOnly = genLabel.isReadOnly();
final boolean useElementIcon = genLabel.isElementIcon();
final boolean designLabel = genLabel.getModelFacet() instanceof DesignLabelModelFacet;
%>
<%@@ include file="textAware.jetinc"%>
<%@@ include file="notationalListeners.jetinc"%>
<%if (needsRefreshBounds) {%>

	/**
	 * @@generated
	 */
	protected void refreshBounds() {
		int width = ((Integer) getStructuralFeatureValue(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Width())).intValue();
		int height = ((Integer) getStructuralFeatureValue(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Height())).intValue();
		<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> size = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(width, height);
		int x = ((Integer) getStructuralFeatureValue(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_X())).intValue();
		int y = ((Integer) getStructuralFeatureValue(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_Y())).intValue();
		<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> loc = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%>(x, y);
		((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) getParent()).setLayoutConstraint(this, getFigure(), new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(loc, size));
	}

	/**
	 * @@generated
	 */
	protected void handleNotificationEvent(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%> event) {
		Object feature = event.getFeature();
<%@@ include file="handleBounds.jetinc"%>
<%@@ include file="handleText.jetinc"%>
		super.handleNotificationEvent(event);
	}
<%} else {%>

	/**
	 * @@generated
	 */
	protected void handleNotificationEvent(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%> event) {
		Object feature = event.getFeature();
<%@@ include file="handleText.jetinc"%>
		super.handleNotificationEvent(event);
	}
<%}%>
<%@@ include file="labelFigure.jetinc"%>
}
<%importManager.emitSortedImports();%>
@


1.37
log
@#161380 move readOnly back to GenLabel
@
text
@@


1.36
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d75 1
a75 1
final boolean readOnly = genLabel.getModelFacet() != null && genLabel.getModelFacet().isReadOnly();
@


1.35
log
@#149041 Do not allow to drag inner node labels over diagram surface
@
text
@d75 1
a75 1
final boolean readOnly = genLabel.isReadOnly();
@


1.34
log
@add custom behaviour
@
text
@d12 2
d15 5
d52 16
@


1.33
log
@#144683 It should be possible to modify label value on pure design diagram
@
text
@d18 1
a18 1
importManager.registerInnerClass(((InnerClassViewmap) genLabel.getViewmap()).getClassName());
d20 2
a21 1
importManager.markImportLocation(stringBuffer);%>
d27 1
a27 2
<%{
GenCommonBase genCommonBase = genLabel;%>
d45 3
@


1.33.2.1
log
@#149041 Do not allow to drag inner node labels over diagram surface
@
text
@a11 2
import java.util.ArrayList;
import java.util.List;
a12 5
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.editpolicies.NonResizableEditPolicy;
import org.eclipse.gef.handles.NonResizableHandleKit;
a44 16
		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {

			protected List createSelectionHandles() {
				List handles = new ArrayList();
				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
				return handles;
			}

			public Command getCommand(Request request) {
				return null;
			}

			public boolean understandsRequest(Request request) {
				return false;
			}
		});
@


1.32
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d51 1
@


1.31
log
@use importAssistant to emit package statement instead of handcoding
@
text
@a12 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;
d25 1
a25 1
public class <%=genLabel.getEditPartClassName()%> extends CompartmentEditPart implements ITextAwareEditPart {
@


1.30
log
@#139127 Provide an option for labels to display node icon
@
text
@d4 2
a5 2
GenNodeLabel genLabel = (GenNodeLabel) ((Object[]) argument)[0];
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
@


1.29
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d51 1
a52 1
<%@@ include file="textAwareElementIcon.jetinc"%>
@


1.28
log
@#133836 Creating a child node without a label causes error
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
d49 1
a49 1
final boolean needsRefreshBounds = !genLabel.getNode().isListLayout();
d55 1
a55 1
<%if (!genLabel.getNode().isListLayout()) {%>
@


1.27
log
@handle both Label and WrapLabel : continued further
@
text
@d48 4
a51 1
<%final boolean needsRefreshBounds = !genLabel.getNode().isListLayout();%>
@


1.26
log
@remove temporary label direct edit policy
@
text
@a48 1
<%@@ include file="textAwareLabel.jetinc"%>
@


1.25
log
@#135694 remove temporary code
@
text
@d15 1
a15 2
//import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;
import <%=genDiagram.getEditPoliciesPackageName()%>.LabelDirectEditPolicy;
@


1.24
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d14 1
a14 1
//import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
@


1.23
log
@Class names of Figures generated as inner classes may clash with well-known classes, thus we have to make sure we avoid that
@
text
@d28 4
@


1.22
log
@generate label figures for all label types
@
text
@d18 5
a22 1
<%importManager.markImportLocation(stringBuffer);%>
@


1.21
log
@use specified label figure in ext node labels
@
text
@a40 10
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.Label")%> figure =
			new <%=importManager.getImportedName("org.eclipse.draw2d.Label")%>();
		defaultText = figure.getText();
		return figure;
	}

d81 1
@


1.20
log
@extend CompartmentEP to enable mouse delegation
@
text
@d41 10
@


1.19
log
@duplicated refreshVisuals method when label's node has flow layout
@
text
@d13 1
a13 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
d23 1
a23 1
public class <%=genLabel.getEditPartClassName()%> extends GraphicalEditPart implements ITextAwareEditPart {
@


1.18
log
@use Labels instead of WrapLabels
@
text
@d41 1
a50 8
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshBounds();
	}

	/**
	 * @@generated
	 */
@


1.17
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d41 1
a41 1
<%@@ include file="textAwareWrapLabel.jetinc"%>
@


1.16
log
@remove warnings
@
text
@d5 1
a7 1
boolean isParentFlowLayout = !genLabel.getNode().isListLayout();
d10 1
a10 1
package <%=genDiagram.getEditPartsPackageName()%>;
d12 5
a16 2
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());%>
import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;
a17 2
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.Image;
d23 2
a24 1
public class <%=genLabel.getEditPartClassName()%> extends TextCompartmentEditPart {
a30 1
		setNumIcons(1);
d36 3
a38 6
	protected Image getLabelIcon(int index) {
		ImageDescriptor descriptor = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemImageDescriptor(resolveSemanticElement());
		if (descriptor == null) {
			descriptor = ImageDescriptor.getMissingImageDescriptor();
		}
		return descriptor.createImage();
d40 6
a45 2
<%@@ include file="labelSemantic.jetinc"%>
<%if (isParentFlowLayout) {%>
a57 14
	protected void handleNotificationEvent(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%> notification) {
		super.handleNotificationEvent(notification);
		Object feature = notification.getFeature();
		if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Width().equals(feature)
			|| <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Height().equals(feature)
			|| <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_X().equals(feature)
			|| <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_Y().equals(feature)) {
			refreshBounds();
		} 
	}

	/**
	 * @@generated
	 */
d67 20
@


1.15
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d5 1
@


1.14
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d8 1
@


1.13
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d4 1
a4 1
GenNodeLabel genLabel = (GenNodeLabel) argument;
@


1.12
log
@ImportManager moved to oeg.common
@
text
@d34 1
a34 1
		ImageDescriptor descriptor = <%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemImageDescriptor(resolveSemanticElement());
@


1.11
log
@#125828 Generated code is bypassing parser service...
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.10
log
@#125729 Support labels based on multiple structural features
@
text
@d2 1
a2 1
	imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
a39 3
<%
String accessorName = genLabel.getNode().getDomainMetaClass().getClassifierAccessorName();
%>
@


1.9
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d4 3
a6 3
GenNodeLabel label = (GenNodeLabel) argument;
GenDiagram genDiagram = label.getDiagram();
boolean isParentFlowLayout = !label.getNode().isListLayout();
a10 1
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
d20 1
a20 1
public class <%=label.getEditPartClassName()%> extends TextCompartmentEditPart {
d25 1
a25 1
	public <%=label.getEditPartClassName()%>(View view) {
d41 1
a41 25
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
String accessorName = label.getNode().getDomainMetaClass().getClassifierAccessorName();
%>

	/**
	 * @@generated
	 */
	public IParser getParser() {
		if (parser == null) {
			parser = new <%=importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName())%>(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=accessorName%>().getEStructuralFeature("<%=label.getMetaFeature().getName()%>"));
		}
		return parser;
	}
<%if (label.isReadOnly()) {%>

	/**
	 * @@generated
	 */
	protected boolean isEditable() {
		return false;
	}
<%
}
if (isParentFlowLayout) {
d43 2
a51 1
		
d67 1
a67 1
	
d80 1
a80 3
<%
}
%>
@


1.8
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d35 1
a35 1
		ImageDescriptor descriptor = <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.getInstance().getItemImageDescriptor(resolveSemanticElement());
@


1.7
log
@#123274 support read only labels
@
text
@d6 1
a6 1
boolean isParentFlowLayout = label.getNode().getChildContainersPlacement() == CompartmentPlacementKind.FLOW_LITERAL;
@


1.6
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d56 8
d65 1
@


1.5
log
@#116031 avoid hardcoded class names in templates
@
text
@d6 1
d56 42
@


1.4
log
@[ashatalin] #115311 use accessor name helper methods instead of constructing them
@
text
@a14 1
import <%=genDiagram.getProvidersPackageName()%>.StructuralFeatureParser;
d51 1
a51 1
			parser = new StructuralFeatureParser(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=accessorName%>().getEStructuralFeature("<%=label.getMetaFeature().getName()%>"));
@


1.3
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d44 1
a44 1
String semanticNodeInterfaceName = label.getNode().getDomainMetaClass().getName();
d52 1
a52 1
			parser = new StructuralFeatureParser(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>().getEStructuralFeature("<%=label.getMetaFeature().getName()%>"));
@


1.2
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d4 2
a5 2
GenNode genNode = (GenNode) argument;
GenDiagram genDiagram = genNode.getDiagram();
a14 1
import <%=genDiagram.getEditorPackageName()%>.<%=genDiagram.getPluginClassName()%>;
d21 1
a21 1
public class <%=AccessUtil.getNodeLabelEditPartClassName(genNode)%> extends TextCompartmentEditPart {
d26 1
a26 1
	public <%=AccessUtil.getNodeLabelEditPartClassName(genNode)%>(View view) {
d35 1
a35 1
		ImageDescriptor descriptor = <%=genDiagram.getPluginClassName()%>.getInstance().getItemImageDescriptor(resolveSemanticElement());
d44 1
a44 1
String semanticNodeInterfaceName = genNode.getDomainMetaClass().getName();
d52 1
a52 1
			parser = new StructuralFeatureParser(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>().getEStructuralFeature("<%=genNode.getDomainNameFeature().getName()%>"));
@


1.1
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d16 1
a16 1
import <%=genDiagram.getEditProvidersPackageName()%>.StructuralFeatureParser;
@

