head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081015-1925:1.4
	v20081008-1925:1.4
	v20081001-1925:1.4
	v20080924-1925:1.4
	v20080917-1925:1.4
	v20080911-1728:1.4
	v20080910-1520:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080806-1520:1.4
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.02.05.14.39.18;	author atikhomirov;	state dead;
branches;
next	1.3;
commitid	418145c741944567;

1.3
date	2006.09.22.13.21.24;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.18.19.14.20;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.18.19.08.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@property sheet classes are generated with xpand now
@
text
@<%@@jet package="org.eclipse.gmf.codegen.templates.editor" class="SheetLabelProviderGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenPropertySheet propSheet = (GenPropertySheet) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = propSheet.getEditorGen().getDiagram(); // FIXME fix copyright inc to use editorGen
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.gef.EditPart;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.swt.graphics.Image;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=importManager.getImportedName("org.eclipse.jface.viewers.DecoratingLabelProvider")%> {

	/**
	 * @@generated
	 */
	public <%=importManager.getCompilationUnitName()%>() {
		<%
		final String delegate = importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider");
		final String pluginActivator = importManager.getImportedName(propSheet.getEditorGen().getPlugin().getActivatorQualifiedClassName());
%>		super(new <%=delegate%>(<%=pluginActivator%>.getInstance().getItemProvidersAdapterFactory()), null);
	}

	/**
	 * @@generated
	 */
	public String getText(Object element) {
		Object selected = unwrap(element); 
<%if (genDiagram.getEditorGen().getNavigator() != null) {%>
		if (selected instanceof <%=importManager.getImportedName(genDiagram.getEditorGen().getNavigator().getNavigatorGroupQualifiedClassName())%>) {
			return ((<%=importManager.getImportedName(genDiagram.getEditorGen().getNavigator().getNavigatorGroupQualifiedClassName())%>) selected).getGroupName();
		}
<%}%>
		return super.getText(selected);
	}

	/**
	 * @@generated
	 */
	public Image getImage(Object element) {
		return super.getImage(unwrap(element));
	}

	/**
	 * @@generated
	 */
	private Object unwrap(Object element) {
		if (element instanceof IStructuredSelection) {
			return unwrap(((IStructuredSelection) element).getFirstElement());
		}
		if (element instanceof EditPart) {
			return unwrapEditPart((EditPart) element);
		}
		if (element instanceof <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) ((<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) element).getAdapter(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>.class);
			if (view != null) {
				return unwrapView(view);
			}
		}
		return element;
	}

	/**
	 * @@generated
	 */
	private Object unwrapEditPart(EditPart p) {
		if (p.getModel() instanceof View) {
			return unwrapView((View) p.getModel());
		}
		return p.getModel();
	}

	/**
	 * @@generated
	 */
	private Object unwrapView(View view) {
		return view.getElement() == null ? view : view.getElement();
	}
}
<%importManager.emitSortedImports();%>@


1.3
log
@Read-only properties provided into the navigator.
@
text
@@


1.2
log
@missed @@generated tag
@
text
@d36 7
a42 1
		return super.getText(unwrap(element));
d62 6
@


1.1
log
@optionally generate label provider for caption of property sheet
@
text
@d22 3
@

