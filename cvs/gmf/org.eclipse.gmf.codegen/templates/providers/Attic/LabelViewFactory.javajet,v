head	1.14;
access;
symbols
	v20081022-1925:1.14
	v20081015-1925:1.14
	v20081008-1925:1.14
	v20081001-1925:1.14
	v20080924-1925:1.14
	v20080917-1925:1.14
	v20080911-1728:1.14
	v20080910-1520:1.14
	v20080903-1520:1.14
	v20080827-1520:1.14
	v20080813-1520:1.14
	v20080806-1520:1.14
	v20070601-1400:1.13
	v20070525-1500:1.13
	v20070520-1200:1.13
	v20070518-1300:1.13
	v20070504-1000:1.13
	v20070427-0600:1.13
	v20070420-1000:1.13
	v20070413-1300:1.13
	v20070405-1100:1.13
	v20070403-1500:1.13
	v20070330-1300:1.13
	v20060330-1300:1.13
	v20070322-1100:1.13
	v20060316-0600:1.13
	v20070307-0700:1.13
	v20070301-1200:1.13
	v20070228-2000:1.13
	v20070221-1500:1.13
	v20070208-1800:1.13
	v20070202-0200:1.13
	v20070103-0300:1.13
	M4_20:1.13
	v20061222-1800:1.13
	v20061218-1200:1.13
	v20061214-0000:1.13
	v20061120-1300:1.13
	M3_20:1.13
	v20061117-0800:1.13
	v20061027-1200:1.13
	v20061020-1000:1.13
	v20061013-1330:1.13
	v20060919-0800:1.13
	v20060907-1100:1.13
	M1_20:1.13
	v20060904-1500:1.13
	v20060824-1600:1.13
	v20060817-1500:1.13
	v20060728-0500:1.13
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060620-0400:1.10
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-1300:1.9
	v20060519-0800:1.9
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.7
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.5
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2007.06.04.12.58.11;	author dstadnik;	state dead;
branches;
next	1.13;
commitid	6a8946640c624567;

1.13
date	2006.06.23.09.25.37;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.23.08.52.03;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.21.15.22.41;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.09.12.31.18;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.20.17.08.07;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.13.22.22.22;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.13.11.02.29;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.14
log
@rewrite label view factories in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="LabelViewFactoryGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenLabel genLabel = (GenLabel) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genLabel.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.util.ArrayList;
import java.util.List;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genLabel.getNotationViewFactoryClassName()%> extends AbstractLabelViewFactory {

	/**
	 * @@generated
	 */
	public View createView(IAdaptable semanticAdapter, View containerView, String semanticHint, int index, boolean persisted, PreferencesHint preferencesHint) {
		Node view = (Node) super.createView(semanticAdapter, containerView, semanticHint, index, persisted, preferencesHint);
<%
int x = 0;
int y = 0;
LabelOffsetAttributes labelOffset = (LabelOffsetAttributes) genLabel.getViewmap().find(LabelOffsetAttributes.class);
if (labelOffset != null) {
	x = labelOffset.getX();
	y = labelOffset.getY();
} else if (genLabel instanceof GenExternalNodeLabel) {
	y = 5;
}
if ((x != 0 || y != 0) && (genLabel instanceof GenLinkLabel || genLabel instanceof GenExternalNodeLabel)) {
%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Location")%> location = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Location")%>) view.getLayoutConstraint();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode")%> mapMode = <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.util.MeasurementUnitHelper")%>.getMapMode(containerView.getDiagram().getMeasurementUnit());
		location.setX(mapMode.DPtoLP(<%=x%>));
		location.setY(mapMode.DPtoLP(<%=y%>));
<%}%>
		return view;
	}

	/**
	 * @@generated
	 */
	protected List createStyles(View view) {
		List styles = new ArrayList();
<%if (genLabel.getModelFacet() instanceof DesignLabelModelFacet) {%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDescriptionStyle());
<%}%>
		return styles;
	}
}
<%importManager.emitSortedImports();%>
@


1.13
log
@set labels offset in view factories
@
text
@@


1.12
log
@specify bottom offset in view factory
@
text
@d30 12
a41 1
<%if (genLabel instanceof GenExternalNodeLabel) {%>
d43 3
a45 1
		location.setY(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.util.MeasurementUnitHelper")%>.getMapMode(containerView.getDiagram().getMeasurementUnit()).DPtoLP(5));
@


1.11
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d11 2
d14 1
d16 1
d28 7
a34 3
	protected void decorateView(View containerView, View view, IAdaptable semanticAdapter,
		String semanticHint, int index, boolean persisted) {
		super.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);
d36 1
d41 1
a41 1
		<%=importManager.getImportedName("java.util.List")%> styles = new <%=importManager.getImportedName("java.util.ArrayList")%>();
@


1.10
log
@#144683 It should be possible to modify label value on pure design diagram
@
text
@a27 1
<%if (genLabel.getModelFacet() instanceof DesignLabelModelFacet) {%>
d32 2
a33 1
		<%=importManager.getImportedName("java.util.List")%> styles = super.createStyles(view);
d35 1
a37 1
<%}%>
@


1.9
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d28 10
@


1.8
log
@Removing obsolete code to get rid of compilation warnings.
@
text
@d3 5
a7 2
<%GenLabel genLabel = (GenLabel) ((Object[]) argument)[0];%>
<%GenDiagram genDiagram = genLabel.getDiagram();%>
d9 1
a9 1
package <%=genDiagram.getNotationViewFactoriesPackageName()%>;
a10 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());%>
@


1.7
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@a24 1
<%GenCommonBase genElement = genLabel;%>
@


1.6
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@a9 2
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EcoreFactory;
a25 1
<%@@ include file="createVIDAnnotation.jetinc"%>
@


1.5
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d3 2
a4 2
<%GenLabel label = (GenLabel) ((Object[]) argument)[0];%>
<%GenDiagram genDiagram = label.getDiagram();%>
a11 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d19 1
a19 1
public class <%=label.getNotationViewFactoryClassName()%> extends AbstractLabelViewFactory {
d27 1
a27 1
<%GenCommonBase genElement = label;%>
a28 4
<%String id = label instanceof GenLinkLabel ? ((GenLinkLabel) label).getLink().getUniqueIdentifier() : ((GenNodeLabel) label).getNode().getUniqueIdentifier();%>
		getViewService().createNode(semanticAdapter, view,
			<%=importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName())%>.<%=id%>Labels.<%=label.getSemanticHintFieldName()%>,
			ViewUtil.APPEND, persisted, getPreferencesHint());
@


1.4
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d5 1
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d3 1
a3 1
<%GenLabel label = (GenLabel) argument;%>
@


1.2
log
@#114178
Create shortcut functionality added
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.1
log
@#122054 support external node labels (partial fix)
@
text
@d4 2
a5 2
<%GenDiagram diagram = label.getDiagram();%>
package <%=diagram.getNotationViewFactoriesPackageName()%>;
d7 1
a7 1
<%ImportUtil importManager = new ImportUtil(diagram.getNotationViewFactoriesPackageName());%>
d31 1
a31 1
			<%=importManager.getImportedName(diagram.getSemanticHintsQualifiedClassName())%>.<%=id%>Labels.<%=label.getSemanticHintFieldName()%>,
@

