head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20070504-1000:1.5
	v20070427-0600:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-1100:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070307-0700:1.5
	v20070301-1200:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070202-0200:1.5
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061218-1200:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061027-1200:1.5
	v20061020-1000:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060824-1600:1.5
	v20060817-1500:1.5
	v20060728-0500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.4
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.2
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1;
locks; strict;
comment	@# @;


1.6
date	2007.05.11.12.26.16;	author dstadnik;	state dead;
branches;
next	1.5;
commitid	398e464460e54567;

1.5
date	2006.06.21.22.26.22;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.19.16.47.36;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.07.13.47.01;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.31.18.04.04;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.09.12.41.31;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.6
log
@rewrite in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ValidationDecoratorProviderGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
%>
<%@@ include file="../copyright4java.jetinc"%>
<%
importManager.emitPackageStatement(stringBuffer);

importManager.markImportLocation(stringBuffer);
importManager.registerInnerClass("MarkerObserver");
importManager.registerInnerClass("StatusDecorator");
importManager.registerInnerClass("StatusFigure");

importManager.addImport("java.util.ArrayList");
importManager.addImport("java.util.HashMap");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.List");
importManager.addImport("java.util.Map");
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.core.resources.IMarker");
importManager.addImport("org.eclipse.core.resources.IResource");
importManager.addImport("org.eclipse.draw2d.FlowLayout");
importManager.addImport("org.eclipse.draw2d.Label");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.GraphicalEditPart");
importManager.addImport("org.eclipse.gef.editparts.AbstractConnectionEditPart");
importManager.addImport("org.eclipse.gmf.runtime.common.core.service.AbstractProvider");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditDomain");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.AbstractDecorator");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.CreateDecoratorsOperation");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecorator");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorProvider");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.notation.Edge");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.swt.graphics.Image");
%>
/** 
 * @@generated
 */
public class <%=genDiagram.getValidationDecoratorProviderClassName()%> extends AbstractProvider implements IDecoratorProvider {
	/**
	 * @@generated
	 */	
	private static final String KEY = "validationStatus"; //$NON-NLS-1$
	/**
	 * @@generated
	 */
	private static final String MARKER_TYPE = <%=pluginActivatorClass%>.ID + "." + "<%=genDiagram.getValidationDiagnosticMarkerType()%>"; //$NON-NLS-1$ //$NON-NLS-2$
	/**
	 * @@generated
	 */
	private static MarkerObserver fileObserver = null;
	
	/**
	 * @@generated
	 */	
	public void createDecorators(IDecoratorTarget decoratorTarget) {
		EditPart editPart = (EditPart)decoratorTarget.getAdapter(EditPart.class);
		if (editPart instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart")%> ||
			editPart instanceof AbstractConnectionEditPart) {
			Object model = editPart.getModel();
			if((model instanceof View)) {
				View view = (View)model;
				if(!(view instanceof Edge) && !view.isSetElement()) {
					return;
				}
			}
			<%=importManager.getImportedName("org.eclipse.gef.EditDomain")%> ed = editPart.getViewer().getEditDomain();
			if(!(ed instanceof DiagramEditDomain)) {
				return;
			}
			if(((DiagramEditDomain)ed).getEditorPart() instanceof <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>) {
				decoratorTarget.installDecorator(KEY, new StatusDecorator(decoratorTarget));
			}
		}
	}

	/**
	 * @@generated
	 */		
	public boolean provides(<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.service.IOperation")%> operation) {
		if (!(operation instanceof CreateDecoratorsOperation)) {
			return false;
		}

		IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();
		View view = (View) decoratorTarget.getAdapter(View.class);
		return view != null && <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view));
	}
	
	/**
	 * @@generated
	 */	
	public static class StatusDecorator extends AbstractDecorator {
		/**
		 * @@generated
		 */	
		private String viewId;
		
		/**
		 * @@generated
		 */
		public StatusDecorator(IDecoratorTarget decoratorTarget) {
			super(decoratorTarget);
			try {
				final View view = (View) getDecoratorTarget().getAdapter(View.class);
				<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(view).runExclusive(new Runnable() {
					public void run() {
						StatusDecorator.this.viewId = view != null ? <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.getIdStr(view) : null;
					}
				});
			} catch (Exception e) {
				<%=pluginActivatorClass%>.getInstance().logError("ViewID access failure", e); //$NON-NLS-1$			
			}
		}

		/**
		 * @@generated
		 */	
		public void refresh() {
			removeDecoration();

			View view = (View) getDecoratorTarget().getAdapter(View.class);
			EditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);
			if (view == null || view.eResource() == null) {
				return;
			}

			IResource resource = getResource(view);
			// make sure we have a resource and that it exists in an open project
			if (resource == null || !resource.exists()) {
				return;
			}

			// query for all the validation markers of the current resource
			IMarker[] markers = null;
			try {
				markers = resource.findMarkers(MARKER_TYPE, true, IResource.DEPTH_INFINITE);
			} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
				<%=pluginActivatorClass%>.getInstance().logError("Validation marker refresh failure", e); //$NON-NLS-1$
			}
			if (markers == null || markers.length == 0) {
				return;
			}

			String elementId = <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.getIdStr(view);
			if (elementId == null) {
				return;
			}
			
			IMarker foundMarker = null;
			Label toolTip = null;						
			int severity = IMarker.SEVERITY_INFO;
			for (int i = 0; i < markers.length; i++) {
				IMarker marker = markers[i];
				String attribute = marker.getAttribute(<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.IMarker")%>.ELEMENT_ID, ""); //$NON-NLS-1$
				if (attribute.equals(elementId)) {
					int nextSeverity = marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO);					
					Image nextImage = getImage(nextSeverity);	 
					if(foundMarker == null) {				
						foundMarker = marker;
						toolTip = new Label(marker.getAttribute(IMarker.MESSAGE, ""), nextImage);						
					} else {
						if(toolTip.getChildren().isEmpty()) {
							Label comositeLabel = new Label();
							FlowLayout fl = new FlowLayout(false);
							fl.setMinorSpacing(0);
							comositeLabel.setLayoutManager(fl);
							comositeLabel.add(toolTip);
							toolTip = comositeLabel;
						}
						toolTip.add(new Label(marker.getAttribute(IMarker.MESSAGE, ""), nextImage)); //$NON-NLS-1$
					}
					severity = (nextSeverity > severity) ? nextSeverity : severity;					
				}
			}
			if (foundMarker == null) {
				return;
			}

			// add decoration
			if (editPart instanceof GraphicalEditPart) {
				Image img = getImage(severity);
				if (view instanceof Edge) {
					setDecoration(getDecoratorTarget().addConnectionDecoration(img, 50, true));										
				} else {
					int margin = -1;
					if(editPart instanceof GraphicalEditPart) {
						margin = <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil")%>.getMapMode(
							((GraphicalEditPart)editPart).getFigure()).DPtoLP(margin);
					}
					setDecoration(getDecoratorTarget().addShapeDecoration(img, IDecoratorTarget.Direction.NORTH_EAST , margin, true));										
				}
				getDecoration().setToolTip(toolTip);
			}
		}
		
		/**
		 * @@generated
		 */		
		private Image getImage(int severity) {
			String imageName = <%=importManager.getImportedName("org.eclipse.ui.ISharedImages")%>.IMG_OBJS_ERROR_TSK;
			switch (severity) {
			case IMarker.SEVERITY_ERROR:
				imageName = <%=importManager.getImportedName("org.eclipse.ui.ISharedImages")%>.IMG_OBJS_ERROR_TSK;
				break;
			case IMarker.SEVERITY_WARNING:
				imageName = <%=importManager.getImportedName("org.eclipse.ui.ISharedImages")%>.IMG_OBJS_WARN_TSK;
				break;
			default:
				imageName = <%=importManager.getImportedName("org.eclipse.ui.ISharedImages")%>.IMG_OBJS_INFO_TSK;
			}
			return <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getSharedImages().getImage(imageName);
		}

		/**
		 * @@generated
		 */
		private static IResource getResource(View view) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> model = view.eResource();
			if (model != null) {
				return <%=importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer")%>.getFile(model);
			}
			return null;
		}

		/**
		 * @@generated
		 */
		public void activate() {
			View view = (View) getDecoratorTarget().getAdapter(View.class);
			if (view == null)
				return;
			Diagram diagramView = view.getDiagram();
			if (diagramView == null)
				return;
			IFile file = <%=importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer")%>.getFile(diagramView.eResource());
			if (file != null) {
				if (fileObserver == null) {
					fileObserver = new MarkerObserver(diagramView);
				}

				fileObserver.registerDecorator(this);
			}
		}

		/**
		 * @@generated
		 */
		public void deactivate() {
			if (fileObserver != null) {
				fileObserver.unregisterDecorator(this);
				if (!fileObserver.isRegistered()) {
					fileObserver = null;
				}
			}

			super.deactivate();
		}

		/**
		 * @@generated
		 */
		String getViewId() {
			return viewId;
		}
	}

	/**
	 * @@generated
	 */
	static class MarkerObserver implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.IFileObserver")%> {
		/**
		 * @@generated
		 */	
		private HashMap mapOfIdsToDecorators = null;
		/**
		 * @@generated
		 */	
		private boolean isRegistered = false;
		/**
		 * @@generated
		 */	
		private Diagram diagramView;
	
		/**
		 * @@generated
		 */			
		private MarkerObserver(Diagram diagramView) {
			this.diagramView = diagramView;
		}
	
		/**
		 * @@generated
		 */			
		private void registerDecorator(StatusDecorator decorator) {
			if (decorator == null) {
				return;
			}
	
			if (mapOfIdsToDecorators == null) {
				mapOfIdsToDecorators = new HashMap();
			}
	
			String decoratorViewId = decorator.getViewId();
			if (decoratorViewId == null) {
				return;
			}
	
			/* Add to the list */
			List list = (List) mapOfIdsToDecorators.get(decoratorViewId);
			if (list == null) {
				list = new ArrayList(2);
				list.add(decorator);
				mapOfIdsToDecorators.put(decoratorViewId, list);
			} else if (!list.contains(decorator)) {
				list.add(decorator);
			}
	
			/* Register with the file change manager */
			if (!isRegistered()) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.FileChangeManager")%>.getInstance().addFileObserver(this);
				isRegistered = true;
			}
		}
	
		/**
		 * @@generated
		 */			
		private void unregisterDecorator(StatusDecorator decorator) {
			/* Return if invalid decorator */
			if (decorator == null) {
				return;
			}
	
			/* Return if the decorator has invalid view id */
			String decoratorViewId = decorator.getViewId();
			if (decoratorViewId == null) {
				return;
			}
	
			if (mapOfIdsToDecorators != null) {
				List list = (List) mapOfIdsToDecorators.get(decoratorViewId);
				if (list != null) {
					list.remove(decorator);
					if (list.isEmpty()) {
						mapOfIdsToDecorators.remove(decoratorViewId);
					}
				}
	
				if (mapOfIdsToDecorators.isEmpty()) {
					mapOfIdsToDecorators = null;
				}
			}
	
			if (mapOfIdsToDecorators == null) {
				/* Unregister with the file change manager */
				if (isRegistered()) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.FileChangeManager")%>.getInstance().removeFileObserver(this);
					isRegistered = false;
				}
			}
		}
	
		/**
		 * @@generated
		 */			
		public void handleFileRenamed(IFile oldFile, IFile file) { /* Empty Code */ }
		/**
		 * @@generated
		 */			
		public void handleFileMoved(IFile oldFile, IFile file) { /* Empty Code */ }
		/**
		 * @@generated
		 */			
		public void handleFileDeleted(IFile file) { /* Empty Code */ }
		/**
		 * @@generated
		 */			
		public void handleFileChanged(IFile file) { /* Empty Code */ }
		/**
		 * @@generated
		 */			
		public void handleMarkerAdded(IMarker marker) {
			if(marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, null) != null) {
				handleMarkerChanged(marker);
			}
		}
		
		/**
		 * @@generated
		 */			
		public void handleMarkerDeleted(IMarker marker, Map attributes) {
			if (mapOfIdsToDecorators == null) {
				return;
			}
			// Extract the element guid from the marker and retrieve
			// corresponding view
			String elementId = (String) attributes.get(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID);
			List list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;
			if (list != null && !list.isEmpty()) {
				refreshDecorators(list);
			}
		}
	
		/**
		 * @@generated
		 */			
		public void handleMarkerChanged(IMarker marker) {
			if (mapOfIdsToDecorators == null || !MARKER_TYPE.equals(getType(marker))) {
				return;
			}
			// Extract the element ID list from the marker and retrieve
			// corresponding view	
			String elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, ""); //$NON-NLS-1$
			List list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;
	
			if (list != null && !list.isEmpty()) {
				refreshDecorators(list);
			}
		}
	
		/**
		 * @@generated
		 */	
		private void refreshDecorators(List decorators) {
			final List decoratorsToRefresh = decorators;		
			<%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getDisplay().asyncExec(new Runnable() {
				public void run() {
					try {
						<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(diagramView).runExclusive(new Runnable() {
							public void run() {
								for(Iterator it = decoratorsToRefresh.iterator(); it.hasNext();) {
									IDecorator decorator = (IDecorator) it.next();
									if (decorator != null) {
										decorator.refresh();
									}
								}
							}
						});
					} catch (Exception e) {
						<%=pluginActivatorClass%>.getInstance().logError("Decorator refresh failure", e); //$NON-NLS-1$
					}
				}
			});
		}
	
		/**
		 * @@generated
		 */	
		private boolean isRegistered() {
			return isRegistered;
		}
		
		/**
		 * @@generated
		 */
		private String getType(IMarker marker) {
			try {
				return marker.getType();
			} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
				<%=pluginActivatorClass%>.getInstance().logError("Validation marker refresh failure", e); //$NON-NLS-1$
				return ""; //$NON-NLS-1$
			}
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.5
log
@#148124 Diagram Validation action should be run as WorkspaceModifyOperation
@
text
@@


1.4
log
@#147728 Validation decorators should aggregate multiple statuses
@
text
@d389 5
a393 1
		public void handleMarkerAdded(IMarker marker) { /* Empty Code */ }
@


1.3
log
@#145521 ValidationDecoratorProvider.provides() should check modelID of view
@
text
@d25 1
d157 2
d163 17
a179 2
					foundMarker = marker;
					break;
d188 1
a188 1
				Image img = getImage(foundMarker);
d199 1
a199 1
				getDecoration().setToolTip(new Label(foundMarker.getAttribute(IMarker.MESSAGE, ""), img));
d206 1
a206 1
		private Image getImage(IMarker marker) {
d208 1
a208 1
			switch (marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO)) {
a280 4
		static <%=importManager.getImportedName("org.eclipse.draw2d.ToolTipHelper")%> toolTipHelper;		
		/**
		 * @@generated
		 */	
@


1.2
log
@#144727 Validation status decorations are not shown in the diagram
@
text
@d91 2
a92 1
		return decoratorTarget.getAdapter(View.class) != null;
@


1.1
log
@#136803 Support decorator provider for validated elements in generated diagram editors
@
text
@a24 2
importManager.addImport("org.eclipse.draw2d.IFigure");
importManager.addImport("org.eclipse.draw2d.ImageFigure");
a99 4
		 */		
		private static final <%=importManager.getImportedName("org.eclipse.draw2d.MouseMotionListener")%> mouseListener = createMouseListener();		
		/**
		 * @@generated
a169 4
				StatusFigure figure = new StatusFigure(this, img, foundMarker.getAttribute(IMarker.MESSAGE, null));
				figure.setSize(img.getBounds().width, img.getBounds().height);
				figure.setToolTip(new Label());
				
d171 1
a171 1
					setDecoration(getDecoratorTarget().addConnectionDecoration(figure, 50, true));										
d178 1
a178 1
					setDecoration(getDecoratorTarget().addShapeDecoration(figure, IDecoratorTarget.Direction.NORTH_EAST , margin, true));										
d180 1
a180 2

				figure.addMouseMotionListener(mouseListener);
a186 33
		private static <%=importManager.getImportedName("org.eclipse.draw2d.MouseMotionListener")%> createMouseListener() {
			return new <%=importManager.getImportedName("org.eclipse.draw2d.MouseMotionListener")%>.Stub() {
				public void mouseHover(<%=importManager.getImportedName("org.eclipse.draw2d.MouseEvent")%> me) {
					StatusFigure source = (StatusFigure) me.getSource();
					GraphicalEditPart editPart = (GraphicalEditPart) source.decorator.getDecoratorTarget().getAdapter(EditPart.class);
					<%=importManager.getImportedName("org.eclipse.swt.widgets.Control")%> control = editPart.getViewer().getControl();
					IFigure tip = source.getLabel();

					<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> bounds = source.getBounds().getExpanded(2, 2);
					source.translateToAbsolute(bounds);
					org.eclipse.swt.graphics.Rectangle location = new org.eclipse.swt.graphics.Rectangle(bounds.x, bounds.y, bounds.width, bounds.height);
					location = <%=importManager.getImportedName("org.eclipse.swt.widgets.Display")%>.getCurrent().map(control, null, location);
					reset();
					MarkerObserver.toolTipHelper = new <%=importManager.getImportedName("org.eclipse.draw2d.ToolTipHelper")%>(control);
					MarkerObserver.toolTipHelper.displayToolTipNear(source, tip, location.x, location.y);
				}
					
				public void mouseExited(<%=importManager.getImportedName("org.eclipse.draw2d.MouseEvent")%> me) {
					reset();
				}
					
				void reset() {
					if(MarkerObserver.toolTipHelper != null) {
						MarkerObserver.toolTipHelper.dispose();
						MarkerObserver.toolTipHelper = null;
					}
				}			
			};				
		}		

		/**
		 * @@generated
		 */		
a452 28

	/**
	 * @@generated
	 */	
	private static class StatusFigure extends ImageFigure {
		/**
		 * @@generated
		 */			
		private final StatusDecorator decorator;
		/**
		 * @@generated
		 */			
		private final String labelTxt;
		/**
		 * @@generated
		 */		
		StatusFigure(StatusDecorator decorator, Image image, String labelTxt) {
			super(image);
			this.decorator = decorator;
			this.labelTxt = labelTxt;
		}
		/**
		 * @@generated
		 */			
		Label getLabel() {
			return (labelTxt != null) ? new Label(labelTxt, getImage()) : null;
		}
	}
@

