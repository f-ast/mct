head	1.17;
access;
symbols
	v20081022-1925:1.17
	v20081015-1925:1.17
	v20081008-1925:1.17
	v20081001-1925:1.17
	v20080924-1925:1.17
	v20080917-1925:1.17
	v20080911-1728:1.17
	v20080910-1520:1.17
	v20080903-1520:1.17
	v20080827-1520:1.17
	v20080813-1520:1.17
	v20080806-1520:1.17
	R1_0_maintenance:1.17.0.2
	R1_0:1.17
	I20060407-1200:1.16
	I20060331-1000:1.16
	I20060324-0300:1.16
	I20060317-1300:1.16
	I20060317-1200:1.16
	I20060316-1300:1.16
	I20060309-1300:1.15
	M5_10:1.14
	S20060303-1600:1.14
	I20060227-1730:1.13
	I20060216-1945:1.13
	I20060210-1715:1.13
	I20060209-1815:1.13
	I20060203-0830:1.11
	I20060202-1415:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.10
	I20060105-1630:1.10
	I20051230-1230:1.10
	I20051223-1100:1.10
	I20051217-0925:1.9
	I20051208-2000:1.9
	I20051201-1800:1.9
	I20051124-2000:1.9
	M3_10:1.9
	I20051118-1245:1.9
	I20051111-1800:1.8
	I20051106-0900:1.7
	v20051030:1.7;
locks; strict;
comment	@# @;
expand	@k@;


1.17
date	2006.04.12.01.16.49;	author ashatalin;	state dead;
branches;
next	1.16;

1.16
date	2006.03.13.11.02.29;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.20.18.00.00;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.11.13.47.42;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.24.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.18.11.09.13;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.17
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="SemanticHintsGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];%>
<%@@ include file="../copyright4java.jetinc"%>
package <%=genDiagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getSemanticHintsClassName()%> {

	/**
	 * @@generated
	 */
	private <%=genDiagram.getSemanticHintsClassName()%>() {}
<%
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	if (next instanceof GenLink) {
		GenLink nextLink = (GenLink) next;
		if (nextLink.getModelFacet() instanceof FeatureModelFacet || nextLink.getModelFacet() == null) {
%>

	/**
	 * @@generated
	 */
	public static final String <%=nextLink.getUniqueIdentifier()%> = "<%=nextLink.getUniqueIdentifier()%>SemanticHint";
<%
		}
	}
	if (next instanceof GenNode) {
		GenNode genNode = (GenNode) next;
		List labels = genNode.getLabels();
		if (!labels.isEmpty()) {
%>

	/**
	 * @@generated
	 */
	public static class <%=genNode.getUniqueIdentifier()%>Labels {

		/**
		 * @@generated
		 */
		private <%=genNode.getUniqueIdentifier()%>Labels() {}
<%
			for (int i = 0; i < labels.size(); i++) {
				GenNodeLabel label = (GenNodeLabel) labels.get(i);
%>

		/**
		 * @@generated
		 */
		public static final String <%=label.getSemanticHintFieldName()%> = "<%=label.getUniqueIdentifier()%>SemanticHint";
<%			}%>
	}
<%
		}
		List compartments = genNode.getCompartments();
		if (!compartments.isEmpty()) {
%>

	/**
	 * @@generated
	 */
	public static class <%=genNode.getUniqueIdentifier()%>Compartments {

		/**
		 * @@generated
		 */
		private <%=genNode.getUniqueIdentifier()%>Compartments() {}
<%
			for (int i = 0; i < compartments.size(); i++) {
				GenCompartment compartment = (GenCompartment) compartments.get(i);
%>

		/**
		 * @@generated
		 */
		public static final String <%=compartment.getSemanticHintFieldName()%> = "<%=compartment.getUniqueIdentifier()%>SemanticHint";
<%			}%>
	}
<%
		}
	} else if (next instanceof GenLink) {
		GenLink genLink = (GenLink) next;
		List labels = genLink.getLabels();
		if (!labels.isEmpty()) {
%>

	/**
	 * @@generated
	 */
	public static class <%=genLink.getUniqueIdentifier()%>Labels {

		/**
		 * @@generated
		 */
		private <%=genLink.getUniqueIdentifier()%>Labels() {}
<%
			for (int i = 0; i < labels.size(); i++) {
				GenLinkLabel label = (GenLinkLabel) labels.get(i);
%>

		/**
		 * @@generated
		 */
		public static final String <%=label.getSemanticHintFieldName()%> = "<%=label.getUniqueIdentifier()%>SemanticHint";
<%			}%>
	}
<%
		}
	}
}
%>
}
<%importManager.emitSortedImports();%>
@


1.16
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@@


1.15
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@a51 1
				if (label instanceof GenExternalNodeLabel) {
d57 2
a58 16
		public static final String <%=((GenExternalNodeLabel) label).getSemanticHintLabelFieldName()%> = "<%=label.getUniqueIdentifier()%>Label";

		/**
		 * @@generated
		 */
		public static final String <%=label.getSemanticHintFieldName()%> = "<%=label.getUniqueIdentifier()%>Text";
<%				} else {%>

		/**
		 * @@generated
		 */
		public static final String <%=label.getSemanticHintFieldName()%> = "<%=label.getUniqueIdentifier()%>Text";
<%
				}
			}
%>
d83 2
a84 4
		public static final String <%=compartment.getSemanticHintFieldName()%> = "<%=compartment.getUniqueIdentifier()%>";
<%
			}
%>
d111 1
a111 6
		public static final String <%=label.getSemanticHintLabelFieldName()%> = "<%=label.getUniqueIdentifier()%>Label";

		/**
		 * @@generated
		 */
		public static final String <%=label.getSemanticHintFieldName()%> = "<%=label.getUniqueIdentifier()%>Text";
@


1.14
log
@#114175 for links
@
text
@d4 1
@


1.13
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d21 1
a21 1
	if (next instanceof GenLink && ((GenLink) next).getModelFacet() instanceof FeatureModelFacet) {
d23 1
d29 1
a29 1
	public static final String <%=nextLink.getUniqueIdentifier()%> = "<%=nextLink.getUniqueIdentifier()%>Link";
d31 1
@


1.12
log
@ImportManager moved to oeg.common
@
text
@d3 1
a3 1
<%GenDiagram genDiagram = (GenDiagram) argument;%>
@


1.11
log
@#122054 support external node labels (partial fix)
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.10
log
@#121581
Fields for the compartments are named unique.
@
text
@d49 1
d55 5
d61 10
a70 1
<%			}%>
@


1.9
log
@#116031 avoid hardcoded class names in templates
@
text
@d22 1
a22 1
		FeatureModelFacet modelFacet = (FeatureModelFacet) ((GenLink) next).getModelFacet();
d28 1
a28 1
	public static final String <%=((GenLink) next).getUniqueIdentifier()%> = "<%=modelFacet.getMetaFeature().getName()%>Link";
d54 1
a54 1
		public static final String <%=AccessUtil.getLabelTextId(label)%> = "<%=label.getMetaFeature().getName()%>Text";
a74 2
				String id = AccessUtil.getCompartmentId(compartment);
				if (id != null && id.length() > 0) {
d80 1
a80 1
		public static final String <%=id%> = "<%=compartment.getTitle()%>";
a81 1
				}
d110 1
a110 1
		public static final String <%=AccessUtil.getLabelId(label)%> = "<%=label.getMetaFeature().getName()%>Label";
d115 1
a115 1
		public static final String <%=AccessUtil.getLabelTextId(label)%> = "<%=label.getMetaFeature().getName()%>Text";
@


1.8
log
@#115972 generate single class with semantic hints
@
text
@d12 1
a12 1
public class <%=importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName())%> {
d17 1
a17 1
	private <%=importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName())%>() {}
@


1.7
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d3 1
a3 2
<%GenCommonBase genElement = (GenCommonBase) argument;%>
<%GenDiagram genDiagram = genElement.getDiagram();%>
d6 3
d12 1
a12 1
public class <%=AccessUtil.getSemanticHintsClassName(genElement)%> {
d17 1
a17 1
	private <%=AccessUtil.getSemanticHintsClassName(genElement)%>() {}
d19 4
a22 2
if (genElement instanceof GenLink && ((GenLink) genElement).getModelFacet() instanceof FeatureModelFacet) {
	FeatureModelFacet modelFacet = (FeatureModelFacet) ((GenLink) genElement).getModelFacet();
d28 1
a28 1
	public static final String VIEW_TYPE = "<%=modelFacet.getMetaFeature().getName()%>Link";
d30 5
a34 5
}
if (genElement instanceof GenNode) {
	GenNode genNode = (GenNode) genElement;
	List labels = genNode.getLabels();
	if (!labels.isEmpty()) {
d40 1
a40 1
	public static class Labels {
d45 1
a45 1
		private Labels() {}
d47 2
a48 2
		for (int i = 0; i < labels.size(); i++) {
			GenNodeLabel label = (GenNodeLabel) labels.get(i);
d55 1
a55 1
<%		}%>
d58 3
a60 3
	}
	List compartments = genNode.getCompartments();
	if (!compartments.isEmpty()) {
d66 1
a66 1
	public static class Compartments {
d71 1
a71 1
		private Compartments() {}
d73 4
a76 4
		for (int i = 0; i < compartments.size(); i++) {
			GenCompartment compartment = (GenCompartment) compartments.get(i);
			String id = AccessUtil.getCompartmentId(compartment);
			if (id != null && id.length() > 0) {
d84 1
a85 1
		}
d89 5
a93 5
	}
} else if (genElement instanceof GenLink) {
	GenLink genLink = (GenLink) genElement;
	List labels = genLink.getLabels();
	if (!labels.isEmpty()) {
d99 1
a99 1
	public static class Labels {
d104 1
a104 1
		private Labels() {}
d106 2
a107 2
		for (int i = 0; i < labels.size(); i++) {
			GenLinkLabel label = (GenLinkLabel) labels.get(i);
d119 1
a119 1
<%		}%>
d122 1
d127 1
@


1.6
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@d55 1
a55 1
	List compartments = genNode.getChildContainers();
d70 1
a70 1
			GenChildContainer compartment = (GenChildContainer) compartments.get(i);
d78 1
a78 1
		public static final String <%=id%> = "<%=compartment.getGroupID()%>";
@


1.5
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d3 1
a3 1
<%GenBaseElement genElement = (GenBaseElement) argument;%>
@


1.4
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d16 4
a19 1
<%if (genElement instanceof GenLinkReferenceOnly) {%>
d24 1
a24 1
	public static final String VIEW_TYPE = "<%=((GenLinkReferenceOnly) genElement).getDomainLinkTargetFeature().getName()%>Link";
@


1.3
log
@[dstadnik] #112174 and #112185 - constants for compartments and labels
@
text
@d26 26
d55 1
d83 1
a83 2
}
if (genElement instanceof GenLink) {
d88 1
d100 1
a100 1
			LinkLabel label = (LinkLabel) labels.get(i);
d106 1
a106 1
		public static final String <%=AccessUtil.getLinkLabelId(label)%> = "<%=label.getDomainMetaFeature().getName()%>Label";
d111 2
a112 4
		public static final String <%=AccessUtil.getLinkLabelTextId(label)%> = "<%=label.getDomainMetaFeature().getName()%>Text";
<%
		}
%>
a116 1
if (genElement.hasNameToEdit()) {
a117 6

	/**
	 * @@generated
	 */
	public static final String <%=AccessUtil.getNameSemanticHint(genElement)%> = "<%=AccessUtil.getNameSemanticHint(genElement)%>Feature";
<%}%>
@


1.2
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
d11 5
d24 68
@


1.1
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d11 10
a20 1
<%if (genElement.hasNameToEdit()) {%>
@

