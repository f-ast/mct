head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2006.02.16.10.30.35;	author ashatalin;	state dead;
branches;
next	1.5;

1.5
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.10.17.21.40;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.19.13.19.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@#127696
Templates should use new transaction API
(not finished)
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="MetamodelSupportProviderGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%GenDiagram diagram = (GenDiagram) ((Object[]) argument)[0];%>
package <%=diagram.getProvidersPackageName()%>;

<%ImportUtil importManager = new ImportUtil(diagram.getProvidersPackageName());%>
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.emf.core.services.metamodel.GetMetamodelSupportOperation;
import org.eclipse.gmf.runtime.emf.core.services.metamodel.IMetamodelSupport;
import org.eclipse.gmf.runtime.emf.core.services.metamodel.IMetamodelSupportProvider;
import org.eclipse.gmf.runtime.notation.providers.internal.semproc.NotationSemProc;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=diagram.getMetamodelSupportProviderClassName()%> extends AbstractProvider implements IMetamodelSupportProvider {

	/**
	 * @@generated
	 */
	private IMetamodelSupport support;

	/**
	 * @@generated
	 */
	public IMetamodelSupport getMetamodelSupport(EPackage ePackage) {
		if (support == null) {
			support = new MetamodelSupportImpl();
		}
		return support;
	}

	/**
	 * @@generated
	 */
	public boolean provides(IOperation operation) {
		if (operation instanceof GetMetamodelSupportOperation) {
			return <%=diagram.getMetaPackageName(importManager)%>.eINSTANCE == ((GetMetamodelSupportOperation) operation).getEPackage();
		}
		return false;
	}

	/**
	 * @@generated
	 */
	public class MetamodelSupportImpl implements IMetamodelSupport {

		/**
		 * @@generated
		 */
		public boolean canDestroy(EObject eObject) {
			return true;
		}

		/**
		 * @@generated
		 */
		public boolean canContain(EClass eContainer, EReference eReference, EClass eClass) {
			return true;
		}

		/**
		 * @@generated
		 */
		public void handleEvent(Notification event) {
			NotationSemProc.handleEvent(event);
		}

		/**
		 * @@generated
		 */
		public void postProcess(EObject root) {}
	}
}
<%importManager.emitSortedImports();%>
@


1.5
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@@


1.4
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d3 1
a3 1
<%GenDiagram diagram = (GenDiagram) argument;%>
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d45 1
a45 1
			return <%=importManager.getImportedName(diagram.getDomainMetaModel().getQualifiedPackageInterfaceName())%>.eINSTANCE == ((GetMetamodelSupportOperation) operation).getEPackage();
@


1.2
log
@#115861
ChildNode could be created not only in the compartment, but directly in it's parent.
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.1
log
@[dstadnik] #112900 metamodel support
@
text
@d45 1
a45 1
			return <%=importManager.getImportedName(diagram.getDomainMetaModel().getQualifiedPackageClassName())%>.eINSTANCE == ((GetMetamodelSupportOperation) operation).getEPackage();
@

