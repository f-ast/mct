head	1.21;
access;
symbols
	v20081022-1925:1.21
	v20081015-1925:1.21
	v20081008-1925:1.21
	v20081001-1925:1.21
	v20080924-1925:1.21
	v20080917-1925:1.21
	v20080911-1728:1.21
	v20080910-1520:1.21
	v20080903-1520:1.21
	v20080827-1520:1.21
	v20080813-1520:1.21
	v20080806-1520:1.21
	v20070420-1000:1.19
	v20070413-1300:1.18
	v20070405-1100:1.18
	v20070403-1500:1.18
	v20070330-1300:1.18
	v20060330-1300:1.18
	v20070322-1100:1.18
	v20060316-0600:1.18
	v20070307-0700:1.18
	v20070301-1200:1.18
	v20070228-2000:1.18
	v20070221-1500:1.18
	v20070208-1800:1.18
	v20070202-0200:1.18
	v20070103-0300:1.18
	M4_20:1.18
	v20061222-1800:1.18
	v20061218-1200:1.18
	v20061214-0000:1.18
	v20061120-1300:1.18
	M3_20:1.18
	v20061117-0800:1.18
	v20061027-1200:1.18
	v20061020-1000:1.18
	v20061013-1330:1.18
	v20060919-0800:1.18
	v20060907-1100:1.18
	M1_20:1.18
	v20060904-1500:1.18
	v20060824-1600:1.18
	v20060817-1500:1.18
	v20060728-0500:1.18
	v20060713-1700:1.18
	R1_0_maintenance:1.18.0.2
	R1_0:1.18
	v20060627-1200:1.18
	v20060626-1420:1.18
	v20060620-0400:1.18
	v20060616-1400:1.18
	v20060616-1200:1.18
	v20060609-1400:1.18
	v20060531-1730:1.16
	v20060530-1930:1.16
	v20060526-1200:1.15
	v20060519-1300:1.15
	v20060519-0800:1.15
	v20060512-1000:1.14
	I20060512-1000:1.14
	I20060505-1400:1.14
	I20060428-1300:1.14
	I20060424-0500:1.14
	I20060424-0300:1.14
	M6_10:1.14
	I20060407-1200:1.11
	I20060331-1000:1.10
	I20060324-0300:1.10
	I20060317-1300:1.10
	I20060317-1200:1.10
	I20060316-1300:1.10
	I20060309-1300:1.10
	M5_10:1.9
	S20060303-1600:1.9
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.3
	I20060202-1415:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.21
date	2007.04.27.09.26.27;	author dstadnik;	state dead;
branches;
next	1.20;
commitid	4a7d4631c1c24567;

1.20
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.19;
commitid	78b462dc68e4567;

1.19
date	2007.04.17.10.12.45;	author dstadnik;	state Exp;
branches;
next	1.18;
commitid	495e46249d9c4567;

1.18
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.11;

1.11
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.07.15.45.29;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.15.13.27.40;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.14.13.06.38;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.06.11.34.23;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.01.11.04.26;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.31.11.00.48;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.21
log
@rewrite StructuralFeaturesParser in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class StructuralFeaturesParserGenerator
{
  protected static String nl;
  public static synchronized StructuralFeaturesParserGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    StructuralFeaturesParserGenerator result = new StructuralFeaturesParserGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.text.FieldPosition;" + NL + "import java.text.MessageFormat;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.emf.transaction.util.TransactionUtil;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate List features;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_8 = "(List features) {" + NL + "\t\tthis.features = features;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getStringByPattern(IAdaptable adapter, int flags, String pattern, MessageFormat processor) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tList values = new ArrayList(features.size());" + NL + "\t\tfor (Iterator it = features.iterator(); it.hasNext();) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) it.next();" + NL + "\t\t\tObject value = element.eGet(feature);" + NL + "\t\t\tvalue = getValidValue(feature, value);" + NL + "\t\t\tvalues.add(value);" + NL + "\t\t}" + NL + "\t\treturn processor.format(values.toArray(new Object[values.size()]), new StringBuffer(), new FieldPosition(0)).toString();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParserEditStatus validateNewValues(Object[] values) {" + NL + "\t\tif (values.length != features.size()) {" + NL + "\t\t\treturn ParserEditStatus.UNEDITABLE_STATUS;" + NL + "\t\t}" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tObject value = getValidNewValue((EStructuralFeature) features.get(i), values[i]);" + NL + "\t\t\tif (value instanceof InvalidValue) {" + NL + "\t\t\t\treturn new ParserEditStatus(";
  protected final String TEXT_9 = ".ID," + NL + "\t\t\t\t\tIParserEditStatus.UNEDITABLE, value.toString());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn ParserEditStatus.EDITABLE_STATUS;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ICommand getParseCommand(IAdaptable adapter, Object[] values) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tTransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(element);" + NL + "\t\tif (editingDomain == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tCompositeTransactionalCommand command = new CompositeTransactionalCommand(editingDomain, \"Set Values\"); //$NON-NLS-1$" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) features.get(i);" + NL + "\t\t\tcommand.compose(getModificationCommand(element, feature, values[i]));" + NL + "\t\t}" + NL + "\t\treturn command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isAffectingEvent(Object event, int flags) {" + NL + "\t\tif (event instanceof Notification) {" + NL + "\t\t\tObject feature = ((Notification) event).getFeature();" + NL + "\t\t\tif (features.contains(feature)) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getStructuralFeaturesParserClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(genDiagram.getAbstractParserQualifiedClassName()));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getStructuralFeaturesParserClassName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_10);
    return stringBuffer.toString();
  }
}
@


1.20
log
@follow consisted spacing policy
@
text
@@


1.19
log
@override correct methods
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d42 1
a42 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.18
log
@header comment should not be a javadoc comment
@
text
@d25 1
a25 1
  protected final String TEXT_8 = "(List features) {" + NL + "\t\tthis.features = features;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getStringByPattern(IAdaptable adapter, int flags, String pattern, MessageFormat processor) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tList values = new ArrayList(features.size());" + NL + "\t\tfor (Iterator it = features.iterator(); it.hasNext();) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) it.next();" + NL + "\t\t\tObject value = element.eGet(feature);" + NL + "\t\t\tvalue = getValidValue(feature, value);" + NL + "\t\t\tvalues.add(value);" + NL + "\t\t}" + NL + "\t\treturn processor.format(values.toArray(new Object[values.size()]), new StringBuffer(), new FieldPosition(0)).toString();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParserEditStatus validateValues(Object[] values) {" + NL + "\t\tif (values.length != features.size()) {" + NL + "\t\t\treturn ParserEditStatus.UNEDITABLE_STATUS;" + NL + "\t\t}" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tObject value = getValidNewValue((EStructuralFeature) features.get(i), values[i]);" + NL + "\t\t\tif (value instanceof InvalidValue) {" + NL + "\t\t\t\treturn new ParserEditStatus(";
@


1.17
log
@fix some nls markers
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.16
log
@Correcting copyright processing
@
text
@d26 1
a26 1
  protected final String TEXT_9 = ".ID," + NL + "\t\t\t\t\tIParserEditStatus.UNEDITABLE, value.toString());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn ParserEditStatus.EDITABLE_STATUS;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ICommand getParseCommand(IAdaptable adapter, Object[] values) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tTransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(element);" + NL + "\t\tif (editingDomain == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tCompositeTransactionalCommand command = new CompositeTransactionalCommand(editingDomain, \"Set Values\");" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) features.get(i);" + NL + "\t\t\tcommand.compose(getModificationCommand(element, feature, values[i]));" + NL + "\t\t}" + NL + "\t\treturn command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isAffectingEvent(Object event, int flags) {" + NL + "\t\tif (event instanceof Notification) {" + NL + "\t\t\tObject feature = ((Notification) event).getFeature();" + NL + "\t\t\tif (features.contains(feature)) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
@


1.15
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d42 1
a42 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.14
log
@using M6 to generate code.
@
text
@d21 7
a27 9
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import java.text.FieldPosition;" + NL + "import java.text.MessageFormat;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.emf.transaction.util.TransactionUtil;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ";
  protected final String TEXT_9 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate List features;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = "(List features) {" + NL + "\t\tthis.features = features;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getStringByPattern(IAdaptable adapter, int flags, String pattern, MessageFormat processor) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tList values = new ArrayList(features.size());" + NL + "\t\tfor (Iterator it = features.iterator(); it.hasNext();) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) it.next();" + NL + "\t\t\tObject value = element.eGet(feature);" + NL + "\t\t\tvalue = getValidValue(feature, value);" + NL + "\t\t\tvalues.add(value);" + NL + "\t\t}" + NL + "\t\treturn processor.format(values.toArray(new Object[values.size()]), new StringBuffer(), new FieldPosition(0)).toString();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParserEditStatus validateValues(Object[] values) {" + NL + "\t\tif (values.length != features.size()) {" + NL + "\t\t\treturn ParserEditStatus.UNEDITABLE_STATUS;" + NL + "\t\t}" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tObject value = getValidNewValue((EStructuralFeature) features.get(i), values[i]);" + NL + "\t\t\tif (value instanceof InvalidValue) {" + NL + "\t\t\t\treturn new ParserEditStatus(";
  protected final String TEXT_11 = ".ID," + NL + "\t\t\t\t\tIParserEditStatus.UNEDITABLE, value.toString());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn ParserEditStatus.EDITABLE_STATUS;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ICommand getParseCommand(IAdaptable adapter, Object[] values) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tTransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(element);" + NL + "\t\tif (editingDomain == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tCompositeTransactionalCommand command = new CompositeTransactionalCommand(editingDomain, \"Set Values\");" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) features.get(i);" + NL + "\t\t\tcommand.compose(getModificationCommand(element, feature, values[i]));" + NL + "\t\t}" + NL + "\t\treturn command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isAffectingEvent(Object event, int flags) {" + NL + "\t\tif (event instanceof Notification) {" + NL + "\t\t\tObject feature = ((Notification) event).getFeature();" + NL + "\t\t\tif (features.contains(feature)) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
d32 4
a35 1
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d45 1
d47 1
a47 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d49 1
a49 1
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d51 1
a51 1
    importManager.markImportLocation(stringBuffer);
d55 1
a55 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getAbstractParserQualifiedClassName()));
d57 1
a57 1
    stringBuffer.append(genDiagram.getStructuralFeaturesParserClassName());
a58 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_11);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_12);
@


1.13
log
@restore generators
@
text
@d33 1
a33 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.12
log
@#134095 do not store compiled templates in cvs
@
text
@d33 1
a33 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.11
log
@Switching to eclipse M6.
@
text
@@


1.10
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d33 1
a33 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.9
log
@get editing domain from eobject
@
text
@d18 12
a29 9
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import java.text.FieldPosition;" + NL + "import java.text.MessageFormat;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.emf.transaction.util.TransactionUtil;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate List features;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(List features) {" + NL + "\t\tthis.features = features;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getStringByPattern(IAdaptable adapter, int flags, String pattern, MessageFormat processor) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tList values = new ArrayList(features.size());" + NL + "\t\tfor (Iterator it = features.iterator(); it.hasNext();) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) it.next();" + NL + "\t\t\tObject value = element.eGet(feature);" + NL + "\t\t\tvalue = getValidValue(feature, value);" + NL + "\t\t\tvalues.add(value);" + NL + "\t\t}" + NL + "\t\treturn processor.format(values.toArray(new Object[values.size()]), new StringBuffer(), new FieldPosition(0)).toString();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParserEditStatus validateValues(Object[] values) {" + NL + "\t\tif (values.length != features.size()) {" + NL + "\t\t\treturn ParserEditStatus.UNEDITABLE_STATUS;" + NL + "\t\t}" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tObject value = getValidNewValue((EStructuralFeature) features.get(i), values[i]);" + NL + "\t\t\tif (value instanceof InvalidValue) {" + NL + "\t\t\t\treturn new ParserEditStatus(";
  protected final String TEXT_8 = ".ID," + NL + "\t\t\t\t\tIParserEditStatus.UNEDITABLE, value.toString());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn ParserEditStatus.EDITABLE_STATUS;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ICommand getParseCommand(IAdaptable adapter, Object[] values) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tTransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(element);" + NL + "\t\tif (editingDomain == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tCompositeTransactionalCommand command = new CompositeTransactionalCommand(editingDomain, \"Set Values\");" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) features.get(i);" + NL + "\t\t\tcommand.compose(getModificationCommand(element, feature, values[i]));" + NL + "\t\t}" + NL + "\t\treturn command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isAffectingEvent(Object event, int flags) {" + NL + "\t\tif (event instanceof Notification) {" + NL + "\t\t\tObject feature = ((Notification) event).getFeature();" + NL + "\t\t\tif (features.contains(feature)) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d36 9
d46 1
a46 1
    stringBuffer.append(TEXT_2);
d48 1
a48 1
    stringBuffer.append(TEXT_3);
d50 1
a50 1
    stringBuffer.append(TEXT_4);
d52 1
a52 1
    stringBuffer.append(TEXT_5);
d54 1
a54 1
    stringBuffer.append(TEXT_6);
d56 1
a56 1
    stringBuffer.append(TEXT_7);
d58 1
a58 1
    stringBuffer.append(TEXT_8);
d60 1
a60 1
    stringBuffer.append(TEXT_9);
@


1.8
log
@use new transactional emf api
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import java.text.FieldPosition;" + NL + "import java.text.MessageFormat;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;";
d25 1
a25 1
  protected final String TEXT_8 = ".ID," + NL + "\t\t\t\t\tIParserEditStatus.UNEDITABLE, value.toString());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn ParserEditStatus.EDITABLE_STATUS;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ICommand getParseCommand(IAdaptable adapter, Object[] values) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tCompositeTransactionalCommand command = new CompositeTransactionalCommand(getEditingDomain(), \"Set Values\");" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) features.get(i);" + NL + "\t\t\tcommand.compose(getModificationCommand(element, feature, values[i]));" + NL + "\t\t}" + NL + "\t\treturn command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isAffectingEvent(Object event, int flags) {" + NL + "\t\tif (event instanceof Notification) {" + NL + "\t\t\tObject feature = ((Notification) event).getFeature();" + NL + "\t\t\tif (features.contains(feature)) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
@


1.7
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import java.text.FieldPosition;" + NL + "import java.text.MessageFormat;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;";
d25 1
a25 1
  protected final String TEXT_8 = ".ID," + NL + "\t\t\t\t\tIParserEditStatus.UNEDITABLE, value.toString());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn ParserEditStatus.EDITABLE_STATUS;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ICommand getParseCommand(IAdaptable adapter, Object[] values) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tCompositeModelCommand command = new CompositeModelCommand(\"Set Values\");" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) features.get(i);" + NL + "\t\t\tcommand.compose(getModificationCommand(element, feature, values[i]));" + NL + "\t\t}" + NL + "\t\treturn command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isAffectingEvent(Object event, int flags) {" + NL + "\t\tif (event instanceof Notification) {" + NL + "\t\t\tObject feature = ((Notification) event).getFeature();" + NL + "\t\t\tif (features.contains(feature)) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
@


1.6
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d31 1
a31 1
    GenDiagram genDiagram = (GenDiagram) argument;
@


1.5
log
@do not show 'null' for strings when they are not set in model
@
text
@d45 1
a45 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
@


1.4
log
@ImportManager moved to oeg.common
@
text
@d24 1
a24 1
  protected final String TEXT_7 = "(List features) {" + NL + "\t\tthis.features = features;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getStringByPattern(IAdaptable adapter, int flags, String pattern, MessageFormat processor) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tList values = new ArrayList(features.size());" + NL + "\t\tfor (Iterator it = features.iterator(); it.hasNext();) {" + NL + "\t\t\tObject value = element.eGet((EStructuralFeature) it.next());" + NL + "\t\t\tvalues.add(value);" + NL + "\t\t}" + NL + "\t\treturn processor.format(values.toArray(new Object[values.size()]), new StringBuffer(), new FieldPosition(0)).toString();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParserEditStatus validateValues(Object[] values) {" + NL + "\t\tif (values.length != features.size()) {" + NL + "\t\t\treturn ParserEditStatus.UNEDITABLE_STATUS;" + NL + "\t\t}" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tObject value = getValidNewValue((EStructuralFeature) features.get(i), values[i]);" + NL + "\t\t\tif (value instanceof InvalidValue) {" + NL + "\t\t\t\treturn new ParserEditStatus(";
@


1.3
log
@#121534 Support link labels based on attributes that are not strings
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.2
log
@#125729 Support labels based on multiple structural features
@
text
@d24 3
a26 2
  protected final String TEXT_7 = "(List features) {" + NL + "\t\tthis.features = features;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getStringByPattern(IAdaptable adapter, int flags, String pattern, MessageFormat processor) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tList values = new ArrayList(features.size());" + NL + "\t\tfor (Iterator it = features.iterator(); it.hasNext();) {" + NL + "\t\t\tObject value = element.eGet((EStructuralFeature) it.next());" + NL + "\t\t\tvalues.add(value);" + NL + "\t\t}" + NL + "\t\treturn processor.format(values.toArray(new Object[values.size()]), new StringBuffer(), new FieldPosition(0)).toString();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParserEditStatus validateNewValues(Object[] values) {" + NL + "\t\treturn values.length == features.size() ? ParserEditStatus.EDITABLE_STATUS : ParserEditStatus.UNEDITABLE_STATUS;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ICommand getParseCommand(IAdaptable adapter, Object[] newValues) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tCompositeModelCommand command = new CompositeModelCommand(\"Set Values\");" + NL + "\t\tfor (int i = 0; i < newValues.length; i++) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) features.get(i);" + NL + "\t\t\tcommand.compose(getModificationCommand(element, feature, newValues[i]));" + NL + "\t\t}" + NL + "\t\treturn command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isAffectingEvent(Object event, int flags) {" + NL + "\t\tif (event instanceof Notification) {" + NL + "\t\t\tObject feature = ((Notification) event).getFeature();" + NL + "\t\t\tif (features.contains(feature)) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
d45 2
d48 1
a48 1
    stringBuffer.append(TEXT_8);
@


1.1
log
@#125729 Support labels based on multiple structural features
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import java.text.MessageFormat;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;";
d24 1
a24 1
  protected final String TEXT_7 = "(List features) {" + NL + "\t\tthis.features = features;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getStringByPattern(IAdaptable adapter, int flags, String pattern) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tList values = new ArrayList(features.size());" + NL + "\t\tfor (Iterator it = features.iterator(); it.hasNext(); ) {" + NL + "\t\t\tObject value = element.eGet((EStructuralFeature) it.next());" + NL + "\t\t\tvalues.add(value);" + NL + "\t\t}" + NL + "\t\treturn MessageFormat.format(pattern, values.toArray(new Object[values.size()]));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParserEditStatus isValidEditString(IAdaptable element, String editString) {" + NL + "\t\treturn ParserEditStatus.EDITABLE_STATUS;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ICommand getParseCommand(IAdaptable adapter, String newString, int flags) {" + NL + "\t\tEObject element = (EObject) adapter.getAdapter(EObject.class);" + NL + "\t\tObject[] values = getValuesFromEditString(newString, getEditPattern());" + NL + "\t\tif (values.length != features.size()) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tCompositeCommand command = new CompositeCommand(\"Set Values\");" + NL + "\t\tfor (int i = 0; i < values.length; i++) {" + NL + "\t\t\tEStructuralFeature feature = (EStructuralFeature) features.get(i);" + NL + "\t\t\tSetRequest request = new SetRequest(element, feature, values[i]);" + NL + "\t\t\tcommand.compose(new SetValueCommand(request));" + NL + "\t\t}" + NL + "\t\treturn getModelCommand(command);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isAffectingEvent(Object event, int flags) {" + NL + "\t\tif (event instanceof Notification) {" + NL + "\t\t\tObject feature = ((Notification) event).getFeature();" + NL + "\t\t\tif (features.contains(feature)) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
@

