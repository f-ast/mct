head	1.24;
access;
symbols
	v20081022-1925:1.24
	v20081015-1925:1.24
	v20081008-1925:1.24
	v20081001-1925:1.24
	v20080924-1925:1.24
	v20080917-1925:1.24
	v20080911-1728:1.24
	v20080910-1520:1.24
	v20080903-1520:1.24
	v20080827-1520:1.24
	v20080813-1520:1.24
	v20080806-1520:1.24
	v20070601-1400:1.23
	v20070525-1500:1.23
	v20070520-1200:1.23
	v20070518-1300:1.22
	v20070504-1000:1.22
	v20070427-0600:1.22
	v20070420-1000:1.21
	v20070413-1300:1.21
	v20070405-1100:1.21
	v20070403-1500:1.21
	v20070330-1300:1.21
	v20060330-1300:1.21
	v20070322-1100:1.21
	v20060316-0600:1.21
	v20070307-0700:1.21
	v20070301-1200:1.21
	v20070228-2000:1.21
	v20070221-1500:1.21
	v20070208-1800:1.21
	v20070202-0200:1.21
	v20070103-0300:1.21
	M4_20:1.21
	v20061222-1800:1.21
	v20061218-1200:1.21
	v20061214-0000:1.21
	v20061120-1300:1.21
	M3_20:1.21
	v20061117-0800:1.21
	v20061027-1200:1.21
	v20061020-1000:1.21
	v20061013-1330:1.21
	v20060919-0800:1.21
	v20060907-1100:1.21
	M1_20:1.21
	v20060904-1500:1.21
	v20060824-1600:1.21
	v20060817-1500:1.21
	v20060728-0500:1.21
	v20060713-1700:1.21
	R1_0_maintenance:1.21.0.2
	R1_0:1.21
	v20060627-1200:1.21
	v20060626-1420:1.21
	v20060620-0400:1.18
	v20060616-1400:1.18
	v20060616-1200:1.18
	v20060609-1400:1.18
	v20060531-1730:1.16
	v20060530-1930:1.16
	v20060526-1200:1.15
	v20060519-1300:1.15
	v20060519-0800:1.15
	v20060512-1000:1.14
	I20060512-1000:1.14
	I20060505-1400:1.14
	I20060428-1300:1.14
	I20060424-0500:1.14
	I20060424-0300:1.14
	M6_10:1.13
	I20060407-1200:1.9
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.7
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.24
date	2007.06.04.12.58.12;	author dstadnik;	state dead;
branches;
next	1.23;
commitid	6a8946640c624567;

1.23
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.22;
commitid	7de14650454a4567;

1.22
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.21;
commitid	78b462dc68e4567;

1.21
date	2006.06.23.09.25.37;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.23.08.52.04;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.21.15.22.41;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.09.12.31.18;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.20.17.08.07;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.9;

1.9
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.07.15.45.29;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.08.12.28.12;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.24
log
@rewrite label view factories in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class LabelViewFactoryGenerator
{
  protected static String nl;
  public static synchronized LabelViewFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    LabelViewFactoryGenerator result = new LabelViewFactoryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import java.util.ArrayList;" + NL + "import java.util.List;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic View createView(IAdaptable semanticAdapter, View containerView, String semanticHint, int index, boolean persisted, PreferencesHint preferencesHint) {" + NL + "\t\tNode view = (Node) super.createView(semanticAdapter, containerView, semanticHint, index, persisted, preferencesHint);";
  protected final String TEXT_6 = NL + "\t\t";
  protected final String TEXT_7 = " location = (";
  protected final String TEXT_8 = ") view.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_9 = " mapMode = ";
  protected final String TEXT_10 = ".getMapMode(containerView.getDiagram().getMeasurementUnit());" + NL + "\t\tlocation.setX(mapMode.DPtoLP(";
  protected final String TEXT_11 = "));" + NL + "\t\tlocation.setY(mapMode.DPtoLP(";
  protected final String TEXT_12 = "));";
  protected final String TEXT_13 = NL + "\t\treturn view;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\tList styles = new ArrayList();";
  protected final String TEXT_14 = NL + "\t\tstyles.add(";
  protected final String TEXT_15 = ".eINSTANCE.createDescriptionStyle());";
  protected final String TEXT_16 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "}";
  protected final String TEXT_17 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenLabel genLabel = (GenLabel) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genLabel.getDiagram();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genLabel.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_5);
    
int x = 0;
int y = 0;
LabelOffsetAttributes labelOffset = (LabelOffsetAttributes) genLabel.getViewmap().find(LabelOffsetAttributes.class);
if (labelOffset != null) {
	x = labelOffset.getX();
	y = labelOffset.getY();
} else if (genLabel instanceof GenExternalNodeLabel) {
	y = 5;
}
if ((x != 0 || y != 0) && (genLabel instanceof GenLinkLabel || genLabel instanceof GenExternalNodeLabel)) {

    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Location"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Location"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.util.MeasurementUnitHelper"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(x);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(y);
    stringBuffer.append(TEXT_12);
    }
    stringBuffer.append(TEXT_13);
    if (genLabel.getModelFacet() instanceof DesignLabelModelFacet) {
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_15);
    }
    stringBuffer.append(TEXT_16);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_17);
    return stringBuffer.toString();
  }
}
@


1.23
log
@Anna Karyakina's migration fix
@
text
@@


1.22
log
@follow consisted spacing policy
@
text
@d18 17
a34 18
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.util.ArrayList;" + NL + "import java.util.List;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic View createView(IAdaptable semanticAdapter, View containerView, String semanticHint, int index, boolean persisted, PreferencesHint preferencesHint) {" + NL + "\t\tNode view = (Node) super.createView(semanticAdapter, containerView, semanticHint, index, persisted, preferencesHint);";
  protected final String TEXT_7 = NL + "\t\t";
  protected final String TEXT_8 = " location = (";
  protected final String TEXT_9 = ") view.getLayoutConstraint();" + NL + "\t\t";
  protected final String TEXT_10 = " mapMode = ";
  protected final String TEXT_11 = ".getMapMode(containerView.getDiagram().getMeasurementUnit());" + NL + "\t\tlocation.setX(mapMode.DPtoLP(";
  protected final String TEXT_12 = "));" + NL + "\t\tlocation.setY(mapMode.DPtoLP(";
  protected final String TEXT_13 = "));";
  protected final String TEXT_14 = NL + "\t\treturn view;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\tList styles = new ArrayList();";
  protected final String TEXT_15 = NL + "\t\tstyles.add(";
  protected final String TEXT_16 = ".eINSTANCE.createDescriptionStyle());";
  protected final String TEXT_17 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "}";
  protected final String TEXT_18 = NL;
a43 1
    stringBuffer.append(TEXT_1);
d48 2
a50 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d53 2
d56 1
a56 1
    importManager.markImportLocation(stringBuffer);
a57 2
    stringBuffer.append(genLabel.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_6);
d70 2
d75 1
a75 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Location"));
d77 1
a77 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode"));
d79 1
a79 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.util.MeasurementUnitHelper"));
d81 1
a81 1
    stringBuffer.append(x);
d83 1
a83 1
    stringBuffer.append(y);
d85 1
a85 1
    }
d87 1
a87 1
    if (genLabel.getModelFacet() instanceof DesignLabelModelFacet) {
d89 1
a89 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d91 1
a91 1
    }
a92 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_18);
@


1.21
log
@set labels offset in view factories
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d51 1
a51 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.20
log
@specify bottom offset in view factory
@
text
@d26 10
a35 7
  protected final String TEXT_9 = ") view.getLayoutConstraint();" + NL + "\t\tlocation.setY(";
  protected final String TEXT_10 = ".getMapMode(containerView.getDiagram().getMeasurementUnit()).DPtoLP(5));";
  protected final String TEXT_11 = NL + "\t\treturn view;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\tList styles = new ArrayList();";
  protected final String TEXT_12 = NL + "\t\tstyles.add(";
  protected final String TEXT_13 = ".eINSTANCE.createDescriptionStyle());";
  protected final String TEXT_14 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "}";
  protected final String TEXT_15 = NL;
d60 12
a71 1
    if (genLabel instanceof GenExternalNodeLabel) {
d77 2
a79 2
    stringBuffer.append(TEXT_10);
    }
d81 1
a81 1
    if (genLabel.getModelFacet() instanceof DesignLabelModelFacet) {
d83 1
a83 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d87 6
d94 1
a94 1
    stringBuffer.append(TEXT_15);
@


1.19
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d23 10
a32 7
  protected final String TEXT_6 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t}" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_7 = " styles = new ";
  protected final String TEXT_8 = "();";
  protected final String TEXT_9 = NL + "\t\tstyles.add(";
  protected final String TEXT_10 = ".eINSTANCE.createDescriptionStyle());";
  protected final String TEXT_11 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
d57 1
a57 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d59 1
a59 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d61 1
a61 1
    if (genLabel.getModelFacet() instanceof DesignLabelModelFacet) {
d63 1
a63 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d67 6
d74 1
a74 1
    stringBuffer.append(TEXT_12);
@


1.18
log
@#144683 It should be possible to modify label value on pure design diagram
@
text
@d23 7
a29 6
  protected final String TEXT_6 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t}";
  protected final String TEXT_7 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_8 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_9 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\treturn styles;" + NL + "\t}";
  protected final String TEXT_10 = NL + "}";
  protected final String TEXT_11 = NL;
d54 1
a54 1
    if (genLabel.getModelFacet() instanceof DesignLabelModelFacet) {
d56 1
a56 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d58 2
d61 1
a61 1
    stringBuffer.append(TEXT_9);
d63 1
a63 1
    stringBuffer.append(TEXT_10);
d65 1
a65 1
    stringBuffer.append(TEXT_11);
@


1.17
log
@header comment should not be a javadoc comment
@
text
@d23 6
a28 2
  protected final String TEXT_6 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;
d53 8
d62 1
a62 1
    stringBuffer.append(TEXT_7);
@


1.16
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.15
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d40 1
a40 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.14
log
@Removing obsolete code to get rid of compilation warnings.
@
text
@d21 4
a24 6
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d29 5
a33 2
    GenLabel genLabel = (GenLabel) ((Object[]) argument)[0];
    GenDiagram genDiagram = genLabel.getDiagram();
d43 1
d45 1
a45 1
    stringBuffer.append(genDiagram.getNotationViewFactoriesPackageName());
d47 1
a47 1
    ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());
d49 1
a49 1
    importManager.markImportLocation(stringBuffer);
a50 4
    stringBuffer.append(genLabel.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_8);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_9);
@


1.13
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d25 2
a26 3
  protected final String TEXT_8 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_9 = NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
d51 1
a51 1
    GenCommonBase genElement = genLabel;
a52 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_10);
@


1.12
log
@using M6 to generate code.
@
text
@d23 1
a23 1
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d26 2
a27 5
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"modelID\", \"";
  protected final String TEXT_11 = "\"); //$NON-NLS-1$" + NL + "annotation.getDetails().put(\"visualID\", \"";
  protected final String TEXT_12 = "\"); //$NON-NLS-1$" + NL + "\t}" + NL + "}";
  protected final String TEXT_13 = NL;
d54 1
a55 6
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genElement.getVisualID());
    stringBuffer.append(TEXT_12);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_13);
@


1.11
log
@restore generators
@
text
@d34 1
a34 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.10
log
@#134095 do not store compiled templates in cvs
@
text
@d34 1
a34 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.9
log
@Switching to eclipse M6.
@
text
@@


1.8
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d34 1
a34 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.7
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d23 1
a23 1
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d29 2
a30 6
  protected final String TEXT_12 = "\"); //$NON-NLS-1$";
  protected final String TEXT_13 = NL + "\t\tgetViewService().createNode(semanticAdapter, view," + NL + "\t\t\t";
  protected final String TEXT_14 = ".";
  protected final String TEXT_15 = "Labels.";
  protected final String TEXT_16 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());" + NL + "\t}" + NL + "}";
  protected final String TEXT_17 = NL;
d35 2
a36 2
    GenLabel label = (GenLabel) ((Object[]) argument)[0];
    GenDiagram genDiagram = label.getDiagram();
d53 1
a53 1
    stringBuffer.append(label.getNotationViewFactoryClassName());
d55 1
a55 1
    GenCommonBase genElement = label;
d62 1
a62 1
    String id = label instanceof GenLinkLabel ? ((GenLinkLabel) label).getLink().getUniqueIdentifier() : ((GenNodeLabel) label).getNode().getUniqueIdentifier();
a63 8
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(label.getSemanticHintFieldName());
    stringBuffer.append(TEXT_16);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_17);
@


1.6
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 17
a34 14
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"modelID\", \"";
  protected final String TEXT_8 = "\"); //$NON-NLS-1$" + NL + "annotation.getDetails().put(\"visualID\", \"";
  protected final String TEXT_9 = "\"); //$NON-NLS-1$";
  protected final String TEXT_10 = NL + "\t\tgetViewService().createNode(semanticAdapter, view," + NL + "\t\t\t";
  protected final String TEXT_11 = ".";
  protected final String TEXT_12 = "Labels.";
  protected final String TEXT_13 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());" + NL + "\t}" + NL + "}";
  protected final String TEXT_14 = NL;
d42 4
a45 1
    stringBuffer.append(genDiagram.getNotationViewFactoriesPackageName());
d47 1
a47 1
    ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());
d49 1
a49 1
    importManager.markImportLocation(stringBuffer);
d51 1
a51 1
    stringBuffer.append(label.getNotationViewFactoryClassName());
d53 1
a53 1
    GenCommonBase genElement = label;
d55 1
d57 5
d63 1
a63 1
    stringBuffer.append(TEXT_8);
d65 1
a65 1
    stringBuffer.append(TEXT_9);
d67 1
a67 1
    stringBuffer.append(TEXT_10);
d69 1
a69 1
    stringBuffer.append(TEXT_11);
d71 1
a71 1
    stringBuffer.append(TEXT_12);
d73 1
a73 1
    stringBuffer.append(TEXT_13);
d75 1
a75 1
    stringBuffer.append(TEXT_14);
@


1.5
log
@constant used throughout templates to identify diagram (genModel.getModelName) was extracted as explicit attribute
packagePrefix added
@
text
@d36 1
a36 1
    GenLabel label = (GenLabel) argument;
@


1.4
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d50 1
a50 1
    stringBuffer.append(genDiagram.getEditorGen().getDomainGenModel().getModelName());
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d50 1
a50 1
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
@


1.2
log
@#114178
Create shortcut functionality added
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.1
log
@#122054 support external node labels (partial fix)
@
text
@d24 8
a31 7
  protected final String TEXT_7 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"VisualID\");" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"value\", \"";
  protected final String TEXT_8 = "\");";
  protected final String TEXT_9 = NL + "\t\tgetViewService().createNode(semanticAdapter, view," + NL + "\t\t\t";
  protected final String TEXT_10 = ".";
  protected final String TEXT_11 = "Labels.";
  protected final String TEXT_12 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());" + NL + "\t}" + NL + "}";
  protected final String TEXT_13 = NL;
d37 1
a37 1
    GenDiagram diagram = label.getDiagram();
d39 1
a39 1
    stringBuffer.append(diagram.getNotationViewFactoriesPackageName());
d41 1
a41 1
    ImportUtil importManager = new ImportUtil(diagram.getNotationViewFactoriesPackageName());
d50 2
d53 1
a53 1
    stringBuffer.append(TEXT_8);
a54 2
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(diagram.getSemanticHintsQualifiedClassName()));
d56 2
d59 1
a59 1
    stringBuffer.append(TEXT_11);
d61 1
a61 1
    stringBuffer.append(TEXT_12);
d63 1
a63 1
    stringBuffer.append(TEXT_13);
@

