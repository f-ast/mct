head	1.36;
access;
symbols
	v20081022-1925:1.36
	v20081015-1925:1.36
	v20081008-1925:1.36
	v20081001-1925:1.36
	v20080924-1925:1.36
	v20080917-1925:1.36
	v20080911-1728:1.36
	v20080910-1520:1.36
	v20080903-1520:1.36
	v20080827-1520:1.36
	v20080813-1520:1.36
	v20080806-1520:1.36
	v20070608-1300:1.35
	v20070605-1400:1.35
	v20070601-1400:1.34
	v20070525-1500:1.34
	v20070520-1200:1.34
	v20070518-1300:1.33
	v20070504-1000:1.33
	v20070427-0600:1.33
	v20070420-1000:1.32
	v20070413-1300:1.31
	v20070405-1100:1.30
	v20070403-1500:1.30
	v20070330-1300:1.30
	v20060330-1300:1.30
	v20070322-1100:1.30
	v20060316-0600:1.30
	v20070307-0700:1.30
	v20070301-1200:1.30
	v20070228-2000:1.30
	v20070221-1500:1.30
	v20070208-1800:1.30
	v20070202-0200:1.26
	v20070103-0300:1.29
	M4_20:1.29
	v20061222-1800:1.29
	v20061218-1200:1.29
	v20061214-0000:1.29
	v20061120-1300:1.27
	M3_20:1.27
	v20061117-0800:1.27
	v20061027-1200:1.26
	v20061020-1000:1.26
	v20061013-1330:1.27
	v20060919-0800:1.26
	v20060907-1100:1.26
	M1_20:1.26
	v20060904-1500:1.26
	v20060824-1600:1.26
	v20060817-1500:1.26
	v20060728-0500:1.26
	v20060713-1700:1.26
	R1_0_maintenance:1.26.0.2
	R1_0:1.26
	v20060627-1200:1.26
	v20060626-1420:1.26
	v20060620-0400:1.26
	v20060616-1400:1.26
	v20060616-1200:1.26
	v20060609-1400:1.26
	v20060531-1730:1.25
	v20060530-1930:1.25
	v20060526-1200:1.23
	v20060519-1300:1.23
	v20060519-0800:1.23
	v20060512-1000:1.21
	I20060512-1000:1.21
	I20060505-1400:1.21
	I20060428-1300:1.21
	I20060424-0500:1.21
	I20060424-0300:1.21
	M6_10:1.20
	I20060407-1200:1.17
	I20060331-1000:1.16
	I20060324-0300:1.16
	I20060317-1300:1.16
	I20060317-1200:1.16
	I20060316-1300:1.16
	I20060309-1300:1.16
	M5_10:1.15
	S20060303-1600:1.15
	I20060227-1730:1.14
	I20060216-1945:1.13
	I20060210-1715:1.12
	I20060209-1815:1.12
	I20060203-0830:1.8
	I20060202-1415:1.8
	I20060129-1145:1.8
	I20060127-0900:1.8
	I20060120-1530:1.7
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.5
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.36
date	2007.06.13.16.02.39;	author ashatalin;	state dead;
branches;
next	1.35;
commitid	314d4670151f4567;

1.35
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.34;
commitid	17ef46643bcf4567;

1.34
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.33;
commitid	7de14650454a4567;

1.33
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.32;
commitid	78b462dc68e4567;

1.32
date	2007.04.13.13.59.50;	author atikhomirov;	state Exp;
branches;
next	1.31;
commitid	37e3461f8cd54567;

1.31
date	2007.04.10.18.52.28;	author atikhomirov;	state Exp;
branches;
next	1.30;
commitid	58c0461bdcea4567;

1.30
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.29;
commitid	21cf45be38464567;

1.29
date	2006.12.11.18.42.43;	author ashatalin;	state Exp;
branches;
next	1.28;
commitid	34a457da6a14567;

1.28
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.27;
commitid	5f734567714f4567;

1.27
date	2006.09.15.21.46.16;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.05.29.13.55.18;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.05.18.14.03.44;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.20.17.08.07;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.17;

1.17
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.03.15.34.18;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.17.12.02.06;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.14.13.58.45;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.08.00.17.45;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.06.11.52.36;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.23.19.58.06;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.05.15.01.14;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.28.16.09.46;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.11.15.38.06;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.08.16.19.21;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.36
log
@[192464] - Convert /policies/CompartmentItemSemapticEditPolicy and DiagramItemSemanticEditPolicy .javajet template to xpand
@
text
@package org.eclipse.gmf.codegen.templates.policies;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class DiagramItemSemanticEditPolicyGenerator {
 
  protected static String nl;
  public static synchronized DiagramItemSemanticEditPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    DiagramItemSemanticEditPolicyGenerator result = new DiagramItemSemanticEditPolicyGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_10 = " getCreateCommand(";
  protected final String TEXT_11 = " req) {";
  protected final String TEXT_12 = NL + "\t\tif (";
  protected final String TEXT_13 = ".";
  protected final String TEXT_14 = " == req.getElementType()) {";
  protected final String TEXT_15 = "\t\t" + NL + "\t\t\tif (req.getContainmentFeature() == null) {" + NL + "\t\t\t\treq.setContainmentFeature(";
  protected final String TEXT_16 = ".eINSTANCE.get";
  protected final String TEXT_17 = "()";
  protected final String TEXT_18 = "/* FIXME no containment feature found in the genmodel, toolsmith need to specify correct one here manually */";
  protected final String TEXT_19 = ");" + NL + "\t\t\t}";
  protected final String TEXT_20 = NL + "\t\t\treturn getGEFWrapper(new ";
  protected final String TEXT_21 = "(req));" + NL + "\t\t}";
  protected final String TEXT_22 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getGEFWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_23 = NL;

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
/*
	This template should be called only for non-design diagrams (domainDiagramElement != null) 
	because *ItemSemanticEditPolicy responsible for dealing with semantic model 
	elements and meaningless (should not be generated) for pure design diagrams.  
*/

final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getItemSemanticEditPolicyClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_6);
    Collection<GenTopLevelNode> childNodes = genDiagram.getTopLevelNodes();
    stringBuffer.append(TEXT_7);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
    stringBuffer.append(TEXT_11);
    for (Iterator<? extends GenNode> nodes = childNodes.iterator(); nodes.hasNext(); ) {
	GenNode genChildNode = nodes.next();
	TypeModelFacet modelFacet = genChildNode.getModelFacet();
	if (modelFacet == null) {
		continue;
	}
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(genChildNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_14);
    	if (!modelFacet.isPhantomElement()) {
    stringBuffer.append(TEXT_15);
    if (modelFacet.getContainmentMetaFeature() != null) {
    stringBuffer.append(importManager.getImportedName(modelFacet.getContainmentMetaFeature().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(modelFacet.getContainmentMetaFeature().getFeatureAccessorName());
    stringBuffer.append(TEXT_17);
    										} else {
    stringBuffer.append(TEXT_18);
    }
    stringBuffer.append(TEXT_19);
    	}
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName(genChildNode.getCreateCommandQualifiedClassName()));
    stringBuffer.append(TEXT_21);
    }
    stringBuffer.append(TEXT_22);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_23);
    return stringBuffer.toString();
  }
}@


1.35
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.34
log
@Anna Karyakina's migration fix
@
text
@d19 1
a19 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.33
log
@follow consisted spacing policy
@
text
@d20 7
a26 7
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {";
d28 15
a42 16
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_11 = " getCreateCommand(";
  protected final String TEXT_12 = " req) {";
  protected final String TEXT_13 = NL + "\t\tif (";
  protected final String TEXT_14 = ".";
  protected final String TEXT_15 = " == req.getElementType()) {";
  protected final String TEXT_16 = "\t\t" + NL + "\t\t\tif (req.getContainmentFeature() == null) {" + NL + "\t\t\t\treq.setContainmentFeature(";
  protected final String TEXT_17 = ".eINSTANCE.get";
  protected final String TEXT_18 = "()";
  protected final String TEXT_19 = "/* FIXME no containment feature found in the genmodel, toolsmith need to specify correct one here manually */";
  protected final String TEXT_20 = ");" + NL + "\t\t\t}";
  protected final String TEXT_21 = NL + "\t\t\treturn getGEFWrapper(new ";
  protected final String TEXT_22 = "(req));" + NL + "\t\t}";
  protected final String TEXT_23 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getGEFWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_24 = NL;
a158 1
    stringBuffer.append(TEXT_1);
d163 2
a165 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d168 2
d171 1
a171 1
    importManager.markImportLocation(stringBuffer);
d173 1
a173 1
    stringBuffer.append(genDiagram.getItemSemanticEditPolicyClassName());
d175 1
a175 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName()));
a176 1
    Collection<GenTopLevelNode> childNodes = genDiagram.getTopLevelNodes();
d179 1
d181 1
a181 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a182 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
    stringBuffer.append(TEXT_12);
d189 2
d192 1
a192 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d194 1
a194 1
    stringBuffer.append(genChildNode.getUniqueIdentifier());
a195 2
    	if (!modelFacet.isPhantomElement()) {
    stringBuffer.append(TEXT_16);
d198 2
d201 1
a201 1
    stringBuffer.append(modelFacet.getContainmentMetaFeature().getFeatureAccessorName());
d203 1
a203 1
    										} else {
d205 1
a205 1
    }
d207 1
a207 1
    	}
d209 1
a209 1
    stringBuffer.append(importManager.getImportedName(genChildNode.getCreateCommandQualifiedClassName()));
d211 1
a211 1
    }
a212 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_24);
@


1.32
log
@renamed getMSLWrapper into getGEFWrapper to better reflect what's going on and to avoid unknown acronym
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d166 1
a166 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.31
log
@[181771] Generator should tolerate absence of both containment and child meta features
@
text
@d40 1
a40 1
  protected final String TEXT_21 = NL + "\t\t\treturn getMSLWrapper(new ";
d42 1
a42 1
  protected final String TEXT_23 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
@


1.30
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@d37 7
a43 5
  protected final String TEXT_18 = "());" + NL + "\t\t\t}";
  protected final String TEXT_19 = NL + "\t\t\treturn getMSLWrapper(new ";
  protected final String TEXT_20 = "(req));" + NL + "\t\t}";
  protected final String TEXT_21 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_22 = NL;
d177 1
a177 1
    Collection childNodes = genDiagram.getTopLevelNodes();
d185 2
a186 2
    for (Iterator nodes = childNodes.iterator(); nodes.hasNext(); ) {
	GenNode genChildNode = (GenNode) nodes.next();
d198 1
d203 4
d208 1
a208 1
    stringBuffer.append(TEXT_19);
d210 1
a210 1
    stringBuffer.append(TEXT_20);
d212 1
a212 1
    stringBuffer.append(TEXT_21);
d214 1
a214 1
    stringBuffer.append(TEXT_22);
@


1.29
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d40 2
a41 3
  protected final String TEXT_21 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}";
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_23 = NL;
d149 6
d175 1
a175 5
    
Collection childNodes = genDiagram.getTopLevelNodes();
GenClass containerGenClass = genDiagram.getDomainDiagramElement();
if (containerGenClass != null) {

d206 1
a206 1
    }
a207 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_23);
@


1.28
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d35 8
a42 64
  protected final String TEXT_16 = "\t\t" + NL + "\t\t\t";
  protected final String TEXT_17 = " container = (";
  protected final String TEXT_18 = ") (req.getContainer() instanceof ";
  protected final String TEXT_19 = " ? ((";
  protected final String TEXT_20 = ") req.getContainer()).getElement() : req.getContainer());";
  protected final String TEXT_21 = NL + "\t\t\tif (";
  protected final String TEXT_22 = " != null) {";
  protected final String TEXT_23 = NL + "\t\t\tif (";
  protected final String TEXT_24 = ".size() >= ";
  protected final String TEXT_25 = ") {";
  protected final String TEXT_26 = NL + "\t\t\t\treturn super.getCreateCommand(req);" + NL + "\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\tif (";
  protected final String TEXT_28 = " != null) {";
  protected final String TEXT_29 = NL + "\t\t\tif (";
  protected final String TEXT_30 = ".size() >= ";
  protected final String TEXT_31 = ") {";
  protected final String TEXT_32 = NL + "\t\t\t\treturn super.getCreateCommand(req);" + NL + "\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\tif (req.getContainmentFeature() == null) {" + NL + "\t\t\t\treq.setContainmentFeature(";
  protected final String TEXT_34 = ".eINSTANCE.get";
  protected final String TEXT_35 = "());" + NL + "\t\t\t}";
  protected final String TEXT_36 = NL + "\t\t\treturn getMSLWrapper(new Create";
  protected final String TEXT_37 = "Command(req));" + NL + "\t\t}";
  protected final String TEXT_38 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_40 = "Command extends ";
  protected final String TEXT_41 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_42 = "Command(";
  protected final String TEXT_43 = " req) {" + NL + "\t\t\tsuper(req);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_44 = " getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_45 = ".eINSTANCE.get";
  protected final String TEXT_46 = "();" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_47 = " getElementToEdit() {" + NL + "\t\t\t";
  protected final String TEXT_48 = " container = ((";
  protected final String TEXT_49 = ") getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof ";
  protected final String TEXT_50 = ") {" + NL + "\t\t\t\tcontainer = ((";
  protected final String TEXT_51 = ") container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}";
  protected final String TEXT_52 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_53 = " doDefaultElementCreation() {" + NL + "\t\t\t";
  protected final String TEXT_54 = " newElement = (";
  protected final String TEXT_55 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {";
  protected final String TEXT_56 = NL + "\t\t\t\t ";
  protected final String TEXT_57 = " container = (";
  protected final String TEXT_58 = ") getElementToEdit();" + NL + "\t\t\t\t if (container != null) {";
  protected final String TEXT_59 = NL + "\t\t\t\t\t";
  protected final String TEXT_60 = " featureValues = container.";
  protected final String TEXT_61 = "();" + NL + "\t\t\t\t\tfeatureValues.add(newElement);";
  protected final String TEXT_62 = NL + "\t\t\t\t \t";
  protected final String TEXT_63 = "newElement);";
  protected final String TEXT_64 = NL + "\t\t\t\t }";
  protected final String TEXT_65 = "\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_66 = ".Initializers.";
  protected final String TEXT_67 = ".init(newElement);";
  protected final String TEXT_68 = NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_69 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (getEClass() != null) {" + NL + "\t\t\t\treturn getEClass().isSuperTypeOf(getEClassToEdit());" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_70 = " getContainmentFeature() {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_71 = " doDefaultElementCreation() {" + NL + "\t\t\t// Uncomment to put \"phantom\" objects into the diagram file.\t\t" + NL + "\t\t\t//";
  protected final String TEXT_72 = " resource = ((";
  protected final String TEXT_73 = ") getRequest()).getContainer().eResource();" + NL + "\t\t\t//if (resource == null) {" + NL + "\t\t\t//\treturn null;" + NL + "\t\t\t//}" + NL + "\t\t\t";
  protected final String TEXT_74 = " resource = getElementToEdit().eResource();" + NL + "\t\t\t";
  protected final String TEXT_75 = " eClass = getElementType().getEClass();" + NL + "\t\t\t";
  protected final String TEXT_76 = " eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_77 = NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_79 = NL;
d182 1
a182 2
    
for (Iterator nodes = childNodes.iterator(); nodes.hasNext(); ) {
a187 1

d193 1
a193 10
    
	GenFeature containmentMetaFeature = modelFacet.getContainmentMetaFeature();
	GenFeature childMetaFeature = modelFacet.getChildMetaFeature();
	if (!modelFacet.isPhantomElement()) {
		int upperContainmentBound = containmentMetaFeature.getEcoreFeature().getUpperBound();
		int upperChildBound = childMetaFeature.getEcoreFeature().getUpperBound();
		boolean processChildMetafeature = !childMetaFeature.equals(containmentMetaFeature) && upperChildBound > 0;
		if (upperContainmentBound > 0 || processChildMetafeature) {
			String containerInterfaceName = importManager.getImportedName(containerGenClass.getQualifiedInterfaceName());

d195 1
a195 1
    stringBuffer.append(containerInterfaceName);
d197 1
a197 1
    stringBuffer.append(containerInterfaceName);
d199 1
a199 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d201 1
a201 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d203 1
a203 4
    
			if (upperContainmentBound > 0) {
				if (upperContainmentBound == 1) {

d205 1
a205 1
    stringBuffer.append(getFeatureValueGetter("container", containmentMetaFeature, false, importManager));
d207 1
a207 3
    
				} else {

a208 162
    stringBuffer.append(getFeatureValueGetter("container", containmentMetaFeature, false, importManager));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(upperContainmentBound);
    stringBuffer.append(TEXT_25);
    
				}

    stringBuffer.append(TEXT_26);
    
			}
		
			if (processChildMetafeature) {
				if (upperChildBound == 1) {

    stringBuffer.append(TEXT_27);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_28);
    
				} else {

    stringBuffer.append(TEXT_29);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(upperChildBound);
    stringBuffer.append(TEXT_31);
    
				}

    stringBuffer.append(TEXT_32);
    
			}
		}

    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(modelFacet.getContainmentMetaFeature().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(modelFacet.getContainmentMetaFeature().getFeatureAccessorName());
    stringBuffer.append(TEXT_35);
    
	}

    stringBuffer.append(TEXT_36);
    stringBuffer.append(genChildNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_37);
    
}

    stringBuffer.append(TEXT_38);
    
for (Iterator nodes = childNodes.iterator(); nodes.hasNext(); ) {
	GenNode genChildNode = (GenNode) nodes.next();
	TypeModelFacet modelFacet = genChildNode.getModelFacet();
	if (modelFacet == null) {
		continue;
	}

    stringBuffer.append(TEXT_39);
    stringBuffer.append(genChildNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(genChildNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName(containerGenClass.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(containerGenClass.getClassifierAccessorName());
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_51);
    
	boolean processChildMetafeature = !modelFacet.isPhantomElement() && !modelFacet.getChildMetaFeature().isDerived() && !modelFacet.getChildMetaFeature().equals(modelFacet.getContainmentMetaFeature());
	if (modelFacet.getModelElementInitializer() != null || processChildMetafeature) { 
		String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(metaClassName);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(metaClassName);
    stringBuffer.append(TEXT_55);
    
		if (processChildMetafeature) {
			String containerMetaClass = importManager.getImportedName(modelFacet.getChildMetaFeature().getGenClass().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_56);
    stringBuffer.append(containerMetaClass);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(containerMetaClass);
    stringBuffer.append(TEXT_58);
    
			if (modelFacet.getChildMetaFeature().isListType()) {

    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(modelFacet.getChildMetaFeature().getGetAccessor());
    stringBuffer.append(TEXT_61);
    
			} else {

    stringBuffer.append(TEXT_62);
    stringBuffer.append(getFeatureValueSetterPrefix("container", modelFacet.getChildMetaFeature(), false, importManager));
    stringBuffer.append(TEXT_63);
    
			}

    stringBuffer.append(TEXT_64);
    
		}
		if (modelFacet.getModelElementInitializer() != null) {

    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(genChildNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_67);
    
		}

    stringBuffer.append(TEXT_68);
    
	}
	
	if (modelFacet.isPhantomElement()) {

    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EReference"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_76);
    
	}

    stringBuffer.append(TEXT_77);
    }
    }
    stringBuffer.append(TEXT_78);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_79);
@


1.27
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d108 7
a114 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.26
log
@header comment should not be a javadoc comment
@
text
@d108 1
a108 1
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
@


1.25
log
@Correcting copyright processing
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.24
log
@avoid generating unused imports in pure pure design projects
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d209 1
a209 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.23
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d61 38
a98 35
  protected final String TEXT_42 = "Command(CreateElementRequest req) {" + NL + "\t\t\tsuper(req);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_43 = " getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_44 = ".eINSTANCE.get";
  protected final String TEXT_45 = "();" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_46 = " getElementToEdit() {" + NL + "\t\t\t";
  protected final String TEXT_47 = " container = ((CreateElementRequest) getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof ";
  protected final String TEXT_48 = ") {" + NL + "\t\t\t\tcontainer = ((";
  protected final String TEXT_49 = ") container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}";
  protected final String TEXT_50 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_51 = " doDefaultElementCreation() {" + NL + "\t\t\t";
  protected final String TEXT_52 = " newElement = (";
  protected final String TEXT_53 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {";
  protected final String TEXT_54 = NL + "\t\t\t\t ";
  protected final String TEXT_55 = " container = (";
  protected final String TEXT_56 = ") getElementToEdit();" + NL + "\t\t\t\t if (container != null) {";
  protected final String TEXT_57 = NL + "\t\t\t\t\t";
  protected final String TEXT_58 = " featureValues = container.";
  protected final String TEXT_59 = "();" + NL + "\t\t\t\t\tfeatureValues.add(newElement);";
  protected final String TEXT_60 = NL + "\t\t\t\t \t";
  protected final String TEXT_61 = "newElement);";
  protected final String TEXT_62 = NL + "\t\t\t\t }";
  protected final String TEXT_63 = "\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_64 = ".Initializers.";
  protected final String TEXT_65 = ".init(newElement);";
  protected final String TEXT_66 = NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_67 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (getEClass() != null) {" + NL + "\t\t\t\treturn getEClass().isSuperTypeOf(getEClassToEdit());" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_68 = " getContainmentFeature() {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_69 = " doDefaultElementCreation() {" + NL + "\t\t\t// Uncomment to put \"phantom\" objects into the diagram file.\t\t" + NL + "\t\t\t//";
  protected final String TEXT_70 = " resource = ((CreateElementRequest) getRequest()).getContainer().eResource();" + NL + "\t\t\t//if (resource == null) {" + NL + "\t\t\t//\treturn null;" + NL + "\t\t\t//}" + NL + "\t\t\t";
  protected final String TEXT_71 = " resource = getElementToEdit().eResource();" + NL + "\t\t\t";
  protected final String TEXT_72 = " eClass = getElementType().getEClass();" + NL + "\t\t\t";
  protected final String TEXT_73 = " eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_74 = NL + "\t}";
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_76 = NL;
d338 2
d341 1
a341 1
    stringBuffer.append(TEXT_43);
d343 1
a343 1
    stringBuffer.append(TEXT_44);
a344 2
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d348 4
d353 1
a353 1
    stringBuffer.append(TEXT_48);
d355 1
a355 1
    stringBuffer.append(TEXT_49);
d361 1
a361 1
    stringBuffer.append(TEXT_50);
d363 1
a363 1
    stringBuffer.append(TEXT_51);
d365 1
a365 1
    stringBuffer.append(TEXT_52);
d367 1
a367 1
    stringBuffer.append(TEXT_53);
d372 1
a372 1
    stringBuffer.append(TEXT_54);
d374 1
a374 1
    stringBuffer.append(TEXT_55);
d376 1
a376 1
    stringBuffer.append(TEXT_56);
d380 1
a380 1
    stringBuffer.append(TEXT_57);
d382 1
a382 1
    stringBuffer.append(TEXT_58);
d384 1
a384 1
    stringBuffer.append(TEXT_59);
d388 1
a388 1
    stringBuffer.append(TEXT_60);
d390 1
a390 1
    stringBuffer.append(TEXT_61);
d394 1
a394 1
    stringBuffer.append(TEXT_62);
d399 1
a399 1
    stringBuffer.append(TEXT_63);
d401 1
a401 1
    stringBuffer.append(TEXT_64);
d403 1
a403 1
    stringBuffer.append(TEXT_65);
d407 1
a407 1
    stringBuffer.append(TEXT_66);
d413 1
a413 1
    stringBuffer.append(TEXT_67);
d415 1
a415 1
    stringBuffer.append(TEXT_68);
d417 1
a417 1
    stringBuffer.append(TEXT_69);
d419 3
a421 1
    stringBuffer.append(TEXT_70);
d423 1
a423 1
    stringBuffer.append(TEXT_71);
d425 1
a425 1
    stringBuffer.append(TEXT_72);
d427 1
a427 1
    stringBuffer.append(TEXT_73);
d431 1
a431 1
    stringBuffer.append(TEXT_74);
d434 1
a434 1
    stringBuffer.append(TEXT_75);
d436 1
a436 1
    stringBuffer.append(TEXT_76);
@


1.22
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d232 4
a242 1
	TypeModelFacet modelFacet = genChildNode.getModelFacet();
d324 3
@


1.21
log
@Removing obsolete code to get rid of compilation warnings.
@
text
@d23 19
a41 19
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ";
  protected final String TEXT_9 = " {";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_13 = " getCreateCommand(";
  protected final String TEXT_14 = " req) {";
  protected final String TEXT_15 = NL + "\t\tif (";
  protected final String TEXT_16 = ".";
  protected final String TEXT_17 = " == req.getElementType()) {";
  protected final String TEXT_18 = "\t\t" + NL + "\t\t\t";
  protected final String TEXT_19 = " container = (";
  protected final String TEXT_20 = ") (req.getContainer() instanceof ";
  protected final String TEXT_21 = " ? ((";
  protected final String TEXT_22 = ") req.getContainer()).getElement() : req.getContainer());";
d43 5
a47 5
  protected final String TEXT_24 = " != null) {";
  protected final String TEXT_25 = NL + "\t\t\tif (";
  protected final String TEXT_26 = ".size() >= ";
  protected final String TEXT_27 = ") {";
  protected final String TEXT_28 = NL + "\t\t\t\treturn super.getCreateCommand(req);" + NL + "\t\t\t}";
d49 47
a95 49
  protected final String TEXT_30 = " != null) {";
  protected final String TEXT_31 = NL + "\t\t\tif (";
  protected final String TEXT_32 = ".size() >= ";
  protected final String TEXT_33 = ") {";
  protected final String TEXT_34 = NL + "\t\t\t\treturn super.getCreateCommand(req);" + NL + "\t\t\t}";
  protected final String TEXT_35 = NL + "\t\t\tif (req.getContainmentFeature() == null) {" + NL + "\t\t\t\treq.setContainmentFeature(";
  protected final String TEXT_36 = ".eINSTANCE.get";
  protected final String TEXT_37 = "());" + NL + "\t\t\t}";
  protected final String TEXT_38 = NL + "\t\t\treturn getMSLWrapper(new Create";
  protected final String TEXT_39 = "Command(req));" + NL + "\t\t}";
  protected final String TEXT_40 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_42 = "Command extends ";
  protected final String TEXT_43 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_44 = "Command(CreateElementRequest req) {" + NL + "\t\t\tsuper(req);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_45 = " getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_46 = ".eINSTANCE.get";
  protected final String TEXT_47 = "();" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_48 = " getElementToEdit() {" + NL + "\t\t\t";
  protected final String TEXT_49 = " container = ((CreateElementRequest) getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof ";
  protected final String TEXT_50 = ") {" + NL + "\t\t\t\tcontainer = ((";
  protected final String TEXT_51 = ") container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}";
  protected final String TEXT_52 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_53 = " doDefaultElementCreation() {" + NL + "\t\t\t";
  protected final String TEXT_54 = " newElement = (";
  protected final String TEXT_55 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {";
  protected final String TEXT_56 = NL + "\t\t\t\t ";
  protected final String TEXT_57 = " container = (";
  protected final String TEXT_58 = ") getElementToEdit();" + NL + "\t\t\t\t if (container != null) {";
  protected final String TEXT_59 = NL + "\t\t\t\t\t";
  protected final String TEXT_60 = " featureValues = container.";
  protected final String TEXT_61 = "();" + NL + "\t\t\t\t\tfeatureValues.add(newElement);";
  protected final String TEXT_62 = NL + "\t\t\t\t \t";
  protected final String TEXT_63 = "newElement);";
  protected final String TEXT_64 = NL + "\t\t\t\t }";
  protected final String TEXT_65 = "\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_66 = ".Initializers.";
  protected final String TEXT_67 = ".init(newElement);";
  protected final String TEXT_68 = NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_69 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (getEClass() != null) {" + NL + "\t\t\t\treturn getEClass().isSuperTypeOf(getEClassToEdit());" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_70 = " getContainmentFeature() {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_71 = " doDefaultElementCreation() {" + NL + "\t\t\t// Uncomment to put \"phantom\" objects into the diagram file.\t\t" + NL + "\t\t\t//";
  protected final String TEXT_72 = " resource = ((CreateElementRequest) getRequest()).getContainer().eResource();" + NL + "\t\t\t//if (resource == null) {" + NL + "\t\t\t//\treturn null;" + NL + "\t\t\t//}" + NL + "\t\t\t";
  protected final String TEXT_73 = " resource = getElementToEdit().eResource();" + NL + "\t\t\t";
  protected final String TEXT_74 = " eClass = getElementType().getEClass();" + NL + "\t\t\t";
  protected final String TEXT_75 = " eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_76 = NL + "\t}";
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_78 = NL;
d197 2
a198 1
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d209 1
d211 1
a211 1
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
d213 1
a213 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
d215 1
a215 1
    importManager.markImportLocation(stringBuffer);
a216 4
    stringBuffer.append(genDiagram.getItemSemanticEditPolicyClassName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_9);
d222 2
d225 1
d227 1
a228 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
    stringBuffer.append(TEXT_14);
d233 1
a233 1
    stringBuffer.append(TEXT_15);
d235 1
a235 1
    stringBuffer.append(TEXT_16);
d237 1
a237 1
    stringBuffer.append(TEXT_17);
d249 1
a249 1
    stringBuffer.append(TEXT_18);
d251 1
a251 1
    stringBuffer.append(TEXT_19);
d253 1
a253 1
    stringBuffer.append(TEXT_20);
d255 1
a255 1
    stringBuffer.append(TEXT_21);
d257 1
a257 1
    stringBuffer.append(TEXT_22);
d262 1
a262 1
    stringBuffer.append(TEXT_23);
d264 1
a264 1
    stringBuffer.append(TEXT_24);
d268 1
a268 1
    stringBuffer.append(TEXT_25);
d270 1
a270 1
    stringBuffer.append(TEXT_26);
d272 1
a272 1
    stringBuffer.append(TEXT_27);
d276 1
a276 1
    stringBuffer.append(TEXT_28);
d283 1
a283 1
    stringBuffer.append(TEXT_29);
d285 1
a285 1
    stringBuffer.append(TEXT_30);
d289 1
a289 1
    stringBuffer.append(TEXT_31);
d291 1
a291 1
    stringBuffer.append(TEXT_32);
d293 1
a293 1
    stringBuffer.append(TEXT_33);
d297 1
a297 1
    stringBuffer.append(TEXT_34);
d302 1
a302 1
    stringBuffer.append(TEXT_35);
d304 1
a304 1
    stringBuffer.append(TEXT_36);
d306 1
a306 1
    stringBuffer.append(TEXT_37);
d310 1
a310 1
    stringBuffer.append(TEXT_38);
d312 1
a312 1
    stringBuffer.append(TEXT_39);
d316 1
a316 1
    stringBuffer.append(TEXT_40);
d322 4
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand"));
d331 1
a331 1
    stringBuffer.append(genChildNode.getUniqueIdentifier());
d333 1
a333 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName(containerGenClass.getGenPackage().getQualifiedPackageInterfaceName()));
d337 1
a337 1
    stringBuffer.append(containerGenClass.getClassifierAccessorName());
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a342 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_51);
d348 1
a348 1
    stringBuffer.append(TEXT_52);
d350 1
a350 1
    stringBuffer.append(TEXT_53);
d352 1
a352 1
    stringBuffer.append(TEXT_54);
d354 1
a354 1
    stringBuffer.append(TEXT_55);
d359 1
a359 1
    stringBuffer.append(TEXT_56);
d361 1
a361 1
    stringBuffer.append(TEXT_57);
d363 1
a363 1
    stringBuffer.append(TEXT_58);
d367 1
a367 1
    stringBuffer.append(TEXT_59);
d369 1
a369 1
    stringBuffer.append(TEXT_60);
d371 1
a371 1
    stringBuffer.append(TEXT_61);
d375 1
a375 1
    stringBuffer.append(TEXT_62);
d377 1
a377 1
    stringBuffer.append(TEXT_63);
d381 1
a381 1
    stringBuffer.append(TEXT_64);
d386 1
a386 1
    stringBuffer.append(TEXT_65);
d388 1
a388 1
    stringBuffer.append(TEXT_66);
d390 1
a390 1
    stringBuffer.append(TEXT_67);
d394 1
a394 1
    stringBuffer.append(TEXT_68);
d400 1
a400 1
    stringBuffer.append(TEXT_69);
d402 1
a402 1
    stringBuffer.append(TEXT_70);
d404 1
a404 1
    stringBuffer.append(TEXT_71);
d406 1
a406 1
    stringBuffer.append(TEXT_72);
d408 1
a408 1
    stringBuffer.append(TEXT_73);
d410 1
a410 1
    stringBuffer.append(TEXT_74);
d412 1
a412 1
    stringBuffer.append(TEXT_75);
d416 1
a416 1
    stringBuffer.append(TEXT_76);
d419 1
a419 1
    stringBuffer.append(TEXT_77);
d421 1
a421 1
    stringBuffer.append(TEXT_78);
@


1.20
log
@using M6 to generate code.
@
text
@d94 4
a97 6
  protected final String TEXT_75 = " helper = ";
  protected final String TEXT_76 = ".getHelper(resource);" + NL + "\t\t\t";
  protected final String TEXT_77 = " eObject;" + NL + "\t\t\tif (helper != null) {" + NL + "\t\t\t\teObject = helper.create(eClass);" + NL + "\t\t\t} else {" + NL + "\t\t\t\teObject = eClass.getEPackage().getEFactoryInstance().create(eClass);" + NL + "\t\t\t}" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_78 = NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_80 = NL;
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.resources.IResourceHelper"));
a416 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.util.Util"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_77);
d420 1
a420 1
    stringBuffer.append(TEXT_78);
d423 1
a423 1
    stringBuffer.append(TEXT_79);
d425 1
a425 1
    stringBuffer.append(TEXT_80);
@


1.19
log
@restore generators
@
text
@d199 1
a199 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.18
log
@#134095 do not store compiled templates in cvs
@
text
@d199 1
a199 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.17
log
@Switching to eclipse M6.
@
text
@@


1.16
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d199 1
a199 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.15
log
@#127696 Templates should use new transaction API
In case of phantom nodes.
@
text
@d20 80
a99 77
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_10 = " getCreateCommand(";
  protected final String TEXT_11 = " req) {";
  protected final String TEXT_12 = NL + "\t\tif (";
  protected final String TEXT_13 = ".";
  protected final String TEXT_14 = " == req.getElementType()) {";
  protected final String TEXT_15 = "\t\t" + NL + "\t\t\t";
  protected final String TEXT_16 = " container = (";
  protected final String TEXT_17 = ") (req.getContainer() instanceof ";
  protected final String TEXT_18 = " ? ((";
  protected final String TEXT_19 = ") req.getContainer()).getElement() : req.getContainer());";
  protected final String TEXT_20 = NL + "\t\t\tif (";
  protected final String TEXT_21 = " != null) {";
  protected final String TEXT_22 = NL + "\t\t\tif (";
  protected final String TEXT_23 = ".size() >= ";
  protected final String TEXT_24 = ") {";
  protected final String TEXT_25 = NL + "\t\t\t\treturn super.getCreateCommand(req);" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\tif (";
  protected final String TEXT_27 = " != null) {";
  protected final String TEXT_28 = NL + "\t\t\tif (";
  protected final String TEXT_29 = ".size() >= ";
  protected final String TEXT_30 = ") {";
  protected final String TEXT_31 = NL + "\t\t\t\treturn super.getCreateCommand(req);" + NL + "\t\t\t}";
  protected final String TEXT_32 = NL + "\t\t\tif (req.getContainmentFeature() == null) {" + NL + "\t\t\t\treq.setContainmentFeature(";
  protected final String TEXT_33 = ".eINSTANCE.get";
  protected final String TEXT_34 = "());" + NL + "\t\t\t}";
  protected final String TEXT_35 = NL + "\t\t\treturn getMSLWrapper(new Create";
  protected final String TEXT_36 = "Command(req));" + NL + "\t\t}";
  protected final String TEXT_37 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}";
  protected final String TEXT_38 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_39 = "Command extends ";
  protected final String TEXT_40 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_41 = "Command(CreateElementRequest req) {" + NL + "\t\t\tsuper(req);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_42 = " getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_43 = ".eINSTANCE.get";
  protected final String TEXT_44 = "();" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_45 = " getElementToEdit() {" + NL + "\t\t\t";
  protected final String TEXT_46 = " container = ((CreateElementRequest) getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof ";
  protected final String TEXT_47 = ") {" + NL + "\t\t\t\tcontainer = ((";
  protected final String TEXT_48 = ") container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}";
  protected final String TEXT_49 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_50 = " doDefaultElementCreation() {" + NL + "\t\t\t";
  protected final String TEXT_51 = " newElement = (";
  protected final String TEXT_52 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {";
  protected final String TEXT_53 = NL + "\t\t\t\t ";
  protected final String TEXT_54 = " container = (";
  protected final String TEXT_55 = ") getElementToEdit();" + NL + "\t\t\t\t if (container != null) {";
  protected final String TEXT_56 = NL + "\t\t\t\t\t";
  protected final String TEXT_57 = " featureValues = container.";
  protected final String TEXT_58 = "();" + NL + "\t\t\t\t\tfeatureValues.add(newElement);";
  protected final String TEXT_59 = NL + "\t\t\t\t \t";
  protected final String TEXT_60 = "newElement);";
  protected final String TEXT_61 = NL + "\t\t\t\t }";
  protected final String TEXT_62 = "\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_63 = ".Initializers.";
  protected final String TEXT_64 = ".init(newElement);";
  protected final String TEXT_65 = NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_66 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (getEClass() != null) {" + NL + "\t\t\t\treturn getEClass().isSuperTypeOf(getEClassToEdit());" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_67 = " getContainmentFeature() {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_68 = " doDefaultElementCreation() {" + NL + "\t\t\t// Uncomment to put \"phantom\" objects into the diagram file.\t\t" + NL + "\t\t\t//";
  protected final String TEXT_69 = " resource = ((CreateElementRequest) getRequest()).getContainer().eResource();" + NL + "\t\t\t//if (resource == null) {" + NL + "\t\t\t//\treturn null;" + NL + "\t\t\t//}" + NL + "\t\t\t";
  protected final String TEXT_70 = " resource = getElementToEdit().eResource();" + NL + "\t\t\t";
  protected final String TEXT_71 = " eClass = getElementType().getEClass();" + NL + "\t\t\t";
  protected final String TEXT_72 = " helper = ";
  protected final String TEXT_73 = ".getHelper(resource);" + NL + "\t\t\t";
  protected final String TEXT_74 = " eObject;" + NL + "\t\t\tif (helper != null) {" + NL + "\t\t\t\teObject = helper.create(eClass);" + NL + "\t\t\t} else {" + NL + "\t\t\t\teObject = eClass.getEPackage().getEFactoryInstance().create(eClass);" + NL + "\t\t\t}" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_75 = NL + "\t}";
  protected final String TEXT_76 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_77 = NL;
d204 9
d214 1
a214 1
    stringBuffer.append(TEXT_2);
d216 1
a216 1
    stringBuffer.append(TEXT_3);
d218 1
a218 1
    stringBuffer.append(TEXT_4);
d220 1
a220 1
    stringBuffer.append(TEXT_5);
d222 1
a222 1
    stringBuffer.append(TEXT_6);
d228 3
a230 3
    stringBuffer.append(TEXT_7);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
d232 1
a232 1
    stringBuffer.append(TEXT_10);
d234 1
a234 1
    stringBuffer.append(TEXT_11);
d239 1
a239 1
    stringBuffer.append(TEXT_12);
d241 1
a241 1
    stringBuffer.append(TEXT_13);
d243 1
a243 1
    stringBuffer.append(TEXT_14);
d255 1
a255 1
    stringBuffer.append(TEXT_15);
d257 1
a257 1
    stringBuffer.append(TEXT_16);
d259 1
a259 1
    stringBuffer.append(TEXT_17);
d261 1
a261 1
    stringBuffer.append(TEXT_18);
d263 1
a263 1
    stringBuffer.append(TEXT_19);
d268 1
a268 1
    stringBuffer.append(TEXT_20);
d270 1
a270 1
    stringBuffer.append(TEXT_21);
d274 1
a274 1
    stringBuffer.append(TEXT_22);
d276 1
a276 1
    stringBuffer.append(TEXT_23);
d278 1
a278 1
    stringBuffer.append(TEXT_24);
d282 1
a282 1
    stringBuffer.append(TEXT_25);
d289 1
a289 1
    stringBuffer.append(TEXT_26);
d291 1
a291 1
    stringBuffer.append(TEXT_27);
d295 1
a295 1
    stringBuffer.append(TEXT_28);
d297 1
a297 1
    stringBuffer.append(TEXT_29);
d299 1
a299 1
    stringBuffer.append(TEXT_30);
d303 1
a303 1
    stringBuffer.append(TEXT_31);
d308 1
a308 1
    stringBuffer.append(TEXT_32);
d310 1
a310 1
    stringBuffer.append(TEXT_33);
d312 1
a312 1
    stringBuffer.append(TEXT_34);
d316 1
a316 1
    stringBuffer.append(TEXT_35);
d318 1
a318 1
    stringBuffer.append(TEXT_36);
d322 1
a322 1
    stringBuffer.append(TEXT_37);
d328 1
a328 1
    stringBuffer.append(TEXT_38);
d330 1
a330 1
    stringBuffer.append(TEXT_39);
d332 1
a332 1
    stringBuffer.append(TEXT_40);
d334 1
a334 1
    stringBuffer.append(TEXT_41);
d336 1
a336 1
    stringBuffer.append(TEXT_42);
d338 1
a338 1
    stringBuffer.append(TEXT_43);
d340 1
a340 1
    stringBuffer.append(TEXT_44);
d342 1
a342 1
    stringBuffer.append(TEXT_45);
d344 1
a344 1
    stringBuffer.append(TEXT_46);
d346 1
a346 1
    stringBuffer.append(TEXT_47);
d348 1
a348 1
    stringBuffer.append(TEXT_48);
d354 1
a354 1
    stringBuffer.append(TEXT_49);
d356 1
a356 1
    stringBuffer.append(TEXT_50);
d358 1
a358 1
    stringBuffer.append(TEXT_51);
d360 1
a360 1
    stringBuffer.append(TEXT_52);
d365 1
a365 1
    stringBuffer.append(TEXT_53);
d367 1
a367 1
    stringBuffer.append(TEXT_54);
d369 1
a369 1
    stringBuffer.append(TEXT_55);
d373 1
a373 1
    stringBuffer.append(TEXT_56);
d375 1
a375 1
    stringBuffer.append(TEXT_57);
d377 1
a377 1
    stringBuffer.append(TEXT_58);
d381 1
a381 1
    stringBuffer.append(TEXT_59);
d383 1
a383 1
    stringBuffer.append(TEXT_60);
d387 1
a387 1
    stringBuffer.append(TEXT_61);
d392 1
a392 1
    stringBuffer.append(TEXT_62);
d394 1
a394 1
    stringBuffer.append(TEXT_63);
d396 1
a396 1
    stringBuffer.append(TEXT_64);
d400 1
a400 1
    stringBuffer.append(TEXT_65);
d406 1
a406 1
    stringBuffer.append(TEXT_66);
d408 1
a408 1
    stringBuffer.append(TEXT_67);
d410 1
a410 1
    stringBuffer.append(TEXT_68);
d412 1
a412 1
    stringBuffer.append(TEXT_69);
d414 1
a414 1
    stringBuffer.append(TEXT_70);
d416 1
a416 1
    stringBuffer.append(TEXT_71);
d418 1
a418 1
    stringBuffer.append(TEXT_72);
d420 1
a420 1
    stringBuffer.append(TEXT_73);
d422 1
a422 1
    stringBuffer.append(TEXT_74);
d426 1
a426 1
    stringBuffer.append(TEXT_75);
d429 1
a429 1
    stringBuffer.append(TEXT_76);
d431 1
a431 1
    stringBuffer.append(TEXT_77);
@


1.14
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d85 1
a85 1
  protected final String TEXT_66 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isExecutable() {" + NL + "\t\t\tif (getEClass() != null) {" + NL + "\t\t\t\treturn getEClass().isSuperTypeOf(getEClassToEdit());" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
d91 6
a96 10
  protected final String TEXT_72 = " domain = (";
  protected final String TEXT_73 = ") ";
  protected final String TEXT_74 = ".getEditingDomain(resource);" + NL + "\t\t\tif (domain == null) {" + NL + "\t\t\t\tdomain = (";
  protected final String TEXT_75 = ") ";
  protected final String TEXT_76 = ".INSTANCE;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_77 = " eObject = ";
  protected final String TEXT_78 = ".create(domain, eClass, true);" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_79 = NL + "\t}";
  protected final String TEXT_80 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(editingDomain, req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_81 = NL;
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain"));
d409 1
a409 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain"));
a410 8
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.util.MSLUtil"));
    stringBuffer.append(TEXT_78);
d414 1
a414 1
    stringBuffer.append(TEXT_79);
d417 1
a417 1
    stringBuffer.append(TEXT_80);
d419 1
a419 1
    stringBuffer.append(TEXT_81);
@


1.13
log
@use new transactional emf api
@
text
@d218 1
d428 1
@


1.12
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateElementCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d99 1
a99 1
  protected final String TEXT_80 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
d322 1
a322 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateElementCommand"));
@


1.11
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d102 1
a102 1
	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d146 1
a146 1
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d189 1
a189 1
	protected final String getMetaClassAccessor(GenClass genClass, ImportUtil importManager) {
d202 1
a202 1
GenDiagram genDiagram = (GenDiagram) argument;
@


1.10
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@a226 1
GenPackage genPackage = genDiagram.getDomainMetaModel();
d300 1
a300 1
    stringBuffer.append(importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName()));
d328 1
a328 1
    stringBuffer.append(importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName()));
@


1.9
log
@ImportManager moved to oeg.common
@
text
@d53 48
a100 34
  protected final String TEXT_34 = "());" + NL + "\t\t\t}" + NL + "\t\t\treturn getMSLWrapper(new Create";
  protected final String TEXT_35 = "Command(req));" + NL + "\t\t}";
  protected final String TEXT_36 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_38 = "Command extends ";
  protected final String TEXT_39 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_40 = "Command(CreateElementRequest req) {" + NL + "\t\t\tsuper(req);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_41 = " getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_42 = ".eINSTANCE.get";
  protected final String TEXT_43 = "();" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_44 = " getElementToEdit() {" + NL + "\t\t\t";
  protected final String TEXT_45 = " container = ((CreateElementRequest) getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof ";
  protected final String TEXT_46 = ") {" + NL + "\t\t\t\tcontainer = ((";
  protected final String TEXT_47 = ") container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}";
  protected final String TEXT_48 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_49 = " doDefaultElementCreation() {" + NL + "\t\t\t";
  protected final String TEXT_50 = " newElement = (";
  protected final String TEXT_51 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {";
  protected final String TEXT_52 = NL + "\t\t\t\t ";
  protected final String TEXT_53 = " container = (";
  protected final String TEXT_54 = ") getElementToEdit();" + NL + "\t\t\t\t if (container != null) {";
  protected final String TEXT_55 = NL + "\t\t\t\t\t";
  protected final String TEXT_56 = " featureValues = container.";
  protected final String TEXT_57 = "();" + NL + "\t\t\t\t\tfeatureValues.add(newElement);";
  protected final String TEXT_58 = NL + "\t\t\t\t \t";
  protected final String TEXT_59 = "newElement);";
  protected final String TEXT_60 = NL + "\t\t\t\t }";
  protected final String TEXT_61 = "\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_62 = ".Initializers.";
  protected final String TEXT_63 = ".init(newElement);";
  protected final String TEXT_64 = NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_65 = NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_67 = NL;
a229 6
	TypeModelFacet modelFacet = genChildNode.getModelFacet();
	GenFeature containmentMetaFeature = modelFacet.getContainmentMetaFeature();
	GenFeature childMetaFeature = modelFacet.getChildMetaFeature();
	int upperContainmentBound = containmentMetaFeature.getEcoreFeature().getUpperBound();
	int upperChildBound = childMetaFeature.getEcoreFeature().getUpperBound();
	boolean processChildMetafeature = !childMetaFeature.equals(containmentMetaFeature) && upperChildBound > 0;
d237 9
a245 2
	if (upperContainmentBound > 0 || processChildMetafeature) {
		String containerInterfaceName = importManager.getImportedName(containerGenClass.getQualifiedInterfaceName());
d257 2
a258 2
		if (upperContainmentBound > 0) {
			if (upperContainmentBound == 1) {
d264 1
a264 1
			} else {
d272 1
a272 1
			}
d276 1
a276 1
		}
d278 2
a279 2
		if (processChildMetafeature) {
			if (upperChildBound == 1) {
d285 1
a285 1
			} else {
d293 1
a293 1
			}
d297 1
a298 1
	}
d305 4
d310 1
a310 1
    stringBuffer.append(TEXT_35);
d314 1
a314 1
    stringBuffer.append(TEXT_36);
d320 1
a320 1
    stringBuffer.append(TEXT_37);
d322 1
a322 1
    stringBuffer.append(TEXT_38);
d324 1
a324 1
    stringBuffer.append(TEXT_39);
d326 1
a326 1
    stringBuffer.append(TEXT_40);
d328 1
a328 1
    stringBuffer.append(TEXT_41);
d330 1
a330 1
    stringBuffer.append(TEXT_42);
a331 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d339 2
d342 1
a342 1
	boolean processChildMetafeature = !modelFacet.getChildMetaFeature().isDerived() && !modelFacet.getChildMetaFeature().equals(modelFacet.getContainmentMetaFeature());
d346 1
a346 1
    stringBuffer.append(TEXT_48);
a347 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(metaClassName);
d351 2
a356 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(containerMetaClass);
d360 2
d365 1
a365 1
    stringBuffer.append(TEXT_55);
d367 1
a367 1
    stringBuffer.append(TEXT_56);
d369 1
a369 1
    stringBuffer.append(TEXT_57);
d373 1
a373 1
    stringBuffer.append(TEXT_58);
d375 1
a375 1
    stringBuffer.append(TEXT_59);
d379 1
a379 1
    stringBuffer.append(TEXT_60);
d384 1
a384 1
    stringBuffer.append(TEXT_61);
d386 1
a386 1
    stringBuffer.append(TEXT_62);
d388 1
a388 1
    stringBuffer.append(TEXT_63);
d392 31
a422 1
    stringBuffer.append(TEXT_64);
d426 1
a426 1
    stringBuffer.append(TEXT_65);
d428 1
a428 1
    stringBuffer.append(TEXT_66);
d430 1
a430 1
    stringBuffer.append(TEXT_67);
@


1.8
log
@- Border should be defined in gmfgraph model
- Setter for features with "isList() == true" corrected
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.*;
@


1.7
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d162 9
a170 3
			result.append(".set");
			result.append(feature.getAccessorName());
			result.append("(");
@


1.6
log
@#119243
Checking upper bound limit for diagram elements.
@
text
@d196 1
a196 1
Collection childNodes = genDiagram.getNodes();
@


1.5
log
@#117749 & #118040 generate unique names for the shared elements in mapping model
@
text
@d8 2
a9 2
public class DiagramItemSemanticEditPolicyGenerator
{
d26 61
a86 22
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {";
  protected final String TEXT_8 = NL + "\t\tif (";
  protected final String TEXT_9 = ".";
  protected final String TEXT_10 = " == req.getElementType()) {" + NL + "\t\t\tif (req.getContainmentFeature() == null) {" + NL + "\t\t\t\treq.setContainmentFeature(";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "());" + NL + "\t\t\t}" + NL + "\t\t\treturn getMSLWrapper(new Create";
  protected final String TEXT_13 = "Command(req));" + NL + "\t\t}";
  protected final String TEXT_14 = NL + "\t\treturn super.getCreateCommand(req);" + NL + "\t}";
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Create";
  protected final String TEXT_16 = "Command extends MSLCreateElementCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Create";
  protected final String TEXT_17 = "Command(CreateElementRequest req) {" + NL + "\t\t\tsuper(req);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected EClass getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_18 = ".eINSTANCE.get";
  protected final String TEXT_19 = "();" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected EObject getElementToEdit() {" + NL + "\t\t\tEObject container = ((CreateElementRequest) getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof View) {" + NL + "\t\t\t\tcontainer = ((View) container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}";
  protected final String TEXT_20 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected EObject doDefaultElementCreation() {";
  protected final String TEXT_21 = NL + "\t\t\t";
  protected final String TEXT_22 = " newElement = (";
  protected final String TEXT_23 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_24 = ".Initializers.";
  protected final String TEXT_25 = ".init(newElement);" + NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_26 = NL + "\t}";
  protected final String TEXT_27 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_28 = NL;
d88 91
a178 1
  public String generate(Object argument)
d196 2
a197 2
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
a199 5
    
for (Iterator nodes = genDiagram.getNodes().iterator(); nodes.hasNext(); ) {
	GenNode genNode = (GenNode) nodes.next();
	TypeModelFacet modelFacet = genNode.getModelFacet();

a200 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d202 1
a202 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d204 1
a204 1
    stringBuffer.append(semanticPackageInterfaceName);
d206 11
a216 1
    stringBuffer.append(modelFacet.getContainmentMetaFeature().getFeatureAccessorName());
d218 1
a218 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d220 1
a220 1
    }
d223 2
a224 3
for (Iterator nodes = genDiagram.getNodes().iterator(); nodes.hasNext(); ) {
	GenNode genNode = (GenNode) nodes.next();
	TypeModelFacet modelFacet = genNode.getModelFacet();
d227 1
a227 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d229 1
a229 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d231 1
a231 1
    stringBuffer.append(semanticPackageInterfaceName);
d233 1
a233 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d235 4
a238 1
    	if (modelFacet.getModelElementInitializer() != null) { 
d240 1
a240 1
    		String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());
d242 3
a244 1
    stringBuffer.append(metaClassName);
d246 1
a246 1
    stringBuffer.append(metaClassName);
d248 1
a248 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d250 3
a252 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d254 6
a259 1
    	}
d261 111
d373 1
a373 1
    stringBuffer.append(TEXT_27);
d375 1
a375 1
    stringBuffer.append(TEXT_28);
d378 1
a378 1
}
@


1.4
log
@#116031 avoid hardcoded class names in templates
@
text
@d85 1
a85 1
    stringBuffer.append(modelFacet.getMetaClass().getName());
d95 1
a95 1
    stringBuffer.append(modelFacet.getMetaClass().getName());
d97 1
a97 1
    stringBuffer.append(modelFacet.getMetaClass().getName());
@


1.3
log
@#114351 support elements cloning
@
text
@d22 7
a28 7
  protected final String TEXT_3 = NL + "import ";
  protected final String TEXT_4 = ".ElementTypes;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateElementCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {";
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {";
  protected final String TEXT_9 = NL + "\t\tif (ElementTypes.";
d42 6
a47 5
  protected final String TEXT_23 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {" + NL + "\t\t\t\tElementTypes.Initializers.";
  protected final String TEXT_24 = ".init(newElement);" + NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_25 = NL + "\t}";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn getMSLWrapper(new DuplicateAnythingCommand(req));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DuplicateAnythingCommand(DuplicateElementsRequest req) {" + NL + "\t\t\tsuper(req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_27 = NL;
d60 1
a60 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d62 1
a62 1
    importManager.markImportLocation(stringBuffer);
d64 1
a64 1
    stringBuffer.append(genDiagram.getItemSemanticEditPolicyClassName());
a65 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_7);
d70 1
a70 1
    stringBuffer.append(TEXT_8);
d76 2
d111 2
d114 1
a114 1
    stringBuffer.append(TEXT_24);
d116 1
a116 1
    stringBuffer.append(TEXT_25);
d118 1
a118 1
    stringBuffer.append(TEXT_26);
d120 1
a120 1
    stringBuffer.append(TEXT_27);
@


1.2
log
@unused casts removed
@
text
@d23 1
a23 1
  protected final String TEXT_4 = ".ElementTypes;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateElementCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d45 1
a45 1
  protected final String TEXT_26 = NL + "}";
@


1.1
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d75 1
a75 1
	TypeModelFacet modelFacet = (TypeModelFacet) genNode.getModelFacet();
d91 1
a91 1
	TypeModelFacet modelFacet = (TypeModelFacet) genNode.getModelFacet();
@

