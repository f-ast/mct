head	1.14;
access;
symbols
	v20081022-1925:1.14
	v20081015-1925:1.14
	v20081008-1925:1.14
	v20081001-1925:1.14
	v20080924-1925:1.14
	v20080917-1925:1.14
	v20080911-1728:1.14
	v20080910-1520:1.14
	v20080903-1520:1.14
	v20080827-1520:1.14
	v20080813-1520:1.14
	v20080806-1520:1.14
	v20070608-1300:1.13
	v20070605-1400:1.13
	v20070601-1400:1.12
	v20070525-1500:1.12
	v20070520-1200:1.12
	v20070518-1300:1.11
	v20070504-1000:1.11
	v20070427-0600:1.10
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070405-1100:1.9
	v20070403-1500:1.9
	v20070330-1300:1.9
	v20060330-1300:1.9
	v20070322-1100:1.8
	v20060316-0600:1.7
	v20070307-0700:1.7
	v20070301-1200:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	v20061120-1300:1.6
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2007.06.11.10.45.38;	author ashatalin;	state dead;
branches;
next	1.13;
commitid	2581466d27cc4567;

1.13
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	17ef46643bcf4567;

1.12
date	2007.05.20.12.56.52;	author mfeldman;	state Exp;
branches;
next	1.11;
commitid	7de14650454a4567;

1.11
date	2007.04.27.12.19.28;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	38924631ea4f4567;

1.10
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.9;
commitid	78b462dc68e4567;

1.9
date	2007.03.26.15.39.36;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	137b4607e9374567;

1.8
date	2007.03.22.12.38.43;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	1360460278d24567;

1.7
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	5f734567714f4567;

1.6
date	2006.11.20.18.46.04;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	2b754561f7eb4567;

1.5
date	2006.11.07.20.04.25;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.03.20.43.48;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.18.14.21.46;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.26.16.12.55;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.22.13.21.23;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.14
log
@[191852] - Convert /navigator/NavigatorLabelProvider.javajet template to xpand
@
text
@package org.eclipse.gmf.codegen.templates.navigator;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.emf.ecore.*;

public class NavigatorLabelProviderGenerator {
 
  protected static String nl;
  public static synchronized NavigatorLabelProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NavigatorLabelProviderGenerator result = new NavigatorLabelProviderGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " implements ";
  protected final String TEXT_7 = ", ";
  protected final String TEXT_8 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic {" + NL + "\t\t";
  protected final String TEXT_9 = ".getInstance().getImageRegistry().put(\"";
  protected final String TEXT_10 = "\", ";
  protected final String TEXT_11 = ".getMissingImageDescriptor());" + NL + "\t\t";
  protected final String TEXT_12 = ".getInstance().getImageRegistry().put(\"";
  protected final String TEXT_13 = "\", ";
  protected final String TEXT_14 = ".getMissingImageDescriptor());" + NL + "\t\t";
  protected final String TEXT_15 = ".getInstance().getImageRegistry().put(\"";
  protected final String TEXT_16 = "\", ";
  protected final String TEXT_17 = ".getMissingImageDescriptor());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void updateLabel(";
  protected final String TEXT_18 = " label, ";
  protected final String TEXT_19 = " elementPath) {" + NL + "\t\tObject element = elementPath.getLastSegment();" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_20 = " && !isOwnView(((";
  protected final String TEXT_21 = ") element).getView())) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tlabel.setText(getText(element));" + NL + "\t\tlabel.setImage(getImage(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_22 = " getImage(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t";
  protected final String TEXT_24 = " group = (";
  protected final String TEXT_25 = ") element;" + NL + "\t\t\treturn ";
  protected final String TEXT_26 = ".getInstance().getBundledImage(group.getIcon());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_27 = ") {" + NL + "\t\t\t";
  protected final String TEXT_28 = " navigatorItem = (";
  protected final String TEXT_29 = ") element;" + NL + "    \t\tif (!isOwnView(navigatorItem.getView())) {" + NL + "    \t\t\treturn super.getImage(element);" + NL + "    \t\t}" + NL + "    \t\treturn getImage(navigatorItem.getView());" + NL + "\t\t}" + NL;
  protected final String TEXT_30 = NL + "\t\t// Due to plugin.xml content will be called only for \"own\" views" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_31 = ") {" + NL + "\t\t\t";
  protected final String TEXT_32 = " view = (";
  protected final String TEXT_33 = ") ((";
  protected final String TEXT_34 = ") element).getAdapter(";
  protected final String TEXT_35 = ".class);" + NL + "\t\t\tif (view != null && isOwnView(view)) {" + NL + "\t\t\t\treturn getImage(view);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_36 = NL + "\t\treturn super.getImage(element);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_37 = " getImage(";
  protected final String TEXT_38 = " view) {" + NL + "\t\tswitch (";
  protected final String TEXT_39 = ".getVisualID(view)) {";
  protected final String TEXT_40 = NL + "\t\tcase ";
  protected final String TEXT_41 = ".VISUAL_ID:" + NL + "\t\t\treturn getImage(\"";
  protected final String TEXT_42 = "\", ";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = "null";
  protected final String TEXT_45 = ");";
  protected final String TEXT_46 = NL + "\t\tdefault:" + NL + "\t\t\treturn getImage(\"";
  protected final String TEXT_47 = "\", null);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_48 = " getImage(String key, ";
  protected final String TEXT_49 = " elementType) {" + NL + "\t\t";
  protected final String TEXT_50 = " imageRegistry = ";
  protected final String TEXT_51 = ".getInstance().getImageRegistry();" + NL + "\t\t";
  protected final String TEXT_52 = " image = imageRegistry.get(key);" + NL + "\t\tif (image == null && elementType != null && ";
  protected final String TEXT_53 = ".isKnownElementType(elementType)) {" + NL + "\t\t\timage = ";
  protected final String TEXT_54 = ".getImage(elementType);" + NL + "\t\t\timageRegistry.put(key, image);" + NL + "\t\t}" + NL + "\t\t\t" + NL + "\t\tif (image == null) {" + NL + "\t\t\timage = imageRegistry.get(\"";
  protected final String TEXT_55 = "\");" + NL + "\t\t\timageRegistry.put(key, image);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getText(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_56 = ") {" + NL + "\t\t\t";
  protected final String TEXT_57 = " group = (";
  protected final String TEXT_58 = ") element;" + NL + "\t\t\treturn group.getGroupName();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_59 = ") {" + NL + "\t\t\t";
  protected final String TEXT_60 = " navigatorItem = (";
  protected final String TEXT_61 = ") element;" + NL + "    \t\tif (!isOwnView(navigatorItem.getView())) {" + NL + "    \t\t\treturn null;" + NL + "    \t\t}" + NL + "    \t\treturn getText(navigatorItem.getView());" + NL + "\t\t}" + NL + "\t";
  protected final String TEXT_62 = NL + "\t\t// Due to plugin.xml content will be called only for \"own\" views" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_63 = ") {" + NL + "\t\t\t";
  protected final String TEXT_64 = " view = (";
  protected final String TEXT_65 = ") ((";
  protected final String TEXT_66 = ") element).getAdapter(";
  protected final String TEXT_67 = ".class);" + NL + "\t\t\tif (view != null && isOwnView(view)) {" + NL + "\t\t\t\treturn getText(view);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_68 = NL + "\t\treturn super.getText(element);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getText(";
  protected final String TEXT_69 = " view) {" + NL + "\t\tif (view.getElement() != null && view.getElement().eIsProxy()) {" + NL + "\t\t\treturn getUnresolvedDomainElementProxyText(view);" + NL + "\t\t}" + NL + "\t\tswitch (";
  protected final String TEXT_70 = ".getVisualID(view)) {";
  protected final String TEXT_71 = NL + "\t\tcase ";
  protected final String TEXT_72 = ".VISUAL_ID:" + NL + "\t\t\treturn get";
  protected final String TEXT_73 = "Text(view);";
  protected final String TEXT_74 = NL + "\t\tdefault:" + NL + "\t\t\treturn getUnknownElementText(view);" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_75 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String get";
  protected final String TEXT_76 = "Text(";
  protected final String TEXT_77 = " view) {";
  protected final String TEXT_78 = NL + "\t\t";
  protected final String TEXT_79 = " hintAdapter = new ";
  protected final String TEXT_80 = ".HintAdapter(" + NL + "\t\t\t\t";
  protected final String TEXT_81 = ".";
  protected final String TEXT_82 = "," + NL + "\t\t\t\t(view.getElement() != null ? view.getElement() : view),";
  protected final String TEXT_83 = NL + "\t\t\t\t";
  protected final String TEXT_84 = ".DESCRIPTION";
  protected final String TEXT_85 = NL + "\t\t\t\t";
  protected final String TEXT_86 = ".getType(";
  protected final String TEXT_87 = ".VISUAL_ID)";
  protected final String TEXT_88 = ");" + NL + "\t\t";
  protected final String TEXT_89 = " parser = ";
  protected final String TEXT_90 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t" + NL + "\t\tif (parser != null) {" + NL + "\t\t\treturn parser.getPrintString(hintAdapter, ";
  protected final String TEXT_91 = ".NONE.intValue());" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_92 = ".getInstance().logError(\"Parser was not found for label \" + ";
  protected final String TEXT_93 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_94 = NL + "\t\treturn \"";
  protected final String TEXT_95 = "\";";
  protected final String TEXT_96 = NL + "\t\t";
  protected final String TEXT_97 = " domainModelElement = view.getElement();" + NL + "\t\tif (domainModelElement != null) {" + NL + "\t\t\treturn ";
  protected final String TEXT_98 = "String.valueOf(";
  protected final String TEXT_99 = ")";
  protected final String TEXT_100 = ";" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_101 = ".getInstance().logError(\"No domain element for view with visualID = \" + ";
  protected final String TEXT_102 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_103 = NL + "\t\treturn \"\";";
  protected final String TEXT_104 = NL + "\t}";
  protected final String TEXT_105 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUnknownElementText(";
  protected final String TEXT_106 = " view) {" + NL + "\t\treturn \"<UnknownElement Visual_ID = \" + view.getType() + \">\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUnresolvedDomainElementProxyText(";
  protected final String TEXT_107 = " view) {" + NL + "\t\treturn \"<Unresolved domain element Visual_ID = \" + view.getType() + \">\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_108 = " aConfig) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_109 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_110 = " aMemento) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getDescription(Object anElement) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOwnView(";
  protected final String TEXT_111 = " view) {" + NL + "\t\treturn ";
  protected final String TEXT_112 = ".MODEL_ID.equals(";
  protected final String TEXT_113 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_114 = NL;

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

final String commonKeyPrefix = "Navigator?";
final String invalidElementKey = commonKeyPrefix + "InvalidElement";
final String unknownElementKey = commonKeyPrefix + "UnknownElement";
final String notFoundElementKey = commonKeyPrefix + "ImageNotFound";
/* TODO: move this logic into genmodel */
final class RegistryKey {
	
	private GenCommonBase myCommonBase;
	private String myKey;
	
	public RegistryKey(GenCommonBase commonBase) {
		myCommonBase = commonBase;
	}
	
	public String getKey() {
		if (myKey == null) {
			if (myCommonBase instanceof GenDiagram) {
				myKey = getKey((GenDiagram) myCommonBase);
			} else if (myCommonBase instanceof GenNode) {
				myKey = getKey((GenNode) myCommonBase);
			} else if (myCommonBase instanceof GenLink) {
				myKey = getKey((GenLink) myCommonBase);
			} else if (myCommonBase instanceof GenCompartment) {
				myKey = getKey((GenCompartment) myCommonBase);
			} else if (myCommonBase instanceof GenLabel) {
				myKey = getKey((GenLabel) myCommonBase);
			} else {
				myKey = getInvalidElementKey();
			}
		}
		return myKey;
	}
	
	private String getKey(GenDiagram diagram) {
		return getCommonPrefix() + "Diagram?" + getKeyFragment(diagram.getDomainDiagramElement());
	}
	
	private String getKey(GenNode node) {
		return getCommonPrefix() + (node instanceof GenTopLevelNode ? "TopLevelNode?" : "Node?") + (node.getModelFacet() != null ? getKeyFragment(node.getModelFacet().getMetaClass()) : getKeyFragment(node.getViewmap()));
	}
	
	private String getKey(GenLink link) {
		LinkModelFacet modelFacet = link.getModelFacet();
		if (modelFacet instanceof TypeLinkModelFacet) {
			return getCommonPrefix() + "Link?" + getKeyFragment(((TypeLinkModelFacet) modelFacet).getMetaClass());
		} else if (modelFacet instanceof FeatureLinkModelFacet) {
			return getCommonPrefix() + "Link?" + getKeyFragment(((FeatureLinkModelFacet) modelFacet).getMetaFeature());
		}
		return getCommonPrefix() + "Link?" + getKeyFragment(link.getViewmap());
	}
	
	private String getKey(GenCompartment compartment) {
		return getKey(compartment.getNode()) + "?Compartment?" + compartment.getTitle();
	}
	
	private String getKey(GenLabel label) {
		if (label instanceof GenNodeLabel) {
			GenNodeLabel nodeLabel = (GenNodeLabel) label;
			return getKey(nodeLabel.getNode()) + "?Label?" + getKeyFragment(nodeLabel);
		} else if (label instanceof GenLinkLabel) {
			GenLinkLabel linkLabel = (GenLinkLabel) label;
			return getKey(linkLabel.getLink()) + "?Label?" + getKeyFragment(linkLabel);
		}
		return getInvalidElementKey();
	}
	
	private String getInvalidElementKey() {
		return invalidElementKey;
	}
	
	private String getCommonPrefix() {
		return commonKeyPrefix;
	}
	
	private String getKeyFragment(GenClass genClass) {
		if (genClass == null) {
			return "";
		}
		return genClass.getGenPackage().getNSURI() + "?" + genClass.getName();
	}
	
	private String getKeyFragment(GenFeature genFeature) {
		GenClass genClass = genFeature.getGenClass();
		return getKeyFragment(genClass) + "?" + genFeature.getName();
	}
	
	private String getKeyFragment(GenLabel genLabel) {
		LabelModelFacet modelFacet = genLabel.getModelFacet();
		if (modelFacet instanceof FeatureLabelModelFacet) {
			String result = "";
			for (Iterator it = ((FeatureLabelModelFacet) genLabel).getMetaFeatures().iterator(); it.hasNext();) {
				result += getKeyFragment((GenFeature) it.next());
			}
			return result;
		} else if (modelFacet instanceof DesignLabelModelFacet) {
			return getKeyFragment(genLabel.getViewmap());
		}
		return getInvalidElementKey();
	}
	
	private String getKeyFragment(Viewmap viewmap) {
		if (viewmap instanceof FigureViewmap) {
			return ((FigureViewmap) viewmap).getFigureQualifiedClassName();
		} else if (viewmap instanceof InnerClassViewmap) {
			return ((InnerClassViewmap) viewmap).getClassName();
		} else if (viewmap instanceof ParentAssignedViewmap) {
			return ((ParentAssignedViewmap) viewmap).getFigureQualifiedClassName();
		}
		return "";
	}

}


    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genNavigator.getLabelProviderClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.LabelProvider"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonLabelProvider"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ITreePathLabelProvider"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(invalidElementKey);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(unknownElementKey);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(notFoundElementKey);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ViewerLabel"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreePath"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    if (genDiagram.generateShortcutIcon()) {
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_35);
    
}
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_39);
    for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {
		RegistryKey registryKey = new RegistryKey(nextCommonBase);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(registryKey.getKey());
    stringBuffer.append(TEXT_42);
    if (nextCommonBase.getElementType() != null) {
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(nextCommonBase.getUniqueIdentifier());
    } else {
    stringBuffer.append(TEXT_44);
    }
    stringBuffer.append(TEXT_45);
    	}
}
    stringBuffer.append(TEXT_46);
    stringBuffer.append(unknownElementKey);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageRegistry"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(notFoundElementKey);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_61);
    if (genDiagram.generateShortcutIcon()) {
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_67);
    
}
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_70);
    for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(nextCommonBase.getUniqueIdentifier());
    stringBuffer.append(TEXT_73);
    	}
}
    stringBuffer.append(TEXT_74);
    for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {
    stringBuffer.append(TEXT_75);
    stringBuffer.append(nextCommonBase.getUniqueIdentifier());
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_77);
    		LabelModelFacet labelModelFacet = null;
		GenCommonBase hintHolder = null;
		GenCommonBase elementTypeHolder = null;
		if (nextCommonBase instanceof GenChildLabelNode) {
			labelModelFacet = ((GenChildLabelNode) nextCommonBase).getLabelModelFacet();
			hintHolder = nextCommonBase;
			elementTypeHolder = nextCommonBase;
		} else if (nextCommonBase instanceof GenNode) {
			Collection labels = ((GenNode) nextCommonBase).getLabels();
			if (labels.size() > 0) {
				GenLabel nextLabel = (GenLabel) labels.iterator().next();
				labelModelFacet = nextLabel.getModelFacet();
				hintHolder = nextLabel;
				elementTypeHolder = nextCommonBase;
			}
		} else if (nextCommonBase instanceof GenLink) {
			Collection labels = ((GenLink) nextCommonBase).getLabels();
			if (labels.size() > 0) {
				GenLabel nextLabel = (GenLabel) labels.iterator().next();
				labelModelFacet = nextLabel.getModelFacet();
				hintHolder = nextLabel;
				elementTypeHolder = nextCommonBase;
			}
		} else if (nextCommonBase instanceof GenLabel) {
			labelModelFacet = ((GenLabel) nextCommonBase).getModelFacet();
			hintHolder = nextCommonBase;
			elementTypeHolder = (GenCommonBase) nextCommonBase.eContainer();
		}
		
		if (elementTypeHolder != null) {
/* 1. Label was detected. */
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName(genDiagram.getParserProviderQualifiedClassName()));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(elementTypeHolder.getUniqueIdentifier());
    stringBuffer.append(TEXT_82);
    if (labelModelFacet instanceof DesignLabelModelFacet) {
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint"));
    stringBuffer.append(TEXT_84);
    } else {
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName(hintHolder.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_87);
    }
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(String.valueOf(hintHolder.getVisualID()));
    stringBuffer.append(TEXT_93);
    		} else if (nextCommonBase instanceof GenCompartment) {
/* 2. Compartment was detected. */
    stringBuffer.append(TEXT_94);
    stringBuffer.append(((GenCompartment) nextCommonBase).getTitle());
    stringBuffer.append(TEXT_95);
    		} else {
			GenClass domainElement = null;
			if (nextCommonBase instanceof GenDiagram) {
				domainElement = ((GenDiagram) nextCommonBase).getDomainDiagramElement();
			} else if (nextCommonBase instanceof GenNode) {
				GenNode genNode = (GenNode) nextCommonBase;
				if (genNode.getModelFacet() != null) {
					domainElement = genNode.getModelFacet().getMetaClass();
				}
			} else if (nextCommonBase instanceof GenLink) {
				LinkModelFacet modelFacet = ((GenLink) nextCommonBase).getModelFacet();
				if (modelFacet instanceof TypeModelFacet) {
					domainElement = ((TypeModelFacet) modelFacet).getMetaClass();
				}
			}
			if (domainElement != null && domainElement.getLabelFeature() != null) {
/* 3. Underlying doman model element recognized. */
				GenFeature labelFeature = domainElement.getLabelFeature();
				boolean notString = EcorePackage.eINSTANCE.getEString() != labelFeature.getEcoreFeature().getEType();
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_97);
    if (notString) {
    stringBuffer.append(TEXT_98);
    }
    stringBuffer.append(getFeatureValueGetter("domainModelElement", domainElement.getLabelFeature(), true, importManager));
    if (notString) {
    stringBuffer.append(TEXT_99);
    }
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(String.valueOf(nextCommonBase.getVisualID()));
    stringBuffer.append(TEXT_102);
    			} else {
/* 4. None of above. */
    stringBuffer.append(TEXT_103);
    			}
		}
    stringBuffer.append(TEXT_104);
    	}
}
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_113);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_114);
    return stringBuffer.toString();
  }
}@


1.13
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.12
log
@Anna Karyakina's migration fix
@
text
@d20 1
a20 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.11
log
@do not generate superfluous anonymous inner classes for parser hints
@
text
@d21 114
a134 115
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " implements ";
  protected final String TEXT_8 = ", ";
  protected final String TEXT_9 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic {" + NL + "\t\t";
  protected final String TEXT_10 = ".getInstance().getImageRegistry().put(\"";
  protected final String TEXT_11 = "\", ";
  protected final String TEXT_12 = ".getMissingImageDescriptor());" + NL + "\t\t";
  protected final String TEXT_13 = ".getInstance().getImageRegistry().put(\"";
  protected final String TEXT_14 = "\", ";
  protected final String TEXT_15 = ".getMissingImageDescriptor());" + NL + "\t\t";
  protected final String TEXT_16 = ".getInstance().getImageRegistry().put(\"";
  protected final String TEXT_17 = "\", ";
  protected final String TEXT_18 = ".getMissingImageDescriptor());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void updateLabel(";
  protected final String TEXT_19 = " label, ";
  protected final String TEXT_20 = " elementPath) {" + NL + "\t\tObject element = elementPath.getLastSegment();" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_21 = " && !isOwnView(((";
  protected final String TEXT_22 = ") element).getView())) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tlabel.setText(getText(element));" + NL + "\t\tlabel.setImage(getImage(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_23 = " getImage(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_24 = ") {" + NL + "\t\t\t";
  protected final String TEXT_25 = " group = (";
  protected final String TEXT_26 = ") element;" + NL + "\t\t\treturn ";
  protected final String TEXT_27 = ".getInstance().getBundledImage(group.getIcon());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_28 = ") {" + NL + "\t\t\t";
  protected final String TEXT_29 = " navigatorItem = (";
  protected final String TEXT_30 = ") element;" + NL + "    \t\tif (!isOwnView(navigatorItem.getView())) {" + NL + "    \t\t\treturn super.getImage(element);" + NL + "    \t\t}" + NL + "    \t\treturn getImage(navigatorItem.getView());" + NL + "\t\t}" + NL;
  protected final String TEXT_31 = NL + "\t\t// Due to plugin.xml content will be called only for \"own\" views" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_32 = ") {" + NL + "\t\t\t";
  protected final String TEXT_33 = " view = (";
  protected final String TEXT_34 = ") ((";
  protected final String TEXT_35 = ") element).getAdapter(";
  protected final String TEXT_36 = ".class);" + NL + "\t\t\tif (view != null && isOwnView(view)) {" + NL + "\t\t\t\treturn getImage(view);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_37 = NL + "\t\treturn super.getImage(element);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_38 = " getImage(";
  protected final String TEXT_39 = " view) {" + NL + "\t\tswitch (";
  protected final String TEXT_40 = ".getVisualID(view)) {";
  protected final String TEXT_41 = NL + "\t\tcase ";
  protected final String TEXT_42 = ".VISUAL_ID:" + NL + "\t\t\treturn getImage(\"";
  protected final String TEXT_43 = "\", ";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = "null";
  protected final String TEXT_46 = ");";
  protected final String TEXT_47 = NL + "\t\tdefault:" + NL + "\t\t\treturn getImage(\"";
  protected final String TEXT_48 = "\", null);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_49 = " getImage(String key, ";
  protected final String TEXT_50 = " elementType) {" + NL + "\t\t";
  protected final String TEXT_51 = " imageRegistry = ";
  protected final String TEXT_52 = ".getInstance().getImageRegistry();" + NL + "\t\t";
  protected final String TEXT_53 = " image = imageRegistry.get(key);" + NL + "\t\tif (image == null && elementType != null && ";
  protected final String TEXT_54 = ".isKnownElementType(elementType)) {" + NL + "\t\t\timage = ";
  protected final String TEXT_55 = ".getImage(elementType);" + NL + "\t\t\timageRegistry.put(key, image);" + NL + "\t\t}" + NL + "\t\t\t" + NL + "\t\tif (image == null) {" + NL + "\t\t\timage = imageRegistry.get(\"";
  protected final String TEXT_56 = "\");" + NL + "\t\t\timageRegistry.put(key, image);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getText(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_57 = ") {" + NL + "\t\t\t";
  protected final String TEXT_58 = " group = (";
  protected final String TEXT_59 = ") element;" + NL + "\t\t\treturn group.getGroupName();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_60 = ") {" + NL + "\t\t\t";
  protected final String TEXT_61 = " navigatorItem = (";
  protected final String TEXT_62 = ") element;" + NL + "    \t\tif (!isOwnView(navigatorItem.getView())) {" + NL + "    \t\t\treturn null;" + NL + "    \t\t}" + NL + "    \t\treturn getText(navigatorItem.getView());" + NL + "\t\t}" + NL + "\t";
  protected final String TEXT_63 = NL + "\t\t// Due to plugin.xml content will be called only for \"own\" views" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_64 = ") {" + NL + "\t\t\t";
  protected final String TEXT_65 = " view = (";
  protected final String TEXT_66 = ") ((";
  protected final String TEXT_67 = ") element).getAdapter(";
  protected final String TEXT_68 = ".class);" + NL + "\t\t\tif (view != null && isOwnView(view)) {" + NL + "\t\t\t\treturn getText(view);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_69 = NL + "\t\treturn super.getText(element);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getText(";
  protected final String TEXT_70 = " view) {" + NL + "\t\tif (view.getElement() != null && view.getElement().eIsProxy()) {" + NL + "\t\t\treturn getUnresolvedDomainElementProxyText(view);" + NL + "\t\t}" + NL + "\t\tswitch (";
  protected final String TEXT_71 = ".getVisualID(view)) {";
  protected final String TEXT_72 = NL + "\t\tcase ";
  protected final String TEXT_73 = ".VISUAL_ID:" + NL + "\t\t\treturn get";
  protected final String TEXT_74 = "Text(view);";
  protected final String TEXT_75 = NL + "\t\tdefault:" + NL + "\t\t\treturn getUnknownElementText(view);" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_76 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String get";
  protected final String TEXT_77 = "Text(";
  protected final String TEXT_78 = " view) {";
  protected final String TEXT_79 = NL + "\t\t";
  protected final String TEXT_80 = " hintAdapter = new ";
  protected final String TEXT_81 = ".HintAdapter(" + NL + "\t\t\t\t";
  protected final String TEXT_82 = ".";
  protected final String TEXT_83 = "," + NL + "\t\t\t\t(view.getElement() != null ? view.getElement() : view),";
  protected final String TEXT_84 = NL + "\t\t\t\t";
  protected final String TEXT_85 = ".DESCRIPTION";
  protected final String TEXT_86 = NL + "\t\t\t\t";
  protected final String TEXT_87 = ".getType(";
  protected final String TEXT_88 = ".VISUAL_ID)";
  protected final String TEXT_89 = ");" + NL + "\t\t";
  protected final String TEXT_90 = " parser = ";
  protected final String TEXT_91 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t" + NL + "\t\tif (parser != null) {" + NL + "\t\t\treturn parser.getPrintString(hintAdapter, ";
  protected final String TEXT_92 = ".NONE.intValue());" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_93 = ".getInstance().logError(\"Parser was not found for label \" + ";
  protected final String TEXT_94 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_95 = NL + "\t\treturn \"";
  protected final String TEXT_96 = "\";";
  protected final String TEXT_97 = NL + "\t\t";
  protected final String TEXT_98 = " domainModelElement = view.getElement();" + NL + "\t\tif (domainModelElement != null) {" + NL + "\t\t\treturn ";
  protected final String TEXT_99 = "String.valueOf(";
  protected final String TEXT_100 = ")";
  protected final String TEXT_101 = ";" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_102 = ".getInstance().logError(\"No domain element for view with visualID = \" + ";
  protected final String TEXT_103 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_104 = NL + "\t\treturn \"\";";
  protected final String TEXT_105 = NL + "\t}";
  protected final String TEXT_106 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUnknownElementText(";
  protected final String TEXT_107 = " view) {" + NL + "\t\treturn \"<UnknownElement Visual_ID = \" + view.getType() + \">\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUnresolvedDomainElementProxyText(";
  protected final String TEXT_108 = " view) {" + NL + "\t\treturn \"<Unresolved domain element Visual_ID = \" + view.getType() + \">\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_109 = " aConfig) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_110 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_111 = " aMemento) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getDescription(Object anElement) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOwnView(";
  protected final String TEXT_112 = " view) {" + NL + "\t\treturn ";
  protected final String TEXT_113 = ".MODEL_ID.equals(";
  protected final String TEXT_114 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_115 = NL;
a361 1
    stringBuffer.append(TEXT_1);
d366 2
a368 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d371 2
d374 1
a374 1
    importManager.markImportLocation(stringBuffer);
d376 1
a376 1
    stringBuffer.append(genNavigator.getLabelProviderClassName());
d378 1
a378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.LabelProvider"));
d380 1
a380 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonLabelProvider"));
d382 1
a382 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ITreePathLabelProvider"));
d384 1
a384 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d386 1
a386 1
    stringBuffer.append(invalidElementKey);
d388 1
a388 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d390 1
a390 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d392 1
a392 1
    stringBuffer.append(unknownElementKey);
d394 1
a394 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d396 1
a396 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d398 1
a398 1
    stringBuffer.append(notFoundElementKey);
d400 1
a400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d402 1
a402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ViewerLabel"));
d404 1
a404 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreePath"));
d408 1
a408 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d410 1
a410 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d416 1
a416 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d418 1
a418 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d424 1
a424 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d426 1
a426 1
    if (genDiagram.generateShortcutIcon()) {
d428 1
a428 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d432 2
a434 2
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
a435 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_36);
d438 2
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a444 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_40);
d449 2
d452 1
a452 1
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
a453 2
    stringBuffer.append(registryKey.getKey());
    stringBuffer.append(TEXT_43);
d456 1
a456 1
    stringBuffer.append(TEXT_44);
d459 2
a461 2
    }
    stringBuffer.append(TEXT_46);
d464 2
d467 1
a467 1
    stringBuffer.append(unknownElementKey);
d469 1
a469 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageRegistry"));
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d483 1
a483 1
    stringBuffer.append(notFoundElementKey);
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d495 1
a495 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d497 1
a497 1
    if (genDiagram.generateShortcutIcon()) {
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d503 2
a505 2
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
a506 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_68);
d509 2
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a513 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_71);
d517 2
d520 1
a520 1
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
a521 2
    stringBuffer.append(nextCommonBase.getUniqueIdentifier());
    stringBuffer.append(TEXT_74);
d524 1
a524 1
    stringBuffer.append(TEXT_75);
d528 2
d531 1
a531 1
    stringBuffer.append(nextCommonBase.getUniqueIdentifier());
a532 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_78);
d564 2
d567 1
a567 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d569 1
a569 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getParserProviderQualifiedClassName()));
d571 1
a571 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d573 1
a573 1
    stringBuffer.append(elementTypeHolder.getUniqueIdentifier());
d575 1
a575 1
    if (labelModelFacet instanceof DesignLabelModelFacet) {
d577 1
a577 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint"));
d579 1
a579 1
    } else {
d581 1
a581 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d583 1
a583 1
    stringBuffer.append(importManager.getImportedName(hintHolder.getEditPartQualifiedClassName()));
d585 1
a585 1
    }
d587 1
a587 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d589 1
a589 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d591 1
a591 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d593 1
a593 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a594 2
    stringBuffer.append(String.valueOf(hintHolder.getVisualID()));
    stringBuffer.append(TEXT_94);
d597 2
a599 2
    stringBuffer.append(((GenCompartment) nextCommonBase).getTitle());
    stringBuffer.append(TEXT_96);
d619 2
d622 1
a622 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d624 2
a628 2
    stringBuffer.append(getFeatureValueGetter("domainModelElement", domainElement.getLabelFeature(), true, importManager));
    if (notString) {
d630 1
a630 1
    }
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a633 2
    stringBuffer.append(String.valueOf(nextCommonBase.getVisualID()));
    stringBuffer.append(TEXT_103);
d636 1
a636 1
    stringBuffer.append(TEXT_104);
d639 1
a639 1
    stringBuffer.append(TEXT_105);
d642 2
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d649 1
a649 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite"));
d653 1
a653 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d655 1
a655 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d657 1
a657 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d659 1
a659 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a660 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_115);
@


1.10
log
@follow consisted spacing policy
@
text
@d100 36
a135 35
  protected final String TEXT_80 = " parser = ";
  protected final String TEXT_81 = ".getInstance().getParser(new ";
  protected final String TEXT_82 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (String.class.equals(adapter)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_83 = ".DESCRIPTION";
  protected final String TEXT_84 = ".getType(";
  protected final String TEXT_85 = ".VISUAL_ID)";
  protected final String TEXT_86 = ";" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (";
  protected final String TEXT_87 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_88 = ".";
  protected final String TEXT_89 = ";" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tif (parser != null) {" + NL + "\t\t\treturn parser.getPrintString(new ";
  protected final String TEXT_90 = "(view.getElement() != null ? view.getElement() : view), ";
  protected final String TEXT_91 = ".NONE.intValue());" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_92 = ".getInstance().logError(\"Parser was not found for label \" + ";
  protected final String TEXT_93 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_94 = NL + "\t\treturn \"";
  protected final String TEXT_95 = "\";";
  protected final String TEXT_96 = NL + "\t\t";
  protected final String TEXT_97 = " domainModelElement = view.getElement();" + NL + "\t\tif (domainModelElement != null) {" + NL + "\t\t\treturn ";
  protected final String TEXT_98 = "String.valueOf(";
  protected final String TEXT_99 = ")";
  protected final String TEXT_100 = ";" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_101 = ".getInstance().logError(\"No domain element for view with visualID = \" + ";
  protected final String TEXT_102 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_103 = NL + "\t\treturn \"\";";
  protected final String TEXT_104 = NL + "\t}";
  protected final String TEXT_105 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUnknownElementText(";
  protected final String TEXT_106 = " view) {" + NL + "\t\treturn \"<UnknownElement Visual_ID = \" + view.getType() + \">\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUnresolvedDomainElementProxyText(";
  protected final String TEXT_107 = " view) {" + NL + "\t\treturn \"<Unresolved domain element Visual_ID = \" + view.getType() + \">\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_108 = " aConfig) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_109 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_110 = " aMemento) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getDescription(Object anElement) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOwnView(";
  protected final String TEXT_111 = " view) {" + NL + "\t\treturn ";
  protected final String TEXT_112 = ".MODEL_ID.equals(";
  protected final String TEXT_113 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_114 = NL;
d567 1
a567 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d569 1
a569 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d571 1
a571 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d573 1
a573 4
    
			if (labelModelFacet instanceof DesignLabelModelFacet) {
				
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint"));
d575 1
a575 4
    
			} else {
				
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d577 1
a577 1
    stringBuffer.append(importManager.getImportedName(hintHolder.getEditPartQualifiedClassName()));
d579 1
a579 2
    
			}
d581 1
a581 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d583 1
a583 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d585 1
a585 1
    stringBuffer.append(elementTypeHolder.getUniqueIdentifier());
d587 1
a587 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d589 2
d592 1
a592 1
    stringBuffer.append(TEXT_91);
d594 1
a594 1
    stringBuffer.append(TEXT_92);
d596 1
a596 1
    stringBuffer.append(TEXT_93);
d599 1
a599 1
    stringBuffer.append(TEXT_94);
d601 1
a601 1
    stringBuffer.append(TEXT_95);
d621 1
a621 1
    stringBuffer.append(TEXT_96);
d623 1
a623 1
    stringBuffer.append(TEXT_97);
d625 1
a625 1
    stringBuffer.append(TEXT_98);
d629 1
a629 1
    stringBuffer.append(TEXT_99);
d631 1
a631 1
    stringBuffer.append(TEXT_100);
d633 1
a633 1
    stringBuffer.append(TEXT_101);
d635 1
a635 1
    stringBuffer.append(TEXT_102);
d638 1
a638 1
    stringBuffer.append(TEXT_103);
d641 1
a641 1
    stringBuffer.append(TEXT_104);
a643 2
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d647 2
a649 2
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d653 2
d656 1
a656 1
    stringBuffer.append(TEXT_111);
d658 1
a658 1
    stringBuffer.append(TEXT_112);
d660 1
a660 1
    stringBuffer.append(TEXT_113);
d662 1
a662 1
    stringBuffer.append(TEXT_114);
@


1.9
log
@Null pointer exception corrected.
@
text
@d22 1
a22 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d368 1
a368 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.8
log
@Special label added for unresolved domain element proxies.
@
text
@d90 1
a90 1
  protected final String TEXT_70 = " view) {" + NL + "\t\tif (view.getElement().eIsProxy()) {" + NL + "\t\t\treturn getUnresolvedDomainElementProxyText(view);" + NL + "\t\t}" + NL + "\t\tswitch (";
@


1.7
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d90 1
a90 1
  protected final String TEXT_70 = " view) {" + NL + "\t\tswitch (";
d126 9
a134 8
  protected final String TEXT_106 = " view) {" + NL + "\t\treturn \"<UnknownElement Visual_ID = \" + view.getType() + \">\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_107 = " aConfig) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_108 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_109 = " aMemento) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getDescription(Object anElement) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOwnView(";
  protected final String TEXT_110 = " view) {" + NL + "\t\treturn ";
  protected final String TEXT_111 = ".MODEL_ID.equals(";
  protected final String TEXT_112 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_113 = NL;
d651 2
a653 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d657 2
d660 1
a660 1
    stringBuffer.append(TEXT_110);
d662 1
a662 1
    stringBuffer.append(TEXT_111);
d664 1
a664 1
    stringBuffer.append(TEXT_112);
d666 1
a666 1
    stringBuffer.append(TEXT_113);
@


1.6
log
@[164952] - Unable to generate diagram editor without domain model
@
text
@d143 7
a149 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.5
log
@Labels for Shortcutted elements provided.
@
text
@d279 1
a279 1
		return getCommonPrefix() + (node instanceof GenTopLevelNode ? "TopLevelNode?" : "Node?") + getKeyFragment(node.getModelFacet().getMetaClass());
d289 1
a289 1
		return getInvalidElementKey();
d293 1
a293 1
		return getCommonPrefix() + "Compartment?" + getKeyFragment(compartment.getNode().getModelFacet().getMetaClass()) + "?" + compartment.getTitle();
d316 3
d336 1
a336 1
			return "DesignLabel";
d340 11
d604 4
a607 1
				domainElement = ((GenNode) nextCommonBase).getModelFacet().getMetaClass();
@


1.4
log
@Refactoring navigator to support cross-diagram shortcuts.
@
text
@d28 106
a133 101
  protected final String TEXT_8 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic {" + NL + "\t\t";
  protected final String TEXT_9 = ".getInstance().getImageRegistry().put(\"";
  protected final String TEXT_10 = "\", ";
  protected final String TEXT_11 = ".getMissingImageDescriptor());" + NL + "\t\t";
  protected final String TEXT_12 = ".getInstance().getImageRegistry().put(\"";
  protected final String TEXT_13 = "\", ";
  protected final String TEXT_14 = ".getMissingImageDescriptor());" + NL + "\t\t";
  protected final String TEXT_15 = ".getInstance().getImageRegistry().put(\"";
  protected final String TEXT_16 = "\", ";
  protected final String TEXT_17 = ".getMissingImageDescriptor());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_18 = " getImage(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_19 = ") {" + NL + "\t\t\t";
  protected final String TEXT_20 = " group = (";
  protected final String TEXT_21 = ") element;" + NL + "\t\t\treturn ";
  protected final String TEXT_22 = ".getInstance().getBundledImage(group.getIcon());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t";
  protected final String TEXT_24 = " navigatorItem = (";
  protected final String TEXT_25 = ") element;" + NL + "    \t\tif (!isOwnView(navigatorItem.getView())) {" + NL + "    \t\t\treturn super.getImage(element);" + NL + "    \t\t}" + NL + "    \t\treturn getImage(navigatorItem.getView());" + NL + "\t\t}" + NL;
  protected final String TEXT_26 = NL + "\t\t// Due to plugin.xml content will be called only for \"own\" views" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_27 = ") {" + NL + "\t\t\t";
  protected final String TEXT_28 = " view = (";
  protected final String TEXT_29 = ") ((";
  protected final String TEXT_30 = ") element).getAdapter(";
  protected final String TEXT_31 = ".class);" + NL + "\t\t\tif (view != null) {" + NL + "\t\t\t\treturn getImage(view);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_32 = NL + "\t\treturn super.getImage(element);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_33 = " getImage(";
  protected final String TEXT_34 = " view) {" + NL + "\t\tswitch (";
  protected final String TEXT_35 = ".getVisualID(view)) {";
  protected final String TEXT_36 = NL + "\t\tcase ";
  protected final String TEXT_37 = ".VISUAL_ID:" + NL + "\t\t\treturn getImage(\"";
  protected final String TEXT_38 = "\", ";
  protected final String TEXT_39 = ".";
  protected final String TEXT_40 = "null";
  protected final String TEXT_41 = ");";
  protected final String TEXT_42 = NL + "\t\tdefault:" + NL + "\t\t\treturn getImage(\"";
  protected final String TEXT_43 = "\", null);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_44 = " getImage(String key, ";
  protected final String TEXT_45 = " elementType) {" + NL + "\t\t";
  protected final String TEXT_46 = " imageRegistry = ";
  protected final String TEXT_47 = ".getInstance().getImageRegistry();" + NL + "\t\t";
  protected final String TEXT_48 = " image = imageRegistry.get(key);" + NL + "\t\tif (image == null && elementType != null && ";
  protected final String TEXT_49 = ".isKnownElementType(elementType)) {" + NL + "\t\t\timage = ";
  protected final String TEXT_50 = ".getImage(elementType);" + NL + "\t\t\timageRegistry.put(key, image);" + NL + "\t\t}" + NL + "\t\t\t" + NL + "\t\tif (image == null) {" + NL + "\t\t\timage = imageRegistry.get(\"";
  protected final String TEXT_51 = "\");" + NL + "\t\t\timageRegistry.put(key, image);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getText(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_52 = ") {" + NL + "\t\t\t";
  protected final String TEXT_53 = " group = (";
  protected final String TEXT_54 = ") element;" + NL + "\t\t\treturn group.getGroupName();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_55 = ") {" + NL + "\t\t\t";
  protected final String TEXT_56 = " navigatorItem = (";
  protected final String TEXT_57 = ") element;" + NL + "    \t\tif (!isOwnView(navigatorItem.getView())) {" + NL + "    \t\t\treturn super.getText(element);" + NL + "    \t\t}" + NL + "    \t\treturn getText(navigatorItem.getView());" + NL + "\t\t}" + NL + "\t";
  protected final String TEXT_58 = NL + "\t\t// Due to plugin.xml content will be called only for \"own\" views" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_59 = ") {" + NL + "\t\t\t";
  protected final String TEXT_60 = " view = (";
  protected final String TEXT_61 = ") ((";
  protected final String TEXT_62 = ") element).getAdapter(";
  protected final String TEXT_63 = ".class);" + NL + "\t\t\tif (view != null) {" + NL + "\t\t\t\treturn getText(view);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_64 = NL + "\t\treturn super.getText(element);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getText(";
  protected final String TEXT_65 = " view) {" + NL + "\t\tswitch (";
  protected final String TEXT_66 = ".getVisualID(view)) {";
  protected final String TEXT_67 = NL + "\t\tcase ";
  protected final String TEXT_68 = ".VISUAL_ID:" + NL + "\t\t\treturn get";
  protected final String TEXT_69 = "Text(view);";
  protected final String TEXT_70 = NL + "\t\tdefault:" + NL + "\t\t\treturn getUnknownElementText(view);" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_71 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String get";
  protected final String TEXT_72 = "Text(";
  protected final String TEXT_73 = " view) {";
  protected final String TEXT_74 = NL + "\t\t";
  protected final String TEXT_75 = " parser = ";
  protected final String TEXT_76 = ".getInstance().getParser(new ";
  protected final String TEXT_77 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (String.class.equals(adapter)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_78 = ".DESCRIPTION";
  protected final String TEXT_79 = ".getType(";
  protected final String TEXT_80 = ".VISUAL_ID)";
  protected final String TEXT_81 = ";" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (";
  protected final String TEXT_82 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_83 = ".";
  protected final String TEXT_84 = ";" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tif (parser != null) {" + NL + "\t\t\treturn parser.getPrintString(new ";
  protected final String TEXT_85 = "(view.getElement() != null ? view.getElement() : view), ";
  protected final String TEXT_86 = ".NONE.intValue());" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_87 = ".getInstance().logError(\"Parser was not found for label \" + ";
  protected final String TEXT_88 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_89 = NL + "\t\treturn \"";
  protected final String TEXT_90 = "\";";
  protected final String TEXT_91 = NL + "\t\t";
  protected final String TEXT_92 = " domainModelElement = view.getElement();" + NL + "\t\tif (domainModelElement != null) {" + NL + "\t\t\treturn ";
  protected final String TEXT_93 = "String.valueOf(";
  protected final String TEXT_94 = ")";
  protected final String TEXT_95 = ";" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_96 = ".getInstance().logError(\"No domain element for view with visualID = \" + ";
  protected final String TEXT_97 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_98 = NL + "\t\treturn \"\";";
  protected final String TEXT_99 = NL + "\t}";
  protected final String TEXT_100 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUnknownElementText(";
  protected final String TEXT_101 = " view) {" + NL + "\t\treturn \"<UnknownElement Visual_ID = \" + view.getType() + \">\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_102 = " aConfig) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_103 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_104 = " aMemento) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getDescription(Object anElement) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOwnView(";
  protected final String TEXT_105 = " view) {" + NL + "\t\treturn ";
  protected final String TEXT_106 = ".MODEL_ID.equals(";
  protected final String TEXT_107 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_108 = NL;
d360 2
d363 1
a363 1
    stringBuffer.append(TEXT_9);
d365 1
a365 1
    stringBuffer.append(TEXT_10);
d367 1
a367 1
    stringBuffer.append(TEXT_11);
d369 1
a369 1
    stringBuffer.append(TEXT_12);
d371 1
a371 1
    stringBuffer.append(TEXT_13);
d373 1
a373 1
    stringBuffer.append(TEXT_14);
d375 1
a375 1
    stringBuffer.append(TEXT_15);
d377 1
a377 1
    stringBuffer.append(TEXT_16);
a378 2
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d380 1
a380 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d382 1
a382 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d384 1
a384 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d386 1
a386 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d388 1
a388 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d390 10
d401 1
a401 1
    stringBuffer.append(TEXT_24);
d403 1
a403 1
    stringBuffer.append(TEXT_25);
d405 1
a405 1
    stringBuffer.append(TEXT_26);
d407 1
a407 1
    stringBuffer.append(TEXT_27);
d409 1
a409 1
    stringBuffer.append(TEXT_28);
d411 1
a411 1
    stringBuffer.append(TEXT_29);
d413 1
a413 1
    stringBuffer.append(TEXT_30);
d415 1
a415 1
    stringBuffer.append(TEXT_31);
d418 1
a418 1
    stringBuffer.append(TEXT_32);
d420 1
a420 1
    stringBuffer.append(TEXT_33);
d422 1
a422 1
    stringBuffer.append(TEXT_34);
d424 1
a424 1
    stringBuffer.append(TEXT_35);
d429 1
a429 1
    stringBuffer.append(TEXT_36);
d431 1
a431 1
    stringBuffer.append(TEXT_37);
d433 1
a433 1
    stringBuffer.append(TEXT_38);
d436 1
a436 1
    stringBuffer.append(TEXT_39);
d439 1
a439 1
    stringBuffer.append(TEXT_40);
d441 1
a441 1
    stringBuffer.append(TEXT_41);
d444 1
a444 1
    stringBuffer.append(TEXT_42);
d446 1
a446 1
    stringBuffer.append(TEXT_43);
d448 1
a448 1
    stringBuffer.append(TEXT_44);
d450 1
a450 1
    stringBuffer.append(TEXT_45);
d452 1
a452 1
    stringBuffer.append(TEXT_46);
d454 1
a454 1
    stringBuffer.append(TEXT_47);
d456 1
a456 1
    stringBuffer.append(TEXT_48);
d458 1
a458 1
    stringBuffer.append(TEXT_49);
d460 1
a460 1
    stringBuffer.append(TEXT_50);
d462 1
a462 1
    stringBuffer.append(TEXT_51);
d464 1
a464 1
    stringBuffer.append(TEXT_52);
d466 1
a466 1
    stringBuffer.append(TEXT_53);
d468 1
a468 1
    stringBuffer.append(TEXT_54);
d470 1
a470 1
    stringBuffer.append(TEXT_55);
d472 1
a472 1
    stringBuffer.append(TEXT_56);
d474 1
a474 1
    stringBuffer.append(TEXT_57);
d476 1
a476 1
    stringBuffer.append(TEXT_58);
d478 1
a478 1
    stringBuffer.append(TEXT_59);
d480 1
a480 1
    stringBuffer.append(TEXT_60);
d482 1
a482 1
    stringBuffer.append(TEXT_61);
d484 1
a484 1
    stringBuffer.append(TEXT_62);
d486 1
a486 1
    stringBuffer.append(TEXT_63);
d489 1
a489 1
    stringBuffer.append(TEXT_64);
d491 1
a491 1
    stringBuffer.append(TEXT_65);
d493 1
a493 1
    stringBuffer.append(TEXT_66);
d497 1
a497 1
    stringBuffer.append(TEXT_67);
d499 1
a499 1
    stringBuffer.append(TEXT_68);
d501 1
a501 1
    stringBuffer.append(TEXT_69);
d504 1
a504 1
    stringBuffer.append(TEXT_70);
d508 1
a508 1
    stringBuffer.append(TEXT_71);
d510 1
a510 1
    stringBuffer.append(TEXT_72);
d512 1
a512 1
    stringBuffer.append(TEXT_73);
d544 1
a544 1
    stringBuffer.append(TEXT_74);
d546 1
a546 1
    stringBuffer.append(TEXT_75);
d548 1
a548 1
    stringBuffer.append(TEXT_76);
d550 1
a550 1
    stringBuffer.append(TEXT_77);
d555 1
a555 1
    stringBuffer.append(TEXT_78);
d560 1
a560 1
    stringBuffer.append(TEXT_79);
d562 1
a562 1
    stringBuffer.append(TEXT_80);
d565 1
a565 1
    stringBuffer.append(TEXT_81);
d567 1
a567 1
    stringBuffer.append(TEXT_82);
d569 1
a569 1
    stringBuffer.append(TEXT_83);
d571 1
a571 1
    stringBuffer.append(TEXT_84);
d573 1
a573 1
    stringBuffer.append(TEXT_85);
d575 1
a575 1
    stringBuffer.append(TEXT_86);
d577 1
a577 1
    stringBuffer.append(TEXT_87);
d579 1
a579 1
    stringBuffer.append(TEXT_88);
d582 1
a582 1
    stringBuffer.append(TEXT_89);
d584 1
a584 1
    stringBuffer.append(TEXT_90);
d601 1
a601 1
    stringBuffer.append(TEXT_91);
d603 1
a603 1
    stringBuffer.append(TEXT_92);
d605 1
a605 1
    stringBuffer.append(TEXT_93);
d609 1
a609 1
    stringBuffer.append(TEXT_94);
d611 1
a611 1
    stringBuffer.append(TEXT_95);
d613 1
a613 1
    stringBuffer.append(TEXT_96);
d615 1
a615 1
    stringBuffer.append(TEXT_97);
d618 1
a618 1
    stringBuffer.append(TEXT_98);
d621 1
a621 1
    stringBuffer.append(TEXT_99);
d624 1
a624 1
    stringBuffer.append(TEXT_100);
d626 1
a626 1
    stringBuffer.append(TEXT_101);
d628 1
a628 1
    stringBuffer.append(TEXT_102);
d630 1
a630 1
    stringBuffer.append(TEXT_103);
d632 1
a632 1
    stringBuffer.append(TEXT_104);
d634 1
a634 1
    stringBuffer.append(TEXT_105);
d636 1
a636 1
    stringBuffer.append(TEXT_106);
d638 1
a638 1
    stringBuffer.append(TEXT_107);
d640 1
a640 1
    stringBuffer.append(TEXT_108);
@


1.3
log
@#161380 simplify feature model facets
@
text
@d38 6
a43 6
  protected final String TEXT_18 = " getImage(Object element) {" + NL + "\t\tif (false == element instanceof ";
  protected final String TEXT_19 = ") {" + NL + "\t\t\treturn super.getImage(element);" + NL + "\t\t}" + NL + "\t\t" + NL + "   \t\t";
  protected final String TEXT_20 = " abstractNavigatorItem = (";
  protected final String TEXT_21 = ") element;" + NL + "\t\tif (!";
  protected final String TEXT_22 = ".MODEL_ID.equals(abstractNavigatorItem.getModelID())) {" + NL + "\t\t\treturn super.getImage(element);" + NL + "\t\t}" + NL + "\t" + NL + "\t\tif (abstractNavigatorItem instanceof ";
  protected final String TEXT_23 = ") {" + NL + "   \t\t\t";
d45 84
a128 70
  protected final String TEXT_25 = ") abstractNavigatorItem;" + NL + "\t\t\tswitch (navigatorItem.getVisualID()) {";
  protected final String TEXT_26 = NL + "\t\t\tcase ";
  protected final String TEXT_27 = ".VISUAL_ID:" + NL + "\t\t\t\treturn getImage(\"";
  protected final String TEXT_28 = "\", ";
  protected final String TEXT_29 = ".";
  protected final String TEXT_30 = "null";
  protected final String TEXT_31 = ");";
  protected final String TEXT_32 = NL + "\t\t\t\tdefault:" + NL + "\t\t\t\t\treturn getImage(\"";
  protected final String TEXT_33 = "\", null);" + NL + "\t\t\t}" + NL + "\t\t} else if (abstractNavigatorItem instanceof ";
  protected final String TEXT_34 = ") {" + NL + "\t\t\t";
  protected final String TEXT_35 = " group = (";
  protected final String TEXT_36 = ") element;" + NL + "\t\t\treturn ";
  protected final String TEXT_37 = ".getInstance().getBundledImage(group.getIcon());" + NL + "\t\t}" + NL + "\t\treturn super.getImage(element);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_38 = " getImage(String key, ";
  protected final String TEXT_39 = " elementType) {" + NL + "\t\t";
  protected final String TEXT_40 = " imageRegistry = ";
  protected final String TEXT_41 = ".getInstance().getImageRegistry();" + NL + "\t\t";
  protected final String TEXT_42 = " image = imageRegistry.get(key);" + NL + "\t\tif (image == null && elementType != null && ";
  protected final String TEXT_43 = ".isKnownElementType(elementType)) {" + NL + "\t\t\timage = ";
  protected final String TEXT_44 = ".getImage(elementType);" + NL + "\t\t\timageRegistry.put(key, image);" + NL + "\t\t}" + NL + "\t\t\t" + NL + "\t\tif (image == null) {" + NL + "\t\t\timage = imageRegistry.get(\"";
  protected final String TEXT_45 = "\");" + NL + "\t\t\timageRegistry.put(key, image);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getText(Object element) {" + NL + "\t\tif (false == element instanceof ";
  protected final String TEXT_46 = ") {" + NL + "\t\t\treturn super.getText(element);" + NL + "\t\t}" + NL + "\t\t" + NL + "   \t\t";
  protected final String TEXT_47 = " abstractNavigatorItem = (";
  protected final String TEXT_48 = ") element;" + NL + "\t\tif (!";
  protected final String TEXT_49 = ".MODEL_ID.equals(abstractNavigatorItem.getModelID())) {" + NL + "\t\t\treturn super.getText(element);" + NL + "\t\t}" + NL + "\t" + NL + "\t\tif (abstractNavigatorItem instanceof ";
  protected final String TEXT_50 = ") {" + NL + "\t\t\t";
  protected final String TEXT_51 = " navigatorItem = (";
  protected final String TEXT_52 = ") abstractNavigatorItem;" + NL + "\t\t\tswitch (navigatorItem.getVisualID()) {";
  protected final String TEXT_53 = NL + "\t\t\tcase ";
  protected final String TEXT_54 = ".VISUAL_ID:" + NL + "\t\t\t\treturn get";
  protected final String TEXT_55 = "Text(navigatorItem.getView());";
  protected final String TEXT_56 = NL + "\t\t\tdefault:" + NL + "\t\t\t\treturn getUnknownElementText(navigatorItem.getView());" + NL + "\t\t\t}" + NL + "\t\t} else if (abstractNavigatorItem instanceof ";
  protected final String TEXT_57 = ") {" + NL + "\t\t\t";
  protected final String TEXT_58 = " group = (";
  protected final String TEXT_59 = ") element;" + NL + "\t\t\treturn group.getGroupName();" + NL + "\t\t}" + NL + "\t\treturn super.getText(element);" + NL + "\t}" + NL;
  protected final String TEXT_60 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String get";
  protected final String TEXT_61 = "Text(";
  protected final String TEXT_62 = " view) {";
  protected final String TEXT_63 = NL + "\t\t";
  protected final String TEXT_64 = " parser = ";
  protected final String TEXT_65 = ".getInstance().getParser(new ";
  protected final String TEXT_66 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (String.class.equals(adapter)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_67 = ".DESCRIPTION";
  protected final String TEXT_68 = ".getType(";
  protected final String TEXT_69 = ".VISUAL_ID)";
  protected final String TEXT_70 = ";" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (";
  protected final String TEXT_71 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_72 = ".";
  protected final String TEXT_73 = ";" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tif (parser != null) {" + NL + "\t\t\treturn parser.getPrintString(new ";
  protected final String TEXT_74 = "(view.getElement() != null ? view.getElement() : view), ";
  protected final String TEXT_75 = ".NONE.intValue());" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_76 = ".getInstance().logError(\"Parser was not found for label \" + ";
  protected final String TEXT_77 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_78 = NL + "\t\treturn \"";
  protected final String TEXT_79 = "\";";
  protected final String TEXT_80 = NL + "\t\t";
  protected final String TEXT_81 = " domainModelElement = view.getElement();" + NL + "\t\tif (domainModelElement != null) {" + NL + "\t\t\treturn ";
  protected final String TEXT_82 = "String.valueOf(";
  protected final String TEXT_83 = ")";
  protected final String TEXT_84 = ";" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_85 = ".getInstance().logError(\"No domain element for view with visualID = \" + ";
  protected final String TEXT_86 = ");" + NL + "\t\t\treturn \"\";" + NL + "\t\t}";
  protected final String TEXT_87 = NL + "\t\treturn \"\";";
  protected final String TEXT_88 = NL + "\t}";
  protected final String TEXT_89 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUnknownElementText(";
  protected final String TEXT_90 = " view) {" + NL + "\t\treturn \"<UnknownElement Visual_ID = \" + view.getType() + \">\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_91 = " aConfig) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_92 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_93 = " aMemento) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getDescription(Object anElement) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_94 = NL;
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d389 1
a389 4
    for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {
		RegistryKey registryKey = new RegistryKey(nextCommonBase);
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
d393 1
a393 1
    stringBuffer.append(registryKey.getKey());
d395 1
a395 2
    if (nextCommonBase.getElementType() != null) {
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d397 1
a397 2
    stringBuffer.append(nextCommonBase.getUniqueIdentifier());
    } else {
d399 1
a399 1
    }
d401 1
a401 1
    	}
d404 1
a404 1
    stringBuffer.append(unknownElementKey);
d406 1
a406 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d408 1
a408 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d410 4
a413 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d419 2
a420 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d422 2
a423 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageRegistry"));
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d427 2
a428 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d430 1
a430 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d432 1
a432 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d434 1
a434 1
    stringBuffer.append(notFoundElementKey);
d436 1
a436 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d438 1
a438 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d440 1
a440 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d442 1
a442 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d444 10
d455 1
a455 1
    stringBuffer.append(TEXT_50);
d457 1
a457 1
    stringBuffer.append(TEXT_51);
d459 20
a478 1
    stringBuffer.append(TEXT_52);
d482 1
a482 1
    stringBuffer.append(TEXT_53);
d484 1
a484 1
    stringBuffer.append(TEXT_54);
d486 1
a486 1
    stringBuffer.append(TEXT_55);
d489 1
a489 7
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_59);
d493 1
a493 1
    stringBuffer.append(TEXT_60);
d495 1
a495 1
    stringBuffer.append(TEXT_61);
d497 1
a497 1
    stringBuffer.append(TEXT_62);
d529 1
a529 1
    stringBuffer.append(TEXT_63);
d531 1
a531 1
    stringBuffer.append(TEXT_64);
d533 1
a533 1
    stringBuffer.append(TEXT_65);
d535 1
a535 1
    stringBuffer.append(TEXT_66);
d540 1
a540 1
    stringBuffer.append(TEXT_67);
d545 1
a545 1
    stringBuffer.append(TEXT_68);
d547 1
a547 1
    stringBuffer.append(TEXT_69);
d550 1
a550 1
    stringBuffer.append(TEXT_70);
d552 1
a552 1
    stringBuffer.append(TEXT_71);
d554 1
a554 1
    stringBuffer.append(TEXT_72);
d556 1
a556 1
    stringBuffer.append(TEXT_73);
d558 1
a558 1
    stringBuffer.append(TEXT_74);
d560 1
a560 1
    stringBuffer.append(TEXT_75);
d562 1
a562 1
    stringBuffer.append(TEXT_76);
d564 1
a564 1
    stringBuffer.append(TEXT_77);
d567 1
a567 1
    stringBuffer.append(TEXT_78);
d569 1
a569 1
    stringBuffer.append(TEXT_79);
d586 1
a586 1
    stringBuffer.append(TEXT_80);
d588 1
a588 1
    stringBuffer.append(TEXT_81);
d590 1
a590 1
    stringBuffer.append(TEXT_82);
d594 1
a594 1
    stringBuffer.append(TEXT_83);
d596 1
a596 1
    stringBuffer.append(TEXT_84);
d598 1
a598 1
    stringBuffer.append(TEXT_85);
d600 1
a600 1
    stringBuffer.append(TEXT_86);
d603 1
a603 1
    stringBuffer.append(TEXT_87);
d606 1
a606 1
    stringBuffer.append(TEXT_88);
d609 1
a609 1
    stringBuffer.append(TEXT_89);
d611 1
a611 1
    stringBuffer.append(TEXT_90);
d613 1
a613 1
    stringBuffer.append(TEXT_91);
d615 1
a615 1
    stringBuffer.append(TEXT_92);
d617 7
a623 1
    stringBuffer.append(TEXT_93);
d625 1
a625 1
    stringBuffer.append(TEXT_94);
@


1.2
log
@Bracket replaced.
@
text
@d307 1
a307 1
		if (modelFacet instanceof CompositeFeatureLabelModelFacet) {
d309 1
a309 1
			for (Iterator it = ((CompositeFeatureLabelModelFacet) genLabel).getMetaFeatures().iterator(); it.hasNext();) {
a312 2
		} else if (modelFacet instanceof FeatureLabelModelFacet) {
			return getKeyFragment(((FeatureLabelModelFacet) modelFacet).getMetaFeature());
@


1.1
log
@Read-only properties provided into the navigator.
@
text
@d103 1
a103 1
  protected final String TEXT_83 = "}";
@

